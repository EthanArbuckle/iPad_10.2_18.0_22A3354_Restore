int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervals<JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &)#1} &,JSC::B3::Air::Tmp*,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  int *result;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  unint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  int v37;
  unsigned int v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned int v41;

  v13 = *a6;
  v14 = *a5;
  v15 = -*a5;
  v16 = 96;
  if (*a5 <= 0)
    v17 = 96;
  else
    v17 = 80;
  v18 = *(_QWORD *)(v13 + v17);
  if (v14 > 0)
    v15 = *a5;
  v19 = *(_QWORD *)(v18 + 40 * v15);
  v20 = *a4;
  if (*a4 > 0)
    v16 = 80;
  v21 = *(_QWORD *)(v13 + v16);
  if (v20 <= 0)
    v22 = -v20;
  else
    v22 = *a4;
  if (v19 < *(_QWORD *)(v21 + 40 * v22))
  {
    v23 = (_QWORD *)(v13 + 80);
    v24 = (_QWORD *)(v13 + 96);
    *a4 = v14;
    *a5 = v20;
    v25 = *a3;
    v26 = -*a4;
    if (*a4 <= 0)
    {
      v27 = v24;
    }
    else
    {
      v26 = *a4;
      v27 = v23;
    }
    v28 = *(_QWORD *)(*v27 + 40 * v26);
    v29 = -v25;
    if (v25 <= 0)
    {
      v30 = v24;
    }
    else
    {
      v29 = *a3;
      v30 = v23;
    }
    if (v28 < *(_QWORD *)(*v30 + 40 * v29))
    {
      *a3 = *a4;
      *a4 = v25;
      v31 = *a2;
      v32 = -*a3;
      if (*a3 <= 0)
      {
        v33 = v24;
      }
      else
      {
        v32 = *a3;
        v33 = v23;
      }
      v34 = *(_QWORD *)(*v33 + 40 * v32);
      v35 = -v31;
      if (v31 <= 0)
      {
        v36 = v24;
      }
      else
      {
        v35 = *a2;
        v36 = v23;
      }
      if (v34 < *(_QWORD *)(*v36 + 40 * v35))
      {
        *a2 = *a3;
        *a3 = v31;
        v37 = *a1;
        v38 = -*a2;
        if (*a2 <= 0)
        {
          v39 = v24;
        }
        else
        {
          v38 = *a2;
          v39 = v23;
        }
        v40 = *(_QWORD *)(*v39 + 40 * v38);
        v41 = -v37;
        if (v37 <= 0)
          v23 = v24;
        else
          v41 = *a1;
        if (v40 < *(_QWORD *)(*v23 + 40 * v41))
        {
          *a1 = *a2;
          *a2 = v37;
        }
      }
    }
  }
  return result;
}

int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervals<JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &)#1} &,JSC::B3::Air::Tmp*>(int *result, int *a2, int *a3, uint64_t a4)
{
  int v4;
  int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;

  v4 = *a2;
  v5 = *result;
  v6 = (_QWORD *)(a4 + 80);
  v7 = -*a2;
  if (*a2 > 0)
    v7 = *a2;
  v8 = 96;
  if (v4 <= 0)
    v9 = 96;
  else
    v9 = 80;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + v9) + 40 * v7);
  v11 = -v5;
  if (v5 <= 0)
  {
    v12 = 96;
  }
  else
  {
    v11 = *result;
    v12 = 80;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + v12) + 40 * v11);
  v14 = *a3;
  if (*a3 > 0)
    v8 = 80;
  v15 = *(_QWORD *)(a4 + v8);
  if (v14 <= 0)
    v16 = -v14;
  else
    v16 = *a3;
  v17 = *(_QWORD *)(v15 + 40 * v16);
  if (v10 >= v13)
  {
    if (v17 < v10)
    {
      *a2 = v14;
      *a3 = v4;
      v18 = *a2;
      v19 = *result;
      v20 = -*a2;
      if (*a2 > 0)
        v20 = *a2;
      if (v18 <= 0)
        v21 = (_QWORD *)(a4 + 96);
      else
        v21 = (_QWORD *)(a4 + 80);
      v22 = *(_QWORD *)(*v21 + 40 * v20);
      v23 = -v19;
      if (v19 <= 0)
        v6 = (_QWORD *)(a4 + 96);
      else
        v23 = *result;
      if (v22 < *(_QWORD *)(*v6 + 40 * v23))
      {
        *result = v18;
        *a2 = v19;
      }
    }
  }
  else
  {
    if (v17 < v10)
    {
      *result = v14;
LABEL_34:
      *a3 = v5;
      return result;
    }
    *result = v4;
    *a2 = v5;
    v24 = *a3;
    v25 = -*a3;
    if (*a3 > 0)
      v25 = *a3;
    if (v24 <= 0)
      v6 = (_QWORD *)(a4 + 96);
    if (*(_QWORD *)(*v6 + 40 * v25) < v13)
    {
      *a2 = v24;
      goto LABEL_34;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervals<JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &)#1} &,JSC::B3::Air::Tmp*>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  int *v36;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v9 = *(a2 - 1);
      v10 = -v9;
      v11 = 96;
      if (v9 <= 0)
        v12 = 96;
      else
        v12 = 80;
      v13 = *(_QWORD *)(v8 + v12);
      if (v9 > 0)
        v10 = *(a2 - 1);
      v14 = *(_QWORD *)(v13 + 40 * v10);
      v15 = *a1;
      if (*a1 > 0)
        v11 = 80;
      v16 = *(_QWORD *)(v8 + v11);
      if (v15 <= 0)
        v17 = -v15;
      else
        v17 = *a1;
      if (v14 < *(_QWORD *)(v16 + 40 * v17))
      {
        *a1 = v9;
        *(a2 - 1) = v15;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v18 = a1 + 2;
      v19 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v20 = 0;
      v21 = *a3 + 80;
      v22 = *a3 + 96;
      v23 = 12;
      break;
  }
  while (1)
  {
    v24 = *v19;
    v25 = *v18;
    v26 = *v18;
    v27 = -*v19;
    if (*v19 <= 0)
    {
      v28 = (_QWORD *)v22;
    }
    else
    {
      v27 = *v19;
      v28 = (_QWORD *)v21;
    }
    v29 = *(_QWORD *)(*v28 + 40 * v27);
    if (v25 > 0)
    {
      v30 = (_QWORD *)v21;
    }
    else
    {
      v25 = -v25;
      v30 = (_QWORD *)v22;
    }
    if (v29 < *(_QWORD *)(*v30 + 40 * v25))
    {
      v31 = v23;
      while (1)
      {
        *(int *)((char *)a1 + v31) = v26;
        v32 = v31 - 4;
        if (v31 == 4)
          break;
        v26 = *(int *)((char *)a1 + v31 - 8);
        v33 = -v26;
        if (v26 <= 0)
        {
          v34 = (_QWORD *)v22;
        }
        else
        {
          v33 = v26;
          v34 = (_QWORD *)v21;
        }
        v35 = *(_QWORD *)(*v34 + 40 * v33);
        v31 = v32;
        if (v29 >= v35)
        {
          v36 = (int *)((char *)a1 + v32);
          goto LABEL_31;
        }
      }
      v36 = a1;
LABEL_31:
      *v36 = v24;
      if (++v20 == 8)
        return v19 + 1 == a2;
    }
    v18 = v19;
    v23 += 4;
    if (++v19 == a2)
      return 1;
  }
}

int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervals<JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &)#1} &,JSC::B3::Air::Tmp*>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  int *result;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;

  v11 = *a5;
  v12 = *a4;
  v13 = -*a4;
  v14 = 96;
  if (*a4 <= 0)
    v15 = 96;
  else
    v15 = 80;
  v16 = *(_QWORD *)(v11 + v15);
  if (v12 > 0)
    v13 = *a4;
  v17 = *(_QWORD *)(v16 + 40 * v13);
  v18 = *a3;
  if (*a3 > 0)
    v14 = 80;
  v19 = *(_QWORD *)(v11 + v14);
  if (v18 <= 0)
    v20 = -v18;
  else
    v20 = *a3;
  if (v17 < *(_QWORD *)(v19 + 40 * v20))
  {
    v21 = (_QWORD *)(v11 + 80);
    v22 = (_QWORD *)(v11 + 96);
    *a3 = v12;
    *a4 = v18;
    v23 = *a2;
    v24 = -*a3;
    if (*a3 <= 0)
    {
      v25 = v22;
    }
    else
    {
      v24 = *a3;
      v25 = v21;
    }
    v26 = *(_QWORD *)(*v25 + 40 * v24);
    v27 = -v23;
    if (v23 <= 0)
    {
      v28 = v22;
    }
    else
    {
      v27 = *a2;
      v28 = v21;
    }
    if (v26 < *(_QWORD *)(*v28 + 40 * v27))
    {
      *a2 = *a3;
      *a3 = v23;
      v29 = *a1;
      v30 = -*a2;
      if (*a2 <= 0)
      {
        v31 = v22;
      }
      else
      {
        v30 = *a2;
        v31 = v21;
      }
      v32 = *(_QWORD *)(*v31 + 40 * v30);
      v33 = -v29;
      if (v29 <= 0)
        v21 = v22;
      else
        v33 = *a1;
      if (v32 < *(_QWORD *)(*v21 + 40 * v33))
      {
        *a1 = *a2;
        *a2 = v29;
      }
    }
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::LinearScan::run(void)::{lambda(JSC::B3::Bank)#1}::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unint64_t *v10;
  unint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  unint64_t v14;
  JSC::B3::Air::Tmp *v15;
  JSC::B3::Air::Tmp *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  JSC::B3::Air::Arg **v33;
  JSC::B3::Air::Arg **v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::B3::Air::Arg **v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  JSC::B3::Air::Arg **v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::B3::Air::Arg **v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  BOOL v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  uint64_t *v155;
  int v156;
  JSC::B3::Air::Tmp *v157;
  uint64_t v158;
  unsigned int v159;
  unint64_t v160;
  JSC::B3::Air::Tmp *v161;
  unint64_t *v162;
  uint64_t v163;
  unint64_t *v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  JSC::B3::Air::Arg **v168;

  v8 = a2;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v10 = (unint64_t *)(a1 + 160);
  v11 = *(_QWORD *)(a1 + 176);
  if (v11)
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v12 = (int8x16_t *)(a1 + 192);
  v167 = 0;
  v13 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *(JSC::B3::Air::Tmp **)(a1 + 144);
    v16 = (JSC::B3::Air::Tmp *)((char *)v15 + 4 * v13);
    v17 = v8;
    v18 = (uint64_t *)(a1 + 80);
    v19 = (uint64_t *)(a1 + 96);
    v155 = (uint64_t *)(a1 + 8 * v8 + 40);
    v157 = v16;
    v158 = a1 + 16 * v8 + 8;
    v164 = v10;
    v156 = v8;
    while (1)
    {
      v20 = *(_DWORD *)v15;
      if (v17 != *(_DWORD *)v15 >> 31)
        goto LABEL_145;
      if (v20 > 0)
      {
        v21 = v18;
      }
      else
      {
        v20 = -v20;
        v21 = v19;
      }
      v22 = *v21;
      v23 = v20;
      v162 = (unint64_t *)(*v21 + 40 * v20);
      v24 = *v162;
      v166 = *v162;
      v163 = v22;
      if (BYTE4(qword_1ECF4C688))
      {
        WTF::dataLog<char [8],unsigned long,char [3],JSC::B3::Air::Tmp,char [2]>(&v166, v15);
        WTF::dataLog<char [18],unsigned long,char [2]>(&v167);
        v25 = *(unsigned int *)(*(_QWORD *)a1 + 108);
        if (!(_DWORD)v25)
          goto LABEL_203;
        v26 = 0;
        v27 = *(unsigned int ***)(*(_QWORD *)a1 + 96);
        v28 = *v27;
        while (!v27[v26])
        {
          if (v25 == ++v26)
            goto LABEL_16;
        }
        if ((_DWORD)v25 == (_DWORD)v26)
        {
LABEL_16:
          v29 = *(_QWORD *)(a1 + 64);
          goto LABEL_26;
        }
        v30 = v26;
        do
        {
          if (v25 <= v30)
          {
            __break(0xC471u);
            JUMPOUT(0x198043CF4);
          }
          v29 = *(_QWORD *)(a1 + 64);
          if (*(_QWORD *)(v29 + 8 * *v27[v30]) > v24)
            break;
          v28 = v27[v30++];
          if (v25 > v30)
          {
            while (!v27[v30])
            {
              if (v25 == ++v30)
                goto LABEL_26;
            }
            v30 = v30;
          }
        }
        while (v25 != v30);
LABEL_26:
        v165 = 0;
        v31 = v24 - *(_QWORD *)(v29 + 8 * *v28) + 1;
        v165 = v31 >> 1;
        v168 = (JSC::B3::Air::Arg **)v28;
        WTF::dataLog<char [7],WTF::PointerDump<JSC::B3::Air::BasicBlock>,char [15],unsigned int,char [2]>((uint64_t *)&v168, &v165);
        v32 = (v31 >> 1) - 1;
        if (v28[5] <= v32)
          v33 = 0;
        else
          v33 = (JSC::B3::Air::Arg **)(*((_QWORD *)v28 + 1) + (v32 << 7));
        v168 = v33;
        WTF::dataLog<char [11],WTF::PointerDump<JSC::B3::Air::Inst>,char [2]>("    Prev: ", &v168);
        if (v28[5] <= (v31 >> 1))
          v34 = 0;
        else
          v34 = (JSC::B3::Air::Arg **)(*((_QWORD *)v28 + 1) + ((unint64_t)(v31 >> 1) << 7));
        v168 = v34;
        WTF::dataLog<char [11],WTF::PointerDump<JSC::B3::Air::Inst>,char [2]>("    Next: ", &v168);
        WTF::dataLog<char [16]>("  Active:\n");
        v35 = *(_QWORD *)(a1 + 160);
        v36 = *(_QWORD *)(a1 + 168);
        while (v36 != v35)
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v35);
          LODWORD(v168) = v37;
          v38 = v37 <= 0;
          if (v37 <= 0)
            v37 = -v37;
          v39 = 96;
          if (!v38)
            v39 = 80;
          v40 = *(unsigned int *)(a1 + 184);
          v35 += v40 + 1;
          do
            v35 -= v40;
          while (v35 >= v40);
        }
        v19 = (uint64_t *)(a1 + 96);
        v18 = (uint64_t *)(a1 + 80);
        v22 = v163;
      }
      v42 = *(_QWORD *)(a1 + 160);
      v41 = *(_QWORD *)(a1 + 168);
      if (v42 != v41)
      {
        v43 = *(_QWORD *)(a1 + 176);
        do
        {
          v44 = *(_DWORD *)(v43 + 4 * v42);
          v45 = -v44;
          if (v44 <= 0)
          {
            v46 = v19;
          }
          else
          {
            v45 = *(_DWORD *)(v43 + 4 * v42);
            v46 = v18;
          }
          v47 = *v46;
          if (*(_QWORD *)(v47 + 40 * v45 + 8) > v24)
            break;
          if (v42 == *(unsigned int *)(a1 + 184) - 1)
            v42 = 0;
          else
            ++v42;
          *(_QWORD *)(a1 + 160) = v42;
          v48 = *(_BYTE *)(v47 + 40 * v45 + 32) & 0x7F;
          if (v48 >= 0x40)
            goto LABEL_193;
          *v12 = vandq_s8(*v12, (int8x16_t)vdupq_n_s64(~(1 << v48)));
        }
        while (v42 != v41);
      }
      v49 = v22 + 40 * v23;
      v51 = *(unsigned __int8 *)(v49 + 34);
      v50 = (_BYTE *)(v49 + 34);
      if (!v51)
      {
        v52 = *(unsigned int *)(a1 + 140);
        if (v14 < v52)
        {
          v53 = *(_QWORD *)(a1 + 128);
          if (*(_QWORD *)(v53 + 24 * v14) < v24)
          {
            v54 = (unint64_t *)(v53 + 24 * v14 + 24);
            while (v52 - 1 != v14)
            {
              v55 = *v54;
              v54 += 3;
              ++v14;
              if (v55 >= v24)
                goto LABEL_61;
            }
            v14 = *(unsigned int *)(a1 + 140);
          }
LABEL_61:
          v167 = v14;
        }
        v56 = *v155;
        if (*v155)
        {
          v57 = 0;
          do
          {
            v57 |= v56 & -v56;
            v56 &= v56 - 1;
          }
          while (v56);
        }
        else
        {
          v57 = 0;
        }
        v38 = v52 > v14;
        v58 = v52 - v14;
        if (v38)
        {
          v59 = v162[1];
          v60 = (_QWORD *)(*(_QWORD *)(a1 + 128) + 24 * v14 + 16);
          do
          {
            if (*(v60 - 2) >= v59)
              break;
            v61 = *(v60 - 1);
            *v60 |= v61;
            v60 += 3;
            v57 &= ~v61;
            --v58;
          }
          while (v58);
        }
        *(_QWORD *)(v22 + 40 * v23 + 24) = v57;
        *v50 = 1;
      }
      if (BYTE4(qword_1ECF4C688))
      {
        WTF::dataLog<char [18],JSC::ScalarRegisterSet,char [2]>((uint64_t *)(v22 + 40 * v23 + 24));
        v19 = (uint64_t *)(a1 + 96);
        v18 = (uint64_t *)(a1 + 80);
      }
      v62 = *(_QWORD *)(a1 + 160);
      v63 = *(_QWORD *)(a1 + 168);
      v64 = v63;
      if (v62 > v63)
        v64 = v63 + *(unsigned int *)(a1 + 184);
      v65 = v64 - v62;
      v66 = *(unsigned int *)(v158 + 12);
      if (v65 == v66 || !(_DWORD)v66)
        break;
      v67 = *(char **)v158;
      while (1)
      {
        v68 = *v67;
        if ((*v67 & 0x7Fu) >= 0x40uLL)
          goto LABEL_193;
        v69 = 1 << (*v67 & 0x7F);
        if ((v12->i64[0] & v69) == 0 && (*(_QWORD *)(v22 + 40 * v23 + 24) & v69) != 0)
          break;
        ++v67;
        if (!--v66)
          goto LABEL_84;
      }
      v121 = *(_DWORD *)v15;
      if (*(int *)v15 <= 0)
        v122 = -v121;
      else
        v122 = *(_DWORD *)v15;
      if (v121 <= 0)
        v123 = v19;
      else
        v123 = v18;
      v124 = *v123;
      if (*(_QWORD *)(v124 + 40 * v122 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x198043CACLL);
      }
      *(_BYTE *)(v124 + 40 * v122 + 32) = v68;
      if ((v68 & 0x40) != 0)
        goto LABEL_193;
      *(_QWORD *)(a1 + 192) |= 1 << v68;
      v19 = (uint64_t *)(a1 + 96);
      v18 = (uint64_t *)(a1 + 80);
      v17 = v156;
      v16 = v157;
LABEL_145:
      v15 = (JSC::B3::Air::Tmp *)((char *)v15 + 4);
      if (v15 == v16)
        return;
    }
LABEL_84:
    v159 = v23;
    v160 = v14;
    v161 = v15;
    if (v62 > v63)
      LODWORD(v63) = v63 + *(_DWORD *)(a1 + 184);
    v70 = v63 - v62;
    if ((_DWORD)v63 != (_DWORD)v62)
    {
      v71 = 0;
      v72 = 0;
      v73 = (_QWORD *)(v163 + 40 * v23 + 24);
      while (1)
      {
        v74 = *(_QWORD *)(a1 + 168);
        if (v62 == v74)
          goto LABEL_203;
        if (!v74)
          v74 = *(unsigned int *)(a1 + 184);
        v75 = v74 - 1;
        v76 = *(_QWORD *)(a1 + 176);
        v77 = *(_DWORD *)(v76 + 4 * (v74 - 1));
        *(_QWORD *)(a1 + 168) = v74 - 1;
        v78 = -v77;
        if (v77 <= 0)
        {
          v79 = 96;
        }
        else
        {
          v78 = v77;
          v79 = 80;
        }
        if (v77 <= 0)
          v80 = v19;
        else
          v80 = v18;
        v81 = v78;
        v82 = *(_BYTE *)(*(_QWORD *)(a1 + v79) + 40 * v78 + 32) & 0x7F;
        if (v82 >= 0x40)
          goto LABEL_193;
        if (((*v73 >> v82) & 1) != 0)
          break;
        if (!v62 && (v62 = *(unsigned int *)(a1 + 184), v74 == 1))
        {
          if (!*(_DWORD *)(a1 + 184))
          {
LABEL_102:
            WTF::Deque<JSC::B3::Air::Tmp,0ul>::expandCapacity(v164);
            v19 = (uint64_t *)(a1 + 96);
            v18 = (uint64_t *)(a1 + 80);
            v62 = *v164;
            if (!*v164)
              v62 = *(unsigned int *)(a1 + 184);
          }
        }
        else if (v74 == v62)
        {
          goto LABEL_102;
        }
        ++v72;
        *(_QWORD *)(a1 + 160) = --v62;
        *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v62) = v77;
        --v71;
        if (v70 == v72)
          goto LABEL_137;
      }
      if (v72)
      {
        while (1)
        {
          v83 = *v164;
          if (*v164 == v75)
          {
            __break(0xC471u);
            JUMPOUT(0x198043C2CLL);
          }
          v84 = *(_DWORD *)(v76 + 4 * v83);
          v85 = *(unsigned int *)(a1 + 184);
          v86 = v83 == v85 - 1 ? 0 : v83 + 1;
          *(_QWORD *)(a1 + 160) = v86;
          if (v86)
            break;
          if (v75)
          {
            if (v75 != v85 - 1)
              goto LABEL_121;
LABEL_120:
            WTF::Deque<JSC::B3::Air::Tmp,0ul>::expandCapacity(v164);
            v19 = (uint64_t *)(a1 + 96);
            v18 = (uint64_t *)(a1 + 80);
            v75 = *(_QWORD *)(a1 + 168);
            v76 = *(_QWORD *)(a1 + 176);
            goto LABEL_121;
          }
          if (!(_DWORD)v85)
            goto LABEL_120;
          v75 = 0;
LABEL_121:
          *(_DWORD *)(v76 + 4 * v75) = v84;
          if (v75 == *(unsigned int *)(a1 + 184) - 1)
            v75 = 0;
          else
            ++v75;
          *(_QWORD *)(a1 + 168) = v75;
          v144 = __CFADD__(v71++, 1);
          if (v144)
            goto LABEL_126;
        }
        if (v75 + 1 != v86)
          goto LABEL_121;
        goto LABEL_120;
      }
LABEL_126:
      if (v77)
      {
        v87 = *v80;
        v88 = *(unsigned __int8 *)(*v80 + 40 * v81 + 32);
        if ((~v88 & 0x7F) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198043C6CLL);
        }
        if (*(_BYTE *)(v87 + 40 * v81 + 33)
          || !*(_BYTE *)(v163 + 40 * v159 + 33) && *(_QWORD *)(v87 + 40 * v81 + 8) <= v162[1])
        {
          v15 = v161;
          v89 = *(_DWORD *)v161;
          if (*(int *)v161 > 0)
          {
            v90 = v18;
          }
          else
          {
            v89 = -v89;
            v90 = v19;
          }
          v91 = *v90;
          v92 = v89;
          v12 = (int8x16_t *)(a1 + 192);
          if (*(_BYTE *)(*v90 + 40 * v89 + 33))
          {
            __break(0xC471u);
            JUMPOUT(0x198043C8CLL);
          }
          v93 = *(_QWORD *)a1;
          v94 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v94 = 8;
          *(_BYTE *)(v94 + 4) = 1;
          *(_DWORD *)(v94 + 8) = -1;
          *(_QWORD *)(v94 + 16) = 0;
          v168 = (JSC::B3::Air::Arg **)v94;
          v102 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v93 + 64, (uint64_t *)&v168);
          v103 = v168;
          v168 = 0;
          if (v103)
            WTF::fastFree((unint64_t)v103, v95, v96, v97, v98, v99, v100, v101);
          if (*(_BYTE *)(v93 + 196))
          {
            v148 = *(_DWORD *)v102;
            if (*(_DWORD *)v102 < 2u)
            {
              v150 = 1;
            }
            else
            {
              v149 = 8;
              if (v148 <= 4)
                v149 = 4;
              v145 = v148 == 2;
              v150 = 2;
              if (!v145)
                v150 = v149;
            }
            v151 = (v150 + 7 + *(_DWORD *)(v93 + 184)) & -v150;
            *(_QWORD *)(v102 + 16) = -(uint64_t)v151;
            *(_DWORD *)(v93 + 184) = (v151 + 15) & 0xFFFFFFF0;
            v15 = v161;
            v12 = (int8x16_t *)(a1 + 192);
          }
          v104 = v91 + 40 * v92;
          *(_QWORD *)(v104 + 16) = v102;
          *(_BYTE *)(v104 + 32) = -1;
          *(_BYTE *)(a1 + 216) = 1;
          v14 = v160;
          v16 = v157;
          v17 = v156;
          v19 = (uint64_t *)(a1 + 96);
          v18 = (uint64_t *)(a1 + 80);
          goto LABEL_145;
        }
        v15 = v161;
        v125 = *(_DWORD *)v161;
        if (*(int *)v161 <= 0)
          v126 = -v125;
        else
          v126 = *(_DWORD *)v161;
        if (v125 <= 0)
          v127 = v19;
        else
          v127 = v18;
        v128 = *v127;
        v12 = (int8x16_t *)(a1 + 192);
        if (*(_QWORD *)(v128 + 40 * v126 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x198043CCCLL);
        }
        *(_BYTE *)(v128 + 40 * v126 + 32) = v88;
        if ((v88 & 0x40) == 0)
        {
          *(_QWORD *)(a1 + 192) |= 1 << v88;
          v129 = *(_QWORD *)(a1 + v79);
          if (*(_BYTE *)(v129 + 40 * v81 + 33))
          {
            __break(0xC471u);
            JUMPOUT(0x198043CECLL);
          }
          v130 = *(_QWORD *)a1;
          v131 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v131 = 8;
          *(_BYTE *)(v131 + 4) = 1;
          *(_DWORD *)(v131 + 8) = -1;
          *(_QWORD *)(v131 + 16) = 0;
          v168 = (JSC::B3::Air::Arg **)v131;
          v139 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v130 + 64, (uint64_t *)&v168);
          v140 = v168;
          v168 = 0;
          if (v140)
            WTF::fastFree((unint64_t)v140, v132, v133, v134, v135, v136, v137, v138);
          if (*(_BYTE *)(v130 + 196))
          {
            v152 = *(_DWORD *)v139;
            if (*(_DWORD *)v139 < 2u)
            {
              v153 = 1;
            }
            else if (v152 == 2)
            {
              v153 = 2;
            }
            else
            {
              v38 = v152 > 4;
              v153 = 8;
              if (!v38)
                v153 = 4;
            }
            v154 = (v153 + 7 + *(_DWORD *)(v130 + 184)) & -v153;
            *(_QWORD *)(v139 + 16) = -(uint64_t)v154;
            *(_DWORD *)(v130 + 184) = (v154 + 15) & 0xFFFFFFF0;
            v15 = v161;
            v12 = (int8x16_t *)(a1 + 192);
          }
          v141 = v129 + 40 * v81;
          *(_QWORD *)(v141 + 16) = v139;
          *(_BYTE *)(v141 + 32) = -1;
          *(_BYTE *)(a1 + 216) = 1;
          v14 = v160;
          v16 = v157;
          v17 = v156;
          v19 = (uint64_t *)(a1 + 96);
          v18 = (uint64_t *)(a1 + 80);
          goto LABEL_145;
        }
LABEL_193:
        __break(1u);
LABEL_203:
        __break(0xC471u);
        JUMPOUT(0x198043C0CLL);
      }
    }
LABEL_137:
    v15 = v161;
    v105 = *(_DWORD *)v161;
    if (*(int *)v161 > 0)
    {
      v106 = v18;
    }
    else
    {
      v105 = -v105;
      v106 = v19;
    }
    v107 = *v106;
    v108 = v105;
    if (*(_BYTE *)(*v106 + 40 * v105 + 33))
    {
      __break(0xC471u);
      JUMPOUT(0x198043C4CLL);
    }
    v109 = *(_QWORD *)a1;
    v110 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v110 = 8;
    *(_BYTE *)(v110 + 4) = 1;
    *(_DWORD *)(v110 + 8) = -1;
    *(_QWORD *)(v110 + 16) = 0;
    v168 = (JSC::B3::Air::Arg **)v110;
    v118 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v109 + 64, (uint64_t *)&v168);
    v119 = v168;
    v168 = 0;
    if (v119)
      WTF::fastFree((unint64_t)v119, v111, v112, v113, v114, v115, v116, v117);
    v12 = (int8x16_t *)(a1 + 192);
    if (*(_BYTE *)(v109 + 196))
    {
      v142 = *(_DWORD *)v118;
      v143 = 8;
      if (*(_DWORD *)v118 <= 4u)
        v143 = 4;
      v144 = v142 >= 2;
      v145 = v142 == 2;
      v146 = 2;
      if (!v145)
        v146 = v143;
      if (!v144)
        v146 = 1;
      v147 = (v146 + 0x100000007 + *(unsigned int *)(v109 + 184)) & -v146;
      *(_QWORD *)(v118 + 16) = -(uint64_t)v147;
      *(_DWORD *)(v109 + 184) = (v147 + 15) & 0xFFFFFFF0;
    }
    v120 = v107 + 40 * v108;
    *(_QWORD *)(v120 + 16) = v118;
    *(_BYTE *)(v120 + 32) = -1;
    *(_BYTE *)(a1 + 216) = 1;
    v19 = (uint64_t *)(a1 + 96);
    v14 = v160;
    v16 = v157;
    v17 = v156;
    v18 = (uint64_t *)(a1 + 80);
    goto LABEL_145;
  }
}

uint64_t WTF::dataLog<char [8],unsigned long,char [3],JSC::B3::Air::Tmp,char [2]>(_QWORD *a1, JSC::B3::Air::Tmp *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Index #");
  WTF::PrintStream::printf(v6, "%lu", *a1);
  WTF::PrintStream::printf(v6, "%s", ": ");
  JSC::B3::Air::Tmp::dump(a2, v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [3],JSC::B3::Air::Tmp,char [3],JSC::B3::Air::`anonymous namespace'::TmpData,char [2]>(JSC::B3::Air::Tmp *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  char **v10;
  char *v11;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "  ");
  JSC::B3::Air::Tmp::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", ": ");
  v11 = *(char **)(a2 + 16);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v7, "%s", "{interval = ");
  WTF::Range<unsigned long>::dump((_QWORD *)a2, (uint64_t)v7);
  WTF::PrintStream::printImpl<char [13],WTF::PointerDump<JSC::B3::Air::StackSlot>,char [14],JSC::Reg,char [19],BOOL,char [18],JSC::ScalarRegisterSet,char [26],BOOL,char [2]>(v7, (uint64_t *)&v11, (JSC::Reg *)(a2 + 32), (_BYTE *)(a2 + 33), (uint64_t *)(a2 + 24), (_BYTE *)(a2 + 34));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [18],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "  clobberIndex = ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [7],WTF::PointerDump<JSC::B3::Air::BasicBlock>,char [15],unsigned int,char [2]>(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  char v11;
  char **v12;
  char *v13;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "  At: ");
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  v9 = v8;
  if (v7)
  {
    WTF::PrintStream::printf(v8, "%s", "#");
    WTF::PrintStream::printf(v9, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v8, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", ", instIndex = ");
  WTF::PrintStream::printf(v6, "%u", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [11],WTF::PointerDump<JSC::B3::Air::Inst>,char [2]>(const char *a1, JSC::B3::Air::Arg ***a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  JSC::B3::Air::Arg **v7;
  JSC::B3::Air::Kind *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  char v12;
  JSC::B3::Air::Arg ***v13;
  JSC::B3::Air::Arg **v14[5];
  char v15;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14[0] = (JSC::B3::Air::Arg **)&v12;
    v13 = v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", a1);
  v7 = *a2;
  if (*a2)
  {
    v8 = (JSC::B3::Air::Kind *)(v7 + 15);
    v14[0] = v7;
    v14[1] = (JSC::B3::Air::Arg **)", ";
    v14[2] = (JSC::B3::Air::Arg **)3;
    v14[3] = (JSC::B3::Air::Arg **)&str_477;
    v14[4] = (JSC::B3::Air::Arg **)1;
    v15 = 0;
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    JSC::B3::Air::Kind::dump(v8, v9);
    WTF::PrintStream::printf(v9, "%s", " ");
    WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v14, (uint64_t)v9);
  }
  else
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v10, "%s", "(null)");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [18],JSC::ScalarRegisterSet,char [2]>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  _QWORD *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8[0] = &v9;
    v10 = v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "  Possible regs: ");
  v5 = *a1;
  if (*a1)
  {
    v6 = 0;
    do
    {
      v6 |= v5 & -v5;
      v5 &= v5 - 1;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v8[0] = v6;
  v8[1] = 0;
  JSC::RegisterSet::dump((JSC::RegisterSet *)v8, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::B3::Air::`anonymous namespace'::LinearScan::addToActive(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;

  v4 = (uint64_t *)(a1 + 80);
  v5 = (uint64_t *)(a1 + 96);
  v6 = -a2;
  if (a2 > 0)
    v6 = a2;
  v7 = 96;
  if (a2 <= 0)
  {
    v8 = (_QWORD *)(a1 + 96);
  }
  else
  {
    v7 = 80;
    v8 = (_QWORD *)(a1 + 80);
  }
  v9 = v6;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + v7) + 40 * v6 + 33);
  v12 = (uint64_t *)(a1 + 160);
  v11 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 168);
  if (v10)
  {
    if (v11)
    {
      if (v13 + 1 != v11)
        goto LABEL_23;
    }
    else
    {
      v11 = *(unsigned int *)(a1 + 184);
      if (v13)
      {
        if (v13 != v11 - 1)
          goto LABEL_22;
      }
      else if ((_DWORD)v11)
      {
        goto LABEL_22;
      }
    }
    WTF::Deque<JSC::B3::Air::Tmp,0ul>::expandCapacity((unint64_t *)(a1 + 160));
    v11 = *v12;
    if (*v12)
    {
LABEL_23:
      v15 = v11 - 1;
      *(_QWORD *)(a1 + 160) = v15;
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v15) = a2;
      return;
    }
    LODWORD(v11) = *(_DWORD *)(a1 + 184);
LABEL_22:
    v11 = v11;
    goto LABEL_23;
  }
  if (!v11)
  {
    v14 = *(unsigned int *)(a1 + 184);
    if (v13)
    {
      if (v13 != v14 - 1)
      {
        v11 = 0;
        goto LABEL_27;
      }
    }
    else if ((_DWORD)v14)
    {
      v11 = 0;
      v13 = 0;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v13 + 1 == v11)
  {
LABEL_26:
    WTF::Deque<JSC::B3::Air::Tmp,0ul>::expandCapacity((unint64_t *)(a1 + 160));
    v11 = *(_QWORD *)(a1 + 160);
    v13 = *(_QWORD *)(a1 + 168);
  }
LABEL_27:
  v16 = *(_QWORD *)(a1 + 176);
  *(_DWORD *)(v16 + 4 * v13) = a2;
  v17 = *(unsigned int *)(a1 + 184);
  if (v13 == v17 - 1)
    v18 = 0;
  else
    v18 = v13 + 1;
  *(_QWORD *)(a1 + 168) = v18;
  if (v18)
    v19 = v13 + 1;
  else
    v19 = v17;
  v20 = v19 - 1;
  if (v20 != v11)
  {
    do
    {
      v21 = v20;
      if (!v20)
        v21 = *(unsigned int *)(a1 + 184);
      v22 = v21 - 1;
      v23 = *(_DWORD *)(v16 + 4 * v22);
      if (v23 < 1)
      {
        v25 = -v23;
        v24 = *v5;
        if (*(_BYTE *)(*v5 + 40 * -v23 + 33))
          return;
      }
      else
      {
        v24 = *v4;
        v25 = *(_DWORD *)(v16 + 4 * v22);
        if (*(_BYTE *)(*v4 + 40 * v23 + 33))
          return;
      }
      if (*(_QWORD *)(v24 + 40 * v25 + 8) <= *(_QWORD *)(*v8 + 40 * v9 + 8))
        break;
      *(_DWORD *)(v16 + 4 * v22) = *(_DWORD *)(v16 + 4 * v20);
      *(_DWORD *)(v16 + 4 * v20) = v23;
      v20 = v22;
    }
    while (v22 != v11);
  }
}

void WTF::Deque<JSC::B3::Air::Tmp,0ul>::expandCapacity(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int *v24;
  uint64_t v25;
  int v26;

  v1 = *((unsigned int *)a1 + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x3FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = a1[2];
    v5 = v2 + 1;
    v6 = WTF::fastMalloc((WTF *)(4 * (v2 + 1)));
    *((_DWORD *)a1 + 6) = v5;
    a1[2] = v6;
    v14 = *a1;
    v15 = a1[1];
    if (*a1 <= v15)
    {
      if (*a1 != v15)
      {
        v23 = (_DWORD *)(v6 + 4 * v14);
        v24 = (int *)(v4 + 4 * v14);
        v25 = 4 * v15 - 4 * v14;
        do
        {
          v26 = *v24++;
          *v23++ = v26;
          v25 -= 4;
        }
        while (v25);
      }
    }
    else
    {
      if (v15)
      {
        v16 = 4 * v15;
        v17 = (_DWORD *)v6;
        v18 = (int *)v4;
        do
        {
          v19 = *v18++;
          *v17++ = v19;
          v16 -= 4;
        }
        while (v16);
        v5 = *((_DWORD *)a1 + 6);
      }
      if (v14 != v1)
      {
        v20 = (int *)(v4 + 4 * v14);
        v21 = 4 * v14 - 4 * v1;
        do
        {
          v22 = *v20++;
          *(_DWORD *)(v6 + 4 * v5 + v21) = v22;
          v21 += 4;
        }
        while (v21);
      }
      *a1 = v14 - v1 + v5;
    }
    if (v4)
    {
      if (v6 == v4)
      {
        a1[2] = 0;
        *((_DWORD *)a1 + 6) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

uint64_t WTF::dataLog<char [49]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "About to allocate registers. State of all tmps:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<JSC::B3::Air::Code>(JSC::B3::Air::Code *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char **v13;
  char *v14;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::B3::Air::Code::dump(a1, v4, v5, v6, v7, v8, v9, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [5],JSC::B3::Air::Inst,char [2]>(JSC::B3::Air::Arg **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::B3::Air::Kind *v5;
  WTF::PrintStream *v6;
  char v8;
  JSC::B3::Air::Arg ***v9;
  JSC::B3::Air::Arg **v10[5];
  char v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10[0] = (JSC::B3::Air::Arg **)&v8;
    v9 = v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "At: ");
  v5 = (JSC::B3::Air::Kind *)(a1 + 15);
  v10[0] = a1;
  v10[1] = (JSC::B3::Air::Arg **)", ";
  v10[2] = (JSC::B3::Air::Arg **)3;
  v10[3] = (JSC::B3::Air::Arg **)&str_477;
  v10[4] = (JSC::B3::Air::Arg **)1;
  v11 = 0;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  JSC::B3::Air::Kind::dump(v5, v6);
  WTF::PrintStream::printf(v6, "%s", " ");
  WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v10, (uint64_t)v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [29],JSC::B3::Air::Tmp,char [2]>(JSC::B3::Air::Tmp *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Failed to allocate reg for: ");
  JSC::B3::Air::Tmp::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervals<JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForStack(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForStack(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &)#1} &,JSC::B3::Air::Tmp*,false>(unint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD *v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  unsigned int v38;
  _QWORD *v39;
  int *v40;
  int *v41;
  unsigned int v42;
  int v43;
  int v44;
  _QWORD *v45;
  unsigned int v46;
  int v47;
  int v48;
  _QWORD *v49;
  int *v50;
  int *v51;
  int *v52;
  int v53;
  unsigned int v54;
  unint64_t *v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  unsigned int v62;
  _QWORD *v63;
  int *v64;
  unsigned int v65;
  int v66;
  int v67;
  _QWORD *v68;
  int *v69;
  unsigned int v70;
  _QWORD *v71;
  int *v72;
  unsigned int v73;
  int v74;
  int v75;
  _QWORD *v76;
  int v77;
  int v78;
  int *v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  int v83;
  unsigned int v84;
  _QWORD *v85;
  int *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  int *v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  int *v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int *v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  _QWORD *v141;
  unint64_t v142;
  unsigned int v143;
  _QWORD *v144;
  unsigned int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  int *v153;
  int v154;
  int v155;
  unsigned int v156;
  _QWORD *v157;
  unint64_t v158;
  unsigned int v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  int *v190;
  unsigned int v191;
  unint64_t *v192;
  int *v193;

  v9 = (int *)result;
LABEL_2:
  v193 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v87 = *a3;
        v88 = *(a2 - 1);
        v89 = -v88;
        v90 = 96;
        if (v88 <= 0)
          v91 = 96;
        else
          v91 = 80;
        v92 = *(_QWORD *)(v87 + v91);
        if (v88 > 0)
          v89 = *(a2 - 1);
        v93 = *(_QWORD *)(v92 + 40 * v89);
        v94 = *v10;
        if (*v10 > 0)
          v90 = 80;
        v95 = *(_QWORD *)(v87 + v90);
        if (v94 <= 0)
          v96 = -v94;
        else
          v96 = *v10;
        if (v93 < *(_QWORD *)(v95 + 40 * v96))
        {
          *v10 = v88;
          *(a2 - 1) = v94;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
      default:
        if (v11 <= 95)
        {
          v97 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v98 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v99 = (_QWORD *)(v97 + 80);
                v100 = (_QWORD *)(v97 + 96);
                v101 = 4;
                v102 = v10;
                do
                {
                  v104 = *v102;
                  v103 = v102[1];
                  v102 = v98;
                  v105 = v104;
                  v106 = -v103;
                  if (v103 <= 0)
                  {
                    v107 = v100;
                  }
                  else
                  {
                    v106 = v103;
                    v107 = v99;
                  }
                  v108 = *(_QWORD *)(*v107 + 40 * v106);
                  if (v104 > 0)
                  {
                    v109 = v99;
                  }
                  else
                  {
                    v104 = -v104;
                    v109 = v100;
                  }
                  if (v108 < *(_QWORD *)(*v109 + 40 * v104))
                  {
                    v110 = v101;
                    while (1)
                    {
                      *(int *)((char *)v10 + v110) = v105;
                      v111 = v110 - 4;
                      if (v110 == 4)
                        break;
                      v105 = *(int *)((char *)v10 + v110 - 8);
                      v112 = -v105;
                      if (v105 <= 0)
                      {
                        v113 = v100;
                      }
                      else
                      {
                        v112 = v105;
                        v113 = v99;
                      }
                      result = *(_QWORD *)(*v113 + 40 * v112);
                      v110 = v111;
                      if (v108 >= result)
                      {
                        v114 = (int *)((char *)v10 + v111);
                        goto LABEL_149;
                      }
                    }
                    v114 = v10;
LABEL_149:
                    *v114 = v103;
                  }
                  v98 = v102 + 1;
                  v101 += 4;
                }
                while (v102 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v177 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v178 = 0;
              v179 = (_QWORD *)(v97 + 80);
              v180 = (_QWORD *)(v97 + 96);
              v181 = 1;
              while (1)
              {
                v182 = v10[v178];
                v178 = v181;
                v183 = *v177;
                v184 = v182;
                v185 = -*v177;
                if (*v177 <= 0)
                {
                  v186 = v180;
                }
                else
                {
                  v185 = *v177;
                  v186 = v179;
                }
                v187 = *(_QWORD *)(*v186 + 40 * v185);
                if (v182 > 0)
                {
                  v188 = v179;
                }
                else
                {
                  v182 = -v182;
                  v188 = v180;
                }
                if (v187 < *(_QWORD *)(*v188 + 40 * v182))
                  break;
LABEL_251:
                v181 = v178 + 1;
                if (++v177 == a2)
                  return result;
              }
              v189 = 0;
              while (1)
              {
                v190 = &v177[v189];
                *v190 = v184;
                if (!(v178 + v189))
                  break;
                v184 = *(v190 - 2);
                v191 = -v184;
                if (v184 <= 0)
                {
                  v192 = v180;
                }
                else
                {
                  v191 = v184;
                  v192 = v179;
                }
                result = *v192;
                --v189;
                if (v187 >= *(_QWORD *)(result + 40 * v191))
                {
                  v177[v189] = v183;
                  goto LABEL_251;
                }
              }
LABEL_253:
              __break(1u);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v115 = (v12 - 2) >> 1;
            v116 = v115;
            do
            {
              v117 = v116;
              if (v115 >= v116)
              {
                v118 = *a3;
                v119 = (2 * v116) | 1;
                v120 = &v10[v119];
                if (2 * v117 + 2 >= (uint64_t)v12)
                {
                  v121 = *v120;
                }
                else
                {
                  v121 = v120[1];
                  v122 = -*v120;
                  if (*v120 <= 0)
                  {
                    v123 = 96;
                  }
                  else
                  {
                    v122 = *v120;
                    v123 = 80;
                  }
                  v124 = *(_QWORD *)(*(_QWORD *)(v118 + v123) + 40 * v122);
                  v125 = -v121;
                  if (v121 <= 0)
                  {
                    v126 = 96;
                  }
                  else
                  {
                    v125 = v120[1];
                    v126 = 80;
                  }
                  if (v124 < *(_QWORD *)(*(_QWORD *)(v118 + v126) + 40 * v125))
                  {
                    ++v120;
                    v119 = 2 * v117 + 2;
                  }
                  else
                  {
                    v121 = *v120;
                  }
                }
                v127 = &v10[v117];
                if (v121 <= 0)
                  v128 = -v121;
                else
                  v128 = v121;
                if (v121 <= 0)
                  v129 = 96;
                else
                  v129 = 80;
                v130 = *(_QWORD *)(*(_QWORD *)(v118 + v129) + 40 * v128);
                v131 = *v127;
                v132 = -*v127;
                if (*v127 <= 0)
                  v133 = 96;
                else
                  v133 = 80;
                v134 = *(_QWORD *)(v118 + v133);
                if (v131 > 0)
                  v132 = *v127;
                v135 = *(_QWORD *)(v134 + 40 * v132);
                if (v130 >= v135)
                {
                  v136 = (_QWORD *)(v118 + 80);
                  v137 = (_QWORD *)(v118 + 96);
                  do
                  {
                    *v127 = v121;
                    v127 = v120;
                    if (v115 < v119)
                      break;
                    v138 = (2 * v119) | 1;
                    v120 = &v10[v138];
                    v119 = 2 * v119 + 2;
                    if (v119 >= (uint64_t)v12)
                    {
                      v121 = *v120;
                      v119 = v138;
                    }
                    else
                    {
                      v121 = *v120;
                      v139 = v120[1];
                      v140 = -*v120;
                      if (*v120 <= 0)
                      {
                        v141 = v137;
                      }
                      else
                      {
                        v140 = *v120;
                        v141 = v136;
                      }
                      v142 = *(_QWORD *)(*v141 + 40 * v140);
                      v143 = -v139;
                      if (v139 <= 0)
                      {
                        v144 = v137;
                      }
                      else
                      {
                        v143 = v120[1];
                        v144 = v136;
                      }
                      if (v142 >= *(_QWORD *)(*v144 + 40 * v143))
                      {
                        v119 = v138;
                      }
                      else
                      {
                        v121 = v120[1];
                        ++v120;
                      }
                    }
                    v145 = -v121;
                    if (v121 <= 0)
                    {
                      v146 = v137;
                    }
                    else
                    {
                      v145 = v121;
                      v146 = v136;
                    }
                  }
                  while (*(_QWORD *)(*v146 + 40 * v145) >= v135);
                  *v127 = v131;
                }
              }
              v116 = v117 - 1;
            }
            while (v117);
            v147 = (unint64_t)v11 >> 2;
            do
            {
              v148 = 0;
              v149 = *v10;
              v150 = *a3 + 80;
              v151 = *a3 + 96;
              v152 = v10;
              do
              {
                v153 = &v152[v148 + 1];
                result = (2 * v148) | 1;
                v148 = 2 * v148 + 2;
                if (v148 >= v147)
                {
                  v154 = *v153;
                  v148 = result;
                }
                else
                {
                  v154 = *v153;
                  v155 = v153[1];
                  v156 = -*v153;
                  if (*v153 <= 0)
                  {
                    v157 = (_QWORD *)v151;
                  }
                  else
                  {
                    v156 = *v153;
                    v157 = (_QWORD *)v150;
                  }
                  v158 = *(_QWORD *)(*v157 + 40 * v156);
                  v159 = -v155;
                  if (v155 <= 0)
                  {
                    v160 = (_QWORD *)v151;
                  }
                  else
                  {
                    v159 = v153[1];
                    v160 = (_QWORD *)v150;
                  }
                  if (v158 >= *(_QWORD *)(*v160 + 40 * v159))
                  {
                    v148 = result;
                  }
                  else
                  {
                    v154 = v153[1];
                    ++v153;
                  }
                }
                *v152 = v154;
                v152 = v153;
              }
              while (v148 <= (uint64_t)((unint64_t)(v147 - 2) >> 1));
              if (v153 == --a2)
              {
                *v153 = v149;
              }
              else
              {
                *v153 = *a2;
                *a2 = v149;
                v161 = (char *)v153 - (char *)v10 + 4;
                if (v161 >= 5)
                {
                  v162 = (unint64_t)v161 >> 2;
                  v163 = *a3;
                  v164 = (v162 - 2) >> 1;
                  v165 = (unsigned int *)&v10[v164];
                  v166 = *v165;
                  v167 = *v165;
                  if ((int)*v165 > 0)
                  {
                    v168 = 80;
                  }
                  else
                  {
                    v166 = -v166;
                    v168 = 96;
                  }
                  v169 = *(_QWORD *)(*(_QWORD *)(v163 + v168) + 40 * v166);
                  v170 = *v153;
                  v171 = -*v153;
                  if (*v153 <= 0)
                    v172 = 96;
                  else
                    v172 = 80;
                  v173 = *(_QWORD *)(v163 + v172);
                  if (v170 > 0)
                    v171 = *v153;
                  result = *(_QWORD *)(v173 + 40 * v171);
                  if (v169 < result)
                  {
                    do
                    {
                      *v153 = v167;
                      v153 = (int *)v165;
                      if (!v164)
                        break;
                      v164 = (v164 - 1) >> 1;
                      v165 = (unsigned int *)&v10[v164];
                      v167 = *v165;
                      v174 = -*v165;
                      if ((int)*v165 <= 0)
                        v175 = 96;
                      else
                        v175 = 80;
                      v176 = *(_QWORD *)(v163 + v175);
                      if (v167 > 0)
                        v174 = *v165;
                    }
                    while (*(_QWORD *)(v176 + 40 * v174) < result);
                    *v153 = v170;
                  }
                }
              }
              v20 = v147-- <= 2;
            }
            while (!v20);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *a3;
        v18 = *v9;
        if ((a5 & 1) == 0)
        {
          v19 = *(v9 - 1);
          v20 = v19 <= 0;
          if (v19 <= 0)
            v19 = -v19;
          v21 = 96;
          if (v20)
            v22 = 96;
          else
            v22 = 80;
          v23 = *(_QWORD *)(*(_QWORD *)(v17 + v22) + 40 * v19);
          v24 = -v18;
          if (v18 > 0)
            v21 = 80;
          v25 = *(_QWORD *)(v17 + v21);
          if (v18 > 0)
            v24 = *v9;
          v26 = *(_QWORD *)(v25 + 40 * v24);
          if (v23 >= v26)
          {
            v60 = (_QWORD *)(v17 + 80);
            v61 = (_QWORD *)(v17 + 96);
            v62 = *v193;
            if (*v193 > 0)
            {
              v63 = v60;
            }
            else
            {
              v62 = -v62;
              v63 = v61;
            }
            if (v26 >= *(_QWORD *)(*v63 + 40 * v62))
            {
              v69 = v9 + 1;
              do
              {
                v10 = v69;
                if (v69 >= a2)
                  break;
                ++v69;
                v70 = *v10;
                if (*v10 > 0)
                {
                  v71 = v60;
                }
                else
                {
                  v70 = -v70;
                  v71 = v61;
                }
              }
              while (v26 >= *(_QWORD *)(*v71 + 40 * v70));
            }
            else
            {
              v64 = v9 + 1;
              do
              {
                if (v64 == a2)
                  goto LABEL_253;
                v66 = *v64++;
                v65 = v66;
                v67 = -v66;
                if (v66 > 0)
                {
                  v68 = v60;
                }
                else
                {
                  v65 = v67;
                  v68 = v61;
                }
              }
              while (v26 >= *(_QWORD *)(*v68 + 40 * v65));
              v10 = v64 - 1;
            }
            v72 = a2;
            if (v10 < a2)
            {
              v72 = a2;
              while (v72 != v9)
              {
                v74 = *--v72;
                v73 = v74;
                v75 = -v74;
                if (v74 > 0)
                {
                  v76 = v60;
                }
                else
                {
                  v73 = v75;
                  v76 = v61;
                }
                if (v26 >= *(_QWORD *)(*v76 + 40 * v73))
                  goto LABEL_94;
              }
              goto LABEL_253;
            }
LABEL_94:
            if (v10 < v72)
            {
              v77 = *v10;
              v78 = *v72;
              do
              {
                *v10 = v78;
                v79 = v10 + 1;
                *v72 = v77;
                do
                {
                  if (v79 == a2)
                    goto LABEL_253;
                  v80 = *v79++;
                  v77 = v80;
                  v81 = -v80;
                  if (v80 <= 0)
                  {
                    v82 = v61;
                  }
                  else
                  {
                    v81 = v77;
                    v82 = v60;
                  }
                }
                while (v26 >= *(_QWORD *)(*v82 + 40 * v81));
                v10 = v79 - 1;
                do
                {
                  if (v72 == v9)
                    goto LABEL_253;
                  v83 = *--v72;
                  v78 = v83;
                  v84 = -v83;
                  if (v83 <= 0)
                  {
                    v85 = v61;
                  }
                  else
                  {
                    v84 = v78;
                    v85 = v60;
                  }
                }
                while (v26 < *(_QWORD *)(*v85 + 40 * v84));
              }
              while (v10 < v72);
            }
            v86 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v86;
            a5 = 0;
            *v86 = v18;
            continue;
          }
        }
        v27 = v9 + 1;
        if (v9 + 1 == a2)
          goto LABEL_253;
        v28 = (_QWORD *)(v17 + 80);
        v29 = (_QWORD *)(v17 + 96);
        v30 = -v18;
        if (v18 <= 0)
        {
          v31 = v29;
        }
        else
        {
          v30 = *v9;
          v31 = v28;
        }
        v32 = *v27;
        v33 = -*v27;
        if (*v27 <= 0)
        {
          v34 = v29;
        }
        else
        {
          v33 = *v27;
          v34 = v28;
        }
        v35 = *(_QWORD *)(*v31 + 40 * v30);
        if (*(_QWORD *)(*v34 + 40 * v33) < v35)
        {
          v36 = 0;
          do
          {
            v37 = &v9[v36 + 2];
            if (v37 == a2)
              goto LABEL_253;
            v32 = *v37;
            v38 = -*v37;
            if (v32 <= 0)
            {
              v39 = v29;
            }
            else
            {
              v38 = v32;
              v39 = v28;
            }
            ++v36;
          }
          while (*(_QWORD *)(*v39 + 40 * v38) < v35);
          v40 = &v9[v36];
          v27 = &v9[v36 + 1];
          v41 = a2;
          if (v36 * 4)
          {
            while (v41 != v9)
            {
              v43 = *--v41;
              v42 = v43;
              v44 = -v43;
              if (v43 > 0)
              {
                v45 = v28;
              }
              else
              {
                v42 = v44;
                v45 = v29;
              }
              if (*(_QWORD *)(*v45 + 40 * v42) < v35)
                goto LABEL_48;
            }
            goto LABEL_253;
          }
        }
        v41 = a2;
        do
        {
          if (v27 >= v41)
            break;
          v47 = *--v41;
          v46 = v47;
          v48 = -v47;
          if (v47 > 0)
          {
            v49 = v28;
          }
          else
          {
            v46 = v48;
            v49 = v29;
          }
        }
        while (*(_QWORD *)(*v49 + 40 * v46) >= v35);
        v40 = v9;
LABEL_48:
        if (v27 < v41)
        {
          result = *v41;
          v50 = v27;
          v51 = v41;
          do
          {
            *v50 = result;
            *v51 = v32;
            v52 = v50 + 1;
            do
            {
              if (v52 == a2)
                goto LABEL_253;
              v53 = *v52++;
              v32 = v53;
              v54 = -v53;
              if (v53 <= 0)
              {
                v55 = v29;
              }
              else
              {
                v54 = v32;
                v55 = v28;
              }
              result = *v55;
            }
            while (*(_QWORD *)(result + 40 * v54) < v35);
            v50 = v52 - 1;
            do
            {
              if (v51 == v9)
                goto LABEL_253;
              v56 = *--v51;
              result = v56;
              v57 = -v56;
              if (v56 <= 0)
              {
                v58 = v29;
              }
              else
              {
                v57 = result;
                v58 = v28;
              }
            }
            while (*(_QWORD *)(*v58 + 40 * v57) >= v35);
          }
          while (v50 < v51);
          v40 = v52 - 2;
        }
        if (v40 != v9)
          *v9 = *v40;
        *v40 = v18;
        if (v27 < v41)
        {
LABEL_69:
          a5 = 0;
          v10 = v40 + 1;
          continue;
        }
        v10 = v40 + 1;
        if (!(_DWORD)result)
        {
          if (v59)
            continue;
          goto LABEL_69;
        }
        a2 = v40;
        if (!v59)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervals<JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForStack(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForStack(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &)#1} &,JSC::B3::Air::Tmp*>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  int *v36;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v9 = *(a2 - 1);
      v10 = -v9;
      v11 = 96;
      if (v9 <= 0)
        v12 = 96;
      else
        v12 = 80;
      v13 = *(_QWORD *)(v8 + v12);
      if (v9 > 0)
        v10 = *(a2 - 1);
      v14 = *(_QWORD *)(v13 + 40 * v10);
      v15 = *a1;
      if (*a1 > 0)
        v11 = 80;
      v16 = *(_QWORD *)(v8 + v11);
      if (v15 <= 0)
        v17 = -v15;
      else
        v17 = *a1;
      if (v14 < *(_QWORD *)(v16 + 40 * v17))
      {
        *a1 = v9;
        *(a2 - 1) = v15;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v18 = a1 + 2;
      v19 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v20 = 0;
      v21 = *a3 + 80;
      v22 = *a3 + 96;
      v23 = 12;
      break;
  }
  while (1)
  {
    v24 = *v19;
    v25 = *v18;
    v26 = *v18;
    v27 = -*v19;
    if (*v19 <= 0)
    {
      v28 = (_QWORD *)v22;
    }
    else
    {
      v27 = *v19;
      v28 = (_QWORD *)v21;
    }
    v29 = *(_QWORD *)(*v28 + 40 * v27);
    if (v25 > 0)
    {
      v30 = (_QWORD *)v21;
    }
    else
    {
      v25 = -v25;
      v30 = (_QWORD *)v22;
    }
    if (v29 < *(_QWORD *)(*v30 + 40 * v25))
    {
      v31 = v23;
      while (1)
      {
        *(int *)((char *)a1 + v31) = v26;
        v32 = v31 - 4;
        if (v31 == 4)
          break;
        v26 = *(int *)((char *)a1 + v31 - 8);
        v33 = -v26;
        if (v26 <= 0)
        {
          v34 = (_QWORD *)v22;
        }
        else
        {
          v33 = v26;
          v34 = (_QWORD *)v21;
        }
        v35 = *(_QWORD *)(*v34 + 40 * v33);
        v31 = v32;
        if (v29 >= v35)
        {
          v36 = (int *)((char *)a1 + v32);
          goto LABEL_31;
        }
      }
      v36 = a1;
LABEL_31:
      *v36 = v24;
      if (++v20 == 8)
        return v19 + 1 == a2;
    }
    v18 = v19;
    v23 += 4;
    if (++v19 == a2)
      return 1;
  }
}

uint64_t WTF::dataLog<char [22],long,char [11],WTF::PointerDump<JSC::B3::Air::StackSlot>,char [6],JSC::B3::Air::Tmp,char [2]>(_QWORD *a1, uint64_t *a2, JSC::B3::Air::Tmp *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  int v10;
  WTF::PrintStream *v11;
  const char *v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  char v16;
  char **v17;
  char *v18;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "  Assigning offset = ");
  WTF::PrintStream::printf(v8, "%ld", *a1);
  WTF::PrintStream::printf(v8, "%s", " to spill ");
  v9 = *a2;
  if (v9)
  {
    v10 = *(unsigned __int8 *)(v9 + 4);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    v12 = "stack";
    if (v10 == 1)
      v12 = "spill";
    WTF::PrintStream::printf(v11, "%s", v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v13, "%u");
  }
  else
  {
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v14, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " for ");
  JSC::B3::Air::Tmp::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

float WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::UseCounts::UseCounts(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::UseCounts::UseCounts(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, float result)
{
  unsigned int ***v5;
  int v6;
  unsigned int **v7;
  unsigned int v8;
  unsigned int *v9;
  double v10;
  unsigned int *v11;
  float *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  v5 = **(unsigned int *****)(a1 + 16);
  v6 = *(char *)(a2 + 8);
  if (v6 != 1)
  {
    if ((v6 - 6) < 3)
    {
      v13 = *(unsigned int *)(a2 + 16);
      v14 = **v5;
      if (*v14 <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198045D4CLL);
      }
    }
    else
    {
      if (v6 == 11)
      {
        v15 = *(unsigned int *)(a2 + 16);
        v16 = **v5;
        v17 = *v16;
        if (*v16 <= v15)
        {
          __break(0xC471u);
          JUMPOUT(0x198045D6CLL);
        }
        v10 = *(double *)v5[1];
        *(float *)&v18 = v10 + *(float *)&v16[v15 + 1];
        v16[v15 + 1] = v18;
        v19 = *(unsigned int *)(a2 + 20);
        if (v17 > v19)
        {
          v12 = (float *)&v16[v19 + 1];
          goto LABEL_9;
        }
        goto LABEL_26;
      }
      if ((v6 - 12) >= 2)
        return result;
      v13 = *(unsigned int *)(a2 + 16);
      v14 = **v5;
      if (*v14 <= v13)
      {
LABEL_26:
        __break(0xC471u);
        JUMPOUT(0x198045C60);
      }
    }
    v10 = *(double *)v5[1];
    v11 = &v14[v13];
LABEL_8:
    v12 = (float *)(v11 + 1);
LABEL_9:
    result = v10 + *v12;
    *v12 = result;
    return result;
  }
  v7 = *v5;
  if (a3 <= 0xA && ((1 << a3) & 0x4C5) != 0 || a3 - 4 <= 6)
  {
    if (a4)
    {
      v8 = -*(_DWORD *)(a2 + 16);
      v9 = v7[1];
      if (*v9 <= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198045CC0);
      }
    }
    else
    {
      v8 = *(_DWORD *)(a2 + 16);
      v9 = *v7;
      if (*v9 <= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198045D2CLL);
      }
    }
    v10 = *(double *)v5[1];
    v11 = &v9[v8];
    goto LABEL_8;
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)0>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  WTF **v29;
  WTF **v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int32x2_t *v34;
  WTF **v35;
  __int32 v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  void *v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  JSC::B3::Air::Inst *v69;
  char v70;
  unint64_t v71;
  char *v72;
  __int128 *v73;
  uint64_t v74;
  unsigned __int16 v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  void *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  float v95;
  _DWORD *v96;
  uint64_t v97;
  JSC::B3::Air::Inst *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD **v111;
  _QWORD **v112;
  _QWORD **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  unint64_t v156;
  unsigned int v157;
  int v158;
  uint64_t v159;
  char v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  _OWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  BOOL v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  int v187;
  int v188;
  char v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  int v202;
  char v203;
  int v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  __int16 *v220;
  int v221;
  __int16 *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  _BYTE *v226;
  uint64_t v227;
  WTF::BitVector *v228;
  int v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  uint64_t v240;
  unint64_t v241;
  _QWORD *v242;
  unsigned __int8 *v243;
  unsigned int v244;
  unsigned int v245;
  unint64_t v246;
  _QWORD *v247;
  unsigned __int8 *v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  int v258;
  unsigned int *v259;
  unint64_t v260;
  unsigned int *v261;
  unint64_t v262;
  BOOL v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE *v266;
  uint64_t v267;
  unint64_t v268;
  int v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  WTF *v278;
  _BYTE *v279;
  char *v280;
  char v281;
  _BYTE *v282;
  uint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  JSC::B3::Air::Code *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  JSC::B3::Air::Inst *v296;
  uint64_t v297;
  uint64_t v298;
  _DWORD *v299;
  uint64_t v300;
  uint64_t v301;
  _DWORD *v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  _QWORD **v310;
  _QWORD **v311;
  _QWORD **v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _DWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int *v325;
  unsigned int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _DWORD *v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  double v341;
  double v342;
  float v343;
  _DWORD *v344;
  uint64_t v345;
  _DWORD *v346;
  uint64_t v347;
  __int16 v348;
  unsigned int v349;
  unsigned __int16 v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t *v359;
  _WORD *v360;
  int v361;
  unsigned int v362;
  _WORD *v363;
  int v364;
  unint64_t v365;
  int v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  _WORD *v370;
  uint64_t v371;
  _WORD *v372;
  unint64_t v373;
  uint64_t *v374;
  int v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  uint64_t *v380;
  int v381;
  int v382;
  unsigned int *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  uint64_t v403;
  _BYTE *v404;
  unint64_t v405;
  unsigned int v406;
  int v407;
  uint64_t v408;
  char v409;
  int v410;
  int v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  unint64_t v417;
  _OWORD *v418;
  int v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  char v423;
  int v424;
  unsigned int *v425;
  unint64_t v426;
  uint64_t v427;
  int v428;
  unsigned int *v429;
  unint64_t v430;
  unsigned int *v431;
  BOOL v432;
  char v433;
  int v434;
  int v435;
  char v436;
  int v437;
  int v438;
  unint64_t v439;
  unint64_t v440;
  int v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  _WORD *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t *v448;
  int v449;
  _QWORD *v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  _QWORD *v455;
  int v456;
  int v457;
  unint64_t v458;
  uint64_t v459;
  WTF::BitVector *v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  WTF::BitVector *v464;
  unsigned int v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unsigned __int16 *v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  WTF *v476;
  char *v477;
  char v478;
  _BYTE *v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unsigned __int16 *v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  BOOL v488;
  uint64_t v489;
  _QWORD *v490;
  unsigned __int8 *v491;
  unsigned int v492;
  unsigned int v493;
  BOOL v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  WTF::BitVector *v504;
  unsigned int v505;
  uint64_t v506;
  JSC::B3::Air::Inst *v507;
  int v508;
  uint64_t v509;
  unint64_t v510;
  unsigned int v511;
  unsigned int v512;
  uint64_t v513;
  uint64_t v514;
  unsigned int v515;
  unsigned int *v516;
  unsigned int v517;
  uint64_t v518;
  unsigned int v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  int v523;
  int v524;
  uint64_t v525;
  unint64_t v526;
  char *v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  unsigned int *v532;
  unsigned int v533;
  WTF *v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int v537;
  uint64_t v538;
  int v539;
  int v540;
  uint64_t v541;
  unsigned __int16 v542;
  unsigned int *v543;
  uint64_t v544;
  unsigned int v545;
  uint64_t v546;
  unint64_t v547;
  _QWORD *v548;
  unsigned __int8 *v549;
  unsigned int v550;
  unsigned int v551;
  unint64_t v552;
  _QWORD *v553;
  unsigned __int8 *v554;
  unsigned int v555;
  unsigned int v556;
  uint64_t v557;
  uint64_t v558;
  char v559;
  unsigned int v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  _QWORD *v566;
  unsigned __int8 *v567;
  unsigned int v568;
  unsigned int v569;
  BOOL v570;
  int v571;
  int v572;
  int v573;
  unint64_t v574;
  WTF::BitVector *v575;
  uint64_t v576;
  unsigned int v577;
  uint64_t v578;
  uint64_t v579;
  WTF *v580;
  uint64_t v581;
  unsigned int v582;
  int v583;
  void *v584;
  JSC::B3::Air::Inst *v585;
  WTF *v586;
  unsigned int v587;
  BOOL v588;
  int v589;
  unint64_t v591;
  unint64_t v592;
  _BYTE *v593;
  WTF::BitVector *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  WTF::BitVector *v599;
  uint64_t v600;
  int v601;
  unsigned int *v602;
  unint64_t v603;
  unsigned int *v604;
  unint64_t v605;
  BOOL v606;
  _QWORD *v607;
  unsigned __int8 *v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int *v611;
  unsigned int v612;
  WTF *v613;
  uint64_t v614;
  unsigned int v615;
  void *v616;
  JSC::B3::Air::Inst *v617;
  WTF *v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  unint64_t v623;
  unint64_t v624;
  void *v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  unint64_t v629;
  uint64_t v630;
  _WORD *v631;
  char v632;
  int v633;
  char v634;
  int v635;
  void *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  uint64_t v647;
  JSC::B3::Air::Inst *v648;
  char v649;
  unint64_t v650;
  char *v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  uint64_t v658;
  __int128 v659;
  uint64_t *v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  void *v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  BOOL v676;
  WTF *v677;
  WTF *v678;
  WTF *v679;
  unint64_t v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  BOOL v688;
  void *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unsigned int v708;
  int v709;
  int v710;
  int v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int v720;
  int v721;
  WTF *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  _BOOL4 v729;
  void *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  _DWORD *v737;
  uint64_t v738;
  unint64_t v739;
  unint64_t v740;
  unint64_t v741;
  WTF *v742;
  JSC::B3::Air::Code *v743;
  uint64_t v744;
  unint64_t v745;
  unint64_t v746;
  _DWORD *v747;
  uint64_t v748;
  unsigned int v749;
  WTF *v750;
  WTF *v751;
  uint64_t v752;
  uint64_t v753;
  void *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  _DWORD *v769;
  uint64_t v770;
  uint64_t v771;
  unint64_t v772;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  BOOL v780;
  void *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  unint64_t v792;
  unint64_t v793;
  unsigned int *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t *v797;
  __int128 v798;
  __int128 v799;
  uint64_t v800;
  uint64_t *v801;
  __int128 v802;
  __int128 v803;
  int v804;
  uint64_t v805;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  uint64_t v813;
  int v814;
  int v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  void *v819;
  uint64_t *v820;
  WTF::BitVector *v821;
  WTF::BitVector *v822;
  WTF::BitVector *v823;
  WTF::BitVector *v824;
  WTF::BitVector *v825;
  WTF::BitVector *v826;
  JSC::B3::Air::Inst *v827;
  WTF **v828;
  WTF **v829;
  uint64_t v830;
  unsigned int v831;
  unsigned int v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  unsigned int v837;
  WTF *v838;
  WTF *v839;
  int v840;
  int v841;
  _BYTE *v842;
  _BYTE *v843;
  unsigned __int16 *v844;
  unsigned __int16 *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  WTF *v851;
  WTF *v852;
  uint64_t v853;
  _QWORD v854[3];
  uint64_t *v855;
  uint64_t *v856;
  JSC::B3::Air::Code *v857;
  JSC::B3::Air::Code *v858;
  uint64_t v859;
  int v860;
  unsigned int v861;
  int v862;
  _BYTE v863[40];
  uint64_t *v864;
  uint64_t *v865[2];
  uint64_t *v866;
  int v867;
  uint64_t v868;
  WTF **v869;
  JSC::B3::Air::Inst **v870;
  _BYTE *v871;
  uint64_t *v872;
  WTF::BitVector *v873;
  __int128 *v874;
  unsigned int *v875;
  JSC::B3::Air::Inst *v876;
  char v877;
  unsigned int v878;
  uint64_t v879;
  WTF *v880;
  uint64_t v881;
  _BYTE v882[32];
  __int128 v883;
  __int128 v884;
  _BYTE v885[12];
  WTF *v886;
  JSC::B3::Air::Inst *v887;
  uint64_t v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  _QWORD v893[2];
  char v894;
  __int16 v895;
  __int128 v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  unsigned int v902;
  uint64_t v903;
  _BYTE v904[176];
  uint64_t v905;
  WTF *v906;
  int v907;
  WTF *v908;
  int v909;
  WTF *v910;
  int v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914[2];

  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 176);
  LODWORD(v887) = 0;
  v886 = 0;
  v10 = (v9 + 33);
  HIDWORD(v887) = v9 + 33;
  v819 = (void *)v10;
  if (v9 != -33)
  {
    if (v10 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19804A548);
    }
    v11 = 16 * v10;
    v12 = (WTF *)WTF::fastMalloc((WTF *)(16 * v10));
    LODWORD(v887) = v10;
    v886 = v12;
    do
    {
      *(_OWORD *)v12 = xmmword_199150480;
      v12 = (WTF *)((char *)v12 + 16);
      v11 -= 16;
    }
    while (v11);
    v8 = *a1;
  }
  LODWORD(v880) = 0;
  v824 = (WTF::BitVector *)*(unsigned int *)(v8 + 108);
  if ((_DWORD)v824)
  {
    v13 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v13))
    {
      if (v824 == (WTF::BitVector *)++v13)
        goto LABEL_53;
    }
    if ((_DWORD)v824 != (_DWORD)v13)
    {
      v14 = 0;
      v15 = *(_DWORD *)(v8 + 108);
      v821 = (WTF::BitVector *)v8;
      while (1)
      {
        if (v15 <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x19804A3DCLL);
        }
        v16 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v13);
        v17 = *(unsigned int *)(v16 + 20);
        if ((_DWORD)v17)
          break;
LABEL_41:
        LODWORD(v880) = ++v14;
        v13 = (v13 + 1);
        if (v15 > v13)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v13))
          {
            if (v15 == ++v13)
            {
              LODWORD(v13) = v15;
              break;
            }
          }
        }
        if ((_DWORD)v824 == (_DWORD)v13)
          goto LABEL_53;
      }
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 + (v17 << 7);
      while (1)
      {
        v827 = (JSC::B3::Air::Inst *)v18;
        v828 = &v886;
        v829 = &v880;
        if ((*(__int16 *)(v18 + 120) - 446) <= 5)
        {
          *((_QWORD *)&v896 + 1) = &v896;
          v897 = (uint64_t)&v827;
        }
        else
        {
          v20 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v20)
          {
            v21 = 0;
            v22 = (char *)&JSC::B3::Air::g_formTable
                + 21 * *(__int16 *)(v18 + 120)
                + ((unint64_t)((v20 - 1) * v20) >> 1);
            v23 = 16;
            do
            {
              if (v21 >= *(unsigned int *)(v18 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x19804A2B0);
              }
              v24 = v22[v21];
              if ((v24 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19804A0CCLL);
              }
              v25 = *(_QWORD *)v18;
              v26 = *(_QWORD *)v18 + v23;
              v27 = *(unsigned __int8 *)(v26 - 8);
              if (v27 == 1)
              {
                if (!*((_DWORD *)v827 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804A340);
                }
                if ((JSC::B3::Air::Inst::admitsStack(v827, (unint64_t)(v23 + v25 - *(_QWORD *)v827 - 16) >> 5) & 1) != 0)
                {
                  if ((v24 & 0x10) == 0)
                  {
                    v34 = (int32x2_t *)((char *)*v828 + 16 * *(unsigned int *)(v25 + v23));
                    v34[1] = vadd_s32(v34[1], (int32x2_t)0x100000001);
                    v35 = v829;
                    v36 = *(_DWORD *)v829;
                    if (*(_DWORD *)v829 < v34->i32[0])
                    {
                      v34->i32[0] = v36;
                      v34->i32[1] = *(_DWORD *)v35;
                    }
                    else
                    {
                      v34->i32[1] = v36;
                    }
                  }
                  goto LABEL_30;
                }
                LOBYTE(v27) = *(_BYTE *)(v26 - 8);
              }
              v28 = (char)v27;
              if ((char)v27 <= 0xD)
              {
                v30 = v828;
                v29 = v829;
                if (((1 << v28) & 0x31C2) != 0)
                {
                  v31 = *(unsigned int *)(v25 + v23);
LABEL_26:
                  if ((int)v31 >= 1)
                  {
                    v32 = (_DWORD *)((char *)*v30 + 16 * v31);
                    ++v32[2];
                    v33 = *(_DWORD *)v29;
                    if (*(_DWORD *)v29 < *v32)
                    {
                      *v32 = v33;
                      v33 = *(_DWORD *)v29;
                    }
                    v32[1] = v33;
                  }
                  goto LABEL_30;
                }
                if (v28 == 11)
                {
                  v37 = *(unsigned int *)(v25 + v23);
                  if ((int)v37 >= 1)
                  {
                    v38 = (_DWORD *)((char *)*v828 + 16 * v37);
                    ++v38[2];
                    v39 = *(_DWORD *)v29;
                    if (*(_DWORD *)v29 < *v38)
                    {
                      *v38 = v39;
                      v39 = *(_DWORD *)v29;
                    }
                    v38[1] = v39;
                  }
                  v31 = *(unsigned int *)(v25 + v23 + 4);
                  goto LABEL_26;
                }
              }
LABEL_30:
              ++v21;
              v23 += 32;
            }
            while (v20 != v21);
          }
        }
        v14 = (_DWORD)v880 + 1;
        LODWORD(v880) = (_DWORD)v880 + 1;
        v18 += 128;
        if (v18 == v19)
        {
          v8 = (uint64_t)v821;
          v15 = *((_DWORD *)v821 + 27);
          goto LABEL_41;
        }
      }
    }
  }
LABEL_53:
  v868 = 0x8000000000000000;
  v40 = v819;
  if (v819 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v868, (unint64_t)v819, 0);
  v41 = HIDWORD(v887);
  if (HIDWORD(v887) >= 0x22)
  {
    v42 = (_DWORD *)((char *)v886 + 540);
    v43 = 33;
    do
    {
      if ((*(v42 - 2) - *(v42 - 3)) <= 1 && *(v42 - 1) > *v42)
      {
        if (v868 >= 0)
          v44 = (uint64_t *)(2 * v868 + 8);
        else
          v44 = &v868;
        *(uint64_t *)((char *)v44 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
      }
      ++v43;
      v42 += 4;
    }
    while (v41 != v43);
  }
  v45 = *(unsigned int *)(*a1 + 156);
  v46 = (_QWORD *)(*a1 + 160);
  if ((_DWORD)v45 != 2)
    v46 = (_QWORD *)*v46;
  v47 = 0;
  while ((_DWORD)v45 != v47)
  {
    v48 = v47;
    if (*((_DWORD *)v46 + v47++))
    {
      v50 = v48;
      goto LABEL_70;
    }
  }
  v50 = *(unsigned int *)(*a1 + 156);
LABEL_70:
  if ((_DWORD)v45 != (_DWORD)v50)
  {
    LODWORD(v51) = v50;
    v52 = v50 | (v45 << 32);
    do
    {
      v53 = *((unsigned int *)v46 + v52);
      if ((v53 & 0x80000000) == 0)
      {
        if (v868 >= 0)
          v54 = (uint64_t *)(2 * v868 + 8);
        else
          v54 = &v868;
        *(uint64_t *)((char *)v54 + ((v53 >> 3) & 0x1FFFFFF8)) |= 1 << v53;
      }
      if (HIDWORD(v52) <= (v51 + 1))
        v55 = (v51 + 1);
      else
        v55 = HIDWORD(v52);
      while ((_DWORD)v55 - 1 != (_DWORD)v51)
      {
        v51 = (v51 + 1);
        if (*((_DWORD *)v46 + v51))
        {
          LODWORD(v55) = v51;
          goto LABEL_83;
        }
      }
      v51 = v55;
LABEL_83:
      v52 = v51 | v52 & 0xFFFFFFFF00000000;
      LODWORD(v51) = v55;
    }
    while ((_DWORD)v45 != (_DWORD)v55);
  }
  v56 = v886;
  if (v886)
  {
    v886 = 0;
    LODWORD(v887) = 0;
    WTF::fastFree((unint64_t)v56, v40, a3, a4, a5, a6, a7, a8);
  }
  v867 = 0;
  v805 = (uint64_t)(a1 + 1);
LABEL_89:
  while (2)
  {
    while (2)
    {
      ++v867;
      JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(v805, *a1, a3, a4, a5, a6, a7, a8);
      v865[0] = a1;
      v865[1] = (uint64_t *)&v867;
      v866 = &v868;
      v57 = *a1;
      v58 = *(_DWORD *)(*a1 + 176);
      if (v58 > 0x18F)
      {
        if (v58 > 0xFFFE)
        {
          if (!BYTE6(qword_1ECF4C688) && *(unsigned __int8 *)(v57 + 198) | HIBYTE(qword_1ECF4C688))
          {
            if (v780)
              goto LABEL_1054;
          }
          else
          {
            if (v729)
              goto LABEL_1054;
          }
          continue;
        }
        if (!BYTE6(qword_1ECF4C688) && *(unsigned __int8 *)(v57 + 198) | HIBYTE(qword_1ECF4C688))
        {
          if (v688)
            goto LABEL_1054;
          continue;
        }
        memset(&v863[8], 0, 32);
        v864 = a1 + 1;
        v475 = *(_QWORD *)(v57 + 56);
        if (v475)
        {
          v474 = 0;
          do
          {
            v474 |= v475 & -v475;
            v475 &= v475 - 1;
          }
          while (v475);
          if (v474)
          {
            v646 = __clz(__rbit64(v474));
            do
            {
              LOBYTE(v886) = v646 | 0x80;
              if (v646 <= 0x1Fu)
              {
                LODWORD(v896) = v646 + 1;
                if (v861 == v860)
                {
                  v769 = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v859, (void *)(v861 + 1), (unint64_t)&v896, v638, v639, v640, v641, v642);
                  *(_DWORD *)(v859 + 4 * v861) = *v769;
                }
                else
                {
                  *(_DWORD *)(v859 + 4 * v861) = v646 + 1;
                }
                ++v861;
                v647 = HIDWORD(v828);
                if (HIDWORD(v828) == (_DWORD)v828)
                {
                  v651 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v827, (WTF *)(HIDWORD(v828) + 1), (unint64_t)&v886);
                  v647 = HIDWORD(v828);
                  v648 = v827;
                  v649 = *v651;
                }
                else
                {
                  v648 = v827;
                  v649 = (char)v886;
                }
                *((_BYTE *)v648 + v647) = v649;
                ++HIDWORD(v828);
              }
              if (v646 > 0x3E)
                break;
              v650 = __clz(__rbit64(v474 >> (v646 + 1))) + v646 + 1;
              v646 = v650 >= 0x40 ? 64 : v650;
            }
            while (v650 <= 0x3F);
          }
        }
        v652 = (*((_DWORD *)v858 + 44) + 33);
        v653 = v832;
        if (v832 >= v652)
        {
          WTF::VectorTypeOperations<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>>::destruct((uint64_t *)(v830 + 16 * v652), v830 + 16 * v832, v637, v638, v639, v640, v641, v642);
LABEL_1125:
          v832 = v652;
          v738 = (unsigned __int16)v829;
          v739 = (unsigned __int16)v829 + 1;
          v480 = HIDWORD(v844);
          if ((unsigned __int16)v829 >= (unint64_t)HIDWORD(v844))
          {
            v645 = (unint64_t)v843;
            if ((unsigned __int16)v829 >= (unint64_t)v844)
            {
              v740 = v844 + ((unint64_t)v844 >> 2);
              if (v740 >= 0x10)
                v741 = v740 + 1;
              else
                v741 = 16;
              if (v741 <= v739)
                v742 = (WTF *)((unsigned __int16)v829 + 1);
              else
                v742 = (WTF *)v741;
              v479 = (_BYTE *)WTF::fastMalloc(v742);
              LODWORD(v844) = (_DWORD)v742;
              v843 = v479;
              if ((_DWORD)v480)
              {
                v477 = (char *)v645;
                do
                {
                  v478 = *v477++;
                  *v479++ = v478;
                  --v480;
                }
                while (v480);
                v479 = v843;
              }
              if (v645)
              {
                if (v479 == (_BYTE *)v645)
                {
                  v843 = 0;
                  LODWORD(v844) = 0;
                }
                WTF::fastFree(v645, v636, v637, v638, v639, v640, v641, v642);
                v645 = (unint64_t)v843;
              }
              else
              {
                v645 = (unint64_t)v479;
              }
            }
            if (v645 && v739 != HIDWORD(v844))
            {
              v266 = (_BYTE *)(v645 + HIDWORD(v844));
              v267 = v738 - HIDWORD(v844) + 1;
              do
              {
                *v266++ |= 0x7Fu;
                --v267;
              }
              while (v267);
            }
          }
          HIDWORD(v844) = v739;
          if ((_WORD)v829)
          {
            v268 = 1;
            do
            {
              v843[v268] = (v268 - 1) & 0x7F;
              v494 = v268++ >= (unsigned __int16)v829;
            }
            while (!v494);
          }
          if (v840)
          {
            if (v841)
              v841 = 0;
            v751 = v839;
            if (v839)
            {
              v839 = 0;
              v840 = 0;
              WTF::fastFree((unint64_t)v751, v636, v637, v638, v639, v640, v641, v642);
            }
          }
          *(_DWORD *)v863 = 0;
          if (*(_DWORD *)&v863[16])
          {
            if (*(_DWORD *)&v863[20])
              *(_DWORD *)&v863[20] = 0;
            v745 = *(_QWORD *)&v863[8];
            if (*(_QWORD *)&v863[8])
            {
              *(_QWORD *)&v863[8] = 0;
              *(_DWORD *)&v863[16] = 0;
              WTF::fastFree(v745, v636, v637, v638, v639, v640, v641, v642);
            }
          }
          if (*(_DWORD *)&v863[32])
          {
            if (*(_DWORD *)&v863[36])
              *(_DWORD *)&v863[36] = 0;
            v746 = *(_QWORD *)&v863[24];
            if (*(_QWORD *)&v863[24])
            {
              *(_QWORD *)&v863[24] = 0;
              *(_DWORD *)&v863[32] = 0;
              WTF::fastFree(v746, v636, v637, v638, v639, v640, v641, v642);
            }
          }
          JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v896, (uint64_t)v858);
          v743 = v858;
          v744 = *((unsigned int *)v858 + 27);
          if ((_DWORD)v744)
          {
            v141 = 0;
            while (!*(_QWORD *)(*((_QWORD *)v858 + 12) + 8 * v141))
            {
              if (v744 == ++v141)
                goto LABEL_1154;
            }
            if ((_DWORD)v744 != (_DWORD)v141)
            {
              LODWORD(v142) = *((_DWORD *)v858 + 27);
              do
              {
                if (v142 <= v141)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804A494);
                }
                v98 = *(JSC::B3::Air::Inst **)(*((_QWORD *)v743 + 12) + 8 * v141);
                v886 = (WTF *)&v896;
                v887 = v98;
                v902 = 0;
                v99 = v903 + 32 * *(unsigned int *)v98;
                v100 = *(unsigned int *)(v99 + 12);
                if ((_DWORD)v100)
                {
                  v101 = *(_DWORD **)v99;
                  v102 = v899;
                  v103 = 4 * v100;
                  do
                  {
                    v104 = *v101;
                    v105 = *(unsigned int *)(v102 + 4 * v104);
                    v106 = v902;
                    if (v902 <= v105 || *(_DWORD *)(v900 + 4 * v105) != (_DWORD)v104)
                    {
                      LODWORD(v880) = *v101;
                      if (v902 == v901)
                      {
                        v143 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v900, v902 + 1, (unint64_t)&v880);
                        *(_DWORD *)(v900 + 4 * v902) = *v143;
                        v102 = v899;
                      }
                      else
                      {
                        *(_DWORD *)(v900 + 4 * v902) = v104;
                      }
                      ++v902;
                      *(_DWORD *)(v102 + 4 * v104) = v106;
                    }
                    ++v101;
                    v103 -= 4;
                  }
                  while (v103);
                }
                v107 = *((unsigned int *)v98 + 5);
                if (!(_DWORD)v107)
                  goto LABEL_1248;
                do
                {
                  v108 = v107 - 1;
                  v109 = *((unsigned int *)v98 + 5);
                  if (v109 <= (int)v107 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804A2D0);
                  }
                  v110 = *((_QWORD *)v98 + 1);
                  v111 = (_QWORD **)(v110 + ((unint64_t)(v107 - 1) << 7));
                  v112 = (_QWORD **)(v110 + (v107 << 7));
                  if (v107 >= v109)
                    v113 = 0;
                  else
                    v113 = v112;
                  v118 = *((_QWORD *)&v896 + 1);
                  v119 = *(_QWORD *)(*((_QWORD *)&v896 + 1) + 16 * *(unsigned int *)v98);
                  v120 = v119 + (v107 << 6);
                  v121 = *(unsigned int *)(v120 + 44);
                  if ((_DWORD)v121)
                  {
                    v130 = *(unsigned int **)(v120 + 32);
                    v131 = v902;
                    v132 = 4 * v121;
                    v133 = v899;
                    v134 = v900;
                    do
                    {
                      v135 = *v130;
                      v136 = *(unsigned int *)(v133 + 4 * v135);
                      if (v131 > v136 && *(_DWORD *)(v134 + 4 * v136) == (_DWORD)v135)
                      {
                        v137 = *(unsigned int *)(v134 + 4 * v131 - 4);
                        *(_DWORD *)(v134 + 4 * v136) = v137;
                        *(_DWORD *)(v133 + 4 * v137) = v136;
                        v131 = --v902;
                      }
                      ++v130;
                      v132 -= 4;
                    }
                    while (v132);
                    v119 = *(_QWORD *)(v118 + 16 * *(unsigned int *)v98);
                  }
                  v122 = v119 + ((unint64_t)(v107 - 1) << 6);
                  v123 = *(unsigned int *)(v122 + 12);
                  if ((_DWORD)v123)
                  {
                    v124 = *(_DWORD **)v122;
                    v125 = v899;
                    v126 = 4 * v123;
                    do
                    {
                      v127 = *v124;
                      v128 = *(unsigned int *)(v125 + 4 * v127);
                      v129 = v902;
                      if (v902 <= v128 || *(_DWORD *)(v900 + 4 * v128) != (_DWORD)v127)
                      {
                        LODWORD(v880) = *v124;
                        if (v902 == v901)
                        {
                          v144 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v900, v902 + 1, (unint64_t)&v880);
                          *(_DWORD *)(v900 + 4 * v902) = *v144;
                          v125 = v899;
                        }
                        else
                        {
                          *(_DWORD *)(v900 + 4 * v902) = v127;
                        }
                        ++v902;
                        *(_DWORD *)(v125 + 4 * v127) = v129;
                      }
                      ++v124;
                      v126 -= 4;
                    }
                    while (v126);
                  }
                  v107 = v108;
                }
                while ((_DWORD)v108);
                if (!*((_DWORD *)v98 + 5))
                {
LABEL_1248:
                  __break(0xC471u);
                  JUMPOUT(0x19804A3A8);
                }
                v141 = (v141 + 1);
                v142 = *((unsigned int *)v743 + 27);
                if (v142 > v141)
                {
                  while (!*(_QWORD *)(*((_QWORD *)v743 + 12) + 8 * v141))
                  {
                    if (v142 == ++v141)
                    {
                      LODWORD(v141) = *((_DWORD *)v743 + 27);
                      break;
                    }
                  }
                }
              }
              while ((_DWORD)v744 != (_DWORD)v141);
            }
          }
LABEL_1154:
          WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v896, v138, v139, v140, v114, v115, v116, v117);
          v826 = (WTF::BitVector *)v865[0];
          if (*(_DWORD *)&v863[20])
          {
            LOBYTE(v880) = 0;
            v96 = *(_DWORD **)&v863[8];
            *(_QWORD *)&v896 = &v827;
            *((_QWORD *)&v896 + 1) = &v880;
            v97 = *(_QWORD *)&v863[8] + 4 * *(unsigned int *)&v863[20];
            while (1)
            {
              if (*v96 != -1)
              if (++v96 == (_DWORD *)v97)
              {
                if (!(_BYTE)v880)
                  break;
                LOBYTE(v880) = 0;
                v96 = *(_DWORD **)&v863[8];
                *(_QWORD *)&v896 = &v827;
                *((_QWORD *)&v896 + 1) = &v880;
                v97 = *(_QWORD *)&v863[8] + 4 * *(unsigned int *)&v863[20];
                if (!*(_DWORD *)&v863[20])
                  break;
              }
            }
          }
          LOBYTE(v880) = 0;
          if (*(_DWORD *)&v863[36])
          {
            v747 = *(_DWORD **)&v863[24];
            *(_QWORD *)&v896 = &v827;
            *((_QWORD *)&v896 + 1) = &v880;
            v748 = *(_QWORD *)&v863[24] + 4 * *(unsigned int *)&v863[36];
            while (1)
            {
              if (*v747 != -1)
              if (++v747 == (_DWORD *)v748)
              {
                if (!(_BYTE)v880)
                  break;
                LOBYTE(v880) = 0;
                v747 = *(_DWORD **)&v863[24];
                *(_QWORD *)&v896 = &v827;
                *((_QWORD *)&v896 + 1) = &v880;
                v748 = *(_QWORD *)&v863[24] + 4 * *(unsigned int *)&v863[36];
                if (!*(_DWORD *)&v863[36])
                  break;
              }
            }
          }
          if ((_DWORD)v853)
          {
            if (HIDWORD(v853))
              HIDWORD(v853) = 0;
            v750 = v852;
            if (v852)
            {
              v852 = 0;
              LODWORD(v853) = 0;
              WTF::fastFree((unint64_t)v750, v86, v87, v88, v89, v90, v91, v92);
            }
          }
          if ((v854[0] & 0x8000000000000000) != 0)
            v854[0] = 0x8000000000000000;
          else
            bzero((void *)(2 * v854[0] + 8), (unint64_t)(*(_QWORD *)(2 * v854[0]) + 7) >> 3);
          v79 = (__int16)v829;
          v749 = HIDWORD(v828);
          while (1)
          {
            v75 = v79 + 1;
            LOWORD(v896) = v75;
            if (v837 <= v75)
              break;
            if (v849 >= 0)
              v76 = (uint64_t *)(2 * v849 + 8);
            else
              v76 = &v849;
            v77 = v75 >> 6;
            v78 = 1 << v75;
            if (((1 << v75) & v76[v77]) == 0)
            {
              v80 = v75;
              if (!*(_WORD *)(v847 + 2 * v75))
              {
                if (v749 <= *(unsigned __int16 *)(v836 + 2 * v75))
                {
                  v82 = (uint64_t)v856;
                  if (*v856 >= 0)
                    v82 = 2 * *v856 + 8;
                  if ((*(_QWORD *)(v82 + 8 * v77) & v78) == 0)
                  {
                    v83 = v854[0];
                    if ((v854[0] & 0x8000000000000000) != 0)
                      v84 = 63;
                    else
                      v84 = *(_QWORD *)(2 * v854[0]);
                    if (v84 <= v80)
                    {
                      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v854, v80 + 1, 0);
                      v83 = v854[0];
                    }
                    if (v83 >= 0)
                      v85 = (_QWORD *)(2 * v83 + 8);
                    else
                      v85 = v854;
                    v85[v77] |= v78;
                  }
                }
                else
                {
                  v81 = HIDWORD(v853);
                  if (HIDWORD(v853) == (_DWORD)v853)
                  {
                    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v852, (unint64_t)&v896);
                  }
                  else
                  {
                    *((_WORD *)v852 + HIDWORD(v853)) = v75;
                    HIDWORD(v853) = v81 + 1;
                  }
                }
              }
            }
            v79 = v896;
          }
          while (1)
          {
            LOBYTE(v880) = 0;
            while (HIDWORD(v853))
            {
              v440 = *((unsigned __int16 *)v852 + HIDWORD(v853) - 1);
              --HIDWORD(v853);
              LOWORD(v886) = v440;
              v441 = HIDWORD(v851);
              if (HIDWORD(v851) == (_DWORD)v851)
              {
                WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v850, (unint64_t)&v886);
                v440 = (unsigned __int16)v886;
              }
              else
              {
                *(_WORD *)(v850 + 2 * HIDWORD(v851)) = v440;
                HIDWORD(v851) = v441 + 1;
              }
              if (v849 >= 0)
                v442 = (uint64_t *)(2 * v849 + 8);
              else
                v442 = &v849;
              *(uint64_t *)((char *)v442 + ((v440 >> 3) & 0x1FF8)) |= 1 << v440;
              v443 = v834 + 16 * v440;
              v444 = *(unsigned int *)(v443 + 12);
              if ((_DWORD)v444)
              {
                v445 = *(_WORD **)v443;
                v446 = 2 * v444;
                do
                {
                  v447 = (unsigned __int16)*v445;
                  v448 = (uint64_t *)(2 * v849 + 8);
                  if (v849 < 0)
                    v448 = &v849;
                  if (((1 << v447) & v448[v447 >> 6]) == 0 && !*(_WORD *)(v847 + 2 * v447))
                  {
                    LOWORD(v896) = *v445;
                    v449 = *(unsigned __int16 *)(v836 + 2 * v447);
                    *(_WORD *)(v836 + 2 * v447) = v449 - 1;
                    if (HIDWORD(v828) == v449)
                    {
                      if (v854[0] >= 0)
                        v450 = (_QWORD *)(2 * v854[0] + 8);
                      else
                        v450 = v854;
                      v450[v447 >> 6] &= ~(1 << v447);
                      v451 = HIDWORD(v853);
                      if (HIDWORD(v853) == (_DWORD)v853)
                      {
                        WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v852, (unint64_t)&v896);
                      }
                      else
                      {
                        *((_WORD *)v852 + HIDWORD(v853)) = v447;
                        HIDWORD(v853) = v451 + 1;
                      }
                    }
                  }
                  ++v445;
                  v446 -= 2;
                }
                while (v446);
              }
            }
            if ((v854[0] & 0x8000000000000000) != 0)
            {
              if ((v854[0] & 0x7FFFFFFFFFFFFFFFLL) != 0)
              {
LABEL_672:
                LOWORD(v896) = v454;
                if (v854[0] >= 0)
                  v455 = (_QWORD *)(2 * v854[0] + 8);
                else
                  v455 = v854;
                *(_QWORD *)((char *)v455 + (((unint64_t)v454 >> 3) & 0x1FF8)) &= ~(1 << v454);
                v456 = HIDWORD(v853);
                if (HIDWORD(v853) == (_DWORD)v853)
                {
                  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v852, (unint64_t)&v896);
                }
                else
                {
                  *((_WORD *)v852 + HIDWORD(v853)) = v454;
                  HIDWORD(v853) = v456 + 1;
                }
                v457 = 1;
                LOBYTE(v880) = 1;
                goto LABEL_678;
              }
            }
            else
            {
              v452 = 8 * ((unint64_t)(*(_QWORD *)(2 * v854[0]) + 63) >> 6);
              while (v452)
              {
                v453 = *(_QWORD *)(2 * v854[0] + v452);
                v452 -= 8;
                if (v453)
                  goto LABEL_672;
              }
            }
            v457 = v880;
LABEL_678:
            if (!v457)
            {
              *(_DWORD *)v863 = 0;
              v228 = v826;
              if (*(_DWORD *)&v863[16])
              {
                if (*(_DWORD *)&v863[20])
                  *(_DWORD *)&v863[20] = 0;
                v680 = *(_QWORD *)&v863[8];
                if (*(_QWORD *)&v863[8])
                {
                  *(_QWORD *)&v863[8] = 0;
                  *(_DWORD *)&v863[16] = 0;
                  WTF::fastFree(v680, v86, v87, v88, v89, v90, v91, v92);
                }
              }
              if (*(_DWORD *)&v863[32])
              {
                if (*(_DWORD *)&v863[36])
                  *(_DWORD *)&v863[36] = 0;
                v681 = *(_QWORD *)&v863[24];
                if (*(_QWORD *)&v863[24])
                {
                  *(_QWORD *)&v863[24] = 0;
                  *(_DWORD *)&v863[32] = 0;
                  WTF::fastFree(v681, v86, v87, v88, v89, v90, v91, v92);
                }
              }
              v814 = HIDWORD(v846);
              if (HIDWORD(v846))
              {
                v464 = (WTF::BitVector *)v866;
                v914[0] = 0;
                v823 = (WTF::BitVector *)v866;
                v473 = 2 * HIDWORD(v846);
                v472 = v845;
                do
                {
                  v458 = *v472;
                  LODWORD(v880) = *v472;
                  v459 = *(_QWORD *)v464;
                  v460 = v464;
                  if ((*(_QWORD *)v464 & 0x8000000000000000) != 0)
                    v461 = 63;
                  else
                    v461 = *(_QWORD *)(2 * v459);
                  if (v461 <= v458)
                  {
                    WTF::BitVector::resizeOutOfLine(v464, v458 + 1, 0);
                    v460 = v823;
                    v459 = *(_QWORD *)v823;
                  }
                  if (v459 >= 0)
                    v462 = 2 * v459 + 8;
                  else
                    v462 = (uint64_t)v460;
                  *(_QWORD *)(v462 + ((v458 >> 3) & 0x1FF8)) |= 1 << v458;
                  v463 = *(_QWORD *)v826;
                  v464 = v460;
                  v465 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)v826 + 8, v458);
                  v466 = 16;
                  if (v465 == 3)
                    v466 = 8;
                  if (v465 >= 3)
                    v467 = v466;
                  else
                    v467 = 4;
                  v886 = (WTF *)JSC::B3::Air::Code::addStackSlot(v463, v467, 1);
                  WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v896, v914, (int *)&v880, &v886, v468, v469, v470, v471);
                  ++v472;
                  v473 -= 2;
                }
                while (v473);
                v252 = *(_QWORD *)v826;
                *(_QWORD *)&v896 = v252;
                *((_QWORD *)&v896 + 1) = &v898;
                v897 = 8;
                v818 = *(unsigned int *)(v252 + 108);
                if ((_DWORD)v818)
                {
                  v251 = 0;
                  while (!*(_QWORD *)(*(_QWORD *)(v252 + 96) + 8 * v251))
                  {
                    if (v818 == ++v251)
                      goto LABEL_1047;
                  }
                  if ((_DWORD)v818 != (_DWORD)v251)
                  {
                    v817 = v252;
                    LODWORD(v253) = *(_DWORD *)(v252 + 108);
                    do
                    {
                      if (v253 <= v251)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804A4D0);
                      }
                      v216 = *(_QWORD *)(*(_QWORD *)(v252 + 96) + 8 * v251);
                      LOBYTE(v878) = 0;
                      LODWORD(v879) = 0;
                      if (*(_DWORD *)(v216 + 20))
                      {
                        v217 = 0;
                        do
                        {
                          v218 = v217;
                          v219 = *(_QWORD *)(v216 + 8);
                          v220 = (__int16 *)(v219 + ((unint64_t)v217 << 7));
                          v895 = 0;
                          v894 = 0;
                          v222 = v220 + 60;
                          v221 = v220[60];
                          if (v221 == 90)
                          {
                            v239 = *((_DWORD *)v220 + 3);
                            if (!v239)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19804A4FCLL);
                            }
                            v240 = *(_QWORD *)v220;
                            if (*(_BYTE *)(*(_QWORD *)v220 + 8) == 1)
                            {
                              v241 = *(unsigned int *)(v240 + 16);
                              if ((int)v241 < 1)
                              {
                                v241 = -(int)v241;
                                v242 = (_QWORD *)((char *)v826 + 24);
                                if (v241 >= *((unsigned int *)v228 + 9))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19804A524);
                                }
                              }
                              else
                              {
                                v242 = (_QWORD *)((char *)v826 + 8);
                                if (v241 >= *((_DWORD *)v228 + 5))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19804A504);
                                }
                              }
                              v243 = (unsigned __int8 *)(*v242 + 2 * v241);
                              v244 = *v243;
                              v245 = v243[1];
                              if (v245 >= v244)
                                v245 = v244;
                              if (v245 < 3)
                                goto LABEL_343;
                            }
                            if (v239 <= 1)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19804A50CLL);
                            }
                            if (*(_BYTE *)(v240 + 40) == 1)
                            {
                              v246 = *(unsigned int *)(v240 + 48);
                              if ((int)v246 < 1)
                              {
                                v246 = -(int)v246;
                                v247 = (_QWORD *)((char *)v826 + 24);
                                if (v246 >= *((unsigned int *)v228 + 9))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19804A51CLL);
                                }
                              }
                              else
                              {
                                v247 = (_QWORD *)((char *)v826 + 8);
                                if (v246 >= *((_DWORD *)v228 + 5))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19804A514);
                                }
                              }
                              v248 = (unsigned __int8 *)(*v247 + 2 * v246);
                              v249 = *v248;
                              v250 = v248[1];
                              if (v250 >= v249)
                                v250 = v249;
                              if (v250 <= 2)
LABEL_343:
                                HIBYTE(v895) = 1;
                            }
                          }
                          v886 = (WTF *)v914;
                          v887 = (JSC::B3::Air::Inst *)v220;
                          v888 = (uint64_t)v228;
                          *(_QWORD *)&v889 = (char *)&v895 + 1;
                          *((_QWORD *)&v889 + 1) = &v895;
                          *(_QWORD *)&v890 = &v894;
                          if ((v221 - 446) <= 5)
                          {
                            v881 = (uint64_t)&v880;
                            *(_QWORD *)v882 = &v886;
                          }
                          else
                          {
                            v223 = *((unsigned int *)v220 + 3);
                            if ((_DWORD)v223)
                            {
                              v224 = 0;
                              v225 = 0;
                              v226 = (char *)&JSC::B3::Air::g_formTable
                                   + 21 * v221
                                   + ((unint64_t)((v223 - 1) * v223) >> 1);
                              v227 = 32 * v223;
                              do
                              {
                                if (v225 >= *((unsigned int *)v220 + 3))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19804A390);
                                }
                                if ((*v226 >> 5) - 1 >= 5u)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x198049FB4);
                                }
                                ++v225;
                                ++v226;
                                v224 += 32;
                              }
                              while (v227 != v224);
                            }
                          }
                          if ((_BYTE)v895 && HIBYTE(v895))
                            *v222 = 94;
                          v228 = v826;
                          if (v894)
                          {
                            v710 = *v222;
                            if (v710 != 90)
                            {
                              if ((v710 - 107) < 2)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198049B28);
                              }
                              if (v710 != 94)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198049B50);
                              }
                            }
                            v711 = *(_DWORD *)(*(_QWORD *)v826 + 176);
                            *(_DWORD *)(*(_QWORD *)v826 + 176) = v711 + 1;
                            LODWORD(v886) = v711 + 33;
                            WTF::BitVector::set(v823, (v711 + 33));
                            v718 = *((unsigned int *)v220 + 3);
                            if ((_DWORD)v718 == *((_DWORD *)v220 + 2))
                            {
                              WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v220, (unsigned int *)&v886, v712, v713, v714, v715, v716, v717);
                              v721 = *((_DWORD *)v220 + 3);
                            }
                            else
                            {
                              v719 = *(_QWORD *)v220 + 32 * v718;
                              v720 = v886;
                              *(_QWORD *)v719 = 0;
                              *(_WORD *)(v719 + 8) = 513;
                              *(_DWORD *)(v719 + 12) = 1;
                              *(_QWORD *)(v719 + 16) = v720;
                              *(_BYTE *)(v719 + 24) = 0;
                              v721 = *((_DWORD *)v220 + 3) + 1;
                              *((_DWORD *)v220 + 3) = v721;
                            }
                            if (v721 != 3)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19804A250);
                            }
                            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&>((uint64_t)&v896, v879, 0, *(_QWORD *)(v219 + (v218 << 7) + 112), v714, v715, v716, v717);
                          }
                          else
                          {
                            v886 = (WTF *)v914;
                            v887 = (JSC::B3::Air::Inst *)&v827;
                            v888 = (uint64_t)&v878;
                            *(_QWORD *)&v889 = v826;
                            *((_QWORD *)&v889 + 1) = v823;
                            *(_QWORD *)&v890 = &v896;
                            *((_QWORD *)&v890 + 1) = &v879;
                            *(_QWORD *)&v891 = v220;
                            v869 = &v886;
                            v229 = *v222;
                            if ((v229 - 446) <= 5)
                            {
                              v881 = (uint64_t)&v880;
                              *(_QWORD *)v882 = &v869;
                            }
                            else
                            {
                              v230 = *((unsigned int *)v220 + 3);
                              if ((_DWORD)v230)
                              {
                                v231 = 0;
                                v232 = (char *)&JSC::B3::Air::g_formTable
                                     + 21 * v229
                                     + ((unint64_t)((v230 - 1) * v230) >> 1);
                                v233 = 16;
                                do
                                {
                                  if (v231 >= *((unsigned int *)v220 + 3))
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19804A398);
                                  }
                                  v234 = v232[v231];
                                  if ((v234 >> 5) - 1 >= 5)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19804A270);
                                  }
                                  v235 = *(_QWORD *)v220;
                                  switch(*(_BYTE *)(*(_QWORD *)v220 + v233 - 8))
                                  {
                                    case 1:
                                      v236 = v234 & 0xF;
                                      v237 = (v234 >> 4) & 1;
                                      v238 = (unsigned int *)(v235 + v233);
                                      goto LABEL_323;
                                    case 6:
                                    case 7:
                                    case 8:
                                      v238 = (unsigned int *)(v235 + v233);
                                      goto LABEL_327;
                                    case 0xB:
                                      v264 = v235 + v233;
                                      v238 = (unsigned int *)(v264 + 4);
LABEL_327:
                                      v236 = 0;
                                      goto LABEL_328;
                                    case 0xC:
                                    case 0xD:
                                      v238 = (unsigned int *)(v235 + v233);
                                      v236 = 6;
LABEL_328:
                                      v237 = 0;
LABEL_323:
                                      break;
                                    default:
                                      break;
                                  }
                                  ++v231;
                                  v233 += 32;
                                }
                                while (v230 != v231);
                              }
                            }
                          }
                          v217 = v879 + 1;
                          LODWORD(v879) = v217;
                        }
                        while (v217 < *(_DWORD *)(v216 + 20));
                      }
                      JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v896, (JSC::B3::Air::BasicBlock *)v216, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                      if ((_BYTE)v878)
                      {
                        v254 = *(_QWORD *)(v216 + 8);
                        v255 = *(unsigned int *)(v216 + 20);
                        v256 = v254 + (v255 << 7);
                        if ((_DWORD)v255)
                        {
                          v257 = 0;
                          v258 = 0;
                          v259 = (unsigned int *)(v254 + (v255 << 7));
                          v260 = (unint64_t)v259;
                          do
                          {
                            v261 = (unsigned int *)(v254 + v257);
                            if ((*(__int16 *)(v254 + v257 + 120) | 4) == 0x5E && v261[3] == 2)
                            {
                              v262 = *(_QWORD *)v261;
                              if (*(_BYTE *)(*(_QWORD *)v261 + 8) == 1)
                              {
                                v263 = *(_WORD *)(v254 + v257 + 120) != 94 && *(_BYTE *)(v262 + 40) == 1;
                                if (v263 && *(_DWORD *)(v262 + 16) == *(_DWORD *)(v262 + 48))
                                {
                                  if (v260 == *(_QWORD *)(v216 + 8)
                                             + ((unint64_t)*(unsigned int *)(v216 + 20) << 7))
                                  {
                                    v260 = v254 + v257;
                                  }
                                  else if (v261 != v259)
                                  {
                                    WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v259, v261, v260, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                                    v260 += v254 + v257 - (_QWORD)v259;
                                    v262 = *(_QWORD *)(v254 + v257);
                                  }
                                  if (v254 + v257 + 16 != v262 && v262)
                                  {
                                    v265 = v254 + v257;
                                    *(_QWORD *)v265 = 0;
                                    *(_DWORD *)(v265 + 8) = 0;
                                    WTF::fastFree(v262, v261, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                                  }
                                  v259 = (unsigned int *)(v254 + v257 + 128);
                                  ++v258;
                                }
                              }
                            }
                            v257 += 128;
                          }
                          while (v254 + v257 < v256);
                          v254 = *(_QWORD *)(v216 + 8);
                          LODWORD(v255) = *(_DWORD *)(v216 + 20);
                          v256 = v260;
                        }
                        else
                        {
                          v258 = 0;
                          v259 = (unsigned int *)(v254 + (v255 << 7));
                        }
                        v193 = v254 + ((unint64_t)v255 << 7);
                        if (v259 != (unsigned int *)v193)
                        {
                          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v259, (unsigned int *)v193, v256, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                          LODWORD(v255) = *(_DWORD *)(v216 + 20);
                        }
                        *(_DWORD *)(v216 + 20) = v255 - v258;
                      }
                      v251 = (v251 + 1);
                      v252 = v817;
                      v253 = *(unsigned int *)(v817 + 108);
                      if (v253 > v251)
                      {
                        do
                        {
                          if (*(_QWORD *)(*(_QWORD *)(v817 + 96) + 8 * v251))
                            goto LABEL_350;
                          ++v251;
                        }
                        while (v253 != v251);
                        LODWORD(v251) = *(_DWORD *)(v817 + 108);
                      }
LABEL_350:
                      ;
                    }
                    while ((_DWORD)v818 != (_DWORD)v251);
                    v660 = (uint64_t *)*((_QWORD *)&v896 + 1);
                    if (HIDWORD(v897))
                    {
                      v788 = 136 * HIDWORD(v897);
                      v789 = *((_QWORD *)&v896 + 1) + 24;
                      do
                      {
                        v790 = *(_QWORD *)(v789 - 16);
                        if (v789 != v790 && v790 != 0)
                        {
                          *(_QWORD *)(v789 - 16) = 0;
                          *(_DWORD *)(v789 - 8) = 0;
                          WTF::fastFree(v790, (void *)v193, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                        }
                        v789 += 136;
                        v788 -= 136;
                      }
                      while (v788);
                      v660 = (uint64_t *)*((_QWORD *)&v896 + 1);
                    }
                    if (&v898 != v660 && v660)
                    {
                      *((_QWORD *)&v896 + 1) = 0;
                      LODWORD(v897) = 0;
                      WTF::fastFree((unint64_t)v660, (void *)v193, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                    }
                  }
                }
LABEL_1047:
                if (v914[0])
                  WTF::fastFree(v914[0] - 16, (void *)v193, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                goto LABEL_1049;
              }
              v643 = *(_QWORD *)v826;
              v644 = *(unsigned int *)(*(_QWORD *)v826 + 108);
              v199 = 12738;
              v198 = 31;
              v197 = 3;
              if (!(_DWORD)v644)
                goto LABEL_1049;
              v184 = 0;
              while (!*(_QWORD *)(*(_QWORD *)(v643 + 96) + 8 * v184))
              {
                if (v644 == ++v184)
                  goto LABEL_1049;
              }
              if ((_DWORD)v644 == (_DWORD)v184)
              {
LABEL_1049:
                v661 = *(_QWORD *)&v863[24];
                if (*(_QWORD *)&v863[24])
                {
                  *(_QWORD *)&v863[24] = 0;
                  *(_DWORD *)&v863[32] = 0;
                  WTF::fastFree(v661, (void *)v193, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                }
                v662 = *(_QWORD *)&v863[8];
                if (*(_QWORD *)&v863[8])
                {
                  *(_QWORD *)&v863[8] = 0;
                  *(_DWORD *)&v863[16] = 0;
                  WTF::fastFree(v662, (void *)v193, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                }
                if (v814)
                  goto LABEL_89;
                goto LABEL_1054;
              }
              v195 = &v897;
              v196 = v904;
              LODWORD(v185) = *(_DWORD *)(*(_QWORD *)v826 + 108);
              while (2)
              {
                if (v185 <= v184)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804A4BCLL);
                }
                v145 = *(_QWORD *)(*(_QWORD *)(v643 + 96) + 8 * v184);
                LODWORD(v146) = *(_DWORD *)(v145 + 20);
                if (!(_DWORD)v146)
                {
                  v179 = 0;
                  v176 = *(_QWORD *)(v145 + 8);
                  v177 = v176;
                  v180 = v176;
                  goto LABEL_243;
                }
                v147 = 0;
LABEL_184:
                v148 = *(_QWORD *)(v145 + 8);
                v149 = v148 + (v147 << 7);
                if ((*(__int16 *)(v149 + 120) | 4) == 0x5E)
                {
                  v150 = *(unsigned int *)(v149 + 12);
                  v151 = *(_QWORD *)v149;
                  if ((_DWORD)v150 == 2)
                  {
                    if (*(_BYTE *)(v151 + 8) != 1 || *(_BYTE *)(v151 + 40) != 1)
                      goto LABEL_193;
                    if (*(_WORD *)(v149 + 120) != 94)
                      goto LABEL_189;
                    v152 = v864;
                    if (v864)
                    {
                      v192 = *(unsigned int *)(v151 + 16);
                      if ((int)v192 < 1)
                      {
                        v192 = -(int)v192;
                        if (v192 >= *((unsigned int *)v864 + 7))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19804A4B4);
                        }
                        v152 = v864 + 2;
                      }
                      else if (v192 >= *((_DWORD *)v864 + 3))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804A4ACLL);
                      }
                      if (*(unsigned __int8 *)(*v152 + 2 * v192 + 1) <= 2u)
LABEL_189:
                        LODWORD(v152) = 1;
                      else
LABEL_193:
                        LODWORD(v152) = 0;
                    }
                    v153 = v151 + 64;
LABEL_195:
                    v154 = v847;
                    v155 = v843;
                    v156 = v151;
                    do
                    {
                      v157 = *(char *)(v156 + 8);
                      if (v157 <= 0xD)
                      {
                        if (((1 << v157) & 0x31C2) != 0)
                        {
                          v158 = *(_DWORD *)(v156 + 16);
                          if ((v158 & 0x80000000) == 0 && (v158 - 33) <= 0xFFFFFFDF)
                          {
                            do
                            {
                              v159 = (unsigned __int16)v158;
                              v158 = *(unsigned __int16 *)(v154 + 2 * (unsigned __int16)v158);
                            }
                            while (v158);
                            if ((v159 - 1) <= 0x1F)
                            {
                              v174 = v159 + 127;
                              v175 = ((_BYTE)v159 + 127) & 0x7F;
                              if ((v174 & 0x60) != 0)
                                v162 = (char)(31 - (v174 & 0x7F));
                              else
                                v162 = v175 + 1;
                              if (v175 == 127)
                                v162 = 0;
                            }
                            else
                            {
                              LODWORD(v896) = v159;
                              v160 = v155[v159];
                              v161 = v160 & 0x7F;
                              if (v161 == 127)
                              {
                                WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v896);
                                WTF::dataLog<char [7]>();
                                WTF::dataLog<JSC::B3::Air::Code>(v858);
                                __break(0xC471u);
                                JUMPOUT(0x198049ED0);
                              }
                              if ((v160 & 0x60) != 0)
                                v162 = (char)(31 - v161);
                              else
                                v162 = v161 + 1;
                            }
                            *(_DWORD *)(v156 + 16) = v162;
                          }
                        }
                        else if (v157 == 11)
                        {
                          v164 = *(_DWORD *)(v156 + 16);
                          if ((v164 & 0x80000000) == 0 && (v164 - 33) <= 0xFFFFFFDF)
                          {
                            do
                            {
                              v163 = (unsigned __int16)v164;
                              v164 = *(unsigned __int16 *)(v154 + 2 * (unsigned __int16)v164);
                            }
                            while (v164);
                            if ((v163 - 1) <= 0x1F)
                            {
                              v201 = v163 + 127;
                              v202 = ((_BYTE)v163 + 127) & 0x7F;
                              if ((v201 & 0x60) != 0)
                                v188 = (char)(31 - (v201 & 0x7F));
                              else
                                v188 = v202 + 1;
                              if (v202 == 127)
                                v188 = 0;
                            }
                            else
                            {
                              LODWORD(v896) = v163;
                              v186 = v155[v163];
                              v187 = v186 & 0x7F;
                              if (v187 == 127)
                              {
                                WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v896);
                                WTF::dataLog<char [7]>();
                                WTF::dataLog<JSC::B3::Air::Code>(v858);
                                __break(0xC471u);
                                JUMPOUT(0x19804A15CLL);
                              }
                              if ((v186 & 0x60) != 0)
                                v188 = (char)(31 - v187);
                              else
                                v188 = v187 + 1;
                            }
                            *(_DWORD *)(v156 + 16) = v188;
                          }
                          v166 = *(_DWORD *)(v156 + 20);
                          if ((v166 & 0x80000000) == 0 && (v166 - 33) <= 0xFFFFFFDF)
                          {
                            do
                            {
                              v165 = (unsigned __int16)v166;
                              v166 = *(unsigned __int16 *)(v154 + 2 * (unsigned __int16)v166);
                            }
                            while (v166);
                            if ((v165 - 1) <= 0x1F)
                            {
                              v203 = v165 + 127;
                              v204 = ((_BYTE)v165 + 127) & 0x7F;
                              if ((v203 & 0x60) != 0)
                                v191 = (char)(31 - (v203 & 0x7F));
                              else
                                v191 = v204 + 1;
                              if (v204 == 127)
                                v191 = 0;
                            }
                            else
                            {
                              LODWORD(v896) = v165;
                              v189 = v155[v165];
                              v190 = v189 & 0x7F;
                              if (v190 == 127)
                              {
                                WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v896);
                                WTF::dataLog<char [7]>();
                                WTF::dataLog<JSC::B3::Air::Code>(v858);
                                __break(0xC471u);
                                JUMPOUT(0x19804A190);
                              }
                              if ((v189 & 0x60) != 0)
                                v191 = (char)(31 - v190);
                              else
                                v191 = v190 + 1;
                            }
                            *(_DWORD *)(v156 + 20) = v191;
                          }
                        }
                      }
                      v156 += 32;
                    }
                    while (v156 != v153);
                    if ((_DWORD)v152)
                    {
                      v167 = *(_DWORD *)(v149 + 12);
                      if (!v167)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804A49CLL);
                      }
                      if (*(_BYTE *)(v151 + 8) == 1)
                      {
                        if (v167 <= 1)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19804A4A4);
                        }
                        if (*(_BYTE *)(v151 + 40) == 1 && *(_DWORD *)(v151 + 16) == *(_DWORD *)(v151 + 48))
                        {
                          *(_QWORD *)&v896 = &v897;
                          *((_QWORD *)&v896 + 1) = 3;
                          *(_QWORD *)v904 = 0;
                          *(_WORD *)&v904[8] = 0;
                          v904[10] &= 0xFCu;
                          v169 = (_OWORD *)(v149 + 16);
                          v168 = *(_QWORD *)v149;
                          if (*(_QWORD *)v149 != v149 + 16)
                          {
                            if (v168)
                            {
                              *(_QWORD *)v149 = 0;
                              *(_DWORD *)(v149 + 8) = 0;
                              WTF::fastFree(v168, (void *)v193, 12738, 31, 3, (uint64_t)&v897, (uint64_t)v904, v194);
                              v196 = v904;
                              v195 = &v897;
                              v197 = 3;
                              v198 = 31;
                              v199 = 12738;
                            }
                            *(_QWORD *)v149 = v169;
                            v200 = v896;
                            if ((uint64_t *)v896 == &v897)
                            {
                              if (HIDWORD(v896))
                              {
                                v800 = 32 * HIDWORD(v896);
                                v801 = &v897;
                                do
                                {
                                  v802 = *(_OWORD *)v801;
                                  v803 = *((_OWORD *)v801 + 1);
                                  v801 += 4;
                                  *v169 = v802;
                                  v169[1] = v803;
                                  v169 += 2;
                                  v800 -= 32;
                                }
                                while (v800);
                              }
                            }
                            else
                            {
                              *(_QWORD *)&v896 = &v897;
                              *(_QWORD *)v149 = v200;
                            }
                          }
                          *(_DWORD *)(v149 + 8) = DWORD2(v896);
                          v170 = HIDWORD(v896);
                          HIDWORD(v896) = 0;
                          *(_DWORD *)(v149 + 12) = v170;
                          v171 = v148 + (v147 << 7);
                          v172 = *(_QWORD *)v904;
                          *(_DWORD *)(v171 + 119) = *(_DWORD *)&v904[7];
                          *(_QWORD *)(v171 + 112) = v172;
                          v173 = v896;
                          if (&v897 != (uint64_t *)v896 && (_QWORD)v896)
                          {
                            *(_QWORD *)&v896 = 0;
                            DWORD2(v896) = 0;
                            WTF::fastFree(v173, (void *)v193, 12738, 31, 3, (uint64_t)&v897, (uint64_t)v904, v194);
                            v196 = v904;
                            v195 = &v897;
                            v197 = 3;
                            v198 = 31;
                            v199 = 12738;
                          }
                        }
                      }
                    }
                    goto LABEL_216;
                  }
                }
                else
                {
                  v151 = *(_QWORD *)v149;
                  v150 = *(unsigned int *)(v149 + 12);
                }
                if (v150)
                {
                  LODWORD(v152) = 0;
                  v153 = v151 + 32 * v150;
                  goto LABEL_195;
                }
LABEL_216:
                ++v147;
                v146 = *(unsigned int *)(v145 + 20);
                if (v147 >= v146)
                {
                  v176 = *(_QWORD *)(v145 + 8);
                  v177 = v176 + (v146 << 7);
                  if ((_DWORD)v146)
                  {
                    v178 = 0;
                    v179 = 0;
                    v180 = v176 + (v146 << 7);
                    v181 = v180;
                    do
                    {
                      v193 = v176 + v178;
                      if (*(_QWORD *)(v176 + v178 + 112))
                        v182 = 0;
                      else
                        v182 = *(unsigned __int16 *)(v176 + v178 + 120) == 0;
                      if (v182 && (*(_BYTE *)(v193 + 122) & 3) == 0)
                      {
                        if (!*(_DWORD *)(v176 + v178 + 12))
                        {
                          if (v181 == *(_QWORD *)(v145 + 8) + ((unint64_t)*(unsigned int *)(v145 + 20) << 7))
                          {
                            v181 = v176 + v178;
                          }
                          else if (v193 != v180)
                          {
                            WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)v180, (unsigned int *)v193, v181, 31, 3, (uint64_t)&v897, (uint64_t)v904, v194);
                            v181 += v176 + v178 - v180;
                          }
                          v793 = *(_QWORD *)(v176 + v178);
                          if (v176 + v178 + 16 != v793 && v793)
                          {
                            v795 = v176 + v178;
                            *(_QWORD *)v795 = 0;
                            *(_DWORD *)(v795 + 8) = 0;
                            WTF::fastFree(v793, (void *)v193, v199, v198, v197, (uint64_t)v195, (uint64_t)v196, v194);
                          }
                          v180 = v176 + v178 + 128;
                          ++v179;
                        }
                        v199 = 12738;
                        v198 = 31;
                        v197 = 3;
                        v196 = v904;
                        v195 = &v897;
                      }
                      v178 += 128;
                    }
                    while (v176 + v178 < v177);
                    v176 = *(_QWORD *)(v145 + 8);
                    LODWORD(v146) = *(_DWORD *)(v145 + 20);
                    v177 = v181;
                  }
                  else
                  {
                    v179 = 0;
                    v180 = v176 + (v146 << 7);
                  }
LABEL_243:
                  v183 = v176 + ((unint64_t)v146 << 7);
                  if (v180 != v183)
                  {
                    if (v180 > v177)
                    {
                      do
                      {
                        *(_QWORD *)v177 = v177 + 16;
                        *(_QWORD *)(v177 + 8) = 3;
                        v206 = v180 + 16;
                        v207 = *(_QWORD *)v180;
                        if (*(_QWORD *)v180 == v180 + 16)
                        {
                          v208 = *(unsigned int *)(v180 + 12);
                          if ((_DWORD)v208)
                          {
                            v209 = 0;
                            v210 = 32 * v208;
                            do
                            {
                              v211 = v177 + v209;
                              v212 = *(_OWORD *)(v207 + v209 + 16);
                              *(_OWORD *)(v211 + 16) = *(_OWORD *)(v207 + v209);
                              *(_OWORD *)(v211 + 32) = v212;
                              v209 += 32;
                            }
                            while (v210 != v209);
                          }
                        }
                        else
                        {
                          *(_QWORD *)v180 = v206;
                          *(_QWORD *)v177 = v207;
                          v205 = *(_DWORD *)(v180 + 8);
                          *(_DWORD *)(v180 + 8) = 3;
                          *(_DWORD *)(v177 + 8) = v205;
                        }
                        v213 = *(_DWORD *)(v180 + 12);
                        *(_DWORD *)(v180 + 12) = 0;
                        *(_DWORD *)(v177 + 12) = v213;
                        v214 = *(_QWORD *)(v180 + 112);
                        *(_DWORD *)(v177 + 119) = *(_DWORD *)(v180 + 119);
                        *(_QWORD *)(v177 + 112) = v214;
                        v215 = *(_QWORD *)v180;
                        if (v206 != *(_QWORD *)v180 && v215)
                        {
                          *(_QWORD *)v180 = 0;
                          *(_DWORD *)(v180 + 8) = 0;
                          WTF::fastFree(v215, (void *)v193, 12738, 31, 3, (uint64_t)&v897, (uint64_t)v904, v194);
                          v196 = v904;
                          v195 = &v897;
                          v197 = 3;
                          v198 = 31;
                          v199 = 12738;
                        }
                        v177 += 128;
                        v180 += 128;
                      }
                      while (v180 != v183);
                    }
                    else
                    {
                      v761 = 0;
                      do
                      {
                        JSC::B3::Air::Inst::Inst(v177 + ((v183 - v180) & 0xFFFFFFFFFFFFFF80) - 128 + v761, v183 + v761 - 128);
                        v767 = *(_QWORD *)(v183 + v761 - 128);
                        if (v183 + v761 - 112 != v767 && v767 != 0)
                        {
                          *(_QWORD *)(v183 + v761 - 128) = 0;
                          *(_DWORD *)(v183 + v761 - 120) = 0;
                          WTF::fastFree(v767, (void *)v193, v762, v763, v764, v765, v766, v194);
                        }
                        v761 -= 128;
                        v199 = 12738;
                        v198 = 31;
                        v197 = 3;
                        v196 = v904;
                        v195 = &v897;
                      }
                      while (v183 + v761 != v180);
                    }
                    LODWORD(v146) = *(_DWORD *)(v145 + 20);
                  }
                  *(_DWORD *)(v145 + 20) = v146 - v179;
                  v184 = (v184 + 1);
                  v185 = *(unsigned int *)(v643 + 108);
                  if (v185 > v184)
                  {
                    while (!*(_QWORD *)(*(_QWORD *)(v643 + 96) + 8 * v184))
                    {
                      if (v185 == ++v184)
                      {
                        LODWORD(v184) = *(_DWORD *)(v643 + 108);
                        break;
                      }
                    }
                  }
                  if ((_DWORD)v644 == (_DWORD)v184)
                    goto LABEL_1049;
                  continue;
                }
                goto LABEL_184;
              }
            }
          }
        }
        v654 = v830;
        if (v831 < v652)
        {
          v655 = v831 + ((unint64_t)v831 >> 2);
          if (v655 >= 0x10)
            v656 = v655 + 1;
          else
            v656 = 16;
          if (v656 <= v652)
            v657 = (*((_DWORD *)v858 + 44) + 33);
          else
            v657 = v656;
          if (v657 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x19804A550);
          }
          v658 = WTF::fastMalloc((WTF *)(16 * v657));
          v831 = v657;
          v830 = v658;
          if ((_DWORD)v653)
          {
            v752 = 16 * v653;
            v753 = v654;
            do
            {
              WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::LikelyDenseUnsignedIntegerSet(v658, v753);
              WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::~LikelyDenseUnsignedIntegerSet(v753, v754, v755, v756, v757, v758, v759, v760);
              v658 += 16;
              v753 += 16;
              v752 -= 16;
            }
            while (v752);
            v658 = v830;
          }
          v659 = xmmword_199150490;
          if (!v654)
          {
            v654 = v658;
LABEL_1019:
            if (v654 && v832 != (_DWORD)v652)
            {
              v73 = (__int128 *)(v654 + 16 * v832);
              v74 = 16 * v652 - 16 * v832;
              do
              {
                *v73++ = v659;
                v74 -= 16;
              }
              while (v74);
            }
            goto LABEL_1125;
          }
          if (v658 == v654)
          {
            v830 = 0;
            v831 = 0;
          }
          WTF::fastFree(v654, v636, v637, v638, v639, v640, v641, v642);
          v654 = v830;
        }
        v659 = xmmword_199150490;
        goto LABEL_1019;
      }
      break;
    }
    if (BYTE6(qword_1ECF4C688) || !(*(unsigned __int8 *)(v57 + 198) | HIBYTE(qword_1ECF4C688)))
    {
      memset(v863, 0, 32);
      *(_QWORD *)&v863[32] = a1 + 1;
      v65 = *(_QWORD *)(v57 + 56);
      if (v65)
      {
        v66 = 0;
        do
        {
          v66 |= v65 & -v65;
          v65 &= v65 - 1;
        }
        while (v65);
        if (v66)
        {
          v67 = __clz(__rbit64(v66));
          do
          {
            LOBYTE(v886) = v67 | 0x80;
            if (v67 <= 0x1Fu)
            {
              LODWORD(v896) = v67 + 1;
              if (HIDWORD(v859) == (_DWORD)v859)
              {
                v737 = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v858, (void *)(HIDWORD(v859) + 1), (unint64_t)&v896, v60, v61, v62, v63, v64);
                *((_DWORD *)v858 + HIDWORD(v859)) = *v737;
              }
              else
              {
                *((_DWORD *)v858 + HIDWORD(v859)) = v67 + 1;
              }
              ++HIDWORD(v859);
              v68 = HIDWORD(v828);
              if (HIDWORD(v828) == (_DWORD)v828)
              {
                v72 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v827, (WTF *)(HIDWORD(v828) + 1), (unint64_t)&v886);
                v68 = HIDWORD(v828);
                v69 = v827;
                v70 = *v72;
              }
              else
              {
                v69 = v827;
                v70 = (char)v886;
              }
              *((_BYTE *)v69 + v68) = v70;
              ++HIDWORD(v828);
            }
            if (v67 > 0x3E)
              break;
            v71 = __clz(__rbit64(v66 >> (v67 + 1))) + v67 + 1;
            v67 = v71 >= 0x40 ? 64 : v71;
          }
          while (v71 <= 0x3F);
        }
      }
      v269 = *((_DWORD *)v857 + 44) + 33;
      LOWORD(v832) = *((_WORD *)v857 + 88) + 33;
      if (v830 < 0)
        v270 = 63;
      else
        v270 = *(_QWORD *)(2 * v830);
      v271 = (v269 * v269);
      if (v270 < v271)
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v830, v271, 0);
      v272 = (unsigned __int16)v829;
      v273 = (unsigned __int16)v829 + 1;
      v274 = HIDWORD(v843);
      if ((unsigned __int16)v829 >= (unint64_t)HIDWORD(v843))
      {
        v275 = (unint64_t)v842;
        if ((unsigned __int16)v829 >= (unint64_t)v843)
        {
          v276 = v843 + ((unint64_t)v843 >> 2);
          if (v276 >= 0x10)
            v277 = v276 + 1;
          else
            v277 = 16;
          if (v277 <= v273)
            v278 = (WTF *)((unsigned __int16)v829 + 1);
          else
            v278 = (WTF *)v277;
          v279 = (_BYTE *)WTF::fastMalloc(v278);
          LODWORD(v843) = (_DWORD)v278;
          v842 = v279;
          if ((_DWORD)v274)
          {
            v280 = (char *)v275;
            do
            {
              v281 = *v280++;
              *v279++ = v281;
              --v274;
            }
            while (v274);
            v279 = v842;
          }
          if (v275)
          {
            if (v279 == (_BYTE *)v275)
            {
              v842 = 0;
              LODWORD(v843) = 0;
            }
            WTF::fastFree(v275, (void *)v271, v59, v60, v61, v62, v63, v64);
            v275 = (unint64_t)v842;
          }
          else
          {
            v275 = (unint64_t)v279;
          }
        }
        if (v275 && v273 != HIDWORD(v843))
        {
          v282 = (_BYTE *)(v275 + HIDWORD(v843));
          v283 = v272 - HIDWORD(v843) + 1;
          do
          {
            *v282++ |= 0x7Fu;
            --v283;
          }
          while (v283);
        }
      }
      HIDWORD(v843) = v273;
      if ((_WORD)v829)
      {
        v284 = 1;
        do
        {
          v842[v284] = (v284 - 1) & 0x7F;
          v494 = v284++ >= (unsigned __int16)v829;
        }
        while (!v494);
      }
      if ((_DWORD)v839)
      {
        if (HIDWORD(v839))
          HIDWORD(v839) = 0;
        v722 = v838;
        if (v838)
        {
          v838 = 0;
          LODWORD(v839) = 0;
          WTF::fastFree((unint64_t)v722, (void *)v271, v59, v60, v61, v62, v63, v64);
        }
      }
      v862 = 0;
      if (*(_DWORD *)&v863[8])
      {
        if (*(_DWORD *)&v863[12])
          *(_DWORD *)&v863[12] = 0;
        v626 = *(_QWORD *)v863;
        if (*(_QWORD *)v863)
        {
          *(_QWORD *)v863 = 0;
          *(_DWORD *)&v863[8] = 0;
          WTF::fastFree(v626, (void *)v271, v59, v60, v61, v62, v63, v64);
        }
      }
      if (*(_DWORD *)&v863[24])
      {
        if (*(_DWORD *)&v863[28])
          *(_DWORD *)&v863[28] = 0;
        v627 = *(_QWORD *)&v863[16];
        if (*(_QWORD *)&v863[16])
        {
          *(_QWORD *)&v863[16] = 0;
          *(_DWORD *)&v863[24] = 0;
          WTF::fastFree(v627, (void *)v271, v59, v60, v61, v62, v63, v64);
        }
      }
      JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v896, (uint64_t)v857);
      v292 = v857;
      v293 = *((unsigned int *)v857 + 27);
      if ((_DWORD)v293)
      {
        v294 = 0;
        while (!*(_QWORD *)(*((_QWORD *)v857 + 12) + 8 * v294))
        {
          if (v293 == ++v294)
            goto LABEL_466;
        }
        if ((_DWORD)v293 != (_DWORD)v294)
        {
          LODWORD(v295) = *((_DWORD *)v857 + 27);
          do
          {
            if (v295 <= v294)
            {
              __break(0xC471u);
              JUMPOUT(0x19804A348);
            }
            v296 = *(JSC::B3::Air::Inst **)(*((_QWORD *)v292 + 12) + 8 * v294);
            v886 = (WTF *)&v896;
            v887 = v296;
            v902 = 0;
            v297 = v903 + 32 * *(unsigned int *)v296;
            v298 = *(unsigned int *)(v297 + 12);
            if ((_DWORD)v298)
            {
              v299 = *(_DWORD **)v297;
              v300 = v899;
              v301 = 4 * v298;
              do
              {
                v303 = *v299;
                v304 = *(unsigned int *)(v300 + 4 * v303);
                v305 = v902;
                if (v902 <= v304 || *(_DWORD *)(v900 + 4 * v304) != (_DWORD)v303)
                {
                  LODWORD(v880) = *v299;
                  if (v902 == v901)
                  {
                    v302 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v900, v902 + 1, (unint64_t)&v880);
                    *(_DWORD *)(v900 + 4 * v902) = *v302;
                    v300 = v899;
                  }
                  else
                  {
                    *(_DWORD *)(v900 + 4 * v902) = v303;
                  }
                  ++v902;
                  *(_DWORD *)(v300 + 4 * v303) = v305;
                }
                ++v299;
                v301 -= 4;
              }
              while (v301);
            }
            v306 = *((unsigned int *)v296 + 5);
            if (!(_DWORD)v306)
              goto LABEL_1225;
            do
            {
              v307 = v306 - 1;
              v308 = *((unsigned int *)v296 + 5);
              if (v308 <= (int)v306 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19804A2A8);
              }
              v309 = *((_QWORD *)v296 + 1);
              v310 = (_QWORD **)(v309 + ((unint64_t)(v306 - 1) << 7));
              v311 = (_QWORD **)(v309 + (v306 << 7));
              if (v306 >= v308)
                v312 = 0;
              else
                v312 = v311;
              v313 = *((_QWORD *)&v896 + 1);
              v314 = *(_QWORD *)(*((_QWORD *)&v896 + 1) + 16 * *(unsigned int *)v296);
              v315 = v314 + (v306 << 6);
              v316 = *(unsigned int *)(v315 + 44);
              if ((_DWORD)v316)
              {
                v325 = *(unsigned int **)(v315 + 32);
                v326 = v902;
                v327 = 4 * v316;
                v328 = v899;
                v329 = v900;
                do
                {
                  v330 = *v325;
                  v331 = *(unsigned int *)(v328 + 4 * v330);
                  if (v326 > v331 && *(_DWORD *)(v329 + 4 * v331) == (_DWORD)v330)
                  {
                    v332 = *(unsigned int *)(v329 + 4 * v326 - 4);
                    *(_DWORD *)(v329 + 4 * v331) = v332;
                    *(_DWORD *)(v328 + 4 * v332) = v331;
                    v326 = --v902;
                  }
                  ++v325;
                  v327 -= 4;
                }
                while (v327);
                v314 = *(_QWORD *)(v313 + 16 * *(unsigned int *)v296);
              }
              v317 = v314 + ((unint64_t)(v306 - 1) << 6);
              v318 = *(unsigned int *)(v317 + 12);
              if ((_DWORD)v318)
              {
                v319 = *(_DWORD **)v317;
                v320 = v899;
                v321 = 4 * v318;
                do
                {
                  v322 = *v319;
                  v323 = *(unsigned int *)(v320 + 4 * v322);
                  v324 = v902;
                  if (v902 <= v323 || *(_DWORD *)(v900 + 4 * v323) != (_DWORD)v322)
                  {
                    LODWORD(v880) = *v319;
                    if (v902 == v901)
                    {
                      v333 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v900, v902 + 1, (unint64_t)&v880);
                      *(_DWORD *)(v900 + 4 * v902) = *v333;
                      v320 = v899;
                    }
                    else
                    {
                      *(_DWORD *)(v900 + 4 * v902) = v322;
                    }
                    ++v902;
                    *(_DWORD *)(v320 + 4 * v322) = v324;
                  }
                  ++v319;
                  v321 -= 4;
                }
                while (v321);
              }
              v306 = v307;
            }
            while ((_DWORD)v307);
            if (!*((_DWORD *)v296 + 5))
            {
LABEL_1225:
              __break(0xC471u);
              JUMPOUT(0x19804A2C8);
            }
            v294 = (v294 + 1);
            v295 = *((unsigned int *)v292 + 27);
            if (v295 > v294)
            {
              while (!*(_QWORD *)(*((_QWORD *)v292 + 12) + 8 * v294))
              {
                if (v295 == ++v294)
                {
                  LODWORD(v294) = *((_DWORD *)v292 + 27);
                  break;
                }
              }
            }
          }
          while ((_DWORD)v293 != (_DWORD)v294);
        }
      }
LABEL_466:
      WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v896, v285, v286, v287, v288, v289, v290, v291);
      v820 = v865[0];
      if (*(_DWORD *)&v863[12])
      {
        LOBYTE(v880) = 0;
        v344 = *(_DWORD **)v863;
        *(_QWORD *)&v896 = &v827;
        *((_QWORD *)&v896 + 1) = &v880;
        v345 = *(_QWORD *)v863 + 4 * *(unsigned int *)&v863[12];
        while (1)
        {
          if (*v344 != -1)
          if (++v344 == (_DWORD *)v345)
          {
            if (!(_BYTE)v880)
              break;
            LOBYTE(v880) = 0;
            v344 = *(_DWORD **)v863;
            *(_QWORD *)&v896 = &v827;
            *((_QWORD *)&v896 + 1) = &v880;
            v345 = *(_QWORD *)v863 + 4 * *(unsigned int *)&v863[12];
            if (!*(_DWORD *)&v863[12])
              break;
          }
        }
      }
      LOBYTE(v880) = 0;
      if (*(_DWORD *)&v863[28])
      {
        v346 = *(_DWORD **)&v863[16];
        *(_QWORD *)&v896 = &v827;
        *((_QWORD *)&v896 + 1) = &v880;
        v347 = *(_QWORD *)&v863[16] + 4 * *(unsigned int *)&v863[28];
        while (1)
        {
          if (*v346 != -1)
          if (++v346 == (_DWORD *)v347)
          {
            if (!(_BYTE)v880)
              break;
            LOBYTE(v880) = 0;
            v346 = *(_DWORD **)&v863[16];
            *(_QWORD *)&v896 = &v827;
            *((_QWORD *)&v896 + 1) = &v880;
            v347 = *(_QWORD *)&v863[16] + 4 * *(unsigned int *)&v863[28];
            if (!*(_DWORD *)&v863[28])
              break;
          }
        }
      }
      if ((_DWORD)v852)
      {
        if (HIDWORD(v852))
          HIDWORD(v852) = 0;
        v476 = v851;
        if (v851)
        {
          v851 = 0;
          LODWORD(v852) = 0;
          WTF::fastFree((unint64_t)v476, v334, v335, v336, v337, v338, v339, v340);
        }
      }
      if (v853 < 0)
        v853 = 0x8000000000000000;
      else
        bzero((void *)(2 * v853 + 8), (unint64_t)(*(_QWORD *)(2 * v853) + 7) >> 3);
      v348 = (__int16)v829;
      v349 = HIDWORD(v828);
      while (1)
      {
        v350 = v348 + 1;
        LOWORD(v896) = v350;
        if (HIDWORD(v836) <= v350)
          break;
        if (v848 >= 0)
          v351 = (uint64_t *)(2 * v848 + 8);
        else
          v351 = &v848;
        v352 = v350 >> 6;
        v353 = 1 << v350;
        if (((1 << v350) & v351[v352]) == 0)
        {
          v354 = v350;
          if (!*(_WORD *)(v846 + 2 * v350))
          {
            if (v349 <= *(unsigned __int16 *)(v835 + 2 * v350))
            {
              v356 = (uint64_t)v855;
              if (*v855 >= 0)
                v356 = 2 * *v855 + 8;
              if ((*(_QWORD *)(v356 + 8 * v352) & v353) == 0)
              {
                v357 = v853;
                if (v853 < 0)
                  v358 = 63;
                else
                  v358 = *(_QWORD *)(2 * v853);
                if (v358 <= v354)
                {
                  WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v853, v354 + 1, 0);
                  v357 = v853;
                }
                if (v357 >= 0)
                  v359 = (uint64_t *)(2 * v357 + 8);
                else
                  v359 = &v853;
                v359[v352] |= v353;
              }
            }
            else
            {
              v355 = HIDWORD(v852);
              if (HIDWORD(v852) == (_DWORD)v852)
              {
                v360 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v851, HIDWORD(v852) + 1, (unint64_t)&v896);
                v361 = HIDWORD(v852) + 1;
                *((_WORD *)v851 + HIDWORD(v852)) = *v360;
                HIDWORD(v852) = v361;
              }
              else
              {
                *((_WORD *)v851 + HIDWORD(v852)) = v350;
                HIDWORD(v852) = v355 + 1;
              }
            }
          }
        }
        v348 = v896;
      }
      v362 = HIDWORD(v852);
      while (1)
      {
        LOBYTE(v880) = 0;
        if (v362)
        {
          do
          {
            v365 = *((unsigned __int16 *)v851 + v362 - 1);
            HIDWORD(v852) = v362 - 1;
            LOWORD(v886) = v365;
            v366 = HIDWORD(v850);
            if (HIDWORD(v850) == (_DWORD)v850)
            {
              v372 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v849, HIDWORD(v850) + 1, (unint64_t)&v886);
              v366 = HIDWORD(v850);
              *(_WORD *)(v849 + 2 * HIDWORD(v850)) = *v372;
              v365 = (unsigned __int16)v886;
            }
            else
            {
              *(_WORD *)(v849 + 2 * HIDWORD(v850)) = v365;
            }
            HIDWORD(v850) = v366 + 1;
            if (v848 >= 0)
              v367 = (uint64_t *)(2 * v848 + 8);
            else
              v367 = &v848;
            *(uint64_t *)((char *)v367 + ((v365 >> 3) & 0x1FF8)) |= 1 << v365;
            v368 = v833 + 16 * v365;
            v369 = *(unsigned int *)(v368 + 12);
            if ((_DWORD)v369)
            {
              v370 = *(_WORD **)v368;
              v371 = 2 * v369;
              do
              {
                v373 = (unsigned __int16)*v370;
                v374 = (uint64_t *)(2 * v848 + 8);
                if (v848 < 0)
                  v374 = &v848;
                if (((1 << v373) & v374[v373 >> 6]) == 0 && !*(_WORD *)(v846 + 2 * v373))
                {
                  LOWORD(v896) = *v370;
                  v375 = *(unsigned __int16 *)(v835 + 2 * v373);
                  *(_WORD *)(v835 + 2 * v373) = v375 - 1;
                  if (HIDWORD(v828) == v375)
                  {
                    if (v853 >= 0)
                      v376 = (uint64_t *)(2 * v853 + 8);
                    else
                      v376 = &v853;
                    v376[v373 >> 6] &= ~(1 << v373);
                    v364 = HIDWORD(v852);
                    if (HIDWORD(v852) == (_DWORD)v852)
                    {
                      v363 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v851, HIDWORD(v852) + 1, (unint64_t)&v896);
                      v364 = HIDWORD(v852);
                      *((_WORD *)v851 + HIDWORD(v852)) = *v363;
                    }
                    else
                    {
                      *((_WORD *)v851 + HIDWORD(v852)) = v373;
                    }
                    HIDWORD(v852) = v364 + 1;
                  }
                }
                ++v370;
                v371 -= 2;
              }
              while (v371);
            }
            v362 = HIDWORD(v852);
          }
          while (HIDWORD(v852));
        }
        if (v853 < 0)
        {
          if ((v853 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          {
LABEL_536:
            LOWORD(v896) = v379;
            if (v853 >= 0)
              v380 = (uint64_t *)(2 * v853 + 8);
            else
              v380 = &v853;
            *(uint64_t *)((char *)v380 + (((unint64_t)v379 >> 3) & 0x1FF8)) &= ~(1 << v379);
            v381 = HIDWORD(v852);
            if (HIDWORD(v852) == (_DWORD)v852)
            {
              v631 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v851, HIDWORD(v852) + 1, (unint64_t)&v896);
              v381 = HIDWORD(v852);
              *((_WORD *)v851 + HIDWORD(v852)) = *v631;
            }
            else
            {
              *((_WORD *)v851 + HIDWORD(v852)) = v379;
            }
            v362 = v381 + 1;
            HIDWORD(v852) = v362;
            v382 = 1;
            LOBYTE(v880) = 1;
            goto LABEL_542;
          }
        }
        else
        {
          v377 = 8 * ((unint64_t)(*(_QWORD *)(2 * v853) + 63) >> 6);
          while (v377)
          {
            v378 = *(_QWORD *)(2 * v853 + v377);
            v377 -= 8;
            if (v378)
              goto LABEL_536;
          }
        }
        v362 = 0;
        v382 = v880;
LABEL_542:
        if (!v382)
        {
          v862 = 0;
          if (*(_DWORD *)&v863[8])
          {
            if (*(_DWORD *)&v863[12])
              *(_DWORD *)&v863[12] = 0;
            v628 = *(_QWORD *)v863;
            if (*(_QWORD *)v863)
            {
              *(_QWORD *)v863 = 0;
              *(_DWORD *)&v863[8] = 0;
              WTF::fastFree(v628, v334, v335, v336, v337, v338, v339, v340);
            }
          }
          if (*(_DWORD *)&v863[24])
          {
            if (*(_DWORD *)&v863[28])
              *(_DWORD *)&v863[28] = 0;
            v629 = *(_QWORD *)&v863[16];
            if (*(_QWORD *)&v863[16])
            {
              *(_QWORD *)&v863[16] = 0;
              *(_DWORD *)&v863[24] = 0;
              WTF::fastFree(v629, v334, v335, v336, v337, v338, v339, v340);
            }
          }
          v804 = HIDWORD(v845);
          if (!HIDWORD(v845))
          {
            v387 = *v820;
            v388 = *(unsigned int *)(*v820 + 108);
            v389 = 1;
            v390 = 12738;
            v391 = 31;
            if (!(_DWORD)v388)
              goto LABEL_931;
            v392 = 0;
            while (!*(_QWORD *)(*(_QWORD *)(v387 + 96) + 8 * v392))
            {
              if (v388 == ++v392)
                goto LABEL_931;
            }
            if ((_DWORD)v388 == (_DWORD)v392)
              goto LABEL_931;
            LODWORD(v393) = *(_DWORD *)(*v820 + 108);
            while (2)
            {
              if (v393 <= v392)
              {
                __break(0xC471u);
                JUMPOUT(0x19804A3A0);
              }
              v394 = *(_QWORD *)(*(_QWORD *)(v387 + 96) + 8 * v392);
              LODWORD(v395) = *(_DWORD *)(v394 + 20);
              if (!(_DWORD)v395)
              {
                v428 = 0;
                v425 = *(unsigned int **)(v394 + 8);
                v426 = (unint64_t)v425;
                v429 = v425;
                goto LABEL_615;
              }
              v396 = 0;
              while (2)
              {
                v397 = *(_QWORD *)(v394 + 8);
                v398 = v397 + (v396 << 7);
                if ((*(__int16 *)(v398 + 120) | 4) != 0x5E)
                {
                  v399 = *(_QWORD *)v398;
                  v400 = *(unsigned int *)(v398 + 12);
                  goto LABEL_558;
                }
                v400 = *(unsigned int *)(v398 + 12);
                v399 = *(_QWORD *)v398;
                if ((_DWORD)v400 == 2)
                {
                  if (*(_BYTE *)(v399 + 8) != 1 || *(_BYTE *)(v399 + 40) != 1)
                    goto LABEL_562;
                  if (*(_WORD *)(v398 + 120) != 94)
                    goto LABEL_589;
                  v401 = *(_QWORD **)&v863[32];
                  if (*(_QWORD *)&v863[32])
                  {
                    v439 = *(unsigned int *)(v399 + 16);
                    if ((int)v439 < 1)
                    {
                      v439 = -(int)v439;
                      if (v439 >= *(unsigned int *)(*(_QWORD *)&v863[32] + 28))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804A3C4);
                      }
                      v401 = (_QWORD *)(*(_QWORD *)&v863[32] + 16);
                    }
                    else if (v439 >= *(_DWORD *)(*(_QWORD *)&v863[32] + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A3BCLL);
                    }
                    if (*(unsigned __int8 *)(*v401 + 2 * v439 + 1) <= 2u)
                    {
LABEL_589:
                      LODWORD(v401) = 1;
                      goto LABEL_563;
                    }
LABEL_562:
                    LODWORD(v401) = 0;
                  }
LABEL_563:
                  v402 = v399 + 64;
LABEL_564:
                  v403 = v846;
                  v404 = v842;
                  v405 = v399;
                  do
                  {
                    v406 = *(char *)(v405 + 8);
                    if (v406 <= 0xD)
                    {
                      if (((1 << v406) & 0x31C2) != 0)
                      {
                        v407 = *(_DWORD *)(v405 + 16);
                        if ((v407 & 0x80000000) == 0 && (v407 - 33) <= 0xFFFFFFDF)
                        {
                          do
                          {
                            v408 = (unsigned __int16)v407;
                            v407 = *(unsigned __int16 *)(v403 + 2 * (unsigned __int16)v407);
                          }
                          while (v407);
                          if ((v408 - 1) <= 0x1F)
                          {
                            v423 = v408 + 127;
                            v424 = ((_BYTE)v408 + 127) & 0x7F;
                            if ((v423 & 0x60) != 0)
                              v411 = (char)(31 - (v423 & 0x7F));
                            else
                              v411 = v424 + 1;
                            if (v424 == 127)
                              v411 = 0;
                          }
                          else
                          {
                            LODWORD(v896) = v408;
                            v409 = v404[v408];
                            v410 = v409 & 0x7F;
                            if (v410 == 127)
                            {
                              WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v896);
                              WTF::dataLog<char [7]>();
                              WTF::dataLog<JSC::B3::Air::Code>(v857);
                              __break(0xC471u);
                              JUMPOUT(0x198049BB8);
                            }
                            if ((v409 & 0x60) != 0)
                              v411 = (char)(31 - v410);
                            else
                              v411 = v410 + 1;
                          }
                          *(_DWORD *)(v405 + 16) = v411;
                        }
                      }
                      else if (v406 == 11)
                      {
                        v413 = *(_DWORD *)(v405 + 16);
                        if ((v413 & 0x80000000) == 0 && (v413 - 33) <= 0xFFFFFFDF)
                        {
                          do
                          {
                            v412 = (unsigned __int16)v413;
                            v413 = *(unsigned __int16 *)(v403 + 2 * (unsigned __int16)v413);
                          }
                          while (v413);
                          if ((v412 - 1) <= 0x1F)
                          {
                            v632 = v412 + 127;
                            v633 = ((_BYTE)v412 + 127) & 0x7F;
                            if ((v632 & 0x60) != 0)
                              v435 = (char)(31 - (v632 & 0x7F));
                            else
                              v435 = v633 + 1;
                            if (v633 == 127)
                              v435 = 0;
                          }
                          else
                          {
                            LODWORD(v896) = v412;
                            v433 = v404[v412];
                            v434 = v433 & 0x7F;
                            if (v434 == 127)
                            {
                              WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v896);
                              WTF::dataLog<char [7]>();
                              WTF::dataLog<JSC::B3::Air::Code>(v857);
                              __break(0xC471u);
                              JUMPOUT(0x19804A1CCLL);
                            }
                            if ((v433 & 0x60) != 0)
                              v435 = (char)(31 - v434);
                            else
                              v435 = v434 + 1;
                          }
                          *(_DWORD *)(v405 + 16) = v435;
                        }
                        v415 = *(_DWORD *)(v405 + 20);
                        if ((v415 & 0x80000000) == 0 && (v415 - 33) <= 0xFFFFFFDF)
                        {
                          do
                          {
                            v414 = (unsigned __int16)v415;
                            v415 = *(unsigned __int16 *)(v403 + 2 * (unsigned __int16)v415);
                          }
                          while (v415);
                          if ((v414 - 1) <= 0x1F)
                          {
                            v634 = v414 + 127;
                            v635 = ((_BYTE)v414 + 127) & 0x7F;
                            if ((v634 & 0x60) != 0)
                              v438 = (char)(31 - (v634 & 0x7F));
                            else
                              v438 = v635 + 1;
                            if (v635 == 127)
                              v438 = 0;
                          }
                          else
                          {
                            LODWORD(v896) = v414;
                            v436 = v404[v414];
                            v437 = v436 & 0x7F;
                            if (v437 == 127)
                            {
                              WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v896);
                              WTF::dataLog<char [7]>();
                              WTF::dataLog<JSC::B3::Air::Code>(v857);
                              __break(0xC471u);
                              JUMPOUT(0x19804A200);
                            }
                            if ((v436 & 0x60) != 0)
                              v438 = (char)(31 - v437);
                            else
                              v438 = v437 + 1;
                          }
                          *(_DWORD *)(v405 + 20) = v438;
                        }
                      }
                    }
                    v405 += 32;
                  }
                  while (v405 != v402);
                  if ((_DWORD)v401)
                  {
                    v416 = *(_DWORD *)(v398 + 12);
                    if (!v416)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A3CCLL);
                    }
                    if (*(_BYTE *)(v399 + 8) == 1)
                    {
                      if (v416 <= 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804A3D4);
                      }
                      if (*(_BYTE *)(v399 + 40) == 1 && *(_DWORD *)(v399 + 16) == *(_DWORD *)(v399 + 48))
                      {
                        *(_QWORD *)&v896 = &v897;
                        *((_QWORD *)&v896 + 1) = 3;
                        *(_QWORD *)v904 = 0;
                        *(_WORD *)&v904[8] = 0;
                        v904[10] &= 0xFCu;
                        v418 = (_OWORD *)(v398 + 16);
                        v417 = *(_QWORD *)v398;
                        if (*(_QWORD *)v398 != v398 + 16)
                        {
                          if (v417)
                          {
                            *(_QWORD *)v398 = 0;
                            *(_DWORD *)(v398 + 8) = 0;
                            WTF::fastFree(v417, v383, 1, 12738, 31, v384, v385, v386);
                            v391 = 31;
                            v390 = 12738;
                            v389 = 1;
                          }
                          *(_QWORD *)v398 = v418;
                          v630 = v896;
                          if ((uint64_t *)v896 == &v897)
                          {
                            if (HIDWORD(v896))
                            {
                              v796 = 32 * HIDWORD(v896);
                              v797 = &v897;
                              do
                              {
                                v798 = *(_OWORD *)v797;
                                v799 = *((_OWORD *)v797 + 1);
                                v797 += 4;
                                *v418 = v798;
                                v418[1] = v799;
                                v418 += 2;
                                v796 -= 32;
                              }
                              while (v796);
                            }
                          }
                          else
                          {
                            *(_QWORD *)&v896 = &v897;
                            *(_QWORD *)v398 = v630;
                          }
                        }
                        *(_DWORD *)(v398 + 8) = DWORD2(v896);
                        v419 = HIDWORD(v896);
                        HIDWORD(v896) = 0;
                        *(_DWORD *)(v398 + 12) = v419;
                        v420 = v397 + (v396 << 7);
                        v421 = *(_QWORD *)v904;
                        *(_DWORD *)(v420 + 119) = *(_DWORD *)&v904[7];
                        *(_QWORD *)(v420 + 112) = v421;
                        v422 = v896;
                        if (&v897 != (uint64_t *)v896 && (_QWORD)v896)
                        {
                          *(_QWORD *)&v896 = 0;
                          DWORD2(v896) = 0;
                          WTF::fastFree(v422, v383, 1, 12738, 31, v384, v385, v386);
                          v391 = 31;
                          v390 = 12738;
                          v389 = 1;
                        }
                      }
                    }
                  }
                }
                else
                {
LABEL_558:
                  if (v400)
                  {
                    LODWORD(v401) = 0;
                    v402 = v399 + 32 * v400;
                    goto LABEL_564;
                  }
                }
                ++v396;
                v395 = *(unsigned int *)(v394 + 20);
                if (v396 < v395)
                  continue;
                break;
              }
              v425 = *(unsigned int **)(v394 + 8);
              v426 = (unint64_t)&v425[32 * v395];
              if ((_DWORD)v395)
              {
                v427 = 0;
                v428 = 0;
                v429 = &v425[32 * v395];
                v430 = (unint64_t)v429;
                do
                {
                  v431 = &v425[v427];
                  if (*(_QWORD *)&v425[v427 + 28])
                    v432 = 0;
                  else
                    v432 = LOWORD(v425[v427 + 30]) == 0;
                  if (v432 && (*((_BYTE *)v431 + 122) & 3) == 0)
                  {
                    if (!v425[v427 + 3])
                    {
                      if (v430 == *(_QWORD *)(v394 + 8) + ((unint64_t)*(unsigned int *)(v394 + 20) << 7))
                      {
                        v430 = (unint64_t)&v425[v427];
                      }
                      else if (v431 != v429)
                      {
                        WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v429, v431, v430, 12738, 31, v384, v385, v386);
                        v430 += (char *)&v425[v427] - (char *)v429;
                      }
                      v792 = *(_QWORD *)&v425[v427];
                      if (&v425[v427 + 4] != (unsigned int *)v792 && v792)
                      {
                        v794 = &v425[v427];
                        *(_QWORD *)v794 = 0;
                        v794[2] = 0;
                        WTF::fastFree(v792, v431, v389, v390, v391, v384, v385, v386);
                      }
                      v429 = &v425[v427 + 32];
                      ++v428;
                    }
                    v389 = 1;
                    v390 = 12738;
                    v391 = 31;
                  }
                  v427 += 32;
                }
                while ((unint64_t)&v425[v427] < v426);
                v425 = *(unsigned int **)(v394 + 8);
                LODWORD(v395) = *(_DWORD *)(v394 + 20);
                v426 = v430;
              }
              else
              {
                v428 = 0;
                v429 = &v425[32 * v395];
              }
LABEL_615:
              v383 = &v425[32 * (unint64_t)v395];
              if (v429 != v383)
              {
                WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v429, v383, v426, 12738, 31, v384, v385, v386);
                v391 = 31;
                v390 = 12738;
                v389 = 1;
                LODWORD(v395) = *(_DWORD *)(v394 + 20);
              }
              *(_DWORD *)(v394 + 20) = v395 - v428;
              v392 = (v392 + 1);
              v393 = *(unsigned int *)(v387 + 108);
              if (v393 > v392)
              {
                while (!*(_QWORD *)(*(_QWORD *)(v387 + 96) + 8 * v392))
                {
                  if (v393 == ++v392)
                  {
                    LODWORD(v392) = *(_DWORD *)(v387 + 108);
                    break;
                  }
                }
              }
              if ((_DWORD)v388 != (_DWORD)v392)
                continue;
              break;
            }
LABEL_931:
            v623 = *(_QWORD *)&v863[16];
            if (*(_QWORD *)&v863[16])
            {
              *(_QWORD *)&v863[16] = 0;
              *(_DWORD *)&v863[24] = 0;
              WTF::fastFree(v623, v383, v389, v390, v391, v384, v385, v386);
            }
            v624 = *(_QWORD *)v863;
            if (*(_QWORD *)v863)
            {
              *(_QWORD *)v863 = 0;
              *(_DWORD *)&v863[8] = 0;
              WTF::fastFree(v624, v383, v389, v390, v391, v384, v385, v386);
            }
            if (!v804)
              goto LABEL_1054;
            goto LABEL_89;
          }
          v825 = (WTF::BitVector *)v866;
          v879 = 0;
          v481 = v820;
          v482 = 2 * HIDWORD(v845);
          v483 = v844;
          do
          {
            v484 = *v483;
            LODWORD(v880) = *v483;
            v485 = *(_QWORD *)v825;
            if ((*(_QWORD *)v825 & 0x8000000000000000) != 0)
              v486 = 63;
            else
              v486 = *(_QWORD *)(2 * v485);
            if (v486 <= v484)
            {
              WTF::BitVector::resizeOutOfLine(v825, v484 + 1, 0);
              v481 = v820;
              v485 = *(_QWORD *)v825;
            }
            v487 = 2 * v485 + 8;
            v488 = v485 < 0;
            v489 = (uint64_t)v825;
            if (!v488)
              v489 = v487;
            *(_QWORD *)(v489 + ((v484 >> 3) & 0x1FF8)) |= 1 << v484;
            if ((_DWORD)v484)
            {
              v490 = v820 + 1;
              if (*((_DWORD *)v481 + 5) <= v484)
              {
                __break(0xC471u);
                JUMPOUT(0x19804A52CLL);
              }
            }
            else
            {
              v490 = v820 + 3;
              if (!*((_DWORD *)v481 + 9))
              {
                __break(0xC471u);
                JUMPOUT(0x198049550);
              }
            }
            v491 = (unsigned __int8 *)(*v490 + 2 * v484);
            v492 = *v491;
            v493 = v491[1];
            if (v492 > v493)
              v493 = v492;
            v494 = v493 >= 3;
            v182 = v493 == 3;
            v495 = 16;
            if (v182)
              v495 = 8;
            if (v494)
              v496 = v495;
            else
              v496 = 4;
            v886 = (WTF *)JSC::B3::Air::Code::addStackSlot(*v481, v496, 1);
            WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v896, &v879, (int *)&v880, &v886, v497, v498, v499, v500);
            ++v483;
            v482 -= 2;
            v481 = v820;
          }
          while (v482);
          *(_QWORD *)&v896 = *v820;
          *((_QWORD *)&v896 + 1) = &v898;
          v897 = 8;
          v816 = v896;
          v813 = *(unsigned int *)(v896 + 108);
          if (!(_DWORD)v813)
            goto LABEL_929;
          v501 = 0;
          while (!*(_QWORD *)(*(_QWORD *)(v896 + 96) + 8 * v501))
          {
            if (v813 == ++v501)
              goto LABEL_929;
          }
          if ((_DWORD)v813 == (_DWORD)v501)
          {
LABEL_929:
            if (v879)
              WTF::fastFree(v879 - 16, v383, v389, v390, v391, v384, v385, v386);
            goto LABEL_931;
          }
          LODWORD(v502) = *(_DWORD *)(v896 + 108);
          LODWORD(v503) = v501;
          while (1)
          {
            if (v502 <= v503)
            {
              __break(0xC471u);
              JUMPOUT(0x19804A408);
            }
            v504 = *(WTF::BitVector **)(*(_QWORD *)(v816 + 96) + 8 * v503);
            HIBYTE(v895) = 0;
            v878 = 0;
            v815 = v503;
            v822 = v504;
            if (*((_DWORD *)v504 + 5))
              break;
LABEL_848:
            v594 = v504;
            JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v896, v504, v389, v390, v391, v384, v385, v386);
            v595 = v816;
            if (HIBYTE(v895))
            {
              v596 = *((_QWORD *)v594 + 1);
              v597 = *((unsigned int *)v594 + 5);
              v598 = v596 + (v597 << 7);
              v599 = v594;
              if ((_DWORD)v597)
              {
                v600 = 0;
                v601 = 0;
                v602 = (unsigned int *)(v596 + (v597 << 7));
                v603 = (unint64_t)v602;
                do
                {
                  v604 = (unsigned int *)(v596 + v600);
                  if ((*(__int16 *)(v596 + v600 + 120) | 4) == 0x5E && v604[3] == 2)
                  {
                    v605 = *(_QWORD *)v604;
                    if (*(_BYTE *)(*(_QWORD *)v604 + 8) == 1)
                    {
                      v606 = *(_WORD *)(v596 + v600 + 120) != 94 && *(_BYTE *)(v605 + 40) == 1;
                      if (v606 && *(_DWORD *)(v605 + 16) == *(_DWORD *)(v605 + 48))
                      {
                        if (v603 == *((_QWORD *)v599 + 1) + ((unint64_t)*((unsigned int *)v599 + 5) << 7))
                        {
                          v603 = v596 + v600;
                        }
                        else if (v604 != v602)
                        {
                          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v602, v604, v603, v390, v391, v384, v385, v386);
                          v599 = v822;
                          v595 = v816;
                          v603 += v596 + v600 - (_QWORD)v602;
                          v605 = *(_QWORD *)(v596 + v600);
                        }
                        if (v596 + v600 + 16 != v605 && v605)
                        {
                          v621 = v596 + v600;
                          *(_QWORD *)v621 = 0;
                          *(_DWORD *)(v621 + 8) = 0;
                          WTF::fastFree(v605, v604, v389, v390, v391, v384, v385, v386);
                          v599 = v822;
                          v595 = v816;
                        }
                        v602 = (unsigned int *)(v596 + v600 + 128);
                        ++v601;
                      }
                    }
                  }
                  v600 += 128;
                }
                while (v596 + v600 < v598);
                v596 = *((_QWORD *)v599 + 1);
                LODWORD(v597) = *((_DWORD *)v599 + 5);
                v598 = v603;
              }
              else
              {
                v601 = 0;
                v602 = (unsigned int *)(v596 + (v597 << 7));
              }
              v383 = (unsigned int *)(v596 + ((unint64_t)v597 << 7));
              if (v602 != v383)
              {
                WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v602, v383, v598, v390, v391, v384, v385, v386);
                v599 = v822;
                v595 = v816;
                LODWORD(v597) = *((_DWORD *)v822 + 5);
              }
              *((_DWORD *)v599 + 5) = v597 - v601;
            }
            v503 = (v815 + 1);
            v502 = *(unsigned int *)(v595 + 108);
            v481 = v820;
            if (v502 > v503)
            {
              do
              {
                if (*(_QWORD *)(*(_QWORD *)(v595 + 96) + 8 * v503))
                  goto LABEL_851;
                ++v503;
              }
              while (v502 != v503);
              LODWORD(v503) = *(_DWORD *)(v595 + 108);
            }
LABEL_851:
            if ((_DWORD)v813 == (_DWORD)v503)
            {
              v622 = (uint64_t *)*((_QWORD *)&v896 + 1);
              if (HIDWORD(v897))
              {
                v770 = 136 * HIDWORD(v897);
                v771 = *((_QWORD *)&v896 + 1) + 24;
                do
                {
                  v772 = *(_QWORD *)(v771 - 16);
                  if (v771 != v772 && v772 != 0)
                  {
                    *(_QWORD *)(v771 - 16) = 0;
                    *(_DWORD *)(v771 - 8) = 0;
                    WTF::fastFree(v772, v383, v389, v390, v391, v384, v385, v386);
                  }
                  v771 += 136;
                  v770 -= 136;
                }
                while (v770);
                v622 = (uint64_t *)*((_QWORD *)&v896 + 1);
              }
              if (&v898 != v622 && v622)
              {
                *((_QWORD *)&v896 + 1) = 0;
                LODWORD(v897) = 0;
                WTF::fastFree((unint64_t)v622, v383, v389, v390, v391, v384, v385, v386);
              }
              goto LABEL_929;
            }
          }
          v505 = 0;
          while (2)
          {
            v506 = v505;
            v389 = *((_QWORD *)v504 + 1);
            v507 = (JSC::B3::Air::Inst *)(v389 + ((unint64_t)v505 << 7));
            LOBYTE(v895) = 0;
            v894 = 0;
            v877 = 0;
            v390 = (uint64_t)v507 + 120;
            v508 = *((__int16 *)v507 + 60);
            if (v508 == 90)
            {
              v545 = *((_DWORD *)v507 + 3);
              if (!v545)
              {
                __break(0xC471u);
                JUMPOUT(0x19804A388);
              }
              v546 = *(_QWORD *)v507;
              if (*(_BYTE *)(*(_QWORD *)v507 + 8) == 1)
              {
                v547 = *(unsigned int *)(v546 + 16);
                if ((int)v547 < 1)
                {
                  v547 = -(int)v547;
                  v548 = v820 + 3;
                  if (v547 >= *((unsigned int *)v481 + 9))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804A48CLL);
                  }
                }
                else
                {
                  v548 = v820 + 1;
                  if (v547 >= *((_DWORD *)v481 + 5))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804A46CLL);
                  }
                }
                v549 = (unsigned __int8 *)(*v548 + 2 * v547);
                v550 = *v549;
                v551 = v549[1];
                if (v551 >= v550)
                  v551 = v550;
                if (v551 < 3)
                  goto LABEL_800;
              }
              if (v545 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19804A474);
              }
              if (*(_BYTE *)(v546 + 40) == 1)
              {
                v552 = *(unsigned int *)(v546 + 48);
                if ((int)v552 < 1)
                {
                  v552 = -(int)v552;
                  v553 = v820 + 3;
                  if (v552 >= *((unsigned int *)v481 + 9))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804A484);
                  }
                }
                else
                {
                  v553 = v820 + 1;
                  if (v552 >= *((_DWORD *)v481 + 5))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804A47CLL);
                  }
                }
                v554 = (unsigned __int8 *)(*v553 + 2 * v552);
                v555 = *v554;
                v556 = v554[1];
                if (v556 >= v555)
                  v556 = v555;
                if (v556 <= 2)
LABEL_800:
                  LOBYTE(v895) = 1;
              }
            }
            v886 = (WTF *)&v879;
            v887 = v507;
            v888 = (uint64_t)v481;
            *(_QWORD *)&v889 = &v895;
            *((_QWORD *)&v889 + 1) = &v894;
            *(_QWORD *)&v890 = &v877;
            if ((v508 - 446) <= 5)
            {
              v881 = (uint64_t)&v880;
              *(_QWORD *)v882 = &v886;
              v557 = v389;
              v558 = v506;
              v390 = (uint64_t)v507 + 120;
              v389 = v557;
              v506 = v558;
              v481 = v820;
              v504 = v822;
            }
            else
            {
              v509 = *((unsigned int *)v507 + 3);
              if ((_DWORD)v509)
              {
                v510 = 0;
                v391 = (uint64_t)&JSC::B3::Air::g_formTable + 21 * v508 + ((unint64_t)((v509 - 1) * v509) >> 1);
                while (1)
                {
                  if (v510 >= *((unsigned int *)v507 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804A2C0);
                  }
                  v511 = *(unsigned __int8 *)(v391 + v510);
                  v512 = (v511 >> 5) - 1;
                  if (v512 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198049F24);
                  }
                  if ((v511 & 0x10) != 0)
                    goto LABEL_754;
                  v513 = *(_QWORD *)v507 + 32 * v510;
                  if (*(_BYTE *)(v513 + 8) != 1)
                    goto LABEL_754;
                  v514 = *(_QWORD *)v507 + 32 * v510;
                  v517 = *(_DWORD *)(v514 + 16);
                  v516 = (unsigned int *)(v514 + 16);
                  v515 = v517;
                  if (v517 > 0xFFFFFFDF)
                    goto LABEL_754;
                  if (v515 - 1 < 0x20)
                    goto LABEL_754;
                  v518 = *(_QWORD *)v886;
                  if (!*(_QWORD *)v886)
                    goto LABEL_754;
                  v519 = *(_DWORD *)(v518 - 8);
                  v520 = 9 * ((v515 + ~(v515 << 15)) ^ ((v515 + ~(v515 << 15)) >> 10));
                  v521 = (v520 ^ (v520 >> 6)) + ~((v520 ^ (v520 >> 6)) << 11);
                  v522 = v519 & (v521 ^ HIWORD(v521));
                  v523 = *(_DWORD *)(v518 + 16 * v522);
                  if (v523 != v515)
                  {
                    v524 = 1;
                    while (v523)
                    {
                      v522 = ((_DWORD)v522 + v524) & v519;
                      v523 = *(_DWORD *)(v518 + 16 * v522);
                      ++v524;
                      if (v523 == v515)
                        goto LABEL_753;
                    }
                    v522 = *(unsigned int *)(v518 - 4);
                  }
LABEL_753:
                  if (v522 == *(_DWORD *)(v518 - 4))
                    goto LABEL_754;
                  v808 = v391;
                  v809 = v390;
                  v810 = v389;
                  v811 = v506;
                  if (!*((_DWORD *)v887 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804A350);
                  }
                  v807 = v888;
                  v559 = JSC::B3::Air::Inst::admitsStack(v887, (unint64_t)(v513 - *(_QWORD *)v887) >> 5);
                  v481 = v820;
                  v504 = v822;
                  v389 = v810;
                  v506 = v811;
                  v391 = v808;
                  v390 = v809;
                  if ((v559 & 1) == 0)
                  {
                    v587 = *((__int16 *)v887 + 60) - 90;
                    v588 = v587 > 0x12;
                    v589 = (1 << v587) & 0x60011;
                    if (v588 || v589 == 0)
                      goto LABEL_754;
                    v591 = *((unsigned int *)v887 + 3);
                    if (!(_DWORD)v591)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A358);
                    }
                    v592 = ((unint64_t)(v513 - *(_QWORD *)v887) >> 5) ^ 1;
                    if (v592 >= v591)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A360);
                    }
                    if ((_DWORD)v591 != 2)
                      goto LABEL_754;
                    v593 = (_BYTE *)(*(_QWORD *)v887 + 32 * v592);
                    if (v593[8] != 9 || *(_BYTE *)(*(_QWORD *)v593 + 4) != 1)
                      goto LABEL_754;
                  }
                  v560 = v511 & 0xF;
                  if (v560 <= 0xB && ((1 << v560) & 0xFF5) != 0)
                  {
                    v561 = *(_QWORD *)(v807 + 40);
                    v562 = *v516;
                    v564 = *(_QWORD *)(v561 + 16);
                    v563 = v561 + 16;
                    v565 = 2 * v564 + 8;
                    if (v564 >= 0)
                      v563 = v565;
                    if (((*(_QWORD *)(v563 + ((v562 >> 3) & 0x1FFFFFF8)) >> v562) & 1) != 0)
                      goto LABEL_754;
                  }
                  else
                  {
                    v562 = *v516;
                  }
                  if ((int)v562 < 1)
                  {
                    v562 = -(int)v562;
                    if (v562 >= *(unsigned int *)(v807 + 36))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A370);
                    }
                    v607 = (_QWORD *)(v807 + 24);
                  }
                  else
                  {
                    if (v562 >= *(_DWORD *)(v807 + 20))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A368);
                    }
                    v607 = (_QWORD *)(v807 + 8);
                  }
                  v608 = (unsigned __int8 *)(*v607 + 2 * v562);
                  v609 = *v608;
                  v610 = v608[1];
                  if (v609 > v610)
                    v610 = v609;
                  if (v560 - 4 > 6 || v610 <= v512)
                    break;
LABEL_754:
                  if (++v510 == v509)
                    goto LABEL_755;
                }
                if (v610 != 2)
                {
                  *(_BYTE *)v889 = 0;
                  v611 = *(unsigned int **)(v518 + 16 * v522 + 8);
                  goto LABEL_895;
                }
                v611 = *(unsigned int **)(v518 + 16 * v522 + 8);
                if (*(_BYTE *)v889)
                {
LABEL_911:
                  v612 = 4;
                }
                else
                {
LABEL_895:
                  if (v511 >> 5 != 4)
                  {
                    v612 = 1;
                    switch((v511 >> 5))
                    {
                      case 1u:
                        goto LABEL_897;
                      case 2u:
                        v612 = 2;
                        goto LABEL_897;
                      case 3u:
                        goto LABEL_911;
                      case 5u:
                        v612 = 16;
                        goto LABEL_897;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x19804A0ACLL);
                    }
                  }
                  v612 = 8;
                }
LABEL_897:
                if (*v611 > v612)
                  v612 = *v611;
                *v611 = v612;
                *((_BYTE *)v516 + 8) = 0;
                *(_QWORD *)v516 = 0;
                *(_QWORD *)v513 = v611;
                *(_BYTE *)(v513 + 8) = 9;
                *(_BYTE *)(v513 + 9) = 2;
                *(_DWORD *)(v513 + 12) = 0;
                **((_BYTE **)&v889 + 1) = 1;
                if ((v559 & 1) == 0)
                  *(_BYTE *)v890 = 1;
                goto LABEL_754;
              }
            }
LABEL_755:
            if (v894 && (_BYTE)v895)
              *(_WORD *)v390 = 94;
            if (v877)
            {
              v696 = *(__int16 *)v390;
              if (v696 != 90 && v696 != 94)
              {
                if ((v696 - 107) <= 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198049AD8);
                }
                __break(0xC471u);
                JUMPOUT(0x198049F44);
              }
              v697 = v389;
              v698 = v506;
              v699 = *(_DWORD *)(*v481 + 176);
              *(_DWORD *)(*v481 + 176) = v699 + 1;
              LODWORD(v886) = v699 + 33;
              WTF::BitVector::set(v825, (v699 + 33));
              v706 = *((unsigned int *)v507 + 3);
              if ((_DWORD)v706 == *((_DWORD *)v507 + 2))
              {
                WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v507, (unsigned int *)&v886, v700, v701, v702, v703, v704, v705);
                v709 = *((_DWORD *)v507 + 3);
              }
              else
              {
                v707 = *(_QWORD *)v507 + 32 * v706;
                v708 = v886;
                *(_QWORD *)v707 = 0;
                *(_WORD *)(v707 + 8) = 513;
                *(_DWORD *)(v707 + 12) = 1;
                *(_QWORD *)(v707 + 16) = v708;
                *(_BYTE *)(v707 + 24) = 0;
                v709 = *((_DWORD *)v507 + 3) + 1;
                *((_DWORD *)v507 + 3) = v709;
              }
              if (v709 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x19804A220);
              }
              JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&>((uint64_t)&v896, v878, 0, *(_QWORD *)(v697 + (v698 << 7) + 112), v702, v703, v704, v705);
              v481 = v820;
              v504 = v822;
            }
            else
            {
              v869 = (WTF **)&v879;
              v870 = &v827;
              v871 = (char *)&v895 + 1;
              v872 = v481;
              v873 = v825;
              v874 = &v896;
              v875 = &v878;
              v876 = v507;
              v914[0] = (uint64_t)&v869;
              if ((*(__int16 *)v390 - 446) <= 5)
              {
                v887 = (JSC::B3::Air::Inst *)&v886;
                v888 = (uint64_t)v914;
                v481 = v820;
                v504 = v822;
              }
              else
              {
                v525 = *((unsigned int *)v507 + 3);
                if ((_DWORD)v525)
                {
                  v526 = 0;
                  v527 = (char *)&JSC::B3::Air::g_formTable
                       + 21 * *(__int16 *)v390
                       + ((unint64_t)((v525 - 1) * v525) >> 1);
                  do
                  {
                    if (v526 >= *((unsigned int *)v507 + 3))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A2B8);
                    }
                    v528 = v527[v526];
                    if ((v528 >> 5) - 1 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804A128);
                    }
                    v529 = *(_QWORD *)v507;
                    switch(*(_BYTE *)(*(_QWORD *)v507 + 32 * v526 + 8))
                    {
                      case 1:
                        if ((v528 & 0x10) != 0)
                          goto LABEL_781;
                        v530 = v529 + 32 * v526;
                        v533 = *(_DWORD *)(v530 + 16);
                        v532 = (unsigned int *)(v530 + 16);
                        v531 = v533;
                        if (v533 > 0xFFFFFFDF || (v531 - 1) < 0x20)
                          goto LABEL_781;
                        v534 = *v869;
                        if (!*v869)
                          goto LABEL_776;
                        v535 = *((_DWORD *)v534 - 2);
                        v536 = 9
                             * ((v531 + ~((_DWORD)v531 << 15)) ^ ((v531 + ~((_DWORD)v531 << 15)) >> 10));
                        v537 = (v536 ^ (v536 >> 6)) + ~((v536 ^ (v536 >> 6)) << 11);
                        v538 = v535 & (v537 ^ HIWORD(v537));
                        v539 = *((_DWORD *)v534 + 4 * v538);
                        if (v539 == (_DWORD)v531)
                          goto LABEL_775;
                        v540 = 1;
                        break;
                      case 6:
                      case 7:
                      case 8:
                        v543 = (unsigned int *)(v529 + 32 * v526 + 16);
                        goto LABEL_784;
                      case 0xB:
                        v620 = v529 + 32 * v526;
                        v543 = (unsigned int *)(v620 + 20);
LABEL_784:
                        v544 = 0;
                        goto LABEL_785;
                      case 0xC:
                      case 0xD:
                        v543 = (unsigned int *)(v529 + 32 * v526 + 16);
                        v544 = 6;
LABEL_785:
                        v481 = v820;
                        v504 = v822;
                        goto LABEL_781;
                      default:
                        goto LABEL_781;
                    }
                    while (v539)
                    {
                      v538 = ((_DWORD)v538 + v540) & v535;
                      v539 = *((_DWORD *)v534 + 4 * v538);
                      ++v540;
                      if (v539 == (_DWORD)v531)
                        goto LABEL_775;
                    }
                    v538 = *((unsigned int *)v534 - 1);
LABEL_775:
                    if (v538 == *((_DWORD *)v534 - 1))
                    {
LABEL_776:
                      if (*((_DWORD *)v870 + 57))
                      {
                        v541 = (unsigned __int16)v531;
                        do
                        {
                          v542 = v541;
                          v541 = *((unsigned __int16 *)v870[27] + v541);
                        }
                        while ((_DWORD)v541);
                        if ((_DWORD)v531 != v542)
                        {
                          *v532 = v542;
                          *v871 = 1;
                        }
                      }
                    }
                    else
                    {
                      if ((int)v531 < 1)
                      {
                        v531 = -(int)v531;
                        if (v531 >= *((unsigned int *)v872 + 9))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19804A380);
                        }
                        v566 = v872 + 3;
                      }
                      else
                      {
                        if (v531 >= *((_DWORD *)v872 + 5))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19804A378);
                        }
                        v566 = v872 + 1;
                      }
                      v567 = (unsigned __int8 *)(*v566 + 2 * v531);
                      v568 = *v567;
                      v569 = v567[1];
                      if (v568 > v569)
                        v569 = v568;
                      v570 = v569 >= 3;
                      if (v569 == 3)
                        v571 = 8;
                      else
                        v571 = 16;
                      if (!v570)
                        v571 = 4;
                      if (v571 == 8)
                      {
                        v572 = 90;
                      }
                      else if (v571 == 4)
                      {
                        v572 = 94;
                      }
                      else
                      {
                        v572 = 113;
                      }
                      v573 = *(_DWORD *)(*v872 + 176);
                      *(_DWORD *)(*v872 + 176) = v573 + 1;
                      v574 = (v573 + 33);
                      *v532 = v574;
                      v575 = v873;
                      v576 = *(_QWORD *)v873;
                      if ((*(_QWORD *)v873 & 0x8000000000000000) != 0)
                        v619 = 63;
                      else
                        v619 = *(_QWORD *)(2 * v576);
                      if (v619 <= v574)
                      {
                        v812 = v572;
                        WTF::BitVector::resizeOutOfLine(v873, v574 + 1, 0);
                        v572 = v812;
                        v481 = v820;
                        v504 = v822;
                        v576 = *(_QWORD *)v575;
                      }
                      v577 = v528 & 0xF;
                      if (v576 >= 0)
                        v578 = 2 * v576 + 8;
                      else
                        v578 = (uint64_t)v575;
                      *(_QWORD *)(v578 + ((v574 >> 3) & 0x1FFFFFF8)) |= 1 << v574;
                      if (v577 != 10)
                      {
                        v579 = *((_QWORD *)v534 + 2 * v538 + 1);
                        if (v577 > 0xB || ((1 << v577) & 0xB30) == 0)
                        {
                          v580 = (WTF *)*v875;
                          v581 = *((_QWORD *)v876 + 14);
                          v582 = *v532;
                          *(_QWORD *)v882 = *((_QWORD *)v534 + 2 * v538 + 1);
                          *(_WORD *)&v882[8] = 521;
                          *(_QWORD *)&v882[12] = 0;
                          *(_QWORD *)&v882[17] = 0;
                          v880 = (WTF *)v882;
                          *(_QWORD *)&v883 = 0;
                          WORD4(v883) = 513;
                          HIDWORD(v883) = 1;
                          *(_QWORD *)&v884 = v582;
                          BYTE8(v884) = 0;
                          *(_QWORD *)v885 = v581;
                          v583 = v572;
                          *(_DWORD *)&v885[8] = v572;
                          v886 = v580;
                          v887 = (JSC::B3::Air::Inst *)&v889;
                          v889 = *(_OWORD *)v882;
                          v890 = *(_OWORD *)&v882[16];
                          v891 = v883;
                          v892 = v884;
                          v881 = 3;
                          v888 = 0x200000003;
                          v893[0] = v581;
                          *(_DWORD *)((char *)v893 + 7) = *(_DWORD *)&v885[7];
                          JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>((uint64_t)v874, (unint64_t)&v886, v389, v390, v391, v384, v385, v386);
                          v585 = v887;
                          if (&v889 != (__int128 *)v887 && v887)
                          {
                            v887 = 0;
                            LODWORD(v888) = 0;
                            WTF::fastFree((unint64_t)v585, v584, v389, v390, v391, v384, v385, v386);
                          }
                          v586 = v880;
                          v504 = v822;
                          v572 = v583;
                          if (v882 != (_BYTE *)v880 && v880)
                          {
                            v880 = 0;
                            LODWORD(v881) = 0;
                            WTF::fastFree((unint64_t)v586, v822, v389, v390, v391, v384, v385, v386);
                            v572 = v583;
                            v504 = v822;
                          }
                          v481 = v820;
                        }
                        if (v577 - 4 <= 6)
                        {
                          v613 = (WTF *)(*v875 + 1);
                          v614 = *((_QWORD *)v876 + 14);
                          v615 = *v532;
                          *(_QWORD *)&v884 = 0;
                          BYTE8(v884) = 0;
                          v880 = (WTF *)v882;
                          *(_QWORD *)v882 = 0;
                          *(_WORD *)&v882[8] = 513;
                          *(_DWORD *)&v882[12] = 1;
                          *(_DWORD *)&v882[16] = v615;
                          *(_DWORD *)&v882[20] = 0;
                          v882[24] = 0;
                          *(_QWORD *)&v883 = v579;
                          WORD4(v883) = 521;
                          HIDWORD(v883) = 0;
                          *(_QWORD *)v885 = v614;
                          *(_DWORD *)&v885[8] = v572;
                          v886 = v613;
                          v887 = (JSC::B3::Air::Inst *)&v889;
                          v889 = *(_OWORD *)v882;
                          v890 = *(_OWORD *)&v882[16];
                          v891 = v883;
                          v892 = v884;
                          v881 = 3;
                          v888 = 0x200000003;
                          v893[0] = v614;
                          *(_DWORD *)((char *)v893 + 7) = *(_DWORD *)&v885[7];
                          JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>((uint64_t)v874, (unint64_t)&v886, v389, v390, v391, v384, v385, v386);
                          v617 = v887;
                          if (&v889 != (__int128 *)v887 && v887)
                          {
                            v887 = 0;
                            LODWORD(v888) = 0;
                            WTF::fastFree((unint64_t)v617, v616, v389, v390, v391, v384, v385, v386);
                          }
                          v618 = v880;
                          if (v882 != (_BYTE *)v880 && v880)
                          {
                            v880 = 0;
                            LODWORD(v881) = 0;
                            WTF::fastFree((unint64_t)v618, v616, v389, v390, v391, v384, v385, v386);
                          }
                          v481 = v820;
                          v504 = v822;
                        }
                      }
                    }
LABEL_781:
                    ++v526;
                  }
                  while (v526 != v525);
                }
              }
            }
            v505 = v878 + 1;
            v878 = v505;
            if (v505 >= *((_DWORD *)v504 + 5))
              goto LABEL_848;
            continue;
          }
        }
      }
    }
    if ((v913 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v913, v669, v670, v671, v672, v673, v674, v675);
    if ((v912 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v912, v669, v670, v671, v672, v673, v674, v675);
    v677 = v910;
    if (v910)
    {
      v910 = 0;
      v911 = 0;
      WTF::fastFree((unint64_t)v677, v669, v670, v671, v672, v673, v674, v675);
    }
    v678 = v908;
    if (v908)
    {
      v908 = 0;
      v909 = 0;
      WTF::fastFree((unint64_t)v678, v669, v670, v671, v672, v673, v674, v675);
    }
    v679 = v906;
    if (v906)
    {
      v906 = 0;
      v907 = 0;
      WTF::fastFree((unint64_t)v679, v669, v670, v671, v672, v673, v674, v675);
    }
    if (v905)
      WTF::fastFree(v905 - 16, v669, v670, v671, v672, v673, v674, v675);
    if (!v676)
      continue;
    break;
  }
LABEL_1054:
  if ((v868 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v868, v625, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)0>(void)::{lambda((JSC::B3::Bank)0 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v10 = *(char **)a1;
  v17 = a2[35];
  if (v17)
  else
  return v17 == 0;
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)0>(void)::{lambda((JSC::B3::Bank)0 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v10 = *(char **)a1;
  v17 = *(_DWORD *)(a2 + 148);
  if (v17)
  else
  return v17 == 0;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::~ColoringAllocator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v9 = *(_QWORD *)(a1 + 368);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 360);
  if ((v10 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 320);
  if (v12)
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 328) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(_QWORD *)(a1 + 304);
  if (v13)
  {
    *(_QWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 296);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  char v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  char v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int **v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  _DWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD **v75;
  _QWORD **v76;
  _QWORD **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int **v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v100[2];
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;

  v8 = *(_DWORD *)(a2 + 176);
  v9 = (v8 + 33);
  *(_OWORD *)(v10 + 340) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(int64x2_t *)(v10 + 360) = vdupq_n_s64(0x8000000000000000);
  if (v9 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 368), v9, 0);
  *(_QWORD *)(a1 + 376) = a3;
  v17 = *(_QWORD *)(a2 + 56);
  if (v17)
  {
    v18 = 0;
    do
    {
      v18 |= v17 & -v17;
      v17 &= v17 - 1;
    }
    while (v17);
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      do
      {
        LOBYTE(v100[0]) = v19 | 0x80;
        if (v19 <= 0x1Fu)
        {
          v101 = v19 + 1;
          v20 = *(unsigned int *)(a1 + 276);
          if ((_DWORD)v20 == *(_DWORD *)(a1 + 272))
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * *(unsigned int *)(a1 + 276)) = *(_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 264, (void *)(v20 + 1), (unint64_t)&v101, v12, v13, v14, v15, v16);
          else
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v20) = v19 + 1;
          ++*(_DWORD *)(a1 + 276);
          v21 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
          {
            v26 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)v100);
            v21 = *(unsigned int *)(a1 + 12);
            v22 = *(_QWORD *)a1;
            v23 = *v26;
          }
          else
          {
            v22 = *(_QWORD *)a1;
            v23 = v100[0];
          }
          *(_BYTE *)(v22 + v21) = v23;
          ++*(_DWORD *)(a1 + 12);
        }
        if (v19 > 0x3E)
          break;
        v24 = __clz(__rbit64(v18 >> (v19 + 1)));
        v25 = v24 + v19 + 1;
        if (v25 >= 0x40)
          v19 = 64;
        else
          v19 += v24 + 1;
      }
      while (v25 <= 0x3F);
    }
  }
  WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::setMaxIndex(a1 + 24, (void *)(*(_DWORD *)(*(_QWORD *)(a1 + 256) + 176) + 33), v11, v12, v13, v14, v15, v16);
  v34 = (*(_DWORD *)(a1 + 16) + 1);
  v35 = *(unsigned int *)(a1 + 132);
  if (v35 < v34)
  {
    v36 = *(unsigned int *)(a1 + 128);
    v37 = *(_QWORD *)(a1 + 120);
    if (v36 < v34)
    {
      v38 = v36 + (v36 >> 2);
      if (v38 >= 0x10)
        v39 = v38 + 1;
      else
        v39 = 16;
      if (v39 <= v34)
        v40 = (*(_DWORD *)(a1 + 16) + 1);
      else
        v40 = v39;
      if (HIDWORD(v40))
      {
LABEL_106:
        __break(0xC471u);
        JUMPOUT(0x19804AD60);
      }
      v41 = (_BYTE *)WTF::fastMalloc((WTF *)v40);
      *(_DWORD *)(a1 + 128) = v40;
      *(_QWORD *)(a1 + 120) = v41;
      if ((_DWORD)v35)
      {
        v42 = (char *)v37;
        do
        {
          v43 = *v42++;
          *v41++ = v43;
          --v35;
        }
        while (v35);
        v41 = *(_BYTE **)(a1 + 120);
      }
      if (!v37)
      {
        v37 = (unint64_t)v41;
        if (!v41)
          goto LABEL_45;
LABEL_42:
        v44 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v44 != (_DWORD)v34)
        {
          v45 = (_BYTE *)(v37 + v44);
          v46 = v34 - v44;
          do
          {
            *v45++ |= 0x7Fu;
            --v46;
          }
          while (v46);
        }
        goto LABEL_45;
      }
      if (v41 == (_BYTE *)v37)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
      }
      WTF::fastFree(v37, v27, v28, v29, v30, v31, v32, v33);
      v37 = *(_QWORD *)(a1 + 120);
    }
    if (!v37)
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_45:
  *(_DWORD *)(a1 + 132) = v34;
  if (*(_DWORD *)(a1 + 16))
  {
    v47 = 1;
    do
    {
      v48 = v47 - 1;
      if (v47 <= 0)
        v48 = 31 - v47;
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v47++) = v48 & 0x7F;
    }
    while (v47 <= *(_DWORD *)(a1 + 16));
  }
  if (*(_DWORD *)(a1 + 96))
  {
    if (*(_DWORD *)(a1 + 100))
      *(_DWORD *)(a1 + 100) = 0;
    v49 = *(_QWORD *)(a1 + 88);
    if (v49)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v49, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v101, *(_QWORD *)(a1 + 256));
  v57 = *(_QWORD *)(a1 + 256);
  v58 = *(unsigned int *)(v57 + 108);
  if ((_DWORD)v58)
  {
    v59 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v57 + 96) + 8 * v59))
    {
      if (v58 == ++v59)
        goto LABEL_102;
    }
    if ((_DWORD)v58 != (_DWORD)v59)
    {
      LODWORD(v60) = *(_DWORD *)(v57 + 108);
      do
      {
        if (v60 <= v59)
        {
          __break(0xC471u);
          JUMPOUT(0x19804AD70);
        }
        v61 = *(unsigned int **)(*(_QWORD *)(v57 + 96) + 8 * v59);
        v100[0] = (uint64_t)&v101;
        v100[1] = (uint64_t)v61;
        v106 = 0;
        v62 = (unsigned int **)(v107 + 32 * *v61);
        v63 = *((unsigned int *)v62 + 3);
        if ((_DWORD)v63)
        {
          v64 = *v62;
          v65 = v103;
          v66 = 4 * v63;
          do
          {
            v67 = *v64;
            v68 = *(unsigned int *)(v65 + 4 * v67);
            v69 = v106;
            if (v106 <= v68 || *(_DWORD *)(v104 + 4 * v68) != (_DWORD)v67)
            {
              v108 = *v64;
              if (v106 == v105)
              {
                v70 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v106 + 1, (unint64_t)&v108);
                *(_DWORD *)(v104 + 4 * v106) = *v70;
                v65 = v103;
              }
              else
              {
                *(_DWORD *)(v104 + 4 * v106) = v67;
              }
              ++v106;
              *(_DWORD *)(v65 + 4 * v67) = v69;
            }
            ++v64;
            v66 -= 4;
          }
          while (v66);
        }
        v71 = v61[5];
        if (!(_DWORD)v71)
          goto LABEL_104;
        do
        {
          v72 = v71 - 1;
          v73 = v61[5];
          if (v73 <= (int)v71 - 1)
            goto LABEL_106;
          v74 = *((_QWORD *)v61 + 1);
          v75 = (_QWORD **)(v74 + ((unint64_t)(v71 - 1) << 7));
          v76 = (_QWORD **)(v74 + (v71 << 7));
          if (v71 >= v73)
            v77 = 0;
          else
            v77 = v76;
          v78 = v102;
          v79 = *(_QWORD *)(v102 + 16 * *v61);
          v80 = v79 + (v71 << 6);
          v81 = *(unsigned int *)(v80 + 44);
          if ((_DWORD)v81)
          {
            v82 = *(unsigned int **)(v80 + 32);
            v83 = v106;
            v84 = 4 * v81;
            v85 = v103;
            v86 = v104;
            do
            {
              v87 = *v82;
              v88 = *(unsigned int *)(v85 + 4 * v87);
              if (v83 > v88 && *(_DWORD *)(v86 + 4 * v88) == (_DWORD)v87)
              {
                v89 = *(unsigned int *)(v86 + 4 * v83 - 4);
                *(_DWORD *)(v86 + 4 * v88) = v89;
                *(_DWORD *)(v85 + 4 * v89) = v88;
                v83 = --v106;
              }
              ++v82;
              v84 -= 4;
            }
            while (v84);
            v79 = *(_QWORD *)(v78 + 16 * *v61);
          }
          v90 = (unsigned int **)(v79 + ((unint64_t)(v71 - 1) << 6));
          v91 = *((unsigned int *)v90 + 3);
          if ((_DWORD)v91)
          {
            v92 = *v90;
            v93 = v103;
            v94 = 4 * v91;
            do
            {
              v95 = *v92;
              v96 = *(unsigned int *)(v93 + 4 * v95);
              v97 = v106;
              if (v106 <= v96 || *(_DWORD *)(v104 + 4 * v96) != (_DWORD)v95)
              {
                v108 = *v92;
                if (v106 == v105)
                {
                  v98 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v106 + 1, (unint64_t)&v108);
                  *(_DWORD *)(v104 + 4 * v106) = *v98;
                  v93 = v103;
                }
                else
                {
                  *(_DWORD *)(v104 + 4 * v106) = v95;
                }
                ++v106;
                *(_DWORD *)(v93 + 4 * v95) = v97;
              }
              ++v92;
              v94 -= 4;
            }
            while (v94);
          }
          v71 = v72;
        }
        while ((_DWORD)v72);
        if (!v61[5])
        {
LABEL_104:
          __break(0xC471u);
          JUMPOUT(0x19804AD68);
        }
        v59 = (v59 + 1);
        v60 = *(unsigned int *)(v57 + 108);
        if (v60 > v59)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v57 + 96) + 8 * v59))
          {
            if (v60 == ++v59)
            {
              LODWORD(v59) = *(_DWORD *)(v57 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v58 != (_DWORD)v59);
    }
  }
LABEL_102:
  WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v101, v50, v51, v52, v53, v54, v55, v56);
  return a1;
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)0>(void)::{lambda((JSC::B3::Bank)0 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  WTF::BitVector *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t *v20;
  WTF::BitVector *v21;
  WTF::BitVector *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  WTF::BitVector *v79;
  _DWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WTF::BitVector *v186;
  uint64_t v187;
  _DWORD *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD **v216;
  int v217;
  JSC::B3::Air::Kind *v218;
  unsigned int v219;
  uint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  unsigned __int8 *v223;
  unsigned int v224;
  unsigned int v225;
  unint64_t v226;
  _QWORD *v227;
  unsigned __int8 *v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _BYTE *v234;
  uint64_t v235;
  int v236;
  int v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  _OWORD *v260;
  char **v261;
  uint64_t v262;
  char **v263;
  __int128 v264;
  __int128 v265;
  int v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  int v272;
  unint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  _OWORD *v277;
  __int128 *v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  __int128 v282;
  int v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  int v289;
  unsigned int *v290;
  unint64_t v291;
  unsigned int *v292;
  unint64_t v293;
  BOOL v294;
  uint64_t v295;
  _BYTE *v296;
  WTF::BitVector *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unsigned int v315;
  unsigned int *v316;
  unsigned int v317;
  int v318;
  char v319;
  int v320;
  int v321;
  char v322;
  int v323;
  unsigned int v324;
  int v325;
  char v326;
  int v327;
  int v328;
  char v329;
  int v330;
  unsigned int v331;
  unint64_t v332;
  _OWORD *v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  __int128 v342;
  __int128 v343;
  unsigned int *v344;
  unint64_t v345;
  uint64_t v346;
  int v347;
  unsigned int *v348;
  unint64_t v349;
  unsigned int *v350;
  BOOL v351;
  unint64_t v352;
  unsigned int *v353;
  unint64_t v354;
  int v355;
  int v356;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _QWORD *v362;
  uint64_t v363;
  int v364;
  uint64_t v366;
  uint64_t v367;
  WTF::BitVector *v368;
  WTF::BitVector *v369;
  uint64_t *v370;
  int v371;
  _QWORD *v372;
  int v373;
  unsigned int *v374;
  unint64_t v375;
  unsigned int *v376;
  uint64_t v377;
  uint64_t v378;
  WTF::BitVector *v379;
  WTF::BitVector *v380;
  WTF::BitVector *v381;
  WTF::BitVector *v382;
  uint64_t *v383;
  unint64_t v384;
  char *v385;
  uint64_t v386;
  char v387;
  __int16 v388;
  unsigned int v389;
  char v390;
  __int128 v391;
  uint64_t v392;
  _BYTE v393[88];
  _BYTE v394[11];
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  _QWORD v398[12];
  _QWORD v399[2];
  unsigned int *v400;
  char **v401;
  uint64_t v402;
  char *v403;
  WTF::BitVector *v404;
  __int128 *v405;
  unsigned int *v406;
  _QWORD **v407;
  _QWORD v408[2];
  _QWORD v409[2];
  _QWORD v410[3];

  v8 = (unint64_t)a2;
  v385 = *(char **)a1;
  v9 = (WTF::BitVector *)(a2 + 90);
  v10 = (a2[87] + a2[83]);
  v11 = *(_QWORD *)(v8 + 360);
  if (v11 < 0)
    v12 = 63;
  else
    v12 = *(_QWORD *)(2 * v11);
  if (v12 < v10)
    WTF::BitVector::resizeOutOfLine(v9, v10, 0);
  v13 = *(_DWORD *)(v8 + 16) + 1;
  for (LODWORD(v400) = v13; *(_DWORD *)(v8 + 76) > v13; LODWORD(v400) = v13)
  {
    v14 = v13;
    if (*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v13) >= *(_DWORD *)(v8 + 12))
    {
      v15 = *(uint64_t **)(v8 + 240);
      if (*v15 >= 0)
        v15 = (uint64_t *)(2 * *v15 + 8);
      if (((*(unint64_t *)((char *)v15 + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) == 0)
        WTF::BitVector::add((WTF::BitVector *)(v8 + 208), v14);
    }
    else
    {
      if (*(_DWORD *)(v8 + 116) <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19804CE2CLL);
      }
      if (*(_DWORD *)(*(_QWORD *)(v8 + 104) + 40 * v13))
      {
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(&v391, (uint64_t *)(v8 + 296), (int *)&v400, a4, a5, a6, a7, a8);
      }
      else
      {
        v16 = *(unsigned int *)(v8 + 204);
        if ((_DWORD)v16 == *(_DWORD *)(v8 + 200))
          *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v16 + 1, (unint64_t)&v400);
        else
          *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * v16) = v13;
        ++*(_DWORD *)(v8 + 204);
      }
    }
    v13 = (_DWORD)v400 + 1;
  }
  v17 = (_QWORD *)(v8 + 304);
  v18 = (_DWORD *)(v8 + 332);
  v19 = (_DWORD *)(v8 + 348);
  v20 = (uint64_t *)(v8 + 168);
  v21 = (WTF::BitVector *)(v8 + 336);
  v22 = (WTF::BitVector *)(v8 + 320);
  v362 = (_QWORD *)(v8 + 192);
  v363 = v8 + 24;
  v370 = (uint64_t *)(v8 + 296);
  v372 = (_QWORD *)(v8 + 176);
  v368 = (WTF::BitVector *)(v8 + 208);
  v23 = *(_DWORD *)(v8 + 204);
  v383 = (uint64_t *)(v8 + 168);
  v384 = v8;
  v374 = (unsigned int *)(v8 + 348);
  v376 = (unsigned int *)(v8 + 332);
  v379 = (WTF::BitVector *)(v8 + 320);
  v382 = (WTF::BitVector *)(v8 + 336);
  while (1)
  {
    do
    {
LABEL_21:
      if (v23)
      {
        v24 = *(unsigned int *)(*(_QWORD *)(v8 + 192) + 4 * v23 - 4);
        *(_DWORD *)(v8 + 204) = v23 - 1;
        LODWORD(v391) = v24;
        v25 = *(unsigned int *)(v8 + 188);
        if ((_DWORD)v25 == *(_DWORD *)(v8 + 184))
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 176) + 4 * *(unsigned int *)(v8 + 188)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v372, v25 + 1, (unint64_t)&v391);
          v24 = v391;
        }
        else
        {
          *(_DWORD *)(*v372 + 4 * v25) = v24;
        }
        ++*(_DWORD *)(v8 + 188);
        v34 = *(_QWORD *)(v8 + 168);
        if (v34 >= 0)
          v35 = 2 * v34 + 8;
        else
          v35 = (uint64_t)v20;
        *(_QWORD *)(v35 + ((v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
        v36 = *(_QWORD *)(v8 + 48) + 16 * v24;
        v37 = *(unsigned int *)(v36 + 12);
        if ((_DWORD)v37)
        {
          v38 = *(unsigned int **)v36;
          v39 = 4 * v37;
          do
          {
            v40 = *v38;
            if (*v20 >= 0)
              v41 = 2 * *v20 + 8;
            else
              v41 = (uint64_t)v20;
            if (((*(_QWORD *)(v41 + ((v40 >> 3) & 0x1FFFFFF8)) >> v40) & 1) == 0
              && !*(_DWORD *)(*(_QWORD *)(v384 + 152) + 4 * v40))
            {
            }
            ++v38;
            v39 -= 4;
          }
          while (v39);
        }
        v8 = v384;
        goto LABEL_50;
      }
      v26 = *(_QWORD *)(v8 + 368);
      if ((v26 & 0x8000000000000000) == 0)
      {
        v27 = 2 * v26;
        a3 = *(_QWORD *)(2 * v26);
        v28 = 8 * ((unint64_t)(a3 + 63) >> 6);
        do
        {
          if (!v28)
            goto LABEL_127;
          v29 = *(_QWORD *)(v27 + v28);
          v28 -= 8;
        }
        while (!v29);
        if ((unint64_t)(a3 + 63) < 0x40)
          goto LABEL_34;
        v30 = *(_QWORD *)(2 * v26 + 8);
        if (v30 && (v31 = __clz(__rbit64(v30)), v31 < 0x40))
        {
          v32 = 0;
        }
        else
        {
          if ((unint64_t)(a3 + 63) >> 6 == 1)
            goto LABEL_34;
          v74 = 0;
          v75 = v27 + 16;
          while (1)
          {
            v76 = *(_QWORD *)(v75 + 8 * v74);
            if (v76)
            {
              v31 = __clz(__rbit64(v76));
              if (v31 <= 0x3F)
                break;
            }
            if (((unint64_t)(a3 + 63) >> 6) - 1 == ++v74)
              goto LABEL_34;
          }
          v32 = v74 + 1;
        }
        v33 = v31 + (v32 << 6);
        goto LABEL_33;
      }
      if ((v26 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v77 = __clz(__rbit64(v26));
        if (v77 >= 0x3F)
          v33 = 63;
        else
          v33 = v77;
        a3 = 63;
LABEL_33:
        if (v33 == a3)
        {
LABEL_34:
          if ((v26 & 0x8000000000000000) != 0)
          {
            *(_QWORD *)(v8 + 368) = 0x8000000000000000;
          }
          else
          {
            bzero((void *)(2 * v26 + 8), (unint64_t)(*(_QWORD *)(2 * v26) + 7) >> 3);
            v22 = v379;
            v21 = v382;
            v19 = v374;
            v18 = v376;
          }
          goto LABEL_51;
        }
        v366 = a3;
        while (2)
        {
          if (*(_DWORD *)(v8 + 116) <= v33)
          {
            __break(0xC471u);
            JUMPOUT(0x19804CE0CLL);
          }
          v48 = *(_QWORD *)(v8 + 104) + 40 * v33;
          v49 = *(unsigned int *)(v48 + 4);
          v50 = (_QWORD *)(v48 + 8);
          if ((_DWORD)v49 != 8)
            v50 = (_QWORD *)*v50;
          v51 = 0;
          while ((_DWORD)v49 != v51)
          {
            v52 = v51;
            v53 = *((_DWORD *)v50 + v51++);
            if (v53 != -1)
            {
              v54 = v52;
              goto LABEL_74;
            }
          }
          v54 = v49;
LABEL_74:
          if ((_DWORD)v49 != (_DWORD)v54)
          {
            v55 = v54 | (v49 << 32);
            do
            {
              v56 = *((unsigned int *)v50 + v55);
              if (*(uint64_t *)v9 >= 0)
                v57 = 2 * *(_QWORD *)v9 + 8;
              else
                v57 = (uint64_t)v9;
              v58 = (v56 >> 3) & 0x1FFFFFF8;
              v59 = *(_QWORD *)(v57 + v58);
              *(_QWORD *)(v57 + v58) = v59 & ~(1 << v56);
              if (((1 << v56) & v59) != 0)
              {
                LODWORD(v391) = v56;
                if (*(_DWORD *)(v8 + 352) <= v56)
                {
                  v62 = *(unsigned int *)(v8 + 348);
                  LODWORD(v60) = v62;
                  if ((_DWORD)v62 == *(_DWORD *)(v8 + 344))
                  {
                    v66 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v382, v62 + 1, (unint64_t)&v391);
                    a3 = v366;
                    v22 = v379;
                    v21 = v382;
                    v19 = v374;
                    v18 = v376;
                    *(_DWORD *)(*(_QWORD *)v382 + 4 * *v374) = *v66;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v21 + 4 * v62) = v56;
                  }
                  v61 = v19;
                }
                else
                {
                  v60 = *(unsigned int *)(v8 + 332);
                  if ((_DWORD)v60 == *(_DWORD *)(v8 + 328))
                  {
                    v65 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v379, v60 + 1, (unint64_t)&v391);
                    a3 = v366;
                    v22 = v379;
                    v21 = v382;
                    v19 = v374;
                    v18 = v376;
                    *(_DWORD *)(*(_QWORD *)v379 + 4 * *v376) = *v65;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v22 + 4 * v60) = v56;
                  }
                  v61 = v18;
                }
                ++*v61;
                *(_DWORD *)(*v17 + 4 * v391) = v60;
              }
              v63 = HIDWORD(v55);
              if ((v54 + 1) > HIDWORD(v55))
                LODWORD(v63) = v54 + 1;
              while (1)
              {
                v64 = (v54 + 1);
                v55 = v55 & 0xFFFFFFFF00000000 | v64;
                if ((_DWORD)v63 - 1 == (_DWORD)v54)
                  break;
                LODWORD(v54) = v54 + 1;
                if (*((_DWORD *)v50 + v64) != -1)
                  goto LABEL_92;
              }
              LODWORD(v64) = v63;
LABEL_92:
              LODWORD(v54) = v64;
            }
            while ((_DWORD)v49 != (_DWORD)v64);
            v26 = *(_QWORD *)(v8 + 368);
            v20 = v383;
          }
          v67 = v33 + 1;
          if ((v26 & 0x8000000000000000) != 0)
          {
            v73 = __clz(__rbit64(v26 >> v67)) + v67;
            if (v73 >= 0x3F)
              v33 = 63;
            else
              v33 = v73;
          }
          else
          {
            v33 = *(_QWORD *)(2 * v26);
            v68 = v33 + 63;
            v69 = v67 >> 6;
            if (v67 >> 6 < (unint64_t)(v33 + 63) >> 6)
            {
              v70 = *(_QWORD *)(2 * v26 + 8 * v69 + 8);
              if (v70)
              {
                v71 = __clz(__rbit64(v70 >> v67)) + (v67 & 0x3F);
                if (v71 < 0x40)
                  goto LABEL_101;
              }
              if (v69 + 1 != v68 >> 6)
              {
                while (1)
                {
                  v72 = *(_QWORD *)(2 * v26 + 0x10 + 8 * v69);
                  if (v72)
                  {
                    v71 = __clz(__rbit64(v72));
                    if (v71 <= 0x3F)
                      break;
                  }
                  if ((v68 >> 6) - 1 == ++v69)
                    goto LABEL_102;
                }
                ++v69;
LABEL_101:
                v33 = v71 + (v69 << 6);
              }
            }
          }
LABEL_102:
          if (v33 == a3)
            goto LABEL_34;
          continue;
        }
      }
LABEL_127:
      v78 = *v18;
      v79 = v22;
      v80 = v18;
      if (*v18 || (v78 = *v19, v79 = v21, v80 = v19, *v19))
      {
        v81 = *(unsigned int *)(*(_QWORD *)v79 + 4 * v78 - 4);
        *v80 = v78 - 1;
        *(_DWORD *)(*(_QWORD *)(v8 + 304) + 4 * v81) = -1;
        v82 = *(_QWORD *)(v8 + 88);
        v83 = *(_DWORD *)(v82 + 8 * v81);
        v84 = *(_QWORD *)(v8 + 152);
        do
        {
          v85 = v83;
          v83 = *(_DWORD *)(v84 + 4 * v83);
        }
        while (v83);
        v86 = *(_DWORD *)(v82 + 8 * v81 + 4);
        do
        {
          v87 = v86;
          v86 = *(_DWORD *)(v84 + 4 * v86);
        }
        while (v86);
        v88 = *(_DWORD *)(v8 + 16);
        if (v88 >= v87)
          v89 = v87;
        else
          v89 = v85;
        if (v88 >= v87)
          v90 = v85;
        else
          v90 = v87;
        if ((_DWORD)v89 == (_DWORD)v90)
        {
LABEL_50:
          v19 = v374;
          v18 = v376;
          v22 = v379;
          v21 = v382;
          goto LABEL_51;
        }
        if (v88 < v90)
        {
          v91 = v90 >= v89 ? v89 : v90;
          v92 = v90 <= v89 ? v89 : v90;
          if (!WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains(v363, v91, v92))
          {
            {
              v109 = *v370;
              if (!*v370)
                goto LABEL_199;
              v110 = *(_DWORD *)(v109 - 8);
              v111 = 9 * ((v90 + ~((_DWORD)v90 << 15)) ^ ((v90 + ~((_DWORD)v90 << 15)) >> 10));
              v112 = v110 & (((v111 ^ (v111 >> 6)) + ~((v111 ^ (v111 >> 6)) << 11)) ^ (((v111 ^ (v111 >> 6))
                                                                                      + ~((v111 ^ (v111 >> 6)) << 11)) >> 16));
              v113 = *(_DWORD *)(v109 + 4 * v112);
              if (v113 != (_DWORD)v90)
              {
                v114 = 1;
                while (v113)
                {
                  v112 = ((_DWORD)v112 + v114) & v110;
                  v113 = *(_DWORD *)(v109 + 4 * v112);
                  ++v114;
                  if (v113 == (_DWORD)v90)
                    goto LABEL_198;
                }
                v112 = *(unsigned int *)(v109 - 4);
              }
LABEL_198:
              if (v112 != *(_DWORD *)(v109 - 4))
              {
                v160 = -1;
                *(_DWORD *)(v109 + 4 * v112) = -1;
                ++*(_DWORD *)(*v370 - 16);
                v161 = *v370;
                if (*v370)
                  v160 = *(_DWORD *)(v161 - 12) - 1;
                *(_DWORD *)(v161 - 12) = v160;
                v162 = *v370;
                if (*v370)
                {
                  v163 = 6 * *(_DWORD *)(v162 - 12);
                  v164 = *(_DWORD *)(v162 - 4);
                  if (v163 < v164 && v164 >= 9)
                    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v370, v164 >> 1, 0, v104, v105, v106, v107, v108);
                }
              }
              else
              {
LABEL_199:
                if (*(uint64_t *)v368 >= 0)
                  v137 = 2 * *(_QWORD *)v368 + 8;
                else
                  v137 = (uint64_t)v368;
                *(_QWORD *)(v137 + ((v90 >> 3) & 0x1FFFFFF8)) &= ~(1 << v90);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v90) = v89;
              if (*(_DWORD *)(v8 + 116) <= v90)
              {
                __break(0xC471u);
                JUMPOUT(0x19804CE4CLL);
              }
              v138 = *(_QWORD *)(v8 + 104) + 40 * v90;
              v139 = *(unsigned int *)(v138 + 4);
              v140 = (_QWORD *)(v138 + 8);
              if ((_DWORD)v139 != 8)
                v140 = (_QWORD *)*v140;
              v141 = 0;
              while ((_DWORD)v139 != v141)
              {
                v142 = v141;
                v143 = *((_DWORD *)v140 + v141++);
                if (v143 != -1)
                {
                  v144 = v142;
                  goto LABEL_210;
                }
              }
              v144 = v139;
LABEL_210:
              if ((_DWORD)v139 != (_DWORD)v144)
              {
                v145 = v144 | (v139 << 32);
                do
                {
                  if (*(_DWORD *)(v8 + 116) <= v89)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804CE54);
                  }
                  WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v391, (unsigned int *)(*(_QWORD *)(v8 + 104) + 40 * v89), *((_DWORD *)v140 + v145));
                  v146 = HIDWORD(v145);
                  if ((v144 + 1) > HIDWORD(v145))
                    LODWORD(v146) = v144 + 1;
                  while (1)
                  {
                    v147 = (v144 + 1);
                    v145 = v145 & 0xFFFFFFFF00000000 | v147;
                    if ((_DWORD)v146 - 1 == (_DWORD)v144)
                      break;
                    LODWORD(v144) = v144 + 1;
                    if (*((_DWORD *)v140 + v147) != -1)
                      goto LABEL_217;
                  }
                  LODWORD(v147) = v146;
LABEL_217:
                  LODWORD(v144) = v147;
                }
                while ((_DWORD)v139 != (_DWORD)v147);
                v20 = v383;
              }
              v148 = *(_QWORD *)(v8 + 48) + 16 * v90;
              v149 = *(unsigned int *)(v148 + 12);
              if ((_DWORD)v149)
              {
                v150 = *(unsigned int **)v148;
                v151 = 4 * v149;
                do
                {
                  v152 = *v150;
                  if (*v20 >= 0)
                    v153 = 2 * *v20 + 8;
                  else
                    v153 = (uint64_t)v20;
                  if (((*(_QWORD *)(v153 + ((v152 >> 3) & 0x1FFFFFF8)) >> v152) & 1) == 0
                    && !*(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v152))
                  {
                    {
                      if (*(_DWORD *)(v8 + 16) < v89)
                        ++*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v89);
                    }
                    else
                    {
                    }
                  }
                  ++v150;
                  v151 -= 4;
                }
                while (v151);
              }
              if (*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v89) >= *(_DWORD *)(v8 + 12))
              {
                v154 = *v370;
                if (*v370)
                {
                  v155 = *(_DWORD *)(v154 - 8);
                  v156 = 9 * ((v89 + ~((_DWORD)v89 << 15)) ^ ((v89 + ~((_DWORD)v89 << 15)) >> 10));
                  v157 = v155 & (((v156 ^ (v156 >> 6)) + ~((v156 ^ (v156 >> 6)) << 11)) ^ (((v156 ^ (v156 >> 6))
                                                                                          + ~((v156 ^ (v156 >> 6)) << 11)) >> 16));
                  v158 = *(_DWORD *)(v154 + 4 * v157);
                  if (v158 != (_DWORD)v89)
                  {
                    v159 = 1;
                    while (v158)
                    {
                      v157 = ((_DWORD)v157 + v159) & v155;
                      v158 = *(_DWORD *)(v154 + 4 * v157);
                      ++v159;
                      if (v158 == (_DWORD)v89)
                        goto LABEL_251;
                    }
                    v157 = *(unsigned int *)(v154 - 4);
                  }
LABEL_251:
                  if (v157 != *(_DWORD *)(v154 - 4))
                  {
                    v166 = -1;
                    *(_DWORD *)(v154 + 4 * v157) = -1;
                    ++*(_DWORD *)(*v370 - 16);
                    v167 = *v370;
                    if (*v370)
                      v166 = *(_DWORD *)(v167 - 12) - 1;
                    *(_DWORD *)(v167 - 12) = v166;
                    v168 = *v370;
                    if (*v370)
                    {
                      v169 = 6 * *(_DWORD *)(v168 - 12);
                      v170 = *(_DWORD *)(v168 - 4);
                      if (v169 < v170 && v170 >= 9)
                        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v370, v170 >> 1, 0, v104, v105, v106, v107, v108);
                    }
                    v172 = *(uint64_t **)(v8 + 240);
                    if (*v172 >= 0)
                      v172 = (uint64_t *)(2 * *v172 + 8);
                    if (((*(unint64_t *)((char *)v172 + ((v89 >> 3) & 0x1FFFFFF8)) >> v89) & 1) == 0)
                      WTF::BitVector::add(v368, v89);
                  }
                }
              }
              *(_BYTE *)(v8 + 217) = 1;
            }
            else
            {
              v126 = *(_QWORD *)(v8 + 360);
              if (v126 >= 0)
                v127 = 2 * v126 + 8;
              else
                v127 = (uint64_t)v9;
              *(_QWORD *)(v127 + ((v81 >> 3) & 0x1FFFFFF8)) |= 1 << v81;
            }
            goto LABEL_50;
          }
        }
        goto LABEL_196;
      }
      v99 = *v370;
      if (*v370 && *(_DWORD *)(v99 - 12))
      {
        LODWORD(v391) = 0;
        if (!*(_DWORD *)(v99 - 12))
          goto LABEL_188;
        v100 = *(unsigned int *)(v99 - 4);
        if ((_DWORD)v100)
        {
          v101 = 4 * v100;
          v102 = (unsigned int *)v99;
          while (*v102 + 1 <= 1)
          {
            ++v102;
            v101 -= 4;
            if (!v101)
              goto LABEL_188;
          }
        }
        else
        {
          v102 = (unsigned int *)v99;
        }
        if ((unsigned int *)(v99 + 4 * v100) == v102)
        {
LABEL_188:
          v128 = 0;
        }
        else
        {
          v128 = *v102;
          v129 = -1;
          *v102 = -1;
          ++*(_DWORD *)(*v370 - 16);
          v130 = *v370;
          if (*v370)
            v129 = *(_DWORD *)(v130 - 12) - 1;
          *(_DWORD *)(v130 - 12) = v129;
          v131 = *v370;
          if (*v370)
          {
            v132 = 6 * *(_DWORD *)(v131 - 12);
            v133 = *(_DWORD *)(v131 - 4);
            if (v132 < v133 && v133 >= 9)
              WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v370, v133 >> 1, 0, a4, a5, a6, a7, a8);
          }
        }
        LODWORD(v391) = v128;
        v135 = *(unsigned int *)(v8 + 204);
        if ((_DWORD)v135 == *(_DWORD *)(v8 + 200))
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v362, v135 + 1, (unint64_t)&v391);
          v128 = v391;
        }
        else
        {
          *(_DWORD *)(*v362 + 4 * v135) = v128;
        }
        ++*(_DWORD *)(v8 + 204);
        v136 = v8;
        v125 = v128;
LABEL_195:
LABEL_196:
        v19 = v374;
        v18 = v376;
        v22 = v379;
        v21 = v382;
        goto LABEL_51;
      }
      v115 = *(_QWORD *)v368;
      if ((*(_QWORD *)v368 & 0x8000000000000000) != 0)
      {
        if ((v115 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
LABEL_169:
          LODWORD(v391) = v119;
          v120 = *(_QWORD *)(v8 + 208);
          v121 = 2 * v120 + 8;
          v122 = v120 < 0;
          v123 = (uint64_t)v368;
          if (!v122)
            v123 = v121;
          *(_QWORD *)(v123 + (((unint64_t)v119 >> 3) & 0x1FFFFFF8)) &= ~(1 << v119);
          v124 = *(unsigned int *)(v8 + 204);
          if ((_DWORD)v124 == *(_DWORD *)(v8 + 200))
          {
            *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v362, v124 + 1, (unint64_t)&v391);
            v125 = v391;
          }
          else
          {
            v125 = v119;
            *(_DWORD *)(*v362 + 4 * v124) = v119;
          }
          ++*(_DWORD *)(v8 + 204);
          v136 = v8;
          goto LABEL_195;
        }
      }
      else
      {
        v116 = (_QWORD *)(2 * v115);
        v117 = ((unint64_t)(*v116 + 63) >> 6);
        while (v117 * 8)
        {
          if (v116[v117--])
            goto LABEL_169;
        }
      }
LABEL_51:
      v23 = *(_DWORD *)(v8 + 204);
      if (v23)
        v42 = 0;
      else
        v42 = *(_DWORD *)(v8 + 332) == 0;
      v43 = v42 && *(_DWORD *)(v8 + 348) == 0;
    }
    while (!v43 || *v370 && *(_DWORD *)(*v370 - 12));
    v44 = *(_QWORD *)v368;
    if ((*(_QWORD *)v368 & 0x8000000000000000) == 0)
      break;
    if ((v44 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_269;
  }
  v45 = (_QWORD *)(2 * v44);
  v46 = ((unint64_t)(*v45 + 63) >> 6);
  while (v46 * 8)
  {
    if (v45[v46--])
      goto LABEL_21;
  }
LABEL_269:
  v185 = *(unsigned int *)(v8 + 148);
  v364 = v185;
  if ((_DWORD)v185)
  {
    v186 = *(WTF::BitVector **)(a1 + 16);
    v395 = 0;
    v187 = 4 * v185;
    v188 = *(_DWORD **)(v8 + 136);
    v380 = v186;
    do
    {
      v189 = *v188;
      LODWORD(v396) = *v188;
      v190 = *(_QWORD *)v186;
      if ((*(_QWORD *)v186 & 0x8000000000000000) != 0)
        v191 = 63;
      else
        v191 = *(_QWORD *)(2 * v190);
      if (v191 <= v189)
      {
        WTF::BitVector::resizeOutOfLine(v380, v189 + 1, 0);
        v190 = *(_QWORD *)v380;
      }
      v186 = v380;
      if (v190 >= 0)
        v192 = 2 * v190 + 8;
      else
        v192 = (uint64_t)v380;
      *(_QWORD *)(v192 + ((v189 >> 3) & 0x1FFFFFF8)) |= 1 << v189;
      v193 = *(_QWORD *)v385;
      v194 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v385 + 8), v189);
      if (v194 == 3)
        v195 = 8;
      else
        v195 = 16;
      if (v194 >= 3)
        v196 = v195;
      else
        v196 = 4;
      v400 = JSC::B3::Air::Code::addStackSlot(v193, v196, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v391, &v395, (int *)&v396, &v400, v197, v198, v199, v200);
      ++v188;
      v187 -= 4;
    }
    while (v187);
    v208 = *(_QWORD *)v385;
    *(_QWORD *)&v391 = v208;
    *((_QWORD *)&v391 + 1) = v393;
    v392 = 8;
    v369 = (WTF::BitVector *)*(unsigned int *)(v208 + 108);
    if ((_DWORD)v369)
    {
      v209 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v208 + 96) + 8 * v209))
      {
        if (v369 == (WTF::BitVector *)++v209)
          goto LABEL_421;
      }
      if ((_DWORD)v369 != (_DWORD)v209)
      {
        LODWORD(v210) = *(_DWORD *)(v208 + 108);
        LODWORD(v211) = v209;
        v367 = v208;
        do
        {
          if (v210 <= v211)
          {
            __break(0xC471u);
            JUMPOUT(0x19804CE24);
          }
          v371 = v211;
          v212 = *(_QWORD *)(*(_QWORD *)(v208 + 96) + 8 * v211);
          v390 = 0;
          v389 = 0;
          if (*(_DWORD *)(v212 + 20))
          {
            v213 = 0;
            do
            {
              v214 = v213;
              v215 = *(_QWORD *)(v212 + 8);
              v216 = (_QWORD **)(v215 + ((unint64_t)v213 << 7));
              v388 = 0;
              v387 = 0;
              v218 = (JSC::B3::Air::Kind *)(v216 + 15);
              v217 = *((__int16 *)v216 + 60);
              if (v217 == 90)
              {
                v219 = *((_DWORD *)v216 + 3);
                if (!v219)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804CDCCLL);
                }
                v220 = (uint64_t)*v216;
                if (*((_BYTE *)*v216 + 8) == 1)
                {
                  v221 = *(unsigned int *)(v220 + 16);
                  if ((int)v221 < 1)
                  {
                    v221 = -(int)v221;
                    v222 = v385 + 24;
                    if (v221 >= *((unsigned int *)v385 + 9))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804CE14);
                    }
                  }
                  else
                  {
                    v222 = v385 + 8;
                    if (v221 >= *((_DWORD *)v385 + 5))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804CDF4);
                    }
                  }
                  v223 = (unsigned __int8 *)(*v222 + 2 * v221);
                  v224 = *v223;
                  v225 = v223[1];
                  if (v225 >= v224)
                    v225 = v224;
                  if (v225 < 3)
                    goto LABEL_311;
                }
                if (v219 <= 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804CDE4);
                }
                if (*(_BYTE *)(v220 + 40) == 1)
                {
                  v226 = *(unsigned int *)(v220 + 48);
                  if ((int)v226 < 1)
                  {
                    v226 = -(int)v226;
                    v227 = v385 + 24;
                    if (v226 >= *((unsigned int *)v385 + 9))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804CE1CLL);
                    }
                  }
                  else
                  {
                    v227 = v385 + 8;
                    if (v226 >= *((_DWORD *)v385 + 5))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804CDFCLL);
                    }
                  }
                  v228 = (unsigned __int8 *)(*v227 + 2 * v226);
                  v229 = *v228;
                  v230 = v228[1];
                  if (v230 >= v229)
                    v230 = v229;
                  if (v230 <= 2)
LABEL_311:
                    HIBYTE(v388) = 1;
                }
              }
              v400 = (unsigned int *)&v395;
              v401 = (char **)v216;
              v402 = (uint64_t)v385;
              v403 = (char *)&v388 + 1;
              v404 = (WTF::BitVector *)&v388;
              v405 = (__int128 *)&v387;
              if ((v217 - 446) > 5)
              {
                v231 = *((unsigned int *)v216 + 3);
                if ((_DWORD)v231)
                {
                  v232 = 0;
                  v233 = 0;
                  v234 = (char *)&JSC::B3::Air::g_formTable + 21 * v217 + ((unint64_t)((v231 - 1) * v231) >> 1);
                  v235 = 32 * v231;
                  do
                  {
                    if (v233 >= *((unsigned int *)v216 + 3))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804CDBCLL);
                    }
                    if ((*v234 >> 5) - 1 >= 5u)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804CC64);
                    }
                    ++v233;
                    ++v234;
                    v232 += 32;
                  }
                  while (v235 != v232);
                }
              }
              else
              {
                v397 = (uint64_t)&v396;
                v398[0] = &v400;
                v409[1] = &v396;
                if (*(_WORD *)v218 == 448)
                {
                  v410[1] = &v396;
                  if (!*((_DWORD *)v216 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804CDD4);
                  }
                  if (!*((_DWORD *)v216 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804CDDCLL);
                  }
                  (*(void (**)(_QWORD, _QWORD **, _QWORD *))(*(_QWORD *)**v216 + 16))(**v216, v216, v410);
                }
                else
                {
                  switch(*(_WORD *)v218)
                  {
                    case 0x1BE:
                      break;
                    case 0x1BF:
                      JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v216, (uint64_t)v409);
                      break;
                    case 0x1C1:
                      JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v216, (uint64_t)v409);
                      break;
                    case 0x1C2:
                      v410[0] = v409;
                      JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v216, (uint64_t)v410);
                      break;
                    case 0x1C3:
                      JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v216, (uint64_t)v409);
                      break;
                    default:
                      WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v218, "\n");
                      __break(0xC471u);
                      JUMPOUT(0x19804CD94);
                  }
                }
              }
              if ((_BYTE)v388 && HIBYTE(v388))
                *(_WORD *)v218 = 94;
              if (v387)
              {
                v236 = *(__int16 *)v218;
                if (v236 != 90 && v236 != 94)
                {
                  if ((v236 - 107) <= 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804CCC4);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x19804CD18);
                }
                v237 = *(_DWORD *)(*(_QWORD *)v385 + 176);
                *(_DWORD *)(*(_QWORD *)v385 + 176) = v237 + 1;
                v238 = (v237 + 33);
                LODWORD(v410[0]) = v237 + 33;
                v239 = *(_QWORD *)v380;
                if ((*(_QWORD *)v380 & 0x8000000000000000) != 0)
                  v240 = 63;
                else
                  v240 = *(_QWORD *)(2 * v239);
                if (v240 <= v238)
                {
                  WTF::BitVector::resizeOutOfLine(v380, v238 + 1, 0);
                  v239 = *(_QWORD *)v380;
                }
                if (v239 >= 0)
                  v251 = 2 * v239 + 8;
                else
                  v251 = (uint64_t)v380;
                *(_QWORD *)(v251 + ((v238 >> 3) & 0x1FFFFFF8)) |= 1 << v238;
                v252 = *((unsigned int *)v216 + 3);
                if ((_DWORD)v252 == *((_DWORD *)v216 + 2))
                {
                  WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v216, (unsigned int *)v410, v202, v203, v204, v205, v206, v207);
                  v255 = *((_DWORD *)v216 + 3);
                }
                else
                {
                  v253 = (uint64_t)&(*v216)[4 * v252];
                  v254 = v410[0];
                  *(_QWORD *)v253 = 0;
                  *(_WORD *)(v253 + 8) = 513;
                  *(_DWORD *)(v253 + 12) = 1;
                  *(_QWORD *)(v253 + 16) = v254;
                  *(_BYTE *)(v253 + 24) = 0;
                  v255 = *((_DWORD *)v216 + 3) + 1;
                  *((_DWORD *)v216 + 3) = v255;
                }
                if (v255 != 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804CC34);
                }
                v256 = *(_QWORD *)(v215 + (v214 << 7) + 112);
                v396 = v398;
                v399[0] = v256;
                LODWORD(v399[1]) = 0;
                v400 = (unsigned int *)v389;
                v401 = &v403;
                v397 = 3;
                v402 = 3;
                v408[0] = v256;
                *(_DWORD *)((char *)v408 + 7) = *(_DWORD *)((char *)v399 + 7);
                v257 = HIDWORD(v392);
                if (HIDWORD(v392) == (_DWORD)v392)
                {
                  v273 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v391 + 8, HIDWORD(v392) + 1, (unint64_t)&v400, v203, v204, v205, v206, v207);
                  v274 = HIDWORD(v392);
                  v275 = *((_QWORD *)&v391 + 1);
                  v276 = *((_QWORD *)&v391 + 1) + 136 * HIDWORD(v392);
                  *(_QWORD *)v276 = *(_QWORD *)v273;
                  v277 = (_OWORD *)(v276 + 24);
                  *(_QWORD *)(v276 + 8) = v276 + 24;
                  *(_QWORD *)(v276 + 16) = 3;
                  v278 = *(__int128 **)(v273 + 8);
                  if (v278 == (__int128 *)(v273 + 24))
                  {
                    v279 = *(unsigned int *)(v273 + 20);
                    if ((_DWORD)v279)
                    {
                      v280 = 32 * v279;
                      do
                      {
                        v281 = *v278;
                        v282 = v278[1];
                        v278 += 2;
                        *v277 = v281;
                        v277[1] = v282;
                        v277 += 2;
                        v280 -= 32;
                      }
                      while (v280);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v273 + 8) = v273 + 24;
                    *(_QWORD *)(v276 + 8) = v278;
                    v284 = *(_DWORD *)(v273 + 16);
                    *(_DWORD *)(v273 + 16) = 3;
                    *(_DWORD *)(v276 + 16) = v284;
                  }
                  v268 = (_QWORD *)(v273 + 120);
                  v283 = *(_DWORD *)(v273 + 20);
                  *(_DWORD *)(v273 + 20) = 0;
                  *(_DWORD *)(v276 + 20) = v283;
                  v267 = v275 + 136 * v274 + 120;
                }
                else
                {
                  v258 = *((_QWORD *)&v391 + 1);
                  v259 = *((_QWORD *)&v391 + 1) + 136 * HIDWORD(v392);
                  *(_QWORD *)v259 = v389;
                  v260 = (_OWORD *)(v259 + 24);
                  *(_QWORD *)(v259 + 8) = v259 + 24;
                  *(_QWORD *)(v259 + 16) = 3;
                  v261 = v401;
                  if (v401 == &v403)
                  {
                    if (HIDWORD(v402))
                    {
                      v262 = 32 * HIDWORD(v402);
                      v263 = &v403;
                      do
                      {
                        v264 = *(_OWORD *)v263;
                        v265 = *((_OWORD *)v263 + 1);
                        v263 += 4;
                        *v260 = v264;
                        v260[1] = v265;
                        v260 += 2;
                        v262 -= 32;
                      }
                      while (v262);
                    }
                  }
                  else
                  {
                    v401 = &v403;
                    *(_QWORD *)(v259 + 8) = v261;
                    v272 = v402;
                    LODWORD(v402) = 3;
                    *(_DWORD *)(v259 + 16) = v272;
                  }
                  v266 = HIDWORD(v402);
                  HIDWORD(v402) = 0;
                  *(_DWORD *)(v259 + 20) = v266;
                  v267 = v258 + 136 * v257 + 120;
                  v268 = v408;
                }
                v269 = *v268;
                *(_DWORD *)(v267 + 7) = *(_DWORD *)((char *)v268 + 7);
                *(_QWORD *)v267 = v269;
                ++HIDWORD(v392);
                v270 = (unint64_t)v401;
                if (&v403 != v401 && v401)
                {
                  v401 = 0;
                  LODWORD(v402) = 0;
                  WTF::fastFree(v270, v201, v202, v203, v204, v205, v206, v207);
                }
                v271 = (unint64_t)v396;
                if (v398 != v396 && v396)
                {
                  v396 = 0;
                  LODWORD(v397) = 0;
                  WTF::fastFree(v271, v201, v202, v203, v204, v205, v206, v207);
                }
              }
              else
              {
                v400 = (unsigned int *)&v395;
                v401 = (char **)v384;
                v402 = (uint64_t)&v390;
                v403 = v385;
                v404 = v380;
                v405 = &v391;
                v406 = &v389;
                v407 = v216;
                v410[0] = &v400;
                if ((*(__int16 *)v218 - 446) > 5)
                {
                  v241 = *((unsigned int *)v216 + 3);
                  if ((_DWORD)v241)
                  {
                    v242 = 0;
                    v243 = (char *)&JSC::B3::Air::g_formTable
                         + 21 * *(__int16 *)v218
                         + ((unint64_t)((v241 - 1) * v241) >> 1);
                    v244 = 16;
                    do
                    {
                      if (v242 >= *((unsigned int *)v216 + 3))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804CDC4);
                      }
                      v245 = v243[v242];
                      if ((v245 >> 5) - 1 >= 5)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804CDB4);
                      }
                      v246 = (uint64_t)*v216;
                      switch(LOBYTE((*v216)[(unint64_t)v244 / 8 - 1]))
                      {
                        case 1:
                          v248 = v245 & 0xF;
                          v249 = (v245 >> 4) & 1;
                          v247 = (unsigned int *)(v246 + v244);
                          goto LABEL_343;
                        case 6:
                        case 7:
                        case 8:
                          v247 = (unsigned int *)(v246 + v244);
                          goto LABEL_341;
                        case 0xB:
                          v250 = v246 + v244;
                          v247 = (unsigned int *)(v250 + 4);
LABEL_341:
                          v248 = 0;
                          goto LABEL_342;
                        case 0xC:
                        case 0xD:
                          v247 = (unsigned int *)(v246 + v244);
                          v248 = 6;
LABEL_342:
                          v249 = 0;
LABEL_343:
                          break;
                        default:
                          break;
                      }
                      ++v242;
                      v244 += 32;
                    }
                    while (v241 != v242);
                  }
                }
                else
                {
                  v397 = (uint64_t)&v396;
                  v398[0] = v410;
                }
              }
              v213 = v389 + 1;
              v389 = v213;
            }
            while (v213 < *(_DWORD *)(v212 + 20));
          }
          JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v391, (JSC::B3::Air::BasicBlock *)v212, v202, v203, v204, v205, v206, v207);
          if (v390)
          {
            v285 = *(_QWORD *)(v212 + 8);
            v286 = *(unsigned int *)(v212 + 20);
            v287 = v285 + (v286 << 7);
            if ((_DWORD)v286)
            {
              v288 = 0;
              v289 = 0;
              v290 = (unsigned int *)(v285 + (v286 << 7));
              v291 = (unint64_t)v290;
              do
              {
                v292 = (unsigned int *)(v285 + v288);
                if ((*(__int16 *)(v285 + v288 + 120) | 4) == 0x5E && v292[3] == 2)
                {
                  v293 = *(_QWORD *)v292;
                  if (*(_BYTE *)(*(_QWORD *)v292 + 8) == 1)
                  {
                    v294 = *(_WORD *)(v285 + v288 + 120) != 94 && *(_BYTE *)(v293 + 40) == 1;
                    if (v294 && *(_DWORD *)(v293 + 16) == *(_DWORD *)(v293 + 48))
                    {
                      if (v291 == *(_QWORD *)(v212 + 8) + ((unint64_t)*(unsigned int *)(v212 + 20) << 7))
                      {
                        v291 = v285 + v288;
                      }
                      else if (v292 != v290)
                      {
                        WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v290, v292, v291, v203, v204, v205, v206, v207);
                        v291 += v285 + v288 - (_QWORD)v290;
                        v293 = *(_QWORD *)(v285 + v288);
                      }
                      if (v285 + v288 + 16 != v293 && v293)
                      {
                        v295 = v285 + v288;
                        *(_QWORD *)v295 = 0;
                        *(_DWORD *)(v295 + 8) = 0;
                        WTF::fastFree(v293, v292, v202, v203, v204, v205, v206, v207);
                      }
                      v290 = (unsigned int *)(v285 + v288 + 128);
                      ++v289;
                    }
                  }
                }
                v288 += 128;
              }
              while (v285 + v288 < v287);
              v285 = *(_QWORD *)(v212 + 8);
              LODWORD(v286) = *(_DWORD *)(v212 + 20);
              v287 = v291;
            }
            else
            {
              v289 = 0;
              v290 = (unsigned int *)(v285 + (v286 << 7));
            }
            v201 = (unsigned int *)(v285 + ((unint64_t)v286 << 7));
            if (v290 != v201)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v290, v201, v287, v203, v204, v205, v206, v207);
              LODWORD(v286) = *(_DWORD *)(v212 + 20);
            }
            *(_DWORD *)(v212 + 20) = v286 - v289;
          }
          v211 = (v371 + 1);
          v208 = v367;
          v210 = *(unsigned int *)(v367 + 108);
          if (v210 > v211)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v367 + 96) + 8 * v211))
            {
              if (v210 == ++v211)
              {
                LODWORD(v211) = *(_DWORD *)(v367 + 108);
                break;
              }
            }
          }
        }
        while ((_DWORD)v369 != (_DWORD)v211);
        v296 = (_BYTE *)*((_QWORD *)&v391 + 1);
        if (HIDWORD(v392))
        {
          v358 = 136 * HIDWORD(v392);
          v359 = *((_QWORD *)&v391 + 1) + 24;
          do
          {
            v360 = *(_QWORD *)(v359 - 16);
            if (v359 != v360 && v360 != 0)
            {
              *(_QWORD *)(v359 - 16) = 0;
              *(_DWORD *)(v359 - 8) = 0;
              WTF::fastFree(v360, v201, v202, v203, v204, v205, v206, v207);
            }
            v359 += 136;
            v358 -= 136;
          }
          while (v358);
          v296 = (_BYTE *)*((_QWORD *)&v391 + 1);
        }
        if (v393 != v296 && v296)
        {
          *((_QWORD *)&v391 + 1) = 0;
          LODWORD(v392) = 0;
          WTF::fastFree((unint64_t)v296, v201, v202, v203, v204, v205, v206, v207);
        }
      }
    }
LABEL_421:
    if (v395)
      WTF::fastFree(v395 - 16, v201, v202, v203, v204, v205, v206, v207);
    return v364 == 0;
  }
  v297 = *(WTF::BitVector **)v385;
  v386 = *(unsigned int *)(*(_QWORD *)v385 + 108);
  if ((_DWORD)v386)
  {
    v298 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v297 + 12) + 8 * v298))
    {
      if (v386 == ++v298)
        return v364 == 0;
    }
    if ((_DWORD)v386 != (_DWORD)v298)
    {
      v299 = &v392;
      LODWORD(v300) = v386;
      v301 = v298;
      v381 = v297;
      do
      {
        if (v300 <= v301)
        {
          __break(0xC471u);
          JUMPOUT(0x19804CE44);
        }
        v302 = *(_QWORD *)(*((_QWORD *)v297 + 12) + 8 * v301);
        LODWORD(v303) = *(_DWORD *)(v302 + 20);
        if (!(_DWORD)v303)
        {
          v347 = 0;
          v344 = *(unsigned int **)(v302 + 8);
          v345 = (unint64_t)v344;
          v348 = v344;
          goto LABEL_538;
        }
        v304 = 0;
        do
        {
          v305 = *(_QWORD *)(v302 + 8);
          v306 = v305 + (v304 << 7);
          if ((*(__int16 *)(v306 + 120) | 4) != 0x5E)
          {
            v308 = *(_QWORD *)v306;
            v307 = *(unsigned int *)(v306 + 12);
LABEL_445:
            if (!v307)
              goto LABEL_501;
            LODWORD(v309) = 0;
            v311 = v308 + 32 * v307;
            goto LABEL_447;
          }
          v307 = *(unsigned int *)(v306 + 12);
          v308 = *(_QWORD *)v306;
          if ((_DWORD)v307 != 2)
            goto LABEL_445;
          if (*(_BYTE *)(v308 + 8) != 1 || *(_BYTE *)(v308 + 40) != 1)
            goto LABEL_442;
          if (*(_WORD *)(v306 + 120) != 94)
            goto LABEL_503;
          v309 = *(_QWORD *)(v8 + 376);
          if (v309)
          {
            v310 = *(unsigned int *)(v308 + 16);
            if ((int)v310 < 1)
            {
              v310 = -(int)v310;
              if (v310 >= *(unsigned int *)(v309 + 28))
              {
                __break(0xC471u);
                JUMPOUT(0x19804CE3CLL);
              }
              v309 += 16;
            }
            else if (v310 >= *(_DWORD *)(v309 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19804CE34);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v309 + 2 * v310 + 1) <= 2u)
            {
LABEL_503:
              LODWORD(v309) = 1;
              goto LABEL_443;
            }
LABEL_442:
            LODWORD(v309) = 0;
          }
LABEL_443:
          v311 = v308 + 64;
LABEL_447:
          v312 = *(_QWORD *)(v8 + 152);
          v313 = *(_QWORD *)(v8 + 120);
          v314 = v308;
          do
          {
            v315 = *(char *)(v314 + 8);
            if (v315 > 0xD)
              goto LABEL_469;
            if (((1 << v315) & 0x31C2) != 0)
            {
              v316 = (unsigned int *)(v314 + 16);
            }
            else
            {
              if (v315 != 11)
                goto LABEL_469;
              v324 = *(_DWORD *)(v314 + 16);
              if ((v324 & 0x80000000) == 0 && v324 - 33 <= 0xFFFFFFDF)
              {
                do
                {
                  v325 = v324;
                  v324 = *(_DWORD *)(v312 + 4 * v324);
                }
                while (v324);
                if (v325 > 0xFFFFFFDF || (v325 - 1) <= 0x1F)
                {
                  if (v325 <= 0)
                    v329 = 31 - v325;
                  else
                    v329 = v325 + 127;
                  v330 = v329 & 0x7F;
                  if ((v329 & 0x60) != 0)
                    v328 = (char)(31 - (v329 & 0x7F));
                  else
                    v328 = v330 + 1;
                  if (v330 == 127)
                    v328 = 0;
                }
                else
                {
                  LODWORD(v391) = v325;
                  v326 = *(_BYTE *)(v313 + v325);
                  v327 = v326 & 0x7F;
                  if (v327 == 127)
                  {
                    WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v391);
                    WTF::dataLog<char [7]>();
                    WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                    __break(0xC471u);
                    JUMPOUT(0x19804CCF8);
                  }
                  if ((v326 & 0x60) != 0)
                    v328 = (char)(31 - v327);
                  else
                    v328 = v327 + 1;
                }
                *(_DWORD *)(v314 + 16) = v328;
              }
              v316 = (unsigned int *)(v314 + 20);
            }
            v317 = *v316;
            if ((*v316 & 0x80000000) == 0 && v317 - 33 <= 0xFFFFFFDF)
            {
              do
              {
                v318 = v317;
                v317 = *(_DWORD *)(v312 + 4 * v317);
              }
              while (v317);
              if (v318 > 0xFFFFFFDF || (v318 - 1) <= 0x1F)
              {
                if (v318 <= 0)
                  v322 = 31 - v318;
                else
                  v322 = v318 + 127;
                v323 = v322 & 0x7F;
                if ((v322 & 0x60) != 0)
                  v321 = (char)(31 - (v322 & 0x7F));
                else
                  v321 = v323 + 1;
                if (v323 == 127)
                  v321 = 0;
              }
              else
              {
                LODWORD(v391) = v318;
                v319 = *(_BYTE *)(v313 + v318);
                v320 = v319 & 0x7F;
                if (v320 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v391);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                  __break(0xC471u);
                  JUMPOUT(0x19804CC98);
                }
                if ((v319 & 0x60) != 0)
                  v321 = (char)(31 - v320);
                else
                  v321 = v320 + 1;
              }
              *v316 = v321;
            }
LABEL_469:
            v314 += 32;
          }
          while (v314 != v311);
          if ((_DWORD)v309)
          {
            v331 = *(_DWORD *)(v306 + 12);
            if (!v331)
            {
              __break(0xC471u);
              JUMPOUT(0x19804CDECLL);
            }
            if (*(_BYTE *)(v308 + 8) == 1)
            {
              if (v331 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19804CE04);
              }
              if (*(_BYTE *)(v308 + 40) == 1 && *(_DWORD *)(v308 + 16) == *(_DWORD *)(v308 + 48))
              {
                *(_QWORD *)&v391 = &v392;
                *((_QWORD *)&v391 + 1) = 3;
                *(_QWORD *)v394 = 0;
                *(_WORD *)&v394[8] = 0;
                v394[10] &= 0xFCu;
                v333 = (_OWORD *)(v306 + 16);
                v332 = *(_QWORD *)v306;
                if (*(_QWORD *)v306 != v306 + 16)
                {
                  if (v332)
                  {
                    *(_QWORD *)v306 = 0;
                    *(_DWORD *)(v306 + 8) = 0;
                    v377 = v301;
                    WTF::fastFree(v332, v180, (uint64_t)&v392, v301, v181, v182, v183, v184);
                    v301 = v377;
                    v299 = &v392;
                  }
                  *(_QWORD *)v306 = v333;
                  v339 = v391;
                  if ((uint64_t *)v391 == &v392)
                  {
                    if (HIDWORD(v391))
                    {
                      v340 = 32 * HIDWORD(v391);
                      v341 = &v392;
                      do
                      {
                        v342 = *(_OWORD *)v341;
                        v343 = *((_OWORD *)v341 + 1);
                        v341 += 4;
                        *v333 = v342;
                        v333[1] = v343;
                        v333 += 2;
                        v340 -= 32;
                      }
                      while (v340);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v391 = &v392;
                    *(_QWORD *)v306 = v339;
                  }
                }
                *(_DWORD *)(v306 + 8) = DWORD2(v391);
                v334 = HIDWORD(v391);
                HIDWORD(v391) = 0;
                *(_DWORD *)(v306 + 12) = v334;
                v335 = v305 + (v304 << 7);
                v336 = *(_QWORD *)v394;
                *(_DWORD *)(v335 + 119) = *(_DWORD *)&v394[7];
                *(_QWORD *)(v335 + 112) = v336;
                v337 = v391;
                if (&v392 != (uint64_t *)v391 && (_QWORD)v391)
                {
                  *(_QWORD *)&v391 = 0;
                  DWORD2(v391) = 0;
                  v338 = v301;
                  WTF::fastFree(v337, v180, (uint64_t)&v392, v301, v181, v182, v183, v184);
                  v301 = v338;
                  v299 = &v392;
                }
              }
            }
          }
LABEL_501:
          ++v304;
          v303 = *(unsigned int *)(v302 + 20);
        }
        while (v304 < v303);
        v344 = *(unsigned int **)(v302 + 8);
        v345 = (unint64_t)&v344[32 * v303];
        if ((_DWORD)v303)
        {
          v346 = 0;
          v347 = 0;
          v348 = &v344[32 * v303];
          v349 = (unint64_t)v348;
          do
          {
            v350 = &v344[v346];
            if (*(_QWORD *)&v344[v346 + 28])
              v351 = 0;
            else
              v351 = LOWORD(v344[v346 + 30]) == 0;
            if (v351 && (*((_BYTE *)v350 + 122) & 3) == 0)
            {
              v375 = v349;
              v378 = v301;
              v373 = v347;
              if (v344[v346 + 3])
              {
                v8 = v384;
                v299 = &v392;
              }
              else
              {
                if (v349 == *(_QWORD *)(v302 + 8) + ((unint64_t)*(unsigned int *)(v302 + 20) << 7))
                {
                  v375 = (unint64_t)&v344[v346];
                }
                else if (v350 != v348)
                {
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v348, v350, v349, v301, v181, v182, v183, v184);
                  v375 += (char *)&v344[v346] - (char *)v348;
                }
                v352 = *(_QWORD *)&v344[v346];
                if (&v344[v346 + 4] != (unsigned int *)v352 && v352)
                {
                  v353 = &v344[v346];
                  *(_QWORD *)v353 = 0;
                  v353[2] = 0;
                  WTF::fastFree(v352, v350, (uint64_t)v299, v301, v181, v182, v183, v184);
                }
                v348 = &v344[v346 + 32];
                v347 = v373 + 1;
                v8 = v384;
                v299 = &v392;
                v301 = v378;
              }
              v349 = v375;
            }
            v346 += 32;
          }
          while ((unint64_t)&v344[v346] < v345);
          v344 = *(unsigned int **)(v302 + 8);
          LODWORD(v303) = *(_DWORD *)(v302 + 20);
          v345 = v349;
        }
        else
        {
          v347 = 0;
          v348 = &v344[32 * v303];
        }
        v297 = v381;
LABEL_538:
        v180 = &v344[32 * (unint64_t)v303];
        if (v348 != v180)
        {
          v354 = v345;
          v355 = v301;
          v356 = v347;
          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v348, v180, v354, v301, v181, v182, v183, v184);
          v347 = v356;
          LODWORD(v301) = v355;
          v299 = &v392;
          LODWORD(v303) = *(_DWORD *)(v302 + 20);
        }
        *(_DWORD *)(v302 + 20) = v303 - v347;
        v301 = (v301 + 1);
        v300 = *((unsigned int *)v297 + 27);
        if (v300 > v301)
        {
          while (!*(_QWORD *)(*((_QWORD *)v297 + 12) + 8 * v301))
          {
            if (v300 == ++v301)
            {
              v301 = *((unsigned int *)v297 + 27);
              break;
            }
          }
        }
      }
      while ((_DWORD)v386 != (_DWORD)v301);
    }
  }
  return v364 == 0;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::~ColoringAllocator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v9 = *(_QWORD *)(a1 + 368);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 360);
  if ((v10 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 320);
  if (v12)
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 328) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(_QWORD *)(a1 + 304);
  if (v13)
  {
    *(_QWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 296);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  char v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  char v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int **v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  _DWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  _QWORD **v74;
  _QWORD **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int **v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  _DWORD *v96;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101[2];
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;

  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_QWORD *)(v8 + 336) = a3;
  v15 = *(_QWORD *)(a2 + 56);
  if (v15)
  {
    v16 = 0;
    do
    {
      v16 |= v15 & -v15;
      v15 &= v15 - 1;
    }
    while (v15);
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      do
      {
        LOBYTE(v101[0]) = v17 | 0x80;
        if (v17 <= 0x1Fu)
        {
          v102 = v17 + 1;
          v18 = *(unsigned int *)(a1 + 276);
          if ((_DWORD)v18 == *(_DWORD *)(a1 + 272))
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * *(unsigned int *)(a1 + 276)) = *(_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 264, (void *)(v18 + 1), (unint64_t)&v102, v10, v11, v12, v13, v14);
          else
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v18) = v17 + 1;
          ++*(_DWORD *)(a1 + 276);
          v19 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
          {
            v24 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)v101);
            v19 = *(unsigned int *)(a1 + 12);
            v20 = *(_QWORD *)a1;
            v21 = *v24;
          }
          else
          {
            v20 = *(_QWORD *)a1;
            v21 = v101[0];
          }
          *(_BYTE *)(v20 + v19) = v21;
          ++*(_DWORD *)(a1 + 12);
        }
        if (v17 > 0x3E)
          break;
        v22 = __clz(__rbit64(v16 >> (v17 + 1)));
        v23 = v22 + v17 + 1;
        if (v23 >= 0x40)
          v17 = 64;
        else
          v17 += v22 + 1;
      }
      while (v23 <= 0x3F);
    }
  }
  WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::setMaxIndex(a1 + 24, (void *)(*(_DWORD *)(*(_QWORD *)(a1 + 256) + 176) + 33), v9, v10, v11, v12, v13, v14);
  v32 = (*(_DWORD *)(a1 + 16) + 1);
  v33 = *(unsigned int *)(a1 + 132);
  if (v33 < v32)
  {
    v34 = *(unsigned int *)(a1 + 128);
    v35 = *(_QWORD *)(a1 + 120);
    if (v34 < v32)
    {
      v36 = v34 + (v34 >> 2);
      if (v36 >= 0x10)
        v37 = v36 + 1;
      else
        v37 = 16;
      if (v37 <= v32)
        v38 = (*(_DWORD *)(a1 + 16) + 1);
      else
        v38 = v37;
      if (HIDWORD(v38))
      {
LABEL_114:
        __break(0xC471u);
        JUMPOUT(0x19804D52CLL);
      }
      v39 = (_BYTE *)WTF::fastMalloc((WTF *)v38);
      *(_DWORD *)(a1 + 128) = v38;
      *(_QWORD *)(a1 + 120) = v39;
      if ((_DWORD)v33)
      {
        v40 = (char *)v35;
        do
        {
          v41 = *v40++;
          *v39++ = v41;
          --v33;
        }
        while (v33);
        v39 = *(_BYTE **)(a1 + 120);
      }
      if (!v35)
      {
        v35 = (unint64_t)v39;
        if (!v39)
          goto LABEL_43;
LABEL_40:
        v42 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v42 != (_DWORD)v32)
        {
          v43 = (_BYTE *)(v35 + v42);
          v44 = v32 - v42;
          do
          {
            *v43++ |= 0x7Fu;
            --v44;
          }
          while (v44);
        }
        goto LABEL_43;
      }
      if (v39 == (_BYTE *)v35)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
      }
      WTF::fastFree(v35, v25, v26, v27, v28, v29, v30, v31);
      v35 = *(_QWORD *)(a1 + 120);
    }
    if (!v35)
      goto LABEL_43;
    goto LABEL_40;
  }
LABEL_43:
  *(_DWORD *)(a1 + 132) = v32;
  if (*(_DWORD *)(a1 + 16))
  {
    v45 = 1;
    do
    {
      v46 = v45 - 1;
      if (v45 <= 0)
        v46 = 31 - v45;
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v45++) = v46 & 0x7F;
    }
    while (v45 <= *(_DWORD *)(a1 + 16));
  }
  if (*(_DWORD *)(a1 + 96))
  {
    if (*(_DWORD *)(a1 + 100))
      *(_DWORD *)(a1 + 100) = 0;
    v47 = *(_QWORD *)(a1 + 88);
    if (v47)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v47, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  *(_DWORD *)(a1 + 296) = 0;
  if (*(_DWORD *)(a1 + 312))
  {
    v98 = (unint64_t *)(a1 + 304);
    if (*(_DWORD *)(a1 + 316))
      *(_DWORD *)(a1 + 316) = 0;
    v99 = *v98;
    if (*v98)
    {
      *(_QWORD *)(a1 + 304) = 0;
      *(_DWORD *)(a1 + 312) = 0;
      WTF::fastFree(v99, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  if (*(_DWORD *)(a1 + 328))
  {
    if (*(_DWORD *)(a1 + 332))
      *(_DWORD *)(a1 + 332) = 0;
    v100 = *(_QWORD *)(a1 + 320);
    if (v100)
    {
      *(_QWORD *)(a1 + 320) = 0;
      *(_DWORD *)(a1 + 328) = 0;
      WTF::fastFree(v100, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v102, *(_QWORD *)(a1 + 256));
  v55 = *(_QWORD *)(a1 + 256);
  v56 = *(unsigned int *)(v55 + 108);
  if ((_DWORD)v56)
  {
    v57 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v55 + 96) + 8 * v57))
    {
      if (v56 == ++v57)
        goto LABEL_102;
    }
    if ((_DWORD)v56 != (_DWORD)v57)
    {
      LODWORD(v58) = *(_DWORD *)(v55 + 108);
      do
      {
        if (v58 <= v57)
        {
          __break(0xC471u);
          JUMPOUT(0x19804D53CLL);
        }
        v59 = *(unsigned int **)(*(_QWORD *)(v55 + 96) + 8 * v57);
        v101[0] = (uint64_t)&v102;
        v101[1] = (uint64_t)v59;
        v107 = 0;
        v60 = (unsigned int **)(v108 + 32 * *v59);
        v61 = *((unsigned int *)v60 + 3);
        if ((_DWORD)v61)
        {
          v62 = *v60;
          v63 = v104;
          v64 = 4 * v61;
          do
          {
            v65 = *v62;
            v66 = *(unsigned int *)(v63 + 4 * v65);
            v67 = v107;
            if (v107 <= v66 || *(_DWORD *)(v105 + 4 * v66) != (_DWORD)v65)
            {
              v109 = *v62;
              if (v107 == v106)
              {
                v68 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v105, v107 + 1, (unint64_t)&v109);
                *(_DWORD *)(v105 + 4 * v107) = *v68;
                v63 = v104;
              }
              else
              {
                *(_DWORD *)(v105 + 4 * v107) = v65;
              }
              ++v107;
              *(_DWORD *)(v63 + 4 * v65) = v67;
            }
            ++v62;
            v64 -= 4;
          }
          while (v64);
        }
        v69 = v59[5];
        if (!(_DWORD)v69)
          goto LABEL_112;
        do
        {
          v70 = v69 - 1;
          v71 = v59[5];
          if (v71 <= (int)v69 - 1)
            goto LABEL_114;
          v72 = *((_QWORD *)v59 + 1);
          v73 = (_QWORD **)(v72 + ((unint64_t)(v69 - 1) << 7));
          v74 = (_QWORD **)(v72 + (v69 << 7));
          if (v69 >= v71)
            v75 = 0;
          else
            v75 = v74;
          v76 = v103;
          v77 = *(_QWORD *)(v103 + 16 * *v59);
          v78 = v77 + (v69 << 6);
          v79 = *(unsigned int *)(v78 + 44);
          if ((_DWORD)v79)
          {
            v80 = *(unsigned int **)(v78 + 32);
            v81 = v107;
            v82 = 4 * v79;
            v83 = v104;
            v84 = v105;
            do
            {
              v85 = *v80;
              v86 = *(unsigned int *)(v83 + 4 * v85);
              if (v81 > v86 && *(_DWORD *)(v84 + 4 * v86) == (_DWORD)v85)
              {
                v87 = *(unsigned int *)(v84 + 4 * v81 - 4);
                *(_DWORD *)(v84 + 4 * v86) = v87;
                *(_DWORD *)(v83 + 4 * v87) = v86;
                v81 = --v107;
              }
              ++v80;
              v82 -= 4;
            }
            while (v82);
            v77 = *(_QWORD *)(v76 + 16 * *v59);
          }
          v88 = (unsigned int **)(v77 + ((unint64_t)(v69 - 1) << 6));
          v89 = *((unsigned int *)v88 + 3);
          if ((_DWORD)v89)
          {
            v90 = *v88;
            v91 = v104;
            v92 = 4 * v89;
            do
            {
              v93 = *v90;
              v94 = *(unsigned int *)(v91 + 4 * v93);
              v95 = v107;
              if (v107 <= v94 || *(_DWORD *)(v105 + 4 * v94) != (_DWORD)v93)
              {
                v109 = *v90;
                if (v107 == v106)
                {
                  v96 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v105, v107 + 1, (unint64_t)&v109);
                  *(_DWORD *)(v105 + 4 * v107) = *v96;
                  v91 = v104;
                }
                else
                {
                  *(_DWORD *)(v105 + 4 * v107) = v93;
                }
                ++v107;
                *(_DWORD *)(v91 + 4 * v93) = v95;
              }
              ++v90;
              v92 -= 4;
            }
            while (v92);
          }
          v69 = v70;
        }
        while ((_DWORD)v70);
        if (!v59[5])
        {
LABEL_112:
          __break(0xC471u);
          JUMPOUT(0x19804D534);
        }
        v57 = (v57 + 1);
        v58 = *(unsigned int *)(v55 + 108);
        if (v58 > v57)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v55 + 96) + 8 * v57))
          {
            if (v58 == ++v57)
            {
              LODWORD(v57) = *(_DWORD *)(v55 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v56 != (_DWORD)v57);
    }
  }
LABEL_102:
  WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v102, v48, v49, v50, v51, v52, v53, v54);
  return a1;
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)0>(void)::{lambda((JSC::B3::Bank)0 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::BitVector *v62;
  uint64_t v63;
  _DWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD **v94;
  int v95;
  JSC::B3::Air::Kind *v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  _QWORD *v105;
  unsigned __int8 *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  char **v139;
  uint64_t v140;
  char **v141;
  __int128 v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  __int128 *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  int v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int *v169;
  unint64_t v170;
  unsigned int *v171;
  unint64_t v172;
  BOOL v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t i;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  int v200;
  char v201;
  int v202;
  int v203;
  char v204;
  int v205;
  unsigned int v206;
  int v207;
  char v208;
  int v209;
  int v210;
  char v211;
  int v212;
  unsigned int v213;
  unint64_t v214;
  _OWORD *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  __int128 v224;
  __int128 v225;
  unsigned int *v226;
  unint64_t v227;
  uint64_t v228;
  int v229;
  unsigned int *v230;
  unint64_t v231;
  unsigned int *v232;
  BOOL v233;
  unint64_t v234;
  unsigned int *v235;
  unint64_t v236;
  int v237;
  int v238;
  _BYTE *v239;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  WTF::BitVector *v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  char v261;
  __int16 v262;
  unsigned int v263;
  char v264;
  __int128 v265;
  uint64_t v266;
  _BYTE v267[88];
  _BYTE v268[11];
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD v272[12];
  _QWORD v273[2];
  unsigned int *v274;
  char **v275;
  uint64_t v276;
  char *v277;
  WTF::BitVector *v278;
  __int128 *v279;
  unsigned int *v280;
  _QWORD **v281;
  _QWORD v282[2];
  _QWORD v283[2];
  _QWORD v284[3];

  v8 = a2;
  v10 = *a1;
  v11 = *(unsigned int *)(a2 + 316);
  if ((_DWORD)v11)
  {
    LOBYTE(v270) = 0;
    v12 = *(_DWORD **)(a2 + 304);
    *(_QWORD *)&v265 = a2;
    *((_QWORD *)&v265 + 1) = &v270;
    v13 = &v12[v11];
    while (1)
    {
      if (*v12 != -1)
      if (++v12 == v13)
      {
        if (!(_BYTE)v270)
          break;
        v14 = *(unsigned int *)(v8 + 316);
        LOBYTE(v270) = 0;
        v12 = *(_DWORD **)(v8 + 304);
        *(_QWORD *)&v265 = v8;
        *((_QWORD *)&v265 + 1) = &v270;
        v13 = &v12[v14];
        if (!(_DWORD)v14)
          break;
      }
    }
  }
  v15 = *(unsigned int *)(v8 + 332);
  LOBYTE(v270) = 0;
  if ((_DWORD)v15)
  {
    v16 = *(_DWORD **)(v8 + 320);
    *(_QWORD *)&v265 = v8;
    *((_QWORD *)&v265 + 1) = &v270;
    v17 = &v16[v15];
    while (1)
    {
      if (*v16 != -1)
      if (++v16 == v17)
      {
        if (!(_BYTE)v270)
          break;
        v18 = *(unsigned int *)(v8 + 332);
        LOBYTE(v270) = 0;
        v16 = *(_DWORD **)(v8 + 320);
        *(_QWORD *)&v265 = v8;
        *((_QWORD *)&v265 + 1) = &v270;
        v17 = &v16[v18];
        if (!(_DWORD)v18)
          break;
      }
    }
  }
  v19 = (unint64_t *)(v8 + 192);
  if (*(_DWORD *)(v8 + 200))
  {
    if (*(_DWORD *)(v8 + 204))
      *(_DWORD *)(v8 + 204) = 0;
    v20 = *v19;
    if (*v19)
    {
      *(_QWORD *)(v8 + 192) = 0;
      *(_DWORD *)(v8 + 200) = 0;
      WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v22 = (uint64_t *)(v8 + 208);
  v21 = *(_QWORD *)(v8 + 208);
  if (v21 < 0)
    *v22 = 0x8000000000000000;
  else
    bzero((void *)(2 * v21 + 8), (unint64_t)(*(_QWORD *)(2 * v21) + 7) >> 3);
  v259 = v10;
  v23 = *(_DWORD *)(v8 + 12);
  v24 = *(_DWORD *)(v8 + 16) + 1;
  LODWORD(v265) = v24;
  if (*(_DWORD *)(v8 + 76) > v24)
  {
    v25 = (uint64_t *)(v8 + 168);
    do
    {
      a2 = v24;
      v26 = 2 * *v25 + 8;
      if (*v25 < 0)
        v26 = v8 + 168;
      v27 = *(_QWORD *)(v26 + 8 * ((unint64_t)v24 >> 6));
      v28 = 1 << v24;
      if (((1 << v24) & v27) == 0 && !*(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v24))
      {
        if (*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v24) >= v23)
        {
          v30 = *(uint64_t **)(v8 + 240);
          if (*v30 >= 0)
            v30 = (uint64_t *)(2 * *v30 + 8);
          if ((v30[a2 >> 6] & v28) == 0)
            WTF::BitVector::add((WTF::BitVector *)(v8 + 208), a2);
        }
        else
        {
          v29 = *(unsigned int *)(v8 + 204);
          if ((_DWORD)v29 == *(_DWORD *)(v8 + 200))
            *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v29 + 1, (unint64_t)&v265);
          else
            *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * v29) = v24;
          ++*(_DWORD *)(v8 + 204);
        }
      }
      v24 = v265 + 1;
      LODWORD(v265) = v24;
    }
    while (*(_DWORD *)(v8 + 76) > v24);
  }
  v31 = (uint64_t *)(v8 + 168);
  v32 = *(_DWORD *)(v8 + 204);
  do
  {
    while (1)
    {
      for (LOBYTE(v270) = 0; v32; v32 = *(_DWORD *)(v8 + 204))
      {
        v33 = *(unsigned int *)(*(_QWORD *)(v8 + 192) + 4 * v32 - 4);
        *(_DWORD *)(v8 + 204) = v32 - 1;
        LODWORD(v274) = v33;
        v34 = *(unsigned int *)(v8 + 188);
        if ((_DWORD)v34 == *(_DWORD *)(v8 + 184))
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 176) + 4 * *(unsigned int *)(v8 + 188)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 176, v34 + 1, (unint64_t)&v274);
          v33 = v274;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 176) + 4 * v34) = v33;
        }
        ++*(_DWORD *)(v8 + 188);
        v35 = *(_QWORD *)(v8 + 168);
        if (v35 >= 0)
          v36 = 2 * v35 + 8;
        else
          v36 = v8 + 168;
        *(_QWORD *)(v36 + ((v33 >> 3) & 0x1FFFFFF8)) |= 1 << v33;
        v37 = *(_QWORD *)(v8 + 48) + 16 * v33;
        v38 = *(unsigned int *)(v37 + 12);
        if ((_DWORD)v38)
        {
          v39 = *(_DWORD **)v37;
          v40 = 4 * v38;
          do
          {
            v41 = *v39;
            v42 = 2 * *v31 + 8;
            if (*v31 < 0)
              v42 = v8 + 168;
            if (((1 << v41) & *(_QWORD *)(v42 + 8 * (v41 >> 6))) == 0
              && !*(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v41))
            {
              LODWORD(v265) = *v39;
              v43 = *(_QWORD *)(v8 + 64);
              v44 = *(_DWORD *)(v43 + 4 * v41);
              *(_DWORD *)(v43 + 4 * v41) = v44 - 1;
              if (v44 == *(_DWORD *)(v8 + 12))
              {
                v45 = *(_QWORD *)(v8 + 208);
                if (v45 >= 0)
                  v46 = 2 * v45 + 8;
                else
                  v46 = v8 + 208;
                *(_QWORD *)(v46 + 8 * (v41 >> 6)) &= ~(1 << v41);
                v47 = *(unsigned int *)(v8 + 204);
                if ((_DWORD)v47 == *(_DWORD *)(v8 + 200))
                  *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v47 + 1, (unint64_t)&v265);
                else
                  *(_DWORD *)(*v19 + 4 * v47) = v41;
                ++*(_DWORD *)(v8 + 204);
              }
            }
            ++v39;
            v40 -= 4;
          }
          while (v40);
        }
      }
      v48 = *v22;
      if ((*v22 & 0x8000000000000000) == 0)
        break;
      if ((v48 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_75;
LABEL_67:
      LODWORD(v265) = v52;
      v53 = *(_QWORD *)(v8 + 208);
      if (v53 >= 0)
        v54 = 2 * v53 + 8;
      else
        v54 = v8 + 208;
      *(_QWORD *)(v54 + (((unint64_t)v52 >> 3) & 0x1FFFFFF8)) &= ~(1 << v52);
      v55 = *(unsigned int *)(v8 + 204);
      if ((_DWORD)v55 == *(_DWORD *)(v8 + 200))
        *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v55 + 1, (unint64_t)&v265);
      else
        *(_DWORD *)(*v19 + 4 * v55) = v52;
      v32 = *(_DWORD *)(v8 + 204) + 1;
      *(_DWORD *)(v8 + 204) = v32;
      LOBYTE(v270) = 1;
    }
    v49 = (_QWORD *)(2 * v48);
    v50 = ((unint64_t)(*v49 + 63) >> 6);
    while (v50 * 8)
    {
      if (v49[v50--])
        goto LABEL_67;
    }
LABEL_75:
    v32 = 0;
  }
  while ((_BYTE)v270);
  *(_DWORD *)(v8 + 296) = 0;
  if (*(_DWORD *)(v8 + 312))
  {
    if (*(_DWORD *)(v8 + 316))
      *(_DWORD *)(v8 + 316) = 0;
    v241 = *(_QWORD *)(v8 + 304);
    if (v241)
    {
      *(_QWORD *)(v8 + 304) = 0;
      *(_DWORD *)(v8 + 312) = 0;
      WTF::fastFree(v241, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(v8 + 328))
  {
    if (*(_DWORD *)(v8 + 332))
      *(_DWORD *)(v8 + 332) = 0;
    v242 = *(_QWORD *)(v8 + 320);
    if (v242)
    {
      *(_QWORD *)(v8 + 320) = 0;
      *(_DWORD *)(v8 + 328) = 0;
      WTF::fastFree(v242, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v61 = *(unsigned int *)(v8 + 148);
  v247 = v61;
  if ((_DWORD)v61)
  {
    v62 = (WTF::BitVector *)a1[2];
    v269 = 0;
    v63 = 4 * v61;
    v64 = *(_DWORD **)(v8 + 136);
    v257 = v62;
    do
    {
      v65 = *v64;
      LODWORD(v270) = *v64;
      v66 = *(_QWORD *)v62;
      if ((*(_QWORD *)v62 & 0x8000000000000000) != 0)
        v67 = 63;
      else
        v67 = *(_QWORD *)(2 * v66);
      if (v67 <= v65)
      {
        WTF::BitVector::resizeOutOfLine(v62, v65 + 1, 0);
        v66 = *(_QWORD *)v62;
      }
      if (v66 >= 0)
        v68 = 2 * v66 + 8;
      else
        v68 = (uint64_t)v62;
      *(_QWORD *)(v68 + ((v65 >> 3) & 0x1FFFFFF8)) |= 1 << v65;
      v69 = *v259;
      v70 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v259 + 1), v65);
      if (v70 == 3)
        v71 = 8;
      else
        v71 = 16;
      if (v70 >= 3)
        v72 = v71;
      else
        v72 = 4;
      v73 = v69;
      v62 = v257;
      v274 = JSC::B3::Air::Code::addStackSlot(v73, v72, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v265, &v269, (int *)&v270, &v274, v74, v75, v76, v77);
      ++v64;
      v63 -= 4;
    }
    while (v63);
    v85 = (uint64_t)v259;
    *(_QWORD *)&v265 = *v259;
    *((_QWORD *)&v265 + 1) = v267;
    v266 = 8;
    v248 = *(unsigned int *)(v265 + 108);
    v249 = v265;
    if ((_DWORD)v248)
    {
      v86 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v265 + 96) + 8 * v86))
      {
        if (v248 == ++v86)
          goto LABEL_356;
      }
      if ((_DWORD)v248 != (_DWORD)v86)
      {
        LODWORD(v87) = *(_DWORD *)(v265 + 108);
        v88 = v86;
        v89 = v265;
        do
        {
          if (v87 <= v88)
          {
            __break(0xC471u);
            JUMPOUT(0x19804ED04);
          }
          v250 = v88;
          v90 = *(_QWORD *)(*(_QWORD *)(v89 + 96) + 8 * v88);
          v264 = 0;
          v263 = 0;
          if (*(_DWORD *)(v90 + 20))
          {
            v91 = 0;
            v253 = v90;
            do
            {
              v92 = v91;
              v93 = *(_QWORD *)(v90 + 8);
              v94 = (_QWORD **)(v93 + ((unint64_t)v91 << 7));
              v262 = 0;
              v261 = 0;
              v96 = (JSC::B3::Air::Kind *)(v94 + 15);
              v95 = *((__int16 *)v94 + 60);
              if (v95 == 90)
              {
                v97 = *((_DWORD *)v94 + 3);
                if (!v97)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804ECB4);
                }
                v98 = (uint64_t)*v94;
                if (*((_BYTE *)*v94 + 8) == 1)
                {
                  v99 = *(unsigned int *)(v98 + 16);
                  if ((int)v99 < 1)
                  {
                    v99 = -(int)v99;
                    v100 = v259 + 3;
                    if (v99 >= *(unsigned int *)(v85 + 36))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804ECF4);
                    }
                  }
                  else
                  {
                    v100 = v259 + 1;
                    if (v99 >= *(_DWORD *)(v85 + 20))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804ECDCLL);
                    }
                  }
                  v101 = (unsigned __int8 *)(*v100 + 2 * v99);
                  v102 = *v101;
                  v103 = v101[1];
                  if (v103 >= v102)
                    v103 = v102;
                  if (v103 < 3)
                    goto LABEL_120;
                }
                if (v97 <= 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804ECCCLL);
                }
                if (*(_BYTE *)(v98 + 40) == 1)
                {
                  v104 = *(unsigned int *)(v98 + 48);
                  if ((int)v104 < 1)
                  {
                    v104 = -(int)v104;
                    v105 = v259 + 3;
                    if (v104 >= *(unsigned int *)(v85 + 36))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804ECFCLL);
                    }
                  }
                  else
                  {
                    v105 = v259 + 1;
                    if (v104 >= *(_DWORD *)(v85 + 20))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804ECE4);
                    }
                  }
                  v106 = (unsigned __int8 *)(*v105 + 2 * v104);
                  v107 = *v106;
                  v108 = v106[1];
                  if (v108 >= v107)
                    v108 = v107;
                  if (v108 <= 2)
LABEL_120:
                    HIBYTE(v262) = 1;
                }
              }
              v274 = (unsigned int *)&v269;
              v275 = (char **)v94;
              v276 = v85;
              v277 = (char *)&v262 + 1;
              v278 = (WTF::BitVector *)&v262;
              v279 = (__int128 *)&v261;
              if ((v95 - 446) > 5)
              {
                v109 = *((unsigned int *)v94 + 3);
                if ((_DWORD)v109)
                {
                  v110 = 0;
                  v111 = 0;
                  v112 = (char *)&JSC::B3::Air::g_formTable + 21 * v95 + ((unint64_t)((v109 - 1) * v109) >> 1);
                  v113 = 32 * v109;
                  do
                  {
                    if (v111 >= *((unsigned int *)v94 + 3))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804ECA4);
                    }
                    if ((*v112 >> 5) - 1 >= 5u)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19804EB44);
                    }
                    ++v111;
                    ++v112;
                    v110 += 32;
                  }
                  while (v113 != v110);
                }
              }
              else
              {
                v271 = (uint64_t)&v270;
                v272[0] = &v274;
                v283[1] = &v270;
                if (*(_WORD *)v96 == 448)
                {
                  v284[1] = &v270;
                  if (!*((_DWORD *)v94 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804ECBCLL);
                  }
                  if (!*((_DWORD *)v94 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804ECC4);
                  }
                  (*(void (**)(_QWORD, _QWORD **, _QWORD *))(*(_QWORD *)**v94 + 16))(**v94, v94, v284);
                }
                else
                {
                  switch(*(_WORD *)v96)
                  {
                    case 0x1BE:
                      break;
                    case 0x1BF:
                      JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v94, (uint64_t)v283);
                      break;
                    case 0x1C1:
                      JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v94, (uint64_t)v283);
                      break;
                    case 0x1C2:
                      v284[0] = v283;
                      JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v94, (uint64_t)v284);
                      break;
                    case 0x1C3:
                      JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v94, (uint64_t)v283);
                      break;
                    default:
                      WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v96, "\n");
                      __break(0xC471u);
                      JUMPOUT(0x19804EC7CLL);
                  }
                }
              }
              if ((_BYTE)v262 && HIBYTE(v262))
                *(_WORD *)v96 = 94;
              v85 = (uint64_t)v259;
              if (v261)
              {
                v114 = *(__int16 *)v96;
                if (v114 != 90 && v114 != 94)
                {
                  if ((v114 - 107) <= 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19804EBACLL);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x19804EC00);
                }
                v115 = *(_DWORD *)(*v259 + 176);
                *(_DWORD *)(*v259 + 176) = v115 + 1;
                v116 = (v115 + 33);
                LODWORD(v284[0]) = v115 + 33;
                v117 = *(_QWORD *)v257;
                if ((*(_QWORD *)v257 & 0x8000000000000000) != 0)
                  v118 = 63;
                else
                  v118 = *(_QWORD *)(2 * v117);
                v90 = v253;
                if (v118 <= v116)
                {
                  WTF::BitVector::resizeOutOfLine(v257, v116 + 1, 0);
                  v117 = *(_QWORD *)v257;
                }
                if (v117 >= 0)
                  v129 = 2 * v117 + 8;
                else
                  v129 = (uint64_t)v257;
                *(_QWORD *)(v129 + ((v116 >> 3) & 0x1FFFFFF8)) |= 1 << v116;
                v130 = *((unsigned int *)v94 + 3);
                if ((_DWORD)v130 == *((_DWORD *)v94 + 2))
                {
                  WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v94, (unsigned int *)v284, v79, v80, v81, v82, v83, v84);
                  v133 = *((_DWORD *)v94 + 3);
                }
                else
                {
                  v131 = (uint64_t)&(*v94)[4 * v130];
                  v132 = v284[0];
                  *(_QWORD *)v131 = 0;
                  *(_WORD *)(v131 + 8) = 513;
                  *(_DWORD *)(v131 + 12) = 1;
                  *(_QWORD *)(v131 + 16) = v132;
                  *(_BYTE *)(v131 + 24) = 0;
                  v133 = *((_DWORD *)v94 + 3) + 1;
                  *((_DWORD *)v94 + 3) = v133;
                }
                if (v133 != 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19804EB24);
                }
                v134 = *(_QWORD *)(v93 + (v92 << 7) + 112);
                v270 = v272;
                v273[0] = v134;
                LODWORD(v273[1]) = 0;
                v274 = (unsigned int *)v263;
                v275 = &v277;
                v271 = 3;
                v276 = 3;
                v282[0] = v134;
                *(_DWORD *)((char *)v282 + 7) = *(_DWORD *)((char *)v273 + 7);
                v135 = HIDWORD(v266);
                if (HIDWORD(v266) == (_DWORD)v266)
                {
                  v151 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v265 + 8, HIDWORD(v266) + 1, (unint64_t)&v274, v80, v81, v82, v83, v84);
                  v152 = HIDWORD(v266);
                  v153 = *((_QWORD *)&v265 + 1);
                  v154 = *((_QWORD *)&v265 + 1) + 136 * HIDWORD(v266);
                  *(_QWORD *)v154 = *(_QWORD *)v151;
                  v155 = (_OWORD *)(v154 + 24);
                  *(_QWORD *)(v154 + 8) = v154 + 24;
                  *(_QWORD *)(v154 + 16) = 3;
                  v156 = *(__int128 **)(v151 + 8);
                  if (v156 == (__int128 *)(v151 + 24))
                  {
                    v157 = *(unsigned int *)(v151 + 20);
                    if ((_DWORD)v157)
                    {
                      v158 = 32 * v157;
                      do
                      {
                        v159 = *v156;
                        v160 = v156[1];
                        v156 += 2;
                        *v155 = v159;
                        v155[1] = v160;
                        v155 += 2;
                        v158 -= 32;
                      }
                      while (v158);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v151 + 8) = v151 + 24;
                    *(_QWORD *)(v154 + 8) = v156;
                    v162 = *(_DWORD *)(v151 + 16);
                    *(_DWORD *)(v151 + 16) = 3;
                    *(_DWORD *)(v154 + 16) = v162;
                  }
                  v146 = (_QWORD *)(v151 + 120);
                  v161 = *(_DWORD *)(v151 + 20);
                  *(_DWORD *)(v151 + 20) = 0;
                  *(_DWORD *)(v154 + 20) = v161;
                  v145 = v153 + 136 * v152 + 120;
                }
                else
                {
                  v136 = *((_QWORD *)&v265 + 1);
                  v137 = *((_QWORD *)&v265 + 1) + 136 * HIDWORD(v266);
                  *(_QWORD *)v137 = v263;
                  v138 = (_OWORD *)(v137 + 24);
                  *(_QWORD *)(v137 + 8) = v137 + 24;
                  *(_QWORD *)(v137 + 16) = 3;
                  v139 = v275;
                  if (v275 == &v277)
                  {
                    if (HIDWORD(v276))
                    {
                      v140 = 32 * HIDWORD(v276);
                      v141 = &v277;
                      do
                      {
                        v142 = *(_OWORD *)v141;
                        v143 = *((_OWORD *)v141 + 1);
                        v141 += 4;
                        *v138 = v142;
                        v138[1] = v143;
                        v138 += 2;
                        v140 -= 32;
                      }
                      while (v140);
                    }
                  }
                  else
                  {
                    v275 = &v277;
                    *(_QWORD *)(v137 + 8) = v139;
                    v150 = v276;
                    LODWORD(v276) = 3;
                    *(_DWORD *)(v137 + 16) = v150;
                  }
                  v144 = HIDWORD(v276);
                  HIDWORD(v276) = 0;
                  *(_DWORD *)(v137 + 20) = v144;
                  v145 = v136 + 136 * v135 + 120;
                  v146 = v282;
                }
                v147 = *v146;
                *(_DWORD *)(v145 + 7) = *(_DWORD *)((char *)v146 + 7);
                *(_QWORD *)v145 = v147;
                ++HIDWORD(v266);
                v148 = (unint64_t)v275;
                if (&v277 != v275 && v275)
                {
                  v275 = 0;
                  LODWORD(v276) = 0;
                  WTF::fastFree(v148, v78, v79, v80, v81, v82, v83, v84);
                }
                v149 = (unint64_t)v270;
                if (v272 != v270 && v270)
                {
                  v270 = 0;
                  LODWORD(v271) = 0;
                  WTF::fastFree(v149, v78, v79, v80, v81, v82, v83, v84);
                }
              }
              else
              {
                v274 = (unsigned int *)&v269;
                v275 = (char **)v8;
                v276 = (uint64_t)&v264;
                v277 = (char *)v259;
                v278 = v257;
                v279 = &v265;
                v280 = &v263;
                v281 = v94;
                v284[0] = &v274;
                if ((*(__int16 *)v96 - 446) > 5)
                {
                  v119 = *((unsigned int *)v94 + 3);
                  if ((_DWORD)v119)
                  {
                    v120 = 0;
                    v121 = (char *)&JSC::B3::Air::g_formTable
                         + 21 * *(__int16 *)v96
                         + ((unint64_t)((v119 - 1) * v119) >> 1);
                    v122 = 16;
                    do
                    {
                      if (v120 >= *((unsigned int *)v94 + 3))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804ECACLL);
                      }
                      v123 = v121[v120];
                      if ((v123 >> 5) - 1 >= 5)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19804EC9CLL);
                      }
                      v124 = (uint64_t)*v94;
                      switch(LOBYTE((*v94)[(unint64_t)v122 / 8 - 1]))
                      {
                        case 1:
                          v126 = v123 & 0xF;
                          v127 = (v123 >> 4) & 1;
                          v125 = (unsigned int *)(v124 + v122);
                          goto LABEL_152;
                        case 6:
                        case 7:
                        case 8:
                          v125 = (unsigned int *)(v124 + v122);
                          goto LABEL_150;
                        case 0xB:
                          v128 = v124 + v122;
                          v125 = (unsigned int *)(v128 + 4);
LABEL_150:
                          v126 = 0;
                          goto LABEL_151;
                        case 0xC:
                        case 0xD:
                          v125 = (unsigned int *)(v124 + v122);
                          v126 = 6;
LABEL_151:
                          v127 = 0;
LABEL_152:
                          break;
                        default:
                          break;
                      }
                      ++v120;
                      v122 += 32;
                    }
                    while (v119 != v120);
                  }
                }
                else
                {
                  v271 = (uint64_t)&v270;
                  v272[0] = v284;
                }
                v90 = v253;
              }
              v91 = v263 + 1;
              v263 = v91;
            }
            while (v91 < *(_DWORD *)(v90 + 20));
          }
          JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v265, (JSC::B3::Air::BasicBlock *)v90, v79, v80, v81, v82, v83, v84);
          v163 = v250;
          if (v264)
          {
            v164 = *(_QWORD *)(v90 + 8);
            v165 = *(unsigned int *)(v90 + 20);
            v166 = v164 + (v165 << 7);
            if ((_DWORD)v165)
            {
              v167 = 0;
              v168 = 0;
              v169 = (unsigned int *)(v164 + (v165 << 7));
              v170 = (unint64_t)v169;
              do
              {
                v171 = (unsigned int *)(v164 + v167);
                if ((*(__int16 *)(v164 + v167 + 120) | 4) == 0x5E && v171[3] == 2)
                {
                  v172 = *(_QWORD *)v171;
                  if (*(_BYTE *)(*(_QWORD *)v171 + 8) == 1)
                  {
                    v173 = *(_WORD *)(v164 + v167 + 120) != 94 && *(_BYTE *)(v172 + 40) == 1;
                    if (v173 && *(_DWORD *)(v172 + 16) == *(_DWORD *)(v172 + 48))
                    {
                      v254 = v168;
                      if (v170 == *(_QWORD *)(v90 + 8) + ((unint64_t)*(unsigned int *)(v90 + 20) << 7))
                      {
                        v170 = v164 + v167;
                      }
                      else if (v171 != v169)
                      {
                        v174 = v170;
                        WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v169, v171, v170, v80, v81, v82, v83, v84);
                        v163 = v250;
                        v170 = v174 + v164 + v167 - (_QWORD)v169;
                        v172 = *(_QWORD *)(v164 + v167);
                      }
                      if (v164 + v167 + 16 != v172 && v172)
                      {
                        v175 = v164 + v167;
                        *(_QWORD *)v175 = 0;
                        *(_DWORD *)(v175 + 8) = 0;
                        v176 = v170;
                        WTF::fastFree(v172, v171, v79, v80, v81, v82, v83, v84);
                        v170 = v176;
                        v163 = v250;
                      }
                      v169 = (unsigned int *)(v164 + v167 + 128);
                      v168 = v254 + 1;
                    }
                  }
                }
                v167 += 128;
              }
              while (v164 + v167 < v166);
              v164 = *(_QWORD *)(v90 + 8);
              LODWORD(v165) = *(_DWORD *)(v90 + 20);
              v166 = v170;
            }
            else
            {
              v168 = 0;
              v169 = (unsigned int *)(v164 + (v165 << 7));
            }
            v78 = (unsigned int *)(v164 + ((unint64_t)v165 << 7));
            if (v169 != v78)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v169, v78, v166, v80, v81, v82, v83, v84);
              v163 = v250;
              LODWORD(v165) = *(_DWORD *)(v90 + 20);
            }
            *(_DWORD *)(v90 + 20) = v165 - v168;
          }
          v177 = v163 + 1;
          v89 = v249;
          v87 = *(unsigned int *)(v249 + 108);
          if (v87 <= v177)
          {
            LODWORD(v178) = v177;
          }
          else
          {
            while (1)
            {
              v178 = v177;
              if (*(_QWORD *)(*(_QWORD *)(v249 + 96) + 8 * v177))
                break;
              ++v177;
              if (v87 == v178 + 1)
              {
                LODWORD(v178) = *(_DWORD *)(v249 + 108);
                break;
              }
            }
            v89 = v249;
          }
          v88 = v178;
        }
        while ((_DWORD)v248 != (_DWORD)v178);
        v239 = (_BYTE *)*((_QWORD *)&v265 + 1);
        if (HIDWORD(v266))
        {
          v243 = 136 * HIDWORD(v266);
          v244 = *((_QWORD *)&v265 + 1) + 24;
          do
          {
            v245 = *(_QWORD *)(v244 - 16);
            if (v244 != v245 && v245 != 0)
            {
              *(_QWORD *)(v244 - 16) = 0;
              *(_DWORD *)(v244 - 8) = 0;
              WTF::fastFree(v245, v78, v79, v80, v81, v82, v83, v84);
            }
            v244 += 136;
            v243 -= 136;
          }
          while (v243);
          v239 = (_BYTE *)*((_QWORD *)&v265 + 1);
        }
        if (v267 != v239 && v239)
        {
          *((_QWORD *)&v265 + 1) = 0;
          LODWORD(v266) = 0;
          WTF::fastFree((unint64_t)v239, v78, v79, v80, v81, v82, v83, v84);
        }
      }
    }
LABEL_356:
    if (v269)
      WTF::fastFree(v269 - 16, v78, v79, v80, v81, v82, v83, v84);
    return v247 == 0;
  }
  v179 = *v259;
  v260 = *(unsigned int *)(*v259 + 108);
  if ((_DWORD)v260)
  {
    v180 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v179 + 96) + 8 * v180))
    {
      if (v260 == ++v180)
        return v247 == 0;
    }
    if ((_DWORD)v260 != (_DWORD)v180)
    {
      v181 = &v266;
      LODWORD(v182) = *(_DWORD *)(*v259 + 108);
      v183 = v180;
      v258 = *v259;
      do
      {
        if (v182 <= v183)
        {
          __break(0xC471u);
          JUMPOUT(0x19804ED1CLL);
        }
        v184 = *(_QWORD *)(*(_QWORD *)(v179 + 96) + 8 * v183);
        LODWORD(v185) = *(_DWORD *)(v184 + 20);
        if (!(_DWORD)v185)
        {
          v229 = 0;
          v226 = *(unsigned int **)(v184 + 8);
          v227 = (unint64_t)v226;
          v230 = v226;
          goto LABEL_344;
        }
        for (i = 0; i < v185; ++i)
        {
          v187 = *(_QWORD *)(v184 + 8);
          v188 = v187 + (i << 7);
          if ((*(__int16 *)(v188 + 120) | 4) != 0x5E)
          {
            v190 = *(_QWORD *)v188;
            v189 = *(unsigned int *)(v188 + 12);
LABEL_251:
            if (!v189)
              goto LABEL_307;
            LODWORD(v191) = 0;
            v193 = v190 + 32 * v189;
            goto LABEL_253;
          }
          v189 = *(unsigned int *)(v188 + 12);
          v190 = *(_QWORD *)v188;
          if ((_DWORD)v189 != 2)
            goto LABEL_251;
          if (*(_BYTE *)(v190 + 8) != 1 || *(_BYTE *)(v190 + 40) != 1)
            goto LABEL_248;
          if (*(_WORD *)(v188 + 120) != 94)
            goto LABEL_309;
          v191 = *(_QWORD *)(v8 + 336);
          if (v191)
          {
            v192 = *(unsigned int *)(v190 + 16);
            if ((int)v192 < 1)
            {
              v192 = -(int)v192;
              if (v192 >= *(unsigned int *)(v191 + 28))
              {
                __break(0xC471u);
                JUMPOUT(0x19804ED14);
              }
              v191 += 16;
            }
            else if (v192 >= *(_DWORD *)(v191 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19804ED0CLL);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v191 + 2 * v192 + 1) <= 2u)
            {
LABEL_309:
              LODWORD(v191) = 1;
              goto LABEL_249;
            }
LABEL_248:
            LODWORD(v191) = 0;
          }
LABEL_249:
          v193 = v190 + 64;
LABEL_253:
          v194 = *(_QWORD *)(v8 + 152);
          v195 = *(_QWORD *)(v8 + 120);
          v196 = v190;
          do
          {
            v197 = *(char *)(v196 + 8);
            if (v197 > 0xD)
              goto LABEL_275;
            if (((1 << v197) & 0x31C2) != 0)
            {
              v198 = (unsigned int *)(v196 + 16);
            }
            else
            {
              if (v197 != 11)
                goto LABEL_275;
              v206 = *(_DWORD *)(v196 + 16);
              if ((v206 & 0x80000000) == 0 && v206 - 33 <= 0xFFFFFFDF)
              {
                do
                {
                  v207 = v206;
                  v206 = *(_DWORD *)(v194 + 4 * v206);
                }
                while (v206);
                if (v207 > 0xFFFFFFDF || (v207 - 1) <= 0x1F)
                {
                  if (v207 <= 0)
                    v211 = 31 - v207;
                  else
                    v211 = v207 + 127;
                  v212 = v211 & 0x7F;
                  if ((v211 & 0x60) != 0)
                    v210 = (char)(31 - (v211 & 0x7F));
                  else
                    v210 = v212 + 1;
                  if (v212 == 127)
                    v210 = 0;
                }
                else
                {
                  LODWORD(v265) = v207;
                  v208 = *(_BYTE *)(v195 + v207);
                  v209 = v208 & 0x7F;
                  if (v209 == 127)
                  {
                    WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v265);
                    WTF::dataLog<char [7]>();
                    WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                    __break(0xC471u);
                    JUMPOUT(0x19804EBE0);
                  }
                  if ((v208 & 0x60) != 0)
                    v210 = (char)(31 - v209);
                  else
                    v210 = v209 + 1;
                }
                *(_DWORD *)(v196 + 16) = v210;
              }
              v198 = (unsigned int *)(v196 + 20);
            }
            v199 = *v198;
            if ((*v198 & 0x80000000) == 0 && v199 - 33 <= 0xFFFFFFDF)
            {
              do
              {
                v200 = v199;
                v199 = *(_DWORD *)(v194 + 4 * v199);
              }
              while (v199);
              if (v200 > 0xFFFFFFDF || (v200 - 1) <= 0x1F)
              {
                if (v200 <= 0)
                  v204 = 31 - v200;
                else
                  v204 = v200 + 127;
                v205 = v204 & 0x7F;
                if ((v204 & 0x60) != 0)
                  v203 = (char)(31 - (v204 & 0x7F));
                else
                  v203 = v205 + 1;
                if (v205 == 127)
                  v203 = 0;
              }
              else
              {
                LODWORD(v265) = v200;
                v201 = *(_BYTE *)(v195 + v200);
                v202 = v201 & 0x7F;
                if (v202 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v265);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                  __break(0xC471u);
                  JUMPOUT(0x19804EB80);
                }
                if ((v201 & 0x60) != 0)
                  v203 = (char)(31 - v202);
                else
                  v203 = v202 + 1;
              }
              *v198 = v203;
            }
LABEL_275:
            v196 += 32;
          }
          while (v196 != v193);
          if ((_DWORD)v191)
          {
            v213 = *(_DWORD *)(v188 + 12);
            if (!v213)
            {
              __break(0xC471u);
              JUMPOUT(0x19804ECD4);
            }
            if (*(_BYTE *)(v190 + 8) == 1)
            {
              if (v213 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19804ECECLL);
              }
              if (*(_BYTE *)(v190 + 40) == 1 && *(_DWORD *)(v190 + 16) == *(_DWORD *)(v190 + 48))
              {
                *(_QWORD *)&v265 = &v266;
                *((_QWORD *)&v265 + 1) = 3;
                *(_QWORD *)v268 = 0;
                *(_WORD *)&v268[8] = 0;
                v268[10] &= 0xFCu;
                v215 = (_OWORD *)(v188 + 16);
                v214 = *(_QWORD *)v188;
                if (*(_QWORD *)v188 != v188 + 16)
                {
                  if (v214)
                  {
                    *(_QWORD *)v188 = 0;
                    *(_DWORD *)(v188 + 8) = 0;
                    v255 = v183;
                    WTF::fastFree(v214, v56, (uint64_t)&v266, v183, v57, v58, v59, v60);
                    v183 = v255;
                    v181 = &v266;
                  }
                  *(_QWORD *)v188 = v215;
                  v221 = v265;
                  if ((uint64_t *)v265 == &v266)
                  {
                    if (HIDWORD(v265))
                    {
                      v222 = 32 * HIDWORD(v265);
                      v223 = &v266;
                      do
                      {
                        v224 = *(_OWORD *)v223;
                        v225 = *((_OWORD *)v223 + 1);
                        v223 += 4;
                        *v215 = v224;
                        v215[1] = v225;
                        v215 += 2;
                        v222 -= 32;
                      }
                      while (v222);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v265 = &v266;
                    *(_QWORD *)v188 = v221;
                  }
                }
                *(_DWORD *)(v188 + 8) = DWORD2(v265);
                v216 = HIDWORD(v265);
                HIDWORD(v265) = 0;
                *(_DWORD *)(v188 + 12) = v216;
                v217 = v187 + (i << 7);
                v218 = *(_QWORD *)v268;
                *(_DWORD *)(v217 + 119) = *(_DWORD *)&v268[7];
                *(_QWORD *)(v217 + 112) = v218;
                v219 = v265;
                if (&v266 != (uint64_t *)v265 && (_QWORD)v265)
                {
                  *(_QWORD *)&v265 = 0;
                  DWORD2(v265) = 0;
                  v220 = v183;
                  WTF::fastFree(v219, v56, (uint64_t)&v266, v183, v57, v58, v59, v60);
                  v183 = v220;
                  v181 = &v266;
                }
              }
            }
          }
LABEL_307:
          v185 = *(unsigned int *)(v184 + 20);
        }
        v226 = *(unsigned int **)(v184 + 8);
        v227 = (unint64_t)&v226[32 * v185];
        if ((_DWORD)v185)
        {
          v228 = 0;
          v229 = 0;
          v230 = &v226[32 * v185];
          v231 = (unint64_t)v230;
          do
          {
            v232 = &v226[v228];
            if (*(_QWORD *)&v226[v228 + 28])
              v233 = 0;
            else
              v233 = LOWORD(v226[v228 + 30]) == 0;
            if (v233 && (*((_BYTE *)v232 + 122) & 3) == 0)
            {
              v252 = v231;
              v256 = v183;
              v251 = v229;
              if (v226[v228 + 3])
              {
                v181 = &v266;
              }
              else
              {
                if (v231 == *(_QWORD *)(v184 + 8) + ((unint64_t)*(unsigned int *)(v184 + 20) << 7))
                {
                  v252 = (unint64_t)&v226[v228];
                }
                else if (v232 != v230)
                {
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v230, v232, v231, v183, v57, v58, v59, v60);
                  v252 += (char *)&v226[v228] - (char *)v230;
                }
                v234 = *(_QWORD *)&v226[v228];
                if (&v226[v228 + 4] != (unsigned int *)v234 && v234)
                {
                  v235 = &v226[v228];
                  *(_QWORD *)v235 = 0;
                  v235[2] = 0;
                  WTF::fastFree(v234, v232, (uint64_t)v181, v183, v57, v58, v59, v60);
                }
                v230 = &v226[v228 + 32];
                v229 = v251 + 1;
                v181 = &v266;
                v183 = v256;
              }
              v231 = v252;
            }
            v228 += 32;
          }
          while ((unint64_t)&v226[v228] < v227);
          v226 = *(unsigned int **)(v184 + 8);
          LODWORD(v185) = *(_DWORD *)(v184 + 20);
          v227 = v231;
        }
        else
        {
          v229 = 0;
          v230 = &v226[32 * v185];
        }
        v179 = v258;
LABEL_344:
        v56 = &v226[32 * (unint64_t)v185];
        if (v230 != v56)
        {
          v236 = v227;
          v237 = v183;
          v238 = v229;
          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v230, v56, v236, v183, v57, v58, v59, v60);
          v229 = v238;
          LODWORD(v183) = v237;
          v181 = &v266;
          LODWORD(v185) = *(_DWORD *)(v184 + 20);
        }
        *(_DWORD *)(v184 + 20) = v185 - v229;
        v183 = (v183 + 1);
        v182 = *(unsigned int *)(v179 + 108);
        if (v182 > v183)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v179 + 96) + 8 * v183))
          {
            if (v182 == ++v183)
            {
              v183 = *(unsigned int *)(v179 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v260 != (_DWORD)v183);
    }
  }
  return v247 == 0;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::~ColoringAllocator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(a1 + 320);
  if (v9)
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 328) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)(a1 + 304);
  if (v10)
  {
    *(_QWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),WTF::BitVector JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::computeUnspillableTmps<(JSC::B3::Bank)0>(void)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  int v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  __int32 *v14;
  int32x2_t *v15;
  __int32 v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(unsigned __int8 *)(a2 + 8);
  if (v6 == 1)
  {
    result = *(_QWORD *)v5;
    if (!*(_DWORD *)(*(_QWORD *)v5 + 12))
    {
      __break(0xC471u);
      return result;
    }
    result = JSC::B3::Air::Inst::admitsStack((JSC::B3::Air::Inst *)result, (unint64_t)(a2 - *(_QWORD *)result) >> 5);
    if ((result & 1) != 0)
    {
      if (!a4)
      {
        v14 = *(__int32 **)(v5 + 16);
        v15 = (int32x2_t *)(**(_QWORD **)(v5 + 8) + 16 * *(unsigned int *)(a2 + 16));
        v15[1] = vadd_s32(v15[1], (int32x2_t)0x100000001);
        v16 = *v14;
        if (*v14 < v15->i32[0])
        {
          v15->i32[0] = v16;
          v15->i32[1] = *v14;
        }
        else
        {
          v15->i32[1] = v16;
        }
      }
      return result;
    }
    LOBYTE(v6) = *(_BYTE *)(a2 + 8);
  }
  v8 = (char)v6;
  if ((char)v6 > 0xD)
    return result;
  v10 = *(_QWORD **)(v5 + 8);
  v9 = *(int **)(v5 + 16);
  if (((1 << v8) & 0x31C2) != 0)
  {
    v11 = *(unsigned int *)(a2 + 16);
  }
  else
  {
    if (v8 != 11)
      return result;
    v17 = *(unsigned int *)(a2 + 16);
    if ((int)v17 >= 1)
    {
      v18 = (_DWORD *)(*v10 + 16 * v17);
      ++v18[2];
      v19 = *v9;
      if (*v9 < *v18)
      {
        *v18 = v19;
        v19 = *v9;
      }
      v18[1] = v19;
    }
    v11 = *(unsigned int *)(a2 + 20);
  }
  if ((int)v11 >= 1)
  {
    v12 = (_DWORD *)(*v10 + 16 * v11);
    ++v12[2];
    v13 = *v9;
    if (*v9 < *v12)
    {
      *v12 = v13;
      v13 = *v9;
    }
    v12[1] = v13;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  char v29;

  v13 = *(_QWORD *)(a2 + 56);
  if (v13)
  {
    v14 = 0;
    do
    {
      v14 |= v13 & -v13;
      v13 &= v13 - 1;
    }
    while (v13);
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      do
      {
        v29 = v15 | 0x80;
        if (v15 <= 0x1Fu)
        {
          v28 = v15 + 1;
          v16 = *(unsigned int *)(a1 + 268);
          if ((_DWORD)v16 == *(_DWORD *)(a1 + 264))
          {
            WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(a1 + 256, (unint64_t)&v28, v7, v8, v9, v10, v11, v12);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v16) = v15 + 1;
            ++*(_DWORD *)(a1 + 268);
          }
          v17 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
          {
            WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Reg&>(a1, (unint64_t)&v29);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a1 + v17) = v29;
            ++*(_DWORD *)(a1 + 12);
          }
        }
        if (v15 > 0x3E)
          break;
        v18 = __clz(__rbit64(v14 >> (v15 + 1)));
        v19 = v18 + v15 + 1;
        if (v19 >= 0x40)
          v15 = 64;
        else
          v15 += v18 + 1;
      }
      while (v19 <= 0x3F);
    }
  }
  WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>::setMaxIndex((WTF::BitVector *)(a1 + 24), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 176) + 33);
  return a1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::IRC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  *(_OWORD *)(v8 + 332) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(int64x2_t *)(v8 + 352) = vdupq_n_s64(0x8000000000000000);
  if (a4 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 360), a4, 0);
  return a1;
}

void WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>::setMaxIndex(WTF::BitVector *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;

  *((_WORD *)a1 + 6) = a2;
  v2 = (a2 * a2);
  if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
    v3 = 63;
  else
    v3 = *(_QWORD *)(2 * *(_QWORD *)a1);
  if (v3 < v2)
    WTF::BitVector::resizeOutOfLine(a1, v2, 0);
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::initializePrecoloredTmp(uint64_t a1)
{
  unint64_t v2;

  WTF::Vector<JSC::Reg,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(a1 + 112, (WTF *)(*(unsigned __int16 *)(a1 + 16) + 1));
  if (*(_WORD *)(a1 + 16))
  {
    v2 = 1;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 112) + v2) = (v2 - 1) & 0x7F;
    while (v2++ < *(unsigned __int16 *)(a1 + 16));
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD **v41;
  _QWORD **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int **v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v66[2];
  _BYTE v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;

  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)v67, *(_QWORD *)(a1 + 248));
  v23 = *(_QWORD *)(a1 + 248);
  v24 = *(unsigned int *)(v23 + 108);
  if ((_DWORD)v24)
  {
    v25 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v23 + 96) + 8 * v25))
    {
      if (v24 == ++v25)
        return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v67, v16, v17, v18, v19, v20, v21, v22);
    }
    if ((_DWORD)v24 != (_DWORD)v25)
    {
      LODWORD(v26) = *(_DWORD *)(v23 + 108);
      do
      {
        if (v26 <= v25)
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x19804F4A0);
        }
        v27 = *(unsigned int **)(*(_QWORD *)(v23 + 96) + 8 * v25);
        v66[0] = (uint64_t)v67;
        v66[1] = (uint64_t)v27;
        v72 = 0;
        v28 = (unsigned int **)(v73 + 32 * *v27);
        v29 = *((unsigned int *)v28 + 3);
        if ((_DWORD)v29)
        {
          v30 = *v28;
          v31 = v69;
          v32 = 4 * v29;
          do
          {
            v33 = *v30;
            v34 = *(unsigned int *)(v31 + 4 * v33);
            v35 = v72;
            if (v72 <= v34 || *(_DWORD *)(v70 + 4 * v34) != (_DWORD)v33)
            {
              v74 = *v30;
              if (v72 == v71)
              {
                v63 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v70, v72 + 1, (unint64_t)&v74);
                *(_DWORD *)(v70 + 4 * v72) = *v63;
                v31 = v69;
              }
              else
              {
                *(_DWORD *)(v70 + 4 * v72) = v33;
              }
              ++v72;
              *(_DWORD *)(v31 + 4 * v33) = v35;
            }
            ++v30;
            v32 -= 4;
          }
          while (v32);
        }
        v36 = v27[5];
        if (!(_DWORD)v36)
          goto LABEL_49;
        do
        {
          v37 = v36 - 1;
          v38 = v27[5];
          if (v38 <= (int)v36 - 1)
            goto LABEL_50;
          v39 = *((_QWORD *)v27 + 1);
          v40 = (_QWORD **)(v39 + ((unint64_t)(v36 - 1) << 7));
          v41 = (_QWORD **)(v39 + (v36 << 7));
          if (v36 >= v38)
            v42 = 0;
          else
            v42 = v41;
          v43 = v68;
          v44 = *(_QWORD *)(v68 + 16 * *v27);
          v45 = v44 + (v36 << 6);
          v46 = *(unsigned int *)(v45 + 44);
          if ((_DWORD)v46)
          {
            v55 = *(unsigned int **)(v45 + 32);
            v56 = v72;
            v57 = 4 * v46;
            v58 = v69;
            v59 = v70;
            do
            {
              v60 = *v55;
              v61 = *(unsigned int *)(v58 + 4 * v60);
              if (v56 > v61 && *(_DWORD *)(v59 + 4 * v61) == (_DWORD)v60)
              {
                v62 = *(unsigned int *)(v59 + 4 * v56 - 4);
                *(_DWORD *)(v59 + 4 * v61) = v62;
                *(_DWORD *)(v58 + 4 * v62) = v61;
                v56 = --v72;
              }
              ++v55;
              v57 -= 4;
            }
            while (v57);
            v44 = *(_QWORD *)(v43 + 16 * *v27);
          }
          v47 = (unsigned int **)(v44 + ((unint64_t)(v36 - 1) << 6));
          v48 = *((unsigned int *)v47 + 3);
          if ((_DWORD)v48)
          {
            v49 = *v47;
            v50 = v69;
            v51 = 4 * v48;
            do
            {
              v52 = *v49;
              v53 = *(unsigned int *)(v50 + 4 * v52);
              v54 = v72;
              if (v72 <= v53 || *(_DWORD *)(v70 + 4 * v53) != (_DWORD)v52)
              {
                v74 = *v49;
                if (v72 == v71)
                {
                  v64 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v70, v72 + 1, (unint64_t)&v74);
                  *(_DWORD *)(v70 + 4 * v72) = *v64;
                  v50 = v69;
                }
                else
                {
                  *(_DWORD *)(v70 + 4 * v72) = v52;
                }
                ++v72;
                *(_DWORD *)(v50 + 4 * v52) = v54;
              }
              ++v49;
              v51 -= 4;
            }
            while (v51);
          }
          v36 = v37;
        }
        while ((_DWORD)v37);
        if (!v27[5])
        {
LABEL_49:
          __break(0xC471u);
          JUMPOUT(0x19804F4A8);
        }
        v25 = (v25 + 1);
        v26 = *(unsigned int *)(v23 + 108);
        if (v26 > v25)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v23 + 96) + 8 * v25))
          {
            if (v26 == ++v25)
            {
              LODWORD(v25) = *(_DWORD *)(v23 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v24 != (_DWORD)v25);
    }
  }
  return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v67, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::AbstractColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  WTF *v11;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v11 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v11;
  if ((_DWORD)v11)
  {
    v13 = (_BYTE *)WTF::fastMalloc(v11);
    *(_DWORD *)(a1 + 8) = (_DWORD)v11;
    *(_QWORD *)a1 = v13;
    v14 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v14)
    {
      v15 = *(char **)a3;
      do
      {
        v16 = *v15++;
        *v13++ = v16;
        --v14;
      }
      while (v14);
    }
  }
  *(_OWORD *)(a1 + 40) = 0u;
  v17 = (_QWORD *)(a1 + 40);
  *(_WORD *)(a1 + 16) = 32;
  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 156) = a4;
  if (a4)
  {
    if ((a4 & 0x80000000) != 0)
      goto LABEL_44;
    v18 = (void *)WTF::fastMalloc((WTF *)(2 * a4));
    *(_DWORD *)(a1 + 152) = a4;
    *(_QWORD *)(a1 + 144) = v18;
    v19 = *(unsigned int *)(a1 + 156);
    if ((_DWORD)v19)
      bzero(v18, 2 * v19);
  }
  *(_QWORD *)(a1 + 160) = 0x8000000000000000;
  *(_QWORD *)(a1 + 200) = 0x8000000000000000;
  v20 = (_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_WORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a5;
  *(_QWORD *)(a1 + 240) = a6;
  *(_QWORD *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_QWORD *)(a1 + 264) = 4;
  v21 = *(unsigned int *)(a1 + 68);
  if (v21 >= a4)
    goto LABEL_22;
  v22 = *(unsigned int *)(a1 + 64);
  if (v22 >= a4)
    goto LABEL_22;
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= a4)
    v25 = a4;
  else
    v25 = v24;
  if (v25 >> 31)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x19804F764);
  }
  v26 = *(const void **)(a1 + 56);
  v27 = (void *)WTF::fastMalloc((WTF *)(2 * v25));
  *(_DWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 56) = v27;
  memcpy(v27, v26, 2 * v21);
  if (v26)
  {
    if (*(const void **)(a1 + 56) == v26)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
    }
    WTF::fastFree((unint64_t)v26, v28, v29, v30, v31, v32, v33, v34);
  }
LABEL_22:
  *(_DWORD *)(a1 + 68) = a4;
  v35 = *(unsigned __int16 *)(a1 + 16);
  v36 = *(char **)(a1 + 56);
  memset(v36, 255, 2 * v35 + 2);
  bzero(&v36[2 * v35 + 2], 2 * (a4 - ((_DWORD)v35 + 1)));
  v37 = *(unsigned int *)(a1 + 48);
  if (v37 < a4)
  {
    v38 = v37 + (v37 >> 2);
    if (v38 >= 0x10)
      v39 = v38 + 1;
    else
      v39 = 16;
    if (v39 <= a4)
      v40 = a4;
    else
      v40 = v39;
    WTF::Vector<WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 40, v40);
  }
  if (*v17)
  {
    v41 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v41 != a4)
      bzero((void *)(*v17 + 16 * v41), (16 * a4 - 16 * v41) & 0xFFFFFFFFFFFFFFF0);
  }
  *(_DWORD *)(a1 + 52) = a4;
  WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 96, a4);
  v42 = *(_QWORD *)(a1 + 160);
  if (v42 < 0)
    v43 = 63;
  else
    v43 = *(_QWORD *)(2 * v42);
  if (v43 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 160), a4, 0);
  if ((*v20 & 0x8000000000000000) != 0)
    v44 = 63;
  else
    v44 = *(_QWORD *)(2 * *v20);
  if (v44 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 200), a4, 0);
  return a1;
}

uint64_t WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  char v8;

  v3 = (WTF *)*(unsigned int *)(a2 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v5 = (_BYTE *)WTF::fastMalloc(v3);
    *(_DWORD *)(a1 + 8) = (_DWORD)v3;
    *(_QWORD *)a1 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(char **)a2;
      do
      {
        v8 = *v7++;
        *v5++ = v8;
        --v6;
      }
      while (v6);
    }
  }
  return a1;
}

uint64_t WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, unint64_t a2, _WORD *a3)
{
  int v3;
  uint64_t v4;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  if (!a2)
    return v4;
  if (!(a2 >> 31))
  {
    v6 = (_WORD *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v4 + 8) = v3;
    *(_QWORD *)v4 = v6;
    v7 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v7)
    {
      v8 = 2 * v7;
      do
      {
        *v6++ = *a3;
        v8 -= 2;
      }
      while (v8);
    }
    return v4;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 12);
  if (v4 >= a2 || (v5 = *(unsigned int *)(a1 + 8), v5 >= a2))
  {
LABEL_14:
    *(_DWORD *)(a1 + 12) = v2;
    return;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= a2)
    v8 = a2;
  else
    v8 = v7;
  if (!(v8 >> 31))
  {
    v9 = *(const void **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(2 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 2 * v4);
    if (v9)
    {
      if (*(const void **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
}

void WTF::Vector<WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 < a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  if (*(_QWORD *)a1)
  {
    v7 = *(unsigned int *)(a1 + 12);
    if (v7 != v2)
      bzero((void *)(*(_QWORD *)a1 + 16 * v7), (16 * v2 - 16 * v7) & 0xFFFFFFFFFFFFFFF0);
  }
  *(_DWORD *)(a1 + 12) = v2;
}

void WTF::Vector<WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = 16 * v5;
        v15 = (_DWORD *)(v4 + 8);
        do
        {
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v16 = *((_QWORD *)v15 - 1);
          *((_QWORD *)v15 - 1) = 0;
          *(_QWORD *)v6 = v16;
          LODWORD(v16) = *v15;
          *v15 = 0;
          *(_DWORD *)(v6 + 8) = v16;
          LODWORD(v16) = v15[1];
          v15[1] = 0;
          v19 = v6;
          *(_DWORD *)(v6 + 12) = v16;
          v17 = *((_QWORD *)v15 - 1);
          if (v17)
          {
            *((_QWORD *)v15 - 1) = 0;
            *v15 = 0;
            v18 = v15;
            WTF::fastFree(v17, v7, v8, v9, v10, v11, v12, v13);
            v15 = v18;
          }
          v15 += 4;
          v6 = v19 + 16;
          v14 -= 16;
        }
        while (v14);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 < a2)
  {
    v6 = v4 + (v4 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= a2)
      v7 = a2;
    if (v7 >= 0x6666667)
    {
      __break(0xC471u);
      return;
    }
    v8 = *(_DWORD *)(a1 + 12);
    v9 = 40 * v7;
    v10 = WTF::fastMalloc((WTF *)(40 * v7));
    *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v10;
    if (v8)
    {
      *(_QWORD *)&v21 = -1;
      *((_QWORD *)&v21 + 1) = -1;
      v22 = v5;
      do
      {
        v23 = *(_OWORD *)v22;
        v24 = *(_OWORD *)(v22 + 16);
        *(_QWORD *)(v10 + 32) = *(_QWORD *)(v22 + 32);
        *(_OWORD *)v10 = v23;
        *(_OWORD *)(v10 + 16) = v24;
        *(_QWORD *)v22 = 0x800000000;
        *(_OWORD *)(v22 + 8) = v21;
        *(_OWORD *)(v22 + 24) = v21;
        v10 += 40;
        v22 += 40;
      }
      while (v22 != v5 + 40 * v8);
      v10 = *(_QWORD *)a1;
    }
    if (v5)
    {
      if (v10 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
      v5 = *(_QWORD *)a1;
    }
    else
    {
      v5 = v10;
    }
  }
  if (v5)
  {
    v18 = *(unsigned int *)(a1 + 12);
    if (v18 != a2)
    {
      v19 = v5 + 40 * v18;
      *(_QWORD *)&v20 = -1;
      *((_QWORD *)&v20 + 1) = -1;
      do
      {
        *(_QWORD *)v19 = 0x800000000;
        *(_OWORD *)(v19 + 8) = v20;
        *(_OWORD *)(v19 + 24) = v20;
        v19 += 40;
      }
      while (v19 != v5 + 40 * a2);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
}

_DWORD *WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 4 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v16 = *(_QWORD *)a1;
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
      if (v15 < 5)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_34;
      }
      if (!(v15 >> 30))
      {
        v16 = WTF::fastMalloc((WTF *)(4 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_DWORD *)(v16 + v27) = *(_DWORD *)(v10 + v27);
          v27 += 4;
        }
        while (4 * v11 != v27);
        if (a1 + 16 != v10 && v10)
        {
          if (v16 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x19804FDE0);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 5)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 30)
        goto LABEL_43;
      v22 = WTF::fastMalloc((WTF *)(4 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 4 * v21;
    v24 = (_DWORD *)v22;
    v25 = (int *)v10;
    do
    {
      v26 = *v25++;
      *v24++ = v26;
      v23 -= 4;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (v22 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

_BYTE *WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Reg&>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;

  result = (_BYTE *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!HIDWORD(v9))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_BYTE *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = (char *)v5;
      do
      {
        v20 = *v19++;
        *v11++ = v20;
        --v10;
      }
      while (v10);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!HIDWORD(v5))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_BYTE *)WTF::fastMalloc((WTF *)v5);
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = (char *)v7;
      do
      {
        v18 = *v17++;
        *v9++ = v18;
        --v8;
      }
      while (v8);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Reg,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, WTF *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  WTF *v20;
  char *v21;
  _BYTE *v22;

  v4 = *(unsigned int *)(a1 + 12);
  if (v4 >= (unint64_t)a2)
  {
LABEL_22:
    *(_DWORD *)(a1 + 12) = (_DWORD)a2;
    return;
  }
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)a1;
  if (v5 >= (unint64_t)a2)
  {
LABEL_18:
    if (v6)
    {
      v20 = (WTF *)*(unsigned int *)(a1 + 12);
      v21 = (char *)(a2 - v20);
      if (a2 != v20)
      {
        v22 = (char *)v20 + v6;
        do
        {
          *v22++ |= 0x7Fu;
          --v21;
        }
        while (v21);
      }
    }
    goto LABEL_22;
  }
  v7 = v5 + (v5 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (!HIDWORD(v9))
  {
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(a1 + 8) = v9;
    *(_QWORD *)a1 = v10;
    if ((_DWORD)v4)
    {
      v18 = (char *)v6;
      do
      {
        v19 = *v18++;
        *v10++ = v19;
        --v4;
      }
      while (v4);
      v10 = *(_BYTE **)a1;
    }
    if (v6)
    {
      if (v10 == (_BYTE *)v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v6, v11, v12, v13, v14, v15, v16, v17);
      v6 = *(_QWORD *)a1;
    }
    else
    {
      v6 = (unint64_t)v10;
    }
    goto LABEL_18;
  }
  __break(0xC471u);
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
      *(_DWORD *)(a1 + 12) = 0;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::OrderedMoveSet::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
      *(_DWORD *)(a1 + 12) = 0;
    v9 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 28))
      *(_DWORD *)(a1 + 28) = 0;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 40))
  {
    if (*(_DWORD *)(a1 + 44))
      *(_DWORD *)(a1 + 44) = 0;
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD **v22;
  int v23;
  _QWORD *v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int16 v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD **v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  char v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  char v68;
  _BOOL4 v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD v77[3];
  _QWORD **v78;
  _QWORD **v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t **v82;
  void *v83;
  void **v84;
  uint64_t ***v85;

  v78 = a3;
  v79 = a2;
  v77[0] = &v79;
  v77[1] = &v78;
  v77[2] = a1;
  v80 = v77;
  if (a2)
  {
    v81 = (uint64_t *)&v80;
    v82 = &v81;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v83 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v84 = &v83;
      v85 = &v82;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v83);
    }
    else
    {
      v8 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
        v11 = 1;
        do
        {
          if (v9 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19805080CLL);
          }
          v12 = v10[v9];
          if ((v12 >> 5) - 1 >= 5)
            goto LABEL_107;
          v13 = (char *)&(*a2)[v11];
          v14 = *v13;
          v15 = *((_DWORD *)v13 + 2);
          if (v14 == 1)
          {
            if ((v12 & 0xC) == 4)
            {
              v76 = (v12 >> 4) & 1;
              v75 = *v81;
              LODWORD(v83) = v15;
              goto LABEL_14;
            }
          }
          else if ((v14 - 12) < 2)
          {
            v75 = *v81;
            LODWORD(v83) = v15;
            v76 = 0;
LABEL_14:
          }
          ++v9;
          v11 += 4;
        }
        while (v8 != v9);
      }
    }
  }
  if (a3)
  {
    v81 = (uint64_t *)&v80;
    v82 = &v81;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v83 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v84 = &v83;
      v85 = &v82;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v83);
    }
    else
    {
      v16 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v16 - 1) * v16) >> 1);
        v19 = 1;
        do
        {
          if (v17 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198050814);
          }
          v20 = v18[v17];
          if ((v20 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980507E4);
          }
          v21 = &(*a3)[v19];
          if (*(_BYTE *)v21 == 1 && (v20 & 0xF) - 8 <= 2)
          {
            v74 = *v81;
            LODWORD(v83) = *((_DWORD *)v21 + 2);
          }
          ++v17;
          v19 += 4;
        }
        while (v16 != v17);
      }
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198050824);
    }
    v55 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v57 = v56 | v55;
    if (v56 | v55)
    {
      v58 = v55;
      do
      {
        v59 = __clz(__rbit64(v57));
        v60 = ((v58 >> v59) & 1) == 0;
        v61 = v59 > 0x1F;
        if (v59 <= 0x1F)
          v62 = v59 + 1;
        else
          v62 = (char)(31 - v59);
        LODWORD(v83) = v62;
        v57 &= v57 - 1;
      }
      while (v57);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19805082CLL);
    }
    v63 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v65 = v64 | v63;
    if (v64 | v63)
    {
      v66 = v63;
      do
      {
        v67 = __clz(__rbit64(v65));
        v68 = ((v66 >> v67) & 1) == 0;
        v69 = v67 > 0x1F;
        if (v67 <= 0x1F)
          v70 = v67 + 1;
        else
          v70 = (char)(31 - v67);
        LODWORD(v83) = v70;
        v65 &= v65 - 1;
      }
      while (v65);
    }
  }
  v22 = v79;
  if (!v79)
    goto LABEL_92;
  v23 = *((__int16 *)v79 + 60);
  if ((v23 | 4) != 0x5E)
    goto LABEL_92;
  if (*((_DWORD *)v79 + 3) != 2)
    goto LABEL_92;
  v24 = *v79;
  if (*((_BYTE *)*v79 + 8) != 1 || *((_BYTE *)v24 + 40) != 1)
    goto LABEL_92;
  if (v23 != 94)
    goto LABEL_36;
  v71 = *(_QWORD *)(a1 + 368);
  if (!v71)
    goto LABEL_92;
  v72 = *((unsigned int *)v24 + 4);
  if ((int)v72 < 1)
  {
    v72 = -(int)v72;
    if (v72 >= *(unsigned int *)(v71 + 28))
    {
LABEL_107:
      __break(0xC471u);
      JUMPOUT(0x1980507C4);
    }
    v71 += 16;
  }
  else if (v72 >= *(_DWORD *)(v71 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198050834);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)v71 + 2 * v72 + 1) <= 2u)
  {
LABEL_36:
    v25 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v79 + 60);
    v26 = v25[1];
    if ((v26 >> 5) - 1 >= 5 || (v27 = v25[2], (v27 >> 5) - 1 > 4))
    {
      __break(0xC471u);
      JUMPOUT(0x198050804);
    }
    v28 = v26 & 0xC;
    v29 = *((_DWORD *)v24 + 4);
    v30 = v28 == 4;
    if (v28 == 4)
      v31 = 0;
    else
      v31 = *((_DWORD *)v24 + 4);
    if (!v30)
      LOWORD(v29) = 0;
    v32 = *((_DWORD *)v24 + 12);
    v33 = v27 & 0xC;
    if (v33 == 4)
      v34 = v31;
    else
      v34 = v32;
    if (v33 == 4)
      v35 = v32;
    else
      v35 = v29;
    v36 = (_QWORD *)(a1 + 80);
    LOWORD(v83) = v34;
    WORD1(v83) = v35;
    v37 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 88))
    else
      *(_DWORD *)(*v36 + 4 * v37) = (_DWORD)v83;
    ++*(_DWORD *)(a1 + 92);
    v38 = *(_DWORD *)(a1 + 308);
    LODWORD(v83) = v38;
    v39 = *(unsigned int *)(a1 + 324);
    LODWORD(v77[0]) = v39;
    if ((_DWORD)v39 == *(_DWORD *)(a1 + 320))
    {
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(a1 + 312, (unint64_t)&v83);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 312) + 4 * v39) = v38;
      ++*(_DWORD *)(a1 + 324);
    }
    v40 = *(unsigned int *)(a1 + 308);
    if ((_DWORD)v40 == *(_DWORD *)(a1 + 304))
    {
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(a1 + 296, (unint64_t)v77);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v40) = v39;
      ++*(_DWORD *)(a1 + 308);
    }
    v41 = *((unsigned int *)v79 + 3);
    if ((_DWORD)v41)
    {
      v42 = 32 * v41;
      v43 = (unsigned int *)(*v79 + 2);
      do
      {
        v45 = *v43;
        v43 += 8;
        v44 = v45;
        if (*(_DWORD *)(a1 + 108) <= v45)
        {
          __break(0xC471u);
          JUMPOUT(0x19805081CLL);
        }
        WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v83, (unsigned int *)(*(_QWORD *)(a1 + 96) + 40 * v44), v37);
        v42 -= 32;
      }
      while (v42);
    }
    v46 = *(unsigned int *)(*a4 + 60);
    if ((_DWORD)v46)
    {
      v47 = *(_DWORD **)(*a4 + 48);
      v48 = 4 * v46;
      do
      {
        if (v34 != *v47)
        ++v47;
        v48 -= 4;
      }
      while (v48);
    }
    v49 = *(unsigned int *)(a1 + 268);
    if ((_DWORD)v49)
    {
      v50 = *(_DWORD **)(a1 + 256);
      v51 = 4 * v49;
      do
      {
        if (v34 != *v50)
        ++v50;
        v51 -= 4;
      }
      while (v51);
    }
    v52 = v78;
    v53 = *a4;
    v54 = (_QWORD *)a1;
    v22 = 0;
  }
  else
  {
LABEL_92:
    v52 = v78;
    v53 = *a4;
    v54 = (_QWORD *)a1;
  }
}

uint64_t JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Liveness(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  int *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  int v83;
  uint64_t v84;
  _DWORD *v85;
  int *v86;
  uint64_t v87;
  int v88;
  int *v89;
  uint64_t v90;
  int v91;
  char *v92;
  int *v93;
  uint64_t v94;
  int v95;
  int *v96;
  uint64_t v97;
  int v98;
  char *v99;
  int *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  int v110;
  char *v111;
  int *v112;
  uint64_t v113;
  int v114;
  char *v115;
  int *v116;
  char *v117;
  int *v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  int *v129;
  uint64_t v130;
  int v131;
  int v132;
  int *v133;
  unint64_t i;
  int v135;
  int *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  int **v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  int *v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int *v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int **v217;
  unsigned int **v218;
  _DWORD *v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  int *v224;
  uint64_t v225;
  unint64_t v226;
  int *v227;
  uint64_t v228;
  int *v229;
  WTF *v230;
  WTF *v231;
  BOOL v232;
  WTF *v233;
  int v234;
  int v235;
  int v236;
  _QWORD *v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  WTF *v243;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int *v249;
  uint64_t v250;
  WTF *v251;
  char *v254;
  int *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  _DWORD *__src;
  WTF *__srca;
  uint64_t v273;
  int v274;
  char v275;
  _QWORD *v276;
  uint64_t *v277;
  uint64_t *v278;
  _QWORD v279[4];
  double v280;
  WTF *v281;
  uint64_t v282;
  _QWORD v283[2];
  _QWORD v284[3];
  uint64_t v285;
  _QWORD v286[2];

  v3 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)a1 = a2;
  v4 = *(unsigned int *)(a2 + 108);
  *(_QWORD *)(a1 + 8) = 0;
  v278 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198051C98);
    }
    v5 = (void *)WTF::fastMalloc((WTF *)(16 * v4));
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v6)
      bzero(v5, 16 * v6);
  }
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 176);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = v3;
  v277 = (uint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = v7 + 33;
  if (v7 != -33)
  {
    if (v8 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198051CA0);
    }
    v9 = WTF::fastMalloc((WTF *)(4 * (v7 + 33)));
    *(_DWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_DWORD *)(a1 + 44) = v8;
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 64, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v276 = (_QWORD *)(a1 + 80);
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 80, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v279[0] = "Air";
  v279[1] = 4;
  v279[2] = "Liveness";
  v279[3] = 9;
  v280 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v256 = mach_absolute_time();
    v258 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v258 != -1)
    {
      v281 = (WTF *)v286;
      v284[0] = &v281;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v284, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v257) = dword_1ECF4400C;
    v280 = (double)(v256 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v257 * 1000000000.0);
  }
  v17 = *(_DWORD **)a1;
  v273 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v273)
  {
    v18 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v17 + 12) + 8 * v18))
    {
      if (v273 == ++v18)
        goto LABEL_140;
    }
    if ((_DWORD)v273 != (_DWORD)v18)
    {
      LODWORD(v19) = *(_DWORD *)(*(_QWORD *)a1 + 108);
      LODWORD(v20) = v18;
      __src = *(_DWORD **)a1;
      do
      {
        if (v19 <= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x198051C80);
        }
        v274 = v20;
        v21 = *(unsigned int **)(*((_QWORD *)v17 + 12) + 8 * v20);
        v22 = *v278 + 16 * *v21;
        v23 = v21[5] + 1;
        v24 = *(unsigned int *)(v22 + 12);
        if (v24 >= v23)
        {
          WTF::VectorTypeOperations<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions>::destruct((_QWORD *)(*(_QWORD *)v22 + (v23 << 6)), (_QWORD *)(*(_QWORD *)v22 + (v24 << 6)), v11, v12, v13, v14, v15, v16);
        }
        else
        {
          v25 = *(unsigned int *)(v22 + 8);
          v26 = *(_QWORD *)v22;
          if (v25 < v23)
          {
            v27 = v25 + (v25 >> 2);
            if (v27 >= 0x10)
              v28 = v27 + 1;
            else
              v28 = 16;
            if (v28 <= v23)
              v29 = v21[5] + 1;
            else
              v29 = v28;
            if (v29 >> 26)
            {
              __break(0xC471u);
              JUMPOUT(0x198051C88);
            }
            v30 = WTF::fastMalloc((WTF *)(v29 << 6));
            *(_DWORD *)(v22 + 8) = v29;
            *(_QWORD *)v22 = v30;
            if ((_DWORD)v24)
            {
              v259 = v24 << 6;
              v260 = v26;
              do
              {
                v270 = v260;
                JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::Actions(v30, v260);
                JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::~Actions(v270, v261, v262, v263, v264, v265, v266, v267);
                v30 += 64;
                v260 = v270 + 64;
                v259 -= 64;
              }
              while (v259);
              v30 = *(_QWORD *)v22;
            }
            if (v26)
            {
              if (v30 == v26)
              {
                *(_QWORD *)v22 = 0;
                *(_DWORD *)(v22 + 8) = 0;
              }
              WTF::fastFree(v26, v10, v11, v12, v13, v14, v15, v16);
              v26 = *(_QWORD *)v22;
            }
            else
            {
              v26 = v30;
            }
          }
          if (v26)
          {
            v31 = *(unsigned int *)(v22 + 12);
            if ((_DWORD)v31 != (_DWORD)v23)
            {
              v32 = v31 << 6;
              v33 = v23 << 6;
              do
              {
                v34 = (_QWORD *)(v26 + v32);
                *v34 = v26 + v32 + 16;
                v34[1] = 4;
                v34[4] = v26 + v32 + 48;
                v34[5] = 4;
                v33 -= 64;
                v26 += 64;
              }
              while (v32 != v33);
            }
          }
        }
        *(_DWORD *)(v22 + 12) = v23;
        v35 = v21[5];
        v36 = v35 - 1;
        v285 = v35 - 1;
        if ((_DWORD)v35)
        {
          do
          {
            if (v21[5] <= v36)
            {
              __break(0xC471u);
              JUMPOUT(0x198051C58);
            }
            v37 = *((_QWORD *)v21 + 1) + ((unint64_t)v36 << 7);
            v284[0] = a1;
            v284[1] = v22;
            v284[2] = &v285;
            v286[0] = v284;
            if ((*(__int16 *)(v37 + 120) - 446) <= 5)
            {
              v281 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
              v282 = (uint64_t)&v281;
              v283[0] = v286;
              JSC::B3::Air::Inst::forEachArgCustom(v37, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)&v281);
            }
            else
            {
              v38 = *(unsigned int *)(v37 + 12);
              if ((_DWORD)v38)
              {
                v39 = 0;
                v10 = (char *)&JSC::B3::Air::g_formTable
                    + 21 * *(__int16 *)(v37 + 120)
                    + ((unint64_t)((v38 - 1) * v38) >> 1);
                do
                {
                  if (v39 >= *(unsigned int *)(v37 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198051C50);
                  }
                  v40 = v10[v39];
                  if ((v40 >> 5) - 1 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198051C34);
                  }
                  v41 = *(_QWORD *)v37;
                  v42 = v286[0];
                  switch(*(_BYTE *)(*(_QWORD *)v37 + 32 * v39 + 8))
                  {
                    case 1:
                      if ((v40 & 0x10) != 0)
                        goto LABEL_49;
                      v43 = v40 & 0xF;
                      v44 = *(_DWORD *)(v41 + 32 * v39 + 16);
                      LODWORD(v281) = v44;
                      if (v43 <= 0xB && ((1 << v43) & 0xF3C) != 0)
                        goto LABEL_46;
                      v45 = **(_QWORD **)(v286[0] + 8) + (**(_QWORD **)(v286[0] + 16) << 6);
                      v46 = *(unsigned int *)(v45 + 12);
                      if (!(_DWORD)v46)
                        goto LABEL_43;
                      v48 = *(int **)v45;
                      v49 = *(unsigned int *)(v45 + 12);
                      while (1)
                      {
                        v50 = *v48++;
                        if (v50 == v44)
                          break;
                        if (!--v49)
                        {
LABEL_43:
                          if ((_DWORD)v46 == *(_DWORD *)(v45 + 8))
                          {
                            v268 = v10;
                            v76 = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45, v46 + 1, (unint64_t)&v281);
                            v10 = v268;
                            v47 = (_DWORD *)(*(_QWORD *)v45 + 4 * *(unsigned int *)(v45 + 12));
                            v44 = *v76;
                          }
                          else
                          {
                            v47 = (_DWORD *)(*(_QWORD *)v45 + 4 * v46);
                          }
                          *v47 = v44;
                          ++*(_DWORD *)(v45 + 12);
                          break;
                        }
                      }
LABEL_46:
                      if (v43 - 8 <= 2)
                      {
                        v66 = **(_QWORD **)(v42 + 8) + (**(_QWORD **)(v42 + 16) << 6);
                        v67 = v66 + 32;
                        v68 = *(unsigned int *)(v66 + 44);
                        if ((_DWORD)v68)
                        {
                          v86 = *(int **)v67;
                          v87 = v68;
                          while (1)
                          {
                            v88 = *v86++;
                            if (v88 == (_DWORD)v281)
                              break;
                            if (!--v87)
                              goto LABEL_86;
                          }
                        }
                        else
                        {
LABEL_86:
                          if ((_DWORD)v68 == *(_DWORD *)(v67 + 8))
                          {
                            v269 = v10;
                            v70 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67, v68 + 1, (unint64_t)&v281);
                            v10 = v269;
                            v69 = (_DWORD *)(*(_QWORD *)v67 + 4 * *(unsigned int *)(v67 + 12));
                          }
                          else
                          {
                            v69 = (_DWORD *)(*(_QWORD *)v67 + 4 * v68);
                            v70 = &v281;
                          }
                          *v69 = *v70;
                          ++*(_DWORD *)(v67 + 12);
                        }
                      }
                      if (v43 >= 2 && (v43 > 0xB || ((1 << v43) & 0xBF0) == 0))
                      {
                        v71 = **(_QWORD **)(v42 + 8) + (**(_QWORD **)(v42 + 16) << 6);
                        v72 = v71 + 64;
                        v73 = *(unsigned int *)(v71 + 76);
                        if ((_DWORD)v73)
                        {
                          v89 = *(int **)v72;
                          v90 = v73;
                          while (1)
                          {
                            v91 = *v89++;
                            if (v91 == (_DWORD)v281)
                              break;
                            if (!--v90)
                              goto LABEL_90;
                          }
                        }
                        else
                        {
LABEL_90:
                          if ((_DWORD)v73 == *(_DWORD *)(v72 + 8))
                          {
                            v111 = v10;
                            v75 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)&v281);
                            v10 = v111;
                            v74 = (_DWORD *)(*(_QWORD *)v72 + 4 * *(unsigned int *)(v72 + 12));
                          }
                          else
                          {
                            v74 = (_DWORD *)(*(_QWORD *)v72 + 4 * v73);
                            v75 = &v281;
                          }
                          *v74 = *v75;
                          ++*(_DWORD *)(v72 + 12);
                        }
                      }
                      if ((v40 & 0xC) == 4)
                      {
                        v51 = **(_QWORD **)(v42 + 8) + (**(_QWORD **)(v42 + 16) << 6);
                        v52 = v51 + 96;
                        v53 = *(unsigned int *)(v51 + 108);
                        if (!(_DWORD)v53)
                          goto LABEL_56;
                        v56 = *(int **)v52;
                        v57 = v53;
                        while (1)
                        {
                          v58 = *v56++;
                          if (v58 == (_DWORD)v281)
                            break;
                          if (!--v57)
                            goto LABEL_56;
                        }
                      }
                      goto LABEL_49;
                    case 6:
                    case 7:
                    case 8:
                      v59 = *(_DWORD *)(v41 + 32 * v39 + 16);
                      LODWORD(v281) = v59;
                      v52 = **(_QWORD **)(v286[0] + 8) + (**(_QWORD **)(v286[0] + 16) << 6);
                      v60 = *(unsigned int *)(v52 + 12);
                      if (!(_DWORD)v60)
                        goto LABEL_65;
                      v63 = *(int **)v52;
                      v64 = *(unsigned int *)(v52 + 12);
                      while (1)
                      {
                        v65 = *v63++;
                        if (v65 == v59)
                          goto LABEL_49;
                        if (!--v64)
                        {
LABEL_65:
                          if ((_DWORD)v60 == *(_DWORD *)(v52 + 8))
                          {
                            v99 = v10;
                            v100 = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(**(_QWORD **)(v286[0] + 8) + (**(_QWORD **)(v286[0] + 16) << 6), v60 + 1, (unint64_t)&v281);
                            v10 = v99;
                            v61 = (_DWORD *)(*(_QWORD *)v52 + 4 * *(unsigned int *)(v52 + 12));
                            v59 = *v100;
                          }
                          else
                          {
                            v61 = (_DWORD *)(*(_QWORD *)v52 + 4 * v60);
                          }
                          *v61 = v59;
                          goto LABEL_59;
                        }
                      }
                    case 0xB:
                      v77 = *(_DWORD *)(v41 + 32 * v39 + 16);
                      LODWORD(v281) = v77;
                      v78 = **(_QWORD **)(v286[0] + 16);
                      v79 = **(_QWORD **)(v286[0] + 8);
                      v80 = v79 + (v78 << 6);
                      v81 = *(unsigned int *)(v80 + 12);
                      if (!(_DWORD)v81)
                        goto LABEL_95;
                      v93 = *(int **)v80;
                      v94 = *(unsigned int *)(v80 + 12);
                      while (1)
                      {
                        v95 = *v93++;
                        if (v95 == v77)
                          break;
                        if (!--v94)
                        {
LABEL_95:
                          if ((_DWORD)v81 == *(_DWORD *)(v80 + 8))
                          {
                            v115 = v10;
                            v116 = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79 + (v78 << 6), v81 + 1, (unint64_t)&v281);
                            v10 = v115;
                            v82 = (_DWORD *)(*(_QWORD *)v80 + 4 * *(unsigned int *)(v80 + 12));
                            v77 = *v116;
                            v78 = **(_QWORD **)(v42 + 16);
                            v79 = **(_QWORD **)(v42 + 8);
                          }
                          else
                          {
                            v82 = (_DWORD *)(*(_QWORD *)v80 + 4 * v81);
                          }
                          *v82 = v77;
                          ++*(_DWORD *)(v80 + 12);
                          break;
                        }
                      }
                      v83 = *(_DWORD *)(v41 + 32 * v39 + 20);
                      LODWORD(v281) = v83;
                      v52 = v79 + (v78 << 6);
                      v84 = *(unsigned int *)(v52 + 12);
                      if (!(_DWORD)v84)
                      {
LABEL_99:
                        if ((_DWORD)v84 == *(_DWORD *)(v52 + 8))
                        {
                          v117 = v10;
                          v118 = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v52, v84 + 1, (unint64_t)&v281);
                          v10 = v117;
                          v85 = (_DWORD *)(*(_QWORD *)v52 + 4 * *(unsigned int *)(v52 + 12));
                          v83 = *v118;
                        }
                        else
                        {
                          v85 = (_DWORD *)(*(_QWORD *)v52 + 4 * v84);
                        }
                        *v85 = v83;
                        goto LABEL_59;
                      }
                      v96 = *(int **)v52;
                      v97 = *(unsigned int *)(v52 + 12);
                      while (1)
                      {
                        v98 = *v96++;
                        if (v98 == v83)
                          goto LABEL_49;
                        if (!--v97)
                          goto LABEL_99;
                      }
                    case 0xC:
                    case 0xD:
                      v101 = *(_DWORD *)(v41 + 32 * v39 + 16);
                      LODWORD(v281) = v101;
                      v102 = **(_QWORD **)(v286[0] + 16);
                      v103 = **(_QWORD **)(v286[0] + 8);
                      v104 = v103 + (v102 << 6);
                      v105 = *(unsigned int *)(v104 + 12);
                      if (!(_DWORD)v105)
                        goto LABEL_123;
                      v112 = *(int **)v104;
                      v113 = *(unsigned int *)(v104 + 12);
                      break;
                    default:
                      goto LABEL_49;
                  }
                  while (1)
                  {
                    v114 = *v112++;
                    if (v114 == v101)
                      break;
                    if (!--v113)
                    {
LABEL_123:
                      if ((_DWORD)v105 == *(_DWORD *)(v104 + 8))
                      {
                        v254 = v10;
                        v255 = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103 + (v102 << 6), v105 + 1, (unint64_t)&v281);
                        v10 = v254;
                        v106 = (_DWORD *)(*(_QWORD *)v104 + 4 * *(unsigned int *)(v104 + 12));
                        v101 = *v255;
                        v102 = **(_QWORD **)(v42 + 16);
                        v103 = **(_QWORD **)(v42 + 8);
                      }
                      else
                      {
                        v106 = (_DWORD *)(*(_QWORD *)v104 + 4 * v105);
                      }
                      *v106 = v101;
                      ++*(_DWORD *)(v104 + 12);
                      break;
                    }
                  }
                  v107 = v103 + (v102 << 6);
                  v52 = v107 + 96;
                  v53 = *(unsigned int *)(v107 + 108);
                  if ((_DWORD)v53)
                  {
                    v108 = *(int **)v52;
                    v109 = v53;
                    while (1)
                    {
                      v110 = *v108++;
                      if (v110 == (_DWORD)v281)
                        break;
                      if (!--v109)
                        goto LABEL_56;
                    }
                  }
                  else
                  {
LABEL_56:
                    if ((_DWORD)v53 == *(_DWORD *)(v52 + 8))
                    {
                      v92 = v10;
                      v55 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v52, v53 + 1, (unint64_t)&v281);
                      v10 = v92;
                      v54 = (_DWORD *)(*(_QWORD *)v52 + 4 * *(unsigned int *)(v52 + 12));
                    }
                    else
                    {
                      v54 = (_DWORD *)(*(_QWORD *)v52 + 4 * v53);
                      v55 = &v281;
                    }
                    *v54 = *v55;
LABEL_59:
                    ++*(_DWORD *)(v52 + 12);
                  }
LABEL_49:
                  ++v39;
                }
                while (v39 != v38);
              }
            }
            v62 = v285;
            v36 = --v285;
          }
          while (v62);
        }
        v20 = (v274 + 1);
        v17 = __src;
        v19 = __src[27];
        if (v19 > v20)
        {
          while (!*(_QWORD *)(*((_QWORD *)__src + 12) + 8 * v20))
          {
            if (v19 == ++v20)
            {
              LODWORD(v20) = __src[27];
              break;
            }
          }
        }
      }
      while ((_DWORD)v273 != (_DWORD)v20);
    }
  }
LABEL_140:
  v119 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 108);
  if (v119)
  {
    do
    {
      --v119;
      v120 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v120 + 108) <= v119)
      {
        __break(0xC471u);
        JUMPOUT(0x198051C78);
      }
      v121 = *(unsigned int **)(*(_QWORD *)(v120 + 96) + 8 * v119);
      if (v121)
      {
        v122 = *v121;
        v123 = *v276 + 32 * v122;
        v124 = *(_QWORD *)(*v278 + 16 * v122) + ((unint64_t)v121[5] << 6);
        v125 = *(unsigned int *)(v124 + 12);
        if ((_DWORD)v125)
        {
          v136 = *(int **)v124;
          v137 = 4 * v125;
          do
          {
            v138 = *v136;
            LODWORD(v281) = *v136;
            v139 = *(unsigned int *)(v123 + 12);
            if ((_DWORD)v139 == *(_DWORD *)(v123 + 8))
            {
              WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(v123, (unint64_t)&v281);
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)v123 + 4 * v139) = v138;
              ++*(_DWORD *)(v123 + 12);
            }
            ++v136;
            v137 -= 4;
          }
          while (v137);
        }
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v126 = *(char **)v123;
        v127 = *(unsigned int *)(v123 + 12);
        if ((_DWORD)v127)
        {
          v128 = &v126[4 * v127];
          v129 = (int *)(v126 + 4);
          v130 = 4 * v127 - 4;
          while (v130)
          {
            v131 = *(v129 - 1);
            v132 = *v129++;
            v130 -= 4;
            if (v131 == v132)
            {
              v133 = v129 - 2;
              if (v130)
              {
                for (i = 0; i != v130; i += 4)
                {
                  v135 = v131;
                  v131 = v129[i / 4];
                  if (v135 != v131)
                  {
                    v133[1] = v131;
                    ++v133;
                  }
                }
              }
              v128 = (char *)(v133 + 1);
              break;
            }
          }
        }
        else
        {
          v128 = *(char **)v123;
        }
        *(_DWORD *)(v123 + 12) = (unint64_t)(v128 - v126) >> 2;
      }
    }
    while (v119);
    v140 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
    v284[0] = 0x8000000000000000;
    if ((_DWORD)v140)
    {
      v141 = v140 - 1;
      v142 = 0x8000000000000000;
      while (1)
      {
        if (v142 < 0)
          v143 = 63;
        else
          v143 = *(_QWORD *)(2 * v142);
        v10 = (char *)(v141 + 1);
        if (v143 < v141 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v284, (unint64_t)v10, 0);
          v142 = v284[0];
        }
        v144 = v142 >= 0 ? (_QWORD *)(2 * v142 + 8) : v284;
        *(_QWORD *)((char *)v144 + ((v141 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v141;
        if (!v141)
          break;
        v142 = v284[0];
        --v141;
      }
    }
  }
  else
  {
    v284[0] = 0x8000000000000000;
  }
  v281 = (WTF *)v283;
  v145 = (int **)(a1 + 48);
  v282 = 4;
LABEL_177:
  v146 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
  if ((_DWORD)v146)
  {
    v275 = 0;
    while (1)
    {
      --v146;
      v147 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v147 + 108) <= v146)
      {
        __break(0xC471u);
        JUMPOUT(0x198051C60);
      }
      v148 = *(unsigned int **)(*(_QWORD *)(v147 + 96) + 8 * v146);
      if (v148)
      {
        v149 = v284[0] >= 0 ? (_QWORD *)(2 * v284[0] + 8) : v284;
        v150 = (v146 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v151 = *(_QWORD *)((char *)v149 + v150);
        *(_QWORD *)((char *)v149 + v150) = v151 & ~(1 << v146);
        if ((v151 & (1 << v146)) != 0)
        {
          *(_DWORD *)(a1 + 60) = 0;
          v152 = *(_QWORD *)(a1 + 80) + 32 * *v148;
          v153 = *(unsigned int *)(v152 + 12);
          if ((_DWORD)v153)
          {
            v154 = *(_DWORD **)v152;
            v155 = *v277;
            v156 = 4 * v153;
            do
            {
              v157 = *v154;
              v158 = *(unsigned int *)(v155 + 4 * v157);
              v159 = *(unsigned int *)(a1 + 60);
              if (v159 <= v158 || (*v145)[v158] != (_DWORD)v157)
              {
                LODWORD(v286[0]) = *v154;
                if ((_DWORD)v159 == *(_DWORD *)(a1 + 56))
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 60)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v159 + 1, (unint64_t)v286);
                  v155 = *(_QWORD *)(a1 + 32);
                }
                else
                {
                  (*v145)[v159] = v157;
                }
                ++*(_DWORD *)(a1 + 60);
                *(_DWORD *)(v155 + 4 * v157) = v159;
              }
              ++v154;
              v156 -= 4;
            }
            while (v156);
          }
          v160 = v148[5];
          if ((_DWORD)v160)
          {
            do
            {
              v161 = *v278;
              v162 = *(_QWORD *)(*v278 + 16 * *v148);
              v163 = v162 + ((unint64_t)v160 << 6);
              v164 = *(unsigned int *)(v163 + 44);
              if ((_DWORD)v164)
              {
                v173 = *(unsigned int **)(v163 + 32);
                v174 = *(_QWORD *)(a1 + 32);
                v175 = 4 * v164;
                v176 = *(_DWORD *)(a1 + 60);
                do
                {
                  v177 = *v173;
                  v178 = *(unsigned int *)(v174 + 4 * v177);
                  if (v176 > v178)
                  {
                    v179 = *v145;
                    if ((*v145)[v178] == (_DWORD)v177)
                    {
                      v180 = v179[v176 - 1];
                      v179[v178] = v180;
                      *(_DWORD *)(v174 + 4 * v180) = v178;
                      v176 = *(_DWORD *)(a1 + 60) - 1;
                      *(_DWORD *)(a1 + 60) = v176;
                    }
                  }
                  ++v173;
                  v175 -= 4;
                }
                while (v175);
                v162 = *(_QWORD *)(v161 + 16 * *v148);
              }
              v165 = v162 + ((unint64_t)--v160 << 6);
              v166 = *(unsigned int *)(v165 + 12);
              if ((_DWORD)v166)
              {
                v167 = *(_DWORD **)v165;
                v168 = *v277;
                v169 = 4 * v166;
                do
                {
                  v170 = *v167;
                  v171 = *(unsigned int *)(v168 + 4 * v170);
                  v172 = *(unsigned int *)(a1 + 60);
                  if (v172 <= v171 || (*v145)[v171] != (_DWORD)v170)
                  {
                    LODWORD(v286[0]) = *v167;
                    if ((_DWORD)v172 == *(_DWORD *)(a1 + 56))
                    {
                      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 60)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v172 + 1, (unint64_t)v286);
                      v168 = *(_QWORD *)(a1 + 32);
                    }
                    else
                    {
                      (*v145)[v172] = v170;
                    }
                    ++*(_DWORD *)(a1 + 60);
                    *(_DWORD *)(v168 + 4 * v170) = v172;
                  }
                  ++v167;
                  v169 -= 4;
                }
                while (v169);
              }
            }
            while (v160);
          }
          v181 = *v148;
          v182 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v181);
          v183 = *(unsigned int *)(v182 + 44);
          v184 = *(_DWORD *)(a1 + 60);
          if ((_DWORD)v183)
          {
            v244 = *(unsigned int **)(v182 + 32);
            v245 = *v277;
            v246 = 4 * v183;
            do
            {
              v247 = *v244;
              v248 = *(unsigned int *)(v245 + 4 * v247);
              if (v184 > v248)
              {
                v249 = *v145;
                if ((*v145)[v248] == (_DWORD)v247)
                {
                  v250 = v249[v184 - 1];
                  v249[v248] = v250;
                  *(_DWORD *)(v245 + 4 * v250) = v248;
                  v184 = *(_DWORD *)(a1 + 60) - 1;
                  *(_DWORD *)(a1 + 60) = v184;
                }
              }
              ++v244;
              v246 -= 4;
            }
            while (v246);
            v181 = *v148;
          }
          v185 = *(_QWORD *)(a1 + 64) + 32 * v181;
          v186 = *(unsigned int *)(v185 + 12);
          if ((_DWORD)v186 == v184)
          {
            *(_DWORD *)(a1 + 60) = 0;
            goto LABEL_185;
          }
          v187 = *(unsigned int **)v185;
          if ((_DWORD)v186)
          {
            v188 = *v277;
            v189 = 4 * v186;
            v190 = *(unsigned int **)v185;
            do
            {
              v191 = *v190;
              v192 = *(unsigned int *)(v188 + 4 * v191);
              if (v184 > v192)
              {
                v193 = *v145;
                if ((*v145)[v192] == (_DWORD)v191)
                {
                  v194 = v193[v184 - 1];
                  v193[v192] = v194;
                  *(_DWORD *)(v188 + 4 * v194) = v192;
                  v184 = *(_DWORD *)(a1 + 60) - 1;
                  *(_DWORD *)(a1 + 60) = v184;
                }
              }
              ++v190;
              v189 -= 4;
            }
            while (v189);
          }
          if (v184)
          {
            v195 = *v145;
            v196 = *(unsigned int *)(v185 + 12);
            v197 = v196 + v184;
            if (v197 <= *(unsigned int *)(v185 + 8))
            {
              v206 = v187;
            }
            else
            {
              if (v197 < 5)
              {
                v198 = (void *)(v185 + 16);
                *(_QWORD *)v185 = v185 + 16;
                *(_DWORD *)(v185 + 8) = 4;
              }
              else
              {
                if (v197 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198051C70);
                }
                v198 = (void *)WTF::fastMalloc((WTF *)(4 * v197));
                *(_DWORD *)(v185 + 8) = v197;
                *(_QWORD *)v185 = v198;
              }
              memcpy(v198, v187, 4 * v196);
              v206 = *(unsigned int **)v185;
              if ((unsigned int *)(v185 + 16) != v187 && v187)
              {
                if (v206 == v187)
                {
                  *(_QWORD *)v185 = 0;
                  *(_DWORD *)(v185 + 8) = 0;
                }
                WTF::fastFree((unint64_t)v187, v199, v200, v201, v202, v203, v204, v205);
                v206 = *(unsigned int **)v185;
              }
            }
            v207 = *(_DWORD *)(v185 + 12);
            v208 = 4 * v184;
            do
            {
              v209 = *v195++;
              v206[v207] = v209;
              v207 = *(_DWORD *)(v185 + 12) + 1;
              *(_DWORD *)(v185 + 12) = v207;
              v208 -= 4;
            }
            while (v208);
            v210 = *(unsigned int *)(a1 + 60);
            v211 = 126 - 2 * __clz(v210);
            if ((_DWORD)v210)
              v212 = v211;
            else
              v212 = 0;
            std::__introsort<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,false>(*(unsigned int **)(a1 + 48), (char *)(*(_QWORD *)(a1 + 48) + 4 * v210), (uint64_t)v286, v212, 1);
            if (*(_DWORD *)(a1 + 60))
            {
              v213 = 0;
              v214 = *v145;
              v215 = *v277;
              do
              {
                *(_DWORD *)(v215 + 4 * v214[v213]) = v213;
                ++v213;
              }
              while (v213 < *(unsigned int *)(a1 + 60));
            }
            v216 = v148[21];
            if ((_DWORD)v216)
              break;
          }
        }
      }
LABEL_185:
      if (!v146)
      {
        if ((v275 & 1) == 0)
          goto LABEL_298;
        goto LABEL_177;
      }
    }
    v217 = (unsigned int **)*((_QWORD *)v148 + 9);
    v218 = &v217[v216];
    while (1)
    {
      v219 = *v217;
      v220 = *v276 + 32 * **v217;
      v221 = *(unsigned int *)(v220 + 12);
      if ((_DWORD)v221)
      {
        v222 = *(unsigned int *)(a1 + 60) + v221;
        v223 = HIDWORD(v282);
        if (v222 > HIDWORD(v282) && v222 > v282)
        {
          v240 = v282 + ((unint64_t)v282 >> 2);
          if (v240 >= 0x10)
            v241 = v240 + 1;
          else
            v241 = 16;
          if (v241 <= v222)
            v242 = v222;
          else
            v242 = v241;
          __srca = v281;
          if (v242 < 5)
          {
            v243 = (WTF *)v283;
            v281 = (WTF *)v283;
            LODWORD(v282) = 4;
          }
          else
          {
            if (v242 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x198051C90);
            }
            v243 = (WTF *)WTF::fastMalloc((WTF *)(4 * v242));
            LODWORD(v282) = v242;
            v281 = v243;
          }
          memcpy(v243, __srca, 4 * v223);
          if (v283 != (_QWORD *)__srca && __srca)
          {
            if (v281 == __srca)
            {
              v281 = 0;
              LODWORD(v282) = 0;
            }
            WTF::fastFree((unint64_t)__srca, v10, v11, v12, v13, v14, v15, v16);
          }
        }
        HIDWORD(v282) = v222;
        v224 = *(int **)v220;
        v225 = *(unsigned int *)(v220 + 12);
        v226 = *(_QWORD *)v220 + 4 * v225;
        v227 = *(int **)(a1 + 48);
        v228 = *(unsigned int *)(a1 + 60);
        v229 = &v227[v228];
        v230 = v281;
        v232 = (_DWORD)v225 == 0;
        v231 = v281;
        v232 = v232 || (_DWORD)v228 == 0;
        if (!v232)
        {
          do
          {
LABEL_248:
            v233 = v231;
            while (1)
            {
              v234 = *v224;
              v235 = *v227;
              if (*v224 < *v227)
              {
                *(_DWORD *)v233 = v234;
                v231 = (WTF *)((char *)v233 + 4);
                if ((unint64_t)++v224 >= v226)
                  goto LABEL_255;
                goto LABEL_248;
              }
              if (v234 == v235)
                break;
              v231 = (WTF *)((char *)v233 + 4);
              *(_DWORD *)v233 = v235;
              ++v227;
              v233 = (WTF *)((char *)v233 + 4);
              if (v227 >= v229)
                goto LABEL_257;
            }
            *(_DWORD *)v233 = v234;
            v231 = (WTF *)((char *)v233 + 4);
            ++v224;
            ++v227;
          }
          while ((unint64_t)v224 < v226 && v227 < v229);
LABEL_255:
          v231 = (WTF *)((char *)v233 + 4);
        }
LABEL_257:
        while ((unint64_t)v224 < v226)
        {
          v236 = *v224++;
          *(_DWORD *)v231 = v236;
          v231 = (WTF *)((char *)v231 + 4);
        }
        while (v227 < v229)
        {
          v238 = *v227++;
          *(_DWORD *)v231 = v238;
          v231 = (WTF *)((char *)v231 + 4);
        }
        HIDWORD(v282) = (unint64_t)(v231 - v230) >> 2;
        v239 = *(unsigned int *)(v220 + 12);
        if (HIDWORD(v282) == v239)
          goto LABEL_264;
        if (HIDWORD(v282) <= v239)
        {
          __break(0xC471u);
          JUMPOUT(0x198051AD0);
        }
        WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(v220, (const void **)&v281, v11, v12, v13, v14, v15, v16);
      }
      else
      {
        WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>(*v276 + 32 * **v217, (const void **)(a1 + 48), v11, v12, v13, v14, v15, v16);
      }
      if (v284[0] >= 0)
        v237 = (_QWORD *)(2 * v284[0] + 8);
      else
        v237 = v284;
      v275 = 1;
      *(_QWORD *)((char *)v237 + (((unint64_t)*v219 >> 3) & 0x1FFFFFF8)) |= 1 << *v219;
LABEL_264:
      if (++v217 == v218)
        goto LABEL_185;
    }
  }
LABEL_298:
  v251 = v281;
  if (v283 != (_QWORD *)v281 && v281 != 0)
  {
    v281 = 0;
    LODWORD(v282) = 0;
    WTF::fastFree((unint64_t)v251, v10, v11, v12, v13, v14, v15, v16);
  }
  if ((v284[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v284[0], v10, v11, v12, v13, v14, v15, v16);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v279);
  return a1;
}

void WTF::VectorTypeOperations<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v12;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[4];
      if (v9 + 6 != (_QWORD *)v10 && v10 != 0)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 = *v9;
      if (v9 + 2 != (_QWORD *)*v9 && v12 != 0)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 8;
    }
    while (v9 != a2);
  }
}

uint64_t JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::~Actions(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;

  v9 = *(_QWORD *)(a1 + 32);
  if (a1 + 48 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v11 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::Actions(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  const void *v6;
  int v7;
  int v8;
  const void *v9;
  int v10;
  int v11;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 4;
  v6 = (const void *)(a2 + 16);
  v5 = *(const void **)a2;
  if (v5 == v6)
  {
    memcpy(v4, v5, 4 * *(unsigned int *)(a2 + 12));
  }
  else
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)a1 = v5;
    v7 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 4;
    *(_DWORD *)(a1 + 8) = v7;
  }
  v8 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v8;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 4;
  v9 = *(const void **)(a2 + 32);
  if (v9 == (const void *)(a2 + 48))
  {
    memcpy((void *)(a1 + 48), v9, 4 * *(unsigned int *)(a2 + 44));
  }
  else
  {
    *(_QWORD *)(a2 + 32) = a2 + 48;
    *(_QWORD *)(a1 + 32) = v9;
    v10 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 4;
    *(_DWORD *)(a1 + 40) = v10;
  }
  v11 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 44) = v11;
  return a1;
}

int *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(int *result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  int *v43;
  uint64_t v44;
  int v45;
  int *v46;
  uint64_t v47;
  int v48;
  int *v49;
  uint64_t v50;
  int v51;
  int *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  int *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;

  v4 = **((_QWORD **)result + 2);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      if (a4)
        return result;
      v6 = *(_DWORD *)(a2 + 16);
      v69 = v6;
      if (a3 <= 0xB && ((1 << a3) & 0xF3C) != 0)
        goto LABEL_9;
      v7 = **(_QWORD **)(v4 + 8) + (**(_QWORD **)(v4 + 16) << 6);
      v8 = *(unsigned int *)(v7 + 12);
      if (!(_DWORD)v8)
        goto LABEL_6;
      v10 = *(int **)v7;
      v11 = *(unsigned int *)(v7 + 12);
      while (1)
      {
        v12 = *v10++;
        if (v12 == v6)
          break;
        if (!--v11)
        {
LABEL_6:
          if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
          {
            result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v69);
            v9 = (_DWORD *)(*(_QWORD *)v7 + 4 * *(unsigned int *)(v7 + 12));
            v6 = *result;
          }
          else
          {
            v9 = (_DWORD *)(*(_QWORD *)v7 + 4 * v8);
          }
          *v9 = v6;
          ++*(_DWORD *)(v7 + 12);
          break;
        }
      }
LABEL_9:
      if (a3 - 8 <= 2)
      {
        v30 = **(_QWORD **)(v4 + 8) + (**(_QWORD **)(v4 + 16) << 6);
        v31 = v30 + 32;
        v32 = *(unsigned int *)(v30 + 44);
        if ((_DWORD)v32)
        {
          v43 = *(int **)v31;
          v44 = v32;
          while (1)
          {
            v45 = *v43++;
            if (v45 == v69)
              break;
            if (!--v44)
              goto LABEL_41;
          }
        }
        else
        {
LABEL_41:
          if ((_DWORD)v32 == *(_DWORD *)(v31 + 8))
          {
            result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31, v32 + 1, (unint64_t)&v69);
            v33 = (int *)(*(_QWORD *)v31 + 4 * *(unsigned int *)(v31 + 12));
          }
          else
          {
            v33 = (int *)(*(_QWORD *)v31 + 4 * v32);
            result = &v69;
          }
          *v33 = *result;
          ++*(_DWORD *)(v31 + 12);
        }
      }
      if (a3 >= 2 && (a3 > 0xB || ((1 << a3) & 0xBF0) == 0))
      {
        v23 = **(_QWORD **)(v4 + 8) + (**(_QWORD **)(v4 + 16) << 6);
        v24 = v23 + 64;
        v25 = *(unsigned int *)(v23 + 76);
        if ((_DWORD)v25)
        {
          v46 = *(int **)v24;
          v47 = v25;
          while (1)
          {
            v48 = *v46++;
            if (v48 == v69)
              break;
            if (!--v47)
              goto LABEL_33;
          }
        }
        else
        {
LABEL_33:
          if ((_DWORD)v25 == *(_DWORD *)(v24 + 8))
          {
            result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v25 + 1, (unint64_t)&v69);
            v26 = (int *)(*(_QWORD *)v24 + 4 * *(unsigned int *)(v24 + 12));
          }
          else
          {
            v26 = (int *)(*(_QWORD *)v24 + 4 * v25);
            result = &v69;
          }
          *v26 = *result;
          ++*(_DWORD *)(v24 + 12);
        }
      }
      if ((a3 & 0xFFFFFFFC) == 4)
      {
        v13 = **(_QWORD **)(v4 + 8) + (**(_QWORD **)(v4 + 16) << 6);
        v14 = v13 + 96;
        v15 = *(unsigned int *)(v13 + 108);
        if (!(_DWORD)v15)
          goto LABEL_18;
        v17 = *(int **)v14;
        v18 = v15;
        while (1)
        {
          v19 = *v17++;
          if (v19 == v69)
            break;
          if (!--v18)
            goto LABEL_18;
        }
      }
      return result;
    case 6:
    case 7:
    case 8:
      v20 = *(_DWORD *)(a2 + 16);
      v69 = v20;
      v14 = **(_QWORD **)(v4 + 8) + (**(_QWORD **)(v4 + 16) << 6);
      v21 = *(unsigned int *)(v14 + 12);
      if (!(_DWORD)v21)
        goto LABEL_27;
      v27 = *(int **)v14;
      v28 = *(unsigned int *)(v14 + 12);
      while (1)
      {
        v29 = *v27++;
        if (v29 == v20)
          return result;
        if (!--v28)
        {
LABEL_27:
          if ((_DWORD)v21 == *(_DWORD *)(v14 + 8))
          {
            result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v21 + 1, (unint64_t)&v69);
            v22 = (_DWORD *)(*(_QWORD *)v14 + 4 * *(unsigned int *)(v14 + 12));
            v20 = *result;
          }
          else
          {
            v22 = (_DWORD *)(*(_QWORD *)v14 + 4 * v21);
          }
          *v22 = v20;
          goto LABEL_21;
        }
      }
    case 0xB:
      v34 = *(_DWORD *)(a2 + 16);
      v69 = v34;
      v35 = **(_QWORD **)(v4 + 16);
      v36 = **(_QWORD **)(v4 + 8);
      v37 = v36 + (v35 << 6);
      v38 = *(unsigned int *)(v37 + 12);
      if (!(_DWORD)v38)
        goto LABEL_46;
      v49 = *(int **)v37;
      v50 = *(unsigned int *)(v37 + 12);
      while (1)
      {
        v51 = *v49++;
        if (v51 == v34)
          break;
        if (!--v50)
        {
LABEL_46:
          if ((_DWORD)v38 == *(_DWORD *)(v37 + 8))
          {
            v68 = a2;
            result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v38 + 1, (unint64_t)&v69);
            a2 = v68;
            v39 = (_DWORD *)(*(_QWORD *)v37 + 4 * *(unsigned int *)(v37 + 12));
            v34 = *result;
            v35 = **(_QWORD **)(v4 + 16);
            v36 = **(_QWORD **)(v4 + 8);
          }
          else
          {
            v39 = (_DWORD *)(*(_QWORD *)v37 + 4 * v38);
          }
          *v39 = v34;
          ++*(_DWORD *)(v37 + 12);
          break;
        }
      }
      v40 = *(_DWORD *)(a2 + 20);
      v69 = v40;
      v14 = v36 + (v35 << 6);
      v41 = *(unsigned int *)(v14 + 12);
      if (!(_DWORD)v41)
      {
LABEL_50:
        if ((_DWORD)v41 == *(_DWORD *)(v14 + 8))
        {
          result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v41 + 1, (unint64_t)&v69);
          v42 = (_DWORD *)(*(_QWORD *)v14 + 4 * *(unsigned int *)(v14 + 12));
          v40 = *result;
        }
        else
        {
          v42 = (_DWORD *)(*(_QWORD *)v14 + 4 * v41);
        }
        *v42 = v40;
        goto LABEL_21;
      }
      v52 = *(int **)v14;
      v53 = *(unsigned int *)(v14 + 12);
      while (1)
      {
        v54 = *v52++;
        if (v54 == v40)
          return result;
        if (!--v53)
          goto LABEL_50;
      }
    case 0xC:
    case 0xD:
      v55 = *(_DWORD *)(a2 + 16);
      v69 = v55;
      v56 = **(_QWORD **)(v4 + 16);
      v57 = **(_QWORD **)(v4 + 8);
      v58 = v57 + (v56 << 6);
      v59 = *(unsigned int *)(v58 + 12);
      if (!(_DWORD)v59)
        goto LABEL_72;
      v65 = *(int **)v58;
      v66 = *(unsigned int *)(v58 + 12);
      break;
    default:
      return result;
  }
  while (1)
  {
    v67 = *v65++;
    if (v67 == v55)
      break;
    if (!--v66)
    {
LABEL_72:
      if ((_DWORD)v59 == *(_DWORD *)(v58 + 8))
      {
        result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v57 + (v56 << 6), v59 + 1, (unint64_t)&v69);
        v60 = (_DWORD *)(*(_QWORD *)v58 + 4 * *(unsigned int *)(v58 + 12));
        v55 = *result;
        v56 = **(_QWORD **)(v4 + 16);
        v57 = **(_QWORD **)(v4 + 8);
      }
      else
      {
        v60 = (_DWORD *)(*(_QWORD *)v58 + 4 * v59);
      }
      *v60 = v55;
      ++*(_DWORD *)(v58 + 12);
      break;
    }
  }
  v61 = v57 + (v56 << 6);
  v14 = v61 + 96;
  v15 = *(unsigned int *)(v61 + 108);
  if ((_DWORD)v15)
  {
    v62 = *(int **)v14;
    v63 = v15;
    while (1)
    {
      v64 = *v62++;
      if (v64 == v69)
        break;
      if (!--v63)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    if ((_DWORD)v15 == *(_DWORD *)(v14 + 8))
    {
      result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v69);
      v16 = (int *)(*(_QWORD *)v14 + 4 * *(unsigned int *)(v14 + 12));
    }
    else
    {
      v16 = (int *)(*(_QWORD *)v14 + 4 * v15);
      result = &v69;
    }
    *v16 = *result;
LABEL_21:
    ++*(_DWORD *)(v14 + 12);
  }
  return result;
}

void WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  _OWORD *v12;
  __int128 v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned int v76;
  unsigned int v77;
  int v78;
  char *v80;
  int v81;
  int v83;
  int v84;
  int v86;
  int v87;
  int v89;
  int v90;
  int v92;
  int v93;
  int v95;
  int v96;
  int v98;
  int v99;
  int v101;
  int v102;
  int v104;
  int v105;
  int v107;
  size_t v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t i;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  int v123;
  int v125;
  int v126;
  int v128;

  v7 = *a2;
  v6 = a2[1];
  if (v6 != 8)
  {
LABEL_68:
    if (3 * v6 <= (4 * v7))
    {
      v107 = 2 * v6;
      v108 = 4 * (2 * v6);
      v109 = a2 + 2;
      v128 = v6;
      if (v6 != 8)
        v109 = (_QWORD *)*v109;
      v10 = (char *)WTF::fastMalloc((WTF *)(4 * (2 * v6)));
      memset(v10, 255, v108);
      a2[1] = v107;
      if (!v128)
        goto LABEL_143;
      for (i = 0; i != v128; ++i)
      {
        v118 = *((_DWORD *)v109 + i);
        if (v118 != -1)
        {
          v119 = 9 * ((v118 + ~(v118 << 15)) ^ ((v118 + ~(v118 << 15)) >> 10));
          v120 = (v119 ^ (v119 >> 6)) + ~((v119 ^ (v119 >> 6)) << 11);
          v121 = a2[1] - 1;
          v122 = v121 & (v120 ^ HIWORD(v120));
          v123 = *(_DWORD *)&v10[4 * v122];
          if (v123 != -1 && v123 != v118)
          {
            v125 = 1;
            do
            {
              v122 = ((_DWORD)v122 + v125) & v121;
              v126 = *(_DWORD *)&v10[4 * v122];
              ++v125;
            }
            while (v126 != -1 && v126 != v118);
          }
          *(_DWORD *)&v10[4 * v122] = v118;
        }
      }
      if (v128 != 8)
LABEL_143:
        WTF::fastFree((unint64_t)v109, v110, v111, v112, v113, v114, v115, v116);
      *((_QWORD *)a2 + 1) = v10;
      v6 = a2[1];
    }
    else
    {
      v10 = (char *)*((_QWORD *)a2 + 1);
    }
    v76 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v77 = (v76 ^ (v76 >> 6)) + ~((v76 ^ (v76 >> 6)) << 11);
    v7 = (v6 - 1) & (v77 ^ HIWORD(v77));
    v78 = *(_DWORD *)&v10[4 * v7];
    if (v78 != -1 && v78 != a3)
    {
      v81 = 1;
      do
      {
        v7 = ((_DWORD)v7 + v81) & (v6 - 1);
        v78 = *(_DWORD *)&v10[4 * v7];
        ++v81;
      }
      while (v78 != -1 && v78 != a3);
    }
    if (v78 == a3)
    {
      v11 = 0;
    }
    else
    {
      v80 = &v10[4 * v7];
      *(_DWORD *)v80 = a3;
      v6 = a2[1];
      ++*a2;
      v10 = (char *)*((_QWORD *)a2 + 1);
      v7 = (unint64_t)(v80 - v10) >> 2;
      v11 = 1;
    }
    goto LABEL_8;
  }
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *a2;
    v10 = (char *)(a2 + 2);
    do
    {
      if (a2[v8 + 2] == a3)
      {
        v11 = 0;
        v6 = 8;
        LODWORD(v7) = v8;
        goto LABEL_8;
      }
      ++v8;
    }
    while (v7 != v8);
    if (v7 <= 7)
      goto LABEL_7;
    v12 = (_OWORD *)WTF::fastMalloc((WTF *)0x100);
    *(_QWORD *)&v13 = -1;
    *((_QWORD *)&v13 + 1) = -1;
    *v12 = v13;
    v12[1] = v13;
    v12[2] = v13;
    v12[3] = v13;
    v12[4] = v13;
    v12[5] = v13;
    v12[6] = v13;
    v12[7] = v13;
    v12[8] = v13;
    v12[9] = v13;
    v12[10] = v13;
    v12[11] = v13;
    v12[12] = v13;
    v12[13] = v13;
    v12[14] = v13;
    v12[15] = v13;
    v6 = 64;
    a2[1] = 64;
    v14 = a2[2];
    if (v14 != -1)
    {
      v15 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
      v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
      v17 = (v16 ^ BYTE2(v16)) & 0x3F;
      v18 = *((_DWORD *)v12 + v17);
      if (v18 != -1 && v18 != v14)
      {
        v83 = 1;
        do
        {
          v17 = ((_BYTE)v17 + (_BYTE)v83) & 0x3F;
          v84 = *((_DWORD *)v12 + v17);
          ++v83;
        }
        while (v84 != -1 && v84 != v14);
      }
      *((_DWORD *)v12 + v17) = v14;
      v6 = a2[1];
    }
    v20 = a2[3];
    if (v20 != -1)
    {
      v21 = 9 * ((v20 + ~(v20 << 15)) ^ ((v20 + ~(v20 << 15)) >> 10));
      v22 = (v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11);
      v23 = v22 ^ HIWORD(v22);
      v24 = v6 - 1;
      v25 = (v6 - 1) & v23;
      v26 = *((_DWORD *)v12 + v25);
      if (v26 != -1 && v26 != v20)
      {
        v86 = 1;
        do
        {
          v25 = ((_DWORD)v25 + v86) & v24;
          v87 = *((_DWORD *)v12 + v25);
          ++v86;
        }
        while (v87 != -1 && v87 != v20);
      }
      *((_DWORD *)v12 + v25) = v20;
      v6 = a2[1];
    }
    v28 = a2[4];
    if (v28 != -1)
    {
      v29 = 9 * ((v28 + ~(v28 << 15)) ^ ((v28 + ~(v28 << 15)) >> 10));
      v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
      v31 = v30 ^ HIWORD(v30);
      v32 = v6 - 1;
      v33 = (v6 - 1) & v31;
      v34 = *((_DWORD *)v12 + v33);
      if (v34 != -1 && v34 != v28)
      {
        v89 = 1;
        do
        {
          v33 = ((_DWORD)v33 + v89) & v32;
          v90 = *((_DWORD *)v12 + v33);
          ++v89;
        }
        while (v90 != -1 && v90 != v28);
      }
      *((_DWORD *)v12 + v33) = v28;
      v6 = a2[1];
    }
    v36 = a2[5];
    if (v36 != -1)
    {
      v37 = 9 * ((v36 + ~(v36 << 15)) ^ ((v36 + ~(v36 << 15)) >> 10));
      v38 = (v37 ^ (v37 >> 6)) + ~((v37 ^ (v37 >> 6)) << 11);
      v39 = v38 ^ HIWORD(v38);
      v40 = v6 - 1;
      v41 = (v6 - 1) & v39;
      v42 = *((_DWORD *)v12 + v41);
      if (v42 != -1 && v42 != v36)
      {
        v92 = 1;
        do
        {
          v41 = ((_DWORD)v41 + v92) & v40;
          v93 = *((_DWORD *)v12 + v41);
          ++v92;
        }
        while (v93 != -1 && v93 != v36);
      }
      *((_DWORD *)v12 + v41) = v36;
      v6 = a2[1];
    }
    v44 = a2[6];
    if (v44 != -1)
    {
      v45 = 9 * ((v44 + ~(v44 << 15)) ^ ((v44 + ~(v44 << 15)) >> 10));
      v46 = (v45 ^ (v45 >> 6)) + ~((v45 ^ (v45 >> 6)) << 11);
      v47 = v46 ^ HIWORD(v46);
      v48 = v6 - 1;
      v49 = (v6 - 1) & v47;
      v50 = *((_DWORD *)v12 + v49);
      if (v50 != -1 && v50 != v44)
      {
        v95 = 1;
        do
        {
          v49 = ((_DWORD)v49 + v95) & v48;
          v96 = *((_DWORD *)v12 + v49);
          ++v95;
        }
        while (v96 != -1 && v96 != v44);
      }
      *((_DWORD *)v12 + v49) = v44;
      v6 = a2[1];
    }
    v52 = a2[7];
    if (v52 != -1)
    {
      v53 = 9 * ((v52 + ~(v52 << 15)) ^ ((v52 + ~(v52 << 15)) >> 10));
      v54 = (v53 ^ (v53 >> 6)) + ~((v53 ^ (v53 >> 6)) << 11);
      v55 = v54 ^ HIWORD(v54);
      v56 = v6 - 1;
      v57 = (v6 - 1) & v55;
      v58 = *((_DWORD *)v12 + v57);
      if (v58 != -1 && v58 != v52)
      {
        v98 = 1;
        do
        {
          v57 = ((_DWORD)v57 + v98) & v56;
          v99 = *((_DWORD *)v12 + v57);
          ++v98;
        }
        while (v99 != -1 && v99 != v52);
      }
      *((_DWORD *)v12 + v57) = v52;
      v6 = a2[1];
    }
    v60 = a2[8];
    if (v60 != -1)
    {
      v61 = 9 * ((v60 + ~(v60 << 15)) ^ ((v60 + ~(v60 << 15)) >> 10));
      v62 = (v61 ^ (v61 >> 6)) + ~((v61 ^ (v61 >> 6)) << 11);
      v63 = v62 ^ HIWORD(v62);
      v64 = v6 - 1;
      v65 = (v6 - 1) & v63;
      v66 = *((_DWORD *)v12 + v65);
      if (v66 != -1 && v66 != v60)
      {
        v101 = 1;
        do
        {
          v65 = ((_DWORD)v65 + v101) & v64;
          v102 = *((_DWORD *)v12 + v65);
          ++v101;
        }
        while (v102 != -1 && v102 != v60);
      }
      *((_DWORD *)v12 + v65) = v60;
      v6 = a2[1];
    }
    v68 = a2[9];
    if (v68 != -1)
    {
      v69 = 9 * ((v68 + ~(v68 << 15)) ^ ((v68 + ~(v68 << 15)) >> 10));
      v70 = (v69 ^ (v69 >> 6)) + ~((v69 ^ (v69 >> 6)) << 11);
      v71 = v70 ^ HIWORD(v70);
      v72 = v6 - 1;
      v73 = (v6 - 1) & v71;
      v74 = *((_DWORD *)v12 + v73);
      if (v74 != -1 && v74 != v68)
      {
        v104 = 1;
        do
        {
          v73 = ((_DWORD)v73 + v104) & v72;
          v105 = *((_DWORD *)v12 + v73);
          ++v104;
        }
        while (v105 != -1 && v105 != v68);
      }
      *((_DWORD *)v12 + v73) = v68;
      v6 = a2[1];
    }
    LODWORD(v7) = *a2;
    *((_QWORD *)a2 + 1) = v12;
    goto LABEL_68;
  }
  v9 = 0;
LABEL_7:
  *a2 = v7 + 1;
  a2[v9 + 2] = a3;
  v11 = 1;
  v6 = 8;
  v10 = (char *)(a2 + 2);
LABEL_8:
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v6;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v11;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(_QWORD *result, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t ***v39;
  uint64_t ***v40;

  v32[1] = result;
  v33 = a4;
  v32[0] = &v33;
  v36 = v32;
  if (a2)
  {
    v37 = (uint64_t *)&v36;
    v34 = &v37;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v38 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v39 = &v38;
      v40 = &v34;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v38);
    }
    else
    {
      v6 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v6 - 1) * v6) >> 1);
        do
        {
          if (v7 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198052DD8);
          }
          v9 = v8[v7];
          if ((v9 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198052DC0);
          }
          v10 = (uint64_t)&(*a2)[4 * v7];
          v11 = *(char *)(v10 + 8);
          v12 = *(_DWORD *)(v10 + 16);
          if (v11 == 1)
          {
            if ((v9 & 0xC) == 4 && (v9 & 0x10) == 0)
            {
              v13 = *(_QWORD *)(*v37 + 8);
              v14 = **(_QWORD **)*v37;
              v15 = *(unsigned int *)(v14 + 60);
              if ((_DWORD)v15)
              {
                v16 = *(unsigned int **)(v14 + 48);
                v17 = 4 * v15;
                do
                {
                  v18 = *v16;
                  v19 = *(_QWORD *)(v13 + 368);
                  if ((int)*v16 <= 0)
                  {
                    if (*(_DWORD *)(v19 + 28) <= -v18)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198052DE0);
                    }
                  }
                  else if (v18 >= *(_DWORD *)(v19 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198052DC8);
                  }
                  v17 -= 4;
                }
                while (v17);
              }
              v20 = *(unsigned int *)(v13 + 268);
              if ((_DWORD)v20)
              {
                v21 = *(unsigned __int16 **)(v13 + 256);
                v22 = 4 * v20;
                do
                {
                  v23 = *v21;
                  v21 += 2;
                  v22 -= 4;
                }
                while (v22);
              }
            }
          }
          else if ((v11 - 12) < 2)
          {
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
  if (a3)
  {
    v37 = (uint64_t *)&v36;
    v34 = &v37;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v38 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v39 = &v38;
      v40 = &v34;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v38);
    }
    else
    {
      v24 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v24)
      {
        v25 = 0;
        v26 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v24 - 1) * v24) >> 1);
        v27 = 1;
        while (1)
        {
          if (v25 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198052DD0);
          }
          v28 = v26[v25];
          if ((v28 >> 5) - 1 >= 5)
            break;
          v29 = &(*a3)[v27];
          if (*(_BYTE *)v29 == 1 && (v28 & 0xF) - 8 <= 2)
          ++v25;
          v27 += 4;
          if (v24 == v25)
            goto LABEL_37;
        }
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x198052DA0);
      }
    }
  }
LABEL_37:
  v38 = (uint64_t **)v32;
  v39 = (uint64_t ***)&v37;
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    LOBYTE(v37) = 4;
    if (!*((_DWORD *)a2 + 3))
      goto LABEL_53;
    v34 = (uint64_t **)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v35 = v31;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v37) = 8;
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198052DE8);
    }
    v34 = (uint64_t **)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v35 = v30;
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;

  v4 = *(char *)(a2 + 8);
  v5 = ***(uint64_t ****)(result + 16);
  if (v4 == 1)
  {
    if ((a3 & 0xFC) != 4)
      return result;
    v6 = *v5;
    v9 = *(_DWORD *)(a2 + 16);
    v7 = &v9;
    v8 = a4;
  }
  if ((v4 - 12) < 2)
  {
    v6 = *v5;
    v10 = *(_DWORD *)(a2 + 16);
    v7 = &v10;
    v8 = 0;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t i;
  unsigned int v23;
  uint64_t v24;
  _QWORD v25[3];
  char v26;
  _QWORD *v27;
  _QWORD **v28;
  void *v29;
  void **v30;
  _QWORD *v31;

  v26 = a4;
  if (!a3)
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = **(_QWORD **)result;
    v6 = **(_QWORD **)(result + 8);
    v25[0] = &v26;
    v25[1] = a2;
    v25[2] = v4;
    if (v5)
    {
      v27 = v25;
      v28 = &v27;
      if ((*(__int16 *)(v5 + 120) - 446) <= 5)
      {
        v29 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v30 = &v29;
        v31 = &v28;
        result = JSC::B3::Air::Inst::forEachArgCustom(v5, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v29);
      }
      else
      {
        v7 = *(unsigned int *)(v5 + 12);
        if ((_DWORD)v7)
        {
          v8 = 0;
          v9 = (char *)&JSC::B3::Air::g_formTable
             + 21 * *(__int16 *)(v5 + 120)
             + ((unint64_t)((v7 - 1) * v7) >> 1);
          v10 = 8;
          do
          {
            if (v8 >= *(unsigned int *)(v5 + 12))
              goto LABEL_39;
            v11 = v9[v8];
            v12 = (v11 >> 5) - 1;
            if (v12 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x198053118);
            }
            v13 = 0xFu >> v12;
            v14 = (char *)(*(_QWORD *)v5 + v10);
            v15 = *v14;
            v16 = *((_DWORD *)v14 + 2);
            if (v15 == 1)
            {
              if ((v11 & 0xC) != 4 || (v11 & 0x10) != 0)
                goto LABEL_14;
              result = v27[2];
              if ((v13 & 1) == 0)
                goto LABEL_13;
            }
            else
            {
              if ((v15 - 12) >= 2)
                goto LABEL_14;
              v17 = v13 & 1;
              result = v27[2];
              if ((v11 & 0xF) == 0xB && v17 == 0)
              {
LABEL_13:
                goto LABEL_14;
              }
            }
            if (!*(_BYTE *)*v27)
              goto LABEL_13;
LABEL_14:
            ++v8;
            v10 += 32;
          }
          while (v7 != v8);
        }
      }
    }
    if (v6)
    {
      v27 = v25;
      v28 = &v27;
      if ((*(__int16 *)(v6 + 120) - 446) <= 5)
      {
        v29 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v30 = &v29;
        v31 = &v28;
        return JSC::B3::Air::Inst::forEachArgCustom(v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v29);
      }
      else
      {
        v19 = *(unsigned int *)(v6 + 12);
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v6 + 120)
              + ((unint64_t)((v19 - 1) * v19) >> 1);
          for (i = 8; ; i += 32)
          {
            if (v20 >= *(unsigned int *)(v6 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198053120);
            }
            v23 = v21[v20];
            if ((v23 >> 5) - 1 >= 5)
              break;
            v24 = *(_QWORD *)v6 + i;
            if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
            if (v19 == ++v20)
              return result;
          }
LABEL_39:
          __break(0xC471u);
          JUMPOUT(0x1980530F8);
        }
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4, unsigned int a5)
{
  int v5;
  uint64_t v6;

  v5 = *(char *)(a2 + 8);
  v6 = ***(_QWORD ***)(result + 16);
  if (v5 == 1)
  {
    if ((a3 & 0xFC) != 4 || a4)
      return result;
    result = *(_QWORD *)(v6 + 16);
  }
  else
  {
    if ((v5 - 12) >= 2)
      return result;
    result = *(_QWORD *)(v6 + 16);
    if (a3 != 11)
      goto LABEL_6;
  }
  if (a5 > 3)
LABEL_6:
  if (!**(_BYTE **)v6)
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator() const(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, unsigned __int16 a2, int a3, unsigned int a4)
{
  if (!a3 && (a4 > 3 || !**(_BYTE **)result))
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::addEdge(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 != a3)
  {
    v32 = v3;
    v33 = v4;
    v5 = a2;
    v6 = result;
    v31 = a2;
    v30 = a3;
    v7 = a2;
    v8 = (uint64_t *)(result + 24);
    v9 = *(_QWORD *)(result + 24);
    v10 = *(unsigned __int16 *)(result + 36);
    v11 = a3 + *(unsigned __int16 *)(result + 36) * (unint64_t)a2;
    if (v9 >= 0)
      v12 = 2 * v9 + 8;
    else
      v12 = result + 24;
    v13 = (v11 >> 3) & 0x3FFFFFF8;
    v14 = *(_QWORD *)(v12 + v13);
    v15 = 1 << v11;
    v16 = v15 & v14;
    *(_QWORD *)(v12 + v13) = v15 | v14;
    v17 = *(_DWORD *)(result + 32);
    if ((v15 & v14) == 0)
      ++v17;
    v18 = a2 + v10 * (unint64_t)a3;
    if (*v8 >= 0)
      v19 = 2 * *v8 + 8;
    else
      v19 = result + 24;
    v20 = (v18 >> 3) & 0x3FFFFFF8;
    v21 = 1 << v18;
    v22 = *(_QWORD *)(v19 + v20);
    *(_QWORD *)(v19 + v20) = v22 | v21;
    if ((v22 & v21) == 0)
      ++v17;
    *(_DWORD *)(result + 32) = v17;
    if (!v16)
    {
      v23 = *(unsigned __int16 *)(result + 16);
      if (v23 < a2)
      {
        v24 = *(_QWORD *)(result + 40) + 16 * a2;
        v25 = *(unsigned int *)(v24 + 12);
        if ((_DWORD)v25 == *(_DWORD *)(v24 + 8))
        {
          result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(result + 40) + 16 * a2, v25 + 1, (unint64_t)&v30);
          v25 = *(unsigned int *)(v24 + 12);
          *(_WORD *)(*(_QWORD *)v24 + 2 * v25) = *(_WORD *)result;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v24 + 2 * v25) = a3;
        }
        v26 = *(_QWORD *)(v6 + 56);
        v27 = *(_WORD *)(v26 + 2 * v7);
        *(_DWORD *)(v24 + 12) = v25 + 1;
        *(_WORD *)(v26 + 2 * v7) = v27 + 1;
        a3 = v30;
        v23 = *(unsigned __int16 *)(v6 + 16);
      }
      if (v23 < a3)
      {
        v28 = *(_QWORD *)(v6 + 40) + 16 * a3;
        v29 = *(unsigned int *)(v28 + 12);
        if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
        {
          result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, v29 + 1, (unint64_t)&v31);
          v29 = *(unsigned int *)(v28 + 12);
          *(_WORD *)(*(_QWORD *)v28 + 2 * v29) = *(_WORD *)result;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v28 + 2 * v29) = v5;
        }
        *(_DWORD *)(v28 + 12) = v29 + 1;
        ++*(_WORD *)(*(_QWORD *)(v6 + 56) + 2 * v30);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t StatusReg;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *casual;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 4)
    v8 = v7 + 1;
  else
    v8 = 4;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 31))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = 2 * v9;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v13 = *(_QWORD *)(StatusReg + 752);
    if (v13)
    {
      v14 = (unint64_t)(v11 + 15) >> 4;
      if (v9 <= 0xD0)
      {
        v15 = 23 * v14 + 7;
      }
      else
      {
        if (v9 > 0x1388)
          goto LABEL_14;
        v15 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v14 + 626);
        if (*(_DWORD *)(v13 + 8052) <= v15)
          goto LABEL_14;
      }
      v17 = v13 + 8 * v15;
      v18 = v17 + 8064;
      *(_BYTE *)(v17 + 8064) = 1;
      v19 = *(unsigned int *)(v17 + 8080);
      if ((_DWORD)v19)
      {
        *(_DWORD *)(v18 + 16) = v19 - *(_DWORD *)(v18 + 20);
        casual = (void *)(*(_QWORD *)(v18 + 8) - v19);
      }
      else
      {
        v27 = *(_QWORD *)(v18 + 40);
        v28 = *(_QWORD *)(v18 + 24);
        if (!v27)
        {
          if (*(_BYTE *)(v18 + 5) == 6)
          {
            v30 = *(unsigned int *)(v18 + 32);
            v31 = *(_DWORD *)(v18 + 36);
            if (v30 < v31)
            {
              *(_QWORD *)(v18 + 8 * v30 + 56) = 0;
              v32 = (unint64_t *)(8 * v15 + 8 * v30 + v13 + 8128);
              v33 = v31 - 1 - v30;
              while (v33)
              {
                v28 += 1024;
                v35 = *v32++;
                v34 = v35;
                LODWORD(v30) = v30 + 1;
                --v33;
                if (v35)
                {
                  v27 = __rbit64(v34);
                  *(_DWORD *)(v18 + 32) = v30;
                  *(_QWORD *)(v18 + 24) = v28;
                  goto LABEL_29;
                }
              }
              *(_DWORD *)(v18 + 32) = v31;
            }
          }
          *(_BYTE *)v18 = 0;
          goto LABEL_14;
        }
LABEL_29:
        v29 = __clz(v27);
        *(_QWORD *)(v18 + 40) = v27 & ~(0x8000000000000000 >> v29);
        casual = (void *)(v28 + 16 * v29);
      }
      *(_BYTE *)v18 = 0;
LABEL_19:
      *(_DWORD *)(v4 + 8) = v9;
      *(_QWORD *)v4 = casual;
      memcpy(casual, (const void *)v5, 2 * v10);
      if (!v5)
        return v3;
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      v25 = *(_QWORD *)(StatusReg + 752);
      if (!v25)
      {
        pas_try_deallocate_slow_no_cache(v5, (uint64_t)&bmalloc_heap_config, 1);
        return v3;
      }
      if (!(v5 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v5 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v5)) & 1) != 0)
      {
LABEL_25:
        v26 = *(unsigned int *)(v25 + 8000);
        if (v26 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v25, v5, (os_unfair_lock_s *)5, v20, v21, v22, v23, v24);
        }
        else
        {
          *(_QWORD *)(v25 + 8 * v26) = v5 | 0x5000000000000;
          *(_DWORD *)(v25 + 8000) = v26 + 1;
        }
        return v3;
      }
      if (v5 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v5 >> 24)
      {
        v20 = 0;
      }
      else
      {
        v20 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v5 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v5) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v20 == 1)
          goto LABEL_25;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v25, v5, 1, v20, v21, v22, v23, v24);
      return v3;
    }
LABEL_14:
    casual = (void *)bmalloc_allocate_casual(v11, 1);
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 4)
    v4 = v3 + 1;
  else
    v4 = 4;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 2 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v5 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 4 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 4 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      if (v5 <= 0x1F)
      {
        v6 = v5 + 1;
        v7 = (uint64_t)(*a2)[1];
        v8 = ***a2;
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v10 = *(unsigned int **)(v8 + 48);
          v11 = 4 * v9;
          if (((1 << v5) & *v4) != 0)
          {
            while (1)
            {
              v12 = *v10;
              v13 = *(_QWORD *)(v7 + 368);
              if ((int)*v10 <= 0)
              {
                if (*(_DWORD *)(v13 + 28) <= -v12)
                  goto LABEL_24;
              }
              else if (v12 >= *(_DWORD *)(v13 + 12))
              {
                goto LABEL_24;
              }
              v11 -= 4;
              if (!v11)
                goto LABEL_19;
            }
          }
          do
          {
            v16 = *v10;
            v15 = *(_QWORD *)(v7 + 368);
            if ((int)*v10 < 1)
            {
              v14 = -v16;
              if (v14 >= *(unsigned int *)(v15 + 28))
                goto LABEL_24;
              v15 += 16;
            }
            else
            {
              v14 = *v10;
              if (v16 >= *(_DWORD *)(v15 + 12))
              {
LABEL_24:
                __break(0xC471u);
                JUMPOUT(0x198053A90);
              }
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v15 + 2 * v14) >= 4u)
            ++v10;
            v11 -= 4;
          }
          while (v11);
        }
LABEL_19:
        v17 = *(unsigned int *)(v7 + 268);
        if ((_DWORD)v17)
        {
          v18 = *(unsigned __int16 **)(v7 + 256);
          v19 = 4 * v17;
          do
          {
            v20 = *v18;
            v18 += 2;
            v19 -= 4;
          }
          while (v19);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  int v4;
  int v5;
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;

  v4 = *(char *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = ***(uint64_t ******)(result + 16);
  if (v4 == 1)
  {
    if ((a3 & 0xFC) == 4 && !a4)
    {
      v7 = (uint64_t)(*v6)[1];
      v8 = ***v6;
      v9 = *(unsigned int *)(v8 + 60);
      if ((_DWORD)v9)
      {
        v10 = *(unsigned int **)(v8 + 48);
        v11 = 4 * v9;
        do
        {
          v12 = *v10;
          v13 = *(_QWORD *)(v7 + 368);
          if ((int)*v10 <= 0)
          {
            if (*(_DWORD *)(v13 + 28) <= -v12)
            {
LABEL_19:
              __break(0xC471u);
              JUMPOUT(0x198053B48);
            }
          }
          else if (v12 >= *(_DWORD *)(v13 + 12))
          {
            goto LABEL_19;
          }
          v11 -= 4;
        }
        while (v11);
      }
      v14 = *(unsigned int *)(v7 + 268);
      if ((_DWORD)v14)
      {
        v15 = *(unsigned __int16 **)(v7 + 256);
        v16 = 4 * v14;
        do
        {
          v17 = *v15;
          v15 += 2;
          v16 -= 4;
        }
        while (v16);
      }
    }
  }
  else if ((v4 - 12) < 2)
  {
  }
  return result;
}

uint64_t JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Tmp,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, unsigned int a2, uint64_t a3, unsigned __int16 a4)
{
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;

  if (a2)
  {
    v6 = (unsigned int *)result;
    v7 = 4 * a2;
    do
    {
      v8 = *v6;
      v9 = *(_QWORD *)(a3 + 368);
      if ((int)*v6 <= 0)
      {
        if (*(_DWORD *)(v9 + 28) <= -v8)
        {
LABEL_13:
          __break(0xC471u);
          JUMPOUT(0x198053C3CLL);
        }
      }
      else if (v8 >= *(_DWORD *)(v9 + 12))
      {
        goto LABEL_13;
      }
      v7 -= 4;
    }
    while (v7);
  }
  v10 = *(unsigned int *)(a3 + 268);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned __int16 **)(a3 + 256);
    v12 = 4 * v10;
    do
    {
      v13 = *v11;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
  }
  return result;
}

uint64_t JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, unsigned __int16 a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int v14;

  if (!a3)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = **(_QWORD **)result;
    v6 = *(unsigned int *)(v5 + 60);
    if ((_DWORD)v6)
    {
      v7 = *(unsigned int **)(v5 + 48);
      v8 = 4 * v6;
      do
      {
        v9 = *v7;
        v10 = *(_QWORD *)(v4 + 368);
        if ((int)*v7 <= 0)
        {
          if (*(_DWORD *)(v10 + 28) <= -v9)
          {
LABEL_14:
            __break(0xC471u);
            JUMPOUT(0x198053D08);
          }
        }
        else if (v9 >= *(_DWORD *)(v10 + 12))
        {
          goto LABEL_14;
        }
        v8 -= 4;
      }
      while (v8);
    }
    v11 = *(unsigned int *)(v4 + 268);
    if ((_DWORD)v11)
    {
      v12 = *(unsigned __int16 **)(v4 + 256);
      v13 = 4 * v11;
      do
      {
        v14 = *v12;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  return result;
}

uint64_t WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;

  v9 = *(unsigned int *)(a1 + 92);
  v10 = *(_QWORD *)(a1 + 80);
  if ((_DWORD)v9)
  {
    v11 = 32 * v9;
    v12 = v10 + 16;
    do
    {
      v13 = *(_QWORD *)(v12 - 16);
      if (v12 != v13 && v13 != 0)
      {
        *(_QWORD *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 32;
      v11 -= 32;
    }
    while (v11);
    v10 = *(_QWORD *)(a1 + 80);
  }
  if (v10)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(unsigned int *)(a1 + 76);
  v16 = *(_QWORD *)(a1 + 64);
  if ((_DWORD)v15)
  {
    v17 = 32 * v15;
    v18 = v16 + 16;
    do
    {
      v19 = *(_QWORD *)(v18 - 16);
      if (v18 != v19 && v19 != 0)
      {
        *(_QWORD *)(v18 - 16) = 0;
        *(_DWORD *)(v18 - 8) = 0;
        WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 += 32;
      v17 -= 32;
    }
    while (v17);
    v16 = *(_QWORD *)(a1 + 64);
  }
  if (v16)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *(_QWORD *)(a1 + 48);
  if (v21)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *(_QWORD *)(a1 + 32);
  if (v22)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = *(unsigned int *)(a1 + 20);
  v24 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v23)
  {
    v25 = v24 + 16 * v23;
    do
    {
      v26 = *(unsigned int *)(v24 + 12);
      v27 = *(_QWORD *)v24;
      if ((_DWORD)v26)
      {
        v28 = v26 << 6;
        v29 = v27 + 48;
        do
        {
          v30 = *(_QWORD *)(v29 - 16);
          if (v29 != v30 && v30 != 0)
          {
            *(_QWORD *)(v29 - 16) = 0;
            *(_DWORD *)(v29 - 8) = 0;
            WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
          }
          v32 = *(_QWORD *)(v29 - 48);
          if (v29 - 32 != v32 && v32 != 0)
          {
            *(_QWORD *)(v29 - 48) = 0;
            *(_DWORD *)(v29 - 40) = 0;
            WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
          }
          v29 += 64;
          v28 -= 64;
        }
        while (v28);
        v27 = *(_QWORD *)v24;
      }
      if (v27)
      {
        *(_QWORD *)v24 = 0;
        *(_DWORD *)(v24 + 8) = 0;
        WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
      }
      v24 += 16;
    }
    while (v24 != v25);
    v24 = *(_QWORD *)(a1 + 8);
  }
  if (v24)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  float v21;
  uint64_t *v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _DWORD *v78;
  unsigned int v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unsigned __int16 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int16 v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _WORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned __int16 v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int16 *v120;
  int v121;
  unsigned __int16 *v122;
  int v123;
  uint64_t v124;
  int v125;
  __int16 v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  _WORD *v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _WORD *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _WORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  uint64_t v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 *v193;
  uint64_t v194;
  unsigned __int16 v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  _WORD *v201;
  uint64_t v202;
  _WORD *v203;
  unsigned int v204;
  int v205;
  unsigned int v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v244;
  char *v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _WORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  _DWORD *v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  unint64_t v302;
  _WORD *v303;
  _WORD *v304;
  uint64_t v305;
  _WORD *v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  unint64_t v319;
  unsigned int v320;
  unsigned __int16 v321;
  void *v322;
  _QWORD *v323;
  uint64_t *v324;
  uint64_t v325;
  _QWORD *v326;
  WTF::BitVector *v327;
  _QWORD *v328;
  uint64_t v329;
  _QWORD *v330;
  unsigned int *v331;
  uint64_t *v332;
  _QWORD *v333;
  unsigned int *v334;
  char v335[30];
  unsigned __int16 v336;
  unsigned int v337[6];
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;

  v341 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t *)(a1 + 352);
  v10 = (*(_DWORD *)(a1 + 340) + *(_DWORD *)(a1 + 324));
  v11 = *(_QWORD *)(a1 + 352);
  if (v11 < 0)
    v12 = 63;
  else
    v12 = *(_QWORD *)(2 * v11);
  if (v12 < v10)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 352), v10, 0);
  v331 = (unsigned int *)(a1 + 324);
  v333 = (_QWORD *)(a1 + 296);
  v334 = (unsigned int *)(a1 + 340);
  v330 = (_QWORD *)(a1 + 168);
  v22 = (uint64_t *)(a1 + 160);
  v23 = (unint64_t *)(a1 + 360);
  v332 = (uint64_t *)(a1 + 288);
  v328 = (_QWORD *)(a1 + 328);
  v326 = (_QWORD *)(a1 + 312);
  v327 = (WTF::BitVector *)(a1 + 200);
  v323 = (_QWORD *)(a1 + 184);
  v324 = (uint64_t *)(a1 + 72);
  v24 = *(_DWORD *)(a1 + 196);
  while (1)
  {
    do
    {
LABEL_6:
      if (v24)
      {
        v25 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 184) + 2 * v24 - 2);
        *(_DWORD *)(a1 + 196) = v24 - 1;
        LOWORD(v338) = v25;
        v26 = *(unsigned int *)(a1 + 180);
        if ((_DWORD)v26 == *(_DWORD *)(a1 + 176))
        {
          v140 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v330, v26 + 1, (unint64_t)&v338);
          v26 = *(unsigned int *)(a1 + 180);
          *(_WORD *)(*(_QWORD *)(a1 + 168) + 2 * v26) = *v140;
          v25 = (unsigned __int16)v338;
        }
        else
        {
          *(_WORD *)(*v330 + 2 * v26) = v25;
        }
        *(_DWORD *)(a1 + 180) = v26 + 1;
        v27 = *(_QWORD *)(a1 + 160);
        if (v27 >= 0)
          v28 = 2 * v27 + 8;
        else
          v28 = a1 + 160;
        *(_QWORD *)(v28 + ((v25 >> 3) & 0x1FF8)) |= 1 << v25;
        v29 = *(_QWORD *)(a1 + 40) + 16 * v25;
        v30 = *(unsigned int *)(v29 + 12);
        if ((_DWORD)v30)
        {
          v31 = *(_WORD **)v29;
          v32 = *(_QWORD *)v29 + 2 * v30;
          while (1)
          {
            v33 = (unsigned __int16)*v31;
            v34 = 2 * *v22 + 8;
            if (*v22 < 0)
              v34 = a1 + 160;
            v35 = v33 >> 6;
            v36 = *(_QWORD *)(v34 + 8 * (v33 >> 6));
            v37 = 1 << v33;
            if (((1 << v33) & v36) != 0)
              goto LABEL_19;
            v38 = *(_QWORD *)(a1 + 144);
            if (*(_WORD *)(v38 + 2 * v33))
              goto LABEL_19;
            LOWORD(v337[0]) = *v31;
            v39 = *(_QWORD *)(a1 + 56);
            v40 = *(unsigned __int16 *)(v39 + 2 * v33);
            *(_WORD *)(v39 + 2 * v33) = v40 - 1;
            if (*(_DWORD *)(a1 + 12) != v40)
              goto LABEL_19;
            v41 = *(_QWORD *)(a1 + 360);
            if (v41 >= 0)
              v42 = 2 * v41 + 8;
            else
              v42 = (uint64_t)v23;
            *(_QWORD *)(v42 + 8 * v35) |= v37;
            v43 = *(_QWORD *)(a1 + 40) + 16 * v33;
            v44 = *(unsigned int *)(v43 + 12);
            if ((_DWORD)v44)
            {
              v45 = *(unsigned __int16 **)v43;
              v46 = 2 * v44;
              do
              {
                v47 = *v45;
                v48 = 2 * *v22 + 8;
                if (*v22 < 0)
                  v48 = a1 + 160;
                v49 = v47 >> 6;
                v50 = *(_QWORD *)(v48 + 8 * (v47 >> 6));
                v51 = 1 << v47;
                if (((1 << v47) & v50) == 0 && !*(_WORD *)(v38 + 2 * v47))
                {
                  if ((*v23 & 0x8000000000000000) == 0)
                    v52 = 2 * *v23 + 8;
                  else
                    v52 = (uint64_t)v23;
                  *(_QWORD *)(v52 + 8 * v49) |= v51;
                }
                ++v45;
                v46 -= 2;
              }
              while (v46);
            }
            v53 = *(_QWORD *)(a1 + 200);
            v54 = 2 * v53 + 8;
            v55 = v53 < 0;
            v56 = a1 + 200;
            if (!v55)
              v56 = v54;
            *(_QWORD *)(v56 + 8 * v35) &= ~v37;
            if (*(_DWORD *)(a1 + 108) <= v33)
            {
              __break(0xC471u);
              JUMPOUT(0x198055694);
            }
            v57 = *(_QWORD *)(a1 + 96) + 40 * v33;
            v58 = *(unsigned int *)(v57 + 4);
            v59 = (_QWORD *)(v57 + 8);
            if ((_DWORD)v58 != 8)
              v59 = (_QWORD *)*v59;
            v60 = 0;
            while ((_DWORD)v58 != v60)
            {
              v61 = v60;
              v62 = *((_DWORD *)v59 + v60++);
              if (v62 != -1)
              {
                v63 = v61;
                goto LABEL_44;
              }
            }
            v63 = v58;
LABEL_44:
            if ((_DWORD)v58 == (_DWORD)v63)
            {
LABEL_55:
              v69 = *(unsigned int *)(a1 + 196);
              if ((_DWORD)v69 == *(_DWORD *)(a1 + 192))
              {
                v272 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v323, v69 + 1, (unint64_t)v337);
                v273 = *(unsigned int *)(a1 + 196);
                *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v273) = *v272;
                *(_DWORD *)(a1 + 196) = v273 + 1;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v69) = v33;
                *(_DWORD *)(a1 + 196) = v69 + 1;
              }
              goto LABEL_19;
            }
            v64 = v63 | (v58 << 32);
            if (*v9 >= 0)
              v65 = 2 * *v9 + 8;
            else
              v65 = (uint64_t)v9;
            while (1)
            {
              v66 = *((unsigned int *)v59 + v64);
              if (((*(_QWORD *)(v65 + ((v66 >> 3) & 0x1FFFFFF8)) >> v66) & 1) != 0
                || *(_DWORD *)(*v333 + 4 * v66) != -1)
              {
                break;
              }
              v67 = HIDWORD(v64);
              if ((v63 + 1) > HIDWORD(v64))
                LODWORD(v67) = v63 + 1;
              while (1)
              {
                v68 = (v63 + 1);
                v64 = v64 & 0xFFFFFFFF00000000 | v68;
                if ((_DWORD)v67 - 1 == (_DWORD)v63)
                  break;
                LODWORD(v63) = v63 + 1;
                if (*((_DWORD *)v59 + v68) != -1)
                  goto LABEL_54;
              }
              LODWORD(v68) = v67;
LABEL_54:
              LODWORD(v63) = v68;
              if ((_DWORD)v58 == (_DWORD)v68)
                goto LABEL_55;
            }
            v124 = *v332;
            if (*v332
              || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(v332, 8uLL, 0, v14, v15, v16, v17, v18), (v124 = *v332) != 0))
            {
              v125 = *(_DWORD *)(v124 - 8);
            }
            else
            {
              v125 = 0;
            }
            v126 = v337[0];
            v127 = ~(LOWORD(v337[0]) << 15) + LOWORD(v337[0]);
            v128 = (9 * (v127 ^ (v127 >> 10))) ^ ((9 * (v127 ^ (v127 >> 10))) >> 6);
            v129 = ((v128 + ~(v128 << 11)) ^ ((v128 + ~(v128 << 11)) >> 16)) & v125;
            v13 = (_WORD *)(v124 + 2 * v129);
            v130 = (unsigned __int16)*v13;
            if (*v13)
            {
              v131 = 0;
              v132 = 1;
              while (v130 != LOWORD(v337[0]))
              {
                if (v130 == 0xFFFF)
                  v131 = v13;
                v129 = (v129 + v132) & v125;
                v13 = (_WORD *)(v124 + 2 * v129);
                v130 = (unsigned __int16)*v13;
                ++v132;
                if (!*v13)
                {
                  if (v131)
                  {
                    *v131 = 0;
                    --*(_DWORD *)(*v332 - 16);
                    v126 = v337[0];
                    v13 = v131;
                  }
                  goto LABEL_118;
                }
              }
              goto LABEL_19;
            }
LABEL_118:
            *v13 = v126;
            v133 = *v332;
            v134 = *v332 ? *(_DWORD *)(v133 - 12) + 1 : 1;
            *(_DWORD *)(v133 - 12) = v134;
            v135 = *v332;
            v136 = *v332 ? *(_DWORD *)(v135 - 12) : 0;
            v137 = (*(_DWORD *)(v135 - 16) + v136);
            v138 = *(unsigned int *)(v135 - 4);
            if (v138 > 0x400)
              break;
            if (3 * v138 <= 4 * v137)
            {
              if (!(_DWORD)v138)
              {
                v139 = 8;
LABEL_126:
                WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(v332, v139, (uint64_t)v13, v14, v15, v16, v17, v18);
                goto LABEL_19;
              }
LABEL_375:
              v139 = ((_DWORD)v138 << (6 * *(_DWORD *)(v135 - 12) >= (2 * v138)));
              goto LABEL_126;
            }
LABEL_19:
            if (++v31 == (_WORD *)v32)
              goto LABEL_341;
          }
          if (v138 > 2 * v137)
            goto LABEL_19;
          goto LABEL_375;
        }
        goto LABEL_341;
      }
      v70 = *v23;
      if ((*v23 & 0x8000000000000000) == 0)
      {
        v71 = 2 * v70;
        v72 = *(_QWORD *)(2 * v70);
        v73 = 8 * ((unint64_t)(v72 + 63) >> 6);
        while (v73)
        {
          v74 = *(_QWORD *)(v71 + v73);
          v73 -= 8;
          if (v74)
          {
            if ((unint64_t)(v72 + 63) >= 0x40)
            {
              v75 = *(_QWORD *)(2 * v70 + 8);
              if (v75)
              {
                v76 = __clz(__rbit64(v75));
                if (v76 < 0x40)
                {
                  v77 = 0;
                  goto LABEL_299;
                }
              }
              if ((unint64_t)(v72 + 63) >> 6 != 1)
              {
                v260 = 0;
                v261 = v71 + 16;
                do
                {
                  v262 = *(_QWORD *)(v261 + 8 * v260);
                  if (v262)
                  {
                    v76 = __clz(__rbit64(v262));
                    if (v76 <= 0x3F)
                    {
                      v77 = v260 + 1;
                      goto LABEL_299;
                    }
                  }
                  ++v260;
                }
                while (((unint64_t)(v72 + 63) >> 6) - 1 != v260);
              }
            }
            goto LABEL_339;
          }
        }
        goto LABEL_65;
      }
      if ((v70 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v302 = __clz(__rbit64(v70));
        if (v302 >= 0x3F)
          v274 = 63;
        else
          v274 = v302;
        v72 = 63;
        while (1)
        {
LABEL_300:
          if (v274 == v72)
          {
LABEL_339:
            if ((v70 & 0x8000000000000000) != 0)
              *v23 = 0x8000000000000000;
            else
              bzero((void *)(2 * v70 + 8), (unint64_t)(*(_QWORD *)(2 * v70) + 7) >> 3);
            goto LABEL_341;
          }
          if (*(_DWORD *)(a1 + 108) <= (unsigned __int16)v274)
          {
LABEL_411:
            __break(0xC471u);
            JUMPOUT(0x19805568CLL);
          }
          v275 = *(_QWORD *)(a1 + 96) + 40 * (unsigned __int16)v274;
          v276 = *(unsigned int *)(v275 + 4);
          v277 = (_QWORD *)(v275 + 8);
          if ((_DWORD)v276 != 8)
            v277 = (_QWORD *)*v277;
          v278 = 0;
          while ((_DWORD)v276 != v278)
          {
            v279 = v278;
            v280 = *((_DWORD *)v277 + v278++);
            if (v280 != -1)
            {
              v281 = v279;
              goto LABEL_308;
            }
          }
          v281 = v276;
LABEL_308:
          if ((_DWORD)v276 == (_DWORD)v281)
            goto LABEL_309;
          v285 = v281 | (v276 << 32);
          do
          {
            v286 = *((unsigned int *)v277 + v285);
            if (*v9 >= 0)
              v287 = 2 * *v9 + 8;
            else
              v287 = (uint64_t)v9;
            v288 = (v286 >> 3) & 0x1FFFFFF8;
            v289 = *(_QWORD *)(v287 + v288);
            *(_QWORD *)(v287 + v288) = v289 & ~(1 << v286);
            if (((1 << v286) & v289) != 0)
            {
              v292 = v9;
              v337[0] = v286;
              if (*(_DWORD *)(a1 + 344) > v286)
              {
                v294 = *(unsigned int *)(a1 + 324);
                if ((_DWORD)v294 == *(_DWORD *)(a1 + 320))
                {
                  WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)v326, (unint64_t)v337);
                }
                else
                {
                  *(_DWORD *)(*v326 + 4 * v294) = v286;
                  v295 = (_DWORD *)(a1 + 324);
LABEL_328:
                  ++*v295;
                }
              }
              else
              {
                v293 = *(unsigned int *)(a1 + 340);
                LODWORD(v294) = v293;
                if ((_DWORD)v293 != *(_DWORD *)(a1 + 336))
                {
                  *(_DWORD *)(*v328 + 4 * v293) = v286;
                  v295 = (_DWORD *)(a1 + 340);
                  goto LABEL_328;
                }
                *(_DWORD *)(*v328 + 4 * (*v334)++) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v328, v293 + 1, (unint64_t)v337);
              }
              *(_DWORD *)(*v333 + 4 * v337[0]) = v294;
              v9 = v292;
              v23 = (unint64_t *)(a1 + 360);
            }
            v290 = HIDWORD(v285);
            if ((v281 + 1) > HIDWORD(v285))
              LODWORD(v290) = v281 + 1;
            while (1)
            {
              v291 = (v281 + 1);
              v285 = v285 & 0xFFFFFFFF00000000 | v291;
              if ((_DWORD)v290 - 1 == (_DWORD)v281)
                break;
              LODWORD(v281) = v281 + 1;
              if (*((_DWORD *)v277 + v291) != -1)
                goto LABEL_323;
            }
            LODWORD(v291) = v290;
LABEL_323:
            LODWORD(v281) = v291;
          }
          while ((_DWORD)v276 != (_DWORD)v291);
          v70 = *v23;
LABEL_309:
          v282 = v274 + 1;
          if ((v70 & 0x8000000000000000) != 0)
          {
            v297 = __clz(__rbit64(v70 >> v282)) + v282;
            if (v297 >= 0x3F)
              v274 = 63;
            else
              v274 = v297;
          }
          else
          {
            v274 = *(_QWORD *)(2 * v70);
            v283 = v274 + 63;
            v77 = v282 >> 6;
            if (v282 >> 6 < (unint64_t)(v274 + 63) >> 6)
            {
              v284 = *(_QWORD *)(2 * v70 + 8 * v77 + 8);
              if (v284)
              {
                v76 = __clz(__rbit64(v284 >> v282)) + (v282 & 0x3F);
                if (v76 < 0x40)
                  goto LABEL_299;
              }
              if (v77 + 1 != v283 >> 6)
              {
                while (1)
                {
                  v296 = *(_QWORD *)(2 * v70 + 0x10 + 8 * v77);
                  if (v296)
                  {
                    v76 = __clz(__rbit64(v296));
                    if (v76 <= 0x3F)
                      break;
                  }
                  if ((v283 >> 6) - 1 == ++v77)
                    goto LABEL_300;
                }
                ++v77;
LABEL_299:
                v274 = v76 + (v77 << 6);
              }
            }
          }
        }
      }
LABEL_65:
      v78 = (_DWORD *)(a1 + 324);
      v79 = *v331;
      v80 = (_QWORD *)(a1 + 312);
      if (*v331 || (v78 = (_DWORD *)(a1 + 340), v79 = *v334, v80 = (_QWORD *)(a1 + 328), *v334))
      {
        v81 = *(unsigned int *)(*v80 + 4 * v79 - 4);
        *v78 = v79 - 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v81) = -1;
        v82 = *(_QWORD *)(a1 + 80);
        v83 = *(unsigned __int16 *)(v82 + 4 * v81);
        v84 = *(_QWORD *)(a1 + 144);
        do
        {
          v85 = v83;
          v83 = *(unsigned __int16 *)(v84 + 2 * (unsigned __int16)v83);
        }
        while (v83);
        v86 = *(unsigned __int16 *)(v82 + 4 * v81 + 2);
        do
        {
          v87 = v86;
          v86 = *(unsigned __int16 *)(v84 + 2 * (unsigned __int16)v86);
        }
        while (v86);
        v88 = *(unsigned __int16 *)(a1 + 16);
        if (v88 >= (unsigned __int16)v87)
          v89 = v87;
        else
          v89 = v85;
        if (v88 >= (unsigned __int16)v87)
          v90 = v85;
        else
          v90 = v87;
        if ((unsigned __int16)v89 == v90)
        {
          goto LABEL_341;
        }
        if (v88 >= v90)
          goto LABEL_236;
        v91 = (unsigned __int16)v89;
        v93 = *(_QWORD *)(a1 + 24);
        v94 = 2 * v93 + 8;
        v55 = v93 < 0;
        v95 = a1 + 24;
        if (!v55)
          v95 = v94;
        v92 = *(unsigned __int16 *)(a1 + 36) * (unint64_t)(unsigned __int16)v89 + v90;
        if (((*(_QWORD *)(v95 + ((v92 >> 3) & 0x3FFFFFF8)) >> v92) & 1) != 0)
        {
LABEL_236:
          goto LABEL_341;
        }
        v96 = v89;
        v329 = v89;
        {
          v110 = *(_QWORD *)(a1 + 352);
          if (v110 >= 0)
            v111 = 2 * v110 + 8;
          else
            v111 = (uint64_t)v9;
          *(_QWORD *)(v111 + ((v81 >> 3) & 0x1FFFFFF8)) |= 1 << v81;
          v336 = v90;
          v112 = *(unsigned __int16 *)(a1 + 16);
          v113 = 40;
          v114 = v96;
          if (v112 >= v96)
            goto LABEL_106;
          v115 = *v324;
          if (*v324
            || (WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(v324, 8u, 0), v114 = v329, (v115 = *v324) != 0))
          {
            v116 = *(_DWORD *)(v115 - 8);
          }
          else
          {
            v116 = 0;
          }
          v117 = ~(v114 << 15) + v114;
          v118 = (9 * (v117 ^ (v117 >> 10))) ^ ((9 * (v117 ^ (v117 >> 10))) >> 6);
          v119 = v116 & ((v118 + ~(v118 << 11)) ^ ((v118 + ~(v118 << 11)) >> 16));
          v120 = (unsigned __int16 *)(v115 + 32 * v119);
          v121 = *v120;
          if (v121 != 0xFFFF)
          {
            v122 = 0;
            v123 = 1;
            while ((unsigned __int16)v121 != v114)
            {
              if ((unsigned __int16)v121 == 65534)
                v122 = v120;
              v119 = ((_DWORD)v119 + v123) & v116;
              v120 = (unsigned __int16 *)(v115 + 32 * v119);
              v121 = *v120;
              ++v123;
              if (v121 == 0xFFFF)
              {
                if (v122)
                {
                  *v122 = -1;
                  *((_QWORD *)v122 + 1) = 0x800000000;
                  *((_QWORD *)v122 + 2) = -1;
                  *((_QWORD *)v122 + 3) = -1;
                  --*(_DWORD *)(*v324 - 16);
                  v120 = v122;
                }
                goto LABEL_382;
              }
            }
LABEL_105:
            WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v337, (unsigned int *)v120 + 2, v90);
            v112 = *(unsigned __int16 *)(a1 + 16);
            v114 = v329;
LABEL_106:
            if (v112 < v90)
            {
              v338 = 0x800000000;
              v339 = -1;
              v340 = -1;
              v321 = v114;
              WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v337, v324, &v336, (uint64_t)&v338, v15, v16, v17, v18);
              WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v335, (unsigned int *)(*(_QWORD *)v337 + 8), v321);
              if (HIDWORD(v338) != 8)
                WTF::fastFree(v339, v322, (uint64_t)v13, v14, v15, v16, v17, v18);
            }
            goto LABEL_341;
          }
LABEL_382:
          *v120 = v114;
          if (*((_DWORD *)v120 + 3) != 8)
            WTF::fastFree(*((_QWORD *)v120 + 2), (void *)v113, (uint64_t)v13, v14, v15, v16, v17, v18);
          *((_QWORD *)v120 + 1) = 0x800000000;
          *((_QWORD *)v120 + 2) = -1;
          *((_QWORD *)v120 + 3) = -1;
          v314 = *v324;
          if (*v324)
            v315 = *(_DWORD *)(v314 - 12) + 1;
          else
            v315 = 1;
          *(_DWORD *)(v314 - 12) = v315;
          v316 = *v324;
          if (*v324)
            v317 = *(_DWORD *)(v316 - 12);
          else
            v317 = 0;
          v318 = (*(_DWORD *)(v316 - 16) + v317);
          v319 = *(unsigned int *)(v316 - 4);
          if (v319 > 0x400)
          {
            if (v319 > 2 * v318)
              goto LABEL_105;
          }
          else
          {
            if (3 * v319 > 4 * v318)
              goto LABEL_105;
            if (!(_DWORD)v319)
            {
              v320 = 8;
LABEL_392:
              v120 = (unsigned __int16 *)WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(v324, v320, v120);
              goto LABEL_105;
            }
          }
          v320 = (_DWORD)v319 << (6 * *(_DWORD *)(v316 - 12) >= (2 * v319));
          goto LABEL_392;
        }
        v97 = v90;
        v98 = *v332;
        if (*v332)
        {
          v99 = *(_DWORD *)(v98 - 8);
          v100 = v90;
          v101 = 9 * ((~(v100 << 15) + v90) ^ ((~(v100 << 15) + v90) >> 10));
          v102 = v99 & (((v101 ^ (v101 >> 6)) + ~((v101 ^ (v101 >> 6)) << 11)) ^ (((v101 ^ (v101 >> 6))
                                                                                 + ~((v101 ^ (v101 >> 6)) << 11)) >> 16));
          v103 = *(unsigned __int16 *)(v98 + 2 * v102);
          v104 = v329;
          if (v103 != v90)
          {
            v105 = 1;
            while ((_WORD)v103)
            {
              v102 = ((_DWORD)v102 + v105) & v99;
              v103 = *(unsigned __int16 *)(v98 + 2 * v102);
              ++v105;
              if (v103 == v90)
                goto LABEL_128;
            }
            v102 = *(unsigned int *)(v98 - 4);
          }
LABEL_128:
          if (v102 != *(_DWORD *)(v98 - 4))
          {
            *(_WORD *)(v98 + 2 * v102) = -1;
            ++*(_DWORD *)(*v332 - 16);
            v141 = *v332;
            if (*v332)
              v142 = *(_DWORD *)(v141 - 12) - 1;
            else
              v142 = -1;
            *(_DWORD *)(v141 - 12) = v142;
            v143 = *v332;
            if (*v332)
            {
              v144 = 6 * *(_DWORD *)(v143 - 12);
              v145 = *(_DWORD *)(v143 - 4);
              if (v144 < v145 && v145 >= 9)
              {
                WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(v332, v145 >> 1, 0, v14, v15, v16, v17, v18);
                v104 = v329;
              }
            }
LABEL_137:
            *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v90) = v104;
            if (*(_DWORD *)(a1 + 108) <= v100)
            {
              __break(0xC471u);
              JUMPOUT(0x1980556F4);
            }
            v147 = *(_QWORD *)(a1 + 96) + 40 * v90;
            v148 = *(unsigned int *)(v147 + 4);
            v149 = (_QWORD *)(v147 + 8);
            if ((_DWORD)v148 != 8)
              v149 = (_QWORD *)*v149;
            v150 = 0;
            v325 = v97;
            while ((_DWORD)v148 != v150)
            {
              v151 = v150;
              v152 = *((_DWORD *)v149 + v150++);
              if (v152 != -1)
              {
                v153 = v151;
                goto LABEL_144;
              }
            }
            v153 = v148;
LABEL_144:
            if ((_DWORD)v148 != (_DWORD)v153)
            {
              v154 = v153 | (v148 << 32);
              v155 = (unsigned __int16)v104;
              do
              {
                if (*(_DWORD *)(a1 + 108) <= v155)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805569CLL);
                }
                WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v337, (unsigned int *)(*(_QWORD *)(a1 + 96) + 40 * v91), *((_DWORD *)v149 + v154));
                v156 = HIDWORD(v154);
                if ((v153 + 1) > HIDWORD(v154))
                  LODWORD(v156) = v153 + 1;
                v104 = v329;
                while (1)
                {
                  v157 = (v153 + 1);
                  v154 = v154 & 0xFFFFFFFF00000000 | v157;
                  if ((_DWORD)v156 - 1 == (_DWORD)v153)
                    break;
                  LODWORD(v153) = v153 + 1;
                  if (*((_DWORD *)v149 + v157) != -1)
                    goto LABEL_152;
                }
                LODWORD(v157) = v156;
LABEL_152:
                LODWORD(v153) = v157;
              }
              while ((_DWORD)v148 != (_DWORD)v157);
            }
            v158 = *(_QWORD *)(a1 + 40) + 16 * v325;
            v159 = *(unsigned int *)(v158 + 12);
            if ((_DWORD)v159)
            {
              v160 = *(_WORD **)v158;
              v161 = *(_QWORD *)v158 + 2 * v159;
              do
              {
                v162 = (unsigned __int16)*v160;
                v163 = 2 * *v22 + 8;
                if (*v22 < 0)
                  v163 = a1 + 160;
                v164 = v162 >> 6;
                v165 = *(_QWORD *)(v163 + 8 * (v162 >> 6));
                v166 = 1 << v162;
                if (((1 << v162) & v165) == 0)
                {
                  v167 = *(_QWORD *)(a1 + 144);
                  if (!*(_WORD *)(v167 + 2 * v162))
                  {
                    LOWORD(v337[0]) = *v160;
                    LOWORD(v338) = v104;
                    v168 = *(unsigned __int16 *)(a1 + 36);
                    v169 = v91 + *(unsigned __int16 *)(a1 + 36) * (unint64_t)v162;
                    v170 = *(_QWORD *)(a1 + 24);
                    if (v170 >= 0)
                      v171 = 2 * v170 + 8;
                    else
                      v171 = a1 + 24;
                    v172 = (v169 >> 3) & 0x3FFFFFF8;
                    v173 = *(_QWORD *)(v171 + v172);
                    v174 = 1 << v169;
                    v176 = v174 & v173;
                    v175 = (v174 & v173) == 0;
                    *(_QWORD *)(v171 + v172) = v174 | v173;
                    v177 = *(_DWORD *)(a1 + 32);
                    if (v175)
                      ++v177;
                    v178 = v162 + v168 * (unint64_t)v91;
                    v179 = *(_QWORD *)(a1 + 24);
                    if (v179 >= 0)
                      v180 = 2 * v179 + 8;
                    else
                      v180 = a1 + 24;
                    v181 = (v178 >> 3) & 0x3FFFFFF8;
                    v182 = 1 << v178;
                    v183 = *(_QWORD *)(v180 + v181);
                    *(_QWORD *)(v180 + v181) = v183 | v182;
                    if ((v183 & v182) != 0)
                      v184 = v177;
                    else
                      v184 = v177 + 1;
                    *(_DWORD *)(a1 + 32) = v184;
                    if (v176)
                    {
                      LOWORD(v338) = v162;
                      v185 = *(_QWORD *)(a1 + 56);
                      v186 = *(unsigned __int16 *)(v185 + 2 * v162);
                      *(_WORD *)(v185 + 2 * v162) = v186 - 1;
                      if (*(_DWORD *)(a1 + 12) == v186)
                      {
                        v248 = *(_QWORD *)(a1 + 360);
                        if (v248 >= 0)
                          v249 = 2 * v248 + 8;
                        else
                          v249 = (uint64_t)v23;
                        *(_QWORD *)(v249 + 8 * v164) |= v166;
                        v250 = *(_QWORD *)(a1 + 40) + 16 * v162;
                        v251 = *(unsigned int *)(v250 + 12);
                        if ((_DWORD)v251)
                        {
                          v193 = *(unsigned __int16 **)v250;
                          v194 = 2 * v251;
                          do
                          {
                            v187 = *v193;
                            v188 = 2 * *v22 + 8;
                            if (*v22 < 0)
                              v188 = a1 + 160;
                            v189 = v187 >> 6;
                            v190 = *(_QWORD *)(v188 + 8 * (v187 >> 6));
                            v191 = 1 << v187;
                            if (((1 << v187) & v190) == 0 && !*(_WORD *)(v167 + 2 * v187))
                            {
                              if ((*v23 & 0x8000000000000000) == 0)
                                v192 = 2 * *v23 + 8;
                              else
                                v192 = (uint64_t)v23;
                              *(_QWORD *)(v192 + 8 * v189) |= v191;
                            }
                            ++v193;
                            v194 -= 2;
                          }
                          while (v194);
                        }
                        v252 = *(_QWORD *)(a1 + 200);
                        v253 = 2 * v252 + 8;
                        v55 = v252 < 0;
                        v254 = a1 + 200;
                        if (!v55)
                          v254 = v253;
                        *(_QWORD *)(v254 + 8 * v164) &= ~v166;
                        if (*(_DWORD *)(a1 + 108) <= v162)
                          goto LABEL_411;
                        v255 = *(_QWORD *)(a1 + 96) + 40 * v162;
                        v256 = *(unsigned int *)(v255 + 4);
                        v257 = (_QWORD *)(v255 + 8);
                        if ((_DWORD)v256 != 8)
                          v257 = (_QWORD *)*v257;
                        v206 = 0;
                        while ((_DWORD)v256 != v206)
                        {
                          v204 = v206;
                          v205 = *((_DWORD *)v257 + v206++);
                          if (v205 != -1)
                          {
                            v258 = v204;
                            goto LABEL_267;
                          }
                        }
                        v258 = v256;
LABEL_267:
                        if ((_DWORD)v256 == (_DWORD)v258)
                        {
LABEL_207:
                          v211 = *(unsigned int *)(a1 + 196);
                          if ((_DWORD)v211 == *(_DWORD *)(a1 + 192))
                          {
                            v304 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v323, v211 + 1, (unint64_t)&v338);
                            v104 = v329;
                            v305 = *(unsigned int *)(a1 + 196);
                            v212 = v305 + 1;
                            *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v305) = *v304;
                          }
                          else
                          {
                            v212 = v211 + 1;
                            *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v211) = v162;
                          }
                          *(_DWORD *)(a1 + 196) = v212;
                        }
                        else
                        {
                          v210 = v258 | (v256 << 32);
                          if (*v9 >= 0)
                            v259 = 2 * *v9 + 8;
                          else
                            v259 = (uint64_t)v9;
                          while (1)
                          {
                            v207 = *((unsigned int *)v257 + v210);
                            if (((*(_QWORD *)(v259 + ((v207 >> 3) & 0x1FFFFFF8)) >> v207) & 1) != 0
                              || *(_DWORD *)(*v333 + 4 * v207) != -1)
                            {
                              break;
                            }
                            v208 = HIDWORD(v210);
                            if ((v258 + 1) > HIDWORD(v210))
                              LODWORD(v208) = v258 + 1;
                            while (1)
                            {
                              v209 = (v258 + 1);
                              v210 = v210 & 0xFFFFFFFF00000000 | v209;
                              if ((_DWORD)v208 - 1 == (_DWORD)v258)
                                break;
                              LODWORD(v258) = v258 + 1;
                              if (*((_DWORD *)v257 + v209) != -1)
                                goto LABEL_206;
                            }
                            LODWORD(v209) = v208;
LABEL_206:
                            LODWORD(v258) = v209;
                            if ((_DWORD)v256 == (_DWORD)v209)
                              goto LABEL_207;
                          }
                          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(v337, v332, &v338, v14, v15, v16, v17, v18);
                          v104 = v329;
                        }
                      }
                    }
                    else
                    {
                      v195 = v104;
                      if (*(unsigned __int16 *)(a1 + 16) < v162)
                      {
                        v196 = *(_QWORD *)(a1 + 40) + 16 * v162;
                        v197 = *(unsigned int *)(v196 + 12);
                        if ((_DWORD)v197 == *(_DWORD *)(v196 + 8))
                        {
                          v201 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 40) + 16 * v162, v197 + 1, (unint64_t)&v338);
                          v104 = v329;
                          v202 = *(unsigned int *)(v196 + 12);
                          *(_WORD *)(*(_QWORD *)v196 + 2 * v202) = *v201;
                          *(_DWORD *)(v196 + 12) = v202 + 1;
                          v195 = v338;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v196 + 2 * v197) = v104;
                          *(_DWORD *)(v196 + 12) = v197 + 1;
                          v195 = v104;
                        }
                      }
                      v198 = *(unsigned __int16 *)(a1 + 16);
                      if (v198 < v195)
                      {
                        v199 = *(_QWORD *)(a1 + 40) + 16 * v195;
                        v200 = *(unsigned int *)(v199 + 12);
                        if ((_DWORD)v200 == *(_DWORD *)(v199 + 8))
                        {
                          v203 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v199, v200 + 1, (unint64_t)v337);
                          v104 = v329;
                          v200 = *(unsigned int *)(v199 + 12);
                          *(_WORD *)(*(_QWORD *)v199 + 2 * v200) = *v203;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v199 + 2 * v200) = v162;
                        }
                        *(_DWORD *)(v199 + 12) = v200 + 1;
                        v198 = *(unsigned __int16 *)(a1 + 16);
                      }
                      if (v198 < (unsigned __int16)v104)
                        ++*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * v91);
                    }
                  }
                }
                ++v160;
              }
              while (v160 != (_WORD *)v161);
            }
            if (*(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v91))
            {
              v213 = *v332;
              if (*v332)
              {
                v214 = *(_DWORD *)(v213 - 8);
                v215 = ~((unsigned __int16)v104 << 15) + (unsigned __int16)v104;
                v216 = (9 * (v215 ^ (v215 >> 10))) ^ ((9 * (v215 ^ (v215 >> 10))) >> 6);
                v217 = v214 & ((v216 + ~(v216 << 11)) ^ ((v216 + ~(v216 << 11)) >> 16));
                v218 = *(unsigned __int16 *)(v213 + 2 * v217);
                if (v218 != (unsigned __int16)v104)
                {
                  v219 = 1;
                  while ((_WORD)v218)
                  {
                    v217 = ((_DWORD)v217 + v219) & v214;
                    v218 = *(unsigned __int16 *)(v213 + 2 * v217);
                    ++v219;
                    if (v218 == (unsigned __int16)v104)
                      goto LABEL_217;
                  }
                  v217 = *(unsigned int *)(v213 - 4);
                }
LABEL_217:
                if (v217 != *(_DWORD *)(v213 - 4))
                {
                  *(_WORD *)(v213 + 2 * v217) = -1;
                  ++*(_DWORD *)(*v332 - 16);
                  v220 = *v332;
                  if (*v332)
                    v221 = *(_DWORD *)(v220 - 12) - 1;
                  else
                    v221 = -1;
                  *(_DWORD *)(v220 - 12) = v221;
                  v222 = *v332;
                  if (*v332)
                  {
                    v223 = 6 * *(_DWORD *)(v222 - 12);
                    v224 = *(_DWORD *)(v222 - 4);
                    if (v223 < v224 && v224 >= 9)
                    {
                      WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(v332, v224 >> 1, 0, v14, v15, v16, v17, v18);
                      v104 = v329;
                    }
                  }
                  v226 = *(uint64_t **)(a1 + 232);
                  if (*v226 >= 0)
                    v226 = (uint64_t *)(2 * *v226 + 8);
                  if ((v226[v91 >> 6] & (1 << v91)) == 0)
                  {
                    v227 = *(_QWORD *)v327;
                    if ((*(_QWORD *)v327 & 0x8000000000000000) != 0)
                      v228 = 63;
                    else
                      v228 = *(_QWORD *)(2 * v227);
                    if (v228 <= v91)
                    {
                      WTF::BitVector::resizeOutOfLine(v327, v91 + 1, 0);
                      v104 = v329;
                      v227 = *(_QWORD *)v327;
                    }
                    v229 = 2 * v227 + 8;
                    v55 = v227 < 0;
                    v230 = a1 + 200;
                    if (!v55)
                      v230 = v229;
                    *(_QWORD *)(v230 + 8 * (v91 >> 6)) |= 1 << v91;
                  }
                }
              }
            }
            *(_BYTE *)(a1 + 209) = 1;
            goto LABEL_341;
          }
        }
        else
        {
          v100 = v90;
          v104 = v329;
        }
        if (*(uint64_t *)v327 >= 0)
          v247 = 2 * *(_QWORD *)v327 + 8;
        else
          v247 = a1 + 200;
        *(_QWORD *)(v247 + (((unint64_t)v90 >> 3) & 0x1FF8)) &= ~(1 << v90);
        goto LABEL_137;
      }
      v106 = *v332;
      if (*v332 && *(_DWORD *)(v106 - 12))
      {
        LOWORD(v337[0]) = 0;
        v107 = *(unsigned int *)(v106 - 4);
        if ((_DWORD)v107)
        {
          v108 = 2 * v107;
          v109 = (_WORD *)v106;
          while ((unsigned __int16)(*v109 + 1) <= 1u)
          {
            ++v109;
            v108 -= 2;
            if (!v108)
              goto LABEL_402;
          }
        }
        else
        {
          v109 = (_WORD *)v106;
        }
        if ((_WORD *)(v106 + 2 * v107) == v109)
        {
LABEL_402:
          v237 = 0;
        }
        else
        {
          v237 = (unsigned __int16)*v109;
          *v109 = -1;
          ++*(_DWORD *)(*v332 - 16);
          v238 = *v332;
          if (*v332)
            v239 = *(_DWORD *)(v238 - 12) - 1;
          else
            v239 = -1;
          *(_DWORD *)(v238 - 12) = v239;
          v240 = *v332;
          if (*v332)
          {
            v241 = 6 * *(_DWORD *)(v240 - 12);
            v242 = *(_DWORD *)(v240 - 4);
            if (v241 < v242 && v242 >= 9)
              WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(v332, v242 >> 1, 0, v14, v15, v16, v17, v18);
          }
        }
        LOWORD(v337[0]) = v237;
        v244 = *(unsigned int *)(a1 + 196);
        if ((_DWORD)v244 == *(_DWORD *)(a1 + 192))
        {
          v303 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v323, v244 + 1, (unint64_t)v337);
          v244 = *(unsigned int *)(a1 + 196);
          *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v244) = *v303;
          v237 = LOWORD(v337[0]);
        }
        else
        {
          *(_WORD *)(*v323 + 2 * v244) = v237;
        }
        *(_DWORD *)(a1 + 196) = v244 + 1;
        v245 = (char *)a1;
        v246 = v237;
LABEL_249:
        goto LABEL_341;
      }
      v263 = *(_QWORD *)v327;
      if ((*(_QWORD *)v327 & 0x8000000000000000) != 0)
      {
        if ((v263 & 0x7FFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_341;
LABEL_280:
        LOWORD(v337[0]) = v267;
        v268 = *(_QWORD *)(a1 + 200);
        v269 = 2 * v268 + 8;
        v55 = v268 < 0;
        v270 = a1 + 200;
        if (!v55)
          v270 = v269;
        *(_QWORD *)(v270 + (((unint64_t)v267 >> 3) & 0x1FF8)) &= ~(1 << v267);
        v271 = *(unsigned int *)(a1 + 196);
        if ((_DWORD)v271 == *(_DWORD *)(a1 + 192))
        {
          v306 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v323, v271 + 1, (unint64_t)v337);
          v271 = *(unsigned int *)(a1 + 196);
          *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v271) = *v306;
          v246 = LOWORD(v337[0]);
        }
        else
        {
          v246 = v267;
          *(_WORD *)(*v323 + 2 * v271) = v267;
        }
        *(_DWORD *)(a1 + 196) = v271 + 1;
        v245 = (char *)a1;
        goto LABEL_249;
      }
      v264 = (_QWORD *)(2 * v263);
      v265 = ((unint64_t)(*v264 + 63) >> 6);
      while (v265 * 8)
      {
        if (v264[v265--])
          goto LABEL_280;
      }
LABEL_341:
      v24 = *(_DWORD *)(a1 + 196);
    }
    while (v24 || *v331 || *v334 || *v332 && *(_DWORD *)(*v332 - 12));
    v298 = *(_QWORD *)v327;
    if ((*(_QWORD *)v327 & 0x8000000000000000) == 0)
      break;
    if ((v298 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_377;
  }
  v299 = (_QWORD *)(2 * v298);
  v300 = ((unint64_t)(*v299 + 63) >> 6);
  while (v300 * 8)
  {
    if (v299[v300--])
      goto LABEL_6;
  }
LABEL_377:
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::assignRegistersToTmp<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  _OWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  char v47;
  int v48;
  int v49;
  char v50;
  int v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  unsigned int *v56;
  unint64_t v57;
  unsigned int *v58;
  BOOL v59;
  unsigned int v60;
  uint64_t v61;
  WTF *v62;
  char v63;
  int v64;
  char v65;
  int v66;
  uint64_t v67;
  WTF *v68;
  unint64_t v69;
  WTF *v70;
  WTF *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  uint64_t v77;
  WTF *v78;
  __int128 v79;
  __int128 v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[11];

  v8 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v8)
    return;
  v9 = a2;
  v11 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v11))
  {
    if (v8 == ++v11)
      return;
  }
  if ((_DWORD)v8 == (_DWORD)v11)
    return;
  v12 = (WTF *)&v87;
  v13 = 1;
  LODWORD(v14) = *(_DWORD *)(a1 + 108);
  v15 = v11;
  do
  {
    if (v14 <= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198055D88);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v15);
    if (!*(_DWORD *)(v16 + 20))
    {
      v60 = 0;
      v55 = 0;
      v53 = *(unsigned int **)(v16 + 8);
      a3 = (unint64_t)v53;
      v56 = v53;
      goto LABEL_87;
    }
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 + (v17 << 7);
      if ((*(__int16 *)(v19 + 120) | 4) != 0x5E)
      {
        v21 = *(_QWORD *)v19;
        v20 = *(unsigned int *)(v19 + 12);
LABEL_16:
        if (!v20)
          goto LABEL_48;
        LODWORD(v22) = 0;
        v23 = v21 + 32 * v20;
        goto LABEL_20;
      }
      v20 = *(unsigned int *)(v19 + 12);
      v21 = *(_QWORD *)v19;
      if ((_DWORD)v20 != 2)
        goto LABEL_16;
      if (*(_BYTE *)(v21 + 8) != 1 || *(_BYTE *)(v21 + 40) != 1)
        goto LABEL_18;
      if (*(_WORD *)(v19 + 120) != 94)
        goto LABEL_14;
      v22 = *((_QWORD *)v9 + 46);
      if (!v22)
        goto LABEL_19;
      v69 = *(unsigned int *)(v21 + 16);
      if ((int)v69 < 1)
      {
        v69 = -(int)v69;
        if (v69 >= *(unsigned int *)(v22 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x198055D80);
        }
        v22 += 16;
      }
      else if (v69 >= *(_DWORD *)(v22 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198055D78);
      }
      if (*(unsigned __int8 *)(*(_QWORD *)v22 + 2 * v69 + 1) <= 2u)
LABEL_14:
        LODWORD(v22) = 1;
      else
LABEL_18:
        LODWORD(v22) = 0;
LABEL_19:
      v23 = v21 + 64;
LABEL_20:
      v24 = *((_QWORD *)v9 + 18);
      v25 = *((_QWORD *)v9 + 14);
      v26 = v21;
      do
      {
        v27 = *(char *)(v26 + 8);
        if (v27 == 1)
          goto LABEL_22;
        if (v27 > 0xD)
          goto LABEL_31;
        if (((1 << v27) & 0x31C0) != 0)
        {
LABEL_22:
          v28 = *(_DWORD *)(v26 + 16);
          if ((v28 & 0x80000000) == 0 && (v28 - 33) <= 0xFFFFFFDF)
          {
            do
            {
              v29 = (unsigned __int16)v28;
              v28 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v28);
            }
            while (v28);
            if ((v29 - 1) <= 0x1F)
            {
              v37 = v29 + 127;
              v38 = ((_BYTE)v29 + 127) & 0x7F;
              if ((v37 & 0x60) != 0)
                v32 = (char)(31 - (v37 & 0x7F));
              else
                v32 = v38 + 1;
              if (v38 == 127)
                v32 = 0;
            }
            else
            {
              LODWORD(v85) = v29;
              v30 = *(_BYTE *)(v25 + v29);
              v31 = v30 & 0x7F;
              if (v31 == 127)
              {
                WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v85);
                WTF::dataLog<char [7]>();
                WTF::dataLog<JSC::B3::Air::Code>(*((JSC::B3::Air::Code **)v9 + 31));
                __break(0xC471u);
                JUMPOUT(0x198055C4CLL);
              }
              if ((v30 & 0x60) != 0)
                v32 = (char)(31 - v31);
              else
                v32 = v31 + 1;
            }
            *(_DWORD *)(v26 + 16) = v32;
          }
        }
        else if (v27 == 11)
        {
          v34 = *(_DWORD *)(v26 + 16);
          if ((v34 & 0x80000000) == 0 && (v34 - 33) <= 0xFFFFFFDF)
          {
            do
            {
              v33 = (unsigned __int16)v34;
              v34 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v34);
            }
            while (v34);
            if ((v33 - 1) <= 0x1F)
            {
              v63 = v33 + 127;
              v64 = ((_BYTE)v33 + 127) & 0x7F;
              if ((v63 & 0x60) != 0)
                v49 = (char)(31 - (v63 & 0x7F));
              else
                v49 = v64 + 1;
              if (v64 == 127)
                v49 = 0;
            }
            else
            {
              LODWORD(v85) = v33;
              v47 = *(_BYTE *)(v25 + v33);
              v48 = v47 & 0x7F;
              if (v48 == 127)
              {
                WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v85);
                WTF::dataLog<char [7]>();
                WTF::dataLog<JSC::B3::Air::Code>(*((JSC::B3::Air::Code **)v9 + 31));
                __break(0xC471u);
                JUMPOUT(0x198055CB4);
              }
              if ((v47 & 0x60) != 0)
                v49 = (char)(31 - v48);
              else
                v49 = v48 + 1;
            }
            *(_DWORD *)(v26 + 16) = v49;
          }
          v36 = *(_DWORD *)(v26 + 20);
          if ((v36 & 0x80000000) == 0 && (v36 - 33) <= 0xFFFFFFDF)
          {
            do
            {
              v35 = (unsigned __int16)v36;
              v36 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v36);
            }
            while (v36);
            if ((v35 - 1) <= 0x1F)
            {
              v65 = v35 + 127;
              v66 = ((_BYTE)v35 + 127) & 0x7F;
              if ((v65 & 0x60) != 0)
                v52 = (char)(31 - (v65 & 0x7F));
              else
                v52 = v66 + 1;
              if (v66 == 127)
                v52 = 0;
            }
            else
            {
              LODWORD(v85) = v35;
              v50 = *(_BYTE *)(v25 + v35);
              v51 = v50 & 0x7F;
              if (v51 == 127)
              {
                WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v85);
                WTF::dataLog<char [7]>();
                WTF::dataLog<JSC::B3::Air::Code>(*((JSC::B3::Air::Code **)v9 + 31));
                __break(0xC471u);
                JUMPOUT(0x198055CE8);
              }
              if ((v50 & 0x60) != 0)
                v52 = (char)(31 - v51);
              else
                v52 = v51 + 1;
            }
            *(_DWORD *)(v26 + 20) = v52;
          }
        }
LABEL_31:
        v26 += 32;
      }
      while (v26 != v23);
      if ((_DWORD)v22)
      {
        v40 = *(_DWORD *)(v19 + 12);
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x198055D68);
        }
        if (*(_BYTE *)(v21 + 8) == 1)
        {
          if (v40 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198055D70);
          }
          if (*(_BYTE *)(v21 + 40) == 1 && *(_DWORD *)(v21 + 16) == *(_DWORD *)(v21 + 48))
          {
            v85 = v12;
            v86 = 3;
            *(_QWORD *)v88 = 0;
            *(_WORD *)&v88[8] = 0;
            v88[10] &= 0xFCu;
            v42 = (_OWORD *)(v19 + 16);
            v41 = *(_QWORD *)v19;
            if (*(_QWORD *)v19 != v19 + 16)
            {
              if (v41)
              {
                *(_QWORD *)v19 = 0;
                *(_DWORD *)(v19 + 8) = 0;
                v81 = v12;
                v83 = v8;
                WTF::fastFree(v41, a2, a3, (uint64_t)v12, 1, a6, a7, a8);
                v13 = 1;
                v12 = v81;
                v8 = v83;
              }
              *(_QWORD *)v19 = v42;
              v70 = v85;
              if (v85 == v12)
              {
                if (HIDWORD(v86))
                {
                  v77 = 32 * HIDWORD(v86);
                  v78 = v12;
                  do
                  {
                    v79 = *(_OWORD *)v78;
                    v80 = *((_OWORD *)v78 + 1);
                    v78 = (WTF *)((char *)v78 + 32);
                    *v42 = v79;
                    v42[1] = v80;
                    v42 += 2;
                    v77 -= 32;
                  }
                  while (v77);
                }
              }
              else
              {
                v85 = v12;
                *(_QWORD *)v19 = v70;
              }
            }
            *(_DWORD *)(v19 + 8) = v86;
            v43 = HIDWORD(v86);
            HIDWORD(v86) = 0;
            *(_DWORD *)(v19 + 12) = v43;
            v44 = v18 + (v17 << 7);
            v45 = *(_QWORD *)v88;
            *(_DWORD *)(v44 + 119) = *(_DWORD *)&v88[7];
            *(_QWORD *)(v44 + 112) = v45;
            v46 = v85;
            if (v12 != v85 && v85)
            {
              v85 = 0;
              LODWORD(v86) = 0;
              v67 = v8;
              v68 = v12;
              WTF::fastFree((unint64_t)v46, a2, a3, (uint64_t)v12, 1, a6, a7, a8);
              v13 = 1;
              v12 = v68;
              v8 = v67;
            }
          }
        }
      }
LABEL_48:
      ++v17;
      v39 = *(unsigned int *)(v16 + 20);
    }
    while (v17 < v39);
    v53 = *(unsigned int **)(v16 + 8);
    a3 = (unint64_t)&v53[32 * v39];
    if ((_DWORD)v39)
    {
      v54 = 0;
      v55 = 0;
      v56 = &v53[32 * v39];
      v57 = (unint64_t)v56;
      do
      {
        v58 = &v53[v54];
        if (*(_QWORD *)&v53[v54 + 28])
          v59 = 0;
        else
          v59 = LOWORD(v53[v54 + 30]) == 0;
        if (v59 && (*((_BYTE *)v58 + 122) & 3) == 0)
        {
          v82 = v15;
          v84 = v8;
          v71 = v12;
          v72 = v57;
          v73 = a3;
          if (!v53[v54 + 3])
          {
            if (v57 == *(_QWORD *)(v16 + 8) + ((unint64_t)*(unsigned int *)(v16 + 20) << 7))
            {
              v72 = (unint64_t)&v53[v54];
            }
            else if (v58 != v56)
            {
              v75 = v56;
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v56, v58, v57, (uint64_t)v12, 1, a6, a7, a8);
              v72 += (char *)&v53[v54] - (char *)v75;
            }
            v74 = *(_QWORD *)&v53[v54];
            if (&v53[v54 + 4] != (unsigned int *)v74 && v74)
            {
              v76 = &v53[v54];
              *(_QWORD *)v76 = 0;
              v76[2] = 0;
              WTF::fastFree(v74, v58, a3, (uint64_t)v12, v13, a6, a7, a8);
            }
            v56 = &v53[v54 + 32];
            ++v55;
          }
          a3 = v73;
          v57 = v72;
          v15 = v82;
          v8 = v84;
          v12 = v71;
          v13 = 1;
        }
        v54 += 32;
      }
      while ((unint64_t)&v53[v54] < a3);
      v53 = *(unsigned int **)(v16 + 8);
      v60 = *(_DWORD *)(v16 + 20);
      a3 = v57;
    }
    else
    {
      v60 = 0;
      v55 = 0;
      v56 = &v53[32 * v39];
    }
LABEL_87:
    a2 = &v53[32 * (unint64_t)v60];
    if (v56 != a2)
    {
      v61 = v8;
      v62 = v12;
      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v56, a2, a3, (uint64_t)v12, 1, a6, a7, a8);
      v13 = 1;
      v12 = v62;
      v8 = v61;
      v60 = *(_DWORD *)(v16 + 20);
    }
    *(_DWORD *)(v16 + 20) = v60 - v55;
    v15 = (v15 + 1);
    v14 = *(unsigned int *)(a1 + 108);
    if (v14 > v15)
    {
      while (!*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v15))
      {
        if (v14 == ++v15)
        {
          v15 = *(unsigned int *)(a1 + 108);
          break;
        }
      }
    }
  }
  while ((_DWORD)v8 != (_DWORD)v15);
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(char *a1, uint64_t a2, WTF::BitVector *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int *v74;
  unint64_t v75;
  unsigned int *v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  WTF::BitVector *v108;
  __int128 *v109;
  unsigned int *v110;
  uint64_t v111;
  char v112;
  __int16 v113;
  unsigned int v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t **v120;
  void *v121;
  void **v122;
  uint64_t **v123;

  v102 = a2;
  v119 = 0;
  v9 = *(unsigned int *)(a2 + 140);
  if ((_DWORD)v9)
  {
    v10 = 2 * v9;
    v11 = *(unsigned __int16 **)(a2 + 128);
    do
    {
      v12 = *v11;
      LODWORD(v121) = *v11;
      v13 = *(_QWORD *)a3;
      if ((*(_QWORD *)a3 & 0x8000000000000000) != 0)
        v14 = 63;
      else
        v14 = *(_QWORD *)(2 * v13);
      if (v14 <= v12)
      {
        WTF::BitVector::resizeOutOfLine(a3, v12 + 1, 0);
        v13 = *(_QWORD *)a3;
      }
      v15 = 2 * v13 + 8;
      v16 = v13 < 0;
      v17 = (uint64_t)a3;
      if (!v16)
        v17 = v15;
      *(_QWORD *)(v17 + ((v12 >> 3) & 0x1FF8)) |= 1 << v12;
      if ((_DWORD)v12)
      {
        v18 = a1 + 8;
        if (*((_DWORD *)a1 + 5) <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1980566B0);
        }
      }
      else
      {
        if (!*((_DWORD *)a1 + 9))
          goto LABEL_141;
        v18 = a1 + 24;
      }
      v19 = (unsigned __int8 *)(*v18 + 2 * v12);
      v20 = *v19;
      v21 = v19[1];
      if (v20 > v21)
        v21 = v20;
      v22 = v21 >= 3;
      if (v21 == 3)
        v23 = 8;
      else
        v23 = 16;
      if (v22)
        v24 = v23;
      else
        v24 = 4;
      v104 = JSC::B3::Air::Code::addStackSlot(*(_QWORD *)a1, v24, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v116, &v119, (int *)&v121, &v104, v25, v26, v27, v28);
      ++v11;
      v10 -= 2;
    }
    while (v10);
  }
  v29 = *(_QWORD *)a1;
  *(_QWORD *)&v116 = v29;
  *((_QWORD *)&v116 + 1) = &v118;
  v117 = 8;
  v100 = *(unsigned int *)(v29 + 108);
  if ((_DWORD)v100)
  {
    v30 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v29 + 96) + 8 * v30))
    {
      if (v100 == ++v30)
        goto LABEL_123;
    }
    if ((_DWORD)v100 != (_DWORD)v30)
    {
      v99 = v29;
      LODWORD(v31) = *(_DWORD *)(v29 + 108);
      LODWORD(v32) = v30;
      while (1)
      {
        if (v31 <= v32)
        {
          __break(0xC471u);
          JUMPOUT(0x1980566A8);
        }
        v101 = v32;
        v33 = *(_QWORD *)(*(_QWORD *)(v29 + 96) + 8 * v32);
        v115 = 0;
        v114 = 0;
        if (*(_DWORD *)(v33 + 20))
          break;
LABEL_78:
        JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v116, (JSC::B3::Air::BasicBlock *)v33, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v115)
        {
          v69 = *(_QWORD *)(v33 + 8);
          v70 = *(unsigned int *)(v33 + 20);
          v71 = v69 + (v70 << 7);
          if ((_DWORD)v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = (unsigned int *)(v69 + (v70 << 7));
            v75 = (unint64_t)v74;
            do
            {
              v76 = (unsigned int *)(v69 + v72);
              if ((*(__int16 *)(v69 + v72 + 120) | 4) == 0x5E && v76[3] == 2)
              {
                v77 = *(_QWORD *)v76;
                if (*(_BYTE *)(*(_QWORD *)v76 + 8) == 1)
                {
                  v78 = *(_WORD *)(v69 + v72 + 120) != 94 && *(_BYTE *)(v77 + 40) == 1;
                  if (v78 && *(_DWORD *)(v77 + 16) == *(_DWORD *)(v77 + 48))
                  {
                    if (v75 == *(_QWORD *)(v33 + 8) + ((unint64_t)*(unsigned int *)(v33 + 20) << 7))
                    {
                      v75 = v69 + v72;
                    }
                    else if (v76 != v74)
                    {
                      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v74, v76, v75, a4, a5, a6, a7, a8);
                      v75 += v69 + v72 - (_QWORD)v74;
                      v77 = *(_QWORD *)(v69 + v72);
                    }
                    if (v69 + v72 + 16 != v77 && v77)
                    {
                      v79 = v69 + v72;
                      *(_QWORD *)v79 = 0;
                      *(_DWORD *)(v79 + 8) = 0;
                      WTF::fastFree(v77, v76, (uint64_t)a3, a4, a5, a6, a7, a8);
                    }
                    v74 = (unsigned int *)(v69 + v72 + 128);
                    ++v73;
                  }
                }
              }
              v72 += 128;
            }
            while (v69 + v72 < v71);
            v69 = *(_QWORD *)(v33 + 8);
            LODWORD(v70) = *(_DWORD *)(v33 + 20);
            v71 = v75;
          }
          else
          {
            v73 = 0;
            v74 = (unsigned int *)(v69 + (v70 << 7));
          }
          a2 = v69 + ((unint64_t)v70 << 7);
          if (v74 != (unsigned int *)a2)
          {
            WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v74, (unsigned int *)a2, v71, a4, a5, a6, a7, a8);
            LODWORD(v70) = *(_DWORD *)(v33 + 20);
          }
          *(_DWORD *)(v33 + 20) = v70 - v73;
        }
        v32 = (v101 + 1);
        v29 = v99;
        v31 = *(unsigned int *)(v99 + 108);
        if (v31 > v32)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v99 + 96) + 8 * v32))
          {
            if (v31 == ++v32)
            {
              LODWORD(v32) = *(_DWORD *)(v99 + 108);
              break;
            }
          }
        }
        if ((_DWORD)v100 == (_DWORD)v32)
          goto LABEL_123;
      }
      v34 = 0;
      while (1)
      {
        v35 = v34;
        v36 = *(_QWORD *)(v33 + 8);
        v37 = v36 + ((unint64_t)v34 << 7);
        v113 = 0;
        v112 = 0;
        v39 = (__int16 *)(v37 + 120);
        v38 = *(__int16 *)(v37 + 120);
        if (v38 == 90)
        {
          v56 = *(_DWORD *)(v37 + 12);
          if (!v56)
          {
            __break(0xC471u);
            JUMPOUT(0x198056658);
          }
          v57 = *(_QWORD *)v37;
          if (*(_BYTE *)(*(_QWORD *)v37 + 8) == 1)
          {
            v58 = *(unsigned int *)(v57 + 16);
            if ((int)v58 < 1)
            {
              v58 = -(int)v58;
              v59 = a1 + 24;
              if (v58 >= *((unsigned int *)a1 + 9))
              {
                __break(0xC471u);
                JUMPOUT(0x1980566A0);
              }
            }
            else
            {
              v59 = a1 + 8;
              if (v58 >= *((_DWORD *)a1 + 5))
              {
                __break(0xC471u);
                JUMPOUT(0x198056680);
              }
            }
            v60 = (unsigned __int8 *)(*v59 + 2 * v58);
            v61 = *v60;
            v62 = v60[1];
            if (v62 >= v61)
              v62 = v61;
            if (v62 < 3)
              goto LABEL_65;
          }
          if (v56 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198056688);
          }
          if (*(_BYTE *)(v57 + 40) == 1)
          {
            v63 = *(unsigned int *)(v57 + 48);
            if ((int)v63 < 1)
            {
              v63 = -(int)v63;
              v64 = a1 + 24;
              if (v63 >= *((unsigned int *)a1 + 9))
              {
                __break(0xC471u);
                JUMPOUT(0x198056698);
              }
            }
            else
            {
              v64 = a1 + 8;
              if (v63 >= *((_DWORD *)a1 + 5))
              {
                __break(0xC471u);
                JUMPOUT(0x198056690);
              }
            }
            v65 = (unsigned __int8 *)(*v64 + 2 * v63);
            v66 = *v65;
            v67 = v65[1];
            if (v67 >= v66)
              v67 = v66;
            if (v67 <= 2)
LABEL_65:
              HIBYTE(v113) = 1;
          }
        }
        v104 = (unsigned int *)&v119;
        v105 = v37;
        v106 = a1;
        v107 = (char *)&v113 + 1;
        v108 = (WTF::BitVector *)&v113;
        v109 = (__int128 *)&v112;
        if ((v38 - 446) <= 5)
        {
          v122 = &v121;
          v123 = (uint64_t **)&v104;
        }
        else
        {
          v40 = *(unsigned int *)(v37 + 12);
          if ((_DWORD)v40)
          {
            v41 = 0;
            v42 = 0;
            v43 = (char *)&JSC::B3::Air::g_formTable + 21 * v38 + ((unint64_t)((v40 - 1) * v40) >> 1);
            v44 = 32 * v40;
            while (1)
            {
              if (v42 >= *(unsigned int *)(v37 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x19805661CLL);
              }
              if ((*v43 >> 5) - 1 >= 5u)
                break;
              ++v42;
              ++v43;
              v41 += 32;
              if (v44 == v41)
                goto LABEL_39;
            }
LABEL_141:
            __break(0xC471u);
            JUMPOUT(0x1980565D4);
          }
        }
LABEL_39:
        if ((_BYTE)v113 && HIBYTE(v113))
          *v39 = 94;
        if (v112)
        {
          v80 = *v39;
          if (v80 != 90 && v80 != 94)
          {
            if ((v80 - 107) <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198056650);
            }
            __break(0xC471u);
            JUMPOUT(0x198056678);
          }
          v81 = *(_DWORD *)(*(_QWORD *)a1 + 176);
          *(_DWORD *)(*(_QWORD *)a1 + 176) = v81 + 1;
          LODWORD(v104) = v81 + 33;
          WTF::BitVector::set(a3, (v81 + 33));
          v88 = *(unsigned int *)(v37 + 12);
          if ((_DWORD)v88 == *(_DWORD *)(v37 + 8))
          {
            WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(v37, (unsigned int *)&v104, v82, v83, v84, v85, v86, v87);
            v91 = *(_DWORD *)(v37 + 12);
          }
          else
          {
            v89 = *(_QWORD *)v37 + 32 * v88;
            v90 = v104;
            *(_QWORD *)v89 = 0;
            *(_WORD *)(v89 + 8) = 513;
            *(_DWORD *)(v89 + 12) = 1;
            *(_QWORD *)(v89 + 16) = v90;
            *(_BYTE *)(v89 + 24) = 0;
            v91 = *(_DWORD *)(v37 + 12) + 1;
            *(_DWORD *)(v37 + 12) = v91;
          }
          if (v91 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980565F4);
          }
          JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&>((uint64_t)&v116, v114, 0, *(_QWORD *)(v36 + (v35 << 7) + 112), v84, v85, v86, v87);
        }
        else
        {
          v104 = (unsigned int *)&v119;
          v105 = v102;
          v106 = &v115;
          v107 = a1;
          v108 = a3;
          v109 = &v116;
          v110 = &v114;
          v111 = v37;
          v120 = (uint64_t **)&v104;
          v45 = *v39;
          if ((v45 - 446) <= 5)
          {
            v122 = &v121;
            v123 = (uint64_t **)&v120;
          }
          else
          {
            v46 = *(unsigned int *)(v37 + 12);
            if ((_DWORD)v46)
            {
              v47 = 0;
              v48 = (char *)&JSC::B3::Air::g_formTable + 21 * v45 + ((unint64_t)((v46 - 1) * v46) >> 1);
              v49 = 16;
              while (1)
              {
                if (v47 >= *(unsigned int *)(v37 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198056624);
                }
                v50 = v48[v47];
                if ((v50 >> 5) - 1 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198056614);
                }
                v51 = *(_QWORD *)v37;
                v52 = (unsigned int *)(*(_QWORD *)v37 + v49);
                v53 = *((char *)v52 - 8);
                if (v53 != 1)
                  break;
                v54 = v50 & 0xF;
                v55 = (v50 >> 4) & 1;
LABEL_48:
LABEL_49:
                ++v47;
                v49 += 32;
                if (v46 == v47)
                  goto LABEL_77;
              }
              if ((v53 - 6) < 3)
              {
                v52 = (unsigned int *)(v51 + v49);
              }
              else
              {
                if (v53 != 11)
                {
                  if ((v53 - 12) >= 2)
                    goto LABEL_49;
                  v52 = (unsigned int *)(v51 + v49);
                  v54 = 6;
                  goto LABEL_57;
                }
                v68 = v51 + v49;
                v52 = (unsigned int *)(v68 + 4);
              }
              v54 = 0;
LABEL_57:
              v55 = 0;
              goto LABEL_48;
            }
          }
        }
LABEL_77:
        v34 = v114 + 1;
        v114 = v34;
        if (v34 >= *(_DWORD *)(v33 + 20))
          goto LABEL_78;
      }
    }
  }
LABEL_123:
  JSC::B3::Air::InsertionSet::~InsertionSet((JSC::B3::Air::InsertionSet *)&v116, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v119)
    WTF::fastFree(v119 - 16, v92, v93, v94, v95, v96, v97, v98);
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::makeWorkList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  WTF::BitVector *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  __int16 v23[15];
  unsigned __int16 v24;

  v8 = *(_WORD *)(a1 + 16) + 1;
  v24 = v8;
  if (*(_DWORD *)(a1 + 68) > v8)
  {
    v10 = (WTF::BitVector *)(a1 + 200);
    v11 = (uint64_t *)(a1 + 288);
    v12 = a1 + 184;
    do
    {
      v13 = v8;
      if (*(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v8))
      {
        v15 = *(uint64_t **)(a1 + 232);
        if (*v15 >= 0)
          v15 = (uint64_t *)(2 * *v15 + 8);
        v16 = v13 >> 6;
        v17 = 1 << v13;
        if ((v15[v13 >> 6] & (1 << v13)) == 0)
        {
          v18 = *(_QWORD *)v10;
          if ((*(_QWORD *)v10 & 0x8000000000000000) != 0)
            v19 = 63;
          else
            v19 = *(_QWORD *)(2 * v18);
          if (v19 <= v13)
          {
            WTF::BitVector::resizeOutOfLine(v10, v13 + 1, 0);
            v18 = *(_QWORD *)v10;
          }
          if (v18 >= 0)
            v20 = 2 * v18 + 8;
          else
            v20 = (uint64_t)v10;
          *(_QWORD *)(v20 + 8 * v16) |= v17;
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 108) <= v8)
        {
          __break(0xC471u);
          return;
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 40 * v8))
        {
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(v23, v11, &v24, a4, a5, a6, a7, a8);
        }
        else
        {
          v14 = *(unsigned int *)(a1 + 196);
          if ((_DWORD)v14 == *(_DWORD *)(a1 + 192))
          {
            v21 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v14 + 1, (unint64_t)&v24);
            v22 = *(unsigned int *)(a1 + 196);
            *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v22) = *v21;
            *(_DWORD *)(a1 + 196) = v22 + 1;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v14) = v8;
            *(_DWORD *)(a1 + 196) = v14 + 1;
          }
        }
      }
      v8 = v24 + 1;
      v24 = v8;
    }
    while (*(_DWORD *)(a1 + 68) > v8);
  }
}

BOOL WTF::BitVector::add(WTF::BitVector *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::BitVector *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v4 = a2 + 1;
  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    v6 = 63;
  else
    v6 = *(_QWORD *)(2 * v5);
  if (v6 < v4)
  {
    WTF::BitVector::resizeOutOfLine(this, v4, 0);
    v5 = *(_QWORD *)this;
  }
  if (v5 >= 0)
    v7 = (WTF::BitVector *)(2 * v5 + 8);
  else
    v7 = this;
  v8 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)((char *)v7 + v8);
  result = (v9 & (1 << a2)) == 0;
  *(_QWORD *)((char *)v7 + v8) = v9 | (1 << a2);
  return result;
}

_WORD *WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(_WORD *result, uint64_t *a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _WORD *v18;
  int v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = (unsigned __int16)*a3;
  v15 = 9 * ((~(v14 << 15) + v14) ^ ((~(v14 << 15) + v14) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = (v16 ^ HIWORD(v16)) & v13;
  v18 = (_WORD *)(v11 + 2 * v17);
  v19 = (unsigned __int16)*v18;
  if (*v18)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v19 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v29 = 0;
        v28 = v11 + 2 * v31;
        goto LABEL_18;
      }
      if (v19 == 0xFFFF)
        v20 = v18;
      v17 = (v17 + v21) & v13;
      v18 = (_WORD *)(v11 + 2 * v17);
      v19 = (unsigned __int16)*v18;
      ++v21;
    }
    while (*v18);
    if (v20)
    {
      *v20 = 0;
      --*(_DWORD *)(*a2 - 16);
      LOWORD(v14) = *a3;
      v18 = v20;
    }
  }
  *v18 = v14;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v30 = 8;
LABEL_23:
      result = WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(a2, v30, (uint64_t)v18, a4, a5, a6, a7, a8);
      v18 = result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_17;
    }
LABEL_20:
    v30 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
    goto LABEL_23;
  }
LABEL_17:
  v28 = v24 + 2 * v27;
  v29 = 1;
LABEL_18:
  *(_QWORD *)v10 = v18;
  *((_QWORD *)v10 + 1) = v28;
  *((_BYTE *)v10 + 16) = v29;
  return result;
}

_WORD *WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  _WORD *v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _WORD *v33;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(2 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_WORD *)(v11 + 2 * v22);
      v25 = (unsigned __int16)*v24;
      if (*v24)
        v26 = v25 == 0xFFFF;
      else
        v26 = 1;
      if (!v26)
      {
        v27 = *a1;
        v28 = *a1 ? *(_DWORD *)(v27 - 8) : 0;
        v29 = 0;
        v30 = 9 * ((~(v25 << 15) + v25) ^ ((~(v25 << 15) + v25) >> 10));
        v31 = ((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) ^ (((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) >> 16);
        do
        {
          v32 = v31 & v28;
          v15 = (void *)*(unsigned __int16 *)(v27 + 2 * v32);
          v31 = ++v29 + v32;
        }
        while (*(_WORD *)(v27 + 2 * v32));
        v33 = (_WORD *)(v27 + 2 * v32);
        *v33 = v25;
        if (v24 == (_WORD *)a3)
          v23 = v33;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

_WORD *WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(uint64_t a1, unint64_t a2)
{
  _WORD *result;
  uint64_t v4;

  result = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 31))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 2 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 2 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

unint64_t **WTF::BitVector::iterator::operator++(unint64_t **result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = (unint64_t)result[1] + 1;
  v2 = **result;
  if ((v2 & 0x8000000000000000) != 0)
  {
    v4 = __clz(__rbit64(v2 >> v1)) + v1;
    if (v4 >= 0x3F)
      v4 = 63;
  }
  else
  {
    v3 = 2 * v2;
    v4 = *(_QWORD *)(2 * v2);
    v5 = (v4 + 63) >> 6;
    v6 = v1 >> 6;
    if (v1 >> 6 < v5)
    {
      v7 = *(_QWORD *)(v3 + 8 * v6 + 8);
      if (v7)
      {
        v8 = __clz(__rbit64(v7 >> v1)) + (v1 & 0x3F);
        if (v8 < 0x40)
        {
LABEL_5:
          result[1] = (unint64_t *)(v8 + (v6 << 6));
          return result;
        }
      }
      if (v6 + 1 != v5)
      {
        v9 = v5 - 1;
        v10 = v3 + 16;
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 8 * v6);
          if (v11)
          {
            v8 = __clz(__rbit64(v11));
            if (v8 <= 0x3F)
              break;
          }
          if (v9 == ++v6)
            goto LABEL_13;
        }
        ++v6;
        goto LABEL_5;
      }
    }
  }
LABEL_13:
  result[1] = (unint64_t *)v4;
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::addWorkList(_WORD *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  __int16 v36;

  v36 = a2;
  if ((unsigned __int16)result[8] < a2)
  {
    v8 = a2;
    v9 = result;
    if (*((_DWORD *)result + 3) > *(unsigned __int16 *)(*((_QWORD *)result + 7) + 2 * a2))
    {
      if (*((_DWORD *)result + 27) <= a2)
      {
        __break(0xC471u);
      }
      else
      {
        v10 = *((_QWORD *)result + 12) + 40 * a2;
        v11 = *(unsigned int *)(v10 + 4);
        v12 = (_QWORD *)(v10 + 8);
        if ((_DWORD)v11 != 8)
          v12 = (_QWORD *)*v12;
        v13 = 0;
        while ((_DWORD)v11 != v13)
        {
          v14 = v13;
          v15 = *((_DWORD *)v12 + v13++);
          if (v15 != -1)
          {
            v16 = v14;
            goto LABEL_10;
          }
        }
        v16 = v11;
LABEL_10:
        if ((_DWORD)v11 == (_DWORD)v16)
        {
LABEL_20:
          v23 = *((_QWORD *)result + 36);
          if (v23)
          {
            v24 = *(_DWORD *)(v23 - 8);
            v25 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
            v26 = v24 & (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6))
                                                                              + ~((v25 ^ (v25 >> 6)) << 11)) >> 16));
            v27 = *(unsigned __int16 *)(v23 + 2 * v26);
            if (v27 != a2)
            {
              v28 = 1;
              while (v27)
              {
                v26 = ((_DWORD)v26 + v28) & v24;
                v27 = *(unsigned __int16 *)(v23 + 2 * v26);
                ++v28;
                if (v27 == a2)
                  goto LABEL_25;
              }
              v26 = *(unsigned int *)(v23 - 4);
            }
LABEL_25:
            if (v26 != *(_DWORD *)(v23 - 4))
            {
              *(_WORD *)(v23 + 2 * v26) = -1;
              result += 144;
              ++*(_DWORD *)(*((_QWORD *)v9 + 36) - 16);
              v29 = *((_QWORD *)v9 + 36);
              v30 = v29 ? *(_DWORD *)(v29 - 12) - 1 : -1;
              *(_DWORD *)(v29 - 12) = v30;
              v31 = *(_QWORD *)result;
              if (*(_QWORD *)result)
              {
                v32 = 6 * *(_DWORD *)(v31 - 12);
                v33 = *(_DWORD *)(v31 - 4);
                if (v32 < v33 && v33 >= 9)
                  result = WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash((uint64_t *)result, v33 >> 1, 0, a4, a5, a6, a7, a8);
              }
            }
          }
          v35 = *((unsigned int *)v9 + 49);
          if ((_DWORD)v35 == *((_DWORD *)v9 + 48))
          {
            return WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)(v9 + 92), (unint64_t)&v36);
          }
          else
          {
            *(_WORD *)(*((_QWORD *)v9 + 23) + 2 * v35) = v8;
            *((_DWORD *)v9 + 49) = v35 + 1;
          }
        }
        else
        {
          v17 = v16 | (v11 << 32);
          v18 = (uint64_t)(result + 176);
          v19 = *((_QWORD *)result + 44);
          if (v19 >= 0)
            v18 = 2 * v19 + 8;
          while (1)
          {
            v20 = *((unsigned int *)v12 + v17);
            if (((*(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) != 0
              || *(_DWORD *)(*((_QWORD *)result + 37) + 4 * v20) != -1)
            {
              break;
            }
            v21 = HIDWORD(v17);
            if ((v16 + 1) > HIDWORD(v17))
              LODWORD(v21) = v16 + 1;
            while (1)
            {
              v22 = (v16 + 1);
              v17 = v17 & 0xFFFFFFFF00000000 | v22;
              if ((_DWORD)v21 - 1 == (_DWORD)v16)
                break;
              LODWORD(v16) = v16 + 1;
              if (*((_DWORD *)v12 + v22) != -1)
                goto LABEL_19;
            }
            LODWORD(v22) = v21;
LABEL_19:
            LODWORD(v16) = v22;
            if ((_DWORD)v11 == (_DWORD)v22)
              goto LABEL_20;
          }
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::canBeSafelyCoalesced(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 **v15;
  unsigned __int16 **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _WORD v49[64];

  v3 = *(unsigned __int16 *)(a1 + 16);
  LOBYTE(v4) = a2;
  if (v3 >= a2)
  {
    v25 = *(_QWORD *)(a1 + 40) + 16 * a3;
    v26 = *(unsigned int *)(v25 + 12);
    if (!(_DWORD)v26)
      goto LABEL_43;
    v27 = *(unsigned __int16 **)v25;
    v28 = (uint64_t *)(a1 + 160);
    v29 = 2 * v26;
    while (1)
    {
      v30 = *v27;
      if (v3 < v30)
      {
        v31 = *v28 >= 0 ? 2 * *v28 + 8 : a1 + 160;
        if (((*(_QWORD *)(v31 + ((v30 >> 3) & 0x1FF8)) >> v30) & 1) == 0
          && !*(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v30)
          && *(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v30))
        {
          v32 = v30 + *(unsigned __int16 *)(a1 + 36) * (unint64_t)a2;
          v33 = *(_QWORD *)(a1 + 24);
          v34 = v33 >= 0 ? 2 * v33 + 8 : a1 + 24;
          if (((*(_QWORD *)(v34 + ((v32 >> 3) & 0x3FFFFFF8)) >> v32) & 1) == 0)
            goto LABEL_79;
        }
      }
      ++v27;
      v29 -= 2;
      if (!v29)
        goto LABEL_43;
    }
  }
  v5 = *(uint64_t **)(a1 + 232);
  v6 = *v5;
  v7 = (unint64_t *)(2 * *v5);
  if (*v5 < 0)
    v8 = 63;
  else
    v8 = *v7;
  if (v8 <= a2)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v9 = v7 + 1;
    if (v6 < 0)
      v9 = *(_QWORD **)(a1 + 232);
    v10 = (*(_QWORD *)((char *)v9 + (((unint64_t)a2 >> 3) & 0x1FF8)) >> a2) & 1;
  }
  if (v6 < 0)
    v11 = 63;
  else
    v11 = *v7;
  if (v11 <= a3)
  {
    if ((v10 & 1) == 0)
      goto LABEL_14;
LABEL_79:
    v35 = 0;
    return v35 & 1;
  }
  v12 = (uint64_t *)(v7 + 1);
  if (v6 >= 0)
    v5 = v12;
  if (((v10 ^ (*(unint64_t *)((char *)v5 + (((unint64_t)a3 >> 3) & 0x1FF8)) >> a3)) & 1) != 0)
    goto LABEL_79;
LABEL_14:
  v13 = *(unsigned int *)(a1 + 12);
  if (v13 < 0x41)
  {
    v14 = *(_QWORD *)(a1 + 40);
    v15 = (unsigned __int16 **)(v14 + 16 * a2);
    v16 = (unsigned __int16 **)(v14 + 16 * a3);
    v17 = *((unsigned int *)v15 + 3);
    v18 = *((unsigned int *)v16 + 3);
    v4 = v18 + v17;
    if (v13 <= (int)v18 + (int)v17)
    {
      v19 = 0;
      if ((_DWORD)v17)
      {
        v20 = *v15;
        v21 = a1 + 160;
        v22 = *(_QWORD *)(a1 + 160);
        if (v22 >= 0)
          v21 = 2 * v22 + 8;
        for (i = 2 * v17; i; i -= 2)
        {
          v24 = *v20;
          --v4;
          if (((*(_QWORD *)(v21 + ((v24 >> 3) & 0x1FF8)) >> v24) & 1) != 0
            || *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v24)
            || v13 > *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v24))
          {
            if (v19 + v4 < v13)
              goto LABEL_43;
          }
          else
          {
            if (v19 >= 0x40)
              goto LABEL_82;
            v49[v19++] = v24;
            if (v19 >= v13)
              goto LABEL_79;
          }
          ++v20;
        }
      }
      if ((_DWORD)v18)
      {
        v36 = *v16;
        v37 = a1 + 160;
        v38 = *(_QWORD *)(a1 + 160);
        if (v38 >= 0)
          v37 = 2 * v38 + 8;
        if (v19)
        {
          v39 = v19;
          v40 = &v36[v18];
          while (1)
          {
            v41 = *v36;
            --v4;
            if (((*(_QWORD *)(v37 + ((v41 >> 3) & 0x1FF8)) >> v41) & 1) != 0
              || *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v41)
              || v13 > *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v41))
            {
              goto LABEL_59;
            }
            v42 = v49;
            v43 = 2 * v19;
            while (*v42 != (_DWORD)v41)
            {
              ++v42;
              v43 -= 2;
              if (!v43)
              {
                v42 = &v49[v19];
                break;
              }
            }
            if (v19 != v42 - v49)
            {
LABEL_59:
              if (v39 + v4 < v13)
                goto LABEL_75;
            }
            else
            {
              if (v39 >= 0x40)
                goto LABEL_82;
              v49[v39++] = v41;
              if (v39 >= v13)
                goto LABEL_64;
            }
            if (++v36 == v40)
              goto LABEL_83;
          }
        }
        v45 = 0;
        v46 = 2 * v18;
        --v4;
        while (1)
        {
          v47 = *v36;
          if (((*(_QWORD *)(v37 + ((v47 >> 3) & 0x1FF8)) >> v47) & 1) != 0
            || *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v47)
            || v13 > *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v47))
          {
            if (v45 + v4 < v13)
            {
LABEL_75:
              v44 = 0;
              LOBYTE(v4) = 1;
              goto LABEL_76;
            }
          }
          else
          {
            if (v45 > 0x3F)
              goto LABEL_82;
            v49[v45++] = v47;
            if (v45 >= v13)
            {
LABEL_64:
              v44 = 0;
              LOBYTE(v4) = 0;
              goto LABEL_76;
            }
          }
          ++v36;
          --v4;
          v46 -= 2;
          if (!v46)
            goto LABEL_83;
        }
      }
      goto LABEL_83;
    }
LABEL_43:
    v35 = 1;
    return v35 & 1;
  }
  __break(0xC471u);
LABEL_82:
  __break(1u);
LABEL_83:
  v44 = 1;
LABEL_76:
  v35 = v44 | v4;
  return v35 & 1;
}

uint64_t WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove(uint64_t *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v8 = *a1;
  if (!*a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v11 = v9 & (((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) ^ (((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) >> 16));
  v12 = *(unsigned __int16 *)(v8 + 2 * v11);
  if (v12 != a2)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v9;
      v12 = *(unsigned __int16 *)(v8 + 2 * v11);
      ++v13;
      if (v12 == a2)
        goto LABEL_6;
    }
    v11 = *(unsigned int *)(v8 - 4);
  }
LABEL_6:
  if (v11 == *(_DWORD *)(v8 - 4))
    return 0;
  *(_WORD *)(v8 + 2 * v11) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(a1, v18 >> 1, 0, a4, a5, a6, a7, a8);
  }
  return 1;
}

void WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>(uint64_t a1, uint64_t *a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned __int16 *v34;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = (unsigned __int16)*a3;
  v16 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = (unsigned __int16 *)(v12 + 32 * v18);
  v20 = *v19;
  if (v20 != 0xFFFF)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v15)
      {
        if ((v13 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v12 - 4);
        v24 = 0;
        v25 = v12 + 32 * v23;
        goto LABEL_9;
      }
      if (v20 == 65534)
        v21 = v19;
      v18 = ((_DWORD)v18 + v22) & v14;
      v19 = (unsigned __int16 *)(v12 + 32 * v18);
      v20 = *v19;
      ++v22;
    }
    while (v20 != 0xFFFF);
    if (v21)
    {
      *v21 = -1;
      *((_QWORD *)v21 + 1) = 0x800000000;
      *((_QWORD *)v21 + 2) = -1;
      *((_QWORD *)v21 + 3) = -1;
      --*(_DWORD *)(*a2 - 16);
      LOWORD(v15) = *a3;
      v19 = v21;
    }
  }
  *v19 = v15;
  if (*((_DWORD *)v19 + 3) != 8)
  {
    v34 = v19;
    WTF::fastFree(*((_QWORD *)v19 + 2), a2, (uint64_t)v19, a4, a5, a6, a7, a8);
    v19 = v34;
  }
  v26 = *(_OWORD *)a4;
  *((_QWORD *)v19 + 3) = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(v19 + 4) = v26;
  *(_QWORD *)a4 = 0x800000000;
  *(_QWORD *)(a4 + 8) = -1;
  *(_QWORD *)(a4 + 16) = -1;
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_23;
    goto LABEL_30;
  }
  if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
      goto LABEL_27;
    }
LABEL_30:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
LABEL_27:
    v19 = (unsigned __int16 *)WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(a2, v33, v19);
    v29 = *a2;
    if (*a2)
      v32 = *(unsigned int *)(v29 - 4);
    else
      v32 = 0;
  }
LABEL_23:
  v25 = v29 + 32 * v32;
  v24 = 1;
LABEL_9:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v24;
}

{
  uint64_t v10;
  char v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  unsigned __int16 *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  _WORD *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;

  v10 = *a2;
  if (*a2
    || (v31 = a3,
        v33 = a4,
        WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(a2),
        a3 = v31,
        a4 = v33,
        (v10 = *a2) != 0))
  {
    v11 = 0;
    v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v12 = 0;
    v11 = 1;
  }
  v13 = (unsigned __int16)*a3;
  v14 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
  v15 = (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16)) & v12;
  v16 = (unsigned __int16 *)(v10 + 32 * v15);
  v17 = *v16;
  if (v17 != 0xFFFF)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v13)
      {
        if ((v11 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v10 - 4);
        v28 = 0;
        v27 = v10 + 32 * v29;
        goto LABEL_23;
      }
      if (v17 == 65534)
        v18 = v16;
      v15 = ((_DWORD)v15 + v19) & v12;
      v16 = (unsigned __int16 *)(v10 + 32 * v15);
      v17 = *v16;
      ++v19;
    }
    while (v17 != 0xFFFF);
    if (v18)
    {
      *v18 = -1;
      *((_QWORD *)v18 + 1) = 0x800000000;
      *((_QWORD *)v18 + 2) = -1;
      *((_QWORD *)v18 + 3) = -1;
      --*(_DWORD *)(*a2 - 16);
      LOWORD(v13) = *a3;
      v16 = v18;
    }
  }
  *v16 = v13;
  if (*((_DWORD *)v16 + 3) != 8)
  {
    v32 = v16;
    v34 = a4;
    WTF::fastFree(*((_QWORD *)v16 + 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v16 = v32;
    a4 = v34;
  }
  v20 = *(_OWORD *)a4;
  *((_QWORD *)v16 + 3) = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(v16 + 4) = v20;
  *(_QWORD *)a4 = 0x800000000;
  *(_QWORD *)(a4 + 8) = -1;
  *(_QWORD *)(a4 + 16) = -1;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_19;
    goto LABEL_26;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v30 = 8;
LABEL_31:
      v16 = (unsigned __int16 *)WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(a2, v30, v16);
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_19;
    }
LABEL_26:
    v30 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
LABEL_19:
  v27 = v23 + 32 * v26;
  v28 = 1;
LABEL_23:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v28;
}

uint64_t WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add(uint64_t result, unsigned int *a2, int a3)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v59;
  unsigned int v60;
  int v61;
  char v63;
  char *v64;
  int v65;
  int v67;
  int v68;
  int v70;
  int v71;
  int v73;
  int v74;
  int v76;
  int v77;
  int v79;
  int v80;
  int v82;
  int v83;
  int v85;
  int v86;
  int v88;
  int v89;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != 8)
  {
LABEL_64:
    if (3 * v4 <= (4 * v5))
    {
      v92 = result;
      v94 = a3;
      WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::grow((uint64_t)a2, 2 * v4);
      a3 = v94;
      result = v92;
      v4 = a2[1];
    }
    v8 = (unsigned int *)*((_QWORD *)a2 + 1);
    v59 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v60 = (v59 ^ (v59 >> 6)) + ~((v59 ^ (v59 >> 6)) << 11);
    v5 = (v4 - 1) & (v60 ^ HIWORD(v60));
    v61 = *((unsigned __int16 *)v8 + v5);
    if (v61 != 0xFFFF && v61 != a3)
    {
      v65 = 1;
      do
      {
        v5 = ((_DWORD)v5 + v65) & (v4 - 1);
        v61 = *((unsigned __int16 *)v8 + v5);
        ++v65;
      }
      while (v61 != 0xFFFF && v61 != a3);
    }
    if (v61 == a3)
    {
      v63 = 0;
    }
    else
    {
      v64 = (char *)v8 + 2 * v5;
      *(_WORD *)v64 = a3;
      ++*a2;
      v8 = (unsigned int *)*((_QWORD *)a2 + 1);
      v5 = (unint64_t)(v64 - (char *)v8) >> 1;
      v63 = 1;
    }
    goto LABEL_74;
  }
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *a2;
    v8 = a2 + 2;
    do
    {
      if (*((unsigned __int16 *)a2 + v6 + 4) == a3)
      {
        v63 = 0;
        v4 = 8;
        LODWORD(v5) = v6;
        goto LABEL_74;
      }
      ++v6;
    }
    while (v5 != v6);
    if (v5 <= 7)
      goto LABEL_76;
    v93 = a3;
    v91 = result;
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    *v9 = v10;
    v9[1] = v10;
    v9[2] = v10;
    v9[3] = v10;
    v9[4] = v10;
    v9[5] = v10;
    v9[6] = v10;
    v9[7] = v10;
    a2[1] = 64;
    v11 = *((unsigned __int16 *)a2 + 4);
    if (v11 != 0xFFFF)
    {
      v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
      v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
      v14 = (v13 ^ BYTE2(v13)) & 0x3F;
      v15 = *((unsigned __int16 *)v9 + v14);
      if (v15 != 0xFFFF && v15 != v11)
      {
        v67 = 1;
        do
        {
          v14 = ((_BYTE)v14 + (_BYTE)v67) & 0x3F;
          v68 = *((unsigned __int16 *)v9 + v14);
          ++v67;
        }
        while (v68 != 0xFFFF && v68 != v11);
      }
      *((_WORD *)v9 + v14) = v11;
    }
    v17 = *((unsigned __int16 *)a2 + 5);
    if (v17 != 0xFFFF)
    {
      v18 = 9 * ((~(v17 << 15) + v17) ^ ((~(v17 << 15) + v17) >> 10));
      v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
      v20 = (v19 ^ BYTE2(v19)) & 0x3F;
      v21 = *((unsigned __int16 *)v9 + v20);
      if (v21 != 0xFFFF && v21 != v17)
      {
        v70 = 1;
        do
        {
          v20 = ((_BYTE)v20 + (_BYTE)v70) & 0x3F;
          v71 = *((unsigned __int16 *)v9 + v20);
          ++v70;
        }
        while (v71 != 0xFFFF && v71 != v17);
      }
      *((_WORD *)v9 + v20) = v17;
    }
    v23 = *((unsigned __int16 *)a2 + 6);
    if (v23 != 0xFFFF)
    {
      v24 = 9 * ((~(v23 << 15) + v23) ^ ((~(v23 << 15) + v23) >> 10));
      v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
      v26 = (v25 ^ BYTE2(v25)) & 0x3F;
      v27 = *((unsigned __int16 *)v9 + v26);
      if (v27 != 0xFFFF && v27 != v23)
      {
        v73 = 1;
        do
        {
          v26 = ((_BYTE)v26 + (_BYTE)v73) & 0x3F;
          v74 = *((unsigned __int16 *)v9 + v26);
          ++v73;
        }
        while (v74 != 0xFFFF && v74 != v23);
      }
      *((_WORD *)v9 + v26) = v23;
    }
    v29 = *((unsigned __int16 *)a2 + 7);
    if (v29 != 0xFFFF)
    {
      v30 = 9 * ((~(v29 << 15) + v29) ^ ((~(v29 << 15) + v29) >> 10));
      v31 = (v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11);
      v32 = (v31 ^ BYTE2(v31)) & 0x3F;
      v33 = *((unsigned __int16 *)v9 + v32);
      if (v33 != 0xFFFF && v33 != v29)
      {
        v76 = 1;
        do
        {
          v32 = ((_BYTE)v32 + (_BYTE)v76) & 0x3F;
          v77 = *((unsigned __int16 *)v9 + v32);
          ++v76;
        }
        while (v77 != 0xFFFF && v77 != v29);
      }
      *((_WORD *)v9 + v32) = v29;
    }
    v35 = *((unsigned __int16 *)a2 + 8);
    if (v35 != 0xFFFF)
    {
      v36 = 9 * ((~(v35 << 15) + v35) ^ ((~(v35 << 15) + v35) >> 10));
      v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
      v38 = (v37 ^ BYTE2(v37)) & 0x3F;
      v39 = *((unsigned __int16 *)v9 + v38);
      if (v39 != 0xFFFF && v39 != v35)
      {
        v79 = 1;
        do
        {
          v38 = ((_BYTE)v38 + (_BYTE)v79) & 0x3F;
          v80 = *((unsigned __int16 *)v9 + v38);
          ++v79;
        }
        while (v80 != 0xFFFF && v80 != v35);
      }
      *((_WORD *)v9 + v38) = v35;
    }
    v41 = *((unsigned __int16 *)a2 + 9);
    if (v41 != 0xFFFF)
    {
      v42 = 9 * ((~(v41 << 15) + v41) ^ ((~(v41 << 15) + v41) >> 10));
      v43 = (v42 ^ (v42 >> 6)) + ~((v42 ^ (v42 >> 6)) << 11);
      v44 = (v43 ^ BYTE2(v43)) & 0x3F;
      v45 = *((unsigned __int16 *)v9 + v44);
      if (v45 != 0xFFFF && v45 != v41)
      {
        v82 = 1;
        do
        {
          v44 = ((_BYTE)v44 + (_BYTE)v82) & 0x3F;
          v83 = *((unsigned __int16 *)v9 + v44);
          ++v82;
        }
        while (v83 != 0xFFFF && v83 != v41);
      }
      *((_WORD *)v9 + v44) = v41;
    }
    v47 = *((unsigned __int16 *)a2 + 10);
    if (v47 != 0xFFFF)
    {
      v48 = 9 * ((~(v47 << 15) + v47) ^ ((~(v47 << 15) + v47) >> 10));
      v49 = (v48 ^ (v48 >> 6)) + ~((v48 ^ (v48 >> 6)) << 11);
      v50 = (v49 ^ BYTE2(v49)) & 0x3F;
      v51 = *((unsigned __int16 *)v9 + v50);
      if (v51 != 0xFFFF && v51 != v47)
      {
        v85 = 1;
        do
        {
          v50 = ((_BYTE)v50 + (_BYTE)v85) & 0x3F;
          v86 = *((unsigned __int16 *)v9 + v50);
          ++v85;
        }
        while (v86 != 0xFFFF && v86 != v47);
      }
      *((_WORD *)v9 + v50) = v47;
    }
    v53 = *((unsigned __int16 *)a2 + 11);
    if (v53 != 0xFFFF)
    {
      v54 = 9 * ((~(v53 << 15) + v53) ^ ((~(v53 << 15) + v53) >> 10));
      v55 = (v54 ^ (v54 >> 6)) + ~((v54 ^ (v54 >> 6)) << 11);
      v56 = (v55 ^ BYTE2(v55)) & 0x3F;
      v57 = *((unsigned __int16 *)v9 + v56);
      if (v57 != 0xFFFF && v57 != v53)
      {
        v88 = 1;
        do
        {
          v56 = ((_BYTE)v56 + (_BYTE)v88) & 0x3F;
          v89 = *((unsigned __int16 *)v9 + v56);
          ++v88;
        }
        while (v89 != 0xFFFF && v89 != v53);
      }
      *((_WORD *)v9 + v56) = v53;
    }
    LODWORD(v5) = *a2;
    *((_QWORD *)a2 + 1) = v9;
    v4 = 64;
    result = v91;
    a3 = v93;
    goto LABEL_64;
  }
  v7 = 0;
LABEL_76:
  *a2 = v5 + 1;
  *((_WORD *)a2 + v7 + 4) = a3;
  v63 = 1;
  v4 = 8;
  v8 = a2 + 2;
LABEL_74:
  *(_DWORD *)result = v5;
  *(_DWORD *)(result + 4) = v4;
  *(_QWORD *)(result + 8) = v8;
  *(_BYTE *)(result + 16) = v63;
  return result;
}

uint64_t WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(a1, v3, 0);
}

uint64_t WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v5;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  unsigned __int16 *v34;
  uint64_t result;
  unsigned __int16 *v36;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = (_QWORD *)(v10 + 32);
    do
    {
      *((_WORD *)v18 - 8) = -1;
      *(v18 - 1) = 0x800000000;
      *v18 = -1;
      v18[1] = -1;
      v18 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    v21 = v7;
    v22 = a3;
    do
    {
      v23 = (unsigned __int16 *)(v5 + 32 * v19);
      v24 = *v23;
      if (v24 == 0xFFFF)
      {
        if (*((_DWORD *)v23 + 3) != 8)
        {
          v34 = v22;
          WTF::fastFree(*(_QWORD *)(v5 + 32 * v19 + 16), v11, v12, v13, v14, v15, v16, v17);
          v22 = v34;
        }
      }
      else if (v24 != 65534)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = 0;
        v28 = 9 * ((~(v24 << 15) + v24) ^ ((~(v24 << 15) + v24) >> 10));
        v29 = ((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) >> 16);
        do
        {
          v30 = v29 & v26;
          v29 = ++v27 + v30;
        }
        while (*(__int16 *)(v25 + 32 * v30) != -1);
        v31 = v25 + 32 * v30;
        if (*(_DWORD *)(v31 + 12) != 8)
        {
          v36 = v22;
          WTF::fastFree(*(_QWORD *)(v31 + 16), v11, v12, v13, v14, v15, v16, v17);
          v22 = v36;
          LOWORD(v24) = *v23;
        }
        *(_WORD *)v31 = v24;
        v32 = v5 + 32 * v19;
        v33 = *(_OWORD *)(v32 + 8);
        *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
        *(_OWORD *)(v31 + 8) = v33;
        *(_QWORD *)(v32 + 8) = 0x800000000;
        *(_QWORD *)(v32 + 16) = -1;
        *(_QWORD *)(v32 + 24) = -1;
        if (v23 == v22)
          v20 = v31;
      }
      ++v19;
    }
    while (v19 != v21);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v11, v12, v13, v14, v15, v16, v17);
  return v20;
}

void WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::grow(uint64_t a1, unsigned int a2)
{
  size_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int16 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v24;
  int v25;

  v4 = 2 * a2;
  v5 = *(unsigned int *)(a1 + 4);
  v6 = (unint64_t *)(a1 + 8);
  v7 = a1 + 8;
  if ((_DWORD)v5 != 8)
    v7 = *v6;
  v8 = (unsigned __int16 *)WTF::fastMalloc((WTF *)(2 * a2));
  memset(v8, 255, v4);
  *(_DWORD *)(a1 + 4) = a2;
  if (!(_DWORD)v5)
    goto LABEL_21;
  v16 = 0;
  v17 = a2 - 1;
  do
  {
    v18 = *(unsigned __int16 *)(v7 + 2 * v16);
    if (v18 != 0xFFFF)
    {
      v19 = 9 * ((~(v18 << 15) + v18) ^ ((~(v18 << 15) + v18) >> 10));
      v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      v21 = (v20 ^ HIWORD(v20)) & v17;
      v22 = v8[v21];
      if (v22 != 0xFFFF && v22 != v18)
      {
        v24 = 1;
        do
        {
          v21 = ((_DWORD)v21 + v24) & v17;
          v25 = v8[v21];
          ++v24;
        }
        while (v25 != 0xFFFF && v25 != v18);
      }
      v8[v21] = v18;
    }
    ++v16;
  }
  while (v16 != v5);
  if ((_DWORD)v5 != 8)
LABEL_21:
    WTF::fastFree(v7, v9, v10, v11, v12, v13, v14, v15);
  *v6 = (unint64_t)v8;
}

uint64_t WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::takeAny(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v8 = *a1;
  if (!*a1 || !*(_DWORD *)(v8 - 12))
    return 0;
  v9 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v9)
  {
    v10 = 2 * v9;
    for (i = (_WORD *)*a1; (unsigned __int16)(*i + 1) <= 1u; ++i)
    {
      v10 -= 2;
      if (!v10)
        return 0;
    }
  }
  else
  {
    i = (_WORD *)*a1;
  }
  if ((_WORD *)(v8 + 2 * v9) == i)
    return 0;
  v12 = (unsigned __int16)*i;
  *i = -1;
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(a1, v17 >> 1, 0, a4, a5, a6, a7, a8);
  }
  return v12;
}

char *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::freezeMoves(char *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;

  if (*((_DWORD *)result + 27) <= a2)
  {
    __break(0xC471u);
    goto LABEL_72;
  }
  v9 = result;
  v10 = *((_QWORD *)result + 12) + 40 * a2;
  v11 = *(unsigned int *)(v10 + 4);
  v12 = (_QWORD *)(v10 + 8);
  if ((_DWORD)v11 != 8)
    v12 = (_QWORD *)*v12;
  v13 = 0;
  while ((_DWORD)v11 != v13)
  {
    v14 = v13;
    v15 = *((_DWORD *)v12 + v13++);
    if (v15 != -1)
    {
      v16 = v14;
      goto LABEL_8;
    }
  }
  v16 = v11;
LABEL_8:
  if ((_DWORD)v11 != (_DWORD)v16)
  {
    v17 = (uint64_t *)(result + 352);
    v18 = result + 296;
    v19 = v16 | (v11 << 32);
    do
    {
      v20 = *((unsigned int *)v12 + v19);
      if (*v17 >= 0)
        v21 = 2 * *v17 + 8;
      else
        v21 = (uint64_t)(v9 + 352);
      if (((*(_QWORD *)(v21 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) != 0 || *(_DWORD *)(*v18 + 4 * v20) != -1)
      {
        v22 = (unsigned __int16)*((_DWORD *)v12 + v19);
        v23 = (v22 >> 3) & 0x1FF8;
        v24 = *(_QWORD *)(v21 + v23);
        *(_QWORD *)(v21 + v23) = v24 & ~(1 << *((_DWORD *)v12 + v19));
        if ((v24 & (1 << v22)) == 0)
        v25 = (unsigned __int16 *)(*((_QWORD *)v9 + 10) + 4 * v22);
        v26 = *v25;
        v27 = v25[1];
        if (v26 != a2)
          v27 = v26;
        do
        {
          v28 = v27;
          v27 = *(unsigned __int16 *)(*((_QWORD *)v9 + 18) + 2 * v27);
        }
        while (v27);
        v29 = v28;
        v57 = v28;
        if (*((_DWORD *)v9 + 3) > *(unsigned __int16 *)(*((_QWORD *)v9 + 7) + 2 * v28))
        {
          if (*((_DWORD *)v9 + 27) <= v28)
          {
            __break(0xC471u);
LABEL_72:
            JUMPOUT(0x19805853CLL);
          }
          v30 = *((_QWORD *)v9 + 12) + 40 * v28;
          v31 = *(unsigned int *)(v30 + 4);
          v32 = (_QWORD *)(v30 + 8);
          if ((_DWORD)v31 != 8)
            v32 = (_QWORD *)*v32;
          v33 = 0;
          while ((_DWORD)v31 != v33)
          {
            v34 = v33;
            v35 = *((_DWORD *)v32 + v33++);
            if (v35 != -1)
            {
              v36 = v34;
              goto LABEL_27;
            }
          }
          v36 = v31;
LABEL_27:
          if ((_DWORD)v31 == (_DWORD)v36)
          {
LABEL_38:
            v42 = *((_QWORD *)v9 + 36);
            if (v42)
            {
              v43 = *(_DWORD *)(v42 - 8);
              v44 = 9 * ((~(v29 << 15) + v29) ^ ((~(v29 << 15) + v29) >> 10));
              v45 = v43 & (((v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11)) ^ (((v44 ^ (v44 >> 6))
                                                                                + ~((v44 ^ (v44 >> 6)) << 11)) >> 16));
              v46 = *(unsigned __int16 *)(v42 + 2 * v45);
              if (v46 != v29)
              {
                v56 = 1;
                while (v46)
                {
                  v45 = ((_DWORD)v45 + v56) & v43;
                  v46 = *(unsigned __int16 *)(v42 + 2 * v45);
                  ++v56;
                  if (v46 == v29)
                    goto LABEL_40;
                }
                v45 = *(unsigned int *)(v42 - 4);
              }
LABEL_40:
              if (v45 != *(_DWORD *)(v42 - 4))
              {
                *(_WORD *)(v42 + 2 * v45) = -1;
                ++*(_DWORD *)(*((_QWORD *)v9 + 36) - 16);
                v47 = *((_QWORD *)v9 + 36);
                if (v47)
                  v48 = *(_DWORD *)(v47 - 12) - 1;
                else
                  v48 = -1;
                result = v9 + 288;
                *(_DWORD *)(v47 - 12) = v48;
                v49 = *((_QWORD *)v9 + 36);
                if (v49)
                {
                  v50 = 6 * *(_DWORD *)(v49 - 12);
                  v51 = *(_DWORD *)(v49 - 4);
                  if (v50 < v51 && v51 >= 9)
                    result = (char *)WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash((uint64_t *)result, v51 >> 1, 0, a4, a5, a6, a7, a8);
                }
                v53 = *((unsigned int *)v9 + 49);
                if ((_DWORD)v53 == *((_DWORD *)v9 + 48))
                {
                  result = (char *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)(v9 + 184), (unint64_t)&v57);
                }
                else
                {
                  *(_WORD *)(*((_QWORD *)v9 + 23) + 2 * v53) = v29;
                  *((_DWORD *)v9 + 49) = v53 + 1;
                }
              }
            }
          }
          else
          {
            v37 = v36 | (v31 << 32);
            if (*v17 >= 0)
              v38 = 2 * *v17 + 8;
            else
              v38 = (uint64_t)(v9 + 352);
            while (1)
            {
              v39 = *((unsigned int *)v32 + v37);
              if (((*(_QWORD *)(v38 + ((v39 >> 3) & 0x1FFFFFF8)) >> v39) & 1) != 0 || *(_DWORD *)(*v18 + 4 * v39) != -1)
                break;
              v40 = HIDWORD(v37);
              if ((v36 + 1) > HIDWORD(v37))
                LODWORD(v40) = v36 + 1;
              while (1)
              {
                v41 = (v36 + 1);
                v37 = v37 & 0xFFFFFFFF00000000 | v41;
                if ((_DWORD)v40 - 1 == (_DWORD)v36)
                  break;
                LODWORD(v36) = v36 + 1;
                if (*((_DWORD *)v32 + v41) != -1)
                  goto LABEL_37;
              }
              LODWORD(v41) = v40;
LABEL_37:
              LODWORD(v36) = v41;
              if ((_DWORD)v31 == (_DWORD)v41)
                goto LABEL_38;
            }
          }
        }
      }
      v54 = HIDWORD(v19);
      if ((v16 + 1) > HIDWORD(v19))
        LODWORD(v54) = v16 + 1;
      while (1)
      {
        v55 = (v16 + 1);
        v19 = v19 & 0xFFFFFFFF00000000 | v55;
        if ((_DWORD)v54 - 1 == (_DWORD)v16)
          break;
        LODWORD(v16) = v16 + 1;
        if (*((_DWORD *)v12 + v55) != -1)
          goto LABEL_56;
      }
      LODWORD(v55) = v54;
LABEL_56:
      LODWORD(v16) = v55;
    }
    while ((_DWORD)v11 != (_DWORD)v55);
  }
  return result;
}

uint64_t *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::OrderedMoveSet::takeMove(uint64_t *result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = *(unsigned int *)(*result + 4 * a2);
  if ((_DWORD)v3 != -1)
  {
    if (*((_DWORD *)result + 12) <= a2)
    {
      v6 = *((_DWORD *)result + 11);
      result = (uint64_t *)((char *)result + 44);
      v4 = v6;
    }
    else
    {
      v5 = *((_DWORD *)result + 7);
      result = (uint64_t *)((char *)result + 28);
      v4 = v5;
    }
    v7 = *(uint64_t *)((char *)result - 12);
    v8 = *(unsigned int *)(v7 + 4 * v4 - 4);
    *(_DWORD *)(v2 + 4 * v8) = v3;
    *(_DWORD *)(v7 + 4 * v3) = v8;
    --*(_DWORD *)result;
    *(_DWORD *)(v2 + 4 * a2) = -1;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::selectSpill(uint64_t a1, double a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  unsigned int *v28;
  _DWORD *v29;
  unsigned int v30;
  unint64_t v31;
  _QWORD *v32;
  float v33;
  unint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  unsigned int *v48;
  _DWORD *v49;
  unsigned int v50;
  float v51;
  uint64_t v52;
  float v53;
  float v54;
  uint64_t v55;
  unint64_t v56;

  if (!*(_BYTE *)(a1 + 208))
  {
    *(_BYTE *)(a1 + 208) = 1;
    if (*(_BYTE *)(a1 + 209))
      WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 216), (const void **)(a1 + 144), a6, a7, a8, a9, a10, a11);
  }
  v12 = *(_QWORD *)(a1 + 200);
  v13 = (uint64_t *)(2 * v12);
  if ((v12 & 0x8000000000000000) != 0)
  {
    v19 = __clz(__rbit64(v12));
    v14 = 63;
    if (v19 >= 0x3F)
      v19 = 63;
  }
  else
  {
    v14 = *v13;
    v15 = *v13 + 63;
    if (v15 < 0x40)
    {
LABEL_67:
      __break(0xC471u);
      JUMPOUT(0x1980588CCLL);
    }
    v16 = *(_QWORD *)(2 * v12 + 8);
    if (v16 && (v17 = __clz(__rbit64(v16)), v17 < 0x40))
    {
      v18 = 0;
    }
    else
    {
      v43 = (v15 >> 6) - 1;
      if (!v43)
        goto LABEL_67;
      v44 = 0;
      while (1)
      {
        v45 = *(_QWORD *)(2 * v12 + 0x10 + 8 * v44);
        if (v45)
        {
          v17 = __clz(__rbit64(v45));
          if (v17 <= 0x3F)
            break;
        }
        if (v43 == ++v44)
          goto LABEL_67;
      }
      v18 = v44 + 1;
    }
    v19 = v17 + (v18 << 6);
  }
  if (v19 == v14)
    goto LABEL_67;
  v20 = *(uint64_t **)(a1 + 232);
  v21 = (unint64_t *)(2 * *v20);
  if (*v20 < 0)
    v22 = 63;
  else
    v22 = *v21;
  if (v22 > v19)
  {
    v23 = (uint64_t *)(v21 + 1);
    if (*v20 >= 0)
      v20 = v23;
    if (((*(unint64_t *)((char *)v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1980588ECLL);
    }
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    if (v19 != 63)
    {
      v46 = *(_QWORD **)(a1 + 240);
      v48 = (unsigned int *)*v46;
      v47 = v46 + 2;
      v49 = v48 + 1;
      v50 = *v48;
      v51 = 0.0;
      v52 = v19;
      while (1)
      {
        if (v50 <= (unsigned __int16)v52)
        {
LABEL_65:
          __break(0xC471u);
          JUMPOUT(0x1980588A0);
        }
        v53 = *(float *)&v49[(unsigned __int16)v52];
        if (v53 == 0.0)
          break;
        LOWORD(a4) = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v52);
        v54 = (float)LODWORD(a4) / v53;
        if (*v47 >= 0)
          v55 = 2 * *v47 + 8;
        else
          v55 = (uint64_t)v47;
        a4 = v54 + v54;
        if (((*(_QWORD *)(v55 + (((unint64_t)(unsigned __int16)v52 >> 3) & 0x1FF8)) >> v52) & 1) != 0)
          v54 = v54 + v54;
        if (v54 > v51)
        {
          v51 = v54;
          LOWORD(v19) = v52;
        }
        v56 = __clz(__rbit64(v12 >> (v52 + 1))) + v52 + 1;
        if (v56 >= 0x3F)
          v52 = 63;
        else
          v52 = v56;
        if (v56 > 0x3E)
          return (unsigned __int16)v19;
      }
      LOWORD(v19) = v52;
    }
  }
  else
  {
    v24 = *v13;
    if (v19 != *v13)
    {
      v25 = v13 + 1;
      v26 = *(_QWORD **)(a1 + 240);
      v28 = (unsigned int *)*v26;
      v27 = v26 + 2;
      v29 = v28 + 1;
      v30 = *v28;
      v31 = (unint64_t)(v24 + 63) >> 6;
      v32 = v13 + 2;
      v33 = 0.0;
      v34 = v19;
      while (1)
      {
        if (v30 <= (unsigned __int16)v34)
          goto LABEL_65;
        v35 = *(float *)&v29[(unsigned __int16)v34];
        if (v35 == 0.0)
          break;
        LOWORD(a4) = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v34);
        v36 = (float)LODWORD(a4) / v35;
        if (*v27 >= 0)
          v37 = 2 * *v27 + 8;
        else
          v37 = (uint64_t)v27;
        a4 = v36 + v36;
        if (((*(_QWORD *)(v37 + (((unint64_t)(unsigned __int16)v34 >> 3) & 0x1FF8)) >> v34) & 1) != 0)
          v36 = v36 + v36;
        if (v36 > v33)
        {
          v33 = v36;
          LOWORD(v19) = v34;
        }
        v38 = v34 + 1;
        v39 = (v34 + 1) >> 6;
        if (v39 >= v31)
          return (unsigned __int16)v19;
        v40 = v25[v39];
        if (!v40 || (v41 = __clz(__rbit64(v40 >> v38)) + (v38 & 0x3F), v41 >= 0x40))
        {
          if (v39 + 1 == v31)
            return (unsigned __int16)v19;
          while (1)
          {
            v42 = v32[v39];
            if (v42)
            {
              v41 = __clz(__rbit64(v42));
              if (v41 < 0x40)
                break;
            }
            if (v31 - 1 == ++v39)
              return (unsigned __int16)v19;
          }
          ++v39;
        }
        v34 = v41 + (v39 << 6);
        if (v34 == v24)
          return (unsigned __int16)v19;
      }
      LOWORD(v19) = v34;
    }
  }
  return (unsigned __int16)v19;
}

void WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(const void **a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  if (a2 != a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    else
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v13 = (unint64_t)*a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v14 = *((unsigned int *)a2 + 3);
        if (v12 < v14)
        {
          if ((v14 & 0x80000000) != 0)
          {
            __break(0xC471u);
            return;
          }
          v15 = (char *)*a1;
          v16 = *((unsigned int *)a1 + 3);
          v17 = (char *)WTF::fastMalloc((WTF *)(2 * v14));
          *((_DWORD *)a1 + 2) = v14;
          *a1 = v17;
          memcpy(v17, v15, 2 * v16);
          if (v15)
          {
            if (*a1 == v15)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree((unint64_t)v15, v18, v19, v20, v21, v22, v23, v24);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    v25 = (char *)*a1;
    if (v11)
    {
      memmove(v25, *a2, 2 * v11);
      v26 = *((unsigned int *)a1 + 3);
      v25 = (char *)*a1;
    }
    else
    {
      v26 = 0;
    }
    memcpy(&v25[2 * v26], (char *)*a2 + 2 * v26, (_BYTE *)*a2 + 2 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 2 * v26));
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  }
}

void WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
      *(_DWORD *)(a1 + 12) = 0;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::assignColors(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _WORD *v34;
  _WORD *v35;
  uint64_t v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  int v50;
  WTF **v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int i;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  _DWORD *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  unsigned __int16 *__src;
  void *__srca;
  __int16 v102;
  uint64_t v103;
  char v104;
  unsigned __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  WTF *v111[2];
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 < 0)
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  else
    bzero((void *)(2 * v9 + 8), (unint64_t)(*(_QWORD *)(2 * v9) + 7) >> 3);
  *(_DWORD *)(a1 + 32) = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v10 = *(_QWORD *)(a1 + 56);
    if (v10)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 104))
  {
    v11 = *(unsigned int *)(a1 + 108);
    v12 = *(_QWORD *)(a1 + 96);
    if ((_DWORD)v11)
    {
      v13 = 40 * v11;
      v14 = (unint64_t *)(v12 + 8);
      do
      {
        if (*((_DWORD *)v14 - 1) != 8)
          WTF::fastFree(*v14, a2, a3, a4, a5, a6, a7, a8);
        v14 += 5;
        v13 -= 40;
      }
      while (v13);
      *(_DWORD *)(a1 + 108) = 0;
      v12 = *(_QWORD *)(a1 + 96);
    }
    if (v12)
    {
      *(_QWORD *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 104) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 192))
  {
    if (*(_DWORD *)(a1 + 196))
      *(_DWORD *)(a1 + 196) = 0;
    v37 = *(_QWORD *)(a1 + 184);
    if (v37)
    {
      *(_QWORD *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v15 = *(_QWORD *)(a1 + 200);
  if (v15 < 0)
    *(_QWORD *)(a1 + 200) = 0x8000000000000000;
  else
    bzero((void *)(2 * v15 + 8), (unint64_t)(*(_QWORD *)(2 * v15) + 7) >> 3);
  v16 = (unint64_t *)(a1 + 112);
  v17 = *(unsigned int *)(a1 + 52);
  v18 = *(unsigned int *)(a1 + 124);
  if (v18 < v17)
  {
    v19 = *(unsigned int *)(a1 + 120);
    v20 = *(_QWORD *)(a1 + 112);
    if (v19 < v17)
    {
      v21 = v19 + (v19 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v17)
        v23 = *(unsigned int *)(a1 + 52);
      else
        v23 = v22;
      if (HIDWORD(v23))
      {
        __break(0xC471u);
LABEL_191:
        __break(1u);
LABEL_192:
        JUMPOUT(0x19805930CLL);
      }
      v24 = (_BYTE *)WTF::fastMalloc((WTF *)v23);
      *(_DWORD *)(a1 + 120) = v23;
      *(_QWORD *)(a1 + 112) = v24;
      if ((_DWORD)v18)
      {
        v25 = (char *)v20;
        do
        {
          v26 = *v25++;
          *v24++ = v26;
          --v18;
        }
        while (v18);
        v24 = (_BYTE *)*v16;
      }
      if (v20)
      {
        if (v24 == (_BYTE *)v20)
        {
          *(_QWORD *)(a1 + 112) = 0;
          *(_DWORD *)(a1 + 120) = 0;
        }
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        v20 = *v16;
      }
      else
      {
        v20 = (unint64_t)v24;
      }
    }
    if (v20)
    {
      v27 = *(unsigned int *)(a1 + 124);
      if ((_DWORD)v27 != (_DWORD)v17)
      {
        v28 = (_BYTE *)(v20 + v27);
        v29 = v17 - v27;
        do
        {
          *v28++ |= 0x7Fu;
          --v29;
        }
        while (v29);
      }
    }
  }
  *(_DWORD *)(a1 + 124) = v17;
  v30 = (unsigned __int16 *)&v107;
  v105 = (unsigned __int16 *)&v107;
  v106 = 4;
  v32 = (uint64_t *)(a1 + 72);
  v31 = *(_QWORD *)(a1 + 72);
  if (!v31)
  {
    v35 = 0;
    v33 = 0;
LABEL_56:
    v34 = (_WORD *)(v31 + 32 * v33);
    goto LABEL_57;
  }
  v33 = *(unsigned int *)(v31 - 4);
  v34 = (_WORD *)(v31 + 32 * v33);
  if (!*(_DWORD *)(v31 - 12))
  {
    v35 = (_WORD *)(v31 + 32 * v33);
    goto LABEL_56;
  }
  v35 = *(_WORD **)(a1 + 72);
  if ((_DWORD)v33)
  {
    v36 = 32 * v33;
    v35 = *(_WORD **)(a1 + 72);
    while ((unsigned __int16)*v35 >= 0xFFFEu)
    {
      v35 += 16;
      v36 -= 32;
      if (!v36)
      {
        v35 = v34;
        break;
      }
    }
  }
LABEL_57:
  if (v31)
    v38 = (_WORD *)(v31 + 32 * *(unsigned int *)(v31 - 4));
  else
    v38 = 0;
  if (v38 != v35)
  {
    v39 = 0;
    do
    {
      LOWORD(v111[0]) = 0;
      LOWORD(v111[0]) = *v35;
      v40 = LOWORD(v111[0]);
      do
      {
        v41 = v40;
        v40 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * v40);
      }
      while ((_DWORD)v40);
      if (LOWORD(v111[0]) != v41)
      {
        if (v39 == (_DWORD)v106)
        {
          v99 = (unsigned __int16 *)WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v105, v39 + 1, (unint64_t)v111);
          v39 = HIDWORD(v106);
          v30 = v105;
          v105[HIDWORD(v106)] = *v99;
        }
        else
        {
          v30[v39] = (unsigned __int16)v111[0];
        }
        HIDWORD(v106) = ++v39;
      }
      v42 = v35 + 16;
      v35 = v34;
      if (v42 != v34)
      {
        v35 = v42;
        while ((unsigned __int16)*v35 >= 0xFFFEu)
        {
          v35 += 16;
          if (v35 == v34)
          {
            v35 = v34;
            break;
          }
        }
      }
    }
    while (v35 != v38);
    if (v39)
    {
      __src = &v30[v39];
      do
      {
        LOWORD(v43) = *v30;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::take(v111, (uint64_t *)(a1 + 72), *v30);
        do
        {
          v48 = v43;
          v43 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * (unsigned __int16)v43);
        }
        while (v43);
        v102 = v48;
        v108 = 0x800000000;
        v109 = (WTF *)-1;
        v110 = -1;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)&v103, (uint64_t *)(a1 + 72), &v102, (uint64_t)&v108, v44, v45, v46, v47);
        if (HIDWORD(v108) != 8)
          WTF::fastFree((unint64_t)v109, a2, a3, a4, a5, a6, a7, a8);
        v49 = v103 + 8;
        if (v104)
        {
          if (*(_DWORD *)(v103 + 12) != 8)
            WTF::fastFree(*(_QWORD *)(v103 + 16), a2, a3, a4, a5, a6, a7, a8);
          *(_OWORD *)v49 = *(_OWORD *)v111;
          *(_QWORD *)(v49 + 16) = v112;
        }
        else
        {
          v50 = HIDWORD(v111[0]);
          v51 = &v111[1];
          if (HIDWORD(v111[0]) != 8)
            v51 = (WTF **)v111[1];
          v52 = 0;
          while (HIDWORD(v111[0]) != v52)
          {
            LODWORD(v53) = v52;
            v54 = *((__int16 *)v51 + v52++);
            if (v54 != -1)
            {
              v53 = v53;
              goto LABEL_87;
            }
          }
          v53 = HIDWORD(v111[0]);
LABEL_87:
          if (HIDWORD(v111[0]) != (_DWORD)v53)
          {
            v55 = v53 | ((unint64_t)HIDWORD(v111[0]) << 32);
            do
            {
              LODWORD(v56) = v53;
              WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)&v108, (unsigned int *)v49, *((unsigned __int16 *)v51 + v55));
              if (HIDWORD(v55) <= (v56 + 1))
                v53 = (v56 + 1);
              else
                v53 = HIDWORD(v55);
              while ((_DWORD)v53 - 1 != (_DWORD)v56)
              {
                v56 = (v56 + 1);
                if (*((__int16 *)v51 + v56) != -1)
                {
                  LODWORD(v53) = v56;
                  goto LABEL_95;
                }
              }
              v56 = v53;
LABEL_95:
              v55 = v56 | v55 & 0xFFFFFFFF00000000;
            }
            while (v50 != (_DWORD)v53);
          }
          if (v50 != 8)
            WTF::fastFree((unint64_t)v111[1], a2, a3, a4, a5, a6, a7, a8);
        }
        ++v30;
      }
      while (v30 != __src);
      v30 = v105;
    }
    if (&v107 != (uint64_t *)v30 && v30)
    {
      v105 = 0;
      LODWORD(v106) = 0;
      WTF::fastFree((unint64_t)v30, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  for (i = *(_DWORD *)(a1 + 180); i; i = *(_DWORD *)(a1 + 180))
  {
    v58 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 168) + 2 * i - 2);
    *(_DWORD *)(a1 + 180) = i - 1;
    v59 = *(_QWORD *)(a1 + 40) + 16 * v58;
    v60 = *(unsigned int *)(v59 + 12);
    if ((_DWORD)v60)
    {
      v61 = 0;
      v62 = *(unsigned __int16 **)v59;
      v63 = &v62[v60];
      while (1)
      {
        v64 = *v62;
        do
        {
          v65 = v64;
          v64 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * v64);
        }
        while ((_DWORD)v64);
        v66 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 112) + v65);
        if ((~v66 & 0x7F) != 0)
        {
          if ((v66 & 0x40) != 0)
            goto LABEL_191;
          v61 |= 1 << v66;
        }
        if (++v62 == v63)
          goto LABEL_119;
      }
    }
    v61 = 0;
LABEL_119:
    v67 = *v32;
    if (!*v32)
      goto LABEL_127;
    v68 = *(_DWORD *)(v67 - 8);
    v69 = 9 * ((~((_DWORD)v58 << 15) + v58) ^ ((~((_DWORD)v58 << 15) + v58) >> 10));
    v70 = (v69 ^ (v69 >> 6)) + ~((v69 ^ (v69 >> 6)) << 11);
    v71 = v68 & (v70 ^ HIWORD(v70));
    v72 = *(unsigned __int16 *)(v67 + 32 * v71);
    if (v72 != (_DWORD)v58)
    {
      v73 = 1;
      while (v72 != 0xFFFF)
      {
        v71 = ((_DWORD)v71 + v73) & v68;
        v72 = *(unsigned __int16 *)(v67 + 32 * v71);
        ++v73;
        if (v72 == (_DWORD)v58)
          goto LABEL_126;
      }
      v71 = *(unsigned int *)(v67 - 4);
    }
LABEL_126:
    if (v71 == *(_DWORD *)(v67 - 4))
      goto LABEL_127;
    v77 = v67 + 32 * v71;
    v78 = *(unsigned int *)(v77 + 12);
    v79 = (_QWORD *)(v77 + 16);
    if ((_DWORD)v78 != 8)
      v79 = (_QWORD *)*v79;
    v80 = 0;
    while ((_DWORD)v78 != v80)
    {
      v81 = v80;
      v82 = *((__int16 *)v79 + v80++);
      if (v82 != -1)
      {
        v83 = v81;
        goto LABEL_143;
      }
    }
    v83 = v78;
LABEL_143:
    if ((_DWORD)v78 == (_DWORD)v83)
    {
LABEL_127:
      v74 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v74)
      {
        v75 = *(_BYTE **)a1;
        while (1)
        {
          if ((*v75 & 0x7Fu) >= 0x40)
            goto LABEL_191;
          if (((v61 >> (*v75 & 0x7F)) & 1) == 0)
            break;
          ++v75;
          if (!--v74)
            goto LABEL_132;
        }
        *(_BYTE *)(*v16 + v58) = *v75;
      }
      else
      {
LABEL_132:
        v76 = *(unsigned int *)(a1 + 140);
        if ((_DWORD)v76 == *(_DWORD *)(a1 + 136))
        {
          v94 = v76 + (v76 >> 2);
          if (v94 >= 0x10)
            v95 = v94 + 1;
          else
            v95 = 16;
          if (v95 <= v76 + 1)
            v96 = v76 + 1;
          else
            v96 = v95;
          if (v96 >> 31)
          {
            __break(0xC471u);
            goto LABEL_192;
          }
          __srca = *(void **)(a1 + 128);
          v97 = (void *)WTF::fastMalloc((WTF *)(2 * v96));
          *(_DWORD *)(a1 + 136) = v96;
          *(_QWORD *)(a1 + 128) = v97;
          memcpy(v97, __srca, 2 * v76);
          if (__srca)
          {
            if (*(void **)(a1 + 128) == __srca)
            {
              *(_QWORD *)(a1 + 128) = 0;
              *(_DWORD *)(a1 + 136) = 0;
            }
            WTF::fastFree((unint64_t)__srca, a2, a3, a4, a5, a6, a7, a8);
          }
          v98 = *(unsigned int *)(a1 + 140);
          *(_WORD *)(*(_QWORD *)(a1 + 128) + 2 * v98) = v58;
          *(_DWORD *)(a1 + 140) = v98 + 1;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a1 + 128) + 2 * v76) = v58;
          *(_DWORD *)(a1 + 140) = v76 + 1;
        }
      }
    }
    else
    {
      v84 = v83 | (v78 << 32);
      v85 = *(_QWORD *)(a1 + 112);
      while (1)
      {
        v86 = *((unsigned __int16 *)v79 + v84);
        do
        {
          v87 = v86;
          v86 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * v86);
        }
        while ((_DWORD)v86);
        v88 = *(_BYTE *)(v85 + v87);
        v89 = v88 & 0x7F;
        if (v89 != 127)
        {
          if (v89 >= 0x40)
            goto LABEL_191;
          if (((v61 >> v89) & 1) == 0)
            break;
        }
        if (HIDWORD(v84) <= (v83 + 1))
          v90 = (v83 + 1);
        else
          v90 = HIDWORD(v84);
        while ((_DWORD)v90 - 1 != (_DWORD)v83)
        {
          v83 = (v83 + 1);
          if (*((__int16 *)v79 + v83) != -1)
          {
            LODWORD(v90) = v83;
            goto LABEL_156;
          }
        }
        v83 = v90;
LABEL_156:
        v84 = v83 | v84 & 0xFFFFFFFF00000000;
        LODWORD(v83) = v90;
        if ((_DWORD)v78 == (_DWORD)v90)
          goto LABEL_127;
      }
      *(_BYTE *)(v85 + v58) = v88;
    }
  }
  if (*(_DWORD *)(a1 + 176))
  {
    v91 = *(_QWORD *)(a1 + 168);
    if (v91)
    {
      *(_QWORD *)(a1 + 168) = 0;
      *(_DWORD *)(a1 + 176) = 0;
      WTF::fastFree(v91, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 140))
  {
    v92 = (_DWORD *)(a1 + 120);
    if (!*(_DWORD *)(a1 + 120))
      return;
    if (*(_DWORD *)(a1 + 124))
      *(_DWORD *)(a1 + 124) = 0;
  }
  else
  {
    v92 = (_DWORD *)(a1 + 224);
    if (!*(_DWORD *)(a1 + 224))
      return;
    v16 = (unint64_t *)(a1 + 216);
    if (*(_DWORD *)(a1 + 228))
      *(_DWORD *)(a1 + 228) = 0;
  }
  v93 = *v16;
  if (*v16)
  {
    *v16 = 0;
    *v92 = 0;
    WTF::fastFree(v93, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;

  if (*(_DWORD *)(a1 + 8))
  {
    v9 = *(unsigned int *)(a1 + 12);
    v10 = *(_QWORD *)a1;
    if ((_DWORD)v9)
    {
      v11 = 40 * v9;
      v12 = (unint64_t *)(v10 + 8);
      do
      {
        if (*((_DWORD *)v12 - 1) != 8)
          WTF::fastFree(*v12, a2, a3, a4, a5, a6, a7, a8);
        v12 += 5;
        v11 -= 40;
      }
      while (v11);
      *(_DWORD *)(a1 + 12) = 0;
      v10 = *(_QWORD *)a1;
    }
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
      *(_DWORD *)(a1 + 12) = 0;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

_QWORD *WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::take(_QWORD *result, uint64_t *a2, unsigned __int16 a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *a2;
  if (!*a2)
    goto LABEL_18;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = *(unsigned __int16 *)(v3 + 32 * v7);
  if (v8 != a3)
  {
    v9 = 1;
    while (v8 != 0xFFFF)
    {
      v7 = ((_DWORD)v7 + v9) & v4;
      v8 = *(unsigned __int16 *)(v3 + 32 * v7);
      ++v9;
      if (v8 == a3)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v3 - 4))
  {
LABEL_18:
    *result = 0x800000000;
    result[1] = -1;
    result[2] = -1;
  }
  else
  {
    v10 = v3 + 32 * v7;
    *(_OWORD *)result = *(_OWORD *)(v10 + 8);
    result[2] = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 8) = 0x800000000;
    *(_QWORD *)(v10 + 16) = -1;
    *(_QWORD *)(v10 + 24) = -1;
    v11 = *a2;
    if (!*a2 || (v11 += 32 * *(unsigned int *)(v11 - 4), v11 != v10))
    {
      if (v11 != v10)
      {
        *(_WORD *)v10 = -2;
        ++*(_DWORD *)(*a2 - 16);
        v12 = *a2;
        if (*a2)
          v13 = *(_DWORD *)(v12 - 12) - 1;
        else
          v13 = -1;
        *(_DWORD *)(v12 - 12) = v13;
        v14 = *a2;
        if (*a2)
        {
          v15 = 6 * *(_DWORD *)(v14 - 12);
          v16 = *(_DWORD *)(v14 - 4);
          if (v15 < v16 && v16 >= 9)
            return (_QWORD *)WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(a2, v16 >> 1, 0);
        }
      }
    }
  }
  return result;
}

_WORD *WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(uint64_t a1, unint64_t a2)
{
  _WORD *result;
  uint64_t v4;

  result = (_WORD *)WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_13;
  }
  if (!(v9 >> 31))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 2 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 5)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v5 >> 31)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 2 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v18 = *(unsigned int *)(a1 + 12);
    *(_WORD *)(*(_QWORD *)a1 + 2 * v18) = *a2;
    *(_DWORD *)(a1 + 12) = v18 + 1;
    return;
  }
  if (!(v8 >> 31))
  {
    v9 = *(const void **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(2 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 2 * v5);
    if (v9)
    {
      if (*(const void **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t JSC::B3::Air::Inst::operator=(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;

  v11 = (_OWORD *)(a1 + 16);
  v10 = *(_QWORD *)a1;
  if ((_OWORD *)v10 != v11)
  {
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v11;
  }
  v12 = (__int128 *)*a2;
  if ((_QWORD *)*a2 == a2 + 2)
  {
    v13 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v13)
    {
      v14 = 32 * v13;
      do
      {
        v15 = *v12;
        v16 = v12[1];
        v12 += 2;
        *v11 = v15;
        v11[1] = v16;
        v11 += 2;
        v14 -= 32;
      }
      while (v14);
    }
    v17 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = a2 + 2;
    *(_QWORD *)a1 = v12;
    v17 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 3;
  }
  *(_DWORD *)(a1 + 8) = v17;
  v18 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v18;
  v19 = a2[14];
  *(_DWORD *)(a1 + 119) = *(_DWORD *)((char *)a2 + 119);
  *(_QWORD *)(a1 + 112) = v19;
  return a1;
}

uint64_t WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>(JSC::B3::Air::Tmp *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: No color for ");
  JSC::B3::Air::Tmp::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [7]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Code:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

void WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(unsigned int *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;

  v8 = a3;
  v10 = a1;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v22 = (((char *)a2 - (char *)a1) & 0xFFFFFFFFFFFFFF80) + a3 - 128;
      v23 = (uint64_t)(a2 - 32);
      do
      {
        JSC::B3::Air::Inst::Inst(v22, v23);
        v31 = *(_QWORD *)v23;
        v32 = v23 + 16 == *(_QWORD *)v23 || v31 == 0;
        if (!v32)
        {
          *(_QWORD *)v23 = 0;
          *(_DWORD *)(v23 + 8) = 0;
          WTF::fastFree(v31, v24, v25, v26, v27, v28, v29, v30);
        }
        v22 -= 128;
        v32 = v23 == (_QWORD)v10;
        v23 -= 128;
      }
      while (!v32);
    }
  }
  else if (a1 != a2)
  {
    do
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_QWORD *)(v8 + 8) = 3;
      v11 = v10 + 4;
      v12 = *(_QWORD *)v10;
      if (*(unsigned int **)v10 == v10 + 4)
      {
        v13 = v10[3];
        if ((_DWORD)v13)
        {
          v14 = 0;
          v15 = 32 * v13;
          do
          {
            v16 = v8 + v14;
            v17 = *(_OWORD *)(v12 + v14 + 16);
            *(_OWORD *)(v16 + 16) = *(_OWORD *)(v12 + v14);
            *(_OWORD *)(v16 + 32) = v17;
            v14 += 32;
          }
          while (v15 != v14);
        }
      }
      else
      {
        *(_QWORD *)v10 = v11;
        *(_QWORD *)v8 = v12;
        v21 = v10[2];
        v10[2] = 3;
        *(_DWORD *)(v8 + 8) = v21;
      }
      v18 = v10[3];
      v10[3] = 0;
      *(_DWORD *)(v8 + 12) = v18;
      v19 = *((_QWORD *)v10 + 14);
      *(_DWORD *)(v8 + 119) = *(unsigned int *)((char *)v10 + 119);
      *(_QWORD *)(v8 + 112) = v19;
      v20 = *(_QWORD *)v10;
      if (v11 != *(unsigned int **)v10)
      {
        if (v20)
        {
          *(_QWORD *)v10 = 0;
          v10[2] = 0;
          WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v8 += 128;
      v10 += 32;
    }
    while (v10 != a2);
  }
}

uint64_t JSC::B3::Air::TmpWidth::requiredWidth(uint64_t a1, int a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;

  if (a2 >= 1)
  {
    v2 = a2;
    if (a2 < (unint64_t)*(unsigned int *)(a1 + 12))
      goto LABEL_3;
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198059E24);
  }
  v2 = -a2;
  if (v2 >= *(unsigned int *)(a1 + 28))
    goto LABEL_8;
  a1 += 16;
LABEL_3:
  v3 = (unsigned __int8 *)(*(_QWORD *)a1 + 2 * v2);
  v4 = *v3;
  v5 = v3[1];
  if (v4 <= v5)
    return v5;
  else
    return v4;
}

_OWORD *WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(_OWORD *result, uint64_t *a2, int *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = v12 + 16 * v18;
  v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v20 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v28 = 0;
        v27 = v12 + 16 * v32;
        goto LABEL_11;
      }
      if (v20 == 0x7FFFFFFF)
        v29 = (_QWORD *)v19;
      v18 = (v18 + v30) & v14;
      v19 = v12 + 16 * v18;
      v20 = *(_DWORD *)v19;
      ++v30;
    }
    while (*(_DWORD *)v19);
    if (v29)
    {
      *v29 = 0;
      v29[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v19 = (uint64_t)v29;
    }
  }
  *(_DWORD *)v19 = v15;
  *(_QWORD *)(v19 + 8) = *a4;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_10;
    goto LABEL_26;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v31 = 8;
      goto LABEL_23;
    }
LABEL_26:
    v31 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
LABEL_23:
    result = WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(a2, v31, v19, (uint64_t)a4, a5, a6, a7, a8);
    v19 = (uint64_t)result;
    v23 = *a2;
    if (*a2)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
LABEL_10:
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_11:
  *(_QWORD *)v11 = v19;
  *((_QWORD *)v11 + 1) = v27;
  *((_BYTE *)v11 + 16) = v28;
  return result;
}

void JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _BYTE v16[12];
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _BYTE v20[96];
  _QWORD v21[2];

  *(_QWORD *)v16 = a4;
  *(_DWORD *)&v16[8] = (unsigned __int16)a3;
  v17 = a2;
  v18 = (WTF *)v20;
  v19 = 3;
  v21[0] = a4;
  *(_DWORD *)((char *)v21 + 7) = *(_DWORD *)&v16[7];
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)&v17, a3, a4, a5, a6, a7, a8);
  v15 = v18;
  if (v20 != (_BYTE *)v18)
  {
    if (v18)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void JSC::B3::Air::InsertionSet::~InsertionSet(JSC::B3::Air::InsertionSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::B3::Air::InsertionSet *v10;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v16;

  v9 = *((unsigned int *)this + 5);
  v10 = (JSC::B3::Air::InsertionSet *)*((_QWORD *)this + 1);
  if ((_DWORD)v9)
  {
    v12 = 136 * v9;
    v13 = (char *)v10 + 24;
    do
    {
      v14 = *((_QWORD *)v13 - 2);
      if (v13 != (char *)v14 && v14 != 0)
      {
        *((_QWORD *)v13 - 2) = 0;
        *((_DWORD *)v13 - 2) = 0;
        v16 = v13;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        v13 = v16;
      }
      v13 += 136;
      v12 -= 136;
    }
    while (v12);
    v10 = (JSC::B3::Air::InsertionSet *)*((_QWORD *)this + 1);
  }
  if ((JSC::B3::Air::InsertionSet *)((char *)this + 24) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

_OWORD *WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  int *v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (int *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24)
        v26 = v25 == 0x7FFFFFFF;
      else
        v26 = 1;
      if (!v26)
      {
        v27 = *a1;
        if (*a1)
          v28 = *(_DWORD *)(v27 - 8);
        else
          v28 = 0;
        v29 = 0;
        v30 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
        v31 = ((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) ^ (((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) >> 16);
        do
        {
          v32 = v31 & v28;
          v31 = ++v29 + v32;
        }
        while (*(_DWORD *)(v27 + 16 * v32));
        v33 = (_OWORD *)(v27 + 16 * v32);
        *v33 = *(_OWORD *)v24;
        if (v24 == (int *)a3)
          v23 = v33;
      }
      ++v22;
    }
    while (v22 != v12);
    goto LABEL_16;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int *v39;
  unsigned int v40;

  if (!a4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = result;
      v9 = **(_QWORD **)result;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = *(JSC::B3::Air::Inst **)(result + 8);
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19805A5A4);
          }
          v19 = *(_QWORD *)(v8 + 16);
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          if ((result & 1) != 0)
            goto LABEL_26;
          v20 = *(uint64_t **)(v8 + 8);
          v21 = *((__int16 *)v20 + 60) - 90;
          v22 = v21 > 0x12;
          v23 = (1 << v21) & 0x60011;
          if (!v22 && v23 != 0)
          {
            v25 = *((unsigned int *)v20 + 3);
            if (!(_DWORD)v25)
            {
              __break(0xC471u);
              JUMPOUT(0x19805A5ACLL);
            }
            v26 = *v20;
            v27 = ((unint64_t)(a2 - v26) >> 5) ^ 1;
            if (v27 >= v25)
            {
              __break(0xC471u);
              JUMPOUT(0x19805A5B4);
            }
            if ((_DWORD)v25 == 2)
            {
              v28 = (_BYTE *)(v26 + 32 * v27);
              if (v28[8] == 9 && *(_BYTE *)(*(_QWORD *)v28 + 4) == 1)
              {
LABEL_26:
                if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
                {
                  v29 = *(_QWORD *)(v19 + 40);
                  v30 = *(unsigned int *)v7;
                  v32 = *(_QWORD *)(v29 + 16);
                  v31 = v29 + 16;
                  v33 = 2 * v32 + 8;
                  if (v32 >= 0)
                    v31 = v33;
                  if (((*(_QWORD *)(v31 + ((v30 >> 3) & 0x1FFFFFF8)) >> v30) & 1) != 0)
                    return result;
                }
                else
                {
                  v30 = *(unsigned int *)v7;
                }
                if ((int)v30 < 1)
                {
                  v30 = -(int)v30;
                  if (v30 >= *(unsigned int *)(v19 + 36))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19805A5C4);
                  }
                  v34 = (_QWORD *)(v19 + 24);
                }
                else
                {
                  if (v30 >= *(_DWORD *)(v19 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19805A5BCLL);
                  }
                  v34 = (_QWORD *)(v19 + 8);
                }
                v35 = (unsigned __int8 *)(*v34 + 2 * v30);
                v36 = *v35;
                v37 = v35[1];
                if (v36 > v37)
                  v37 = v36;
                if (a3 - 4 > 6 || v37 <= a5)
                {
                  v38 = *(_BYTE **)(v8 + 24);
                  if (v37 == 2)
                  {
                    v39 = *(unsigned int **)(v9 + 16 * v15 + 8);
                    if (*v38)
                    {
LABEL_49:
                      v40 = 4;
LABEL_41:
                      if (*v39 > v40)
                        v40 = *v39;
                      *v39 = v40;
                      *(_BYTE *)(a2 + 24) = 0;
                      *v7 = 0;
                      *(_QWORD *)a2 = v39;
                      *(_WORD *)(a2 + 8) = 521;
                      *(_DWORD *)(a2 + 12) = 0;
                      **(_BYTE **)(v8 + 32) = 1;
                      if ((result & 1) == 0)
                        **(_BYTE **)(v8 + 40) = 1;
                      return result;
                    }
                  }
                  else
                  {
                    *v38 = 0;
                    v39 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  }
                  if (a5 != 3)
                  {
                    v40 = 1;
                    switch(a5)
                    {
                      case 0u:
                        goto LABEL_41;
                      case 1u:
                        v40 = 2;
                        goto LABEL_41;
                      case 2u:
                        goto LABEL_49;
                      case 4u:
                        v40 = 16;
                        goto LABEL_41;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x19805A59CLL);
                    }
                  }
                  v40 = 8;
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_6;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  int v10;
  unsigned int *v11;
  uint64_t **v12;

  v9 = **(uint64_t ****)(a1 + 16);
  v10 = *(char *)(a2 + 8);
  if (v10 == 1)
  {
    v11 = (unsigned int *)(a2 + 16);
    v12 = **(uint64_t ****)(a1 + 16);
LABEL_3:
    return;
  }
  if ((v10 - 6) < 3)
  {
    v11 = (unsigned int *)(a2 + 16);
LABEL_9:
    v12 = v9;
    a3 = 0;
LABEL_10:
    a4 = 0;
    goto LABEL_3;
  }
  if (v10 == 11)
  {
    v11 = (unsigned int *)(a2 + 20);
    goto LABEL_9;
  }
  if ((v10 - 12) < 2)
  {
    v11 = (unsigned int *)(a2 + 16);
    v12 = **(uint64_t ****)(a1 + 16);
    a3 = 6;
    goto LABEL_10;
  }
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  _BYTE v58[12];
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];

  if (!(_DWORD)a4)
  {
    v9 = *a2;
    if (v9 <= 0xFFFFFFDF && (v9 - 1) >= 0x20)
    {
      v11 = **a1;
      if (!v11)
        goto LABEL_12;
      v12 = a3;
      v13 = *(_DWORD *)(v11 - 8);
      v14 = 9 * ((v9 + ~((_DWORD)v9 << 15)) ^ ((v9 + ~((_DWORD)v9 << 15)) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = v13 & (v15 ^ HIWORD(v15));
      v17 = *(_DWORD *)(v11 + 16 * v16);
      if (v17 != (_DWORD)v9)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v13;
          v17 = *(_DWORD *)(v11 + 16 * v16);
          ++v18;
          if (v17 == (_DWORD)v9)
            goto LABEL_11;
        }
        v16 = *(unsigned int *)(v11 - 4);
      }
LABEL_11:
      if (v16 != *(_DWORD *)(v11 - 4))
      {
        v23 = a1[3];
        if ((int)v9 < 1)
        {
          v9 = -(int)v9;
          if (v9 >= *((unsigned int *)v23 + 9))
          {
            __break(0xC471u);
            JUMPOUT(0x19805AB58);
          }
          v24 = v23 + 3;
        }
        else
        {
          if (v9 >= *((_DWORD *)v23 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x19805AB60);
          }
          v24 = v23 + 1;
        }
        v25 = (unsigned __int8 *)(*v24 + 2 * v9);
        v26 = *v25;
        v27 = v25[1];
        if (v26 > v27)
          v27 = v26;
        v28 = v27 >= 3;
        if (v27 == 3)
          v29 = 8;
        else
          v29 = 16;
        if (!v28)
          v29 = 4;
        if (v29 == 4)
        {
          v30 = 94;
        }
        else if (v29 == 8)
        {
          v30 = 90;
        }
        else
        {
          v30 = 113;
        }
        v31 = *v23;
        v32 = *(_DWORD *)(*v23 + 176);
        *(_DWORD *)(v31 + 176) = v32 + 1;
        v33 = (v32 + 33);
        *a2 = v33;
        v34 = a1[4];
        v35 = *v34;
        if (*v34 < 0)
          v36 = 63;
        else
          v36 = *(_QWORD *)(2 * v35);
        if (v36 <= v33)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1[4], v33 + 1, 0);
          v35 = *v34;
        }
        if (v35 >= 0)
          v37 = 2 * v35 + 8;
        else
          v37 = (uint64_t)v34;
        *(_QWORD *)(v37 + ((v33 >> 3) & 0x1FFFFFF8)) |= 1 << v33;
        if (v12 != 10)
        {
          v38 = *(_QWORD *)(v11 + 16 * v16 + 8);
          if (v12 > 0xB || ((1 << v12) & 0xB30) == 0)
          {
            v39 = (uint64_t)a1[5];
            v40 = *(unsigned int *)a1[6];
            v41 = *a2;
            *(_QWORD *)v55 = *(_QWORD *)(v11 + 16 * v16 + 8);
            *(_WORD *)&v55[8] = 521;
            *(_QWORD *)&v55[12] = 0;
            *(_QWORD *)&v55[17] = 0;
            *(_QWORD *)&v56 = 0;
            WORD4(v56) = 513;
            HIDWORD(v56) = 1;
            *(_QWORD *)&v57 = v41;
            BYTE8(v57) = 0;
            v62 = *(_OWORD *)v55;
            v63 = *(_OWORD *)&v55[16];
            v64 = v56;
            *(_QWORD *)v58 = a1[7][14];
            *(_DWORD *)&v58[8] = v30;
            v59 = v40;
            v60 = (WTF *)&v62;
            v65 = v57;
            v61 = 0x200000003;
            v66[0] = *(_QWORD *)v58;
            *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v39, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
            v43 = v60;
            if (&v62 != (__int128 *)v60)
            {
              if (v60)
              {
                v60 = 0;
                LODWORD(v61) = 0;
                WTF::fastFree((unint64_t)v43, v42, a3, a4, a5, a6, a7, a8);
              }
            }
          }
          if (v12 - 4 <= 6)
          {
            v44 = (uint64_t)a1[5];
            v45 = *(_DWORD *)a1[6];
            v46 = *a2;
            *(_QWORD *)&v57 = 0;
            BYTE8(v57) = 0;
            *(_QWORD *)v55 = 0;
            *(_WORD *)&v55[8] = 513;
            *(_DWORD *)&v55[12] = 1;
            *(_QWORD *)&v55[16] = v46;
            v55[24] = 0;
            *(_QWORD *)&v56 = v38;
            WORD4(v56) = 521;
            HIDWORD(v56) = 0;
            v62 = *(_OWORD *)v55;
            v63 = *(_OWORD *)&v55[16];
            v64 = v56;
            *(_QWORD *)v58 = a1[7][14];
            *(_DWORD *)&v58[8] = v30;
            v59 = (v45 + 1);
            v60 = (WTF *)&v62;
            v65 = v57;
            v61 = 0x200000003;
            v66[0] = *(_QWORD *)v58;
            *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v44, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
            v54 = v60;
            if (&v62 != (__int128 *)v60)
            {
              if (v60)
              {
                v60 = 0;
                LODWORD(v61) = 0;
                WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
              }
            }
          }
        }
      }
      else
      {
LABEL_12:
        v19 = a1[1];
        if (*((_DWORD *)v19 + 57))
        {
          v20 = (unsigned __int16)*a2;
          v21 = v19[27];
          do
          {
            v22 = v20;
            v20 = *(unsigned __int16 *)(v21 + 2 * v20);
          }
          while ((_DWORD)v20);
          if ((_DWORD)v9 != v22)
          {
            *a2 = v22;
            *(_BYTE *)a1[2] = 1;
          }
        }
      }
    }
  }
}

void JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Arg &,JSC::B3::Air::Tmp &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  _BYTE v19[12];
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  _OWORD v23[6];
  _QWORD v24[2];

  *(_OWORD *)&v16[9] = *(_OWORD *)((char *)a5 + 9);
  *(_OWORD *)v16 = *a5;
  *(_QWORD *)&v17 = 0;
  WORD4(v17) = 513;
  HIDWORD(v17) = 1;
  *(_QWORD *)&v18 = a6;
  BYTE8(v18) = 0;
  v23[0] = *(_OWORD *)v16;
  v23[1] = *(_OWORD *)&v16[16];
  v23[2] = v17;
  *(_QWORD *)v19 = a4;
  *(_DWORD *)&v19[8] = (unsigned __int16)a3;
  v20 = a2;
  v21 = (WTF *)v23;
  v23[3] = v18;
  v22 = 0x200000003;
  v24[0] = a4;
  *(_DWORD *)((char *)v24 + 7) = *(_DWORD *)&v19[7];
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)&v20, a3, a4, (uint64_t)a5, a6, a7, a8);
  v15 = v21;
  if (v23 != (_OWORD *)v21)
  {
    if (v21)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[12];
  _BYTE v21[40];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v21[16] = *(_OWORD *)((char *)a6 + 9);
  *(_OWORD *)&v21[7] = *a6;
  *(_QWORD *)&v16 = 0;
  WORD4(v16) = 513;
  HIDWORD(v16) = 1;
  *(_QWORD *)&v17 = a5;
  BYTE8(v17) = 0;
  v18 = *(_OWORD *)&v21[7];
  v19 = *(_OWORD *)&v21[23];
  *(_OWORD *)&v21[24] = v16;
  v22 = v17;
  v23 = *(_OWORD *)&v21[7];
  *(_QWORD *)v20 = a4;
  *(_DWORD *)&v20[8] = (unsigned __int16)a3;
  *(_QWORD *)v21 = a2;
  *(_QWORD *)&v21[8] = &v21[24];
  v24 = v19;
  *(_QWORD *)&v21[16] = 0x200000003;
  v25[0] = a4;
  *(_DWORD *)((char *)v25 + 7) = *(_DWORD *)&v20[7];
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)v21, a3, a4, a5, (uint64_t)a6, a7, a8);
  v15 = *(_QWORD *)&v21[8];
  if (&v21[24] != *(_BYTE **)&v21[8])
  {
    if (*(_QWORD *)&v21[8])
    {
      *(_QWORD *)&v21[8] = 0;
      *(_DWORD *)&v21[16] = 0;
      WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::~AbstractColoringAllocator(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t StatusReg;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t *v36;

  v9 = *(_QWORD *)(a1 + 256);
  if (a1 + 272 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 256) = 0;
    *(_DWORD *)(a1 + 264) = 0;
    WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 216);
  if (v11)
  {
    *(_QWORD *)(a1 + 216) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 200);
  if ((v12 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v12, (void *)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 184);
  if (v13)
  {
    *(_QWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    WTF::fastFree(v13, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 168);
  if (v14)
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = 0;
    WTF::fastFree(v14, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 160);
  if ((v15 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v15, (void *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 144);
  if (v16)
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    WTF::fastFree(v16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(_QWORD *)(a1 + 128);
  if (v17)
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    WTF::fastFree(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *(_QWORD *)(a1 + 112);
  if (v18)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *(unsigned int *)(a1 + 108);
  v20 = *(_QWORD *)(a1 + 96);
  if (!(_DWORD)v19)
  {
    if (!v20)
      goto LABEL_24;
    goto LABEL_65;
  }
  v35 = 40 * v19;
  v36 = (unint64_t *)(v20 + 8);
  do
  {
    if (*((_DWORD *)v36 - 1) != 8)
      WTF::fastFree(*v36, (void *)a2, a3, a4, a5, a6, a7, a8);
    v36 += 5;
    v35 -= 40;
  }
  while (v35);
  v20 = *(_QWORD *)(a1 + 96);
  if (v20)
  {
LABEL_65:
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_24:
  v21 = *(_QWORD *)(a1 + 80);
  if (v21)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v21, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (unint64_t *)(v22 + 16);
      do
      {
        if (*((__int16 *)v24 - 8) != -2 && *((_DWORD *)v24 - 1) != 8)
          WTF::fastFree(*v24, (void *)a2, a3, a4, a5, a6, a7, a8);
        v24 += 4;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree(v22 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)(a1 + 56);
  if (v25)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v25, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *(unsigned int *)(a1 + 52);
  v27 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v26)
  {
    v28 = 16 * v26;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      a2 = *(_QWORD *)v27;
      if (*(_QWORD *)v27)
      {
        *(_QWORD *)v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
        v30 = *(_QWORD *)(StatusReg + 752);
        if (v30)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
          {
LABEL_42:
            v31 = *(unsigned int *)(v30 + 8000);
            if (v31 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v30, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v30 + 8 * v31) = a2 | 0x5000000000000;
              *(_DWORD *)(v30 + 8000) = v31 + 1;
            }
            goto LABEL_44;
          }
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_42;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v30, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_44:
      v27 += 16;
      v28 -= 16;
      if (!v28)
      {
        v27 = *(_QWORD *)(a1 + 40);
        break;
      }
    }
  }
  if (v27)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v27, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *(_QWORD *)(a1 + 24);
  if ((v32 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v32, (void *)a2, a3, a4, a5, a6, a7, a8);
  v33 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v33, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t, int, int, unsigned int);
  uint64_t (*v13)(uint64_t, uint64_t, char, int, unsigned int);
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  int v81;
  unsigned __int16 v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _WORD *v120;
  _WORD *v121;
  char *v122;
  char *v123;
  int *v124;
  char *v125;
  int *v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _WORD *v153;
  char *v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, int, int, unsigned int);
  uint64_t (*v157)(uint64_t, uint64_t, char, int, unsigned int);
  uint64_t v158;
  char *v159;
  uint64_t (*v160)(uint64_t, uint64_t, int, int, unsigned int);
  uint64_t (*v161)(uint64_t, uint64_t, char, int, unsigned int);
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  char *v173;
  int v174;
  int v175;
  char *v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _WORD *v231;
  uint64_t v232;
  unint64_t v233;
  _WORD *v234;
  __int16 *v235;
  __int16 v236;
  uint64_t v237;
  char *v238;
  _WORD *v239;
  _WORD *v240;
  unsigned int v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t (*v266)(uint64_t, uint64_t, int, int, unsigned int);
  uint64_t (*v267)(uint64_t, uint64_t, char, int, unsigned int);
  _WORD *v268;
  __int16 *v269;
  __int16 v270;
  uint64_t (*v271)(uint64_t, uint64_t, int, int, unsigned int);
  __int16 *v272;
  __int16 v273;
  __int16 *v274;
  __int16 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t *v316;
  _QWORD v317[3];
  _QWORD **v318;
  _QWORD **v319;
  _QWORD *v320;
  uint64_t *v321;
  uint64_t **v322;
  int v323;
  char *v324;
  int *v325;
  uint64_t v326;
  char v327;
  char **v328;
  char ***v329;
  _QWORD *v330;
  char ****v331;
  uint64_t ***v332;
  _WORD v333[5];

  v318 = a3;
  v319 = a2;
  v317[0] = &v319;
  v317[1] = &v318;
  v317[2] = a1;
  v320 = v317;
  v8 = (char *)&JSC::B3::Air::g_formTable;
  if (a2)
  {
    v321 = (uint64_t *)&v320;
    v322 = &v321;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v330 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v331 = (char ****)&v330;
      v332 = &v322;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v330);
      v8 = (char *)&JSC::B3::Air::g_formTable;
    }
    else
    {
      v9 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v9 - 1) * v9) >> 1);
        v12 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v13 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        do
        {
          if (v10 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19805C7ACLL);
          }
          v14 = v11[v10];
          if ((v14 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19805C73CLL);
          }
          v15 = (uint64_t)&(*a2)[4 * v10];
          v16 = *(char *)(v15 + 8);
          v17 = *(_DWORD *)(v15 + 16);
          if (v16 == 1)
          {
            if ((v14 & 0xC) == 4)
            {
              v18 = *v321;
              v323 = v17;
              v327 = 0;
              if ((v14 & 0x10) == 0)
              {
                v19 = *(_QWORD *)(v18 + 16);
                v20 = **(_QWORD **)v18;
                v21 = **(_QWORD **)(v18 + 8);
                v324 = &v327;
                v325 = &v323;
                v326 = v19;
                v314 = a4;
                if (v20)
                {
                  v328 = &v324;
                  v329 = &v328;
                  if ((*(__int16 *)(v20 + 120) - 446) <= 5)
                  {
                    v330 = v13;
                    v331 = (char ****)&v330;
                    v332 = (uint64_t ***)&v329;
                    v154 = v8;
                    v155 = v20;
                    v156 = v12;
                    v157 = v13;
                    v158 = v21;
                    JSC::B3::Air::Inst::forEachArgCustom(v155, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v13, (uint64_t)&v330);
                    v21 = v158;
                    v13 = v157;
                    v12 = v156;
                    v8 = v154;
                  }
                  else
                  {
                    v22 = *(unsigned int *)(v20 + 12);
                    if ((_DWORD)v22)
                    {
                      v57 = 0;
                      v309 = (unint64_t)&v8[21 * *(__int16 *)(v20 + 120)
                                                 + ((unint64_t)((v22 - 1) * v22) >> 1)];
                      v58 = 8;
                      do
                      {
                        if (v57 >= *(unsigned int *)(v20 + 12))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19805C7CCLL);
                        }
                        v28 = *(unsigned __int8 *)(v309 + v57);
                        v29 = (v28 >> 5) - 1;
                        if (v29 >= 5)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19805C6FCLL);
                        }
                        v30 = (char *)(*(_QWORD *)v20 + v58);
                        v31 = *v30;
                        v32 = *((_DWORD *)v30 + 2);
                        if (v31 == 1)
                        {
                          if ((v28 & 0xC) == 4 && (v28 & 0x10) == 0)
                          {
                            v33 = v328[2];
                            if (((0xFu >> v29) & 1) == 0 || !**v328)
                            {
                              v34 = *(unsigned __int16 *)v328[1];
                              if ((_DWORD)v34 != (unsigned __int16)v32)
                              {
                                v295 = v328[2];
                                v302 = v21;
                                v35 = (unsigned __int16)v32;
                                LOWORD(v330) = *(_WORD *)v328[1];
                                v333[0] = v32;
                                v36 = (uint64_t)(v33 + 24);
                                v37 = *((_QWORD *)v33 + 3);
                                v38 = *((unsigned __int16 *)v33 + 18);
                                v39 = v38 * (unint64_t)v34 + (unsigned __int16)v32;
                                if (v37 >= 0)
                                  v40 = 2 * v37 + 8;
                                else
                                  v40 = v36;
                                v41 = (v39 >> 3) & 0x3FFFFFF8;
                                v42 = *(_QWORD *)(v40 + v41);
                                v43 = 1 << v39;
                                v44 = v43 & v42;
                                *(_QWORD *)(v40 + v41) = v43 | v42;
                                v45 = *(_DWORD *)(v36 + 8);
                                if ((v43 & v42) == 0)
                                  ++v45;
                                v46 = v34 + v38 * (unint64_t)(unsigned __int16)v32;
                                if (*(uint64_t *)v36 >= 0)
                                  v47 = 2 * *(_QWORD *)v36 + 8;
                                else
                                  v47 = v36;
                                v48 = (v46 >> 3) & 0x3FFFFFF8;
                                v49 = 1 << v46;
                                v50 = *(_QWORD *)(v47 + v48);
                                v78 = (v50 & v49) == 0;
                                *(_QWORD *)(v47 + v48) = v50 | v49;
                                v51 = v295;
                                if (v78)
                                  ++v45;
                                *(_DWORD *)(v36 + 8) = v45;
                                if (!v44)
                                {
                                  v52 = *((unsigned __int16 *)v295 + 8);
                                  v287 = v22;
                                  if (v52 < v34)
                                  {
                                    v53 = *((_QWORD *)v295 + 5) + 16 * v34;
                                    v54 = *(unsigned int *)(v53 + 12);
                                    if ((_DWORD)v54 == *(_DWORD *)(v53 + 8))
                                    {
                                      v281 = v34;
                                      v235 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)v333);
                                      v51 = v295;
                                      v12 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                                      v8 = (char *)&JSC::B3::Air::g_formTable;
                                      v54 = *(unsigned int *)(v53 + 12);
                                      v236 = *v235;
                                      v34 = v281;
                                      *(_WORD *)(*(_QWORD *)v53 + 2 * v54) = v236;
                                    }
                                    else
                                    {
                                      *(_WORD *)(*(_QWORD *)v53 + 2 * v54) = v32;
                                    }
                                    *(_DWORD *)(v53 + 12) = v54 + 1;
                                    ++*(_WORD *)(*((_QWORD *)v51 + 7) + 2 * v34);
                                    v35 = v333[0];
                                    v52 = *((unsigned __int16 *)v51 + 8);
                                    v22 = v287;
                                  }
                                  if (v52 < v35)
                                  {
                                    v55 = *((_QWORD *)v51 + 5) + 16 * v35;
                                    v56 = *(unsigned int *)(v55 + 12);
                                    if ((_DWORD)v56 == *(_DWORD *)(v55 + 8))
                                    {
                                      v234 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v55, v56 + 1, (unint64_t)&v330);
                                      v51 = v295;
                                      v12 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                                      v8 = (char *)&JSC::B3::Air::g_formTable;
                                      v56 = *(unsigned int *)(v55 + 12);
                                      *(_WORD *)(*(_QWORD *)v55 + 2 * v56) = *v234;
                                    }
                                    else
                                    {
                                      *(_WORD *)(*(_QWORD *)v55 + 2 * v56) = v34;
                                    }
                                    *(_DWORD *)(v55 + 12) = v56 + 1;
                                    ++*(_WORD *)(*((_QWORD *)v51 + 7) + 2 * v333[0]);
                                    v22 = v287;
                                  }
                                }
                                v13 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                                v21 = v302;
                              }
                            }
                          }
                        }
                        else if ((v31 - 12) < 2)
                        {
                          if ((v28 & 0xF) != 0xB)
                            LOBYTE(v29) = 3;
                          v291 = v22;
                          v271 = v12;
                          v305 = v21;
                          v21 = v305;
                          v13 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                          v12 = v271;
                          v22 = v291;
                          v8 = (char *)&JSC::B3::Air::g_formTable;
                        }
                        ++v57;
                        v58 += 32;
                      }
                      while (v22 != v57);
                    }
                  }
                  a4 = v314;
                }
                if (v21)
                {
                  v328 = &v324;
                  v329 = &v328;
                  if ((*(__int16 *)(v21 + 120) - 446) <= 5)
                  {
                    v330 = v12;
                    v331 = (char ****)&v330;
                    v332 = (uint64_t ***)&v329;
                    v159 = v8;
                    v160 = v12;
                    v161 = v13;
                    JSC::B3::Air::Inst::forEachArgCustom(v21, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v12, (uint64_t)&v330);
                    v13 = v161;
                    v12 = v160;
                    v8 = v159;
                  }
                  else
                  {
                    v59 = *(unsigned int *)(v21 + 12);
                    if ((_DWORD)v59)
                    {
                      v26 = 0;
                      v60 = (unint64_t)&v8[21 * *(__int16 *)(v21 + 120)
                                                + ((unint64_t)((v59 - 1) * v59) >> 1)];
                      v27 = 8;
                      while (1)
                      {
                        if (v26 >= *(unsigned int *)(v21 + 12))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19805C7C4);
                        }
                        v23 = *(unsigned __int8 *)(v60 + v26);
                        v24 = (v23 >> 5) - 1;
                        if (v24 >= 5)
                          break;
                        v25 = *(_QWORD *)v21 + v27;
                        if (*(_BYTE *)v25 == 1 && (v23 & 0xF) - 8 <= 2 && (v23 & 0x10) == 0)
                        {
                          v207 = 0xFu >> v24;
                          v208 = *(unsigned __int16 *)(v25 + 8);
                          v311 = v328[2];
                          if ((v207 & 1) == 0 || !**v328)
                          {
                            v209 = *(unsigned __int16 *)v328[1];
                            if ((_DWORD)v209 != (_DWORD)v208)
                            {
                              v304 = v21;
                              LOWORD(v330) = *(_WORD *)v328[1];
                              v333[0] = v208;
                              v210 = (uint64_t *)(v311 + 24);
                              v211 = *((_QWORD *)v311 + 3);
                              v212 = *((unsigned __int16 *)v311 + 18);
                              v213 = v208 + *((unsigned __int16 *)v311 + 18) * (unint64_t)v209;
                              if (v211 >= 0)
                                v214 = 2 * v211 + 8;
                              else
                                v214 = (uint64_t)(v311 + 24);
                              v215 = (v213 >> 3) & 0x3FFFFFF8;
                              v216 = *(_QWORD *)(v214 + v215);
                              v217 = 1 << v213;
                              v218 = v217 & v216;
                              *(_QWORD *)(v214 + v215) = v217 | v216;
                              v219 = *((_DWORD *)v311 + 8);
                              if ((v217 & v216) == 0)
                                ++v219;
                              v297 = v209;
                              v220 = v209 + v212 * (unint64_t)v208;
                              if (*v210 >= 0)
                                v221 = 2 * *v210 + 8;
                              else
                                v221 = (uint64_t)(v311 + 24);
                              v222 = (v220 >> 3) & 0x3FFFFFF8;
                              v223 = 1 << v220;
                              v224 = *(_QWORD *)(v221 + v222);
                              *(_QWORD *)(v221 + v222) = v224 | v223;
                              if ((v224 & v223) == 0)
                                ++v219;
                              *((_DWORD *)v311 + 8) = v219;
                              if (!v218)
                              {
                                v225 = *((unsigned __int16 *)v311 + 8);
                                v226 = v297;
                                if (v225 < v297)
                                {
                                  v227 = *((_QWORD *)v311 + 5) + 16 * v297;
                                  v228 = *(unsigned int *)(v227 + 12);
                                  if ((_DWORD)v228 == *(_DWORD *)(v227 + 8))
                                  {
                                    v288 = *((_QWORD *)v311 + 5) + 16 * v297;
                                    v240 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v288, v228 + 1, (unint64_t)v333);
                                    v227 = v288;
                                    v226 = v297;
                                    v12 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                                    v8 = (char *)&JSC::B3::Air::g_formTable;
                                    v228 = *(unsigned int *)(v288 + 12);
                                    *(_WORD *)(*(_QWORD *)v288 + 2 * v228) = *v240;
                                  }
                                  else
                                  {
                                    *(_WORD *)(*(_QWORD *)v227 + 2 * v228) = v208;
                                  }
                                  *(_DWORD *)(v227 + 12) = v228 + 1;
                                  ++*(_WORD *)(*((_QWORD *)v311 + 7) + 2 * v226);
                                  LODWORD(v208) = v333[0];
                                  v225 = *((unsigned __int16 *)v311 + 8);
                                }
                                if (v225 < v208)
                                {
                                  v229 = *((_QWORD *)v311 + 5) + 16 * v208;
                                  v230 = *(unsigned int *)(v229 + 12);
                                  if ((_DWORD)v230 == *(_DWORD *)(v229 + 8))
                                  {
                                    v298 = v229;
                                    v239 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v229, v230 + 1, (unint64_t)&v330);
                                    v229 = v298;
                                    v12 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                                    v8 = (char *)&JSC::B3::Air::g_formTable;
                                    v230 = *(unsigned int *)(v298 + 12);
                                    *(_WORD *)(*(_QWORD *)v298 + 2 * v230) = *v239;
                                  }
                                  else
                                  {
                                    *(_WORD *)(*(_QWORD *)v229 + 2 * v230) = v297;
                                  }
                                  *(_DWORD *)(v229 + 12) = v230 + 1;
                                  ++*(_WORD *)(*((_QWORD *)v311 + 7) + 2 * v333[0]);
                                }
                              }
                              v13 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                              v21 = v304;
                            }
                          }
                        }
                        ++v26;
                        v27 += 32;
                        if (v59 == v26)
                          goto LABEL_23;
                      }
LABEL_300:
                      __break(0xC471u);
                      JUMPOUT(0x19805C6DCLL);
                    }
                  }
LABEL_23:
                  a4 = v314;
                }
              }
            }
          }
          else if ((v16 - 12) < 2)
          {
            v265 = v8;
            v266 = v12;
            v267 = v13;
            v13 = v267;
            v12 = v266;
            v8 = v265;
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
  if (a3)
  {
    v321 = (uint64_t *)&v320;
    v322 = &v321;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v330 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v331 = (char ****)&v330;
      v332 = &v322;
      v122 = v8;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v330);
      v8 = v122;
    }
    else
    {
      v61 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v61)
      {
        v62 = 0;
        v63 = (unint64_t)&v8[21 * *((__int16 *)a3 + 60) + ((unint64_t)((v61 - 1) * v61) >> 1)];
        do
        {
          if (v62 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19805C7A4);
          }
          v64 = *(unsigned __int8 *)(v63 + v62);
          if ((v64 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19805C71CLL);
          }
          v65 = (uint64_t)&(*a3)[4 * v62];
          if (*(_BYTE *)(v65 + 8) == 1 && (v64 & 0xF) - 8 <= 2)
          {
            v162 = *(_DWORD *)(v65 + 16);
            v163 = *v321;
            v323 = v162;
            v327 = 0;
            if ((v64 & 0x10) == 0)
            {
              v164 = *(_QWORD *)(v163 + 16);
              v165 = **(_QWORD **)v163;
              v166 = **(_QWORD **)(v163 + 8);
              v324 = &v327;
              v325 = &v323;
              v326 = v164;
              v316 = a4;
              if (v165)
              {
                v328 = &v324;
                v329 = &v328;
                if ((*(__int16 *)(v165 + 120) - 446) <= 5)
                {
                  v330 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                  v331 = (char ****)&v330;
                  v332 = (uint64_t ***)&v329;
                  v237 = v166;
                  JSC::B3::Air::Inst::forEachArgCustom(v165, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v330);
                  v166 = v237;
                  v8 = (char *)&JSC::B3::Air::g_formTable;
                }
                else
                {
                  v167 = *(unsigned int *)(v165 + 12);
                  if ((_DWORD)v167)
                  {
                    v168 = 0;
                    v169 = (unint64_t)&v8[21 * *(__int16 *)(v165 + 120)
                                               + ((unint64_t)((v167 - 1) * v167) >> 1)];
                    v170 = 8;
                    do
                    {
                      if (v168 >= *(unsigned int *)(v165 + 12))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19805C7B4);
                      }
                      v171 = *(unsigned __int8 *)(v169 + v168);
                      v172 = (v171 >> 5) - 1;
                      if (v172 >= 5)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19805C77CLL);
                      }
                      v173 = (char *)(*(_QWORD *)v165 + v170);
                      v174 = *v173;
                      v175 = *((_DWORD *)v173 + 2);
                      if (v174 == 1)
                      {
                        if ((v171 & 0xC) == 4 && (v171 & 0x10) == 0)
                        {
                          v176 = v328[2];
                          if (((0xFu >> v172) & 1) == 0 || !**v328)
                          {
                            v177 = *(unsigned __int16 *)v328[1];
                            if ((_DWORD)v177 != (unsigned __int16)v175)
                            {
                              v296 = v170;
                              v303 = v169;
                              v178 = (unsigned __int16)v175;
                              LOWORD(v330) = *(_WORD *)v328[1];
                              v333[0] = v175;
                              v179 = (uint64_t)(v176 + 24);
                              v180 = *((_QWORD *)v176 + 3);
                              v310 = v176;
                              v181 = *((unsigned __int16 *)v176 + 18);
                              v182 = v181 * (unint64_t)v177 + (unsigned __int16)v175;
                              if (v180 >= 0)
                                v183 = 2 * v180 + 8;
                              else
                                v183 = v179;
                              v184 = (v182 >> 3) & 0x3FFFFFF8;
                              v185 = *(_QWORD *)(v183 + v184);
                              v186 = 1 << v182;
                              v187 = v186 & v185;
                              *(_QWORD *)(v183 + v184) = v186 | v185;
                              v188 = *(_DWORD *)(v179 + 8);
                              if ((v186 & v185) == 0)
                                ++v188;
                              v189 = v177 + v181 * (unint64_t)(unsigned __int16)v175;
                              if (*(uint64_t *)v179 >= 0)
                                v190 = 2 * *(_QWORD *)v179 + 8;
                              else
                                v190 = v179;
                              v191 = (v189 >> 3) & 0x3FFFFFF8;
                              v192 = 1 << v189;
                              v193 = *(_QWORD *)(v190 + v191);
                              v78 = (v193 & v192) == 0;
                              *(_QWORD *)(v190 + v191) = v193 | v192;
                              v194 = v310;
                              if (v78)
                                ++v188;
                              *(_DWORD *)(v179 + 8) = v188;
                              if (!v187)
                              {
                                v195 = *((unsigned __int16 *)v310 + 8);
                                if (v195 < v177)
                                {
                                  v196 = *((_QWORD *)v310 + 5) + 16 * v177;
                                  v197 = *(unsigned int *)(v196 + 12);
                                  if ((_DWORD)v197 == *(_DWORD *)(v196 + 8))
                                  {
                                    v278 = v177;
                                    v283 = v165;
                                    v290 = v166;
                                    v276 = *((_QWORD *)v310 + 5) + 16 * v177;
                                    v269 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v196, v197 + 1, (unint64_t)v333);
                                    v196 = v276;
                                    v194 = v310;
                                    v165 = v283;
                                    v166 = v290;
                                    v8 = (char *)&JSC::B3::Air::g_formTable;
                                    v197 = *(unsigned int *)(v276 + 12);
                                    v270 = *v269;
                                    v177 = v278;
                                    *(_WORD *)(*(_QWORD *)v276 + 2 * v197) = v270;
                                  }
                                  else
                                  {
                                    *(_WORD *)(*(_QWORD *)v196 + 2 * v197) = v175;
                                  }
                                  *(_DWORD *)(v196 + 12) = v197 + 1;
                                  ++*(_WORD *)(*((_QWORD *)v194 + 7) + 2 * v177);
                                  v178 = v333[0];
                                  v195 = *((unsigned __int16 *)v194 + 8);
                                }
                                if (v195 < v178)
                                {
                                  v198 = *((_QWORD *)v194 + 5) + 16 * v178;
                                  v199 = *(unsigned int *)(v198 + 12);
                                  if ((_DWORD)v199 == *(_DWORD *)(v198 + 8))
                                  {
                                    v282 = v165;
                                    v289 = v166;
                                    v277 = v198;
                                    v268 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v198, v199 + 1, (unint64_t)&v330);
                                    v198 = v277;
                                    v194 = v310;
                                    v165 = v282;
                                    v166 = v289;
                                    v8 = (char *)&JSC::B3::Air::g_formTable;
                                    v199 = *(unsigned int *)(v277 + 12);
                                    *(_WORD *)(*(_QWORD *)v277 + 2 * v199) = *v268;
                                  }
                                  else
                                  {
                                    *(_WORD *)(*(_QWORD *)v198 + 2 * v199) = v177;
                                  }
                                  *(_DWORD *)(v198 + 12) = v199 + 1;
                                  ++*(_WORD *)(*((_QWORD *)v194 + 7) + 2 * v333[0]);
                                }
                              }
                              v170 = v296;
                              v169 = v303;
                            }
                          }
                        }
                      }
                      else if ((v174 - 12) < 2)
                      {
                        if ((v171 & 0xF) != 0xB)
                          LOBYTE(v172) = 3;
                        v286 = v165;
                        v294 = v166;
                        v301 = v170;
                        v308 = v169;
                        v170 = v301;
                        v169 = v308;
                        v165 = v286;
                        v166 = v294;
                        v8 = (char *)&JSC::B3::Air::g_formTable;
                      }
                      ++v168;
                      v170 += 32;
                    }
                    while (v167 != v168);
                  }
                }
                a4 = v316;
              }
              if (v166)
              {
                v328 = &v324;
                v329 = &v328;
                if ((*(__int16 *)(v166 + 120) - 446) <= 5)
                {
                  v330 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                  v331 = (char ****)&v330;
                  v332 = (uint64_t ***)&v329;
                  v238 = v8;
                  JSC::B3::Air::Inst::forEachArgCustom(v166, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v330);
                  v8 = v238;
                }
                else
                {
                  v200 = *(unsigned int *)(v166 + 12);
                  if ((_DWORD)v200)
                  {
                    v201 = 0;
                    v202 = (unint64_t)&v8[21 * *(__int16 *)(v166 + 120)
                                               + ((unint64_t)((v200 - 1) * v200) >> 1)];
                    v203 = 8;
                    do
                    {
                      if (v201 >= *(unsigned int *)(v166 + 12))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19805C7BCLL);
                      }
                      v204 = *(unsigned __int8 *)(v202 + v201);
                      v205 = (v204 >> 5) - 1;
                      if (v205 >= 5)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19805C75CLL);
                      }
                      v206 = *(_QWORD *)v166 + v203;
                      if (*(_BYTE *)v206 == 1 && (v204 & 0xF) - 8 <= 2 && (v204 & 0x10) == 0)
                      {
                        v241 = 0xFu >> v205;
                        v242 = *(unsigned __int16 *)(v206 + 8);
                        v243 = v328[2];
                        if ((v241 & 1) == 0 || !**v328)
                        {
                          v244 = *(unsigned __int16 *)v328[1];
                          if ((_DWORD)v244 != (_DWORD)v242)
                          {
                            LOWORD(v330) = *(_WORD *)v328[1];
                            v245 = (uint64_t *)(v243 + 24);
                            v246 = *((_QWORD *)v243 + 3);
                            v333[0] = v242;
                            v247 = *((unsigned __int16 *)v243 + 18);
                            v248 = v242 + *((unsigned __int16 *)v243 + 18) * (unint64_t)v244;
                            if (v246 >= 0)
                              v249 = 2 * v246 + 8;
                            else
                              v249 = (uint64_t)(v243 + 24);
                            v250 = (v248 >> 3) & 0x3FFFFFF8;
                            v251 = *(_QWORD *)(v249 + v250);
                            v252 = 1 << v248;
                            v253 = v252 & v251;
                            *(_QWORD *)(v249 + v250) = v252 | v251;
                            v254 = *((_DWORD *)v243 + 8);
                            if ((v252 & v251) == 0)
                              ++v254;
                            v255 = v244 + v247 * (unint64_t)v242;
                            if (*v245 >= 0)
                              v256 = 2 * *v245 + 8;
                            else
                              v256 = (uint64_t)(v243 + 24);
                            v257 = (v255 >> 3) & 0x3FFFFFF8;
                            v258 = 1 << v255;
                            v259 = *(_QWORD *)(v256 + v257);
                            *(_QWORD *)(v256 + v257) = v259 | v258;
                            if ((v259 & v258) == 0)
                              ++v254;
                            *((_DWORD *)v243 + 8) = v254;
                            if (!v253)
                            {
                              v260 = *((unsigned __int16 *)v243 + 8);
                              if (v260 < v244)
                              {
                                v261 = *((_QWORD *)v243 + 5) + 16 * v244;
                                v262 = *(unsigned int *)(v261 + 12);
                                if ((_DWORD)v262 == *(_DWORD *)(v261 + 8))
                                {
                                  v300 = v203;
                                  v307 = v202;
                                  v285 = v243;
                                  v293 = v166;
                                  v313 = v200;
                                  v279 = *((_QWORD *)v243 + 5) + 16 * v244;
                                  v274 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v261, v262 + 1, (unint64_t)v333);
                                  v261 = v279;
                                  v243 = v285;
                                  v166 = v293;
                                  v200 = v313;
                                  v8 = (char *)&JSC::B3::Air::g_formTable;
                                  v262 = *(unsigned int *)(v279 + 12);
                                  v275 = *v274;
                                  v203 = v300;
                                  v202 = v307;
                                  *(_WORD *)(*(_QWORD *)v279 + 2 * v262) = v275;
                                }
                                else
                                {
                                  *(_WORD *)(*(_QWORD *)v261 + 2 * v262) = v242;
                                }
                                *(_DWORD *)(v261 + 12) = v262 + 1;
                                ++*(_WORD *)(*((_QWORD *)v243 + 7) + 2 * v244);
                                LODWORD(v242) = v333[0];
                                v260 = *((unsigned __int16 *)v243 + 8);
                              }
                              if (v260 < v242)
                              {
                                v263 = *((_QWORD *)v243 + 5) + 16 * v242;
                                v264 = *(unsigned int *)(v263 + 12);
                                if ((_DWORD)v264 == *(_DWORD *)(v263 + 8))
                                {
                                  v299 = v203;
                                  v306 = v202;
                                  v284 = v243;
                                  v292 = v166;
                                  v312 = v200;
                                  v280 = v263;
                                  v272 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v263, v264 + 1, (unint64_t)&v330);
                                  v263 = v280;
                                  v243 = v284;
                                  v166 = v292;
                                  v203 = v299;
                                  v8 = (char *)&JSC::B3::Air::g_formTable;
                                  v264 = *(unsigned int *)(v280 + 12);
                                  v273 = *v272;
                                  v202 = v306;
                                  v200 = v312;
                                  *(_WORD *)(*(_QWORD *)v280 + 2 * v264) = v273;
                                }
                                else
                                {
                                  *(_WORD *)(*(_QWORD *)v263 + 2 * v264) = v244;
                                }
                                *(_DWORD *)(v263 + 12) = v264 + 1;
                                ++*(_WORD *)(*((_QWORD *)v243 + 7) + 2 * v333[0]);
                              }
                            }
                          }
                        }
                      }
                      ++v201;
                      v203 += 32;
                    }
                    while (v200 != v201);
                  }
                }
                a4 = v316;
              }
            }
          }
          ++v62;
        }
        while (v62 != v61);
      }
    }
  }
  v330 = v317;
  v331 = &v329;
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    LOBYTE(v329) = 4;
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19805C7E4);
    }
    v125 = v8;
    v324 = (char *)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v325 = v126;
    v8 = v125;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v329) = 8;
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19805C7DCLL);
    }
    v123 = v8;
    v324 = (char *)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v325 = v124;
    v8 = v123;
  }
  v66 = (uint64_t)v319;
  if (!v319)
    goto LABEL_75;
  v67 = *((__int16 *)v319 + 60);
  if ((v67 | 4) != 0x5E)
    goto LABEL_75;
  if (*((_DWORD *)v319 + 3) != 2)
    goto LABEL_75;
  v72 = (uint64_t)*v319;
  if (*((_BYTE *)*v319 + 8) != 1 || *(_BYTE *)(v72 + 40) != 1)
    goto LABEL_75;
  if (v67 != 94)
    goto LABEL_81;
  v232 = *(_QWORD *)(a1 + 328);
  if (!v232)
    goto LABEL_75;
  v233 = *(unsigned int *)(v72 + 16);
  if ((int)v233 < 1)
  {
    v233 = -(int)v233;
    if (v233 >= *(unsigned int *)(v232 + 28))
      goto LABEL_300;
    v232 += 16;
  }
  else if (v233 >= *(_DWORD *)(v232 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x19805C7ECLL);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)v232 + 2 * v233 + 1) <= 2u)
  {
LABEL_81:
    v73 = &v8[21 * *((__int16 *)v319 + 60)];
    v74 = v73[1];
    if ((v74 >> 5) - 1 >= 5 || (v75 = v73[2], (v75 >> 5) - 1 > 4))
    {
      __break(0xC471u);
      JUMPOUT(0x19805C79CLL);
    }
    v76 = v74 & 0xC;
    v77 = *(_DWORD *)(v72 + 16);
    v78 = v76 == 4;
    if (v76 == 4)
      v79 = 0;
    else
      v79 = *(_DWORD *)(v72 + 16);
    if (!v78)
      LOWORD(v77) = 0;
    v80 = *(_DWORD *)(v72 + 48);
    v81 = v75 & 0xC;
    if (v81 == 4)
      v82 = v80;
    else
      v82 = v77;
    if (v81 == 4)
      v83 = v79;
    else
      v83 = v80;
    v84 = (_QWORD *)(a1 + 80);
    LOWORD(v330) = v83;
    WORD1(v330) = v82;
    v85 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v85 == *(_DWORD *)(a1 + 88))
    else
      *(_DWORD *)(*v84 + 4 * v85) = (_DWORD)v330;
    v315 = a4;
    ++*(_DWORD *)(a1 + 92);
    v86 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)(a1 + 288) = v86 + 1;
    LODWORD(v330) = v86;
    v87 = (_QWORD *)(a1 + 296);
    v88 = *(unsigned int *)(a1 + 308);
    if ((_DWORD)v88 == *(_DWORD *)(a1 + 304))
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * *(unsigned int *)(a1 + 308)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v330);
    else
      *(_DWORD *)(*v87 + 4 * v88) = v86;
    ++*(_DWORD *)(a1 + 308);
    v89 = *((unsigned int *)v319 + 3);
    if ((_DWORD)v89)
    {
      v90 = 32 * v89;
      v91 = (unsigned int *)(*v319 + 2);
      do
      {
        v93 = *v91;
        v91 += 8;
        v92 = v93;
        if (*(_DWORD *)(a1 + 108) <= v93)
        {
          __break(0xC471u);
          JUMPOUT(0x19805C7D4);
        }
        WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v330, (unsigned int *)(*(_QWORD *)(a1 + 96) + 40 * v92), v85);
        v90 -= 32;
      }
      while (v90);
    }
    v94 = *(unsigned int *)(*v315 + 60);
    if ((_DWORD)v94)
    {
      v95 = *(int **)(*v315 + 48);
      v96 = 4 * v94;
      do
      {
        v97 = *v95;
        if (v83 != *v95 && v82 != (unsigned __int16)v97)
        {
          v98 = (unsigned __int16)*v95;
          LOWORD(v330) = v82;
          LOWORD(v324) = v97;
          v99 = *(unsigned __int16 *)(a1 + 36);
          v100 = (unsigned __int16)v97;
          v101 = *(unsigned __int16 *)(a1 + 36) * (unint64_t)v82 + (unsigned __int16)v97;
          v102 = *(_QWORD *)(a1 + 24);
          if (v102 >= 0)
            v103 = 2 * v102 + 8;
          else
            v103 = a1 + 24;
          v104 = (v101 >> 3) & 0x3FFFFFF8;
          v105 = *(_QWORD *)(v103 + v104);
          v106 = 1 << v101;
          v107 = v106 & v105;
          v78 = (v106 & v105) == 0;
          *(_QWORD *)(v103 + v104) = v106 | v105;
          v108 = *(_DWORD *)(a1 + 32);
          if (v78)
            ++v108;
          v109 = v82 + v99 * (unint64_t)v100;
          v110 = *(_QWORD *)(a1 + 24);
          if (v110 >= 0)
            v111 = 2 * v110 + 8;
          else
            v111 = a1 + 24;
          v112 = (v109 >> 3) & 0x3FFFFFF8;
          v113 = 1 << v109;
          v114 = *(_QWORD *)(v111 + v112);
          *(_QWORD *)(v111 + v112) = v114 | v113;
          if ((v114 & v113) == 0)
            ++v108;
          *(_DWORD *)(a1 + 32) = v108;
          if (!v107)
          {
            v115 = *(unsigned __int16 *)(a1 + 16);
            if (v115 < v82)
            {
              v116 = *(_QWORD *)(a1 + 40) + 16 * v82;
              v117 = *(unsigned int *)(v116 + 12);
              if ((_DWORD)v117 == *(_DWORD *)(v116 + 8))
              {
                v121 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 40) + 16 * v82, v117 + 1, (unint64_t)&v324);
                v117 = *(unsigned int *)(v116 + 12);
                *(_WORD *)(*(_QWORD *)v116 + 2 * v117) = *v121;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v116 + 2 * v117) = v98;
              }
              *(_DWORD *)(v116 + 12) = v117 + 1;
              ++*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * v82);
              v98 = (unsigned __int16)v324;
              v115 = *(unsigned __int16 *)(a1 + 16);
            }
            if (v115 < v98)
            {
              v118 = *(_QWORD *)(a1 + 40) + 16 * v98;
              v119 = *(unsigned int *)(v118 + 12);
              if ((_DWORD)v119 == *(_DWORD *)(v118 + 8))
              {
                v120 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v118, v119 + 1, (unint64_t)&v330);
                v119 = *(unsigned int *)(v118 + 12);
                *(_WORD *)(*(_QWORD *)v118 + 2 * v119) = *v120;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v118 + 2 * v119) = v82;
              }
              *(_DWORD *)(v118 + 12) = v119 + 1;
              ++*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v324);
            }
          }
        }
        ++v95;
        v96 -= 4;
      }
      while (v96);
    }
    v127 = *(unsigned int *)(a1 + 268);
    if ((_DWORD)v127)
    {
      v128 = *(int **)(a1 + 256);
      v129 = 4 * v127;
      do
      {
        v130 = *v128;
        if (v83 != *v128 && v82 != (unsigned __int16)v130)
        {
          v131 = (unsigned __int16)*v128;
          LOWORD(v330) = v82;
          LOWORD(v324) = v130;
          v132 = *(unsigned __int16 *)(a1 + 36);
          v133 = (unsigned __int16)v130;
          v134 = *(unsigned __int16 *)(a1 + 36) * (unint64_t)v82 + (unsigned __int16)v130;
          v135 = *(_QWORD *)(a1 + 24);
          if (v135 >= 0)
            v136 = 2 * v135 + 8;
          else
            v136 = a1 + 24;
          v137 = (v134 >> 3) & 0x3FFFFFF8;
          v138 = *(_QWORD *)(v136 + v137);
          v139 = 1 << v134;
          v140 = v139 & v138;
          v78 = (v139 & v138) == 0;
          *(_QWORD *)(v136 + v137) = v139 | v138;
          v141 = *(_DWORD *)(a1 + 32);
          if (v78)
            ++v141;
          v142 = v82 + v132 * (unint64_t)v133;
          v143 = *(_QWORD *)(a1 + 24);
          if (v143 >= 0)
            v144 = 2 * v143 + 8;
          else
            v144 = a1 + 24;
          v145 = (v142 >> 3) & 0x3FFFFFF8;
          v146 = 1 << v142;
          v147 = *(_QWORD *)(v144 + v145);
          *(_QWORD *)(v144 + v145) = v147 | v146;
          if ((v147 & v146) == 0)
            ++v141;
          *(_DWORD *)(a1 + 32) = v141;
          if (!v140)
          {
            v148 = *(unsigned __int16 *)(a1 + 16);
            if (v148 < v82)
            {
              v149 = *(_QWORD *)(a1 + 40) + 16 * v82;
              v150 = *(unsigned int *)(v149 + 12);
              if ((_DWORD)v150 == *(_DWORD *)(v149 + 8))
              {
                v231 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 40) + 16 * v82, v150 + 1, (unint64_t)&v324);
                v150 = *(unsigned int *)(v149 + 12);
                *(_WORD *)(*(_QWORD *)v149 + 2 * v150) = *v231;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v149 + 2 * v150) = v131;
              }
              *(_DWORD *)(v149 + 12) = v150 + 1;
              ++*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * v82);
              v131 = (unsigned __int16)v324;
              v148 = *(unsigned __int16 *)(a1 + 16);
            }
            if (v148 < v131)
            {
              v151 = *(_QWORD *)(a1 + 40) + 16 * v131;
              v152 = *(unsigned int *)(v151 + 12);
              if ((_DWORD)v152 == *(_DWORD *)(v151 + 8))
              {
                v153 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v151, v152 + 1, (unint64_t)&v330);
                v152 = *(unsigned int *)(v151 + 12);
                *(_WORD *)(*(_QWORD *)v151 + 2 * v152) = *v153;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v151 + 2 * v152) = v82;
              }
              *(_DWORD *)(v151 + 12) = v152 + 1;
              ++*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v324);
            }
          }
        }
        ++v128;
        v129 -= 4;
      }
      while (v129);
    }
    v68 = v318;
    v69 = *v315;
    v70 = a1;
    v66 = 0;
  }
  else
  {
LABEL_75:
    v68 = v318;
    v69 = *a4;
    v70 = a1;
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(uint64_t result, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  _QWORD **v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int16 *v47;
  __int16 v48;
  char *v49;
  __int16 *v50;
  __int16 v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __int16 *v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  __int16 *v112;
  uint64_t v113;
  __int16 v114;
  __int16 *v115;
  __int16 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  __int16 *v124;
  __int16 v125;
  uint64_t v126;
  unsigned __int16 *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  _QWORD **v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD **v163;
  _QWORD v164[2];
  uint64_t v165;
  uint64_t ****v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t ***v169;
  uint64_t **v170;
  uint64_t ***v171;
  uint64_t *****v172;
  unsigned __int16 v173;

  v5 = (_QWORD **)a2;
  v164[1] = result;
  v165 = a4;
  v164[0] = &v165;
  v168 = v164;
  if (a2)
  {
    v169 = (uint64_t ***)&v168;
    v166 = &v169;
    if ((*(__int16 *)(a2 + 120) - 446) <= 5)
    {
      v170 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v171 = &v170;
      v172 = &v166;
      result = JSC::B3::Air::Inst::forEachArgCustom(a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v170);
    }
    else
    {
      v6 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(a2 + 120) + ((unint64_t)((v6 - 1) * v6) >> 1);
        result = 1;
        do
        {
          if (v7 >= *((unsigned int *)v5 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19805D2E0);
          }
          v9 = v8[v7];
          if ((v9 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19805D2D0);
          }
          v10 = (uint64_t)&(*v5)[4 * v7];
          v11 = *(char *)(v10 + 8);
          v12 = *(_DWORD *)(v10 + 16);
          if (v11 == 1)
          {
            if ((v9 & 0xC) == 4 && (v9 & 0x10) == 0)
            {
              v160 = *(_DWORD *)(v10 + 16);
              v163 = v5;
              v13 = (*v169)[1];
              v14 = ***v169;
              v15 = *(unsigned int *)(v14 + 60);
              v159 = a3;
              if ((_DWORD)v15)
              {
                v16 = *(unsigned int **)(v14 + 48);
                v17 = (unsigned __int16)v12;
                v18 = (unsigned __int16)v12;
                v19 = 4 * v15;
                v156 = v6;
                do
                {
                  v20 = *v16;
                  v21 = v13[41];
                  if ((int)*v16 < 1)
                  {
                    if (-v20 >= (unint64_t)*(unsigned int *)(v21 + 28))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19805D2F8);
                    }
                  }
                  else if (v20 >= *(_DWORD *)(v21 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19805D2E8);
                  }
                  if (v17 != (unsigned __int16)v20)
                  {
                    v22 = (unsigned __int16)*v16;
                    LOWORD(v170) = v17;
                    v173 = v20;
                    v23 = *((unsigned __int16 *)v13 + 18);
                    v24 = (unsigned __int16)v20;
                    v25 = v18 * (unint64_t)*((unsigned __int16 *)v13 + 18) + (unsigned __int16)v20;
                    v26 = v13[3];
                    if (v26 >= 0)
                      v27 = 2 * v26 + 8;
                    else
                      v27 = (uint64_t)(v13 + 3);
                    v28 = (v25 >> 3) & 0x3FFFFFF8;
                    v29 = *(_QWORD *)(v27 + v28);
                    v30 = 1 << v25;
                    v32 = v30 & v29;
                    v31 = (v30 & v29) == 0;
                    *(_QWORD *)(v27 + v28) = v30 | v29;
                    v33 = *((_DWORD *)v13 + 8);
                    if (v31)
                      ++v33;
                    v34 = v18 + v24 * (unint64_t)v23;
                    v35 = v13[3];
                    if (v35 >= 0)
                      v36 = 2 * v35 + 8;
                    else
                      v36 = (uint64_t)(v13 + 3);
                    v37 = (v34 >> 3) & 0x3FFFFFF8;
                    v38 = 1 << v34;
                    v39 = *(_QWORD *)(v36 + v37);
                    *(_QWORD *)(v36 + v37) = v39 | v38;
                    if ((v39 & v38) == 0)
                      ++v33;
                    *((_DWORD *)v13 + 8) = v33;
                    if (!v32)
                    {
                      v40 = *((unsigned __int16 *)v13 + 8);
                      if (v40 < v17)
                      {
                        v41 = v13[5] + 16 * v18;
                        v42 = *(unsigned int *)(v41 + 12);
                        if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
                        {
                          v49 = v8;
                          v50 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13[5] + 16 * v18, v42 + 1, (unint64_t)&v173);
                          v8 = v49;
                          v6 = v156;
                          v5 = v163;
                          v42 = *(unsigned int *)(v41 + 12);
                          v51 = *v50;
                          result = 1;
                          *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = v51;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = v22;
                        }
                        *(_DWORD *)(v41 + 12) = v42 + 1;
                        ++*(_WORD *)(v13[7] + 2 * v18);
                        v22 = v173;
                        v40 = *((unsigned __int16 *)v13 + 8);
                      }
                      if (v40 < v22)
                      {
                        v43 = v13[5] + 16 * v22;
                        v44 = *(unsigned int *)(v43 + 12);
                        if ((_DWORD)v44 == *(_DWORD *)(v43 + 8))
                        {
                          v45 = v6;
                          v46 = v8;
                          v47 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43, v44 + 1, (unint64_t)&v170);
                          v8 = v46;
                          v6 = v45;
                          v5 = v163;
                          a3 = v159;
                          v44 = *(unsigned int *)(v43 + 12);
                          v48 = *v47;
                          result = 1;
                          *(_WORD *)(*(_QWORD *)v43 + 2 * v44) = v48;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v43 + 2 * v44) = v17;
                        }
                        *(_DWORD *)(v43 + 12) = v44 + 1;
                        ++*(_WORD *)(v13[7] + 2 * v173);
                      }
                    }
                  }
                  ++v16;
                  v19 -= 4;
                }
                while (v19);
              }
              v80 = *((unsigned int *)v13 + 67);
              if ((_DWORD)v80)
              {
                v74 = (unsigned __int16 *)v13[32];
                v75 = 4 * v80;
                do
                {
                  v52 = *v74;
                  if ((unsigned __int16)v160 != (_DWORD)v52)
                  {
                    LOWORD(v170) = v160;
                    v173 = v52;
                    v53 = *((unsigned __int16 *)v13 + 18);
                    v54 = v52 + (unsigned __int16)v160 * (unint64_t)*((unsigned __int16 *)v13 + 18);
                    v55 = v13[3];
                    if (v55 >= 0)
                      v56 = 2 * v55 + 8;
                    else
                      v56 = (uint64_t)(v13 + 3);
                    v57 = (v54 >> 3) & 0x3FFFFFF8;
                    v58 = *(_QWORD *)(v56 + v57);
                    v59 = 1 << v54;
                    v60 = v59 & v58;
                    v31 = (v59 & v58) == 0;
                    *(_QWORD *)(v56 + v57) = v59 | v58;
                    v61 = *((_DWORD *)v13 + 8);
                    if (v31)
                      ++v61;
                    v62 = (unsigned __int16)v160 + v53 * (unint64_t)v52;
                    v63 = v13[3];
                    if (v63 >= 0)
                      v64 = 2 * v63 + 8;
                    else
                      v64 = (uint64_t)(v13 + 3);
                    v65 = (v62 >> 3) & 0x3FFFFFF8;
                    v66 = 1 << v62;
                    v67 = *(_QWORD *)(v64 + v65);
                    *(_QWORD *)(v64 + v65) = v67 | v66;
                    if ((v67 & v66) != 0)
                      v68 = v61;
                    else
                      v68 = v61 + 1;
                    *((_DWORD *)v13 + 8) = v68;
                    if (!v60)
                    {
                      v69 = *((unsigned __int16 *)v13 + 8);
                      if (v69 < (unsigned __int16)v160)
                      {
                        v70 = v13[5] + 16 * (unsigned __int16)v160;
                        v71 = *(unsigned int *)(v70 + 12);
                        if ((_DWORD)v71 == *(_DWORD *)(v70 + 8))
                        {
                          v122 = v6;
                          v123 = v8;
                          v124 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13[5] + 16 * (unsigned __int16)v160, v71 + 1, (unint64_t)&v173);
                          v8 = v123;
                          v6 = v122;
                          v5 = v163;
                          a3 = v159;
                          v71 = *(unsigned int *)(v70 + 12);
                          v125 = *v124;
                          result = 1;
                          *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = v125;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = v52;
                        }
                        *(_DWORD *)(v70 + 12) = v71 + 1;
                        ++*(_WORD *)(v13[7] + 2 * (unsigned __int16)v160);
                        LODWORD(v52) = v173;
                        v69 = *((unsigned __int16 *)v13 + 8);
                      }
                      if (v69 < v52)
                      {
                        v72 = v13[5] + 16 * v52;
                        v73 = *(unsigned int *)(v72 + 12);
                        if ((_DWORD)v73 == *(_DWORD *)(v72 + 8))
                        {
                          v76 = v6;
                          v77 = v8;
                          v78 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)&v170);
                          v8 = v77;
                          v6 = v76;
                          v5 = v163;
                          a3 = v159;
                          v73 = *(unsigned int *)(v72 + 12);
                          v79 = *v78;
                          result = 1;
                          *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = v79;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = v160;
                        }
                        *(_DWORD *)(v72 + 12) = v73 + 1;
                        ++*(_WORD *)(v13[7] + 2 * v173);
                      }
                    }
                  }
                  v74 += 2;
                  v75 -= 4;
                }
                while (v75);
              }
            }
          }
          else if ((v11 - 12) < 2)
          {
            v153 = v6;
            v154 = v8;
            result = 1;
            v8 = v154;
            v6 = v153;
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
  if (a3)
  {
    v169 = (uint64_t ***)&v168;
    v166 = &v169;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v170 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v171 = &v170;
      v172 = &v166;
      result = JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v170);
    }
    else
    {
      v81 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v81)
      {
        v82 = 0;
        v83 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v81 - 1) * v81) >> 1);
        do
        {
          if (v82 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19805D2D8);
          }
          v84 = v83[v82];
          if ((v84 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19805D2B0);
          }
          v85 = (uint64_t)&(*a3)[4 * v82];
          if (*(_BYTE *)(v85 + 8) == 1 && (v84 & 0xF) - 8 <= 2 && (v84 & 0x10) == 0)
          {
            v155 = *(_DWORD *)(v85 + 16);
            v119 = (*v169)[1];
            v120 = ***v169;
            v121 = *(unsigned int *)(v120 + 60);
            if ((_DWORD)v121)
            {
              v110 = *(unsigned int **)(v120 + 48);
              v113 = (uint64_t)(v119 + 3);
              result = (unsigned __int16)v155;
              v111 = 4 * v121;
              do
              {
                v86 = *v110;
                v87 = v119[41];
                if ((int)*v110 < 1)
                {
                  if (-v86 >= (unint64_t)*(unsigned int *)(v87 + 28))
                    goto LABEL_157;
                }
                else if (v86 >= *(_DWORD *)(v87 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805D2F0);
                }
                if ((_DWORD)result != (unsigned __int16)v86)
                {
                  v88 = (unsigned __int16)*v110;
                  LOWORD(v170) = result;
                  v173 = v86;
                  v89 = *((unsigned __int16 *)v119 + 18);
                  v90 = (unsigned __int16)v86;
                  v91 = (unsigned __int16)v155 * (unint64_t)*((unsigned __int16 *)v119 + 18)
                      + (unsigned __int16)v86;
                  v92 = v119[3];
                  if (v92 >= 0)
                    v93 = 2 * v92 + 8;
                  else
                    v93 = v113;
                  v94 = (v91 >> 3) & 0x3FFFFFF8;
                  v95 = *(_QWORD *)(v93 + v94);
                  v96 = 1 << v91;
                  v97 = v96 & v95;
                  v31 = (v96 & v95) == 0;
                  *(_QWORD *)(v93 + v94) = v96 | v95;
                  v98 = *((_DWORD *)v119 + 8);
                  if (v31)
                    ++v98;
                  v99 = (unsigned __int16)v155 + v90 * (unint64_t)v89;
                  v100 = v119[3];
                  if (v100 >= 0)
                    v101 = 2 * v100 + 8;
                  else
                    v101 = v113;
                  v102 = (v99 >> 3) & 0x3FFFFFF8;
                  v103 = 1 << v99;
                  v104 = *(_QWORD *)(v101 + v102);
                  *(_QWORD *)(v101 + v102) = v104 | v103;
                  if ((v104 & v103) == 0)
                    ++v98;
                  *((_DWORD *)v119 + 8) = v98;
                  if (!v97)
                  {
                    v105 = *((unsigned __int16 *)v119 + 8);
                    if (v105 < result)
                    {
                      v106 = v119[5] + 16 * (unsigned __int16)v155;
                      v107 = *(unsigned int *)(v106 + 12);
                      if ((_DWORD)v107 == *(_DWORD *)(v106 + 8))
                      {
                        v115 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v119[5] + 16 * (unsigned __int16)v155, v107 + 1, (unint64_t)&v173);
                        v113 = (uint64_t)(v119 + 3);
                        v107 = *(unsigned int *)(v106 + 12);
                        v116 = *v115;
                        result = (unsigned __int16)v155;
                        *(_WORD *)(*(_QWORD *)v106 + 2 * v107) = v116;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v106 + 2 * v107) = v88;
                      }
                      *(_DWORD *)(v106 + 12) = v107 + 1;
                      ++*(_WORD *)(v119[7] + 2 * (unsigned __int16)v155);
                      v88 = v173;
                      v105 = *((unsigned __int16 *)v119 + 8);
                    }
                    if (v105 < v88)
                    {
                      v108 = v119[5] + 16 * v88;
                      v109 = *(unsigned int *)(v108 + 12);
                      if ((_DWORD)v109 == *(_DWORD *)(v108 + 8))
                      {
                        v112 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v108, v109 + 1, (unint64_t)&v170);
                        v113 = (uint64_t)(v119 + 3);
                        v109 = *(unsigned int *)(v108 + 12);
                        v114 = *v112;
                        result = (unsigned __int16)v155;
                        *(_WORD *)(*(_QWORD *)v108 + 2 * v109) = v114;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v108 + 2 * v109) = result;
                      }
                      *(_DWORD *)(v108 + 12) = v109 + 1;
                      ++*(_WORD *)(v119[7] + 2 * v173);
                    }
                  }
                }
                ++v110;
                v111 -= 4;
              }
              while (v111);
            }
            v126 = *((unsigned int *)v119 + 67);
            if ((_DWORD)v126)
            {
              v127 = (unsigned __int16 *)v119[32];
              v128 = (uint64_t)(v119 + 3);
              v129 = (unsigned __int16)v155;
              v130 = 4 * v126;
              do
              {
                v131 = *v127;
                if (v129 != (_DWORD)v131)
                {
                  LOWORD(v170) = v129;
                  v173 = v131;
                  v132 = *((unsigned __int16 *)v119 + 18);
                  v133 = v131 + (unsigned __int16)v155 * (unint64_t)*((unsigned __int16 *)v119 + 18);
                  v134 = v119[3];
                  if (v134 >= 0)
                    v135 = 2 * v134 + 8;
                  else
                    v135 = v128;
                  v136 = (v133 >> 3) & 0x3FFFFFF8;
                  v137 = *(_QWORD *)(v135 + v136);
                  v138 = 1 << v133;
                  v139 = v138 & v137;
                  v31 = (v138 & v137) == 0;
                  *(_QWORD *)(v135 + v136) = v138 | v137;
                  v140 = *((_DWORD *)v119 + 8);
                  if (v31)
                    ++v140;
                  v141 = (unsigned __int16)v155 + v132 * (unint64_t)v131;
                  v142 = v119[3];
                  if (v142 >= 0)
                    v143 = 2 * v142 + 8;
                  else
                    v143 = v128;
                  v144 = (v141 >> 3) & 0x3FFFFFF8;
                  v145 = 1 << v141;
                  v146 = *(_QWORD *)(v143 + v144);
                  *(_QWORD *)(v143 + v144) = v146 | v145;
                  if ((v146 & v145) != 0)
                    v147 = v140;
                  else
                    v147 = v140 + 1;
                  *((_DWORD *)v119 + 8) = v147;
                  if (!v139)
                  {
                    v148 = *((unsigned __int16 *)v119 + 8);
                    if (v148 < v129)
                    {
                      v149 = v119[5] + 16 * (unsigned __int16)v155;
                      v150 = *(unsigned int *)(v149 + 12);
                      if ((_DWORD)v150 == *(_DWORD *)(v149 + 8))
                      {
                        v162 = v128;
                        v158 = v129;
                        result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v119[5] + 16 * (unsigned __int16)v155, v150 + 1, (unint64_t)&v173);
                        v129 = v158;
                        v128 = v162;
                        v150 = *(unsigned int *)(v149 + 12);
                        *(_WORD *)(*(_QWORD *)v149 + 2 * v150) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v149 + 2 * v150) = v131;
                      }
                      *(_DWORD *)(v149 + 12) = v150 + 1;
                      ++*(_WORD *)(v119[7] + 2 * (unsigned __int16)v155);
                      LODWORD(v131) = v173;
                      v148 = *((unsigned __int16 *)v119 + 8);
                    }
                    if (v148 < v131)
                    {
                      v151 = v119[5] + 16 * v131;
                      v152 = *(unsigned int *)(v151 + 12);
                      if ((_DWORD)v152 == *(_DWORD *)(v151 + 8))
                      {
                        v161 = v128;
                        v157 = v129;
                        result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v151, v152 + 1, (unint64_t)&v170);
                        v129 = v157;
                        v128 = v161;
                        v152 = *(unsigned int *)(v151 + 12);
                        *(_WORD *)(*(_QWORD *)v151 + 2 * v152) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v151 + 2 * v152) = v129;
                      }
                      *(_DWORD *)(v151 + 12) = v152 + 1;
                      ++*(_WORD *)(v119[7] + 2 * v173);
                    }
                  }
                }
                v127 += 2;
                v130 -= 4;
              }
              while (v130);
            }
          }
          ++v82;
        }
        while (v82 != v81);
      }
    }
  }
  v170 = (uint64_t **)v164;
  v171 = (uint64_t ***)&v169;
  if (v5 && *((_WORD *)v5 + 60) == 448)
  {
    LOBYTE(v169) = 4;
    if (!*((_DWORD *)v5 + 3))
    {
LABEL_157:
      __break(0xC471u);
      JUMPOUT(0x19805CF34);
    }
    v166 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v5 + 80))(**v5, v5);
    v167 = v118;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v169) = 8;
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19805D300);
    }
    v166 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v167 = v117;
  }
  return result;
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unsigned int v76;
  _QWORD v77[3];
  BOOL v78;
  _QWORD *v79;
  _QWORD **v80;
  void *v81;
  void **v82;
  _QWORD *v83;
  unsigned __int16 v84;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v3 = a2;
    v4 = result;
    v74 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      v6 = ((*v4 >> v5) & 1) == 0;
      if (v5 <= 0x1F)
      {
        v7 = *v3;
        v76 = v5 + 1;
        v78 = v6;
        v8 = *(_QWORD *)(v7 + 16);
        v9 = **(_QWORD **)v7;
        v10 = **(_QWORD **)(v7 + 8);
        v77[0] = &v78;
        v77[1] = &v76;
        v77[2] = v8;
        if (v9)
        {
          v79 = v77;
          v80 = &v79;
          if ((*(__int16 *)(v9 + 120) - 446) <= 5)
          {
            v81 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v82 = &v81;
            v83 = &v80;
            result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom(v9, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v81);
            v4 = v74;
            v3 = a2;
          }
          else
          {
            v11 = *(unsigned int *)(v9 + 12);
            if ((_DWORD)v11)
            {
              v12 = 0;
              v13 = (char *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v9 + 120)
                  + ((unint64_t)((v11 - 1) * v11) >> 1);
              v14 = 8;
              do
              {
                if (v12 >= *(unsigned int *)(v9 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805D96CLL);
                }
                v15 = v13[v12];
                v16 = (v15 >> 5) - 1;
                if (v16 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805D964);
                }
                v17 = (char *)(*(_QWORD *)v9 + v14);
                v18 = *v17;
                v19 = *((_DWORD *)v17 + 2);
                result = v79;
                if (v18 == 1)
                {
                  if ((v15 & 0xC) == 4 && (v15 & 0x10) == 0)
                  {
                    v20 = v79[2];
                    if (((0xFu >> v16) & 1) == 0 || !*(_BYTE *)*v79)
                    {
                      v21 = *(unsigned __int16 *)v79[1];
                      if ((_DWORD)v21 != (unsigned __int16)v19)
                      {
                        v22 = (unsigned __int16)*((_DWORD *)v17 + 2);
                        LOWORD(v81) = *(_WORD *)v79[1];
                        v84 = v19;
                        v23 = (uint64_t *)(v20 + 24);
                        v24 = *(_QWORD *)(v20 + 24);
                        v25 = *(unsigned __int16 *)(v20 + 36);
                        v26 = *(unsigned __int16 *)(v20 + 36) * (unint64_t)v21
                            + (unsigned __int16)v19;
                        if (v24 >= 0)
                          v27 = 2 * v24 + 8;
                        else
                          v27 = v20 + 24;
                        v28 = (v26 >> 3) & 0x3FFFFFF8;
                        v29 = *(_QWORD *)(v27 + v28);
                        v30 = 1 << v26;
                        v31 = v30 & v29;
                        *(_QWORD *)(v27 + v28) = v30 | v29;
                        v32 = *(_DWORD *)(v20 + 32);
                        if ((v30 & v29) == 0)
                          ++v32;
                        v33 = v21 + v25 * (unint64_t)(unsigned __int16)v19;
                        if (*v23 >= 0)
                          v34 = 2 * *v23 + 8;
                        else
                          v34 = v20 + 24;
                        v35 = (v33 >> 3) & 0x3FFFFFF8;
                        v36 = 1 << v33;
                        v37 = *(_QWORD *)(v34 + v35);
                        *(_QWORD *)(v34 + v35) = v37 | v36;
                        if ((v37 & v36) == 0)
                          ++v32;
                        *(_DWORD *)(v20 + 32) = v32;
                        if (!v31)
                        {
                          v38 = *(unsigned __int16 *)(v20 + 16);
                          if (v38 < v21)
                          {
                            v39 = *(_QWORD *)(v20 + 40) + 16 * v21;
                            v40 = *(unsigned int *)(v39 + 12);
                            if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
                            {
                              result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v20 + 40) + 16 * v21, v40 + 1, (unint64_t)&v84);
                              v4 = v74;
                              v3 = a2;
                              v40 = *(unsigned int *)(v39 + 12);
                              *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = *(_WORD *)result;
                            }
                            else
                            {
                              *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = v19;
                            }
                            *(_DWORD *)(v39 + 12) = v40 + 1;
                            ++*(_WORD *)(*(_QWORD *)(v20 + 56) + 2 * v21);
                            v22 = v84;
                            v38 = *(unsigned __int16 *)(v20 + 16);
                          }
                          if (v38 < v22)
                          {
                            v41 = *(_QWORD *)(v20 + 40) + 16 * v22;
                            v42 = *(unsigned int *)(v41 + 12);
                            if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
                            {
                              result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v42 + 1, (unint64_t)&v81);
                              v4 = v74;
                              v3 = a2;
                              v42 = *(unsigned int *)(v41 + 12);
                              *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = *(_WORD *)result;
                            }
                            else
                            {
                              *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = v21;
                            }
                            *(_DWORD *)(v41 + 12) = v42 + 1;
                            ++*(_WORD *)(*(_QWORD *)(v20 + 56) + 2 * v84);
                          }
                        }
                      }
                    }
                  }
                }
                else if ((v18 - 12) < 2)
                {
                  if ((v15 & 0xF) != 0xB)
                    LOBYTE(v16) = 3;
                  v4 = v74;
                  v3 = a2;
                }
                ++v12;
                v14 += 32;
              }
              while (v11 != v12);
            }
          }
        }
        if (v10)
        {
          v79 = v77;
          v80 = &v79;
          if ((*(__int16 *)(v10 + 120) - 446) <= 5)
          {
            v81 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v82 = &v81;
            v83 = &v80;
            result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom(v10, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v81);
            v4 = v74;
            v3 = a2;
          }
          else
          {
            v43 = *(unsigned int *)(v10 + 12);
            if ((_DWORD)v43)
            {
              v44 = 0;
              v45 = (char *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v10 + 120)
                  + ((unint64_t)((v43 - 1) * v43) >> 1);
              v46 = 8;
              do
              {
                if (v44 >= *(unsigned int *)(v10 + 12)
                  || (v47 = v45[v44], v48 = (v47 >> 5) - 1, v48 >= 5))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805D944);
                }
                v49 = *(_QWORD *)v10 + v46;
                if (*(_BYTE *)v49 == 1 && (v47 & 0xF) - 8 <= 2 && (v47 & 0x10) == 0)
                {
                  v50 = 0xFu >> v48;
                  v51 = *(unsigned __int16 *)(v49 + 8);
                  v52 = v79[2];
                  if ((v50 & 1) == 0 || !*(_BYTE *)*v79)
                  {
                    v53 = *(unsigned __int16 *)v79[1];
                    if ((_DWORD)v53 != (_DWORD)v51)
                    {
                      LOWORD(v81) = *(_WORD *)v79[1];
                      v84 = v51;
                      v54 = (uint64_t *)(v52 + 24);
                      v55 = *(_QWORD *)(v52 + 24);
                      v56 = *(unsigned __int16 *)(v52 + 36);
                      v57 = v51 + *(unsigned __int16 *)(v52 + 36) * (unint64_t)v53;
                      if (v55 >= 0)
                        v58 = 2 * v55 + 8;
                      else
                        v58 = v52 + 24;
                      v59 = (v57 >> 3) & 0x3FFFFFF8;
                      v60 = *(_QWORD *)(v58 + v59);
                      v61 = 1 << v57;
                      v62 = v61 & v60;
                      *(_QWORD *)(v58 + v59) = v61 | v60;
                      v63 = *(_DWORD *)(v52 + 32);
                      if ((v61 & v60) == 0)
                        ++v63;
                      v64 = v53 + v56 * (unint64_t)v51;
                      if (*v54 >= 0)
                        v65 = 2 * *v54 + 8;
                      else
                        v65 = v52 + 24;
                      v66 = (v64 >> 3) & 0x3FFFFFF8;
                      v67 = 1 << v64;
                      v68 = *(_QWORD *)(v65 + v66);
                      *(_QWORD *)(v65 + v66) = v68 | v67;
                      if ((v68 & v67) == 0)
                        ++v63;
                      *(_DWORD *)(v52 + 32) = v63;
                      if (!v62)
                      {
                        v69 = *(unsigned __int16 *)(v52 + 16);
                        if (v69 < v53)
                        {
                          v70 = *(_QWORD *)(v52 + 40) + 16 * v53;
                          v71 = *(unsigned int *)(v70 + 12);
                          if ((_DWORD)v71 == *(_DWORD *)(v70 + 8))
                          {
                            result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v52 + 40) + 16 * v53, v71 + 1, (unint64_t)&v84);
                            v4 = v74;
                            v3 = a2;
                            v71 = *(unsigned int *)(v70 + 12);
                            *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = *(_WORD *)result;
                          }
                          else
                          {
                            *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = v51;
                          }
                          *(_DWORD *)(v70 + 12) = v71 + 1;
                          ++*(_WORD *)(*(_QWORD *)(v52 + 56) + 2 * v53);
                          LODWORD(v51) = v84;
                          v69 = *(unsigned __int16 *)(v52 + 16);
                        }
                        if (v69 < v51)
                        {
                          v72 = *(_QWORD *)(v52 + 40) + 16 * v51;
                          v73 = *(unsigned int *)(v72 + 12);
                          if ((_DWORD)v73 == *(_DWORD *)(v72 + 8))
                          {
                            result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)&v81);
                            v4 = v74;
                            v3 = a2;
                            v73 = *(unsigned int *)(v72 + 12);
                            *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = *(_WORD *)result;
                          }
                          else
                          {
                            *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = v53;
                          }
                          *(_DWORD *)(v72 + 12) = v73 + 1;
                          ++*(_WORD *)(*(_QWORD *)(v52 + 56) + 2 * v84);
                        }
                      }
                    }
                  }
                }
                ++v44;
                v46 += 32;
              }
              while (v43 != v44);
            }
          }
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD v75[3];
  char v76;
  _QWORD *v77;
  _QWORD **v78;
  void *v79;
  void **v80;
  _QWORD *v81;
  unsigned __int16 v82;

  v4 = *(char *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = ***(uint64_t ****)(result + 16);
  if (v4 == 1)
  {
    if ((a3 & 0xFC) == 4)
    {
      v7 = *v6;
      v74 = v5;
      v76 = 0;
      if (!a4)
      {
        v8 = *(_QWORD *)(v7 + 16);
        v9 = **(_QWORD **)v7;
        v10 = **(_QWORD **)(v7 + 8);
        v75[0] = &v76;
        v75[1] = &v74;
        v75[2] = v8;
        if (v9)
        {
          v77 = v75;
          v78 = &v77;
          if ((*(__int16 *)(v9 + 120) - 446) <= 5)
          {
            v79 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v80 = &v79;
            v81 = &v78;
            result = JSC::B3::Air::Inst::forEachArgCustom(v9, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v79);
          }
          else
          {
            v11 = *(unsigned int *)(v9 + 12);
            if ((_DWORD)v11)
            {
              v12 = 0;
              v13 = (char *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v9 + 120)
                  + ((unint64_t)((v11 - 1) * v11) >> 1);
              v14 = 8;
              do
              {
                if (v12 >= *(unsigned int *)(v9 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805DFA4);
                }
                v15 = v13[v12];
                v16 = (v15 >> 5) - 1;
                if (v16 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805DF9CLL);
                }
                v17 = (char *)(*(_QWORD *)v9 + v14);
                v18 = *v17;
                v19 = *((_DWORD *)v17 + 2);
                result = (uint64_t)v77;
                if (v18 == 1)
                {
                  if ((v15 & 0xC) == 4 && (v15 & 0x10) == 0)
                  {
                    v20 = v77[2];
                    if (((0xFu >> v16) & 1) == 0 || !*(_BYTE *)*v77)
                    {
                      v21 = *(unsigned __int16 *)v77[1];
                      if ((_DWORD)v21 != (unsigned __int16)v19)
                      {
                        v22 = (unsigned __int16)*((_DWORD *)v17 + 2);
                        LOWORD(v79) = *(_WORD *)v77[1];
                        v82 = v19;
                        v23 = (uint64_t *)(v20 + 24);
                        v24 = *(_QWORD *)(v20 + 24);
                        v25 = *(unsigned __int16 *)(v20 + 36);
                        v26 = *(unsigned __int16 *)(v20 + 36) * (unint64_t)v21
                            + (unsigned __int16)v19;
                        if (v24 >= 0)
                          v27 = 2 * v24 + 8;
                        else
                          v27 = v20 + 24;
                        v28 = (v26 >> 3) & 0x3FFFFFF8;
                        v29 = *(_QWORD *)(v27 + v28);
                        v30 = 1 << v26;
                        v31 = v30 & v29;
                        *(_QWORD *)(v27 + v28) = v30 | v29;
                        v32 = *(_DWORD *)(v20 + 32);
                        if ((v30 & v29) == 0)
                          ++v32;
                        v33 = v21 + v25 * (unint64_t)(unsigned __int16)v19;
                        if (*v23 >= 0)
                          v34 = 2 * *v23 + 8;
                        else
                          v34 = v20 + 24;
                        v35 = (v33 >> 3) & 0x3FFFFFF8;
                        v36 = 1 << v33;
                        v37 = *(_QWORD *)(v34 + v35);
                        *(_QWORD *)(v34 + v35) = v37 | v36;
                        if ((v37 & v36) == 0)
                          ++v32;
                        *(_DWORD *)(v20 + 32) = v32;
                        if (!v31)
                        {
                          v38 = *(unsigned __int16 *)(v20 + 16);
                          if (v38 < v21)
                          {
                            v39 = *(_QWORD *)(v20 + 40) + 16 * v21;
                            v40 = *(unsigned int *)(v39 + 12);
                            if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
                            {
                              result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v20 + 40) + 16 * v21, v40 + 1, (unint64_t)&v82);
                              v40 = *(unsigned int *)(v39 + 12);
                              *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = *(_WORD *)result;
                            }
                            else
                            {
                              *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = v19;
                            }
                            *(_DWORD *)(v39 + 12) = v40 + 1;
                            ++*(_WORD *)(*(_QWORD *)(v20 + 56) + 2 * v21);
                            v22 = v82;
                            v38 = *(unsigned __int16 *)(v20 + 16);
                          }
                          if (v38 < v22)
                          {
                            v41 = *(_QWORD *)(v20 + 40) + 16 * v22;
                            v42 = *(unsigned int *)(v41 + 12);
                            if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
                            {
                              result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v42 + 1, (unint64_t)&v79);
                              v42 = *(unsigned int *)(v41 + 12);
                              *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = *(_WORD *)result;
                            }
                            else
                            {
                              *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = v21;
                            }
                            *(_DWORD *)(v41 + 12) = v42 + 1;
                            ++*(_WORD *)(*(_QWORD *)(v20 + 56) + 2 * v82);
                          }
                        }
                      }
                    }
                  }
                }
                else if ((v18 - 12) < 2)
                {
                  if ((v15 & 0xF) != 0xB)
                    LOBYTE(v16) = 3;
                }
                ++v12;
                v14 += 32;
              }
              while (v11 != v12);
            }
          }
        }
        if (v10)
        {
          v77 = v75;
          v78 = &v77;
          if ((*(__int16 *)(v10 + 120) - 446) <= 5)
          {
            v79 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v80 = &v79;
            v81 = &v78;
            return JSC::B3::Air::Inst::forEachArgCustom(v10, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v79);
          }
          else
          {
            v43 = *(unsigned int *)(v10 + 12);
            if ((_DWORD)v43)
            {
              v44 = 0;
              v45 = (char *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v10 + 120)
                  + ((unint64_t)((v43 - 1) * v43) >> 1);
              v46 = 8;
              do
              {
                if (v44 >= *(unsigned int *)(v10 + 12)
                  || (v47 = v45[v44], v48 = (v47 >> 5) - 1, v48 >= 5))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19805DF7CLL);
                }
                v49 = *(_QWORD *)v10 + v46;
                if (*(_BYTE *)v49 == 1 && (v47 & 0xF) - 8 <= 2 && (v47 & 0x10) == 0)
                {
                  v50 = 0xFu >> v48;
                  v51 = *(unsigned __int16 *)(v49 + 8);
                  v52 = v77[2];
                  if ((v50 & 1) == 0 || !*(_BYTE *)*v77)
                  {
                    v53 = *(unsigned __int16 *)v77[1];
                    if ((_DWORD)v53 != (_DWORD)v51)
                    {
                      LOWORD(v79) = *(_WORD *)v77[1];
                      v82 = v51;
                      v54 = (uint64_t *)(v52 + 24);
                      v55 = *(_QWORD *)(v52 + 24);
                      v56 = *(unsigned __int16 *)(v52 + 36);
                      v57 = v51 + *(unsigned __int16 *)(v52 + 36) * (unint64_t)v53;
                      if (v55 >= 0)
                        v58 = 2 * v55 + 8;
                      else
                        v58 = v52 + 24;
                      v59 = (v57 >> 3) & 0x3FFFFFF8;
                      v60 = *(_QWORD *)(v58 + v59);
                      v61 = 1 << v57;
                      v62 = v61 & v60;
                      *(_QWORD *)(v58 + v59) = v61 | v60;
                      v63 = *(_DWORD *)(v52 + 32);
                      if ((v61 & v60) == 0)
                        ++v63;
                      v64 = v53 + v56 * (unint64_t)v51;
                      if (*v54 >= 0)
                        v65 = 2 * *v54 + 8;
                      else
                        v65 = v52 + 24;
                      v66 = (v64 >> 3) & 0x3FFFFFF8;
                      v67 = 1 << v64;
                      v68 = *(_QWORD *)(v65 + v66);
                      *(_QWORD *)(v65 + v66) = v68 | v67;
                      if ((v68 & v67) == 0)
                        ++v63;
                      *(_DWORD *)(v52 + 32) = v63;
                      if (!v62)
                      {
                        v69 = *(unsigned __int16 *)(v52 + 16);
                        if (v69 < v53)
                        {
                          v70 = *(_QWORD *)(v52 + 40) + 16 * v53;
                          v71 = *(unsigned int *)(v70 + 12);
                          if ((_DWORD)v71 == *(_DWORD *)(v70 + 8))
                          {
                            result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v52 + 40) + 16 * v53, v71 + 1, (unint64_t)&v82);
                            v71 = *(unsigned int *)(v70 + 12);
                            *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = *(_WORD *)result;
                          }
                          else
                          {
                            *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = v51;
                          }
                          *(_DWORD *)(v70 + 12) = v71 + 1;
                          ++*(_WORD *)(*(_QWORD *)(v52 + 56) + 2 * v53);
                          LODWORD(v51) = v82;
                          v69 = *(unsigned __int16 *)(v52 + 16);
                        }
                        if (v69 < v51)
                        {
                          v72 = *(_QWORD *)(v52 + 40) + 16 * v51;
                          v73 = *(unsigned int *)(v72 + 12);
                          if ((_DWORD)v73 == *(_DWORD *)(v72 + 8))
                          {
                            result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)&v79);
                            v73 = *(unsigned int *)(v72 + 12);
                            *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = *(_WORD *)result;
                          }
                          else
                          {
                            *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = v53;
                          }
                          *(_DWORD *)(v72 + 12) = v73 + 1;
                          ++*(_WORD *)(*(_QWORD *)(v52 + 56) + 2 * v82);
                        }
                      }
                    }
                  }
                }
                ++v44;
                v46 += 32;
              }
              while (v43 != v44);
            }
          }
        }
      }
    }
  }
  else if ((v4 - 12) < 2)
  {
  }
  return result;
}

uint64_t JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Tmp,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _QWORD v69[3];
  char v70;
  _QWORD *v71;
  _QWORD **v72;
  void *v73;
  void **v74;
  _QWORD *v75;
  unsigned __int16 v76;

  v68 = a2;
  v70 = 0;
  v2 = *(_QWORD *)(result + 16);
  v3 = **(_QWORD **)result;
  v4 = **(_QWORD **)(result + 8);
  v69[0] = &v70;
  v69[1] = &v68;
  v69[2] = v2;
  if (v3)
  {
    v71 = v69;
    v72 = &v71;
    if ((*(__int16 *)(v3 + 120) - 446) <= 5)
    {
      v73 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v74 = &v73;
      v75 = &v72;
      result = JSC::B3::Air::Inst::forEachArgCustom(v3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v73);
    }
    else
    {
      v5 = *(unsigned int *)(v3 + 12);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(v3 + 120) + ((unint64_t)((v5 - 1) * v5) >> 1);
        v8 = 8;
        do
        {
          if (v6 >= *(unsigned int *)(v3 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19805E574);
          }
          v9 = v7[v6];
          v10 = (v9 >> 5) - 1;
          if (v10 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19805E56CLL);
          }
          v11 = (char *)(*(_QWORD *)v3 + v8);
          v12 = *v11;
          v13 = *((_DWORD *)v11 + 2);
          result = (uint64_t)v71;
          if (v12 == 1)
          {
            if ((v9 & 0xC) == 4 && (v9 & 0x10) == 0)
            {
              v14 = v71[2];
              if (((0xFu >> v10) & 1) == 0 || !*(_BYTE *)*v71)
              {
                v15 = *(unsigned __int16 *)v71[1];
                if ((_DWORD)v15 != (unsigned __int16)v13)
                {
                  v16 = (unsigned __int16)*((_DWORD *)v11 + 2);
                  LOWORD(v73) = *(_WORD *)v71[1];
                  v76 = v13;
                  v17 = (uint64_t *)(v14 + 24);
                  v18 = *(_QWORD *)(v14 + 24);
                  v19 = *(unsigned __int16 *)(v14 + 36);
                  v20 = *(unsigned __int16 *)(v14 + 36) * (unint64_t)v15 + (unsigned __int16)v13;
                  if (v18 >= 0)
                    v21 = 2 * v18 + 8;
                  else
                    v21 = v14 + 24;
                  v22 = (v20 >> 3) & 0x3FFFFFF8;
                  v23 = *(_QWORD *)(v21 + v22);
                  v24 = 1 << v20;
                  v25 = v24 & v23;
                  *(_QWORD *)(v21 + v22) = v24 | v23;
                  v26 = *(_DWORD *)(v14 + 32);
                  if ((v24 & v23) == 0)
                    ++v26;
                  v27 = v15 + v19 * (unint64_t)(unsigned __int16)v13;
                  if (*v17 >= 0)
                    v28 = 2 * *v17 + 8;
                  else
                    v28 = v14 + 24;
                  v29 = (v27 >> 3) & 0x3FFFFFF8;
                  v30 = 1 << v27;
                  v31 = *(_QWORD *)(v28 + v29);
                  *(_QWORD *)(v28 + v29) = v31 | v30;
                  if ((v31 & v30) == 0)
                    ++v26;
                  *(_DWORD *)(v14 + 32) = v26;
                  if (!v25)
                  {
                    v32 = *(unsigned __int16 *)(v14 + 16);
                    if (v32 < v15)
                    {
                      v33 = *(_QWORD *)(v14 + 40) + 16 * v15;
                      v34 = *(unsigned int *)(v33 + 12);
                      if ((_DWORD)v34 == *(_DWORD *)(v33 + 8))
                      {
                        result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v14 + 40) + 16 * v15, v34 + 1, (unint64_t)&v76);
                        v34 = *(unsigned int *)(v33 + 12);
                        *(_WORD *)(*(_QWORD *)v33 + 2 * v34) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v33 + 2 * v34) = v13;
                      }
                      *(_DWORD *)(v33 + 12) = v34 + 1;
                      ++*(_WORD *)(*(_QWORD *)(v14 + 56) + 2 * v15);
                      v16 = v76;
                      v32 = *(unsigned __int16 *)(v14 + 16);
                    }
                    if (v32 < v16)
                    {
                      v35 = *(_QWORD *)(v14 + 40) + 16 * v16;
                      v36 = *(unsigned int *)(v35 + 12);
                      if ((_DWORD)v36 == *(_DWORD *)(v35 + 8))
                      {
                        result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v35, v36 + 1, (unint64_t)&v73);
                        v36 = *(unsigned int *)(v35 + 12);
                        *(_WORD *)(*(_QWORD *)v35 + 2 * v36) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v35 + 2 * v36) = v15;
                      }
                      *(_DWORD *)(v35 + 12) = v36 + 1;
                      ++*(_WORD *)(*(_QWORD *)(v14 + 56) + 2 * v76);
                    }
                  }
                }
              }
            }
          }
          else if ((v12 - 12) < 2)
          {
            if ((v9 & 0xF) != 0xB)
              LOBYTE(v10) = 3;
          }
          ++v6;
          v8 += 32;
        }
        while (v5 != v6);
      }
    }
  }
  if (v4)
  {
    v71 = v69;
    v72 = &v71;
    if ((*(__int16 *)(v4 + 120) - 446) <= 5)
    {
      v73 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v74 = &v73;
      v75 = &v72;
      return JSC::B3::Air::Inst::forEachArgCustom(v4, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v73);
    }
    else
    {
      v37 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v37)
      {
        v38 = 0;
        v39 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v4 + 120)
            + ((unint64_t)((v37 - 1) * v37) >> 1);
        v40 = 8;
        do
        {
          if (v38 >= *(unsigned int *)(v4 + 12) || (v41 = v39[v38], v42 = (v41 >> 5) - 1, v42 >= 5))
          {
            __break(0xC471u);
            JUMPOUT(0x19805E54CLL);
          }
          v43 = *(_QWORD *)v4 + v40;
          if (*(_BYTE *)v43 == 1 && (v41 & 0xF) - 8 <= 2 && (v41 & 0x10) == 0)
          {
            v44 = 0xFu >> v42;
            v45 = *(unsigned __int16 *)(v43 + 8);
            v46 = v71[2];
            if ((v44 & 1) == 0 || !*(_BYTE *)*v71)
            {
              v47 = *(unsigned __int16 *)v71[1];
              if ((_DWORD)v47 != (_DWORD)v45)
              {
                LOWORD(v73) = *(_WORD *)v71[1];
                v76 = v45;
                v48 = (uint64_t *)(v46 + 24);
                v49 = *(_QWORD *)(v46 + 24);
                v50 = *(unsigned __int16 *)(v46 + 36);
                v51 = v45 + *(unsigned __int16 *)(v46 + 36) * (unint64_t)v47;
                if (v49 >= 0)
                  v52 = 2 * v49 + 8;
                else
                  v52 = v46 + 24;
                v53 = (v51 >> 3) & 0x3FFFFFF8;
                v54 = *(_QWORD *)(v52 + v53);
                v55 = 1 << v51;
                v56 = v55 & v54;
                *(_QWORD *)(v52 + v53) = v55 | v54;
                v57 = *(_DWORD *)(v46 + 32);
                if ((v55 & v54) == 0)
                  ++v57;
                v58 = v47 + v50 * (unint64_t)v45;
                if (*v48 >= 0)
                  v59 = 2 * *v48 + 8;
                else
                  v59 = v46 + 24;
                v60 = (v58 >> 3) & 0x3FFFFFF8;
                v61 = 1 << v58;
                v62 = *(_QWORD *)(v59 + v60);
                *(_QWORD *)(v59 + v60) = v62 | v61;
                if ((v62 & v61) == 0)
                  ++v57;
                *(_DWORD *)(v46 + 32) = v57;
                if (!v56)
                {
                  v63 = *(unsigned __int16 *)(v46 + 16);
                  if (v63 < v47)
                  {
                    v64 = *(_QWORD *)(v46 + 40) + 16 * v47;
                    v65 = *(unsigned int *)(v64 + 12);
                    if ((_DWORD)v65 == *(_DWORD *)(v64 + 8))
                    {
                      result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v46 + 40) + 16 * v47, v65 + 1, (unint64_t)&v76);
                      v65 = *(unsigned int *)(v64 + 12);
                      *(_WORD *)(*(_QWORD *)v64 + 2 * v65) = *(_WORD *)result;
                    }
                    else
                    {
                      *(_WORD *)(*(_QWORD *)v64 + 2 * v65) = v45;
                    }
                    *(_DWORD *)(v64 + 12) = v65 + 1;
                    ++*(_WORD *)(*(_QWORD *)(v46 + 56) + 2 * v47);
                    LODWORD(v45) = v76;
                    v63 = *(unsigned __int16 *)(v46 + 16);
                  }
                  if (v63 < v45)
                  {
                    v66 = *(_QWORD *)(v46 + 40) + 16 * v45;
                    v67 = *(unsigned int *)(v66 + 12);
                    if ((_DWORD)v67 == *(_DWORD *)(v66 + 8))
                    {
                      result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v66, v67 + 1, (unint64_t)&v73);
                      v67 = *(unsigned int *)(v66 + 12);
                      *(_WORD *)(*(_QWORD *)v66 + 2 * v67) = *(_WORD *)result;
                    }
                    else
                    {
                      *(_WORD *)(*(_QWORD *)v66 + 2 * v67) = v47;
                    }
                    *(_DWORD *)(v66 + 12) = v67 + 1;
                    ++*(_WORD *)(*(_QWORD *)(v46 + 56) + 2 * v76);
                  }
                }
              }
            }
          }
          ++v38;
          v40 += 32;
        }
        while (v37 != v38);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, int a4, unsigned int a5)
{
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int16 v35;
  __int16 v36;

  v5 = *(char *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 16);
  result = ***(_QWORD ***)(a1 + 16);
  if (v5 == 1)
  {
    if ((a3 & 0xFC) == 4 && !a4)
    {
      v8 = *(_QWORD *)(result + 16);
      if (a5 > 3 || !**(_BYTE **)result)
      {
        v9 = **(unsigned __int16 **)(result + 8);
        if ((_DWORD)v9 != (unsigned __int16)v6)
        {
          v10 = (unsigned __int16)v6;
          v36 = **(_WORD **)(result + 8);
          v35 = v6;
          v11 = (uint64_t *)(v8 + 24);
          v12 = *(_QWORD *)(v8 + 24);
          v13 = *(unsigned __int16 *)(v8 + 36);
          v14 = *(unsigned __int16 *)(v8 + 36) * (unint64_t)v9 + (unsigned __int16)v6;
          if (v12 >= 0)
            v15 = 2 * v12 + 8;
          else
            v15 = v8 + 24;
          v16 = (v14 >> 3) & 0x3FFFFFF8;
          v17 = *(_QWORD *)(v15 + v16);
          v18 = 1 << v14;
          v19 = v18 & v17;
          *(_QWORD *)(v15 + v16) = v18 | v17;
          v20 = *(_DWORD *)(v8 + 32);
          if ((v18 & v17) == 0)
            ++v20;
          v21 = v9 + v13 * (unint64_t)(unsigned __int16)v6;
          if (*v11 >= 0)
            v22 = 2 * *v11 + 8;
          else
            v22 = v8 + 24;
          v23 = (v21 >> 3) & 0x3FFFFFF8;
          v24 = 1 << v21;
          v25 = *(_QWORD *)(v22 + v23);
          *(_QWORD *)(v22 + v23) = v25 | v24;
          if ((v25 & v24) == 0)
            ++v20;
          *(_DWORD *)(v8 + 32) = v20;
          if (!v19)
          {
            v26 = *(unsigned __int16 *)(v8 + 16);
            if (v26 < v9)
            {
              v27 = *(_QWORD *)(v8 + 40) + 16 * v9;
              v28 = *(unsigned int *)(v27 + 12);
              if ((_DWORD)v28 == *(_DWORD *)(v27 + 8))
              {
                result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v8 + 40) + 16 * v9, v28 + 1, (unint64_t)&v35);
                v28 = *(unsigned int *)(v27 + 12);
                *(_WORD *)(*(_QWORD *)v27 + 2 * v28) = *(_WORD *)result;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v27 + 2 * v28) = v6;
              }
              v29 = v28 + 1;
              v30 = *(_QWORD *)(v8 + 56);
              v31 = *(_WORD *)(v30 + 2 * v9);
              *(_DWORD *)(v27 + 12) = v29;
              *(_WORD *)(v30 + 2 * v9) = v31 + 1;
              v10 = v35;
              v26 = *(unsigned __int16 *)(v8 + 16);
            }
            if (v26 < v10)
            {
              v32 = *(_QWORD *)(v8 + 40) + 16 * v10;
              v33 = *(unsigned int *)(v32 + 12);
              if ((_DWORD)v33 == *(_DWORD *)(v32 + 8))
              {
                result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v33 + 1, (unint64_t)&v36);
                v33 = *(unsigned int *)(v32 + 12);
                *(_WORD *)(*(_QWORD *)v32 + 2 * v33) = *(_WORD *)result;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v32 + 2 * v33) = v9;
              }
              *(_DWORD *)(v32 + 12) = v33 + 1;
              ++*(_WORD *)(*(_QWORD *)(v8 + 56) + 2 * v35);
            }
          }
        }
      }
    }
  }
  else if ((v5 - 12) < 2)
  {
    if (a3 == 11)
      v34 = a5;
    else
      v34 = 3;
  }
  return result;
}

uint64_t JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator() const(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator() const(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, unsigned __int16 a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  __int16 v30;

  v3 = *(_QWORD *)(result + 16);
  if (a3 > 3 || !**(_BYTE **)result)
  {
    v4 = **(unsigned __int16 **)(result + 8);
    if ((_DWORD)v4 != a2)
    {
      v5 = a2;
      v30 = **(_WORD **)(result + 8);
      v6 = (uint64_t *)(v3 + 24);
      v7 = *(_QWORD *)(v3 + 24);
      v29 = a2;
      v8 = *(unsigned __int16 *)(v3 + 36);
      v9 = a2 + *(unsigned __int16 *)(v3 + 36) * (unint64_t)v4;
      if (v7 >= 0)
        v10 = 2 * v7 + 8;
      else
        v10 = v3 + 24;
      v11 = (v9 >> 3) & 0x3FFFFFF8;
      v12 = *(_QWORD *)(v10 + v11);
      v13 = 1 << v9;
      v14 = v13 & v12;
      *(_QWORD *)(v10 + v11) = v13 | v12;
      v15 = *(_DWORD *)(v3 + 32);
      if ((v13 & v12) == 0)
        ++v15;
      v16 = v4 + v8 * (unint64_t)a2;
      if (*v6 >= 0)
        v17 = 2 * *v6 + 8;
      else
        v17 = v3 + 24;
      v18 = (v16 >> 3) & 0x3FFFFFF8;
      v19 = 1 << v16;
      v20 = *(_QWORD *)(v17 + v18);
      *(_QWORD *)(v17 + v18) = v20 | v19;
      if ((v20 & v19) == 0)
        ++v15;
      *(_DWORD *)(v3 + 32) = v15;
      if (!v14)
      {
        v21 = *(unsigned __int16 *)(v3 + 16);
        if (v21 < v4)
        {
          v22 = *(_QWORD *)(v3 + 40) + 16 * v4;
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23 == *(_DWORD *)(v22 + 8))
          {
            result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v3 + 40) + 16 * v4, v23 + 1, (unint64_t)&v29);
            v23 = *(unsigned int *)(v22 + 12);
            *(_WORD *)(*(_QWORD *)v22 + 2 * v23) = *(_WORD *)result;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v22 + 2 * v23) = a2;
          }
          v24 = v23 + 1;
          v25 = *(_QWORD *)(v3 + 56);
          v26 = *(_WORD *)(v25 + 2 * v4);
          *(_DWORD *)(v22 + 12) = v24;
          *(_WORD *)(v25 + 2 * v4) = v26 + 1;
          v5 = v29;
          v21 = *(unsigned __int16 *)(v3 + 16);
        }
        if (v21 < v5)
        {
          v27 = *(_QWORD *)(v3 + 40) + 16 * v5;
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28 == *(_DWORD *)(v27 + 8))
          {
            result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, v28 + 1, (unint64_t)&v30);
            v28 = *(unsigned int *)(v27 + 12);
            *(_WORD *)(*(_QWORD *)v27 + 2 * v28) = *(_WORD *)result;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v27 + 2 * v28) = v4;
          }
          *(_DWORD *)(v27 + 12) = v28 + 1;
          ++*(_WORD *)(*(_QWORD *)(v3 + 56) + 2 * v29);
        }
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  __int16 v33;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !a4)
  {
    v5 = *(unsigned __int16 *)(a2 + 16);
    v6 = ***(_QWORD ***)(result + 16);
    v7 = *(_QWORD *)(v6 + 16);
    if (a5 > 3 || !**(_BYTE **)v6)
    {
      v8 = **(unsigned __int16 **)(v6 + 8);
      if ((_DWORD)v8 != (_DWORD)v5)
      {
        v33 = **(_WORD **)(v6 + 8);
        v9 = (uint64_t *)(v7 + 24);
        v10 = *(_QWORD *)(v7 + 24);
        v32 = v5;
        v11 = *(unsigned __int16 *)(v7 + 36);
        v12 = v5 + *(unsigned __int16 *)(v7 + 36) * (unint64_t)v8;
        if (v10 >= 0)
          v13 = 2 * v10 + 8;
        else
          v13 = v7 + 24;
        v14 = (v12 >> 3) & 0x3FFFFFF8;
        v15 = *(_QWORD *)(v13 + v14);
        v16 = 1 << v12;
        v17 = v16 & v15;
        *(_QWORD *)(v13 + v14) = v16 | v15;
        v18 = *(_DWORD *)(v7 + 32);
        if ((v16 & v15) == 0)
          ++v18;
        v19 = v8 + v11 * (unint64_t)v5;
        if (*v9 >= 0)
          v20 = 2 * *v9 + 8;
        else
          v20 = v7 + 24;
        v21 = (v19 >> 3) & 0x3FFFFFF8;
        v22 = 1 << v19;
        v23 = *(_QWORD *)(v20 + v21);
        *(_QWORD *)(v20 + v21) = v23 | v22;
        if ((v23 & v22) == 0)
          ++v18;
        *(_DWORD *)(v7 + 32) = v18;
        if (!v17)
        {
          v24 = *(unsigned __int16 *)(v7 + 16);
          if (v24 < v8)
          {
            v25 = *(_QWORD *)(v7 + 40) + 16 * v8;
            v26 = *(unsigned int *)(v25 + 12);
            if ((_DWORD)v26 == *(_DWORD *)(v25 + 8))
            {
              result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v7 + 40) + 16 * v8, v26 + 1, (unint64_t)&v32);
              v26 = *(unsigned int *)(v25 + 12);
              *(_WORD *)(*(_QWORD *)v25 + 2 * v26) = *(_WORD *)result;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v25 + 2 * v26) = v5;
            }
            v27 = v26 + 1;
            v28 = *(_QWORD *)(v7 + 56);
            v29 = *(_WORD *)(v28 + 2 * v8);
            *(_DWORD *)(v25 + 12) = v27;
            *(_WORD *)(v28 + 2 * v8) = v29 + 1;
            LODWORD(v5) = v32;
            v24 = *(unsigned __int16 *)(v7 + 16);
          }
          if (v24 < v5)
          {
            v30 = *(_QWORD *)(v7 + 40) + 16 * v5;
            v31 = *(unsigned int *)(v30 + 12);
            if ((_DWORD)v31 == *(_DWORD *)(v30 + 8))
            {
              result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v33);
              v31 = *(unsigned int *)(v30 + 12);
              *(_WORD *)(*(_QWORD *)v30 + 2 * v31) = *(_WORD *)result;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v30 + 2 * v31) = v8;
            }
            *(_DWORD *)(v30 + 12) = v31 + 1;
            ++*(_WORD *)(*(_QWORD *)(v7 + 56) + 2 * v32);
          }
        }
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t i;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD v72[3];
  char v73;
  _QWORD *v74;
  _QWORD **v75;
  void *v76;
  void **v77;
  _QWORD *v78;
  unsigned __int16 v79;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v71 = *(_DWORD *)(a2 + 16);
    v73 = 0;
    if (!a4)
    {
      v5 = *(_QWORD *)(v4 + 16);
      v6 = **(_QWORD **)v4;
      v7 = **(_QWORD **)(v4 + 8);
      v72[0] = &v73;
      v72[1] = &v71;
      v72[2] = v5;
      if (v6)
      {
        v74 = v72;
        v75 = &v74;
        if ((*(__int16 *)(v6 + 120) - 446) <= 5)
        {
          v76 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
          v77 = &v76;
          v78 = &v75;
          result = JSC::B3::Air::Inst::forEachArgCustom(v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v76);
        }
        else
        {
          v8 = *(unsigned int *)(v6 + 12);
          if ((_DWORD)v8)
          {
            v9 = 0;
            v10 = (char *)&JSC::B3::Air::g_formTable
                + 21 * *(__int16 *)(v6 + 120)
                + ((unint64_t)((v8 - 1) * v8) >> 1);
            v11 = 8;
            while (v9 < *(unsigned int *)(v6 + 12))
            {
              v12 = v10[v9];
              v13 = (v12 >> 5) - 1;
              if (v13 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19805F120);
              }
              v14 = (char *)(*(_QWORD *)v6 + v11);
              v15 = *v14;
              v16 = *((_DWORD *)v14 + 2);
              result = (uint64_t)v74;
              if (v15 == 1)
              {
                if ((v12 & 0xC) == 4 && (v12 & 0x10) == 0)
                {
                  v17 = v74[2];
                  if (((0xFu >> v13) & 1) == 0 || !*(_BYTE *)*v74)
                  {
                    v18 = *(unsigned __int16 *)v74[1];
                    if ((_DWORD)v18 != (unsigned __int16)v16)
                    {
                      v19 = (unsigned __int16)*((_DWORD *)v14 + 2);
                      LOWORD(v76) = *(_WORD *)v74[1];
                      v79 = v16;
                      v20 = (uint64_t *)(v17 + 24);
                      v21 = *(_QWORD *)(v17 + 24);
                      v22 = *(unsigned __int16 *)(v17 + 36);
                      v23 = *(unsigned __int16 *)(v17 + 36) * (unint64_t)v18
                          + (unsigned __int16)v16;
                      if (v21 >= 0)
                        v24 = 2 * v21 + 8;
                      else
                        v24 = v17 + 24;
                      v25 = (v23 >> 3) & 0x3FFFFFF8;
                      v26 = *(_QWORD *)(v24 + v25);
                      v27 = 1 << v23;
                      v28 = v27 & v26;
                      *(_QWORD *)(v24 + v25) = v27 | v26;
                      v29 = *(_DWORD *)(v17 + 32);
                      if ((v27 & v26) == 0)
                        ++v29;
                      v30 = v18 + v22 * (unint64_t)(unsigned __int16)v16;
                      if (*v20 >= 0)
                        v31 = 2 * *v20 + 8;
                      else
                        v31 = v17 + 24;
                      v32 = (v30 >> 3) & 0x3FFFFFF8;
                      v33 = 1 << v30;
                      v34 = *(_QWORD *)(v31 + v32);
                      *(_QWORD *)(v31 + v32) = v34 | v33;
                      if ((v34 & v33) == 0)
                        ++v29;
                      *(_DWORD *)(v17 + 32) = v29;
                      if (!v28)
                      {
                        v35 = *(unsigned __int16 *)(v17 + 16);
                        if (v35 < v18)
                        {
                          v36 = *(_QWORD *)(v17 + 40) + 16 * v18;
                          v37 = *(unsigned int *)(v36 + 12);
                          if ((_DWORD)v37 == *(_DWORD *)(v36 + 8))
                          {
                            result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v17 + 40) + 16 * v18, v37 + 1, (unint64_t)&v79);
                            v37 = *(unsigned int *)(v36 + 12);
                            *(_WORD *)(*(_QWORD *)v36 + 2 * v37) = *(_WORD *)result;
                          }
                          else
                          {
                            *(_WORD *)(*(_QWORD *)v36 + 2 * v37) = v16;
                          }
                          *(_DWORD *)(v36 + 12) = v37 + 1;
                          ++*(_WORD *)(*(_QWORD *)(v17 + 56) + 2 * v18);
                          v19 = v79;
                          v35 = *(unsigned __int16 *)(v17 + 16);
                        }
                        if (v35 < v19)
                        {
                          v38 = *(_QWORD *)(v17 + 40) + 16 * v19;
                          v39 = *(unsigned int *)(v38 + 12);
                          if ((_DWORD)v39 == *(_DWORD *)(v38 + 8))
                          {
                            result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v39 + 1, (unint64_t)&v76);
                            v39 = *(unsigned int *)(v38 + 12);
                            *(_WORD *)(*(_QWORD *)v38 + 2 * v39) = *(_WORD *)result;
                          }
                          else
                          {
                            *(_WORD *)(*(_QWORD *)v38 + 2 * v39) = v18;
                          }
                          *(_DWORD *)(v38 + 12) = v39 + 1;
                          ++*(_WORD *)(*(_QWORD *)(v17 + 56) + 2 * v79);
                        }
                      }
                    }
                  }
                }
              }
              else if ((v15 - 12) < 2)
              {
                if ((v12 & 0xF) != 0xB)
                  LOBYTE(v13) = 3;
              }
              ++v9;
              v11 += 32;
              if (v8 == v9)
                goto LABEL_38;
            }
LABEL_83:
            __break(0xC471u);
            JUMPOUT(0x19805F100);
          }
        }
      }
LABEL_38:
      if (v7)
      {
        v74 = v72;
        v75 = &v74;
        if ((*(__int16 *)(v7 + 120) - 446) <= 5)
        {
          v76 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
          v77 = &v76;
          v78 = &v75;
          return JSC::B3::Air::Inst::forEachArgCustom(v7, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v76);
        }
        else
        {
          v40 = *(unsigned int *)(v7 + 12);
          if ((_DWORD)v40)
          {
            v41 = 0;
            v42 = (char *)&JSC::B3::Air::g_formTable
                + 21 * *(__int16 *)(v7 + 120)
                + ((unint64_t)((v40 - 1) * v40) >> 1);
            for (i = 8; ; i += 32)
            {
              if (v41 >= *(unsigned int *)(v7 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x19805F128);
              }
              v44 = v42[v41];
              v45 = (v44 >> 5) - 1;
              if (v45 >= 5)
                break;
              v46 = *(_QWORD *)v7 + i;
              if (*(_BYTE *)v46 == 1 && (v44 & 0xF) - 8 <= 2 && (v44 & 0x10) == 0)
              {
                v47 = 0xFu >> v45;
                v48 = *(unsigned __int16 *)(v46 + 8);
                v49 = v74[2];
                if ((v47 & 1) == 0 || !*(_BYTE *)*v74)
                {
                  v50 = *(unsigned __int16 *)v74[1];
                  if ((_DWORD)v50 != (_DWORD)v48)
                  {
                    LOWORD(v76) = *(_WORD *)v74[1];
                    v79 = v48;
                    v51 = (uint64_t *)(v49 + 24);
                    v52 = *(_QWORD *)(v49 + 24);
                    v53 = *(unsigned __int16 *)(v49 + 36);
                    v54 = v48 + *(unsigned __int16 *)(v49 + 36) * (unint64_t)v50;
                    if (v52 >= 0)
                      v55 = 2 * v52 + 8;
                    else
                      v55 = v49 + 24;
                    v56 = (v54 >> 3) & 0x3FFFFFF8;
                    v57 = *(_QWORD *)(v55 + v56);
                    v58 = 1 << v54;
                    v59 = v58 & v57;
                    *(_QWORD *)(v55 + v56) = v58 | v57;
                    v60 = *(_DWORD *)(v49 + 32);
                    if ((v58 & v57) == 0)
                      ++v60;
                    v61 = v50 + v53 * (unint64_t)v48;
                    if (*v51 >= 0)
                      v62 = 2 * *v51 + 8;
                    else
                      v62 = v49 + 24;
                    v63 = (v61 >> 3) & 0x3FFFFFF8;
                    v64 = 1 << v61;
                    v65 = *(_QWORD *)(v62 + v63);
                    *(_QWORD *)(v62 + v63) = v65 | v64;
                    if ((v65 & v64) == 0)
                      ++v60;
                    *(_DWORD *)(v49 + 32) = v60;
                    if (!v59)
                    {
                      v66 = *(unsigned __int16 *)(v49 + 16);
                      if (v66 < v50)
                      {
                        v67 = *(_QWORD *)(v49 + 40) + 16 * v50;
                        v68 = *(unsigned int *)(v67 + 12);
                        if ((_DWORD)v68 == *(_DWORD *)(v67 + 8))
                        {
                          result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v49 + 40) + 16 * v50, v68 + 1, (unint64_t)&v79);
                          v68 = *(unsigned int *)(v67 + 12);
                          *(_WORD *)(*(_QWORD *)v67 + 2 * v68) = *(_WORD *)result;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v67 + 2 * v68) = v48;
                        }
                        *(_DWORD *)(v67 + 12) = v68 + 1;
                        ++*(_WORD *)(*(_QWORD *)(v49 + 56) + 2 * v50);
                        LODWORD(v48) = v79;
                        v66 = *(unsigned __int16 *)(v49 + 16);
                      }
                      if (v66 < v48)
                      {
                        v69 = *(_QWORD *)(v49 + 40) + 16 * v48;
                        v70 = *(unsigned int *)(v69 + 12);
                        if ((_DWORD)v70 == *(_DWORD *)(v69 + 8))
                        {
                          result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v69, v70 + 1, (unint64_t)&v76);
                          v70 = *(unsigned int *)(v69 + 12);
                          *(_WORD *)(*(_QWORD *)v69 + 2 * v70) = *(_WORD *)result;
                        }
                        else
                        {
                          *(_WORD *)(*(_QWORD *)v69 + 2 * v70) = v50;
                        }
                        *(_DWORD *)(v69 + 12) = v70 + 1;
                        ++*(_WORD *)(*(_QWORD *)(v49 + 56) + 2 * v79);
                      }
                    }
                  }
                }
              }
              if (v40 == ++v41)
                return result;
            }
            goto LABEL_83;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 v67;
  __int16 v68;
  unsigned __int16 v69;
  __int16 v70;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v3 = result;
    do
    {
      v4 = __clz(__rbit64(v2));
      if (v4 <= 0x1F)
      {
        v5 = v4 + 1;
        v6 = (*a2)[1];
        v7 = ***a2;
        v8 = *(unsigned int *)(v7 + 60);
        if ((_DWORD)v8)
        {
          v9 = (1 << v4) & *v3;
          v10 = *(unsigned int **)(v7 + 48);
          v11 = 4 * v8;
          do
          {
            v13 = *v10;
            v14 = v6[41];
            if ((int)*v10 < 1)
            {
              v15 = -v13;
              if (v15 >= *(unsigned int *)(v14 + 28))
              {
LABEL_66:
                __break(0xC471u);
                JUMPOUT(0x19805F540);
              }
              v14 += 16;
            }
            else
            {
              v15 = *v10;
              if (v13 >= *(_DWORD *)(v14 + 12))
                goto LABEL_66;
            }
            if ((v9 || *(unsigned __int8 *)(*(_QWORD *)v14 + 2 * v15) >= 4u) && (_DWORD)v5 != (unsigned __int16)v13)
            {
              v68 = v5;
              v67 = v13;
              v16 = *((unsigned __int16 *)v6 + 18);
              v17 = v6[3];
              if (v17 >= 0)
                v18 = 2 * v17 + 8;
              else
                v18 = (uint64_t)(v6 + 3);
              v19 = (((unsigned __int16)v13 + *((unsigned __int16 *)v6 + 18) * (unint64_t)v5) >> 3) & 0x3FFFF8;
              v20 = *(_QWORD *)(v18 + v19);
              v21 = 1 << (v13 + *((_WORD *)v6 + 18) * v5);
              v23 = v21 & v20;
              v22 = (v21 & v20) == 0;
              *(_QWORD *)(v18 + v19) = v21 | v20;
              v24 = *((_DWORD *)v6 + 8);
              if (v22)
                ++v24;
              v25 = v5 + (unsigned __int16)v13 * (unint64_t)v16;
              v26 = v6[3];
              if (v26 >= 0)
                v27 = 2 * v26 + 8;
              else
                v27 = (uint64_t)(v6 + 3);
              v28 = (v25 >> 3) & 0x3FFFFFF8;
              v29 = 1 << v25;
              v30 = *(_QWORD *)(v27 + v28);
              *(_QWORD *)(v27 + v28) = v30 | v29;
              if ((v30 & v29) != 0)
                v31 = v24;
              else
                v31 = v24 + 1;
              *((_DWORD *)v6 + 8) = v31;
              if (!v23)
              {
                v32 = *((unsigned __int16 *)v6 + 8);
                if (v32 < v5)
                {
                  v33 = v6[5] + 16 * v5;
                  v34 = *(unsigned int *)(v33 + 12);
                  if ((_DWORD)v34 == *(_DWORD *)(v33 + 8))
                  {
                    result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6[5] + 16 * v5, v34 + 1, (unint64_t)&v67);
                    v34 = *(unsigned int *)(v33 + 12);
                    *(_WORD *)(*(_QWORD *)v33 + 2 * v34) = *(_WORD *)result;
                  }
                  else
                  {
                    *(_WORD *)(*(_QWORD *)v33 + 2 * v34) = v13;
                  }
                  v13 = v34 + 1;
                  v35 = v6[7];
                  v36 = *(_WORD *)(v35 + 2 * v5);
                  *(_DWORD *)(v33 + 12) = v13;
                  *(_WORD *)(v35 + 2 * v5) = v36 + 1;
                  LOWORD(v13) = v67;
                  v32 = *((unsigned __int16 *)v6 + 8);
                }
                if (v32 < (unsigned __int16)v13)
                {
                  v37 = v6[5] + 16 * (unsigned __int16)v13;
                  v12 = *(unsigned int *)(v37 + 12);
                  if ((_DWORD)v12 == *(_DWORD *)(v37 + 8))
                  {
                    result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v12 + 1, (unint64_t)&v68);
                    v12 = *(unsigned int *)(v37 + 12);
                    *(_WORD *)(*(_QWORD *)v37 + 2 * v12) = *(_WORD *)result;
                  }
                  else
                  {
                    *(_WORD *)(*(_QWORD *)v37 + 2 * v12) = v5;
                  }
                  *(_DWORD *)(v37 + 12) = v12 + 1;
                  ++*(_WORD *)(v6[7] + 2 * v67);
                }
              }
            }
            ++v10;
            v11 -= 4;
          }
          while (v11);
        }
        v38 = *((unsigned int *)v6 + 67);
        if ((_DWORD)v38)
        {
          v39 = (_DWORD *)v6[32];
          v40 = 4 * v38;
          do
          {
            if ((_DWORD)v5 != (unsigned __int16)*v39)
            {
              v41 = (unsigned __int16)*v39;
              v70 = v5;
              v69 = v41;
              v42 = *((unsigned __int16 *)v6 + 18);
              v43 = v41 + *((unsigned __int16 *)v6 + 18) * (unint64_t)v5;
              v44 = v6[3];
              if (v44 >= 0)
                v45 = 2 * v44 + 8;
              else
                v45 = (uint64_t)(v6 + 3);
              v46 = (v43 >> 3) & 0x3FFFF8;
              v47 = *(_QWORD *)(v45 + v46);
              v48 = 1 << v43;
              v49 = v48 & v47;
              v22 = (v48 & v47) == 0;
              *(_QWORD *)(v45 + v46) = v48 | v47;
              v50 = *((_DWORD *)v6 + 8);
              if (v22)
                ++v50;
              v51 = v5 + v42 * (unint64_t)v41;
              v52 = v6[3];
              if (v52 >= 0)
                v53 = 2 * v52 + 8;
              else
                v53 = (uint64_t)(v6 + 3);
              v54 = (v51 >> 3) & 0x3FFFFFF8;
              v55 = 1 << v51;
              v56 = *(_QWORD *)(v53 + v54);
              *(_QWORD *)(v53 + v54) = v56 | v55;
              if ((v56 & v55) != 0)
                v57 = v50;
              else
                v57 = v50 + 1;
              *((_DWORD *)v6 + 8) = v57;
              if (!v49)
              {
                v58 = *((unsigned __int16 *)v6 + 8);
                if (v58 < v5)
                {
                  v59 = v6[5] + 16 * v5;
                  v60 = *(unsigned int *)(v59 + 12);
                  if ((_DWORD)v60 == *(_DWORD *)(v59 + 8))
                  {
                    result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6[5] + 16 * v5, v60 + 1, (unint64_t)&v69);
                    v60 = *(unsigned int *)(v59 + 12);
                    *(_WORD *)(*(_QWORD *)v59 + 2 * v60) = *(_WORD *)result;
                  }
                  else
                  {
                    *(_WORD *)(*(_QWORD *)v59 + 2 * v60) = v41;
                  }
                  v61 = v60 + 1;
                  v62 = v6[7];
                  v63 = *(_WORD *)(v62 + 2 * v5);
                  *(_DWORD *)(v59 + 12) = v61;
                  *(_WORD *)(v62 + 2 * v5) = v63 + 1;
                  LODWORD(v41) = v69;
                  v58 = *((unsigned __int16 *)v6 + 8);
                }
                if (v58 < v41)
                {
                  v64 = v6[5] + 16 * v41;
                  v65 = *(unsigned int *)(v64 + 12);
                  if ((_DWORD)v65 == *(_DWORD *)(v64 + 8))
                  {
                    result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v64, v65 + 1, (unint64_t)&v70);
                    v65 = *(unsigned int *)(v64 + 12);
                    *(_WORD *)(*(_QWORD *)v64 + 2 * v65) = *(_WORD *)result;
                  }
                  else
                  {
                    *(_WORD *)(*(_QWORD *)v64 + 2 * v65) = v5;
                  }
                  *(_DWORD *)(v64 + 12) = v65 + 1;
                  ++*(_WORD *)(v6[7] + 2 * v69);
                }
              }
            }
            ++v39;
            v40 -= 4;
          }
          while (v40);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

unsigned int *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(unsigned int *result, uint64_t a2, char a3, int a4)
{
  int v4;
  int v5;
  uint64_t ***v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 v72;
  __int16 v73;
  unsigned __int16 v74;
  __int16 v75;

  v4 = *(char *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = (uint64_t ***)***((_QWORD ***)result + 2);
  if (v4 == 1)
  {
    if ((a3 & 0xFC) == 4 && !a4)
    {
      v7 = (*v6)[1];
      v8 = ***v6;
      v9 = *(unsigned int *)(v8 + 60);
      if ((_DWORD)v9)
      {
        v10 = *(unsigned int **)(v8 + 48);
        v11 = (unsigned __int16)*(_DWORD *)(a2 + 16);
        v12 = (unsigned __int16)*(_DWORD *)(a2 + 16);
        v13 = 4 * v9;
        do
        {
          v14 = *v10;
          v15 = v7[41];
          if ((int)*v10 < 1)
          {
            if (-v14 >= (unint64_t)*(unsigned int *)(v15 + 28))
            {
LABEL_64:
              __break(0xC471u);
              JUMPOUT(0x19805F774);
            }
          }
          else if (v14 >= *(_DWORD *)(v15 + 12))
          {
            goto LABEL_64;
          }
          if (v11 != (unsigned __int16)v14)
          {
            v16 = (unsigned __int16)*v10;
            v73 = v5;
            v72 = v14;
            v17 = *((unsigned __int16 *)v7 + 18);
            v18 = (unsigned __int16)v14;
            v19 = v12 * (unint64_t)*((unsigned __int16 *)v7 + 18) + (unsigned __int16)v14;
            v20 = v7[3];
            if (v20 >= 0)
              v21 = 2 * v20 + 8;
            else
              v21 = (uint64_t)(v7 + 3);
            v22 = (v19 >> 3) & 0x3FFFFFF8;
            v23 = *(_QWORD *)(v21 + v22);
            v24 = 1 << v19;
            v26 = v24 & v23;
            v25 = (v24 & v23) == 0;
            *(_QWORD *)(v21 + v22) = v24 | v23;
            v27 = *((_DWORD *)v7 + 8);
            if (v25)
              ++v27;
            v28 = v12 + v18 * (unint64_t)v17;
            v29 = v7[3];
            if (v29 >= 0)
              v30 = 2 * v29 + 8;
            else
              v30 = (uint64_t)(v7 + 3);
            v31 = (v28 >> 3) & 0x3FFFFFF8;
            v32 = 1 << v28;
            v33 = *(_QWORD *)(v30 + v31);
            *(_QWORD *)(v30 + v31) = v33 | v32;
            if ((v33 & v32) == 0)
              ++v27;
            *((_DWORD *)v7 + 8) = v27;
            if (!v26)
            {
              v34 = *((unsigned __int16 *)v7 + 8);
              if (v34 < v11)
              {
                v35 = v7[5] + 16 * v12;
                v36 = *(unsigned int *)(v35 + 12);
                if ((_DWORD)v36 == *(_DWORD *)(v35 + 8))
                {
                  result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7[5] + 16 * v12, v36 + 1, (unint64_t)&v72);
                  v36 = *(unsigned int *)(v35 + 12);
                  *(_WORD *)(*(_QWORD *)v35 + 2 * v36) = *(_WORD *)result;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v35 + 2 * v36) = v16;
                }
                v37 = v36 + 1;
                v38 = v7[7];
                v39 = *(_WORD *)(v38 + 2 * v12);
                *(_DWORD *)(v35 + 12) = v37;
                *(_WORD *)(v38 + 2 * v12) = v39 + 1;
                v16 = v72;
                v34 = *((unsigned __int16 *)v7 + 8);
              }
              if (v34 < v16)
              {
                v40 = v7[5] + 16 * v16;
                v41 = *(unsigned int *)(v40 + 12);
                if ((_DWORD)v41 == *(_DWORD *)(v40 + 8))
                {
                  result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v73);
                  v41 = *(unsigned int *)(v40 + 12);
                  *(_WORD *)(*(_QWORD *)v40 + 2 * v41) = *(_WORD *)result;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v40 + 2 * v41) = v5;
                }
                *(_DWORD *)(v40 + 12) = v41 + 1;
                ++*(_WORD *)(v7[7] + 2 * v72);
              }
            }
          }
          ++v10;
          v13 -= 4;
        }
        while (v13);
      }
      v42 = *((unsigned int *)v7 + 67);
      if ((_DWORD)v42)
      {
        v43 = (unsigned __int16 *)v7[32];
        v44 = (unsigned __int16)v5;
        v45 = (unsigned __int16)v5;
        v46 = 4 * v42;
        do
        {
          v47 = *v43;
          if (v44 != (_DWORD)v47)
          {
            v75 = v44;
            v74 = v47;
            v48 = *((unsigned __int16 *)v7 + 18);
            v49 = v47 + v45 * (unint64_t)*((unsigned __int16 *)v7 + 18);
            v50 = v7[3];
            if (v50 >= 0)
              v51 = 2 * v50 + 8;
            else
              v51 = (uint64_t)(v7 + 3);
            v52 = (v49 >> 3) & 0x3FFFFFF8;
            v53 = *(_QWORD *)(v51 + v52);
            v54 = 1 << v49;
            v55 = v54 & v53;
            v25 = (v54 & v53) == 0;
            *(_QWORD *)(v51 + v52) = v54 | v53;
            v56 = *((_DWORD *)v7 + 8);
            if (v25)
              ++v56;
            v57 = v45 + v48 * (unint64_t)v47;
            v58 = v7[3];
            if (v58 >= 0)
              v59 = 2 * v58 + 8;
            else
              v59 = (uint64_t)(v7 + 3);
            v60 = (v57 >> 3) & 0x3FFFFFF8;
            v61 = 1 << v57;
            v62 = *(_QWORD *)(v59 + v60);
            *(_QWORD *)(v59 + v60) = v62 | v61;
            if ((v62 & v61) != 0)
              v63 = v56;
            else
              v63 = v56 + 1;
            *((_DWORD *)v7 + 8) = v63;
            if (!v55)
            {
              v64 = *((unsigned __int16 *)v7 + 8);
              if (v64 < v44)
              {
                v65 = v7[5] + 16 * v45;
                v66 = *(unsigned int *)(v65 + 12);
                if ((_DWORD)v66 == *(_DWORD *)(v65 + 8))
                {
                  result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7[5] + 16 * v45, v66 + 1, (unint64_t)&v74);
                  v66 = *(unsigned int *)(v65 + 12);
                  *(_WORD *)(*(_QWORD *)v65 + 2 * v66) = *(_WORD *)result;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v65 + 2 * v66) = v47;
                }
                v67 = v66 + 1;
                v68 = v7[7];
                v69 = *(_WORD *)(v68 + 2 * v45);
                *(_DWORD *)(v65 + 12) = v67;
                *(_WORD *)(v68 + 2 * v45) = v69 + 1;
                LODWORD(v47) = v74;
                v64 = *((unsigned __int16 *)v7 + 8);
              }
              if (v64 < v47)
              {
                v70 = v7[5] + 16 * v47;
                v71 = *(unsigned int *)(v70 + 12);
                if ((_DWORD)v71 == *(_DWORD *)(v70 + 8))
                {
                  result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v75);
                  v71 = *(unsigned int *)(v70 + 12);
                  *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = *(_WORD *)result;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v70 + 2 * v71) = v44;
                }
                *(_DWORD *)(v70 + 12) = v71 + 1;
                ++*(_WORD *)(v7[7] + 2 * v74);
              }
            }
          }
          v43 += 2;
          v46 -= 4;
        }
        while (v46);
      }
    }
  }
  else if ((v4 - 12) < 2)
  {
  }
  return result;
}

unsigned int *JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Tmp,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(unsigned int *result, unsigned int a2, uint64_t a3, unsigned __int16 a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  __int16 v69;
  unsigned __int16 v70;
  __int16 v71;

  if (a2)
  {
    v7 = result;
    v8 = a4;
    v9 = a4;
    v10 = 4 * a2;
    do
    {
      v11 = *v7;
      v12 = *(_QWORD *)(a3 + 328);
      if ((int)*v7 < 1)
      {
        if (-v11 >= (unint64_t)*(unsigned int *)(v12 + 28))
        {
LABEL_59:
          __break(0xC471u);
          JUMPOUT(0x19805FB70);
        }
      }
      else if (v11 >= *(_DWORD *)(v12 + 12))
      {
        goto LABEL_59;
      }
      if (v8 != (unsigned __int16)v11)
      {
        v13 = (unsigned __int16)*v7;
        v69 = v8;
        v68 = v11;
        v14 = *(unsigned __int16 *)(a3 + 36);
        v15 = (unsigned __int16)v11;
        v16 = v9 * (unint64_t)*(unsigned __int16 *)(a3 + 36) + (unsigned __int16)v11;
        v17 = *(_QWORD *)(a3 + 24);
        if (v17 >= 0)
          v18 = 2 * v17 + 8;
        else
          v18 = a3 + 24;
        v19 = (v16 >> 3) & 0x3FFFFFF8;
        v20 = *(_QWORD *)(v18 + v19);
        v21 = 1 << v16;
        v23 = v21 & v20;
        v22 = (v21 & v20) == 0;
        *(_QWORD *)(v18 + v19) = v21 | v20;
        v24 = *(_DWORD *)(a3 + 32);
        if (v22)
          ++v24;
        v25 = v9 + v15 * (unint64_t)v14;
        v26 = *(_QWORD *)(a3 + 24);
        if (v26 >= 0)
          v27 = 2 * v26 + 8;
        else
          v27 = a3 + 24;
        v28 = (v25 >> 3) & 0x3FFFFFF8;
        v29 = 1 << v25;
        v30 = *(_QWORD *)(v27 + v28);
        *(_QWORD *)(v27 + v28) = v30 | v29;
        if ((v30 & v29) == 0)
          ++v24;
        *(_DWORD *)(a3 + 32) = v24;
        if (!v23)
        {
          v31 = *(unsigned __int16 *)(a3 + 16);
          if (v31 < v8)
          {
            v32 = *(_QWORD *)(a3 + 40) + 16 * v9;
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33 == *(_DWORD *)(v32 + 8))
            {
              result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a3 + 40) + 16 * v9, v33 + 1, (unint64_t)&v68);
              v33 = *(unsigned int *)(v32 + 12);
              *(_WORD *)(*(_QWORD *)v32 + 2 * v33) = *(_WORD *)result;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v32 + 2 * v33) = v13;
            }
            v34 = v33 + 1;
            v35 = *(_QWORD *)(a3 + 56);
            v36 = *(_WORD *)(v35 + 2 * v9);
            *(_DWORD *)(v32 + 12) = v34;
            *(_WORD *)(v35 + 2 * v9) = v36 + 1;
            v13 = v68;
            v31 = *(unsigned __int16 *)(a3 + 16);
          }
          if (v31 < v13)
          {
            v37 = *(_QWORD *)(a3 + 40) + 16 * v13;
            v38 = *(unsigned int *)(v37 + 12);
            if ((_DWORD)v38 == *(_DWORD *)(v37 + 8))
            {
              result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v38 + 1, (unint64_t)&v69);
              v38 = *(unsigned int *)(v37 + 12);
              *(_WORD *)(*(_QWORD *)v37 + 2 * v38) = *(_WORD *)result;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v37 + 2 * v38) = v8;
            }
            *(_DWORD *)(v37 + 12) = v38 + 1;
            ++*(_WORD *)(*(_QWORD *)(a3 + 56) + 2 * v68);
          }
        }
      }
      ++v7;
      v10 -= 4;
    }
    while (v10);
  }
  v39 = *(unsigned int *)(a3 + 268);
  if ((_DWORD)v39)
  {
    v40 = *(unsigned __int16 **)(a3 + 256);
    v41 = a4;
    v42 = 4 * v39;
    do
    {
      v43 = *v40;
      if (v41 != (_DWORD)v43)
      {
        v71 = v41;
        v70 = v43;
        v44 = *(unsigned __int16 *)(a3 + 36);
        v45 = v43 + a4 * (unint64_t)*(unsigned __int16 *)(a3 + 36);
        v46 = *(_QWORD *)(a3 + 24);
        if (v46 >= 0)
          v47 = 2 * v46 + 8;
        else
          v47 = a3 + 24;
        v48 = (v45 >> 3) & 0x3FFFFFF8;
        v49 = *(_QWORD *)(v47 + v48);
        v50 = 1 << v45;
        v51 = v50 & v49;
        v22 = (v50 & v49) == 0;
        *(_QWORD *)(v47 + v48) = v50 | v49;
        v52 = *(_DWORD *)(a3 + 32);
        if (v22)
          ++v52;
        v53 = a4 + v44 * (unint64_t)v43;
        v54 = *(_QWORD *)(a3 + 24);
        if (v54 >= 0)
          v55 = 2 * v54 + 8;
        else
          v55 = a3 + 24;
        v56 = (v53 >> 3) & 0x3FFFFFF8;
        v57 = 1 << v53;
        v58 = *(_QWORD *)(v55 + v56);
        *(_QWORD *)(v55 + v56) = v58 | v57;
        if ((v58 & v57) != 0)
          v59 = v52;
        else
          v59 = v52 + 1;
        *(_DWORD *)(a3 + 32) = v59;
        if (!v51)
        {
          v60 = *(unsigned __int16 *)(a3 + 16);
          if (v60 < v41)
          {
            v61 = *(_QWORD *)(a3 + 40) + 16 * a4;
            v62 = *(unsigned int *)(v61 + 12);
            if ((_DWORD)v62 == *(_DWORD *)(v61 + 8))
            {
              result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a3 + 40) + 16 * a4, v62 + 1, (unint64_t)&v70);
              v62 = *(unsigned int *)(v61 + 12);
              *(_WORD *)(*(_QWORD *)v61 + 2 * v62) = *(_WORD *)result;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v61 + 2 * v62) = v43;
            }
            v63 = v62 + 1;
            v64 = *(_QWORD *)(a3 + 56);
            v65 = *(_WORD *)(v64 + 2 * a4);
            *(_DWORD *)(v61 + 12) = v63;
            *(_WORD *)(v64 + 2 * a4) = v65 + 1;
            LODWORD(v43) = v70;
            v60 = *(unsigned __int16 *)(a3 + 16);
          }
          if (v60 < v43)
          {
            v66 = *(_QWORD *)(a3 + 40) + 16 * v43;
            v67 = *(unsigned int *)(v66 + 12);
            if ((_DWORD)v67 == *(_DWORD *)(v66 + 8))
            {
              result = (unsigned int *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v66, v67 + 1, (unint64_t)&v71);
              v67 = *(unsigned int *)(v66 + 12);
              *(_WORD *)(*(_QWORD *)v66 + 2 * v67) = *(_WORD *)result;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v66 + 2 * v67) = v41;
            }
            *(_DWORD *)(v66 + 12) = v67 + 1;
            ++*(_WORD *)(*(_QWORD *)(a3 + 56) + 2 * v70);
          }
        }
      }
      v40 += 2;
      v42 -= 4;
    }
    while (v42);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  __int16 v69;
  unsigned __int16 v70;
  __int16 v71;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !a4)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v6 = ******(_QWORD ******)(result + 16);
    v7 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int **)(v6 + 48);
      v9 = (unsigned __int16)*(_DWORD *)(a2 + 16);
      v10 = (unsigned __int16)*(_DWORD *)(a2 + 16);
      v11 = 4 * v7;
      do
      {
        v12 = *v8;
        v13 = *(_QWORD *)(v5 + 328);
        if ((int)*v8 < 1)
        {
          if (-v12 >= (unint64_t)*(unsigned int *)(v13 + 28))
          {
LABEL_62:
            __break(0xC471u);
            JUMPOUT(0x19805FF74);
          }
        }
        else if (v12 >= *(_DWORD *)(v13 + 12))
        {
          goto LABEL_62;
        }
        if (v9 != (unsigned __int16)v12)
        {
          v14 = (unsigned __int16)*v8;
          v69 = v4;
          v68 = v12;
          v15 = *(unsigned __int16 *)(v5 + 36);
          v16 = (unsigned __int16)v12;
          v17 = v10 * (unint64_t)*(unsigned __int16 *)(v5 + 36) + (unsigned __int16)v12;
          v18 = *(_QWORD *)(v5 + 24);
          if (v18 >= 0)
            v19 = 2 * v18 + 8;
          else
            v19 = v5 + 24;
          v20 = (v17 >> 3) & 0x3FFFFFF8;
          v21 = *(_QWORD *)(v19 + v20);
          v22 = 1 << v17;
          v24 = v22 & v21;
          v23 = (v22 & v21) == 0;
          *(_QWORD *)(v19 + v20) = v22 | v21;
          v25 = *(_DWORD *)(v5 + 32);
          if (v23)
            ++v25;
          v26 = v10 + v16 * (unint64_t)v15;
          v27 = *(_QWORD *)(v5 + 24);
          if (v27 >= 0)
            v28 = 2 * v27 + 8;
          else
            v28 = v5 + 24;
          v29 = (v26 >> 3) & 0x3FFFFFF8;
          v30 = 1 << v26;
          v31 = *(_QWORD *)(v28 + v29);
          *(_QWORD *)(v28 + v29) = v31 | v30;
          if ((v31 & v30) == 0)
            ++v25;
          *(_DWORD *)(v5 + 32) = v25;
          if (!v24)
          {
            v32 = *(unsigned __int16 *)(v5 + 16);
            if (v32 < v9)
            {
              v33 = *(_QWORD *)(v5 + 40) + 16 * v10;
              v34 = *(unsigned int *)(v33 + 12);
              if ((_DWORD)v34 == *(_DWORD *)(v33 + 8))
              {
                result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v5 + 40) + 16 * v10, v34 + 1, (unint64_t)&v68);
                v34 = *(unsigned int *)(v33 + 12);
                *(_WORD *)(*(_QWORD *)v33 + 2 * v34) = *(_WORD *)result;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v33 + 2 * v34) = v14;
              }
              v35 = v34 + 1;
              v36 = *(_QWORD *)(v5 + 56);
              v37 = *(_WORD *)(v36 + 2 * v10);
              *(_DWORD *)(v33 + 12) = v35;
              *(_WORD *)(v36 + 2 * v10) = v37 + 1;
              v14 = v68;
              v32 = *(unsigned __int16 *)(v5 + 16);
            }
            if (v32 < v14)
            {
              v38 = *(_QWORD *)(v5 + 40) + 16 * v14;
              v39 = *(unsigned int *)(v38 + 12);
              if ((_DWORD)v39 == *(_DWORD *)(v38 + 8))
              {
                result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v39 + 1, (unint64_t)&v69);
                v39 = *(unsigned int *)(v38 + 12);
                *(_WORD *)(*(_QWORD *)v38 + 2 * v39) = *(_WORD *)result;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v38 + 2 * v39) = v4;
              }
              *(_DWORD *)(v38 + 12) = v39 + 1;
              ++*(_WORD *)(*(_QWORD *)(v5 + 56) + 2 * v68);
            }
          }
        }
        ++v8;
        v11 -= 4;
      }
      while (v11);
    }
    v40 = *(unsigned int *)(v5 + 268);
    if ((_DWORD)v40)
    {
      v41 = *(unsigned __int16 **)(v5 + 256);
      v42 = 4 * v40;
      do
      {
        v43 = *v41;
        if ((unsigned __int16)v4 != (_DWORD)v43)
        {
          v71 = v4;
          v70 = v43;
          v44 = *(unsigned __int16 *)(v5 + 36);
          v45 = v43 + (unsigned __int16)v4 * (unint64_t)*(unsigned __int16 *)(v5 + 36);
          v46 = *(_QWORD *)(v5 + 24);
          if (v46 >= 0)
            v47 = 2 * v46 + 8;
          else
            v47 = v5 + 24;
          v48 = (v45 >> 3) & 0x3FFFFFF8;
          v49 = *(_QWORD *)(v47 + v48);
          v50 = 1 << v45;
          v51 = v50 & v49;
          v23 = (v50 & v49) == 0;
          *(_QWORD *)(v47 + v48) = v50 | v49;
          v52 = *(_DWORD *)(v5 + 32);
          if (v23)
            ++v52;
          v53 = (unsigned __int16)v4 + v44 * (unint64_t)v43;
          v54 = *(_QWORD *)(v5 + 24);
          if (v54 >= 0)
            v55 = 2 * v54 + 8;
          else
            v55 = v5 + 24;
          v56 = (v53 >> 3) & 0x3FFFFFF8;
          v57 = 1 << v53;
          v58 = *(_QWORD *)(v55 + v56);
          *(_QWORD *)(v55 + v56) = v58 | v57;
          if ((v58 & v57) != 0)
            v59 = v52;
          else
            v59 = v52 + 1;
          *(_DWORD *)(v5 + 32) = v59;
          if (!v51)
          {
            v60 = *(unsigned __int16 *)(v5 + 16);
            if (v60 < (unsigned __int16)v4)
            {
              v61 = *(_QWORD *)(v5 + 40) + 16 * (unsigned __int16)v4;
              v62 = *(unsigned int *)(v61 + 12);
              if ((_DWORD)v62 == *(_DWORD *)(v61 + 8))
              {
                result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v5 + 40) + 16 * (unsigned __int16)v4, v62 + 1, (unint64_t)&v70);
                v62 = *(unsigned int *)(v61 + 12);
                *(_WORD *)(*(_QWORD *)v61 + 2 * v62) = *(_WORD *)result;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v61 + 2 * v62) = v43;
              }
              v63 = v62 + 1;
              v64 = *(_QWORD *)(v5 + 56);
              v65 = *(_WORD *)(v64 + 2 * (unsigned __int16)v4);
              *(_DWORD *)(v61 + 12) = v63;
              *(_WORD *)(v64 + 2 * (unsigned __int16)v4) = v65 + 1;
              LODWORD(v43) = v70;
              v60 = *(unsigned __int16 *)(v5 + 16);
            }
            if (v60 < v43)
            {
              v66 = *(_QWORD *)(v5 + 40) + 16 * v43;
              v67 = *(unsigned int *)(v66 + 12);
              if ((_DWORD)v67 == *(_DWORD *)(v66 + 8))
              {
                result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v66, v67 + 1, (unint64_t)&v71);
                v67 = *(unsigned int *)(v66 + 12);
                *(_WORD *)(*(_QWORD *)v66 + 2 * v67) = *(_WORD *)result;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v66 + 2 * v67) = v4;
              }
              *(_DWORD *)(v66 + 12) = v67 + 1;
              ++*(_WORD *)(*(_QWORD *)(v5 + 56) + 2 * v70);
            }
          }
        }
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
    }
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)0>::allocate(void)::{lambda(unsigned int &)#1}::operator()(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  unsigned __int16 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _WORD *v74;
  uint64_t v75;
  _WORD *v76;
  uint64_t *v77;
  _DWORD *v78;
  _BYTE v79[24];
  _QWORD v80[3];
  unsigned __int16 v81;
  unsigned __int16 v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*a1 + 80);
  LOWORD(v7) = *(_WORD *)(v6 + 4 * v5);
  v8 = *(_QWORD *)(*a1 + 144);
  do
  {
    v9 = v7;
    v7 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v7);
  }
  while (v7);
  LOWORD(v6) = *(_WORD *)(v6 + 4 * v5 + 2);
  do
  {
    v10 = v6;
    LODWORD(v6) = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v6);
  }
  while ((_DWORD)v6);
  v11 = *(unsigned __int16 *)(v4 + 16);
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v11 >= v10)
    v13 = v9;
  else
    v13 = v10;
  if (v12 == v13)
    return;
  if (v11 >= v13
    || ((v14 = *(_QWORD *)(v4 + 24), v14 >= 0) ? (v16 = 2 * v14 + 8) : (v16 = v4 + 24),
        v15 = *(unsigned __int16 *)(v4 + 36) * (unint64_t)v12 + v13,
        ((*(_QWORD *)(v16 + ((v15 >> 3) & 0x3FFFFFF8)) >> v15) & 1) != 0))
  {
    *a2 = -1;
    return;
  }
  {
    v32 = v13;
    *(_WORD *)(*(_QWORD *)(v4 + 144) + 2 * v13) = v12;
    if (*(_DWORD *)(v4 + 108) <= v13)
    {
      __break(0xC471u);
      goto LABEL_82;
    }
    v33 = *(_QWORD *)(v4 + 96) + 40 * v13;
    v34 = *(unsigned int *)(v33 + 4);
    v35 = (_QWORD *)(v33 + 8);
    if ((_DWORD)v34 != 8)
      v35 = (_QWORD *)*v35;
    v36 = 0;
    v77 = a1;
    v78 = a2;
    while ((_DWORD)v34 != v36)
    {
      v37 = v36;
      v38 = *((_DWORD *)v35 + v36++);
      if (v38 != -1)
      {
        v39 = v37;
        goto LABEL_32;
      }
    }
    v39 = v34;
LABEL_32:
    if ((_DWORD)v34 != (_DWORD)v39)
    {
      v40 = v39 | (v34 << 32);
      while (*(_DWORD *)(v4 + 108) > v12)
      {
        WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v80, (unsigned int *)(*(_QWORD *)(v4 + 96) + 40 * v12), *((_DWORD *)v35 + v40));
        v41 = HIDWORD(v40);
        if ((v39 + 1) > HIDWORD(v40))
          LODWORD(v41) = v39 + 1;
        while (1)
        {
          v42 = (v39 + 1);
          v40 = v40 & 0xFFFFFFFF00000000 | v42;
          if ((_DWORD)v41 - 1 == (_DWORD)v39)
            break;
          LODWORD(v39) = v39 + 1;
          if (*((_DWORD *)v35 + v42) != -1)
            goto LABEL_39;
        }
        LODWORD(v42) = v41;
LABEL_39:
        LODWORD(v39) = v42;
        if ((_DWORD)v34 == (_DWORD)v42)
          goto LABEL_42;
      }
      __break(0xC471u);
LABEL_82:
      JUMPOUT(0x1980605FCLL);
    }
LABEL_42:
    v43 = *(_QWORD *)(v4 + 40) + 16 * v32;
    v44 = *(unsigned int *)(v43 + 12);
    if (!(_DWORD)v44)
    {
LABEL_76:
      *(_BYTE *)(v4 + 209) = 1;
      *(_BYTE *)v77[1] = 1;
      *v78 = -1;
      return;
    }
    v45 = *(_WORD **)v43;
    v46 = (uint64_t *)(v4 + 160);
    v47 = 2 * v44;
    while (1)
    {
      v48 = (unsigned __int16)*v45;
      if (*v46 >= 0)
        v49 = 2 * *v46 + 8;
      else
        v49 = v4 + 160;
      if (((*(_QWORD *)(v49 + ((v48 >> 3) & 0x1FF8)) >> v48) & 1) == 0 && !*(_WORD *)(*(_QWORD *)(v4 + 144) + 2 * v48))
      {
        LOWORD(v80[0]) = *v45;
        LOWORD(v83) = v12;
        v50 = *(unsigned __int16 *)(v4 + 36);
        v51 = v12 + *(unsigned __int16 *)(v4 + 36) * (unint64_t)v48;
        v52 = *(_QWORD *)(v4 + 24);
        if (v52 >= 0)
          v53 = 2 * v52 + 8;
        else
          v53 = v4 + 24;
        v54 = (v51 >> 3) & 0x3FFFFFF8;
        v55 = *(_QWORD *)(v53 + v54);
        v56 = 1 << v51;
        v58 = v56 & v55;
        v57 = (v56 & v55) == 0;
        *(_QWORD *)(v53 + v54) = v56 | v55;
        v59 = *(_DWORD *)(v4 + 32);
        if (v57)
          ++v59;
        v60 = v48 + v50 * (unint64_t)v12;
        v61 = *(_QWORD *)(v4 + 24);
        if (v61 >= 0)
          v62 = 2 * v61 + 8;
        else
          v62 = v4 + 24;
        v63 = (v60 >> 3) & 0x3FFFFFF8;
        v64 = 1 << v60;
        v65 = *(_QWORD *)(v62 + v63);
        *(_QWORD *)(v62 + v63) = v65 | v64;
        if ((v65 & v64) != 0)
          v66 = v59;
        else
          v66 = v59 + 1;
        *(_DWORD *)(v4 + 32) = v66;
        if (v58)
        {
          v67 = -1;
        }
        else
        {
          v68 = v12;
          if (*(unsigned __int16 *)(v4 + 16) < v48)
          {
            v69 = *(_QWORD *)(v4 + 40) + 16 * v48;
            v70 = *(unsigned int *)(v69 + 12);
            if ((_DWORD)v70 == *(_DWORD *)(v69 + 8))
            {
              v74 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v4 + 40) + 16 * v48, v70 + 1, (unint64_t)&v83);
              v75 = *(unsigned int *)(v69 + 12);
              *(_WORD *)(*(_QWORD *)v69 + 2 * v75) = *v74;
              *(_DWORD *)(v69 + 12) = v75 + 1;
              v68 = v83;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v69 + 2 * v70) = v12;
              *(_DWORD *)(v69 + 12) = v70 + 1;
              v68 = v12;
            }
          }
          v71 = *(unsigned __int16 *)(v4 + 16);
          if (v71 < v68)
          {
            v72 = *(_QWORD *)(v4 + 40) + 16 * v68;
            v73 = *(unsigned int *)(v72 + 12);
            if ((_DWORD)v73 == *(_DWORD *)(v72 + 8))
            {
              v76 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)v80);
              v73 = *(unsigned int *)(v72 + 12);
              *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = *v76;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)v72 + 2 * v73) = v48;
            }
            *(_DWORD *)(v72 + 12) = v73 + 1;
            v71 = *(unsigned __int16 *)(v4 + 16);
          }
          if (v71 >= v12)
            goto LABEL_63;
          v67 = 1;
          v48 = v12;
        }
        *(_WORD *)(*(_QWORD *)(v4 + 56) + 2 * v48) += v67;
      }
LABEL_63:
      ++v45;
      v47 -= 2;
      if (!v47)
        goto LABEL_76;
    }
  }
  v82 = v12;
  v81 = v13;
  v21 = *(unsigned __int16 *)(v4 + 16);
  if (v21 < v12)
  {
    v83 = 0x800000000;
    v84 = (WTF *)-1;
    v85 = -1;
    WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v80, (uint64_t *)(v4 + 72), &v82, (uint64_t)&v83, v17, v18, v19, v20);
    WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v79, (unsigned int *)(v80[0] + 8), v13);
    if (HIDWORD(v83) != 8)
      WTF::fastFree((unint64_t)v84, v22, v23, v24, v17, v18, v19, v20);
    v21 = *(unsigned __int16 *)(v4 + 16);
  }
  if (v21 < v13)
  {
    v83 = 0x800000000;
    v84 = (WTF *)-1;
    v85 = -1;
    WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v80, (uint64_t *)(v4 + 72), &v81, (uint64_t)&v83, v17, v18, v19, v20);
    WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v79, (unsigned int *)(v80[0] + 8), v12);
    if (HIDWORD(v83) != 8)
      WTF::fastFree((unint64_t)v84, v25, v26, v27, v28, v29, v30, v31);
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t *v38;
  unsigned int *v39;
  unsigned int v40;

  if (!a4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = *(uint64_t ***)(result + 16);
      v9 = **v8;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = (JSC::B3::Air::Inst *)v8[1];
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198060920);
          }
          v19 = v8[2];
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          if ((result & 1) != 0)
            goto LABEL_17;
          v25 = v8[1];
          v26 = *((__int16 *)v25 + 60) - 90;
          v27 = v26 > 0x12;
          v28 = (1 << v26) & 0x60011;
          if (!v27 && v28 != 0)
          {
            v30 = *((unsigned int *)v25 + 3);
            if (!(_DWORD)v30)
            {
              __break(0xC471u);
              JUMPOUT(0x198060928);
            }
            v31 = *v25;
            v32 = ((unint64_t)(a2 - v31) >> 5) ^ 1;
            if (v32 >= v30)
            {
              __break(0xC471u);
              JUMPOUT(0x198060930);
            }
            if ((_DWORD)v30 == 2)
            {
              v33 = (_BYTE *)(v31 + 32 * v32);
              if (v33[8] == 9 && *(_BYTE *)(*(_QWORD *)v33 + 4) == 1)
              {
LABEL_17:
                if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
                {
                  v20 = v19[5];
                  v21 = *(unsigned int *)v7;
                  v23 = *(_QWORD *)(v20 + 16);
                  v22 = v20 + 16;
                  v24 = 2 * v23 + 8;
                  if (v23 >= 0)
                    v22 = v24;
                  if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0x1FFFFFF8)) >> v21) & 1) != 0)
                    return result;
                }
                else
                {
                  v21 = *(unsigned int *)v7;
                }
                if ((int)v21 < 1)
                {
                  v21 = -(int)v21;
                  if (v21 >= *((unsigned int *)v19 + 9))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198060940);
                  }
                  v34 = v19 + 3;
                }
                else
                {
                  if (v21 >= *((_DWORD *)v19 + 5))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198060938);
                  }
                  v34 = v19 + 1;
                }
                v35 = (unsigned __int8 *)(*v34 + 2 * v21);
                v36 = *v35;
                v37 = v35[1];
                if (v36 > v37)
                  v37 = v36;
                if (a3 - 4 > 6 || v37 <= a5)
                {
                  v38 = v8[3];
                  if (v37 == 2)
                  {
                    v39 = *(unsigned int **)(v9 + 16 * v15 + 8);
                    if (*(_BYTE *)v38)
                    {
LABEL_49:
                      v40 = 4;
LABEL_44:
                      if (*v39 > v40)
                        v40 = *v39;
                      *v39 = v40;
                      *(_BYTE *)(a2 + 24) = 0;
                      *v7 = 0;
                      *(_QWORD *)a2 = v39;
                      *(_WORD *)(a2 + 8) = 521;
                      *(_DWORD *)(a2 + 12) = 0;
                      *(_BYTE *)v8[4] = 1;
                      if ((result & 1) == 0)
                        *(_BYTE *)v8[5] = 1;
                      return result;
                    }
                  }
                  else
                  {
                    *(_BYTE *)v38 = 0;
                    v39 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  }
                  if (a5 != 3)
                  {
                    v40 = 1;
                    switch(a5)
                    {
                      case 0u:
                        goto LABEL_44;
                      case 1u:
                        v40 = 2;
                        goto LABEL_44;
                      case 2u:
                        goto LABEL_49;
                      case 4u:
                        v40 = 16;
                        goto LABEL_44;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x198060918);
                    }
                  }
                  v40 = 8;
                  goto LABEL_44;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned int *v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  void *v46;
  WTF *v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  _BYTE v60[32];
  __int128 v61;
  __int128 v62;
  _BYTE v63[12];
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[3];

  v9 = **(uint64_t ****)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      if ((_DWORD)a4)
        return;
      v10 = *(unsigned int *)(a2 + 16);
      if (v10 > 0xFFFFFFDF || (v10 - 1) < 0x20)
        return;
      v11 = **v9;
      if (!v11)
        goto LABEL_13;
      v12 = a3;
      v13 = *(_DWORD *)(v11 - 8);
      v14 = 9 * ((v10 + ~((_DWORD)v10 << 15)) ^ ((v10 + ~((_DWORD)v10 << 15)) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = v13 & (v15 ^ HIWORD(v15));
      v17 = *(_DWORD *)(v11 + 16 * v16);
      if (v17 == (_DWORD)v10)
        goto LABEL_12;
      v18 = 1;
      break;
    case 6:
    case 7:
    case 8:
      v23 = (unsigned int *)(a2 + 16);
      goto LABEL_20;
    case 0xB:
      v23 = (unsigned int *)(a2 + 20);
LABEL_20:
      v24 = v9;
      v25 = 0;
      goto LABEL_21;
    case 0xC:
    case 0xD:
      v23 = (unsigned int *)(a2 + 16);
      v24 = **(uint64_t ****)(a1 + 16);
      v25 = 6;
LABEL_21:
      return;
    default:
      return;
  }
  while (v17)
  {
    v16 = ((_DWORD)v16 + v18) & v13;
    v17 = *(_DWORD *)(v11 + 16 * v16);
    ++v18;
    if (v17 == (_DWORD)v10)
      goto LABEL_12;
  }
  v16 = *(unsigned int *)(v11 - 4);
LABEL_12:
  if (v16 == *(_DWORD *)(v11 - 4))
  {
LABEL_13:
    v19 = v9[1];
    if (*((_DWORD *)v19 + 57))
    {
      v20 = (unsigned __int16)*(_DWORD *)(a2 + 16);
      v21 = v19[27];
      do
      {
        v22 = v20;
        v20 = *(unsigned __int16 *)(v21 + 2 * v20);
      }
      while ((_DWORD)v20);
      if ((_DWORD)v10 != v22)
      {
        *(_DWORD *)(a2 + 16) = v22;
        *(_BYTE *)v9[2] = 1;
      }
    }
  }
  else
  {
    v26 = v9[3];
    if ((int)v10 < 1)
    {
      v10 = -(int)v10;
      if (v10 >= *((unsigned int *)v26 + 9))
      {
        __break(0xC471u);
        JUMPOUT(0x198060E48);
      }
      v27 = v26 + 3;
    }
    else
    {
      if (v10 >= *((_DWORD *)v26 + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x198060E40);
      }
      v27 = v26 + 1;
    }
    v28 = (unsigned __int8 *)(*v27 + 2 * v10);
    v29 = *v28;
    v30 = v28[1];
    if (v29 > v30)
      v30 = v29;
    v31 = v30 >= 3;
    if (v30 == 3)
      v32 = 8;
    else
      v32 = 16;
    if (!v31)
      v32 = 4;
    if (v32 == 8)
    {
      v33 = 90;
    }
    else if (v32 == 4)
    {
      v33 = 94;
    }
    else
    {
      v33 = 113;
    }
    v34 = *v26;
    v35 = *(_DWORD *)(*v26 + 176);
    *(_DWORD *)(v34 + 176) = v35 + 1;
    v36 = (v35 + 33);
    *(_DWORD *)(a2 + 16) = v36;
    v37 = v9[4];
    v38 = *v37;
    if (*v37 < 0)
      v39 = 63;
    else
      v39 = *(_QWORD *)(2 * v38);
    if (v39 <= v36)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v9[4], v36 + 1, 0);
      v38 = *v37;
    }
    if (v38 >= 0)
      v40 = 2 * v38 + 8;
    else
      v40 = (uint64_t)v37;
    *(_QWORD *)(v40 + ((v36 >> 3) & 0x1FFFFFF8)) |= 1 << v36;
    if (v12 != 10)
    {
      v41 = *(_QWORD *)(v11 + 16 * v16 + 8);
      if (v12 > 0xB || ((1 << v12) & 0xB30) == 0)
      {
        v42 = (uint64_t)v9[5];
        v43 = *(unsigned int *)v9[6];
        v44 = v9[7];
        v45 = *(_DWORD *)(a2 + 16);
        *(_QWORD *)v60 = *(_QWORD *)(v11 + 16 * v16 + 8);
        *(_WORD *)&v60[8] = 521;
        *(_QWORD *)&v60[12] = 0;
        *(_QWORD *)&v60[17] = 0;
        *(_QWORD *)&v61 = 0;
        WORD4(v61) = 513;
        HIDWORD(v61) = 1;
        *(_QWORD *)&v62 = v45;
        BYTE8(v62) = 0;
        v67 = *(_OWORD *)v60;
        v68 = *(_OWORD *)&v60[16];
        v69 = v61;
        *(_QWORD *)v63 = v44[14];
        *(_DWORD *)&v63[8] = v33;
        v64 = v43;
        v65 = (WTF *)&v67;
        v70 = v62;
        v66 = 0x200000003;
        v71[0] = *(_QWORD *)v63;
        *(_DWORD *)((char *)v71 + 7) = *(_DWORD *)&v63[7];
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v42, (unint64_t)&v64, a3, a4, a5, a6, a7, a8);
        v47 = v65;
        if (&v67 != (__int128 *)v65)
        {
          if (v65)
          {
            v65 = 0;
            LODWORD(v66) = 0;
            WTF::fastFree((unint64_t)v47, v46, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      if (v12 - 4 <= 6)
      {
        v48 = (uint64_t)v9[5];
        v49 = *(_DWORD *)v9[6];
        v50 = v9[7];
        v51 = *(_DWORD *)(a2 + 16);
        *(_QWORD *)&v62 = 0;
        BYTE8(v62) = 0;
        *(_QWORD *)v60 = 0;
        *(_WORD *)&v60[8] = 513;
        *(_DWORD *)&v60[12] = 1;
        *(_QWORD *)&v60[16] = v51;
        v60[24] = 0;
        *(_QWORD *)&v61 = v41;
        WORD4(v61) = 521;
        HIDWORD(v61) = 0;
        v67 = *(_OWORD *)v60;
        v68 = *(_OWORD *)&v60[16];
        v69 = v61;
        *(_QWORD *)v63 = v50[14];
        *(_DWORD *)&v63[8] = v33;
        v64 = (v49 + 1);
        v65 = (WTF *)&v67;
        v70 = v62;
        v66 = 0x200000003;
        v71[0] = *(_QWORD *)v63;
        *(_DWORD *)((char *)v71 + 7) = *(_DWORD *)&v63[7];
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v48, (unint64_t)&v64, a3, a4, a5, a6, a7, a8);
        v59 = v65;
        if (&v67 != (__int128 *)v65)
        {
          if (v65)
          {
            v65 = 0;
            LODWORD(v66) = 0;
            WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
          }
        }
      }
    }
  }
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  _BYTE v58[12];
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];

  v8 = *a2;
  if (v8 <= 0xFFFFFFDF && (v8 - 1) >= 0x20)
  {
    v11 = **a1;
    if (!v11)
      goto LABEL_11;
    v12 = a3;
    v13 = *(_DWORD *)(v11 - 8);
    v14 = 9 * ((v8 + ~((_DWORD)v8 << 15)) ^ ((v8 + ~((_DWORD)v8 << 15)) >> 10));
    v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
    v16 = v13 & (v15 ^ HIWORD(v15));
    v17 = *(_DWORD *)(v11 + 16 * v16);
    if (v17 != (_DWORD)v8)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v13;
        v17 = *(_DWORD *)(v11 + 16 * v16);
        ++v18;
        if (v17 == (_DWORD)v8)
          goto LABEL_10;
      }
      v16 = *(unsigned int *)(v11 - 4);
    }
LABEL_10:
    if (v16 != *(_DWORD *)(v11 - 4))
    {
      v23 = a1[3];
      if ((int)v8 < 1)
      {
        v8 = -(int)v8;
        if (v8 >= *((unsigned int *)v23 + 9))
        {
          __break(0xC471u);
          JUMPOUT(0x1980612D0);
        }
        v24 = v23 + 3;
      }
      else
      {
        if (v8 >= *((_DWORD *)v23 + 5))
        {
          __break(0xC471u);
          JUMPOUT(0x1980612D8);
        }
        v24 = v23 + 1;
      }
      v25 = (unsigned __int8 *)(*v24 + 2 * v8);
      v26 = *v25;
      v27 = v25[1];
      if (v26 > v27)
        v27 = v26;
      v28 = v27 >= 3;
      if (v27 == 3)
        v29 = 8;
      else
        v29 = 16;
      if (!v28)
        v29 = 4;
      if (v29 == 8)
      {
        v30 = 90;
      }
      else if (v29 == 4)
      {
        v30 = 94;
      }
      else
      {
        v30 = 113;
      }
      v31 = *v23;
      v32 = *(_DWORD *)(*v23 + 176);
      *(_DWORD *)(v31 + 176) = v32 + 1;
      v33 = (v32 + 33);
      *a2 = v33;
      v34 = a1[4];
      v35 = *v34;
      if (*v34 < 0)
        v36 = 63;
      else
        v36 = *(_QWORD *)(2 * v35);
      if (v36 <= v33)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1[4], v33 + 1, 0);
        v35 = *v34;
      }
      v37 = 2 * v35 + 8;
      if (v35 < 0)
        v37 = (uint64_t)v34;
      *(_QWORD *)(v37 + ((v33 >> 3) & 0x1FFFFFF8)) |= 1 << v33;
      v38 = *(_QWORD *)(v11 + 16 * v16 + 8);
      if (v12 > 0xB || ((1 << v12) & 0xB30) == 0)
      {
        v39 = (uint64_t)a1[5];
        v40 = *(unsigned int *)a1[6];
        v41 = *a2;
        *(_QWORD *)v55 = v38;
        *(_WORD *)&v55[8] = 521;
        *(_QWORD *)&v55[12] = 0;
        *(_QWORD *)&v55[17] = 0;
        *(_QWORD *)&v56 = 0;
        WORD4(v56) = 513;
        HIDWORD(v56) = 1;
        *(_QWORD *)&v57 = v41;
        BYTE8(v57) = 0;
        v62 = *(_OWORD *)v55;
        v63 = *(_OWORD *)&v55[16];
        v64 = v56;
        *(_QWORD *)v58 = a1[7][14];
        *(_DWORD *)&v58[8] = v30;
        v59 = v40;
        v60 = (WTF *)&v62;
        v65 = v57;
        v61 = 0x200000003;
        v66[0] = *(_QWORD *)v58;
        *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v39, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
        v43 = v60;
        if (&v62 != (__int128 *)v60)
        {
          if (v60)
          {
            v60 = 0;
            LODWORD(v61) = 0;
            WTF::fastFree((unint64_t)v43, v42, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      if (v12 - 4 <= 6)
      {
        v44 = (uint64_t)a1[5];
        v45 = *(_DWORD *)a1[6];
        v46 = *a2;
        *(_QWORD *)&v57 = 0;
        BYTE8(v57) = 0;
        *(_QWORD *)v55 = 0;
        *(_WORD *)&v55[8] = 513;
        *(_DWORD *)&v55[12] = 1;
        *(_QWORD *)&v55[16] = v46;
        v55[24] = 0;
        *(_QWORD *)&v56 = v38;
        WORD4(v56) = 521;
        HIDWORD(v56) = 0;
        v62 = *(_OWORD *)v55;
        v63 = *(_OWORD *)&v55[16];
        v64 = v56;
        *(_QWORD *)v58 = a1[7][14];
        *(_DWORD *)&v58[8] = v30;
        v59 = (v45 + 1);
        v60 = (WTF *)&v62;
        v65 = v57;
        v61 = 0x200000003;
        v66[0] = *(_QWORD *)v58;
        *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v44, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
        v54 = v60;
        if (&v62 != (__int128 *)v60)
        {
          if (v60)
          {
            v60 = 0;
            LODWORD(v61) = 0;
            WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
          }
        }
      }
    }
    else
    {
LABEL_11:
      v19 = a1[1];
      if (*((_DWORD *)v19 + 57))
      {
        v20 = (unsigned __int16)*a2;
        v21 = v19[27];
        do
        {
          v22 = v20;
          v20 = *(unsigned __int16 *)(v21 + 2 * v20);
        }
        while ((_DWORD)v20);
        if ((_DWORD)v8 != v22)
        {
          *a2 = v22;
          *(_BYTE *)a1[2] = 1;
        }
      }
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  char v29;

  v13 = *(_QWORD *)(a2 + 56);
  if (v13)
  {
    v14 = 0;
    do
    {
      v14 |= v13 & -v13;
      v13 &= v13 - 1;
    }
    while (v13);
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      do
      {
        v29 = v15 | 0x80;
        if (v15 <= 0x1Fu)
        {
          v28 = v15 + 1;
          v16 = *(unsigned int *)(a1 + 276);
          if ((_DWORD)v16 == *(_DWORD *)(a1 + 272))
          {
            WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(a1 + 264, (unint64_t)&v28, v7, v8, v9, v10, v11, v12);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v16) = v15 + 1;
            ++*(_DWORD *)(a1 + 276);
          }
          v17 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
          {
            WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Reg&>(a1, (unint64_t)&v29);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a1 + v17) = v29;
            ++*(_DWORD *)(a1 + 12);
          }
        }
        if (v15 > 0x3E)
          break;
        v18 = __clz(__rbit64(v14 >> (v15 + 1)));
        v19 = v18 + v15 + 1;
        if (v19 >= 0x40)
          v15 = 64;
        else
          v15 += v18 + 1;
      }
      while (v19 <= 0x3F);
    }
  }
  WTF::Vector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(a1 + 24, (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 176) + 33), v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::IRC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  *(_OWORD *)(v8 + 340) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(int64x2_t *)(v8 + 360) = vdupq_n_s64(0x8000000000000000);
  if (a4 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 368), a4, 0);
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::initializePrecoloredTmp(uint64_t a1)
{
  unint64_t v2;

  WTF::Vector<JSC::Reg,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(a1 + 120, (WTF *)(*(unsigned __int16 *)(a1 + 16) + 1));
  if (*(_WORD *)(a1 + 16))
  {
    v2 = 1;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v2) = (v2 - 1) & 0x7F;
    while (v2++ < *(unsigned __int16 *)(a1 + 16));
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD **v41;
  _QWORD **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int **v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _QWORD v66[2];
  _BYTE v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;

  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)v67, *(_QWORD *)(a1 + 256));
  v23 = *(_QWORD *)(a1 + 256);
  v24 = *(unsigned int *)(v23 + 108);
  if ((_DWORD)v24)
  {
    v25 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v23 + 96) + 8 * v25))
    {
      if (v24 == ++v25)
        return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v67, v16, v17, v18, v19, v20, v21, v22);
    }
    if ((_DWORD)v24 != (_DWORD)v25)
    {
      LODWORD(v26) = *(_DWORD *)(v23 + 108);
      do
      {
        if (v26 <= v25)
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x198061838);
        }
        v27 = *(unsigned int **)(*(_QWORD *)(v23 + 96) + 8 * v25);
        v66[0] = v67;
        v66[1] = v27;
        v72 = 0;
        v28 = (unsigned int **)(v73 + 32 * *v27);
        v29 = *((unsigned int *)v28 + 3);
        if ((_DWORD)v29)
        {
          v30 = *v28;
          v31 = v69;
          v32 = 4 * v29;
          do
          {
            v33 = *v30;
            v34 = *(unsigned int *)(v31 + 4 * v33);
            v35 = v72;
            if (v72 <= v34 || *(_DWORD *)(v70 + 4 * v34) != (_DWORD)v33)
            {
              v74 = *v30;
              if (v72 == v71)
              {
                v63 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v70, v72 + 1, (unint64_t)&v74);
                *(_DWORD *)(v70 + 4 * v72) = *v63;
                v31 = v69;
              }
              else
              {
                *(_DWORD *)(v70 + 4 * v72) = v33;
              }
              ++v72;
              *(_DWORD *)(v31 + 4 * v33) = v35;
            }
            ++v30;
            v32 -= 4;
          }
          while (v32);
        }
        v36 = v27[5];
        if (!(_DWORD)v36)
          goto LABEL_49;
        do
        {
          v37 = v36 - 1;
          v38 = v27[5];
          if (v38 <= (int)v36 - 1)
            goto LABEL_50;
          v39 = *((_QWORD *)v27 + 1);
          v40 = (_QWORD **)(v39 + ((unint64_t)(v36 - 1) << 7));
          v41 = (_QWORD **)(v39 + (v36 << 7));
          if (v36 >= v38)
            v42 = 0;
          else
            v42 = v41;
          v43 = v68;
          v44 = *(_QWORD *)(v68 + 16 * *v27);
          v45 = v44 + (v36 << 6);
          v46 = *(unsigned int *)(v45 + 44);
          if ((_DWORD)v46)
          {
            v55 = *(unsigned int **)(v45 + 32);
            v56 = v72;
            v57 = 4 * v46;
            v58 = v69;
            v59 = v70;
            do
            {
              v60 = *v55;
              v61 = *(unsigned int *)(v58 + 4 * v60);
              if (v56 > v61 && *(_DWORD *)(v59 + 4 * v61) == (_DWORD)v60)
              {
                v62 = *(unsigned int *)(v59 + 4 * v56 - 4);
                *(_DWORD *)(v59 + 4 * v61) = v62;
                *(_DWORD *)(v58 + 4 * v62) = v61;
                v56 = --v72;
              }
              ++v55;
              v57 -= 4;
            }
            while (v57);
            v44 = *(_QWORD *)(v43 + 16 * *v27);
          }
          v47 = (unsigned int **)(v44 + ((unint64_t)(v36 - 1) << 6));
          v48 = *((unsigned int *)v47 + 3);
          if ((_DWORD)v48)
          {
            v49 = *v47;
            v50 = v69;
            v51 = 4 * v48;
            do
            {
              v52 = *v49;
              v53 = *(unsigned int *)(v50 + 4 * v52);
              v54 = v72;
              if (v72 <= v53 || *(_DWORD *)(v70 + 4 * v53) != (_DWORD)v52)
              {
                v74 = *v49;
                if (v72 == v71)
                {
                  v64 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v70, v72 + 1, (unint64_t)&v74);
                  *(_DWORD *)(v70 + 4 * v72) = *v64;
                  v50 = v69;
                }
                else
                {
                  *(_DWORD *)(v70 + 4 * v72) = v52;
                }
                ++v72;
                *(_DWORD *)(v50 + 4 * v52) = v54;
              }
              ++v49;
              v51 -= 4;
            }
            while (v51);
          }
          v36 = v37;
        }
        while ((_DWORD)v37);
        if (!v27[5])
        {
LABEL_49:
          __break(0xC471u);
          JUMPOUT(0x198061840);
        }
        v25 = (v25 + 1);
        v26 = *(unsigned int *)(v23 + 108);
        if (v26 > v25)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v23 + 96) + 8 * v25))
          {
            if (v26 == ++v25)
            {
              LODWORD(v25) = *(_DWORD *)(v23 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v24 != (_DWORD)v25);
    }
  }
  return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v67, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::AbstractColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  WTF *v11;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v11 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v11;
  if ((_DWORD)v11)
  {
    v13 = (_BYTE *)WTF::fastMalloc(v11);
    *(_DWORD *)(a1 + 8) = (_DWORD)v11;
    *(_QWORD *)a1 = v13;
    v14 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v14)
    {
      v15 = *(char **)a3;
      do
      {
        v16 = *v15++;
        *v13++ = v16;
        --v14;
      }
      while (v14);
    }
  }
  *(_OWORD *)(a1 + 48) = 0u;
  v17 = (_QWORD *)(a1 + 48);
  *(_WORD *)(a1 + 16) = 32;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 164) = a4;
  if (a4)
  {
    if ((a4 & 0x80000000) != 0)
      goto LABEL_44;
    v18 = (void *)WTF::fastMalloc((WTF *)(2 * a4));
    *(_DWORD *)(a1 + 160) = a4;
    *(_QWORD *)(a1 + 152) = v18;
    v19 = *(unsigned int *)(a1 + 164);
    if ((_DWORD)v19)
      bzero(v18, 2 * v19);
  }
  *(_QWORD *)(a1 + 168) = 0x8000000000000000;
  *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  v20 = (_QWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a5;
  *(_QWORD *)(a1 + 248) = a6;
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 4;
  v21 = *(unsigned int *)(a1 + 76);
  if (v21 >= a4)
    goto LABEL_22;
  v22 = *(unsigned int *)(a1 + 72);
  if (v22 >= a4)
    goto LABEL_22;
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= a4)
    v25 = a4;
  else
    v25 = v24;
  if (v25 >> 31)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x198061AFCLL);
  }
  v26 = *(const void **)(a1 + 64);
  v27 = (void *)WTF::fastMalloc((WTF *)(2 * v25));
  *(_DWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 64) = v27;
  memcpy(v27, v26, 2 * v21);
  if (v26)
  {
    if (*(const void **)(a1 + 64) == v26)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v26, v28, v29, v30, v31, v32, v33, v34);
  }
LABEL_22:
  *(_DWORD *)(a1 + 76) = a4;
  v35 = *(unsigned __int16 *)(a1 + 16);
  v36 = *(char **)(a1 + 64);
  memset(v36, 255, 2 * v35 + 2);
  bzero(&v36[2 * v35 + 2], 2 * (a4 - ((_DWORD)v35 + 1)));
  v37 = *(unsigned int *)(a1 + 56);
  if (v37 < a4)
  {
    v38 = v37 + (v37 >> 2);
    if (v38 >= 0x10)
      v39 = v38 + 1;
    else
      v39 = 16;
    if (v39 <= a4)
      v40 = a4;
    else
      v40 = v39;
    WTF::Vector<WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 48, v40);
  }
  if (*v17)
  {
    v41 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v41 != a4)
      bzero((void *)(*v17 + 16 * v41), (16 * a4 - 16 * v41) & 0xFFFFFFFFFFFFFFF0);
  }
  *(_DWORD *)(a1 + 60) = a4;
  WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 104, a4);
  v42 = *(_QWORD *)(a1 + 168);
  if (v42 < 0)
    v43 = 63;
  else
    v43 = *(_QWORD *)(2 * v42);
  if (v43 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 168), a4, 0);
  if ((*v20 & 0x8000000000000000) != 0)
    v44 = 63;
  else
    v44 = *(_QWORD *)(2 * *v20);
  if (v44 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 208), a4, 0);
  return a1;
}

void WTF::Vector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v10 = *(unsigned int *)(a1 + 12);
  if (v10 >= a2)
  {
    WTF::VectorTypeOperations<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>>::destruct((uint64_t *)(*(_QWORD *)a1 + 16 * a2), *(_QWORD *)a1 + 16 * v10, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(_QWORD *)a1;
    if (v11 < a2)
    {
      v13 = v11 + (v11 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= a2)
        v15 = a2;
      else
        v15 = v14;
      if (v15 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198061C34);
      }
      v23 = WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v23;
      if ((_DWORD)v10)
      {
        v27 = 16 * v10;
        v28 = v12;
        do
        {
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::LikelyDenseUnsignedIntegerSet(v23, v28);
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::~LikelyDenseUnsignedIntegerSet(v28, v29, v30, v31, v32, v33, v34, v35);
          v23 += 16;
          v28 += 16;
          v27 -= 16;
        }
        while (v27);
        v23 = *(_QWORD *)a1;
      }
      if (v12)
      {
        if (v23 == v12)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v12, v16, v17, v18, v19, v20, v21, v22);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = v23;
      }
    }
    if (v12)
    {
      v24 = *(unsigned int *)(a1 + 12);
      if (v24 != a2)
      {
        v25 = (_OWORD *)(v12 + 16 * v24);
        v26 = 16 * a2 - 16 * v24;
        do
        {
          *v25++ = xmmword_199150490;
          v26 -= 16;
        }
        while (v26);
      }
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
}

void WTF::VectorTypeOperations<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>>::destruct(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t *v9;
  unint64_t StatusReg;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (a1 != (uint64_t *)a2)
  {
    v8 = a2;
    v9 = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (*((_DWORD *)v9 + 2) == -1)
      {
        if (*v9)
          WTF::fastFree(*v9 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_5;
      }
      v11 = *v9;
      if ((*v9 & 0x8000000000000000) == 0)
      {
        a2 = 2 * v11;
        v12 = *(_QWORD *)(StatusReg + 752);
        if (v12)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v11 >> 26) & 0x3FFFFFFFFCLL)) >> (v11 >> 23)) & 1) != 0)
          {
LABEL_10:
            v13 = *(unsigned int *)(v12 + 8000);
            if (v13 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v12, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v12 + 8 * v13) = a2 | 0x5000000000000;
              *(_DWORD *)(v12 + 8000) = v13 + 1;
            }
            goto LABEL_5;
          }
          v14 = v11 >> 23;
          v15 = (v11 >> 23) - *off_1ECF425F8;
          if (v14 < *off_1ECF425F8 || off_1ECF425F8[1] <= v14)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v15 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v15 & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_10;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v12, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(2 * v11, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_5:
      v9 += 2;
    }
    while (v9 != (uint64_t *)v8);
  }
}

uint64_t WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::~LikelyDenseUnsignedIntegerSet(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  if (*(_DWORD *)(a1 + 8) == -1)
  {
    if (!*(_QWORD *)a1)
      return a1;
    v10 = *(_QWORD *)a1 - 16;
    goto LABEL_5;
  }
  if ((*(_QWORD *)a1 & 0x8000000000000000) == 0)
  {
    v10 = 2 * *(_QWORD *)a1;
LABEL_5:
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::LikelyDenseUnsignedIntegerSet(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  const void *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  if (v4 == -1)
  {
    *(_QWORD *)a1 = 0;
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0x8000000000000000;
    v5 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x8000000000000000) == 0 && v5 >= 2)
    {
      v8 = *(_QWORD *)(2 * v5) + 63;
      v9 = v8 & 0xFFFFFFFFFFFFFFC0;
      v10 = WTF::fastMalloc((WTF *)(((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
      *(_QWORD *)v10 = v9;
      v11 = (_QWORD *)(2 * *(_QWORD *)a2);
      if (*(uint64_t *)a2 >= 0)
        v12 = v11 + 1;
      else
        v12 = (const void *)a2;
      if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
        v13 = 8;
      else
        v13 = (unint64_t)(*v11 + 7) >> 3;
      memcpy((void *)(v10 + 8), v12, v13);
      v5 = v10 >> 1;
      if (*(uint64_t *)a1 >= 2)
        WTF::fastFree(2 * *(_QWORD *)a1, v14, v15, v16, v17, v18, v19, v20);
    }
    *(_QWORD *)a1 = v5;
  }
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::OrderedMoveSet::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD **v25;
  int v26;
  _QWORD *v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _WORD *v65;
  unsigned int v66;
  unsigned int v67;
  _WORD *v68;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned __int16 v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _WORD *v83;
  _WORD *v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned __int16 *v98;
  int v99;
  unsigned __int16 *v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  BOOL v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _WORD *v132;
  unsigned int v133;
  unsigned int v134;
  _WORD *v135;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned __int16 v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _WORD *v150;
  _WORD *v151;
  unsigned __int16 *v152;
  unsigned int v153;
  unsigned __int16 *v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  _QWORD **v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  _BOOL8 v180;
  _BOOL4 v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unsigned int v187;
  _BOOL8 v188;
  _BOOL4 v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  int v214;
  int v215;
  _QWORD v217[3];
  _QWORD **v218;
  _QWORD **v219;
  _QWORD *v220;
  uint64_t *v221;
  uint64_t **v222;
  void *v223;
  void **v224;
  uint64_t ***v225;

  v218 = a3;
  v219 = a2;
  v217[0] = &v219;
  v217[1] = &v218;
  v217[2] = a1;
  v220 = v217;
  if (a2)
  {
    v221 = (uint64_t *)&v220;
    v222 = &v221;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v223 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v224 = &v223;
      v225 = &v222;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v223);
    }
    else
    {
      v11 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a2 + 60)
            + ((unint64_t)((v11 - 1) * v11) >> 1);
        v14 = 1;
        do
        {
          if (v12 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980630DCLL);
          }
          v15 = v13[v12];
          if ((v15 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198063094);
          }
          v16 = (char *)&(*a2)[v14];
          v17 = *v16;
          v18 = *((_DWORD *)v16 + 2);
          if (v17 == 1)
          {
            if ((v15 & 0xC) == 4)
            {
              v214 = (v15 >> 4) & 1;
              v213 = *v221;
              LODWORD(v223) = v18;
              goto LABEL_14;
            }
          }
          else if ((v17 - 12) < 2)
          {
            v213 = *v221;
            LODWORD(v223) = v18;
            v214 = 0;
LABEL_14:
          }
          ++v12;
          v14 += 4;
        }
        while (v11 != v12);
      }
    }
  }
  if (a3)
  {
    v221 = (uint64_t *)&v220;
    v222 = &v221;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v223 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v224 = &v223;
      v225 = &v222;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v223);
    }
    else
    {
      v19 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 1;
        do
        {
          if (v20 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980630D4);
          }
          v23 = v21[v20];
          if ((v23 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198063074);
          }
          v24 = &(*a3)[v22];
          if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
          {
            v171 = *v221;
            LODWORD(v223) = *((_DWORD *)v24 + 2);
          }
          ++v20;
          v22 += 4;
        }
        while (v19 != v20);
      }
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1980630F4);
    }
    v175 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v177 = v176 | v175;
    if (v176 | v175)
    {
      v178 = v175;
      do
      {
        v179 = __clz(__rbit64(v177));
        v180 = ((v178 >> v179) & 1) == 0;
        v181 = v179 > 0x1F;
        if (v179 <= 0x1F)
          v182 = v179 + 1;
        else
          v182 = (char)(31 - v179);
        LODWORD(v223) = v182;
        v177 &= v177 - 1;
      }
      while (v177);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1980630FCLL);
    }
    v183 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v185 = v184 | v183;
    if (v184 | v183)
    {
      v186 = v183;
      do
      {
        v187 = __clz(__rbit64(v185));
        v188 = ((v186 >> v187) & 1) == 0;
        v189 = v187 > 0x1F;
        if (v187 <= 0x1F)
          v190 = v187 + 1;
        else
          v190 = (char)(31 - v187);
        LODWORD(v223) = v190;
        v185 &= v185 - 1;
      }
      while (v185);
    }
  }
  v25 = v219;
  if (!v219)
    goto LABEL_284;
  v26 = *((__int16 *)v219 + 60);
  if ((v26 | 4) != 0x5E)
    goto LABEL_284;
  if (*((_DWORD *)v219 + 3) != 2)
    goto LABEL_284;
  v27 = *v219;
  if (*((_BYTE *)*v219 + 8) != 1 || *((_BYTE *)v27 + 40) != 1)
    goto LABEL_284;
  if (v26 == 94)
  {
    v208 = *(_QWORD *)(a1 + 376);
    if (!v208)
      goto LABEL_284;
    v209 = *((unsigned int *)v27 + 4);
    if ((int)v209 < 1)
    {
      v209 = -(int)v209;
      if (v209 >= *(unsigned int *)(v208 + 28))
      {
LABEL_324:
        __break(0xC471u);
        JUMPOUT(0x198062F90);
      }
      v208 += 16;
    }
    else if (v209 >= *(_DWORD *)(v208 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198063104);
    }
    if (*(unsigned __int8 *)(*(_QWORD *)v208 + 2 * v209 + 1) > 2u)
    {
LABEL_284:
      v168 = v218;
      v169 = *(_QWORD *)a4;
      v170 = (uint64_t *)a1;
      goto LABEL_285;
    }
  }
  v28 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v219 + 60);
  v29 = v28[1];
  if ((v29 >> 5) - 1 >= 5 || (v30 = v28[2], (v30 >> 5) - 1 > 4))
  {
    __break(0xC471u);
    JUMPOUT(0x1980630CCLL);
  }
  v31 = v29 & 0xC;
  v32 = *((_DWORD *)v27 + 4);
  v33 = v31 == 4;
  if (v31 == 4)
    v34 = 0;
  else
    v34 = *((_DWORD *)v27 + 4);
  if (!v33)
    LOWORD(v32) = 0;
  v35 = *((_DWORD *)v27 + 12);
  v36 = v30 & 0xC;
  if (v36 == 4)
    v37 = v34;
  else
    v37 = v35;
  if (v36 == 4)
    v38 = v35;
  else
    v38 = v32;
  v39 = (_QWORD *)(a1 + 88);
  LOWORD(v223) = v37;
  WORD1(v223) = v38;
  v40 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v40 == *(_DWORD *)(a1 + 96))
  else
    *(_DWORD *)(*v39 + 4 * v40) = (_DWORD)v223;
  ++*(_DWORD *)(a1 + 100);
  v41 = *(_DWORD *)(a1 + 316);
  LODWORD(v223) = v41;
  v42 = (_QWORD *)(a1 + 320);
  v43 = *(unsigned int *)(a1 + 332);
  LODWORD(v217[0]) = v43;
  if ((_DWORD)v43 == *(_DWORD *)(a1 + 328))
    *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * *(unsigned int *)(a1 + 332)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v223);
  else
    *(_DWORD *)(*v42 + 4 * v43) = v41;
  v44 = (_QWORD *)(a1 + 304);
  ++*(_DWORD *)(a1 + 332);
  v45 = *(unsigned int *)(a1 + 316);
  v215 = v37;
  if ((_DWORD)v45 == *(_DWORD *)(a1 + 312))
    *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(a1 + 316)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)v217);
  else
    *(_DWORD *)(*v44 + 4 * v45) = v43;
  ++*(_DWORD *)(a1 + 316);
  v46 = *((unsigned int *)v219 + 3);
  if ((_DWORD)v46)
  {
    v47 = 32 * v46;
    v48 = (unsigned int *)(*v219 + 2);
    do
    {
      v50 = *v48;
      v48 += 8;
      v49 = v50;
      if (*(_DWORD *)(a1 + 116) <= v50)
      {
        __break(0xC471u);
        JUMPOUT(0x1980630ECLL);
      }
      WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v223, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v49), v40);
      v47 -= 32;
    }
    while (v47);
  }
  v51 = *(unsigned int *)(*(_QWORD *)a4 + 60);
  v52 = v215;
  if ((_DWORD)v51)
  {
    v53 = *(int **)(*(_QWORD *)a4 + 48);
    v54 = &v53[v51];
    while (1)
    {
      v55 = *v53;
      if (v52 != *v53 && v38 != (unsigned __int16)v55)
        break;
LABEL_85:
      if (++v53 == v54)
        goto LABEL_153;
    }
    v56 = (unsigned __int16)*v53;
    LOWORD(v222) = v38;
    LOWORD(v221) = v55;
    if ((unsigned __int16)v55 >= v38)
      v57 = v38;
    else
      v57 = v56;
    if (v56 <= v38)
      v58 = v38;
    else
      v58 = v56;
    if (*(_DWORD *)(a1 + 36) <= v57)
    {
      __break(0xC471u);
      JUMPOUT(0x1980630ACLL);
    }
    v59 = *(_QWORD *)(a1 + 24);
    v60 = v59 + 16 * v57;
    LOWORD(v217[0]) = v58;
    v62 = (_DWORD *)(v60 + 8);
    v61 = *(_DWORD *)(v60 + 8);
    if (v61 != -1)
    {
      if (v61)
      {
        v63 = v59 + 16 * v57;
        v66 = *(unsigned __int16 *)(v63 + 12);
        v65 = (_WORD *)(v63 + 12);
        v64 = v66;
        v68 = v65 + 1;
        v67 = (unsigned __int16)v65[1];
        if (v66 <= v58 && v67 >= v58)
        {
          v70 = v58 - v64;
          if (*(uint64_t *)v60 >= 0)
            v71 = 2 * *(_QWORD *)v60 + 8;
          else
            v71 = v60;
          v72 = (v70 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v73 = 1 << v70;
          v74 = *(_QWORD *)(v71 + v72);
          *(_QWORD *)(v71 + v72) = v74 | v73;
          v75 = v74 & v73;
          if (!v75)
            ++v61;
          *v62 = v61;
          v76 = *(_DWORD *)(a1 + 40);
          if (!v75)
            ++v76;
          *(_DWORD *)(a1 + 40) = v76;
          if (v75)
            goto LABEL_85;
          v77 = v38;
          goto LABEL_88;
        }
        *v62 = v61 + 1;
        if (((unsigned __int16)v58 & 0xFFC0u) >= v64)
          v85 = v64;
        else
          v85 = (unsigned __int16)v58 & 0xFFC0;
        if (v67 <= v58)
          v86 = v58;
        else
          v86 = v67;
        v87 = v86 - v85;
        if (v86 < (int)v85)
          v87 = v86 - v85 + 7;
        if ((v61 + 1) > 8)
          v88 = v61 + 1;
        else
          v88 = 8;
        if (12 * v88 < (v87 >> 3))
        {
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v60);
          WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v223, (uint64_t *)v60, v217);
          *v65 = v85;
          *v68 = v86;
          v52 = v215;
        }
        else
        {
          if (v64 > v58)
          {
            v172 = (int)v64 - (int)v85;
            if ((v172 & 0x3F) != 0)
              goto LABEL_324;
            if ((*(_QWORD *)v60 & 0x8000000000000000) != 0)
              v173 = 63;
            else
              v173 = *(_QWORD *)(2 * *(_QWORD *)v60);
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v60, v173 + v172, v172 >> 6);
            *v65 = v85;
            v64 = v85;
          }
          v89 = *(_QWORD *)v60;
          v52 = v215;
          if ((*(_QWORD *)v60 & 0x8000000000000000) != 0)
            v90 = 63;
          else
            v90 = *(_QWORD *)(2 * v89);
          v91 = v58 - v64;
          v25 = (_QWORD **)(v58 - v64 + 1);
          if (v90 < (unint64_t)v25)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v60, (unint64_t)v25, 0);
            v89 = *(_QWORD *)v60;
          }
          v92 = 2 * v89 + 8;
          if (v89 < 0)
            v92 = v60;
          *(_QWORD *)(v92 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v91;
          *v68 = v86;
        }
      }
      else
      {
        v114 = v59 + 16 * v57;
        *(_WORD *)(v114 + 12) = v58 & 0xFFC0;
        *(_WORD *)(v114 + 14) = v58;
        *v62 = 1;
        v115 = *(_QWORD *)v60;
        if ((*(_QWORD *)v60 & 0x8000000000000000) != 0)
          v116 = 63;
        else
          v116 = *(_QWORD *)(2 * v115);
        v117 = v58 - ((unsigned __int16)v58 & 0xFFC0);
        v25 = (_QWORD **)(v117 + 1);
        if (v116 < v117 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v60, (unint64_t)v25, 0);
          v115 = *(_QWORD *)v60;
        }
        if (v115 >= 0)
          v118 = 2 * v115 + 8;
        else
          v118 = v60;
        *(_QWORD *)(v118 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
      }
LABEL_118:
      ++*(_DWORD *)(a1 + 40);
      v77 = (unsigned __int16)v222;
LABEL_88:
      v78 = *(unsigned __int16 *)(a1 + 16);
      if (v78 < v77)
      {
        v79 = *(_QWORD *)(a1 + 48) + 16 * v77;
        v80 = *(unsigned int *)(v79 + 12);
        if ((_DWORD)v80 == *(_DWORD *)(v79 + 8))
        {
          v83 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v77, v80 + 1, (unint64_t)&v221);
          v80 = *(unsigned int *)(v79 + 12);
          *(_WORD *)(*(_QWORD *)v79 + 2 * v80) = *v83;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v79 + 2 * v80) = (_WORD)v221;
        }
        *(_DWORD *)(v79 + 12) = v80 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * v77);
        v78 = *(unsigned __int16 *)(a1 + 16);
      }
      if (v78 < (unsigned __int16)v221)
      {
        v81 = *(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v221;
        v82 = *(unsigned int *)(v81 + 12);
        if ((_DWORD)v82 == *(_DWORD *)(v81 + 8))
        {
          v84 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v221, v82 + 1, (unint64_t)&v222);
          v82 = *(unsigned int *)(v81 + 12);
          *(_WORD *)(*(_QWORD *)v81 + 2 * v82) = *v84;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v81 + 2 * v82) = v77;
        }
        *(_DWORD *)(v81 + 12) = v82 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v221);
      }
      goto LABEL_85;
    }
    v93 = *(_QWORD *)v60;
    if (*(_QWORD *)v60
      || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v59 + 16 * v57), 0), (v93 = *(_QWORD *)v60) != 0))
    {
      v94 = *(_DWORD *)(v93 - 8);
    }
    else
    {
      v94 = 0;
    }
    v95 = 9 * ((~((_DWORD)v58 << 15) + v58) ^ ((~((_DWORD)v58 << 15) + v58) >> 10));
    v96 = (v95 ^ (v95 >> 6)) + ~((v95 ^ (v95 >> 6)) << 11);
    v97 = v94 & (v96 ^ HIWORD(v96));
    v98 = (unsigned __int16 *)(v93 + 2 * v97);
    v99 = *v98;
    if (v99 != 0xFFFF)
    {
      v100 = 0;
      v101 = 1;
      while ((_DWORD)v58 != (unsigned __int16)v99)
      {
        if ((unsigned __int16)v99 == 65534)
          v100 = v98;
        v97 = (v97 + v101) & v94;
        v98 = (unsigned __int16 *)(v93 + 2 * v97);
        v99 = *v98;
        ++v101;
        if (v99 == 0xFFFF)
        {
          if (v100)
          {
            *v100 = -1;
            --*(_DWORD *)(*(_QWORD *)v60 - 16);
            LOWORD(v58) = v217[0];
            v98 = v100;
          }
          goto LABEL_129;
        }
      }
      goto LABEL_85;
    }
LABEL_129:
    *v98 = v58;
    v102 = *(_QWORD *)v60;
    if (*(_QWORD *)v60)
      v103 = *(_DWORD *)(v102 - 12) + 1;
    else
      v103 = 1;
    *(_DWORD *)(v102 - 12) = v103;
    v104 = *(_QWORD *)v60;
    if (*(_QWORD *)v60)
      v105 = *(_DWORD *)(v104 - 12);
    else
      v105 = 0;
    v106 = (*(_DWORD *)(v104 - 16) + v105);
    v107 = *(unsigned int *)(v104 - 4);
    if (v107 > 0x400)
    {
      if (v107 > 2 * v106)
        goto LABEL_135;
    }
    else
    {
      if (3 * v107 > 4 * v106)
      {
LABEL_135:
        v108 = LOWORD(v217[0]);
        v109 = v217[0] & 0xFFC0;
        v110 = v59 + 16 * v57;
        if (v109 >= *(unsigned __int16 *)(v110 + 12))
          v109 = *(unsigned __int16 *)(v110 + 12);
        *(_WORD *)(v110 + 12) = v109;
        if (*(unsigned __int16 *)(v110 + 14) > v108)
          v108 = *(unsigned __int16 *)(v110 + 14);
        *(_WORD *)(v110 + 14) = v108;
        if (v104)
        {
          v111 = *(_DWORD *)(v104 - 4);
          v112 = __OFSUB__(v108, v109);
          v113 = v108 - v109;
          if (v113 < 0 != v112)
            v113 += 7;
          if (2 * (v113 >> 3) < (2 * v111))
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v59 + 16 * v57), (uint64_t)v25, (uint64_t)v98, a4, a5, a6, a7, a8);
        }
        goto LABEL_118;
      }
      if (!(_DWORD)v107)
      {
        v191 = 8;
LABEL_254:
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v59 + 16 * v57), v191, v98);
        v104 = *(_QWORD *)v60;
        goto LABEL_135;
      }
    }
    v191 = (_DWORD)v107 << (6 * *(_DWORD *)(v104 - 12) >= (2 * v107));
    goto LABEL_254;
  }
LABEL_153:
  v119 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v119)
  {
    v120 = *(int **)(a1 + 264);
    v121 = &v120[v119];
    while (1)
    {
      v122 = *v120;
      if (v52 != *v120 && v38 != (unsigned __int16)v122)
        break;
LABEL_179:
      if (++v120 == v121)
        goto LABEL_222;
    }
    v123 = (unsigned __int16)*v120;
    LOWORD(v222) = v38;
    LOWORD(v221) = v122;
    if ((unsigned __int16)v122 >= v38)
      v124 = v38;
    else
      v124 = v123;
    if (v123 <= v38)
      v125 = v38;
    else
      v125 = v123;
    if (*(_DWORD *)(a1 + 36) <= v124)
    {
      __break(0xC471u);
      JUMPOUT(0x1980630E4);
    }
    v126 = *(_QWORD *)(a1 + 24);
    v127 = v126 + 16 * v124;
    LOWORD(v217[0]) = v125;
    v129 = (_DWORD *)(v127 + 8);
    v128 = *(_DWORD *)(v127 + 8);
    if (v128 != -1)
    {
      if (v128)
      {
        v130 = v126 + 16 * v124;
        v133 = *(unsigned __int16 *)(v130 + 12);
        v132 = (_WORD *)(v130 + 12);
        v131 = v133;
        v135 = v132 + 1;
        v134 = (unsigned __int16)v132[1];
        if (v133 <= v125 && v134 >= v125)
        {
          v137 = v125 - v131;
          if (*(uint64_t *)v127 >= 0)
            v138 = 2 * *(_QWORD *)v127 + 8;
          else
            v138 = v127;
          v139 = (v137 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v140 = 1 << v137;
          v141 = *(_QWORD *)(v138 + v139);
          *(_QWORD *)(v138 + v139) = v141 | v140;
          v142 = v141 & v140;
          if (!v142)
            ++v128;
          *v129 = v128;
          v143 = *(_DWORD *)(a1 + 40);
          if (!v142)
            ++v143;
          *(_DWORD *)(a1 + 40) = v143;
          if (v142)
            goto LABEL_179;
          v144 = v38;
          goto LABEL_182;
        }
        *v129 = v128 + 1;
        if (((unsigned __int16)v125 & 0xFFC0u) >= v131)
          v157 = v131;
        else
          v157 = (unsigned __int16)v125 & 0xFFC0;
        if (v134 <= v125)
          v158 = v125;
        else
          v158 = v134;
        v159 = v158 - v157;
        if (v158 < (int)v157)
          v159 = v158 - v157 + 7;
        if ((v128 + 1) > 8)
          v160 = v128 + 1;
        else
          v160 = 8;
        if (12 * v160 < (v159 >> 3))
        {
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v127);
          WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v223, (uint64_t *)v127, v217);
          *v132 = v157;
          *v135 = v158;
          v52 = v215;
        }
        else
        {
          if (v131 > v125)
          {
            v210 = (int)v131 - (int)v157;
            if ((v210 & 0x3F) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198062FF4);
            }
            if ((*(_QWORD *)v127 & 0x8000000000000000) != 0)
              v211 = 63;
            else
              v211 = *(_QWORD *)(2 * *(_QWORD *)v127);
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v127, v211 + v210, v210 >> 6);
            *v132 = v157;
            v131 = v157;
          }
          v161 = *(_QWORD *)v127;
          v52 = v215;
          if ((*(_QWORD *)v127 & 0x8000000000000000) != 0)
            v174 = 63;
          else
            v174 = *(_QWORD *)(2 * v161);
          v162 = v125 - v131;
          v25 = (_QWORD **)(v125 - v131 + 1);
          if (v174 < (unint64_t)v25)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v127, (unint64_t)v25, 0);
            v161 = *(_QWORD *)v127;
          }
          v163 = 2 * v161 + 8;
          if (v161 < 0)
            v163 = v127;
          *(_QWORD *)(v163 + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v162;
          *v135 = v158;
        }
      }
      else
      {
        v203 = v126 + 16 * v124;
        *(_WORD *)(v203 + 12) = v125 & 0xFFC0;
        *(_WORD *)(v203 + 14) = v125;
        *v129 = 1;
        v204 = *(_QWORD *)v127;
        if ((*(_QWORD *)v127 & 0x8000000000000000) != 0)
          v205 = 63;
        else
          v205 = *(_QWORD *)(2 * v204);
        v206 = v125 - ((unsigned __int16)v125 & 0xFFC0);
        v25 = (_QWORD **)(v206 + 1);
        if (v205 < v206 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v127, (unint64_t)v25, 0);
          v204 = *(_QWORD *)v127;
        }
        if (v204 >= 0)
          v207 = 2 * v204 + 8;
        else
          v207 = v127;
        *(_QWORD *)(v207 + ((v206 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v125;
      }
LABEL_217:
      ++*(_DWORD *)(a1 + 40);
      v144 = (unsigned __int16)v222;
LABEL_182:
      v145 = *(unsigned __int16 *)(a1 + 16);
      if (v145 < v144)
      {
        v146 = *(_QWORD *)(a1 + 48) + 16 * v144;
        v147 = *(unsigned int *)(v146 + 12);
        if ((_DWORD)v147 == *(_DWORD *)(v146 + 8))
        {
          v150 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v144, v147 + 1, (unint64_t)&v221);
          v147 = *(unsigned int *)(v146 + 12);
          *(_WORD *)(*(_QWORD *)v146 + 2 * v147) = *v150;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v146 + 2 * v147) = (_WORD)v221;
        }
        *(_DWORD *)(v146 + 12) = v147 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * v144);
        v145 = *(unsigned __int16 *)(a1 + 16);
      }
      if (v145 < (unsigned __int16)v221)
      {
        v148 = *(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v221;
        v149 = *(unsigned int *)(v148 + 12);
        if ((_DWORD)v149 == *(_DWORD *)(v148 + 8))
        {
          v151 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v221, v149 + 1, (unint64_t)&v222);
          v149 = *(unsigned int *)(v148 + 12);
          *(_WORD *)(*(_QWORD *)v148 + 2 * v149) = *v151;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v148 + 2 * v149) = v144;
        }
        *(_DWORD *)(v148 + 12) = v149 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v221);
      }
      goto LABEL_179;
    }
    v164 = *(_QWORD *)v127;
    if (*(_QWORD *)v127
      || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v126 + 16 * v124), 0), (v164 = *(_QWORD *)v127) != 0))
    {
      v165 = *(_DWORD *)(v164 - 8);
    }
    else
    {
      v165 = 0;
    }
    v166 = 9 * ((~((_DWORD)v125 << 15) + v125) ^ ((~((_DWORD)v125 << 15) + v125) >> 10));
    v167 = (v166 ^ (v166 >> 6)) + ~((v166 ^ (v166 >> 6)) << 11);
    v153 = v165 & (v167 ^ HIWORD(v167));
    v154 = (unsigned __int16 *)(v164 + 2 * v153);
    v155 = *v154;
    if (v155 != 0xFFFF)
    {
      v152 = 0;
      v156 = 1;
      while ((_DWORD)v125 != (unsigned __int16)v155)
      {
        if ((unsigned __int16)v155 == 65534)
          v152 = v154;
        v153 = (v153 + v156) & v165;
        v154 = (unsigned __int16 *)(v164 + 2 * v153);
        v155 = *v154;
        ++v156;
        if (v155 == 0xFFFF)
        {
          if (v152)
          {
            *v152 = -1;
            --*(_DWORD *)(*(_QWORD *)v127 - 16);
            LOWORD(v125) = v217[0];
            v154 = v152;
          }
          goto LABEL_257;
        }
      }
      goto LABEL_179;
    }
LABEL_257:
    *v154 = v125;
    v192 = *(_QWORD *)v127;
    if (*(_QWORD *)v127)
      v193 = *(_DWORD *)(v192 - 12) + 1;
    else
      v193 = 1;
    *(_DWORD *)(v192 - 12) = v193;
    v194 = *(_QWORD *)v127;
    if (*(_QWORD *)v127)
      v195 = *(_DWORD *)(v194 - 12);
    else
      v195 = 0;
    v196 = (*(_DWORD *)(v194 - 16) + v195);
    v197 = *(unsigned int *)(v194 - 4);
    if (v197 > 0x400)
    {
      if (v197 > 2 * v196)
        goto LABEL_263;
    }
    else
    {
      if (3 * v197 > 4 * v196)
      {
LABEL_263:
        v198 = LOWORD(v217[0]);
        v199 = v217[0] & 0xFFC0;
        v200 = v126 + 16 * v124;
        if (v199 >= *(unsigned __int16 *)(v200 + 12))
          v199 = *(unsigned __int16 *)(v200 + 12);
        *(_WORD *)(v200 + 12) = v199;
        if (*(unsigned __int16 *)(v200 + 14) > v198)
          v198 = *(unsigned __int16 *)(v200 + 14);
        *(_WORD *)(v200 + 14) = v198;
        if (v194)
        {
          v201 = *(_DWORD *)(v194 - 4);
          v112 = __OFSUB__(v198, v199);
          v202 = v198 - v199;
          if (v202 < 0 != v112)
            v202 += 7;
          if (2 * (v202 >> 3) < (2 * v201))
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v126 + 16 * v124), (uint64_t)v25, (uint64_t)v154, 8, a5, a6, a7, a8);
        }
        goto LABEL_217;
      }
      if (!(_DWORD)v197)
      {
        v212 = 8;
LABEL_300:
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v126 + 16 * v124), v212, v154);
        v194 = *(_QWORD *)v127;
        goto LABEL_263;
      }
    }
    v212 = (_DWORD)v197 << (6 * *(_DWORD *)(v194 - 12) >= (2 * v197));
    goto LABEL_300;
  }
LABEL_222:
  v168 = v218;
  v169 = *(_QWORD *)a4;
  v170 = (uint64_t *)a1;
  v25 = 0;
LABEL_285:
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(uint64_t *a1, _QWORD **a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  uint64_t **v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  _BOOL8 v36;
  _BOOL4 v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  _BOOL8 v48;
  _BOOL4 v49;
  unsigned int v50;
  uint64_t *v51[2];
  uint64_t v52;
  uint64_t **v53;
  uint64_t ***v54;
  uint64_t ****v55;
  void *v56;
  void **v57;
  uint64_t *****v58;

  v51[1] = a1;
  v52 = a4;
  v51[0] = &v52;
  v53 = v51;
  if (a2)
  {
    v54 = &v53;
    v55 = &v54;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v56 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v57 = &v56;
      v58 = &v55;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v56);
    }
    else
    {
      v10 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a2 + 60)
            + ((unint64_t)((v10 - 1) * v10) >> 1);
        v13 = 1;
        while (1)
        {
          if (v11 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980634C4);
          }
          v14 = v12[v11];
          if ((v14 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980634B4);
          }
          v15 = (char *)&(*a2)[v13];
          v16 = *v15;
          v17 = *((_DWORD *)v15 + 2);
          if (v16 != 1)
            break;
          if ((v14 & 0xC) == 4)
          {
            v18 = (v14 >> 4) & 1;
            v19 = *v54;
            LODWORD(v56) = v17;
LABEL_10:
          }
LABEL_12:
          ++v11;
          v13 += 4;
          if (v10 == v11)
            goto LABEL_13;
        }
        if ((v16 - 12) >= 2)
          goto LABEL_12;
        v19 = *v54;
        LODWORD(v56) = v17;
        v18 = 0;
        goto LABEL_10;
      }
    }
  }
LABEL_13:
  if (a3)
  {
    v54 = &v53;
    v55 = &v54;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v56 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v57 = &v56;
      v58 = &v55;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v56);
    }
    else
    {
      v20 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v20 - 1) * v20) >> 1);
        v23 = 1;
        while (1)
        {
          if (v21 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980634BCLL);
          }
          v24 = v22[v21];
          if ((v24 >> 5) - 1 >= 5)
            break;
          v25 = &(*a3)[v23];
          if (*(_BYTE *)v25 == 1 && (v24 & 0xF) - 8 <= 2)
          {
            v26 = *v54;
            LODWORD(v56) = *((_DWORD *)v25 + 2);
          }
          ++v21;
          v23 += 4;
          if (v20 == v21)
            goto LABEL_23;
        }
LABEL_52:
        __break(0xC471u);
        JUMPOUT(0x198063494);
      }
    }
  }
LABEL_23:
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
      goto LABEL_52;
    v39 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v45 = v44 | v39;
    if (v44 | v39)
    {
      v46 = v39;
      do
      {
        v47 = __clz(__rbit64(v45));
        v48 = ((v46 >> v47) & 1) == 0;
        v49 = v47 > 0x1F;
        if (v47 <= 0x1F)
          v50 = v47 + 1;
        else
          v50 = (char)(31 - v47);
        LODWORD(v56) = v50;
        v45 &= v45 - 1;
      }
      while (v45);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1980634CCLL);
    }
    v27 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v33 = v32 | v27;
    if (v32 | v27)
    {
      v34 = v27;
      do
      {
        v35 = __clz(__rbit64(v33));
        v36 = ((v34 >> v35) & 1) == 0;
        v37 = v35 > 0x1F;
        if (v35 <= 0x1F)
          v38 = v35 + 1;
        else
          v38 = (char)(31 - v35);
        LODWORD(v56) = v38;
        v33 &= v33 - 1;
      }
      while (v33);
    }
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;

  v8 = *(char *)(a2 + 8);
  v9 = ***(uint64_t ****)(a1 + 16);
  if (v8 == 1)
  {
    if ((a3 & 0xFC) != 4)
      return;
    v10 = *v9;
    v13 = *(_DWORD *)(a2 + 16);
    v11 = &v13;
    v12 = a4;
LABEL_7:
    return;
  }
  if ((v8 - 12) < 2)
  {
    v10 = *v9;
    v14 = *(_DWORD *)(a2 + 16);
    v11 = &v14;
    v12 = 0;
    goto LABEL_7;
  }
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t i;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD v30[3];
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void **v35;
  _QWORD *v36;

  v31 = a4;
  if (!a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = **(_QWORD **)a1;
    v10 = **(_QWORD **)(a1 + 8);
    v30[0] = &v31;
    v30[1] = a2;
    v30[2] = v8;
    if (v9)
    {
      v32 = v30;
      v33 = &v32;
      if ((*(__int16 *)(v9 + 120) - 446) <= 5)
      {
        v34 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v35 = &v34;
        v36 = &v33;
        JSC::B3::Air::Inst::forEachArgCustom(v9, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v34);
      }
      else
      {
        v11 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v9 + 120)
              + ((unint64_t)((v11 - 1) * v11) >> 1);
          v14 = 8;
          do
          {
            if (v12 >= *(unsigned int *)(v9 + 12))
              goto LABEL_43;
            v15 = v13[v12];
            v16 = (v15 >> 5) - 1;
            if (v16 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x198063818);
            }
            v17 = 0xFu >> v16;
            v18 = (char *)(*(_QWORD *)v9 + v14);
            v19 = *v18;
            if (v19 == 1)
            {
              if ((v15 & 0xC) != 4 || (v15 & 0x10) != 0)
                goto LABEL_14;
              v20 = v32[2];
              if ((v17 & 1) == 0)
                goto LABEL_13;
            }
            else
            {
              if ((v19 - 12) >= 2)
                goto LABEL_14;
              v21 = v17 & 1;
              v20 = v32[2];
              if ((v15 & 0xF) == 0xB && v21 == 0)
              {
LABEL_13:
                goto LABEL_14;
              }
            }
            if (!*(_BYTE *)*v32)
              goto LABEL_13;
LABEL_14:
            ++v12;
            v14 += 32;
          }
          while (v11 != v12);
        }
      }
    }
    if (v10)
    {
      v32 = v30;
      v33 = &v32;
      if ((*(__int16 *)(v10 + 120) - 446) <= 5)
      {
        v34 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v35 = &v34;
        v36 = &v33;
        JSC::B3::Air::Inst::forEachArgCustom(v10, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v34);
      }
      else
      {
        v23 = *(unsigned int *)(v10 + 12);
        if ((_DWORD)v23)
        {
          v24 = 0;
          v25 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v10 + 120)
              + ((unint64_t)((v23 - 1) * v23) >> 1);
          for (i = 8; ; i += 32)
          {
            if (v24 >= *(unsigned int *)(v10 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198063820);
            }
            v27 = v25[v24];
            v28 = (v27 >> 5) - 1;
            if (v28 >= 5)
              break;
            v29 = *(_QWORD *)v10 + i;
            if (*(_BYTE *)v29 == 1
              && (v27 & 0xF) - 8 <= 2
              && (v27 & 0x10) == 0
              && (((0xFu >> v28) & 1) == 0 || !*(_BYTE *)*v32))
            {
            }
            if (v23 == ++v24)
              return;
          }
LABEL_43:
          __break(0xC471u);
          JUMPOUT(0x1980637F8);
        }
      }
    }
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(char *)(a2 + 8);
  v9 = ***(_QWORD ***)(a1 + 16);
  if (v8 == 1)
  {
    if ((a3 & 0xFC) != 4 || (_DWORD)a4)
      return;
    v10 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    if ((v8 - 12) >= 2)
      return;
    v10 = *(_QWORD *)(v9 + 16);
    if (a3 != 11)
      goto LABEL_6;
  }
  if (a5 > 3)
  {
LABEL_7:
    return;
  }
LABEL_6:
  if (!**(_BYTE **)v9)
    goto LABEL_7;
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdge(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  int v51;
  unsigned __int16 *v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned __int16 v74;
  unsigned __int16 v75;
  _BYTE v76[30];
  unsigned __int16 v77;

  if ((unsigned __int16)a2 == a3)
    return;
  v9 = a2;
  v75 = a2;
  v74 = a3;
  if (a3 >= (unsigned __int16)a2)
    v10 = (unsigned __int16)a2;
  else
    v10 = a3;
  if (a3 <= (unsigned __int16)a2)
    v11 = (unsigned __int16)a2;
  else
    v11 = a3;
  if (*(_DWORD *)(a1 + 36) <= v10)
    goto LABEL_110;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = (_DWORD *)(v12 + 16 * v10);
  v77 = v11;
  v15 = v13 + 2;
  v14 = v13[2];
  if (v14 == -1)
  {
    v45 = *(_QWORD *)v13;
    if (*(_QWORD *)v13
      || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v12 + 16 * v10), 0), (v45 = *(_QWORD *)v13) != 0))
    {
      v46 = *(_DWORD *)(v45 - 8);
    }
    else
    {
      v46 = 0;
    }
    v47 = 9 * ((~((_DWORD)v11 << 15) + v11) ^ ((~((_DWORD)v11 << 15) + v11) >> 10));
    v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
    v49 = v46 & (v48 ^ HIWORD(v48));
    v50 = (unsigned __int16 *)(v45 + 2 * v49);
    v51 = *v50;
    if (v51 != 0xFFFF)
    {
      v52 = 0;
      v53 = 1;
      while ((_DWORD)v11 != (unsigned __int16)v51)
      {
        if ((unsigned __int16)v51 == 65534)
          v52 = v50;
        v49 = (v49 + v53) & v46;
        v50 = (unsigned __int16 *)(v45 + 2 * v49);
        v51 = *v50;
        ++v53;
        if (v51 == 0xFFFF)
        {
          if (v52)
          {
            *v52 = -1;
            --*(_DWORD *)(*(_QWORD *)v13 - 16);
            LOWORD(v11) = v77;
            v50 = v52;
          }
          goto LABEL_68;
        }
      }
      return;
    }
LABEL_68:
    *v50 = v11;
    v54 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
      v55 = *(_DWORD *)(v54 - 12) + 1;
    else
      v55 = 1;
    *(_DWORD *)(v54 - 12) = v55;
    v56 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
      v57 = *(_DWORD *)(v56 - 12);
    else
      v57 = 0;
    v58 = (*(_DWORD *)(v56 - 16) + v57);
    v59 = *(unsigned int *)(v56 - 4);
    if (v59 > 0x400)
    {
      if (v59 > 2 * v58)
        goto LABEL_74;
    }
    else
    {
      if (3 * v59 > 4 * v58)
      {
LABEL_74:
        v60 = v77;
        v61 = v77 & 0xFFC0;
        v62 = v12 + 16 * v10;
        if (v61 >= *(unsigned __int16 *)(v62 + 12))
          v61 = *(unsigned __int16 *)(v62 + 12);
        *(_WORD *)(v62 + 12) = v61;
        if (*(unsigned __int16 *)(v62 + 14) > v60)
          v60 = *(unsigned __int16 *)(v62 + 14);
        *(_WORD *)(v62 + 14) = v60;
        if (v56)
        {
          v63 = *(_DWORD *)(v56 - 4);
          v64 = __OFSUB__(v60, v61);
          v65 = v60 - v61;
          if (v65 < 0 != v64)
            v65 += 7;
          if (2 * (v65 >> 3) < (2 * v63))
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v12 + 16 * v10), a2, (uint64_t)v50, a4, a5, a6, a7, a8);
        }
        goto LABEL_47;
      }
      if (!(_DWORD)v59)
      {
        v73 = 8;
LABEL_104:
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v12 + 16 * v10), v73, v50);
        v56 = *(_QWORD *)v13;
        goto LABEL_74;
      }
    }
    v73 = (_DWORD)v59 << (6 * *(_DWORD *)(v56 - 12) >= (2 * v59));
    goto LABEL_104;
  }
  if (!v14)
  {
    v66 = v12 + 16 * v10;
    *(_WORD *)(v66 + 12) = v11 & 0xFFC0;
    *(_WORD *)(v66 + 14) = v11;
    *v15 = 1;
    v67 = v11 - ((unsigned __int16)v11 & 0xFFC0);
    v68 = v67 + 1;
    v69 = *(_QWORD *)v13;
    if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
      v70 = 63;
    else
      v70 = *(_QWORD *)(2 * v69);
    if (v70 < v68)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v13, v68, 0);
      v69 = *(_QWORD *)v13;
    }
    if (v69 >= 0)
      v71 = 2 * v69 + 8;
    else
      v71 = (uint64_t)v13;
    *(_QWORD *)(v71 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    goto LABEL_47;
  }
  v16 = v12 + 16 * v10;
  v19 = *(unsigned __int16 *)(v16 + 12);
  v18 = (_WORD *)(v16 + 12);
  v17 = v19;
  v20 = (unsigned __int16)v18[1];
  if (v19 > v11 || v20 < v11)
  {
    *v15 = v14 + 1;
    if (((unsigned __int16)v11 & 0xFFC0u) >= v17)
      v29 = v17;
    else
      v29 = (unsigned __int16)v11 & 0xFFC0;
    if (v20 <= v11)
      v30 = v11;
    else
      v30 = v20;
    v31 = v30 - v29;
    if (v30 < (int)v29)
      v31 = v30 - v29 + 7;
    if ((v14 + 1) > 8)
      v32 = v14 + 1;
    else
      v32 = 8;
    if (12 * v32 < (v31 >> 3))
    {
      WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet((uint64_t)v13);
      WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)v76, (uint64_t *)v13, &v77);
      *v18 = v29;
LABEL_46:
      v18[1] = v30;
LABEL_47:
      ++*(_DWORD *)(a1 + 40);
      v9 = v75;
LABEL_48:
      v38 = *(unsigned __int16 *)(a1 + 16);
      if (v38 < v9)
      {
        v39 = *(_QWORD *)(a1 + 48) + 16 * v9;
        v40 = *(unsigned int *)(v39 + 12);
        if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
        {
          v43 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v9, v40 + 1, (unint64_t)&v74);
          v40 = *(unsigned int *)(v39 + 12);
          *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = *v43;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = v74;
        }
        *(_DWORD *)(v39 + 12) = v40 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * v9);
        v38 = *(unsigned __int16 *)(a1 + 16);
      }
      if (v38 < v74)
      {
        v41 = *(_QWORD *)(a1 + 48) + 16 * v74;
        v42 = *(unsigned int *)(v41 + 12);
        if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
        {
          v44 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v74, v42 + 1, (unint64_t)&v75);
          v42 = *(unsigned int *)(v41 + 12);
          *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = *v44;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = v9;
        }
        *(_DWORD *)(v41 + 12) = v42 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * v74);
      }
      return;
    }
    if (v17 <= v11)
    {
LABEL_38:
      v33 = v11 - v17;
      v34 = v33 + 1;
      v35 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
        v36 = 63;
      else
        v36 = *(_QWORD *)(2 * v35);
      if (v36 < v34)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v13, v34, 0);
        v35 = *(_QWORD *)v13;
      }
      if (v35 >= 0)
        v37 = 2 * v35 + 8;
      else
        v37 = (uint64_t)v13;
      *(_QWORD *)(v37 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
      goto LABEL_46;
    }
    if ((((_BYTE)v17 - (_BYTE)v29) & 0x3F) == 0)
    {
      if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
        v72 = 63;
      else
        v72 = *(_QWORD *)(2 * *(_QWORD *)v13);
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v13, v72 + (int)v17 - (int)v29, (unint64_t)((int)v17 - (int)v29) >> 6);
      *v18 = v29;
      v17 = v29;
      goto LABEL_38;
    }
LABEL_110:
    __break(0xC471u);
    JUMPOUT(0x198063DACLL);
  }
  v22 = v11 - v17;
  if (*(uint64_t *)v13 >= 0)
    v23 = 2 * *(_QWORD *)v13 + 8;
  else
    v23 = v12 + 16 * v10;
  v24 = (v22 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v25 = 1 << v22;
  v26 = *(_QWORD *)(v23 + v24);
  *(_QWORD *)(v23 + v24) = v26 | v25;
  v27 = v26 & v25;
  if (!v27)
    ++v14;
  *v15 = v14;
  v28 = *(_DWORD *)(a1 + 40);
  if (!v27)
    ++v28;
  *(_DWORD *)(a1 + 40) = v28;
  if (!v27)
    goto LABEL_48;
}

uint64_t WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::addAndReturnIsNewEntry(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unsigned int v18;
  unsigned int v19;
  _WORD *v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int16 *v41;
  int v42;
  unsigned __int16 *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int16 v65;

  if (a3 >= a2)
    v8 = a2;
  else
    v8 = a3;
  if (a3 <= a2)
    v9 = a2;
  else
    v9 = a3;
  if (*(_DWORD *)(result + 12) > v8)
  {
    v10 = result;
    v11 = *(_QWORD *)result;
    v12 = (_DWORD *)(*(_QWORD *)result + 16 * v8);
    v65 = v9;
    v14 = v12 + 2;
    v13 = v12[2];
    if (v13 != -1)
    {
      if (!v13)
      {
        v57 = v11 + 16 * v8;
        *(_WORD *)(v57 + 12) = v9 & 0xFFC0;
        *(_WORD *)(v57 + 14) = v9;
        *v14 = 1;
        v58 = v9 - ((unsigned __int16)v9 & 0xFFC0);
        v59 = v58 + 1;
        v60 = *(_QWORD *)v12;
        if ((*(_QWORD *)v12 & 0x8000000000000000) != 0)
          v61 = 63;
        else
          v61 = *(_QWORD *)(2 * v60);
        if (v61 < v59)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v12, v59, 0);
          v60 = *(_QWORD *)v12;
        }
        if (v60 >= 0)
          v62 = 2 * v60 + 8;
        else
          v62 = (uint64_t)v12;
        result = 1;
        *(_QWORD *)(v62 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        goto LABEL_21;
      }
      v15 = v11 + 16 * v8;
      v18 = *(unsigned __int16 *)(v15 + 12);
      v17 = (_WORD *)(v15 + 12);
      v16 = v18;
      v20 = v17 + 1;
      v19 = (unsigned __int16)v17[1];
      if (v18 <= v9 && v19 >= v9)
      {
        v22 = v9 - v16;
        if (*(uint64_t *)v12 >= 0)
          v23 = 2 * *(_QWORD *)v12 + 8;
        else
          v23 = (uint64_t)v12;
        v24 = (v22 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v25 = 1 << v22;
        v26 = *(_QWORD *)(v23 + v24);
        result = (v26 & v25) == 0;
        *(_QWORD *)(v23 + v24) = v26 | v25;
        if ((v26 & v25) == 0)
          ++v13;
        *v14 = v13;
        goto LABEL_21;
      }
      *v14 = v13 + 1;
      if (((unsigned __int16)v9 & 0xFFC0u) >= v16)
        v27 = v16;
      else
        v27 = (unsigned __int16)v9 & 0xFFC0;
      if (v19 <= v9)
        v28 = v9;
      else
        v28 = v19;
      v29 = v28 - v27;
      if (v28 < (int)v27)
        v29 = v28 - v27 + 7;
      if ((v13 + 1) > 8)
        v30 = v13 + 1;
      else
        v30 = 8;
      if (12 * v30 >= (v29 >> 3))
      {
        if (v16 > v9)
        {
          WTF::BitVector::shiftRightByMultipleOf64((WTF::BitVector *)v12, (int)v16 - (int)v27);
          *v17 = v27;
          v16 = v27;
        }
        v31 = v9 - v16;
        v32 = v31 + 1;
        v33 = *(_QWORD *)v12;
        if ((*(_QWORD *)v12 & 0x8000000000000000) != 0)
          v34 = 63;
        else
          v34 = *(_QWORD *)(2 * v33);
        if (v34 < v32)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v12, v32, 0);
          v33 = *(_QWORD *)v12;
        }
        if (v33 >= 0)
          v35 = 2 * v33 + 8;
        else
          v35 = (uint64_t)v12;
        result = 1;
        *(_QWORD *)(v35 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        *v20 = v28;
        goto LABEL_21;
      }
      WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet((uint64_t)v12);
      WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v64, (uint64_t *)v12, &v65);
      *v17 = v27;
      *v20 = v28;
LABEL_69:
      result = 1;
LABEL_21:
      *(_DWORD *)(v10 + 16) += result;
      return result;
    }
    v36 = *(_QWORD *)v12;
    if (*(_QWORD *)v12
      || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)v12, 0), (v36 = *(_QWORD *)v12) != 0))
    {
      v37 = *(_DWORD *)(v36 - 8);
    }
    else
    {
      v37 = 0;
    }
    v38 = 9 * ((~((_DWORD)v9 << 15) + v9) ^ ((~((_DWORD)v9 << 15) + v9) >> 10));
    v39 = (v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11);
    v40 = v37 & (v39 ^ HIWORD(v39));
    v41 = (unsigned __int16 *)(v36 + 2 * v40);
    v42 = *v41;
    if (v42 != 0xFFFF)
    {
      v43 = 0;
      v44 = 1;
      do
      {
        if ((_DWORD)v9 == (unsigned __int16)v42)
        {
          result = 0;
          goto LABEL_21;
        }
        if ((unsigned __int16)v42 == 65534)
          v43 = v41;
        v40 = (v40 + v44) & v37;
        v41 = (unsigned __int16 *)(v36 + 2 * v40);
        v42 = *v41;
        ++v44;
      }
      while (v42 != 0xFFFF);
      if (v43)
      {
        *v43 = -1;
        --*(_DWORD *)(*(_QWORD *)v12 - 16);
        LOWORD(v9) = v65;
        v41 = v43;
      }
    }
    *v41 = v9;
    v45 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
      v46 = *(_DWORD *)(v45 - 12) + 1;
    else
      v46 = 1;
    *(_DWORD *)(v45 - 12) = v46;
    v47 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
      v48 = *(_DWORD *)(v47 - 12);
    else
      v48 = 0;
    v49 = (*(_DWORD *)(v47 - 16) + v48);
    v50 = *(unsigned int *)(v47 - 4);
    if (v50 > 0x400)
    {
      if (v50 > 2 * v49)
        goto LABEL_60;
    }
    else
    {
      if (3 * v50 > 4 * v49)
      {
LABEL_60:
        v51 = v65;
        v52 = v65 & 0xFFC0;
        v53 = v11 + 16 * v8;
        if (v52 >= *(unsigned __int16 *)(v53 + 12))
          v52 = *(unsigned __int16 *)(v53 + 12);
        *(_WORD *)(v53 + 12) = v52;
        if (*(unsigned __int16 *)(v53 + 14) > v51)
          v51 = *(unsigned __int16 *)(v53 + 14);
        *(_WORD *)(v53 + 14) = v51;
        if (v47)
        {
          v54 = *(_DWORD *)(v47 - 4);
          v55 = __OFSUB__(v51, v52);
          v56 = v51 - v52;
          if (v56 < 0 != v55)
            v56 += 7;
          if (2 * (v56 >> 3) < (2 * v54))
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)v12, a2, (uint64_t)v41, a4, a5, a6, a7, a8);
        }
        goto LABEL_69;
      }
      if (!(_DWORD)v50)
      {
        v63 = 8;
LABEL_87:
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)v12, v63, v41);
        v47 = *(_QWORD *)v12;
        goto LABEL_60;
      }
    }
    v63 = (_DWORD)v50 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v50));
    goto LABEL_87;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add(uint64_t result, uint64_t *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 *v11;
  int v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  _WORD *v25;

  v4 = result;
  v5 = *a2;
  if (*a2
    || (v25 = a3,
        result = (uint64_t)WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(a2, 0), a3 = v25, (v5 = *a2) != 0))
  {
    v6 = 0;
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  v8 = (unsigned __int16)*a3;
  v9 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
  v10 = (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) ^ (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) >> 16)) & v7;
  v11 = (unsigned __int16 *)(v5 + 2 * v10);
  v12 = *v11;
  if (v12 != 0xFFFF)
  {
    v13 = 0;
    v14 = 1;
    result = 65534;
    do
    {
      if (v12 == v8)
      {
        if ((v6 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v5 - 4);
        v22 = 0;
        v21 = v5 + 2 * v23;
        goto LABEL_21;
      }
      if (v12 == 65534)
        v13 = v11;
      v10 = (v10 + v14) & v7;
      v11 = (unsigned __int16 *)(v5 + 2 * v10);
      v12 = *v11;
      ++v14;
    }
    while (v12 != 0xFFFF);
    if (v13)
    {
      *v13 = -1;
      --*(_DWORD *)(*a2 - 16);
      LOWORD(v8) = *a3;
      v11 = v13;
    }
  }
  *v11 = v8;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_17;
    goto LABEL_26;
  }
  if (3 * v20 <= 4 * v19)
  {
    if (!(_DWORD)v20)
    {
      v24 = 8;
      goto LABEL_27;
    }
LABEL_26:
    v24 = (_DWORD)v20 << (6 * *(_DWORD *)(v17 - 12) >= (2 * v20));
LABEL_27:
    result = (uint64_t)WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(a2, v24, v11);
    v11 = (unsigned __int16 *)result;
    v17 = *a2;
    if (*a2)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
  }
LABEL_17:
  v21 = v17 + 2 * v20;
  v22 = 1;
LABEL_21:
  *(_QWORD *)v4 = v11;
  *(_QWORD *)(v4 + 8) = v21;
  *(_BYTE *)(v4 + 16) = v22;
  return result;
}

void WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector(WTF::BitVector *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = 0x8000000000000000;
  v9 = *((unsigned __int16 *)this + 7) - (unint64_t)*((unsigned __int16 *)this + 6) + 1;
  if (v9 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v30, v9, 0);
  *((_DWORD *)this + 2) = 0;
  v10 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v13 = 0;
    v11 = 0;
    goto LABEL_30;
  }
  v11 = *(unsigned int *)(v10 - 4);
  v12 = (unsigned __int16 *)(v10 + 2 * v11);
  if (!*(_DWORD *)(v10 - 12))
  {
    v13 = (unsigned __int16 *)(v10 + 2 * v11);
LABEL_30:
    v12 = (unsigned __int16 *)(v10 + 2 * v11);
    goto LABEL_10;
  }
  v13 = *(unsigned __int16 **)this;
  if ((_DWORD)v11)
  {
    v14 = 2 * v11;
    v13 = *(unsigned __int16 **)this;
    while (*v13 >= 0xFFFEu)
    {
      ++v13;
      v14 -= 2;
      if (!v14)
      {
        v13 = v12;
        break;
      }
    }
  }
LABEL_10:
  if (v10)
    v15 = (unsigned __int16 *)(v10 + 2 * *(unsigned int *)(v10 - 4));
  else
    v15 = 0;
  if (v15 != v13)
  {
    v16 = 0;
    v17 = *((unsigned __int16 *)this + 6);
    do
    {
      v18 = v13 + 1;
      v19 = *v13 - v17;
      if (v30 >= 0)
        v20 = (uint64_t *)(2 * v30 + 8);
      else
        v20 = &v30;
      v21 = (v19 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v9 = *(uint64_t *)((char *)v20 + v21);
      *(uint64_t *)((char *)v20 + v21) = (1 << v19) | v9;
      v13 = v12;
      if (v18 != v12)
      {
        v13 = v18;
        while (*v13 >= 0xFFFEu)
        {
          if (++v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
      ++v16;
    }
    while (v13 != v15);
    *((_DWORD *)this + 2) = v16;
    v10 = *(_QWORD *)this;
  }
  if (v10)
    WTF::fastFree(v10 - 16, (void *)v9, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = 0x8000000000000000;
  v22 = v30;
  if (v30 < 0)
  {
    *(_QWORD *)this = v30;
  }
  else
  {
    WTF::BitVector::setSlow(this, (const WTF::BitVector *)&v30, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(2 * v22, v23, v24, v25, v26, v27, v28, v29);
  }
}

void WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  unsigned __int16 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int16 v50;
  uint64_t v51;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = v2 + 1;
  v4 = v2 | (v2 >> 1) | ((v2 | (v2 >> 1)) >> 2);
  v5 = v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8);
  v6 = (v5 | HIWORD(v5)) + 1;
  if (v6 > 0x400)
  {
    if (v6 > 2 * v3)
      goto LABEL_48;
  }
  else if (3 * v6 > 4 * v3)
  {
LABEL_4:
    v7 = (double)v3;
    v8 = (double)v6;
    v9 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v6) = 2 * v6;
  if (v6 <= 0x400)
    goto LABEL_4;
LABEL_48:
  v7 = (double)v3;
  v8 = (double)v6;
  v9 = 0.416666667;
LABEL_5:
  if (v8 * v9 <= v7)
    LODWORD(v6) = 2 * v6;
  if (v6 <= 8)
    v10 = 8;
  else
    v10 = v6;
  v11 = WTF::fastMalloc((WTF *)(2 * v10 + 16));
  memset((void *)(v11 + 16), 255, 2 * v10);
  v51 = v11 + 16;
  *(_DWORD *)(v11 + 8) = v10 - 1;
  *(_DWORD *)(v11 + 12) = v10;
  *(_QWORD *)v11 = 0;
  v19 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x8000000000000000) == 0)
  {
    v20 = 2 * v19;
    v21 = *(_QWORD *)(2 * v19);
    if ((unint64_t)(v21 + 63) >= 0x40)
    {
      v22 = *(_QWORD *)(2 * v19 + 8);
      if (v22)
      {
        v23 = __clz(__rbit64(v22));
        if (v23 < 0x40)
        {
          v24 = 0;
LABEL_15:
          v25 = v23 + (v24 << 6);
          goto LABEL_16;
        }
      }
      if ((unint64_t)(v21 + 63) >> 6 != 1)
      {
        v47 = 0;
        while (1)
        {
          v48 = *(_QWORD *)(2 * v19 + 0x10 + 8 * v47);
          if (v48)
          {
            v23 = __clz(__rbit64(v48));
            if (v23 <= 0x3F)
              break;
          }
          if (((unint64_t)(v21 + 63) >> 6) - 1 == ++v47)
            goto LABEL_60;
        }
        v24 = v47 + 1;
        goto LABEL_15;
      }
    }
LABEL_63:
    WTF::fastFree(v20, v12, v13, v14, v15, v16, v17, v18);
    goto LABEL_61;
  }
  v49 = __clz(__rbit64(v19));
  v21 = 63;
  if (v49 >= 0x3F)
    v25 = 63;
  else
    v25 = v49;
LABEL_16:
  while (v25 != v21)
  {
    v26 = *(_WORD *)(a1 + 12);
    v27 = v51;
    if (v51
      || (v50 = *(_WORD *)(a1 + 12),
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(&v51, 0), v26 = v50, (v27 = v51) != 0))
    {
      v28 = *(_DWORD *)(v27 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = v26 + v25;
    v30 = ~(v29 << 15) + v29;
    v31 = (9 * (v30 ^ (v30 >> 10))) ^ ((9 * (v30 ^ (v30 >> 10))) >> 6);
    v32 = v28 & ((v31 + ~(v31 << 11)) ^ ((v31 + ~(v31 << 11)) >> 16));
    v12 = (unsigned __int16 *)(v27 + 2 * v32);
    v33 = *v12;
    if (v33 == 0xFFFF)
    {
LABEL_20:
      *v12 = v29;
      v34 = v51;
      if (v51)
        v35 = *(_DWORD *)(v51 - 12) + 1;
      else
        v35 = 1;
      *(_DWORD *)(v51 - 12) = v35;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
          goto LABEL_24;
      }
      else if (3 * v37 > 4 * v36)
      {
        goto LABEL_24;
      }
      WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(&v51, v12);
    }
    else
    {
      v43 = 0;
      v44 = 1;
      while ((unsigned __int16)v33 != v29)
      {
        if ((unsigned __int16)v33 == 65534)
          v43 = v12;
        v32 = (v32 + v44) & v28;
        v12 = (unsigned __int16 *)(v27 + 2 * v32);
        v33 = *v12;
        ++v44;
        if (v33 == 0xFFFF)
        {
          if (v43)
          {
            *v43 = -1;
            --*(_DWORD *)(v51 - 16);
            v12 = v43;
          }
          goto LABEL_20;
        }
      }
    }
LABEL_24:
    v38 = v25 + 1;
    v19 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
    {
      v46 = __clz(__rbit64(v19 >> v38)) + v38;
      if (v46 >= 0x3F)
        v25 = 63;
      else
        v25 = v46;
      continue;
    }
    v25 = *(_QWORD *)(2 * v19);
    v39 = v25 + 63;
    v40 = v38 >> 6;
    if (v38 >> 6 < (unint64_t)(v25 + 63) >> 6)
    {
      v41 = *(_QWORD *)(2 * v19 + 8 * v40 + 8);
      if (!v41 || (v42 = __clz(__rbit64(v41 >> v38)) + (v38 & 0x3F), v42 >= 0x40))
      {
        if (v40 + 1 == v39 >> 6)
          continue;
        while (1)
        {
          v45 = *(_QWORD *)(2 * v19 + 0x10 + 8 * v40);
          if (v45)
          {
            v42 = __clz(__rbit64(v45));
            if (v42 <= 0x3F)
              break;
          }
          if ((v39 >> 6) - 1 == ++v40)
            goto LABEL_29;
        }
        ++v40;
      }
      v25 = v42 + (v40 << 6);
    }
LABEL_29:
    ;
  }
LABEL_60:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = 2 * v19;
    goto LABEL_63;
  }
LABEL_61:
  *(_QWORD *)a1 = v51;
  *(_DWORD *)(a1 + 8) = -1;
}

_WORD *WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(a1, v5, a2);
}

_WORD *WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _WORD *v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(2 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, 2 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (unsigned __int16 *)(v6 + 2 * v19);
      v22 = *v21;
      if (v22 <= 0xFFFD)
      {
        v23 = *a1;
        v24 = *a1 ? *(_DWORD *)(v23 - 8) : 0;
        v25 = 0;
        v26 = 9 * ((~(v22 << 15) + v22) ^ ((~(v22 << 15) + v22) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v10 = *(__int16 *)(v23 + 2 * v28);
          v27 = ++v25 + v28;
        }
        while ((_DWORD)v10 != -1);
        v29 = (_WORD *)(v23 + 2 * v28);
        *v29 = v22;
        if (v21 == a3)
          v20 = v29;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
  }
  if (v6)
    WTF::fastFree(v6 - 16, (void *)v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !(_DWORD)a4)
  {
    v8 = ***(_QWORD ***)(a1 + 16);
    if (a5 > 3 || !**(_BYTE **)v8)
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v8 = ****(_QWORD ****)(a1 + 16);
    v9 = *(_DWORD *)(a2 + 16);
  }
}

uint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 4 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 4 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t ***v9;
  uint64_t **v10;
  int *v11;
  int v13;
  int v14;

  v8 = *(char *)(a2 + 8);
  v9 = ***(uint64_t ******)(a1 + 16);
  if (v8 == 1)
  {
    if ((a3 & 0xFC) == 4)
    {
      v10 = *v9;
      v13 = *(_DWORD *)(a2 + 16);
      v11 = &v13;
LABEL_4:
    }
  }
  else if ((v8 - 12) < 2)
  {
    v10 = *v9;
    v14 = *(_DWORD *)(a2 + 16);
    v11 = &v14;
    a4 = 0;
    goto LABEL_4;
  }
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t **a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  _WORD *v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  _WORD *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int16 *v61;
  int v62;
  unsigned __int16 *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int16 v88;
  unsigned int v89;
  __int16 v90;
  __int16 v91;
  unsigned __int16 v92;
  __int16 v93;
  _BYTE v94[30];
  unsigned __int16 v95;

  if (!a3)
  {
    v8 = (unsigned int *)a2;
    v9 = (uint64_t)a1[1];
    v10 = **a1;
    v11 = *(unsigned int *)(v10 + 60);
    if ((_DWORD)v11)
    {
      v12 = a4;
      v13 = *(unsigned int **)(v10 + 48);
      v14 = &v13[v11];
      while (1)
      {
        v15 = *v13;
        v16 = *(_QWORD *)(v9 + 376);
        if ((int)*v13 < 1)
        {
          v17 = -v15;
          if (v17 >= *(unsigned int *)(v16 + 28))
            goto LABEL_124;
          v16 += 16;
        }
        else
        {
          v17 = *v13;
          if (v15 >= *(_DWORD *)(v16 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1980653F4);
          }
        }
        if (!v12 || *(unsigned __int8 *)(*(_QWORD *)v16 + 2 * v17) >= 4u)
        {
          v18 = *v8;
          v19 = (unsigned __int16)*v8;
          if (v19 != (unsigned __int16)v15)
            break;
        }
LABEL_31:
        if (++v13 == v14)
          goto LABEL_92;
      }
      v20 = (unsigned __int16)*v13;
      v93 = *v8;
      v92 = v15;
      if ((unsigned __int16)v15 >= (unsigned __int16)v18)
        v21 = v19;
      else
        v21 = v20;
      if (v20 <= (unsigned __int16)v18)
        v22 = v19;
      else
        v22 = v20;
      if (*(_DWORD *)(v9 + 36) <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1980653FCLL);
      }
      v23 = *(_QWORD *)(v9 + 24);
      v24 = v23 + 16 * v21;
      v95 = v22;
      v26 = (_DWORD *)(v24 + 8);
      v25 = *(_DWORD *)(v24 + 8);
      if (v25 != -1)
      {
        if (v25)
        {
          v27 = v23 + 16 * v21;
          v30 = *(unsigned __int16 *)(v27 + 12);
          v29 = (_WORD *)(v27 + 12);
          v28 = v30;
          v32 = v29 + 1;
          v31 = (unsigned __int16)v29[1];
          if (v30 <= v22 && v31 >= v22)
          {
            v34 = v22 - v28;
            if (*(uint64_t *)v24 >= 0)
              v35 = 2 * *(_QWORD *)v24 + 8;
            else
              v35 = v24;
            v36 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v37 = 1 << v34;
            v38 = *(_QWORD *)(v35 + v36);
            *(_QWORD *)(v35 + v36) = v38 | v37;
            v39 = v38 & v37;
            if (!v39)
              ++v25;
            *v26 = v25;
            v40 = *(_DWORD *)(v9 + 40);
            if (!v39)
              ++v40;
            *(_DWORD *)(v9 + 40) = v40;
            if (v39)
              goto LABEL_31;
            goto LABEL_54;
          }
          *v26 = v25 + 1;
          if (((unsigned __int16)v22 & 0xFFC0u) >= v28)
            v41 = v28;
          else
            v41 = (unsigned __int16)v22 & 0xFFC0;
          if (v31 <= v22)
            v42 = v22;
          else
            v42 = v31;
          v43 = v42 - v41;
          if (v42 < (int)v41)
            v43 = v42 - v41 + 7;
          if ((v25 + 1) > 8)
            v44 = v25 + 1;
          else
            v44 = 8;
          if (12 * v44 < (v43 >> 3))
          {
            v90 = v42;
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v24);
            WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)v94, (uint64_t *)v24, &v95);
            *v29 = v41;
            *v32 = v90;
          }
          else
          {
            if (v28 > v22)
            {
              v86 = (int)v28 - (int)v41;
              if ((v86 & 0x3F) != 0)
              {
LABEL_124:
                __break(0xC471u);
                JUMPOUT(0x198065398);
              }
              v91 = v42;
              if ((*(_QWORD *)v24 & 0x8000000000000000) != 0)
                v87 = 63;
              else
                v87 = *(_QWORD *)(2 * *(_QWORD *)v24);
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v24, v87 + v86, v86 >> 6);
              *v29 = v41;
              v28 = v41;
              LOWORD(v42) = v91;
            }
            v45 = *(_QWORD *)v24;
            if ((*(_QWORD *)v24 & 0x8000000000000000) != 0)
              v46 = 63;
            else
              v46 = *(_QWORD *)(2 * v45);
            v47 = v22 - v28;
            a2 = v22 - v28 + 1;
            if (v46 < a2)
            {
              v88 = v42;
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v24, a2, 0);
              LOWORD(v42) = v88;
              v45 = *(_QWORD *)v24;
            }
            v48 = 2 * v45 + 8;
            if (v45 < 0)
              v48 = v24;
            *(_QWORD *)(v48 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
            *v32 = v42;
          }
        }
        else
        {
          v81 = v23 + 16 * v21;
          *(_WORD *)(v81 + 12) = v22 & 0xFFC0;
          *(_WORD *)(v81 + 14) = v22;
          *v26 = 1;
          v82 = *(_QWORD *)v24;
          if ((*(_QWORD *)v24 & 0x8000000000000000) != 0)
            v83 = 63;
          else
            v83 = *(_QWORD *)(2 * v82);
          v84 = v22 - ((unsigned __int16)v22 & 0xFFC0);
          a2 = v84 + 1;
          if (v83 < v84 + 1)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v24, a2, 0);
            v82 = *(_QWORD *)v24;
          }
          if (v82 >= 0)
            v85 = 2 * v82 + 8;
          else
            v85 = v24;
          *(_QWORD *)(v85 + ((v84 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
        }
LABEL_53:
        ++*(_DWORD *)(v9 + 40);
        LOWORD(v18) = v93;
LABEL_54:
        v49 = *(unsigned __int16 *)(v9 + 16);
        if (v49 < (unsigned __int16)v18)
        {
          v50 = *(_QWORD *)(v9 + 48) + 16 * (unsigned __int16)v18;
          v51 = *(unsigned int *)(v50 + 12);
          if ((_DWORD)v51 == *(_DWORD *)(v50 + 8))
          {
            v54 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v9 + 48) + 16 * (unsigned __int16)v18, v51 + 1, (unint64_t)&v92);
            v51 = *(unsigned int *)(v50 + 12);
            *(_WORD *)(*(_QWORD *)v50 + 2 * v51) = *v54;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v50 + 2 * v51) = v92;
          }
          *(_DWORD *)(v50 + 12) = v51 + 1;
          ++*(_WORD *)(*(_QWORD *)(v9 + 64) + 2 * (unsigned __int16)v18);
          v49 = *(unsigned __int16 *)(v9 + 16);
        }
        if (v49 < v92)
        {
          v52 = *(_QWORD *)(v9 + 48) + 16 * v92;
          v53 = *(unsigned int *)(v52 + 12);
          if ((_DWORD)v53 == *(_DWORD *)(v52 + 8))
          {
            v55 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v9 + 48) + 16 * v92, v53 + 1, (unint64_t)&v93);
            v53 = *(unsigned int *)(v52 + 12);
            *(_WORD *)(*(_QWORD *)v52 + 2 * v53) = *v55;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v52 + 2 * v53) = v18;
          }
          *(_DWORD *)(v52 + 12) = v53 + 1;
          ++*(_WORD *)(*(_QWORD *)(v9 + 64) + 2 * v92);
        }
        goto LABEL_31;
      }
      v56 = *(_QWORD *)v24;
      if (*(_QWORD *)v24
        || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v23 + 16 * v21), 0), (v56 = *(_QWORD *)v24) != 0))
      {
        v57 = *(_DWORD *)(v56 - 8);
      }
      else
      {
        v57 = 0;
      }
      v58 = 9 * ((~((_DWORD)v22 << 15) + v22) ^ ((~((_DWORD)v22 << 15) + v22) >> 10));
      v59 = (v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11);
      v60 = v57 & (v59 ^ HIWORD(v59));
      v61 = (unsigned __int16 *)(v56 + 2 * v60);
      v62 = *v61;
      if (v62 != 0xFFFF)
      {
        v63 = 0;
        v64 = 1;
        while ((_DWORD)v22 != (unsigned __int16)v62)
        {
          if ((unsigned __int16)v62 == 65534)
            v63 = v61;
          v60 = (v60 + v64) & v57;
          v61 = (unsigned __int16 *)(v56 + 2 * v60);
          v62 = *v61;
          ++v64;
          if (v62 == 0xFFFF)
          {
            if (v63)
            {
              *v63 = -1;
              --*(_DWORD *)(*(_QWORD *)v24 - 16);
              LOWORD(v22) = v95;
              v61 = v63;
            }
            goto LABEL_74;
          }
        }
        goto LABEL_31;
      }
LABEL_74:
      *v61 = v22;
      v65 = *(_QWORD *)v24;
      if (*(_QWORD *)v24)
        v66 = *(_DWORD *)(v65 - 12) + 1;
      else
        v66 = 1;
      *(_DWORD *)(v65 - 12) = v66;
      v67 = *(_QWORD *)v24;
      if (*(_QWORD *)v24)
        v68 = *(_DWORD *)(v67 - 12);
      else
        v68 = 0;
      v69 = (*(_DWORD *)(v67 - 16) + v68);
      v70 = *(unsigned int *)(v67 - 4);
      if (v70 > 0x400)
      {
        if (v70 > 2 * v69)
          goto LABEL_80;
      }
      else
      {
        if (3 * v70 > 4 * v69)
        {
LABEL_80:
          v71 = v95;
          v72 = v95 & 0xFFC0;
          v73 = v23 + 16 * v21;
          if (v72 >= *(unsigned __int16 *)(v73 + 12))
            v72 = *(unsigned __int16 *)(v73 + 12);
          *(_WORD *)(v73 + 12) = v72;
          if (*(unsigned __int16 *)(v73 + 14) > v71)
            v71 = *(unsigned __int16 *)(v73 + 14);
          *(_WORD *)(v73 + 14) = v71;
          if (v67)
          {
            v74 = *(_DWORD *)(v67 - 4);
            v75 = __OFSUB__(v71, v72);
            v76 = v71 - v72;
            if (v76 < 0 != v75)
              v76 += 7;
            if (2 * (v76 >> 3) < (2 * v74))
              WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v23 + 16 * v21), a2, (uint64_t)v61, a4, a5, a6, a7, a8);
          }
          goto LABEL_53;
        }
        if (!(_DWORD)v70)
        {
          v89 = 8;
LABEL_116:
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v23 + 16 * v21), v89, v61);
          v67 = *(_QWORD *)v24;
          goto LABEL_80;
        }
      }
      v89 = (_DWORD)v70 << (6 * *(_DWORD *)(v67 - 12) >= (2 * v70));
      goto LABEL_116;
    }
LABEL_92:
    v77 = *(unsigned int *)(v9 + 276);
    if ((_DWORD)v77)
    {
      v78 = *(int **)(v9 + 264);
      v79 = 4 * v77;
      do
      {
        v80 = *v78++;
        v79 -= 4;
      }
      while (v79);
    }
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  int v9;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v8 = ****(uint64_t ******)(a1 + 16);
    v9 = *(_DWORD *)(a2 + 16);
  }
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  double v20;
  float v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _WORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  BOOL v98;
  uint64_t i;
  _WORD *v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _WORD *v108;
  uint64_t v109;
  uint64_t v111;
  int v112;
  BOOL v113;
  uint64_t v114;
  _WORD *v115;
  int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned __int16 *v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  BOOL v134;
  uint64_t v135;
  _WORD *v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  BOOL v143;
  uint64_t v144;
  _WORD *v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int v151;
  _QWORD *v152;
  _DWORD *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  unsigned __int16 **v181;
  unsigned __int16 **v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unint64_t v186;
  unsigned __int16 *v187;
  uint64_t v188;
  uint64_t j;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned __int16 *v197;
  int v198;
  unsigned __int16 *v199;
  int v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  unsigned __int16 *v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  _WORD *v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  int v227;
  int v228;
  _WORD *v229;
  int v230;
  _WORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  unsigned int v238;
  uint64_t v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  _WORD *v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  int v250;
  int v251;
  _WORD *v252;
  int v253;
  _WORD *v254;
  int v255;
  uint64_t v256;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  unint64_t v267;
  unsigned __int16 *v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  int v272;
  uint64_t v274;
  uint64_t v275;
  unsigned __int16 *v276;
  unsigned __int16 *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  int v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  int v290;
  BOOL v291;
  uint64_t v292;
  _WORD *v293;
  int v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned __int16 *v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  int v317;
  BOOL v318;
  uint64_t v319;
  _WORD *v320;
  int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  unsigned __int16 *v333;
  unint64_t v334;
  char *v335;
  uint64_t v336;
  _WORD *v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  int v342;
  int v343;
  _WORD *v344;
  int v345;
  _WORD *v346;
  int v347;
  uint64_t v348;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  unsigned int v354;
  unsigned int v355;
  int v356;
  uint64_t v357;
  unint64_t v358;
  unsigned int v359;
  int v360;
  _QWORD *v361;
  unsigned int *v362;
  int v363;
  int *v364;
  unsigned int v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  int v369;
  unint64_t v370;
  uint64_t v371;
  void *v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  uint64_t v376;
  int v377;
  int v379;
  uint64_t v381;
  uint64_t v382;
  _WORD *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  _WORD *v393;
  unsigned int v394;
  unsigned int v395;
  _WORD *v396;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  uint64_t v405;
  int v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned __int16 *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  int v417;
  int v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  _WORD *v433;
  int v434;
  _WORD *v435;
  int v436;
  unsigned int v437;
  uint64_t v438;
  int v439;
  int v440;
  unsigned int v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t ii;
  _WORD *v445;
  _WORD *v446;
  _WORD *v447;
  _WORD *v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unsigned __int16 *v454;
  unint64_t v455;
  _QWORD *v456;
  unsigned __int16 *v457;
  int v458;
  int v459;
  BOOL v460;
  uint64_t n;
  _WORD *v462;
  int v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  unsigned int v471;
  uint64_t v472;
  int v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  _WORD *v479;
  unsigned int v480;
  unsigned int v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  int v485;
  BOOL v486;
  uint64_t v487;
  _WORD *v488;
  int v489;
  int v490;
  unsigned int v491;
  unsigned int v492;
  uint64_t v493;
  unsigned int v494;
  int v495;
  unsigned int v496;
  _WORD *v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  uint64_t v501;
  int v502;
  _WORD *v503;
  int v504;
  _WORD *v505;
  int v506;
  uint64_t v507;
  uint64_t *v509;
  int v510;
  _WORD *v511;
  int v512;
  BOOL v513;
  uint64_t v514;
  _WORD *v515;
  int v516;
  int v517;
  unsigned int v518;
  unsigned int v519;
  uint64_t v520;
  int v521;
  BOOL v522;
  uint64_t v523;
  _WORD *v524;
  int v525;
  int v526;
  unsigned int v527;
  unsigned int v528;
  uint64_t v529;
  _WORD *v530;
  int v531;
  _WORD *v532;
  int v533;
  uint64_t v534;
  unint64_t v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  _WORD *v547;
  uint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  int v561;
  int v562;
  unsigned int v563;
  uint64_t v564;
  uint64_t v565;
  _WORD *v566;
  int v567;
  unsigned int v568;
  unsigned int v569;
  unsigned int v570;
  _WORD *v571;
  int v572;
  _WORD *v573;
  int v574;
  _WORD *v575;
  int v576;
  _WORD *v577;
  int v578;
  uint64_t v579;
  unint64_t v580;
  int v581;
  unsigned int v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  _QWORD *v587;
  unsigned int v588;
  uint64_t v589;
  int v590;
  unint64_t v591;
  uint64_t v592;
  unint64_t v593;
  unint64_t v594;
  uint64_t v595;
  _WORD *v596;
  unsigned int v597;
  unsigned int v598;
  uint64_t v599;
  int v600;
  int v601;
  _WORD *v602;
  int v603;
  _WORD *v604;
  int v605;
  uint64_t v606;
  uint64_t v608;
  uint64_t v609;
  int v610;
  int v611;
  uint64_t v612;
  unint64_t v613;
  unsigned int v614;
  uint64_t v615;
  unsigned int v616;
  unsigned __int16 *v617;
  unsigned int v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  unsigned __int16 *v622;
  uint64_t v623;
  unsigned __int16 *v624;
  uint64_t v625;
  int *v626;
  _OWORD *v627;
  int v628;
  unsigned int v629;
  int v630;
  uint64_t v631;
  int v632;
  int v634;
  unsigned int v635;
  unsigned int v636;
  int v637;
  uint64_t v638;
  int v639;
  int v641;
  unsigned int v642;
  unsigned int v643;
  int v644;
  uint64_t v645;
  int v646;
  int v648;
  unsigned int v649;
  unsigned int v650;
  int v651;
  uint64_t v652;
  int v653;
  int v655;
  unsigned int v656;
  unsigned int v657;
  int v658;
  uint64_t v659;
  int v660;
  int v662;
  unsigned int v663;
  unsigned int v664;
  int v665;
  uint64_t v666;
  int v667;
  int v669;
  unsigned int v670;
  unsigned int v671;
  int v672;
  uint64_t v673;
  int v674;
  int v676;
  unsigned int v677;
  unsigned int v678;
  int v679;
  uint64_t v680;
  int v681;
  uint64_t v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  uint64_t v687;
  _WORD *v688;
  _WORD *v689;
  int v690;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  _QWORD *v701;
  unsigned int v702;
  unsigned int v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  void *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  void *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  _WORD *v733;
  int v734;
  unsigned int v735;
  unsigned int v736;
  unsigned int v737;
  _WORD *v738;
  int v739;
  _WORD *v740;
  int v741;
  _WORD *v742;
  int v743;
  _WORD *v744;
  int v745;
  uint64_t v746;
  unint64_t v747;
  uint64_t v748;
  int v749;
  unsigned int v750;
  unint64_t v751;
  _WORD *v752;
  int v753;
  int v754;
  int v756;
  int v757;
  int v759;
  int v760;
  int v762;
  int v763;
  int v765;
  int v766;
  int v768;
  int v769;
  int v771;
  int v772;
  int v774;
  int v775;
  unint64_t v777;
  void *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  WTF::BitVector *v786;
  uint64_t v787;
  _WORD *v788;
  _WORD *v789;
  uint64_t v790;
  uint64_t *v791;
  _WORD *v792;
  _WORD *v793;
  unsigned int v794;
  unsigned int v795;
  uint64_t v796;
  int v797;
  int v798;
  _WORD *v799;
  int v800;
  _WORD *v801;
  int v802;
  uint64_t v803;
  uint64_t v805;
  unsigned int v806;
  _OWORD *v807;
  int v808;
  unsigned int v809;
  int v810;
  uint64_t v811;
  int v812;
  int v814;
  unsigned int v815;
  int v816;
  uint64_t v817;
  int v818;
  int v820;
  unsigned int v821;
  int v822;
  uint64_t v823;
  int v824;
  int v826;
  unsigned int v827;
  int v828;
  uint64_t v829;
  int v830;
  int v832;
  unsigned int v833;
  int v834;
  uint64_t v835;
  int v836;
  int v838;
  unsigned int v839;
  int v840;
  uint64_t v841;
  int v842;
  int v844;
  unsigned int v845;
  int v846;
  uint64_t v847;
  int v848;
  int v850;
  unsigned int v851;
  int v852;
  uint64_t v853;
  int v854;
  int v856;
  uint64_t *v857;
  uint64_t *v858;
  uint64_t v859;
  int v860;
  unsigned int v861;
  unsigned int v862;
  unsigned int v863;
  _WORD *v864;
  int v865;
  _WORD *v866;
  int v867;
  uint64_t v868;
  int v869;
  uint64_t v870;
  int v871;
  uint64_t v872;
  unint64_t v873;
  size_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  _WORD *v890;
  _WORD *v891;
  uint64_t v892;
  unint64_t v893;
  void *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  int v902;
  int v903;
  unsigned int v904;
  unsigned int v905;
  uint64_t v906;
  int v907;
  int v909;
  int v910;
  unsigned __int16 *v912;
  _WORD *v913;
  unint64_t v914;
  unint64_t v915;
  WTF::BitVector *v916;
  char v917;
  uint64_t v918;
  uint64_t v919;
  unint64_t v920;
  void *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  int v928;
  WTF *v929;
  void *v930;
  uint64_t v931;
  uint64_t v932;
  int *v933;
  uint64_t k;
  int v935;
  unsigned int v936;
  unsigned int v937;
  int v938;
  uint64_t v939;
  int v940;
  int v942;
  int v943;
  unint64_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  __int16 *v949;
  __int16 v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  void *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  _WORD *v961;
  unint64_t v962;
  int v963;
  int v964;
  int v966;
  int v967;
  int v969;
  int v970;
  int v972;
  int v973;
  int v975;
  int v976;
  int v978;
  int v979;
  int v981;
  int v982;
  int v984;
  int v985;
  uint64_t v987;
  unsigned __int16 *v988;
  unsigned int v989;
  uint64_t v990;
  uint64_t m;
  unsigned int v992;
  uint64_t v993;
  int v994;
  int v995;
  unsigned int v996;
  unsigned int v997;
  uint64_t v998;
  unsigned __int16 *v999;
  uint64_t v1000;
  uint64_t v1001;
  _DWORD *v1002;
  uint64_t v1003;
  unsigned int *v1004;
  unsigned __int16 **v1005;
  uint64_t v1006;
  uint64_t v1007;
  _WORD *v1008;
  void *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  _WORD *v1016;
  int v1017;
  _WORD *v1018;
  int v1019;
  uint64_t v1020;
  uint64_t v1022;
  uint64_t v1023;
  unsigned int v1024;
  unsigned int v1025;
  int v1026;
  _WORD *v1027;
  uint64_t v1028;
  unint64_t v1029;
  void *v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t *v1037;
  uint64_t v1038;
  uint64_t v1039;
  size_t __len;
  int __lena;
  uint64_t __lenb;
  int v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t *v1046;
  uint64_t v1047;
  int v1048;
  uint64_t v1049;
  int *v1050;
  unint64_t v1051;
  uint64_t v1052;
  _QWORD *__b;
  void *__ba;
  _DWORD *__bb;
  void *__bc;
  void *__bd;
  int *v1058;
  uint64_t v1059;
  _WORD *v1060;
  void **v1061;
  uint64_t v1062;
  unsigned int *v1063;
  _WORD *v1064;
  int v1065;
  _WORD *v1066;
  unsigned int *v1067;
  int v1068;
  unsigned int v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unsigned int v1073;
  unint64_t v1074;
  _QWORD *v1075;
  _WORD *v1076;
  _WORD *v1077;
  _WORD *v1078;
  _WORD *v1079;
  _WORD *v1080;
  _WORD *v1081;
  _QWORD *v1082;
  unint64_t v1083;
  unsigned __int16 *v1084;
  _WORD *v1085;
  _WORD *v1086;
  __int16 v1087;
  unint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  _QWORD *v1091;
  uint64_t *v1092;
  _QWORD *v1093;
  _QWORD *v1094;
  uint64_t *v1095;
  unsigned int *v1096;
  uint64_t *v1097;
  uint64_t v1098;
  WTF *v1099;
  unint64_t v1100;
  WTF *v1101;
  WTF *v1102;
  int v1103;
  WTF *v1104;
  int v1105;
  unsigned int v1106;
  unint64_t *v1107;
  _QWORD v1108[16];
  _WORD v1109[15];
  unsigned __int16 v1110;
  uint64_t v1111;
  unint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;

  v1114 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t *)(a1 + 360);
  v10 = (*(_DWORD *)(a1 + 348) + *(_DWORD *)(a1 + 332));
  v11 = *(_QWORD *)(a1 + 360);
  if (v11 < 0)
    v12 = 63;
  else
    v12 = *(_QWORD *)(2 * v11);
  if (v12 < v10)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 360), v10, 0);
  v1096 = (unsigned int *)(a1 + 332);
  v13 = (unsigned int *)(a1 + 348);
  v22 = (uint64_t *)(a1 + 304);
  v1097 = (uint64_t *)(a1 + 168);
  v1107 = (unint64_t *)(a1 + 368);
  v1093 = (_QWORD *)(a1 + 176);
  v1094 = (_QWORD *)(a1 + 296);
  v23 = (uint64_t *)(a1 + 336);
  v1091 = (_QWORD *)(a1 + 192);
  v1092 = (uint64_t *)(a1 + 320);
  v1095 = (uint64_t *)(a1 + 80);
  v24 = *(_DWORD *)(a1 + 204);
  v1098 = a1 + 304;
  while (1)
  {
    do
    {
LABEL_6:
      if (v24)
      {
        v65 = *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v24 - 2);
        *(_DWORD *)(a1 + 204) = v24 - 1;
        LOWORD(v1111) = v65;
        v66 = *(unsigned int *)(a1 + 188);
        if ((_DWORD)v66 == *(_DWORD *)(a1 + 184))
        {
          v511 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1093, v66 + 1, (unint64_t)&v1111);
          v22 = (uint64_t *)(a1 + 304);
          v66 = *(unsigned int *)(a1 + 188);
          *(_WORD *)(*(_QWORD *)(a1 + 176) + 2 * v66) = *v511;
        }
        else
        {
          *(_WORD *)(*v1093 + 2 * v66) = v65;
        }
        *(_DWORD *)(a1 + 188) = v66 + 1;
        v67 = (unsigned __int16)v1111;
        v68 = *(_QWORD *)(a1 + 168);
        v69 = 2 * v68 + 8;
        v70 = v68 < 0;
        v71 = a1 + 168;
        if (!v70)
          v71 = v69;
        *(_QWORD *)(v71 + (((unint64_t)(unsigned __int16)v1111 >> 3) & 0x1FF8)) |= 1 << v1111;
        v72 = *(_QWORD *)(a1 + 48) + 16 * v67;
        v73 = *(unsigned int *)(v72 + 12);
        if (!(_DWORD)v73)
          goto LABEL_341;
        v74 = *(_WORD **)v72;
        v75 = *(_QWORD *)v72 + 2 * v73;
        while (1)
        {
          v76 = (unsigned __int16)*v74;
          v77 = 2 * *v1097 + 8;
          if (*v1097 < 0)
            v77 = a1 + 168;
          v78 = v76 >> 6;
          v79 = *(_QWORD *)(v77 + 8 * (v76 >> 6));
          v80 = 1 << v76;
          if (((1 << v76) & v79) != 0)
            goto LABEL_88;
          v81 = *(_QWORD *)(a1 + 152);
          if (*(_WORD *)(v81 + 2 * v76))
            goto LABEL_88;
          LOWORD(v1108[0]) = *v74;
          v82 = *(_QWORD *)(a1 + 64);
          v83 = *(unsigned __int16 *)(v82 + 2 * v76);
          *(_WORD *)(v82 + 2 * v76) = v83 - 1;
          if (*(_DWORD *)(a1 + 12) != v83)
            goto LABEL_88;
          v550 = *(_QWORD *)(a1 + 368);
          v551 = 2 * v550 + 8;
          v70 = v550 < 0;
          v552 = a1 + 368;
          if (!v70)
            v552 = v551;
          *(_QWORD *)(v552 + 8 * v78) |= v80;
          v553 = *(_QWORD *)(a1 + 48) + 16 * v76;
          v554 = *(unsigned int *)(v553 + 12);
          if ((_DWORD)v554)
          {
            v89 = *(unsigned __int16 **)v553;
            v90 = 2 * v554;
            do
            {
              v84 = *v89;
              v85 = 2 * *v1097 + 8;
              if (*v1097 < 0)
                v85 = a1 + 168;
              v86 = v84 >> 6;
              v87 = *(_QWORD *)(v85 + 8 * (v84 >> 6));
              v88 = 1 << v84;
              if (((1 << v84) & v87) == 0 && !*(_WORD *)(v81 + 2 * v84))
              {
                if ((*v1107 & 0x8000000000000000) == 0)
                  v91 = 2 * *v1107 + 8;
                else
                  v91 = a1 + 368;
                *(_QWORD *)(v91 + 8 * v86) |= v88;
              }
              ++v89;
              v90 -= 2;
            }
            while (v90);
          }
          v555 = *(_QWORD *)(a1 + 208);
          if (v555 >= 0)
            v556 = 2 * v555 + 8;
          else
            v556 = a1 + 208;
          *(_QWORD *)(v556 + 8 * v78) &= ~v80;
          if (*(_DWORD *)(a1 + 116) <= v76)
          {
            __break(0xC471u);
            JUMPOUT(0x198069F90);
          }
          v557 = *(_QWORD *)(a1 + 104) + 40 * v76;
          v558 = *(unsigned int *)(v557 + 4);
          v559 = (_QWORD *)(v557 + 8);
          if ((_DWORD)v558 != 8)
            v559 = (_QWORD *)*v559;
          v496 = 0;
          while ((_DWORD)v558 != v496)
          {
            v494 = v496;
            v495 = *((_DWORD *)v559 + v496++);
            if (v495 != -1)
            {
              v96 = v494;
              goto LABEL_782;
            }
          }
          v96 = v558;
LABEL_782:
          if ((_DWORD)v558 == (_DWORD)v96)
          {
LABEL_808:
            v565 = *(unsigned int *)(a1 + 204);
            if ((_DWORD)v565 == *(_DWORD *)(a1 + 200))
            {
              v789 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1091, v565 + 1, (unint64_t)v1108);
              v22 = (uint64_t *)(a1 + 304);
              v790 = *(unsigned int *)(a1 + 204);
              *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v790) = *v789;
              *(_DWORD *)(a1 + 204) = v790 + 1;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v565) = v76;
              *(_DWORD *)(a1 + 204) = v565 + 1;
            }
          }
          else
          {
            v95 = v96 | (v558 << 32);
            if (*v9 >= 0)
              v560 = 2 * *v9 + 8;
            else
              v560 = (uint64_t)v9;
            while (1)
            {
              v92 = *((unsigned int *)v559 + v95);
              if (((*(_QWORD *)(v560 + ((v92 >> 3) & 0x1FFFFFF8)) >> v92) & 1) != 0
                || *(_DWORD *)(*v22 + 4 * v92) != -1)
              {
                break;
              }
              v93 = HIDWORD(v95);
              if ((v96 + 1) > HIDWORD(v95))
                LODWORD(v93) = v96 + 1;
              while (1)
              {
                v94 = (v96 + 1);
                v95 = v95 & 0xFFFFFFFF00000000 | v94;
                if ((_DWORD)v93 - 1 == (_DWORD)v96)
                  break;
                LODWORD(v96) = v96 + 1;
                if (*((_DWORD *)v559 + v94) != -1)
                  goto LABEL_109;
              }
              LODWORD(v94) = v93;
LABEL_109:
              LODWORD(v96) = v94;
              if ((_DWORD)v558 == (_DWORD)v94)
                goto LABEL_808;
            }
            v566 = (_WORD *)*v1094;
            if (*v1094)
              goto LABEL_811;
            v893 = WTF::fastZeroedMalloc(0x20uLL, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
            v22 = (uint64_t *)(a1 + 304);
            *v1094 = v893 + 16;
            *(_DWORD *)(v893 + 12) = 8;
            *(_DWORD *)(*v1094 - 8) = 7;
            *(_DWORD *)(*v1094 - 16) = 0;
            *(_DWORD *)(*v1094 - 12) = 0;
            v566 = (_WORD *)*v1094;
            if (*v1094)
LABEL_811:
              v567 = *((_DWORD *)v566 - 2);
            else
              v567 = 0;
            v568 = ~(LOWORD(v1108[0]) << 15) + LOWORD(v1108[0]);
            v569 = (9 * (v568 ^ (v568 >> 10))) ^ ((9 * (v568 ^ (v568 >> 10))) >> 6);
            v570 = ((v569 + ~(v569 << 11)) ^ ((v569 + ~(v569 << 11)) >> 16)) & v567;
            v571 = &v566[v570];
            v572 = (unsigned __int16)*v571;
            if (*v571)
            {
              v573 = 0;
              v574 = 1;
              do
              {
                if (v572 == LOWORD(v1108[0]))
                  goto LABEL_88;
                if (v572 == 0xFFFF)
                  v573 = v571;
                v570 = (v570 + v574) & v567;
                v571 = &v566[v570];
                v572 = (unsigned __int16)*v571;
                ++v574;
              }
              while (*v571);
              if (v573)
              {
                *v573 = 0;
                --*(_DWORD *)(*v1094 - 16);
                v571 = v573;
              }
            }
            *v571 = v1108[0];
            v575 = (_WORD *)*v1094;
            if (*v1094)
              v576 = *((_DWORD *)v575 - 3) + 1;
            else
              v576 = 1;
            *((_DWORD *)v575 - 3) = v576;
            v577 = (_WORD *)*v1094;
            if (*v1094)
              v578 = *((_DWORD *)v577 - 3);
            else
              v578 = 0;
            v579 = (*((_DWORD *)v577 - 4) + v578);
            v580 = *((unsigned int *)v577 - 1);
            if (v580 > 0x400)
            {
              if (v580 <= 2 * v579)
                goto LABEL_1097;
            }
            else if (3 * v580 <= 4 * v579)
            {
              if ((_DWORD)v580)
              {
LABEL_1097:
                v1102 = (WTF *)(v577 - 8);
                v581 = *((_DWORD *)v577 - 3);
                v582 = (_DWORD)v580 << (6 * v581 >= (2 * v580));
              }
              else
              {
                v1102 = (WTF *)(v577 - 8);
                v581 = *((_DWORD *)v577 - 3);
                v582 = 8;
              }
              v583 = WTF::fastZeroedMalloc(2 * v582 + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
              *v1094 = v583 + 16;
              *(_DWORD *)(v583 + 12) = v582;
              *(_DWORD *)(*v1094 - 8) = v582 - 1;
              *(_DWORD *)(*v1094 - 16) = 0;
              *(_DWORD *)(*v1094 - 12) = v581;
              v22 = (uint64_t *)(a1 + 304);
              if (!(_DWORD)v580)
                goto LABEL_1105;
              for (i = 0; i != v580; ++i)
              {
                v97 = (unsigned __int16)v577[i];
                if (v577[i])
                  v98 = v97 == 0xFFFF;
                else
                  v98 = 1;
                if (!v98)
                {
                  v100 = (_WORD *)*v1094;
                  if (*v1094)
                    v101 = *((_DWORD *)v100 - 2);
                  else
                    v101 = 0;
                  v102 = 0;
                  v103 = 9 * ((~(v97 << 15) + v97) ^ ((~(v97 << 15) + v97) >> 10));
                  v104 = ((v103 ^ (v103 >> 6)) + ~((v103 ^ (v103 >> 6)) << 11)) ^ (((v103 ^ (v103 >> 6))
                                                                                  + ~((v103 ^ (v103 >> 6)) << 11)) >> 16);
                  do
                  {
                    v105 = v104 & v101;
                    v104 = ++v102 + v105;
                  }
                  while (v100[v105]);
                  v100[v105] = v97;
                }
              }
              if (v577)
              {
LABEL_1105:
                WTF::fastFree((unint64_t)v1102, (void *)v14, v15, v16, v17, v18, v1098, 1);
                v22 = (uint64_t *)(a1 + 304);
              }
            }
          }
LABEL_88:
          if (++v74 == (_WORD *)v75)
            goto LABEL_341;
        }
      }
      v25 = *v1107;
      if ((*v1107 & 0x8000000000000000) == 0)
      {
        v26 = 2 * v25;
        v27 = *(_QWORD *)(2 * v25);
        v28 = 8 * ((unint64_t)(v27 + 63) >> 6);
        do
        {
          if (!v28)
            goto LABEL_182;
          v29 = *(_QWORD *)(v26 + v28);
          v28 -= 8;
        }
        while (!v29);
        if ((unint64_t)(v27 + 63) >= 0x40)
        {
          v30 = *(_QWORD *)(2 * v25 + 8);
          if (v30)
          {
            v31 = __clz(__rbit64(v30));
            if (v31 < 0x40)
            {
              v32 = 0;
LABEL_15:
              v33 = v31 + (v32 << 6);
              goto LABEL_16;
            }
          }
          if ((unint64_t)(v27 + 63) >> 6 != 1)
          {
            v62 = 0;
            v63 = v26 + 16;
            while (1)
            {
              v64 = *(_QWORD *)(v63 + 8 * v62);
              if (v64)
              {
                v31 = __clz(__rbit64(v64));
                if (v31 <= 0x3F)
                  break;
              }
              if (((unint64_t)(v27 + 63) >> 6) - 1 == ++v62)
                goto LABEL_73;
            }
            v32 = v62 + 1;
            goto LABEL_15;
          }
        }
LABEL_73:
        if ((v25 & 0x8000000000000000) != 0)
        {
          *v1107 = 0x8000000000000000;
          goto LABEL_341;
        }
        bzero((void *)(2 * v25 + 8), (unint64_t)(*(_QWORD *)(2 * v25) + 7) >> 3);
        goto LABEL_75;
      }
      if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v945 = __clz(__rbit64(v25));
        v27 = 63;
        if (v945 >= 0x3F)
          v33 = 63;
        else
          v33 = v945;
LABEL_16:
        if (v33 != v27)
        {
          v1099 = (WTF *)v27;
          while (1)
          {
            if (*(_DWORD *)(a1 + 116) <= (unsigned __int16)v33)
            {
              __break(0xC471u);
              JUMPOUT(0x198069CB0);
            }
            v34 = *(_QWORD *)(a1 + 104) + 40 * (unsigned __int16)v33;
            v35 = *(unsigned int *)(v34 + 4);
            v36 = (_QWORD *)(v34 + 8);
            if ((_DWORD)v35 != 8)
              v36 = (_QWORD *)*v36;
            v37 = 0;
            while ((_DWORD)v35 != v37)
            {
              v38 = v37;
              v39 = *((_DWORD *)v36 + v37++);
              if (v39 != -1)
              {
                v40 = v38;
                goto LABEL_25;
              }
            }
            v40 = v35;
LABEL_25:
            if ((_DWORD)v35 != (_DWORD)v40)
            {
              v41 = v40 | (v35 << 32);
              do
              {
                v42 = *((unsigned int *)v36 + v41);
                if (*v9 >= 0)
                  v43 = 2 * *v9 + 8;
                else
                  v43 = (uint64_t)v9;
                v44 = (v42 >> 3) & 0x1FFFFFF8;
                v45 = *(_QWORD *)(v43 + v44);
                *(_QWORD *)(v43 + v44) = v45 & ~(1 << v42);
                if (((1 << v42) & v45) != 0)
                {
                  LODWORD(v1108[0]) = v42;
                  if (*(_DWORD *)(a1 + 352) > v42)
                  {
                    v46 = *(unsigned int *)(a1 + 332);
                    if ((_DWORD)v46 == *(_DWORD *)(a1 + 328))
                    {
                      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)v1092, (unint64_t)v1108);
                      v22 = (uint64_t *)(a1 + 304);
                      v27 = (uint64_t)v1099;
                    }
                    else
                    {
                      *(_DWORD *)(*v1092 + 4 * v46) = v42;
                      ++*v1096;
                    }
                  }
                  else
                  {
                    v46 = *(unsigned int *)(a1 + 348);
                    if ((_DWORD)v46 == *(_DWORD *)(a1 + 344))
                    {
                      v49 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 336, v46 + 1, (unint64_t)v1108);
                      v22 = (uint64_t *)(a1 + 304);
                      v27 = (uint64_t)v1099;
                      *(_DWORD *)(*v23 + 4 * *v13) = *v49;
                    }
                    else
                    {
                      *(_DWORD *)(*v23 + 4 * v46) = v42;
                    }
                    ++*v13;
                  }
                  *(_DWORD *)(*v22 + 4 * LODWORD(v1108[0])) = v46;
                }
                v47 = HIDWORD(v41);
                if ((v40 + 1) > HIDWORD(v41))
                  LODWORD(v47) = v40 + 1;
                while (1)
                {
                  v48 = (v40 + 1);
                  v41 = v41 & 0xFFFFFFFF00000000 | v48;
                  if ((_DWORD)v47 - 1 == (_DWORD)v40)
                    break;
                  LODWORD(v40) = v40 + 1;
                  if (*((_DWORD *)v36 + v48) != -1)
                    goto LABEL_40;
                }
                LODWORD(v48) = v47;
LABEL_40:
                LODWORD(v40) = v48;
              }
              while ((_DWORD)v35 != (_DWORD)v48);
              v25 = *v1107;
            }
            v50 = v33 + 1;
            if ((v25 & 0x8000000000000000) != 0)
            {
              v56 = __clz(__rbit64(v25 >> v50)) + v50;
              if (v56 >= 0x3F)
                v33 = 63;
              else
                v33 = v56;
              goto LABEL_49;
            }
            v33 = *(_QWORD *)(2 * v25);
            v51 = v33 + 63;
            v52 = v50 >> 6;
            if (v50 >> 6 < (unint64_t)(v33 + 63) >> 6)
            {
              v53 = *(_QWORD *)(2 * v25 + 8 * v52 + 8);
              if (!v53 || (v54 = __clz(__rbit64(v53 >> v50)) + (v50 & 0x3F), v54 >= 0x40))
              {
                if (v52 + 1 == v51 >> 6)
                  goto LABEL_49;
                while (1)
                {
                  v55 = *(_QWORD *)(2 * v25 + 0x10 + 8 * v52);
                  if (v55)
                  {
                    v54 = __clz(__rbit64(v55));
                    if (v54 <= 0x3F)
                      break;
                  }
                  if ((v51 >> 6) - 1 == ++v52)
                    goto LABEL_49;
                }
                ++v52;
              }
              v33 = v54 + (v52 << 6);
            }
LABEL_49:
            if (v33 == v27)
              goto LABEL_73;
          }
        }
        goto LABEL_73;
      }
LABEL_182:
      v151 = *v1096;
      if (*v1096)
      {
        v152 = (_QWORD *)(a1 + 320);
        v153 = (_DWORD *)(a1 + 332);
      }
      else
      {
        v151 = *v13;
        v152 = (_QWORD *)(a1 + 336);
        v153 = (_DWORD *)(a1 + 348);
        if (!*v13)
        {
          v547 = (_WORD *)*v1094;
          if (*v1094 && *((_DWORD *)v547 - 3))
          {
            LOWORD(v1111) = 0;
            v608 = *((unsigned int *)v547 - 1);
            if ((_DWORD)v608)
            {
              v109 = 2 * v608;
              v108 = v547;
              while ((unsigned __int16)(*v108 + 1) <= 1u)
              {
                ++v108;
                v109 -= 2;
                if (!v109)
                  goto LABEL_1367;
              }
            }
            else
            {
              v108 = v547;
            }
            if (&v547[v608] == v108)
            {
LABEL_1367:
              v951 = 0;
            }
            else
            {
              v951 = (unsigned __int16)*v108;
              *v108 = -1;
              ++*(_DWORD *)(*v1094 - 16);
              v1016 = (_WORD *)*v1094;
              if (*v1094)
                v1017 = *((_DWORD *)v1016 - 3) - 1;
              else
                v1017 = -1;
              *((_DWORD *)v1016 - 3) = v1017;
              v1018 = (_WORD *)*v1094;
              if (*v1094)
              {
                v1019 = *((_DWORD *)v1018 - 3);
                v1020 = *((unsigned int *)v1018 - 1);
                if (6 * v1019 < v1020 && v1020 >= 9)
                {
                  v1028 = v951;
                  v1029 = WTF::fastZeroedMalloc((v1020 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                  v514 = 0;
                  *v1094 = v1029 + 16;
                  *(_DWORD *)(v1029 + 12) = v1020 >> 1;
                  *(_DWORD *)(*v1094 - 8) = (v1020 >> 1) - 1;
                  *(_DWORD *)(*v1094 - 16) = 0;
                  *(_DWORD *)(*v1094 - 12) = v1019;
                  do
                  {
                    v512 = (unsigned __int16)v1018[v514];
                    if (v1018[v514])
                      v513 = v512 == 0xFFFF;
                    else
                      v513 = 1;
                    if (!v513)
                    {
                      v515 = (_WORD *)*v1094;
                      if (*v1094)
                        v516 = *((_DWORD *)v515 - 2);
                      else
                        v516 = 0;
                      v517 = 0;
                      v518 = 9 * ((~(v512 << 15) + v512) ^ ((~(v512 << 15) + v512) >> 10));
                      v519 = ((v518 ^ (v518 >> 6)) + ~((v518 ^ (v518 >> 6)) << 11)) ^ (((v518 ^ (v518 >> 6))
                                                                                      + ~((v518 ^ (v518 >> 6)) << 11)) >> 16);
                      do
                      {
                        v520 = v519 & v516;
                        v519 = ++v517 + v520;
                      }
                      while (v515[v520]);
                      v515[v520] = v512;
                    }
                    ++v514;
                  }
                  while (v514 != v1020);
                  WTF::fastFree((unint64_t)(v1018 - 8), v1030, v1031, v1032, v1033, v1034, v1035, v1036);
                  v22 = (uint64_t *)(a1 + 304);
                  v951 = v1028;
                }
              }
            }
            LOWORD(v1111) = v951;
            v1022 = *(unsigned int *)(a1 + 204);
            if ((_DWORD)v1022 == *(_DWORD *)(a1 + 200))
            {
              v1027 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1091, v1022 + 1, (unint64_t)&v1111);
              v22 = (uint64_t *)(a1 + 304);
              v1022 = *(unsigned int *)(a1 + 204);
              *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v1022) = *v1027;
              v951 = (unsigned __int16)v1111;
            }
            else
            {
              *(_WORD *)(*v1091 + 2 * v1022) = v951;
            }
            *(_DWORD *)(a1 + 204) = v1022 + 1;
            if (*(_DWORD *)(a1 + 116) <= v951)
            {
              __break(0xC471u);
              JUMPOUT(0x19806A004);
            }
            v1023 = *(_QWORD *)(a1 + 104) + 40 * v951;
            v952 = *(unsigned int *)(v1023 + 4);
            v14 = v1023 + 8;
            if ((_DWORD)v952 != 8)
              v14 = *(_QWORD *)v14;
            v1024 = 0;
            while ((_DWORD)v952 != v1024)
            {
              v1025 = v1024;
              v1026 = *(_DWORD *)(v14 + 4 * v1024++);
              if (v1026 != -1)
              {
                v311 = v1025;
LABEL_1361:
                if ((_DWORD)v952 == (_DWORD)v311)
                  goto LABEL_341;
                v310 = v311 | (v952 << 32);
                while (1)
                {
                  v299 = *(unsigned int *)(v14 + 4 * v310);
                  if (*v9 >= 0)
                    v300 = 2 * *v9 + 8;
                  else
                    v300 = (uint64_t)v9;
                  if (((*(_QWORD *)(v300 + ((v299 >> 3) & 0x1FFFFFF8)) >> v299) & 1) != 0
                    || *(_DWORD *)(*v22 + 4 * v299) != -1)
                  {
                    v301 = (unsigned __int16)*(_DWORD *)(v14 + 4 * v310);
                    v302 = (v301 >> 3) & 0x1FF8;
                    v303 = *(_QWORD *)(v300 + v302);
                    *(_QWORD *)(v300 + v302) = v303 & ~(1 << *(_DWORD *)(v14 + 4 * v310));
                    if ((v303 & (1 << v301)) == 0)
                    {
                      v1000 = *v22;
                      v1001 = *(unsigned int *)(*v22 + 4 * v301);
                      if ((_DWORD)v1001 != -1)
                      {
                        if (*(_DWORD *)(a1 + 352) <= v301)
                        {
                          v1003 = *v23;
                          v1004 = (unsigned int *)(*v23 + 4 * *v13 - 4);
                          v1002 = (_DWORD *)(a1 + 348);
                        }
                        else
                        {
                          v1002 = (_DWORD *)(a1 + 332);
                          v1003 = *v1092;
                          v1004 = (unsigned int *)(*v1092 + 4 * *v1096 - 4);
                        }
                        v1007 = *v1004;
                        *(_DWORD *)(v1000 + 4 * v1007) = v1001;
                        *(_DWORD *)(v1003 + 4 * v1001) = v1007;
                        --*v1002;
                        *(_DWORD *)(v1000 + 4 * v301) = -1;
                        v22 = (uint64_t *)(a1 + 304);
                      }
                    }
                    v304 = (unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 4 * v301);
                    v305 = *v304;
                    v306 = v304[1];
                    if (v305 != (_DWORD)v951)
                      v306 = v305;
                    do
                    {
                      v307 = v306;
                      v306 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v306);
                    }
                    while (v306);
                    v15 = v307;
                    LOWORD(v1108[0]) = v307;
                    if (*(_DWORD *)(a1 + 12) > *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v307))
                    {
                      if (*(_DWORD *)(a1 + 116) <= v307)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198069FF4);
                      }
                      v326 = *(_QWORD *)(a1 + 104) + 40 * v307;
                      v327 = *(unsigned int *)(v326 + 4);
                      v328 = (_QWORD *)(v326 + 8);
                      if ((_DWORD)v327 != 8)
                        v328 = (_QWORD *)*v328;
                      v329 = 0;
                      do
                      {
                        if ((_DWORD)v327 == v329)
                        {
                          v316 = v327;
                          goto LABEL_461;
                        }
                        v330 = v329;
                        v331 = *((_DWORD *)v328 + v329++);
                      }
                      while (v331 == -1);
                      v316 = v330;
LABEL_461:
                      if ((_DWORD)v327 == (_DWORD)v316)
                      {
LABEL_1080:
                        v793 = (_WORD *)*v1094;
                        if (*v1094)
                        {
                          v794 = *((_DWORD *)v793 - 2);
                          v795 = 9 * ((~((_DWORD)v15 << 15) + v15) ^ ((~((_DWORD)v15 << 15) + v15) >> 10));
                          v796 = v794 & (((v795 ^ (v795 >> 6)) + ~((v795 ^ (v795 >> 6)) << 11)) ^ (((v795 ^ (v795 >> 6))
                                                                                                  + ~((v795 ^ (v795 >> 6)) << 11)) >> 16));
                          v797 = (unsigned __int16)v793[v796];
                          if (v797 != (_DWORD)v15)
                          {
                            v798 = 1;
                            while (v797)
                            {
                              v796 = ((_DWORD)v796 + v798) & v794;
                              v797 = (unsigned __int16)v793[v796];
                              ++v798;
                              if (v797 == (_DWORD)v15)
                                goto LABEL_1085;
                            }
                            v796 = *((unsigned int *)v793 - 1);
                          }
LABEL_1085:
                          if (v796 != *((_DWORD *)v793 - 1))
                          {
                            v793[v796] = -1;
                            ++*(_DWORD *)(*v1094 - 16);
                            v799 = (_WORD *)*v1094;
                            if (*v1094)
                              v800 = *((_DWORD *)v799 - 3) - 1;
                            else
                              v800 = -1;
                            *((_DWORD *)v799 - 3) = v800;
                            v801 = (_WORD *)*v1094;
                            if (*v1094)
                            {
                              v802 = *((_DWORD *)v801 - 3);
                              v803 = *((unsigned int *)v801 - 1);
                              if (6 * v802 < v803 && v803 >= 9)
                              {
                                v1074 = v15;
                                v1083 = v14;
                                v1090 = v952;
                                v1106 = v951;
                                v953 = WTF::fastZeroedMalloc((v803 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                                v319 = 0;
                                *v1094 = v953 + 16;
                                *(_DWORD *)(v953 + 12) = v803 >> 1;
                                *(_DWORD *)(*v1094 - 8) = (v803 >> 1) - 1;
                                *(_DWORD *)(*v1094 - 16) = 0;
                                *(_DWORD *)(*v1094 - 12) = v802;
                                do
                                {
                                  v317 = (unsigned __int16)v801[v319];
                                  if (v801[v319])
                                    v318 = v317 == 0xFFFF;
                                  else
                                    v318 = 1;
                                  if (!v318)
                                  {
                                    v320 = (_WORD *)*v1094;
                                    if (*v1094)
                                      v321 = *((_DWORD *)v320 - 2);
                                    else
                                      v321 = 0;
                                    v322 = 0;
                                    v323 = 9 * ((~(v317 << 15) + v317) ^ ((~(v317 << 15) + v317) >> 10));
                                    v324 = ((v323 ^ (v323 >> 6)) + ~((v323 ^ (v323 >> 6)) << 11)) ^ (((v323 ^ (v323 >> 6)) + ~((v323 ^ (v323 >> 6)) << 11)) >> 16);
                                    do
                                    {
                                      v325 = v324 & v321;
                                      v324 = ++v322 + v325;
                                    }
                                    while (v320[v325]);
                                    v320[v325] = v317;
                                  }
                                  ++v319;
                                }
                                while (v319 != v803);
                                WTF::fastFree((unint64_t)(v801 - 8), v954, v955, v956, v957, v958, v959, v960);
                                v22 = (uint64_t *)(a1 + 304);
                                v951 = v1106;
                                v14 = v1083;
                                v952 = v1090;
                                v15 = v1074;
                              }
                            }
                            v805 = *(unsigned int *)(a1 + 204);
                            if ((_DWORD)v805 == *(_DWORD *)(a1 + 200))
                            {
                              v946 = v14;
                              v947 = v952;
                              v948 = v951;
                              v949 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1091, v805 + 1, (unint64_t)v1108);
                              v14 = v946;
                              v951 = v948;
                              v22 = (uint64_t *)(a1 + 304);
                              v805 = *(unsigned int *)(a1 + 204);
                              v950 = *v949;
                              v952 = v947;
                              *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v805) = v950;
                            }
                            else
                            {
                              *(_WORD *)(*v1091 + 2 * v805) = v15;
                            }
                            *(_DWORD *)(a1 + 204) = v805 + 1;
                          }
                        }
                      }
                      else
                      {
                        v315 = v316 | (v327 << 32);
                        if (*v9 >= 0)
                          v785 = 2 * *v9 + 8;
                        else
                          v785 = (uint64_t)v9;
                        while (1)
                        {
                          v312 = *((unsigned int *)v328 + v315);
                          if (((*(_QWORD *)(v785 + ((v312 >> 3) & 0x1FFFFFF8)) >> v312) & 1) != 0
                            || *(_DWORD *)(*v22 + 4 * v312) != -1)
                          {
                            break;
                          }
                          v313 = HIDWORD(v315);
                          if ((v316 + 1) > HIDWORD(v315))
                            LODWORD(v313) = v316 + 1;
                          while (1)
                          {
                            v314 = (v316 + 1);
                            v315 = v315 & 0xFFFFFFFF00000000 | v314;
                            if ((_DWORD)v313 - 1 == (_DWORD)v316)
                              break;
                            LODWORD(v316) = v316 + 1;
                            if (*((_DWORD *)v328 + v314) != -1)
                              goto LABEL_439;
                          }
                          LODWORD(v314) = v313;
LABEL_439:
                          LODWORD(v316) = v314;
                          if ((_DWORD)v327 == (_DWORD)v314)
                            goto LABEL_1080;
                        }
                      }
                    }
                  }
                  v308 = HIDWORD(v310);
                  if ((v311 + 1) > HIDWORD(v310))
                    LODWORD(v308) = v311 + 1;
                  while (1)
                  {
                    v309 = (v311 + 1);
                    v310 = v310 & 0xFFFFFFFF00000000 | v309;
                    if ((_DWORD)v308 - 1 == (_DWORD)v311)
                      break;
                    LODWORD(v311) = v311 + 1;
                    if (*(_DWORD *)(v14 + 4 * v309) != -1)
                      goto LABEL_429;
                  }
                  LODWORD(v309) = v308;
LABEL_429:
                  LODWORD(v311) = v309;
                  if ((_DWORD)v952 == (_DWORD)v309)
                    goto LABEL_341;
                }
              }
            }
            v311 = v952;
            goto LABEL_1361;
          }
          v548 = *(_QWORD *)(a1 + 208);
          if (v548 < 0)
          {
            if ((v548 & 0x7FFFFFFFFFFFFFFFLL) == 0)
              goto LABEL_341;
          }
          else
          {
            v549 = (_QWORD *)(2 * v548);
            v111 = ((unint64_t)(*v549 + 63) >> 6);
            do
            {
              if (!(v111 * 8))
                goto LABEL_341;
            }
            while (!v549[v111--]);
          }
LABEL_75:
          v22 = (uint64_t *)(a1 + 304);
          goto LABEL_341;
        }
      }
      v154 = *(unsigned int *)(*v152 + 4 * v151 - 4);
      *v153 = v151 - 1;
      v155 = *(_QWORD *)(a1 + 304);
      *(_DWORD *)(v155 + 4 * v154) = -1;
      v156 = *(_QWORD *)(a1 + 88);
      v157 = *(unsigned __int16 *)(v156 + 4 * v154);
      v706 = *(_QWORD *)(a1 + 152);
      do
      {
        v158 = v157;
        v157 = *(unsigned __int16 *)(v706 + 2 * (unsigned __int16)v157);
      }
      while ((_DWORD)v157);
      v159 = *(unsigned __int16 *)(v156 + 4 * v154 + 2);
      do
      {
        v160 = v159;
        v159 = *(unsigned __int16 *)(v706 + 2 * (unsigned __int16)v159);
      }
      while ((_DWORD)v159);
      v161 = *(unsigned __int16 *)(a1 + 16);
      if (v161 >= (unsigned __int16)v160)
      {
        v162 = v160;
      }
      else
      {
        v162 = v158;
        LODWORD(v158) = v160;
      }
      if ((unsigned __int16)v162 == (unsigned __int16)v158)
      {
        LOWORD(v1108[0]) = v162;
        if (v161 >= (unsigned __int16)v162
          || *(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 64)
                                                                       + 2 * (unsigned __int16)v162))
        {
          goto LABEL_341;
        }
        if (*(_DWORD *)(a1 + 116) <= (unsigned __int16)v162)
        {
          __break(0xC471u);
          JUMPOUT(0x198069FFCLL);
        }
        v585 = *(_QWORD *)(a1 + 104) + 40 * (unsigned __int16)v162;
        v586 = *(unsigned int *)(v585 + 4);
        v587 = (_QWORD *)(v585 + 8);
        if ((_DWORD)v586 != 8)
          v587 = (_QWORD *)*v587;
        v588 = 0;
        while ((_DWORD)v586 != v588)
        {
          LODWORD(v589) = v588;
          v590 = *((_DWORD *)v587 + v588++);
          if (v590 != -1)
          {
            v589 = v589;
            goto LABEL_846;
          }
        }
        v589 = v586;
LABEL_846:
        if ((_DWORD)v586 != (_DWORD)v589)
        {
          v591 = v589 | (v586 << 32);
          if (*v9 >= 0)
            v592 = 2 * *v9 + 8;
          else
            v592 = (uint64_t)v9;
          do
          {
            v593 = *((unsigned int *)v587 + v591);
            if (((*(_QWORD *)(v592 + ((v593 >> 3) & 0x1FFFFFF8)) >> v593) & 1) != 0
              || *(_DWORD *)(v155 + 4 * v593) != -1)
            {
              goto LABEL_341;
            }
            v594 = HIDWORD(v591);
            if ((v589 + 1) > HIDWORD(v591))
              LODWORD(v594) = v589 + 1;
            while (1)
            {
              v595 = (v589 + 1);
              v591 = v591 & 0xFFFFFFFF00000000 | v595;
              if ((_DWORD)v594 - 1 == (_DWORD)v589)
                break;
              LODWORD(v589) = v589 + 1;
              if (*((_DWORD *)v587 + v595) != -1)
                goto LABEL_856;
            }
            LODWORD(v595) = v594;
LABEL_856:
            LODWORD(v589) = v595;
          }
          while ((_DWORD)v586 != (_DWORD)v595);
        }
        v596 = (_WORD *)*v1094;
        if (*v1094)
        {
          v597 = *((_DWORD *)v596 - 2);
          v598 = 9
               * ((~((unsigned __int16)v162 << 15) + (unsigned __int16)v162) ^ ((~((unsigned __int16)v162 << 15)
                                                                               + (unsigned __int16)v162) >> 10));
          v599 = v597 & (((v598 ^ (v598 >> 6)) + ~((v598 ^ (v598 >> 6)) << 11)) ^ (((v598 ^ (v598 >> 6))
                                                                                  + ~((v598 ^ (v598 >> 6)) << 11)) >> 16));
          v600 = (unsigned __int16)v596[v599];
          if (v600 != (unsigned __int16)v162)
          {
            v601 = 1;
            while ((_WORD)v600)
            {
              v599 = ((_DWORD)v599 + v601) & v597;
              v600 = (unsigned __int16)v596[v599];
              ++v601;
              if (v600 == (unsigned __int16)v162)
                goto LABEL_862;
            }
            v599 = *((unsigned int *)v596 - 1);
          }
LABEL_862:
          if (v599 != *((_DWORD *)v596 - 1))
          {
            v596[v599] = -1;
            ++*(_DWORD *)(*v1094 - 16);
            v602 = (_WORD *)*v1094;
            v603 = *v1094 ? *((_DWORD *)v602 - 3) - 1 : -1;
            *((_DWORD *)v602 - 3) = v603;
            v604 = (_WORD *)*v1094;
            if (*v1094)
            {
              v605 = *((_DWORD *)v604 - 3);
              v606 = *((unsigned int *)v604 - 1);
              if (6 * v605 < v606 && v606 >= 9)
              {
                v920 = WTF::fastZeroedMalloc((v606 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                v523 = 0;
                *v1094 = v920 + 16;
                *(_DWORD *)(v920 + 12) = v606 >> 1;
                *(_DWORD *)(*v1094 - 8) = (v606 >> 1) - 1;
                *(_DWORD *)(*v1094 - 16) = 0;
                *(_DWORD *)(*v1094 - 12) = v605;
                do
                {
                  v521 = (unsigned __int16)v604[v523];
                  if (v604[v523])
                    v522 = v521 == 0xFFFF;
                  else
                    v522 = 1;
                  if (!v522)
                  {
                    v524 = (_WORD *)*v1094;
                    if (*v1094)
                      v525 = *((_DWORD *)v524 - 2);
                    else
                      v525 = 0;
                    v526 = 0;
                    v527 = 9 * ((~(v521 << 15) + v521) ^ ((~(v521 << 15) + v521) >> 10));
                    v528 = ((v527 ^ (v527 >> 6)) + ~((v527 ^ (v527 >> 6)) << 11)) ^ (((v527 ^ (v527 >> 6))
                                                                                    + ~((v527 ^ (v527 >> 6)) << 11)) >> 16);
                    do
                    {
                      v529 = v528 & v525;
                      v528 = ++v526 + v529;
                    }
                    while (v524[v529]);
                    v524[v529] = v521;
                  }
                  ++v523;
                }
                while (v523 != v606);
                WTF::fastFree((unint64_t)(v604 - 8), v921, v922, v923, v924, v925, v926, v927);
                v22 = (uint64_t *)(a1 + 304);
              }
            }
          }
        }
        v161 = *(unsigned int *)(a1 + 204);
        if ((_DWORD)v161 != *(_DWORD *)(a1 + 200))
        {
          *(_WORD *)(*v1091 + 2 * v161) = v162;
          goto LABEL_334;
        }
LABEL_975:
        v688 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1091, v161 + 1, (unint64_t)v1108);
        v22 = (uint64_t *)(a1 + 304);
        v161 = *(unsigned int *)(a1 + 204);
        *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v161) = *v688;
        goto LABEL_334;
      }
      if (v161 >= (unsigned __int16)v158)
        goto LABEL_263;
      if ((unsigned __int16)v158 >= (unsigned __int16)v162)
        v163 = (unsigned __int16)v162;
      else
        v163 = (unsigned __int16)v158;
      if ((unsigned __int16)v158 <= (unsigned __int16)v162)
        v164 = (unsigned __int16)v162;
      else
        v164 = (unsigned __int16)v158;
      v165 = *(_DWORD *)(a1 + 36);
      if (v165 <= v163)
      {
        __break(0xC471u);
        JUMPOUT(0x198069F28);
      }
      v166 = *(_QWORD *)(a1 + 24);
      v167 = (uint64_t *)(v166 + 16 * v163);
      if (*((_DWORD *)v167 + 2) == -1)
      {
        v207 = *v167;
        if (v207)
        {
          v208 = *(_DWORD *)(v207 - 8);
          v209 = 9 * ((~((_DWORD)v164 << 15) + v164) ^ ((~((_DWORD)v164 << 15) + v164) >> 10));
          v210 = v208 & (((v209 ^ (v209 >> 6)) + ~((v209 ^ (v209 >> 6)) << 11)) ^ (((v209 ^ (v209 >> 6))
                                                                                  + ~((v209 ^ (v209 >> 6)) << 11)) >> 16));
          v14 = *(unsigned __int16 *)(v207 + 2 * v210);
          if ((_DWORD)v14 == (_DWORD)v164)
            goto LABEL_263;
          v211 = 1;
          while (1)
          {
            v15 = 0xFFFFLL;
            if ((_WORD)v14 == 0xFFFF)
              break;
            v210 = (v210 + v211) & v208;
            v14 = *(unsigned __int16 *)(v207 + 2 * v210);
            ++v211;
            if ((_DWORD)v14 == (_DWORD)v164)
              goto LABEL_263;
          }
        }
      }
      else
      {
        v168 = *(unsigned __int16 *)(v166 + 16 * v163 + 12);
        if (v168 <= v164)
        {
          v169 = (_QWORD *)(2 * *v167);
          v14 = *v167 < 0 ? 63 : *v169;
          v170 = v164 - v168;
          if (v14 > v170)
          {
            if (*v167 >= 0)
              v167 = v169 + 1;
            if (((*(unint64_t *)((char *)v167 + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v170) & 1) != 0)
            {
LABEL_263:
              LOWORD(v1108[0]) = v162;
              if (v161 < (unsigned __int16)v162
                && *(_DWORD *)(a1 + 12) > *(unsigned __int16 *)(*(_QWORD *)(a1 + 64)
                                                                            + 2 * (unsigned __int16)v162))
              {
                if (*(_DWORD *)(a1 + 116) <= (unsigned __int16)v162)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19806A00CLL);
                }
                v212 = *(_QWORD *)(a1 + 104) + 40 * (unsigned __int16)v162;
                v213 = *(unsigned int *)(v212 + 4);
                v214 = (_QWORD *)(v212 + 8);
                if ((_DWORD)v213 != 8)
                  v214 = (_QWORD *)*v214;
                v215 = 0;
                do
                {
                  if ((_DWORD)v213 == v215)
                  {
                    v216 = v213;
                    goto LABEL_272;
                  }
                  LODWORD(v216) = v215;
                  v217 = *((_DWORD *)v214 + v215++);
                }
                while (v217 == -1);
                v216 = v216;
LABEL_272:
                if ((_DWORD)v213 == (_DWORD)v216)
                {
LABEL_283:
                  v223 = (_WORD *)*v1094;
                  if (*v1094)
                  {
                    v224 = *((_DWORD *)v223 - 2);
                    v225 = 9
                         * ((~((unsigned __int16)v162 << 15) + (unsigned __int16)v162) ^ ((~((unsigned __int16)v162 << 15)
                                                                                         + (unsigned __int16)v162) >> 10));
                    v226 = v224 & (((v225 ^ (v225 >> 6)) + ~((v225 ^ (v225 >> 6)) << 11)) ^ (((v225 ^ (v225 >> 6))
                                                                                            + ~((v225 ^ (v225 >> 6)) << 11)) >> 16));
                    v227 = (unsigned __int16)v223[v226];
                    if (v227 != (unsigned __int16)v162)
                    {
                      v228 = 1;
                      while ((_WORD)v227)
                      {
                        v226 = ((_DWORD)v226 + v228) & v224;
                        v227 = (unsigned __int16)v223[v226];
                        ++v228;
                        if (v227 == (unsigned __int16)v162)
                          goto LABEL_288;
                      }
                      v226 = *((unsigned int *)v223 - 1);
                    }
LABEL_288:
                    if (v226 != *((_DWORD *)v223 - 1))
                    {
                      v223[v226] = -1;
                      ++*(_DWORD *)(*v1094 - 16);
                      v229 = (_WORD *)*v1094;
                      v230 = *v1094 ? *((_DWORD *)v229 - 3) - 1 : -1;
                      *((_DWORD *)v229 - 3) = v230;
                      v231 = (_WORD *)*v1094;
                      if (*v1094)
                      {
                        v232 = *((_DWORD *)v231 - 3);
                        v233 = *((unsigned int *)v231 - 1);
                        if (6 * v232 < v233 && v233 >= 9)
                        {
                          v715 = WTF::fastZeroedMalloc((v233 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                          v135 = 0;
                          *v1094 = v715 + 16;
                          *(_DWORD *)(v715 + 12) = v233 >> 1;
                          *(_DWORD *)(*v1094 - 8) = (v233 >> 1) - 1;
                          *(_DWORD *)(*v1094 - 16) = 0;
                          *(_DWORD *)(*v1094 - 12) = v232;
                          do
                          {
                            v133 = (unsigned __int16)v231[v135];
                            if (v231[v135])
                              v134 = v133 == 0xFFFF;
                            else
                              v134 = 1;
                            if (!v134)
                            {
                              v136 = (_WORD *)*v1094;
                              if (*v1094)
                                v137 = *((_DWORD *)v136 - 2);
                              else
                                v137 = 0;
                              v138 = 0;
                              v139 = 9 * ((~(v133 << 15) + v133) ^ ((~(v133 << 15) + v133) >> 10));
                              v140 = ((v139 ^ (v139 >> 6)) + ~((v139 ^ (v139 >> 6)) << 11)) ^ (((v139 ^ (v139 >> 6))
                                                                                              + ~((v139 ^ (v139 >> 6)) << 11)) >> 16);
                              do
                              {
                                v141 = v140 & v137;
                                v140 = ++v138 + v141;
                              }
                              while (v136[v141]);
                              v136[v141] = v133;
                            }
                            ++v135;
                          }
                          while (v135 != v233);
                          WTF::fastFree((unint64_t)(v231 - 8), v716, v717, v718, v719, v720, v721, v722);
                          v22 = (uint64_t *)(a1 + 304);
                        }
                      }
                    }
                  }
                  v161 = *(unsigned int *)(a1 + 204);
                  if ((_DWORD)v161 == *(_DWORD *)(a1 + 200))
                  {
                    v689 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1091, v161 + 1, (unint64_t)v1108);
                    v22 = (uint64_t *)(a1 + 304);
                    v161 = *(unsigned int *)(a1 + 204);
                    *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v161) = *v689;
                  }
                  else
                  {
                    *(_WORD *)(*v1091 + 2 * v161) = v162;
                  }
                  *(_DWORD *)(a1 + 204) = v161 + 1;
                  LODWORD(v161) = *(unsigned __int16 *)(a1 + 16);
                }
                else
                {
                  v218 = v216 | (v213 << 32);
                  if (*v9 >= 0)
                    v219 = 2 * *v9 + 8;
                  else
                    v219 = (uint64_t)v9;
                  while (1)
                  {
                    v220 = *((unsigned int *)v214 + v218);
                    if (((*(_QWORD *)(v219 + ((v220 >> 3) & 0x1FFFFFF8)) >> v220) & 1) != 0
                      || *(_DWORD *)(v155 + 4 * v220) != -1)
                    {
                      break;
                    }
                    v221 = HIDWORD(v218);
                    if ((v216 + 1) > HIDWORD(v218))
                      LODWORD(v221) = v216 + 1;
                    while (1)
                    {
                      v222 = (v216 + 1);
                      v218 = v218 & 0xFFFFFFFF00000000 | v222;
                      if ((_DWORD)v221 - 1 == (_DWORD)v216)
                        break;
                      v14 = *((unsigned int *)v214 + v222);
                      LODWORD(v216) = v216 + 1;
                      if ((_DWORD)v14 != -1)
                        goto LABEL_282;
                    }
                    LODWORD(v222) = v221;
LABEL_282:
                    LODWORD(v216) = v222;
                    if ((_DWORD)v213 == (_DWORD)v222)
                      goto LABEL_283;
                  }
                }
              }
              LOWORD(v1108[0]) = v158;
              if (v161 >= (unsigned __int16)v158
                || *(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 64)
                                                                             + 2 * (unsigned __int16)v158))
              {
                goto LABEL_341;
              }
              if (*(_DWORD *)(a1 + 116) <= (unsigned __int16)v158)
              {
                __break(0xC471u);
                JUMPOUT(0x19806A014);
              }
              v235 = *(_QWORD *)(a1 + 104) + 40 * (unsigned __int16)v158;
              v236 = *(unsigned int *)(v235 + 4);
              v237 = (_QWORD *)(v235 + 8);
              if ((_DWORD)v236 != 8)
                v237 = (_QWORD *)*v237;
              v238 = 0;
              while ((_DWORD)v236 != v238)
              {
                LODWORD(v239) = v238;
                v240 = *((_DWORD *)v237 + v238++);
                if (v240 != -1)
                {
                  v239 = v239;
                  goto LABEL_308;
                }
              }
              v239 = v236;
LABEL_308:
              if ((_DWORD)v236 != (_DWORD)v239)
              {
                v241 = v239 | (v236 << 32);
                if (*v9 >= 0)
                  v242 = 2 * *v9 + 8;
                else
                  v242 = (uint64_t)v9;
                do
                {
                  v243 = *((unsigned int *)v237 + v241);
                  if (((*(_QWORD *)(v242 + ((v243 >> 3) & 0x1FFFFFF8)) >> v243) & 1) != 0
                    || *(_DWORD *)(*v22 + 4 * v243) != -1)
                  {
                    goto LABEL_341;
                  }
                  v244 = HIDWORD(v241);
                  if ((v239 + 1) > HIDWORD(v241))
                    LODWORD(v244) = v239 + 1;
                  while (1)
                  {
                    v245 = (v239 + 1);
                    v241 = v241 & 0xFFFFFFFF00000000 | v245;
                    if ((_DWORD)v244 - 1 == (_DWORD)v239)
                      break;
                    LODWORD(v239) = v239 + 1;
                    if (*((_DWORD *)v237 + v245) != -1)
                      goto LABEL_318;
                  }
                  LODWORD(v245) = v244;
LABEL_318:
                  LODWORD(v239) = v245;
                }
                while ((_DWORD)v236 != (_DWORD)v245);
              }
              v246 = (_WORD *)*v1094;
              if (*v1094)
              {
                v247 = *((_DWORD *)v246 - 2);
                v248 = 9
                     * ((~((unsigned __int16)v158 << 15) + (unsigned __int16)v158) ^ ((~((unsigned __int16)v158 << 15)
                                                                                     + (unsigned __int16)v158) >> 10));
                v249 = v247 & (((v248 ^ (v248 >> 6)) + ~((v248 ^ (v248 >> 6)) << 11)) ^ (((v248 ^ (v248 >> 6))
                                                                                        + ~((v248 ^ (v248 >> 6)) << 11)) >> 16));
                v250 = (unsigned __int16)v246[v249];
                if (v250 != (unsigned __int16)v158)
                {
                  v251 = 1;
                  while ((_WORD)v250)
                  {
                    v249 = ((_DWORD)v249 + v251) & v247;
                    v250 = (unsigned __int16)v246[v249];
                    ++v251;
                    if (v250 == (unsigned __int16)v158)
                      goto LABEL_324;
                  }
                  v249 = *((unsigned int *)v246 - 1);
                }
LABEL_324:
                if (v249 != *((_DWORD *)v246 - 1))
                {
                  v246[v249] = -1;
                  ++*(_DWORD *)(*v1094 - 16);
                  v252 = (_WORD *)*v1094;
                  v253 = *v1094 ? *((_DWORD *)v252 - 3) - 1 : -1;
                  *((_DWORD *)v252 - 3) = v253;
                  v254 = (_WORD *)*v1094;
                  if (*v1094)
                  {
                    v255 = *((_DWORD *)v254 - 3);
                    v256 = *((unsigned int *)v254 - 1);
                    if (6 * v255 < v256 && v256 >= 9)
                    {
                      v723 = WTF::fastZeroedMalloc((v256 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                      v144 = 0;
                      *v1094 = v723 + 16;
                      *(_DWORD *)(v723 + 12) = v256 >> 1;
                      *(_DWORD *)(*v1094 - 8) = (v256 >> 1) - 1;
                      *(_DWORD *)(*v1094 - 16) = 0;
                      *(_DWORD *)(*v1094 - 12) = v255;
                      do
                      {
                        v142 = (unsigned __int16)v254[v144];
                        if (v254[v144])
                          v143 = v142 == 0xFFFF;
                        else
                          v143 = 1;
                        if (!v143)
                        {
                          v145 = (_WORD *)*v1094;
                          if (*v1094)
                            v146 = *((_DWORD *)v145 - 2);
                          else
                            v146 = 0;
                          v147 = 0;
                          v148 = 9 * ((~(v142 << 15) + v142) ^ ((~(v142 << 15) + v142) >> 10));
                          v149 = ((v148 ^ (v148 >> 6)) + ~((v148 ^ (v148 >> 6)) << 11)) ^ (((v148 ^ (v148 >> 6))
                                                                                          + ~((v148 ^ (v148 >> 6)) << 11)) >> 16);
                          do
                          {
                            v150 = v149 & v146;
                            v149 = ++v147 + v150;
                          }
                          while (v145[v150]);
                          v145[v150] = v142;
                        }
                        ++v144;
                      }
                      while (v144 != v256);
                      WTF::fastFree((unint64_t)(v254 - 8), v724, v725, v726, v727, v728, v729, v730);
                      v22 = (uint64_t *)(a1 + 304);
                    }
                  }
                }
              }
              v161 = *(unsigned int *)(a1 + 204);
              if ((_DWORD)v161 != *(_DWORD *)(a1 + 200))
              {
                *(_WORD *)(*v1091 + 2 * v161) = v158;
LABEL_334:
                *(_DWORD *)(a1 + 204) = v161 + 1;
                goto LABEL_341;
              }
              goto LABEL_975;
            }
          }
        }
      }
      if (v161 < (unsigned __int16)v162)
      {
        v171 = *(uint64_t **)(a1 + 240);
        v172 = *v171;
        v173 = (unint64_t *)(2 * *v171);
        if (*v171 < 0)
          v174 = 63;
        else
          v174 = *v173;
        if (v174 <= (unsigned __int16)v162)
        {
          LODWORD(v176) = 0;
        }
        else
        {
          v175 = v173 + 1;
          if (v172 < 0)
            v175 = *(_QWORD **)(a1 + 240);
          v176 = (*(_QWORD *)((char *)v175 + (((unint64_t)(unsigned __int16)v162 >> 3) & 0x1FF8)) >> v162) & 1;
        }
        if (v172 < 0)
          v177 = 63;
        else
          v177 = *v173;
        if (v177 <= (unsigned __int16)v158)
        {
          if ((v176 & 1) != 0)
            goto LABEL_235;
        }
        else
        {
          v178 = (uint64_t *)(v173 + 1);
          if (v172 >= 0)
            v171 = v178;
          if (((v176 ^ (*(unint64_t *)((char *)v171
                                                                         + (((unint64_t)(unsigned __int16)v158 >> 3) & 0x1FF8)) >> v158)) & 1) != 0)
            goto LABEL_235;
        }
        v179 = *(unsigned int *)(a1 + 12);
        if (v179 >= 0x41)
        {
          __break(0xC471u);
LABEL_974:
          __break(1u);
          goto LABEL_975;
        }
        v180 = *(_QWORD *)(a1 + 48);
        v181 = (unsigned __int16 **)(v180 + 16 * (unsigned __int16)v162);
        v182 = (unsigned __int16 **)(v180 + 16 * (unsigned __int16)v158);
        v183 = *((unsigned int *)v181 + 3);
        v184 = *((unsigned int *)v182 + 3);
        v185 = v184 + v183;
        if (v179 <= (int)v184 + (int)v183)
        {
          v186 = 0;
          if ((_DWORD)v183)
          {
            v187 = *v181;
            if (*v1097 >= 0)
              v188 = 2 * *v1097 + 8;
            else
              v188 = a1 + 168;
            for (j = 2 * v183; j; j -= 2)
            {
              v190 = *v187;
              --v185;
              v15 = *(_QWORD *)(v188 + ((v190 >> 3) & 0x1FF8)) >> v190;
              if ((v15 & 1) != 0
                || (v15 = *(unsigned __int16 *)(v706 + 2 * v190), *(_WORD *)(v706 + 2 * v190))
                || (v15 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v190), v179 > v15))
              {
                v14 = v186 + v185;
                if (v14 < v179)
                  goto LABEL_483;
              }
              else
              {
                if (v186 >= 0x40)
                  goto LABEL_974;
                v15 = (unint64_t)v1108;
                *((_WORD *)v1108 + v186) = v190;
                v14 = v186 + 1;
                v186 = v14;
                if (v14 >= v179)
                  goto LABEL_235;
              }
              ++v187;
            }
          }
          if ((_DWORD)v184)
          {
            v58 = *v182;
            if (*v1097 >= 0)
              v332 = 2 * *v1097 + 8;
            else
              v332 = a1 + 168;
            if (v186)
            {
              v14 = v186;
              v333 = &v58[v184];
              while (1)
              {
                v334 = *v58;
                --v185;
                v16 = *(_QWORD *)(v332 + ((v334 >> 3) & 0x1FF8)) >> v334;
                if ((v16 & 1) != 0)
                  goto LABEL_470;
                v16 = *(unsigned __int16 *)(v706 + 2 * v334);
                if (*(_WORD *)(v706 + 2 * v334))
                  goto LABEL_470;
                v16 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v334);
                if (v179 > v16)
                  goto LABEL_470;
                v335 = (char *)v1108;
                v336 = 2 * v186;
                while (1)
                {
                  v18 = *(unsigned __int16 *)v335;
                  if ((_DWORD)v18 == (_DWORD)v334)
                    break;
                  v335 += 2;
                  v336 -= 2;
                  if (!v336)
                  {
                    v335 = (char *)v1108 + 2 * v186;
                    break;
                  }
                }
                v17 = (uint64_t)v1108;
                v16 = v335 - (char *)v1108;
                if (v186 != v16 >> 1)
                {
LABEL_470:
                  v15 = v14 + v185;
                  if (v15 < v179)
                    goto LABEL_483;
                }
                else
                {
                  if (v14 >= 0x40)
                    goto LABEL_974;
                  v16 = (uint64_t)v1108;
                  *((_WORD *)v1108 + v14) = v334;
                  v15 = v14 + 1;
                  v14 = v15;
                  if (v15 >= v179)
                    goto LABEL_235;
                }
                if (++v58 == v333)
                  goto LABEL_483;
              }
            }
            v61 = 0;
            v60 = 2 * v184;
            v59 = v185 - 1;
            do
            {
              v57 = *v58;
              if (((*(_QWORD *)(v332 + ((v57 >> 3) & 0x1FF8)) >> v57) & 1) != 0
                || *(_WORD *)(v706 + 2 * v57)
                || v179 > *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v57))
              {
                if (v61 + v59 < v179)
                  break;
              }
              else
              {
                if (v61 > 0x3F)
                  goto LABEL_974;
                *((_WORD *)v1108 + v61++) = v57;
                if (v61 >= v179)
                  goto LABEL_235;
              }
              ++v58;
              --v59;
              v60 -= 2;
            }
            while (v60);
          }
        }
LABEL_483:
        v337 = (_WORD *)*v1094;
        if (*v1094)
        {
          v338 = *((_DWORD *)v337 - 2);
          v339 = (unsigned __int16)v158;
          v340 = 9 * ((~(v339 << 15) + (unsigned __int16)v158) ^ ((~(v339 << 15) + (unsigned __int16)v158) >> 10));
          v341 = v338 & (((v340 ^ (v340 >> 6)) + ~((v340 ^ (v340 >> 6)) << 11)) ^ (((v340 ^ (v340 >> 6))
                                                                                  + ~((v340 ^ (v340 >> 6)) << 11)) >> 16));
          v342 = (unsigned __int16)v337[v341];
          if (v342 != (unsigned __int16)v158)
          {
            v343 = 1;
            while ((_WORD)v342)
            {
              v341 = ((_DWORD)v341 + v343) & v338;
              v342 = (unsigned __int16)v337[v341];
              ++v343;
              if (v342 == (unsigned __int16)v158)
                goto LABEL_488;
            }
            v341 = *((unsigned int *)v337 - 1);
          }
LABEL_488:
          if (v341 != *((_DWORD *)v337 - 1))
          {
            v337[v341] = -1;
            ++*(_DWORD *)(*v1094 - 16);
            v344 = (_WORD *)*v1094;
            if (*v1094)
              v345 = *((_DWORD *)v344 - 3) - 1;
            else
              v345 = -1;
            *((_DWORD *)v344 - 3) = v345;
            v346 = (_WORD *)*v1094;
            if (*v1094)
            {
              v347 = *((_DWORD *)v346 - 3);
              v348 = *((unsigned int *)v346 - 1);
              if (6 * v347 < v348 && v348 >= 9)
              {
                v707 = WTF::fastZeroedMalloc((v348 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                v114 = 0;
                *v1094 = v707 + 16;
                *(_DWORD *)(v707 + 12) = v348 >> 1;
                *(_DWORD *)(*v1094 - 8) = (v348 >> 1) - 1;
                *(_DWORD *)(*v1094 - 16) = 0;
                *(_DWORD *)(*v1094 - 12) = v347;
                do
                {
                  v112 = (unsigned __int16)v346[v114];
                  if (v346[v114])
                    v113 = v112 == 0xFFFF;
                  else
                    v113 = 1;
                  if (!v113)
                  {
                    v115 = (_WORD *)*v1094;
                    if (*v1094)
                      v116 = *((_DWORD *)v115 - 2);
                    else
                      v116 = 0;
                    v117 = 0;
                    v118 = 9 * ((~(v112 << 15) + v112) ^ ((~(v112 << 15) + v112) >> 10));
                    v119 = ((v118 ^ (v118 >> 6)) + ~((v118 ^ (v118 >> 6)) << 11)) ^ (((v118 ^ (v118 >> 6))
                                                                                    + ~((v118 ^ (v118 >> 6)) << 11)) >> 16);
                    do
                    {
                      v120 = v119 & v116;
                      v119 = ++v117 + v120;
                    }
                    while (v115[v120]);
                    v115[v120] = v112;
                  }
                  ++v114;
                }
                while (v114 != v348);
                WTF::fastFree((unint64_t)(v346 - 8), v708, v709, v710, v711, v712, v713, v714);
                v706 = *(_QWORD *)(a1 + 152);
                v22 = (uint64_t *)(a1 + 304);
              }
            }
LABEL_496:
            v350 = (unsigned __int16)v158;
            *(_WORD *)(v706 + 2 * (unsigned __int16)v158) = v162;
            if (*(_DWORD *)(a1 + 116) <= v339)
            {
              __break(0xC471u);
              JUMPOUT(0x19806A01CLL);
            }
            v351 = *(_QWORD *)(a1 + 104) + 40 * (unsigned __int16)v158;
            v352 = *(unsigned int *)(v351 + 4);
            v353 = (_QWORD *)(v351 + 8);
            if ((_DWORD)v352 != 8)
              v353 = (_QWORD *)*v353;
            v354 = 0;
            while ((_DWORD)v352 != v354)
            {
              v355 = v354;
              v356 = *((_DWORD *)v353 + v354++);
              if (v356 != -1)
              {
                v357 = v355;
                goto LABEL_503;
              }
            }
            v357 = v352;
LABEL_503:
            if ((_DWORD)v352 != (_DWORD)v357)
            {
              v358 = v357 | (v352 << 32);
              v359 = (unsigned __int16)v162;
              while (1)
              {
                if (*(_DWORD *)(a1 + 116) <= v359)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198069FD4);
                }
                v360 = *((_DWORD *)v353 + v358);
                v361 = *(_QWORD **)(a1 + 104);
                v362 = (unsigned int *)&v361[5 * (unsigned __int16)v162];
                v364 = (int *)(v362 + 1);
                v363 = v362[1];
                v365 = *v362;
                if (v363 == 8)
                  break;
LABEL_521:
                if (3 * v363 <= 4 * v365)
                {
                  v1047 = v350;
                  v1050 = v364;
                  v1105 = v360;
                  v1073 = v359;
                  v1082 = v353;
                  v1044 = v352;
                  v1061 = (void **)&v361[5 * (unsigned __int16)v162 + 1];
                  v1067 = v362;
                  __bb = v1061;
                  if (v363 != 8)
                    __bb = *v1061;
                  v928 = 2 * v363;
                  v929 = (WTF *)(4 * (2 * v363));
                  __lena = v363;
                  v930 = (void *)WTF::fastMalloc(v929);
                  memset(v930, 255, (size_t)v929);
                  v372 = v930;
                  v933 = v1050;
                  *v1050 = v928;
                  v360 = v1105;
                  if (!__lena)
                    goto LABEL_1311;
                  for (k = 0; k != __lena; ++k)
                  {
                    v935 = __bb[k];
                    if (v935 != -1)
                    {
                      v936 = 9 * ((v935 + ~(v935 << 15)) ^ ((v935 + ~(v935 << 15)) >> 10));
                      v937 = (v936 ^ (v936 >> 6)) + ~((v936 ^ (v936 >> 6)) << 11);
                      v938 = *v1050 - 1;
                      v939 = v938 & (v937 ^ HIWORD(v937));
                      v940 = *((_DWORD *)v930 + v939);
                      if (v940 != -1 && v940 != v935)
                      {
                        v942 = 1;
                        do
                        {
                          v939 = ((_DWORD)v939 + v942) & v938;
                          v943 = *((_DWORD *)v930 + v939);
                          ++v942;
                        }
                        while (v943 != -1 && v943 != v935);
                      }
                      *((_DWORD *)v930 + v939) = v935;
                    }
                  }
                  if (__lena != 8)
                  {
LABEL_1311:
                    WTF::fastFree((unint64_t)__bb, (void *)v14, v15, v16, v17, v18, v931, v932);
                    v372 = v930;
                    v933 = v1050;
                  }
                  *v1061 = v372;
                  v363 = *v933;
                  v22 = (uint64_t *)(a1 + 304);
                  v353 = v1082;
                  v352 = v1044;
                  v350 = v1047;
                  v359 = v1073;
                  v362 = v1067;
                }
                else
                {
                  v372 = (void *)v361[5 * (unsigned __int16)v162 + 1];
                }
                v373 = 9 * ((v360 + ~(v360 << 15)) ^ ((v360 + ~(v360 << 15)) >> 10));
                v374 = (v373 ^ (v373 >> 6)) + ~((v373 ^ (v373 >> 6)) << 11);
                v375 = v363 - 1;
                v376 = (v363 - 1) & (v374 ^ HIWORD(v374));
                v377 = *((_DWORD *)v372 + v376);
                if (v377 != -1 && v377 != v360)
                {
                  v379 = 1;
                  do
                  {
                    v376 = ((_DWORD)v376 + v379) & v375;
                    v377 = *((_DWORD *)v372 + v376);
                    ++v379;
                  }
                  while (v377 != -1 && v377 != v360);
                }
                if (v377 != v360)
                {
                  *((_DWORD *)v372 + v376) = v360;
                  v365 = *v362;
LABEL_513:
                  *v362 = v365 + 1;
                }
LABEL_514:
                v370 = HIDWORD(v358);
                if ((v357 + 1) > HIDWORD(v358))
                  LODWORD(v370) = v357 + 1;
                while (1)
                {
                  v371 = (v357 + 1);
                  v358 = v358 & 0xFFFFFFFF00000000 | v371;
                  if ((_DWORD)v370 - 1 == (_DWORD)v357)
                    break;
                  LODWORD(v357) = v357 + 1;
                  if (*((_DWORD *)v353 + v371) != -1)
                    goto LABEL_518;
                }
                LODWORD(v371) = v370;
LABEL_518:
                LODWORD(v357) = v371;
                if ((_DWORD)v352 == (_DWORD)v371)
                {
                  v1100 = (unsigned __int16)v162;
                  goto LABEL_536;
                }
              }
              if (v365)
              {
                v366 = *v362;
                v14 = (unint64_t)&v361[5 * (unsigned __int16)v162 + 1];
                v367 = (int *)v14;
                v368 = v366;
                while (1)
                {
                  v369 = *v367++;
                  if (v369 == v360)
                    goto LABEL_514;
                  if (!--v368)
                  {
                    if (v365 <= 7)
                      goto LABEL_512;
                    __b = *(_QWORD **)(a1 + 104);
                    v1058 = (int *)&v361[5 * (unsigned __int16)v162 + 1];
                    v1103 = *((_DWORD *)v353 + v358);
                    v1063 = (unsigned int *)&v361[5 * (unsigned __int16)v162];
                    v1069 = v359;
                    v1075 = v353;
                    v626 = (int *)(v362 + 1);
                    v627 = (_OWORD *)WTF::fastMalloc((WTF *)0x100);
                    v14 = (unint64_t)v1058;
                    v364 = v626;
                    *(_QWORD *)&v19 = -1;
                    *((_QWORD *)&v19 + 1) = -1;
                    *v627 = v19;
                    v627[1] = v19;
                    v627[2] = v19;
                    v627[3] = v19;
                    v627[4] = v19;
                    v627[5] = v19;
                    v627[6] = v19;
                    v627[7] = v19;
                    v627[8] = v19;
                    v627[9] = v19;
                    v627[10] = v19;
                    v627[11] = v19;
                    v627[12] = v19;
                    v627[13] = v19;
                    v627[14] = v19;
                    v627[15] = v19;
                    v363 = 64;
                    *v626 = 64;
                    v628 = *v1058;
                    if (*v1058 == -1)
                    {
                      v22 = (uint64_t *)(a1 + 304);
                      v353 = v1075;
                      v359 = v1069;
                      v362 = v1063;
                      v360 = v1103;
                      v361 = __b;
                    }
                    else
                    {
                      v629 = 9 * ((v628 + ~(v628 << 15)) ^ ((v628 + ~(v628 << 15)) >> 10));
                      v630 = (v629 ^ (v629 >> 6)) + ~((v629 ^ (v629 >> 6)) << 11);
                      v631 = (v630 ^ BYTE2(v630)) & 0x3F;
                      v632 = *((_DWORD *)v627 + v631);
                      if (v632 == -1 || v632 == v628)
                      {
                        v22 = (uint64_t *)(a1 + 304);
                        v353 = v1075;
                        v359 = v1069;
                        v362 = v1063;
                        v361 = __b;
                      }
                      else
                      {
                        v753 = 1;
                        v22 = (uint64_t *)(a1 + 304);
                        v353 = v1075;
                        v359 = v1069;
                        v362 = v1063;
                        v361 = __b;
                        do
                        {
                          v631 = ((_BYTE)v631 + (_BYTE)v753) & 0x3F;
                          v754 = *((_DWORD *)v627 + v631);
                          ++v753;
                        }
                        while (v754 != -1 && v754 != v628);
                      }
                      *((_DWORD *)v627 + v631) = v628;
                      v363 = *v626;
                      v360 = v1103;
                    }
                    v634 = v1058[1];
                    if (v634 != -1)
                    {
                      v635 = 9 * ((v634 + ~(v634 << 15)) ^ ((v634 + ~(v634 << 15)) >> 10));
                      v636 = (v635 ^ (v635 >> 6)) + ~((v635 ^ (v635 >> 6)) << 11);
                      v637 = v363 - 1;
                      v638 = (v636 ^ HIWORD(v636)) & (v363 - 1);
                      v639 = *((_DWORD *)v627 + v638);
                      if (v639 != -1 && v639 != v634)
                      {
                        v756 = 1;
                        do
                        {
                          v638 = ((_DWORD)v638 + v756) & v637;
                          v757 = *((_DWORD *)v627 + v638);
                          ++v756;
                        }
                        while (v757 != -1 && v757 != v634);
                      }
                      *((_DWORD *)v627 + v638) = v634;
                      v363 = *v364;
                    }
                    v641 = v1058[2];
                    if (v641 != -1)
                    {
                      v642 = 9 * ((v641 + ~(v641 << 15)) ^ ((v641 + ~(v641 << 15)) >> 10));
                      v643 = (v642 ^ (v642 >> 6)) + ~((v642 ^ (v642 >> 6)) << 11);
                      v644 = v363 - 1;
                      v645 = (v643 ^ HIWORD(v643)) & (v363 - 1);
                      v646 = *((_DWORD *)v627 + v645);
                      if (v646 != -1 && v646 != v641)
                      {
                        v759 = 1;
                        do
                        {
                          v645 = ((_DWORD)v645 + v759) & v644;
                          v760 = *((_DWORD *)v627 + v645);
                          ++v759;
                        }
                        while (v760 != -1 && v760 != v641);
                      }
                      *((_DWORD *)v627 + v645) = v641;
                      v363 = *v364;
                    }
                    v648 = v1058[3];
                    if (v648 != -1)
                    {
                      v649 = 9 * ((v648 + ~(v648 << 15)) ^ ((v648 + ~(v648 << 15)) >> 10));
                      v650 = (v649 ^ (v649 >> 6)) + ~((v649 ^ (v649 >> 6)) << 11);
                      v651 = v363 - 1;
                      v652 = (v650 ^ HIWORD(v650)) & (v363 - 1);
                      v653 = *((_DWORD *)v627 + v652);
                      if (v653 != -1 && v653 != v648)
                      {
                        v762 = 1;
                        do
                        {
                          v652 = ((_DWORD)v652 + v762) & v651;
                          v763 = *((_DWORD *)v627 + v652);
                          ++v762;
                        }
                        while (v763 != -1 && v763 != v648);
                      }
                      *((_DWORD *)v627 + v652) = v648;
                      v363 = *v364;
                    }
                    v655 = v1058[4];
                    if (v655 != -1)
                    {
                      v656 = 9 * ((v655 + ~(v655 << 15)) ^ ((v655 + ~(v655 << 15)) >> 10));
                      v657 = (v656 ^ (v656 >> 6)) + ~((v656 ^ (v656 >> 6)) << 11);
                      v658 = v363 - 1;
                      v659 = (v657 ^ HIWORD(v657)) & (v363 - 1);
                      v660 = *((_DWORD *)v627 + v659);
                      if (v660 != -1 && v660 != v655)
                      {
                        v765 = 1;
                        do
                        {
                          v659 = ((_DWORD)v659 + v765) & v658;
                          v766 = *((_DWORD *)v627 + v659);
                          ++v765;
                        }
                        while (v766 != -1 && v766 != v655);
                      }
                      *((_DWORD *)v627 + v659) = v655;
                      v363 = *v364;
                    }
                    v662 = v1058[5];
                    if (v662 != -1)
                    {
                      v663 = 9 * ((v662 + ~(v662 << 15)) ^ ((v662 + ~(v662 << 15)) >> 10));
                      v664 = (v663 ^ (v663 >> 6)) + ~((v663 ^ (v663 >> 6)) << 11);
                      v665 = v363 - 1;
                      v666 = (v664 ^ HIWORD(v664)) & (v363 - 1);
                      v667 = *((_DWORD *)v627 + v666);
                      if (v667 != -1 && v667 != v662)
                      {
                        v768 = 1;
                        do
                        {
                          v666 = ((_DWORD)v666 + v768) & v665;
                          v769 = *((_DWORD *)v627 + v666);
                          ++v768;
                        }
                        while (v769 != -1 && v769 != v662);
                      }
                      *((_DWORD *)v627 + v666) = v662;
                      v363 = *v364;
                    }
                    v669 = v1058[6];
                    if (v669 != -1)
                    {
                      v670 = 9 * ((v669 + ~(v669 << 15)) ^ ((v669 + ~(v669 << 15)) >> 10));
                      v671 = (v670 ^ (v670 >> 6)) + ~((v670 ^ (v670 >> 6)) << 11);
                      v672 = v363 - 1;
                      v673 = (v671 ^ HIWORD(v671)) & (v363 - 1);
                      v674 = *((_DWORD *)v627 + v673);
                      if (v674 != -1 && v674 != v669)
                      {
                        v771 = 1;
                        do
                        {
                          v673 = ((_DWORD)v673 + v771) & v672;
                          v772 = *((_DWORD *)v627 + v673);
                          ++v771;
                        }
                        while (v772 != -1 && v772 != v669);
                      }
                      *((_DWORD *)v627 + v673) = v669;
                      v363 = *v364;
                    }
                    v676 = v1058[7];
                    if (v676 != -1)
                    {
                      v677 = 9 * ((v676 + ~(v676 << 15)) ^ ((v676 + ~(v676 << 15)) >> 10));
                      v678 = (v677 ^ (v677 >> 6)) + ~((v677 ^ (v677 >> 6)) << 11);
                      v679 = v363 - 1;
                      v680 = (v678 ^ HIWORD(v678)) & (v363 - 1);
                      v681 = *((_DWORD *)v627 + v680);
                      if (v681 != -1 && v681 != v676)
                      {
                        v774 = 1;
                        do
                        {
                          v680 = ((_DWORD)v680 + v774) & v679;
                          v775 = *((_DWORD *)v627 + v680);
                          ++v774;
                        }
                        while (v775 != -1 && v775 != v676);
                      }
                      *((_DWORD *)v627 + v680) = v676;
                      v363 = *v364;
                    }
                    v365 = *v362;
                    *(_QWORD *)v1058 = v627;
                    goto LABEL_521;
                  }
                }
              }
              v366 = 0;
LABEL_512:
              *((_DWORD *)&v361[5 * (unsigned __int16)v162 + 1] + v366) = v360;
              goto LABEL_513;
            }
            v1100 = (unsigned __int16)v162;
LABEL_536:
            v381 = *(_QWORD *)(a1 + 48) + 16 * v350;
            v382 = *(unsigned int *)(v381 + 12);
            if (!(_DWORD)v382)
            {
LABEL_659:
              if (*(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v1100))
              {
                v497 = (_WORD *)*v1094;
                if (*v1094)
                {
                  v498 = *((_DWORD *)v497 - 2);
                  v499 = ~((unsigned __int16)v162 << 15) + (unsigned __int16)v162;
                  v500 = (9 * (v499 ^ (v499 >> 10))) ^ ((9 * (v499 ^ (v499 >> 10))) >> 6);
                  v501 = v498 & ((v500 + ~(v500 << 11)) ^ ((v500 + ~(v500 << 11)) >> 16));
                  v502 = (unsigned __int16)v497[v501];
                  if (v502 != (unsigned __int16)v162)
                  {
                    v510 = 1;
                    while ((_WORD)v502)
                    {
                      v501 = ((_DWORD)v501 + v510) & v498;
                      v502 = (unsigned __int16)v497[v501];
                      ++v510;
                      if (v502 == (unsigned __int16)v162)
                        goto LABEL_702;
                    }
                    v501 = *((unsigned int *)v497 - 1);
                  }
LABEL_702:
                  if (v501 != *((_DWORD *)v497 - 1))
                  {
                    v497[v501] = -1;
                    ++*(_DWORD *)(*v1094 - 16);
                    v503 = (_WORD *)*v1094;
                    if (*v1094)
                      v504 = *((_DWORD *)v503 - 3) - 1;
                    else
                      v504 = -1;
                    *((_DWORD *)v503 - 3) = v504;
                    v505 = (_WORD *)*v1094;
                    if (*v1094)
                    {
                      v506 = *((_DWORD *)v505 - 3);
                      v507 = *((unsigned int *)v505 - 1);
                      if (6 * v506 < v507 && v507 >= 9)
                      {
                        v777 = WTF::fastZeroedMalloc((v507 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                        v292 = 0;
                        *v1094 = v777 + 16;
                        *(_DWORD *)(v777 + 12) = v507 >> 1;
                        *(_DWORD *)(*v1094 - 8) = (v507 >> 1) - 1;
                        *(_DWORD *)(*v1094 - 16) = 0;
                        *(_DWORD *)(*v1094 - 12) = v506;
                        do
                        {
                          v290 = (unsigned __int16)v505[v292];
                          if (v505[v292])
                            v291 = v290 == 0xFFFF;
                          else
                            v291 = 1;
                          if (!v291)
                          {
                            v293 = (_WORD *)*v1094;
                            if (*v1094)
                              v294 = *((_DWORD *)v293 - 2);
                            else
                              v294 = 0;
                            v295 = 0;
                            v296 = 9 * ((~(v290 << 15) + v290) ^ ((~(v290 << 15) + v290) >> 10));
                            v297 = ((v296 ^ (v296 >> 6)) + ~((v296 ^ (v296 >> 6)) << 11)) ^ (((v296 ^ (v296 >> 6))
                                                                                            + ~((v296 ^ (v296 >> 6)) << 11)) >> 16);
                            do
                            {
                              v298 = v297 & v294;
                              v297 = ++v295 + v298;
                            }
                            while (v293[v298]);
                            v293[v298] = v290;
                          }
                          ++v292;
                        }
                        while (v292 != v507);
                        WTF::fastFree((unint64_t)(v505 - 8), v778, v779, v780, v781, v782, v783, v784);
                        v22 = (uint64_t *)(a1 + 304);
                      }
                    }
                    v509 = *(uint64_t **)(a1 + 240);
                    if (*v509 >= 0)
                      v509 = (uint64_t *)(2 * *v509 + 8);
                    if ((v509[v1100 >> 6] & (1 << v1100)) == 0)
                    {
                      v544 = *(_QWORD *)(a1 + 208);
                      if (v544 < 0)
                        v545 = 63;
                      else
                        v545 = *(_QWORD *)(2 * v544);
                      if (v545 <= v1100)
                      {
                        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 208), v1100 + 1, 0);
                        v22 = (uint64_t *)(a1 + 304);
                        v544 = *(_QWORD *)(a1 + 208);
                      }
                      if (v544 >= 0)
                        v546 = 2 * v544 + 8;
                      else
                        v546 = a1 + 208;
                      *(_QWORD *)(v546 + 8 * (v1100 >> 6)) |= 1 << v1100;
                    }
                  }
                }
              }
              LOWORD(v1108[0]) = v162;
              if (*(unsigned __int16 *)(a1 + 16) < (unsigned __int16)v162
                && *(_DWORD *)(a1 + 12) > *(unsigned __int16 *)(*(_QWORD *)(a1 + 64)
                                                                            + 2 * (unsigned __int16)v162))
              {
                if (*(_DWORD *)(a1 + 116) <= (unsigned __int16)v162)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19806A024);
                }
                v468 = *(_QWORD *)(a1 + 104) + 40 * (unsigned __int16)v162;
                v469 = *(unsigned int *)(v468 + 4);
                v470 = (_QWORD *)(v468 + 8);
                if ((_DWORD)v469 != 8)
                  v470 = (_QWORD *)*v470;
                v471 = 0;
                while ((_DWORD)v469 != v471)
                {
                  LODWORD(v472) = v471;
                  v473 = *((_DWORD *)v470 + v471++);
                  if (v473 != -1)
                  {
                    v472 = v472;
                    goto LABEL_669;
                  }
                }
                v472 = v469;
LABEL_669:
                if ((_DWORD)v469 == (_DWORD)v472)
                {
LABEL_680:
                  v479 = (_WORD *)*v1094;
                  if (*v1094)
                  {
                    v480 = *((_DWORD *)v479 - 2);
                    v481 = 9
                         * ((~((unsigned __int16)v162 << 15) + (unsigned __int16)v162) ^ ((~((unsigned __int16)v162 << 15)
                                                                                         + (unsigned __int16)v162) >> 10));
                    v482 = v480 & (((v481 ^ (v481 >> 6)) + ~((v481 ^ (v481 >> 6)) << 11)) ^ (((v481 ^ (v481 >> 6))
                                                                                            + ~((v481 ^ (v481 >> 6)) << 11)) >> 16));
                    v483 = (unsigned __int16)v479[v482];
                    if (v483 != (unsigned __int16)v162)
                    {
                      v561 = 1;
                      while ((_WORD)v483)
                      {
                        v482 = ((_DWORD)v482 + v561) & v480;
                        v483 = (unsigned __int16)v479[v482];
                        ++v561;
                        if (v483 == (unsigned __int16)v162)
                          goto LABEL_682;
                      }
                      v482 = *((unsigned int *)v479 - 1);
                    }
LABEL_682:
                    if (v482 != *((_DWORD *)v479 - 1))
                    {
                      v479[v482] = -1;
                      ++*(_DWORD *)(*v1094 - 16);
                      v530 = (_WORD *)*v1094;
                      v531 = *v1094 ? *((_DWORD *)v530 - 3) - 1 : -1;
                      *((_DWORD *)v530 - 3) = v531;
                      v532 = (_WORD *)*v1094;
                      if (*v1094)
                      {
                        v533 = *((_DWORD *)v532 - 3);
                        v534 = *((unsigned int *)v532 - 1);
                        if (6 * v533 < v534 && v534 >= 9)
                        {
                          v536 = WTF::fastZeroedMalloc((v534 & 0xFFFFFFFE) + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                          v487 = 0;
                          *v1094 = v536 + 16;
                          *(_DWORD *)(v536 + 12) = v534 >> 1;
                          *(_DWORD *)(*v1094 - 8) = (v534 >> 1) - 1;
                          *(_DWORD *)(*v1094 - 16) = 0;
                          *(_DWORD *)(*v1094 - 12) = v533;
                          do
                          {
                            v485 = (unsigned __int16)v532[v487];
                            if (v532[v487])
                              v486 = v485 == 0xFFFF;
                            else
                              v486 = 1;
                            if (!v486)
                            {
                              v488 = (_WORD *)*v1094;
                              if (*v1094)
                                v489 = *((_DWORD *)v488 - 2);
                              else
                                v489 = 0;
                              v490 = 0;
                              v491 = 9 * ((~(v485 << 15) + v485) ^ ((~(v485 << 15) + v485) >> 10));
                              v492 = ((v491 ^ (v491 >> 6)) + ~((v491 ^ (v491 >> 6)) << 11)) ^ (((v491 ^ (v491 >> 6))
                                                                                              + ~((v491 ^ (v491 >> 6)) << 11)) >> 16);
                              do
                              {
                                v493 = v492 & v489;
                                v492 = ++v490 + v493;
                              }
                              while (v488[v493]);
                              v488[v493] = v485;
                            }
                            ++v487;
                          }
                          while (v487 != v534);
                          WTF::fastFree((unint64_t)(v532 - 8), v537, v538, v539, v540, v541, v542, v543);
                          v22 = (uint64_t *)(a1 + 304);
                        }
                      }
                    }
                  }
                  v484 = *(unsigned int *)(a1 + 204);
                  if ((_DWORD)v484 == *(_DWORD *)(a1 + 200))
                  {
                    v752 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1091, v484 + 1, (unint64_t)v1108);
                    v22 = (uint64_t *)(a1 + 304);
                    v484 = *(unsigned int *)(a1 + 204);
                    *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v484) = *v752;
                  }
                  else
                  {
                    *(_WORD *)(*v1091 + 2 * v484) = v162;
                  }
                  *(_DWORD *)(a1 + 204) = v484 + 1;
                }
                else
                {
                  v474 = v472 | (v469 << 32);
                  if (*v9 >= 0)
                    v475 = 2 * *v9 + 8;
                  else
                    v475 = (uint64_t)v9;
                  while (1)
                  {
                    v476 = *((unsigned int *)v470 + v474);
                    if (((*(_QWORD *)(v475 + ((v476 >> 3) & 0x1FFFFFF8)) >> v476) & 1) != 0
                      || *(_DWORD *)(*v22 + 4 * v476) != -1)
                    {
                      break;
                    }
                    v477 = HIDWORD(v474);
                    if ((v472 + 1) > HIDWORD(v474))
                      LODWORD(v477) = v472 + 1;
                    while (1)
                    {
                      v478 = (v472 + 1);
                      v474 = v474 & 0xFFFFFFFF00000000 | v478;
                      if ((_DWORD)v477 - 1 == (_DWORD)v472)
                        break;
                      LODWORD(v472) = v472 + 1;
                      if (*((_DWORD *)v470 + v478) != -1)
                        goto LABEL_679;
                    }
                    LODWORD(v478) = v477;
LABEL_679:
                    LODWORD(v472) = v478;
                    if ((_DWORD)v469 == (_DWORD)v478)
                      goto LABEL_680;
                  }
                }
              }
              *(_BYTE *)(a1 + 217) = 1;
              goto LABEL_341;
            }
            v383 = *(_WORD **)v381;
            v384 = *(_QWORD *)v381 + 2 * v382;
            while (2)
            {
              v385 = (unsigned __int16)*v383;
              if (*v1097 >= 0)
                v386 = 2 * *v1097 + 8;
              else
                v386 = a1 + 168;
              v387 = v385 >> 6;
              v388 = 1 << v385;
              if (((1 << v385) & *(_QWORD *)(v386 + 8 * (v385 >> 6))) != 0
                || *(_WORD *)(*(_QWORD *)(a1 + 152) + 2 * v385))
              {
LABEL_542:
                if (++v383 == (_WORD *)v384)
                  goto LABEL_659;
                continue;
              }
              break;
            }
            LOWORD(v1111) = *v383;
            v1109[0] = v162;
            if ((unsigned __int16)v162 >= v385)
              v17 = v385;
            else
              v17 = (unsigned __int16)v162;
            if ((unsigned __int16)v162 <= v385)
              v389 = v385;
            else
              v389 = (unsigned __int16)v162;
            if (*(_DWORD *)(a1 + 36) <= v17)
            {
              __break(0xC471u);
              JUMPOUT(0x198069F88);
            }
            v18 = *(_QWORD *)(a1 + 24);
            v15 = v18 + 16 * v17;
            v16 = v15 + 8;
            v390 = *(_DWORD *)(v15 + 8);
            if (v390 != -1)
            {
              if (v390)
              {
                v391 = v18 + 16 * v17;
                v394 = *(unsigned __int16 *)(v391 + 12);
                v393 = (_WORD *)(v391 + 12);
                v392 = v394;
                v396 = v393 + 1;
                v395 = (unsigned __int16)v393[1];
                if (v394 > v389 || v395 < v389)
                {
                  *(_DWORD *)v16 = v390 + 1;
                  if (((unsigned __int16)v389 & 0xFFC0u) >= v392)
                    v415 = v392;
                  else
                    v415 = (unsigned __int16)v389 & 0xFFC0;
                  if (v395 <= v389)
                    v416 = v389;
                  else
                    v416 = v395;
                  v417 = v416 - v415;
                  if (v416 < (int)v415)
                    v417 = v416 - v415 + 7;
                  if ((v390 + 1) > 8)
                    v418 = v390 + 1;
                  else
                    v418 = 8;
                  if (12 * v418 >= (v417 >> 3))
                  {
                    if (v392 > v389)
                    {
                      v1077 = v383;
                      v786 = (WTF::BitVector *)(v18 + 16 * v17);
                      v787 = v389;
                      v788 = v393 + 1;
                      v1064 = v393;
                      WTF::BitVector::shiftRightByMultipleOf64(v786, (int)v392 - (int)v415);
                      v396 = v788;
                      v389 = v787;
                      v15 = (unint64_t)v786;
                      v383 = v1077;
                      v22 = (uint64_t *)(a1 + 304);
                      *v1064 = v415;
                      v392 = v415;
                    }
                    v419 = *(_QWORD *)v15;
                    if ((*(_QWORD *)v15 & 0x8000000000000000) != 0)
                      v420 = 63;
                    else
                      v420 = *(_QWORD *)(2 * v419);
                    v421 = v389 - v392;
                    v14 = v389 - v392 + 1;
                    if (v420 < v14)
                    {
                      v1078 = v383;
                      v791 = (uint64_t *)v15;
                      v792 = v396;
                      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v15, v14, 0);
                      v396 = v792;
                      v15 = (unint64_t)v791;
                      v383 = v1078;
                      v22 = (uint64_t *)(a1 + 304);
                      v419 = *v791;
                    }
                    v422 = 2 * v419 + 8;
                    if (v419 < 0)
                      v422 = v15;
                    *(_QWORD *)(v422 + ((v421 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v421;
                    *v396 = v416;
                    goto LABEL_600;
                  }
                  v1060 = v393 + 1;
                  v1066 = v393;
                  v856 = v389;
                  v1072 = v384;
                  v1080 = v383;
                  v857 = (uint64_t *)(v18 + 16 * v17);
                  WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet((uint64_t)v857);
                  v858 = v857;
                  v859 = *v857;
                  if (*v857
                    || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(v857, 0), v858 = v857, (v859 = *v857) != 0))
                  {
                    v860 = *(_DWORD *)(v859 - 8);
                  }
                  else
                  {
                    v860 = 0;
                  }
                  v22 = (uint64_t *)(a1 + 304);
                  v861 = 9 * ((~(v856 << 15) + v856) ^ ((~(v856 << 15) + v856) >> 10));
                  v862 = (v861 ^ (v861 >> 6)) + ~((v861 ^ (v861 >> 6)) << 11);
                  v863 = v860 & (v862 ^ HIWORD(v862));
                  v864 = (_WORD *)(v859 + 2 * v863);
                  v865 = (unsigned __int16)*v864;
                  if (v865 != 0xFFFF)
                  {
                    v866 = 0;
                    v867 = 1;
                    while (v856 != (unsigned __int16)v865)
                    {
                      if ((unsigned __int16)v865 == 65534)
                        v866 = v864;
                      v863 = (v863 + v867) & v860;
                      v864 = (_WORD *)(v859 + 2 * v863);
                      v865 = (unsigned __int16)*v864;
                      ++v867;
                      if (v865 == 0xFFFF)
                      {
                        if (v866)
                        {
                          *v866 = -1;
                          --*(_DWORD *)(*v858 - 16);
                          v864 = v866;
                        }
                        goto LABEL_1176;
                      }
                    }
                    goto LABEL_1182;
                  }
LABEL_1176:
                  *v864 = v856;
                  v868 = *v858;
                  if (*v858)
                    v869 = *(_DWORD *)(v868 - 12) + 1;
                  else
                    v869 = 1;
                  *(_DWORD *)(v868 - 12) = v869;
                  v870 = *v858;
                  if (*v858)
                    v871 = *(_DWORD *)(v870 - 12);
                  else
                    v871 = 0;
                  v872 = (*(_DWORD *)(v870 - 16) + v871);
                  v873 = *(unsigned int *)(v870 - 4);
                  if (v873 > 0x400)
                  {
                    if (v873 > 2 * v872)
                      goto LABEL_1182;
                  }
                  else
                  {
                    if (3 * v873 > 4 * v872)
                    {
LABEL_1182:
                      v384 = v1072;
                      *v1066 = v415;
                      *v1060 = v416;
                      v383 = v1080;
                      goto LABEL_600;
                    }
                    if (!(_DWORD)v873)
                    {
                      v1051 = v870 - 16;
                      v1048 = *(_DWORD *)(v870 - 12);
                      v989 = 8;
LABEL_1313:
                      __lenb = 2 * v989;
                      v1045 = WTF::fastMalloc((WTF *)(__lenb + 16));
                      __bc = (void *)(v1045 + 16);
                      if (v989)
                        memset(__bc, 255, __lenb);
                      *v857 = (uint64_t)__bc;
                      *(_DWORD *)(v1045 + 12) = v989;
                      *(_DWORD *)(*v857 - 8) = v989 - 1;
                      *(_DWORD *)(*v857 - 16) = 0;
                      *(_DWORD *)(*v857 - 12) = v1048;
                      if (!(_DWORD)v873)
                        goto LABEL_1325;
                      for (m = 0; m != v873; ++m)
                      {
                        v992 = *(unsigned __int16 *)(v870 + 2 * m);
                        if (v992 <= 0xFFFD)
                        {
                          v993 = *v857;
                          if (*v857)
                            v994 = *(_DWORD *)(v993 - 8);
                          else
                            v994 = 0;
                          v995 = 0;
                          v996 = 9 * ((~(v992 << 15) + v992) ^ ((~(v992 << 15) + v992) >> 10));
                          v997 = ((v996 ^ (v996 >> 6)) + ~((v996 ^ (v996 >> 6)) << 11)) ^ (((v996 ^ (v996 >> 6))
                                                                                          + ~((v996 ^ (v996 >> 6)) << 11)) >> 16);
                          do
                          {
                            v998 = v997 & v994;
                            v997 = ++v995 + v998;
                          }
                          while (*(__int16 *)(v993 + 2 * v998) != -1);
                          *(_WORD *)(v993 + 2 * v998) = v992;
                        }
                      }
                      v22 = (uint64_t *)(a1 + 304);
                      v990 = 1;
                      if (v870)
                      {
LABEL_1325:
                        WTF::fastFree(v1051, (void *)v14, v15, v16, v17, v18, (uint64_t)v22, v990);
                        v22 = (uint64_t *)(a1 + 304);
                      }
                      goto LABEL_1182;
                    }
                  }
                  v1051 = v870 - 16;
                  v1048 = *(_DWORD *)(v870 - 12);
                  v989 = (_DWORD)v873 << (6 * v1048 >= (2 * v873));
                  goto LABEL_1313;
                }
                v398 = v389 - v392;
                if (*(uint64_t *)v15 >= 0)
                  v399 = 2 * *(_QWORD *)v15 + 8;
                else
                  v399 = v18 + 16 * v17;
                v400 = (v398 >> 3) & 0x1FFFFFFFFFFFFFF8;
                v401 = 1 << v398;
                v402 = *(_QWORD *)(v399 + v400);
                *(_QWORD *)(v399 + v400) = v402 | v401;
                v403 = v402 & v401;
                if (!v403)
                  ++v390;
                *(_DWORD *)v16 = v390;
                v404 = *(_DWORD *)(a1 + 40);
                if (!v403)
                  ++v404;
                *(_DWORD *)(a1 + 40) = v404;
                if (v403)
                {
LABEL_567:
                  LOWORD(v1108[0]) = v385;
                  v405 = *(_QWORD *)(a1 + 64);
                  v406 = *(unsigned __int16 *)(v405 + 2 * v385);
                  *(_WORD *)(v405 + 2 * v385) = v406 - 1;
                  if (*(_DWORD *)(a1 + 12) != v406)
                    goto LABEL_542;
                  v692 = *(_QWORD *)(a1 + 368);
                  v693 = 2 * v692 + 8;
                  v70 = v692 < 0;
                  v694 = a1 + 368;
                  if (!v70)
                    v694 = v693;
                  *(_QWORD *)(v694 + 8 * v387) |= v388;
                  v695 = *(_QWORD *)(a1 + 48) + 16 * v385;
                  v696 = *(unsigned int *)(v695 + 12);
                  if ((_DWORD)v696)
                  {
                    v412 = *(unsigned __int16 **)v695;
                    v413 = 2 * v696;
                    do
                    {
                      v407 = *v412;
                      v408 = 2 * *v1097 + 8;
                      if (*v1097 < 0)
                        v408 = a1 + 168;
                      v409 = v407 >> 6;
                      v410 = *(_QWORD *)(v408 + 8 * (v407 >> 6));
                      v411 = 1 << v407;
                      if (((1 << v407) & v410) == 0 && !*(_WORD *)(*(_QWORD *)(a1 + 152) + 2 * v407))
                      {
                        if ((*v1107 & 0x8000000000000000) == 0)
                          v414 = 2 * *v1107 + 8;
                        else
                          v414 = a1 + 368;
                        *(_QWORD *)(v414 + 8 * v409) |= v411;
                      }
                      ++v412;
                      v413 -= 2;
                    }
                    while (v413);
                  }
                  v697 = *(_QWORD *)(a1 + 208);
                  if (v697 >= 0)
                    v698 = 2 * v697 + 8;
                  else
                    v698 = a1 + 208;
                  *(_QWORD *)(v698 + 8 * v387) &= ~v388;
                  if (*(_DWORD *)(a1 + 116) <= v385)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806A02CLL);
                  }
                  v699 = *(_QWORD *)(a1 + 104) + 40 * v385;
                  v700 = *(unsigned int *)(v699 + 4);
                  v701 = (_QWORD *)(v699 + 8);
                  if ((_DWORD)v700 != 8)
                    v701 = (_QWORD *)*v701;
                  v702 = 0;
                  while ((_DWORD)v700 != v702)
                  {
                    v703 = v702;
                    v704 = *((_DWORD *)v701 + v702++);
                    if (v704 != -1)
                    {
                      v453 = v703;
                      goto LABEL_996;
                    }
                  }
                  v453 = v700;
LABEL_996:
                  if ((_DWORD)v700 == (_DWORD)v453)
                  {
LABEL_1005:
                    v731 = *(unsigned int *)(a1 + 204);
                    if ((_DWORD)v731 == *(_DWORD *)(a1 + 200))
                    {
                      v890 = v383;
                      v891 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1091, v731 + 1, (unint64_t)v1108);
                      v22 = (uint64_t *)(a1 + 304);
                      v892 = *(unsigned int *)(a1 + 204);
                      v732 = v892 + 1;
                      v383 = v890;
                      *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v892) = *v891;
                    }
                    else
                    {
                      v732 = v731 + 1;
                      *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v731) = v385;
                    }
                    *(_DWORD *)(a1 + 204) = v732;
                    goto LABEL_542;
                  }
                  v452 = v453 | (v700 << 32);
                  if (*v9 >= 0)
                    v705 = 2 * *v9 + 8;
                  else
                    v705 = (uint64_t)v9;
                  while (1)
                  {
                    v449 = *((unsigned int *)v701 + v452);
                    if (((*(_QWORD *)(v705 + ((v449 >> 3) & 0x1FFFFFF8)) >> v449) & 1) != 0
                      || *(_DWORD *)(*v22 + 4 * v449) != -1)
                    {
                      break;
                    }
                    v450 = HIDWORD(v452);
                    if ((v453 + 1) > HIDWORD(v452))
                      LODWORD(v450) = v453 + 1;
                    while (1)
                    {
                      v451 = (v453 + 1);
                      v452 = v452 & 0xFFFFFFFF00000000 | v451;
                      if ((_DWORD)v450 - 1 == (_DWORD)v453)
                        break;
                      LODWORD(v453) = v453 + 1;
                      if (*((_DWORD *)v701 + v451) != -1)
                        goto LABEL_636;
                    }
                    LODWORD(v451) = v450;
LABEL_636:
                    LODWORD(v453) = v451;
                    if ((_DWORD)v700 == (_DWORD)v451)
                      goto LABEL_1005;
                  }
                  v733 = (_WORD *)*v1094;
                  if (*v1094)
                    goto LABEL_1009;
                  v961 = v383;
                  v962 = WTF::fastZeroedMalloc(0x20uLL, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                  v22 = (uint64_t *)(a1 + 304);
                  *v1094 = v962 + 16;
                  *(_DWORD *)(v962 + 12) = 8;
                  v383 = v961;
                  *(_DWORD *)(*v1094 - 8) = 7;
                  *(_DWORD *)(*v1094 - 16) = 0;
                  *(_DWORD *)(*v1094 - 12) = 0;
                  v733 = (_WORD *)*v1094;
                  if (*v1094)
LABEL_1009:
                    v734 = *((_DWORD *)v733 - 2);
                  else
                    v734 = 0;
                  v735 = ~(LOWORD(v1108[0]) << 15) + LOWORD(v1108[0]);
                  v736 = (9 * (v735 ^ (v735 >> 10))) ^ ((9 * (v735 ^ (v735 >> 10))) >> 6);
                  v737 = ((v736 + ~(v736 << 11)) ^ ((v736 + ~(v736 << 11)) >> 16)) & v734;
                  v738 = &v733[v737];
                  v739 = (unsigned __int16)*v738;
                  if (*v738)
                  {
                    v740 = 0;
                    v741 = 1;
                    while (v739 != LOWORD(v1108[0]))
                    {
                      if (v739 == 0xFFFF)
                        v740 = v738;
                      v737 = (v737 + v741) & v734;
                      v738 = &v733[v737];
                      v739 = (unsigned __int16)*v738;
                      ++v741;
                      if (!*v738)
                      {
                        if (v740)
                        {
                          *v740 = 0;
                          --*(_DWORD *)(*v1094 - 16);
                          v738 = v740;
                        }
                        goto LABEL_1018;
                      }
                    }
                    goto LABEL_542;
                  }
LABEL_1018:
                  *v738 = v1108[0];
                  v742 = (_WORD *)*v1094;
                  if (*v1094)
                    v743 = *((_DWORD *)v742 - 3) + 1;
                  else
                    v743 = 1;
                  *((_DWORD *)v742 - 3) = v743;
                  v744 = (_WORD *)*v1094;
                  if (*v1094)
                    v745 = *((_DWORD *)v744 - 3);
                  else
                    v745 = 0;
                  v746 = (*((_DWORD *)v744 - 4) + v745);
                  v747 = *((unsigned int *)v744 - 1);
                  if (v747 > 0x400)
                  {
                    if (v747 > 2 * v746)
                      goto LABEL_542;
                  }
                  else
                  {
                    if (3 * v747 > 4 * v746)
                      goto LABEL_542;
                    if (!(_DWORD)v747)
                    {
                      v1076 = v383;
                      v1088 = (unint64_t)(v744 - 8);
                      v1070 = v384;
                      v748 = v162;
                      v749 = *((_DWORD *)v744 - 3);
                      v750 = 8;
LABEL_1026:
                      v751 = WTF::fastZeroedMalloc(2 * v750 + 16, v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                      *v1094 = v751 + 16;
                      *(_DWORD *)(v751 + 12) = v750;
                      *(_DWORD *)(*v1094 - 8) = v750 - 1;
                      *(_DWORD *)(*v1094 - 16) = 0;
                      *(_DWORD *)(*v1094 - 12) = v749;
                      v22 = (uint64_t *)(a1 + 304);
                      v162 = v748;
                      v384 = v1070;
                      v383 = v1076;
                      if (!(_DWORD)v747)
                        goto LABEL_1228;
                      for (n = 0; n != v747; ++n)
                      {
                        v459 = (unsigned __int16)v744[n];
                        if (v744[n])
                          v460 = v459 == 0xFFFF;
                        else
                          v460 = 1;
                        if (!v460)
                        {
                          v462 = (_WORD *)*v1094;
                          if (*v1094)
                            v463 = *((_DWORD *)v462 - 2);
                          else
                            v463 = 0;
                          v464 = 0;
                          v465 = 9 * ((~(v459 << 15) + v459) ^ ((~(v459 << 15) + v459) >> 10));
                          v466 = ((v465 ^ (v465 >> 6)) + ~((v465 ^ (v465 >> 6)) << 11)) ^ (((v465 ^ (v465 >> 6))
                                                                                          + ~((v465 ^ (v465 >> 6)) << 11)) >> 16);
                          do
                          {
                            v467 = v466 & v463;
                            v466 = ++v464 + v467;
                          }
                          while (v462[v467]);
                          v462[v467] = v459;
                        }
                      }
                      if (v744)
                      {
LABEL_1228:
                        WTF::fastFree(v1088, (void *)v14, v15, v16, v17, v18, v1098, 1);
                        v383 = v1076;
                        v22 = (uint64_t *)(a1 + 304);
                      }
                      goto LABEL_542;
                    }
                  }
                  v1076 = v383;
                  v1088 = (unint64_t)(v744 - 8);
                  v1070 = v384;
                  v748 = v162;
                  v749 = *((_DWORD *)v744 - 3);
                  v750 = (_DWORD)v747 << (6 * v749 >= (2 * v747));
                  goto LABEL_1026;
                }
LABEL_601:
                v423 = *(unsigned __int16 *)(a1 + 16);
                if (v423 < v385)
                {
                  v424 = *(_QWORD *)(a1 + 48) + 16 * v385;
                  v425 = *(unsigned int *)(v424 + 12);
                  if ((_DWORD)v425 == *(_DWORD *)(v424 + 8))
                  {
                    v445 = v383;
                    v446 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v385, v425 + 1, (unint64_t)v1109);
                    v22 = (uint64_t *)(a1 + 304);
                    v425 = *(unsigned int *)(v424 + 12);
                    v383 = v445;
                    *(_WORD *)(*(_QWORD *)v424 + 2 * v425) = *v446;
                  }
                  else
                  {
                    *(_WORD *)(*(_QWORD *)v424 + 2 * v425) = v1109[0];
                  }
                  *(_DWORD *)(v424 + 12) = v425 + 1;
                  v423 = *(unsigned __int16 *)(a1 + 16);
                }
                if (v423 < v1109[0])
                {
                  v426 = *(_QWORD *)(a1 + 48) + 16 * v1109[0];
                  v427 = *(unsigned int *)(v426 + 12);
                  if ((_DWORD)v427 == *(_DWORD *)(v426 + 8))
                  {
                    v447 = v383;
                    v448 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v1109[0], v427 + 1, (unint64_t)&v1111);
                    v22 = (uint64_t *)(a1 + 304);
                    v427 = *(unsigned int *)(v426 + 12);
                    v383 = v447;
                    *(_WORD *)(*(_QWORD *)v426 + 2 * v427) = *v448;
                  }
                  else
                  {
                    *(_WORD *)(*(_QWORD *)v426 + 2 * v427) = v385;
                  }
                  *(_DWORD *)(v426 + 12) = v427 + 1;
                  v423 = *(unsigned __int16 *)(a1 + 16);
                }
                if (v423 < (unsigned __int16)v162)
                  ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * v1100);
                goto LABEL_542;
              }
              v683 = v18 + 16 * v17;
              *(_WORD *)(v683 + 12) = v389 & 0xFFC0;
              *(_WORD *)(v683 + 14) = v389;
              *(_DWORD *)v16 = 1;
              v684 = *(_QWORD *)v15;
              if ((*(_QWORD *)v15 & 0x8000000000000000) != 0)
                v685 = 63;
              else
                v685 = *(_QWORD *)(2 * v684);
              v686 = v389 - ((unsigned __int16)v389 & 0xFFC0);
              v14 = v686 + 1;
              if (v685 < v686 + 1)
              {
                v1081 = v383;
                v916 = (WTF::BitVector *)(v18 + 16 * v17);
                v917 = v389;
                WTF::BitVector::resizeOutOfLine(v916, v14, 0);
                LOBYTE(v389) = v917;
                v15 = (unint64_t)v916;
                v383 = v1081;
                v22 = (uint64_t *)(a1 + 304);
                v684 = *(_QWORD *)v916;
              }
              if (v684 >= 0)
                v687 = 2 * v684 + 8;
              else
                v687 = v15;
              *(_QWORD *)(v687 + ((v686 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v389;
LABEL_600:
              ++*(_DWORD *)(a1 + 40);
              LODWORD(v385) = (unsigned __int16)v1111;
              goto LABEL_601;
            }
            v428 = *(_QWORD *)v15;
            if (*(_QWORD *)v15)
              goto LABEL_612;
            v1086 = v383;
            __bd = (void *)v17;
            v1062 = v15 + 8;
            v1052 = *(_QWORD *)(a1 + 24);
            v1037 = (uint64_t *)(v18 + 16 * v17);
            v1068 = v389;
            WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand(v1037, 0);
            LODWORD(v389) = v1068;
            v15 = (unint64_t)v1037;
            v383 = v1086;
            v18 = v1052;
            v17 = (uint64_t)__bd;
            v16 = v1062;
            v22 = (uint64_t *)(a1 + 304);
            v428 = *v1037;
            if (*v1037)
LABEL_612:
              v429 = *(_DWORD *)(v428 - 8);
            else
              v429 = 0;
            v430 = 9 * ((~((_DWORD)v389 << 15) + v389) ^ ((~((_DWORD)v389 << 15) + v389) >> 10));
            v431 = (v430 ^ (v430 >> 6)) + ~((v430 ^ (v430 >> 6)) << 11);
            v432 = v429 & (v431 ^ HIWORD(v431));
            v433 = (_WORD *)(v428 + 2 * v432);
            v434 = (unsigned __int16)*v433;
            if (v434 != 0xFFFF)
            {
              v435 = 0;
              v436 = 1;
              while ((_DWORD)v389 != (unsigned __int16)v434)
              {
                if ((unsigned __int16)v434 == 65534)
                  v435 = v433;
                v432 = (v432 + v436) & v429;
                v433 = (_WORD *)(v428 + 2 * v432);
                v434 = (unsigned __int16)*v433;
                ++v436;
                if (v434 == 0xFFFF)
                {
                  if (v435)
                  {
                    *v435 = -1;
                    --*(_DWORD *)(*(_QWORD *)v15 - 16);
                    v433 = v435;
                  }
                  goto LABEL_881;
                }
              }
              goto LABEL_567;
            }
LABEL_881:
            *v433 = v389;
            v609 = *(_QWORD *)v15;
            if (*(_QWORD *)v15)
              v610 = *(_DWORD *)(v609 - 12) + 1;
            else
              v610 = 1;
            *(_DWORD *)(v609 - 12) = v610;
            v912 = *(unsigned __int16 **)v15;
            if (*(_QWORD *)v15)
              v611 = *((_DWORD *)v912 - 3);
            else
              v611 = 0;
            v612 = (*((_DWORD *)v912 - 4) + v611);
            v613 = *((unsigned int *)v912 - 1);
            if (v613 > 0x400)
            {
              if (v613 <= 2 * v612)
                goto LABEL_1183;
            }
            else
            {
              if (3 * v613 > 4 * v612)
                goto LABEL_887;
              if (!(_DWORD)v613)
              {
                __len = (size_t)(v912 - 8);
                v1049 = v18;
                __ba = (void *)v17;
                v1059 = v16;
                v1065 = v389;
                v1046 = (uint64_t *)v15;
                v1071 = v384;
                v1079 = v383;
                v1089 = v162;
                v1043 = *((_DWORD *)v912 - 3);
                v806 = 8;
                goto LABEL_1184;
              }
LABEL_1183:
              __len = (size_t)(v912 - 8);
              v1049 = v18;
              __ba = (void *)v17;
              v1059 = v16;
              v1065 = v389;
              v1046 = (uint64_t *)v15;
              v1071 = v384;
              v1079 = v383;
              v1089 = v162;
              v1043 = *((_DWORD *)v912 - 3);
              v806 = (_DWORD)v613 << (6 * v1043 >= (2 * v613));
LABEL_1184:
              v874 = 2 * v806;
              v875 = WTF::fastMalloc((WTF *)(v874 + 16));
              v881 = v875;
              v882 = v875 + 16;
              if (v806)
                memset((void *)(v875 + 16), 255, v874);
              v15 = (unint64_t)v1046;
              *v1046 = v882;
              *(_DWORD *)(v881 + 12) = v806;
              *(_DWORD *)(*v1046 - 8) = v806 - 1;
              *(_DWORD *)(*v1046 - 16) = 0;
              *(_DWORD *)(*v1046 - 12) = v1043;
              if (!(_DWORD)v613)
                goto LABEL_1099;
              for (ii = 0; ii != v613; ++ii)
              {
                v437 = v912[ii];
                if (v437 <= 0xFFFD)
                {
                  v438 = *v1046;
                  if (*v1046)
                    v439 = *(_DWORD *)(v438 - 8);
                  else
                    v439 = 0;
                  v440 = 0;
                  v441 = 9 * ((~(v437 << 15) + v437) ^ ((~(v437 << 15) + v437) >> 10));
                  v442 = ((v441 ^ (v441 >> 6)) + ~((v441 ^ (v441 >> 6)) << 11)) ^ (((v441 ^ (v441 >> 6))
                                                                                  + ~((v441 ^ (v441 >> 6)) << 11)) >> 16);
                  do
                  {
                    v443 = v442 & v439;
                    v442 = ++v440 + v443;
                  }
                  while (*(__int16 *)(v438 + 2 * v443) != -1);
                  *(_WORD *)(v438 + 2 * v443) = v437;
                }
              }
              if (v912)
              {
LABEL_1099:
                WTF::fastFree(__len, (void *)v14, (uint64_t)v1046, v876, v877, v878, v879, v880);
                v15 = (unint64_t)v1046;
              }
              v912 = *(unsigned __int16 **)v15;
              v22 = (uint64_t *)(a1 + 304);
              v383 = v1079;
              v162 = v1089;
              LODWORD(v389) = v1065;
              v384 = v1071;
              v17 = (uint64_t)__ba;
              v16 = v1059;
              v18 = v1049;
            }
LABEL_887:
            v614 = v389 & 0xFFC0;
            v615 = v18 + 16 * v17;
            v618 = *(unsigned __int16 *)(v615 + 12);
            v617 = (unsigned __int16 *)(v615 + 12);
            v616 = v618;
            if (v614 >= v618)
              v614 = v616;
            *v617 = v614;
            if (v617[1] <= v389)
              v619 = v389;
            else
              v619 = v617[1];
            v617[1] = v619;
            if (!v912)
              goto LABEL_600;
            v620 = v619 - v614;
            if ((int)v619 < (int)v614)
              v620 = v619 - v614 + 7;
            if (2 * (v620 >> 3) >= (2 * *((_DWORD *)v912 - 1)))
              goto LABEL_600;
            v1108[0] = 0x8000000000000000;
            v14 = v619 - v614 + 1;
            if (v14 > 0x3F)
            {
              v1085 = v383;
              v1005 = (unsigned __int16 **)v15;
              v1006 = v16;
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v1108, v14, 0);
              v15 = (unint64_t)v1005;
              v383 = v1085;
              v16 = v1006;
              v22 = (uint64_t *)(a1 + 304);
              v912 = *v1005;
              *(_DWORD *)v16 = 0;
              if (v912)
                goto LABEL_898;
            }
            else
            {
              *(_DWORD *)v16 = 0;
LABEL_898:
              v621 = *((unsigned int *)v912 - 1);
              v622 = &v912[v621];
              v457 = v622;
              if (*((_DWORD *)v912 - 3))
              {
                v457 = v912;
                if ((_DWORD)v621)
                {
                  v623 = 2 * v621;
                  v457 = v912;
                  while (*v457 >= 0xFFFEu)
                  {
                    ++v457;
                    v623 -= 2;
                    if (!v623)
                    {
                      v457 = v622;
                      break;
                    }
                  }
                }
              }
              v624 = &v912[*((unsigned int *)v912 - 1)];
              if (v624 != v457)
              {
                v458 = 0;
                v625 = *v617;
                do
                {
                  v454 = v457 + 1;
                  v455 = *v457 - v625;
                  v456 = v1108;
                  if (v1108[0] >= 0)
                    v456 = (_QWORD *)(2 * v1108[0] + 8);
                  *(_QWORD *)((char *)v456 + ((v455 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v455;
                  v457 = v622;
                  if (v454 != v622)
                  {
                    v457 = v454;
                    while (*v457 >= 0xFFFEu)
                    {
                      if (++v457 == v622)
                      {
                        v457 = v622;
                        break;
                      }
                    }
                  }
                  ++v458;
                }
                while (v457 != v624);
                *(_DWORD *)v16 = v458;
                v912 = *(unsigned __int16 **)v15;
              }
              if (v912)
              {
                v913 = v383;
                v914 = (unint64_t)(v912 - 8);
                v915 = v15;
                WTF::fastFree(v914, (void *)v14, v15, v16, v17, v18, (uint64_t)v22, 1);
                v15 = v915;
                v383 = v913;
                v22 = (uint64_t *)(a1 + 304);
              }
            }
            *(_QWORD *)v15 = 0x8000000000000000;
            if ((v1108[0] & 0x8000000000000000) != 0)
            {
              *(_QWORD *)v15 = v1108[0];
            }
            else
            {
              v1008 = v383;
              WTF::BitVector::setSlow((WTF::BitVector *)v15, (const WTF::BitVector *)v1108, v15, v16, v17, v18, (uint64_t)v22, 1);
              WTF::fastFree(2 * v1108[0], v1009, v1010, v1011, v1012, v1013, v1014, v1015);
              v383 = v1008;
              v22 = (uint64_t *)(a1 + 304);
            }
            goto LABEL_600;
          }
        }
        else
        {
          v339 = (unsigned __int16)v158;
        }
        v918 = a1 + 208;
        v919 = *(_QWORD *)(a1 + 208);
        if (v919 >= 0)
          v918 = 2 * v919 + 8;
        *(_QWORD *)(v918 + ((v158 >> 3) & 0x1FF8)) &= ~(1 << v158);
        goto LABEL_496;
      }
      v274 = *(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v158;
      v275 = *(unsigned int *)(v274 + 12);
      if (!(_DWORD)v275)
        goto LABEL_483;
      v276 = *(unsigned __int16 **)v274;
      v277 = &v276[v275];
      while (1)
      {
        v278 = *v276;
        if (v161 >= v278)
          goto LABEL_377;
        v279 = *v1097 >= 0 ? 2 * *v1097 + 8 : a1 + 168;
        if (((*(_QWORD *)(v279 + ((v278 >> 3) & 0x1FF8)) >> v278) & 1) != 0
          || *(_WORD *)(v706 + 2 * v278)
          || *(_DWORD *)(a1 + 12) > *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v278))
        {
          goto LABEL_377;
        }
        if (v278 >= (unsigned __int16)v162)
          v280 = (unsigned __int16)v162;
        else
          v280 = *v276;
        if (v278 <= (unsigned __int16)v162)
          v281 = (unsigned __int16)v162;
        else
          v281 = *v276;
        if (v165 <= v280)
        {
          __break(0xC471u);
          JUMPOUT(0x198069F80);
        }
        v282 = v166 + 16 * v280;
        if (*(_DWORD *)(v282 + 8) == -1)
          break;
        v283 = *(unsigned __int16 *)(v166 + 16 * v280 + 12);
        if (v283 > v281)
          goto LABEL_235;
        v14 = 2 * *(_QWORD *)v282;
        v15 = (*(_QWORD *)v282 & 0x8000000000000000) != 0 ? 63 : *(_QWORD *)v14;
        v284 = v281 - v283;
        if (v15 <= v284)
          goto LABEL_235;
        if (*(uint64_t *)v282 >= 0)
          v282 = v14 + 8;
        if (((*(_QWORD *)(v282 + ((v284 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v284) & 1) == 0)
          goto LABEL_235;
LABEL_377:
        if (++v276 == v277)
          goto LABEL_483;
      }
      v285 = *(_QWORD *)v282;
      if (!v285)
        goto LABEL_235;
      v286 = *(_DWORD *)(v285 - 8);
      v287 = 9 * ((~((_DWORD)v281 << 15) + v281) ^ ((~((_DWORD)v281 << 15) + v281) >> 10));
      v288 = v287 ^ (v287 >> 6);
      v14 = ~(v288 << 11);
      v289 = v286 & ((v288 + v14) ^ ((v288 + v14) >> 16));
      v15 = *(unsigned __int16 *)(v285 + 2 * v289);
      if ((_DWORD)v15 == (_DWORD)v281)
        goto LABEL_377;
      v14 = 1;
      while (1)
      {
        v16 = 0xFFFFLL;
        if ((_WORD)v15 == 0xFFFF)
          break;
        v289 = (v289 + v14) & v286;
        v15 = *(unsigned __int16 *)(v285 + 2 * v289);
        v14 = (v14 + 1);
        if ((_DWORD)v15 == (_DWORD)v281)
          goto LABEL_377;
      }
LABEL_235:
      if (*v9 >= 0)
        v191 = 2 * *v9 + 8;
      else
        v191 = (uint64_t)v9;
      *(_QWORD *)(v191 + ((v154 >> 3) & 0x1FFFFFF8)) |= 1 << v154;
      v1110 = v158;
      if (v161 >= (unsigned __int16)v162)
        goto LABEL_340;
      v192 = *v1095;
      if (*v1095)
        goto LABEL_240;
      v584 = WTF::fastMalloc((WTF *)0x110);
      v22 = (uint64_t *)(a1 + 304);
      *(_WORD *)(v584 + 16) = -1;
      v584 += 16;
      *(_QWORD *)(v584 + 8) = 0x800000000;
      *(_QWORD *)(v584 + 16) = -1;
      *(_QWORD *)(v584 + 24) = -1;
      *(_WORD *)(v584 + 32) = -1;
      *(_QWORD *)(v584 + 40) = 0x800000000;
      *(_QWORD *)(v584 + 48) = -1;
      *(_QWORD *)(v584 + 56) = -1;
      *(_WORD *)(v584 + 64) = -1;
      *(_QWORD *)(v584 + 72) = 0x800000000;
      *(_QWORD *)(v584 + 80) = -1;
      *(_QWORD *)(v584 + 88) = -1;
      *(_WORD *)(v584 + 96) = -1;
      *(_QWORD *)(v584 + 104) = 0x800000000;
      *(_QWORD *)(v584 + 112) = -1;
      *(_QWORD *)(v584 + 120) = -1;
      *(_WORD *)(v584 + 128) = -1;
      *(_QWORD *)(v584 + 136) = 0x800000000;
      *(_WORD *)(v584 + 160) = -1;
      *(_QWORD *)(v584 + 144) = -1;
      *(_QWORD *)(v584 + 152) = -1;
      *(_QWORD *)(v584 + 168) = 0x800000000;
      *(_QWORD *)(v584 + 176) = -1;
      *(_QWORD *)(v584 + 184) = -1;
      *(_WORD *)(v584 + 192) = -1;
      *(_QWORD *)(v584 + 200) = 0x800000000;
      *(_QWORD *)(v584 + 208) = -1;
      *(_QWORD *)(v584 + 216) = -1;
      *(_WORD *)(v584 + 224) = -1;
      *(_QWORD *)(v584 + 232) = 0x800000000;
      *(_QWORD *)(v584 + 240) = -1;
      *(_QWORD *)(v584 + 248) = -1;
      *v1095 = v584;
      *(_DWORD *)(v584 - 4) = 8;
      *(_DWORD *)(*v1095 - 8) = 7;
      *(_DWORD *)(*v1095 - 16) = 0;
      *(_DWORD *)(*v1095 - 12) = 0;
      v192 = *v1095;
      if (*v1095)
LABEL_240:
        v193 = *(_DWORD *)(v192 - 8);
      else
        v193 = 0;
      v194 = ~((unsigned __int16)v162 << 15) + (unsigned __int16)v162;
      v195 = (9 * (v194 ^ (v194 >> 10))) ^ ((9 * (v194 ^ (v194 >> 10))) >> 6);
      v196 = v193 & ((v195 + ~(v195 << 11)) ^ ((v195 + ~(v195 << 11)) >> 16));
      v197 = (unsigned __int16 *)(v192 + 32 * v196);
      v198 = *v197;
      if (v198 == 0xFFFF)
      {
LABEL_351:
        *v197 = v162;
        if (*((_DWORD *)v197 + 3) != 8)
        {
          WTF::fastFree(*((_QWORD *)v197 + 2), (void *)v14, v15, v16, v17, v18, (uint64_t)v22, 1);
          v22 = (uint64_t *)(a1 + 304);
        }
        *((_QWORD *)v197 + 1) = 0x800000000;
        *((_QWORD *)v197 + 2) = -1;
        *((_QWORD *)v197 + 3) = -1;
        v262 = *v1095;
        if (*v1095)
          v263 = *(_DWORD *)(v262 - 12) + 1;
        else
          v263 = 1;
        *(_DWORD *)(v262 - 12) = v263;
        v264 = *v1095;
        if (*v1095)
          v265 = *(_DWORD *)(v264 - 12);
        else
          v265 = 0;
        v266 = (*(_DWORD *)(v264 - 16) + v265);
        v267 = *(unsigned int *)(v264 - 4);
        if (v267 > 0x400)
        {
          if (v267 > 2 * v266)
            goto LABEL_244;
        }
        else
        {
          if (3 * v267 > 4 * v266)
            goto LABEL_244;
          if (!(_DWORD)v267)
          {
            v1101 = (WTF *)(v264 - 16);
            v1087 = v162;
            v562 = *(_DWORD *)(v264 - 12);
            v563 = 8;
            goto LABEL_800;
          }
        }
        v1101 = (WTF *)(v264 - 16);
        v1087 = v162;
        v562 = *(_DWORD *)(v264 - 12);
        v563 = (_DWORD)v267 << (6 * v562 >= (2 * v267));
LABEL_800:
        v107 = v563;
        v564 = WTF::fastMalloc((WTF *)((32 * v563) | 0x10));
        if (v563)
        {
          v106 = (_QWORD *)(v564 + 32);
          do
          {
            *((_WORD *)v106 - 8) = -1;
            *(v106 - 1) = 0x800000000;
            *v106 = -1;
            v106[1] = -1;
            v106 += 4;
            --v107;
          }
          while (v107);
        }
        *v1095 = v564 + 16;
        *(_DWORD *)(v564 + 12) = v563;
        *(_DWORD *)(*v1095 - 8) = v563 - 1;
        *(_DWORD *)(*v1095 - 16) = 0;
        *(_DWORD *)(*v1095 - 12) = v562;
        v22 = (uint64_t *)(a1 + 304);
        v987 = 1;
        LOWORD(v162) = v1087;
        if ((_DWORD)v267)
        {
          v132 = 0;
          v988 = 0;
          do
          {
            v121 = (unsigned __int16 *)(v264 + 32 * v132);
            v122 = *v121;
            if (v122 == 0xFFFF)
            {
              if (*((_DWORD *)v121 + 3) != 8)
              {
                v999 = v988;
                WTF::fastFree(*(_QWORD *)(v264 + 32 * v132 + 16), (void *)v14, v15, v16, v17, v18, (uint64_t)v22, v987);
                v988 = v999;
              }
            }
            else if (v122 != 65534)
            {
              v123 = *v1095;
              if (*v1095)
                v124 = *(_DWORD *)(v123 - 8);
              else
                v124 = 0;
              v125 = 0;
              v126 = 9 * ((~(v122 << 15) + v122) ^ ((~(v122 << 15) + v122) >> 10));
              v127 = ((v126 ^ (v126 >> 6)) + ~((v126 ^ (v126 >> 6)) << 11)) ^ (((v126 ^ (v126 >> 6))
                                                                              + ~((v126 ^ (v126 >> 6)) << 11)) >> 16);
              do
              {
                v128 = v127 & v124;
                v127 = ++v125 + v128;
              }
              while (*(__int16 *)(v123 + 32 * v128) != -1);
              v129 = (unsigned __int16 *)(v123 + 32 * v128);
              if (*((_DWORD *)v129 + 3) != 8)
              {
                v1084 = v988;
                WTF::fastFree(*((_QWORD *)v129 + 2), (void *)v14, v15, v16, v17, v18, (uint64_t)v22, v987);
                v988 = v1084;
                LOWORD(v122) = *v121;
              }
              *v129 = v122;
              v130 = v264 + 32 * v132;
              v131 = *(_OWORD *)(v130 + 8);
              *((_QWORD *)v129 + 3) = *(_QWORD *)(v130 + 24);
              *(_OWORD *)(v129 + 4) = v131;
              *(_QWORD *)(v130 + 8) = 0x800000000;
              *(_QWORD *)(v130 + 16) = -1;
              *(_QWORD *)(v130 + 24) = -1;
              if (v121 == v197)
                v988 = v129;
            }
            ++v132;
          }
          while (v132 != v267);
        }
        else
        {
          v988 = 0;
          v197 = 0;
          if (!v264)
            goto LABEL_244;
        }
        v197 = v988;
        WTF::fastFree((unint64_t)v1101, (void *)v14, v15, v16, v17, v18, (uint64_t)v22, v987);
        v22 = (uint64_t *)(a1 + 304);
        goto LABEL_244;
      }
      v199 = 0;
      v200 = 1;
      while ((unsigned __int16)v198 != (unsigned __int16)v162)
      {
        if ((unsigned __int16)v198 == 65534)
          v199 = v197;
        v196 = ((_DWORD)v196 + v200) & v193;
        v197 = (unsigned __int16 *)(v192 + 32 * v196);
        v198 = *v197;
        ++v200;
        if (v198 == 0xFFFF)
        {
          if (v199)
          {
            *v199 = -1;
            *((_QWORD *)v199 + 1) = 0x800000000;
            *((_QWORD *)v199 + 2) = -1;
            *((_QWORD *)v199 + 3) = -1;
            --*(_DWORD *)(*v1095 - 16);
            v197 = v199;
          }
          goto LABEL_351;
        }
      }
LABEL_244:
      LODWORD(v158) = v1110;
      v201 = *((_DWORD *)v197 + 2);
      v202 = *((_DWORD *)v197 + 3);
      if (v202 == 8)
      {
        if (v201)
        {
          v203 = *((unsigned int *)v197 + 2);
          v204 = v197 + 8;
          v205 = v203;
          while (1)
          {
            v206 = *v204++;
            if (v206 == v1110)
              break;
            if (!--v205)
            {
              if (v201 <= 7)
                goto LABEL_339;
              v807 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
              *(_QWORD *)&v19 = -1;
              *((_QWORD *)&v19 + 1) = -1;
              *v807 = v19;
              v807[1] = v19;
              v807[2] = v19;
              v807[3] = v19;
              v807[4] = v19;
              v807[5] = v19;
              v807[6] = v19;
              v807[7] = v19;
              *((_DWORD *)v197 + 3) = 64;
              v808 = v197[8];
              if (v808 != 0xFFFF)
              {
                v809 = 9 * ((~(v808 << 15) + v808) ^ ((~(v808 << 15) + v808) >> 10));
                v810 = (v809 ^ (v809 >> 6)) + ~((v809 ^ (v809 >> 6)) << 11);
                v811 = (v810 ^ BYTE2(v810)) & 0x3F;
                v812 = *((unsigned __int16 *)v807 + v811);
                if (v812 != 0xFFFF && v812 != v808)
                {
                  v963 = 1;
                  do
                  {
                    v811 = ((_BYTE)v811 + (_BYTE)v963) & 0x3F;
                    v964 = *((unsigned __int16 *)v807 + v811);
                    ++v963;
                  }
                  while (v964 != 0xFFFF && v964 != v808);
                }
                *((_WORD *)v807 + v811) = v808;
              }
              v814 = v197[9];
              v22 = (uint64_t *)(a1 + 304);
              if (v814 != 0xFFFF)
              {
                v815 = 9 * ((~(v814 << 15) + v814) ^ ((~(v814 << 15) + v814) >> 10));
                v816 = (v815 ^ (v815 >> 6)) + ~((v815 ^ (v815 >> 6)) << 11);
                v817 = (v816 ^ BYTE2(v816)) & 0x3F;
                v818 = *((unsigned __int16 *)v807 + v817);
                if (v818 != 0xFFFF && v818 != v814)
                {
                  v966 = 1;
                  do
                  {
                    v817 = ((_BYTE)v817 + (_BYTE)v966) & 0x3F;
                    v967 = *((unsigned __int16 *)v807 + v817);
                    ++v966;
                  }
                  while (v967 != 0xFFFF && v967 != v814);
                }
                *((_WORD *)v807 + v817) = v814;
              }
              v820 = v197[10];
              if (v820 != 0xFFFF)
              {
                v821 = 9 * ((~(v820 << 15) + v820) ^ ((~(v820 << 15) + v820) >> 10));
                v822 = (v821 ^ (v821 >> 6)) + ~((v821 ^ (v821 >> 6)) << 11);
                v823 = (v822 ^ BYTE2(v822)) & 0x3F;
                v824 = *((unsigned __int16 *)v807 + v823);
                if (v824 != 0xFFFF && v824 != v820)
                {
                  v969 = 1;
                  do
                  {
                    v823 = ((_BYTE)v823 + (_BYTE)v969) & 0x3F;
                    v970 = *((unsigned __int16 *)v807 + v823);
                    ++v969;
                  }
                  while (v970 != 0xFFFF && v970 != v820);
                }
                *((_WORD *)v807 + v823) = v820;
              }
              v826 = v197[11];
              if (v826 != 0xFFFF)
              {
                v827 = 9 * ((~(v826 << 15) + v826) ^ ((~(v826 << 15) + v826) >> 10));
                v828 = (v827 ^ (v827 >> 6)) + ~((v827 ^ (v827 >> 6)) << 11);
                v829 = (v828 ^ BYTE2(v828)) & 0x3F;
                v830 = *((unsigned __int16 *)v807 + v829);
                if (v830 != 0xFFFF && v830 != v826)
                {
                  v972 = 1;
                  do
                  {
                    v829 = ((_BYTE)v829 + (_BYTE)v972) & 0x3F;
                    v973 = *((unsigned __int16 *)v807 + v829);
                    ++v972;
                  }
                  while (v973 != 0xFFFF && v973 != v826);
                }
                *((_WORD *)v807 + v829) = v826;
              }
              v832 = v197[12];
              if (v832 != 0xFFFF)
              {
                v833 = 9 * ((~(v832 << 15) + v832) ^ ((~(v832 << 15) + v832) >> 10));
                v834 = (v833 ^ (v833 >> 6)) + ~((v833 ^ (v833 >> 6)) << 11);
                v835 = (v834 ^ BYTE2(v834)) & 0x3F;
                v836 = *((unsigned __int16 *)v807 + v835);
                if (v836 != 0xFFFF && v836 != v832)
                {
                  v975 = 1;
                  do
                  {
                    v835 = ((_BYTE)v835 + (_BYTE)v975) & 0x3F;
                    v976 = *((unsigned __int16 *)v807 + v835);
                    ++v975;
                  }
                  while (v976 != 0xFFFF && v976 != v832);
                }
                *((_WORD *)v807 + v835) = v832;
              }
              v838 = v197[13];
              if (v838 != 0xFFFF)
              {
                v839 = 9 * ((~(v838 << 15) + v838) ^ ((~(v838 << 15) + v838) >> 10));
                v840 = (v839 ^ (v839 >> 6)) + ~((v839 ^ (v839 >> 6)) << 11);
                v841 = (v840 ^ BYTE2(v840)) & 0x3F;
                v842 = *((unsigned __int16 *)v807 + v841);
                if (v842 != 0xFFFF && v842 != v838)
                {
                  v978 = 1;
                  do
                  {
                    v841 = ((_BYTE)v841 + (_BYTE)v978) & 0x3F;
                    v979 = *((unsigned __int16 *)v807 + v841);
                    ++v978;
                  }
                  while (v979 != 0xFFFF && v979 != v838);
                }
                *((_WORD *)v807 + v841) = v838;
              }
              v844 = v197[14];
              if (v844 != 0xFFFF)
              {
                v845 = 9 * ((~(v844 << 15) + v844) ^ ((~(v844 << 15) + v844) >> 10));
                v846 = (v845 ^ (v845 >> 6)) + ~((v845 ^ (v845 >> 6)) << 11);
                v847 = (v846 ^ BYTE2(v846)) & 0x3F;
                v848 = *((unsigned __int16 *)v807 + v847);
                if (v848 != 0xFFFF && v848 != v844)
                {
                  v981 = 1;
                  do
                  {
                    v847 = ((_BYTE)v847 + (_BYTE)v981) & 0x3F;
                    v982 = *((unsigned __int16 *)v807 + v847);
                    ++v981;
                  }
                  while (v982 != 0xFFFF && v982 != v844);
                }
                *((_WORD *)v807 + v847) = v844;
              }
              v850 = v197[15];
              if (v850 != 0xFFFF)
              {
                v851 = 9 * ((~(v850 << 15) + v850) ^ ((~(v850 << 15) + v850) >> 10));
                v852 = (v851 ^ (v851 >> 6)) + ~((v851 ^ (v851 >> 6)) << 11);
                v853 = (v852 ^ BYTE2(v852)) & 0x3F;
                v854 = *((unsigned __int16 *)v807 + v853);
                if (v854 != 0xFFFF && v854 != v850)
                {
                  v984 = 1;
                  do
                  {
                    v853 = ((_BYTE)v853 + (_BYTE)v984) & 0x3F;
                    v985 = *((unsigned __int16 *)v807 + v853);
                    ++v984;
                  }
                  while (v985 != 0xFFFF && v985 != v850);
                }
                *((_WORD *)v807 + v853) = v850;
              }
              v201 = *((_DWORD *)v197 + 2);
              *((_QWORD *)v197 + 2) = v807;
              v202 = 64;
              goto LABEL_361;
            }
          }
        }
        else
        {
          v203 = 0;
LABEL_339:
          *((_DWORD *)v197 + 2) = v201 + 1;
          v197[v203 + 8] = v158;
          LOWORD(v158) = v1110;
        }
      }
      else
      {
LABEL_361:
        if (3 * v202 <= 4 * v201)
        {
          v1104 = (WTF *)*((_QWORD *)v197 + 2);
          v268 = (unsigned __int16 *)WTF::fastMalloc((WTF *)(2 * (2 * v202)));
          memset(v268, 255, 2 * (2 * v202));
          *((_DWORD *)v197 + 3) = 2 * v202;
          if (v202)
          {
            v901 = 0;
            v902 = 2 * v202 - 1;
            do
            {
              v903 = *((unsigned __int16 *)v1104 + v901);
              if (v903 != 0xFFFF)
              {
                v904 = 9 * ((~(v903 << 15) + v903) ^ ((~(v903 << 15) + v903) >> 10));
                v905 = (v904 ^ (v904 >> 6)) + ~((v904 ^ (v904 >> 6)) << 11);
                v906 = (v905 ^ HIWORD(v905)) & v902;
                v907 = v268[v906];
                if (v907 != 0xFFFF && v907 != v903)
                {
                  v909 = 1;
                  do
                  {
                    v906 = ((_DWORD)v906 + v909) & v902;
                    v910 = v268[v906];
                    ++v909;
                  }
                  while (v910 != 0xFFFF && v910 != v903);
                }
                v268[v906] = v903;
              }
              ++v901;
            }
            while (v901 != v202);
          }
          WTF::fastFree((unint64_t)v1104, v894, v895, v896, v897, v898, v899, v900);
          v202 = *((_DWORD *)v197 + 3);
          *((_QWORD *)v197 + 2) = v268;
          v22 = (uint64_t *)(a1 + 304);
        }
        else
        {
          v268 = (unsigned __int16 *)*((_QWORD *)v197 + 2);
        }
        v269 = 9 * ((~((_DWORD)v158 << 15) + v158) ^ ((~((_DWORD)v158 << 15) + v158) >> 10));
        v270 = (v269 ^ (v269 >> 6)) + ~((v269 ^ (v269 >> 6)) << 11);
        v271 = (v202 - 1) & (v270 ^ HIWORD(v270));
        v272 = v268[v271];
        if (v272 != 0xFFFF && v272 != (_DWORD)v158)
        {
          v690 = 1;
          do
          {
            v271 = ((_DWORD)v271 + v690) & (v202 - 1);
            v272 = v268[v271];
            ++v690;
          }
          while (v272 != 0xFFFF && v272 != (_DWORD)v158);
        }
        if (v272 != (_DWORD)v158)
        {
          v268[v271] = v158;
          ++*((_DWORD *)v197 + 2);
        }
      }
LABEL_340:
      if (*(unsigned __int16 *)(a1 + 16) < (unsigned __int16)v158)
      {
        v1111 = 0x800000000;
        v1112 = -1;
        v1113 = -1;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v1108, v1095, &v1110, (uint64_t)&v1111, v17, v18, (uint64_t)v22, 1);
        WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v1109, (unsigned int *)(v1108[0] + 8), (unsigned __int16)v162);
        if (HIDWORD(v1111) != 8)
          WTF::fastFree(v1112, (void *)v14, v15, v16, v17, v18, v1038, v1039);
        v22 = (uint64_t *)(a1 + 304);
      }
LABEL_341:
      v24 = *(_DWORD *)(a1 + 204);
    }
    while (v24 || *v1096 || *v13 || *v1094 && *(_DWORD *)(*v1094 - 12));
    v258 = *(_QWORD *)(a1 + 208);
    if ((v258 & 0x8000000000000000) == 0)
      break;
    if ((v258 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_1193;
  }
  v259 = (_QWORD *)(2 * v258);
  v260 = ((unint64_t)(*v259 + 63) >> 6);
  while (v260 * 8)
  {
    if (v259[v260--])
      goto LABEL_6;
  }
LABEL_1193:
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::assignRegistersToTmp<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  _OWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  char v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  int v61;
  unint64_t v62;
  WTF *v63;
  char v64;
  int v65;
  char v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  WTF *v98;
  uint64_t v99;
  _BYTE v100[96];
  _BYTE v101[22];

  v8 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v8)
    return;
  v9 = a2;
  v10 = a1;
  v11 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v11))
  {
    if (v8 == ++v11)
      return;
  }
  if ((_DWORD)v8 == (_DWORD)v11)
    return;
  v12 = v100;
  v13 = v101;
  v14 = 3;
  LODWORD(v15) = *(_DWORD *)(a1 + 108);
  v96 = v15;
  do
  {
    if (v15 <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x19806A800);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 8 * v11);
    if (!*(_DWORD *)(v16 + 20))
    {
      v58 = 0;
      v54 = 0;
      v51 = *(_QWORD *)(v16 + 8);
      v52 = v51;
      v55 = v51;
      goto LABEL_79;
    }
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 + (v17 << 7);
      if ((*(__int16 *)(v19 + 120) | 4) == 0x5E)
      {
        v20 = *(unsigned int *)(v19 + 12);
        v21 = *(_QWORD *)v19;
        if ((_DWORD)v20 == 2)
        {
          if (*(_BYTE *)(v21 + 8) != 1 || *(_BYTE *)(v21 + 40) != 1)
            goto LABEL_18;
          if (*(_WORD *)(v19 + 120) != 94)
            goto LABEL_14;
          v22 = *((_QWORD *)v9 + 47);
          if (!v22)
            goto LABEL_19;
          v62 = *(unsigned int *)(v21 + 16);
          if ((int)v62 < 1)
          {
            v62 = -(int)v62;
            if (v62 >= *(unsigned int *)(v22 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x19806A7A4);
            }
            v22 += 16;
          }
          else if (v62 >= *(_DWORD *)(v22 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19806A7ACLL);
          }
          if (*(unsigned __int8 *)(*(_QWORD *)v22 + 2 * v62 + 1) <= 2u)
LABEL_14:
            LODWORD(v22) = 1;
          else
LABEL_18:
            LODWORD(v22) = 0;
LABEL_19:
          v23 = v21 + 64;
          goto LABEL_20;
        }
      }
      else
      {
        v21 = *(_QWORD *)v19;
        v20 = *(unsigned int *)(v19 + 12);
      }
      if (!v20)
        goto LABEL_43;
      LODWORD(v22) = 0;
      v23 = v21 + 32 * v20;
LABEL_20:
      v24 = *((_QWORD *)v9 + 19);
      v25 = *((_QWORD *)v9 + 15);
      v26 = v21;
      do
      {
        v27 = *(char *)(v26 + 8);
        if (v27 <= 0xD)
        {
          if (((1 << v27) & 0x31C2) != 0)
          {
            v28 = *(_DWORD *)(v26 + 16);
            if ((v28 & 0x80000000) == 0 && (v28 - 33) <= 0xFFFFFFDF)
            {
              do
              {
                v29 = (unsigned __int16)v28;
                v28 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v28);
              }
              while (v28);
              if ((v29 - 1) <= 0x1F)
              {
                v60 = v29 + 127;
                v61 = ((_BYTE)v29 + 127) & 0x7F;
                if ((v60 & 0x60) != 0)
                  v32 = (char)(31 - (v60 & 0x7F));
                else
                  v32 = v61 + 1;
                if (v61 == 127)
                  v32 = 0;
              }
              else
              {
                LODWORD(v98) = v29;
                v30 = *(_BYTE *)(v25 + v29);
                v31 = v30 & 0x7F;
                if (v31 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v98);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*((JSC::B3::Air::Code **)v9 + 32));
                  __break(0xC471u);
                  JUMPOUT(0x19806A62CLL);
                }
                if ((v30 & 0x60) != 0)
                  v32 = (char)(31 - v31);
                else
                  v32 = v31 + 1;
              }
              *(_DWORD *)(v26 + 16) = v32;
            }
          }
          else if (v27 == 11)
          {
            v34 = *(_DWORD *)(v26 + 16);
            if ((v34 & 0x80000000) == 0 && (v34 - 33) <= 0xFFFFFFDF)
            {
              do
              {
                v33 = (unsigned __int16)v34;
                v34 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v34);
              }
              while (v34);
              if ((v33 - 1) <= 0x1F)
              {
                v64 = v33 + 127;
                v65 = ((_BYTE)v33 + 127) & 0x7F;
                if ((v64 & 0x60) != 0)
                  v47 = (char)(31 - (v64 & 0x7F));
                else
                  v47 = v65 + 1;
                if (v65 == 127)
                  v47 = 0;
              }
              else
              {
                LODWORD(v98) = v33;
                v45 = *(_BYTE *)(v25 + v33);
                v46 = v45 & 0x7F;
                if (v46 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v98);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*((JSC::B3::Air::Code **)v9 + 32));
                  __break(0xC471u);
                  JUMPOUT(0x19806A690);
                }
                if ((v45 & 0x60) != 0)
                  v47 = (char)(31 - v46);
                else
                  v47 = v46 + 1;
              }
              *(_DWORD *)(v26 + 16) = v47;
            }
            v36 = *(_DWORD *)(v26 + 20);
            if ((v36 & 0x80000000) == 0 && (v36 - 33) <= 0xFFFFFFDF)
            {
              do
              {
                v35 = (unsigned __int16)v36;
                v36 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v36);
              }
              while (v36);
              if ((v35 - 1) <= 0x1F)
              {
                v66 = v35 + 127;
                v67 = ((_BYTE)v35 + 127) & 0x7F;
                if ((v66 & 0x60) != 0)
                  v50 = (char)(31 - (v66 & 0x7F));
                else
                  v50 = v67 + 1;
                if (v67 == 127)
                  v50 = 0;
              }
              else
              {
                LODWORD(v98) = v35;
                v48 = *(_BYTE *)(v25 + v35);
                v49 = v48 & 0x7F;
                if (v49 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v98);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*((JSC::B3::Air::Code **)v9 + 32));
                  __break(0xC471u);
                  JUMPOUT(0x19806A6C4);
                }
                if ((v48 & 0x60) != 0)
                  v50 = (char)(31 - v49);
                else
                  v50 = v49 + 1;
              }
              *(_DWORD *)(v26 + 20) = v50;
            }
          }
        }
        v26 += 32;
      }
      while (v26 != v23);
      if ((_DWORD)v22)
      {
        v38 = *(_DWORD *)(v19 + 12);
        if (!v38)
        {
          __break(0xC471u);
          JUMPOUT(0x19806A7BCLL);
        }
        if (*(_BYTE *)(v21 + 8) == 1)
        {
          if (v38 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19806A7B4);
          }
          if (*(_BYTE *)(v21 + 40) == 1 && *(_DWORD *)(v21 + 16) == *(_DWORD *)(v21 + 48))
          {
            v98 = (WTF *)v100;
            v99 = 3;
            *(_QWORD *)v101 = 0;
            *(_WORD *)&v101[8] = 0;
            v101[10] &= 0xFCu;
            v40 = (_OWORD *)(v19 + 16);
            v39 = *(_QWORD *)v19;
            if (*(_QWORD *)v19 != v19 + 16)
            {
              if (v39)
              {
                *(_QWORD *)v19 = 0;
                *(_DWORD *)(v19 + 8) = 0;
                WTF::fastFree(v39, a2, v8, (uint64_t)v100, (uint64_t)v101, 3, a7, a8);
                v14 = 3;
                v13 = v101;
                v12 = v100;
                v8 = v96;
                v10 = a1;
              }
              *(_QWORD *)v19 = v40;
              v63 = v98;
              if (v98 == (WTF *)v100)
              {
                if (HIDWORD(v99))
                {
                  v89 = 32 * HIDWORD(v99);
                  v90 = (__int128 *)v100;
                  do
                  {
                    v91 = *v90;
                    v92 = v90[1];
                    v90 += 2;
                    *v40 = v91;
                    v40[1] = v92;
                    v40 += 2;
                    v89 -= 32;
                  }
                  while (v89);
                }
              }
              else
              {
                v98 = (WTF *)v100;
                *(_QWORD *)v19 = v63;
              }
            }
            *(_DWORD *)(v19 + 8) = v99;
            v41 = HIDWORD(v99);
            HIDWORD(v99) = 0;
            *(_DWORD *)(v19 + 12) = v41;
            v42 = v18 + (v17 << 7);
            v43 = *(_QWORD *)v101;
            *(_DWORD *)(v42 + 119) = *(_DWORD *)&v101[7];
            *(_QWORD *)(v42 + 112) = v43;
            v44 = v98;
            if (v100 != (_BYTE *)v98 && v98)
            {
              v98 = 0;
              LODWORD(v99) = 0;
              WTF::fastFree((unint64_t)v44, a2, v8, (uint64_t)v100, (uint64_t)v101, 3, a7, a8);
              v14 = 3;
              v13 = v101;
              v12 = v100;
              v8 = v96;
              v10 = a1;
            }
          }
        }
      }
LABEL_43:
      ++v17;
      v37 = *(unsigned int *)(v16 + 20);
    }
    while (v17 < v37);
    v51 = *(_QWORD *)(v16 + 8);
    v52 = v51 + (v37 << 7);
    if ((_DWORD)v37)
    {
      v53 = 0;
      v54 = 0;
      v55 = v51 + (v37 << 7);
      v56 = v55;
      do
      {
        a2 = (_BYTE *)(v51 + v53);
        if (*(_QWORD *)(v51 + v53 + 112))
          v57 = 0;
        else
          v57 = *(unsigned __int16 *)(v51 + v53 + 120) == 0;
        if (v57 && (a2[122] & 3) == 0)
        {
          v95 = v54;
          v93 = v56;
          if (*(_DWORD *)(v51 + v53 + 12))
          {
            v8 = v96;
            v10 = a1;
            v13 = v101;
            v12 = v100;
            v14 = 3;
            v54 = v54;
          }
          else
          {
            if (v56 == *(_QWORD *)(v16 + 8) + ((unint64_t)*(unsigned int *)(v16 + 20) << 7))
            {
              v93 = v51 + v53;
            }
            else if (a2 != (_BYTE *)v55)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)v55, (unsigned int *)a2, v56, (uint64_t)v100, (uint64_t)v101, 3, a7, a8);
              v93 += v51 + v53 - v55;
            }
            v87 = *(_QWORD *)(v51 + v53);
            if (v51 + v53 + 16 != v87 && v87)
            {
              v88 = v51 + v53;
              *(_QWORD *)v88 = 0;
              *(_DWORD *)(v88 + 8) = 0;
              WTF::fastFree(v87, a2, v8, (uint64_t)v12, (uint64_t)v13, v14, a7, a8);
            }
            v55 = v51 + v53 + 128;
            v54 = (v95 + 1);
            v56 = v93;
            v8 = v96;
            v10 = a1;
            v13 = v101;
            v12 = v100;
            v14 = 3;
          }
        }
        v53 += 128;
      }
      while (v51 + v53 < v52);
      v51 = *(_QWORD *)(v16 + 8);
      v58 = *(_DWORD *)(v16 + 20);
      v52 = v56;
    }
    else
    {
      v58 = 0;
      v54 = 0;
      v55 = v51 + (v37 << 7);
    }
LABEL_79:
    v59 = v51 + ((unint64_t)v58 << 7);
    if (v55 != v59)
    {
      if (v55 > v52)
      {
        do
        {
          *(_QWORD *)v52 = v52 + 16;
          *(_QWORD *)(v52 + 8) = 3;
          v69 = v55 + 16;
          v70 = *(_QWORD *)v55;
          if (*(_QWORD *)v55 == v55 + 16)
          {
            v71 = *(unsigned int *)(v55 + 12);
            if ((_DWORD)v71)
            {
              v72 = 0;
              v73 = 32 * v71;
              do
              {
                v74 = v52 + v72;
                v75 = *(_OWORD *)(v70 + v72 + 16);
                *(_OWORD *)(v74 + 16) = *(_OWORD *)(v70 + v72);
                *(_OWORD *)(v74 + 32) = v75;
                v72 += 32;
              }
              while (v73 != v72);
            }
          }
          else
          {
            *(_QWORD *)v55 = v69;
            *(_QWORD *)v52 = v70;
            v68 = *(_DWORD *)(v55 + 8);
            *(_DWORD *)(v55 + 8) = 3;
            *(_DWORD *)(v52 + 8) = v68;
          }
          v76 = *(_DWORD *)(v55 + 12);
          *(_DWORD *)(v55 + 12) = 0;
          *(_DWORD *)(v52 + 12) = v76;
          v77 = *(_QWORD *)(v55 + 112);
          *(_DWORD *)(v52 + 119) = *(_DWORD *)(v55 + 119);
          *(_QWORD *)(v52 + 112) = v77;
          v78 = *(_QWORD *)v55;
          if (v69 != *(_QWORD *)v55 && v78)
          {
            *(_QWORD *)v55 = 0;
            *(_DWORD *)(v55 + 8) = 0;
            v79 = v54;
            WTF::fastFree(v78, a2, v8, (uint64_t)v100, (uint64_t)v101, 3, a7, a8);
            v54 = v79;
            v14 = 3;
            v13 = v101;
            v12 = v100;
            v8 = v96;
            v10 = a1;
          }
          v52 += 128;
          v55 += 128;
        }
        while (v55 != v59);
      }
      else
      {
        v80 = 0;
        v94 = v54;
        do
        {
          JSC::B3::Air::Inst::Inst(v52 + ((v59 - v55) & 0xFFFFFFFFFFFFFF80) - 128 + v80, v59 + v80 - 128);
          v85 = *(_QWORD *)(v59 + v80 - 128);
          if (v59 + v80 - 112 != v85 && v85 != 0)
          {
            *(_QWORD *)(v59 + v80 - 128) = 0;
            *(_DWORD *)(v59 + v80 - 120) = 0;
            WTF::fastFree(v85, a2, v81, v82, v83, v84, a7, a8);
          }
          v80 -= 128;
          v8 = v96;
          v10 = a1;
          v13 = v101;
          v12 = v100;
          v14 = 3;
          LODWORD(v54) = v94;
        }
        while (v59 + v80 != v55);
      }
      v58 = *(_DWORD *)(v16 + 20);
    }
    *(_DWORD *)(v16 + 20) = v58 - v54;
    v11 = (v11 + 1);
    v15 = *(unsigned int *)(v10 + 108);
    if (v15 > v11)
    {
      while (!*(_QWORD *)(*(_QWORD *)(v10 + 96) + 8 * v11))
      {
        if (v15 == ++v11)
        {
          LODWORD(v11) = *(_DWORD *)(v10 + 108);
          break;
        }
      }
    }
  }
  while ((_DWORD)v8 != (_DWORD)v11);
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  _QWORD *v12;
  unint64_t StatusReg;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *casual;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD **v59;
  int v60;
  JSC::B3::Air::Kind *v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  _QWORD *v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  int v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t *v102;
  _OWORD *v103;
  char **v104;
  uint64_t v105;
  char **v106;
  __int128 v107;
  __int128 v108;
  int v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  BOOL v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t *v145;
  uint64_t *v146;
  _OWORD *v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  BOOL v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  _QWORD *v183;
  _QWORD *v184;
  char **v185;
  WTF::BitVector *v187;
  char v188;
  __int16 v189;
  unsigned int v190;
  char v191;
  void *ptr;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD v199[12];
  _QWORD v200[2];
  unint64_t v201;
  char **v202;
  uint64_t v203;
  char *v204;
  WTF::BitVector *v205;
  void **p_ptr;
  unsigned int *v207;
  _QWORD **v208;
  _QWORD v209[2];
  unint64_t *v210;
  void *v211;
  _QWORD *v212;
  void **v213;
  _QWORD *v214;

  v187 = (WTF::BitVector *)a3;
  v8 = (uint64_t)a1;
  v196 = 0;
  v185 = (char **)a2;
  v9 = *(unsigned int *)(a2 + 148);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned __int16 **)(a2 + 136);
    v11 = &v10[v9];
    v12 = a1 + 8;
    v183 = a1 + 24;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v14 = *(_QWORD *)v187;
      if ((*(_QWORD *)v187 & 0x8000000000000000) != 0)
        v15 = 63;
      else
        v15 = *(_QWORD *)(2 * v14);
      v16 = *v10;
      if (v15 <= v16)
      {
        WTF::BitVector::resizeOutOfLine(v187, v16 + 1, 0);
        v14 = *(_QWORD *)v187;
      }
      v17 = 2 * v14 + 8;
      v18 = v14 < 0;
      v19 = (uint64_t)v187;
      if (!v18)
        v19 = v17;
      *(_QWORD *)(v19 + ((v16 >> 3) & 0x1FF8)) |= 1 << v16;
      v20 = *(_QWORD *)v8;
      if ((_DWORD)v16)
      {
        v21 = v12;
        if (*(_DWORD *)(v8 + 20) <= v16)
        {
          __break(0xC471u);
          JUMPOUT(0x19806BA88);
        }
      }
      else
      {
        v21 = v183;
        if (!*(_DWORD *)(v8 + 36))
        {
          __break(0xC471u);
          JUMPOUT(0x19806BAA0);
        }
      }
      v22 = (unsigned __int8 *)(*v21 + 2 * v16);
      v23 = *v22;
      v24 = v22[1];
      if (v23 > v24)
        v24 = v23;
      v25 = v24 >= 3;
      v124 = v24 == 3;
      v26 = 16;
      if (v124)
        v26 = 8;
      if (v25)
        v27 = v26;
      else
        v27 = 4;
      v28 = *(_QWORD *)(StatusReg + 752);
      if (v28)
      {
        v29 = (_BYTE *)(v28 + 8488);
        *(_BYTE *)(v28 + 8488) = 1;
        v30 = *(unsigned int *)(v28 + 8504);
        if ((_DWORD)v30)
        {
          *(_DWORD *)(v28 + 8504) = v30 - *(_DWORD *)(v28 + 8508);
          casual = (_BYTE *)(*(_QWORD *)(v28 + 8496) - v30);
LABEL_21:
          *v29 = 0;
          goto LABEL_22;
        }
        v47 = *(_QWORD *)(v28 + 8528);
        v48 = *(_QWORD *)(v28 + 8512);
        if (v47)
        {
LABEL_48:
          v49 = __clz(v47);
          *(_QWORD *)(v28 + 8528) = v47 & ~(0x8000000000000000 >> v49);
          casual = (_BYTE *)(v48 + 16 * v49);
          goto LABEL_21;
        }
        if (*(_BYTE *)(v28 + 8493) == 6)
        {
          v164 = *(_DWORD *)(v28 + 8524);
          v165 = *(unsigned int *)(v28 + 8520);
          if (v165 < v164)
          {
            *(_QWORD *)&v29[8 * v165 + 56] = 0;
            v166 = (unint64_t *)(v28 + 8 * v165 + 8552);
            v167 = v164 - 1 - v165;
            while (v167)
            {
              v48 += 1024;
              v169 = *v166++;
              v168 = v169;
              LODWORD(v165) = v165 + 1;
              --v167;
              if (v169)
              {
                v47 = __rbit64(v168);
                *(_DWORD *)(v28 + 8520) = v165;
                *(_QWORD *)(v28 + 8512) = v48;
                goto LABEL_48;
              }
            }
            *(_DWORD *)(v28 + 8520) = v164;
          }
        }
        *v29 = 0;
      }
      casual = (_BYTE *)bmalloc_allocate_casual(24, 1);
LABEL_22:
      *(_DWORD *)casual = v27;
      casual[4] = 1;
      *((_DWORD *)casual + 2) = -1;
      *((_QWORD *)casual + 2) = 0;
      ptr = casual;
      v32 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v20 + 64, (uint64_t *)&ptr);
      a2 = (unint64_t)ptr;
      ptr = 0;
      if (!a2)
        goto LABEL_28;
      v33 = *(_QWORD *)(StatusReg + 752);
      if (v33)
      {
        if (a2 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) == 0)
        {
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
LABEL_213:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v33, a2, 1, a4, a5, a6, a7, a8);
            goto LABEL_28;
          }
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 != 1)
            goto LABEL_213;
        }
        v34 = *(unsigned int *)(v33 + 8000);
        if (v34 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v33, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v33 + 8 * v34) = a2 | 0x5000000000000;
          *(_DWORD *)(v33 + 8000) = v34 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_28:
      if (*(_BYTE *)(v20 + 196))
      {
        v170 = *(_DWORD *)v32;
        if (*(_DWORD *)v32 < 2u)
        {
          v172 = 1;
        }
        else if (v170 == 2)
        {
          v172 = 2;
        }
        else
        {
          v171 = v170 > 4;
          v172 = 4;
          if (v171)
            v172 = 8;
        }
        v173 = (v27 + v172 - 1 + *(_DWORD *)(v20 + 184)) & -v172;
        *(_QWORD *)(v32 + 16) = -(uint64_t)v173;
        *(_DWORD *)(v20 + 184) = (v173 + 15) & 0xFFFFFFF0;
      }
      v35 = v196;
      if (v196
        || (WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(&v196, 8uLL, 0, a4, a5, a6, a7, a8), (v35 = v196) != 0))
      {
        v36 = *(_DWORD *)(v35 - 8);
      }
      else
      {
        v36 = 0;
      }
      v8 = (uint64_t)a1;
      v37 = 9 * ((~((_DWORD)v16 << 15) + v16) ^ ((~((_DWORD)v16 << 15) + v16) >> 10));
      v38 = (v37 ^ (v37 >> 6)) + ~((v37 ^ (v37 >> 6)) << 11);
      v39 = v36 & (v38 ^ HIWORD(v38));
      a3 = v35 + 16 * v39;
      v40 = *(_DWORD *)a3;
      if (*(_DWORD *)a3)
      {
        v45 = 0;
        v46 = 1;
        while (v40 != (_DWORD)v16)
        {
          if (v40 == 0x7FFFFFFF)
            v45 = (_QWORD *)a3;
          v39 = (v39 + v46) & v36;
          a3 = v35 + 16 * v39;
          v40 = *(_DWORD *)a3;
          ++v46;
          if (!*(_DWORD *)a3)
          {
            if (v45)
            {
              *v45 = 0;
              v45[1] = 0;
              --*(_DWORD *)(v35 - 16);
              a3 = (uint64_t)v45;
            }
            goto LABEL_32;
          }
        }
        goto LABEL_38;
      }
LABEL_32:
      *(_DWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = v32;
      if (v196)
        v41 = *(_DWORD *)(v196 - 12) + 1;
      else
        v41 = 1;
      *(_DWORD *)(v196 - 12) = v41;
      if (v196)
        v42 = *(_DWORD *)(v196 - 12);
      else
        v42 = 0;
      v43 = (*(_DWORD *)(v196 - 16) + v42);
      v44 = *(unsigned int *)(v196 - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43)
          goto LABEL_38;
LABEL_56:
        v50 = ((_DWORD)v44 << (6 * *(_DWORD *)(v196 - 12) >= (2 * v44)));
LABEL_54:
        WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(&v196, v50, a3, a4, a5, a6, a7, a8);
        goto LABEL_38;
      }
      if (3 * v44 <= 4 * v43)
      {
        if ((_DWORD)v44)
          goto LABEL_56;
        v50 = 8;
        goto LABEL_54;
      }
LABEL_38:
      ++v10;
    }
    while (v10 != v11);
  }
  v51 = *(_QWORD *)v8;
  ptr = (void *)v51;
  v193 = &v195;
  v194 = 8;
  v181 = *(unsigned int *)(v51 + 108);
  if ((_DWORD)v181)
  {
    v52 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v51 + 96) + 8 * v52))
    {
      if (v181 == ++v52)
        goto LABEL_218;
    }
    if ((_DWORD)v181 != (_DWORD)v52)
    {
      v179 = (_QWORD *)(v8 + 24);
      v184 = (_QWORD *)(v8 + 8);
      LODWORD(v53) = *(_DWORD *)(v51 + 108);
      LODWORD(v54) = v52;
      v180 = v51;
      do
      {
        if (v53 <= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x19806BA80);
        }
        v182 = v54;
        v55 = *(_QWORD *)(*(_QWORD *)(v51 + 96) + 8 * v54);
        v191 = 0;
        v190 = 0;
        if (*(_DWORD *)(v55 + 20))
        {
          v56 = 0;
          do
          {
            v57 = v56;
            v58 = *(_QWORD *)(v55 + 8);
            v59 = (_QWORD **)(v58 + ((unint64_t)v56 << 7));
            v189 = 0;
            v188 = 0;
            v61 = (JSC::B3::Air::Kind *)(v59 + 15);
            v60 = *((__int16 *)v59 + 60);
            if (v60 == 90)
            {
              v62 = *((_DWORD *)v59 + 3);
              if (!v62)
              {
                __break(0xC471u);
                JUMPOUT(0x19806BA30);
              }
              v63 = (uint64_t)*v59;
              if (*((_BYTE *)*v59 + 8) == 1)
              {
                v64 = *(unsigned int *)(v63 + 16);
                if ((int)v64 < 1)
                {
                  v64 = -(int)v64;
                  v65 = v179;
                  if (v64 >= *(unsigned int *)(v8 + 36))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806BA50);
                  }
                }
                else
                {
                  v65 = v184;
                  if (v64 >= *(_DWORD *)(v8 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806BA40);
                  }
                }
                v66 = (unsigned __int8 *)(*v65 + 2 * v64);
                v67 = *v66;
                v68 = v66[1];
                if (v68 >= v67)
                  v68 = v67;
                if (v68 < 3)
                  goto LABEL_84;
              }
              if (v62 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19806BA38);
              }
              if (*(_BYTE *)(v63 + 40) == 1)
              {
                v69 = *(unsigned int *)(v63 + 48);
                if ((int)v69 < 1)
                {
                  v69 = -(int)v69;
                  v70 = v179;
                  if (v69 >= *(unsigned int *)(v8 + 36))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806BA58);
                  }
                }
                else
                {
                  v70 = v184;
                  if (v69 >= *(_DWORD *)(v8 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806BA48);
                  }
                }
                v71 = (unsigned __int8 *)(*v70 + 2 * v69);
                v72 = *v71;
                v73 = v71[1];
                if (v73 >= v72)
                  v73 = v72;
                if (v73 <= 2)
LABEL_84:
                  HIBYTE(v189) = 1;
              }
            }
            v201 = (unint64_t)&v196;
            v202 = (char **)v59;
            v203 = v8;
            v204 = (char *)&v189 + 1;
            v205 = (WTF::BitVector *)&v189;
            p_ptr = (void **)&v188;
            if ((v60 - 446) <= 5)
            {
              v198 = (uint64_t)&v197;
              v199[0] = &v201;
              v212 = &v197;
              if (*(_WORD *)v61 == 448)
              {
                v214 = &v197;
                if (!*((_DWORD *)v59 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19806BA60);
                }
                if (!*((_DWORD *)v59 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19806BA68);
                }
                (*(void (**)(_QWORD, _QWORD **, void ***))(*(_QWORD *)**v59 + 16))(**v59, v59, &v213);
              }
              else
              {
                switch(*(_WORD *)v61)
                {
                  case 0x1BE:
                    break;
                  case 0x1BF:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v59, (uint64_t)&v211);
                    break;
                  case 0x1C1:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v59, (uint64_t)&v211);
                    break;
                  case 0x1C2:
                    v213 = &v211;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v59, (uint64_t)&v213);
                    break;
                  case 0x1C3:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v59, (uint64_t)&v211);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v61, "\n");
                    __break(0xC471u);
                    JUMPOUT(0x19806B980);
                }
              }
            }
            else
            {
              v74 = *((unsigned int *)v59 + 3);
              if ((_DWORD)v74)
              {
                v75 = 0;
                v76 = 0;
                v77 = (char *)&JSC::B3::Air::g_formTable + 21 * v60 + ((unint64_t)((v74 - 1) * v74) >> 1);
                v78 = 32 * v74;
                do
                {
                  if (v76 >= *((unsigned int *)v59 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806BA20);
                  }
                  if ((*v77 >> 5) - 1 >= 5u)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806B818);
                  }
                  ++v76;
                  ++v77;
                  v75 += 32;
                }
                while (v78 != v75);
              }
            }
            if ((_BYTE)v189 && HIBYTE(v189))
              *(_WORD *)v61 = 94;
            v8 = (uint64_t)a1;
            if (v188)
            {
              v88 = *(__int16 *)v61;
              if (v88 != 90 && v88 != 94)
              {
                if ((v88 - 107) <= 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19806B684);
                }
                __break(0xC471u);
                JUMPOUT(0x19806B728);
              }
              v89 = *(_DWORD *)(*(_QWORD *)a1 + 176);
              *(_DWORD *)(*(_QWORD *)a1 + 176) = v89 + 1;
              v90 = (v89 + 33);
              LODWORD(v213) = v89 + 33;
              v91 = *(_QWORD *)v187;
              if ((*(_QWORD *)v187 & 0x8000000000000000) != 0)
                v92 = 63;
              else
                v92 = *(_QWORD *)(2 * v91);
              if (v92 <= v90)
              {
                WTF::BitVector::resizeOutOfLine(v187, v90 + 1, 0);
                v91 = *(_QWORD *)v187;
              }
              v93 = 2 * v91 + 8;
              v18 = v91 < 0;
              v94 = (uint64_t)v187;
              if (!v18)
                v94 = v93;
              *(_QWORD *)(v94 + ((v90 >> 3) & 0x1FFFFFF8)) |= 1 << v90;
              v95 = *((unsigned int *)v59 + 3);
              if ((_DWORD)v95 == *((_DWORD *)v59 + 2))
              {
                WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v59, (unsigned int *)&v213, a3, a4, a5, a6, a7, a8);
                v98 = *((_DWORD *)v59 + 3);
              }
              else
              {
                v96 = (uint64_t)&(*v59)[4 * v95];
                v97 = v213;
                *(_QWORD *)v96 = 0;
                *(_WORD *)(v96 + 8) = 513;
                *(_DWORD *)(v96 + 12) = 1;
                *(_QWORD *)(v96 + 16) = v97;
                *(_BYTE *)(v96 + 24) = 0;
                v98 = *((_DWORD *)v59 + 3) + 1;
                *((_DWORD *)v59 + 3) = v98;
              }
              if (v98 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x19806B6A4);
              }
              v99 = *(_QWORD *)(v58 + (v57 << 7) + 112);
              v197 = v199;
              v200[0] = v99;
              LODWORD(v200[1]) = 0;
              v201 = v190;
              v202 = &v204;
              v198 = 3;
              v203 = 3;
              v209[0] = v99;
              *(_DWORD *)((char *)v209 + 7) = *(_DWORD *)((char *)v200 + 7);
              v100 = HIDWORD(v194);
              if (HIDWORD(v194) == (_DWORD)v194)
              {
                v143 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v193, HIDWORD(v194) + 1, (unint64_t)&v201, a4, a5, a6, a7, a8);
                v144 = HIDWORD(v194);
                v145 = v193;
                v146 = &v193[17 * HIDWORD(v194)];
                *v146 = *(_QWORD *)v143;
                v147 = v146 + 3;
                v146[1] = (uint64_t)(v146 + 3);
                v146[2] = 3;
                v148 = *(__int128 **)(v143 + 8);
                if (v148 == (__int128 *)(v143 + 24))
                {
                  v149 = *(unsigned int *)(v143 + 20);
                  if ((_DWORD)v149)
                  {
                    v150 = 32 * v149;
                    do
                    {
                      v151 = *v148;
                      v152 = v148[1];
                      v148 += 2;
                      *v147 = v151;
                      v147[1] = v152;
                      v147 += 2;
                      v150 -= 32;
                    }
                    while (v150);
                  }
                }
                else
                {
                  *(_QWORD *)(v143 + 8) = v143 + 24;
                  v146[1] = (uint64_t)v148;
                  v156 = *(_DWORD *)(v143 + 16);
                  *(_DWORD *)(v143 + 16) = 3;
                  *((_DWORD *)v146 + 4) = v156;
                }
                v111 = (_QWORD *)(v143 + 120);
                v153 = *(_DWORD *)(v143 + 20);
                *(_DWORD *)(v143 + 20) = 0;
                *((_DWORD *)v146 + 5) = v153;
                v110 = (uint64_t)&v145[17 * v144 + 15];
              }
              else
              {
                v101 = v193;
                v102 = &v193[17 * HIDWORD(v194)];
                *v102 = v190;
                v103 = v102 + 3;
                v102[1] = (uint64_t)(v102 + 3);
                v102[2] = 3;
                v104 = v202;
                if (v202 == &v204)
                {
                  if (HIDWORD(v203))
                  {
                    v105 = 32 * HIDWORD(v203);
                    v106 = &v204;
                    do
                    {
                      v107 = *(_OWORD *)v106;
                      v108 = *((_OWORD *)v106 + 1);
                      v106 += 4;
                      *v103 = v107;
                      v103[1] = v108;
                      v103 += 2;
                      v105 -= 32;
                    }
                    while (v105);
                  }
                }
                else
                {
                  v202 = &v204;
                  v102[1] = (uint64_t)v104;
                  v138 = v203;
                  LODWORD(v203) = 3;
                  *((_DWORD *)v102 + 4) = v138;
                }
                v109 = HIDWORD(v203);
                HIDWORD(v203) = 0;
                *((_DWORD *)v102 + 5) = v109;
                v110 = (uint64_t)&v101[17 * v100 + 15];
                v111 = v209;
              }
              v112 = *v111;
              *(_DWORD *)(v110 + 7) = *(_DWORD *)((char *)v111 + 7);
              *(_QWORD *)v110 = v112;
              ++HIDWORD(v194);
              v113 = (unint64_t)v202;
              if (&v204 != v202 && v202)
              {
                v202 = 0;
                LODWORD(v203) = 0;
                WTF::fastFree(v113, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
              v114 = (unint64_t)v197;
              if (v199 != v197 && v197)
              {
                v197 = 0;
                LODWORD(v198) = 0;
                WTF::fastFree(v114, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
            }
            else
            {
              v201 = (unint64_t)&v196;
              v202 = v185;
              v203 = (uint64_t)&v191;
              v204 = a1;
              v205 = v187;
              p_ptr = &ptr;
              v207 = &v190;
              v208 = v59;
              v210 = &v201;
              if ((*(__int16 *)v61 - 446) <= 5)
              {
                v198 = (uint64_t)&v197;
                v199[0] = &v210;
                v212 = &v197;
                if (*(_WORD *)v61 == 448)
                {
                  v214 = &v197;
                  if (!*((_DWORD *)v59 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806BA70);
                  }
                  v139 = (uint64_t)*v59;
                  switch(*((_BYTE *)*v59 + 8))
                  {
                    case 1:
                    case 6:
                    case 7:
                    case 8:
                      v140 = (unsigned int *)(v139 + 16);
                      goto LABEL_182;
                    case 0xB:
                      v140 = (unsigned int *)(v139 + 20);
LABEL_182:
                      v141 = 0;
                      goto LABEL_183;
                    case 0xC:
                    case 0xD:
                      v140 = (unsigned int *)(v139 + 16);
                      v141 = 6;
LABEL_183:
                      break;
                    default:
                      break;
                  }
                  if (!*((_DWORD *)v59 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806BA78);
                  }
                  (*(void (**)(_QWORD, _QWORD **, void ***))(*(_QWORD *)**v59 + 16))(**v59, v59, &v213);
                }
                else
                {
                  switch(*(_WORD *)v61)
                  {
                    case 0x1BE:
                      break;
                    case 0x1BF:
                      JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v59, (uint64_t)&v211);
                      break;
                    case 0x1C1:
                      JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v59, (uint64_t)&v211);
                      break;
                    case 0x1C2:
                      v213 = &v211;
                      JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v59, (uint64_t)&v213);
                      break;
                    case 0x1C3:
                      JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v59, (uint64_t)&v211);
                      break;
                    default:
                      WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v61, "\n");
                      __break(0xC471u);
                      JUMPOUT(0x19806B9B8);
                  }
                }
              }
              else
              {
                v79 = *((unsigned int *)v59 + 3);
                if ((_DWORD)v79)
                {
                  v80 = 0;
                  v81 = (char *)&JSC::B3::Air::g_formTable
                      + 21 * *(__int16 *)v61
                      + ((unint64_t)((v79 - 1) * v79) >> 1);
                  v82 = 16;
                  do
                  {
                    if (v80 >= *((unsigned int *)v59 + 3))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19806BA28);
                    }
                    v83 = v81[v80];
                    if ((v83 >> 5) - 1 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19806B940);
                    }
                    v84 = (uint64_t)*v59;
                    switch(LOBYTE((*v59)[(unint64_t)v82 / 8 - 1]))
                    {
                      case 1:
                        v85 = v83 & 0xF;
                        v86 = (v83 >> 4) & 1;
                        v87 = (unsigned int *)(v84 + v82);
                        goto LABEL_102;
                      case 6:
                      case 7:
                      case 8:
                        v87 = (unsigned int *)(v84 + v82);
                        goto LABEL_129;
                      case 0xB:
                        v115 = v84 + v82;
                        v87 = (unsigned int *)(v115 + 4);
LABEL_129:
                        v85 = 0;
                        goto LABEL_130;
                      case 0xC:
                      case 0xD:
                        v87 = (unsigned int *)(v84 + v82);
                        v85 = 6;
LABEL_130:
                        v86 = 0;
LABEL_102:
                        break;
                      default:
                        break;
                    }
                    ++v80;
                    v82 += 32;
                  }
                  while (v79 != v80);
                }
              }
            }
            v56 = v190 + 1;
            v190 = v56;
          }
          while (v56 < *(_DWORD *)(v55 + 20));
        }
        JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&ptr, (JSC::B3::Air::BasicBlock *)v55, a3, a4, a5, a6, a7, a8);
        if (v191)
        {
          v116 = *(_QWORD *)(v55 + 8);
          v117 = *(unsigned int *)(v55 + 20);
          v118 = v116 + (v117 << 7);
          if ((_DWORD)v117)
          {
            v119 = 0;
            v120 = 0;
            v121 = v116 + (v117 << 7);
            v122 = v121;
            do
            {
              a2 = v116 + v119;
              if ((*(__int16 *)(v116 + v119 + 120) | 4) == 0x5E && *(_DWORD *)(a2 + 12) == 2)
              {
                v123 = *(_QWORD *)a2;
                if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 1)
                {
                  v124 = *(_WORD *)(v116 + v119 + 120) != 94 && *(_BYTE *)(v123 + 40) == 1;
                  if (v124 && *(_DWORD *)(v123 + 16) == *(_DWORD *)(v123 + 48))
                  {
                    if (v122 == *(_QWORD *)(v55 + 8) + ((unint64_t)*(unsigned int *)(v55 + 20) << 7))
                    {
                      v122 = v116 + v119;
                    }
                    else if (a2 != v121)
                    {
                      v125 = v120;
                      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)v121, (unsigned int *)a2, v122, a4, a5, a6, a7, a8);
                      LODWORD(v120) = v125;
                      v122 += v116 + v119 - v121;
                      v123 = *(_QWORD *)(v116 + v119);
                    }
                    if (v116 + v119 + 16 != v123 && v123)
                    {
                      v154 = v116 + v119;
                      *(_QWORD *)v154 = 0;
                      *(_DWORD *)(v154 + 8) = 0;
                      v155 = v120;
                      WTF::fastFree(v123, (void *)a2, a3, a4, a5, a6, a7, a8);
                      LODWORD(v120) = v155;
                    }
                    v121 = v116 + v119 + 128;
                    v120 = (v120 + 1);
                  }
                }
              }
              v119 += 128;
            }
            while (v116 + v119 < v118);
            v116 = *(_QWORD *)(v55 + 8);
            LODWORD(v117) = *(_DWORD *)(v55 + 20);
            v118 = v122;
          }
          else
          {
            v120 = 0;
            v121 = v116 + (v117 << 7);
          }
          v126 = v116 + ((unint64_t)v117 << 7);
          if (v121 != v126)
          {
            if (v121 <= v118)
            {
              v174 = 0;
              v175 = v118 + ((v126 - v121) & 0xFFFFFFFFFFFFFF80) - 128;
              do
              {
                v176 = v120;
                JSC::B3::Air::Inst::Inst(v175 + v174, v126 + v174 - 128);
                v177 = *(_QWORD *)(v126 + v174 - 128);
                if (v126 + v174 - 112 != v177 && v177 != 0)
                {
                  *(_QWORD *)(v126 + v174 - 128) = 0;
                  *(_DWORD *)(v126 + v174 - 120) = 0;
                  WTF::fastFree(v177, (void *)a2, a3, a4, a5, a6, a7, a8);
                }
                v174 -= 128;
                v120 = v176;
              }
              while (v126 + v174 != v121);
            }
            else
            {
              do
              {
                *(_QWORD *)v118 = v118 + 16;
                *(_QWORD *)(v118 + 8) = 3;
                v127 = v121 + 16;
                v128 = *(_QWORD *)v121;
                if (*(_QWORD *)v121 == v121 + 16)
                {
                  v129 = *(unsigned int *)(v121 + 12);
                  if ((_DWORD)v129)
                  {
                    v130 = 0;
                    v131 = 32 * v129;
                    do
                    {
                      v132 = v118 + v130;
                      v133 = *(_OWORD *)(v128 + v130 + 16);
                      *(_OWORD *)(v132 + 16) = *(_OWORD *)(v128 + v130);
                      *(_OWORD *)(v132 + 32) = v133;
                      v130 += 32;
                    }
                    while (v131 != v130);
                  }
                }
                else
                {
                  *(_QWORD *)v121 = v127;
                  *(_QWORD *)v118 = v128;
                  v137 = *(_DWORD *)(v121 + 8);
                  *(_DWORD *)(v121 + 8) = 3;
                  *(_DWORD *)(v118 + 8) = v137;
                }
                v134 = *(_DWORD *)(v121 + 12);
                *(_DWORD *)(v121 + 12) = 0;
                *(_DWORD *)(v118 + 12) = v134;
                v135 = *(_QWORD *)(v121 + 112);
                *(_DWORD *)(v118 + 119) = *(_DWORD *)(v121 + 119);
                *(_QWORD *)(v118 + 112) = v135;
                v136 = *(_QWORD *)v121;
                if (v127 != *(_QWORD *)v121 && v136)
                {
                  *(_QWORD *)v121 = 0;
                  *(_DWORD *)(v121 + 8) = 0;
                  v142 = v120;
                  WTF::fastFree(v136, (void *)a2, a3, a4, a5, a6, a7, a8);
                  v120 = v142;
                }
                v118 += 128;
                v121 += 128;
              }
              while (v121 != v126);
            }
            LODWORD(v117) = *(_DWORD *)(v55 + 20);
          }
          *(_DWORD *)(v55 + 20) = v117 - v120;
        }
        v54 = (v182 + 1);
        v51 = v180;
        v53 = *(unsigned int *)(v180 + 108);
        if (v53 > v54)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v180 + 96) + 8 * v54))
          {
            if (v53 == ++v54)
            {
              LODWORD(v54) = *(_DWORD *)(v180 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v181 != (_DWORD)v54);
    }
  }
LABEL_218:
  JSC::B3::Air::InsertionSet::~InsertionSet((JSC::B3::Air::InsertionSet *)&ptr, (void *)a2, a3, a4, a5, a6, a7, a8);
  if (v196)
    WTF::fastFree(v196 - 16, v157, v158, v159, v160, v161, v162, v163);
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::makeWorkList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  WTF::BitVector *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int16 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  uint64_t v39;
  unsigned __int16 v40;

  v8 = *(_WORD *)(a1 + 16) + 1;
  v40 = v8;
  if (*(_DWORD *)(a1 + 76) > v8)
  {
    v10 = (WTF::BitVector *)(a1 + 208);
    v11 = (uint64_t *)(a1 + 296);
    v12 = a1 + 192;
    while (1)
    {
      v13 = v8;
      if (*(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v8))
      {
        v15 = *(uint64_t **)(a1 + 240);
        if (*v15 >= 0)
          v15 = (uint64_t *)(2 * *v15 + 8);
        v16 = v13 >> 6;
        v17 = 1 << v13;
        if ((v15[v13 >> 6] & (1 << v13)) == 0)
        {
          v18 = *(_QWORD *)v10;
          if ((*(_QWORD *)v10 & 0x8000000000000000) != 0)
            v19 = 63;
          else
            v19 = *(_QWORD *)(2 * v18);
          if (v19 <= v13)
          {
            WTF::BitVector::resizeOutOfLine(v10, v13 + 1, 0);
            v18 = *(_QWORD *)v10;
          }
          if (v18 >= 0)
            v20 = 2 * v18 + 8;
          else
            v20 = (uint64_t)v10;
          *(_QWORD *)(v20 + 8 * v16) |= v17;
        }
        goto LABEL_8;
      }
      if (*(_DWORD *)(a1 + 116) <= v8)
      {
        __break(0xC471u);
        return;
      }
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 104) + 40 * v8))
      {
        v14 = *(unsigned int *)(a1 + 204);
        if ((_DWORD)v14 == *(_DWORD *)(a1 + 200))
        {
          v38 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v14 + 1, (unint64_t)&v40);
          v39 = *(unsigned int *)(a1 + 204);
          *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v39) = *v38;
          *(_DWORD *)(a1 + 204) = v39 + 1;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v14) = v8;
          *(_DWORD *)(a1 + 204) = v14 + 1;
        }
        goto LABEL_8;
      }
      v21 = *v11;
      if (*v11
        || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(v11, 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v11) != 0))
      {
        v22 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        v22 = 0;
      }
      v23 = v40;
      v24 = ~(v40 << 15) + v40;
      v25 = (9 * (v24 ^ (v24 >> 10))) ^ ((9 * (v24 ^ (v24 >> 10))) >> 6);
      v26 = ((v25 + ~(v25 << 11)) ^ ((v25 + ~(v25 << 11)) >> 16)) & v22;
      v27 = (unsigned __int16 *)(v21 + 2 * v26);
      v28 = *v27;
      if (*v27)
      {
        v29 = 0;
        v30 = 1;
        while (v28 != v40)
        {
          if (v28 == 0xFFFF)
            v29 = v27;
          v26 = (v26 + v30) & v22;
          v27 = (unsigned __int16 *)(v21 + 2 * v26);
          v28 = *v27;
          ++v30;
          if (!*v27)
          {
            if (v29)
            {
              *v29 = 0;
              --*(_DWORD *)(*v11 - 16);
              v23 = v40;
              v27 = v29;
            }
            goto LABEL_31;
          }
        }
        goto LABEL_8;
      }
LABEL_31:
      *v27 = v23;
      v31 = *v11;
      v32 = *v11 ? *(_DWORD *)(v31 - 12) + 1 : 1;
      *(_DWORD *)(v31 - 12) = v32;
      v33 = *v11;
      v34 = *v11 ? *(_DWORD *)(v33 - 12) : 0;
      v35 = (*(_DWORD *)(v33 - 16) + v34);
      v36 = *(unsigned int *)(v33 - 4);
      if (v36 > 0x400)
        break;
      if (3 * v36 <= 4 * v35)
      {
        if (!(_DWORD)v36)
        {
          v37 = 8;
LABEL_39:
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash(v11, v37, (uint64_t)v27, a4, a5, a6, a7, a8);
          goto LABEL_8;
        }
LABEL_43:
        v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
        goto LABEL_39;
      }
LABEL_8:
      v8 = v40 + 1;
      v40 = v8;
      if (*(_DWORD *)(a1 + 76) <= v8)
        return;
    }
    if (v36 > 2 * v35)
      goto LABEL_8;
    goto LABEL_43;
  }
}

char *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::selectSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, float a11)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _WORD *v25;
  unsigned __int16 v26;

  v19 = v12;
  v26 = v12;
  v20 = *(_QWORD *)(a1 + 208);
  if (v20 >= 0)
    v21 = 2 * v20 + 8;
  else
    v21 = a1 + 208;
  *(_QWORD *)(v21 + (((unint64_t)v12 >> 3) & 0x1FF8)) &= ~(1 << v12);
  v22 = (_QWORD *)(a1 + 192);
  v23 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 200))
  {
    v25 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v26);
    v23 = *(unsigned int *)(a1 + 204);
    *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v23) = *v25;
    v19 = v26;
  }
  else
  {
    *(_WORD *)(*v22 + 2 * v23) = v19;
  }
  *(_DWORD *)(a1 + 204) = v23 + 1;
}

uint64_t WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::contains(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  if (a3 >= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a3 <= a2)
    v4 = a2;
  else
    v4 = a3;
  if (*(_DWORD *)(result + 12) <= v3)
  {
    __break(0xC471u);
    return result;
  }
  v5 = *(_QWORD *)result + 16 * v3;
  if (*(_DWORD *)(v5 + 8) != -1)
  {
    v6 = *(unsigned __int16 *)(*(_QWORD *)result + 16 * v3 + 12);
    if (v6 <= v4)
    {
      v7 = v4 - v6;
      v8 = (_QWORD *)(2 * *(_QWORD *)v5);
      v9 = (*(_QWORD *)v5 & 0x8000000000000000) != 0 ? 63 : *v8;
      if (v9 > v7)
      {
        v10 = v8 + 1;
        if (*(uint64_t *)v5 >= 0)
          v5 = (uint64_t)v10;
        return (*(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1;
      }
    }
    return 0;
  }
  v11 = *(_QWORD *)v5;
  if (!v11)
    return 0;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = 9 * ((~((_DWORD)v4 << 15) + v4) ^ ((~((_DWORD)v4 << 15) + v4) >> 10));
  v14 = v12 & (((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) ^ (((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) >> 16));
  v15 = *(unsigned __int16 *)(v11 + 2 * v14);
  if (v15 == (_DWORD)v4)
    return 1;
  v16 = 1;
  do
  {
    result = (unsigned __int16)v15 != 0xFFFF;
    if ((unsigned __int16)v15 == 0xFFFF)
      break;
    v14 = (v14 + v16) & v12;
    v15 = *(unsigned __int16 *)(v11 + 2 * v14);
    ++v16;
  }
  while (v15 != (_DWORD)v4);
  return result;
}

char *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::freezeMoves(char *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v56;
  __int16 v57;

  if (*((_DWORD *)result + 29) <= a2)
  {
    __break(0xC471u);
    goto LABEL_73;
  }
  v9 = result;
  v10 = *((_QWORD *)result + 13) + 40 * a2;
  v11 = *(unsigned int *)(v10 + 4);
  v12 = (_QWORD *)(v10 + 8);
  if ((_DWORD)v11 != 8)
    v12 = (_QWORD *)*v12;
  v13 = 0;
  while ((_DWORD)v11 != v13)
  {
    v14 = v13;
    v15 = *((_DWORD *)v12 + v13++);
    if (v15 != -1)
    {
      v16 = v14;
      goto LABEL_8;
    }
  }
  v16 = v11;
LABEL_8:
  if ((_DWORD)v11 != (_DWORD)v16)
  {
    v17 = (uint64_t *)(result + 360);
    v18 = result + 304;
    v19 = v16 | (v11 << 32);
    do
    {
      v20 = *((unsigned int *)v12 + v19);
      if (*v17 >= 0)
        v21 = 2 * *v17 + 8;
      else
        v21 = (uint64_t)(v9 + 360);
      if (((*(_QWORD *)(v21 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) != 0 || *(_DWORD *)(*v18 + 4 * v20) != -1)
      {
        v22 = (unsigned __int16)*((_DWORD *)v12 + v19);
        v23 = (v22 >> 3) & 0x1FF8;
        v24 = *(_QWORD *)(v21 + v23);
        *(_QWORD *)(v21 + v23) = v24 & ~(1 << *((_DWORD *)v12 + v19));
        if ((v24 & (1 << v22)) == 0)
        v25 = (unsigned __int16 *)(*((_QWORD *)v9 + 11) + 4 * v22);
        v26 = *v25;
        v27 = v25[1];
        if (v26 != a2)
          v27 = v26;
        do
        {
          v28 = v27;
          v27 = *(unsigned __int16 *)(*((_QWORD *)v9 + 19) + 2 * v27);
        }
        while (v27);
        v29 = v28;
        v57 = v28;
        if (*((_DWORD *)v9 + 3) > *(unsigned __int16 *)(*((_QWORD *)v9 + 8) + 2 * v28))
        {
          if (*((_DWORD *)v9 + 29) <= v28)
          {
            __break(0xC471u);
LABEL_73:
            JUMPOUT(0x19806C3D4);
          }
          v37 = *((_QWORD *)v9 + 13) + 40 * v28;
          v38 = *(unsigned int *)(v37 + 4);
          v39 = (_QWORD *)(v37 + 8);
          if ((_DWORD)v38 != 8)
            v39 = (_QWORD *)*v39;
          v40 = 0;
          while ((_DWORD)v38 != v40)
          {
            v41 = v40;
            v42 = *((_DWORD *)v39 + v40++);
            if (v42 != -1)
            {
              v36 = v41;
              goto LABEL_44;
            }
          }
          v36 = v38;
LABEL_44:
          if ((_DWORD)v38 == (_DWORD)v36)
          {
LABEL_49:
            v44 = *((_QWORD *)v9 + 37);
            if (v44)
            {
              v45 = *(_DWORD *)(v44 - 8);
              v46 = 9 * ((~(v29 << 15) + v29) ^ ((~(v29 << 15) + v29) >> 10));
              v47 = v45 & (((v46 ^ (v46 >> 6)) + ~((v46 ^ (v46 >> 6)) << 11)) ^ (((v46 ^ (v46 >> 6))
                                                                                + ~((v46 ^ (v46 >> 6)) << 11)) >> 16));
              v48 = *(unsigned __int16 *)(v44 + 2 * v47);
              if (v48 != v29)
              {
                v49 = 1;
                while (v48)
                {
                  v47 = ((_DWORD)v47 + v49) & v45;
                  v48 = *(unsigned __int16 *)(v44 + 2 * v47);
                  ++v49;
                  if (v48 == v29)
                    goto LABEL_54;
                }
                v47 = *(unsigned int *)(v44 - 4);
              }
LABEL_54:
              if (v47 != *(_DWORD *)(v44 - 4))
              {
                *(_WORD *)(v44 + 2 * v47) = -1;
                ++*(_DWORD *)(*((_QWORD *)v9 + 37) - 16);
                v50 = *((_QWORD *)v9 + 37);
                if (v50)
                  v51 = *(_DWORD *)(v50 - 12) - 1;
                else
                  v51 = -1;
                result = v9 + 296;
                *(_DWORD *)(v50 - 12) = v51;
                v52 = *((_QWORD *)v9 + 37);
                if (v52)
                {
                  v53 = 6 * *(_DWORD *)(v52 - 12);
                  v54 = *(_DWORD *)(v52 - 4);
                  if (v53 < v54 && v54 >= 9)
                    result = (char *)WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::rehash((uint64_t *)result, v54 >> 1, 0, a4, a5, a6, a7, a8);
                }
                v56 = *((unsigned int *)v9 + 51);
                if ((_DWORD)v56 == *((_DWORD *)v9 + 50))
                {
                  result = (char *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)(v9 + 192), (unint64_t)&v57);
                }
                else
                {
                  *(_WORD *)(*((_QWORD *)v9 + 24) + 2 * v56) = v29;
                  *((_DWORD *)v9 + 51) = v56 + 1;
                }
              }
            }
          }
          else
          {
            v35 = v36 | (v38 << 32);
            if (*v17 >= 0)
              v43 = 2 * *v17 + 8;
            else
              v43 = (uint64_t)(v9 + 360);
            while (1)
            {
              v32 = *((unsigned int *)v39 + v35);
              if (((*(_QWORD *)(v43 + ((v32 >> 3) & 0x1FFFFFF8)) >> v32) & 1) != 0 || *(_DWORD *)(*v18 + 4 * v32) != -1)
                break;
              v33 = HIDWORD(v35);
              if ((v36 + 1) > HIDWORD(v35))
                LODWORD(v33) = v36 + 1;
              while (1)
              {
                v34 = (v36 + 1);
                v35 = v35 & 0xFFFFFFFF00000000 | v34;
                if ((_DWORD)v33 - 1 == (_DWORD)v36)
                  break;
                LODWORD(v36) = v36 + 1;
                if (*((_DWORD *)v39 + v34) != -1)
                  goto LABEL_34;
              }
              LODWORD(v34) = v33;
LABEL_34:
              LODWORD(v36) = v34;
              if ((_DWORD)v38 == (_DWORD)v34)
                goto LABEL_49;
            }
          }
        }
      }
      v30 = HIDWORD(v19);
      if ((v16 + 1) > HIDWORD(v19))
        LODWORD(v30) = v16 + 1;
      while (1)
      {
        v31 = (v16 + 1);
        v19 = v19 & 0xFFFFFFFF00000000 | v31;
        if ((_DWORD)v30 - 1 == (_DWORD)v16)
          break;
        LODWORD(v16) = v16 + 1;
        if (*((_DWORD *)v12 + v31) != -1)
          goto LABEL_24;
      }
      LODWORD(v31) = v30;
LABEL_24:
      LODWORD(v16) = v31;
    }
    while ((_DWORD)v11 != (_DWORD)v31);
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::selectSpill(uint64_t a1, double a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  unsigned int *v28;
  _DWORD *v29;
  unsigned int v30;
  unint64_t v31;
  _QWORD *v32;
  float v33;
  unint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  unsigned int *v50;
  _DWORD *v51;
  unsigned int v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  unint64_t v59;

  if (!*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 1;
    if (*(_BYTE *)(a1 + 217))
      WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 224), (const void **)(a1 + 152), a6, a7, a8, a9, a10, a11);
  }
  v12 = *(_QWORD *)(a1 + 208);
  v13 = (uint64_t *)(2 * v12);
  if ((v12 & 0x8000000000000000) != 0)
  {
    v19 = __clz(__rbit64(v12));
    v14 = 63;
    if (v19 >= 0x3F)
      v19 = 63;
  }
  else
  {
    v14 = *v13;
    v15 = *v13 + 63;
    if (v15 < 0x40)
    {
LABEL_67:
      __break(0xC471u);
      JUMPOUT(0x19806C718);
    }
    v16 = *(_QWORD *)(2 * v12 + 8);
    if (v16 && (v17 = __clz(__rbit64(v16)), v17 < 0x40))
    {
      v18 = 0;
    }
    else
    {
      v45 = (v15 >> 6) - 1;
      if (!v45)
        goto LABEL_67;
      v46 = 0;
      while (1)
      {
        v47 = *(_QWORD *)(2 * v12 + 0x10 + 8 * v46);
        if (v47)
        {
          v17 = __clz(__rbit64(v47));
          if (v17 <= 0x3F)
            break;
        }
        if (v45 == ++v46)
          goto LABEL_67;
      }
      v18 = v46 + 1;
    }
    v19 = v17 + (v18 << 6);
  }
  if (v19 == v14)
    goto LABEL_67;
  v20 = *(uint64_t **)(a1 + 240);
  v21 = (unint64_t *)(2 * *v20);
  if (*v20 < 0)
    v22 = 63;
  else
    v22 = *v21;
  if (v22 > v19)
  {
    v23 = (uint64_t *)(v21 + 1);
    if (*v20 >= 0)
      v20 = v23;
    if (((*(unint64_t *)((char *)v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19806C738);
    }
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    if (v19 != 63)
    {
      v48 = *(_QWORD **)(a1 + 248);
      v50 = (unsigned int *)*v48;
      v49 = v48 + 2;
      v51 = v50 + 1;
      v52 = *v50;
      v53 = 0.0;
      v54 = v19;
      while (1)
      {
        if (v52 <= (unsigned __int16)v54)
        {
LABEL_63:
          __break(0xC471u);
          JUMPOUT(0x19806C6CCLL);
        }
        v55 = *(float *)&v51[(unsigned __int16)v54];
        if (v55 == 0.0)
          break;
        LOWORD(a4) = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v54);
        v56 = (float)LODWORD(a4);
        if (*v49 >= 0)
          v57 = 2 * *v49 + 8;
        else
          v57 = (uint64_t)v49;
        v58 = v56 / v55;
        a4 = v58 + v58;
        if (((*(_QWORD *)(v57 + (((unint64_t)(unsigned __int16)v54 >> 3) & 0x1FF8)) >> v54) & 1) != 0)
          v58 = v58 + v58;
        if (v58 > v53)
        {
          v53 = v58;
          LOWORD(v19) = v54;
        }
        v59 = __clz(__rbit64(v12 >> (v54 + 1))) + v54 + 1;
        if (v59 >= 0x3F)
          v54 = 63;
        else
          v54 = v59;
        if (v59 > 0x3E)
          return (unsigned __int16)v19;
      }
      LOWORD(v19) = v54;
    }
  }
  else
  {
    v24 = *v13;
    if (v19 != *v13)
    {
      v25 = v13 + 1;
      v26 = *(_QWORD **)(a1 + 248);
      v28 = (unsigned int *)*v26;
      v27 = v26 + 2;
      v29 = v28 + 1;
      v30 = *v28;
      v31 = (unint64_t)(v24 + 63) >> 6;
      v32 = v13 + 2;
      v33 = 0.0;
      v34 = v19;
      while (1)
      {
        if (v30 <= (unsigned __int16)v34)
          goto LABEL_63;
        v35 = *(float *)&v29[(unsigned __int16)v34];
        if (v35 == 0.0)
          break;
        LOWORD(a4) = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v34);
        v36 = (float)LODWORD(a4);
        if (*v27 >= 0)
          v37 = 2 * *v27 + 8;
        else
          v37 = (uint64_t)v27;
        v38 = v36 / v35;
        a4 = v38 + v38;
        if (((*(_QWORD *)(v37 + (((unint64_t)(unsigned __int16)v34 >> 3) & 0x1FF8)) >> v34) & 1) != 0)
          v38 = v38 + v38;
        if (v38 > v33)
        {
          v33 = v38;
          LOWORD(v19) = v34;
        }
        v39 = v34 + 1;
        v40 = (v34 + 1) >> 6;
        if (v40 >= v31)
          return (unsigned __int16)v19;
        v41 = v25[v40];
        if (!v41 || (v42 = __clz(__rbit64(v41 >> v39)) + (v39 & 0x3F), v42 >= 0x40))
        {
          if (v40 + 1 == v31)
            return (unsigned __int16)v19;
          while (1)
          {
            v43 = v32[v40];
            if (v43)
            {
              v42 = __clz(__rbit64(v43));
              if (v42 < 0x40)
                break;
            }
            if (v31 - 1 == ++v40)
              return (unsigned __int16)v19;
          }
          ++v40;
        }
        v34 = v42 + (v40 << 6);
        if (v34 == v24)
          return (unsigned __int16)v19;
      }
      LOWORD(v19) = v34;
    }
  }
  return (unsigned __int16)v19;
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::assignColors(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t StatusReg;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  unint64_t *v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _WORD *v45;
  unsigned int v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  int v59;
  WTF **v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t *i;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int16 *v72;
  unsigned __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  _BYTE *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  const void *v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  _DWORD *v108;
  unint64_t v109;
  unsigned __int16 *v110;
  __int16 v111;
  uint64_t v112;
  char v113;
  unsigned __int16 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  WTF *v120[2];
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 32))
  {
    v9 = *(unsigned int *)(a1 + 36);
    v10 = *(_QWORD *)(a1 + 24);
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        if (*(_DWORD *)(v10 + 8) == -1)
        {
          if (*(_QWORD *)v10)
            WTF::fastFree(*(_QWORD *)v10 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_6;
        }
        v13 = *(_QWORD *)v10;
        if ((*(_QWORD *)v10 & 0x8000000000000000) == 0)
        {
          a2 = 2 * v13;
          v14 = *(_QWORD *)(StatusReg + 752);
          if (v14)
          {
            if (!(a2 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 26) & 0x3FFFFFFFFCLL)) >> (v13 >> 23)) & 1) != 0)
            {
LABEL_11:
              v15 = *(unsigned int *)(v14 + 8000);
              if (v15 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v14, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v14 + 8 * v15) = a2 | 0x5000000000000;
                *(_DWORD *)(v14 + 8000) = v15 + 1;
              }
              goto LABEL_6;
            }
            v43 = v13 >> 23;
            v44 = (v13 >> 23) - *off_1ECF425F8;
            if (v43 < *off_1ECF425F8 || off_1ECF425F8[1] <= v43)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v44 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v44 & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_11;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v14, a2, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(2 * v13, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_6:
        v10 += 16;
        v11 -= 16;
        if (!v11)
        {
          *(_DWORD *)(a1 + 36) = 0;
          v10 = *(_QWORD *)(a1 + 24);
          break;
        }
      }
    }
    if (v10)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 76))
      *(_DWORD *)(a1 + 76) = 0;
    v16 = *(_QWORD *)(a1 + 64);
    if (v16)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v16, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 112))
  {
    v17 = *(unsigned int *)(a1 + 116);
    v18 = *(_QWORD *)(a1 + 104);
    if ((_DWORD)v17)
    {
      v19 = 40 * v17;
      v20 = (unint64_t *)(v18 + 8);
      do
      {
        if (*((_DWORD *)v20 - 1) != 8)
          WTF::fastFree(*v20, (void *)a2, a3, a4, a5, a6, a7, a8);
        v20 += 5;
        v19 -= 40;
      }
      while (v19);
      *(_DWORD *)(a1 + 116) = 0;
      v18 = *(_QWORD *)(a1 + 104);
    }
    if (v18)
    {
      *(_QWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 112) = 0;
      WTF::fastFree(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 200))
  {
    if (*(_DWORD *)(a1 + 204))
      *(_DWORD *)(a1 + 204) = 0;
    v42 = *(_QWORD *)(a1 + 192);
    if (v42)
    {
      *(_QWORD *)(a1 + 192) = 0;
      *(_DWORD *)(a1 + 200) = 0;
      WTF::fastFree(v42, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v21 = *(_QWORD *)(a1 + 208);
  if (v21 < 0)
    *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  else
    bzero((void *)(2 * v21 + 8), (unint64_t)(*(_QWORD *)(2 * v21) + 7) >> 3);
  v22 = *(unsigned int *)(a1 + 60);
  v23 = *(unsigned int *)(a1 + 132);
  if (v23 < v22)
  {
    v24 = *(unsigned int *)(a1 + 128);
    v25 = *(_QWORD *)(a1 + 120);
    if (v24 < v22)
    {
      v26 = v24 + (v24 >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= v22)
        v28 = *(unsigned int *)(a1 + 60);
      else
        v28 = v27;
      if (HIDWORD(v28))
      {
        __break(0xC471u);
LABEL_214:
        __break(1u);
LABEL_215:
        JUMPOUT(0x19806D138);
      }
      v29 = (_BYTE *)WTF::fastMalloc((WTF *)v28);
      *(_DWORD *)(a1 + 128) = v28;
      *(_QWORD *)(a1 + 120) = v29;
      if ((_DWORD)v23)
      {
        v30 = (char *)v25;
        v31 = (unint64_t *)(a1 + 120);
        do
        {
          v32 = *v30++;
          *v29++ = v32;
          --v23;
        }
        while (v23);
        v29 = *(_BYTE **)(a1 + 120);
      }
      else
      {
        v31 = (unint64_t *)(a1 + 120);
      }
      if (v25)
      {
        if (v29 == (_BYTE *)v25)
        {
          *(_QWORD *)(a1 + 120) = 0;
          *(_DWORD *)(a1 + 128) = 0;
        }
        WTF::fastFree(v25, (void *)a2, a3, a4, a5, a6, a7, a8);
        v25 = *v31;
      }
      else
      {
        v25 = (unint64_t)v29;
      }
    }
    if (v25)
    {
      v33 = *(unsigned int *)(a1 + 132);
      if ((_DWORD)v33 != (_DWORD)v22)
      {
        v34 = (_BYTE *)(v25 + v33);
        v35 = v22 - v33;
        do
        {
          *v34++ |= 0x7Fu;
          --v35;
        }
        while (v35);
      }
    }
  }
  *(_DWORD *)(a1 + 132) = v22;
  v114 = (unsigned __int16 *)&v116;
  v115 = 4;
  v37 = (uint64_t *)(a1 + 80);
  v36 = *(_QWORD *)(a1 + 80);
  if (!v36)
  {
    v40 = 0;
    v38 = 0;
LABEL_74:
    v39 = (_WORD *)(v36 + 32 * v38);
    goto LABEL_75;
  }
  v38 = *(unsigned int *)(v36 - 4);
  v39 = (_WORD *)(v36 + 32 * v38);
  if (!*(_DWORD *)(v36 - 12))
  {
    v40 = (_WORD *)(v36 + 32 * v38);
    goto LABEL_74;
  }
  v40 = *(_WORD **)(a1 + 80);
  if ((_DWORD)v38)
  {
    v41 = 32 * v38;
    v40 = *(_WORD **)(a1 + 80);
    while ((unsigned __int16)*v40 >= 0xFFFEu)
    {
      v40 += 16;
      v41 -= 32;
      if (!v41)
      {
        v40 = v39;
        break;
      }
    }
  }
LABEL_75:
  if (v36)
    v45 = (_WORD *)(v36 + 32 * *(unsigned int *)(v36 - 4));
  else
    v45 = 0;
  if (v45 != v40)
  {
    v46 = 0;
    v47 = (unsigned __int16 *)&v116;
    do
    {
      LOWORD(v120[0]) = 0;
      LOWORD(v120[0]) = *v40;
      v48 = LOWORD(v120[0]);
      do
      {
        v49 = v48;
        v48 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v48);
      }
      while ((_DWORD)v48);
      if (LOWORD(v120[0]) != v49)
      {
        if (v46 == (_DWORD)v115)
        {
          v51 = (unsigned __int16 *)WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, v46 + 1, (unint64_t)v120);
          v46 = HIDWORD(v115);
          v47 = v114;
          v114[HIDWORD(v115)] = *v51;
        }
        else
        {
          v47[v46] = (unsigned __int16)v120[0];
        }
        HIDWORD(v115) = ++v46;
      }
      v50 = v40 + 16;
      v40 = v39;
      if (v50 != v39)
      {
        v40 = v50;
        while ((unsigned __int16)*v40 >= 0xFFFEu)
        {
          v40 += 16;
          if (v40 == v39)
          {
            v40 = v39;
            break;
          }
        }
      }
    }
    while (v40 != v45);
    if (v46)
    {
      v110 = &v47[v46];
      do
      {
        LOWORD(v52) = *v47;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::take(v120, (uint64_t *)(a1 + 80), *v47);
        do
        {
          v57 = v52;
          v52 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * (unsigned __int16)v52);
        }
        while (v52);
        v111 = v57;
        v117 = 0x800000000;
        v118 = (WTF *)-1;
        v119 = -1;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)&v112, (uint64_t *)(a1 + 80), &v111, (uint64_t)&v117, v53, v54, v55, v56);
        if (HIDWORD(v117) != 8)
          WTF::fastFree((unint64_t)v118, (void *)a2, a3, a4, a5, a6, a7, a8);
        v58 = v112 + 8;
        if (v113)
        {
          if (*(_DWORD *)(v112 + 12) != 8)
            WTF::fastFree(*(_QWORD *)(v112 + 16), (void *)a2, a3, a4, a5, a6, a7, a8);
          *(_OWORD *)v58 = *(_OWORD *)v120;
          *(_QWORD *)(v58 + 16) = v121;
        }
        else
        {
          v59 = HIDWORD(v120[0]);
          v60 = &v120[1];
          if (HIDWORD(v120[0]) != 8)
            v60 = (WTF **)v120[1];
          v61 = 0;
          while (HIDWORD(v120[0]) != v61)
          {
            LODWORD(v62) = v61;
            v63 = *((__int16 *)v60 + v61++);
            if (v63 != -1)
            {
              v62 = v62;
              goto LABEL_106;
            }
          }
          v62 = HIDWORD(v120[0]);
LABEL_106:
          if (HIDWORD(v120[0]) != (_DWORD)v62)
          {
            v64 = v62 | ((unint64_t)HIDWORD(v120[0]) << 32);
            do
            {
              LODWORD(v65) = v62;
              WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)&v117, (unsigned int *)v58, *((unsigned __int16 *)v60 + v64));
              if (HIDWORD(v64) <= (v65 + 1))
                v62 = (v65 + 1);
              else
                v62 = HIDWORD(v64);
              while ((_DWORD)v62 - 1 != (_DWORD)v65)
              {
                v65 = (v65 + 1);
                if (*((__int16 *)v60 + v65) != -1)
                {
                  LODWORD(v62) = v65;
                  goto LABEL_114;
                }
              }
              v65 = v62;
LABEL_114:
              v64 = v65 | v64 & 0xFFFFFFFF00000000;
            }
            while (v59 != (_DWORD)v62);
          }
          if (v59 != 8)
            WTF::fastFree((unint64_t)v120[1], (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        ++v47;
      }
      while (v47 != v110);
      v47 = v114;
    }
    if (&v116 != (uint64_t *)v47 && v47)
    {
      v114 = 0;
      LODWORD(v115) = 0;
      WTF::fastFree((unint64_t)v47, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v66 = *(_DWORD *)(a1 + 188);
  for (i = (unint64_t *)(a1 + 120); v66; v66 = *(_DWORD *)(a1 + 188))
  {
    v68 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 176) + 2 * v66 - 2);
    *(_DWORD *)(a1 + 188) = v66 - 1;
    v69 = *(_QWORD *)(a1 + 48) + 16 * v68;
    v70 = *(unsigned int *)(v69 + 12);
    if ((_DWORD)v70)
    {
      v71 = 0;
      v72 = *(unsigned __int16 **)v69;
      v73 = &v72[v70];
      while (1)
      {
        v74 = *v72;
        do
        {
          v75 = v74;
          v74 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v74);
        }
        while ((_DWORD)v74);
        v76 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v75);
        if ((~v76 & 0x7F) != 0)
        {
          if ((v76 & 0x40) != 0)
            goto LABEL_214;
          v71 |= 1 << v76;
        }
        if (++v72 == v73)
          goto LABEL_139;
      }
    }
    v71 = 0;
LABEL_139:
    v77 = *v37;
    if (!*v37)
      goto LABEL_147;
    v78 = *(_DWORD *)(v77 - 8);
    v79 = 9 * ((~((_DWORD)v68 << 15) + v68) ^ ((~((_DWORD)v68 << 15) + v68) >> 10));
    v80 = (v79 ^ (v79 >> 6)) + ~((v79 ^ (v79 >> 6)) << 11);
    v81 = v78 & (v80 ^ HIWORD(v80));
    v82 = *(unsigned __int16 *)(v77 + 32 * v81);
    if (v82 != (_DWORD)v68)
    {
      v83 = 1;
      while (v82 != 0xFFFF)
      {
        v81 = ((_DWORD)v81 + v83) & v78;
        v82 = *(unsigned __int16 *)(v77 + 32 * v81);
        ++v83;
        if (v82 == (_DWORD)v68)
          goto LABEL_146;
      }
      v81 = *(unsigned int *)(v77 - 4);
    }
LABEL_146:
    if (v81 == *(_DWORD *)(v77 - 4))
      goto LABEL_147;
    v87 = v77 + 32 * v81;
    v88 = *(unsigned int *)(v87 + 12);
    v89 = (_QWORD *)(v87 + 16);
    if ((_DWORD)v88 != 8)
      v89 = (_QWORD *)*v89;
    v90 = 0;
    while ((_DWORD)v88 != v90)
    {
      v91 = v90;
      v92 = *((__int16 *)v89 + v90++);
      if (v92 != -1)
      {
        v93 = v91;
        goto LABEL_163;
      }
    }
    v93 = v88;
LABEL_163:
    if ((_DWORD)v88 == (_DWORD)v93)
    {
LABEL_147:
      v84 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v84)
      {
        v85 = *(_BYTE **)a1;
        while (1)
        {
          if ((*v85 & 0x7Fu) >= 0x40)
            goto LABEL_214;
          if (((v71 >> (*v85 & 0x7F)) & 1) == 0)
            break;
          ++v85;
          if (!--v84)
            goto LABEL_152;
        }
        *(_BYTE *)(*i + v68) = *v85;
      }
      else
      {
LABEL_152:
        v86 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v86 == *(_DWORD *)(a1 + 144))
        {
          v101 = v86 + (v86 >> 2);
          if (v101 >= 0x10)
            v102 = v101 + 1;
          else
            v102 = 16;
          if (v102 <= v86 + 1)
            v103 = v86 + 1;
          else
            v103 = v102;
          if (v103 >> 31)
          {
            __break(0xC471u);
            goto LABEL_215;
          }
          v104 = *(const void **)(a1 + 136);
          v105 = (void *)WTF::fastMalloc((WTF *)(2 * v103));
          *(_DWORD *)(a1 + 144) = v103;
          *(_QWORD *)(a1 + 136) = v105;
          memcpy(v105, v104, 2 * v86);
          if (v104)
          {
            if (*(const void **)(a1 + 136) == v104)
            {
              *(_QWORD *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree((unint64_t)v104, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          v106 = *(unsigned int *)(a1 + 148);
          *(_WORD *)(*(_QWORD *)(a1 + 136) + 2 * v106) = v68;
          *(_DWORD *)(a1 + 148) = v106 + 1;
          i = (unint64_t *)(a1 + 120);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a1 + 136) + 2 * v86) = v68;
          *(_DWORD *)(a1 + 148) = v86 + 1;
        }
      }
    }
    else
    {
      v94 = v93 | (v88 << 32);
      v95 = *(_QWORD *)(a1 + 120);
      while (1)
      {
        v96 = *((unsigned __int16 *)v89 + v94);
        do
        {
          v97 = v96;
          v96 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v96);
        }
        while ((_DWORD)v96);
        v98 = *(_BYTE *)(v95 + v97);
        v99 = v98 & 0x7F;
        if (v99 != 127)
        {
          if (v99 >= 0x40)
            goto LABEL_214;
          if (((v71 >> v99) & 1) == 0)
            break;
        }
        if (HIDWORD(v94) <= (v93 + 1))
          v100 = (v93 + 1);
        else
          v100 = HIDWORD(v94);
        while ((_DWORD)v100 - 1 != (_DWORD)v93)
        {
          v93 = (v93 + 1);
          if (*((__int16 *)v89 + v93) != -1)
          {
            LODWORD(v100) = v93;
            goto LABEL_174;
          }
        }
        v93 = v100;
LABEL_174:
        v94 = v93 | v94 & 0xFFFFFFFF00000000;
        LODWORD(v93) = v100;
        if ((_DWORD)v88 == (_DWORD)v100)
          goto LABEL_147;
      }
      *(_BYTE *)(v95 + v68) = v98;
    }
  }
  if (*(_DWORD *)(a1 + 184))
  {
    v107 = *(_QWORD *)(a1 + 176);
    if (v107)
    {
      *(_QWORD *)(a1 + 176) = 0;
      *(_DWORD *)(a1 + 184) = 0;
      WTF::fastFree(v107, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 148))
  {
    v108 = (_DWORD *)(a1 + 128);
    if (!*(_DWORD *)(a1 + 128))
      return;
    if (*(_DWORD *)(a1 + 132))
      *(_DWORD *)(a1 + 132) = 0;
  }
  else
  {
    v108 = (_DWORD *)(a1 + 232);
    if (!*(_DWORD *)(a1 + 232))
      return;
    i = (unint64_t *)(a1 + 224);
    if (*(_DWORD *)(a1 + 236))
      *(_DWORD *)(a1 + 236) = 0;
  }
  v109 = *i;
  if (*i)
  {
    *i = 0;
    *v108 = 0;
    WTF::fastFree(v109, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::clear(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t StatusReg;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (*(_DWORD *)(a1 + 8))
  {
    v9 = *(unsigned int *)(a1 + 12);
    v10 = *(_QWORD *)a1;
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        if (*(_DWORD *)(v10 + 8) == -1)
        {
          if (*(_QWORD *)v10)
            WTF::fastFree(*(_QWORD *)v10 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_6;
        }
        v13 = *(_QWORD *)v10;
        if ((*(_QWORD *)v10 & 0x8000000000000000) == 0)
        {
          a2 = 2 * v13;
          v14 = *(_QWORD *)(StatusReg + 752);
          if (v14)
          {
            if (!(a2 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 26) & 0x3FFFFFFFFCLL)) >> (v13 >> 23)) & 1) != 0)
            {
LABEL_11:
              v15 = *(unsigned int *)(v14 + 8000);
              if (v15 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v14, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v14 + 8 * v15) = a2 | 0x5000000000000;
                *(_DWORD *)(v14 + 8000) = v15 + 1;
              }
              goto LABEL_6;
            }
            v16 = v13 >> 23;
            v17 = (v13 >> 23) - *off_1ECF425F8;
            if (v16 < *off_1ECF425F8 || off_1ECF425F8[1] <= v16)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v17 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v17 & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_11;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v14, a2, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(2 * v13, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_6:
        v10 += 16;
        v11 -= 16;
        if (!v11)
        {
          *(_DWORD *)(a1 + 12) = 0;
          v10 = *(_QWORD *)a1;
          break;
        }
      }
    }
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  BOOL v41;

  if (!a4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = result;
      v9 = **(_QWORD **)result;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = *(JSC::B3::Air::Inst **)(result + 8);
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19806D5F8);
          }
          v19 = *(_QWORD *)(v8 + 16);
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          if ((result & 1) != 0)
            goto LABEL_17;
          v32 = *(uint64_t **)(v8 + 8);
          v33 = *((__int16 *)v32 + 60);
          if (v33 == 90
            || ((v38 = v33 - 94, v39 = v38 > 0xE, v40 = (1 << v38) & 0x6001, !v39) ? (v41 = v40 == 0) : (v41 = 1), !v41))
          {
            v34 = *((unsigned int *)v32 + 3);
            if (!(_DWORD)v34)
            {
              __break(0xC471u);
              JUMPOUT(0x19806D608);
            }
            v35 = *v32;
            v36 = ((unint64_t)(a2 - v35) >> 5) ^ 1;
            if (v36 >= v34)
            {
              __break(0xC471u);
              JUMPOUT(0x19806D610);
            }
            if ((_DWORD)v34 == 2)
            {
              v37 = (_BYTE *)(v35 + 32 * v36);
              if (v37[8] == 9 && *(_BYTE *)(*(_QWORD *)v37 + 4) == 1)
              {
LABEL_17:
                if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
                {
                  v20 = *(_QWORD *)(v19 + 40);
                  v21 = *(unsigned int *)v7;
                  v23 = *(_QWORD *)(v20 + 16);
                  v22 = v20 + 16;
                  v24 = 2 * v23 + 8;
                  if (v23 >= 0)
                    v22 = v24;
                  if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0x1FFFFFF8)) >> v21) & 1) != 0)
                    return result;
                }
                else
                {
                  v21 = *(unsigned int *)v7;
                }
                if ((int)v21 < 1)
                {
                  v21 = -(int)v21;
                  if (v21 >= *(unsigned int *)(v19 + 36))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806D618);
                  }
                  v25 = (_QWORD *)(v19 + 24);
                }
                else
                {
                  if (v21 >= *(_DWORD *)(v19 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19806D600);
                  }
                  v25 = (_QWORD *)(v19 + 8);
                }
                v26 = (unsigned __int8 *)(*v25 + 2 * v21);
                v27 = *v26;
                v28 = v26[1];
                if (v27 > v28)
                  v28 = v27;
                if (a3 - 4 <= 6 && v28 > a5)
                  return result;
                v29 = *(_BYTE **)(v8 + 24);
                if (v28 == 2)
                {
                  v30 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  if (*v29)
                  {
LABEL_45:
                    v31 = 4;
LABEL_32:
                    if (*v30 > v31)
                      v31 = *v30;
                    *v30 = v31;
                    *(_BYTE *)(a2 + 24) = 0;
                    *v7 = 0;
                    *(_QWORD *)a2 = v30;
                    *(_WORD *)(a2 + 8) = 521;
                    *(_DWORD *)(a2 + 12) = 0;
                    **(_BYTE **)(v8 + 32) = 1;
                    if ((result & 1) == 0)
                      **(_BYTE **)(v8 + 40) = 1;
                    return result;
                  }
                }
                else
                {
                  *v29 = 0;
                  v30 = *(unsigned int **)(v9 + 16 * v15 + 8);
                }
                if (a5 != 3)
                {
                  v31 = 1;
                  switch(a5)
                  {
                    case 0u:
                      goto LABEL_32;
                    case 1u:
                      v31 = 2;
                      goto LABEL_32;
                    case 2u:
                      goto LABEL_45;
                    case 4u:
                      v31 = 16;
                      goto LABEL_32;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x19806D5F0);
                  }
                }
                v31 = 8;
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  unsigned int *v10;
  uint64_t **v11;

  v9 = **(uint64_t ****)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v10 = (unsigned int *)(a2 + 16);
      v11 = **(uint64_t ****)(a1 + 16);
      goto LABEL_3;
    case 6:
    case 7:
    case 8:
      v10 = (unsigned int *)(a2 + 16);
      goto LABEL_5;
    case 0xB:
      v10 = (unsigned int *)(a2 + 20);
LABEL_5:
      v11 = v9;
      a3 = 0;
      goto LABEL_6;
    case 0xC:
    case 0xD:
      v10 = (unsigned int *)(a2 + 16);
      v11 = **(uint64_t ****)(a1 + 16);
      a3 = 6;
LABEL_6:
      a4 = 0;
LABEL_3:
      break;
    default:
      return;
  }
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  _BYTE v58[12];
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];

  if (!(_DWORD)a4)
  {
    v9 = *a2;
    if (v9 <= 0xFFFFFFDF && (v9 - 1) >= 0x20)
    {
      v11 = **a1;
      if (!v11)
        goto LABEL_12;
      v12 = a3;
      v13 = *(_DWORD *)(v11 - 8);
      v14 = 9 * ((v9 + ~((_DWORD)v9 << 15)) ^ ((v9 + ~((_DWORD)v9 << 15)) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = v13 & (v15 ^ HIWORD(v15));
      v17 = *(_DWORD *)(v11 + 16 * v16);
      if (v17 != (_DWORD)v9)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v13;
          v17 = *(_DWORD *)(v11 + 16 * v16);
          ++v18;
          if (v17 == (_DWORD)v9)
            goto LABEL_11;
        }
        v16 = *(unsigned int *)(v11 - 4);
      }
LABEL_11:
      if (v16 != *(_DWORD *)(v11 - 4))
      {
        v23 = a1[3];
        if ((int)v9 < 1)
        {
          v9 = -(int)v9;
          if (v9 >= *((unsigned int *)v23 + 9))
          {
            __break(0xC471u);
            JUMPOUT(0x19806DB30);
          }
          v24 = v23 + 3;
        }
        else
        {
          if (v9 >= *((_DWORD *)v23 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x19806DB38);
          }
          v24 = v23 + 1;
        }
        v25 = (unsigned __int8 *)(*v24 + 2 * v9);
        v26 = *v25;
        v27 = v25[1];
        if (v26 > v27)
          v27 = v26;
        v28 = v27 >= 3;
        if (v27 == 3)
          v29 = 8;
        else
          v29 = 16;
        if (!v28)
          v29 = 4;
        if (v29 == 8)
        {
          v30 = 90;
        }
        else if (v29 == 4)
        {
          v30 = 94;
        }
        else
        {
          v30 = 113;
        }
        v31 = *v23;
        v32 = *(_DWORD *)(*v23 + 176);
        *(_DWORD *)(v31 + 176) = v32 + 1;
        v33 = (v32 + 33);
        *a2 = v33;
        v34 = a1[4];
        v35 = *v34;
        if (*v34 < 0)
          v36 = 63;
        else
          v36 = *(_QWORD *)(2 * v35);
        if (v36 <= v33)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1[4], v33 + 1, 0);
          v35 = *v34;
        }
        if (v35 >= 0)
          v37 = 2 * v35 + 8;
        else
          v37 = (uint64_t)v34;
        *(_QWORD *)(v37 + ((v33 >> 3) & 0x1FFFFFF8)) |= 1 << v33;
        if (v12 != 10)
        {
          v38 = *(_QWORD *)(v11 + 16 * v16 + 8);
          if (v12 > 0xB || ((1 << v12) & 0xB30) == 0)
          {
            v39 = (uint64_t)a1[5];
            v40 = *(unsigned int *)a1[6];
            v41 = *a2;
            *(_QWORD *)v55 = *(_QWORD *)(v11 + 16 * v16 + 8);
            *(_WORD *)&v55[8] = 521;
            *(_QWORD *)&v55[12] = 0;
            *(_QWORD *)&v55[17] = 0;
            *(_QWORD *)&v56 = 0;
            WORD4(v56) = 513;
            HIDWORD(v56) = 1;
            *(_QWORD *)&v57 = v41;
            BYTE8(v57) = 0;
            v62 = *(_OWORD *)v55;
            v63 = *(_OWORD *)&v55[16];
            v64 = v56;
            *(_QWORD *)v58 = a1[7][14];
            *(_DWORD *)&v58[8] = v30;
            v59 = v40;
            v60 = (WTF *)&v62;
            v65 = v57;
            v61 = 0x200000003;
            v66[0] = *(_QWORD *)v58;
            *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v39, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
            v43 = v60;
            if (&v62 != (__int128 *)v60)
            {
              if (v60)
              {
                v60 = 0;
                LODWORD(v61) = 0;
                WTF::fastFree((unint64_t)v43, v42, a3, a4, a5, a6, a7, a8);
              }
            }
          }
          if (v12 - 4 <= 6)
          {
            v44 = (uint64_t)a1[5];
            v45 = *(_DWORD *)a1[6];
            v46 = *a2;
            *(_QWORD *)&v57 = 0;
            BYTE8(v57) = 0;
            *(_QWORD *)v55 = 0;
            *(_WORD *)&v55[8] = 513;
            *(_DWORD *)&v55[12] = 1;
            *(_QWORD *)&v55[16] = v46;
            v55[24] = 0;
            *(_QWORD *)&v56 = v38;
            WORD4(v56) = 521;
            HIDWORD(v56) = 0;
            v62 = *(_OWORD *)v55;
            v63 = *(_OWORD *)&v55[16];
            v64 = v56;
            *(_QWORD *)v58 = a1[7][14];
            *(_DWORD *)&v58[8] = v30;
            v59 = (v45 + 1);
            v60 = (WTF *)&v62;
            v65 = v57;
            v61 = 0x200000003;
            v66[0] = *(_QWORD *)v58;
            *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v44, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
            v54 = v60;
            if (&v62 != (__int128 *)v60)
            {
              if (v60)
              {
                v60 = 0;
                LODWORD(v61) = 0;
                WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
              }
            }
          }
        }
      }
      else
      {
LABEL_12:
        v19 = a1[1];
        if (*((_DWORD *)v19 + 59))
        {
          v20 = (unsigned __int16)*a2;
          v21 = v19[28];
          do
          {
            v22 = v20;
            v20 = *(unsigned __int16 *)(v21 + 2 * v20);
          }
          while ((_DWORD)v20);
          if ((_DWORD)v9 != v22)
          {
            *a2 = v22;
            *(_BYTE *)a1[2] = 1;
          }
        }
      }
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::~AbstractColoringAllocator(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t StatusReg;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  unint64_t *v37;

  v9 = *(_QWORD *)(a1 + 264);
  if (a1 + 280 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 224);
  if (v11)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 208);
  if ((v12 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v12, (void *)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 192);
  if (v13)
  {
    *(_QWORD *)(a1 + 192) = 0;
    *(_DWORD *)(a1 + 200) = 0;
    WTF::fastFree(v13, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 176);
  if (v14)
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    WTF::fastFree(v14, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 168);
  if ((v15 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v15, (void *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 152);
  if (v16)
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    WTF::fastFree(v16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(_QWORD *)(a1 + 136);
  if (v17)
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    WTF::fastFree(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *(_QWORD *)(a1 + 120);
  if (v18)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *(unsigned int *)(a1 + 116);
  v20 = *(_QWORD *)(a1 + 104);
  if (!(_DWORD)v19)
  {
    if (!v20)
      goto LABEL_24;
    goto LABEL_67;
  }
  v36 = 40 * v19;
  v37 = (unint64_t *)(v20 + 8);
  do
  {
    if (*((_DWORD *)v37 - 1) != 8)
      WTF::fastFree(*v37, (void *)a2, a3, a4, a5, a6, a7, a8);
    v37 += 5;
    v36 -= 40;
  }
  while (v36);
  v20 = *(_QWORD *)(a1 + 104);
  if (v20)
  {
LABEL_67:
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_24:
  v21 = *(_QWORD *)(a1 + 88);
  if (v21)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v21, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *(_QWORD *)(a1 + 80);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (unint64_t *)(v22 + 16);
      do
      {
        if (*((__int16 *)v24 - 8) != -2 && *((_DWORD *)v24 - 1) != 8)
          WTF::fastFree(*v24, (void *)a2, a3, a4, a5, a6, a7, a8);
        v24 += 4;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree(v22 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)(a1 + 64);
  if (v25)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v25, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *(unsigned int *)(a1 + 60);
  v27 = *(_QWORD *)(a1 + 48);
  if ((_DWORD)v26)
  {
    v28 = 16 * v26;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      a2 = *(_QWORD *)v27;
      if (*(_QWORD *)v27)
      {
        *(_QWORD *)v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
        v30 = *(_QWORD *)(StatusReg + 752);
        if (v30)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
          {
LABEL_42:
            v31 = *(unsigned int *)(v30 + 8000);
            if (v31 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v30, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v30 + 8 * v31) = a2 | 0x5000000000000;
              *(_DWORD *)(v30 + 8000) = v31 + 1;
            }
            goto LABEL_44;
          }
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_42;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v30, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_44:
      v27 += 16;
      v28 -= 16;
      if (!v28)
      {
        v27 = *(_QWORD *)(a1 + 48);
        break;
      }
    }
  }
  if (v27)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v27, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v32)
    WTF::VectorTypeOperations<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>>::destruct(*(uint64_t **)(a1 + 24), *(_QWORD *)(a1 + 24) + 16 * v32, a3, a4, a5, a6, a7, a8);
  v33 = *(_QWORD *)(a1 + 24);
  if (v33)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v33, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v34, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD **v25;
  int v26;
  _QWORD *v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int *v51;
  int *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _WORD *v63;
  unsigned int v64;
  unsigned int v65;
  _WORD *v66;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int16 v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _WORD *v81;
  _WORD *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned __int16 *v96;
  int v97;
  unsigned __int16 *v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  BOOL v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int v120;
  _BOOL8 v121;
  _BOOL4 v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int v128;
  _BOOL8 v129;
  _BOOL4 v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD **v133;
  uint64_t v134;
  uint64_t *v135;
  int *v136;
  int *v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _WORD *v148;
  unsigned int v149;
  unsigned int v150;
  _WORD *v151;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned __int16 v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _WORD *v167;
  _WORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned __int16 *v184;
  int v185;
  unsigned __int16 *v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  unsigned int v210;
  int v211;
  _QWORD v213[3];
  _QWORD **v214;
  _QWORD **v215;
  _QWORD *v216;
  uint64_t *v217;
  uint64_t **v218;
  void *v219;
  void **v220;
  uint64_t ***v221;

  v214 = a3;
  v215 = a2;
  v213[0] = &v215;
  v213[1] = &v214;
  v213[2] = a1;
  v216 = v213;
  if (a2)
  {
    v217 = (uint64_t *)&v216;
    v218 = &v217;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v219 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v220 = &v219;
      v221 = &v218;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v219);
    }
    else
    {
      v11 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a2 + 60)
            + ((unint64_t)((v11 - 1) * v11) >> 1);
        v14 = 1;
        do
        {
          if (v12 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19806EFACLL);
          }
          v15 = v13[v12];
          if ((v15 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19806EF18);
          }
          v16 = (char *)&(*a2)[v14];
          v17 = *v16;
          v18 = *((_DWORD *)v16 + 2);
          if (v17 == 1)
          {
            if ((v15 & 0xC) == 4)
            {
              v208 = (v15 >> 4) & 1;
              v207 = *v217;
              LODWORD(v219) = v18;
              goto LABEL_14;
            }
          }
          else if ((v17 - 12) < 2)
          {
            v207 = *v217;
            LODWORD(v219) = v18;
            v208 = 0;
LABEL_14:
          }
          ++v12;
          v14 += 4;
        }
        while (v11 != v12);
      }
    }
  }
  if (a3)
  {
    v217 = (uint64_t *)&v216;
    v218 = &v217;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v219 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v220 = &v219;
      v221 = &v218;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v219);
    }
    else
    {
      v19 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 1;
        do
        {
          if (v20 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19806EFA4);
          }
          v23 = v21[v20];
          if ((v23 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19806EEF8);
          }
          v24 = &(*a3)[v22];
          if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
          {
            v166 = *v217;
            LODWORD(v219) = *((_DWORD *)v24 + 2);
          }
          ++v20;
          v22 += 4;
        }
        while (v19 != v20);
      }
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19806EFBCLL);
    }
    v116 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v118 = v117 | v116;
    if (v117 | v116)
    {
      v119 = v116;
      do
      {
        v120 = __clz(__rbit64(v118));
        v121 = ((v119 >> v120) & 1) == 0;
        v122 = v120 > 0x1F;
        if (v120 <= 0x1F)
          v123 = v120 + 1;
        else
          v123 = (char)(31 - v120);
        LODWORD(v219) = v123;
        v118 &= v118 - 1;
      }
      while (v118);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19806EFC4);
    }
    v124 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v126 = v125 | v124;
    if (v125 | v124)
    {
      v127 = v124;
      do
      {
        v128 = __clz(__rbit64(v126));
        v129 = ((v127 >> v128) & 1) == 0;
        v130 = v128 > 0x1F;
        if (v128 <= 0x1F)
          v131 = v128 + 1;
        else
          v131 = (char)(31 - v128);
        LODWORD(v219) = v131;
        v126 &= v126 - 1;
      }
      while (v126);
    }
  }
  v25 = v215;
  if (!v215)
    goto LABEL_212;
  v26 = *((__int16 *)v215 + 60);
  if ((v26 | 4) != 0x5E)
    goto LABEL_212;
  if (*((_DWORD *)v215 + 3) != 2)
    goto LABEL_212;
  v27 = *v215;
  if (*((_BYTE *)*v215 + 8) != 1 || *((_BYTE *)v27 + 40) != 1)
    goto LABEL_212;
  if (v26 == 94)
  {
    v169 = *(_QWORD *)(a1 + 336);
    if (!v169)
      goto LABEL_212;
    v170 = *((unsigned int *)v27 + 4);
    if ((int)v170 < 1)
    {
      v170 = -(int)v170;
      if (v170 >= *(unsigned int *)(v169 + 28))
      {
LABEL_315:
        __break(0xC471u);
        JUMPOUT(0x19806EE84);
      }
      v169 += 16;
    }
    else if (v170 >= *(_DWORD *)(v169 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x19806EFD4);
    }
    if (*(unsigned __int8 *)(*(_QWORD *)v169 + 2 * v170 + 1) > 2u)
    {
LABEL_212:
      v133 = v214;
      v134 = *(_QWORD *)a4;
      v135 = (uint64_t *)a1;
      goto LABEL_213;
    }
  }
  v28 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v215 + 60);
  v29 = v28[1];
  if ((v29 >> 5) - 1 >= 5 || (v30 = v28[2], (v30 >> 5) - 1 > 4))
  {
    __break(0xC471u);
    JUMPOUT(0x19806EF84);
  }
  v31 = v29 & 0xC;
  v32 = *((_DWORD *)v27 + 4);
  v33 = v31 == 4;
  if (v31 == 4)
    v34 = 0;
  else
    v34 = *((_DWORD *)v27 + 4);
  if (!v33)
    LOWORD(v32) = 0;
  v35 = *((_DWORD *)v27 + 12);
  v36 = v30 & 0xC;
  if (v36 == 4)
    v37 = v34;
  else
    v37 = v35;
  if (v36 == 4)
    v38 = v35;
  else
    v38 = v32;
  v39 = (_QWORD *)(a1 + 88);
  LOWORD(v219) = v37;
  WORD1(v219) = v38;
  v40 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v40 == *(_DWORD *)(a1 + 96))
  else
    *(_DWORD *)(*v39 + 4 * v40) = (_DWORD)v219;
  ++*(_DWORD *)(a1 + 100);
  v41 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)(a1 + 296) = v41 + 1;
  LODWORD(v219) = v41;
  v42 = (_QWORD *)(a1 + 304);
  v43 = *(unsigned int *)(a1 + 316);
  v211 = v37;
  if ((_DWORD)v43 == *(_DWORD *)(a1 + 312))
    *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(a1 + 316)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v219);
  else
    *(_DWORD *)(*v42 + 4 * v43) = v41;
  ++*(_DWORD *)(a1 + 316);
  v44 = *((unsigned int *)v215 + 3);
  if ((_DWORD)v44)
  {
    v45 = 32 * v44;
    v46 = (unsigned int *)(*v215 + 2);
    do
    {
      v48 = *v46;
      v46 += 8;
      v47 = v48;
      if (*(_DWORD *)(a1 + 116) <= v48)
      {
        __break(0xC471u);
        JUMPOUT(0x19806EFB4);
      }
      WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v219, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v47), v40);
      v45 -= 32;
    }
    while (v45);
  }
  v49 = *(unsigned int *)(*(_QWORD *)a4 + 60);
  v50 = v211;
  if ((_DWORD)v49)
  {
    v51 = *(int **)(*(_QWORD *)a4 + 48);
    v52 = &v51[v49];
    while (1)
    {
      v53 = *v51;
      if (v50 != *v51 && v38 != (unsigned __int16)v53)
        break;
LABEL_83:
      if (++v51 == v52)
        goto LABEL_168;
    }
    v54 = (unsigned __int16)*v51;
    LOWORD(v218) = v38;
    LOWORD(v217) = v53;
    if ((unsigned __int16)v53 >= v38)
      v55 = v38;
    else
      v55 = v54;
    if (v54 <= v38)
      v56 = v38;
    else
      v56 = v54;
    if (*(_DWORD *)(a1 + 36) <= v55)
    {
      __break(0xC471u);
      JUMPOUT(0x19806EF9CLL);
    }
    v57 = *(_QWORD *)(a1 + 24);
    v58 = v57 + 16 * v55;
    LOWORD(v213[0]) = v56;
    v60 = (_DWORD *)(v58 + 8);
    v59 = *(_DWORD *)(v58 + 8);
    if (v59 != -1)
    {
      if (v59)
      {
        v61 = v57 + 16 * v55;
        v64 = *(unsigned __int16 *)(v61 + 12);
        v63 = (_WORD *)(v61 + 12);
        v62 = v64;
        v66 = v63 + 1;
        v65 = (unsigned __int16)v63[1];
        if (v64 <= v56 && v65 >= v56)
        {
          v68 = v56 - v62;
          if (*(uint64_t *)v58 >= 0)
            v69 = 2 * *(_QWORD *)v58 + 8;
          else
            v69 = v58;
          v70 = (v68 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v71 = 1 << v68;
          v72 = *(_QWORD *)(v69 + v70);
          *(_QWORD *)(v69 + v70) = v72 | v71;
          v73 = v72 & v71;
          if (!v73)
            ++v59;
          *v60 = v59;
          v74 = *(_DWORD *)(a1 + 40);
          if (!v73)
            ++v74;
          *(_DWORD *)(a1 + 40) = v74;
          if (v73)
            goto LABEL_83;
          v75 = v38;
          goto LABEL_86;
        }
        *v60 = v59 + 1;
        if (((unsigned __int16)v56 & 0xFFC0u) >= v62)
          v83 = v62;
        else
          v83 = (unsigned __int16)v56 & 0xFFC0;
        if (v65 <= v56)
          v84 = v56;
        else
          v84 = v65;
        v85 = v84 - v83;
        if (v84 < (int)v83)
          v85 = v84 - v83 + 7;
        if ((v59 + 1) > 8)
          v86 = v59 + 1;
        else
          v86 = 8;
        if (12 * v86 < (v85 >> 3))
        {
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v58);
          WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v219, (uint64_t *)v58, v213);
          *v63 = v83;
          *v66 = v84;
          v50 = v211;
        }
        else
        {
          if (v62 > v56)
          {
            v199 = (int)v62 - (int)v83;
            if ((v199 & 0x3F) != 0)
              goto LABEL_315;
            if ((*(_QWORD *)v58 & 0x8000000000000000) != 0)
              v200 = 63;
            else
              v200 = *(_QWORD *)(2 * *(_QWORD *)v58);
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v58, v200 + v199, v199 >> 6);
            *v63 = v83;
            v62 = v83;
          }
          v87 = *(_QWORD *)v58;
          v50 = v211;
          if ((*(_QWORD *)v58 & 0x8000000000000000) != 0)
            v88 = 63;
          else
            v88 = *(_QWORD *)(2 * v87);
          v89 = v56 - v62;
          v25 = (_QWORD **)(v56 - v62 + 1);
          if (v88 < (unint64_t)v25)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v58, (unint64_t)v25, 0);
            v87 = *(_QWORD *)v58;
          }
          v90 = 2 * v87 + 8;
          if (v87 < 0)
            v90 = v58;
          *(_QWORD *)(v90 + ((v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v89;
          *v66 = v84;
        }
      }
      else
      {
        v114 = v57 + 16 * v55;
        *(_WORD *)(v114 + 12) = v56 & 0xFFC0;
        *(_WORD *)(v114 + 14) = v56;
        *v60 = 1;
        v209 = *(_QWORD *)v58;
        if ((*(_QWORD *)v58 & 0x8000000000000000) != 0)
          v115 = 63;
        else
          v115 = *(_QWORD *)(2 * v209);
        v112 = v56 - ((unsigned __int16)v56 & 0xFFC0);
        v25 = (_QWORD **)(v112 + 1);
        if (v115 < v112 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v58, (unint64_t)v25, 0);
          v209 = *(_QWORD *)v58;
        }
        if (v209 >= 0)
          v113 = 2 * v209 + 8;
        else
          v113 = v58;
        *(_QWORD *)(v113 + ((v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
      }
LABEL_116:
      ++*(_DWORD *)(a1 + 40);
      v75 = (unsigned __int16)v218;
LABEL_86:
      v76 = *(unsigned __int16 *)(a1 + 16);
      if (v76 < v75)
      {
        v77 = *(_QWORD *)(a1 + 48) + 16 * v75;
        v78 = *(unsigned int *)(v77 + 12);
        if ((_DWORD)v78 == *(_DWORD *)(v77 + 8))
        {
          v81 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v75, v78 + 1, (unint64_t)&v217);
          v78 = *(unsigned int *)(v77 + 12);
          *(_WORD *)(*(_QWORD *)v77 + 2 * v78) = *v81;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v77 + 2 * v78) = (_WORD)v217;
        }
        *(_DWORD *)(v77 + 12) = v78 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * v75);
        v76 = *(unsigned __int16 *)(a1 + 16);
      }
      if (v76 < (unsigned __int16)v217)
      {
        v79 = *(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v217;
        v80 = *(unsigned int *)(v79 + 12);
        if ((_DWORD)v80 == *(_DWORD *)(v79 + 8))
        {
          v82 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v217, v80 + 1, (unint64_t)&v218);
          v80 = *(unsigned int *)(v79 + 12);
          *(_WORD *)(*(_QWORD *)v79 + 2 * v80) = *v82;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v79 + 2 * v80) = v75;
        }
        *(_DWORD *)(v79 + 12) = v80 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v217);
      }
      goto LABEL_83;
    }
    v91 = *(_QWORD *)v58;
    if (*(_QWORD *)v58
      || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v57 + 16 * v55), 0), (v91 = *(_QWORD *)v58) != 0))
    {
      v92 = *(_DWORD *)(v91 - 8);
    }
    else
    {
      v92 = 0;
    }
    v93 = 9 * ((~((_DWORD)v56 << 15) + v56) ^ ((~((_DWORD)v56 << 15) + v56) >> 10));
    v94 = (v93 ^ (v93 >> 6)) + ~((v93 ^ (v93 >> 6)) << 11);
    v95 = v92 & (v94 ^ HIWORD(v94));
    v96 = (unsigned __int16 *)(v91 + 2 * v95);
    v97 = *v96;
    if (v97 != 0xFFFF)
    {
      v98 = 0;
      v99 = 1;
      while ((_DWORD)v56 != (unsigned __int16)v97)
      {
        if ((unsigned __int16)v97 == 65534)
          v98 = v96;
        v95 = (v95 + v99) & v92;
        v96 = (unsigned __int16 *)(v91 + 2 * v95);
        v97 = *v96;
        ++v99;
        if (v97 == 0xFFFF)
        {
          if (v98)
          {
            *v98 = -1;
            --*(_DWORD *)(*(_QWORD *)v58 - 16);
            LOWORD(v56) = v213[0];
            v96 = v98;
          }
          goto LABEL_127;
        }
      }
      goto LABEL_83;
    }
LABEL_127:
    *v96 = v56;
    v100 = *(_QWORD *)v58;
    if (*(_QWORD *)v58)
      v101 = *(_DWORD *)(v100 - 12) + 1;
    else
      v101 = 1;
    *(_DWORD *)(v100 - 12) = v101;
    v102 = *(_QWORD *)v58;
    if (*(_QWORD *)v58)
      v103 = *(_DWORD *)(v102 - 12);
    else
      v103 = 0;
    v104 = (*(_DWORD *)(v102 - 16) + v103);
    v105 = *(unsigned int *)(v102 - 4);
    if (v105 > 0x400)
    {
      if (v105 > 2 * v104)
        goto LABEL_133;
    }
    else
    {
      if (3 * v105 > 4 * v104)
      {
LABEL_133:
        v106 = LOWORD(v213[0]);
        v107 = v213[0] & 0xFFC0;
        v108 = v57 + 16 * v55;
        if (v107 >= *(unsigned __int16 *)(v108 + 12))
          v107 = *(unsigned __int16 *)(v108 + 12);
        *(_WORD *)(v108 + 12) = v107;
        if (*(unsigned __int16 *)(v108 + 14) > v106)
          v106 = *(unsigned __int16 *)(v108 + 14);
        *(_WORD *)(v108 + 14) = v106;
        if (v102)
        {
          v109 = *(_DWORD *)(v102 - 4);
          v110 = __OFSUB__(v106, v107);
          v111 = v106 - v107;
          if (v111 < 0 != v110)
            v111 += 7;
          if (2 * (v111 >> 3) < (2 * v109))
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v57 + 16 * v55), (uint64_t)v25, (uint64_t)v96, a4, a5, a6, a7, a8);
        }
        goto LABEL_116;
      }
      if (!(_DWORD)v105)
      {
        v201 = 8;
LABEL_275:
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v57 + 16 * v55), v201, v96);
        v102 = *(_QWORD *)v58;
        goto LABEL_133;
      }
    }
    v201 = (_DWORD)v105 << (6 * *(_DWORD *)(v102 - 12) >= (2 * v105));
    goto LABEL_275;
  }
LABEL_168:
  v132 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v132)
  {
    v136 = *(int **)(a1 + 264);
    v137 = &v136[v132];
    while (1)
    {
      v138 = *v136;
      if (v50 != *v136 && v38 != (unsigned __int16)v138)
        break;
LABEL_195:
      if (++v136 == v137)
        goto LABEL_169;
    }
    v139 = (unsigned __int16)*v136;
    LOWORD(v218) = v38;
    LOWORD(v217) = v138;
    if ((unsigned __int16)v138 >= v38)
      v140 = v38;
    else
      v140 = v139;
    if (v139 <= v38)
      v141 = v38;
    else
      v141 = v139;
    if (*(_DWORD *)(a1 + 36) <= v140)
    {
      __break(0xC471u);
      JUMPOUT(0x19806EFCCLL);
    }
    v142 = *(_QWORD *)(a1 + 24);
    v143 = v142 + 16 * v140;
    LOWORD(v213[0]) = v141;
    v145 = (_DWORD *)(v143 + 8);
    v144 = *(_DWORD *)(v143 + 8);
    if (v144 != -1)
    {
      if (v144)
      {
        v146 = v142 + 16 * v140;
        v149 = *(unsigned __int16 *)(v146 + 12);
        v148 = (_WORD *)(v146 + 12);
        v147 = v149;
        v151 = v148 + 1;
        v150 = (unsigned __int16)v148[1];
        if (v149 <= v141 && v150 >= v141)
        {
          v153 = v141 - v147;
          if (*(uint64_t *)v143 >= 0)
            v154 = 2 * *(_QWORD *)v143 + 8;
          else
            v154 = v143;
          v155 = (v153 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v156 = 1 << v153;
          v157 = *(_QWORD *)(v154 + v155);
          *(_QWORD *)(v154 + v155) = v157 | v156;
          v158 = v157 & v156;
          if (!v158)
            ++v144;
          *v145 = v144;
          v159 = *(_DWORD *)(a1 + 40);
          if (!v158)
            ++v159;
          *(_DWORD *)(a1 + 40) = v159;
          v50 = v211;
          if (v158)
            goto LABEL_195;
          v160 = v38;
          goto LABEL_198;
        }
        *v145 = v144 + 1;
        if (((unsigned __int16)v141 & 0xFFC0u) >= v147)
          v171 = v147;
        else
          v171 = (unsigned __int16)v141 & 0xFFC0;
        if (v150 <= v141)
          v172 = v141;
        else
          v172 = v150;
        v173 = v172 - v171;
        if (v172 < (int)v171)
          v173 = v172 - v171 + 7;
        if ((v144 + 1) > 8)
          v174 = v144 + 1;
        else
          v174 = 8;
        if (12 * v174 < (v173 >> 3))
        {
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v143);
          WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v219, (uint64_t *)v143, v213);
          *v148 = v171;
          *v151 = v172;
          v50 = v211;
        }
        else
        {
          if (v147 > v141)
          {
            WTF::BitVector::shiftRightByMultipleOf64((WTF::BitVector *)v143, (int)v147 - (int)v171);
            *v148 = v171;
            v147 = v171;
          }
          v175 = *(_QWORD *)v143;
          if ((*(_QWORD *)v143 & 0x8000000000000000) != 0)
            v176 = 63;
          else
            v176 = *(_QWORD *)(2 * v175);
          v177 = v141 - v147;
          v25 = (_QWORD **)(v141 - v147 + 1);
          if (v176 < (unint64_t)v25)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v143, (unint64_t)v25, 0);
            v175 = *(_QWORD *)v143;
          }
          v178 = 2 * v175 + 8;
          if (v175 < 0)
            v178 = v143;
          *(_QWORD *)(v178 + ((v177 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v177;
          *v151 = v172;
          v50 = v211;
        }
      }
      else
      {
        v202 = v142 + 16 * v140;
        *(_WORD *)(v202 + 12) = v141 & 0xFFC0;
        *(_WORD *)(v202 + 14) = v141;
        *v145 = 1;
        v203 = *(_QWORD *)v143;
        if ((*(_QWORD *)v143 & 0x8000000000000000) != 0)
          v204 = 63;
        else
          v204 = *(_QWORD *)(2 * v203);
        v205 = v141 - ((unsigned __int16)v141 & 0xFFC0);
        v25 = (_QWORD **)(v205 + 1);
        if (v204 < v205 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v143, (unint64_t)v25, 0);
          v203 = *(_QWORD *)v143;
        }
        if (v203 >= 0)
          v206 = 2 * v203 + 8;
        else
          v206 = v143;
        *(_QWORD *)(v206 + ((v205 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v141;
      }
LABEL_236:
      ++*(_DWORD *)(a1 + 40);
      v160 = (unsigned __int16)v218;
LABEL_198:
      v161 = *(unsigned __int16 *)(a1 + 16);
      if (v161 < v160)
      {
        v162 = *(_QWORD *)(a1 + 48) + 16 * v160;
        v163 = *(unsigned int *)(v162 + 12);
        if ((_DWORD)v163 == *(_DWORD *)(v162 + 8))
        {
          v167 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * v160, v163 + 1, (unint64_t)&v217);
          v163 = *(unsigned int *)(v162 + 12);
          *(_WORD *)(*(_QWORD *)v162 + 2 * v163) = *v167;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v162 + 2 * v163) = (_WORD)v217;
        }
        *(_DWORD *)(v162 + 12) = v163 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * v160);
        v161 = *(unsigned __int16 *)(a1 + 16);
      }
      if (v161 < (unsigned __int16)v217)
      {
        v164 = *(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v217;
        v165 = *(unsigned int *)(v164 + 12);
        if ((_DWORD)v165 == *(_DWORD *)(v164 + 8))
        {
          v168 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 48) + 16 * (unsigned __int16)v217, v165 + 1, (unint64_t)&v218);
          v165 = *(unsigned int *)(v164 + 12);
          *(_WORD *)(*(_QWORD *)v164 + 2 * v165) = *v168;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v164 + 2 * v165) = v160;
        }
        *(_DWORD *)(v164 + 12) = v165 + 1;
        ++*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v217);
      }
      goto LABEL_195;
    }
    v179 = *(_QWORD *)v143;
    if (*(_QWORD *)v143
      || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v142 + 16 * v140), 0), (v179 = *(_QWORD *)v143) != 0))
    {
      v180 = *(_DWORD *)(v179 - 8);
    }
    else
    {
      v180 = 0;
    }
    v181 = 9 * ((~((_DWORD)v141 << 15) + v141) ^ ((~((_DWORD)v141 << 15) + v141) >> 10));
    v182 = (v181 ^ (v181 >> 6)) + ~((v181 ^ (v181 >> 6)) << 11);
    v183 = v180 & (v182 ^ HIWORD(v182));
    v184 = (unsigned __int16 *)(v179 + 2 * v183);
    v185 = *v184;
    if (v185 != 0xFFFF)
    {
      v186 = 0;
      v187 = 1;
      while ((_DWORD)v141 != (unsigned __int16)v185)
      {
        if ((unsigned __int16)v185 == 65534)
          v186 = v184;
        v183 = (v183 + v187) & v180;
        v184 = (unsigned __int16 *)(v179 + 2 * v183);
        v185 = *v184;
        ++v187;
        if (v185 == 0xFFFF)
        {
          if (v186)
          {
            *v186 = -1;
            --*(_DWORD *)(*(_QWORD *)v143 - 16);
            LOWORD(v141) = v213[0];
            v184 = v186;
          }
          goto LABEL_247;
        }
      }
      goto LABEL_195;
    }
LABEL_247:
    *v184 = v141;
    v188 = *(_QWORD *)v143;
    if (*(_QWORD *)v143)
      v189 = *(_DWORD *)(v188 - 12) + 1;
    else
      v189 = 1;
    *(_DWORD *)(v188 - 12) = v189;
    v190 = *(_QWORD *)v143;
    if (*(_QWORD *)v143)
      v191 = *(_DWORD *)(v190 - 12);
    else
      v191 = 0;
    v192 = (*(_DWORD *)(v190 - 16) + v191);
    v193 = *(unsigned int *)(v190 - 4);
    if (v193 > 0x400)
    {
      if (v193 > 2 * v192)
        goto LABEL_253;
    }
    else
    {
      if (3 * v193 > 4 * v192)
      {
LABEL_253:
        v194 = LOWORD(v213[0]);
        v195 = v213[0] & 0xFFC0;
        v196 = v142 + 16 * v140;
        if (v195 >= *(unsigned __int16 *)(v196 + 12))
          v195 = *(unsigned __int16 *)(v196 + 12);
        *(_WORD *)(v196 + 12) = v195;
        if (*(unsigned __int16 *)(v196 + 14) > v194)
          v194 = *(unsigned __int16 *)(v196 + 14);
        *(_WORD *)(v196 + 14) = v194;
        if (v190)
        {
          v197 = *(_DWORD *)(v190 - 4);
          v110 = __OFSUB__(v194, v195);
          v198 = v194 - v195;
          if (v198 < 0 != v110)
            v198 += 7;
          if (2 * (v198 >> 3) < (2 * v197))
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v142 + 16 * v140), (uint64_t)v25, (uint64_t)v184, a4, a5, a6, a7, a8);
        }
        goto LABEL_236;
      }
      if (!(_DWORD)v193)
      {
        v210 = 8;
LABEL_294:
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v142 + 16 * v140), v210, v184);
        v190 = *(_QWORD *)v143;
        goto LABEL_253;
      }
    }
    v210 = (_DWORD)v193 << (6 * *(_DWORD *)(v190 - 12) >= (2 * v193));
    goto LABEL_294;
  }
LABEL_169:
  v133 = v214;
  v134 = *(_QWORD *)a4;
  v135 = (uint64_t *)a1;
  v25 = 0;
LABEL_213:
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(uint64_t *a1, _QWORD **a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  _BOOL8 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  _BOOL8 v45;
  _BOOL4 v46;
  unsigned int v47;
  uint64_t **v48;
  uint64_t **v49;
  int v50;
  uint64_t *v51[2];
  uint64_t v52;
  uint64_t **v53;
  uint64_t ***v54;
  uint64_t ****v55;
  void *v56;
  void **v57;
  uint64_t *****v58;

  v51[1] = a1;
  v52 = a4;
  v51[0] = &v52;
  v53 = v51;
  if (a2)
  {
    v54 = &v53;
    v55 = &v54;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v56 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v57 = &v56;
      v58 = &v55;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v56);
    }
    else
    {
      v10 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a2 + 60)
            + ((unint64_t)((v10 - 1) * v10) >> 1);
        v13 = 1;
        do
        {
          if (v11 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19806F398);
          }
          v14 = v12[v11];
          if ((v14 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19806F388);
          }
          v15 = (char *)&(*a2)[v13];
          v16 = *v15;
          v17 = *((_DWORD *)v15 + 2);
          if (v16 == 1)
          {
            if ((v14 & 0xC) == 4)
            {
              v50 = (v14 >> 4) & 1;
              v49 = *v54;
              LODWORD(v56) = v17;
              goto LABEL_14;
            }
          }
          else if ((v16 - 12) < 2)
          {
            v49 = *v54;
            LODWORD(v56) = v17;
            v50 = 0;
LABEL_14:
          }
          ++v11;
          v13 += 4;
        }
        while (v10 != v11);
      }
    }
  }
  if (a3)
  {
    v54 = &v53;
    v55 = &v54;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v56 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v57 = &v56;
      v58 = &v55;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v56);
    }
    else
    {
      v18 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v18 - 1) * v18) >> 1);
        v21 = 1;
        while (1)
        {
          if (v19 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19806F390);
          }
          v22 = v20[v19];
          if ((v22 >> 5) - 1 >= 5)
            break;
          v23 = &(*a3)[v21];
          if (*(_BYTE *)v23 == 1 && (v22 & 0xF) - 8 <= 2)
          {
            v48 = *v54;
            LODWORD(v56) = *((_DWORD *)v23 + 2);
          }
          ++v19;
          v21 += 4;
          if (v18 == v19)
            goto LABEL_26;
        }
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x19806F368);
      }
    }
  }
LABEL_26:
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19806F3A0);
    }
    v24 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v30 = v29 | v24;
    if (v29 | v24)
    {
      v31 = v24;
      do
      {
        v32 = __clz(__rbit64(v30));
        v33 = ((v31 >> v32) & 1) == 0;
        v34 = v32 > 0x1F;
        if (v32 <= 0x1F)
          v35 = v32 + 1;
        else
          v35 = (char)(31 - v32);
        LODWORD(v56) = v35;
        v30 &= v30 - 1;
      }
      while (v30);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
      goto LABEL_53;
    v36 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v42 = v41 | v36;
    if (v41 | v36)
    {
      v43 = v36;
      do
      {
        v44 = __clz(__rbit64(v42));
        v45 = ((v43 >> v44) & 1) == 0;
        v46 = v44 > 0x1F;
        if (v44 <= 0x1F)
          v47 = v44 + 1;
        else
          v47 = (char)(31 - v44);
        LODWORD(v56) = v47;
        v42 &= v42 - 1;
      }
      while (v42);
    }
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;

  v8 = *(char *)(a2 + 8);
  v9 = ***(uint64_t ****)(a1 + 16);
  if (v8 == 1)
  {
    if ((a3 & 0xFC) != 4)
      return;
    v10 = *v9;
    v13 = *(_DWORD *)(a2 + 16);
    v11 = &v13;
    v12 = a4;
LABEL_7:
    return;
  }
  if ((v8 - 12) < 2)
  {
    v10 = *v9;
    v14 = *(_DWORD *)(a2 + 16);
    v11 = &v14;
    v12 = 0;
    goto LABEL_7;
  }
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  _QWORD v30[3];
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void **v35;
  _QWORD *v36;

  v31 = a4;
  if (!a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = **(_QWORD **)a1;
    v10 = **(_QWORD **)(a1 + 8);
    v30[0] = &v31;
    v30[1] = a2;
    v30[2] = v8;
    if (v9)
    {
      v32 = v30;
      v33 = &v32;
      if ((*(__int16 *)(v9 + 120) - 446) <= 5)
      {
        v34 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v35 = &v34;
        v36 = &v33;
        JSC::B3::Air::Inst::forEachArgCustom(v9, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v34);
      }
      else
      {
        v11 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v9 + 120)
              + ((unint64_t)((v11 - 1) * v11) >> 1);
          v14 = 8;
          do
          {
            if (v12 >= *(unsigned int *)(v9 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19806F6F8);
            }
            v15 = v13[v12];
            v16 = (v15 >> 5) - 1;
            if (v16 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x19806F6F0);
            }
            v17 = 0xFu >> v16;
            v18 = (char *)(*(_QWORD *)v9 + v14);
            v19 = *v18;
            if (v19 == 1)
            {
              if ((v15 & 0xC) != 4 || (v15 & 0x10) != 0)
                goto LABEL_15;
              v20 = v32[2];
              if ((v17 & 1) == 0)
                goto LABEL_13;
            }
            else
            {
              if ((v19 - 12) >= 2)
                goto LABEL_15;
              v28 = v17 & 1;
              v20 = v32[2];
              if ((v15 & 0xF) == 0xB && v28 == 0)
              {
LABEL_13:
                goto LABEL_15;
              }
            }
            if (!*(_BYTE *)*v32)
              goto LABEL_13;
LABEL_15:
            ++v12;
            v14 += 32;
          }
          while (v11 != v12);
        }
      }
    }
    if (v10)
    {
      v32 = v30;
      v33 = &v32;
      if ((*(__int16 *)(v10 + 120) - 446) <= 5)
      {
        v34 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v35 = &v34;
        v36 = &v33;
        JSC::B3::Air::Inst::forEachArgCustom(v10, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v34);
      }
      else
      {
        v21 = *(unsigned int *)(v10 + 12);
        if ((_DWORD)v21)
        {
          v22 = 0;
          v23 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v10 + 120)
              + ((unint64_t)((v21 - 1) * v21) >> 1);
          v24 = 8;
          do
          {
            if (v22 >= *(unsigned int *)(v10 + 12) || (v25 = v23[v22], v26 = (v25 >> 5) - 1, v26 >= 5))
            {
              __break(0xC471u);
              JUMPOUT(0x19806F6D0);
            }
            v27 = *(_QWORD *)v10 + v24;
            if (*(_BYTE *)v27 == 1
              && (v25 & 0xF) - 8 <= 2
              && (v25 & 0x10) == 0
              && (((0xFu >> v26) & 1) == 0 || !*(_BYTE *)*v32))
            {
            }
            ++v22;
            v24 += 32;
          }
          while (v21 != v22);
        }
      }
    }
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(char *)(a2 + 8);
  v9 = ***(_QWORD ***)(a1 + 16);
  if (v8 == 1)
  {
    if ((a3 & 0xFC) != 4 || (_DWORD)a4)
      return;
    v10 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    if ((v8 - 12) >= 2)
      return;
    v10 = *(_QWORD *)(v9 + 16);
    if (a3 != 11)
      goto LABEL_6;
  }
  if (a5 > 3)
  {
LABEL_7:
    return;
  }
LABEL_6:
  if (!**(_BYTE **)v9)
    goto LABEL_7;
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !(_DWORD)a4)
  {
    v8 = ***(_QWORD ***)(a1 + 16);
    if (a5 > 3 || !**(_BYTE **)v8)
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v8 = ****(_QWORD ****)(a1 + 16);
    v9 = *(_DWORD *)(a2 + 16);
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t ***v9;
  uint64_t **v10;
  int *v11;
  int v12;
  int v13;
  int v14;

  v8 = *(char *)(a2 + 8);
  v9 = ***(uint64_t ******)(a1 + 16);
  if (v8 == 1)
  {
    if ((a3 & 0xFC) != 4)
      return;
    v10 = *v9;
    v13 = *(_DWORD *)(a2 + 16);
    v11 = &v13;
    v12 = a4;
LABEL_7:
    return;
  }
  if ((v8 - 12) < 2)
  {
    v10 = *v9;
    v14 = *(_DWORD *)(a2 + 16);
    v11 = &v14;
    v12 = 0;
    goto LABEL_7;
  }
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t **a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  _WORD *v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int16 *v61;
  int v62;
  unsigned __int16 *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int16 v88;
  unsigned int v89;
  __int16 v90;
  __int16 v91;
  unsigned __int16 v92;
  __int16 v93;
  _BYTE v94[30];
  unsigned __int16 v95;

  if (!a3)
  {
    v8 = (unsigned int *)a2;
    v9 = (uint64_t)a1[1];
    v10 = **a1;
    v11 = *(unsigned int *)(v10 + 60);
    if ((_DWORD)v11)
    {
      v12 = a4;
      v13 = *(unsigned int **)(v10 + 48);
      v14 = &v13[v11];
      while (1)
      {
        v15 = *v13;
        v16 = *(_QWORD *)(v9 + 336);
        if ((int)*v13 < 1)
        {
          v17 = -v15;
          if (v17 >= *(unsigned int *)(v16 + 28))
            goto LABEL_123;
          v16 += 16;
        }
        else
        {
          v17 = *v13;
          if (v15 >= *(_DWORD *)(v16 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19806FEF4);
          }
        }
        if (!v12 || *(unsigned __int8 *)(*(_QWORD *)v16 + 2 * v17) >= 4u)
        {
          v18 = *v8;
          v19 = (unsigned __int16)*v8;
          if (v19 != (unsigned __int16)v15)
            break;
        }
LABEL_6:
        if (++v13 == v14)
          goto LABEL_91;
      }
      v20 = (unsigned __int16)*v13;
      v93 = *v8;
      v92 = v15;
      if ((unsigned __int16)v15 >= v19)
        v21 = v19;
      else
        v21 = v20;
      if (v20 <= v19)
        v22 = v19;
      else
        v22 = v20;
      if (*(_DWORD *)(v9 + 36) <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19806FEFCLL);
      }
      v23 = *(_QWORD *)(v9 + 24);
      v24 = v23 + 16 * v21;
      v95 = v22;
      v26 = (_DWORD *)(v24 + 8);
      v25 = *(_DWORD *)(v24 + 8);
      if (v25 != -1)
      {
        if (v25)
        {
          v27 = v23 + 16 * v21;
          v30 = *(unsigned __int16 *)(v27 + 12);
          v29 = (_WORD *)(v27 + 12);
          v28 = v30;
          v32 = v29 + 1;
          v31 = (unsigned __int16)v29[1];
          if (v30 <= v22 && v31 >= v22)
          {
            v34 = v22 - v28;
            if (*(uint64_t *)v24 >= 0)
              v35 = 2 * *(_QWORD *)v24 + 8;
            else
              v35 = v24;
            v36 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v37 = 1 << v34;
            v38 = *(_QWORD *)(v35 + v36);
            *(_QWORD *)(v35 + v36) = v38 | v37;
            v39 = v38 & v37;
            if (!v39)
              ++v25;
            *v26 = v25;
            v40 = *(_DWORD *)(v9 + 40);
            if (!v39)
              ++v40;
            *(_DWORD *)(v9 + 40) = v40;
            if (v39)
              goto LABEL_6;
            goto LABEL_34;
          }
          *v26 = v25 + 1;
          if (((unsigned __int16)v22 & 0xFFC0u) >= v28)
            v48 = v28;
          else
            v48 = (unsigned __int16)v22 & 0xFFC0;
          if (v31 <= v22)
            v49 = v22;
          else
            v49 = v31;
          v50 = v49 - v48;
          if (v49 < (int)v48)
            v50 = v49 - v48 + 7;
          if ((v25 + 1) > 8)
            v51 = v25 + 1;
          else
            v51 = 8;
          if (12 * v51 < (v50 >> 3))
          {
            v90 = v49;
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v24);
            WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)v94, (uint64_t *)v24, &v95);
            *v29 = v48;
            *v32 = v90;
          }
          else
          {
            if (v28 > v22)
            {
              v86 = (int)v28 - (int)v48;
              if ((v86 & 0x3F) != 0)
              {
LABEL_123:
                __break(0xC471u);
                JUMPOUT(0x19806FE98);
              }
              v91 = v49;
              if ((*(_QWORD *)v24 & 0x8000000000000000) != 0)
                v87 = 63;
              else
                v87 = *(_QWORD *)(2 * *(_QWORD *)v24);
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v24, v87 + v86, v86 >> 6);
              *v29 = v48;
              v28 = v48;
              LOWORD(v49) = v91;
            }
            v52 = *(_QWORD *)v24;
            if ((*(_QWORD *)v24 & 0x8000000000000000) != 0)
              v53 = 63;
            else
              v53 = *(_QWORD *)(2 * v52);
            v54 = v22 - v28;
            a2 = v22 - v28 + 1;
            if (v53 < a2)
            {
              v88 = v49;
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v24, a2, 0);
              LOWORD(v49) = v88;
              v52 = *(_QWORD *)v24;
            }
            v55 = 2 * v52 + 8;
            if (v52 < 0)
              v55 = v24;
            *(_QWORD *)(v55 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
            *v32 = v49;
          }
        }
        else
        {
          v81 = v23 + 16 * v21;
          *(_WORD *)(v81 + 12) = v22 & 0xFFC0;
          *(_WORD *)(v81 + 14) = v22;
          *v26 = 1;
          v82 = *(_QWORD *)v24;
          if ((*(_QWORD *)v24 & 0x8000000000000000) != 0)
            v83 = 63;
          else
            v83 = *(_QWORD *)(2 * v82);
          v84 = v22 - ((unsigned __int16)v22 & 0xFFC0);
          a2 = v84 + 1;
          if (v83 < v84 + 1)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v24, a2, 0);
            v82 = *(_QWORD *)v24;
          }
          if (v82 >= 0)
            v85 = 2 * v82 + 8;
          else
            v85 = v24;
          *(_QWORD *)(v85 + ((v84 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
        }
LABEL_62:
        ++*(_DWORD *)(v9 + 40);
        LOWORD(v18) = v93;
LABEL_34:
        v41 = *(unsigned __int16 *)(v9 + 16);
        if (v41 < (unsigned __int16)v18)
        {
          v42 = *(_QWORD *)(v9 + 48) + 16 * (unsigned __int16)v18;
          v43 = *(unsigned int *)(v42 + 12);
          if ((_DWORD)v43 == *(_DWORD *)(v42 + 8))
          {
            v47 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v9 + 48) + 16 * (unsigned __int16)v18, v43 + 1, (unint64_t)&v92);
            v43 = *(unsigned int *)(v42 + 12);
            *(_WORD *)(*(_QWORD *)v42 + 2 * v43) = *v47;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v42 + 2 * v43) = v92;
          }
          *(_DWORD *)(v42 + 12) = v43 + 1;
          ++*(_WORD *)(*(_QWORD *)(v9 + 64) + 2 * (unsigned __int16)v18);
          v41 = *(unsigned __int16 *)(v9 + 16);
        }
        if (v41 < v92)
        {
          v44 = *(_QWORD *)(v9 + 48) + 16 * v92;
          v45 = *(unsigned int *)(v44 + 12);
          if ((_DWORD)v45 == *(_DWORD *)(v44 + 8))
          {
            v46 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v9 + 48) + 16 * v92, v45 + 1, (unint64_t)&v93);
            v45 = *(unsigned int *)(v44 + 12);
            *(_WORD *)(*(_QWORD *)v44 + 2 * v45) = *v46;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v44 + 2 * v45) = v18;
          }
          *(_DWORD *)(v44 + 12) = v45 + 1;
          ++*(_WORD *)(*(_QWORD *)(v9 + 64) + 2 * v92);
        }
        goto LABEL_6;
      }
      v56 = *(_QWORD *)v24;
      if (*(_QWORD *)v24
        || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v23 + 16 * v21), 0), (v56 = *(_QWORD *)v24) != 0))
      {
        v57 = *(_DWORD *)(v56 - 8);
      }
      else
      {
        v57 = 0;
      }
      v58 = 9 * ((~((_DWORD)v22 << 15) + v22) ^ ((~((_DWORD)v22 << 15) + v22) >> 10));
      v59 = (v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11);
      v60 = v57 & (v59 ^ HIWORD(v59));
      v61 = (unsigned __int16 *)(v56 + 2 * v60);
      v62 = *v61;
      if (v62 != 0xFFFF)
      {
        v63 = 0;
        v64 = 1;
        while ((_DWORD)v22 != (unsigned __int16)v62)
        {
          if ((unsigned __int16)v62 == 65534)
            v63 = v61;
          v60 = (v60 + v64) & v57;
          v61 = (unsigned __int16 *)(v56 + 2 * v60);
          v62 = *v61;
          ++v64;
          if (v62 == 0xFFFF)
          {
            if (v63)
            {
              *v63 = -1;
              --*(_DWORD *)(*(_QWORD *)v24 - 16);
              LOWORD(v22) = v95;
              v61 = v63;
            }
            goto LABEL_73;
          }
        }
        goto LABEL_6;
      }
LABEL_73:
      *v61 = v22;
      v65 = *(_QWORD *)v24;
      if (*(_QWORD *)v24)
        v66 = *(_DWORD *)(v65 - 12) + 1;
      else
        v66 = 1;
      *(_DWORD *)(v65 - 12) = v66;
      v67 = *(_QWORD *)v24;
      if (*(_QWORD *)v24)
        v68 = *(_DWORD *)(v67 - 12);
      else
        v68 = 0;
      v69 = (*(_DWORD *)(v67 - 16) + v68);
      v70 = *(unsigned int *)(v67 - 4);
      if (v70 > 0x400)
      {
        if (v70 > 2 * v69)
          goto LABEL_79;
      }
      else
      {
        if (3 * v70 > 4 * v69)
        {
LABEL_79:
          v71 = v95;
          v72 = v95 & 0xFFC0;
          v73 = v23 + 16 * v21;
          if (v72 >= *(unsigned __int16 *)(v73 + 12))
            v72 = *(unsigned __int16 *)(v73 + 12);
          *(_WORD *)(v73 + 12) = v72;
          if (*(unsigned __int16 *)(v73 + 14) > v71)
            v71 = *(unsigned __int16 *)(v73 + 14);
          *(_WORD *)(v73 + 14) = v71;
          if (v67)
          {
            v74 = *(_DWORD *)(v67 - 4);
            v75 = __OFSUB__(v71, v72);
            v76 = v71 - v72;
            if (v76 < 0 != v75)
              v76 += 7;
            if (2 * (v76 >> 3) < (2 * v74))
              WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v23 + 16 * v21), a2, (uint64_t)v61, a4, a5, a6, a7, a8);
          }
          goto LABEL_62;
        }
        if (!(_DWORD)v70)
        {
          v89 = 8;
LABEL_115:
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v23 + 16 * v21), v89, v61);
          v67 = *(_QWORD *)v24;
          goto LABEL_79;
        }
      }
      v89 = (_DWORD)v70 << (6 * *(_DWORD *)(v67 - 12) >= (2 * v70));
      goto LABEL_115;
    }
LABEL_91:
    v77 = *(unsigned int *)(v9 + 276);
    if ((_DWORD)v77)
    {
      v78 = *(int **)(v9 + 264);
      v79 = 4 * v77;
      do
      {
        v80 = *v78++;
        v79 -= 4;
      }
      while (v79);
    }
  }
}

void _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  int v9;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v8 = ****(uint64_t ******)(a1 + 16);
    v9 = *(_DWORD *)(a2 + 16);
  }
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)0>::allocate(void)::{lambda(unsigned int &)#1}::operator()(unsigned __int16 *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int16 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int16 *v58;
  int v59;
  unsigned __int16 *v60;
  int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  int v67;
  _OWORD *v68;
  __int128 v69;
  int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  int v116;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int v121;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  unsigned __int16 *v138;
  unsigned __int16 *v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  int v146;
  unsigned __int16 *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int16 *v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unsigned __int16 **v167;
  uint64_t v168;
  unsigned __int16 *v169;
  uint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  _DWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _WORD *v182;
  unsigned int v183;
  unsigned int v184;
  _WORD *v185;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  __int16 v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned __int16 *v213;
  int v214;
  unsigned __int16 *v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  int v226;
  BOOL v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  _WORD *v231;
  uint64_t v232;
  _WORD *v233;
  int v234;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  int v249;
  int v250;
  int v252;
  int v253;
  int v255;
  int v256;
  int v258;
  int v259;
  int v261;
  int v262;
  int v264;
  int v265;
  int v267;
  int v268;
  int v270;
  int v271;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  __int16 v284;
  __int16 v285;
  __int16 v286;
  unint64_t v287;
  _QWORD v288[16];
  _WORD v289[15];
  unsigned __int16 v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;

  v8 = (_DWORD *)a2;
  v9 = a1;
  v294 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)a2;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v13 = *(unsigned __int16 *)(v12 + 4 * v11);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 152);
  do
  {
    v15 = v13;
    v13 = *(unsigned __int16 *)(v14 + 2 * (unsigned __int16)v13);
  }
  while (v13);
  v16 = *(unsigned __int16 *)(v12 + 4 * v11 + 2);
  do
  {
    v17 = v16;
    v16 = *(unsigned __int16 *)(v14 + 2 * (unsigned __int16)v16);
  }
  while (v16);
  LODWORD(v18) = *(unsigned __int16 *)(v10 + 16);
  if (v18 >= (unsigned __int16)v17)
    v19 = v17;
  else
    v19 = v15;
  if (v18 >= (unsigned __int16)v17)
    v20 = v15;
  else
    v20 = v17;
  if (v19 == (unsigned __int16)v20)
    return;
  if (v18 >= (unsigned __int16)v20)
    goto LABEL_156;
  if ((unsigned __int16)v20 >= v19)
    v21 = v19;
  else
    v21 = (unsigned __int16)v20;
  if ((unsigned __int16)v20 <= v19)
    v22 = v19;
  else
    v22 = (unsigned __int16)v20;
  v23 = *(_DWORD *)(v10 + 36);
  if (v23 <= v21)
  {
    __break(0xC471u);
    goto LABEL_421;
  }
  v24 = *(_QWORD *)(v10 + 24);
  v25 = (uint64_t *)(v24 + 16 * v21);
  if (*((_DWORD *)v25 + 2) == -1)
  {
    v130 = *v25;
    if (v130)
    {
      v131 = *(_DWORD *)(v130 - 8);
      v132 = 9 * ((~((_DWORD)v22 << 15) + v22) ^ ((~((_DWORD)v22 << 15) + v22) >> 10));
      v133 = v131 & (((v132 ^ (v132 >> 6)) + ~((v132 ^ (v132 >> 6)) << 11)) ^ (((v132 ^ (v132 >> 6))
                                                                              + ~((v132 ^ (v132 >> 6)) << 11)) >> 16));
      v134 = *(unsigned __int16 *)(v130 + 2 * v133);
      if (v134 == (_DWORD)v22)
        goto LABEL_156;
      v135 = 1;
      while ((_WORD)v134 != 0xFFFF)
      {
        v133 = (v133 + v135) & v131;
        v134 = *(unsigned __int16 *)(v130 + 2 * v133);
        ++v135;
        if (v134 == (_DWORD)v22)
          goto LABEL_156;
      }
    }
  }
  else
  {
    v26 = *(unsigned __int16 *)(v24 + 16 * v21 + 12);
    if (v26 <= v22)
    {
      v27 = v22 - v26;
      v28 = (_QWORD *)(2 * *v25);
      v29 = *v25 < 0 ? 63 : *v28;
      if (v29 > v27)
      {
        v30 = v28 + 1;
        if (*v25 >= 0)
          v25 = v30;
        if (((*(unint64_t *)((char *)v25 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v27) & 1) != 0)
          goto LABEL_156;
      }
    }
  }
  if (v18 < v19)
  {
    v31 = *(uint64_t **)(v10 + 240);
    v32 = *v31;
    v33 = (unint64_t *)(2 * *v31);
    if (*v31 < 0)
      v34 = 63;
    else
      v34 = *v33;
    if (v34 <= v19)
    {
      LODWORD(v36) = 0;
    }
    else
    {
      v35 = v33 + 1;
      if (v32 < 0)
        v35 = *(_QWORD **)(v10 + 240);
      v36 = (*(_QWORD *)((char *)v35 + (((unint64_t)v19 >> 3) & 0x1FF8)) >> v19) & 1;
    }
    v37 = (unsigned __int16)v20;
    if (v32 < 0)
      v38 = 63;
    else
      v38 = *v33;
    if (v38 <= (unsigned __int16)v20)
    {
      if ((v36 & 1) == 0)
      {
LABEL_41:
        v40 = *(unsigned int *)(v10 + 12);
        if (v40 >= 0x41)
        {
          __break(0xC471u);
LABEL_347:
          __break(1u);
          goto LABEL_348;
        }
        v31 = *(uint64_t **)(v10 + 48);
        v41 = &v31[2 * v19];
        v42 = &v31[2 * (unsigned __int16)v20];
        v43 = *((unsigned int *)v41 + 3);
        v44 = *((unsigned int *)v42 + 3);
        v45 = v44 + v43;
        if (v40 <= (int)v44 + (int)v43)
        {
          v46 = 0;
          if ((_DWORD)v43)
          {
            v47 = (unsigned __int16 *)*v41;
            v49 = v10 + 168;
            v48 = *(_QWORD *)(v10 + 168);
            if (v48 >= 0)
              v49 = 2 * v48 + 8;
            v50 = 2 * v43;
            a2 = (unint64_t)v288;
            do
            {
              v51 = *v47;
              --v45;
              a4 = *(_QWORD *)(v49 + ((v51 >> 3) & 0x1FF8)) >> v51;
              if ((a4 & 1) != 0
                || (a4 = *(unsigned __int16 *)(v14 + 2 * v51), *(_WORD *)(v14 + 2 * v51))
                || (a4 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 64) + 2 * v51), v40 > a4))
              {
                a3 = v46 + v45;
                if (a3 < v40)
                  goto LABEL_227;
              }
              else
              {
                if (v46 >= 0x40)
                  goto LABEL_347;
                *((_WORD *)v288 + v46) = v51;
                a3 = v46 + 1;
                v46 = a3;
                if (a3 >= v40)
                  goto LABEL_54;
              }
              ++v47;
              v50 -= 2;
            }
            while (v50);
          }
          if ((_DWORD)v44)
          {
            v147 = (unsigned __int16 *)*v42;
            v148 = v10 + 168;
            v149 = *(_QWORD *)(v10 + 168);
            if (v149 >= 0)
              v148 = 2 * v149 + 8;
            if (v46)
            {
              a2 = (unint64_t)v288;
              a3 = v46;
              v150 = &v147[v44];
              while (1)
              {
                v151 = *v147;
                --v45;
                if (((*(_QWORD *)(v148 + ((v151 >> 3) & 0x1FF8)) >> v151) & 1) != 0
                  || *(_WORD *)(v14 + 2 * v151)
                  || v40 > *(unsigned __int16 *)(*(_QWORD *)(v10 + 64) + 2 * v151))
                {
                  goto LABEL_204;
                }
                v152 = (char *)v288;
                a6 = 2 * v46;
                while (1)
                {
                  a7 = *(unsigned __int16 *)v152;
                  if ((_DWORD)a7 == (_DWORD)v151)
                    break;
                  v152 += 2;
                  a6 -= 2;
                  if (!a6)
                  {
                    v152 = (char *)v288 + 2 * v46;
                    break;
                  }
                }
                a5 = v152 - (char *)v288;
                if (v46 != a5 >> 1)
                {
LABEL_204:
                  if (a3 + v45 < v40)
                    goto LABEL_227;
                }
                else
                {
                  if (a3 >= 0x40)
                    goto LABEL_347;
                  *((_WORD *)v288 + a3) = v151;
                  a4 = a3 + 1;
                  a3 = a4;
                  if (a4 >= v40)
                    goto LABEL_54;
                }
                if (++v147 == v150)
                  goto LABEL_227;
              }
            }
            v153 = 0;
            v154 = 2 * v44;
            v155 = v45 - 1;
            while (1)
            {
              v156 = *v147;
              a2 = *(_QWORD *)(v148 + ((v156 >> 3) & 0x1FF8)) >> v156;
              if ((a2 & 1) != 0
                || (a2 = *(unsigned __int16 *)(v14 + 2 * v156), *(_WORD *)(v14 + 2 * v156))
                || (a2 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 64) + 2 * v156), v40 > a2))
              {
                if (v153 + v155 < v40)
                  goto LABEL_227;
              }
              else
              {
                if (v153 > 0x3F)
                  goto LABEL_347;
                *((_WORD *)v288 + v153++) = v156;
                if (v153 >= v40)
                  goto LABEL_54;
              }
              ++v147;
              --v155;
              v154 -= 2;
              if (!v154)
                goto LABEL_227;
            }
          }
        }
        goto LABEL_227;
      }
    }
    else
    {
      v39 = (uint64_t *)(v33 + 1);
      if (v32 >= 0)
        v31 = v39;
      LODWORD(v31) = v36 ^ (*(unint64_t *)((char *)v31 + (((unint64_t)(unsigned __int16)v20 >> 3) & 0x1FF8)) >> v20);
      if ((v31 & 1) == 0)
        goto LABEL_41;
    }
    v290 = v20;
    goto LABEL_55;
  }
  v37 = (unsigned __int16)v20;
  v31 = *(uint64_t **)(v10 + 48);
  v136 = &v31[2 * (unsigned __int16)v20];
  v137 = *((unsigned int *)v136 + 3);
  if (!(_DWORD)v137)
  {
LABEL_227:
    *(_WORD *)(v14 + 2 * v37) = v19;
    if (*(_DWORD *)(v10 + 116) > (unsigned __int16)v20)
    {
      v157 = *(_QWORD *)(v10 + 104) + 40 * v37;
      v158 = *(unsigned int *)(v157 + 4);
      v159 = (_QWORD *)(v157 + 8);
      if ((_DWORD)v158 != 8)
        v159 = (_QWORD *)*v159;
      v160 = 0;
      while ((_DWORD)v158 != v160)
      {
        v161 = v160;
        v162 = *((_DWORD *)v159 + v160++);
        if (v162 != -1)
        {
          v163 = v161;
          goto LABEL_234;
        }
      }
      v163 = v158;
LABEL_234:
      if ((_DWORD)v158 == (_DWORD)v163)
      {
        v287 = v19;
      }
      else
      {
        v287 = v19;
        v164 = v163 | (v158 << 32);
        do
        {
          if (*(_DWORD *)(v10 + 116) <= v19)
          {
            __break(0xC471u);
            JUMPOUT(0x1980713C8);
          }
          WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v288, (unsigned int *)(*(_QWORD *)(v10 + 104) + 40 * v19), *((_DWORD *)v159 + v164));
          v165 = HIDWORD(v164);
          if ((v163 + 1) > HIDWORD(v164))
            LODWORD(v165) = v163 + 1;
          while (1)
          {
            v166 = (v163 + 1);
            v164 = v164 & 0xFFFFFFFF00000000 | v166;
            if ((_DWORD)v165 - 1 == (_DWORD)v163)
              break;
            LODWORD(v163) = v163 + 1;
            if (*((_DWORD *)v159 + v166) != -1)
              goto LABEL_241;
          }
          LODWORD(v166) = v165;
LABEL_241:
          LODWORD(v163) = v166;
        }
        while ((_DWORD)v158 != (_DWORD)v166);
        v31 = *(uint64_t **)(v10 + 48);
      }
      v167 = (unsigned __int16 **)&v31[2 * v37];
      v168 = *((unsigned int *)v167 + 3);
      if ((_DWORD)v168)
      {
        v169 = *v167;
        v170 = (uint64_t)&(*v167)[v168];
        v171 = (uint64_t *)(v10 + 168);
        do
        {
          v172 = *v169;
          if (*v171 >= 0)
            v173 = 2 * *v171 + 8;
          else
            v173 = v10 + 168;
          if (((*(_QWORD *)(v173 + ((v172 >> 3) & 0x1FF8)) >> v172) & 1) != 0
            || *(_WORD *)(*(_QWORD *)(v10 + 152) + 2 * v172))
          {
            goto LABEL_250;
          }
          v289[0] = *v169;
          v290 = v19;
          if (v19 >= v172)
            v174 = v172;
          else
            v174 = v19;
          if (v19 <= v172)
            v175 = v172;
          else
            v175 = v19;
          if (*(_DWORD *)(v10 + 36) <= v174)
          {
            __break(0xC471u);
            JUMPOUT(0x1980713C0);
          }
          v176 = *(_QWORD *)(v10 + 24);
          v177 = v176 + 16 * v174;
          LOWORD(v291) = v175;
          v179 = (_DWORD *)(v177 + 8);
          v178 = *(_DWORD *)(v177 + 8);
          if (v178 == -1)
          {
            v208 = *(_QWORD *)v177;
            if (*(_QWORD *)v177
              || (v283 = v170,
                  WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)v177, 0), v177 = v176 + 16 * v174, v170 = v283, (v208 = *(_QWORD *)v177) != 0))
            {
              v209 = *(_DWORD *)(v208 - 8);
            }
            else
            {
              v209 = 0;
            }
            v210 = 9 * ((~((_DWORD)v175 << 15) + v175) ^ ((~((_DWORD)v175 << 15) + v175) >> 10));
            v211 = (v210 ^ (v210 >> 6)) + ~((v210 ^ (v210 >> 6)) << 11);
            v212 = v209 & (v211 ^ HIWORD(v211));
            v213 = (unsigned __int16 *)(v208 + 2 * v212);
            v214 = *v213;
            if (v214 == 0xFFFF)
            {
LABEL_319:
              *v213 = v175;
              v217 = *(_QWORD *)v177;
              if (*(_QWORD *)v177)
                v218 = *(_DWORD *)(v217 - 12) + 1;
              else
                v218 = 1;
              *(_DWORD *)(v217 - 12) = v218;
              v219 = *(_QWORD *)v177;
              if (*(_QWORD *)v177)
                v220 = *(_DWORD *)(v219 - 12);
              else
                v220 = 0;
              v221 = (*(_DWORD *)(v219 - 16) + v220);
              v222 = *(unsigned int *)(v219 - 4);
              if (v222 > 0x400)
              {
                v241 = v170;
                if (v222 <= 2 * v221)
                  goto LABEL_368;
              }
              else
              {
                if (3 * v222 > 4 * v221)
                  goto LABEL_325;
                v241 = v170;
                if (!(_DWORD)v222)
                {
                  v244 = 8;
                  goto LABEL_369;
                }
LABEL_368:
                v244 = (_DWORD)v222 << (6 * *(_DWORD *)(v219 - 12) >= (2 * v222));
LABEL_369:
                v246 = (uint64_t *)v177;
                WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)v177, v244, v213);
                v177 = (uint64_t)v246;
                v219 = *v246;
              }
              v170 = v241;
LABEL_325:
              v223 = (unsigned __int16)v291;
              v224 = v291 & 0xFFC0;
              v225 = v176 + 16 * v174;
              if (v224 >= *(unsigned __int16 *)(v225 + 12))
                v224 = *(unsigned __int16 *)(v225 + 12);
              *(_WORD *)(v225 + 12) = v224;
              if (*(unsigned __int16 *)(v225 + 14) > v223)
                v223 = *(unsigned __int16 *)(v225 + 14);
              *(_WORD *)(v225 + 14) = v223;
              if (v219)
              {
                v226 = *(_DWORD *)(v219 - 4);
                v227 = __OFSUB__(v223, v224);
                v228 = v223 - v224;
                if (v228 < 0 != v227)
                  v228 += 7;
                if (2 * (v228 >> 3) < (2 * v226))
                {
                  v229 = v170;
                  WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)v177, a2, (uint64_t)v213, 1, 8, 65534, a7, a8);
                  v170 = v229;
                }
              }
LABEL_298:
              ++*(_DWORD *)(v10 + 40);
              LODWORD(v172) = v289[0];
LABEL_299:
              v203 = *(unsigned __int16 *)(v10 + 16);
              if (v203 < v172)
              {
                v204 = *(_QWORD *)(v10 + 48) + 16 * v172;
                v205 = *(unsigned int *)(v204 + 12);
                if ((_DWORD)v205 == *(_DWORD *)(v204 + 8))
                {
                  v230 = v170;
                  v231 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v10 + 48) + 16 * v172, v205 + 1, (unint64_t)&v290);
                  v170 = v230;
                  v205 = *(unsigned int *)(v204 + 12);
                  *(_WORD *)(*(_QWORD *)v204 + 2 * v205) = *v231;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v204 + 2 * v205) = v290;
                }
                *(_DWORD *)(v204 + 12) = v205 + 1;
                v203 = *(unsigned __int16 *)(v10 + 16);
              }
              if (v203 < v290)
              {
                v206 = *(_QWORD *)(v10 + 48) + 16 * v290;
                v207 = *(unsigned int *)(v206 + 12);
                if ((_DWORD)v207 == *(_DWORD *)(v206 + 8))
                {
                  v232 = v170;
                  v233 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v10 + 48) + 16 * v290, v207 + 1, (unint64_t)v289);
                  v170 = v232;
                  v207 = *(unsigned int *)(v206 + 12);
                  *(_WORD *)(*(_QWORD *)v206 + 2 * v207) = *v233;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v206 + 2 * v207) = v172;
                }
                *(_DWORD *)(v206 + 12) = v207 + 1;
                v203 = *(unsigned __int16 *)(v10 + 16);
              }
              if (v203 >= v19)
                goto LABEL_250;
              v194 = 1;
              v172 = v287;
              goto LABEL_276;
            }
            v215 = 0;
            v216 = 1;
            while ((_DWORD)v175 != (unsigned __int16)v214)
            {
              if ((unsigned __int16)v214 == 65534)
                v215 = v213;
              v212 = (v212 + v216) & v209;
              v213 = (unsigned __int16 *)(v208 + 2 * v212);
              v214 = *v213;
              ++v216;
              if (v214 == 0xFFFF)
              {
                if (v215)
                {
                  *v215 = -1;
                  --*(_DWORD *)(*(_QWORD *)v177 - 16);
                  LOWORD(v175) = v291;
                  v213 = v215;
                }
                goto LABEL_319;
              }
            }
          }
          else
          {
            if (!v178)
            {
              v236 = v176 + 16 * v174;
              *(_WORD *)(v236 + 12) = v175 & 0xFFC0;
              *(_WORD *)(v236 + 14) = v175;
              *v179 = 1;
              v237 = *(_QWORD *)v177;
              if ((*(_QWORD *)v177 & 0x8000000000000000) != 0)
                v238 = 63;
              else
                v238 = *(_QWORD *)(2 * v237);
              v239 = v175 - ((unsigned __int16)v175 & 0xFFC0);
              a2 = v239 + 1;
              if (v238 < v239 + 1)
              {
                v247 = v170;
                v248 = (uint64_t *)v177;
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v177, a2, 0);
                v177 = (uint64_t)v248;
                v170 = v247;
                v237 = *v248;
              }
              if (v237 >= 0)
                v240 = 2 * v237 + 8;
              else
                v240 = v177;
              *(_QWORD *)(v240 + ((v239 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v175;
              goto LABEL_298;
            }
            v180 = v176 + 16 * v174;
            v183 = *(unsigned __int16 *)(v180 + 12);
            v182 = (_WORD *)(v180 + 12);
            v181 = v183;
            v185 = v182 + 1;
            v184 = (unsigned __int16)v182[1];
            if (v183 > v175 || v184 < v175)
            {
              *v179 = v178 + 1;
              if (((unsigned __int16)v175 & 0xFFC0u) >= v181)
                v195 = v181;
              else
                v195 = (unsigned __int16)v175 & 0xFFC0;
              if (v184 <= v175)
                v196 = v175;
              else
                v196 = v184;
              v197 = v196 - v195;
              if (v196 < (int)v195)
                v197 = v196 - v195 + 7;
              if ((v178 + 1) > 8)
                v198 = v178 + 1;
              else
                v198 = 8;
              if (12 * v198 < (v197 >> 3))
              {
                v282 = v170;
                v245 = (uint64_t *)v177;
                v286 = v196;
                WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v177);
                WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)v288, v245, &v291);
                v170 = v282;
                *v182 = v195;
                *v185 = v286;
              }
              else
              {
                if (v181 > v175)
                {
                  v280 = v177;
                  v281 = v170;
                  v284 = v196;
                  WTF::BitVector::shiftRightByMultipleOf64((WTF::BitVector *)v177, (int)v181 - (int)v195);
                  LOWORD(v196) = v284;
                  v177 = v280;
                  v170 = v281;
                  *v182 = v195;
                  v181 = v195;
                }
                v199 = *(_QWORD *)v177;
                if ((*(_QWORD *)v177 & 0x8000000000000000) != 0)
                  v200 = 63;
                else
                  v200 = *(_QWORD *)(2 * v199);
                v201 = v175 - v181;
                a2 = v175 - v181 + 1;
                if (v200 < a2)
                {
                  v242 = v170;
                  v243 = (uint64_t *)v177;
                  v285 = v196;
                  WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v177, a2, 0);
                  LOWORD(v196) = v285;
                  v177 = (uint64_t)v243;
                  v170 = v242;
                  v199 = *v243;
                }
                v202 = 2 * v199 + 8;
                if (v199 < 0)
                  v202 = v177;
                *(_QWORD *)(v202 + ((v201 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v201;
                *v185 = v196;
              }
              goto LABEL_298;
            }
            v187 = v175 - v181;
            if (*(uint64_t *)v177 >= 0)
              v188 = 2 * *(_QWORD *)v177 + 8;
            else
              v188 = v177;
            v189 = (v187 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v190 = 1 << v187;
            v191 = *(_QWORD *)(v188 + v189);
            *(_QWORD *)(v188 + v189) = v191 | v190;
            v192 = v191 & v190;
            if (!v192)
              ++v178;
            *v179 = v178;
            v193 = *(_DWORD *)(v10 + 40);
            if (!v192)
              ++v193;
            *(_DWORD *)(v10 + 40) = v193;
            if (!v192)
              goto LABEL_299;
          }
          v194 = -1;
LABEL_276:
          *(_WORD *)(*(_QWORD *)(v10 + 64) + 2 * v172) += v194;
LABEL_250:
          ++v169;
        }
        while (v169 != (unsigned __int16 *)v170);
      }
      *(_BYTE *)(v10 + 217) = 1;
      **((_BYTE **)v9 + 1) = 1;
LABEL_156:
      *v8 = -1;
      return;
    }
    __break(0xC471u);
LABEL_421:
    JUMPOUT(0x19807135CLL);
  }
  v138 = (unsigned __int16 *)*v136;
  v139 = &v138[v137];
  v140 = (uint64_t *)(v10 + 168);
  while (1)
  {
    v141 = *v138;
    if (v18 >= v141)
      goto LABEL_171;
    v142 = *v140 >= 0 ? 2 * *v140 + 8 : v10 + 168;
    a2 = *(_QWORD *)(v142 + ((v141 >> 3) & 0x1FF8)) >> v141;
    if ((a2 & 1) != 0)
      goto LABEL_171;
    a2 = *(unsigned __int16 *)(v14 + 2 * v141);
    if (*(_WORD *)(v14 + 2 * v141))
      goto LABEL_171;
    a2 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 64) + 2 * v141);
    if (*(_DWORD *)(v10 + 12) > a2)
      goto LABEL_171;
    if (v141 >= v19)
      a3 = v19;
    else
      a3 = *v138;
    if (v141 <= v19)
      v143 = v19;
    else
      v143 = *v138;
    if (v23 <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x1980713B8);
    }
    a2 = v24 + 16 * a3;
    a4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)a4 == -1)
      break;
    a3 = v24 + 16 * a3;
    a4 = *(unsigned __int16 *)(a3 + 12);
    if (a4 > v143)
      goto LABEL_54;
    a3 = *(_QWORD *)a2;
    a5 = 2 * *(_QWORD *)a2;
    a6 = (*(_QWORD *)a2 & 0x8000000000000000) != 0 ? 63 : *(_QWORD *)a5;
    v144 = v143 - a4;
    if (a6 <= v144)
      goto LABEL_54;
    a4 = a5 + 8;
    if ((a3 & 0x8000000000000000) == 0)
      a2 = a5 + 8;
    a3 = (v144 >> 3) & 0x1FFFFFFFFFFFFFF8;
    a2 = *(_QWORD *)(a2 + a3);
    if (((a2 >> v144) & 1) == 0)
      goto LABEL_54;
LABEL_171:
    if (++v138 == v139)
      goto LABEL_227;
  }
  a2 = *(_QWORD *)a2;
  if (!a2)
    goto LABEL_54;
  a3 = *(unsigned int *)(a2 - 8);
  v145 = 9 * ((~((_DWORD)v143 << 15) + v143) ^ ((~((_DWORD)v143 << 15) + v143) >> 10));
  v146 = v145 ^ (v145 >> 6);
  a5 = ~(v146 << 11);
  a4 = a3 & ((v146 + (_DWORD)a5) ^ ((v146 + a5) >> 16));
  a6 = *(unsigned __int16 *)(a2 + 2 * a4);
  if ((_DWORD)a6 == (_DWORD)v143)
    goto LABEL_171;
  a5 = 1;
  while ((_WORD)a6 != 0xFFFF)
  {
    a4 = ((_DWORD)a4 + (_DWORD)a5) & a3;
    a6 = *(unsigned __int16 *)(a2 + 2 * a4);
    a5 = (a5 + 1);
    if ((_DWORD)a6 == (_DWORD)v143)
      goto LABEL_171;
  }
LABEL_54:
  v290 = v20;
  if (v18 < v19)
  {
LABEL_55:
    v53 = (uint64_t *)(v10 + 80);
    v52 = *(_QWORD *)(v10 + 80);
    if (v52
      || (WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v10 + 80), 8u, 0), (v52 = *v53) != 0))
    {
      v54 = *(_DWORD *)(v52 - 8);
    }
    else
    {
      v54 = 0;
    }
    v55 = ~(v19 << 15) + v19;
    v56 = (9 * (v55 ^ (v55 >> 10))) ^ ((9 * (v55 ^ (v55 >> 10))) >> 6);
    v57 = v54 & ((v56 + ~(v56 << 11)) ^ ((v56 + ~(v56 << 11)) >> 16));
    v58 = (unsigned __int16 *)(v52 + 32 * v57);
    v59 = *v58;
    if (v59 != 0xFFFF)
    {
      v60 = 0;
      v61 = 1;
      while ((unsigned __int16)v59 != v19)
      {
        if ((unsigned __int16)v59 == 65534)
          v60 = v58;
        v57 = ((_DWORD)v57 + v61) & v54;
        v58 = (unsigned __int16 *)(v52 + 32 * v57);
        v59 = *v58;
        ++v61;
        if (v59 == 0xFFFF)
        {
          if (v60)
          {
            *v60 = -1;
            *((_QWORD *)v60 + 1) = 0x800000000;
            *((_QWORD *)v60 + 2) = -1;
            *((_QWORD *)v60 + 3) = -1;
            --*(_DWORD *)(*v53 - 16);
            v58 = v60;
          }
          goto LABEL_140;
        }
      }
LABEL_60:
      v62 = *((_DWORD *)v58 + 2);
      v63 = *((_DWORD *)v58 + 3);
      v9 = v58 + 4;
      v20 = v290;
      if (v63 == 8)
      {
        if (v62)
        {
          v64 = *((unsigned int *)v58 + 2);
          v65 = v58 + 8;
          v66 = v64;
          while (1)
          {
            v67 = *v65++;
            if (v67 == v290)
              break;
            if (!--v66)
            {
              if (v62 <= 7)
                goto LABEL_161;
              v68 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
              *(_QWORD *)&v69 = -1;
              *((_QWORD *)&v69 + 1) = -1;
              *v68 = v69;
              v68[1] = v69;
              v68[2] = v69;
              v68[3] = v69;
              v68[4] = v69;
              v68[5] = v69;
              v68[6] = v69;
              v68[7] = v69;
              *((_DWORD *)v58 + 3) = 64;
              v70 = v58[8];
              if (v70 != 0xFFFF)
              {
                v71 = 9 * ((~(v70 << 15) + v70) ^ ((~(v70 << 15) + v70) >> 10));
                v72 = (v71 ^ (v71 >> 6)) + ~((v71 ^ (v71 >> 6)) << 11);
                v73 = (v72 ^ BYTE2(v72)) & 0x3F;
                v74 = *((unsigned __int16 *)v68 + v73);
                if (v74 != 0xFFFF && v74 != v70)
                {
                  v249 = 1;
                  do
                  {
                    v73 = ((_BYTE)v73 + (_BYTE)v249) & 0x3F;
                    v250 = *((unsigned __int16 *)v68 + v73);
                    ++v249;
                  }
                  while (v250 != 0xFFFF && v250 != v70);
                }
                *((_WORD *)v68 + v73) = v70;
              }
              v76 = v58[9];
              if (v76 != 0xFFFF)
              {
                v77 = 9 * ((~(v76 << 15) + v76) ^ ((~(v76 << 15) + v76) >> 10));
                v78 = (v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11);
                v79 = (v78 ^ BYTE2(v78)) & 0x3F;
                v80 = *((unsigned __int16 *)v68 + v79);
                if (v80 != 0xFFFF && v80 != v76)
                {
                  v252 = 1;
                  do
                  {
                    v79 = ((_BYTE)v79 + (_BYTE)v252) & 0x3F;
                    v253 = *((unsigned __int16 *)v68 + v79);
                    ++v252;
                  }
                  while (v253 != 0xFFFF && v253 != v76);
                }
                *((_WORD *)v68 + v79) = v76;
              }
              v82 = v58[10];
              if (v82 != 0xFFFF)
              {
                v83 = 9 * ((~(v82 << 15) + v82) ^ ((~(v82 << 15) + v82) >> 10));
                v84 = (v83 ^ (v83 >> 6)) + ~((v83 ^ (v83 >> 6)) << 11);
                v85 = (v84 ^ BYTE2(v84)) & 0x3F;
                v86 = *((unsigned __int16 *)v68 + v85);
                if (v86 != 0xFFFF && v86 != v82)
                {
                  v255 = 1;
                  do
                  {
                    v85 = ((_BYTE)v85 + (_BYTE)v255) & 0x3F;
                    v256 = *((unsigned __int16 *)v68 + v85);
                    ++v255;
                  }
                  while (v256 != 0xFFFF && v256 != v82);
                }
                *((_WORD *)v68 + v85) = v82;
              }
              v88 = v58[11];
              if (v88 != 0xFFFF)
              {
                v89 = 9 * ((~(v88 << 15) + v88) ^ ((~(v88 << 15) + v88) >> 10));
                v90 = (v89 ^ (v89 >> 6)) + ~((v89 ^ (v89 >> 6)) << 11);
                v91 = (v90 ^ BYTE2(v90)) & 0x3F;
                v92 = *((unsigned __int16 *)v68 + v91);
                if (v92 != 0xFFFF && v92 != v88)
                {
                  v258 = 1;
                  do
                  {
                    v91 = ((_BYTE)v91 + (_BYTE)v258) & 0x3F;
                    v259 = *((unsigned __int16 *)v68 + v91);
                    ++v258;
                  }
                  while (v259 != 0xFFFF && v259 != v88);
                }
                *((_WORD *)v68 + v91) = v88;
              }
              v94 = v58[12];
              if (v94 != 0xFFFF)
              {
                v95 = 9 * ((~(v94 << 15) + v94) ^ ((~(v94 << 15) + v94) >> 10));
                v96 = (v95 ^ (v95 >> 6)) + ~((v95 ^ (v95 >> 6)) << 11);
                v97 = (v96 ^ BYTE2(v96)) & 0x3F;
                v98 = *((unsigned __int16 *)v68 + v97);
                if (v98 != 0xFFFF && v98 != v94)
                {
                  v261 = 1;
                  do
                  {
                    v97 = ((_BYTE)v97 + (_BYTE)v261) & 0x3F;
                    v262 = *((unsigned __int16 *)v68 + v97);
                    ++v261;
                  }
                  while (v262 != 0xFFFF && v262 != v94);
                }
                *((_WORD *)v68 + v97) = v94;
              }
              v100 = v58[13];
              if (v100 != 0xFFFF)
              {
                v101 = 9 * ((~(v100 << 15) + v100) ^ ((~(v100 << 15) + v100) >> 10));
                v102 = (v101 ^ (v101 >> 6)) + ~((v101 ^ (v101 >> 6)) << 11);
                v103 = (v102 ^ BYTE2(v102)) & 0x3F;
                v104 = *((unsigned __int16 *)v68 + v103);
                if (v104 != 0xFFFF && v104 != v100)
                {
                  v264 = 1;
                  do
                  {
                    v103 = ((_BYTE)v103 + (_BYTE)v264) & 0x3F;
                    v265 = *((unsigned __int16 *)v68 + v103);
                    ++v264;
                  }
                  while (v265 != 0xFFFF && v265 != v100);
                }
                *((_WORD *)v68 + v103) = v100;
              }
              v106 = v58[14];
              if (v106 != 0xFFFF)
              {
                v107 = 9 * ((~(v106 << 15) + v106) ^ ((~(v106 << 15) + v106) >> 10));
                v108 = (v107 ^ (v107 >> 6)) + ~((v107 ^ (v107 >> 6)) << 11);
                v109 = (v108 ^ BYTE2(v108)) & 0x3F;
                v110 = *((unsigned __int16 *)v68 + v109);
                if (v110 != 0xFFFF && v110 != v106)
                {
                  v267 = 1;
                  do
                  {
                    v109 = ((_BYTE)v109 + (_BYTE)v267) & 0x3F;
                    v268 = *((unsigned __int16 *)v68 + v109);
                    ++v267;
                  }
                  while (v268 != 0xFFFF && v268 != v106);
                }
                *((_WORD *)v68 + v109) = v106;
              }
              v112 = v58[15];
              if (v112 != 0xFFFF)
              {
                v113 = 9 * ((~(v112 << 15) + v112) ^ ((~(v112 << 15) + v112) >> 10));
                v114 = (v113 ^ (v113 >> 6)) + ~((v113 ^ (v113 >> 6)) << 11);
                v115 = (v114 ^ BYTE2(v114)) & 0x3F;
                v116 = *((unsigned __int16 *)v68 + v115);
                if (v116 != 0xFFFF && v116 != v112)
                {
                  v270 = 1;
                  do
                  {
                    v115 = ((_BYTE)v115 + (_BYTE)v270) & 0x3F;
                    v271 = *((unsigned __int16 *)v68 + v115);
                    ++v270;
                  }
                  while (v271 != 0xFFFF && v271 != v112);
                }
                *((_WORD *)v68 + v115) = v112;
              }
              v62 = *(_DWORD *)v9;
              *((_QWORD *)v58 + 2) = v68;
              v63 = 64;
              goto LABEL_123;
            }
          }
        }
        else
        {
          v64 = 0;
LABEL_161:
          *((_DWORD *)v58 + 2) = v62 + 1;
          v58[v64 + 8] = v20;
          LOWORD(v20) = v290;
        }
        goto LABEL_162;
      }
LABEL_123:
      if (3 * v63 <= 4 * v62)
      {
        WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::grow((uint64_t)(v58 + 4), 2 * v63);
        v63 = *((_DWORD *)v58 + 3);
      }
      v14 = *((_QWORD *)v58 + 2);
      v118 = 9 * ((~(v20 << 15) + v20) ^ ((~(v20 << 15) + v20) >> 10));
      v119 = (v118 ^ (v118 >> 6)) + ~((v118 ^ (v118 >> 6)) << 11);
      v120 = v119 ^ HIWORD(v119);
      LODWORD(v31) = v63 - 1;
      v18 = (v63 - 1) & v120;
      v121 = *(unsigned __int16 *)(v14 + 2 * v18);
      LODWORD(v40) = 0xFFFF;
      if (v121 != 0xFFFF && v121 != v20)
      {
LABEL_348:
        v234 = 1;
        do
        {
          v18 = ((_DWORD)v18 + v234) & v31;
          v121 = *(unsigned __int16 *)(v14 + 2 * v18);
          ++v234;
        }
        while (v121 != (_DWORD)v40 && v121 != v20);
      }
      if (v121 != v20)
      {
        *(_WORD *)(v14 + 2 * v18) = v20;
        ++*(_DWORD *)v9;
      }
      goto LABEL_162;
    }
LABEL_140:
    *v58 = v19;
    if (*((_DWORD *)v58 + 3) != 8)
      WTF::fastFree(*((_QWORD *)v58 + 2), (void *)a2, a3, a4, a5, a6, a7, a8);
    *((_QWORD *)v58 + 1) = 0x800000000;
    *((_QWORD *)v58 + 2) = -1;
    *((_QWORD *)v58 + 3) = -1;
    v123 = *v53;
    if (*v53)
      v124 = *(_DWORD *)(v123 - 12) + 1;
    else
      v124 = 1;
    *(_DWORD *)(v123 - 12) = v124;
    v125 = *v53;
    if (*v53)
      v126 = *(_DWORD *)(v125 - 12);
    else
      v126 = 0;
    v127 = (*(_DWORD *)(v125 - 16) + v126);
    v128 = *(unsigned int *)(v125 - 4);
    if (v128 > 0x400)
    {
      if (v128 > 2 * v127)
        goto LABEL_60;
    }
    else
    {
      if (3 * v128 > 4 * v127)
        goto LABEL_60;
      if (!(_DWORD)v128)
      {
        v129 = 8;
LABEL_150:
        v58 = (unsigned __int16 *)WTF::HashTable<unsigned short,WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>>,WTF::DefaultHash<unsigned short>,WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v10 + 80), v129, v58);
        goto LABEL_60;
      }
    }
    v129 = (_DWORD)v128 << (6 * *(_DWORD *)(v125 - 12) >= (2 * v128));
    goto LABEL_150;
  }
LABEL_162:
  if (*(unsigned __int16 *)(v10 + 16) < (unsigned __int16)v20)
  {
    v291 = 0x800000000;
    v292 = -1;
    v293 = -1;
    WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v288, (uint64_t *)(v10 + 80), &v290, (uint64_t)&v291, a5, a6, a7, a8);
    WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v289, (unsigned int *)(v288[0] + 8), v19);
    if (HIDWORD(v291) != 8)
      WTF::fastFree(v292, v273, v274, v275, v276, v277, v278, v279);
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;

  if (!a4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = result;
      v9 = **(_QWORD **)result;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = *(JSC::B3::Air::Inst **)(result + 8);
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980716F8);
          }
          v19 = *(_QWORD *)(v8 + 16);
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          if ((result & 1) != 0)
            goto LABEL_17;
          v32 = *(uint64_t **)(v8 + 8);
          v33 = *((__int16 *)v32 + 60) - 90;
          v34 = v33 > 0x12;
          v35 = (1 << v33) & 0x60011;
          if (!v34 && v35 != 0)
          {
            v37 = *((unsigned int *)v32 + 3);
            if (!(_DWORD)v37)
            {
              __break(0xC471u);
              JUMPOUT(0x198071708);
            }
            v38 = *v32;
            v39 = ((unint64_t)(a2 - v38) >> 5) ^ 1;
            if (v39 >= v37)
            {
              __break(0xC471u);
              JUMPOUT(0x198071710);
            }
            if ((_DWORD)v37 == 2)
            {
              v40 = (_BYTE *)(v38 + 32 * v39);
              if (v40[8] == 9 && *(_BYTE *)(*(_QWORD *)v40 + 4) == 1)
              {
LABEL_17:
                if (a3 > 0xB || ((1 << a3) & 0xFF5) == 0)
                {
                  v21 = *(unsigned int *)v7;
                  goto LABEL_21;
                }
                v20 = *(_QWORD *)(v19 + 40);
                v21 = *(unsigned int *)v7;
                v23 = *(_QWORD *)(v20 + 16);
                v22 = v20 + 16;
                v24 = 2 * v23 + 8;
                if (v23 >= 0)
                  v22 = v24;
                if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0x1FFFFFF8)) >> v21) & 1) == 0)
                {
LABEL_21:
                  if ((int)v21 < 1)
                  {
                    v21 = -(int)v21;
                    if (v21 >= *(unsigned int *)(v19 + 36))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198071718);
                    }
                    v25 = (_QWORD *)(v19 + 24);
                  }
                  else
                  {
                    if (v21 >= *(_DWORD *)(v19 + 20))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198071700);
                    }
                    v25 = (_QWORD *)(v19 + 8);
                  }
                  v26 = (unsigned __int8 *)(*v25 + 2 * v21);
                  v27 = *v26;
                  v28 = v26[1];
                  if (v27 > v28)
                    v28 = v27;
                  if (a3 - 4 <= 6 && v28 > a5)
                    return result;
                  v29 = *(_BYTE **)(v8 + 24);
                  if (v28 == 2)
                  {
                    v30 = *(unsigned int **)(v9 + 16 * v15 + 8);
                    if (*v29)
                    {
LABEL_47:
                      v31 = 4;
LABEL_31:
                      if (*v30 > v31)
                        v31 = *v30;
                      *v30 = v31;
                      *(_BYTE *)(a2 + 24) = 0;
                      *v7 = 0;
                      *(_QWORD *)a2 = v30;
                      *(_WORD *)(a2 + 8) = 521;
                      *(_DWORD *)(a2 + 12) = 0;
                      **(_BYTE **)(v8 + 32) = 1;
                      if ((result & 1) == 0)
                        **(_BYTE **)(v8 + 40) = 1;
                      return result;
                    }
                  }
                  else
                  {
                    *v29 = 0;
                    v30 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  }
                  if (a5 != 3)
                  {
                    v31 = 1;
                    switch(a5)
                    {
                      case 0u:
                        goto LABEL_31;
                      case 1u:
                        v31 = 2;
                        goto LABEL_31;
                      case 2u:
                        goto LABEL_47;
                      case 4u:
                        v31 = 16;
                        goto LABEL_31;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x1980716F0);
                    }
                  }
                  v31 = 8;
                  goto LABEL_31;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  unsigned int *v10;
  uint64_t **v11;

  v9 = **(uint64_t ****)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v10 = (unsigned int *)(a2 + 16);
      v11 = **(uint64_t ****)(a1 + 16);
      goto LABEL_3;
    case 6:
    case 7:
    case 8:
      v10 = (unsigned int *)(a2 + 16);
      goto LABEL_5;
    case 0xB:
      v10 = (unsigned int *)(a2 + 20);
LABEL_5:
      v11 = v9;
      a3 = 0;
      goto LABEL_6;
    case 0xC:
    case 0xD:
      v10 = (unsigned int *)(a2 + 16);
      v11 = **(uint64_t ****)(a1 + 16);
      a3 = 6;
LABEL_6:
      a4 = 0;
LABEL_3:
      break;
    default:
      return;
  }
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  _BYTE v58[12];
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[2];

  if (!(_DWORD)a4)
  {
    v9 = *a2;
    if (v9 <= 0xFFFFFFDF && (v9 - 1) >= 0x20)
    {
      v11 = **a1;
      if (!v11)
        goto LABEL_12;
      v12 = a3;
      v13 = *(_DWORD *)(v11 - 8);
      v14 = 9 * ((v9 + ~((_DWORD)v9 << 15)) ^ ((v9 + ~((_DWORD)v9 << 15)) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = v13 & (v15 ^ HIWORD(v15));
      v17 = *(_DWORD *)(v11 + 16 * v16);
      if (v17 != (_DWORD)v9)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v13;
          v17 = *(_DWORD *)(v11 + 16 * v16);
          ++v18;
          if (v17 == (_DWORD)v9)
            goto LABEL_11;
        }
        v16 = *(unsigned int *)(v11 - 4);
      }
LABEL_11:
      if (v16 != *(_DWORD *)(v11 - 4))
      {
        v23 = a1[3];
        if ((int)v9 < 1)
        {
          v9 = -(int)v9;
          if (v9 >= *((unsigned int *)v23 + 9))
          {
            __break(0xC471u);
            JUMPOUT(0x198071C48);
          }
          v24 = v23 + 3;
        }
        else
        {
          if (v9 >= *((_DWORD *)v23 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x198071C50);
          }
          v24 = v23 + 1;
        }
        v25 = (unsigned __int8 *)(*v24 + 2 * v9);
        v26 = *v25;
        v27 = v25[1];
        if (v26 > v27)
          v27 = v26;
        v28 = v27 >= 3;
        if (v27 == 3)
          v29 = 8;
        else
          v29 = 16;
        if (!v28)
          v29 = 4;
        if (v29 == 8)
        {
          v30 = 90;
        }
        else if (v29 == 4)
        {
          v30 = 94;
        }
        else
        {
          v30 = 113;
        }
        v31 = *v23;
        v32 = *(_DWORD *)(*v23 + 176);
        *(_DWORD *)(v31 + 176) = v32 + 1;
        v33 = (v32 + 33);
        *a2 = v33;
        v34 = a1[4];
        v35 = *v34;
        if (*v34 < 0)
          v36 = 63;
        else
          v36 = *(_QWORD *)(2 * v35);
        if (v36 <= v33)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1[4], v33 + 1, 0);
          v35 = *v34;
        }
        if (v35 >= 0)
          v37 = 2 * v35 + 8;
        else
          v37 = (uint64_t)v34;
        *(_QWORD *)(v37 + ((v33 >> 3) & 0x1FFFFFF8)) |= 1 << v33;
        if (v12 != 10)
        {
          v38 = *(_QWORD *)(v11 + 16 * v16 + 8);
          if (v12 > 0xB || ((1 << v12) & 0xB30) == 0)
          {
            v39 = (uint64_t)a1[5];
            v40 = *(unsigned int *)a1[6];
            v41 = *a2;
            *(_QWORD *)v55 = v38;
            *(_WORD *)&v55[8] = 521;
            *(_QWORD *)&v55[12] = 0;
            *(_QWORD *)&v55[17] = 0;
            *(_QWORD *)&v56 = 0;
            WORD4(v56) = 513;
            HIDWORD(v56) = 1;
            *(_QWORD *)&v57 = v41;
            BYTE8(v57) = 0;
            v62 = *(_OWORD *)v55;
            v63 = *(_OWORD *)&v55[16];
            v64 = v56;
            *(_QWORD *)v58 = a1[7][14];
            *(_DWORD *)&v58[8] = v30;
            v59 = v40;
            v60 = (WTF *)&v62;
            v65 = v57;
            v61 = 0x200000003;
            v66[0] = *(_QWORD *)v58;
            *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v39, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
            v43 = v60;
            if (&v62 != (__int128 *)v60)
            {
              if (v60)
              {
                v60 = 0;
                LODWORD(v61) = 0;
                WTF::fastFree((unint64_t)v43, v42, a3, a4, a5, a6, a7, a8);
              }
            }
          }
          if (v12 - 4 <= 6)
          {
            v44 = (uint64_t)a1[5];
            v45 = *(_DWORD *)a1[6];
            v46 = *a2;
            *(_QWORD *)&v57 = 0;
            BYTE8(v57) = 0;
            *(_QWORD *)v55 = 0;
            *(_WORD *)&v55[8] = 513;
            *(_DWORD *)&v55[12] = 1;
            *(_QWORD *)&v55[16] = v46;
            v55[24] = 0;
            *(_QWORD *)&v56 = v38;
            WORD4(v56) = 521;
            HIDWORD(v56) = 0;
            v62 = *(_OWORD *)v55;
            v63 = *(_OWORD *)&v55[16];
            v64 = v56;
            *(_QWORD *)v58 = a1[7][14];
            *(_DWORD *)&v58[8] = v30;
            v59 = (v45 + 1);
            v60 = (WTF *)&v62;
            v65 = v57;
            v61 = 0x200000003;
            v66[0] = *(_QWORD *)v58;
            *(_DWORD *)((char *)v66 + 7) = *(_DWORD *)&v58[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v44, (unint64_t)&v59, a3, a4, a5, a6, a7, a8);
            v54 = v60;
            if (&v62 != (__int128 *)v60)
            {
              if (v60)
              {
                v60 = 0;
                LODWORD(v61) = 0;
                WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
              }
            }
          }
        }
      }
      else
      {
LABEL_12:
        v19 = a1[1];
        if (*((_DWORD *)v19 + 59))
        {
          v20 = (unsigned __int16)*a2;
          v21 = v19[28];
          do
          {
            v22 = v20;
            v20 = *(unsigned __int16 *)(v21 + 2 * v20);
          }
          while ((_DWORD)v20);
          if ((_DWORD)v9 != v22)
          {
            *a2 = v22;
            *(_BYTE *)a1[2] = 1;
          }
        }
      }
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::AbstractColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  WTF *v11;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  const void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v11 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v11;
  if ((_DWORD)v11)
  {
    v13 = (_BYTE *)WTF::fastMalloc(v11);
    *(_DWORD *)(a1 + 8) = (_DWORD)v11;
    *(_QWORD *)a1 = v13;
    v14 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v14)
    {
      v15 = *(char **)a3;
      do
      {
        v16 = *v15++;
        *v13++ = v16;
        --v14;
      }
      while (v14);
    }
  }
  *(_OWORD *)(a1 + 48) = 0u;
  v17 = (_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 16) = 32;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 164) = a4;
  if (a4)
  {
    if (a4 >> 30)
      goto LABEL_47;
    v18 = (void *)WTF::fastMalloc((WTF *)(4 * a4));
    *(_DWORD *)(a1 + 160) = a4;
    *(_QWORD *)(a1 + 152) = v18;
    v19 = *(unsigned int *)(a1 + 164);
    if ((_DWORD)v19)
      bzero(v18, 4 * v19);
  }
  *(_QWORD *)(a1 + 168) = 0x8000000000000000;
  *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  v20 = (_QWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a5;
  *(_QWORD *)(a1 + 248) = a6;
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 4;
  v21 = *(unsigned int *)(a1 + 76);
  if (v21 >= a4)
    goto LABEL_10;
  v35 = *(unsigned int *)(a1 + 72);
  if (v35 >= a4)
    goto LABEL_10;
  v36 = v35 + (v35 >> 2);
  if (v36 >= 0x10)
    v37 = v36 + 1;
  else
    v37 = 16;
  if (v37 <= a4)
    v38 = a4;
  else
    v38 = v37;
  if (v38 >> 30)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x198071F1CLL);
  }
  v39 = *(const void **)(a1 + 64);
  v40 = (void *)WTF::fastMalloc((WTF *)(4 * v38));
  *(_DWORD *)(a1 + 72) = v38;
  *(_QWORD *)(a1 + 64) = v40;
  memcpy(v40, v39, 4 * v21);
  if (v39)
  {
    if (*(const void **)(a1 + 64) == v39)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v39, v41, v42, v43, v44, v45, v46, v47);
  }
LABEL_10:
  *(_DWORD *)(a1 + 76) = a4;
  v22 = *(_DWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = (v22 + 1);
  if (v22 == -1)
  {
    v25 = 0;
  }
  else
  {
    memset(*(void **)(a1 + 64), 255, 4 * (v22 + 1));
    v25 = v24;
  }
  bzero((void *)(v23 + 4 * v25), 4 * (a4 - v24));
  v26 = *(unsigned int *)(a1 + 56);
  if (v26 < a4)
  {
    v27 = v26 + (v26 >> 2);
    if (v27 >= 0x10)
      v28 = v27 + 1;
    else
      v28 = 16;
    if (v28 <= a4)
      v29 = a4;
    else
      v29 = v28;
    WTF::Vector<WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 48, v29);
  }
  if (*v17)
  {
    v30 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v30 != a4)
      bzero((void *)(*v17 + 16 * v30), (16 * a4 - 16 * v30) & 0xFFFFFFFFFFFFFFF0);
  }
  *(_DWORD *)(a1 + 60) = a4;
  WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 104, a4);
  v31 = *(_QWORD *)(a1 + 168);
  if (v31 < 0)
    v32 = 63;
  else
    v32 = *(_QWORD *)(2 * v31);
  if (v32 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 168), a4, 0);
  if ((*v20 & 0x8000000000000000) != 0)
    v33 = 63;
  else
    v33 = *(_QWORD *)(2 * *v20);
  if (v33 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 208), a4, 0);
  return a1;
}

void WTF::Vector<WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = 16 * v5;
        v16 = (_DWORD *)(v4 + 8);
        do
        {
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          v17 = *((_QWORD *)v16 - 1);
          *((_QWORD *)v16 - 1) = 0;
          *(_QWORD *)v14 = v17;
          LODWORD(v17) = *v16;
          *v16 = 0;
          *(_DWORD *)(v14 + 8) = v17;
          LODWORD(v17) = v16[1];
          v16[1] = 0;
          *(_DWORD *)(v14 + 12) = v17;
          v18 = *((_QWORD *)v16 - 1);
          if (v18)
          {
            *((_QWORD *)v16 - 1) = 0;
            *v16 = 0;
            WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
          }
          v16 += 4;
          v14 += 16;
          v15 -= 16;
        }
        while (v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::setMaxIndex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;

  v8 = (int)a2;
  v10 = a2;
  v11 = *(unsigned int *)(a1 + 12);
  if (v11 >= a2)
  {
    if ((_DWORD)v11 == (_DWORD)a2)
      goto LABEL_50;
    v37 = *(_QWORD *)a1 + 24 * a2;
    v38 = 24 * v11 - 24 * a2;
    while (1)
    {
      if (*(_DWORD *)(v37 + 8) == -1)
      {
        if (*(_QWORD *)v37)
        {
          v39 = *(_QWORD *)v37 - 16;
          goto LABEL_39;
        }
      }
      else if ((*(_QWORD *)v37 & 0x8000000000000000) == 0)
      {
        v39 = 2 * *(_QWORD *)v37;
LABEL_39:
        WTF::fastFree(v39, a2, a3, a4, a5, a6, a7, a8);
      }
      v37 += 24;
      v38 -= 24;
      if (!v38)
        goto LABEL_50;
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = *(_QWORD *)a1;
  if (v12 >= a2)
    goto LABEL_46;
  v14 = v12 + (v12 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= a2)
    v15 = a2;
  if (v15 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    return;
  }
  v16 = 24 * v15;
  v24 = WTF::fastMalloc((WTF *)(24 * v15));
  *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x18;
  *(_QWORD *)a1 = v24;
  if (!(_DWORD)v11)
    goto LABEL_42;
  v25 = 24 * v11;
  v26 = (_QWORD *)v13;
  do
  {
    v27 = v26[1];
    *(_QWORD *)(v24 + 8) = v27;
    *(_DWORD *)(v24 + 16) = *((_DWORD *)v26 + 4);
    if ((_DWORD)v27 == -1)
    {
      *(_QWORD *)v24 = 0;
      v29 = *v26;
      *v26 = 0;
      *(_QWORD *)v24 = v29;
    }
    else
    {
      *(_QWORD *)v24 = 0x8000000000000000;
      v28 = *v26;
      if ((*v26 & 0x8000000000000000) == 0 && v28 >= 2)
      {
        v31 = *(_QWORD *)(2 * v28) + 63;
        v32 = v31 & 0xFFFFFFFFFFFFFFC0;
        v33 = WTF::fastMalloc((WTF *)(((v31 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v33 = v32;
        v34 = (_QWORD *)(2 * *v26);
        v35 = (uint64_t)*v26 >= 0 ? v34 + 1 : v26;
        v36 = (*v26 & 0x8000000000000000) != 0 ? 8 : (unint64_t)(*v34 + 7) >> 3;
        memcpy((void *)(v33 + 8), v35, v36);
        v28 = v33 >> 1;
        if (*(uint64_t *)v24 >= 2)
          WTF::fastFree(2 * *(_QWORD *)v24, v17, v18, v19, v20, v21, v22, v23);
      }
      *(_QWORD *)v24 = v28;
    }
    if (*((_DWORD *)v26 + 2) == -1)
    {
      if (!*v26)
        goto LABEL_21;
      v30 = *v26 - 16;
    }
    else
    {
      if ((*v26 & 0x8000000000000000) != 0)
        goto LABEL_21;
      v30 = 2 * *v26;
    }
    WTF::fastFree(v30, v17, v18, v19, v20, v21, v22, v23);
LABEL_21:
    v24 += 24;
    v26 += 3;
    v25 -= 24;
  }
  while (v25);
  v24 = *(_QWORD *)a1;
LABEL_42:
  if (v13)
  {
    if (v24 == v13)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v13, v17, v18, v19, v20, v21, v22, v23);
    v13 = *(_QWORD *)a1;
LABEL_46:
    if (v13)
    {
LABEL_47:
      v40 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v40 != v8)
      {
        v41 = 3 * v40;
        v42 = 24 * v10 - 24 * v40;
        v43 = (_DWORD *)(v13 + 8 * v41 + 16);
        do
        {
          *((_QWORD *)v43 - 2) = 0x8000000000000000;
          *((_QWORD *)v43 - 1) = 0;
          *v43 = 0;
          v43 += 6;
          v42 -= 24;
        }
        while (v42);
      }
    }
  }
  else
  {
    v13 = v24;
    if (v24)
      goto LABEL_47;
  }
LABEL_50:
  *(_DWORD *)(a1 + 12) = v8;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD **v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD **v43;
  uint64_t v44;
  _QWORD *v45;
  char *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  char **v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  _QWORD v76[3];
  _QWORD **v77;
  _QWORD **v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t **v81;
  void *v82;
  void **v83;
  uint64_t ***v84;

  v77 = a3;
  v78 = a2;
  v76[0] = &v78;
  v76[1] = &v77;
  v76[2] = a1;
  v79 = v76;
  if (!a2)
    goto LABEL_18;
  v80 = (uint64_t *)&v79;
  v81 = &v80;
  if ((*((__int16 *)a2 + 60) - 446) > 5)
  {
    v8 = *((unsigned int *)a2 + 3);
    if (!(_DWORD)v8)
      goto LABEL_18;
    v9 = 0;
    v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
    v11 = 1;
    while (1)
    {
      if (v9 >= *((unsigned int *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19807291CLL);
      }
      v12 = v10[v9];
      if ((v12 >> 5) - 1 >= 5)
        goto LABEL_105;
      v13 = (char *)&(*a2)[v11];
      v14 = *v13;
      v15 = *((_DWORD *)v13 + 2);
      if ((v14 - 12) >= 2)
      {
        if (v14 != 1 || (v12 & 0xC) != 4)
          goto LABEL_15;
        v17 = (v12 >> 4) & 1;
        v16 = *v80;
        LODWORD(v82) = v15;
      }
      else
      {
        v16 = *v80;
        LODWORD(v82) = v15;
        v17 = 0;
      }
LABEL_15:
      ++v9;
      v11 += 4;
      if (v8 == v9)
        goto LABEL_18;
    }
  }
  v82 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
  v83 = &v82;
  v84 = &v81;
  JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v82);
LABEL_18:
  if (a3)
  {
    v80 = (uint64_t *)&v79;
    v81 = &v80;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v19 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 1;
        do
        {
          if (v20 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198072924);
          }
          v23 = v21[v20];
          if ((v23 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198072914);
          }
          v24 = &(*a3)[v22];
          if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
          {
            v25 = *v80;
            LODWORD(v82) = *((_DWORD *)v24 + 2);
          }
          ++v20;
          v22 += 4;
        }
        while (v19 != v20);
      }
    }
    else
    {
      v82 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v83 = &v82;
      v84 = &v81;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v82);
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198072954);
    }
    v26 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v28 = v27 | v26;
    if (v27 | v26)
    {
      v29 = v26;
      do
      {
        v30 = __clz(__rbit64(v28));
        v31 = (char)(31 - v30);
        if (v30 < 0x20)
          v31 = v30 + 1;
        LODWORD(v82) = v31;
        v28 &= v28 - 1;
      }
      while (v28);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19807295CLL);
    }
    v32 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v34 = v33 | v32;
    if (v33 | v32)
    {
      v35 = v32;
      do
      {
        v36 = __clz(__rbit64(v34));
        v37 = (char)(31 - v36);
        if (v36 < 0x20)
          v37 = v36 + 1;
        LODWORD(v82) = v37;
        v34 &= v34 - 1;
      }
      while (v34);
    }
  }
  v38 = v78;
  if (!v78)
    goto LABEL_55;
  v39 = *((__int16 *)v78 + 60);
  if ((v39 | 4) != 0x5E)
    goto LABEL_55;
  if (*((_DWORD *)v78 + 3) != 2)
    goto LABEL_55;
  v40 = *v78;
  if (*((_BYTE *)*v78 + 8) != 1 || *((_BYTE *)v40 + 40) != 1)
    goto LABEL_55;
  if (v39 != 94)
    goto LABEL_57;
  v41 = *(_QWORD *)(a1 + 376);
  if (!v41)
    goto LABEL_55;
  v42 = *((unsigned int *)v40 + 4);
  if ((int)v42 < 1)
  {
    v42 = -(int)v42;
    if (v42 >= *(unsigned int *)(v41 + 28))
    {
LABEL_105:
      __break(0xC471u);
      JUMPOUT(0x1980728F4);
    }
    v41 += 16;
  }
  else if (v42 >= *(_DWORD *)(v41 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198072964);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)v41 + 2 * v42 + 1) <= 2u)
  {
LABEL_57:
    v47 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v78 + 60);
    v48 = v47[1];
    if ((v48 >> 5) - 1 >= 5 || (v49 = v47[2], (v49 >> 5) - 1 > 4))
    {
      __break(0xC471u);
      JUMPOUT(0x198072944);
    }
    v50 = v48 & 0xC;
    v51 = *((_DWORD *)v40 + 4);
    v52 = v50 == 4;
    if (v50 == 4)
      v53 = 0;
    else
      v53 = *((_DWORD *)v40 + 4);
    if (!v52)
      v51 = 0;
    v54 = *((_DWORD *)v40 + 12);
    v55 = v49 & 0xC;
    if (v55 == 4)
      v56 = v54;
    else
      v56 = v51;
    if (v55 == 4)
      v57 = v53;
    else
      v57 = v54;
    v58 = (char **)(a1 + 88);
    v82 = (void *)__PAIR64__(v56, v57);
    v59 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v59 == *(_DWORD *)(a1 + 96))
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * *(unsigned int *)(a1 + 100)) = *(_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v58, v59 + 1, (unint64_t)&v82);
    else
      *(_QWORD *)&(*v58)[8 * v59] = v82;
    ++*(_DWORD *)(a1 + 100);
    v60 = *(_DWORD *)(a1 + 316);
    LODWORD(v82) = v60;
    v61 = (_QWORD *)(a1 + 320);
    v62 = *(unsigned int *)(a1 + 332);
    LODWORD(v76[0]) = v62;
    if ((_DWORD)v62 == *(_DWORD *)(a1 + 328))
      *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * *(unsigned int *)(a1 + 332)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v82);
    else
      *(_DWORD *)(*v61 + 4 * v62) = v60;
    v63 = (_QWORD *)(a1 + 304);
    ++*(_DWORD *)(a1 + 332);
    v64 = *(unsigned int *)(a1 + 316);
    if ((_DWORD)v64 == *(_DWORD *)(a1 + 312))
      *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(a1 + 316)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)v76);
    else
      *(_DWORD *)(*v63 + 4 * v64) = v62;
    ++*(_DWORD *)(a1 + 316);
    v65 = *((unsigned int *)v78 + 3);
    if ((_DWORD)v65)
    {
      v66 = 32 * v65;
      v67 = (unsigned int *)(*v78 + 2);
      do
      {
        v69 = *v67;
        v67 += 8;
        v68 = v69;
        if (*(_DWORD *)(a1 + 116) <= v69)
        {
          __break(0xC471u);
          JUMPOUT(0x19807294CLL);
        }
        WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v82, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v68), v59);
        v66 -= 32;
      }
      while (v66);
    }
    v70 = *(unsigned int *)(*a4 + 60);
    if ((_DWORD)v70)
    {
      v71 = *(unsigned int **)(*a4 + 48);
      v72 = 4 * v70;
      do
      {
        if (v57 != *v71)
        ++v71;
        v72 -= 4;
      }
      while (v72);
    }
    v73 = *(unsigned int *)(a1 + 276);
    if ((_DWORD)v73)
    {
      v74 = *(unsigned int **)(a1 + 264);
      v75 = 4 * v73;
      do
      {
        if (v57 != *v74)
        ++v74;
        v75 -= 4;
      }
      while (v75);
    }
    v43 = v77;
    v44 = *a4;
    v45 = (_QWORD *)a1;
    v38 = 0;
  }
  else
  {
LABEL_55:
    v43 = v77;
    v44 = *a4;
    v45 = (_QWORD *)a1;
  }
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(_QWORD *result, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t ****v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t ***v35;
  uint64_t **v36;
  uint64_t ***v37;
  uint64_t *****v38;

  v30[1] = result;
  v31 = a4;
  v30[0] = &v31;
  v34 = v30;
  if (a2)
  {
    v35 = (uint64_t ***)&v34;
    v32 = &v35;
    if ((*((__int16 *)a2 + 60) - 446) > 5)
    {
      v6 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v6 - 1) * v6) >> 1);
        v9 = 1;
        do
        {
          if (v7 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198072CE4);
          }
          v10 = v8[v7];
          if ((v10 >> 5) - 1 >= 5)
            goto LABEL_46;
          ++v7;
          v9 += 4;
        }
        while (v6 != v7);
      }
    }
    else
    {
      v36 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v37 = &v36;
      v38 = &v32;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v36);
    }
  }
  if (a3)
  {
    v35 = (uint64_t ***)&v34;
    v32 = &v35;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v11 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v11 - 1) * v11) >> 1);
        do
        {
          if (v12 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198072CECLL);
          }
          v14 = v13[v12];
          if ((v14 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198072CD4);
          }
          v15 = (uint64_t)&(*a3)[4 * v12];
          if (*(_BYTE *)(v15 + 8) == 1 && (v14 & 0xF) - 8 <= 2 && (v14 & 0x10) == 0)
          {
            v16 = *(_DWORD *)(v15 + 16);
            v17 = (*v35)[1];
            v18 = ***v35;
            v19 = *(unsigned int *)(v18 + 60);
            if ((_DWORD)v19)
            {
              v20 = *(unsigned int **)(v18 + 48);
              v21 = 4 * v19;
              do
              {
                v22 = *v20;
                v23 = v17[47];
                if ((int)*v20 <= 0)
                {
                  if (*(_DWORD *)(v23 + 28) <= -v22)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198072CF4);
                  }
                }
                else if (v22 >= *(_DWORD *)(v23 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198072CDCLL);
                }
                ++v20;
                v21 -= 4;
              }
              while (v21);
            }
            v24 = *((unsigned int *)v17 + 69);
            if ((_DWORD)v24)
            {
              v25 = (unsigned int *)v17[33];
              v26 = 4 * v24;
              do
              {
                v27 = *v25++;
                v26 -= 4;
              }
              while (v26);
            }
          }
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      v36 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v37 = &v36;
      v38 = &v32;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v36);
    }
  }
  v36 = (uint64_t **)v30;
  v37 = (uint64_t ***)&v35;
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    LOBYTE(v35) = 4;
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198072CFCLL);
    }
    v32 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v33 = v28;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v35) = 8;
    if (*((_DWORD *)a3 + 3))
    {
      v32 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
      v33 = v29;
    }
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198072CB4);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v10;
  int v11;

  v4 = *(char *)(a2 + 8);
  v5 = ***(uint64_t ****)(result + 16);
  if ((v4 - 12) < 2)
  {
    v6 = *v5;
    v11 = *(_DWORD *)(a2 + 16);
    v7 = &v11;
    v8 = 0;
  }
  if (v4 == 1 && (a3 & 0xFC) == 4)
  {
    v6 = *v5;
    v10 = *(_DWORD *)(a2 + 16);
    v7 = &v10;
    v8 = a4;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[3];
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void **v31;
  _QWORD *v32;

  v27 = a4;
  if (a3)
    return result;
  v4 = *(_QWORD *)(result + 16);
  v5 = **(_QWORD **)result;
  v6 = **(_QWORD **)(result + 8);
  v26[0] = &v27;
  v26[1] = a2;
  v26[2] = v4;
  if (v5)
  {
    v28 = v26;
    v29 = &v28;
    if ((*(__int16 *)(v5 + 120) - 446) <= 5)
    {
      v30 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v31 = &v30;
      v32 = &v29;
      result = JSC::B3::Air::Inst::forEachArgCustom(v5, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v30);
      goto LABEL_26;
    }
    v7 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(v5 + 120) + ((unint64_t)((v7 - 1) * v7) >> 1);
      v10 = 8;
      do
      {
        if (v8 >= *(unsigned int *)(v5 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19807304CLL);
        }
        v11 = v9[v8];
        v12 = (v11 >> 5) - 1;
        if (v12 >= 5)
          goto LABEL_44;
        v13 = 0xFu >> v12;
        v14 = (char *)(*(_QWORD *)v5 + v10);
        v15 = *v14;
        if ((v15 - 12) >= 2)
        {
          v18 = v15 == 1 && (v11 & 0xC) == 4;
          if (!v18 || (v11 & 0x10) != 0)
            goto LABEL_25;
          result = v28[2];
          if ((v13 & 1) == 0)
          {
LABEL_24:
            goto LABEL_25;
          }
        }
        else
        {
          v16 = v13 & 1;
          result = v28[2];
          if ((v11 & 0xF) == 0xB && v16 == 0)
            goto LABEL_24;
        }
        if (!*(_BYTE *)*v28)
          goto LABEL_24;
LABEL_25:
        ++v8;
        v10 += 32;
      }
      while (v7 != v8);
    }
  }
LABEL_26:
  if (v6)
  {
    v28 = v26;
    v29 = &v28;
    if ((*(__int16 *)(v6 + 120) - 446) > 5)
    {
      v19 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v6 + 120)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 8;
        while (v20 < *(unsigned int *)(v6 + 12))
        {
          v23 = v21[v20];
          v24 = (v23 >> 5) - 1;
          if (v24 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198073044);
          }
          v25 = *(_QWORD *)v6 + v22;
          if (*(_BYTE *)v25 == 1 && (v23 & 0xF) - 8 <= 2 && (v23 & 0x10) == 0)
          {
            result = v28[2];
            if (((0xFu >> v24) & 1) == 0 || !*(_BYTE *)*v28)
          }
          ++v20;
          v22 += 32;
          if (v19 == v20)
            return result;
        }
LABEL_44:
        __break(0xC471u);
        JUMPOUT(0x198073024);
      }
    }
    else
    {
      v30 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v31 = &v30;
      v32 = &v29;
      return JSC::B3::Air::Inst::forEachArgCustom(v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v30);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4, unsigned int a5)
{
  int v5;
  uint64_t v6;
  BOOL v7;

  v5 = *(char *)(a2 + 8);
  v6 = ***(_QWORD ***)(result + 16);
  if ((v5 - 12) >= 2)
  {
    v7 = v5 == 1 && (a3 & 0xFC) == 4;
    if (!v7 || a4)
      return result;
    result = *(_QWORD *)(v6 + 16);
    goto LABEL_3;
  }
  result = *(_QWORD *)(v6 + 16);
  if (a3 == 11)
  {
LABEL_3:
    if (a5 > 3)
  }
  if (!**(_BYTE **)v6)
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::addEdge(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  if (a2 != a3)
  {
    v3 = a3;
    v4 = a2;
    v5 = result;
    v12 = a3;
    v13 = a2;
    if (a3 >= a2)
      v6 = a2;
    else
      v6 = a3;
    if (*(_DWORD *)(result + 36) <= v6)
    {
      __break(0xC471u);
    }
    else
    {
      if (a3 > a2)
        a2 = a3;
      result = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(*(_QWORD *)(result + 24) + 24 * v6), a2);
      *(_DWORD *)(v5 + 40) += result;
      if ((_BYTE)result)
      {
        v7 = *(_DWORD *)(v5 + 16);
        if (v7 < v4)
        {
          v8 = *(_QWORD *)(v5 + 48) + 16 * v4;
          v9 = *(unsigned int *)(v8 + 12);
          if ((_DWORD)v9 == *(_DWORD *)(v8 + 8))
          {
            result = (uint64_t)WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(*(_QWORD *)(v5 + 48) + 16 * v4), v9 + 1, (unint64_t)&v12);
            *(_DWORD *)(*(_QWORD *)v8 + 4 * *(unsigned int *)(v8 + 12)) = *(_DWORD *)result;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)v8 + 4 * v9) = v3;
          }
          ++*(_DWORD *)(v8 + 12);
          ++*(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * v4);
          v3 = v12;
          v7 = *(_DWORD *)(v5 + 16);
        }
        if (v7 < v3)
        {
          v10 = *(_QWORD *)(v5 + 48) + 16 * v3;
          v11 = *(unsigned int *)(v10 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
          {
            result = (uint64_t)WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v10, v11 + 1, (unint64_t)&v13);
            *(_DWORD *)(*(_QWORD *)v10 + 4 * *(unsigned int *)(v10 + 12)) = *(_DWORD *)result;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)v10 + 4 * v11) = v4;
          }
          ++*(_DWORD *)(v10 + 12);
          ++*(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * v12);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add(WTF::BitVector *this, unsigned int a2)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  _DWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  uint64_t result;
  unint64_t v45;
  uint64_t v46;
  WTF::BitVector *v47;
  WTF::BitVector *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  WTF::BitVector *v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  _QWORD v87[2];
  char v88;
  int v89;
  uint64_t v90;

  v86 = a2;
  v3 = *((_DWORD *)this + 2);
  if (v3 == -1)
  {
    WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add((uint64_t *)this, (int *)&v86, (uint64_t)v87);
    if (!v88)
      return 0;
    v14 = v86 & 0xFFFFFFC0;
    if ((v86 & 0xFFFFFFC0) >= *((_DWORD *)this + 3))
      v14 = *((_DWORD *)this + 3);
    if (*((_DWORD *)this + 4) <= v86)
      v15 = v86;
    else
      v15 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 3) = v14;
    *((_DWORD *)this + 4) = v15;
    v16 = *(_DWORD **)this;
    if (!*(_QWORD *)this)
      return 1;
    v17 = v15 - v14;
    if (((v17 >> 2) & 0x3FFFFFFE) >= 4 * *(v16 - 1))
      return 1;
    v87[0] = 0x8000000000000000;
    v18 = v17 + 1;
    if (v18 > 0x3F)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v87, v18, 0);
      v16 = *(_DWORD **)this;
      *((_DWORD *)this + 2) = 0;
      if (!v16)
      {
LABEL_35:
        *(_QWORD *)this = 0x8000000000000000;
        v29 = v87[0];
        if ((v87[0] & 0x8000000000000000) != 0)
        {
          *(_QWORD *)this = v87[0];
        }
        else
        {
          v82 = (_QWORD *)(2 * v87[0]);
          if (v87[0] >= 2uLL)
          {
            v83 = *v82 + 63;
            v84 = v83 & 0xFFFFFFFFFFFFFFC0;
            v85 = WTF::fastMalloc((WTF *)(((v83 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v85 = v84;
            memcpy((void *)(v85 + 8), v82 + 1, (unint64_t)(*v82 + 7) >> 3);
            v29 = v85 >> 1;
            if (*(uint64_t *)this >= 2)
              WTF::fastFree(2 * *(_QWORD *)this, (void *)v18, v8, v9, v10, v11, v12, v13);
          }
          *(_QWORD *)this = v29;
          WTF::fastFree((unint64_t)v82, (void *)v18, v8, v9, v10, v11, v12, v13);
        }
        return 1;
      }
    }
    else
    {
      *((_DWORD *)this + 2) = 0;
    }
    v19 = *(v16 - 1);
    v20 = &v16[v19];
    v21 = v20;
    if (*(v16 - 3))
    {
      v21 = v16;
      if ((_DWORD)v19)
      {
        v22 = 4 * v19;
        v21 = v16;
        while (*v21 >= 0xFFFFFFFE)
        {
          ++v21;
          v22 -= 4;
          if (!v22)
          {
            v21 = v20;
            break;
          }
        }
      }
    }
    v23 = &v16[*(v16 - 1)];
    if (v23 != v21)
    {
      v24 = 0;
      v25 = *((_DWORD *)this + 3);
      do
      {
        v26 = v21 + 1;
        v27 = (*v21 - v25);
        if (v87[0] >= 0)
          v28 = (_QWORD *)(2 * v87[0] + 8);
        else
          v28 = v87;
        *(_QWORD *)((char *)v28 + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
        *((_DWORD *)this + 2) = ++v24;
        v21 = v20;
        if (v26 != v20)
        {
          v21 = v26;
          while (*v21 >= 0xFFFFFFFE)
          {
            if (++v21 == v20)
            {
              v21 = v20;
              break;
            }
          }
        }
      }
      while (v21 != v23);
      v16 = *(_DWORD **)this;
    }
    if (v16)
      WTF::fastFree((unint64_t)(v16 - 4), (void *)v18, v8, v9, v10, v11, v12, v13);
    goto LABEL_35;
  }
  if (!v3)
  {
    *((_DWORD *)this + 3) = a2 & 0xFFFFFFC0;
    *((_DWORD *)this + 4) = a2;
    *((_DWORD *)this + 2) = 1;
    v5 = a2 & 0x3F;
    v6 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0x8000000000000000) != 0)
      v7 = 63;
    else
      v7 = *(_QWORD *)(2 * v6);
    if (v7 <= v5)
    {
      WTF::BitVector::resizeOutOfLine(this, v5 + 1, 0);
      v6 = *(_QWORD *)this;
    }
    if (v6 >= 0)
      v47 = (WTF::BitVector *)(2 * v6 + 8);
    else
      v47 = this;
    result = 1;
    *(_QWORD *)v47 |= 1 << v5;
    return result;
  }
  v30 = *((_DWORD *)this + 3);
  v31 = a2 - v30;
  if (a2 >= v30)
  {
    v32 = *((_DWORD *)this + 4);
    if (v32 >= a2)
    {
      if (*(uint64_t *)this >= 0)
        v48 = (WTF::BitVector *)(2 * *(_QWORD *)this + 8);
      else
        v48 = this;
      v49 = (v31 >> 3) & 0x1FFFFFF8;
      v50 = 1 << v31;
      v51 = *(_QWORD *)((char *)v48 + v49);
      result = (v51 & v50) == 0;
      *(_QWORD *)((char *)v48 + v49) = v51 | v50;
      if ((v51 & v50) == 0)
        ++v3;
      *((_DWORD *)this + 2) = v3;
      return result;
    }
  }
  else
  {
    v32 = *((_DWORD *)this + 4);
  }
  v33 = v3 + 1;
  *((_DWORD *)this + 2) = v3 + 1;
  if ((a2 & 0xFFFFFFC0) >= v30)
    v34 = v30;
  else
    v34 = a2 & 0xFFFFFFC0;
  if (v32 <= a2)
    v35 = a2;
  else
    v35 = v32;
  if (v33 > 8)
    v36 = v3 + 1;
  else
    v36 = 8;
  if (24 * v36 < (v35 - v34) >> 3)
  {
    v37 = (v3 + 2);
    v38 = v33 | (v33 >> 1) | ((v33 | (v33 >> 1)) >> 2);
    v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
    v40 = (v39 | HIWORD(v39)) + 1;
    if (v40 > 0x400)
    {
      if (v40 > 2 * v37)
        goto LABEL_84;
    }
    else if (3 * v40 > 4 * v37)
    {
LABEL_53:
      v41 = (double)v37;
      v42 = (double)v40;
      v43 = 0.604166667;
LABEL_85:
      if (v42 * v43 <= v41)
        LODWORD(v40) = 2 * v40;
      if (v40 <= 8)
        v56 = 8;
      else
        v56 = v40;
      v57 = WTF::fastMalloc((WTF *)(4 * v56 + 16));
      memset((void *)(v57 + 16), 255, 4 * v56);
      v90 = v57 + 16;
      *(_DWORD *)(v57 + 8) = v56 - 1;
      *(_DWORD *)(v57 + 12) = v56;
      *(_QWORD *)v57 = 0;
      v65 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x8000000000000000) != 0)
      {
        v81 = __clz(__rbit64(v65));
        v67 = 63;
        if (v81 >= 0x3F)
          v71 = 63;
        else
          v71 = v81;
      }
      else
      {
        v66 = 2 * v65;
        v67 = *(_QWORD *)(2 * v65);
        if ((unint64_t)(v67 + 63) < 0x40)
          goto LABEL_117;
        v68 = *(_QWORD *)(2 * v65 + 8);
        if (v68 && (v69 = __clz(__rbit64(v68)), v69 < 0x40))
        {
          v70 = 0;
        }
        else
        {
          if ((unint64_t)(v67 + 63) >> 6 == 1)
            goto LABEL_117;
          v79 = 0;
          while (1)
          {
            v80 = *(_QWORD *)(2 * v65 + 0x10 + 8 * v79);
            if (v80)
            {
              v69 = __clz(__rbit64(v80));
              if (v69 <= 0x3F)
                break;
            }
            if (((unint64_t)(v67 + 63) >> 6) - 1 == ++v79)
              goto LABEL_97;
          }
          v70 = v79 + 1;
        }
        v71 = v69 + (v70 << 6);
      }
      if (v71 == v67)
      {
LABEL_97:
        if ((v65 & 0x8000000000000000) != 0)
        {
LABEL_98:
          *(_QWORD *)this = v90;
          *((_DWORD *)this + 2) = -1;
          WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::add((uint64_t *)this, (int *)&v86, (uint64_t)v87);
          *((_DWORD *)this + 3) = v34;
          *((_DWORD *)this + 4) = v35;
          return 1;
        }
        v66 = 2 * v65;
LABEL_117:
        WTF::fastFree(v66, v58, v59, v60, v61, v62, v63, v64);
        goto LABEL_98;
      }
      while (1)
      {
        v89 = *((_DWORD *)this + 3) + v71;
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(&v90, &v89, (uint64_t)v87);
        v72 = v71 + 1;
        v65 = *(_QWORD *)this;
        if ((*(_QWORD *)this & 0x8000000000000000) != 0)
        {
          v78 = __clz(__rbit64(v65 >> v72)) + v72;
          if (v78 >= 0x3F)
            v71 = 63;
          else
            v71 = v78;
          goto LABEL_105;
        }
        v71 = *(_QWORD *)(2 * v65);
        v73 = v71 + 63;
        v74 = v72 >> 6;
        if (v72 >> 6 < (unint64_t)(v71 + 63) >> 6)
        {
          v75 = *(_QWORD *)(2 * v65 + 8 * v74 + 8);
          if (!v75 || (v76 = __clz(__rbit64(v75 >> v72)) + (v72 & 0x3F), v76 >= 0x40))
          {
            if (v74 + 1 == v73 >> 6)
              goto LABEL_105;
            while (1)
            {
              v77 = *(_QWORD *)(2 * v65 + 0x10 + 8 * v74);
              if (v77)
              {
                v76 = __clz(__rbit64(v77));
                if (v76 <= 0x3F)
                  break;
              }
              if ((v73 >> 6) - 1 == ++v74)
                goto LABEL_105;
            }
            ++v74;
          }
          v71 = v76 + (v74 << 6);
        }
LABEL_105:
        if (v71 == v67)
          goto LABEL_97;
      }
    }
    LODWORD(v40) = 2 * v40;
    if (v40 <= 0x400)
      goto LABEL_53;
LABEL_84:
    v41 = (double)v37;
    v42 = (double)v40;
    v43 = 0.416666667;
    goto LABEL_85;
  }
  if (a2 < v30)
  {
    v45 = v30 - v34;
    if ((((_BYTE)v30 - (_BYTE)v34) & 0x3F) != 0)
    {
      result = 93;
      __break(0xC471u);
      return result;
    }
    if ((*(_QWORD *)this & 0x8000000000000000) != 0)
      v46 = 63;
    else
      v46 = *(_QWORD *)(2 * *(_QWORD *)this);
    WTF::BitVector::resizeOutOfLine(this, v46 + v45, v45 >> 6);
    *((_DWORD *)this + 3) = v34;
    v30 = v34;
  }
  v52 = a2 - v30;
  v53 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    v54 = 63;
  else
    v54 = *(_QWORD *)(2 * v53);
  if (v54 <= v52)
  {
    WTF::BitVector::resizeOutOfLine(this, v52 + 1, 0);
    v53 = *(_QWORD *)this;
  }
  if (v53 >= 0)
    v55 = (WTF::BitVector *)(2 * v53 + 8);
  else
    v55 = this;
  result = 1;
  *(_QWORD *)((char *)v55 + ((v52 >> 3) & 0x1FFFFFF8)) |= 1 << v52;
  *((_DWORD *)this + 4) = v35;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13 != -1)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v6 - 4);
        v24 = 0;
        v25 = v6 + 4 * v23;
        goto LABEL_25;
      }
      if (v14 == -2)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13 != -1);
    if (v15)
    {
      *v15 = -1;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_18:
      result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(v4, v13);
      v13 = (int *)result;
      v19 = *v4;
      if (*v4)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_18;
  }
  v25 = v19 + 4 * v22;
  v24 = 1;
LABEL_25:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v24;
  return result;
}

char *WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 4)
        v9 = v8 + 1;
      else
        v9 = 4;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 4 * v6);
        v19 = *a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
          v19 = *a1;
        }
        return &v19[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x198073BF4);
    }
  }
  v20 = *((unsigned int *)a1 + 2);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 4)
    v22 = v21 + 1;
  else
    v22 = 4;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (v23 >> 30)
      goto LABEL_30;
    v24 = *((unsigned int *)a1 + 3);
    v25 = (char *)WTF::fastMalloc((WTF *)(4 * v23));
    *((_DWORD *)a1 + 2) = v23;
    *a1 = v25;
    memcpy(v25, v5, 4 * v24);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return (char *)v3;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !a4)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v5 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      if (v5 <= 0x1F)
      {
        v6 = v5 + 1;
        v7 = (*a2)[1];
        v8 = ***a2;
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v10 = *(unsigned int **)(v8 + 48);
          v11 = 4 * v9;
          if (((1 << v5) & *v4) != 0)
          {
            do
            {
              v12 = *v10;
              v13 = v7[47];
              if ((int)*v10 <= 0)
              {
                if (*(_DWORD *)(v13 + 28) <= -v12)
                  goto LABEL_86;
              }
              else if (v12 >= *(_DWORD *)(v13 + 12))
              {
                goto LABEL_86;
              }
              if (v12 != (_DWORD)v6)
              {
                v43 = *v10;
                v44 = v6;
                if (v12 >= v6)
                  v14 = v6;
                else
                  v14 = v12;
                if (*((_DWORD *)v7 + 9) <= v14)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198074174);
                }
                if (v12 <= v6)
                  v15 = v6;
                else
                  v15 = v12;
                result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v14), v15);
                *((_DWORD *)v7 + 10) += result;
                if ((_BYTE)result)
                {
                  v16 = *((_DWORD *)v7 + 4);
                  if (v16 < v6)
                  {
                    v17 = v7[6] + 16 * v6;
                    v18 = *(unsigned int *)(v17 + 12);
                    if ((_DWORD)v18 == *(_DWORD *)(v17 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v6), v18 + 1, (unint64_t)&v43);
                      *(_DWORD *)(*(_QWORD *)v17 + 4 * *(unsigned int *)(v17 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v17 + 4 * v18) = v12;
                    }
                    ++*(_DWORD *)(v17 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v6);
                    v12 = v43;
                    v16 = *((_DWORD *)v7 + 4);
                  }
                  if (v16 < v12)
                  {
                    v19 = v7[6] + 16 * v12;
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20 == *(_DWORD *)(v19 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v12), v20 + 1, (unint64_t)&v44);
                      *(_DWORD *)(*(_QWORD *)v19 + 4 * *(unsigned int *)(v19 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v19 + 4 * v20) = v6;
                    }
                    ++*(_DWORD *)(v19 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v43);
                  }
                }
              }
              ++v10;
              v11 -= 4;
            }
            while (v11);
          }
          else
          {
            do
            {
              v23 = *v10;
              v22 = v7[47];
              if ((int)*v10 < 1)
              {
                v21 = -v23;
                if (v21 >= *(unsigned int *)(v22 + 28))
                  goto LABEL_86;
                v22 += 16;
              }
              else
              {
                v21 = *v10;
                if (v23 >= *(_DWORD *)(v22 + 12))
                {
LABEL_86:
                  __break(0xC471u);
                  JUMPOUT(0x198074164);
                }
              }
              if (*(unsigned __int8 *)(*(_QWORD *)v22 + 2 * v21) >= 4u && v23 != (_DWORD)v6)
              {
                v43 = *v10;
                v44 = v6;
                if (v23 >= v6)
                  v25 = v6;
                else
                  v25 = v23;
                if (*((_DWORD *)v7 + 9) <= v25)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19807417CLL);
                }
                if (v23 <= v6)
                  v26 = v6;
                else
                  v26 = v23;
                result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v25), v26);
                *((_DWORD *)v7 + 10) += result;
                if ((_BYTE)result)
                {
                  v27 = *((_DWORD *)v7 + 4);
                  if (v27 < v6)
                  {
                    v28 = v7[6] + 16 * v6;
                    v29 = *(unsigned int *)(v28 + 12);
                    if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v6), v29 + 1, (unint64_t)&v43);
                      *(_DWORD *)(*(_QWORD *)v28 + 4 * *(unsigned int *)(v28 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v23;
                    }
                    ++*(_DWORD *)(v28 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v6);
                    v23 = v43;
                    v27 = *((_DWORD *)v7 + 4);
                  }
                  if (v27 < v23)
                  {
                    v30 = v7[6] + 16 * v23;
                    v31 = *(unsigned int *)(v30 + 12);
                    if ((_DWORD)v31 == *(_DWORD *)(v30 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v23), v31 + 1, (unint64_t)&v44);
                      *(_DWORD *)(*(_QWORD *)v30 + 4 * *(unsigned int *)(v30 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v30 + 4 * v31) = v6;
                    }
                    ++*(_DWORD *)(v30 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v43);
                  }
                }
              }
              ++v10;
              v11 -= 4;
            }
            while (v11);
          }
        }
        v32 = *((unsigned int *)v7 + 69);
        if ((_DWORD)v32)
        {
          v33 = (unsigned int *)v7[33];
          v34 = 4 * v32;
          do
          {
            v35 = *v33;
            if (*v33 != (_DWORD)v6)
            {
              v43 = *v33;
              v44 = v6;
              if (v35 >= v6)
                v36 = v6;
              else
                v36 = v35;
              if (*((_DWORD *)v7 + 9) <= v36)
              {
                __break(0xC471u);
                JUMPOUT(0x19807416CLL);
              }
              if (v35 <= v6)
                v37 = v6;
              else
                v37 = v35;
              result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v36), v37);
              *((_DWORD *)v7 + 10) += result;
              if ((_BYTE)result)
              {
                v38 = *((_DWORD *)v7 + 4);
                if (v38 < v6)
                {
                  v39 = v7[6] + 16 * v6;
                  v40 = *(unsigned int *)(v39 + 12);
                  if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
                  {
                    result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v6), v40 + 1, (unint64_t)&v43);
                    *(_DWORD *)(*(_QWORD *)v39 + 4 * *(unsigned int *)(v39 + 12)) = *(_DWORD *)result;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v39 + 4 * v40) = v35;
                  }
                  ++*(_DWORD *)(v39 + 12);
                  ++*(_DWORD *)(v7[8] + 4 * v6);
                  v35 = v43;
                  v38 = *((_DWORD *)v7 + 4);
                }
                if (v38 < v35)
                {
                  v41 = v7[6] + 16 * v35;
                  v42 = *(unsigned int *)(v41 + 12);
                  if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
                  {
                    result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v35), v42 + 1, (unint64_t)&v44);
                    *(_DWORD *)(*(_QWORD *)v41 + 4 * *(unsigned int *)(v41 + 12)) = *(_DWORD *)result;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v41 + 4 * v42) = v6;
                  }
                  ++*(_DWORD *)(v41 + 12);
                  ++*(_DWORD *)(v7[8] + 4 * v43);
                }
              }
            }
            ++v33;
            v34 -= 4;
          }
          while (v34);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t ***_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, int a4)
{
}

uint64_t ***JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Tmp,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t ***result, char a2, unsigned int a3, char a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;

  if ((a2 - 12) >= 2)
  {
    if (a2 == 1 && (a4 & 0xFC) == 4 && !a5)
    {
      v13 = (uint64_t)(*result)[1];
      v14 = ***result;
      v15 = *(unsigned int *)(v14 + 60);
      if ((_DWORD)v15)
      {
        v16 = *(unsigned int **)(v14 + 48);
        v17 = 4 * v15;
        do
        {
          v18 = *v16;
          v19 = *(_QWORD *)(v13 + 376);
          if ((int)*v16 <= 0)
          {
            if (*(_DWORD *)(v19 + 28) <= -v18)
            {
              __break(0xC471u);
              JUMPOUT(0x1980742BCLL);
            }
          }
          else if (v18 >= *(_DWORD *)(v19 + 12))
          {
LABEL_30:
            __break(0xC471u);
            JUMPOUT(0x198074234);
          }
          ++v16;
          v17 -= 4;
        }
        while (v17);
      }
      v24 = *(unsigned int *)(v13 + 276);
      if ((_DWORD)v24)
      {
        v25 = *(unsigned int **)(v13 + 264);
        v26 = 4 * v24;
        do
        {
          v27 = *v25++;
          v26 -= 4;
        }
        while (v26);
      }
    }
  }
  else
  {
    v6 = (uint64_t)(*result)[1];
    v7 = ***result;
    v8 = *(unsigned int *)(v7 + 60);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned int **)(v7 + 48);
      for (i = 4 * v8; i; i -= 4)
      {
        v11 = *v9;
        v12 = *(_QWORD *)(v6 + 376);
        if ((int)*v9 <= 0)
        {
          if (*(_DWORD *)(v12 + 28) <= -v11)
            goto LABEL_30;
        }
        else if (v11 >= *(_DWORD *)(v12 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198074328);
        }
        ++v9;
      }
    }
    v20 = *(unsigned int *)(v6 + 276);
    if ((_DWORD)v20)
    {
      v21 = *(unsigned int **)(v6 + 264);
      v22 = 4 * v20;
      do
      {
        v23 = *v21++;
        v22 -= 4;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !a4)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v6 = ******(_QWORD ******)(result + 16);
    v7 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int **)(v6 + 48);
      v9 = 4 * v7;
      do
      {
        v10 = *v8;
        v11 = *(_QWORD *)(v5 + 376);
        if ((int)*v8 <= 0)
        {
          if (*(_DWORD *)(v11 + 28) <= -v10)
          {
LABEL_16:
            __break(0xC471u);
            JUMPOUT(0x1980743D8);
          }
        }
        else if (v10 >= *(_DWORD *)(v11 + 12))
        {
          goto LABEL_16;
        }
        ++v8;
        v9 -= 4;
      }
      while (v9);
    }
    v12 = *(unsigned int *)(v5 + 276);
    if ((_DWORD)v12)
    {
      v13 = *(unsigned int **)(v5 + 264);
      v14 = 4 * v12;
      do
      {
        v15 = *v13++;
        v14 -= 4;
      }
      while (v14);
    }
  }
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(_DWORD *result, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = (v16 ^ HIWORD(v16)) & v13;
  v18 = (_DWORD *)(v11 + 4 * v17);
  v19 = *v18;
  if (*v18)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v19 == v14)
      {
        if ((v12 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v31 = v11 + 4 * v24;
        goto LABEL_32;
      }
      if (v19 == -1)
        v20 = v18;
      v17 = (v17 + v21) & v13;
      v18 = (_DWORD *)(v11 + 4 * v17);
      v19 = *v18;
      ++v21;
    }
    while (*v18);
    if (v20)
    {
      *v20 = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v18 = v20;
    }
  }
  *v18 = v14;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
      goto LABEL_23;
  }
  else if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
LABEL_28:
      result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(a2, v29, (uint64_t)v18, a4, a5, a6, a7, a8);
      v18 = result;
      v25 = *a2;
      if (*a2)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_28;
  }
LABEL_31:
  v31 = v25 + 4 * v28;
  v30 = 1;
LABEL_32:
  *(_QWORD *)v10 = v18;
  *((_QWORD *)v10 + 1) = v31;
  *((_BYTE *)v10 + 16) = v30;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(4 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (!v12)
  {
    v23 = 0;
    if (!v11)
      return v23;
    goto LABEL_16;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = (int *)(v11 + 4 * v22);
    v25 = *v24;
    if ((*v24 + 1) >= 2)
    {
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = 0;
      v29 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
      v30 = ((v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11)) ^ (((v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11)) >> 16);
      do
      {
        v31 = v30 & v27;
        v30 = ++v28 + v31;
      }
      while (*(_DWORD *)(v26 + 4 * v31));
      v32 = (_DWORD *)(v26 + 4 * v31);
      *v32 = v25;
      if (v24 == (int *)a3)
        v23 = v32;
    }
    ++v22;
  }
  while (v22 != v12);
  if (v11)
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

unint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::decrementDegree(unint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD v39[7];
  unsigned int v40;

  v40 = a2;
  v8 = *(_QWORD *)(result + 64);
  v9 = *(_DWORD *)(v8 + 4 * a2);
  *(_DWORD *)(v8 + 4 * a2) = v9 - 1;
  if (v9 == *(_DWORD *)(result + 12))
  {
    v10 = result;
    v11 = (uint64_t *)(result + 368);
    v12 = *(_QWORD *)(result + 368);
    if (v12 >= 0)
      v13 = 2 * v12 + 8;
    else
      v13 = result + 368;
    *(_QWORD *)(v13 + 8 * ((unint64_t)a2 >> 6)) |= 1 << a2;
    v14 = *(_QWORD *)(result + 48) + 16 * a2;
    v15 = *(unsigned int *)(v14 + 12);
    if ((_DWORD)v15)
    {
      v16 = *(unsigned int **)v14;
      v17 = (uint64_t *)(result + 168);
      v18 = 4 * v15;
      do
      {
        result = *v16;
        v19 = 2 * *v17 + 8;
        if (*v17 < 0)
          v19 = v10 + 168;
        v20 = result >> 6;
        v21 = *(_QWORD *)(v19 + 8 * (result >> 6));
        v22 = 1 << result;
        if (((1 << result) & v21) == 0)
        {
          result = *(unsigned int *)(*(_QWORD *)(v10 + 152) + 4 * result);
          if (!(_DWORD)result)
          {
            if (*v11 >= 0)
              result = 2 * *v11 + 8;
            else
              result = (unint64_t)v11;
            *(_QWORD *)(result + 8 * v20) |= v22;
          }
        }
        ++v16;
        v18 -= 4;
      }
      while (v18);
    }
    v23 = *(_QWORD *)(v10 + 208);
    if (v23 >= 0)
      v24 = 2 * v23 + 8;
    else
      v24 = v10 + 208;
    *(_QWORD *)(v24 + 8 * ((unint64_t)a2 >> 6)) &= ~(1 << a2);
    if (*(_DWORD *)(v10 + 116) <= a2)
    {
      __break(0xC471u);
    }
    else
    {
      v25 = *(_QWORD *)(v10 + 104) + 40 * a2;
      v26 = *(unsigned int *)(v25 + 4);
      v27 = (_QWORD *)(v25 + 8);
      if ((_DWORD)v26 != 8)
        v27 = (_QWORD *)*v27;
      v28 = 0;
      while ((_DWORD)v26 != v28)
      {
        v29 = v28;
        v30 = *((_DWORD *)v27 + v28++);
        if (v30 != -1)
        {
          v31 = v29;
          goto LABEL_26;
        }
      }
      v31 = v26;
LABEL_26:
      if ((_DWORD)v26 == (_DWORD)v31)
      {
LABEL_27:
        v32 = *(unsigned int *)(v10 + 204);
        if ((_DWORD)v32 == *(_DWORD *)(v10 + 200))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10 + 192, v32 + 1, (unint64_t)&v40);
          *(_DWORD *)(*(_QWORD *)(v10 + 192) + 4 * *(unsigned int *)(v10 + 204)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v10 + 192) + 4 * v32) = a2;
        }
        ++*(_DWORD *)(v10 + 204);
      }
      else
      {
        v33 = v31 | (v26 << 32);
        v34 = v10 + 360;
        v35 = *(_QWORD *)(v10 + 360);
        if (v35 >= 0)
          v34 = 2 * v35 + 8;
        while (1)
        {
          v36 = *((unsigned int *)v27 + v33);
          if (((*(_QWORD *)(v34 + ((v36 >> 3) & 0x1FFFFFF8)) >> v36) & 1) != 0
            || *(_DWORD *)(*(_QWORD *)(v10 + 304) + 4 * v36) != -1)
          {
            return (unint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v39, (uint64_t *)(v10 + 296), (int *)&v40, a4, a5, a6, a7, a8);
          }
          v37 = HIDWORD(v33);
          if ((v31 + 1) > HIDWORD(v33))
            LODWORD(v37) = v31 + 1;
          while (1)
          {
            v38 = (v31 + 1);
            v33 = v33 & 0xFFFFFFFF00000000 | v38;
            if ((_DWORD)v37 - 1 == (_DWORD)v31)
              break;
            LODWORD(v31) = v31 + 1;
            if (*((_DWORD *)v27 + v38) != -1)
              goto LABEL_37;
          }
          LODWORD(v38) = v37;
LABEL_37:
          LODWORD(v31) = v38;
          if ((_DWORD)v26 == (_DWORD)v38)
            goto LABEL_27;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::addWorkList(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  unsigned int v37;

  v37 = a2;
  if (*(_DWORD *)(result + 16) < a2)
  {
    v9 = result;
    if (*(_DWORD *)(*(_QWORD *)(result + 64) + 4 * a2) < *(_DWORD *)(result + 12))
    {
      if (*(_DWORD *)(result + 116) <= a2)
      {
        __break(0xC471u);
      }
      else
      {
        v10 = *(_QWORD *)(result + 104) + 40 * a2;
        v11 = *(unsigned int *)(v10 + 4);
        v12 = (_QWORD *)(v10 + 8);
        if ((_DWORD)v11 != 8)
          v12 = (_QWORD *)*v12;
        v13 = 0;
        while ((_DWORD)v11 != v13)
        {
          v14 = v13;
          v15 = *((_DWORD *)v12 + v13++);
          if (v15 != -1)
          {
            v16 = v14;
            goto LABEL_10;
          }
        }
        v16 = v11;
LABEL_10:
        if ((_DWORD)v11 == (_DWORD)v16)
        {
LABEL_11:
          v17 = *(_QWORD *)(result + 296);
          if (v17)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
            v20 = v18 & (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6))
                                                                              + ~((v19 ^ (v19 >> 6)) << 11)) >> 16));
            v21 = *(_DWORD *)(v17 + 4 * v20);
            if (v21 != a2)
            {
              v22 = 1;
              while (v21)
              {
                v20 = ((_DWORD)v20 + v22) & v18;
                v21 = *(_DWORD *)(v17 + 4 * v20);
                ++v22;
                if (v21 == a2)
                  goto LABEL_29;
              }
              v20 = *(unsigned int *)(v17 - 4);
            }
LABEL_29:
            if (v20 != *(_DWORD *)(v17 - 4))
            {
              v29 = -1;
              *(_DWORD *)(v17 + 4 * v20) = -1;
              v30 = (uint64_t *)(result + 296);
              ++*(_DWORD *)(*(_QWORD *)(v9 + 296) - 16);
              v31 = *(_QWORD *)(v9 + 296);
              if (v31)
                v29 = *(_DWORD *)(v31 - 12) - 1;
              *(_DWORD *)(v31 - 12) = v29;
              v32 = *v30;
              if (*v30)
              {
                v33 = 6 * *(_DWORD *)(v32 - 12);
                v34 = *(_DWORD *)(v32 - 4);
                if (v33 < v34 && v34 >= 9)
                  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v30, v34 >> 1, 0, a4, a5, a6, a7, a8);
              }
            }
          }
          result = v9 + 192;
          v36 = *(unsigned int *)(v9 + 204);
          if ((_DWORD)v36 == *(_DWORD *)(v9 + 200))
          {
            result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v36 + 1, (unint64_t)&v37);
            *(_DWORD *)(*(_QWORD *)(v9 + 192) + 4 * *(unsigned int *)(v9 + 204)) = *(_DWORD *)result;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)result + 4 * v36) = a2;
          }
          ++*(_DWORD *)(v9 + 204);
        }
        else
        {
          v23 = v16 | (v11 << 32);
          v24 = result + 360;
          v25 = *(_QWORD *)(result + 360);
          if (v25 >= 0)
            v24 = 2 * v25 + 8;
          while (1)
          {
            v26 = *((unsigned int *)v12 + v23);
            if (((*(_QWORD *)(v24 + ((v26 >> 3) & 0x1FFFFFF8)) >> v26) & 1) != 0
              || *(_DWORD *)(*(_QWORD *)(result + 304) + 4 * v26) != -1)
            {
              break;
            }
            v27 = HIDWORD(v23);
            if ((v16 + 1) > HIDWORD(v23))
              LODWORD(v27) = v16 + 1;
            while (1)
            {
              v28 = (v16 + 1);
              v23 = v23 & 0xFFFFFFFF00000000 | v28;
              if ((_DWORD)v27 - 1 == (_DWORD)v16)
                break;
              LODWORD(v16) = v16 + 1;
              if (*((_DWORD *)v12 + v28) != -1)
                goto LABEL_25;
            }
            LODWORD(v28) = v27;
LABEL_25:
            LODWORD(v16) = v28;
            if ((_DWORD)v11 == (_DWORD)v28)
              goto LABEL_11;
          }
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::canBeSafelyCoalesced(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  __int32 *v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int32 *v43;
  unint64_t v44;
  char v45;
  __int32 __s[66];

  v4 = result;
  if (*(_DWORD *)(result + 16) >= a2)
  {
    v9 = *(_QWORD *)(result + 48) + 16 * a3;
    v10 = *(unsigned int *)(v9 + 12);
    if (!(_DWORD)v10)
      goto LABEL_71;
    v11 = *(unsigned int **)v9;
    v12 = (uint64_t *)(result + 168);
    v13 = 4 * v10;
    while (1)
    {
      v14 = *v11;
      if (*(_DWORD *)(v4 + 16) < v14)
      {
        v15 = *v12 >= 0 ? 2 * *v12 + 8 : v4 + 168;
        if (((*(_QWORD *)(v15 + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) == 0
          && !*(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v14)
          && *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * v14) >= *(_DWORD *)(v4 + 12))
        {
          v16 = v14 >= a2 ? a2 : *v11;
          v17 = v14 <= a2 ? a2 : *v11;
          if (!WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains(v4 + 24, v16, v17))goto LABEL_34;
        }
      }
      ++v11;
      v13 -= 4;
      if (!v13)
        goto LABEL_71;
    }
  }
  v5 = *(uint64_t **)(result + 240);
  v6 = *v5;
  v7 = (unint64_t *)(2 * *v5);
  if (*v5 < 0)
    v8 = 63;
  else
    v8 = *v7;
  if (v8 <= a2)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v18 = v7 + 1;
    if (v6 < 0)
      v18 = *(_QWORD **)(result + 240);
    v19 = (*(_QWORD *)((char *)v18 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1;
  }
  if (v6 < 0)
    v20 = 63;
  else
    v20 = *v7;
  if (v20 <= a3)
  {
    if ((v19 & 1) == 0)
      goto LABEL_37;
LABEL_34:
    v22 = 0;
    return v22 & 1;
  }
  v21 = (uint64_t *)(v7 + 1);
  if (v6 >= 0)
    v5 = v21;
  if (((v19 ^ (*(unint64_t *)((char *)v5 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3)) & 1) != 0)
    goto LABEL_34;
LABEL_37:
  v23 = *(unsigned int *)(result + 12);
  if (v23 >= 0x41)
  {
    result = 221;
    __break(0xC471u);
LABEL_77:
    __break(1u);
    return result;
  }
  v24 = *(_QWORD *)(result + 48);
  v25 = (unsigned int **)(v24 + 16 * a2);
  v26 = v24 + 16 * a3;
  v27 = *((unsigned int *)v25 + 3);
  v28 = *(unsigned int *)(v26 + 12);
  v29 = v28 + v27;
  if (v23 > (int)v28 + (int)v27)
    goto LABEL_71;
  v30 = 0;
  if ((_DWORD)v27)
  {
    v31 = *v25;
    v32 = result + 168;
    v33 = *(_QWORD *)(result + 168);
    if (v33 >= 0)
      v32 = 2 * v33 + 8;
    for (i = 4 * v27; i; i -= 4)
    {
      v35 = *v31;
      --v29;
      if (((*(_QWORD *)(v32 + ((v35 >> 3) & 0x1FFFFFF8)) >> v35) & 1) != 0
        || *(_DWORD *)(*(_QWORD *)(result + 152) + 4 * v35)
        || *(_DWORD *)(*(_QWORD *)(result + 64) + 4 * v35) < v23)
      {
        if (v30 + v29 < v23)
          goto LABEL_71;
      }
      else
      {
        if (v30 >= 0x40)
          goto LABEL_77;
        __s[v30++] = v35;
        if (v30 >= v23)
          goto LABEL_34;
      }
      ++v31;
    }
  }
  if (!(_DWORD)v28)
  {
LABEL_71:
    v22 = 1;
    return v22 & 1;
  }
  v36 = *(__int32 **)v26;
  v37 = (uint64_t *)(result + 168);
  v38 = 4 * v28;
  v39 = v29 - 1;
  v40 = v30;
  while (1)
  {
    v41 = *v36;
    v42 = *v37 >= 0 ? 2 * *v37 + 8 : v4 + 168;
    if (((*(_QWORD *)(v42 + ((v41 >> 3) & 0x1FFFFFF8)) >> v41) & 1) == 0
      && !*(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v41)
      && *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * v41) >= v23)
    {
      break;
    }
LABEL_68:
    v44 = v40 + v39;
    if (v44 < v23)
    {
      v45 = 0;
      LOBYTE(v44) = 1;
      goto LABEL_74;
    }
LABEL_69:
    ++v36;
    --v39;
    v38 -= 4;
    if (!v38)
    {
      v45 = 1;
      goto LABEL_74;
    }
  }
  result = (uint64_t)wmemchr(__s, *v36, v30);
  if (result)
    v43 = (__int32 *)result;
  else
    v43 = &__s[v30];
  if (v30 != v43 - __s)
  {
    LODWORD(v23) = *(_DWORD *)(v4 + 12);
    goto LABEL_68;
  }
  if (v40 >= 0x40)
    goto LABEL_77;
  LOBYTE(v44) = v40 + 1;
  __s[v40] = v41;
  v23 = *(unsigned int *)(v4 + 12);
  if (v40 + 1 < v23)
  {
    ++v40;
    goto LABEL_69;
  }
  v45 = 0;
  LOBYTE(v44) = 0;
LABEL_74:
  v22 = v45 | v44;
  return v22 & 1;
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::addBias(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  _QWORD v25[3];
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29[2];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = a3;
  v27 = a2;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11 < a2)
  {
    v28 = 0x800000000;
    *(_QWORD *)&v12 = -1;
    *((_QWORD *)&v12 + 1) = -1;
    *(_OWORD *)v29 = v12;
    v30 = v12;
    WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>((uint64_t)v25, (uint64_t *)(a1 + 80), (int *)&v27, (uint64_t)&v28, a5, a6, a7, a8);
    WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v24, (unsigned int *)(v25[0] + 8), a3);
    if (HIDWORD(v28) != 8)
      WTF::fastFree((unint64_t)v29[0], v13, v14, v15, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a1 + 16);
  }
  if (v11 < a3)
  {
    v28 = 0x800000000;
    *(_QWORD *)&v16 = -1;
    *((_QWORD *)&v16 + 1) = -1;
    *(_OWORD *)v29 = v16;
    v30 = v16;
    WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>((uint64_t)v25, (uint64_t *)(a1 + 80), (int *)&v26, (uint64_t)&v28, a5, a6, a7, a8);
    WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v24, (unsigned int *)(v25[0] + 8), a2);
    if (HIDWORD(v28) != 8)
      WTF::fastFree((unint64_t)v29[0], v17, v18, v19, v20, v21, v22, v23);
  }
}

uint64_t WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  _QWORD *v15;

  if (*(_DWORD *)(result + 12) <= a2)
  {
    __break(0xC471u);
    return result;
  }
  v3 = *(_QWORD *)result + 24 * a2;
  if (*(_DWORD *)(v3 + 8) != -1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)result + 24 * a2 + 12);
    v5 = a3 >= v4;
    v6 = a3 - v4;
    if (v5)
    {
      v7 = (_QWORD *)(2 * *(_QWORD *)v3);
      v8 = (*(_QWORD *)v3 & 0x8000000000000000) != 0 ? 63 : *v7;
      if (v8 > v6)
      {
        v15 = v7 + 1;
        if (*(uint64_t *)v3 >= 0)
          v3 = (uint64_t)v15;
        return (*(_QWORD *)(v3 + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1;
      }
    }
    return 0;
  }
  v9 = *(_QWORD *)v3;
  if (!v9)
    return 0;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v12 = v10 & (((v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11)) ^ (((v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11)) >> 16));
  v13 = *(_DWORD *)(v9 + 4 * v12);
  if (v13 == a3)
    return 1;
  v14 = 1;
  do
  {
    result = v13 != -1;
    if (v13 == -1)
      break;
    v12 = (v12 + v14) & v10;
    v13 = *(_DWORD *)(v9 + 4 * v12);
    ++v14;
  }
  while (v13 != a3);
  return result;
}

BOOL JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::addEdgeDistinctWithoutDegreeChange(_BOOL8 result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v12 = a3;
  v13 = a2;
  if (a3 >= a2)
    v3 = a2;
  else
    v3 = a3;
  if (*(_DWORD *)(result + 36) <= v3)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = a3;
    v5 = a2;
    v6 = result;
    if (a3 > a2)
      a2 = a3;
    v7 = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(*(_QWORD *)(result + 24) + 24 * v3), a2);
    *(_DWORD *)(v6 + 40) += v7;
    if (v7)
    {
      if (*(_DWORD *)(v6 + 16) < v5)
      {
        v8 = *(_QWORD *)(v6 + 48) + 16 * v5;
        v9 = *(unsigned int *)(v8 + 12);
        if ((_DWORD)v9 == *(_DWORD *)(v8 + 8))
        {
          *(_DWORD *)(*(_QWORD *)v8 + 4 * (*(_DWORD *)(v8 + 12))++) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(*(_QWORD *)(v6 + 48) + 16 * v5), v9 + 1, (unint64_t)&v12);
          v4 = v12;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v8 + 4 * v9) = v4;
          ++*(_DWORD *)(v8 + 12);
        }
      }
      if (*(_DWORD *)(v6 + 16) < v4)
      {
        v10 = *(_QWORD *)(v6 + 48) + 16 * v4;
        v11 = *(unsigned int *)(v10 + 12);
        if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
          *(_DWORD *)(*(_QWORD *)v10 + 4 * *(unsigned int *)(v10 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v10, v11 + 1, (unint64_t)&v13);
        else
          *(_DWORD *)(*(_QWORD *)v10 + 4 * v11) = v5;
        ++*(_DWORD *)(v10 + 12);
      }
    }
    return v7 != 0;
  }
  return result;
}

void WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = v12 + 48 * v18;
  v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19 != -1)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v15)
      {
        if ((v13 & 1) != 0)
          v28 = 0;
        else
          v28 = *(_DWORD *)(v12 - 4);
        v34 = 0;
        v35 = v12 + 48 * v28;
        goto LABEL_34;
      }
      if (v20 == -2)
        v21 = v19;
      v18 = (v18 + v22) & v14;
      v19 = v12 + 48 * v18;
      v20 = *(_DWORD *)v19;
      ++v22;
    }
    while (*(_DWORD *)v19 != -1);
    if (v21)
    {
      *(_DWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0x800000000;
      *(_QWORD *)&v23 = -1;
      *((_QWORD *)&v23 + 1) = -1;
      *(_OWORD *)(v21 + 16) = v23;
      *(_OWORD *)(v21 + 32) = v23;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v19 = v21;
    }
  }
  *(_DWORD *)v19 = v15;
  if (*(_DWORD *)(v19 + 12) != 8)
    WTF::fastFree(*(_QWORD *)(v19 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = *(_OWORD *)a4;
  v25 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(a4 + 32);
  *(_OWORD *)(v19 + 24) = v25;
  *(_OWORD *)(v19 + 8) = v24;
  *(_QWORD *)a4 = 0x800000000;
  *(_QWORD *)&v24 = -1;
  *((_QWORD *)&v24 + 1) = -1;
  *(_OWORD *)(a4 + 8) = v24;
  *(_OWORD *)(a4 + 24) = v24;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_25;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_30:
      v19 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v33, (int *)v19);
      v29 = *a2;
      if (*a2)
        LODWORD(v32) = *(_DWORD *)(v29 - 4);
      else
        LODWORD(v32) = 0;
      goto LABEL_33;
    }
LABEL_25:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    goto LABEL_30;
  }
LABEL_33:
  v35 = v29 + 48 * v32;
  v34 = 1;
LABEL_34:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v35;
  *(_BYTE *)(a1 + 16) = v34;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  int *v24;
  int v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t result;
  int *v39;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_OWORD *)(v9 + 32);
    *(_QWORD *)&v19 = -1;
    *((_QWORD *)&v19 + 1) = -1;
    do
    {
      *((_DWORD *)v18 - 4) = -1;
      *((_QWORD *)v18 - 1) = 0x800000000;
      *v18 = v19;
      v18[1] = v19;
      v18 += 3;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v20 = 0;
    v21 = 0;
    *(_QWORD *)&v22 = -1;
    *((_QWORD *)&v22 + 1) = -1;
    v23 = a3;
    do
    {
      v24 = (int *)(v5 + 48 * v20);
      v25 = *v24;
      if (*v24 != -2)
      {
        if (v25 == -1)
        {
          if (*(_DWORD *)(v5 + 48 * v20 + 12) != 8)
          {
            v26 = v23;
            WTF::fastFree(*(_QWORD *)(v5 + 48 * v20 + 16), v10, v11, v12, v13, v14, v15, v16);
            *(_QWORD *)&v22 = -1;
            *((_QWORD *)&v22 + 1) = -1;
            v23 = v26;
          }
        }
        else
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = 0;
          v30 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
          v31 = ((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) ^ (((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) >> 16);
          do
          {
            v32 = v31 & v28;
            v33 = (_DWORD *)(v27 + 48 * (v31 & v28));
            v31 = ++v29 + (v31 & v28);
          }
          while (*v33 != -1);
          if (*(_DWORD *)(v27 + 48 * v32 + 12) != 8)
          {
            v39 = v23;
            WTF::fastFree(*(_QWORD *)(v27 + 48 * v32 + 16), v10, v11, v12, v13, v14, v15, v16);
            *(_QWORD *)&v22 = -1;
            *((_QWORD *)&v22 + 1) = -1;
            v23 = v39;
            v25 = *v24;
          }
          *v33 = v25;
          v34 = v5 + 48 * v20;
          v35 = *(_OWORD *)(v34 + 8);
          v36 = *(_OWORD *)(v34 + 24);
          v37 = v27 + 48 * v32;
          *(_QWORD *)(v37 + 40) = *(_QWORD *)(v34 + 40);
          *(_OWORD *)(v37 + 24) = v36;
          *(_OWORD *)(v37 + 8) = v35;
          *(_QWORD *)(v34 + 8) = 0x800000000;
          *(_OWORD *)(v34 + 16) = v22;
          *(_OWORD *)(v34 + 32) = v22;
          if (v24 == v23)
            v21 = v27 + 48 * v32;
        }
      }
      ++v20;
    }
    while (v20 != v7);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v21;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::freezeMoves(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  int *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;

  if (*(_DWORD *)(result + 116) <= a2)
  {
    __break(0xC471u);
LABEL_76:
    JUMPOUT(0x198075B88);
  }
  v8 = a2;
  v9 = result;
  v10 = *(_QWORD *)(result + 104) + 40 * a2;
  v11 = *(unsigned int *)(v10 + 4);
  v12 = (_QWORD *)(v10 + 8);
  if ((_DWORD)v11 != 8)
    v12 = (_QWORD *)*v12;
  v13 = 0;
  while ((_DWORD)v11 != v13)
  {
    v14 = v13;
    v15 = *((_DWORD *)v12 + v13++);
    if (v15 != -1)
    {
      v16 = v14;
      goto LABEL_8;
    }
  }
  v16 = v11;
LABEL_8:
  if ((_DWORD)v11 != (_DWORD)v16)
  {
    v17 = (uint64_t *)(result + 360);
    result += 332;
    v18 = (uint64_t *)(v9 + 296);
    v19 = (_QWORD *)(v9 + 192);
    v20 = v16 | (v11 << 32);
    do
    {
      v21 = *((unsigned int *)v12 + v20);
      if (*v17 >= 0)
        v22 = 2 * *v17 + 8;
      else
        v22 = v9 + 360;
      v23 = v21 >> 6;
      v24 = *(_QWORD *)(v22 + 8 * (v21 >> 6));
      v25 = 1 << v21;
      if (((1 << v21) & v24) != 0)
      {
        *(_QWORD *)(v22 + 8 * v23) = v24 & ~v25;
      }
      else
      {
        v26 = *(_QWORD *)(v9 + 304);
        v27 = *(unsigned int *)(v26 + 4 * v21);
        if ((_DWORD)v27 == -1)
          goto LABEL_66;
        *(_QWORD *)(v22 + 8 * v23) = v24 & ~v25;
        if (*(_DWORD *)(v9 + 352) <= v21)
        {
          v28 = *(_QWORD *)(v9 + 336);
          v29 = (unsigned int *)(v28 + 4 * *(unsigned int *)(v9 + 348) - 4);
          v30 = (_DWORD *)(v9 + 348);
        }
        else
        {
          v28 = *(_QWORD *)(v9 + 320);
          v29 = (unsigned int *)(v28 + 4 * *(unsigned int *)(v9 + 332) - 4);
          v30 = (_DWORD *)result;
        }
        v31 = *v29;
        *(_DWORD *)(v26 + 4 * v31) = v27;
        *(_DWORD *)(v28 + 4 * v27) = v31;
        --*v30;
        *(_DWORD *)(v26 + 4 * v21) = -1;
      }
      v32 = (unsigned int *)(*(_QWORD *)(v9 + 88) + 8 * v21);
      v34 = *v32;
      v33 = v32[1];
      if (v34 != v8)
        v33 = v34;
      do
      {
        v35 = v33;
        v33 = *(_DWORD *)(*(_QWORD *)(v9 + 152) + 4 * v33);
      }
      while (v33);
      v68 = v35;
      if (*(_DWORD *)(*(_QWORD *)(v9 + 64) + 4 * v35) < *(_DWORD *)(v9 + 12))
      {
        if (*(_DWORD *)(v9 + 116) <= v35)
        {
          __break(0xC471u);
          goto LABEL_76;
        }
        v36 = *(_QWORD *)(v9 + 104) + 40 * v35;
        v37 = *(unsigned int *)(v36 + 4);
        v38 = (_QWORD *)(v36 + 8);
        if ((_DWORD)v37 != 8)
          v38 = (_QWORD *)*v38;
        v39 = 0;
        while ((_DWORD)v37 != v39)
        {
          v40 = v39;
          v41 = *((_DWORD *)v38 + v39++);
          if (v41 != -1)
          {
            v42 = v40;
            goto LABEL_31;
          }
        }
        v42 = v37;
LABEL_31:
        if ((_DWORD)v37 == (_DWORD)v42)
        {
LABEL_32:
          v43 = *v18;
          if (*v18)
          {
            v44 = *(_DWORD *)(v43 - 8);
            v45 = 9 * ((v35 + ~(v35 << 15)) ^ ((v35 + ~(v35 << 15)) >> 10));
            v46 = v44 & (((v45 ^ (v45 >> 6)) + ~((v45 ^ (v45 >> 6)) << 11)) ^ (((v45 ^ (v45 >> 6))
                                                                              + ~((v45 ^ (v45 >> 6)) << 11)) >> 16));
            v47 = *(_DWORD *)(v43 + 4 * v46);
            if (v47 != v35)
            {
              v48 = 1;
              while (v47)
              {
                v46 = ((_DWORD)v46 + v48) & v44;
                v47 = *(_DWORD *)(v43 + 4 * v46);
                ++v48;
                if (v47 == v35)
                  goto LABEL_51;
              }
              v46 = *(unsigned int *)(v43 - 4);
            }
LABEL_51:
            if (v46 != *(_DWORD *)(v43 - 4))
            {
              v54 = -1;
              *(_DWORD *)(v43 + 4 * v46) = -1;
              ++*(_DWORD *)(*v18 - 16);
              v55 = *v18;
              if (*v18)
                v54 = *(_DWORD *)(v55 - 12) - 1;
              *(_DWORD *)(v55 - 12) = v54;
              v56 = *v18;
              if (*v18)
              {
                v57 = 6 * *(_DWORD *)(v56 - 12);
                v58 = *(_DWORD *)(v56 - 4);
                if (v57 < v58 && v58 >= 9)
                {
                  v67 = v8;
                  v60 = v19;
                  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)(v9 + 296), v58 >> 1, 0, (uint64_t)v19, 0xFFFFFFFFLL, 40, a7, a8);
                  v19 = v60;
                  v8 = v67;
                  result = v9 + 332;
                }
              }
              v61 = *(unsigned int *)(v9 + 204);
              if ((_DWORD)v61 == *(_DWORD *)(v9 + 200))
              {
                v62 = v19;
                v63 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v61 + 1, (unint64_t)&v68);
                v19 = v62;
                v64 = *v63;
                result = v9 + 332;
                *(_DWORD *)(*(_QWORD *)(v9 + 192) + 4 * *(unsigned int *)(v9 + 204)) = v64;
              }
              else
              {
                *(_DWORD *)(*v19 + 4 * v61) = v35;
              }
              ++*(_DWORD *)(v9 + 204);
            }
          }
        }
        else
        {
          v49 = v42 | (v37 << 32);
          if (*v17 >= 0)
            v50 = 2 * *v17 + 8;
          else
            v50 = v9 + 360;
          while (1)
          {
            v51 = *((unsigned int *)v38 + v49);
            if (((*(_QWORD *)(v50 + ((v51 >> 3) & 0x1FFFFFF8)) >> v51) & 1) != 0
              || *(_DWORD *)(*(_QWORD *)(v9 + 304) + 4 * v51) != -1)
            {
              break;
            }
            v52 = HIDWORD(v49);
            if ((v42 + 1) > HIDWORD(v49))
              LODWORD(v52) = v42 + 1;
            while (1)
            {
              v53 = (v42 + 1);
              v49 = v49 & 0xFFFFFFFF00000000 | v53;
              if ((_DWORD)v52 - 1 == (_DWORD)v42)
                break;
              LODWORD(v42) = v42 + 1;
              if (*((_DWORD *)v38 + v53) != -1)
                goto LABEL_47;
            }
            LODWORD(v53) = v52;
LABEL_47:
            LODWORD(v42) = v53;
            if ((_DWORD)v37 == (_DWORD)v53)
              goto LABEL_32;
          }
        }
      }
LABEL_66:
      v65 = HIDWORD(v20);
      if ((v16 + 1) > HIDWORD(v20))
        LODWORD(v65) = v16 + 1;
      while (1)
      {
        v66 = (v16 + 1);
        v20 = v20 & 0xFFFFFFFF00000000 | v66;
        if ((_DWORD)v65 - 1 == (_DWORD)v16)
          break;
        LODWORD(v16) = v16 + 1;
        if (*((_DWORD *)v12 + v66) != -1)
          goto LABEL_70;
      }
      LODWORD(v66) = v65;
LABEL_70:
      LODWORD(v16) = v66;
    }
    while ((_DWORD)v11 != (_DWORD)v66);
  }
  return result;
}

unint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::selectSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  unsigned int *v25;
  _DWORD *v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  float v30;
  unint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  unsigned int *v46;
  _DWORD *v47;
  unsigned int v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  unint64_t v54;

  if (!*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 1;
    if (*(_BYTE *)(a1 + 217))
      WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 224), (const void **)(a1 + 152), a3, a4, a5, a6, a7, a8);
  }
  v9 = *(_QWORD *)(a1 + 208);
  v10 = (uint64_t *)(2 * v9);
  if ((v9 & 0x8000000000000000) != 0)
  {
    v43 = __clz(__rbit64(v9));
    v11 = 63;
    if (v43 >= 0x3F)
      result = 63;
    else
      result = v43;
  }
  else
  {
    v11 = *v10;
    v12 = *v10 + 63;
    if (v12 < 0x40)
      goto LABEL_73;
    v13 = *(_QWORD *)(2 * v9 + 8);
    if (v13 && (v14 = __clz(__rbit64(v13)), v14 < 0x40))
    {
      v15 = 0;
    }
    else
    {
      v40 = (v12 >> 6) - 1;
      if (!v40)
        goto LABEL_73;
      v41 = 0;
      while (1)
      {
        v42 = *(_QWORD *)(2 * v9 + 0x10 + 8 * v41);
        if (v42)
        {
          v14 = __clz(__rbit64(v42));
          if (v14 <= 0x3F)
            break;
        }
        if (v40 == ++v41)
          goto LABEL_73;
      }
      v15 = v41 + 1;
    }
    result = v14 + (v15 << 6);
  }
  if (result == v11)
    goto LABEL_73;
  v17 = *(uint64_t **)(a1 + 240);
  v18 = (_QWORD *)(2 * *v17);
  v19 = *v17 < 0 ? 63 : *v18;
  if (v19 > result)
  {
    v20 = v18 + 1;
    if (*v17 >= 0)
      v17 = v20;
    if (((*(unint64_t *)((char *)v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) != 0)
    {
LABEL_73:
      __break(0xC471u);
      JUMPOUT(0x198075DD0);
    }
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    if (result != 63)
    {
      v44 = *(_QWORD **)(a1 + 248);
      v46 = (unsigned int *)*v44;
      v45 = v44 + 2;
      v47 = v46 + 1;
      v48 = *v46;
      v49 = 0.0;
      v50 = result;
      while (1)
      {
        if (v48 <= v50)
        {
LABEL_72:
          __break(0xC471u);
          JUMPOUT(0x198075EC4);
        }
        v51 = *(float *)&v47[v50];
        if (v51 == 0.0)
          break;
        v52 = (float)*(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v50) / v51;
        if (*v45 >= 0)
          v53 = 2 * *v45 + 8;
        else
          v53 = (uint64_t)v45;
        if (((*(_QWORD *)(v53 + (((unint64_t)v50 >> 3) & 0x1FFFFFF8)) >> v50) & 1) != 0)
          v52 = v52 + v52;
        if (v52 <= v49)
        {
          result = result;
        }
        else
        {
          v49 = v52;
          result = v50;
        }
        v54 = __clz(__rbit64(v9 >> (v50 + 1))) + v50 + 1;
        if (v54 >= 0x3F)
          v50 = 63;
        else
          v50 = v54;
        if (v54 > 0x3E)
          return result;
      }
      return v50;
    }
  }
  else
  {
    v21 = *v10;
    if (result != *v10)
    {
      v22 = v10 + 1;
      v23 = *(_QWORD **)(a1 + 248);
      v25 = (unsigned int *)*v23;
      v24 = v23 + 2;
      v26 = v25 + 1;
      v27 = *v25;
      v28 = (unint64_t)(v21 + 63) >> 6;
      v29 = v10 + 2;
      v30 = 0.0;
      v31 = result;
      while (1)
      {
        if (v27 <= v31)
          goto LABEL_72;
        v32 = *(float *)&v26[v31];
        if (v32 == 0.0)
          return v31;
        v33 = (float)*(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v31) / v32;
        if (*v24 >= 0)
          v34 = 2 * *v24 + 8;
        else
          v34 = (uint64_t)v24;
        if (((*(_QWORD *)(v34 + (((unint64_t)v31 >> 3) & 0x1FFFFFF8)) >> v31) & 1) != 0)
          v33 = v33 + v33;
        if (v33 <= v30)
        {
          result = result;
        }
        else
        {
          v30 = v33;
          result = v31;
        }
        v35 = v31 + 1;
        v36 = (v31 + 1) >> 6;
        if (v36 >= v28)
          return result;
        v37 = v22[v36];
        if (!v37 || (v38 = __clz(__rbit64(v37 >> v35)) + (v35 & 0x3F), v38 >= 0x40))
        {
          if (v36 + 1 == v28)
            return result;
          while (1)
          {
            v39 = v29[v36];
            if (v39)
            {
              v38 = __clz(__rbit64(v39));
              if (v38 < 0x40)
                break;
            }
            if (v28 - 1 == ++v36)
              return result;
          }
          ++v36;
        }
        v31 = v38 + (v36 << 6);
        if (v31 == v21)
          return result;
      }
    }
  }
  return result;
}

void WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(const void **a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  if (a2 != a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    else
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v26 = (unint64_t)*a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v15 = *((unsigned int *)a2 + 3);
        if (v12 < v15)
        {
          if (v15 >> 30)
          {
            __break(0xC471u);
            return;
          }
          v16 = (char *)*a1;
          v17 = *((unsigned int *)a1 + 3);
          v18 = (char *)WTF::fastMalloc((WTF *)(4 * v15));
          *((_DWORD *)a1 + 2) = v15;
          *a1 = v18;
          memcpy(v18, v16, 4 * v17);
          if (v16)
          {
            if (*a1 == v16)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree((unint64_t)v16, v19, v20, v21, v22, v23, v24, v25);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    v13 = (char *)*a1;
    if (v11)
    {
      memmove(v13, *a2, 4 * v11);
      v14 = *((unsigned int *)a1 + 3);
      v13 = (char *)*a1;
    }
    else
    {
      v14 = 0;
    }
    memcpy(&v13[4 * v14], (char *)*a2 + 4 * v14, (_BYTE *)*a2 + 4 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 4 * v14));
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  }
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::assignColors(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int *v43;
  int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  WTF *v55;
  WTF **v56;
  unsigned int v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  _DWORD *v80;
  int v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int *v103;
  int v104;
  uint64_t v105;
  char v106;
  WTF *v107;
  uint64_t v108;
  _BYTE v109[16];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  WTF *v113[2];
  __int128 v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 32))
  {
    v9 = *(unsigned int *)(a1 + 36);
    v10 = *(_QWORD *)(a1 + 24);
    if ((_DWORD)v9)
    {
      v11 = 24 * v9;
      while (1)
      {
        if (*(_DWORD *)(v10 + 8) == -1)
        {
          if (*(_QWORD *)v10)
          {
            v12 = *(_QWORD *)v10 - 16;
            goto LABEL_9;
          }
        }
        else if ((*(_QWORD *)v10 & 0x8000000000000000) == 0)
        {
          v12 = 2 * *(_QWORD *)v10;
LABEL_9:
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
        v10 += 24;
        v11 -= 24;
        if (!v11)
        {
          *(_DWORD *)(a1 + 36) = 0;
          v10 = *(_QWORD *)(a1 + 24);
          break;
        }
      }
    }
    if (v10)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 76))
      *(_DWORD *)(a1 + 76) = 0;
    v101 = *(_QWORD *)(a1 + 64);
    if (v101)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v101, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 112))
  {
    v13 = *(unsigned int *)(a1 + 116);
    v14 = *(_QWORD *)(a1 + 104);
    if ((_DWORD)v13)
    {
      v15 = 40 * v13;
      v16 = (unint64_t *)(v14 + 8);
      do
      {
        if (*((_DWORD *)v16 - 1) != 8)
          WTF::fastFree(*v16, a2, a3, a4, a5, a6, a7, a8);
        v16 += 5;
        v15 -= 40;
      }
      while (v15);
      *(_DWORD *)(a1 + 116) = 0;
      v14 = *(_QWORD *)(a1 + 104);
    }
    if (v14)
    {
      *(_QWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 112) = 0;
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 200))
  {
    if (*(_DWORD *)(a1 + 204))
      *(_DWORD *)(a1 + 204) = 0;
    v17 = *(_QWORD *)(a1 + 192);
    if (v17)
    {
      *(_QWORD *)(a1 + 192) = 0;
      *(_DWORD *)(a1 + 200) = 0;
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v18 = *(_QWORD *)(a1 + 208);
  if (v18 < 0)
    *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  else
    bzero((void *)(2 * v18 + 8), (unint64_t)(*(_QWORD *)(2 * v18) + 7) >> 3);
  v19 = (unint64_t *)(a1 + 120);
  v20 = *(unsigned int *)(a1 + 60);
  v21 = *(unsigned int *)(a1 + 132);
  if (v21 < v20)
  {
    v22 = *(unsigned int *)(a1 + 128);
    v23 = *(_QWORD *)(a1 + 120);
    if (v22 < v20)
    {
      v24 = v22 + (v22 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v20)
        v26 = *(unsigned int *)(a1 + 60);
      else
        v26 = v25;
      if (HIDWORD(v26))
      {
        __break(0xC471u);
        goto LABEL_186;
      }
      v27 = (_BYTE *)WTF::fastMalloc((WTF *)v26);
      *(_DWORD *)(a1 + 128) = v26;
      *(_QWORD *)(a1 + 120) = v27;
      if ((_DWORD)v21)
      {
        v28 = (char *)v23;
        do
        {
          v29 = *v28++;
          *v27++ = v29;
          --v21;
        }
        while (v21);
        v27 = (_BYTE *)*v19;
      }
      if (!v23)
      {
        v23 = (unint64_t)v27;
        if (!v27)
          goto LABEL_55;
LABEL_52:
        v30 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v30 != (_DWORD)v20)
        {
          v31 = (_BYTE *)(v23 + v30);
          v32 = v20 - v30;
          do
          {
            *v31++ |= 0x7Fu;
            --v32;
          }
          while (v32);
        }
        goto LABEL_55;
      }
      if (v27 == (_BYTE *)v23)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
      }
      WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
      v23 = *v19;
    }
    if (!v23)
      goto LABEL_55;
    goto LABEL_52;
  }
LABEL_55:
  *(_DWORD *)(a1 + 132) = v20;
  v107 = (WTF *)v109;
  v108 = 4;
  v34 = (uint64_t *)(a1 + 80);
  v33 = *(_QWORD *)(a1 + 80);
  if (v33)
  {
    v35 = *(unsigned int *)(v33 - 4);
    v36 = (_DWORD *)(v33 + 48 * v35);
    if (*(_DWORD *)(v33 - 12))
    {
      v37 = *(_DWORD **)(a1 + 80);
      if ((_DWORD)v35)
      {
        v38 = 48 * v35;
        v37 = *(_DWORD **)(a1 + 80);
        while (*v37 >= 0xFFFFFFFE)
        {
          v37 += 12;
          v38 -= 48;
          if (!v38)
          {
            v37 = v36;
            goto LABEL_62;
          }
        }
      }
      goto LABEL_62;
    }
    v37 = (_DWORD *)(v33 + 48 * v35);
  }
  else
  {
    v37 = 0;
    LODWORD(v35) = 0;
  }
  v36 = (_DWORD *)(v33 + 48 * v35);
  if (!v33)
  {
    v39 = 0;
    goto LABEL_67;
  }
LABEL_62:
  v39 = (_DWORD *)(v33 + 48 * *(unsigned int *)(v33 - 4));
LABEL_67:
  if (v39 != v37)
  {
    do
    {
      LODWORD(v113[0]) = 0;
      LODWORD(v113[0]) = *v37;
      v40 = LODWORD(v113[0]);
      do
      {
        v41 = v40;
        v40 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v40);
      }
      while ((_DWORD)v40);
      if (LODWORD(v113[0]) != v41)
      {
        if (HIDWORD(v108) == (_DWORD)v108)
        {
          WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v107, (unint64_t)v113);
        }
        else
        {
          *((_DWORD *)v107 + HIDWORD(v108)) = v113[0];
          ++HIDWORD(v108);
        }
      }
      v42 = v37 + 12;
      v37 = v36;
      if (v42 != v36)
      {
        v37 = v42;
        while (*v37 >= 0xFFFFFFFE)
        {
          v37 += 12;
          if (v37 == v36)
          {
            v37 = v36;
            break;
          }
        }
      }
    }
    while (v37 != v39);
    v43 = (int *)v107;
    if (HIDWORD(v108))
    {
      v44 = (int *)((char *)v107 + 4 * HIDWORD(v108));
      v103 = v44;
      do
      {
        v45 = *v43;
        WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::take((uint64_t)v113, v34, *v43);
        do
        {
          v50 = v45;
          v45 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v45);
        }
        while (v45);
        v104 = v50;
        v110 = 0x800000000;
        *(_QWORD *)&v51 = -1;
        *((_QWORD *)&v51 + 1) = -1;
        v111 = v51;
        v112 = v51;
        WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>((uint64_t)&v105, v34, &v104, (uint64_t)&v110, v46, v47, v48, v49);
        if (HIDWORD(v110) != 8)
          WTF::fastFree(v111, a2, a3, a4, a5, a6, a7, a8);
        v52 = v105 + 8;
        if (v106)
        {
          if (*(_DWORD *)(v105 + 12) != 8)
            WTF::fastFree(*(_QWORD *)(v105 + 16), a2, a3, a4, a5, a6, a7, a8);
          *(_OWORD *)v52 = *(_OWORD *)v113;
          *(_OWORD *)(v52 + 16) = v114;
          *(_QWORD *)(v52 + 32) = v115;
        }
        else
        {
          v53 = 0;
          v54 = HIDWORD(v113[0]);
          v55 = v113[1];
          if (HIDWORD(v113[0]) == 8)
            v56 = &v113[1];
          else
            v56 = (WTF **)v113[1];
          while (HIDWORD(v113[0]) != v53)
          {
            v57 = v53;
            v58 = *((_DWORD *)v56 + v53++);
            if (v58 != -1)
            {
              v59 = v34;
              v60 = v57;
              goto LABEL_97;
            }
          }
          v59 = v34;
          v60 = HIDWORD(v113[0]);
LABEL_97:
          if (HIDWORD(v113[0]) != (_DWORD)v60)
          {
            v61 = v60 | ((unint64_t)HIDWORD(v113[0]) << 32);
            do
            {
              WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v110, (unsigned int *)v52, *((_DWORD *)v56 + v61));
              v62 = HIDWORD(v61);
              if ((v60 + 1) > HIDWORD(v61))
                LODWORD(v62) = v60 + 1;
              v63 = v60;
              while (1)
              {
                v60 = (v63 + 1);
                v61 = v61 & 0xFFFFFFFF00000000 | v60;
                if ((_DWORD)v62 - 1 == v63)
                  break;
                ++v63;
                if (*((_DWORD *)v56 + v60) != -1)
                  goto LABEL_108;
              }
              LODWORD(v60) = v62;
LABEL_108:
              ;
            }
            while (v54 != (_DWORD)v60);
          }
          v64 = v54 == 8;
          v34 = v59;
          v44 = v103;
          if (!v64)
            WTF::fastFree((unint64_t)v55, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v43;
      }
      while (v43 != v44);
      v43 = (int *)v107;
      v19 = (unint64_t *)(a1 + 120);
    }
    v64 = v109 == (_BYTE *)v43 || v43 == 0;
    if (!v64)
    {
      v107 = 0;
      LODWORD(v108) = 0;
      WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v65 = *(_DWORD *)(a1 + 188);
  if (!v65)
  {
LABEL_170:
    if (*(_DWORD *)(a1 + 184))
    {
      v100 = *(_QWORD *)(a1 + 176);
      if (v100)
      {
        *(_QWORD *)(a1 + 176) = 0;
        *(_DWORD *)(a1 + 184) = 0;
        WTF::fastFree(v100, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if (*(_DWORD *)(a1 + 148))
    {
      WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
    }
    else if (*(_DWORD *)(a1 + 232))
    {
      if (*(_DWORD *)(a1 + 236))
        *(_DWORD *)(a1 + 236) = 0;
      v102 = *(_QWORD *)(a1 + 224);
      if (v102)
      {
        *(_QWORD *)(a1 + 224) = 0;
        *(_DWORD *)(a1 + 232) = 0;
        WTF::fastFree(v102, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    return;
  }
  while (1)
  {
    LODWORD(v113[0]) = 0;
    v66 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 4 * v65 - 4);
    *(_DWORD *)(a1 + 188) = v65 - 1;
    LODWORD(v113[0]) = v66;
    v67 = *(_QWORD *)(a1 + 48) + 16 * v66;
    v68 = *(unsigned int *)(v67 + 12);
    if ((_DWORD)v68)
    {
      v69 = 0;
      v70 = *(unsigned int **)v67;
      v71 = &v70[v68];
      do
      {
        v72 = *v70;
        do
        {
          v73 = v72;
          v72 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v72);
        }
        while ((_DWORD)v72);
        v74 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v73);
        if ((~v74 & 0x7F) != 0)
        {
          if ((v74 & 0x40) != 0)
            goto LABEL_186;
          v69 |= 1 << v74;
        }
        ++v70;
      }
      while (v70 != v71);
    }
    else
    {
      v69 = 0;
    }
    v75 = *v34;
    if (*v34)
    {
      v76 = *(_DWORD *)(v75 - 8);
      v77 = 9 * ((v66 + ~((_DWORD)v66 << 15)) ^ ((v66 + ~((_DWORD)v66 << 15)) >> 10));
      v78 = (v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11);
      v79 = v76 & (v78 ^ HIWORD(v78));
      v80 = (_DWORD *)(v75 + 48 * v79);
      v81 = *v80;
      if (*v80 != (_DWORD)v66)
      {
        v82 = 1;
        while (v81 != -1)
        {
          v79 = (v79 + v82) & v76;
          v80 = (_DWORD *)(v75 + 48 * v79);
          v81 = *v80;
          ++v82;
          if (*v80 == (_DWORD)v66)
            goto LABEL_135;
        }
        v80 = (_DWORD *)(v75 + 48 * *(unsigned int *)(v75 - 4));
      }
LABEL_135:
      if (v80 != (_DWORD *)(v75 + 48 * *(unsigned int *)(v75 - 4)))
      {
        v83 = v80[3];
        v84 = v80 + 4;
        if ((_DWORD)v83 != 8)
          v84 = (_QWORD *)*v84;
        v85 = 0;
        while ((_DWORD)v83 != v85)
        {
          v86 = v85;
          v87 = *((_DWORD *)v84 + v85++);
          if (v87 != -1)
          {
            v88 = v86;
            goto LABEL_142;
          }
        }
        v88 = v83;
LABEL_142:
        if ((_DWORD)v83 != (_DWORD)v88)
        {
          v92 = v88 | (v83 << 32);
          v93 = *(_QWORD *)(a1 + 120);
          while (1)
          {
            v94 = *((unsigned int *)v84 + v92);
            do
            {
              v95 = v94;
              v94 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v94);
            }
            while ((_DWORD)v94);
            v96 = *(_BYTE *)(v93 + v95);
            v97 = v96 & 0x7F;
            if (v97 != 127)
            {
              if (v97 >= 0x40)
                goto LABEL_186;
              if (((v69 >> v97) & 1) == 0)
                break;
            }
            v98 = HIDWORD(v92);
            if ((v88 + 1) > HIDWORD(v92))
              LODWORD(v98) = v88 + 1;
            while (1)
            {
              v99 = (v88 + 1);
              v92 = v92 & 0xFFFFFFFF00000000 | v99;
              if ((_DWORD)v98 - 1 == (_DWORD)v88)
                break;
              a2 = (void *)*((unsigned int *)v84 + v99);
              LODWORD(v88) = v88 + 1;
              if ((_DWORD)a2 != -1)
                goto LABEL_161;
            }
            LODWORD(v99) = v98;
LABEL_161:
            LODWORD(v88) = v99;
            if ((_DWORD)v83 == (_DWORD)v99)
              goto LABEL_143;
          }
          *(_BYTE *)(v93 + v66) = v96;
          goto LABEL_166;
        }
      }
    }
LABEL_143:
    v89 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v89)
      break;
LABEL_148:
    v91 = *(unsigned int *)(a1 + 148);
    if ((_DWORD)v91 == *(_DWORD *)(a1 + 144))
      *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * *(unsigned int *)(a1 + 148)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 136, v91 + 1, (unint64_t)v113);
    else
      *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v91) = v66;
    ++*(_DWORD *)(a1 + 148);
LABEL_166:
    v65 = *(_DWORD *)(a1 + 188);
    if (!v65)
      goto LABEL_170;
  }
  v90 = *(_BYTE **)a1;
  while ((*v90 & 0x7Fu) < 0x40)
  {
    if (((v69 >> (*v90 & 0x7F)) & 1) == 0)
    {
      *(_BYTE *)(*v19 + v66) = *v90;
      goto LABEL_166;
    }
    ++v90;
    if (!--v89)
      goto LABEL_148;
  }
LABEL_186:
  __break(1u);
}

uint64_t WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::take(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v3 = *a2;
  if (!*a2)
    goto LABEL_14;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = v3 + 48 * v7;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 != a3)
  {
    v10 = 1;
    while (v9 != -1)
    {
      v7 = (v7 + v10) & v4;
      v8 = v3 + 48 * v7;
      v9 = *(_DWORD *)v8;
      ++v10;
      if (*(_DWORD *)v8 == a3)
        goto LABEL_8;
    }
    v8 = v3 + 48 * *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v3 + 48 * *(unsigned int *)(v3 - 4) == v8)
  {
LABEL_14:
    *(_QWORD *)result = 0x800000000;
    *(_QWORD *)&v16 = -1;
    *((_QWORD *)&v16 + 1) = -1;
    *(_OWORD *)(result + 8) = v16;
    *(_OWORD *)(result + 24) = v16;
  }
  else
  {
    v11 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)result = *(_OWORD *)(v8 + 8);
    *(_OWORD *)(result + 16) = v11;
    *(_QWORD *)(result + 32) = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 8) = 0x800000000;
    *(_QWORD *)&v12 = -1;
    *((_QWORD *)&v12 + 1) = -1;
    *(_OWORD *)(v8 + 16) = v12;
    *(_OWORD *)(v8 + 32) = v12;
    v13 = *a2;
    if (!*a2 || (v13 += 48 * *(unsigned int *)(v13 - 4), v13 != v8))
    {
      if (v13 != v8)
      {
        *(_DWORD *)v8 = -2;
        ++*(_DWORD *)(*a2 - 16);
        v14 = *a2;
        if (*a2)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v17 = *a2;
        if (*a2)
        {
          v18 = 6 * *(_DWORD *)(v17 - 12);
          v19 = *(_DWORD *)(v17 - 4);
          if (v18 < v19 && v19 >= 9)
            return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v19 >> 1, 0);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;

  if (!a4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = result;
      v9 = **(_QWORD **)result;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = *(JSC::B3::Air::Inst **)(result + 8);
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198076D6CLL);
          }
          v19 = *(_QWORD *)(v8 + 16);
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          v20 = result;
          if ((result & 1) != 0)
            goto LABEL_16;
          v26 = *(uint64_t **)(v8 + 8);
          v27 = *((__int16 *)v26 + 60) - 90;
          v28 = v27 > 0x12;
          v29 = (1 << v27) & 0x60011;
          if (!v28 && v29 != 0)
          {
            v31 = *((unsigned int *)v26 + 3);
            if (!(_DWORD)v31)
            {
              __break(0xC471u);
              JUMPOUT(0x198076D74);
            }
            v32 = *v26;
            v33 = ((unint64_t)(a2 - v32) >> 5) ^ 1;
            if (v33 >= v31)
            {
              __break(0xC471u);
              JUMPOUT(0x198076D7CLL);
            }
            if ((_DWORD)v31 == 2)
            {
              v34 = (_BYTE *)(v32 + 32 * v33);
              if (v34[8] == 9 && *(_BYTE *)(*(_QWORD *)v34 + 4) == 1)
              {
LABEL_16:
                if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
                {
                  v21 = *(_QWORD *)(v19 + 40);
                  v22 = *v7;
                  v24 = *(_QWORD *)(v21 + 16);
                  v23 = v21 + 16;
                  v25 = 2 * v24 + 8;
                  if (v24 >= 0)
                    v23 = v25;
                  if (((*(_QWORD *)(v23 + ((v22 >> 3) & 0x1FFFFFF8)) >> v22) & 1) != 0)
                    return result;
                }
                else
                {
                  LODWORD(v22) = *v7;
                }
                result = JSC::B3::Air::TmpWidth::requiredWidth(v19 + 8, v22);
                if (a3 - 4 <= 6 && result > a5)
                  return result;
                v35 = *(_BYTE **)(v8 + 24);
                if ((_DWORD)result == 2)
                {
                  v36 = *v35;
                  v37 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  if (v36)
                  {
LABEL_41:
                    v38 = 4;
LABEL_42:
                    if (*v37 > v38)
                      v38 = *v37;
                    *v37 = v38;
                    *(_BYTE *)(a2 + 24) = 0;
                    *(_QWORD *)v7 = 0;
                    *(_QWORD *)a2 = v37;
                    *(_WORD *)(a2 + 8) = 521;
                    *(_DWORD *)(a2 + 12) = 0;
                    **(_BYTE **)(v8 + 32) = 1;
                    if ((v20 & 1) == 0)
                      **(_BYTE **)(v8 + 40) = 1;
                    return result;
                  }
                }
                else
                {
                  *v35 = 0;
                  v37 = *(unsigned int **)(v9 + 16 * v15 + 8);
                }
                if (a5 != 3)
                {
                  v38 = 1;
                  switch(a5)
                  {
                    case 0u:
                      goto LABEL_42;
                    case 1u:
                      v38 = 2;
                      goto LABEL_42;
                    case 2u:
                      goto LABEL_41;
                    case 4u:
                      v38 = 16;
                      goto LABEL_42;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x198076D64);
                  }
                }
                v38 = 8;
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t **v5;
  unsigned int *v6;
  uint64_t **v7;

  v5 = **(uint64_t ****)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v6 = (unsigned int *)(a2 + 16);
      v7 = **(uint64_t ****)(a1 + 16);
      goto LABEL_8;
    case 6:
    case 7:
    case 8:
      v6 = (unsigned int *)(a2 + 16);
      goto LABEL_6;
    case 0xB:
      v6 = (unsigned int *)(a2 + 20);
LABEL_6:
      v7 = v5;
      a3 = 0;
      goto LABEL_7;
    case 0xC:
    case 0xD:
      v6 = (unsigned int *)(a2 + 16);
      v7 = **(uint64_t ****)(a1 + 16);
      a3 = 6;
LABEL_7:
      a4 = 0;
LABEL_8:
      break;
    default:
      return;
  }
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, unsigned int *a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  _BYTE v47[25];
  WTF *v48;
  uint64_t v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  _BYTE v53[12];
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  _OWORD v57[6];
  _QWORD v58[2];

  if (!a4)
  {
    v5 = *a2;
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v7 = **a1;
      if (!v7)
        goto LABEL_12;
      v9 = *(_DWORD *)(v7 - 8);
      v10 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
      v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
      v12 = v9 & (v11 ^ HIWORD(v11));
      v13 = *(_DWORD *)(v7 + 16 * v12);
      if (v13 != v5)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v9;
          v13 = *(_DWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == v5)
            goto LABEL_11;
        }
        v12 = *(unsigned int *)(v7 - 4);
      }
LABEL_11:
      if (v12 != *(_DWORD *)(v7 - 4))
      {
        v19 = a1[3];
        v20 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v19 + 1), v5);
        if (v20 == 3)
          v27 = 8;
        else
          v27 = 16;
        if (v20 < 3)
          v27 = 4;
        if (v27 == 4)
        {
          v28 = 94;
        }
        else if (v27 == 16)
        {
          v28 = 113;
        }
        else
        {
          v28 = 90;
        }
        v29 = *(_DWORD *)(*v19 + 176);
        *(_DWORD *)(*v19 + 176) = v29 + 1;
        v30 = (v29 + 33);
        *a2 = v30;
        v31 = a1[4];
        v32 = *v31;
        if (*v31 < 0)
          v33 = 63;
        else
          v33 = *(_QWORD *)(2 * v32);
        if (v33 <= v30)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1[4], v30 + 1, 0);
          v32 = *v31;
        }
        if (v32 >= 0)
          v34 = 2 * v32 + 8;
        else
          v34 = (uint64_t)v31;
        *(_QWORD *)(v34 + ((v30 >> 3) & 0x1FFFFFF8)) |= 1 << v30;
        if (a3 != 10)
        {
          v35 = *(_QWORD *)(v7 + 16 * v12 + 8);
          *(_QWORD *)&v47[16] = 0;
          v47[24] = 0;
          *(_WORD *)&v47[8] = 521;
          *(_QWORD *)v47 = v35;
          *(_DWORD *)&v47[12] = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            v36 = (uint64_t)a1[5];
            v37 = *(unsigned int *)a1[6];
            v38 = *a2;
            *(_OWORD *)&v50[9] = *(_OWORD *)&v47[9];
            *(_OWORD *)v50 = *(_OWORD *)v47;
            *(_QWORD *)&v51 = 0;
            WORD4(v51) = 513;
            HIDWORD(v51) = 1;
            *(_QWORD *)&v52 = v38;
            BYTE8(v52) = 0;
            v57[0] = *(_OWORD *)v47;
            v57[2] = v51;
            v57[3] = v52;
            v39 = a1[7][14];
            v48 = (WTF *)v50;
            *(_QWORD *)v53 = v39;
            *(_DWORD *)&v53[8] = v28;
            v54 = v37;
            v55 = (WTF *)v57;
            v57[1] = *(_OWORD *)&v50[16];
            v49 = 3;
            v56 = 0x200000003;
            v58[0] = v39;
            *(_DWORD *)((char *)v58 + 7) = *(_DWORD *)&v53[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v36, (unint64_t)&v54, v21, v22, v23, v24, v25, v26);
            v45 = v55;
            if (v57 != (_OWORD *)v55 && v55)
            {
              v55 = 0;
              LODWORD(v56) = 0;
              WTF::fastFree((unint64_t)v45, v40, v41, v42, v43, v44, v25, v26);
            }
            v46 = v48;
            if (v50 != (_BYTE *)v48 && v48)
            {
              v48 = 0;
              LODWORD(v49) = 0;
              WTF::fastFree((unint64_t)v46, v40, v41, v42, v43, v44, v25, v26);
            }
          }
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>((uint64_t)a1[5], (*(_DWORD *)a1[6] + 1), v28, a1[7][14], *a2, v47, v25, v26);
        }
      }
      else
      {
LABEL_12:
        v15 = a1[1];
        if (*((_DWORD *)v15 + 59))
        {
          v16 = v15[28];
          v17 = v5;
          do
          {
            v18 = v17;
            v17 = *(_DWORD *)(v16 + 4 * v17);
          }
          while (v17);
          if (v18 != v5)
          {
            *a2 = v18;
            *(_BYTE *)a1[2] = 1;
          }
        }
      }
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::~AbstractColoringAllocator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  unint64_t *v37;

  v9 = *(_QWORD *)(a1 + 264);
  if (a1 + 280 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 224);
  if (v11)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 208);
  if ((v12 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 192);
  if (v13)
  {
    *(_QWORD *)(a1 + 192) = 0;
    *(_DWORD *)(a1 + 200) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 176);
  if (v14)
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 168);
  if ((v15 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v15, a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 152);
  if (v16)
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(_QWORD *)(a1 + 136);
  if (v17)
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *(_QWORD *)(a1 + 120);
  if (v18)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *(unsigned int *)(a1 + 116);
  v20 = *(_QWORD *)(a1 + 104);
  if (!(_DWORD)v19)
  {
    if (!v20)
      goto LABEL_24;
    goto LABEL_64;
  }
  v36 = 40 * v19;
  v37 = (unint64_t *)(v20 + 8);
  do
  {
    if (*((_DWORD *)v37 - 1) != 8)
      WTF::fastFree(*v37, a2, a3, a4, a5, a6, a7, a8);
    v37 += 5;
    v36 -= 40;
  }
  while (v36);
  v20 = *(_QWORD *)(a1 + 104);
  if (v20)
  {
LABEL_64:
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_24:
  v21 = *(_QWORD *)(a1 + 88);
  if (v21)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *(_QWORD *)(a1 + 80);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (unint64_t *)(v22 + 16);
      do
      {
        if (*((_DWORD *)v24 - 4) != -2 && *((_DWORD *)v24 - 1) != 8)
          WTF::fastFree(*v24, a2, a3, a4, a5, a6, a7, a8);
        v24 += 6;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)(a1 + 64);
  if (v25)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *(unsigned int *)(a1 + 60);
  v27 = *(_QWORD *)(a1 + 48);
  if ((_DWORD)v26)
  {
    v28 = 16 * v26;
    do
    {
      v29 = *(_QWORD *)v27;
      if (*(_QWORD *)v27)
      {
        *(_QWORD *)v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
        WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
      }
      v27 += 16;
      v28 -= 16;
    }
    while (v28);
    v27 = *(_QWORD *)(a1 + 48);
  }
  if (v27)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *(unsigned int *)(a1 + 36);
  v31 = *(_QWORD *)(a1 + 24);
  if ((_DWORD)v30)
  {
    v32 = 24 * v30;
    while (1)
    {
      if (*(_DWORD *)(v31 + 8) == -1)
      {
        if (*(_QWORD *)v31)
        {
          v33 = *(_QWORD *)v31 - 16;
          goto LABEL_51;
        }
      }
      else if ((*(_QWORD *)v31 & 0x8000000000000000) == 0)
      {
        v33 = 2 * *(_QWORD *)v31;
LABEL_51:
        WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
      }
      v31 += 24;
      v32 -= 24;
      if (!v32)
      {
        v31 = *(_QWORD *)(a1 + 24);
        break;
      }
    }
  }
  if (v31)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD **v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD **v43;
  uint64_t v44;
  _QWORD *v45;
  char *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  char **v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  _QWORD v74[3];
  _QWORD **v75;
  _QWORD **v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t **v79;
  void *v80;
  void **v81;
  uint64_t ***v82;

  v75 = a3;
  v76 = a2;
  v74[0] = &v76;
  v74[1] = &v75;
  v74[2] = a1;
  v77 = v74;
  if (!a2)
    goto LABEL_18;
  v78 = (uint64_t *)&v77;
  v79 = &v78;
  if ((*((__int16 *)a2 + 60) - 446) > 5)
  {
    v8 = *((unsigned int *)a2 + 3);
    if (!(_DWORD)v8)
      goto LABEL_18;
    v9 = 0;
    v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
    v11 = 1;
    while (1)
    {
      if (v9 >= *((unsigned int *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x198077A50);
      }
      v12 = v10[v9];
      if ((v12 >> 5) - 1 >= 5)
        goto LABEL_102;
      v13 = (char *)&(*a2)[v11];
      v14 = *v13;
      v15 = *((_DWORD *)v13 + 2);
      if ((v14 - 12) >= 2)
      {
        if (v14 != 1 || (v12 & 0xC) != 4)
          goto LABEL_15;
        v17 = (v12 >> 4) & 1;
        v16 = *v78;
        LODWORD(v80) = v15;
      }
      else
      {
        v16 = *v78;
        LODWORD(v80) = v15;
        v17 = 0;
      }
LABEL_15:
      ++v9;
      v11 += 4;
      if (v8 == v9)
        goto LABEL_18;
    }
  }
  v80 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
  v81 = &v80;
  v82 = &v79;
  JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v80);
LABEL_18:
  if (a3)
  {
    v78 = (uint64_t *)&v77;
    v79 = &v78;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v19 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 1;
        do
        {
          if (v20 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198077A58);
          }
          v23 = v21[v20];
          if ((v23 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198077A48);
          }
          v24 = &(*a3)[v22];
          if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
          {
            v25 = *v78;
            LODWORD(v80) = *((_DWORD *)v24 + 2);
          }
          ++v20;
          v22 += 4;
        }
        while (v19 != v20);
      }
    }
    else
    {
      v80 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v81 = &v80;
      v82 = &v79;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v80);
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198077A88);
    }
    v26 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v28 = v27 | v26;
    if (v27 | v26)
    {
      v29 = v26;
      do
      {
        v30 = __clz(__rbit64(v28));
        v31 = (char)(31 - v30);
        if (v30 < 0x20)
          v31 = v30 + 1;
        LODWORD(v80) = v31;
        v28 &= v28 - 1;
      }
      while (v28);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198077A90);
    }
    v32 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v34 = v33 | v32;
    if (v33 | v32)
    {
      v35 = v32;
      do
      {
        v36 = __clz(__rbit64(v34));
        v37 = (char)(31 - v36);
        if (v36 < 0x20)
          v37 = v36 + 1;
        LODWORD(v80) = v37;
        v34 &= v34 - 1;
      }
      while (v34);
    }
  }
  v38 = v76;
  if (!v76)
    goto LABEL_55;
  v39 = *((__int16 *)v76 + 60);
  if ((v39 | 4) != 0x5E)
    goto LABEL_55;
  if (*((_DWORD *)v76 + 3) != 2)
    goto LABEL_55;
  v40 = *v76;
  if (*((_BYTE *)*v76 + 8) != 1 || *((_BYTE *)v40 + 40) != 1)
    goto LABEL_55;
  if (v39 != 94)
    goto LABEL_57;
  v41 = *(_QWORD *)(a1 + 336);
  if (!v41)
    goto LABEL_55;
  v42 = *((unsigned int *)v40 + 4);
  if ((int)v42 < 1)
  {
    v42 = -(int)v42;
    if (v42 >= *(unsigned int *)(v41 + 28))
    {
LABEL_102:
      __break(0xC471u);
      JUMPOUT(0x198077A28);
    }
    v41 += 16;
  }
  else if (v42 >= *(_DWORD *)(v41 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198077A98);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)v41 + 2 * v42 + 1) <= 2u)
  {
LABEL_57:
    v47 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v76 + 60);
    v48 = v47[1];
    if ((v48 >> 5) - 1 >= 5 || (v49 = v47[2], (v49 >> 5) - 1 > 4))
    {
      __break(0xC471u);
      JUMPOUT(0x198077A78);
    }
    v50 = v48 & 0xC;
    v51 = *((_DWORD *)v40 + 4);
    v52 = v50 == 4;
    if (v50 == 4)
      v53 = 0;
    else
      v53 = *((_DWORD *)v40 + 4);
    if (!v52)
      v51 = 0;
    v54 = *((_DWORD *)v40 + 12);
    v55 = v49 & 0xC;
    if (v55 == 4)
      v56 = v54;
    else
      v56 = v51;
    if (v55 == 4)
      v57 = v53;
    else
      v57 = v54;
    v58 = (char **)(a1 + 88);
    v80 = (void *)__PAIR64__(v56, v57);
    v59 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v59 == *(_DWORD *)(a1 + 96))
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * *(unsigned int *)(a1 + 100)) = *(_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v58, v59 + 1, (unint64_t)&v80);
    else
      *(_QWORD *)&(*v58)[8 * v59] = v80;
    ++*(_DWORD *)(a1 + 100);
    v60 = *(_DWORD *)(a1 + 296);
    *(_DWORD *)(a1 + 296) = v60 + 1;
    LODWORD(v80) = v60;
    v61 = (_QWORD *)(a1 + 304);
    v62 = *(unsigned int *)(a1 + 316);
    if ((_DWORD)v62 == *(_DWORD *)(a1 + 312))
      *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(a1 + 316)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v80);
    else
      *(_DWORD *)(*v61 + 4 * v62) = v60;
    ++*(_DWORD *)(a1 + 316);
    v63 = *((unsigned int *)v76 + 3);
    if ((_DWORD)v63)
    {
      v64 = 32 * v63;
      v65 = (unsigned int *)(*v76 + 2);
      do
      {
        v67 = *v65;
        v65 += 8;
        v66 = v67;
        if (*(_DWORD *)(a1 + 116) <= v67)
        {
          __break(0xC471u);
          JUMPOUT(0x198077A80);
        }
        WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v80, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v66), v59);
        v64 -= 32;
      }
      while (v64);
    }
    v68 = *(unsigned int *)(*a4 + 60);
    if ((_DWORD)v68)
    {
      v69 = *(unsigned int **)(*a4 + 48);
      v70 = 4 * v68;
      do
      {
        if (v57 != *v69)
        ++v69;
        v70 -= 4;
      }
      while (v70);
    }
    v71 = *(unsigned int *)(a1 + 276);
    if ((_DWORD)v71)
    {
      v72 = *(unsigned int **)(a1 + 264);
      v73 = 4 * v71;
      do
      {
        if (v57 != *v72)
        ++v72;
        v73 -= 4;
      }
      while (v73);
    }
    v43 = v75;
    v44 = *a4;
    v45 = (_QWORD *)a1;
    v38 = 0;
  }
  else
  {
LABEL_55:
    v43 = v75;
    v44 = *a4;
    v45 = (_QWORD *)a1;
  }
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(_QWORD *result, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t ****v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t ***v35;
  uint64_t **v36;
  uint64_t ***v37;
  uint64_t *****v38;

  v30[1] = result;
  v31 = a4;
  v30[0] = &v31;
  v34 = v30;
  if (a2)
  {
    v35 = (uint64_t ***)&v34;
    v32 = &v35;
    if ((*((__int16 *)a2 + 60) - 446) > 5)
    {
      v6 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v6 - 1) * v6) >> 1);
        v9 = 1;
        do
        {
          if (v7 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198077E18);
          }
          v10 = v8[v7];
          if ((v10 >> 5) - 1 >= 5)
            goto LABEL_46;
          ++v7;
          v9 += 4;
        }
        while (v6 != v7);
      }
    }
    else
    {
      v36 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v37 = &v36;
      v38 = &v32;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v36);
    }
  }
  if (a3)
  {
    v35 = (uint64_t ***)&v34;
    v32 = &v35;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v11 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v11 - 1) * v11) >> 1);
        do
        {
          if (v12 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198077E20);
          }
          v14 = v13[v12];
          if ((v14 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198077E08);
          }
          v15 = (uint64_t)&(*a3)[4 * v12];
          if (*(_BYTE *)(v15 + 8) == 1 && (v14 & 0xF) - 8 <= 2 && (v14 & 0x10) == 0)
          {
            v16 = *(_DWORD *)(v15 + 16);
            v17 = (*v35)[1];
            v18 = ***v35;
            v19 = *(unsigned int *)(v18 + 60);
            if ((_DWORD)v19)
            {
              v20 = *(unsigned int **)(v18 + 48);
              v21 = 4 * v19;
              do
              {
                v22 = *v20;
                v23 = v17[42];
                if ((int)*v20 <= 0)
                {
                  if (*(_DWORD *)(v23 + 28) <= -v22)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198077E28);
                  }
                }
                else if (v22 >= *(_DWORD *)(v23 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198077E10);
                }
                ++v20;
                v21 -= 4;
              }
              while (v21);
            }
            v24 = *((unsigned int *)v17 + 69);
            if ((_DWORD)v24)
            {
              v25 = (unsigned int *)v17[33];
              v26 = 4 * v24;
              do
              {
                v27 = *v25++;
                v26 -= 4;
              }
              while (v26);
            }
          }
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      v36 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v37 = &v36;
      v38 = &v32;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v36);
    }
  }
  v36 = (uint64_t **)v30;
  v37 = (uint64_t ***)&v35;
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    LOBYTE(v35) = 4;
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198077E30);
    }
    v32 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v33 = v28;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v35) = 8;
    if (*((_DWORD *)a3 + 3))
    {
      v32 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
      v33 = v29;
    }
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198077DE8);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v10;
  int v11;

  v4 = *(char *)(a2 + 8);
  v5 = ***(uint64_t ****)(result + 16);
  if ((v4 - 12) < 2)
  {
    v6 = *v5;
    v11 = *(_DWORD *)(a2 + 16);
    v7 = &v11;
    v8 = 0;
  }
  if (v4 == 1 && (a3 & 0xFC) == 4)
  {
    v6 = *v5;
    v10 = *(_DWORD *)(a2 + 16);
    v7 = &v10;
    v8 = a4;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[3];
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void **v31;
  _QWORD *v32;

  v27 = a4;
  if (a3)
    return result;
  v4 = *(_QWORD *)(result + 16);
  v5 = **(_QWORD **)result;
  v6 = **(_QWORD **)(result + 8);
  v26[0] = &v27;
  v26[1] = a2;
  v26[2] = v4;
  if (v5)
  {
    v28 = v26;
    v29 = &v28;
    if ((*(__int16 *)(v5 + 120) - 446) <= 5)
    {
      v30 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v31 = &v30;
      v32 = &v29;
      result = JSC::B3::Air::Inst::forEachArgCustom(v5, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v30);
      goto LABEL_26;
    }
    v7 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(v5 + 120) + ((unint64_t)((v7 - 1) * v7) >> 1);
      v10 = 8;
      do
      {
        if (v8 >= *(unsigned int *)(v5 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198078180);
        }
        v11 = v9[v8];
        v12 = (v11 >> 5) - 1;
        if (v12 >= 5)
          goto LABEL_44;
        v13 = 0xFu >> v12;
        v14 = (char *)(*(_QWORD *)v5 + v10);
        v15 = *v14;
        if ((v15 - 12) >= 2)
        {
          v18 = v15 == 1 && (v11 & 0xC) == 4;
          if (!v18 || (v11 & 0x10) != 0)
            goto LABEL_25;
          result = v28[2];
          if ((v13 & 1) == 0)
          {
LABEL_24:
            goto LABEL_25;
          }
        }
        else
        {
          v16 = v13 & 1;
          result = v28[2];
          if ((v11 & 0xF) == 0xB && v16 == 0)
            goto LABEL_24;
        }
        if (!*(_BYTE *)*v28)
          goto LABEL_24;
LABEL_25:
        ++v8;
        v10 += 32;
      }
      while (v7 != v8);
    }
  }
LABEL_26:
  if (v6)
  {
    v28 = v26;
    v29 = &v28;
    if ((*(__int16 *)(v6 + 120) - 446) > 5)
    {
      v19 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v6 + 120)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 8;
        while (v20 < *(unsigned int *)(v6 + 12))
        {
          v23 = v21[v20];
          v24 = (v23 >> 5) - 1;
          if (v24 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198078178);
          }
          v25 = *(_QWORD *)v6 + v22;
          if (*(_BYTE *)v25 == 1 && (v23 & 0xF) - 8 <= 2 && (v23 & 0x10) == 0)
          {
            result = v28[2];
            if (((0xFu >> v24) & 1) == 0 || !*(_BYTE *)*v28)
          }
          ++v20;
          v22 += 32;
          if (v19 == v20)
            return result;
        }
LABEL_44:
        __break(0xC471u);
        JUMPOUT(0x198078158);
      }
    }
    else
    {
      v30 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v31 = &v30;
      v32 = &v29;
      return JSC::B3::Air::Inst::forEachArgCustom(v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v30);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4, unsigned int a5)
{
  int v5;
  uint64_t v6;
  BOOL v7;

  v5 = *(char *)(a2 + 8);
  v6 = ***(_QWORD ***)(result + 16);
  if ((v5 - 12) >= 2)
  {
    v7 = v5 == 1 && (a3 & 0xFC) == 4;
    if (!v7 || a4)
      return result;
    result = *(_QWORD *)(v6 + 16);
    goto LABEL_3;
  }
  result = *(_QWORD *)(v6 + 16);
  if (a3 == 11)
  {
LABEL_3:
    if (a5 > 3)
  }
  if (!**(_BYTE **)v6)
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !a4)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v5 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      if (v5 <= 0x1F)
      {
        v6 = v5 + 1;
        v7 = (*a2)[1];
        v8 = ***a2;
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v10 = *(unsigned int **)(v8 + 48);
          v11 = 4 * v9;
          if (((1 << v5) & *v4) != 0)
          {
            do
            {
              v12 = *v10;
              v13 = v7[42];
              if ((int)*v10 <= 0)
              {
                if (*(_DWORD *)(v13 + 28) <= -v12)
                  goto LABEL_86;
              }
              else if (v12 >= *(_DWORD *)(v13 + 12))
              {
                goto LABEL_86;
              }
              if (v12 != (_DWORD)v6)
              {
                v43 = *v10;
                v44 = v6;
                if (v12 >= v6)
                  v14 = v6;
                else
                  v14 = v12;
                if (*((_DWORD *)v7 + 9) <= v14)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198078770);
                }
                if (v12 <= v6)
                  v15 = v6;
                else
                  v15 = v12;
                result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v14), v15);
                *((_DWORD *)v7 + 10) += result;
                if ((_BYTE)result)
                {
                  v16 = *((_DWORD *)v7 + 4);
                  if (v16 < v6)
                  {
                    v17 = v7[6] + 16 * v6;
                    v18 = *(unsigned int *)(v17 + 12);
                    if ((_DWORD)v18 == *(_DWORD *)(v17 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v6), v18 + 1, (unint64_t)&v43);
                      *(_DWORD *)(*(_QWORD *)v17 + 4 * *(unsigned int *)(v17 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v17 + 4 * v18) = v12;
                    }
                    ++*(_DWORD *)(v17 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v6);
                    v12 = v43;
                    v16 = *((_DWORD *)v7 + 4);
                  }
                  if (v16 < v12)
                  {
                    v19 = v7[6] + 16 * v12;
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20 == *(_DWORD *)(v19 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v12), v20 + 1, (unint64_t)&v44);
                      *(_DWORD *)(*(_QWORD *)v19 + 4 * *(unsigned int *)(v19 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v19 + 4 * v20) = v6;
                    }
                    ++*(_DWORD *)(v19 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v43);
                  }
                }
              }
              ++v10;
              v11 -= 4;
            }
            while (v11);
          }
          else
          {
            do
            {
              v23 = *v10;
              v22 = v7[42];
              if ((int)*v10 < 1)
              {
                v21 = -v23;
                if (v21 >= *(unsigned int *)(v22 + 28))
                  goto LABEL_86;
                v22 += 16;
              }
              else
              {
                v21 = *v10;
                if (v23 >= *(_DWORD *)(v22 + 12))
                {
LABEL_86:
                  __break(0xC471u);
                  JUMPOUT(0x198078760);
                }
              }
              if (*(unsigned __int8 *)(*(_QWORD *)v22 + 2 * v21) >= 4u && v23 != (_DWORD)v6)
              {
                v43 = *v10;
                v44 = v6;
                if (v23 >= v6)
                  v25 = v6;
                else
                  v25 = v23;
                if (*((_DWORD *)v7 + 9) <= v25)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198078778);
                }
                if (v23 <= v6)
                  v26 = v6;
                else
                  v26 = v23;
                result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v25), v26);
                *((_DWORD *)v7 + 10) += result;
                if ((_BYTE)result)
                {
                  v27 = *((_DWORD *)v7 + 4);
                  if (v27 < v6)
                  {
                    v28 = v7[6] + 16 * v6;
                    v29 = *(unsigned int *)(v28 + 12);
                    if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v6), v29 + 1, (unint64_t)&v43);
                      *(_DWORD *)(*(_QWORD *)v28 + 4 * *(unsigned int *)(v28 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v23;
                    }
                    ++*(_DWORD *)(v28 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v6);
                    v23 = v43;
                    v27 = *((_DWORD *)v7 + 4);
                  }
                  if (v27 < v23)
                  {
                    v30 = v7[6] + 16 * v23;
                    v31 = *(unsigned int *)(v30 + 12);
                    if ((_DWORD)v31 == *(_DWORD *)(v30 + 8))
                    {
                      result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v23), v31 + 1, (unint64_t)&v44);
                      *(_DWORD *)(*(_QWORD *)v30 + 4 * *(unsigned int *)(v30 + 12)) = *(_DWORD *)result;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)v30 + 4 * v31) = v6;
                    }
                    ++*(_DWORD *)(v30 + 12);
                    ++*(_DWORD *)(v7[8] + 4 * v43);
                  }
                }
              }
              ++v10;
              v11 -= 4;
            }
            while (v11);
          }
        }
        v32 = *((unsigned int *)v7 + 69);
        if ((_DWORD)v32)
        {
          v33 = (unsigned int *)v7[33];
          v34 = 4 * v32;
          do
          {
            v35 = *v33;
            if (*v33 != (_DWORD)v6)
            {
              v43 = *v33;
              v44 = v6;
              if (v35 >= v6)
                v36 = v6;
              else
                v36 = v35;
              if (*((_DWORD *)v7 + 9) <= v36)
              {
                __break(0xC471u);
                JUMPOUT(0x198078768);
              }
              if (v35 <= v6)
                v37 = v6;
              else
                v37 = v35;
              result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v36), v37);
              *((_DWORD *)v7 + 10) += result;
              if ((_BYTE)result)
              {
                v38 = *((_DWORD *)v7 + 4);
                if (v38 < v6)
                {
                  v39 = v7[6] + 16 * v6;
                  v40 = *(unsigned int *)(v39 + 12);
                  if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
                  {
                    result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v6), v40 + 1, (unint64_t)&v43);
                    *(_DWORD *)(*(_QWORD *)v39 + 4 * *(unsigned int *)(v39 + 12)) = *(_DWORD *)result;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v39 + 4 * v40) = v35;
                  }
                  ++*(_DWORD *)(v39 + 12);
                  ++*(_DWORD *)(v7[8] + 4 * v6);
                  v35 = v43;
                  v38 = *((_DWORD *)v7 + 4);
                }
                if (v38 < v35)
                {
                  v41 = v7[6] + 16 * v35;
                  v42 = *(unsigned int *)(v41 + 12);
                  if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
                  {
                    result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7[6] + 16 * v35), v42 + 1, (unint64_t)&v44);
                    *(_DWORD *)(*(_QWORD *)v41 + 4 * *(unsigned int *)(v41 + 12)) = *(_DWORD *)result;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v41 + 4 * v42) = v6;
                  }
                  ++*(_DWORD *)(v41 + 12);
                  ++*(_DWORD *)(v7[8] + 4 * v43);
                }
              }
            }
            ++v33;
            v34 -= 4;
          }
          while (v34);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t ***_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, int a4)
{
}

uint64_t ***JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Tmp,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t ***result, char a2, unsigned int a3, char a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;

  if ((a2 - 12) >= 2)
  {
    if (a2 == 1 && (a4 & 0xFC) == 4 && !a5)
    {
      v13 = (uint64_t)(*result)[1];
      v14 = ***result;
      v15 = *(unsigned int *)(v14 + 60);
      if ((_DWORD)v15)
      {
        v16 = *(unsigned int **)(v14 + 48);
        v17 = 4 * v15;
        do
        {
          v18 = *v16;
          v19 = *(_QWORD *)(v13 + 336);
          if ((int)*v16 <= 0)
          {
            if (*(_DWORD *)(v19 + 28) <= -v18)
            {
              __break(0xC471u);
              JUMPOUT(0x1980788B8);
            }
          }
          else if (v18 >= *(_DWORD *)(v19 + 12))
          {
LABEL_30:
            __break(0xC471u);
            JUMPOUT(0x198078830);
          }
          ++v16;
          v17 -= 4;
        }
        while (v17);
      }
      v24 = *(unsigned int *)(v13 + 276);
      if ((_DWORD)v24)
      {
        v25 = *(unsigned int **)(v13 + 264);
        v26 = 4 * v24;
        do
        {
          v27 = *v25++;
          v26 -= 4;
        }
        while (v26);
      }
    }
  }
  else
  {
    v6 = (uint64_t)(*result)[1];
    v7 = ***result;
    v8 = *(unsigned int *)(v7 + 60);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned int **)(v7 + 48);
      for (i = 4 * v8; i; i -= 4)
      {
        v11 = *v9;
        v12 = *(_QWORD *)(v6 + 336);
        if ((int)*v9 <= 0)
        {
          if (*(_DWORD *)(v12 + 28) <= -v11)
            goto LABEL_30;
        }
        else if (v11 >= *(_DWORD *)(v12 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198078924);
        }
        ++v9;
      }
    }
    v20 = *(unsigned int *)(v6 + 276);
    if ((_DWORD)v20)
    {
      v21 = *(unsigned int **)(v6 + 264);
      v22 = 4 * v20;
      do
      {
        v23 = *v21++;
        v22 -= 4;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_0ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_0ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && !a4)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v6 = ******(_QWORD ******)(result + 16);
    v7 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int **)(v6 + 48);
      v9 = 4 * v7;
      do
      {
        v10 = *v8;
        v11 = *(_QWORD *)(v5 + 336);
        if ((int)*v8 <= 0)
        {
          if (*(_DWORD *)(v11 + 28) <= -v10)
          {
LABEL_16:
            __break(0xC471u);
            JUMPOUT(0x1980789D4);
          }
        }
        else if (v10 >= *(_DWORD *)(v11 + 12))
        {
          goto LABEL_16;
        }
        ++v8;
        v9 -= 4;
      }
      while (v9);
    }
    v12 = *(unsigned int *)(v5 + 276);
    if ((_DWORD)v12)
    {
      v13 = *(unsigned int **)(v5 + 264);
      v14 = 4 * v12;
      do
      {
        v15 = *v13++;
        v14 -= 4;
      }
      while (v14);
    }
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)0>::allocate(void)::{lambda(unsigned int &)#1}::operator()(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40[24];

  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*a1 + 88);
  v7 = *(_DWORD *)(v6 + 8 * v5);
  v8 = *(_QWORD *)(*a1 + 152);
  do
  {
    v9 = v7;
    v7 = *(_DWORD *)(v8 + 4 * v7);
  }
  while (v7);
  v10 = *(_DWORD *)(v6 + 8 * v5 + 4);
  do
  {
    v11 = v10;
    v10 = *(_DWORD *)(v8 + 4 * v10);
  }
  while (v10);
  v12 = *(_DWORD *)(v4 + 16);
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v9;
  if (v12 >= v11)
    v14 = v9;
  else
    v14 = v11;
  if ((_DWORD)v13 != (_DWORD)v14)
  {
    if (v12 < v14)
    {
      v15 = v14 >= v13 ? v13 : v14;
      v16 = v14 <= v13 ? v13 : v14;
      if (!WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains(v4 + 24, v15, v16))
      {
        {
          return;
        }
        *(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v14) = v13;
        if (*(_DWORD *)(v4 + 116) <= v14)
        {
          __break(0xC471u);
        }
        else
        {
          v22 = *(_QWORD *)(v4 + 104) + 40 * v14;
          v23 = *(unsigned int *)(v22 + 4);
          v24 = (_QWORD *)(v22 + 8);
          if ((_DWORD)v23 != 8)
            v24 = (_QWORD *)*v24;
          v25 = 0;
          while ((_DWORD)v23 != v25)
          {
            v26 = v25;
            v27 = *((_DWORD *)v24 + v25++);
            if (v27 != -1)
            {
              v28 = v26;
              goto LABEL_28;
            }
          }
          v28 = v23;
LABEL_28:
          if ((_DWORD)v23 == (_DWORD)v28)
          {
LABEL_29:
            v29 = *(_QWORD *)(v4 + 48) + 16 * v14;
            v30 = *(unsigned int *)(v29 + 12);
            if ((_DWORD)v30)
            {
              v31 = *(unsigned int **)v29;
              v32 = (uint64_t *)(v4 + 168);
              v33 = 4 * v30;
              while (1)
              {
                v34 = *v31;
                if (*v32 >= 0)
                  v35 = 2 * *v32 + 8;
                else
                  v35 = v4 + 168;
                if (((*(_QWORD *)(v35 + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0
                  || *(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v34))
                {
                  goto LABEL_41;
                }
                if (*(_DWORD *)(v4 + 16) < v13)
                {
                  v36 = 1;
                  v34 = v13;
LABEL_40:
                  *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * v34) += v36;
                }
LABEL_41:
                ++v31;
                v33 -= 4;
                if (!v33)
                  goto LABEL_42;
              }
              v36 = -1;
              goto LABEL_40;
            }
LABEL_42:
            *(_BYTE *)(v4 + 217) = 1;
            *(_BYTE *)a1[1] = 1;
            goto LABEL_43;
          }
          v37 = v28 | (v23 << 32);
          while (*(_DWORD *)(v4 + 116) > v13)
          {
            WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v40, (unsigned int *)(*(_QWORD *)(v4 + 104) + 40 * v13), *((_DWORD *)v24 + v37));
            v38 = HIDWORD(v37);
            if ((v28 + 1) > HIDWORD(v37))
              LODWORD(v38) = v28 + 1;
            while (1)
            {
              v39 = (v28 + 1);
              v37 = v37 & 0xFFFFFFFF00000000 | v39;
              if ((_DWORD)v38 - 1 == (_DWORD)v28)
                break;
              LODWORD(v28) = v28 + 1;
              if (*((_DWORD *)v24 + v39) != -1)
                goto LABEL_52;
            }
            LODWORD(v39) = v38;
LABEL_52:
            LODWORD(v28) = v39;
            if ((_DWORD)v23 == (_DWORD)v39)
              goto LABEL_29;
          }
          __break(0xC471u);
        }
        JUMPOUT(0x198078CB0);
      }
    }
LABEL_43:
    *a2 = -1;
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;

  if (!a4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = result;
      v9 = **(_QWORD **)result;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = *(JSC::B3::Air::Inst **)(result + 8);
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198078FA4);
          }
          v19 = *(_QWORD *)(v8 + 16);
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          v20 = result;
          if ((result & 1) != 0)
            goto LABEL_16;
          v26 = *(uint64_t **)(v8 + 8);
          v27 = *((__int16 *)v26 + 60) - 90;
          v28 = v27 > 0x12;
          v29 = (1 << v27) & 0x60011;
          if (!v28 && v29 != 0)
          {
            v31 = *((unsigned int *)v26 + 3);
            if (!(_DWORD)v31)
            {
              __break(0xC471u);
              JUMPOUT(0x198078FACLL);
            }
            v32 = *v26;
            v33 = ((unint64_t)(a2 - v32) >> 5) ^ 1;
            if (v33 >= v31)
            {
              __break(0xC471u);
              JUMPOUT(0x198078FB4);
            }
            if ((_DWORD)v31 == 2)
            {
              v34 = (_BYTE *)(v32 + 32 * v33);
              if (v34[8] == 9 && *(_BYTE *)(*(_QWORD *)v34 + 4) == 1)
              {
LABEL_16:
                if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
                {
                  v21 = *(_QWORD *)(v19 + 40);
                  v22 = *v7;
                  v24 = *(_QWORD *)(v21 + 16);
                  v23 = v21 + 16;
                  v25 = 2 * v24 + 8;
                  if (v24 >= 0)
                    v23 = v25;
                  if (((*(_QWORD *)(v23 + ((v22 >> 3) & 0x1FFFFFF8)) >> v22) & 1) != 0)
                    return result;
                }
                else
                {
                  LODWORD(v22) = *v7;
                }
                result = JSC::B3::Air::TmpWidth::requiredWidth(v19 + 8, v22);
                if (a3 - 4 <= 6 && result > a5)
                  return result;
                v35 = *(_BYTE **)(v8 + 24);
                if ((_DWORD)result == 2)
                {
                  v36 = *v35;
                  v37 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  if (v36)
                  {
LABEL_41:
                    v38 = 4;
LABEL_42:
                    if (*v37 > v38)
                      v38 = *v37;
                    *v37 = v38;
                    *(_BYTE *)(a2 + 24) = 0;
                    *(_QWORD *)v7 = 0;
                    *(_QWORD *)a2 = v37;
                    *(_WORD *)(a2 + 8) = 521;
                    *(_DWORD *)(a2 + 12) = 0;
                    **(_BYTE **)(v8 + 32) = 1;
                    if ((v20 & 1) == 0)
                      **(_BYTE **)(v8 + 40) = 1;
                    return result;
                  }
                }
                else
                {
                  *v35 = 0;
                  v37 = *(unsigned int **)(v9 + 16 * v15 + 8);
                }
                if (a5 != 3)
                {
                  v38 = 1;
                  switch(a5)
                  {
                    case 0u:
                      goto LABEL_42;
                    case 1u:
                      v38 = 2;
                      goto LABEL_42;
                    case 2u:
                      goto LABEL_41;
                    case 4u:
                      v38 = 16;
                      goto LABEL_42;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x198078F9CLL);
                  }
                }
                v38 = 8;
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t **v5;
  unsigned int *v6;
  uint64_t **v7;

  v5 = **(uint64_t ****)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v6 = (unsigned int *)(a2 + 16);
      v7 = **(uint64_t ****)(a1 + 16);
      goto LABEL_8;
    case 6:
    case 7:
    case 8:
      v6 = (unsigned int *)(a2 + 16);
      goto LABEL_6;
    case 0xB:
      v6 = (unsigned int *)(a2 + 20);
LABEL_6:
      v7 = v5;
      a3 = 0;
      goto LABEL_7;
    case 0xC:
    case 0xD:
      v6 = (unsigned int *)(a2 + 16);
      v7 = **(uint64_t ****)(a1 + 16);
      a3 = 6;
LABEL_7:
      a4 = 0;
LABEL_8:
      break;
    default:
      return;
  }
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)0,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, unsigned int *a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  _BYTE v47[25];
  WTF *v48;
  uint64_t v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  _BYTE v53[12];
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  _OWORD v57[6];
  _QWORD v58[2];

  if (!a4)
  {
    v5 = *a2;
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v7 = **a1;
      if (!v7)
        goto LABEL_12;
      v9 = *(_DWORD *)(v7 - 8);
      v10 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
      v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
      v12 = v9 & (v11 ^ HIWORD(v11));
      v13 = *(_DWORD *)(v7 + 16 * v12);
      if (v13 != v5)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v9;
          v13 = *(_DWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == v5)
            goto LABEL_11;
        }
        v12 = *(unsigned int *)(v7 - 4);
      }
LABEL_11:
      if (v12 != *(_DWORD *)(v7 - 4))
      {
        v19 = a1[3];
        v20 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v19 + 1), v5);
        if (v20 == 3)
          v27 = 8;
        else
          v27 = 16;
        if (v20 < 3)
          v27 = 4;
        if (v27 == 4)
        {
          v28 = 94;
        }
        else if (v27 == 16)
        {
          v28 = 113;
        }
        else
        {
          v28 = 90;
        }
        v29 = *(_DWORD *)(*v19 + 176);
        *(_DWORD *)(*v19 + 176) = v29 + 1;
        v30 = (v29 + 33);
        *a2 = v30;
        v31 = a1[4];
        v32 = *v31;
        if (*v31 < 0)
          v33 = 63;
        else
          v33 = *(_QWORD *)(2 * v32);
        if (v33 <= v30)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1[4], v30 + 1, 0);
          v32 = *v31;
        }
        if (v32 >= 0)
          v34 = 2 * v32 + 8;
        else
          v34 = (uint64_t)v31;
        *(_QWORD *)(v34 + ((v30 >> 3) & 0x1FFFFFF8)) |= 1 << v30;
        if (a3 != 10)
        {
          v35 = *(_QWORD *)(v7 + 16 * v12 + 8);
          *(_QWORD *)&v47[16] = 0;
          v47[24] = 0;
          *(_WORD *)&v47[8] = 521;
          *(_QWORD *)v47 = v35;
          *(_DWORD *)&v47[12] = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            v36 = (uint64_t)a1[5];
            v37 = *(unsigned int *)a1[6];
            v38 = *a2;
            *(_OWORD *)&v50[9] = *(_OWORD *)&v47[9];
            *(_OWORD *)v50 = *(_OWORD *)v47;
            *(_QWORD *)&v51 = 0;
            WORD4(v51) = 513;
            HIDWORD(v51) = 1;
            *(_QWORD *)&v52 = v38;
            BYTE8(v52) = 0;
            v57[0] = *(_OWORD *)v47;
            v57[2] = v51;
            v57[3] = v52;
            v39 = a1[7][14];
            v48 = (WTF *)v50;
            *(_QWORD *)v53 = v39;
            *(_DWORD *)&v53[8] = v28;
            v54 = v37;
            v55 = (WTF *)v57;
            v57[1] = *(_OWORD *)&v50[16];
            v49 = 3;
            v56 = 0x200000003;
            v58[0] = v39;
            *(_DWORD *)((char *)v58 + 7) = *(_DWORD *)&v53[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v36, (unint64_t)&v54, v21, v22, v23, v24, v25, v26);
            v45 = v55;
            if (v57 != (_OWORD *)v55 && v55)
            {
              v55 = 0;
              LODWORD(v56) = 0;
              WTF::fastFree((unint64_t)v45, v40, v41, v42, v43, v44, v25, v26);
            }
            v46 = v48;
            if (v50 != (_BYTE *)v48 && v48)
            {
              v48 = 0;
              LODWORD(v49) = 0;
              WTF::fastFree((unint64_t)v46, v40, v41, v42, v43, v44, v25, v26);
            }
          }
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>((uint64_t)a1[5], (*(_DWORD *)a1[6] + 1), v28, a1[7][14], *a2, v47, v25, v26);
        }
      }
      else
      {
LABEL_12:
        v15 = a1[1];
        if (*((_DWORD *)v15 + 59))
        {
          v16 = v15[28];
          v17 = v5;
          do
          {
            v18 = v17;
            v17 = *(_DWORD *)(v16 + 4 * v17);
          }
          while (v17);
          if (v18 != v5)
          {
            *a2 = v18;
            *(_BYTE *)a1[2] = 1;
          }
        }
      }
    }
  }
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)1>(void)::{lambda((JSC::B3::Bank)1 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v10 = *(uint64_t **)a1;
  v17 = *(_DWORD *)(a2 + 140);
  if (v17)
  else
  return v17 == 0;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  _BYTE *v42;
  char *v43;
  char v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  unsigned int *v83;
  unsigned int **v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD **v90;
  _QWORD **v91;
  _QWORD **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int **v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  _DWORD *v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  _DWORD *v120;
  _QWORD v121[2];
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  int v129;

  v8 = *(_DWORD *)(a2 + 180);
  v9 = (v8 + 33);
  *(_OWORD *)(v10 + 340) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(int64x2_t *)(v10 + 360) = vdupq_n_s64(0x8000000000000000);
  if (v9 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 368), v9, 0);
  *(_QWORD *)(a1 + 376) = a3;
  v17 = *(_QWORD *)(a2 + 56);
  if (v17)
  {
    v18 = 0;
    do
    {
      v18 |= v17 & -v17;
      v17 &= v17 - 1;
    }
    while (v17);
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      do
      {
        LOBYTE(v121[0]) = v19 | 0x80;
        if ((v19 & 0x60) == 0x20)
        {
          v122 = (char)(31 - v19);
          v20 = *(unsigned int *)(a1 + 276);
          if ((_DWORD)v20 == *(_DWORD *)(a1 + 272))
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * *(unsigned int *)(a1 + 276)) = *(_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 264, (void *)(v20 + 1), (unint64_t)&v122, v12, v13, v14, v15, v16);
          else
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v20) = (char)(31 - v19);
          ++*(_DWORD *)(a1 + 276);
          v21 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
          {
            v26 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)v121);
            v21 = *(unsigned int *)(a1 + 12);
            v22 = *(_QWORD *)a1;
            v23 = *v26;
          }
          else
          {
            v22 = *(_QWORD *)a1;
            v23 = v121[0];
          }
          *(_BYTE *)(v22 + v21) = v23;
          ++*(_DWORD *)(a1 + 12);
        }
        if (v19 > 0x3E)
          break;
        v24 = __clz(__rbit64(v18 >> (v19 + 1)));
        v25 = v24 + v19 + 1;
        if (v25 >= 0x40)
          v19 = 64;
        else
          v19 += v24 + 1;
      }
      while (v25 <= 0x3F);
    }
  }
  WTF::Vector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(a1 + 24, (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 180) + 33), v11, v12, v13, v14, v15, v16);
  v34 = *(unsigned __int16 *)(a1 + 16);
  v35 = v34 + 1;
  v36 = *(unsigned int *)(a1 + 132);
  if (v34 >= v36)
  {
    v37 = *(unsigned int *)(a1 + 128);
    v38 = *(_QWORD *)(a1 + 120);
    if (v34 >= v37)
    {
      v39 = v37 + (v37 >> 2);
      if (v39 >= 0x10)
        v40 = v39 + 1;
      else
        v40 = 16;
      if (v40 <= v35)
        v41 = (WTF *)(v34 + 1);
      else
        v41 = (WTF *)v40;
      v42 = (_BYTE *)WTF::fastMalloc(v41);
      *(_DWORD *)(a1 + 128) = (_DWORD)v41;
      *(_QWORD *)(a1 + 120) = v42;
      if ((_DWORD)v36)
      {
        v43 = (char *)v38;
        do
        {
          v44 = *v43++;
          *v42++ = v44;
          --v36;
        }
        while (v36);
        v42 = *(_BYTE **)(a1 + 120);
      }
      if (!v38)
      {
        v38 = (unint64_t)v42;
        if (!v42)
          goto LABEL_44;
LABEL_41:
        v45 = *(unsigned int *)(a1 + 132);
        if (v35 != v45)
        {
          v46 = (_BYTE *)(v38 + v45);
          v47 = v34 - v45 + 1;
          do
          {
            *v46++ |= 0x7Fu;
            --v47;
          }
          while (v47);
        }
        goto LABEL_44;
      }
      if (v42 == (_BYTE *)v38)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
      }
      WTF::fastFree(v38, v27, v28, v29, v30, v31, v32, v33);
      v38 = *(_QWORD *)(a1 + 120);
    }
    if (!v38)
      goto LABEL_44;
    goto LABEL_41;
  }
LABEL_44:
  *(_DWORD *)(a1 + 132) = v35;
  if (*(_WORD *)(a1 + 16))
  {
    v48 = 1;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v48) = (v48 + 31) & 0x7F;
    while (v48++ < *(unsigned __int16 *)(a1 + 16));
  }
  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v122, *(_QWORD *)(a1 + 256));
  v78 = *(_QWORD *)(a1 + 256);
  v79 = *(unsigned int *)(v78 + 108);
  if ((_DWORD)v79)
  {
    v80 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v78 + 96) + 8 * v80))
    {
      if (v79 == ++v80)
        goto LABEL_54;
    }
    if ((_DWORD)v79 != (_DWORD)v80)
    {
      LODWORD(v82) = *(_DWORD *)(v78 + 108);
      do
      {
        if (v82 <= v80)
        {
LABEL_100:
          __break(0xC471u);
          JUMPOUT(0x198079A14);
        }
        v83 = *(unsigned int **)(*(_QWORD *)(v78 + 96) + 8 * v80);
        v121[0] = &v122;
        v121[1] = v83;
        v127 = 0;
        v84 = (unsigned int **)(v128 + 32 * *v83);
        v85 = *((unsigned int *)v84 + 3);
        if ((_DWORD)v85)
        {
          v114 = *v84;
          v115 = v124;
          v116 = 4 * v85;
          do
          {
            v117 = *v114;
            v118 = *(unsigned int *)(v115 + 4 * v117);
            v119 = v127;
            if (v127 <= v118 || *(_DWORD *)(v125 + 4 * v118) != (_DWORD)v117)
            {
              v129 = *v114;
              if (v127 == v126)
              {
                v120 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, v127 + 1, (unint64_t)&v129);
                *(_DWORD *)(v125 + 4 * v127) = *v120;
                v115 = v124;
              }
              else
              {
                *(_DWORD *)(v125 + 4 * v127) = v117;
              }
              ++v127;
              *(_DWORD *)(v115 + 4 * v117) = v119;
            }
            ++v114;
            v116 -= 4;
          }
          while (v116);
        }
        v86 = v83[5];
        if (!(_DWORD)v86)
          goto LABEL_99;
        do
        {
          v87 = v86 - 1;
          v88 = v83[5];
          if (v88 <= (int)v86 - 1)
            goto LABEL_100;
          v89 = *((_QWORD *)v83 + 1);
          v90 = (_QWORD **)(v89 + ((unint64_t)(v86 - 1) << 7));
          v91 = (_QWORD **)(v89 + (v86 << 7));
          if (v86 >= v88)
            v92 = 0;
          else
            v92 = v91;
          v93 = v123;
          v94 = *(_QWORD *)(v123 + 16 * *v83);
          v95 = v94 + (v86 << 6);
          v96 = *(unsigned int *)(v95 + 44);
          if ((_DWORD)v96)
          {
            v106 = *(unsigned int **)(v95 + 32);
            v107 = v127;
            v108 = 4 * v96;
            v109 = v124;
            v110 = v125;
            do
            {
              v111 = *v106;
              v112 = *(unsigned int *)(v109 + 4 * v111);
              if (v107 > v112 && *(_DWORD *)(v110 + 4 * v112) == (_DWORD)v111)
              {
                v113 = *(unsigned int *)(v110 + 4 * v107 - 4);
                *(_DWORD *)(v110 + 4 * v112) = v113;
                *(_DWORD *)(v109 + 4 * v113) = v112;
                v107 = --v127;
              }
              ++v106;
              v108 -= 4;
            }
            while (v108);
            v94 = *(_QWORD *)(v93 + 16 * *v83);
          }
          v97 = (unsigned int **)(v94 + ((unint64_t)(v86 - 1) << 6));
          v98 = *((unsigned int *)v97 + 3);
          if ((_DWORD)v98)
          {
            v99 = *v97;
            v100 = v124;
            v101 = 4 * v98;
            do
            {
              v102 = *v99;
              v103 = *(unsigned int *)(v100 + 4 * v102);
              v104 = v127;
              if (v127 <= v103 || *(_DWORD *)(v125 + 4 * v103) != (_DWORD)v102)
              {
                v129 = *v99;
                if (v127 == v126)
                {
                  v105 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, v127 + 1, (unint64_t)&v129);
                  *(_DWORD *)(v125 + 4 * v127) = *v105;
                  v100 = v124;
                }
                else
                {
                  *(_DWORD *)(v125 + 4 * v127) = v102;
                }
                ++v127;
                *(_DWORD *)(v100 + 4 * v102) = v104;
              }
              ++v99;
              v101 -= 4;
            }
            while (v101);
          }
          v86 = v87;
        }
        while ((_DWORD)v87);
        if (!v83[5])
        {
LABEL_99:
          __break(0xC471u);
          JUMPOUT(0x198079A1CLL);
        }
        v80 = (v80 + 1);
        v82 = *(unsigned int *)(v78 + 108);
        if (v82 > v80)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v78 + 96) + 8 * v80))
          {
            if (v82 == ++v80)
            {
              LODWORD(v80) = *(_DWORD *)(v78 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v79 != (_DWORD)v80);
    }
  }
LABEL_54:
  WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v122, v71, v72, v73, v74, v75, v76, v77);
  return a1;
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)1>(void)::{lambda((JSC::B3::Bank)1 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(uint64_t **a1, _DWORD *a2, double a3, double a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  WTF::BitVector *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 i;
  uint64_t v17;
  _QWORD *v18;
  WTF::BitVector *v19;
  WTF::BitVector *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::BitVector *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  int *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int16 *v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  WTF::BitVector *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned __int16 v88;
  int v89;
  unsigned __int16 v90;
  unsigned int v91;
  unsigned __int16 v92;
  unsigned __int16 v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned __int16 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t *v145;
  uint64_t v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned __int16 v181;
  uint64_t *v182;
  uint64_t v183;
  unsigned __int16 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned int v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _WORD *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int16 v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  _WORD *v205;
  uint64_t v206;
  _WORD *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v217;
  BOOL v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  WTF::BitVector *v256;
  uint64_t v257;
  unsigned __int16 *v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  _DWORD *v286;
  __int16 *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  _BYTE *v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unsigned __int8 *v300;
  uint64_t v301;
  unsigned int v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  _OWORD *v313;
  uint64_t **v314;
  uint64_t v315;
  uint64_t **v316;
  __int128 v317;
  __int128 v318;
  int v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  int v325;
  unint64_t v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  _OWORD *v330;
  __int128 *v331;
  uint64_t v332;
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  int v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  int v342;
  unsigned int *v343;
  unint64_t v344;
  unsigned int *v345;
  unint64_t v347;
  BOOL v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  _BYTE *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unsigned int v373;
  int v374;
  int v375;
  uint64_t v376;
  char v377;
  int v378;
  int v379;
  int v380;
  int v381;
  uint64_t v382;
  char v383;
  int v384;
  int v385;
  char v386;
  int v387;
  char v388;
  int v389;
  int v390;
  int v391;
  uint64_t v392;
  char v393;
  int v394;
  int v395;
  char v396;
  int v397;
  unsigned int v398;
  unint64_t v399;
  _OWORD *v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  __int128 v410;
  __int128 v411;
  unsigned int *v412;
  unint64_t v413;
  uint64_t v414;
  unsigned int *v415;
  unint64_t v416;
  unsigned int *v417;
  BOOL v418;
  unint64_t v419;
  unsigned int *v420;
  int v421;
  unint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v430;
  uint64_t v431;
  _QWORD *v433;
  int v434;
  uint64_t *v435;
  uint64_t v436;
  unsigned __int16 v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t *v441;
  int v442;
  unint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  uint64_t v448;
  uint64_t v449;
  WTF::BitVector *v450;
  WTF::BitVector *v451;
  WTF::BitVector *v452;
  int v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  char v458;
  __int16 v459;
  unsigned int v460;
  char v461;
  __int128 v462;
  uint64_t v463;
  _BYTE v464[88];
  _BYTE v465[11];
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  _QWORD v469[12];
  _QWORD v470[2];
  unsigned int *v471;
  uint64_t **v472;
  uint64_t v473;
  uint64_t *v474;
  WTF::BitVector *v475;
  __int128 *v476;
  unsigned int *v477;
  _DWORD *v478;
  _QWORD v479[2];
  _QWORD v480[2];
  _QWORD v481[3];

  v11 = (uint64_t)a2;
  v12 = (WTF::BitVector *)(a2 + 90);
  v13 = (a2[87] + a2[83]);
  v14 = *(_QWORD *)(v11 + 360);
  if (v14 < 0)
    v15 = 63;
  else
    v15 = *(_QWORD *)(2 * v14);
  v456 = *a1;
  if (v15 < v13)
    WTF::BitVector::resizeOutOfLine(v12, v13, 0);
  LOWORD(v471) = *(_WORD *)(v11 + 16) + 1;
  for (i = (unsigned __int16)v471; *(_DWORD *)(v11 + 76) > (unsigned __int16)v471; i = (unsigned __int16)v471)
  {
    if (*(_DWORD *)(v11 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(v11 + 64) + 2 * i))
    {
    }
    else
    {
      if (*(_DWORD *)(v11 + 116) <= i)
      {
        __break(0xC471u);
        JUMPOUT(0x19807BE04);
      }
      if (*(_DWORD *)(*(_QWORD *)(v11 + 104) + 40 * i))
      {
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(&v462, (uint64_t *)(v11 + 296), &v471, a7, a8, a9, a10, a11);
      }
      else
      {
        v17 = *(unsigned int *)(v11 + 204);
        if ((_DWORD)v17 == *(_DWORD *)(v11 + 200))
        {
          WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v11 + 192, (unint64_t)&v471);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(v11 + 192) + 2 * v17) = i;
          *(_DWORD *)(v11 + 204) = v17 + 1;
        }
      }
    }
    LOWORD(v471) = (_WORD)v471 + 1;
  }
  v18 = (_QWORD *)(v11 + 304);
  v19 = (WTF::BitVector *)(v11 + 332);
  v20 = (WTF::BitVector *)(v11 + 348);
  v431 = v11 + 192;
  v21 = (_QWORD *)(v11 + 176);
  v22 = (uint64_t *)(v11 + 168);
  v23 = (_QWORD *)(v11 + 336);
  v24 = (_QWORD *)(v11 + 320);
  v441 = (uint64_t *)(v11 + 296);
  v444 = (_QWORD *)(v11 + 336);
  v433 = (_QWORD *)(v11 + 24);
  v435 = (uint64_t *)(v11 + 208);
  v25 = *(_DWORD *)(v11 + 204);
  v454 = (_QWORD *)(v11 + 304);
  v455 = v11;
  v450 = (WTF::BitVector *)(v11 + 348);
  v452 = (WTF::BitVector *)(v11 + 332);
  v447 = (_QWORD *)(v11 + 320);
  v439 = (_QWORD *)(v11 + 176);
  while (1)
  {
    do
    {
LABEL_18:
      if (v25)
      {
        v26 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 192) + 2 * v25 - 2);
        *(_DWORD *)(v11 + 204) = v25 - 1;
        LOWORD(v462) = v26;
        v27 = *(unsigned int *)(v11 + 188);
        if ((_DWORD)v27 == *(_DWORD *)(v11 + 184))
        {
          v74 = (__int16 *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v27 + 1, (unint64_t)&v462);
          v24 = v447;
          v20 = v450;
          v27 = *(unsigned int *)(v11 + 188);
          v75 = *v74;
          v19 = v452;
          v18 = v454;
          *(_WORD *)(*(_QWORD *)(v11 + 176) + 2 * v27) = v75;
          v26 = (unsigned __int16)v462;
        }
        else
        {
          *(_WORD *)(*v21 + 2 * v27) = v26;
        }
        *(_DWORD *)(v11 + 188) = v27 + 1;
        v28 = *(_QWORD *)(v11 + 168);
        if (v28 >= 0)
          v29 = 2 * v28 + 8;
        else
          v29 = (uint64_t)v22;
        *(_QWORD *)(v29 + ((v26 >> 3) & 0x1FF8)) |= 1 << v26;
        v30 = *(_QWORD *)(v11 + 48) + 16 * v26;
        v31 = *(unsigned int *)(v30 + 12);
        if ((_DWORD)v31)
        {
          v32 = *(unsigned __int16 **)v30;
          v33 = 2 * v31;
          do
          {
            v34 = *v32;
            if (*v22 >= 0)
              v35 = 2 * *v22 + 8;
            else
              v35 = (uint64_t)v22;
            if (((*(_QWORD *)(v35 + ((v34 >> 3) & 0x1FF8)) >> v34) & 1) == 0
              && !*(_WORD *)(*(_QWORD *)(v455 + 152) + 2 * v34))
            {
              v19 = v452;
              v18 = v454;
              v24 = v447;
              v20 = v450;
            }
            ++v32;
            v33 -= 2;
          }
          while (v33);
        }
        v11 = v455;
        v23 = v444;
        goto LABEL_303;
      }
      v36 = *(_QWORD *)(v11 + 368);
      if ((v36 & 0x8000000000000000) == 0)
      {
        v37 = 2 * v36;
        v38 = *(_QWORD *)(2 * v36);
        v39 = 8 * ((unint64_t)(v38 + 63) >> 6);
        do
        {
          if (!v39)
            goto LABEL_110;
          v40 = *(_QWORD *)(v37 + v39);
          v39 -= 8;
        }
        while (!v40);
        if ((unint64_t)(v38 + 63) < 0x40)
          goto LABEL_44;
        v41 = *(_QWORD *)(2 * v36 + 8);
        if (v41 && (v42 = __clz(__rbit64(v41)), v42 < 0x40))
        {
          v43 = 0;
        }
        else
        {
          if ((unint64_t)(v38 + 63) >> 6 == 1)
            goto LABEL_44;
          v76 = 0;
          v77 = v37 + 16;
          while (1)
          {
            v78 = *(_QWORD *)(v77 + 8 * v76);
            if (v78)
            {
              v42 = __clz(__rbit64(v78));
              if (v42 <= 0x3F)
                break;
            }
            if (((unint64_t)(v38 + 63) >> 6) - 1 == ++v76)
              goto LABEL_44;
          }
          v43 = v76 + 1;
        }
        v44 = v42 + (v43 << 6);
LABEL_43:
        if (v44 == v38)
        {
LABEL_44:
          if ((v36 & 0x8000000000000000) != 0)
          {
            *(_QWORD *)(v11 + 368) = 0x8000000000000000;
          }
          else
          {
            bzero((void *)(2 * v36 + 8), (unint64_t)(*(_QWORD *)(2 * v36) + 7) >> 3);
            v19 = v452;
            v18 = v454;
            v24 = v447;
            v20 = v450;
            v23 = v444;
          }
          v21 = v439;
          goto LABEL_303;
        }
        v436 = v38;
        while (1)
        {
          if (*(_DWORD *)(v11 + 116) <= (unsigned __int16)v44)
          {
            __break(0xC471u);
            JUMPOUT(0x19807BDECLL);
          }
          v45 = v22;
          v46 = *(_QWORD *)(v11 + 104) + 40 * (unsigned __int16)v44;
          v47 = *(unsigned int *)(v46 + 4);
          v48 = (_QWORD *)(v46 + 8);
          if ((_DWORD)v47 != 8)
            v48 = (_QWORD *)*v48;
          v49 = 0;
          while ((_DWORD)v47 != v49)
          {
            v50 = v49;
            v51 = *((_DWORD *)v48 + v49++);
            if (v51 != -1)
            {
              v52 = v50;
              goto LABEL_54;
            }
          }
          v52 = v47;
LABEL_54:
          if ((_DWORD)v47 != (_DWORD)v52)
          {
            v53 = v52 | (v47 << 32);
            do
            {
              v54 = *((unsigned int *)v48 + v53);
              if (*(uint64_t *)v12 >= 0)
                v55 = 2 * *(_QWORD *)v12 + 8;
              else
                v55 = (uint64_t)v12;
              v56 = (v54 >> 3) & 0x1FFFFFF8;
              v57 = *(_QWORD *)(v55 + v56);
              *(_QWORD *)(v55 + v56) = v57 & ~(1 << v54);
              if (((1 << v54) & v57) != 0)
              {
                LODWORD(v462) = v54;
                if (*(_DWORD *)(v11 + 352) <= v54)
                {
                  v60 = *(unsigned int *)(v11 + 348);
                  LODWORD(v58) = v60;
                  if ((_DWORD)v60 == *(_DWORD *)(v11 + 344))
                  {
                    v65 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v444, v60 + 1, (unint64_t)&v462);
                    v38 = v436;
                    v24 = v447;
                    v20 = v450;
                    v23 = v444;
                    v66 = *v65;
                    v19 = v452;
                    v18 = v454;
                    *(_DWORD *)(*v444 + 4 * *(unsigned int *)v450) = v66;
                  }
                  else
                  {
                    *(_DWORD *)(*v23 + 4 * v60) = v54;
                  }
                  v59 = v20;
                }
                else
                {
                  v58 = *(unsigned int *)(v11 + 332);
                  if ((_DWORD)v58 == *(_DWORD *)(v11 + 328))
                  {
                    v63 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v58 + 1, (unint64_t)&v462);
                    v38 = v436;
                    v18 = v454;
                    v24 = v447;
                    v20 = v450;
                    v23 = v444;
                    v64 = *v63;
                    v19 = v452;
                    *(_DWORD *)(*v447 + 4 * *(unsigned int *)v452) = v64;
                  }
                  else
                  {
                    *(_DWORD *)(*v24 + 4 * v58) = v54;
                  }
                  v59 = v19;
                }
                ++*(_DWORD *)v59;
                *(_DWORD *)(*v18 + 4 * v462) = v58;
              }
              v61 = HIDWORD(v53);
              if ((v52 + 1) > HIDWORD(v53))
                LODWORD(v61) = v52 + 1;
              while (1)
              {
                v62 = (v52 + 1);
                v53 = v53 & 0xFFFFFFFF00000000 | v62;
                if ((_DWORD)v61 - 1 == (_DWORD)v52)
                  break;
                LODWORD(v52) = v52 + 1;
                if (*((_DWORD *)v48 + v62) != -1)
                  goto LABEL_72;
              }
              LODWORD(v62) = v61;
LABEL_72:
              LODWORD(v52) = v62;
            }
            while ((_DWORD)v47 != (_DWORD)v62);
            v36 = *(_QWORD *)(v11 + 368);
          }
          v67 = v44 + 1;
          if ((v36 & 0x8000000000000000) != 0)
          {
            v73 = __clz(__rbit64(v36 >> v67)) + v67;
            if (v73 >= 0x3F)
              v44 = 63;
            else
              v44 = v73;
            v22 = v45;
            goto LABEL_82;
          }
          v44 = *(_QWORD *)(2 * v36);
          v68 = v44 + 63;
          v69 = v67 >> 6;
          v22 = v45;
          if (v67 >> 6 < (unint64_t)(v44 + 63) >> 6)
          {
            v70 = *(_QWORD *)(2 * v36 + 8 * v69 + 8);
            if (!v70 || (v71 = __clz(__rbit64(v70 >> v67)) + (v67 & 0x3F), v71 >= 0x40))
            {
              if (v69 + 1 == v68 >> 6)
                goto LABEL_82;
              while (1)
              {
                v72 = *(_QWORD *)(2 * v36 + 0x10 + 8 * v69);
                if (v72)
                {
                  v71 = __clz(__rbit64(v72));
                  if (v71 <= 0x3F)
                    break;
                }
                if ((v68 >> 6) - 1 == ++v69)
                  goto LABEL_82;
              }
              ++v69;
            }
            v44 = v71 + (v69 << 6);
          }
LABEL_82:
          if (v44 == v38)
            goto LABEL_44;
        }
      }
      if ((v36 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v79 = __clz(__rbit64(v36));
        if (v79 >= 0x3F)
          v44 = 63;
        else
          v44 = v79;
        v38 = 63;
        goto LABEL_43;
      }
LABEL_110:
      v80 = *(_DWORD *)v19;
      v81 = v24;
      v82 = v19;
      if (*(_DWORD *)v19 || (v80 = *(_DWORD *)v20, v81 = v23, v82 = v20, *(_DWORD *)v20))
      {
        v83 = *(unsigned int *)(*v81 + 4 * v80 - 4);
        *(_DWORD *)v82 = v80 - 1;
        v84 = *(_QWORD *)(v11 + 304);
        *(_DWORD *)(v84 + 4 * v83) = -1;
        v85 = *(_QWORD *)(v11 + 88);
        LOWORD(v86) = *(_WORD *)(v85 + 4 * v83);
        v87 = *(_QWORD *)(v11 + 152);
        do
        {
          v88 = v86;
          v86 = *(unsigned __int16 *)(v87 + 2 * (unsigned __int16)v86);
        }
        while (v86);
        LOWORD(v89) = *(_WORD *)(v85 + 4 * v83 + 2);
        do
        {
          v90 = v89;
          v89 = *(unsigned __int16 *)(v87 + 2 * (unsigned __int16)v89);
        }
        while (v89);
        v91 = *(unsigned __int16 *)(v11 + 16);
        if (v91 >= v90)
          v92 = v90;
        else
          v92 = v88;
        if (v91 >= v90)
          v93 = v88;
        else
          v93 = v90;
        if (v92 == v93)
        {
          LOWORD(v462) = v92;
          v21 = v439;
          if (v91 < v92
            && *(_DWORD *)(v11 + 12) > *(unsigned __int16 *)(*(_QWORD *)(v11 + 64) + 2 * v92))
          {
            if (*(_DWORD *)(v11 + 116) <= v92)
            {
              __break(0xC471u);
              JUMPOUT(0x19807BE24);
            }
            v94 = *(_QWORD *)(v11 + 104) + 40 * v92;
            v95 = *(unsigned int *)(v94 + 4);
            v96 = (_QWORD *)(v94 + 8);
            if ((_DWORD)v95 != 8)
              v96 = (_QWORD *)*v96;
            v97 = 0;
            while ((_DWORD)v95 != v97)
            {
              v98 = v97;
              v99 = *((_DWORD *)v96 + v97++);
              if (v99 != -1)
              {
                v100 = v98;
                goto LABEL_132;
              }
            }
            v100 = v95;
LABEL_132:
            if ((_DWORD)v95 == (_DWORD)v100)
            {
LABEL_133:
              v101 = v441;
              v102 = v92;
              goto LABEL_178;
            }
            v133 = v100 | (v95 << 32);
            if (*(uint64_t *)v12 >= 0)
              v134 = 2 * *(_QWORD *)v12 + 8;
            else
              v134 = (uint64_t)v12;
            while (1)
            {
              v135 = *((unsigned int *)v96 + v133);
              if (((*(_QWORD *)(v134 + ((v135 >> 3) & 0x1FFFFFF8)) >> v135) & 1) != 0
                || *(_DWORD *)(v84 + 4 * v135) != -1)
              {
                break;
              }
              v136 = HIDWORD(v133);
              if ((v100 + 1) > HIDWORD(v133))
                LODWORD(v136) = v100 + 1;
              while (1)
              {
                v137 = (v100 + 1);
                v133 = v133 & 0xFFFFFFFF00000000 | v137;
                if ((_DWORD)v136 - 1 == (_DWORD)v100)
                  break;
                LODWORD(v100) = v100 + 1;
                if (*((_DWORD *)v96 + v137) != -1)
                  goto LABEL_190;
              }
              LODWORD(v137) = v136;
LABEL_190:
              LODWORD(v100) = v137;
              if ((_DWORD)v95 == (_DWORD)v137)
                goto LABEL_133;
            }
          }
          goto LABEL_302;
        }
        if (v91 >= v93)
          goto LABEL_154;
        if (v93 >= v92)
          v103 = v92;
        else
          v103 = v93;
        if (v93 <= v92)
          v104 = v92;
        else
          v104 = v93;
        if (*(_DWORD *)(v11 + 36) <= v103)
        {
          __break(0xC471u);
          JUMPOUT(0x19807BE2CLL);
        }
        v105 = *v433 + 16 * v103;
        if (*(_DWORD *)(v105 + 8) == -1)
        {
          v158 = *(_QWORD *)v105;
          if (v158)
          {
            v159 = *(_DWORD *)(v158 - 8);
            v160 = 9 * ((~((_DWORD)v104 << 15) + v104) ^ ((~((_DWORD)v104 << 15) + v104) >> 10));
            v161 = v159 & (((v160 ^ (v160 >> 6)) + ~((v160 ^ (v160 >> 6)) << 11)) ^ (((v160 ^ (v160 >> 6))
                                                                                    + ~((v160 ^ (v160 >> 6)) << 11)) >> 16));
            v162 = *(unsigned __int16 *)(v158 + 2 * v161);
            if (v162 == (_DWORD)v104)
              goto LABEL_154;
            v163 = 1;
            while ((_WORD)v162 != 0xFFFF)
            {
              v161 = (v161 + v163) & v159;
              v162 = *(unsigned __int16 *)(v158 + 2 * v161);
              ++v163;
              if (v162 == (_DWORD)v104)
                goto LABEL_154;
            }
          }
        }
        else
        {
          v106 = *(unsigned __int16 *)(*v433 + 16 * v103 + 12);
          if (v106 <= v104)
          {
            v107 = (_QWORD *)(2 * *(_QWORD *)v105);
            v108 = (*(_QWORD *)v105 & 0x8000000000000000) != 0 ? 63 : *v107;
            v116 = v104 - v106;
            if (v108 > v116)
            {
              if (*(uint64_t *)v105 >= 0)
                v105 = (uint64_t)(v107 + 1);
              if (((*(_QWORD *)(v105 + ((v116 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v116) & 1) != 0)
              {
LABEL_154:
                LOWORD(v462) = v92;
                v21 = v439;
                if (v91 < v92
                  && *(_DWORD *)(v11 + 12) > *(unsigned __int16 *)(*(_QWORD *)(v11 + 64) + 2 * v92))
                {
                  if (*(_DWORD *)(v11 + 116) <= v92)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807BE34);
                  }
                  v117 = *(_QWORD *)(v11 + 104) + 40 * v92;
                  v118 = *(unsigned int *)(v117 + 4);
                  v119 = (_QWORD *)(v117 + 8);
                  if ((_DWORD)v118 != 8)
                    v119 = (_QWORD *)*v119;
                  v120 = 0;
                  while ((_DWORD)v118 != v120)
                  {
                    v121 = v120;
                    v122 = *((_DWORD *)v119 + v120++);
                    if (v122 != -1)
                    {
                      v123 = v121;
                      goto LABEL_163;
                    }
                  }
                  v123 = v118;
LABEL_163:
                  if ((_DWORD)v118 == (_DWORD)v123)
                  {
LABEL_164:
                    WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove(v441, v92, (uint64_t)v18, (uint64_t)v24, 1, a9, a10, a11);
                    v124 = *(unsigned int *)(v11 + 204);
                    if ((_DWORD)v124 == *(_DWORD *)(v11 + 200))
                    {
                      WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v431, (unint64_t)&v462);
                    }
                    else
                    {
                      *(_WORD *)(*(_QWORD *)(v11 + 192) + 2 * v124) = v462;
                      *(_DWORD *)(v11 + 204) = v124 + 1;
                    }
                    v23 = v444;
                    v24 = v447;
                    v19 = v452;
                    v18 = v454;
                  }
                  else
                  {
                    v148 = v123 | (v118 << 32);
                    if (*(uint64_t *)v12 >= 0)
                      v149 = 2 * *(_QWORD *)v12 + 8;
                    else
                      v149 = (uint64_t)v12;
                    while (1)
                    {
                      v150 = *((unsigned int *)v119 + v148);
                      if (((*(_QWORD *)(v149 + ((v150 >> 3) & 0x1FFFFFF8)) >> v150) & 1) != 0
                        || *(_DWORD *)(v84 + 4 * v150) != -1)
                      {
                        break;
                      }
                      v151 = HIDWORD(v148);
                      if ((v123 + 1) > HIDWORD(v148))
                        LODWORD(v151) = v123 + 1;
                      while (1)
                      {
                        v152 = (v123 + 1);
                        v148 = v148 & 0xFFFFFFFF00000000 | v152;
                        if ((_DWORD)v151 - 1 == (_DWORD)v123)
                          break;
                        LODWORD(v123) = v123 + 1;
                        if (*((_DWORD *)v119 + v152) != -1)
                          goto LABEL_212;
                      }
                      LODWORD(v152) = v151;
LABEL_212:
                      LODWORD(v123) = v152;
                      if ((_DWORD)v118 == (_DWORD)v152)
                        goto LABEL_164;
                    }
                  }
                }
                LOWORD(v462) = v93;
                if (*(unsigned __int16 *)(v11 + 16) < v93
                  && *(_DWORD *)(v11 + 12) > *(unsigned __int16 *)(*(_QWORD *)(v11 + 64) + 2 * v93))
                {
                  if (*(_DWORD *)(v11 + 116) <= v93)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807BE3CLL);
                  }
                  v125 = *(_QWORD *)(v11 + 104) + 40 * v93;
                  v126 = *(unsigned int *)(v125 + 4);
                  v127 = (_QWORD *)(v125 + 8);
                  if ((_DWORD)v126 != 8)
                    v127 = (_QWORD *)*v127;
                  v128 = 0;
                  while ((_DWORD)v126 != v128)
                  {
                    v129 = v128;
                    v130 = *((_DWORD *)v127 + v128++);
                    if (v130 != -1)
                    {
                      v131 = v129;
                      goto LABEL_176;
                    }
                  }
                  v131 = v126;
LABEL_176:
                  if ((_DWORD)v126 == (_DWORD)v131)
                  {
LABEL_177:
                    v101 = v441;
                    v102 = v93;
LABEL_178:
                    WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove(v101, v102, (uint64_t)v18, (uint64_t)v24, 1, a9, a10, a11);
                    v132 = *(unsigned int *)(v11 + 204);
                    if ((_DWORD)v132 == *(_DWORD *)(v11 + 200))
                    {
                      WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v431, (unint64_t)&v462);
                    }
                    else
                    {
                      *(_WORD *)(*(_QWORD *)(v11 + 192) + 2 * v132) = v462;
                      *(_DWORD *)(v11 + 204) = v132 + 1;
                    }
                    v23 = v444;
                    v24 = v447;
                    v19 = v452;
                    v18 = v454;
                  }
                  else
                  {
                    v153 = v131 | (v126 << 32);
                    if (*(uint64_t *)v12 >= 0)
                      v154 = 2 * *(_QWORD *)v12 + 8;
                    else
                      v154 = (uint64_t)v12;
                    while (1)
                    {
                      v155 = *((unsigned int *)v127 + v153);
                      if (((*(_QWORD *)(v154 + ((v155 >> 3) & 0x1FFFFFF8)) >> v155) & 1) != 0
                        || *(_DWORD *)(*v18 + 4 * v155) != -1)
                      {
                        break;
                      }
                      v156 = HIDWORD(v153);
                      if ((v131 + 1) > HIDWORD(v153))
                        LODWORD(v156) = v131 + 1;
                      while (1)
                      {
                        v157 = (v131 + 1);
                        v153 = v153 & 0xFFFFFFFF00000000 | v157;
                        if ((_DWORD)v156 - 1 == (_DWORD)v131)
                          break;
                        LODWORD(v131) = v131 + 1;
                        if (*((_DWORD *)v127 + v157) != -1)
                          goto LABEL_224;
                      }
                      LODWORD(v157) = v156;
LABEL_224:
                      LODWORD(v131) = v157;
                      if ((_DWORD)v126 == (_DWORD)v157)
                        goto LABEL_177;
                    }
                  }
                }
LABEL_302:
                v20 = v450;
                goto LABEL_303;
              }
            }
          }
        }
        {
          v170 = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove(v441, v93, v164, v165, v166, v167, v168, v169);
          v173 = v93;
          if ((v170 & 1) == 0)
          {
            if (*v435 >= 0)
              v174 = 2 * *v435 + 8;
            else
              v174 = (uint64_t)v435;
            *(_QWORD *)(v174 + (((unint64_t)v93 >> 3) & 0x1FF8)) &= ~(1 << v93);
          }
          *(_WORD *)(*(_QWORD *)(v11 + 152) + 2 * v93) = v92;
          v18 = v454;
          if (*(_DWORD *)(v11 + 116) <= v93)
          {
            __break(0xC471u);
            JUMPOUT(0x19807BE44);
          }
          v175 = *(_QWORD *)(v11 + 104) + 40 * v93;
          v176 = *(unsigned int *)(v175 + 4);
          v177 = (_QWORD *)(v175 + 8);
          if ((_DWORD)v176 != 8)
            v177 = (_QWORD *)*v177;
          v178 = 0;
          while ((_DWORD)v176 != v178)
          {
            v179 = v178;
            v180 = *((_DWORD *)v177 + v178++);
            if (v180 != -1)
            {
              v181 = v92;
              v182 = v22;
              v183 = v179;
              goto LABEL_246;
            }
          }
          v181 = v92;
          v182 = v22;
          v183 = v176;
LABEL_246:
          if ((_DWORD)v176 == (_DWORD)v183)
          {
            v184 = v181;
            v185 = v181;
          }
          else
          {
            v430 = v173;
            v188 = v183 | (v176 << 32);
            v189 = v181;
            v437 = v181;
            v185 = v181;
            do
            {
              if (*(_DWORD *)(v11 + 116) <= v189)
              {
                __break(0xC471u);
                JUMPOUT(0x19807BE4CLL);
              }
              WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v462, (unsigned int *)(*(_QWORD *)(v11 + 104) + 40 * v185), *((_DWORD *)v177 + v188));
              v190 = HIDWORD(v188);
              if ((v183 + 1) > HIDWORD(v188))
                LODWORD(v190) = v183 + 1;
              v18 = v454;
              while (1)
              {
                v191 = (v183 + 1);
                v188 = v188 & 0xFFFFFFFF00000000 | v191;
                if ((_DWORD)v190 - 1 == (_DWORD)v183)
                  break;
                LODWORD(v183) = v183 + 1;
                if (*((_DWORD *)v177 + v191) != -1)
                  goto LABEL_259;
              }
              LODWORD(v191) = v190;
LABEL_259:
              LODWORD(v183) = v191;
            }
            while ((_DWORD)v176 != (_DWORD)v191);
            v184 = v437;
            v173 = v430;
          }
          v192 = *(_QWORD *)(v11 + 48) + 16 * v173;
          v193 = *(unsigned int *)(v192 + 12);
          v22 = v182;
          if ((_DWORD)v193)
          {
            v194 = *(_WORD **)v192;
            v195 = 2 * v193;
            do
            {
              v196 = (unsigned __int16)*v194;
              if (*v22 >= 0)
                v197 = 2 * *v22 + 8;
              else
                v197 = (uint64_t)v22;
              if (((*(_QWORD *)(v197 + ((v196 >> 3) & 0x1FF8)) >> v196) & 1) == 0
                && !*(_WORD *)(*(_QWORD *)(v11 + 152) + 2 * v196))
              {
                LOWORD(v462) = *v194;
                LOWORD(v471) = v184;
                if (WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::addAndReturnIsNewEntry((uint64_t)v433, v196, v184, v171, v172, a9, a10, a11))
                {
                  v199 = v184;
                  if (*(unsigned __int16 *)(v11 + 16) < v196)
                  {
                    v200 = *(_QWORD *)(v11 + 48) + 16 * v196;
                    v201 = *(unsigned int *)(v200 + 12);
                    if ((_DWORD)v201 == *(_DWORD *)(v200 + 8))
                    {
                      v205 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v11 + 48) + 16 * v196, v201 + 1, (unint64_t)&v471);
                      v206 = *(unsigned int *)(v200 + 12);
                      *(_WORD *)(*(_QWORD *)v200 + 2 * v206) = *v205;
                      *(_DWORD *)(v200 + 12) = v206 + 1;
                      v199 = (unsigned __int16)v471;
                    }
                    else
                    {
                      *(_WORD *)(*(_QWORD *)v200 + 2 * v201) = v184;
                      *(_DWORD *)(v200 + 12) = v201 + 1;
                      v199 = v184;
                    }
                  }
                  v202 = *(unsigned __int16 *)(v11 + 16);
                  if (v202 >= v199)
                  {
                    v18 = v454;
                  }
                  else
                  {
                    v203 = *(_QWORD *)(v11 + 48) + 16 * v199;
                    v204 = *(unsigned int *)(v203 + 12);
                    v18 = v454;
                    if ((_DWORD)v204 == *(_DWORD *)(v203 + 8))
                    {
                      v207 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v203, v204 + 1, (unint64_t)&v462);
                      v18 = v454;
                      v204 = *(unsigned int *)(v203 + 12);
                      *(_WORD *)(*(_QWORD *)v203 + 2 * v204) = *v207;
                    }
                    else
                    {
                      *(_WORD *)(*(_QWORD *)v203 + 2 * v204) = v196;
                    }
                    *(_DWORD *)(v203 + 12) = v204 + 1;
                    v202 = *(unsigned __int16 *)(v11 + 16);
                  }
                  if (v202 < v184)
                    ++*(_WORD *)(*(_QWORD *)(v11 + 64) + 2 * v185);
                }
                else
                {
                  v18 = v454;
                }
              }
              ++v194;
              v195 -= 2;
            }
            while (v195);
          }
          if (*(_DWORD *)(v11 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(v11 + 64) + 2 * v185))
          {
            v208 = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove(v441, v184, (uint64_t)v18, v171, v172, a9, a10, a11);
            v18 = v454;
            if (v208)
            {
              v18 = v454;
            }
          }
          LOWORD(v462) = v184;
          v23 = v444;
          v24 = v447;
          v19 = v452;
          v21 = v439;
          if (*(unsigned __int16 *)(v11 + 16) < v184
            && *(_DWORD *)(v11 + 12) > *(unsigned __int16 *)(*(_QWORD *)(v11 + 64) + 2 * v184))
          {
            if (*(_DWORD *)(v11 + 116) <= v184)
            {
              __break(0xC471u);
              JUMPOUT(0x19807BE54);
            }
            v209 = *(_QWORD *)(v11 + 104) + 40 * v184;
            v210 = *(unsigned int *)(v209 + 4);
            v211 = (_QWORD *)(v209 + 8);
            if ((_DWORD)v210 != 8)
              v211 = (_QWORD *)*v211;
            v212 = 0;
            while ((_DWORD)v210 != v212)
            {
              v213 = v212;
              v214 = *((_DWORD *)v211 + v212++);
              if (v214 != -1)
              {
                v215 = v213;
                goto LABEL_297;
              }
            }
            v215 = v210;
LABEL_297:
            if ((_DWORD)v210 == (_DWORD)v215)
            {
LABEL_298:
              WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove(v441, v184, (uint64_t)v18, (uint64_t)v447, 1, a9, a10, a11);
              v216 = *(unsigned int *)(v11 + 204);
              if ((_DWORD)v216 == *(_DWORD *)(v11 + 200))
              {
                WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v431, (unint64_t)&v462);
              }
              else
              {
                *(_WORD *)(*(_QWORD *)(v11 + 192) + 2 * v216) = v184;
                *(_DWORD *)(v11 + 204) = v216 + 1;
              }
              v23 = v444;
              v24 = v447;
              v19 = v452;
              v18 = v454;
            }
            else
            {
              v223 = v215 | (v210 << 32);
              if (*(uint64_t *)v12 >= 0)
                v224 = 2 * *(_QWORD *)v12 + 8;
              else
                v224 = (uint64_t)v12;
              while (1)
              {
                v225 = *((unsigned int *)v211 + v223);
                if (((*(_QWORD *)(v224 + ((v225 >> 3) & 0x1FFFFFF8)) >> v225) & 1) != 0
                  || *(_DWORD *)(*v18 + 4 * v225) != -1)
                {
                  break;
                }
                v226 = HIDWORD(v223);
                if ((v215 + 1) > HIDWORD(v223))
                  LODWORD(v226) = v215 + 1;
                while (1)
                {
                  v227 = (v215 + 1);
                  v223 = v223 & 0xFFFFFFFF00000000 | v227;
                  if ((_DWORD)v226 - 1 == (_DWORD)v215)
                    break;
                  LODWORD(v215) = v215 + 1;
                  if (*((_DWORD *)v211 + v227) != -1)
                    goto LABEL_329;
                }
                LODWORD(v227) = v226;
LABEL_329:
                LODWORD(v215) = v227;
                if ((_DWORD)v210 == (_DWORD)v227)
                  goto LABEL_298;
              }
            }
          }
          *(_BYTE *)(v11 + 217) = 1;
          goto LABEL_302;
        }
        v186 = *(_QWORD *)(v11 + 360);
        if (v186 >= 0)
          v187 = 2 * v186 + 8;
        else
          v187 = (uint64_t)v12;
        *(_QWORD *)(v187 + ((v83 >> 3) & 0x1FFFFFF8)) |= 1 << v83;
        v23 = v444;
        v24 = v447;
        v20 = v450;
        v19 = v452;
        v21 = v439;
        v18 = v454;
      }
      else
      {
        if (*v441 && *(_DWORD *)(*v441 - 12))
        {
          v109 = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::takeAny(v441, (uint64_t)v23, (uint64_t)v18, (uint64_t)v24, 1, a9, a10, a11);
          LOWORD(v462) = v109;
LABEL_200:
          v146 = *(unsigned int *)(v11 + 204);
          if ((_DWORD)v146 == *(_DWORD *)(v11 + 200))
          {
            WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v431, (unint64_t)&v462);
            v147 = (unsigned __int16)v462;
          }
          else
          {
            v147 = v109;
            *(_WORD *)(*(_QWORD *)(v11 + 192) + 2 * v146) = v109;
            *(_DWORD *)(v11 + 204) = v146 + 1;
          }
          v23 = v444;
          v24 = v447;
          v20 = v450;
          v19 = v452;
          v18 = v454;
          goto LABEL_303;
        }
        v138 = *v435;
        if (*v435 < 0)
        {
          if ((v138 & 0x7FFFFFFFFFFFFFFFLL) == 0)
            goto LABEL_303;
LABEL_197:
          LOWORD(v462) = v109;
          v142 = *(_QWORD *)(v11 + 208);
          v143 = 2 * v142 + 8;
          v144 = v142 < 0;
          v145 = v435;
          if (!v144)
            v145 = (uint64_t *)v143;
          *(uint64_t *)((char *)v145 + (((unint64_t)v109 >> 3) & 0x1FF8)) &= ~(1 << v109);
          goto LABEL_200;
        }
        v139 = (_QWORD *)(2 * v138);
        v140 = ((unint64_t)(*v139 + 63) >> 6);
        while (v140 * 8)
        {
          if (v139[v140--])
            goto LABEL_197;
        }
      }
LABEL_303:
      v25 = *(_DWORD *)(v11 + 204);
      if (v25)
        v217 = 0;
      else
        v217 = *(_DWORD *)(v11 + 332) == 0;
      v218 = v217 && *(_DWORD *)(v11 + 348) == 0;
    }
    while (!v218 || *v441 && *(_DWORD *)(*v441 - 12));
    v219 = *v435;
    if ((*v435 & 0x8000000000000000) == 0)
      break;
    if ((v219 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_343;
  }
  v220 = (_QWORD *)(2 * v219);
  v221 = ((unint64_t)(*v220 + 63) >> 6);
  while (v221 * 8)
  {
    if (v220[v221--])
      goto LABEL_18;
  }
LABEL_343:
  v228 = (uint64_t)v23;
  v229 = (uint64_t)v24;
  v255 = *(unsigned int *)(v11 + 148);
  v434 = v255;
  if ((_DWORD)v255)
  {
    v256 = (WTF::BitVector *)a1[2];
    v466 = 0;
    v257 = 2 * v255;
    v258 = *(unsigned __int16 **)(v11 + 136);
    do
    {
      v259 = *v258;
      LODWORD(v467) = -(int)v259;
      v260 = *(_QWORD *)v256;
      if ((*(_QWORD *)v256 & 0x8000000000000000) != 0)
        v261 = 63;
      else
        v261 = *(_QWORD *)(2 * v260);
      if (v261 <= v259)
      {
        WTF::BitVector::resizeOutOfLine(v256, v259 + 1, 0);
        v260 = *(_QWORD *)v256;
      }
      if (v260 >= 0)
        v262 = 2 * v260 + 8;
      else
        v262 = (uint64_t)v256;
      *(_QWORD *)(v262 + ((v259 >> 3) & 0x1FF8)) |= 1 << v259;
      v263 = *v456;
      v264 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v456 + 1), -(int)v259);
      v265 = 16;
      if (v264 == 3)
        v265 = 8;
      if (v264 >= 3)
        v266 = v265;
      else
        v266 = 4;
      v471 = JSC::B3::Air::Code::addStackSlot(v263, v266, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v462, &v466, (int *)&v467, &v471, v267, v268, v269, v270);
      ++v258;
      v257 -= 2;
    }
    while (v257);
    v278 = *v456;
    *(_QWORD *)&v462 = v278;
    *((_QWORD *)&v462 + 1) = v464;
    v463 = 8;
    v440 = *(unsigned int *)(v278 + 108);
    if ((_DWORD)v440)
    {
      v279 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v278 + 96) + 8 * v279))
      {
        if (v440 == ++v279)
          goto LABEL_467;
      }
      if ((_DWORD)v440 != (_DWORD)v279)
      {
        LODWORD(v280) = *(_DWORD *)(v278 + 108);
        LODWORD(v281) = v279;
        v451 = v256;
        v438 = v278;
        do
        {
          if (v280 <= v281)
          {
            __break(0xC471u);
            JUMPOUT(0x19807BDFCLL);
          }
          v442 = v281;
          v282 = *(_QWORD *)(*(_QWORD *)(v278 + 96) + 8 * v281);
          v461 = 0;
          v460 = 0;
          if (*(_DWORD *)(v282 + 20))
          {
            v283 = 0;
            do
            {
              v284 = v283;
              v285 = *(_QWORD *)(v282 + 8);
              v286 = (_DWORD *)(v285 + ((unint64_t)v283 << 7));
              v459 = 0;
              v458 = 0;
              v471 = (unsigned int *)&v466;
              v472 = (uint64_t **)v286;
              v473 = (uint64_t)v456;
              v474 = (uint64_t *)((char *)&v459 + 1);
              v475 = (WTF::BitVector *)&v459;
              v476 = (__int128 *)&v458;
              v287 = (__int16 *)(v286 + 30);
              if ((*((__int16 *)v286 + 60) - 446) > 5)
              {
                v288 = v286[3];
                if ((_DWORD)v288)
                {
                  v289 = 0;
                  v290 = 0;
                  v291 = (char *)&JSC::B3::Air::g_formTable
                       + 21 * *((__int16 *)v286 + 60)
                       + ((unint64_t)((v288 - 1) * v288) >> 1);
                  v292 = 32 * v288;
                  do
                  {
                    if (v290 >= v286[3])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19807BDCCLL);
                    }
                    if ((*v291 >> 5) - 1 >= 5u)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19807BC3CLL);
                    }
                    ++v290;
                    ++v291;
                    v289 += 32;
                  }
                  while (v292 != v289);
                }
              }
              else
              {
                v468 = (uint64_t)&v467;
                v469[0] = &v471;
                v480[1] = &v467;
                if (*v287 == 448)
                {
                  v481[1] = &v467;
                  if (!v286[3])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807BDDCLL);
                  }
                  (*(void (**)(_QWORD, _DWORD *, _QWORD *))(***(_QWORD ***)v286 + 16))(**(_QWORD **)v286, v286, v481);
                }
                else
                {
                  switch(*v287)
                  {
                    case 446:
                      break;
                    case 447:
                      JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v286, (uint64_t)v480);
                      break;
                    case 449:
                      JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v286, (uint64_t)v480);
                      break;
                    case 450:
                      v481[0] = v480;
                      JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v286, (uint64_t)v481);
                      break;
                    case 451:
                      JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v286, (uint64_t)v480);
                      break;
                    default:
                      WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v286 + 30), "\n");
                      __break(0xC471u);
                      JUMPOUT(0x19807BDA4);
                  }
                }
              }
              if ((_BYTE)v459 && HIBYTE(v459))
                *v287 = 94;
              if (v458)
              {
                v293 = *v287;
                if ((v293 - 107) >= 2)
                {
                  if (v293 == 90 || v293 == 94)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807BCA0);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x19807BD28);
                }
                v294 = *(_DWORD *)(*v456 + 180);
                *(_DWORD *)(*v456 + 180) = v294 + 1;
                LODWORD(v481[0]) = -33 - v294;
                v295 = *(_QWORD *)v451;
                if ((*(_QWORD *)v451 & 0x8000000000000000) != 0)
                  v296 = 63;
                else
                  v296 = *(_QWORD *)(2 * v295);
                v303 = (v294 + 33);
                if (v296 <= v303)
                {
                  WTF::BitVector::resizeOutOfLine(v451, v303 + 1, 0);
                  v295 = *(_QWORD *)v451;
                }
                if (v295 >= 0)
                  v304 = 2 * v295 + 8;
                else
                  v304 = (uint64_t)v451;
                *(_QWORD *)(v304 + ((v303 >> 3) & 0x1FFFFFF8)) |= 1 << v303;
                v305 = v286[3];
                if ((_DWORD)v305 == v286[2])
                {
                  WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v286, (unsigned int *)v481, v272, v273, v274, v275, v276, v277);
                  v308 = v286[3];
                }
                else
                {
                  v306 = *(_QWORD *)v286 + 32 * v305;
                  v307 = v481[0];
                  *(_QWORD *)v306 = 0;
                  *(_WORD *)(v306 + 8) = 513;
                  *(_DWORD *)(v306 + 12) = 1;
                  *(_QWORD *)(v306 + 16) = v307;
                  *(_BYTE *)(v306 + 24) = 0;
                  v308 = v286[3] + 1;
                  v286[3] = v308;
                }
                if (v308 != 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19807BC0CLL);
                }
                v309 = *(_QWORD *)(v285 + (v284 << 7) + 112);
                v467 = v469;
                v470[0] = v309;
                LODWORD(v470[1]) = 0;
                v471 = (unsigned int *)v460;
                v472 = &v474;
                v468 = 3;
                v473 = 3;
                v479[0] = v309;
                *(_DWORD *)((char *)v479 + 7) = *(_DWORD *)((char *)v470 + 7);
                v310 = HIDWORD(v463);
                if (HIDWORD(v463) == (_DWORD)v463)
                {
                  v326 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v462 + 8, HIDWORD(v463) + 1, (unint64_t)&v471, v273, v274, v275, v276, v277);
                  v327 = HIDWORD(v463);
                  v328 = *((_QWORD *)&v462 + 1);
                  v329 = *((_QWORD *)&v462 + 1) + 136 * HIDWORD(v463);
                  *(_QWORD *)v329 = *(_QWORD *)v326;
                  v330 = (_OWORD *)(v329 + 24);
                  *(_QWORD *)(v329 + 8) = v329 + 24;
                  *(_QWORD *)(v329 + 16) = 3;
                  v331 = *(__int128 **)(v326 + 8);
                  if (v331 == (__int128 *)(v326 + 24))
                  {
                    v332 = *(unsigned int *)(v326 + 20);
                    if ((_DWORD)v332)
                    {
                      v333 = 32 * v332;
                      do
                      {
                        v334 = *v331;
                        v335 = v331[1];
                        v331 += 2;
                        *v330 = v334;
                        v330[1] = v335;
                        v330 += 2;
                        v333 -= 32;
                      }
                      while (v333);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v326 + 8) = v326 + 24;
                    *(_QWORD *)(v329 + 8) = v331;
                    v337 = *(_DWORD *)(v326 + 16);
                    *(_DWORD *)(v326 + 16) = 3;
                    *(_DWORD *)(v329 + 16) = v337;
                  }
                  v321 = (_QWORD *)(v326 + 120);
                  v336 = *(_DWORD *)(v326 + 20);
                  *(_DWORD *)(v326 + 20) = 0;
                  *(_DWORD *)(v329 + 20) = v336;
                  v320 = v328 + 136 * v327 + 120;
                }
                else
                {
                  v311 = *((_QWORD *)&v462 + 1);
                  v312 = *((_QWORD *)&v462 + 1) + 136 * HIDWORD(v463);
                  *(_QWORD *)v312 = v460;
                  v313 = (_OWORD *)(v312 + 24);
                  *(_QWORD *)(v312 + 8) = v312 + 24;
                  *(_QWORD *)(v312 + 16) = 3;
                  v314 = v472;
                  if (v472 == &v474)
                  {
                    if (HIDWORD(v473))
                    {
                      v315 = 32 * HIDWORD(v473);
                      v316 = &v474;
                      do
                      {
                        v317 = *(_OWORD *)v316;
                        v318 = *((_OWORD *)v316 + 1);
                        v316 += 4;
                        *v313 = v317;
                        v313[1] = v318;
                        v313 += 2;
                        v315 -= 32;
                      }
                      while (v315);
                    }
                  }
                  else
                  {
                    v472 = &v474;
                    *(_QWORD *)(v312 + 8) = v314;
                    v325 = v473;
                    LODWORD(v473) = 3;
                    *(_DWORD *)(v312 + 16) = v325;
                  }
                  v319 = HIDWORD(v473);
                  HIDWORD(v473) = 0;
                  *(_DWORD *)(v312 + 20) = v319;
                  v320 = v311 + 136 * v310 + 120;
                  v321 = v479;
                }
                v322 = *v321;
                *(_DWORD *)(v320 + 7) = *(_DWORD *)((char *)v321 + 7);
                *(_QWORD *)v320 = v322;
                ++HIDWORD(v463);
                v323 = (unint64_t)v472;
                if (&v474 != v472 && v472)
                {
                  v472 = 0;
                  LODWORD(v473) = 0;
                  WTF::fastFree(v323, v271, v272, v273, v274, v275, v276, v277);
                }
                v324 = (unint64_t)v467;
                if (v469 != v467 && v467)
                {
                  v467 = 0;
                  LODWORD(v468) = 0;
                  WTF::fastFree(v324, v271, v272, v273, v274, v275, v276, v277);
                }
              }
              else
              {
                v471 = (unsigned int *)&v466;
                v472 = (uint64_t **)v455;
                v473 = (uint64_t)&v461;
                v474 = v456;
                v475 = v451;
                v476 = &v462;
                v477 = &v460;
                v478 = v286;
                v481[0] = &v471;
                if ((*v287 - 446) > 5)
                {
                  v297 = v286[3];
                  if ((_DWORD)v297)
                  {
                    v298 = 0;
                    v299 = 0;
                    v300 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                         + 21 * *v287
                         + ((unint64_t)((v297 - 1) * v297) >> 1);
                    v301 = 32 * v297;
                    do
                    {
                      if (v299 >= v286[3])
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19807BDD4);
                      }
                      v302 = *v300;
                      if ((v302 >> 5) - 1 >= 5)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19807BDC4);
                      }
                      ++v299;
                      ++v300;
                      v298 += 32;
                    }
                    while (v301 != v298);
                  }
                }
                else
                {
                  v468 = (uint64_t)&v467;
                  v469[0] = v481;
                }
              }
              v283 = v460 + 1;
              v460 = v283;
            }
            while (v283 < *(_DWORD *)(v282 + 20));
          }
          JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v462, (JSC::B3::Air::BasicBlock *)v282, v272, v273, v274, v275, v276, v277);
          if (v461)
          {
            v338 = *(_QWORD *)(v282 + 8);
            v339 = *(unsigned int *)(v282 + 20);
            v340 = v338 + (v339 << 7);
            if ((_DWORD)v339)
            {
              v341 = 0;
              v342 = 0;
              v343 = (unsigned int *)(v338 + (v339 << 7));
              v344 = (unint64_t)v343;
              do
              {
                v345 = (unsigned int *)(v338 + v341);
                if ((*(__int16 *)(v338 + v341 + 120) - 107) <= 6
                  && ((1 << (*(_WORD *)(v338 + v341 + 120) - 107)) & 0x43) != 0
                  && v345[3] == 2)
                {
                  v347 = *(_QWORD *)v345;
                  if (*(_BYTE *)(*(_QWORD *)v345 + 8) == 1)
                  {
                    v348 = *(_WORD *)(v338 + v341 + 120) != 94 && *(_BYTE *)(v347 + 40) == 1;
                    if (v348 && *(_DWORD *)(v347 + 16) == *(_DWORD *)(v347 + 48))
                    {
                      if (v344 == *(_QWORD *)(v282 + 8) + ((unint64_t)*(unsigned int *)(v282 + 20) << 7))
                      {
                        v344 = v338 + v341;
                      }
                      else if (v345 != v343)
                      {
                        v349 = v344;
                        WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v343, v345, v344, v273, v274, v275, v276, v277);
                        v344 = v349 + v338 + v341 - (_QWORD)v343;
                        v347 = *(_QWORD *)(v338 + v341);
                      }
                      if (v338 + v341 + 16 != v347 && v347)
                      {
                        v350 = v338 + v341;
                        *(_QWORD *)v350 = 0;
                        *(_DWORD *)(v350 + 8) = 0;
                        v351 = v344;
                        WTF::fastFree(v347, v345, v272, v273, v274, v275, v276, v277);
                        v344 = v351;
                      }
                      v343 = (unsigned int *)(v338 + v341 + 128);
                      ++v342;
                    }
                  }
                }
                v341 += 128;
              }
              while (v338 + v341 < v340);
              v338 = *(_QWORD *)(v282 + 8);
              LODWORD(v339) = *(_DWORD *)(v282 + 20);
              v340 = v344;
            }
            else
            {
              v342 = 0;
              v343 = (unsigned int *)(v338 + (v339 << 7));
            }
            v271 = (unsigned int *)(v338 + ((unint64_t)v339 << 7));
            if (v343 != v271)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v343, v271, v340, v273, v274, v275, v276, v277);
              LODWORD(v339) = *(_DWORD *)(v282 + 20);
            }
            *(_DWORD *)(v282 + 20) = v339 - v342;
          }
          v281 = (v442 + 1);
          v278 = v438;
          v280 = *(unsigned int *)(v438 + 108);
          if (v280 > v281)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v438 + 96) + 8 * v281))
            {
              if (v280 == ++v281)
              {
                LODWORD(v281) = *(_DWORD *)(v438 + 108);
                break;
              }
            }
          }
        }
        while ((_DWORD)v440 != (_DWORD)v281);
        v352 = (_BYTE *)*((_QWORD *)&v462 + 1);
        if (HIDWORD(v463))
        {
          v426 = 136 * HIDWORD(v463);
          v427 = *((_QWORD *)&v462 + 1) + 24;
          do
          {
            v428 = *(_QWORD *)(v427 - 16);
            if (v427 != v428 && v428 != 0)
            {
              *(_QWORD *)(v427 - 16) = 0;
              *(_DWORD *)(v427 - 8) = 0;
              WTF::fastFree(v428, v271, v272, v273, v274, v275, v276, v277);
            }
            v427 += 136;
            v426 -= 136;
          }
          while (v426);
          v352 = (_BYTE *)*((_QWORD *)&v462 + 1);
        }
        if (v464 != v352 && v352)
        {
          *((_QWORD *)&v462 + 1) = 0;
          LODWORD(v463) = 0;
          WTF::fastFree((unint64_t)v352, v271, v272, v273, v274, v275, v276, v277);
        }
      }
    }
LABEL_467:
    if (v466)
      WTF::fastFree(v466 - 16, v271, v272, v273, v274, v275, v276, v277);
    return v434 == 0;
  }
  v353 = *v456;
  v457 = *(unsigned int *)(*v456 + 108);
  if ((_DWORD)v457)
  {
    v354 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v353 + 96) + 8 * v354))
    {
      if (v457 == ++v354)
        return v434 == 0;
    }
    if ((_DWORD)v457 != (_DWORD)v354)
    {
      v355 = &v463;
      v356 = 67;
      LODWORD(v357) = v457;
      v358 = v354;
      do
      {
        if (v357 <= v358)
        {
          __break(0xC471u);
          JUMPOUT(0x19807BE1CLL);
        }
        v359 = *(_QWORD *)(*(_QWORD *)(v353 + 96) + 8 * v358);
        LODWORD(v360) = *(_DWORD *)(v359 + 20);
        if (!(_DWORD)v360)
        {
          v421 = 0;
          v412 = *(unsigned int **)(v359 + 8);
          v413 = (unint64_t)v412;
          v415 = v412;
          goto LABEL_583;
        }
        v361 = 0;
        do
        {
          v362 = *(_QWORD *)(v359 + 8);
          v363 = v362 + (v361 << 7);
          if ((*(__int16 *)(v363 + 120) - 107) > 6 || ((1 << (*(_WORD *)(v363 + 120) - 107)) & 0x43) == 0)
          {
            v366 = *(_QWORD *)v363;
            v365 = *(unsigned int *)(v363 + 12);
          }
          else
          {
            v365 = *(unsigned int *)(v363 + 12);
            v366 = *(_QWORD *)v363;
            if ((_DWORD)v365 == 2)
            {
              if (*(_BYTE *)(v366 + 8) != 1 || *(_BYTE *)(v366 + 40) != 1)
                goto LABEL_491;
              if (*(_WORD *)(v363 + 120) == 94)
              {
                v367 = *(_QWORD *)(v11 + 376);
                if (!v367)
                {
LABEL_492:
                  v369 = v366 + 64;
                  goto LABEL_496;
                }
                v368 = *(unsigned int *)(v366 + 16);
                if ((int)v368 < 1)
                {
                  v368 = -(int)v368;
                  if (v368 >= *(unsigned int *)(v367 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807BE14);
                  }
                  v367 += 16;
                }
                else if (v368 >= *(_DWORD *)(v367 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19807BE0CLL);
                }
                if (*(unsigned __int8 *)(*(_QWORD *)v367 + 2 * v368 + 1) > 2u)
                {
LABEL_491:
                  LODWORD(v367) = 0;
                  goto LABEL_492;
                }
              }
              LODWORD(v367) = 1;
              goto LABEL_492;
            }
          }
          if (!v365)
            goto LABEL_548;
          LODWORD(v367) = 0;
          v369 = v366 + 32 * v365;
LABEL_496:
          v370 = *(_QWORD *)(v11 + 152);
          v371 = *(_QWORD *)(v11 + 120);
          v372 = v366;
          do
          {
            v373 = *(char *)(v372 + 8);
            if (v373 <= 0xD)
            {
              if (((1 << v373) & 0x31C2) != 0)
              {
                v374 = *(_DWORD *)(v372 + 16);
                if (v374 <= -33)
                {
                  v375 = -v374;
                  do
                  {
                    v376 = (unsigned __int16)v375;
                    v375 = *(unsigned __int16 *)(v370 + 2 * (unsigned __int16)v375);
                  }
                  while (v375);
                  if (-(int)v376 < 0xFFFFFFE0)
                  {
                    LODWORD(v462) = -(int)v376;
                    v386 = *(_BYTE *)(v371 + v376);
                    v387 = v386 & 0x7F;
                    if (v387 == 127)
                    {
                      WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v462);
                      WTF::dataLog<char [7]>();
                      WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v11 + 256));
                      __break(0xC471u);
                      JUMPOUT(0x19807BC70);
                    }
                    if ((v386 & 0x60) != 0)
                      v379 = (char)(31 - v387);
                    else
                      v379 = v387 + 1;
                  }
                  else
                  {
                    v377 = v376 + 31;
                    v378 = (char)-(char)v376;
                    v379 = (v376 + 32);
                    if ((v377 & 0x60) != 0)
                      v379 = v378;
                  }
                  *(_DWORD *)(v372 + 16) = v379;
                }
              }
              else if (v373 == 11)
              {
                v380 = *(_DWORD *)(v372 + 16);
                if (v380 <= -33)
                {
                  v381 = -v380;
                  do
                  {
                    v382 = (unsigned __int16)v381;
                    v381 = *(unsigned __int16 *)(v370 + 2 * (unsigned __int16)v381);
                  }
                  while (v381);
                  if (-(int)v382 < 0xFFFFFFE0)
                  {
                    LODWORD(v462) = -(int)v382;
                    v388 = *(_BYTE *)(v371 + v382);
                    v389 = v388 & 0x7F;
                    if (v389 == 127)
                    {
                      WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v462);
                      WTF::dataLog<char [7]>();
                      WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v11 + 256));
                      __break(0xC471u);
                      JUMPOUT(0x19807BCD4);
                    }
                    if ((v388 & 0x60) != 0)
                      v385 = (char)(31 - v389);
                    else
                      v385 = v389 + 1;
                  }
                  else
                  {
                    v383 = v382 + 31;
                    v384 = (char)-(char)v382;
                    v385 = (v382 + 32);
                    if ((v383 & 0x60) != 0)
                      v385 = v384;
                  }
                  *(_DWORD *)(v372 + 16) = v385;
                }
                v390 = *(_DWORD *)(v372 + 20);
                if (v390 <= -33)
                {
                  v391 = -v390;
                  do
                  {
                    v392 = (unsigned __int16)v391;
                    v391 = *(unsigned __int16 *)(v370 + 2 * (unsigned __int16)v391);
                  }
                  while (v391);
                  if (-(int)v392 < 0xFFFFFFE0)
                  {
                    LODWORD(v462) = -(int)v392;
                    v396 = *(_BYTE *)(v371 + v392);
                    v397 = v396 & 0x7F;
                    if (v397 == 127)
                    {
                      WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v462);
                      WTF::dataLog<char [7]>();
                      WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v11 + 256));
                      __break(0xC471u);
                      JUMPOUT(0x19807BD08);
                    }
                    if ((v396 & 0x60) != 0)
                      v395 = (char)(31 - v397);
                    else
                      v395 = v397 + 1;
                  }
                  else
                  {
                    v393 = v392 + 31;
                    v394 = (char)-(char)v392;
                    v395 = (v392 + 32);
                    if ((v393 & 0x60) != 0)
                      v395 = v394;
                  }
                  *(_DWORD *)(v372 + 20) = v395;
                }
              }
            }
            v372 += 32;
          }
          while (v372 != v369);
          if ((_DWORD)v367)
          {
            v398 = *(_DWORD *)(v363 + 12);
            if (!v398)
            {
              __break(0xC471u);
              JUMPOUT(0x19807BDE4);
            }
            if (*(_BYTE *)(v366 + 8) == 1)
            {
              if (v398 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19807BDF4);
              }
              if (*(_BYTE *)(v366 + 40) == 1 && *(_DWORD *)(v366 + 16) == *(_DWORD *)(v366 + 48))
              {
                *(_QWORD *)&v462 = &v463;
                *((_QWORD *)&v462 + 1) = 3;
                *(_QWORD *)v465 = 0;
                *(_WORD *)&v465[8] = 0;
                v465[10] &= 0xFCu;
                v400 = (_OWORD *)(v363 + 16);
                v399 = *(_QWORD *)v363;
                if (*(_QWORD *)v363 != v363 + 16)
                {
                  if (v399)
                  {
                    *(_QWORD *)v363 = 0;
                    *(_DWORD *)(v363 + 8) = 0;
                    v445 = v358;
                    v448 = v353;
                    WTF::fastFree(v399, v251, (uint64_t)&v463, 67, v358, v252, v253, v254);
                    v358 = v445;
                    v353 = v448;
                    v356 = 67;
                    v355 = &v463;
                  }
                  *(_QWORD *)v363 = v400;
                  v407 = v462;
                  if ((uint64_t *)v462 == &v463)
                  {
                    if (HIDWORD(v462))
                    {
                      v408 = 32 * HIDWORD(v462);
                      v409 = &v463;
                      do
                      {
                        v410 = *(_OWORD *)v409;
                        v411 = *((_OWORD *)v409 + 1);
                        v409 += 4;
                        *v400 = v410;
                        v400[1] = v411;
                        v400 += 2;
                        v408 -= 32;
                      }
                      while (v408);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v462 = &v463;
                    *(_QWORD *)v363 = v407;
                  }
                }
                *(_DWORD *)(v363 + 8) = DWORD2(v462);
                v401 = HIDWORD(v462);
                HIDWORD(v462) = 0;
                *(_DWORD *)(v363 + 12) = v401;
                v402 = v362 + (v361 << 7);
                v403 = *(_QWORD *)v465;
                *(_DWORD *)(v402 + 119) = *(_DWORD *)&v465[7];
                *(_QWORD *)(v402 + 112) = v403;
                v404 = v462;
                if (&v463 != (uint64_t *)v462 && (_QWORD)v462)
                {
                  *(_QWORD *)&v462 = 0;
                  DWORD2(v462) = 0;
                  v405 = v353;
                  v406 = v358;
                  WTF::fastFree(v404, v251, (uint64_t)&v463, 67, v358, v252, v253, v254);
                  v358 = v406;
                  v356 = 67;
                  v355 = &v463;
                  v353 = v405;
                }
              }
            }
          }
LABEL_548:
          ++v361;
          v360 = *(unsigned int *)(v359 + 20);
        }
        while (v361 < v360);
        v412 = *(unsigned int **)(v359 + 8);
        v413 = (unint64_t)&v412[32 * v360];
        if ((_DWORD)v360)
        {
          v414 = 0;
          v453 = 0;
          v415 = &v412[32 * v360];
          v416 = (unint64_t)v415;
          do
          {
            v417 = &v412[v414];
            if (*(_QWORD *)&v412[v414 + 28])
              v418 = 0;
            else
              v418 = LOWORD(v412[v414 + 30]) == 0;
            if (v418 && (*((_BYTE *)v417 + 122) & 3) == 0)
            {
              v443 = v416;
              v446 = v358;
              v449 = v353;
              if (!v412[v414 + 3])
              {
                if (v416 == *(_QWORD *)(v359 + 8) + ((unint64_t)*(unsigned int *)(v359 + 20) << 7))
                {
                  v443 = (unint64_t)&v412[v414];
                }
                else if (v417 != v415)
                {
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v415, v417, v416, 67, v358, v252, v253, v254);
                  v443 += (char *)&v412[v414] - (char *)v415;
                }
                v419 = *(_QWORD *)&v412[v414];
                if (&v412[v414 + 4] != (unsigned int *)v419 && v419)
                {
                  v420 = &v412[v414];
                  *(_QWORD *)v420 = 0;
                  v420[2] = 0;
                  WTF::fastFree(v419, v417, (uint64_t)v355, v356, v358, v252, v253, v254);
                }
                v415 = &v412[v414 + 32];
                ++v453;
              }
              v11 = v455;
              v353 = v449;
              v355 = &v463;
              v356 = 67;
              v416 = v443;
              v358 = v446;
            }
            v414 += 32;
          }
          while ((unint64_t)&v412[v414] < v413);
          v412 = *(unsigned int **)(v359 + 8);
          LODWORD(v360) = *(_DWORD *)(v359 + 20);
          v413 = v416;
          v421 = v453;
        }
        else
        {
          v421 = 0;
          v415 = &v412[32 * v360];
        }
LABEL_583:
        v251 = &v412[32 * (unint64_t)v360];
        if (v415 != v251)
        {
          v422 = v413;
          v423 = v353;
          v424 = v358;
          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v415, v251, v422, 67, v358, v252, v253, v254);
          LODWORD(v358) = v424;
          v356 = 67;
          v355 = &v463;
          v353 = v423;
          LODWORD(v360) = *(_DWORD *)(v359 + 20);
        }
        *(_DWORD *)(v359 + 20) = v360 - v421;
        v358 = (v358 + 1);
        v357 = *(unsigned int *)(v353 + 108);
        if (v357 > v358)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v353 + 96) + 8 * v358))
          {
            if (v357 == ++v358)
            {
              v358 = *(unsigned int *)(v353 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v457 != (_DWORD)v358);
    }
  }
  return v434 == 0;
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)1>(void)::{lambda((JSC::B3::Bank)1 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = *(uint64_t **)a1;
  v11 = *(_DWORD *)(a2 + 148);
  if (v11)
  else
  return v11 == 0;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::~ColoringAllocator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(a1 + 320);
  if (v9)
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 328) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)(a1 + 304);
  if (v10)
  {
    *(_QWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  char v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  char v49;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  unsigned int *v78;
  unsigned int **v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD **v85;
  _QWORD **v86;
  _QWORD **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int **v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _DWORD *v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  _DWORD *v115;
  uint64_t v116[2];
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  int v124;

  v8 = *(_DWORD *)(a2 + 180);
  v9 = (v8 + 33);
  *(_OWORD *)(v10 + 340) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(int64x2_t *)(v10 + 360) = vdupq_n_s64(0x8000000000000000);
  if (v9 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 368), v9, 0);
  *(_QWORD *)(a1 + 376) = a3;
  v17 = *(_QWORD *)(a2 + 56);
  if (v17)
  {
    v18 = 0;
    do
    {
      v18 |= v17 & -v17;
      v17 &= v17 - 1;
    }
    while (v17);
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      do
      {
        LOBYTE(v116[0]) = v19 | 0x80;
        if ((v19 & 0x60) == 0x20)
        {
          v117 = (char)(31 - v19);
          v20 = *(unsigned int *)(a1 + 276);
          if ((_DWORD)v20 == *(_DWORD *)(a1 + 272))
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * *(unsigned int *)(a1 + 276)) = *(_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 264, (void *)(v20 + 1), (unint64_t)&v117, v12, v13, v14, v15, v16);
          else
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v20) = (char)(31 - v19);
          ++*(_DWORD *)(a1 + 276);
          v21 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
          {
            v26 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)v116);
            v21 = *(unsigned int *)(a1 + 12);
            v22 = *(_QWORD *)a1;
            v23 = *v26;
          }
          else
          {
            v22 = *(_QWORD *)a1;
            v23 = v116[0];
          }
          *(_BYTE *)(v22 + v21) = v23;
          ++*(_DWORD *)(a1 + 12);
        }
        if (v19 > 0x3E)
          break;
        v24 = __clz(__rbit64(v18 >> (v19 + 1)));
        v25 = v24 + v19 + 1;
        if (v25 >= 0x40)
          v19 = 64;
        else
          v19 += v24 + 1;
      }
      while (v25 <= 0x3F);
    }
  }
  WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::setMaxIndex(a1 + 24, (void *)(*(_DWORD *)(*(_QWORD *)(a1 + 256) + 180) + 33), v11, v12, v13, v14, v15, v16);
  v34 = (*(_DWORD *)(a1 + 16) + 1);
  v35 = *(unsigned int *)(a1 + 132);
  if (v35 < v34)
  {
    v36 = *(unsigned int *)(a1 + 128);
    v37 = *(_QWORD *)(a1 + 120);
    if (v36 < v34)
    {
      v38 = v36 + (v36 >> 2);
      if (v38 >= 0x10)
        v39 = v38 + 1;
      else
        v39 = 16;
      if (v39 <= v34)
        v40 = (*(_DWORD *)(a1 + 16) + 1);
      else
        v40 = v39;
      if (HIDWORD(v40))
      {
LABEL_108:
        __break(0xC471u);
        JUMPOUT(0x19807C51CLL);
      }
      v41 = (_BYTE *)WTF::fastMalloc((WTF *)v40);
      *(_DWORD *)(a1 + 128) = v40;
      *(_QWORD *)(a1 + 120) = v41;
      if ((_DWORD)v35)
      {
        v42 = (char *)v37;
        do
        {
          v43 = *v42++;
          *v41++ = v43;
          --v35;
        }
        while (v35);
        v41 = *(_BYTE **)(a1 + 120);
      }
      if (!v37)
      {
        v37 = (unint64_t)v41;
        if (!v41)
          goto LABEL_45;
LABEL_42:
        v44 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v44 != (_DWORD)v34)
        {
          v45 = (_BYTE *)(v37 + v44);
          v46 = v34 - v44;
          do
          {
            *v45++ |= 0x7Fu;
            --v46;
          }
          while (v46);
        }
        goto LABEL_45;
      }
      if (v41 == (_BYTE *)v37)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
      }
      WTF::fastFree(v37, v27, v28, v29, v30, v31, v32, v33);
      v37 = *(_QWORD *)(a1 + 120);
    }
    if (!v37)
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_45:
  *(_DWORD *)(a1 + 132) = v34;
  if (*(_DWORD *)(a1 + 16))
  {
    v47 = 1;
    v48 = -1;
    do
    {
      v49 = 31 - v48;
      if (v48-- > 0)
        v49 = v48;
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v47++) = v49 & 0x7F;
    }
    while (v47 <= *(_DWORD *)(a1 + 16));
  }
  if (*(_DWORD *)(a1 + 96))
  {
    if (*(_DWORD *)(a1 + 100))
      *(_DWORD *)(a1 + 100) = 0;
    v51 = *(_QWORD *)(a1 + 88);
    if (v51)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v51, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v117, *(_QWORD *)(a1 + 256));
  v73 = *(_QWORD *)(a1 + 256);
  v74 = *(unsigned int *)(v73 + 108);
  if ((_DWORD)v74)
  {
    v75 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v73 + 96) + 8 * v75))
    {
      if (v74 == ++v75)
        goto LABEL_61;
    }
    if ((_DWORD)v74 != (_DWORD)v75)
    {
      LODWORD(v77) = *(_DWORD *)(v73 + 108);
      do
      {
        if (v77 <= v75)
        {
          __break(0xC471u);
          JUMPOUT(0x19807C52CLL);
        }
        v78 = *(unsigned int **)(*(_QWORD *)(v73 + 96) + 8 * v75);
        v116[0] = (uint64_t)&v117;
        v116[1] = (uint64_t)v78;
        v122 = 0;
        v79 = (unsigned int **)(v123 + 32 * *v78);
        v80 = *((unsigned int *)v79 + 3);
        if ((_DWORD)v80)
        {
          v109 = *v79;
          v110 = v119;
          v111 = 4 * v80;
          do
          {
            v112 = *v109;
            v113 = *(unsigned int *)(v110 + 4 * v112);
            v114 = v122;
            if (v122 <= v113 || *(_DWORD *)(v120 + 4 * v113) != (_DWORD)v112)
            {
              v124 = *v109;
              if (v122 == v121)
              {
                v115 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v120, v122 + 1, (unint64_t)&v124);
                *(_DWORD *)(v120 + 4 * v122) = *v115;
                v110 = v119;
              }
              else
              {
                *(_DWORD *)(v120 + 4 * v122) = v112;
              }
              ++v122;
              *(_DWORD *)(v110 + 4 * v112) = v114;
            }
            ++v109;
            v111 -= 4;
          }
          while (v111);
        }
        v81 = v78[5];
        if (!(_DWORD)v81)
          goto LABEL_106;
        do
        {
          v82 = v81 - 1;
          v83 = v78[5];
          if (v83 <= (int)v81 - 1)
            goto LABEL_108;
          v84 = *((_QWORD *)v78 + 1);
          v85 = (_QWORD **)(v84 + ((unint64_t)(v81 - 1) << 7));
          v86 = (_QWORD **)(v84 + (v81 << 7));
          if (v81 >= v83)
            v87 = 0;
          else
            v87 = v86;
          v88 = v118;
          v89 = *(_QWORD *)(v118 + 16 * *v78);
          v90 = v89 + (v81 << 6);
          v91 = *(unsigned int *)(v90 + 44);
          if ((_DWORD)v91)
          {
            v101 = *(unsigned int **)(v90 + 32);
            v102 = v122;
            v103 = 4 * v91;
            v104 = v119;
            v105 = v120;
            do
            {
              v106 = *v101;
              v107 = *(unsigned int *)(v104 + 4 * v106);
              if (v102 > v107 && *(_DWORD *)(v105 + 4 * v107) == (_DWORD)v106)
              {
                v108 = *(unsigned int *)(v105 + 4 * v102 - 4);
                *(_DWORD *)(v105 + 4 * v107) = v108;
                *(_DWORD *)(v104 + 4 * v108) = v107;
                v102 = --v122;
              }
              ++v101;
              v103 -= 4;
            }
            while (v103);
            v89 = *(_QWORD *)(v88 + 16 * *v78);
          }
          v92 = (unsigned int **)(v89 + ((unint64_t)(v81 - 1) << 6));
          v93 = *((unsigned int *)v92 + 3);
          if ((_DWORD)v93)
          {
            v94 = *v92;
            v95 = v119;
            v96 = 4 * v93;
            do
            {
              v97 = *v94;
              v98 = *(unsigned int *)(v95 + 4 * v97);
              v99 = v122;
              if (v122 <= v98 || *(_DWORD *)(v120 + 4 * v98) != (_DWORD)v97)
              {
                v124 = *v94;
                if (v122 == v121)
                {
                  v100 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v120, v122 + 1, (unint64_t)&v124);
                  *(_DWORD *)(v120 + 4 * v122) = *v100;
                  v95 = v119;
                }
                else
                {
                  *(_DWORD *)(v120 + 4 * v122) = v97;
                }
                ++v122;
                *(_DWORD *)(v95 + 4 * v97) = v99;
              }
              ++v94;
              v96 -= 4;
            }
            while (v96);
          }
          v81 = v82;
        }
        while ((_DWORD)v82);
        if (!v78[5])
        {
LABEL_106:
          __break(0xC471u);
          JUMPOUT(0x19807C524);
        }
        v75 = (v75 + 1);
        v77 = *(unsigned int *)(v73 + 108);
        if (v77 > v75)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v73 + 96) + 8 * v75))
          {
            if (v77 == ++v75)
            {
              LODWORD(v75) = *(_DWORD *)(v73 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v74 != (_DWORD)v75);
    }
  }
LABEL_61:
  WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v117, v66, v67, v68, v69, v70, v71, v72);
  return a1;
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)1>(void)::{lambda((JSC::B3::Bank)1 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(uint64_t **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  WTF::BitVector *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  WTF::BitVector *v22;
  WTF::BitVector *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::BitVector *v74;
  _DWORD *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  BOOL v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unint64_t v175;
  uint64_t *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::BitVector *v206;
  uint64_t v207;
  unsigned int *v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  _DWORD *v236;
  __int16 *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unsigned __int8 *v250;
  uint64_t v251;
  unsigned int v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD *v263;
  uint64_t **v264;
  uint64_t v265;
  uint64_t **v266;
  __int128 v267;
  __int128 v268;
  int v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  unint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  _OWORD *v280;
  __int128 *v281;
  uint64_t v282;
  uint64_t v283;
  __int128 v284;
  __int128 v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int v292;
  unsigned int *v293;
  unint64_t v294;
  unsigned int *v295;
  unint64_t v297;
  BOOL v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  _BYTE *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unsigned int v323;
  int *v324;
  unsigned int v325;
  unsigned int v326;
  uint64_t v327;
  int v328;
  char v329;
  int v330;
  int v331;
  int v332;
  unsigned int v333;
  unsigned int v334;
  uint64_t v335;
  int v336;
  char v337;
  int v338;
  int v339;
  unsigned int v340;
  unint64_t v341;
  _OWORD *v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  __int128 v351;
  __int128 v352;
  unsigned int *v353;
  unint64_t v354;
  uint64_t v355;
  int v356;
  unsigned int *v357;
  unint64_t v358;
  unsigned int *v359;
  BOOL v360;
  unint64_t v361;
  unsigned int *v362;
  unint64_t v363;
  int v364;
  int v365;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  _QWORD *v371;
  uint64_t v373;
  int v374;
  _QWORD *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  WTF::BitVector *v379;
  WTF::BitVector *v380;
  uint64_t *v381;
  int v382;
  int v383;
  unsigned int *v384;
  unint64_t v385;
  unsigned int *v386;
  uint64_t v387;
  uint64_t v388;
  WTF::BitVector *v389;
  WTF::BitVector *v390;
  WTF::BitVector *v391;
  WTF::BitVector *v392;
  uint64_t *v393;
  unint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  char v397;
  __int16 v398;
  unsigned int v399;
  char v400;
  __int128 v401;
  uint64_t v402;
  _BYTE v403[88];
  _BYTE v404[11];
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD v408[12];
  _QWORD v409[2];
  unsigned int *v410;
  uint64_t **v411;
  uint64_t v412;
  uint64_t *v413;
  WTF::BitVector *v414;
  __int128 *v415;
  unsigned int *v416;
  _DWORD *v417;
  _QWORD v418[2];
  _QWORD v419[2];
  _QWORD v420[3];

  v8 = (unint64_t)a2;
  v395 = *a1;
  v9 = (WTF::BitVector *)(a2 + 90);
  v10 = (a2[87] + a2[83]);
  v11 = *(_QWORD *)(v8 + 360);
  if (v11 < 0)
    v12 = 63;
  else
    v12 = *(_QWORD *)(2 * v11);
  if (v12 < v10)
    WTF::BitVector::resizeOutOfLine(v9, v10, 0);
  v13 = *(_DWORD *)(v8 + 16) + 1;
  for (LODWORD(v410) = v13; *(_DWORD *)(v8 + 76) > v13; LODWORD(v410) = v13)
  {
    v14 = v13;
    if (*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v13) >= *(_DWORD *)(v8 + 12))
    {
      v15 = *(uint64_t **)(v8 + 240);
      if (*v15 >= 0)
        v15 = (uint64_t *)(2 * *v15 + 8);
      if (((*(unint64_t *)((char *)v15 + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) == 0)
        WTF::BitVector::add((WTF::BitVector *)(v8 + 208), v14);
    }
    else
    {
      if (*(_DWORD *)(v8 + 116) <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19807E4E0);
      }
      if (*(_DWORD *)(*(_QWORD *)(v8 + 104) + 40 * v13))
      {
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(&v401, (uint64_t *)(v8 + 296), (int *)&v410, a4, a5, a6, a7, a8);
      }
      else
      {
        v16 = *(unsigned int *)(v8 + 204);
        if ((_DWORD)v16 == *(_DWORD *)(v8 + 200))
          *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v16 + 1, (unint64_t)&v410);
        else
          *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * v16) = v13;
        ++*(_DWORD *)(v8 + 204);
      }
    }
    v13 = (_DWORD)v410 + 1;
  }
  v17 = (_QWORD *)(v8 + 304);
  v18 = (_DWORD *)(v8 + 332);
  v19 = (_DWORD *)(v8 + 348);
  v371 = (_QWORD *)(v8 + 192);
  v20 = (_QWORD *)(v8 + 176);
  v21 = (uint64_t *)(v8 + 168);
  v22 = (WTF::BitVector *)(v8 + 336);
  v23 = (WTF::BitVector *)(v8 + 320);
  v373 = v8 + 24;
  v375 = (_QWORD *)(v8 + 176);
  v379 = (WTF::BitVector *)(v8 + 208);
  v381 = (uint64_t *)(v8 + 296);
  v24 = *(_DWORD *)(v8 + 204);
  v393 = (uint64_t *)(v8 + 168);
  v394 = v8;
  v389 = (WTF::BitVector *)(v8 + 320);
  v392 = (WTF::BitVector *)(v8 + 336);
  v384 = (unsigned int *)(v8 + 348);
  v386 = (unsigned int *)(v8 + 332);
  while (1)
  {
    do
    {
LABEL_21:
      if (v24)
      {
        v25 = *(unsigned int *)(*(_QWORD *)(v8 + 192) + 4 * v24 - 4);
        *(_DWORD *)(v8 + 204) = v24 - 1;
        LODWORD(v401) = v25;
        v26 = *(unsigned int *)(v8 + 188);
        if ((_DWORD)v26 == *(_DWORD *)(v8 + 184))
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 176) + 4 * *(unsigned int *)(v8 + 188)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v26 + 1, (unint64_t)&v401);
          v25 = v401;
        }
        else
        {
          *(_DWORD *)(*v20 + 4 * v26) = v25;
        }
        ++*(_DWORD *)(v8 + 188);
        v35 = *(_QWORD *)(v8 + 168);
        if (v35 >= 0)
          v36 = 2 * v35 + 8;
        else
          v36 = (uint64_t)v21;
        *(_QWORD *)(v36 + ((v25 >> 3) & 0x1FFFFFF8)) |= 1 << v25;
        v37 = *(_QWORD *)(v8 + 48) + 16 * v25;
        v38 = *(unsigned int *)(v37 + 12);
        if ((_DWORD)v38)
        {
          v39 = *(unsigned int **)v37;
          v40 = 4 * v38;
          do
          {
            v41 = *v39;
            if (*v21 >= 0)
              v42 = 2 * *v21 + 8;
            else
              v42 = (uint64_t)v21;
            if (((*(_QWORD *)(v42 + ((v41 >> 3) & 0x1FFFFFF8)) >> v41) & 1) == 0
              && !*(_DWORD *)(*(_QWORD *)(v394 + 152) + 4 * v41))
            {
            }
            ++v39;
            v40 -= 4;
          }
          while (v40);
        }
        v8 = v394;
LABEL_50:
        v23 = v389;
        v22 = v392;
        v19 = v384;
        v18 = v386;
        goto LABEL_183;
      }
      v27 = *(_QWORD *)(v8 + 368);
      if ((v27 & 0x8000000000000000) == 0)
      {
        v28 = 2 * v27;
        a3 = *(_QWORD *)(2 * v27);
        v29 = 8 * ((unint64_t)(a3 + 63) >> 6);
        do
        {
          if (!v29)
            goto LABEL_113;
          v30 = *(_QWORD *)(v28 + v29);
          v29 -= 8;
        }
        while (!v30);
        if ((unint64_t)(a3 + 63) < 0x40)
          goto LABEL_34;
        v31 = *(_QWORD *)(2 * v27 + 8);
        if (v31 && (v32 = __clz(__rbit64(v31)), v32 < 0x40))
        {
          v33 = 0;
        }
        else
        {
          if ((unint64_t)(a3 + 63) >> 6 == 1)
            goto LABEL_34;
          v69 = 0;
          v70 = v28 + 16;
          while (1)
          {
            v71 = *(_QWORD *)(v70 + 8 * v69);
            if (v71)
            {
              v32 = __clz(__rbit64(v71));
              if (v32 <= 0x3F)
                break;
            }
            if (((unint64_t)(a3 + 63) >> 6) - 1 == ++v69)
              goto LABEL_34;
          }
          v33 = v69 + 1;
        }
        v34 = v32 + (v33 << 6);
LABEL_33:
        if (v34 == a3)
        {
LABEL_34:
          if ((v27 & 0x8000000000000000) != 0)
          {
            *(_QWORD *)(v8 + 368) = 0x8000000000000000;
          }
          else
          {
            bzero((void *)(2 * v27 + 8), (unint64_t)(*(_QWORD *)(2 * v27) + 7) >> 3);
            v18 = v386;
            v23 = v389;
            v19 = v384;
            v22 = v392;
          }
          v20 = v375;
          goto LABEL_183;
        }
        v376 = a3;
        while (1)
        {
          if (*(_DWORD *)(v8 + 116) <= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x19807E4D0);
          }
          v43 = *(_QWORD *)(v8 + 104) + 40 * v34;
          v44 = *(unsigned int *)(v43 + 4);
          v45 = (_QWORD *)(v43 + 8);
          if ((_DWORD)v44 != 8)
            v45 = (_QWORD *)*v45;
          v46 = 0;
          while ((_DWORD)v44 != v46)
          {
            v47 = v46;
            v48 = *((_DWORD *)v45 + v46++);
            if (v48 != -1)
            {
              v49 = v47;
              goto LABEL_59;
            }
          }
          v49 = v44;
LABEL_59:
          if ((_DWORD)v44 != (_DWORD)v49)
          {
            v50 = v49 | (v44 << 32);
            do
            {
              v51 = *((unsigned int *)v45 + v50);
              if (*(uint64_t *)v9 >= 0)
                v52 = 2 * *(_QWORD *)v9 + 8;
              else
                v52 = (uint64_t)v9;
              v53 = (v51 >> 3) & 0x1FFFFFF8;
              v54 = *(_QWORD *)(v52 + v53);
              *(_QWORD *)(v52 + v53) = v54 & ~(1 << v51);
              if (((1 << v51) & v54) != 0)
              {
                LODWORD(v401) = v51;
                if (*(_DWORD *)(v8 + 352) <= v51)
                {
                  v57 = *(unsigned int *)(v8 + 348);
                  LODWORD(v55) = v57;
                  if ((_DWORD)v57 == *(_DWORD *)(v8 + 344))
                  {
                    v61 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v392, v57 + 1, (unint64_t)&v401);
                    a3 = v376;
                    v18 = v386;
                    v23 = v389;
                    v19 = v384;
                    v22 = v392;
                    *(_DWORD *)(*(_QWORD *)v392 + 4 * *v384) = *v61;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v22 + 4 * v57) = v51;
                  }
                  v56 = v19;
                }
                else
                {
                  v55 = *(unsigned int *)(v8 + 332);
                  if ((_DWORD)v55 == *(_DWORD *)(v8 + 328))
                  {
                    v60 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v389, v55 + 1, (unint64_t)&v401);
                    a3 = v376;
                    v18 = v386;
                    v23 = v389;
                    v19 = v384;
                    v22 = v392;
                    *(_DWORD *)(*(_QWORD *)v389 + 4 * *v386) = *v60;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)v23 + 4 * v55) = v51;
                  }
                  v56 = v18;
                }
                ++*v56;
                *(_DWORD *)(*v17 + 4 * v401) = v55;
              }
              v58 = HIDWORD(v50);
              if ((v49 + 1) > HIDWORD(v50))
                LODWORD(v58) = v49 + 1;
              while (1)
              {
                v59 = (v49 + 1);
                v50 = v50 & 0xFFFFFFFF00000000 | v59;
                if ((_DWORD)v58 - 1 == (_DWORD)v49)
                  break;
                LODWORD(v49) = v49 + 1;
                if (*((_DWORD *)v45 + v59) != -1)
                  goto LABEL_77;
              }
              LODWORD(v59) = v58;
LABEL_77:
              LODWORD(v49) = v59;
            }
            while ((_DWORD)v44 != (_DWORD)v59);
            v27 = *(_QWORD *)(v8 + 368);
            v21 = v393;
          }
          v62 = v34 + 1;
          if ((v27 & 0x8000000000000000) != 0)
          {
            v68 = __clz(__rbit64(v27 >> v62)) + v62;
            if (v68 >= 0x3F)
              v34 = 63;
            else
              v34 = v68;
            goto LABEL_87;
          }
          v34 = *(_QWORD *)(2 * v27);
          v63 = v34 + 63;
          v64 = v62 >> 6;
          if (v62 >> 6 < (unint64_t)(v34 + 63) >> 6)
          {
            v65 = *(_QWORD *)(2 * v27 + 8 * v64 + 8);
            if (!v65 || (v66 = __clz(__rbit64(v65 >> v62)) + (v62 & 0x3F), v66 >= 0x40))
            {
              if (v64 + 1 == v63 >> 6)
                goto LABEL_87;
              while (1)
              {
                v67 = *(_QWORD *)(2 * v27 + 0x10 + 8 * v64);
                if (v67)
                {
                  v66 = __clz(__rbit64(v67));
                  if (v66 <= 0x3F)
                    break;
                }
                if ((v63 >> 6) - 1 == ++v64)
                  goto LABEL_87;
              }
              ++v64;
            }
            v34 = v66 + (v64 << 6);
          }
LABEL_87:
          if (v34 == a3)
            goto LABEL_34;
        }
      }
      if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v72 = __clz(__rbit64(v27));
        if (v72 >= 0x3F)
          v34 = 63;
        else
          v34 = v72;
        a3 = 63;
        goto LABEL_33;
      }
LABEL_113:
      v73 = *v18;
      v74 = v23;
      v75 = v18;
      if (*v18 || (v73 = *v19, v74 = v22, v75 = v19, *v19))
      {
        v76 = *(unsigned int *)(*(_QWORD *)v74 + 4 * v73 - 4);
        *v75 = v73 - 1;
        *(_DWORD *)(*(_QWORD *)(v8 + 304) + 4 * v76) = -1;
        v77 = *(_QWORD *)(v8 + 88);
        v78 = *(_DWORD *)(v77 + 8 * v76);
        v79 = *(_QWORD *)(v8 + 152);
        do
        {
          v80 = v78;
          v78 = *(_DWORD *)(v79 + 4 * v78);
        }
        while (v78);
        v81 = *(_DWORD *)(v77 + 8 * v76 + 4);
        do
        {
          v82 = v81;
          v81 = *(_DWORD *)(v79 + 4 * v81);
        }
        while (v81);
        v83 = *(_DWORD *)(v8 + 16);
        if (v83 >= v82)
          v84 = v82;
        else
          v84 = v80;
        if (v83 >= v82)
          v85 = v80;
        else
          v85 = v82;
        if ((_DWORD)v84 == (_DWORD)v85)
        {
          goto LABEL_127;
        }
        if (v83 < v85)
        {
          v86 = v85 >= v84 ? v84 : v85;
          v87 = v85 <= v84 ? v84 : v85;
          v377 = v84;
          if (!WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains(v373, v86, v87))
          {
            {
              v104 = *v381;
              if (!*v381)
                goto LABEL_200;
              v105 = *(_DWORD *)(v104 - 8);
              v106 = 9 * ((v85 + ~((_DWORD)v85 << 15)) ^ ((v85 + ~((_DWORD)v85 << 15)) >> 10));
              v107 = v105 & (((v106 ^ (v106 >> 6)) + ~((v106 ^ (v106 >> 6)) << 11)) ^ (((v106 ^ (v106 >> 6))
                                                                                      + ~((v106 ^ (v106 >> 6)) << 11)) >> 16));
              v108 = *(_DWORD *)(v104 + 4 * v107);
              if (v108 != (_DWORD)v85)
              {
                v109 = 1;
                while (v108)
                {
                  v107 = ((_DWORD)v107 + v109) & v105;
                  v108 = *(_DWORD *)(v104 + 4 * v107);
                  ++v109;
                  if (v108 == (_DWORD)v85)
                    goto LABEL_199;
                }
                v107 = *(unsigned int *)(v104 - 4);
              }
LABEL_199:
              if (v107 != *(_DWORD *)(v104 - 4))
              {
                v163 = -1;
                *(_DWORD *)(v104 + 4 * v107) = -1;
                ++*(_DWORD *)(*v381 - 16);
                v164 = *v381;
                if (*v381)
                  v163 = *(_DWORD *)(v164 - 12) - 1;
                v139 = v84;
                *(_DWORD *)(v164 - 12) = v163;
                v165 = *v381;
                if (*v381)
                {
                  v166 = 6 * *(_DWORD *)(v165 - 12);
                  v167 = *(_DWORD *)(v165 - 4);
                  if (v166 < v167 && v167 >= 9)
                  {
                    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v381, v167 >> 1, 0, v99, v100, v101, v102, v103);
                    goto LABEL_204;
                  }
                }
              }
              else
              {
LABEL_200:
                if (*(uint64_t *)v379 >= 0)
                  v138 = 2 * *(_QWORD *)v379 + 8;
                else
                  v138 = (uint64_t)v379;
                *(_QWORD *)(v138 + ((v85 >> 3) & 0x1FFFFFF8)) &= ~(1 << v85);
LABEL_204:
                v139 = v84;
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v85) = v139;
              if (*(_DWORD *)(v8 + 116) <= v85)
              {
                __break(0xC471u);
                JUMPOUT(0x19807E500);
              }
              v140 = *(_QWORD *)(v8 + 104) + 40 * v85;
              v141 = *(unsigned int *)(v140 + 4);
              v142 = (_QWORD *)(v140 + 8);
              if ((_DWORD)v141 != 8)
                v142 = (_QWORD *)*v142;
              v143 = 0;
              while ((_DWORD)v141 != v143)
              {
                v144 = v143;
                v145 = *((_DWORD *)v142 + v143++);
                if (v145 != -1)
                {
                  v146 = v144;
                  goto LABEL_212;
                }
              }
              v146 = v141;
LABEL_212:
              if ((_DWORD)v141 != (_DWORD)v146)
              {
                v160 = v146 | (v141 << 32);
                do
                {
                  if (*(_DWORD *)(v8 + 116) <= v139)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807E508);
                  }
                  WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v401, (unsigned int *)(*(_QWORD *)(v8 + 104) + 40 * v139), *((_DWORD *)v142 + v160));
                  v161 = HIDWORD(v160);
                  if ((v146 + 1) > HIDWORD(v160))
                    LODWORD(v161) = v146 + 1;
                  while (1)
                  {
                    v162 = (v146 + 1);
                    v160 = v160 & 0xFFFFFFFF00000000 | v162;
                    if ((_DWORD)v161 - 1 == (_DWORD)v146)
                      break;
                    LODWORD(v146) = v146 + 1;
                    if (*((_DWORD *)v142 + v162) != -1)
                      goto LABEL_238;
                  }
                  LODWORD(v162) = v161;
LABEL_238:
                  LODWORD(v146) = v162;
                  v139 = v377;
                }
                while ((_DWORD)v141 != (_DWORD)v162);
              }
              v147 = *(_QWORD *)(v8 + 48) + 16 * v85;
              v148 = *(unsigned int *)(v147 + 12);
              if ((_DWORD)v148)
              {
                v149 = *(unsigned int **)v147;
                v150 = 4 * v148;
                do
                {
                  v151 = *v149;
                  if (*v393 >= 0)
                    v152 = 2 * *v393 + 8;
                  else
                    v152 = (uint64_t)v393;
                  if (((*(_QWORD *)(v152 + ((v151 >> 3) & 0x1FFFFFF8)) >> v151) & 1) == 0
                    && !*(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v151))
                  {
                    v153 = v139;
                    {
                      v139 = v153;
                      if (*(_DWORD *)(v8 + 16) < v153)
                        ++*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v153);
                    }
                    else
                    {
                      v139 = v153;
                    }
                  }
                  ++v149;
                  v150 -= 4;
                }
                while (v150);
              }
              v21 = v393;
              if (*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v139) >= *(_DWORD *)(v8 + 12))
              {
                v154 = *v381;
                if (*v381)
                {
                  v155 = *(_DWORD *)(v154 - 8);
                  v156 = 9 * ((v139 + ~((_DWORD)v139 << 15)) ^ ((v139 + ~((_DWORD)v139 << 15)) >> 10));
                  v157 = v155 & (((v156 ^ (v156 >> 6)) + ~((v156 ^ (v156 >> 6)) << 11)) ^ (((v156 ^ (v156 >> 6))
                                                                                          + ~((v156 ^ (v156 >> 6)) << 11)) >> 16));
                  v158 = *(_DWORD *)(v154 + 4 * v157);
                  if (v158 != (_DWORD)v139)
                  {
                    v159 = 1;
                    while (v158)
                    {
                      v157 = ((_DWORD)v157 + v159) & v155;
                      v158 = *(_DWORD *)(v154 + 4 * v157);
                      ++v159;
                      if (v158 == (_DWORD)v139)
                        goto LABEL_253;
                    }
                    v157 = *(unsigned int *)(v154 - 4);
                  }
LABEL_253:
                  if (v157 != *(_DWORD *)(v154 - 4))
                  {
                    v169 = -1;
                    *(_DWORD *)(v154 + 4 * v157) = -1;
                    ++*(_DWORD *)(*v381 - 16);
                    v170 = *v381;
                    if (*v381)
                      v169 = *(_DWORD *)(v170 - 12) - 1;
                    *(_DWORD *)(v170 - 12) = v169;
                    v171 = *v381;
                    if (*v381)
                    {
                      v172 = 6 * *(_DWORD *)(v171 - 12);
                      v173 = *(_DWORD *)(v171 - 4);
                      if (v172 < v173 && v173 >= 9)
                      {
                        v175 = v139;
                        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v381, v173 >> 1, 0, v99, v100, v101, v102, v103);
                        v139 = v175;
                      }
                    }
                    v176 = *(uint64_t **)(v8 + 240);
                    if (*v176 >= 0)
                      v176 = (uint64_t *)(2 * *v176 + 8);
                    if (((*(unint64_t *)((char *)v176 + ((v139 >> 3) & 0x1FFFFFF8)) >> v139) & 1) == 0)
                    {
                      v177 = v139;
                      WTF::BitVector::add(v379, v139);
                      LODWORD(v139) = v177;
                    }
                  }
                }
              }
              *(_BYTE *)(v8 + 217) = 1;
              goto LABEL_50;
            }
            v121 = *(_QWORD *)(v8 + 360);
            if (v121 >= 0)
              v122 = 2 * v121 + 8;
            else
              v122 = (uint64_t)v9;
            *(_QWORD *)(v122 + ((v76 >> 3) & 0x1FFFFFF8)) |= 1 << v76;
LABEL_127:
            v23 = v389;
            v22 = v392;
            v19 = v384;
            v18 = v386;
            v21 = v393;
            goto LABEL_183;
          }
        }
        v23 = v389;
        v22 = v392;
        v19 = v384;
        v18 = v386;
        v21 = v393;
      }
      else
      {
        v94 = *v381;
        if (*v381 && *(_DWORD *)(v94 - 12))
        {
          LODWORD(v401) = 0;
          if (!*(_DWORD *)(v94 - 12))
            goto LABEL_175;
          v95 = *(unsigned int *)(v94 - 4);
          if ((_DWORD)v95)
          {
            v96 = 4 * v95;
            v97 = (unsigned int *)v94;
            while (*v97 + 1 <= 1)
            {
              ++v97;
              v96 -= 4;
              if (!v96)
                goto LABEL_175;
            }
          }
          else
          {
            v97 = (unsigned int *)v94;
          }
          if ((unsigned int *)(v94 + 4 * v95) == v97)
          {
LABEL_175:
            v123 = 0;
          }
          else
          {
            v123 = *v97;
            v124 = -1;
            *v97 = -1;
            ++*(_DWORD *)(*v381 - 16);
            v125 = *v381;
            if (*v381)
              v124 = *(_DWORD *)(v125 - 12) - 1;
            *(_DWORD *)(v125 - 12) = v124;
            v126 = *v381;
            if (*v381)
            {
              v127 = 6 * *(_DWORD *)(v126 - 12);
              v128 = *(_DWORD *)(v126 - 4);
              if (v127 < v128 && v128 >= 9)
                WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v381, v128 >> 1, 0, a4, a5, a6, a7, a8);
            }
          }
          LODWORD(v401) = v123;
          v130 = *(unsigned int *)(v8 + 204);
          if ((_DWORD)v130 == *(_DWORD *)(v8 + 200))
          {
            *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v371, v130 + 1, (unint64_t)&v401);
            v123 = v401;
          }
          else
          {
            *(_DWORD *)(*v371 + 4 * v130) = v123;
          }
          ++*(_DWORD *)(v8 + 204);
          v131 = v8;
          v120 = v123;
          goto LABEL_182;
        }
        v110 = *(_QWORD *)v379;
        if ((*(_QWORD *)v379 & 0x8000000000000000) != 0)
        {
          if ((v110 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          {
LABEL_156:
            LODWORD(v401) = v114;
            v115 = *(_QWORD *)(v8 + 208);
            v116 = 2 * v115 + 8;
            v117 = v115 < 0;
            v118 = (uint64_t)v379;
            if (!v117)
              v118 = v116;
            *(_QWORD *)(v118 + (((unint64_t)v114 >> 3) & 0x1FFFFFF8)) &= ~(1 << v114);
            v119 = *(unsigned int *)(v8 + 204);
            if ((_DWORD)v119 == *(_DWORD *)(v8 + 200))
            {
              *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v371, v119 + 1, (unint64_t)&v401);
              v120 = v401;
            }
            else
            {
              v120 = v114;
              *(_DWORD *)(*v371 + 4 * v119) = v114;
            }
            ++*(_DWORD *)(v8 + 204);
            v131 = v8;
LABEL_182:
            v23 = v389;
            v22 = v392;
            v19 = v384;
            v18 = v386;
          }
        }
        else
        {
          v111 = (_QWORD *)(2 * v110);
          v112 = ((unint64_t)(*v111 + 63) >> 6);
          while (v112 * 8)
          {
            if (v111[v112--])
              goto LABEL_156;
          }
        }
      }
LABEL_183:
      v24 = *(_DWORD *)(v8 + 204);
      if (v24)
        v132 = 0;
      else
        v132 = *(_DWORD *)(v8 + 332) == 0;
      v133 = v132 && *(_DWORD *)(v8 + 348) == 0;
    }
    while (!v133 || *v381 && *(_DWORD *)(*v381 - 12));
    v134 = *(_QWORD *)v379;
    if ((*(_QWORD *)v379 & 0x8000000000000000) == 0)
      break;
    if ((v134 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_271;
  }
  v135 = (_QWORD *)(2 * v134);
  v136 = ((unint64_t)(*v135 + 63) >> 6);
  while (v136 * 8)
  {
    if (v135[v136--])
      goto LABEL_21;
  }
LABEL_271:
  v178 = (uint64_t)v22;
  v179 = (uint64_t)v23;
  v205 = *(unsigned int *)(v8 + 148);
  v374 = v205;
  if ((_DWORD)v205)
  {
    v206 = (WTF::BitVector *)a1[2];
    v405 = 0;
    v207 = 4 * v205;
    v208 = *(unsigned int **)(v8 + 136);
    do
    {
      v209 = *v208;
      LODWORD(v406) = -(int)v209;
      v210 = *(_QWORD *)v206;
      if ((*(_QWORD *)v206 & 0x8000000000000000) != 0)
        v211 = 63;
      else
        v211 = *(_QWORD *)(2 * v210);
      if (v211 <= v209)
      {
        WTF::BitVector::resizeOutOfLine(v206, v209 + 1, 0);
        v210 = *(_QWORD *)v206;
      }
      if (v210 >= 0)
        v212 = 2 * v210 + 8;
      else
        v212 = (uint64_t)v206;
      *(_QWORD *)(v212 + ((v209 >> 3) & 0x1FFFFFF8)) |= 1 << v209;
      v213 = *v395;
      v214 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v395 + 1), -(int)v209);
      v215 = 16;
      if (v214 == 3)
        v215 = 8;
      if (v214 >= 3)
        v216 = v215;
      else
        v216 = 4;
      v410 = JSC::B3::Air::Code::addStackSlot(v213, v216, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v401, &v405, (int *)&v406, &v410, v217, v218, v219, v220);
      ++v208;
      v207 -= 4;
    }
    while (v207);
    v228 = *v395;
    *(_QWORD *)&v401 = v228;
    *((_QWORD *)&v401 + 1) = v403;
    v402 = 8;
    v380 = (WTF::BitVector *)*(unsigned int *)(v228 + 108);
    if ((_DWORD)v380)
    {
      v229 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v228 + 96) + 8 * v229))
      {
        if (v380 == (WTF::BitVector *)++v229)
          goto LABEL_395;
      }
      if ((_DWORD)v380 != (_DWORD)v229)
      {
        LODWORD(v230) = *(_DWORD *)(v228 + 108);
        LODWORD(v231) = v229;
        v390 = v206;
        v378 = v228;
        do
        {
          if (v230 <= v231)
          {
            __break(0xC471u);
            JUMPOUT(0x19807E4D8);
          }
          v382 = v231;
          v232 = *(_QWORD *)(*(_QWORD *)(v228 + 96) + 8 * v231);
          v400 = 0;
          v399 = 0;
          if (*(_DWORD *)(v232 + 20))
          {
            v233 = 0;
            do
            {
              v234 = v233;
              v235 = *(_QWORD *)(v232 + 8);
              v236 = (_DWORD *)(v235 + ((unint64_t)v233 << 7));
              v398 = 0;
              v397 = 0;
              v410 = (unsigned int *)&v405;
              v411 = (uint64_t **)v236;
              v412 = (uint64_t)v395;
              v413 = (uint64_t *)((char *)&v398 + 1);
              v414 = (WTF::BitVector *)&v398;
              v415 = (__int128 *)&v397;
              v237 = (__int16 *)(v236 + 30);
              if ((*((__int16 *)v236 + 60) - 446) > 5)
              {
                v238 = v236[3];
                if ((_DWORD)v238)
                {
                  v239 = 0;
                  v240 = 0;
                  v241 = (char *)&JSC::B3::Air::g_formTable
                       + 21 * *((__int16 *)v236 + 60)
                       + ((unint64_t)((v238 - 1) * v238) >> 1);
                  v242 = 32 * v238;
                  do
                  {
                    if (v240 >= v236[3])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19807E4A8);
                    }
                    if ((*v241 >> 5) - 1 >= 5u)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19807E34CLL);
                    }
                    ++v240;
                    ++v241;
                    v239 += 32;
                  }
                  while (v242 != v239);
                }
              }
              else
              {
                v407 = (uint64_t)&v406;
                v408[0] = &v410;
                v419[1] = &v406;
                if (*v237 == 448)
                {
                  v420[1] = &v406;
                  if (!v236[3])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807E4B8);
                  }
                  (*(void (**)(_QWORD, _DWORD *, _QWORD *))(***(_QWORD ***)v236 + 16))(**(_QWORD **)v236, v236, v420);
                }
                else
                {
                  switch(*v237)
                  {
                    case 446:
                      break;
                    case 447:
                      JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v236, (uint64_t)v419);
                      break;
                    case 449:
                      JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v236, (uint64_t)v419);
                      break;
                    case 450:
                      v420[0] = v419;
                      JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v236, (uint64_t)v420);
                      break;
                    case 451:
                      JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v236, (uint64_t)v419);
                      break;
                    default:
                      WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v236 + 30), "\n");
                      __break(0xC471u);
                      JUMPOUT(0x19807E480);
                  }
                }
              }
              if ((_BYTE)v398 && HIBYTE(v398))
                *v237 = 94;
              if (v397)
              {
                v243 = *v237;
                if ((v243 - 107) >= 2)
                {
                  if (v243 == 90 || v243 == 94)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807E3B0);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x19807E404);
                }
                v244 = *(_DWORD *)(*v395 + 180);
                *(_DWORD *)(*v395 + 180) = v244 + 1;
                LODWORD(v420[0]) = -33 - v244;
                v245 = *(_QWORD *)v390;
                if ((*(_QWORD *)v390 & 0x8000000000000000) != 0)
                  v246 = 63;
                else
                  v246 = *(_QWORD *)(2 * v245);
                v253 = (v244 + 33);
                if (v246 <= v253)
                {
                  WTF::BitVector::resizeOutOfLine(v390, v253 + 1, 0);
                  v245 = *(_QWORD *)v390;
                }
                if (v245 >= 0)
                  v254 = 2 * v245 + 8;
                else
                  v254 = (uint64_t)v390;
                *(_QWORD *)(v254 + ((v253 >> 3) & 0x1FFFFFF8)) |= 1 << v253;
                v255 = v236[3];
                if ((_DWORD)v255 == v236[2])
                {
                  WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v236, (unsigned int *)v420, v222, v223, v224, v225, v226, v227);
                  v258 = v236[3];
                }
                else
                {
                  v256 = *(_QWORD *)v236 + 32 * v255;
                  v257 = v420[0];
                  *(_QWORD *)v256 = 0;
                  *(_WORD *)(v256 + 8) = 513;
                  *(_DWORD *)(v256 + 12) = 1;
                  *(_QWORD *)(v256 + 16) = v257;
                  *(_BYTE *)(v256 + 24) = 0;
                  v258 = v236[3] + 1;
                  v236[3] = v258;
                }
                if (v258 != 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19807E31CLL);
                }
                v259 = *(_QWORD *)(v235 + (v234 << 7) + 112);
                v406 = v408;
                v409[0] = v259;
                LODWORD(v409[1]) = 0;
                v410 = (unsigned int *)v399;
                v411 = &v413;
                v407 = 3;
                v412 = 3;
                v418[0] = v259;
                *(_DWORD *)((char *)v418 + 7) = *(_DWORD *)((char *)v409 + 7);
                v260 = HIDWORD(v402);
                if (HIDWORD(v402) == (_DWORD)v402)
                {
                  v276 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v401 + 8, HIDWORD(v402) + 1, (unint64_t)&v410, v223, v224, v225, v226, v227);
                  v277 = HIDWORD(v402);
                  v278 = *((_QWORD *)&v401 + 1);
                  v279 = *((_QWORD *)&v401 + 1) + 136 * HIDWORD(v402);
                  *(_QWORD *)v279 = *(_QWORD *)v276;
                  v280 = (_OWORD *)(v279 + 24);
                  *(_QWORD *)(v279 + 8) = v279 + 24;
                  *(_QWORD *)(v279 + 16) = 3;
                  v281 = *(__int128 **)(v276 + 8);
                  if (v281 == (__int128 *)(v276 + 24))
                  {
                    v282 = *(unsigned int *)(v276 + 20);
                    if ((_DWORD)v282)
                    {
                      v283 = 32 * v282;
                      do
                      {
                        v284 = *v281;
                        v285 = v281[1];
                        v281 += 2;
                        *v280 = v284;
                        v280[1] = v285;
                        v280 += 2;
                        v283 -= 32;
                      }
                      while (v283);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v276 + 8) = v276 + 24;
                    *(_QWORD *)(v279 + 8) = v281;
                    v287 = *(_DWORD *)(v276 + 16);
                    *(_DWORD *)(v276 + 16) = 3;
                    *(_DWORD *)(v279 + 16) = v287;
                  }
                  v271 = (_QWORD *)(v276 + 120);
                  v286 = *(_DWORD *)(v276 + 20);
                  *(_DWORD *)(v276 + 20) = 0;
                  *(_DWORD *)(v279 + 20) = v286;
                  v270 = v278 + 136 * v277 + 120;
                }
                else
                {
                  v261 = *((_QWORD *)&v401 + 1);
                  v262 = *((_QWORD *)&v401 + 1) + 136 * HIDWORD(v402);
                  *(_QWORD *)v262 = v399;
                  v263 = (_OWORD *)(v262 + 24);
                  *(_QWORD *)(v262 + 8) = v262 + 24;
                  *(_QWORD *)(v262 + 16) = 3;
                  v264 = v411;
                  if (v411 == &v413)
                  {
                    if (HIDWORD(v412))
                    {
                      v265 = 32 * HIDWORD(v412);
                      v266 = &v413;
                      do
                      {
                        v267 = *(_OWORD *)v266;
                        v268 = *((_OWORD *)v266 + 1);
                        v266 += 4;
                        *v263 = v267;
                        v263[1] = v268;
                        v263 += 2;
                        v265 -= 32;
                      }
                      while (v265);
                    }
                  }
                  else
                  {
                    v411 = &v413;
                    *(_QWORD *)(v262 + 8) = v264;
                    v275 = v412;
                    LODWORD(v412) = 3;
                    *(_DWORD *)(v262 + 16) = v275;
                  }
                  v269 = HIDWORD(v412);
                  HIDWORD(v412) = 0;
                  *(_DWORD *)(v262 + 20) = v269;
                  v270 = v261 + 136 * v260 + 120;
                  v271 = v418;
                }
                v272 = *v271;
                *(_DWORD *)(v270 + 7) = *(_DWORD *)((char *)v271 + 7);
                *(_QWORD *)v270 = v272;
                ++HIDWORD(v402);
                v273 = (unint64_t)v411;
                if (&v413 != v411 && v411)
                {
                  v411 = 0;
                  LODWORD(v412) = 0;
                  WTF::fastFree(v273, v221, v222, v223, v224, v225, v226, v227);
                }
                v274 = (unint64_t)v406;
                if (v408 != v406 && v406)
                {
                  v406 = 0;
                  LODWORD(v407) = 0;
                  WTF::fastFree(v274, v221, v222, v223, v224, v225, v226, v227);
                }
              }
              else
              {
                v410 = (unsigned int *)&v405;
                v411 = (uint64_t **)v394;
                v412 = (uint64_t)&v400;
                v413 = v395;
                v414 = v390;
                v415 = &v401;
                v416 = &v399;
                v417 = v236;
                v420[0] = &v410;
                if ((*v237 - 446) > 5)
                {
                  v247 = v236[3];
                  if ((_DWORD)v247)
                  {
                    v248 = 0;
                    v249 = 0;
                    v250 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                         + 21 * *v237
                         + ((unint64_t)((v247 - 1) * v247) >> 1);
                    v251 = 32 * v247;
                    do
                    {
                      if (v249 >= v236[3])
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19807E4B0);
                      }
                      v252 = *v250;
                      if ((v252 >> 5) - 1 >= 5)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19807E4A0);
                      }
                      ++v249;
                      ++v250;
                      v248 += 32;
                    }
                    while (v251 != v248);
                  }
                }
                else
                {
                  v407 = (uint64_t)&v406;
                  v408[0] = v420;
                }
              }
              v233 = v399 + 1;
              v399 = v233;
            }
            while (v233 < *(_DWORD *)(v232 + 20));
          }
          JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v401, (JSC::B3::Air::BasicBlock *)v232, v222, v223, v224, v225, v226, v227);
          if (v400)
          {
            v288 = *(_QWORD *)(v232 + 8);
            v289 = *(unsigned int *)(v232 + 20);
            v290 = v288 + (v289 << 7);
            if ((_DWORD)v289)
            {
              v291 = 0;
              v292 = 0;
              v293 = (unsigned int *)(v288 + (v289 << 7));
              v294 = (unint64_t)v293;
              do
              {
                v295 = (unsigned int *)(v288 + v291);
                if ((*(__int16 *)(v288 + v291 + 120) - 107) <= 6
                  && ((1 << (*(_WORD *)(v288 + v291 + 120) - 107)) & 0x43) != 0
                  && v295[3] == 2)
                {
                  v297 = *(_QWORD *)v295;
                  if (*(_BYTE *)(*(_QWORD *)v295 + 8) == 1)
                  {
                    v298 = *(_WORD *)(v288 + v291 + 120) != 94 && *(_BYTE *)(v297 + 40) == 1;
                    if (v298 && *(_DWORD *)(v297 + 16) == *(_DWORD *)(v297 + 48))
                    {
                      if (v294 == *(_QWORD *)(v232 + 8) + ((unint64_t)*(unsigned int *)(v232 + 20) << 7))
                      {
                        v294 = v288 + v291;
                      }
                      else if (v295 != v293)
                      {
                        v299 = v294;
                        WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v293, v295, v294, v223, v224, v225, v226, v227);
                        v294 = v299 + v288 + v291 - (_QWORD)v293;
                        v297 = *(_QWORD *)(v288 + v291);
                      }
                      if (v288 + v291 + 16 != v297 && v297)
                      {
                        v300 = v288 + v291;
                        *(_QWORD *)v300 = 0;
                        *(_DWORD *)(v300 + 8) = 0;
                        v301 = v294;
                        WTF::fastFree(v297, v295, v222, v223, v224, v225, v226, v227);
                        v294 = v301;
                      }
                      v293 = (unsigned int *)(v288 + v291 + 128);
                      ++v292;
                    }
                  }
                }
                v291 += 128;
              }
              while (v288 + v291 < v290);
              v288 = *(_QWORD *)(v232 + 8);
              LODWORD(v289) = *(_DWORD *)(v232 + 20);
              v290 = v294;
            }
            else
            {
              v292 = 0;
              v293 = (unsigned int *)(v288 + (v289 << 7));
            }
            v221 = (unsigned int *)(v288 + ((unint64_t)v289 << 7));
            if (v293 != v221)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v293, v221, v290, v223, v224, v225, v226, v227);
              LODWORD(v289) = *(_DWORD *)(v232 + 20);
            }
            *(_DWORD *)(v232 + 20) = v289 - v292;
          }
          v231 = (v382 + 1);
          v228 = v378;
          v230 = *(unsigned int *)(v378 + 108);
          if (v230 > v231)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v378 + 96) + 8 * v231))
            {
              if (v230 == ++v231)
              {
                LODWORD(v231) = *(_DWORD *)(v378 + 108);
                break;
              }
            }
          }
        }
        while ((_DWORD)v380 != (_DWORD)v231);
        v302 = (_BYTE *)*((_QWORD *)&v401 + 1);
        if (HIDWORD(v402))
        {
          v367 = 136 * HIDWORD(v402);
          v368 = *((_QWORD *)&v401 + 1) + 24;
          do
          {
            v369 = *(_QWORD *)(v368 - 16);
            if (v368 != v369 && v369 != 0)
            {
              *(_QWORD *)(v368 - 16) = 0;
              *(_DWORD *)(v368 - 8) = 0;
              WTF::fastFree(v369, v221, v222, v223, v224, v225, v226, v227);
            }
            v368 += 136;
            v367 -= 136;
          }
          while (v367);
          v302 = (_BYTE *)*((_QWORD *)&v401 + 1);
        }
        if (v403 != v302 && v302)
        {
          *((_QWORD *)&v401 + 1) = 0;
          LODWORD(v402) = 0;
          WTF::fastFree((unint64_t)v302, v221, v222, v223, v224, v225, v226, v227);
        }
      }
    }
LABEL_395:
    if (v405)
      WTF::fastFree(v405 - 16, v221, v222, v223, v224, v225, v226, v227);
    return v374 == 0;
  }
  v303 = *v395;
  v396 = *(unsigned int *)(*v395 + 108);
  if ((_DWORD)v396)
  {
    v304 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v303 + 96) + 8 * v304))
    {
      if (v396 == ++v304)
        return v374 == 0;
    }
    if ((_DWORD)v396 != (_DWORD)v304)
    {
      v305 = &v402;
      v306 = 67;
      LODWORD(v307) = v396;
      v308 = v304;
      v391 = (WTF::BitVector *)v303;
      do
      {
        if (v307 <= v308)
        {
          __break(0xC471u);
          JUMPOUT(0x19807E4F8);
        }
        v309 = *(_QWORD *)(*(_QWORD *)(v303 + 96) + 8 * v308);
        LODWORD(v310) = *(_DWORD *)(v309 + 20);
        if (!(_DWORD)v310)
        {
          v356 = 0;
          v353 = *(unsigned int **)(v309 + 8);
          v354 = (unint64_t)v353;
          v357 = v353;
          goto LABEL_511;
        }
        v311 = 0;
        do
        {
          v312 = *(_QWORD *)(v309 + 8);
          v313 = v312 + (v311 << 7);
          if ((*(__int16 *)(v313 + 120) - 107) > 6 || ((1 << (*(_WORD *)(v313 + 120) - 107)) & 0x43) == 0)
          {
            v316 = *(_QWORD *)v313;
            v315 = *(unsigned int *)(v313 + 12);
LABEL_422:
            if (!v315)
              goto LABEL_475;
            LODWORD(v317) = 0;
            v319 = v316 + 32 * v315;
            goto LABEL_424;
          }
          v315 = *(unsigned int *)(v313 + 12);
          v316 = *(_QWORD *)v313;
          if ((_DWORD)v315 != 2)
            goto LABEL_422;
          if (*(_BYTE *)(v316 + 8) != 1 || *(_BYTE *)(v316 + 40) != 1)
            goto LABEL_419;
          if (*(_WORD *)(v313 + 120) != 94)
            goto LABEL_477;
          v317 = *(_QWORD *)(v8 + 376);
          if (v317)
          {
            v318 = *(unsigned int *)(v316 + 16);
            if ((int)v318 < 1)
            {
              v318 = -(int)v318;
              if (v318 >= *(unsigned int *)(v317 + 28))
              {
                __break(0xC471u);
                JUMPOUT(0x19807E4F0);
              }
              v317 += 16;
            }
            else if (v318 >= *(_DWORD *)(v317 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19807E4E8);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v317 + 2 * v318 + 1) <= 2u)
            {
LABEL_477:
              LODWORD(v317) = 1;
              goto LABEL_420;
            }
LABEL_419:
            LODWORD(v317) = 0;
          }
LABEL_420:
          v319 = v316 + 64;
LABEL_424:
          v320 = *(_QWORD *)(v8 + 152);
          v321 = *(_QWORD *)(v8 + 120);
          v322 = v316;
          do
          {
            v323 = *(char *)(v322 + 8);
            if (v323 > 0xD)
              goto LABEL_442;
            if (((1 << v323) & 0x31C2) != 0)
            {
              v324 = (int *)(v322 + 16);
              goto LABEL_428;
            }
            if (v323 == 11)
            {
              v332 = *(_DWORD *)(v322 + 16);
              if (v332 <= -33)
              {
                v333 = -v332;
                do
                {
                  v334 = v333;
                  v333 = *(_DWORD *)(v320 + 4 * v333);
                }
                while (v333);
                v335 = v334;
                v336 = -v334;
                if (v336 > 0xFFFFFFDF || v335 >= 0xFFFFFFE0)
                {
                  if (v336 <= 0)
                    v337 = 31 - v336;
                  else
                    v337 = v336 + 127;
                  v338 = v337 & 0x7F;
                  if (v338 != 127)
                    goto LABEL_457;
                  v339 = 0;
                }
                else
                {
                  LODWORD(v401) = v336;
                  v337 = *(_BYTE *)(v321 + v335);
                  v338 = v337 & 0x7F;
                  if (v338 == 127)
                  {
                    WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v401);
                    WTF::dataLog<char [7]>();
                    WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                    __break(0xC471u);
                    JUMPOUT(0x19807E3E4);
                  }
LABEL_457:
                  if ((v337 & 0x60) != 0)
                    v339 = (char)(31 - v338);
                  else
                    v339 = v338 + 1;
                }
                *(_DWORD *)(v322 + 16) = v339;
              }
              v324 = (int *)(v322 + 20);
LABEL_428:
              if (*v324 > -33)
                goto LABEL_442;
              v325 = -*v324;
              do
              {
                v326 = v325;
                v325 = *(_DWORD *)(v320 + 4 * v325);
              }
              while (v325);
              v327 = v326;
              v328 = -v326;
              if (v328 > 0xFFFFFFDF || v327 >= 0xFFFFFFE0)
              {
                if (v328 <= 0)
                  v329 = 31 - v328;
                else
                  v329 = v328 + 127;
                v330 = v329 & 0x7F;
                if (v330 != 127)
                  goto LABEL_439;
                v331 = 0;
              }
              else
              {
                LODWORD(v401) = v328;
                v329 = *(_BYTE *)(v321 + v327);
                v330 = v329 & 0x7F;
                if (v330 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v401);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                  __break(0xC471u);
                  JUMPOUT(0x19807E380);
                }
LABEL_439:
                if ((v329 & 0x60) != 0)
                  v331 = (char)(31 - v330);
                else
                  v331 = v330 + 1;
              }
              *v324 = v331;
            }
LABEL_442:
            v322 += 32;
          }
          while (v322 != v319);
          if ((_DWORD)v317)
          {
            v340 = *(_DWORD *)(v313 + 12);
            if (!v340)
            {
              __break(0xC471u);
              JUMPOUT(0x19807E4C0);
            }
            if (*(_BYTE *)(v316 + 8) == 1)
            {
              if (v340 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19807E4C8);
              }
              if (*(_BYTE *)(v316 + 40) == 1 && *(_DWORD *)(v316 + 16) == *(_DWORD *)(v316 + 48))
              {
                *(_QWORD *)&v401 = &v402;
                *((_QWORD *)&v401 + 1) = 3;
                *(_QWORD *)v404 = 0;
                *(_WORD *)&v404[8] = 0;
                v404[10] &= 0xFCu;
                v342 = (_OWORD *)(v313 + 16);
                v341 = *(_QWORD *)v313;
                if (*(_QWORD *)v313 != v313 + 16)
                {
                  if (v341)
                  {
                    *(_QWORD *)v313 = 0;
                    *(_DWORD *)(v313 + 8) = 0;
                    v387 = v308;
                    WTF::fastFree(v341, v201, (uint64_t)&v402, 67, v308, v202, v203, v204);
                    v308 = v387;
                    v306 = 67;
                    v305 = &v402;
                  }
                  *(_QWORD *)v313 = v342;
                  v348 = v401;
                  if ((uint64_t *)v401 == &v402)
                  {
                    if (HIDWORD(v401))
                    {
                      v349 = 32 * HIDWORD(v401);
                      v350 = &v402;
                      do
                      {
                        v351 = *(_OWORD *)v350;
                        v352 = *((_OWORD *)v350 + 1);
                        v350 += 4;
                        *v342 = v351;
                        v342[1] = v352;
                        v342 += 2;
                        v349 -= 32;
                      }
                      while (v349);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v401 = &v402;
                    *(_QWORD *)v313 = v348;
                  }
                }
                *(_DWORD *)(v313 + 8) = DWORD2(v401);
                v343 = HIDWORD(v401);
                HIDWORD(v401) = 0;
                *(_DWORD *)(v313 + 12) = v343;
                v344 = v312 + (v311 << 7);
                v345 = *(_QWORD *)v404;
                *(_DWORD *)(v344 + 119) = *(_DWORD *)&v404[7];
                *(_QWORD *)(v344 + 112) = v345;
                v346 = v401;
                if (&v402 != (uint64_t *)v401 && (_QWORD)v401)
                {
                  *(_QWORD *)&v401 = 0;
                  DWORD2(v401) = 0;
                  v347 = v308;
                  WTF::fastFree(v346, v201, (uint64_t)&v402, 67, v308, v202, v203, v204);
                  v308 = v347;
                  v306 = 67;
                  v305 = &v402;
                }
                v8 = v394;
              }
            }
          }
LABEL_475:
          ++v311;
          v310 = *(unsigned int *)(v309 + 20);
        }
        while (v311 < v310);
        v353 = *(unsigned int **)(v309 + 8);
        v354 = (unint64_t)&v353[32 * v310];
        if ((_DWORD)v310)
        {
          v355 = 0;
          v356 = 0;
          v357 = &v353[32 * v310];
          v358 = (unint64_t)v357;
          do
          {
            v359 = &v353[v355];
            if (*(_QWORD *)&v353[v355 + 28])
              v360 = 0;
            else
              v360 = LOWORD(v353[v355 + 30]) == 0;
            if (v360 && (*((_BYTE *)v359 + 122) & 3) == 0)
            {
              v385 = v358;
              v388 = v308;
              v383 = v356;
              if (v353[v355 + 3])
              {
                v8 = v394;
                v305 = &v402;
                v306 = 67;
              }
              else
              {
                if (v358 == *(_QWORD *)(v309 + 8) + ((unint64_t)*(unsigned int *)(v309 + 20) << 7))
                {
                  v385 = (unint64_t)&v353[v355];
                }
                else if (v359 != v357)
                {
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v357, v359, v358, 67, v308, v202, v203, v204);
                  v385 += (char *)&v353[v355] - (char *)v357;
                }
                v361 = *(_QWORD *)&v353[v355];
                if (&v353[v355 + 4] != (unsigned int *)v361 && v361)
                {
                  v362 = &v353[v355];
                  *(_QWORD *)v362 = 0;
                  v362[2] = 0;
                  WTF::fastFree(v361, v359, (uint64_t)v305, v306, v308, v202, v203, v204);
                }
                v357 = &v353[v355 + 32];
                v356 = v383 + 1;
                v8 = v394;
                v305 = &v402;
                v306 = 67;
                v308 = v388;
              }
              v358 = v385;
            }
            v355 += 32;
          }
          while ((unint64_t)&v353[v355] < v354);
          v353 = *(unsigned int **)(v309 + 8);
          LODWORD(v310) = *(_DWORD *)(v309 + 20);
          v354 = v358;
          v303 = (uint64_t)v391;
        }
        else
        {
          v356 = 0;
          v357 = &v353[32 * v310];
        }
LABEL_511:
        v201 = &v353[32 * (unint64_t)v310];
        if (v357 != v201)
        {
          v363 = v354;
          v364 = v308;
          v365 = v356;
          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v357, v201, v363, 67, v308, v202, v203, v204);
          v356 = v365;
          LODWORD(v308) = v364;
          v306 = 67;
          v305 = &v402;
          LODWORD(v310) = *(_DWORD *)(v309 + 20);
        }
        *(_DWORD *)(v309 + 20) = v310 - v356;
        v308 = (v308 + 1);
        v307 = *(unsigned int *)(v303 + 108);
        if (v307 > v308)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v303 + 96) + 8 * v308))
          {
            if (v307 == ++v308)
            {
              v308 = *(unsigned int *)(v303 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v396 != (_DWORD)v308);
    }
  }
  return v374 == 0;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  char v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  char v47;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int *v69;
  unsigned int **v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD **v76;
  _QWORD **v77;
  _QWORD **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int **v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _DWORD *v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  _DWORD *v106;
  uint64_t v107[2];
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;

  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_QWORD *)(v8 + 336) = a3;
  v15 = *(_QWORD *)(a2 + 56);
  if (v15)
  {
    v16 = 0;
    do
    {
      v16 |= v15 & -v15;
      v15 &= v15 - 1;
    }
    while (v15);
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      do
      {
        LOBYTE(v107[0]) = v17 | 0x80;
        if ((v17 & 0x60) == 0x20)
        {
          v108 = (char)(31 - v17);
          v18 = *(unsigned int *)(a1 + 276);
          if ((_DWORD)v18 == *(_DWORD *)(a1 + 272))
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * *(unsigned int *)(a1 + 276)) = *(_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 264, (void *)(v18 + 1), (unint64_t)&v108, v10, v11, v12, v13, v14);
          else
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v18) = (char)(31 - v17);
          ++*(_DWORD *)(a1 + 276);
          v19 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
          {
            v24 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)v107);
            v19 = *(unsigned int *)(a1 + 12);
            v20 = *(_QWORD *)a1;
            v21 = *v24;
          }
          else
          {
            v20 = *(_QWORD *)a1;
            v21 = v107[0];
          }
          *(_BYTE *)(v20 + v19) = v21;
          ++*(_DWORD *)(a1 + 12);
        }
        if (v17 > 0x3E)
          break;
        v22 = __clz(__rbit64(v16 >> (v17 + 1)));
        v23 = v22 + v17 + 1;
        if (v23 >= 0x40)
          v17 = 64;
        else
          v17 += v22 + 1;
      }
      while (v23 <= 0x3F);
    }
  }
  WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::setMaxIndex(a1 + 24, (void *)(*(_DWORD *)(*(_QWORD *)(a1 + 256) + 180) + 33), v9, v10, v11, v12, v13, v14);
  v32 = (*(_DWORD *)(a1 + 16) + 1);
  v33 = *(unsigned int *)(a1 + 132);
  if (v33 < v32)
  {
    v34 = *(unsigned int *)(a1 + 128);
    v35 = *(_QWORD *)(a1 + 120);
    if (v34 < v32)
    {
      v36 = v34 + (v34 >> 2);
      if (v36 >= 0x10)
        v37 = v36 + 1;
      else
        v37 = 16;
      if (v37 <= v32)
        v38 = (*(_DWORD *)(a1 + 16) + 1);
      else
        v38 = v37;
      if (HIDWORD(v38))
      {
LABEL_106:
        __break(0xC471u);
        JUMPOUT(0x19807EAE8);
      }
      v39 = (_BYTE *)WTF::fastMalloc((WTF *)v38);
      *(_DWORD *)(a1 + 128) = v38;
      *(_QWORD *)(a1 + 120) = v39;
      if ((_DWORD)v33)
      {
        v40 = (char *)v35;
        do
        {
          v41 = *v40++;
          *v39++ = v41;
          --v33;
        }
        while (v33);
        v39 = *(_BYTE **)(a1 + 120);
      }
      if (!v35)
      {
        v35 = (unint64_t)v39;
        if (!v39)
          goto LABEL_43;
LABEL_40:
        v42 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v42 != (_DWORD)v32)
        {
          v43 = (_BYTE *)(v35 + v42);
          v44 = v32 - v42;
          do
          {
            *v43++ |= 0x7Fu;
            --v44;
          }
          while (v44);
        }
        goto LABEL_43;
      }
      if (v39 == (_BYTE *)v35)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
      }
      WTF::fastFree(v35, v25, v26, v27, v28, v29, v30, v31);
      v35 = *(_QWORD *)(a1 + 120);
    }
    if (!v35)
      goto LABEL_43;
    goto LABEL_40;
  }
LABEL_43:
  *(_DWORD *)(a1 + 132) = v32;
  if (*(_DWORD *)(a1 + 16))
  {
    v45 = 1;
    v46 = -1;
    do
    {
      v47 = 31 - v46;
      if (v46-- > 0)
        v47 = v46;
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v45++) = v47 & 0x7F;
    }
    while (v45 <= *(_DWORD *)(a1 + 16));
  }
  if (*(_DWORD *)(a1 + 96))
  {
    if (*(_DWORD *)(a1 + 100))
      *(_DWORD *)(a1 + 100) = 0;
    v49 = *(_QWORD *)(a1 + 88);
    if (v49)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v49, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  *(_DWORD *)(a1 + 296) = 0;
  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v108, *(_QWORD *)(a1 + 256));
  v64 = *(_QWORD *)(a1 + 256);
  v65 = *(unsigned int *)(v64 + 108);
  if ((_DWORD)v65)
  {
    v66 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v64 + 96) + 8 * v66))
    {
      if (v65 == ++v66)
        goto LABEL_59;
    }
    if ((_DWORD)v65 != (_DWORD)v66)
    {
      LODWORD(v68) = *(_DWORD *)(v64 + 108);
      do
      {
        if (v68 <= v66)
        {
          __break(0xC471u);
          JUMPOUT(0x19807EAF8);
        }
        v69 = *(unsigned int **)(*(_QWORD *)(v64 + 96) + 8 * v66);
        v107[0] = (uint64_t)&v108;
        v107[1] = (uint64_t)v69;
        v113 = 0;
        v70 = (unsigned int **)(v114 + 32 * *v69);
        v71 = *((unsigned int *)v70 + 3);
        if ((_DWORD)v71)
        {
          v100 = *v70;
          v101 = v110;
          v102 = 4 * v71;
          do
          {
            v103 = *v100;
            v104 = *(unsigned int *)(v101 + 4 * v103);
            v105 = v113;
            if (v113 <= v104 || *(_DWORD *)(v111 + 4 * v104) != (_DWORD)v103)
            {
              v115 = *v100;
              if (v113 == v112)
              {
                v106 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, v113 + 1, (unint64_t)&v115);
                *(_DWORD *)(v111 + 4 * v113) = *v106;
                v101 = v110;
              }
              else
              {
                *(_DWORD *)(v111 + 4 * v113) = v103;
              }
              ++v113;
              *(_DWORD *)(v101 + 4 * v103) = v105;
            }
            ++v100;
            v102 -= 4;
          }
          while (v102);
        }
        v72 = v69[5];
        if (!(_DWORD)v72)
          goto LABEL_104;
        do
        {
          v73 = v72 - 1;
          v74 = v69[5];
          if (v74 <= (int)v72 - 1)
            goto LABEL_106;
          v75 = *((_QWORD *)v69 + 1);
          v76 = (_QWORD **)(v75 + ((unint64_t)(v72 - 1) << 7));
          v77 = (_QWORD **)(v75 + (v72 << 7));
          if (v72 >= v74)
            v78 = 0;
          else
            v78 = v77;
          v79 = v109;
          v80 = *(_QWORD *)(v109 + 16 * *v69);
          v81 = v80 + (v72 << 6);
          v82 = *(unsigned int *)(v81 + 44);
          if ((_DWORD)v82)
          {
            v92 = *(unsigned int **)(v81 + 32);
            v93 = v113;
            v94 = 4 * v82;
            v95 = v110;
            v96 = v111;
            do
            {
              v97 = *v92;
              v98 = *(unsigned int *)(v95 + 4 * v97);
              if (v93 > v98 && *(_DWORD *)(v96 + 4 * v98) == (_DWORD)v97)
              {
                v99 = *(unsigned int *)(v96 + 4 * v93 - 4);
                *(_DWORD *)(v96 + 4 * v98) = v99;
                *(_DWORD *)(v95 + 4 * v99) = v98;
                v93 = --v113;
              }
              ++v92;
              v94 -= 4;
            }
            while (v94);
            v80 = *(_QWORD *)(v79 + 16 * *v69);
          }
          v83 = (unsigned int **)(v80 + ((unint64_t)(v72 - 1) << 6));
          v84 = *((unsigned int *)v83 + 3);
          if ((_DWORD)v84)
          {
            v85 = *v83;
            v86 = v110;
            v87 = 4 * v84;
            do
            {
              v88 = *v85;
              v89 = *(unsigned int *)(v86 + 4 * v88);
              v90 = v113;
              if (v113 <= v89 || *(_DWORD *)(v111 + 4 * v89) != (_DWORD)v88)
              {
                v115 = *v85;
                if (v113 == v112)
                {
                  v91 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, v113 + 1, (unint64_t)&v115);
                  *(_DWORD *)(v111 + 4 * v113) = *v91;
                  v86 = v110;
                }
                else
                {
                  *(_DWORD *)(v111 + 4 * v113) = v88;
                }
                ++v113;
                *(_DWORD *)(v86 + 4 * v88) = v90;
              }
              ++v85;
              v87 -= 4;
            }
            while (v87);
          }
          v72 = v73;
        }
        while ((_DWORD)v73);
        if (!v69[5])
        {
LABEL_104:
          __break(0xC471u);
          JUMPOUT(0x19807EAF0);
        }
        v66 = (v66 + 1);
        v68 = *(unsigned int *)(v64 + 108);
        if (v68 > v66)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v64 + 96) + 8 * v66))
          {
            if (v68 == ++v66)
            {
              LODWORD(v66) = *(_DWORD *)(v64 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v65 != (_DWORD)v66);
    }
  }
LABEL_59:
  WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v108, v57, v58, v59, v60, v61, v62, v63);
  return a1;
}

BOOL JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::allocateOnBank<(JSC::B3::Bank)1>(void)::{lambda((JSC::B3::Bank)1 &)#1}::operator()<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::BitVector *v72;
  uint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  __int16 *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  uint64_t **v131;
  uint64_t v132;
  uint64_t **v133;
  __int128 v134;
  __int128 v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int *v160;
  unint64_t v161;
  unsigned int *v162;
  unint64_t v164;
  BOOL v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t i;
  uint64_t v179;
  uint64_t v180;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned int v190;
  int *v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  char v196;
  int v197;
  int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  char v204;
  int v205;
  int v206;
  unsigned int v207;
  unint64_t v208;
  _OWORD *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  __int128 v219;
  __int128 v220;
  unsigned int *v221;
  unint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unint64_t v225;
  unsigned int *v226;
  BOOL v227;
  unint64_t v228;
  unsigned int *v229;
  int v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF::BitVector *v249;
  int v251;
  uint64_t *v252;
  uint64_t v253;
  char v254;
  __int16 v255;
  unsigned int v256;
  char v257;
  __int128 v258;
  uint64_t v259;
  _BYTE v260[88];
  _BYTE v261[11];
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD v265[12];
  _QWORD v266[2];
  unsigned int *v267;
  uint64_t **v268;
  uint64_t v269;
  uint64_t *v270;
  WTF::BitVector *v271;
  __int128 *v272;
  unsigned int *v273;
  _DWORD *v274;
  _QWORD v275[2];
  _QWORD v276[2];
  _QWORD v277[3];

  v8 = a2;
  v252 = *a1;
  v9 = *(unsigned int *)(a2 + 316);
  if ((_DWORD)v9)
  {
    LOBYTE(v263) = 0;
    v10 = *(_DWORD **)(a2 + 304);
    *(_QWORD *)&v258 = a2;
    *((_QWORD *)&v258 + 1) = &v263;
    v11 = &v10[v9];
    while (1)
    {
      if (*v10 != -1)
      if (++v10 == v11)
      {
        if (!(_BYTE)v263)
          break;
        v12 = *(unsigned int *)(v8 + 316);
        LOBYTE(v263) = 0;
        v10 = *(_DWORD **)(v8 + 304);
        *(_QWORD *)&v258 = v8;
        *((_QWORD *)&v258 + 1) = &v263;
        v11 = &v10[v12];
        if (!(_DWORD)v12)
          break;
      }
    }
  }
  v13 = *(unsigned int *)(v8 + 332);
  LOBYTE(v263) = 0;
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)(v8 + 320);
    *(_QWORD *)&v258 = v8;
    *((_QWORD *)&v258 + 1) = &v263;
    v15 = &v14[v13];
    while (1)
    {
      if (*v14 != -1)
      if (++v14 == v15)
      {
        if (!(_BYTE)v263)
          break;
        v16 = *(unsigned int *)(v8 + 332);
        LOBYTE(v263) = 0;
        v14 = *(_DWORD **)(v8 + 320);
        *(_QWORD *)&v258 = v8;
        *((_QWORD *)&v258 + 1) = &v263;
        v15 = &v14[v16];
        if (!(_DWORD)v16)
          break;
      }
    }
  }
  v17 = (unint64_t *)(v8 + 192);
  if (*(_DWORD *)(v8 + 200))
  {
    if (*(_DWORD *)(v8 + 204))
      *(_DWORD *)(v8 + 204) = 0;
    v18 = *v17;
    if (*v17)
    {
      *(_QWORD *)(v8 + 192) = 0;
      *(_DWORD *)(v8 + 200) = 0;
      WTF::fastFree(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v20 = (uint64_t *)(v8 + 208);
  v19 = *(_QWORD *)(v8 + 208);
  if (v19 < 0)
    *v20 = 0x8000000000000000;
  else
    bzero((void *)(2 * v19 + 8), (unint64_t)(*(_QWORD *)(2 * v19) + 7) >> 3);
  v21 = *(_DWORD *)(v8 + 12);
  v22 = *(_DWORD *)(v8 + 16) + 1;
  LODWORD(v258) = v22;
  if (*(_DWORD *)(v8 + 76) > v22)
  {
    v23 = (uint64_t *)(v8 + 168);
    do
    {
      a2 = v22;
      v24 = 2 * *v23 + 8;
      if (*v23 < 0)
        v24 = v8 + 168;
      v25 = *(_QWORD *)(v24 + 8 * ((unint64_t)v22 >> 6));
      v26 = 1 << v22;
      if (((1 << v22) & v25) == 0 && !*(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v22))
      {
        if (*(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v22) >= v21)
        {
          v28 = *(uint64_t **)(v8 + 240);
          if (*v28 >= 0)
            v28 = (uint64_t *)(2 * *v28 + 8);
          if ((v28[a2 >> 6] & v26) == 0)
            WTF::BitVector::add((WTF::BitVector *)(v8 + 208), a2);
        }
        else
        {
          v27 = *(unsigned int *)(v8 + 204);
          if ((_DWORD)v27 == *(_DWORD *)(v8 + 200))
            *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v27 + 1, (unint64_t)&v258);
          else
            *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * v27) = v22;
          ++*(_DWORD *)(v8 + 204);
        }
      }
      v22 = v258 + 1;
      LODWORD(v258) = v22;
    }
    while (*(_DWORD *)(v8 + 76) > v22);
  }
  v29 = (uint64_t *)(v8 + 168);
  v30 = *(_DWORD *)(v8 + 204);
  do
  {
    while (1)
    {
      for (LOBYTE(v263) = 0; v30; v30 = *(_DWORD *)(v8 + 204))
      {
        v31 = *(unsigned int *)(*(_QWORD *)(v8 + 192) + 4 * v30 - 4);
        *(_DWORD *)(v8 + 204) = v30 - 1;
        LODWORD(v267) = v31;
        v32 = *(unsigned int *)(v8 + 188);
        if ((_DWORD)v32 == *(_DWORD *)(v8 + 184))
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 176) + 4 * *(unsigned int *)(v8 + 188)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 176, v32 + 1, (unint64_t)&v267);
          v31 = v267;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 176) + 4 * v32) = v31;
        }
        ++*(_DWORD *)(v8 + 188);
        v33 = *(_QWORD *)(v8 + 168);
        if (v33 >= 0)
          v34 = 2 * v33 + 8;
        else
          v34 = v8 + 168;
        *(_QWORD *)(v34 + ((v31 >> 3) & 0x1FFFFFF8)) |= 1 << v31;
        v35 = *(_QWORD *)(v8 + 48) + 16 * v31;
        v36 = *(unsigned int *)(v35 + 12);
        if ((_DWORD)v36)
        {
          v37 = *(_DWORD **)v35;
          v38 = 4 * v36;
          do
          {
            v39 = *v37;
            v40 = 2 * *v29 + 8;
            if (*v29 < 0)
              v40 = v8 + 168;
            if (((1 << v39) & *(_QWORD *)(v40 + 8 * (v39 >> 6))) == 0
              && !*(_DWORD *)(*(_QWORD *)(v8 + 152) + 4 * v39))
            {
              LODWORD(v258) = *v37;
              v41 = *(_QWORD *)(v8 + 64);
              v42 = *(_DWORD *)(v41 + 4 * v39);
              *(_DWORD *)(v41 + 4 * v39) = v42 - 1;
              if (v42 == *(_DWORD *)(v8 + 12))
              {
                v43 = *(_QWORD *)(v8 + 208);
                if (v43 >= 0)
                  v44 = 2 * v43 + 8;
                else
                  v44 = v8 + 208;
                *(_QWORD *)(v44 + 8 * (v39 >> 6)) &= ~(1 << v39);
                v45 = *(unsigned int *)(v8 + 204);
                if ((_DWORD)v45 == *(_DWORD *)(v8 + 200))
                  *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v45 + 1, (unint64_t)&v258);
                else
                  *(_DWORD *)(*v17 + 4 * v45) = v39;
                ++*(_DWORD *)(v8 + 204);
              }
            }
            ++v37;
            v38 -= 4;
          }
          while (v38);
        }
      }
      v46 = *v20;
      if ((*v20 & 0x8000000000000000) == 0)
        break;
      if ((v46 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_75;
LABEL_67:
      LODWORD(v258) = v50;
      v51 = *(_QWORD *)(v8 + 208);
      if (v51 >= 0)
        v52 = 2 * v51 + 8;
      else
        v52 = v8 + 208;
      *(_QWORD *)(v52 + (((unint64_t)v50 >> 3) & 0x1FFFFFF8)) &= ~(1 << v50);
      v53 = *(unsigned int *)(v8 + 204);
      if ((_DWORD)v53 == *(_DWORD *)(v8 + 200))
        *(_DWORD *)(*(_QWORD *)(v8 + 192) + 4 * *(unsigned int *)(v8 + 204)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 192, v53 + 1, (unint64_t)&v258);
      else
        *(_DWORD *)(*v17 + 4 * v53) = v50;
      v30 = *(_DWORD *)(v8 + 204) + 1;
      *(_DWORD *)(v8 + 204) = v30;
      LOBYTE(v263) = 1;
    }
    v47 = (_QWORD *)(2 * v46);
    v48 = ((unint64_t)(*v47 + 63) >> 6);
    while (v48 * 8)
    {
      if (v47[v48--])
        goto LABEL_67;
    }
LABEL_75:
    v30 = 0;
  }
  while ((_BYTE)v263);
  *(_DWORD *)(v8 + 296) = 0;
  v71 = *(unsigned int *)(v8 + 148);
  v239 = v71;
  if ((_DWORD)v71)
  {
    v72 = (WTF::BitVector *)a1[2];
    v262 = 0;
    v73 = 4 * v71;
    v74 = *(unsigned int **)(v8 + 136);
    v249 = v72;
    do
    {
      v75 = *v74;
      LODWORD(v263) = -(int)v75;
      v76 = *(_QWORD *)v72;
      if ((*(_QWORD *)v72 & 0x8000000000000000) != 0)
        v77 = 63;
      else
        v77 = *(_QWORD *)(2 * v76);
      if (v77 <= v75)
      {
        WTF::BitVector::resizeOutOfLine(v72, v75 + 1, 0);
        v76 = *(_QWORD *)v72;
      }
      if (v76 >= 0)
        v78 = 2 * v76 + 8;
      else
        v78 = (uint64_t)v72;
      *(_QWORD *)(v78 + ((v75 >> 3) & 0x1FFFFFF8)) |= 1 << v75;
      v79 = *v252;
      v80 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v252 + 1), -(int)v75);
      v81 = 16;
      if (v80 == 3)
        v81 = 8;
      if (v80 >= 3)
        v82 = v81;
      else
        v82 = 4;
      v83 = v79;
      v72 = v249;
      v267 = JSC::B3::Air::Code::addStackSlot(v83, v82, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v258, &v262, (int *)&v263, &v267, v84, v85, v86, v87);
      ++v74;
      v73 -= 4;
    }
    while (v73);
    *(_QWORD *)&v258 = *v252;
    *((_QWORD *)&v258 + 1) = v260;
    v259 = 8;
    v242 = v258;
    v240 = *(unsigned int *)(v258 + 108);
    if ((_DWORD)v240)
    {
      v95 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v258 + 96) + 8 * v95))
      {
        if (v240 == ++v95)
          goto LABEL_201;
      }
      if ((_DWORD)v240 != (_DWORD)v95)
      {
        LODWORD(v96) = *(_DWORD *)(v258 + 108);
        LODWORD(v97) = v95;
        v98 = v258;
        do
        {
          if (v96 <= v97)
          {
            __break(0xC471u);
            JUMPOUT(0x1980800F4);
          }
          v241 = v97;
          v99 = *(_QWORD *)(*(_QWORD *)(v98 + 96) + 8 * v97);
          v257 = 0;
          v256 = 0;
          if (*(_DWORD *)(v99 + 20))
          {
            v100 = 0;
            v246 = v99;
            do
            {
              v101 = v100;
              v102 = *(_QWORD *)(v99 + 8);
              v103 = (_DWORD *)(v102 + ((unint64_t)v100 << 7));
              v255 = 0;
              v254 = 0;
              v267 = (unsigned int *)&v262;
              v268 = (uint64_t **)v103;
              v269 = (uint64_t)v252;
              v270 = (uint64_t *)((char *)&v255 + 1);
              v271 = (WTF::BitVector *)&v255;
              v272 = (__int128 *)&v254;
              v104 = (__int16 *)(v103 + 30);
              if ((*((__int16 *)v103 + 60) - 446) > 5)
              {
                v105 = v103[3];
                if ((_DWORD)v105)
                {
                  v106 = 0;
                  v107 = 0;
                  v108 = (char *)&JSC::B3::Air::g_formTable
                       + 21 * *((__int16 *)v103 + 60)
                       + ((unint64_t)((v105 - 1) * v105) >> 1);
                  v109 = 32 * v105;
                  do
                  {
                    if (v107 >= v103[3])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980800CCLL);
                    }
                    if ((*v108 >> 5) - 1 >= 5u)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19807FF68);
                    }
                    ++v107;
                    ++v108;
                    v106 += 32;
                  }
                  while (v109 != v106);
                }
              }
              else
              {
                v264 = (uint64_t)&v263;
                v265[0] = &v267;
                v276[1] = &v263;
                if (*v104 == 448)
                {
                  v277[1] = &v263;
                  if (!v103[3])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980800DCLL);
                  }
                  (*(void (**)(_QWORD, _DWORD *, _QWORD *))(***(_QWORD ***)v103 + 16))(**(_QWORD **)v103, v103, v277);
                }
                else
                {
                  switch(*v104)
                  {
                    case 446:
                      break;
                    case 447:
                      JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v103, (uint64_t)v276);
                      break;
                    case 449:
                      JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v103, (uint64_t)v276);
                      break;
                    case 450:
                      v277[0] = v276;
                      JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v103, (uint64_t)v277);
                      break;
                    case 451:
                      JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v103, (uint64_t)v276);
                      break;
                    default:
                      WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v103 + 30), "\n");
                      __break(0xC471u);
                      JUMPOUT(0x1980800A4);
                  }
                }
              }
              if ((_BYTE)v255 && HIBYTE(v255))
                *v104 = 94;
              if (v254)
              {
                v110 = *v104;
                if ((v110 - 107) >= 2)
                {
                  if (v110 == 90 || v110 == 94)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19807FFD4);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x198080028);
                }
                v111 = *(_DWORD *)(*v252 + 180);
                *(_DWORD *)(*v252 + 180) = v111 + 1;
                LODWORD(v277[0]) = -33 - v111;
                v112 = *(_QWORD *)v249;
                if ((*(_QWORD *)v249 & 0x8000000000000000) != 0)
                  v113 = 63;
                else
                  v113 = *(_QWORD *)(2 * v112);
                v99 = v246;
                v120 = (v111 + 33);
                if (v113 <= v120)
                {
                  WTF::BitVector::resizeOutOfLine(v249, v120 + 1, 0);
                  v112 = *(_QWORD *)v249;
                }
                if (v112 >= 0)
                  v121 = 2 * v112 + 8;
                else
                  v121 = (uint64_t)v249;
                *(_QWORD *)(v121 + ((v120 >> 3) & 0x1FFFFFF8)) |= 1 << v120;
                v122 = v103[3];
                if ((_DWORD)v122 == v103[2])
                {
                  WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v103, (unsigned int *)v277, v89, v90, v91, v92, v93, v94);
                  v125 = v103[3];
                }
                else
                {
                  v123 = *(_QWORD *)v103 + 32 * v122;
                  v124 = v277[0];
                  *(_QWORD *)v123 = 0;
                  *(_WORD *)(v123 + 8) = 513;
                  *(_DWORD *)(v123 + 12) = 1;
                  *(_QWORD *)(v123 + 16) = v124;
                  *(_BYTE *)(v123 + 24) = 0;
                  v125 = v103[3] + 1;
                  v103[3] = v125;
                }
                if (v125 != 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19807FF48);
                }
                v126 = *(_QWORD *)(v102 + (v101 << 7) + 112);
                v263 = v265;
                v266[0] = v126;
                LODWORD(v266[1]) = 0;
                v267 = (unsigned int *)v256;
                v268 = &v270;
                v264 = 3;
                v269 = 3;
                v275[0] = v126;
                *(_DWORD *)((char *)v275 + 7) = *(_DWORD *)((char *)v266 + 7);
                v127 = HIDWORD(v259);
                if (HIDWORD(v259) == (_DWORD)v259)
                {
                  v143 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v258 + 8, HIDWORD(v259) + 1, (unint64_t)&v267, v90, v91, v92, v93, v94);
                  v144 = HIDWORD(v259);
                  v145 = *((_QWORD *)&v258 + 1);
                  v146 = *((_QWORD *)&v258 + 1) + 136 * HIDWORD(v259);
                  *(_QWORD *)v146 = *(_QWORD *)v143;
                  v147 = (_OWORD *)(v146 + 24);
                  *(_QWORD *)(v146 + 8) = v146 + 24;
                  *(_QWORD *)(v146 + 16) = 3;
                  v148 = *(__int128 **)(v143 + 8);
                  if (v148 == (__int128 *)(v143 + 24))
                  {
                    v149 = *(unsigned int *)(v143 + 20);
                    if ((_DWORD)v149)
                    {
                      v150 = 32 * v149;
                      do
                      {
                        v151 = *v148;
                        v152 = v148[1];
                        v148 += 2;
                        *v147 = v151;
                        v147[1] = v152;
                        v147 += 2;
                        v150 -= 32;
                      }
                      while (v150);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v143 + 8) = v143 + 24;
                    *(_QWORD *)(v146 + 8) = v148;
                    v154 = *(_DWORD *)(v143 + 16);
                    *(_DWORD *)(v143 + 16) = 3;
                    *(_DWORD *)(v146 + 16) = v154;
                  }
                  v138 = (_QWORD *)(v143 + 120);
                  v153 = *(_DWORD *)(v143 + 20);
                  *(_DWORD *)(v143 + 20) = 0;
                  *(_DWORD *)(v146 + 20) = v153;
                  v137 = v145 + 136 * v144 + 120;
                }
                else
                {
                  v128 = *((_QWORD *)&v258 + 1);
                  v129 = *((_QWORD *)&v258 + 1) + 136 * HIDWORD(v259);
                  *(_QWORD *)v129 = v256;
                  v130 = (_OWORD *)(v129 + 24);
                  *(_QWORD *)(v129 + 8) = v129 + 24;
                  *(_QWORD *)(v129 + 16) = 3;
                  v131 = v268;
                  if (v268 == &v270)
                  {
                    if (HIDWORD(v269))
                    {
                      v132 = 32 * HIDWORD(v269);
                      v133 = &v270;
                      do
                      {
                        v134 = *(_OWORD *)v133;
                        v135 = *((_OWORD *)v133 + 1);
                        v133 += 4;
                        *v130 = v134;
                        v130[1] = v135;
                        v130 += 2;
                        v132 -= 32;
                      }
                      while (v132);
                    }
                  }
                  else
                  {
                    v268 = &v270;
                    *(_QWORD *)(v129 + 8) = v131;
                    v142 = v269;
                    LODWORD(v269) = 3;
                    *(_DWORD *)(v129 + 16) = v142;
                  }
                  v136 = HIDWORD(v269);
                  HIDWORD(v269) = 0;
                  *(_DWORD *)(v129 + 20) = v136;
                  v137 = v128 + 136 * v127 + 120;
                  v138 = v275;
                }
                v139 = *v138;
                *(_DWORD *)(v137 + 7) = *(_DWORD *)((char *)v138 + 7);
                *(_QWORD *)v137 = v139;
                ++HIDWORD(v259);
                v140 = (unint64_t)v268;
                if (&v270 != v268 && v268)
                {
                  v268 = 0;
                  LODWORD(v269) = 0;
                  WTF::fastFree(v140, v88, v89, v90, v91, v92, v93, v94);
                }
                v141 = (unint64_t)v263;
                if (v265 != v263 && v263)
                {
                  v263 = 0;
                  LODWORD(v264) = 0;
                  WTF::fastFree(v141, v88, v89, v90, v91, v92, v93, v94);
                }
              }
              else
              {
                v267 = (unsigned int *)&v262;
                v268 = (uint64_t **)v8;
                v269 = (uint64_t)&v257;
                v270 = v252;
                v271 = v249;
                v272 = &v258;
                v273 = &v256;
                v274 = v103;
                v277[0] = &v267;
                if ((*v104 - 446) > 5)
                {
                  v114 = v103[3];
                  if ((_DWORD)v114)
                  {
                    v115 = 0;
                    v116 = 0;
                    v117 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                         + 21 * *v104
                         + ((unint64_t)((v114 - 1) * v114) >> 1);
                    v118 = 32 * v114;
                    do
                    {
                      if (v116 >= v103[3])
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980800D4);
                      }
                      v119 = *v117;
                      if ((v119 >> 5) - 1 >= 5)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980800C4);
                      }
                      ++v116;
                      ++v117;
                      v115 += 32;
                    }
                    while (v118 != v115);
                  }
                }
                else
                {
                  v264 = (uint64_t)&v263;
                  v265[0] = v277;
                }
                v99 = v246;
              }
              v100 = v256 + 1;
              v256 = v100;
            }
            while (v100 < *(_DWORD *)(v99 + 20));
          }
          JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v258, (JSC::B3::Air::BasicBlock *)v99, v89, v90, v91, v92, v93, v94);
          if (v257)
          {
            v155 = *(_QWORD *)(v99 + 8);
            v156 = *(unsigned int *)(v99 + 20);
            v157 = v155 + (v156 << 7);
            if ((_DWORD)v156)
            {
              v158 = 0;
              v159 = 0;
              v160 = (unsigned int *)(v155 + (v156 << 7));
              v161 = (unint64_t)v160;
              do
              {
                v162 = (unsigned int *)(v155 + v158);
                if ((*(__int16 *)(v155 + v158 + 120) - 107) <= 6
                  && ((1 << (*(_WORD *)(v155 + v158 + 120) - 107)) & 0x43) != 0
                  && v162[3] == 2)
                {
                  v164 = *(_QWORD *)v162;
                  if (*(_BYTE *)(*(_QWORD *)v162 + 8) == 1)
                  {
                    v165 = *(_WORD *)(v155 + v158 + 120) != 94 && *(_BYTE *)(v164 + 40) == 1;
                    if (v165 && *(_DWORD *)(v164 + 16) == *(_DWORD *)(v164 + 48))
                    {
                      if (v161 == *(_QWORD *)(v99 + 8) + ((unint64_t)*(unsigned int *)(v99 + 20) << 7))
                      {
                        v161 = v155 + v158;
                      }
                      else if (v162 != v160)
                      {
                        v166 = v161;
                        WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v160, v162, v161, v90, v91, v92, v93, v94);
                        v161 = v166 + v155 + v158 - (_QWORD)v160;
                        v164 = *(_QWORD *)(v155 + v158);
                      }
                      if (v155 + v158 + 16 != v164 && v164)
                      {
                        v167 = v155 + v158;
                        *(_QWORD *)v167 = 0;
                        *(_DWORD *)(v167 + 8) = 0;
                        v168 = v161;
                        WTF::fastFree(v164, v162, v89, v90, v91, v92, v93, v94);
                        v161 = v168;
                      }
                      v160 = (unsigned int *)(v155 + v158 + 128);
                      ++v159;
                    }
                  }
                }
                v158 += 128;
              }
              while (v155 + v158 < v157);
              v155 = *(_QWORD *)(v99 + 8);
              LODWORD(v156) = *(_DWORD *)(v99 + 20);
              v157 = v161;
            }
            else
            {
              v159 = 0;
              v160 = (unsigned int *)(v155 + (v156 << 7));
            }
            v88 = (unsigned int *)(v155 + ((unint64_t)v156 << 7));
            if (v160 != v88)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v160, v88, v157, v90, v91, v92, v93, v94);
              LODWORD(v156) = *(_DWORD *)(v99 + 20);
            }
            *(_DWORD *)(v99 + 20) = v156 - v159;
          }
          v98 = v242;
          v96 = *(unsigned int *)(v242 + 108);
          v97 = (v241 + 1);
          if (v96 > v97)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v242 + 96) + 8 * v97))
            {
              if (v96 == ++v97)
              {
                LODWORD(v97) = *(_DWORD *)(v242 + 108);
                break;
              }
            }
            v98 = v242;
          }
        }
        while ((_DWORD)v240 != (_DWORD)v97);
        v169 = (_BYTE *)*((_QWORD *)&v258 + 1);
        if (HIDWORD(v259))
        {
          v235 = 136 * HIDWORD(v259);
          v236 = *((_QWORD *)&v258 + 1) + 24;
          do
          {
            v237 = *(_QWORD *)(v236 - 16);
            if (v236 != v237 && v237 != 0)
            {
              *(_QWORD *)(v236 - 16) = 0;
              *(_DWORD *)(v236 - 8) = 0;
              WTF::fastFree(v237, v88, v89, v90, v91, v92, v93, v94);
            }
            v236 += 136;
            v235 -= 136;
          }
          while (v235);
          v169 = (_BYTE *)*((_QWORD *)&v258 + 1);
        }
        if (v260 != v169 && v169)
        {
          *((_QWORD *)&v258 + 1) = 0;
          LODWORD(v259) = 0;
          WTF::fastFree((unint64_t)v169, v88, v89, v90, v91, v92, v93, v94);
        }
      }
    }
LABEL_201:
    if (v262)
      WTF::fastFree(v262 - 16, v88, v89, v90, v91, v92, v93, v94);
    return v239 == 0;
  }
  v170 = *v252;
  v253 = *(unsigned int *)(*v252 + 108);
  if ((_DWORD)v253)
  {
    v171 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v170 + 96) + 8 * v171))
    {
      if (v253 == ++v171)
        return v239 == 0;
    }
    if ((_DWORD)v253 != (_DWORD)v171)
    {
      v172 = &v259;
      v173 = 67;
      LODWORD(v174) = v253;
      v175 = v171;
      do
      {
        if (v174 <= v175)
        {
          __break(0xC471u);
          JUMPOUT(0x19808010CLL);
        }
        v176 = *(_QWORD *)(*(_QWORD *)(v170 + 96) + 8 * v175);
        LODWORD(v177) = *(_DWORD *)(v176 + 20);
        if (!(_DWORD)v177)
        {
          v230 = 0;
          v221 = *(unsigned int **)(v176 + 8);
          v222 = (unint64_t)v221;
          v224 = v221;
          goto LABEL_315;
        }
        for (i = 0; i < v177; ++i)
        {
          v179 = *(_QWORD *)(v176 + 8);
          v180 = v179 + (i << 7);
          if ((*(__int16 *)(v180 + 120) - 107) > 6 || ((1 << (*(_WORD *)(v180 + 120) - 107)) & 0x43) == 0)
          {
            v183 = *(_QWORD *)v180;
            v182 = *(unsigned int *)(v180 + 12);
LABEL_228:
            if (!v182)
              goto LABEL_280;
            LODWORD(v184) = 0;
            v186 = v183 + 32 * v182;
            goto LABEL_230;
          }
          v182 = *(unsigned int *)(v180 + 12);
          v183 = *(_QWORD *)v180;
          if ((_DWORD)v182 != 2)
            goto LABEL_228;
          if (*(_BYTE *)(v183 + 8) != 1 || *(_BYTE *)(v183 + 40) != 1)
            goto LABEL_225;
          if (*(_WORD *)(v180 + 120) != 94)
            goto LABEL_282;
          v184 = *(_QWORD *)(v8 + 336);
          if (v184)
          {
            v185 = *(unsigned int *)(v183 + 16);
            if ((int)v185 < 1)
            {
              v185 = -(int)v185;
              if (v185 >= *(unsigned int *)(v184 + 28))
              {
                __break(0xC471u);
                JUMPOUT(0x198080104);
              }
              v184 += 16;
            }
            else if (v185 >= *(_DWORD *)(v184 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1980800FCLL);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v184 + 2 * v185 + 1) <= 2u)
            {
LABEL_282:
              LODWORD(v184) = 1;
              goto LABEL_226;
            }
LABEL_225:
            LODWORD(v184) = 0;
          }
LABEL_226:
          v186 = v183 + 64;
LABEL_230:
          v187 = *(_QWORD *)(v8 + 152);
          v188 = *(_QWORD *)(v8 + 120);
          v189 = v183;
          do
          {
            v190 = *(char *)(v189 + 8);
            if (v190 > 0xD)
              goto LABEL_248;
            if (((1 << v190) & 0x31C2) != 0)
            {
              v191 = (int *)(v189 + 16);
              goto LABEL_234;
            }
            if (v190 == 11)
            {
              v199 = *(_DWORD *)(v189 + 16);
              if (v199 <= -33)
              {
                v200 = -v199;
                do
                {
                  v201 = v200;
                  v200 = *(_DWORD *)(v187 + 4 * v200);
                }
                while (v200);
                v202 = v201;
                v203 = -v201;
                if (v203 > 0xFFFFFFDF || v202 >= 0xFFFFFFE0)
                {
                  if (v203 <= 0)
                    v204 = 31 - v203;
                  else
                    v204 = v203 + 127;
                  v205 = v204 & 0x7F;
                  if (v205 != 127)
                    goto LABEL_263;
                  v206 = 0;
                }
                else
                {
                  LODWORD(v258) = v203;
                  v204 = *(_BYTE *)(v188 + v202);
                  v205 = v204 & 0x7F;
                  if (v205 == 127)
                  {
                    WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v258);
                    WTF::dataLog<char [7]>();
                    WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                    __break(0xC471u);
                    JUMPOUT(0x198080008);
                  }
LABEL_263:
                  if ((v204 & 0x60) != 0)
                    v206 = (char)(31 - v205);
                  else
                    v206 = v205 + 1;
                }
                *(_DWORD *)(v189 + 16) = v206;
              }
              v191 = (int *)(v189 + 20);
LABEL_234:
              if (*v191 > -33)
                goto LABEL_248;
              v192 = -*v191;
              do
              {
                v193 = v192;
                v192 = *(_DWORD *)(v187 + 4 * v192);
              }
              while (v192);
              v194 = v193;
              v195 = -v193;
              if (v195 > 0xFFFFFFDF || v194 >= 0xFFFFFFE0)
              {
                if (v195 <= 0)
                  v196 = 31 - v195;
                else
                  v196 = v195 + 127;
                v197 = v196 & 0x7F;
                if (v197 != 127)
                  goto LABEL_245;
                v198 = 0;
              }
              else
              {
                LODWORD(v258) = v195;
                v196 = *(_BYTE *)(v188 + v194);
                v197 = v196 & 0x7F;
                if (v197 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v258);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v8 + 256));
                  __break(0xC471u);
                  JUMPOUT(0x19807FFA4);
                }
LABEL_245:
                if ((v196 & 0x60) != 0)
                  v198 = (char)(31 - v197);
                else
                  v198 = v197 + 1;
              }
              *v191 = v198;
            }
LABEL_248:
            v189 += 32;
          }
          while (v189 != v186);
          if ((_DWORD)v184)
          {
            v207 = *(_DWORD *)(v180 + 12);
            if (!v207)
            {
              __break(0xC471u);
              JUMPOUT(0x1980800E4);
            }
            if (*(_BYTE *)(v183 + 8) == 1)
            {
              if (v207 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980800ECLL);
              }
              if (*(_BYTE *)(v183 + 40) == 1 && *(_DWORD *)(v183 + 16) == *(_DWORD *)(v183 + 48))
              {
                *(_QWORD *)&v258 = &v259;
                *((_QWORD *)&v258 + 1) = 3;
                *(_QWORD *)v261 = 0;
                *(_WORD *)&v261[8] = 0;
                v261[10] &= 0xFCu;
                v209 = (_OWORD *)(v180 + 16);
                v208 = *(_QWORD *)v180;
                if (*(_QWORD *)v180 != v180 + 16)
                {
                  if (v208)
                  {
                    *(_QWORD *)v180 = 0;
                    *(_DWORD *)(v180 + 8) = 0;
                    v244 = v175;
                    v247 = v170;
                    WTF::fastFree(v208, v68, v170, (uint64_t)&v259, 67, v175, v69, v70);
                    v175 = v244;
                    v170 = v247;
                    v173 = 67;
                    v172 = &v259;
                  }
                  *(_QWORD *)v180 = v209;
                  v216 = v258;
                  if ((uint64_t *)v258 == &v259)
                  {
                    if (HIDWORD(v258))
                    {
                      v217 = 32 * HIDWORD(v258);
                      v218 = &v259;
                      do
                      {
                        v219 = *(_OWORD *)v218;
                        v220 = *((_OWORD *)v218 + 1);
                        v218 += 4;
                        *v209 = v219;
                        v209[1] = v220;
                        v209 += 2;
                        v217 -= 32;
                      }
                      while (v217);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v258 = &v259;
                    *(_QWORD *)v180 = v216;
                  }
                }
                *(_DWORD *)(v180 + 8) = DWORD2(v258);
                v210 = HIDWORD(v258);
                HIDWORD(v258) = 0;
                *(_DWORD *)(v180 + 12) = v210;
                v211 = v179 + (i << 7);
                v212 = *(_QWORD *)v261;
                *(_DWORD *)(v211 + 119) = *(_DWORD *)&v261[7];
                *(_QWORD *)(v211 + 112) = v212;
                v213 = v258;
                if (&v259 != (uint64_t *)v258 && (_QWORD)v258)
                {
                  *(_QWORD *)&v258 = 0;
                  DWORD2(v258) = 0;
                  v214 = v170;
                  v215 = v175;
                  WTF::fastFree(v213, v68, v170, (uint64_t)&v259, 67, v175, v69, v70);
                  v175 = v215;
                  v173 = 67;
                  v172 = &v259;
                  v170 = v214;
                }
              }
            }
          }
LABEL_280:
          v177 = *(unsigned int *)(v176 + 20);
        }
        v221 = *(unsigned int **)(v176 + 8);
        v222 = (unint64_t)&v221[32 * v177];
        if ((_DWORD)v177)
        {
          v223 = 0;
          v251 = 0;
          v224 = &v221[32 * v177];
          v225 = (unint64_t)v224;
          do
          {
            v226 = &v221[v223];
            if (*(_QWORD *)&v221[v223 + 28])
              v227 = 0;
            else
              v227 = LOWORD(v221[v223 + 30]) == 0;
            if (v227 && (*((_BYTE *)v226 + 122) & 3) == 0)
            {
              v243 = v225;
              v245 = v175;
              v248 = v170;
              if (!v221[v223 + 3])
              {
                if (v225 == *(_QWORD *)(v176 + 8) + ((unint64_t)*(unsigned int *)(v176 + 20) << 7))
                {
                  v243 = (unint64_t)&v221[v223];
                }
                else if (v226 != v224)
                {
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v224, v226, v225, (uint64_t)&v259, 67, v175, v69, v70);
                  v243 += (char *)&v221[v223] - (char *)v224;
                }
                v228 = *(_QWORD *)&v221[v223];
                if (&v221[v223 + 4] != (unsigned int *)v228 && v228)
                {
                  v229 = &v221[v223];
                  *(_QWORD *)v229 = 0;
                  v229[2] = 0;
                  WTF::fastFree(v228, v226, v170, (uint64_t)v172, v173, v175, v69, v70);
                }
                v224 = &v221[v223 + 32];
                ++v251;
              }
              v170 = v248;
              v172 = &v259;
              v173 = 67;
              v225 = v243;
              v175 = v245;
            }
            v223 += 32;
          }
          while ((unint64_t)&v221[v223] < v222);
          v221 = *(unsigned int **)(v176 + 8);
          LODWORD(v177) = *(_DWORD *)(v176 + 20);
          v222 = v225;
          v230 = v251;
        }
        else
        {
          v230 = 0;
          v224 = &v221[32 * v177];
        }
LABEL_315:
        v68 = &v221[32 * (unint64_t)v177];
        if (v224 != v68)
        {
          v231 = v170;
          v232 = v222;
          v233 = v175;
          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v224, v68, v232, (uint64_t)&v259, 67, v175, v69, v70);
          LODWORD(v175) = v233;
          v173 = 67;
          v172 = &v259;
          v170 = v231;
          LODWORD(v177) = *(_DWORD *)(v176 + 20);
        }
        *(_DWORD *)(v176 + 20) = v177 - v230;
        v175 = (v175 + 1);
        v174 = *(unsigned int *)(v170 + 108);
        if (v174 > v175)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v170 + 96) + 8 * v175))
          {
            if (v174 == ++v175)
            {
              v175 = *(unsigned int *)(v170 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v253 != (_DWORD)v175);
    }
  }
  return v239 == 0;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),WTF::BitVector JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::computeUnspillableTmps<(JSC::B3::Bank)1>(void)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  int v8;
  int *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  __int32 *v13;
  uint64_t v14;
  int32x2_t *v15;
  __int32 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(unsigned __int8 *)(a2 + 8);
  if (v6 == 1)
  {
    result = *(_QWORD *)v5;
    if (!*(_DWORD *)(*(_QWORD *)v5 + 12))
    {
      __break(0xC471u);
      return result;
    }
    result = JSC::B3::Air::Inst::admitsStack((JSC::B3::Air::Inst *)result, (unint64_t)(a2 - *(_QWORD *)result) >> 5);
    if ((result & 1) != 0)
    {
      if (a4 == 1)
      {
        v12 = -*(_DWORD *)(a2 + 16);
        v13 = *(__int32 **)(v5 + 16);
        v14 = **(_QWORD **)(v5 + 8);
        v15 = (int32x2_t *)(v14 + 16 * v12);
        v15[1] = vadd_s32(v15[1], (int32x2_t)0x100000001);
        v16 = *v13;
        if (*v13 < v15->i32[0])
        {
          v15->i32[0] = v16;
          *(_DWORD *)(v14 + 16 * v12 + 4) = *v13;
        }
        else
        {
          *(_DWORD *)(v14 + 16 * v12 + 4) = v16;
        }
      }
      return result;
    }
    LOBYTE(v6) = *(_BYTE *)(a2 + 8);
  }
  v8 = (char)v6;
  if ((char)v6 > 0xD)
    return result;
  v10 = *(uint64_t **)(v5 + 8);
  v9 = *(int **)(v5 + 16);
  if (((1 << v8) & 0x31C2) != 0)
  {
    v11 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (v8 != 11)
      return result;
    v17 = *(_DWORD *)(a2 + 16);
    if (v17 <= 0)
    {
      v22 = -v17;
      v23 = *v10;
      v24 = (_DWORD *)(*v10 + 16 * v22);
      ++v24[2];
      v25 = *v9;
      if (*v9 < *v24)
      {
        *v24 = v25;
        v25 = *v9;
      }
      *(_DWORD *)(v23 + 16 * v22 + 4) = v25;
    }
    v11 = *(_DWORD *)(a2 + 20);
  }
  if (v11 <= 0)
  {
    v18 = -v11;
    v19 = *v10;
    v20 = (_DWORD *)(v19 + 16 * v18);
    ++v20[2];
    v21 = *v9;
    if (*v9 < *v20)
    {
      *v20 = v21;
      v21 = *v9;
    }
    *(_DWORD *)(v19 + 16 * v18 + 4) = v21;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;

  v13 = *(_QWORD *)(a2 + 56);
  if (v13)
  {
    v14 = 0;
    do
    {
      v14 |= v13 & -v13;
      v13 &= v13 - 1;
    }
    while (v13);
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      do
      {
        v29 = v15 | 0x80;
        if ((v15 & 0x60) == 0x20)
        {
          v28 = (char)(31 - v15);
          v26 = *(unsigned int *)(a1 + 268);
          if ((_DWORD)v26 == *(_DWORD *)(a1 + 264))
          {
            WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(a1 + 256, (unint64_t)&v28, v7, v8, v9, v10, v11, v12);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v26) = (char)(31 - v15);
            ++*(_DWORD *)(a1 + 268);
          }
          v27 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v27 == *(_DWORD *)(a1 + 8))
          {
            WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Reg&>(a1, (unint64_t)&v29);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a1 + v27) = v29;
            ++*(_DWORD *)(a1 + 12);
          }
        }
        if (v15 > 0x3E)
          break;
        v16 = __clz(__rbit64(v14 >> (v15 + 1)));
        v17 = v16 + v15 + 1;
        if (v17 >= 0x40)
          v15 = 64;
        else
          v15 += v16 + 1;
      }
      while (v17 <= 0x3F);
    }
  }
  WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>::setMaxIndex((WTF::BitVector *)(a1 + 24), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 180) + 33);
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::initializePrecoloredTmp(uint64_t a1)
{
  unint64_t v2;

  WTF::Vector<JSC::Reg,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(a1 + 112, (WTF *)(*(unsigned __int16 *)(a1 + 16) + 1));
  if (*(_WORD *)(a1 + 16))
  {
    v2 = 1;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 112) + v2) = (v2 + 31) & 0x7F;
    while (v2++ < *(unsigned __int16 *)(a1 + 16));
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int **v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD **v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int **v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v66[2];
  _BYTE v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;

  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)v67, *(_QWORD *)(a1 + 248));
  v23 = *(_QWORD *)(a1 + 248);
  v24 = *(unsigned int *)(v23 + 108);
  if ((_DWORD)v24)
  {
    v25 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v23 + 96) + 8 * v25))
    {
      if (v24 == ++v25)
        return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v67, v16, v17, v18, v19, v20, v21, v22);
    }
    if ((_DWORD)v24 != (_DWORD)v25)
    {
      LODWORD(v26) = *(_DWORD *)(v23 + 108);
      do
      {
        if (v26 <= v25)
        {
LABEL_52:
          __break(0xC471u);
          JUMPOUT(0x1980807A4);
        }
        v27 = *(unsigned int **)(*(_QWORD *)(v23 + 96) + 8 * v25);
        v66[0] = (uint64_t)v67;
        v66[1] = (uint64_t)v27;
        v72 = 0;
        v28 = (unsigned int **)(v73 + 32 * *v27);
        v29 = *((unsigned int *)v28 + 3);
        if ((_DWORD)v29)
        {
          v57 = *v28;
          v58 = v69;
          v59 = 4 * v29;
          do
          {
            v60 = *v57;
            v61 = *(unsigned int *)(v58 + 4 * v60);
            v62 = v72;
            if (v72 <= v61 || *(_DWORD *)(v70 + 4 * v61) != (_DWORD)v60)
            {
              v74 = *v57;
              if (v72 == v71)
              {
                v64 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v70, v72 + 1, (unint64_t)&v74);
                *(_DWORD *)(v70 + 4 * v72) = *v64;
                v58 = v69;
              }
              else
              {
                *(_DWORD *)(v70 + 4 * v72) = v60;
              }
              ++v72;
              *(_DWORD *)(v58 + 4 * v60) = v62;
            }
            ++v57;
            v59 -= 4;
          }
          while (v59);
        }
        v30 = v27[5];
        if (!(_DWORD)v30)
          goto LABEL_51;
        do
        {
          v31 = v30 - 1;
          v32 = v27[5];
          if (v32 <= (int)v30 - 1)
            goto LABEL_52;
          v33 = *((_QWORD *)v27 + 1);
          v34 = (_QWORD **)(v33 + ((unint64_t)(v30 - 1) << 7));
          v35 = (_QWORD **)(v33 + (v30 << 7));
          if (v30 >= v32)
            v36 = 0;
          else
            v36 = v35;
          v37 = v68;
          v38 = *(_QWORD *)(v68 + 16 * *v27);
          v39 = v38 + (v30 << 6);
          v40 = *(unsigned int *)(v39 + 44);
          if ((_DWORD)v40)
          {
            v49 = *(unsigned int **)(v39 + 32);
            v50 = v72;
            v51 = 4 * v40;
            v52 = v69;
            v53 = v70;
            do
            {
              v54 = *v49;
              v55 = *(unsigned int *)(v52 + 4 * v54);
              if (v50 > v55 && *(_DWORD *)(v53 + 4 * v55) == (_DWORD)v54)
              {
                v56 = *(unsigned int *)(v53 + 4 * v50 - 4);
                *(_DWORD *)(v53 + 4 * v55) = v56;
                *(_DWORD *)(v52 + 4 * v56) = v55;
                v50 = --v72;
              }
              ++v49;
              v51 -= 4;
            }
            while (v51);
            v38 = *(_QWORD *)(v37 + 16 * *v27);
          }
          v41 = (unsigned int **)(v38 + ((unint64_t)(v30 - 1) << 6));
          v42 = *((unsigned int *)v41 + 3);
          if ((_DWORD)v42)
          {
            v43 = *v41;
            v44 = v69;
            v45 = 4 * v42;
            do
            {
              v46 = *v43;
              v47 = *(unsigned int *)(v44 + 4 * v46);
              v48 = v72;
              if (v72 <= v47 || *(_DWORD *)(v70 + 4 * v47) != (_DWORD)v46)
              {
                v74 = *v43;
                if (v72 == v71)
                {
                  v63 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v70, v72 + 1, (unint64_t)&v74);
                  *(_DWORD *)(v70 + 4 * v72) = *v63;
                  v44 = v69;
                }
                else
                {
                  *(_DWORD *)(v70 + 4 * v72) = v46;
                }
                ++v72;
                *(_DWORD *)(v44 + 4 * v46) = v48;
              }
              ++v43;
              v45 -= 4;
            }
            while (v45);
          }
          v30 = v31;
        }
        while ((_DWORD)v31);
        if (!v27[5])
        {
LABEL_51:
          __break(0xC471u);
          JUMPOUT(0x1980807ACLL);
        }
        v25 = (v25 + 1);
        v26 = *(unsigned int *)(v23 + 108);
        if (v26 > v25)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v23 + 96) + 8 * v25))
          {
            if (v26 == ++v25)
            {
              LODWORD(v25) = *(_DWORD *)(v23 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v24 != (_DWORD)v25);
    }
  }
  return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v67, v16, v17, v18, v19, v20, v21, v22);
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD **v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  char v41;
  _BOOL4 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[3];
  _QWORD **v60;
  _QWORD **v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t **v64;
  _DWORD *v65;
  uint64_t ***v66;
  uint64_t ***v67;

  v60 = a3;
  v61 = a2;
  v59[0] = &v61;
  v59[1] = &v60;
  v59[2] = a1;
  v62 = v59;
  if (a2)
  {
    v63 = (uint64_t *)&v62;
    v64 = &v63;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v65 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v66 = (uint64_t ***)&v65;
      v67 = &v64;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v65);
    }
    else
    {
      v8 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
        v11 = 1;
        do
        {
          if (v9 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198080D8CLL);
          }
          v12 = v10[v9];
          if ((v12 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198080D7CLL);
          }
          if ((v12 & 0xC) == 4 && LOBYTE((*a2)[v11]) == 1)
          {
            v14 = *v63;
            LODWORD(v65) = (*a2)[v11 + 1];
          }
          ++v9;
          v11 += 4;
        }
        while (v8 != v9);
      }
    }
  }
  if (a3)
  {
    v63 = (uint64_t *)&v62;
    v64 = &v63;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v65 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v66 = (uint64_t ***)&v65;
      v67 = &v64;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v65);
    }
    else
    {
      v15 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v15 - 1) * v15) >> 1);
        v18 = 1;
        while (1)
        {
          if (v16 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198080D84);
          }
          v19 = v17[v16];
          if ((v19 >> 5) - 1 >= 5)
            break;
          v20 = &(*a3)[v18];
          if (*(_BYTE *)v20 == 1 && (v19 & 0xF) - 8 <= 2)
          {
            v21 = *v63;
            LODWORD(v65) = *((_DWORD *)v20 + 2);
          }
          ++v16;
          v18 += 4;
          if (v15 == v16)
            goto LABEL_27;
        }
LABEL_93:
        __break(0xC471u);
        JUMPOUT(0x198080D5CLL);
      }
    }
  }
LABEL_27:
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198080D9CLL);
    }
    v36 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v38 = v37 | v36;
    if (v37 | v36)
    {
      v39 = v36;
      do
      {
        v40 = __clz(__rbit64(v38));
        v41 = ((v39 >> v40) & 1) == 0;
        v42 = v40 > 0x1F;
        if (v40 <= 0x1F)
          v43 = v40 + 1;
        else
          v43 = (char)(31 - v40);
        LODWORD(v65) = v43;
        v38 &= v38 - 1;
      }
      while (v38);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198080D94);
    }
    v28 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v30 = v29 | v28;
    if (v29 | v28)
    {
      v31 = v28;
      do
      {
        v32 = __clz(__rbit64(v30));
        v33 = ((v31 >> v32) & 1) == 0;
        v34 = v32 > 0x1F;
        if (v32 <= 0x1F)
          v35 = v32 + 1;
        else
          v35 = (char)(31 - v32);
        LODWORD(v65) = v35;
        v30 &= v30 - 1;
      }
      while (v30);
    }
  }
  if (!v61)
    goto LABEL_37;
  if ((*((__int16 *)v61 + 60) - 107) > 6 || ((1 << (*((_WORD *)v61 + 60) - 107)) & 0x43) == 0)
    goto LABEL_37;
  if (*((_DWORD *)v61 + 3) != 2)
    goto LABEL_37;
  v44 = (uint64_t)*v61;
  if (*((_BYTE *)*v61 + 8) != 1 || *(_BYTE *)(v44 + 40) != 1)
    goto LABEL_37;
  if (*((_WORD *)v61 + 60) != 94)
    goto LABEL_59;
  v57 = *(_QWORD *)(a1 + 368);
  if (!v57)
    goto LABEL_37;
  v58 = *(unsigned int *)(v44 + 16);
  if ((int)v58 < 1)
  {
    v58 = -(int)v58;
    if (v58 >= *(unsigned int *)(v57 + 28))
      goto LABEL_93;
    v57 += 16;
  }
  else if (v58 >= *(_DWORD *)(v57 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198080DACLL);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)v57 + 2 * v58 + 1) <= 2u)
  {
LABEL_59:
    LODWORD(v59[0]) = 0;
    LODWORD(v64) = 0;
    v65 = v59;
    v66 = &v64;
    LOWORD(v65) = -(__int16)v64;
    WORD1(v65) = -LOWORD(v59[0]);
    v45 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v45 == *(_DWORD *)(a1 + 88))
    {
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v45) = (_DWORD)v65;
      ++*(_DWORD *)(a1 + 92);
    }
    v46 = *((unsigned int *)v61 + 3);
    if ((_DWORD)v46)
    {
      v47 = 32 * v46;
      v48 = (int *)(*v61 + 2);
      do
      {
        v49 = *v48;
        v48 += 8;
        v50 = -v49;
        if (*(_DWORD *)(a1 + 108) <= -v49)
        {
          __break(0xC471u);
          JUMPOUT(0x198080DA4);
        }
        WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v65, (unsigned int *)(*(_QWORD *)(a1 + 96) + 40 * v50), v45);
        v47 -= 32;
      }
      while (v47);
    }
    v51 = *(unsigned int *)(*a4 + 60);
    if ((_DWORD)v51)
    {
      v52 = *(_DWORD **)(*a4 + 48);
      v53 = 4 * v51;
      do
      {
        if ((_DWORD)v64 + *v52)
        ++v52;
        v53 -= 4;
      }
      while (v53);
    }
    v54 = *(unsigned int *)(a1 + 268);
    if ((_DWORD)v54)
    {
      v55 = *(_WORD **)(a1 + 256);
      v56 = 4 * v54;
      do
      {
        if ((_DWORD)v64 != *(_DWORD *)v55)
        v55 += 2;
        v56 -= 4;
      }
      while (v56);
    }
    v23 = v60;
    v24 = *a4;
    v25 = (_QWORD *)a1;
    v26 = 0;
  }
  else
  {
LABEL_37:
    v23 = v60;
    v24 = *a4;
    v25 = (_QWORD *)a1;
    v26 = v61;
  }
}

uint64_t JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::Liveness(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  int *v55;
  uint64_t v56;
  int v57;
  int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  int *v72;
  uint64_t v73;
  int v74;
  int *v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  int *v89;
  uint64_t v90;
  int v91;
  int v92;
  int *v93;
  unint64_t i;
  int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  int **v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  int *v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int *v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int **v166;
  unsigned int **v167;
  unsigned int *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  unint64_t v176;
  int *v177;
  uint64_t v178;
  int *v179;
  WTF *v180;
  WTF *v181;
  WTF *v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  int *v194;
  uint64_t v195;
  WTF *v196;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  WTF *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int16 v225;
  WTF *__src;
  unsigned int __srca;
  void *__srcb;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  _QWORD *v233;
  uint64_t *v234;
  _QWORD v235[4];
  double v236;
  WTF *v237;
  uint64_t v238;
  _QWORD v239[2];
  uint64_t v240;
  _QWORD *v241;
  uint64_t *v242;
  uint64_t v243;
  _QWORD v244[2];

  v3 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)a1 = a2;
  v4 = *(unsigned int *)(a2 + 108);
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198081E9CLL);
    }
    v6 = (void *)WTF::fastMalloc((WTF *)(16 * v4));
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v7)
      bzero(v6, 16 * v7);
  }
  v8 = *(_DWORD *)(*(_QWORD *)a1 + 180);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = v3;
  v229 = (uint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  v9 = v8 + 33;
  if (v8 != -33)
  {
    if (v9 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198081EA4);
    }
    v10 = WTF::fastMalloc((WTF *)(4 * (v8 + 33)));
    *(_DWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_DWORD *)(a1 + 44) = v9;
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 64, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v233 = (_QWORD *)(a1 + 80);
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 80, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v235[0] = "Air";
  v235[1] = 4;
  v235[2] = "Liveness";
  v235[3] = 9;
  v236 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v203 = mach_absolute_time();
    v205 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v205 != -1)
    {
      v237 = (WTF *)v244;
      v240 = (uint64_t)&v237;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v240, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v204) = dword_1ECF4400C;
    v236 = (double)(v203 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v204 * 1000000000.0);
  }
  v234 = v5;
  v18 = *(_QWORD *)a1;
  v231 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v231)
  {
    v19 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v18 + 96) + 8 * v19))
    {
      if (v231 == ++v19)
        goto LABEL_98;
    }
    if ((_DWORD)v231 != (_DWORD)v19)
    {
      LODWORD(v20) = *(_DWORD *)(*(_QWORD *)a1 + 108);
      v230 = *(_QWORD *)a1;
      do
      {
        if (v20 <= v19)
        {
          __break(0xC471u);
          JUMPOUT(0x198081E70);
        }
        v21 = *(unsigned int **)(*(_QWORD *)(v18 + 96) + 8 * v19);
        v22 = *v234 + 16 * *v21;
        v23 = v21[5] + 1;
        v24 = *(unsigned int *)(v22 + 12);
        if (v24 >= v23)
        {
          WTF::VectorTypeOperations<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions>::destruct((_QWORD *)(*(_QWORD *)v22 + (v23 << 6)), (_QWORD *)(*(_QWORD *)v22 + (v24 << 6)), v12, v13, v14, v15, v16, v17);
        }
        else
        {
          v25 = *(unsigned int *)(v22 + 8);
          v26 = *(_QWORD *)v22;
          if (v25 < v23)
          {
            v27 = v25 + (v25 >> 2);
            if (v27 >= 0x10)
              v28 = v27 + 1;
            else
              v28 = 16;
            if (v28 <= v23)
              v29 = v21[5] + 1;
            else
              v29 = v28;
            if (v29 >> 26)
            {
              __break(0xC471u);
              JUMPOUT(0x198081E78);
            }
            v30 = WTF::fastMalloc((WTF *)(v29 << 6));
            *(_DWORD *)(v22 + 8) = v29;
            *(_QWORD *)v22 = v30;
            if ((_DWORD)v24)
            {
              v216 = v24 << 6;
              v217 = v26;
              do
              {
                __srcb = (void *)v217;
                JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::Actions(v30, v217);
                JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::~Actions((uint64_t)__srcb, v218, v219, v220, v221, v222, v223, v224);
                v30 += 64;
                v217 = (uint64_t)__srcb + 64;
                v216 -= 64;
              }
              while (v216);
              v30 = *(_QWORD *)v22;
            }
            if (v26)
            {
              if (v30 == v26)
              {
                *(_QWORD *)v22 = 0;
                *(_DWORD *)(v22 + 8) = 0;
              }
              WTF::fastFree(v26, v11, v12, v13, v14, v15, v16, v17);
              v26 = *(_QWORD *)v22;
            }
            else
            {
              v26 = v30;
            }
          }
          if (v26)
          {
            v31 = *(unsigned int *)(v22 + 12);
            if ((_DWORD)v31 != (_DWORD)v23)
            {
              v32 = v31 << 6;
              v33 = v23 << 6;
              do
              {
                v34 = (_QWORD *)(v26 + v32);
                *v34 = v26 + v32 + 16;
                v34[1] = 4;
                v34[4] = v26 + v32 + 48;
                v34[5] = 4;
                v33 -= 64;
                v26 += 64;
              }
              while (v32 != v33);
            }
          }
        }
        *(_DWORD *)(v22 + 12) = v23;
        v35 = v21[5];
        v36 = v35 - 1;
        v243 = v35 - 1;
        if ((_DWORD)v35)
        {
          do
          {
            if (v21[5] <= v36)
            {
              __break(0xC471u);
              JUMPOUT(0x198081E44);
            }
            v37 = *((_QWORD *)v21 + 1) + ((unint64_t)v36 << 7);
            v240 = a1;
            v241 = (_QWORD *)v22;
            v242 = &v243;
            v244[0] = &v240;
            if ((*(__int16 *)(v37 + 120) - 446) <= 5)
            {
              v237 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
              v238 = (uint64_t)&v237;
              v239[0] = v244;
              JSC::B3::Air::Inst::forEachArgCustom(v37, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)&v237);
            }
            else
            {
              v38 = *(unsigned int *)(v37 + 12);
              if ((_DWORD)v38)
              {
                v39 = 0;
                v40 = (char *)&JSC::B3::Air::g_formTable
                    + 21 * *(__int16 *)(v37 + 120)
                    + ((unint64_t)((v38 - 1) * v38) >> 1);
                do
                {
                  if (v39 >= *(unsigned int *)(v37 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198081E3CLL);
                  }
                  v41 = v40[v39];
                  if ((v41 >> 5) - 1 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198081E34);
                  }
                  if ((v41 & 0x10) != 0 && *(_BYTE *)(*(_QWORD *)v37 + 32 * v39 + 8) == 1)
                  {
                    v43 = v41 & 0xF;
                    v44 = -*(_DWORD *)(*(_QWORD *)v37 + 32 * v39 + 16);
                    LODWORD(v237) = v44;
                    v45 = 1 << (v41 & 0xF);
                    v46 = v43 > 0xB || ((1 << (v41 & 0xF)) & 0xF3C) == 0;
                    if (v46)
                    {
                      v47 = *v241 + (*v242 << 6);
                      v48 = *(unsigned int *)(v47 + 12);
                      if ((_DWORD)v48)
                      {
                        v55 = *(int **)v47;
                        v56 = *(unsigned int *)(v47 + 12);
                        while (1)
                        {
                          v57 = *v55++;
                          if (v57 == v44)
                            break;
                          if (!--v56)
                            goto LABEL_60;
                        }
                      }
                      else
                      {
LABEL_60:
                        if ((_DWORD)v48 == *(_DWORD *)(v47 + 8))
                        {
                          v66 = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*v241 + (*v242 << 6), v48 + 1, (unint64_t)&v237);
                          v45 = 1 << (v41 & 0xF);
                          v43 = v41 & 0xF;
                          v49 = (int *)(*(_QWORD *)v47 + 4 * *(unsigned int *)(v47 + 12));
                          v44 = *v66;
                        }
                        else
                        {
                          v49 = (int *)(*(_QWORD *)v47 + 4 * v48);
                        }
                        *v49 = v44;
                        ++*(_DWORD *)(v47 + 12);
                      }
                    }
                    if (v43 - 8 <= 2)
                    {
                      v67 = *v241 + (*v242 << 6);
                      v68 = v67 + 32;
                      v69 = *(unsigned int *)(v67 + 44);
                      if ((_DWORD)v69)
                      {
                        v75 = *(int **)v68;
                        v76 = v69;
                        while (1)
                        {
                          v77 = *v75++;
                          if (v77 == (_DWORD)v237)
                            break;
                          if (!--v76)
                            goto LABEL_85;
                        }
                      }
                      else
                      {
LABEL_85:
                        if ((_DWORD)v69 == *(_DWORD *)(v68 + 8))
                        {
                          v225 = v45;
                          __srca = v43;
                          v71 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v68, v69 + 1, (unint64_t)&v237);
                          LOWORD(v45) = v225;
                          v43 = __srca;
                          v70 = (_DWORD *)(*(_QWORD *)v68 + 4 * *(unsigned int *)(v68 + 12));
                        }
                        else
                        {
                          v70 = (_DWORD *)(*(_QWORD *)v68 + 4 * v69);
                          v71 = &v237;
                        }
                        *v70 = *v71;
                        ++*(_DWORD *)(v68 + 12);
                      }
                    }
                    if (v43 >= 2 && (v43 > 0xB || (v45 & 0xBF0) == 0))
                    {
                      v61 = *v241 + (*v242 << 6);
                      v62 = v61 + 64;
                      v63 = *(unsigned int *)(v61 + 76);
                      if ((_DWORD)v63)
                      {
                        v72 = *(int **)v62;
                        v73 = v63;
                        while (1)
                        {
                          v74 = *v72++;
                          if (v74 == (_DWORD)v237)
                            break;
                          if (!--v73)
                            goto LABEL_80;
                        }
                      }
                      else
                      {
LABEL_80:
                        if ((_DWORD)v63 == *(_DWORD *)(v62 + 8))
                        {
                          v65 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v62, v63 + 1, (unint64_t)&v237);
                          v64 = (_DWORD *)(*(_QWORD *)v62 + 4 * *(unsigned int *)(v62 + 12));
                        }
                        else
                        {
                          v64 = (_DWORD *)(*(_QWORD *)v62 + 4 * v63);
                          v65 = &v237;
                        }
                        *v64 = *v65;
                        ++*(_DWORD *)(v62 + 12);
                      }
                    }
                    if ((v41 & 0xC) == 4)
                    {
                      v50 = *v241 + (*v242 << 6);
                      v51 = v50 + 96;
                      v52 = *(unsigned int *)(v50 + 108);
                      if ((_DWORD)v52)
                      {
                        v58 = *(int **)v51;
                        v59 = v52;
                        while (1)
                        {
                          v60 = *v58++;
                          if (v60 == (_DWORD)v237)
                            break;
                          if (!--v59)
                            goto LABEL_64;
                        }
                      }
                      else
                      {
LABEL_64:
                        if ((_DWORD)v52 == *(_DWORD *)(v51 + 8))
                        {
                          v54 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v237);
                          v53 = (_DWORD *)(*(_QWORD *)v51 + 4 * *(unsigned int *)(v51 + 12));
                        }
                        else
                        {
                          v53 = (_DWORD *)(*(_QWORD *)v51 + 4 * v52);
                          v54 = &v237;
                        }
                        *v53 = *v54;
                        ++*(_DWORD *)(v51 + 12);
                      }
                    }
                  }
                  ++v39;
                }
                while (v39 != v38);
              }
            }
            v42 = v243;
            v36 = --v243;
          }
          while (v42);
        }
        v19 = (v19 + 1);
        v18 = v230;
        v20 = *(unsigned int *)(v230 + 108);
        if (v20 > v19)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v230 + 96) + 8 * v19))
          {
            if (v20 == ++v19)
            {
              LODWORD(v19) = *(_DWORD *)(v230 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v231 != (_DWORD)v19);
    }
  }
LABEL_98:
  v78 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 108);
  if (v78)
  {
    v79 = v234;
    do
    {
      --v78;
      v80 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v80 + 108) <= v78)
      {
        __break(0xC471u);
        JUMPOUT(0x198081E68);
      }
      v81 = *(unsigned int **)(*(_QWORD *)(v80 + 96) + 8 * v78);
      if (v81)
      {
        v82 = *v81;
        v83 = *v233 + 32 * v82;
        v84 = *(_QWORD *)(*v234 + 16 * v82) + ((unint64_t)v81[5] << 6);
        v85 = *(unsigned int *)(v84 + 12);
        if ((_DWORD)v85)
        {
          v213 = *(int **)v84;
          v214 = 4 * v85;
          do
          {
            v215 = *v213++;
            WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::compute(void)::{lambda#1}::operator()(v83, v215);
            v214 -= 4;
          }
          while (v214);
        }
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v86 = *(char **)v83;
        v87 = *(unsigned int *)(v83 + 12);
        if ((_DWORD)v87)
        {
          v88 = &v86[4 * v87];
          v89 = (int *)(v86 + 4);
          v90 = 4 * v87 - 4;
          while (v90)
          {
            v91 = *(v89 - 1);
            v92 = *v89++;
            v90 -= 4;
            if (v91 == v92)
            {
              v93 = v89 - 2;
              if (v90)
              {
                for (i = 0; i != v90; i += 4)
                {
                  v95 = v91;
                  v91 = v89[i / 4];
                  if (v95 != v91)
                  {
                    v93[1] = v91;
                    ++v93;
                  }
                }
              }
              v88 = (char *)(v93 + 1);
              break;
            }
          }
        }
        else
        {
          v88 = *(char **)v83;
        }
        *(_DWORD *)(v83 + 12) = (unint64_t)(v88 - v86) >> 2;
      }
    }
    while (v78);
    v96 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
    v240 = 0x8000000000000000;
    if ((_DWORD)v96)
    {
      v97 = v96 - 1;
      v98 = 0x8000000000000000;
      while (1)
      {
        if (v98 < 0)
          v99 = 63;
        else
          v99 = *(_QWORD *)(2 * v98);
        v11 = (void *)(v97 + 1);
        if (v99 < v97 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v240, (unint64_t)v11, 0);
          v98 = v240;
        }
        v100 = v98 >= 0 ? (uint64_t *)(2 * v98 + 8) : &v240;
        *(uint64_t *)((char *)v100 + ((v97 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v97;
        if (!v97)
          break;
        v98 = v240;
        --v97;
      }
    }
  }
  else
  {
    v240 = 0x8000000000000000;
    v79 = v234;
  }
  v237 = (WTF *)v239;
  v101 = (int **)(a1 + 48);
  v238 = 4;
  do
  {
    v102 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
    if (!(_DWORD)v102)
      break;
    v232 = 0;
    do
    {
      --v102;
      v103 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v103 + 108) <= v102)
      {
        __break(0xC471u);
        JUMPOUT(0x198081E60);
      }
      v104 = *(unsigned int **)(*(_QWORD *)(v103 + 96) + 8 * v102);
      if (v104)
      {
        v105 = v240 >= 0 ? (uint64_t *)(2 * v240 + 8) : &v240;
        v106 = (v102 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v107 = *(uint64_t *)((char *)v105 + v106);
        *(uint64_t *)((char *)v105 + v106) = v107 & ~(1 << v102);
        if ((v107 & (1 << v102)) != 0)
        {
          *(_DWORD *)(a1 + 60) = 0;
          v108 = *(_QWORD *)(a1 + 80) + 32 * *v104;
          v109 = *(unsigned int *)(v108 + 12);
          if ((_DWORD)v109)
          {
            v137 = *(_DWORD **)v108;
            v138 = *v229;
            v139 = 4 * v109;
            do
            {
              v140 = *v137;
              v141 = *(unsigned int *)(v138 + 4 * v140);
              v142 = *(unsigned int *)(a1 + 60);
              if (v142 <= v141 || (*v101)[v141] != (_DWORD)v140)
              {
                LODWORD(v244[0]) = *v137;
                if ((_DWORD)v142 == *(_DWORD *)(a1 + 56))
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 60)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v142 + 1, (unint64_t)v244);
                  v138 = *(_QWORD *)(a1 + 32);
                }
                else
                {
                  (*v101)[v142] = v140;
                }
                ++*(_DWORD *)(a1 + 60);
                *(_DWORD *)(v138 + 4 * v140) = v142;
              }
              ++v137;
              v139 -= 4;
            }
            while (v139);
          }
          v110 = v104[5];
          if ((_DWORD)v110)
          {
            do
            {
              v111 = *v79;
              v112 = *(_QWORD *)(*v79 + 16 * *v104);
              v113 = v112 + ((unint64_t)v110 << 6);
              v114 = *(unsigned int *)(v113 + 44);
              if ((_DWORD)v114)
              {
                v123 = *(unsigned int **)(v113 + 32);
                v124 = *(_QWORD *)(a1 + 32);
                v125 = 4 * v114;
                v126 = *(_DWORD *)(a1 + 60);
                do
                {
                  v127 = *v123;
                  v128 = *(unsigned int *)(v124 + 4 * v127);
                  if (v126 > v128)
                  {
                    v129 = *v101;
                    if ((*v101)[v128] == (_DWORD)v127)
                    {
                      v130 = v129[v126 - 1];
                      v129[v128] = v130;
                      *(_DWORD *)(v124 + 4 * v130) = v128;
                      v126 = *(_DWORD *)(a1 + 60) - 1;
                      *(_DWORD *)(a1 + 60) = v126;
                    }
                  }
                  ++v123;
                  v125 -= 4;
                }
                while (v125);
                v112 = *(_QWORD *)(v111 + 16 * *v104);
              }
              v115 = v112 + ((unint64_t)--v110 << 6);
              v116 = *(unsigned int *)(v115 + 12);
              if ((_DWORD)v116)
              {
                v117 = *(_DWORD **)v115;
                v118 = *v229;
                v119 = 4 * v116;
                do
                {
                  v120 = *v117;
                  v121 = *(unsigned int *)(v118 + 4 * v120);
                  v122 = *(unsigned int *)(a1 + 60);
                  if (v122 <= v121 || (*v101)[v121] != (_DWORD)v120)
                  {
                    LODWORD(v244[0]) = *v117;
                    if ((_DWORD)v122 == *(_DWORD *)(a1 + 56))
                    {
                      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 60)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v122 + 1, (unint64_t)v244);
                      v118 = *(_QWORD *)(a1 + 32);
                    }
                    else
                    {
                      (*v101)[v122] = v120;
                    }
                    ++*(_DWORD *)(a1 + 60);
                    *(_DWORD *)(v118 + 4 * v120) = v122;
                  }
                  ++v117;
                  v119 -= 4;
                  v79 = v234;
                }
                while (v119);
              }
            }
            while (v110);
          }
          v131 = *v104;
          v132 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v131);
          v133 = *(unsigned int *)(v132 + 44);
          v134 = *(_DWORD *)(a1 + 60);
          if ((_DWORD)v133)
          {
            v206 = *(unsigned int **)(v132 + 32);
            v207 = *v229;
            v208 = 4 * v133;
            do
            {
              v209 = *v206;
              v210 = *(unsigned int *)(v207 + 4 * v209);
              if (v134 > v210)
              {
                v211 = *v101;
                if ((*v101)[v210] == (_DWORD)v209)
                {
                  v212 = v211[v134 - 1];
                  v211[v210] = v212;
                  *(_DWORD *)(v207 + 4 * v212) = v210;
                  v134 = *(_DWORD *)(a1 + 60) - 1;
                  *(_DWORD *)(a1 + 60) = v134;
                }
              }
              ++v206;
              v208 -= 4;
            }
            while (v208);
            v131 = *v104;
          }
          v135 = *(_QWORD *)(a1 + 64) + 32 * v131;
          v136 = *(unsigned int *)(v135 + 12);
          if ((_DWORD)v136 == v134)
          {
            *(_DWORD *)(a1 + 60) = 0;
            continue;
          }
          v143 = *(unsigned int **)v135;
          if ((_DWORD)v136)
          {
            v189 = *v229;
            v190 = 4 * v136;
            v191 = *(unsigned int **)v135;
            do
            {
              v192 = *v191;
              v193 = *(unsigned int *)(v189 + 4 * v192);
              if (v134 > v193)
              {
                v194 = *v101;
                if ((*v101)[v193] == (_DWORD)v192)
                {
                  v195 = v194[v134 - 1];
                  v194[v193] = v195;
                  *(_DWORD *)(v189 + 4 * v195) = v193;
                  v134 = *(_DWORD *)(a1 + 60) - 1;
                  *(_DWORD *)(a1 + 60) = v134;
                }
              }
              ++v191;
              v190 -= 4;
            }
            while (v190);
          }
          if (v134)
          {
            v144 = *v101;
            v145 = *(unsigned int *)(v135 + 12);
            v146 = v145 + v134;
            if (v146 <= *(unsigned int *)(v135 + 8))
            {
              v155 = v143;
              v79 = v234;
            }
            else
            {
              if (v146 < 5)
              {
                v147 = (void *)(v135 + 16);
                *(_QWORD *)v135 = v135 + 16;
                *(_DWORD *)(v135 + 8) = 4;
              }
              else
              {
                if (v146 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198081E8CLL);
                }
                v147 = (void *)WTF::fastMalloc((WTF *)(4 * v146));
                *(_DWORD *)(v135 + 8) = v146;
                *(_QWORD *)v135 = v147;
              }
              memcpy(v147, v143, 4 * v145);
              v155 = *(unsigned int **)v135;
              if ((unsigned int *)(v135 + 16) == v143)
              {
                v79 = v234;
              }
              else
              {
                v79 = v234;
                if (v143)
                {
                  if (v155 == v143)
                  {
                    *(_QWORD *)v135 = 0;
                    *(_DWORD *)(v135 + 8) = 0;
                  }
                  WTF::fastFree((unint64_t)v143, v148, v149, v150, v151, v152, v153, v154);
                  v155 = *(unsigned int **)v135;
                }
              }
            }
            v156 = *(_DWORD *)(v135 + 12);
            v157 = 4 * v134;
            do
            {
              v158 = *v144++;
              v155[v156] = v158;
              v156 = *(_DWORD *)(v135 + 12) + 1;
              *(_DWORD *)(v135 + 12) = v156;
              v157 -= 4;
            }
            while (v157);
            v159 = *(unsigned int *)(a1 + 60);
            v160 = 126 - 2 * __clz(v159);
            if ((_DWORD)v159)
              v161 = v160;
            else
              v161 = 0;
            std::__introsort<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,false>(*(unsigned int **)(a1 + 48), (char *)(*(_QWORD *)(a1 + 48) + 4 * v159), (uint64_t)v244, v161, 1);
            if (*(_DWORD *)(a1 + 60))
            {
              v162 = 0;
              v163 = *v101;
              v164 = *v229;
              do
              {
                *(_DWORD *)(v164 + 4 * v163[v162]) = v162;
                ++v162;
              }
              while (v162 < *(unsigned int *)(a1 + 60));
            }
            v165 = v104[21];
            if ((_DWORD)v165)
            {
              v166 = (unsigned int **)*((_QWORD *)v104 + 9);
              v167 = &v166[v165];
              do
              {
                v168 = *v166;
                v169 = *v233 + 32 * **v166;
                v170 = *(unsigned int *)(v169 + 12);
                if ((_DWORD)v170)
                {
                  v172 = *(unsigned int *)(a1 + 60) + v170;
                  v173 = HIDWORD(v238);
                  if (v172 > HIDWORD(v238) && v172 > v238)
                  {
                    v199 = v238 + ((unint64_t)v238 >> 2);
                    if (v199 >= 0x10)
                      v200 = v199 + 1;
                    else
                      v200 = 16;
                    if (v200 <= v172)
                      v201 = v172;
                    else
                      v201 = v200;
                    __src = v237;
                    if (v201 < 5)
                    {
                      v202 = (WTF *)v239;
                      v237 = (WTF *)v239;
                      LODWORD(v238) = 4;
                    }
                    else
                    {
                      if (v201 >> 30)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198081E94);
                      }
                      v202 = (WTF *)WTF::fastMalloc((WTF *)(4 * v201));
                      LODWORD(v238) = v201;
                      v237 = v202;
                    }
                    memcpy(v202, __src, 4 * v173);
                    if (v239 != (_QWORD *)__src && __src)
                    {
                      if (v237 == __src)
                      {
                        v237 = 0;
                        LODWORD(v238) = 0;
                      }
                      WTF::fastFree((unint64_t)__src, v11, v12, v13, v14, v15, v16, v17);
                    }
                  }
                  HIDWORD(v238) = v172;
                  v174 = *(int **)v169;
                  v175 = *(unsigned int *)(v169 + 12);
                  v176 = *(_QWORD *)v169 + 4 * v175;
                  v177 = *(int **)(a1 + 48);
                  v178 = *(unsigned int *)(a1 + 60);
                  v179 = &v177[v178];
                  v180 = v237;
                  v46 = (_DWORD)v175 == 0;
                  v181 = v237;
                  if (v46 || (_DWORD)v178 == 0)
                  {
                    v79 = v234;
                  }
                  else
                  {
                    v79 = v234;
LABEL_206:
                    while (2)
                    {
                      v183 = v181;
                      while (1)
                      {
                        v184 = *v174;
                        v185 = *v177;
                        if (*v174 < *v177)
                        {
                          *(_DWORD *)v183 = v184;
                          v181 = (WTF *)((char *)v183 + 4);
                          if ((unint64_t)++v174 < v176)
                            goto LABEL_206;
                          goto LABEL_215;
                        }
                        if (v184 == v185)
                          break;
                        v181 = (WTF *)((char *)v183 + 4);
                        *(_DWORD *)v183 = v185;
                        ++v177;
                        v183 = (WTF *)((char *)v183 + 4);
                        if (v177 >= v179)
                          goto LABEL_217;
                      }
                      *(_DWORD *)v183 = v184;
                      v181 = (WTF *)((char *)v183 + 4);
                      ++v174;
                      ++v177;
                      if ((unint64_t)v174 < v176 && v177 < v179)
                        continue;
                      break;
                    }
LABEL_215:
                    v181 = (WTF *)((char *)v183 + 4);
                  }
LABEL_217:
                  while ((unint64_t)v174 < v176)
                  {
                    v186 = *v174++;
                    *(_DWORD *)v181 = v186;
                    v181 = (WTF *)((char *)v181 + 4);
                  }
                  while (v177 < v179)
                  {
                    v187 = *v177++;
                    *(_DWORD *)v181 = v187;
                    v181 = (WTF *)((char *)v181 + 4);
                  }
                  HIDWORD(v238) = (unint64_t)(v181 - v180) >> 2;
                  v188 = *(unsigned int *)(v169 + 12);
                  if (HIDWORD(v238) == v188)
                    goto LABEL_197;
                  if (HIDWORD(v238) <= v188)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198081D88);
                  }
                  WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(v169, (const void **)&v237, v12, v13, v14, v15, v16, v17);
                }
                else
                {
                  WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>(*v233 + 32 * **v166, (const void **)(a1 + 48), v12, v13, v14, v15, v16, v17);
                }
                if (v240 >= 0)
                  v171 = (uint64_t *)(2 * v240 + 8);
                else
                  v171 = &v240;
                v232 = 1;
                *(uint64_t *)((char *)v171 + (((unint64_t)*v168 >> 3) & 0x1FFFFFF8)) |= 1 << *v168;
LABEL_197:
                ++v166;
              }
              while (v166 != v167);
            }
          }
          else
          {
            v79 = v234;
          }
        }
      }
    }
    while (v102);
  }
  while ((v232 & 1) != 0);
  v196 = v237;
  if (v239 != (_QWORD *)v237 && v237 != 0)
  {
    v237 = 0;
    LODWORD(v238) = 0;
    WTF::fastFree((unint64_t)v196, v11, v12, v13, v14, v15, v16, v17);
  }
  if ((v240 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v240, v11, v12, v13, v14, v15, v16, v17);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v235);
  return a1;
}

_DWORD *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(_DWORD *result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int *v30;
  uint64_t v31;
  int v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  if (a4 == 1)
  {
    v37 = v4;
    v38 = v5;
    if (*(_BYTE *)(a2 + 8) == 1)
    {
      v7 = **((_QWORD **)result + 2);
      v8 = -*(_DWORD *)(a2 + 16);
      v36 = v8;
      if (a3 > 0xB || ((1 << a3) & 0xF3C) == 0)
      {
        v9 = **(_QWORD **)(v7 + 8) + (**(_QWORD **)(v7 + 16) << 6);
        v10 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v10)
        {
          v16 = *(int **)v9;
          v17 = *(unsigned int *)(v9 + 12);
          while (1)
          {
            v18 = *v16++;
            if (v18 == v8)
              break;
            if (!--v17)
              goto LABEL_7;
          }
        }
        else
        {
LABEL_7:
          if ((_DWORD)v10 == *(_DWORD *)(v9 + 8))
          {
            result = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v36);
            v11 = (int *)(*(_QWORD *)v9 + 4 * *(unsigned int *)(v9 + 12));
            v8 = *result;
          }
          else
          {
            v11 = (int *)(*(_QWORD *)v9 + 4 * v10);
          }
          *v11 = v8;
          ++*(_DWORD *)(v9 + 12);
        }
      }
      if (a3 - 8 <= 2)
      {
        v26 = **(_QWORD **)(v7 + 8) + (**(_QWORD **)(v7 + 16) << 6);
        v27 = v26 + 32;
        v28 = *(unsigned int *)(v26 + 44);
        if ((_DWORD)v28)
        {
          v33 = *(int **)v27;
          v34 = v28;
          while (1)
          {
            v35 = *v33++;
            if (v35 == v36)
              break;
            if (!--v34)
              goto LABEL_33;
          }
        }
        else
        {
LABEL_33:
          if ((_DWORD)v28 == *(_DWORD *)(v27 + 8))
          {
            result = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, v28 + 1, (unint64_t)&v36);
            v29 = (_DWORD *)(*(_QWORD *)v27 + 4 * *(unsigned int *)(v27 + 12));
          }
          else
          {
            v29 = (_DWORD *)(*(_QWORD *)v27 + 4 * v28);
            result = &v36;
          }
          *v29 = *result;
          ++*(_DWORD *)(v27 + 12);
        }
      }
      if (a3 >= 2 && (a3 > 0xB || ((1 << a3) & 0xBF0) == 0))
      {
        v22 = **(_QWORD **)(v7 + 8) + (**(_QWORD **)(v7 + 16) << 6);
        v23 = v22 + 64;
        v24 = *(unsigned int *)(v22 + 76);
        if ((_DWORD)v24)
        {
          v30 = *(int **)v23;
          v31 = v24;
          while (1)
          {
            v32 = *v30++;
            if (v32 == v36)
              break;
            if (!--v31)
              goto LABEL_28;
          }
        }
        else
        {
LABEL_28:
          if ((_DWORD)v24 == *(_DWORD *)(v23 + 8))
          {
            result = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v36);
            v25 = (_DWORD *)(*(_QWORD *)v23 + 4 * *(unsigned int *)(v23 + 12));
          }
          else
          {
            v25 = (_DWORD *)(*(_QWORD *)v23 + 4 * v24);
            result = &v36;
          }
          *v25 = *result;
          ++*(_DWORD *)(v23 + 12);
        }
      }
      if ((a3 & 0xFFFFFFFC) == 4)
      {
        v12 = **(_QWORD **)(v7 + 8) + (**(_QWORD **)(v7 + 16) << 6);
        v13 = v12 + 96;
        v14 = *(unsigned int *)(v12 + 108);
        if ((_DWORD)v14)
        {
          v19 = *(int **)v13;
          v20 = v14;
          while (1)
          {
            v21 = *v19++;
            if (v21 == v36)
              break;
            if (!--v20)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_14:
          if ((_DWORD)v14 == *(_DWORD *)(v13 + 8))
          {
            result = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v36);
            v15 = (_DWORD *)(*(_QWORD *)v13 + 4 * *(unsigned int *)(v13 + 12));
          }
          else
          {
            v15 = (_DWORD *)(*(_QWORD *)v13 + 4 * v14);
            result = &v36;
          }
          *v15 = *result;
          ++*(_DWORD *)(v13 + 12);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::compute(void)::{lambda(unsigned int)#1}::operator()(uint64_t result, int a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;

  v5 = a2;
  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2 == *(_DWORD *)(result + 8))
  {
    v4 = result;
    v3 = WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v2 + 1, (unint64_t)&v5);
    result = v4;
    *(_DWORD *)(*(_QWORD *)v4 + 4 * *(unsigned int *)(v4 + 12)) = *(_DWORD *)v3;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v2) = a2;
  }
  ++*(_DWORD *)(result + 12);
  return result;
}

uint64_t JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(uint64_t result, _DWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _DWORD **v11;
  _QWORD v12[3];

  v2 = result;
  v11 = a2;
  if ((*(__int16 *)(result + 120) - 446) <= 5)
  {
    v12[1] = v12;
    v12[2] = &v11;
  }
  else
  {
    v3 = *(unsigned int *)(result + 12);
    if ((_DWORD)v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = (char *)&JSC::B3::Air::g_formTable
         + 21 * *(__int16 *)(result + 120)
         + ((unint64_t)((v3 - 1) * v3) >> 1);
      v8 = 32 * v3;
      while (v6 < *(unsigned int *)(v2 + 12))
      {
        v9 = *v7++;
        v10 = *(_QWORD *)v2 + v5;
        JSC::B3::Air::decodeFormWidth(v9);
        ++v6;
        v5 += 32;
        if (v8 == v5)
          return result;
      }
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::OrderedMoveSet::addMove(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v1 = result;
  v2 = *(_DWORD *)(result + 12);
  v3 = *(_DWORD *)(result + 24);
  v4 = *(unsigned int *)(result + 28);
  v6 = v4;
  v7 = v2;
  if ((_DWORD)v4 == v3)
  {
    result = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(result + 16, (unint64_t)&v7);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * v4) = v2;
    ++*(_DWORD *)(result + 28);
  }
  v5 = *(unsigned int *)(v1 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(v1 + 8))
    return WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(v1, (unint64_t)&v6);
  *(_DWORD *)(*(_QWORD *)v1 + 4 * v5) = v4;
  ++*(_DWORD *)(v1 + 12);
  return result;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(_QWORD *result, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t i;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t ****v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t ***v49;
  uint64_t **v50;
  uint64_t ***v51;
  uint64_t *****v52;

  v44[1] = result;
  v45 = a4;
  v44[0] = &v45;
  v48 = v44;
  if (a2)
  {
    v49 = (uint64_t ***)&v48;
    v46 = &v49;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v50 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v51 = &v50;
      v52 = &v46;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v50);
    }
    else
    {
      v6 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v6 - 1) * v6) >> 1);
        do
        {
          if (v7 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980827B0);
          }
          v9 = v8[v7];
          if ((v9 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980827A8);
          }
          v10 = (uint64_t)&(*a2)[4 * v7];
          v11 = (v9 & 0xC) == 4 && *(_BYTE *)(v10 + 8) == 1;
          if (v11 && (v9 & 0x10) != 0)
          {
            v43 = *(_DWORD *)(v10 + 16);
            v20 = (uint64_t)(*v49)[1];
            v21 = ***v49;
            v22 = *(unsigned int *)(v21 + 60);
            if ((_DWORD)v22)
            {
              v14 = *(_DWORD **)(v21 + 48);
              for (i = 4 * v22; i; i -= 4)
              {
                v12 = -*v14;
                v13 = *(_QWORD *)(v20 + 368);
                if (v12 < 0 || *v14 == 0)
                {
                  if (*v14 >= *(_DWORD *)(v13 + 28))
                    goto LABEL_66;
                }
                else if (*(_DWORD *)(v13 + 12) <= v12)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980827C0);
                }
              }
            }
            v16 = *(unsigned int *)(v20 + 268);
            if ((_DWORD)v16)
            {
              v17 = *(__int16 **)(v20 + 256);
              v18 = 4 * v16;
              do
              {
                v19 = *v17;
                v17 += 2;
                v18 -= 4;
              }
              while (v18);
            }
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
  if (a3)
  {
    v49 = (uint64_t ***)&v48;
    v46 = &v49;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v50 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v51 = &v50;
      v52 = &v46;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v50);
    }
    else
    {
      v23 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v23)
      {
        v24 = 0;
        v25 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v23 - 1) * v23) >> 1);
        do
        {
          if (v24 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980827B8);
          }
          v26 = v25[v24];
          if ((v26 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198082788);
          }
          v27 = (uint64_t)&(*a3)[4 * v24];
          if (*(_BYTE *)(v27 + 8) == 1 && (v26 & 0xF) - 8 <= 2 && (v26 & 0x10) != 0)
          {
            v28 = *(_DWORD *)(v27 + 16);
            v29 = (uint64_t)(*v49)[1];
            v30 = ***v49;
            v31 = *(unsigned int *)(v30 + 60);
            if ((_DWORD)v31)
            {
              v32 = *(_DWORD **)(v30 + 48);
              v33 = 4 * v31;
              do
              {
                v34 = -*v32;
                v35 = *(_QWORD *)(v29 + 368);
                if (v34 < 0 || *v32 == 0)
                {
                  if (*v32 >= *(_DWORD *)(v35 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198082768);
                  }
                }
                else if (*(_DWORD *)(v35 + 12) <= v34)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980827C8);
                }
                v33 -= 4;
              }
              while (v33);
            }
            v36 = *(unsigned int *)(v29 + 268);
            if ((_DWORD)v36)
            {
              v37 = *(__int16 **)(v29 + 256);
              v38 = -v28;
              v39 = 4 * v36;
              do
              {
                v40 = *v37;
                v37 += 2;
                v39 -= 4;
              }
              while (v39);
            }
          }
          ++v24;
        }
        while (v24 != v23);
      }
    }
  }
  v50 = (uint64_t **)v44;
  v51 = (uint64_t ***)&v49;
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    LOBYTE(v49) = 4;
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1980827D0);
    }
    v46 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v47 = v41;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v49) = 8;
    if (!*((_DWORD *)a3 + 3))
    {
LABEL_66:
      __break(0xC471u);
      JUMPOUT(0x198082754);
    }
    v46 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v47 = v42;
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  int v6;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v5 = ****(_QWORD ****)(result + 16);
    v6 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  char v31;
  _QWORD *v32;
  _QWORD **v33;
  void *v34;
  void **v35;
  _QWORD *v36;

  v31 = a4;
  if (a3 != 1)
    return result;
  v5 = *(uint64_t **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  result = **(_QWORD **)result;
  v6 = *v5;
  v30[0] = &v31;
  v30[1] = a2;
  v30[2] = v4;
  if (result)
  {
    v32 = v30;
    v33 = &v32;
    if ((*(__int16 *)(result + 120) - 446) > 5)
    {
      v13 = *(unsigned int *)(result + 12);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(result + 120)
            + ((unint64_t)((v13 - 1) * v13) >> 1);
        v16 = 8;
        while (v14 < *(unsigned int *)(result + 12))
        {
          v17 = v15[v14];
          v18 = (v17 >> 5) - 1;
          if (v18 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198082AE0);
          }
          v19 = *(_QWORD *)result + v16;
          v20 = (v17 & 0xC) == 4 && *(_BYTE *)v19 == 1;
          if (v20 && (v17 & 0x10) != 0 && (((0xFu >> v18) & 1) == 0 || !*(_BYTE *)*v32))
          {
            v26 = v15;
            v28 = result;
            v22 = v14;
            v24 = v13;
            v21 = v16;
            v16 = v21;
            v14 = v22;
            v13 = v24;
            v15 = v26;
            result = v28;
          }
          ++v14;
          v16 += 32;
          if (v13 == v14)
            goto LABEL_6;
        }
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x198082AC0);
      }
    }
    else
    {
      v34 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v35 = &v34;
      v36 = &v33;
      result = JSC::B3::Air::Inst::forEachArgCustom(result, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v34);
    }
  }
LABEL_6:
  if (v6)
  {
    v32 = v30;
    v33 = &v32;
    if ((*(__int16 *)(v6 + 120) - 446) <= 5)
    {
      v34 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v35 = &v34;
      v36 = &v33;
      return JSC::B3::Air::Inst::forEachArgCustom(v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v34);
    }
    v7 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(v6 + 120) + ((unint64_t)((v7 - 1) * v7) >> 1);
      for (i = 8; ; i += 32)
      {
        if (v8 >= *(unsigned int *)(v6 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198082AE8);
        }
        v11 = v9[v8];
        if ((v11 >> 5) - 1 >= 5)
          break;
        v12 = *(_QWORD *)v6 + i;
        if (*(_BYTE *)v12 == 1 && (v11 & 0xF) - 8 <= 2)
        {
          v27 = v9;
          v29 = v7;
          v23 = i;
          v25 = v8;
          i = v23;
          v8 = v25;
          v9 = v27;
          v7 = v29;
        }
        if (v7 == ++v8)
          return result;
      }
      goto LABEL_35;
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator() const(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, __int16 a2, int a3, unsigned int a4)
{
  uint64_t v4;

  if (a3 == 1)
  {
    v4 = result;
    result = *(_QWORD *)(result + 16);
    if (a4 > 3 || !**(_BYTE **)v4)
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::addEdge(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 != a3)
  {
    v32 = v3;
    v33 = v4;
    v5 = a2;
    v6 = result;
    v31 = a2;
    v30 = a3;
    v7 = a2;
    v8 = (uint64_t *)(result + 24);
    v9 = *(_QWORD *)(result + 24);
    v10 = *(unsigned __int16 *)(result + 36);
    v11 = a3 + *(unsigned __int16 *)(result + 36) * (unint64_t)a2;
    if (v9 >= 0)
      v12 = 2 * v9 + 8;
    else
      v12 = result + 24;
    v13 = (v11 >> 3) & 0x3FFFFFF8;
    v14 = *(_QWORD *)(v12 + v13);
    v15 = 1 << v11;
    v16 = v15 & v14;
    *(_QWORD *)(v12 + v13) = v15 | v14;
    v17 = *(_DWORD *)(result + 32);
    if ((v15 & v14) == 0)
      ++v17;
    v18 = a2 + v10 * (unint64_t)a3;
    if (*v8 >= 0)
      v19 = 2 * *v8 + 8;
    else
      v19 = result + 24;
    v20 = (v18 >> 3) & 0x3FFFFFF8;
    v21 = 1 << v18;
    v22 = *(_QWORD *)(v19 + v20);
    *(_QWORD *)(v19 + v20) = v22 | v21;
    if ((v22 & v21) == 0)
      ++v17;
    *(_DWORD *)(result + 32) = v17;
    if (!v16)
    {
      v23 = *(unsigned __int16 *)(result + 16);
      if (v23 < a2)
      {
        v24 = *(_QWORD *)(result + 40) + 16 * a2;
        v25 = *(unsigned int *)(v24 + 12);
        if ((_DWORD)v25 == *(_DWORD *)(v24 + 8))
        {
          result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(result + 40) + 16 * a2, v25 + 1, (unint64_t)&v30);
          v25 = *(unsigned int *)(v24 + 12);
          *(_WORD *)(*(_QWORD *)v24 + 2 * v25) = *(_WORD *)result;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v24 + 2 * v25) = a3;
        }
        v26 = *(_QWORD *)(v6 + 56);
        v27 = *(_WORD *)(v26 + 2 * v7);
        *(_DWORD *)(v24 + 12) = v25 + 1;
        *(_WORD *)(v26 + 2 * v7) = v27 + 1;
        a3 = v30;
        v23 = *(unsigned __int16 *)(v6 + 16);
      }
      if (v23 < a3)
      {
        v28 = *(_QWORD *)(v6 + 40) + 16 * a3;
        v29 = *(unsigned int *)(v28 + 12);
        if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
        {
          result = WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, v29 + 1, (unint64_t)&v31);
          v29 = *(unsigned int *)(v28 + 12);
          *(_WORD *)(*(_QWORD *)v28 + 2 * v29) = *(_WORD *)result;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v28 + 2 * v29) = v5;
        }
        *(_DWORD *)(v28 + 12) = v29 + 1;
        ++*(_WORD *)(*(_QWORD *)(v6 + 56) + 2 * v30);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v5 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t JSC::B3::Air::Arg::forEachTmp<JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(uint64_t result, char a2, _DWORD **a3)
{
  int v3;
  _DWORD **v4;
  _DWORD *v5;
  int v6;

  v3 = *(char *)(result + 8);
  if (v3 != 1)
  {
    if ((v3 - 6) < 3)
    {
      v5 = a3[1];
    }
    else
    {
      if ((v3 - 12) >= 2)
      {
        if (v3 != 11)
          return result;
        *a3[1] = *(_DWORD *)(result + 16);
        v5 = a3[1];
        v6 = *(_DWORD *)(result + 20);
LABEL_12:
        *v5 = v6;
        return result;
      }
      v5 = *a3;
    }
    v6 = *(_DWORD *)(result + 16);
    goto LABEL_12;
  }
  if ((a2 & 0xFC) == 4)
    v4 = a3;
  else
    v4 = a3 + 1;
  **v4 = *(_DWORD *)(result + 16);
  return result;
}

_DWORD *WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::MoveOperands>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 4 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 4 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  uint64_t v19;
  __int16 v20;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      if (v5 >= 0x20)
      {
        v6 = (char)(31 - v5);
        v7 = (uint64_t)(*a2)[1];
        v8 = ***a2;
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v10 = *(_DWORD **)(v8 + 48);
          v11 = 4 * v9;
          if (((1 << v5) & *v4) != 0)
          {
            while (1)
            {
              v12 = -*v10;
              v13 = *(_QWORD *)(v7 + 368);
              if (v12 < 0 || *v10 == 0)
              {
                if (*v10 >= *(_DWORD *)(v13 + 28))
                  goto LABEL_26;
              }
              else if (*(_DWORD *)(v13 + 12) <= v12)
              {
                goto LABEL_26;
              }
              v11 -= 4;
              if (!v11)
                goto LABEL_11;
            }
          }
          do
          {
            v15 = -*v10;
            v16 = *(_QWORD *)(v7 + 368);
            if ((int)v15 < 1)
            {
              v15 = *v10;
              if (v15 >= *(unsigned int *)(v16 + 28))
              {
LABEL_26:
                __break(0xC471u);
                JUMPOUT(0x1980831E0);
              }
              v16 += 16;
            }
            else if (*(_DWORD *)(v16 + 12) <= v15)
            {
              goto LABEL_26;
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v16 + 2 * v15) >= 4u)
            ++v10;
            v11 -= 4;
          }
          while (v11);
        }
LABEL_11:
        v14 = *(unsigned int *)(v7 + 268);
        if ((_DWORD)v14)
        {
          v17 = *(__int16 **)(v7 + 256);
          v18 = -v6;
          v19 = 4 * v14;
          do
          {
            v20 = *v17;
            v17 += 2;
            v19 -= 4;
          }
          while (v19);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  __int16 v18;

  v4 = (a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1;
  if (v4 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v7 = ******(_QWORD ******)(result + 16);
    v8 = *(unsigned int *)(v7 + 60);
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD **)(v7 + 48);
      v10 = 4 * v8;
      do
      {
        v11 = -*v9;
        v12 = *(_QWORD *)(v6 + 368);
        if (v11 < 0 || *v9 == 0)
        {
          if (*v9 >= *(_DWORD *)(v12 + 28))
          {
LABEL_17:
            __break(0xC471u);
            JUMPOUT(0x1980832ECLL);
          }
        }
        else if (*(_DWORD *)(v12 + 12) <= v11)
        {
          goto LABEL_17;
        }
        v10 -= 4;
      }
      while (v10);
    }
    v13 = *(unsigned int *)(v6 + 268);
    if ((_DWORD)v13)
    {
      v14 = *(__int16 **)(v6 + 256);
      v15 = -v5;
      v16 = 4 * v13;
      v17 = (unsigned __int16)v15;
      do
      {
        v18 = *v14;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && a4 == 1)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v6 = ******(_QWORD ******)(result + 16);
    v7 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD **)(v6 + 48);
      v9 = 4 * v7;
      do
      {
        v10 = -*v8;
        v11 = *(_QWORD *)(v5 + 368);
        if (v10 < 0 || *v8 == 0)
        {
          if (*v8 >= *(_DWORD *)(v11 + 28))
          {
LABEL_15:
            __break(0xC471u);
            JUMPOUT(0x1980833FCLL);
          }
        }
        else if (*(_DWORD *)(v11 + 12) <= v10)
        {
          goto LABEL_15;
        }
        v9 -= 4;
      }
      while (v9);
    }
    v12 = *(unsigned int *)(v5 + 268);
    if ((_DWORD)v12)
    {
      v13 = *(__int16 **)(v5 + 256);
      v14 = -v4;
      v15 = 4 * v12;
      v16 = (unsigned __int16)v14;
      do
      {
        v17 = *v13;
        v13 += 2;
        v15 -= 4;
      }
      while (v15);
    }
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 v57;
  _WORD v58[15];
  __int16 v59;

  v9 = (*(_DWORD *)(a1 + 340) + *(_DWORD *)(a1 + 324));
  v10 = *(_QWORD *)(a1 + 352);
  if (v10 < 0)
    v11 = 63;
  else
    v11 = *(_QWORD *)(2 * v10);
  if (v11 < v9)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 352), v9, 0);
  v19 = (uint64_t *)(a1 + 160);
  v20 = (uint64_t *)(a1 + 200);
  v21 = (_QWORD *)(a1 + 288);
  v22 = *(_DWORD *)(a1 + 196);
  while (1)
  {
    do
    {
LABEL_6:
      if (v22)
      {
        v23 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 184) + 2 * v22 - 2);
        *(_DWORD *)(a1 + 196) = v22 - 1;
        v57 = v23;
        v24 = *(unsigned int *)(a1 + 180);
        if ((_DWORD)v24 == *(_DWORD *)(a1 + 176))
        {
          WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 168, (unint64_t)&v57);
          v23 = v57;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a1 + 168) + 2 * v24) = v23;
          *(_DWORD *)(a1 + 180) = v24 + 1;
        }
        v25 = *(_QWORD *)(a1 + 160);
        if (v25 >= 0)
          v26 = 2 * v25 + 8;
        else
          v26 = a1 + 160;
        *(_QWORD *)(v26 + ((v23 >> 3) & 0x1FF8)) |= 1 << v23;
        v27 = *(_QWORD *)(a1 + 40) + 16 * v23;
        v28 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v28)
        {
          v29 = *(unsigned __int16 **)v27;
          v30 = 2 * v28;
          do
          {
            v31 = *v29;
            if (*v19 >= 0)
              v32 = 2 * *v19 + 8;
            else
              v32 = a1 + 160;
            if (((1 << v31) & *(_QWORD *)(v32 + 8 * (v31 >> 6))) == 0 && !*(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v31))
            {
              v59 = *v29;
              v33 = *(_QWORD *)(a1 + 56);
              v34 = *(unsigned __int16 *)(v33 + 2 * v31);
              *(_WORD *)(v33 + 2 * v31) = v34 - 1;
              if (*(_DWORD *)(a1 + 12) == v34)
              {
                v47 = *(_QWORD *)(a1 + 200);
                if (v47 >= 0)
                  v48 = 2 * v47 + 8;
                else
                  v48 = a1 + 200;
                *(_QWORD *)(v48 + 8 * (v31 >> 6)) &= ~(1 << v31);
                {
                  WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(v58, (uint64_t *)(a1 + 288), &v59, v14, v15, v16, v17, v18);
                }
                else
                {
                  v49 = *(unsigned int *)(a1 + 196);
                  if ((_DWORD)v49 == *(_DWORD *)(a1 + 192))
                  {
                    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 184, (unint64_t)&v59);
                  }
                  else
                  {
                    *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v49) = v31;
                    *(_DWORD *)(a1 + 196) = v49 + 1;
                  }
                }
              }
            }
            ++v29;
            v30 -= 2;
          }
          while (v30);
        }
      }
      else
      {
        v39 = *(_QWORD *)(a1 + 360);
        if (v39 < 0)
        {
          if ((v39 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          {
LABEL_35:
            goto LABEL_21;
          }
        }
        else
        {
          v40 = (_QWORD *)(2 * v39);
          v41 = ((unint64_t)(*v40 + 63) >> 6);
          while (v41 * 8)
          {
            if (v40[v41--])
              goto LABEL_35;
          }
        }
        if (*(_DWORD *)(a1 + 324) || *(_DWORD *)(a1 + 340))
        {
        }
        else if (*v21 && *(_DWORD *)(*v21 - 12))
        {
        }
        else
        {
          v43 = *v20;
          if (*v20 < 0)
          {
            if ((v43 & 0x7FFFFFFFFFFFFFFFLL) != 0)
LABEL_44:
          }
          else
          {
            v44 = (_QWORD *)(2 * v43);
            v45 = ((unint64_t)(*v44 + 63) >> 6);
            while (v45 * 8)
            {
              if (v44[v45--])
                goto LABEL_44;
            }
          }
        }
      }
LABEL_21:
      v22 = *(_DWORD *)(a1 + 196);
    }
    while (v22 || *(_DWORD *)(a1 + 324) || *(_DWORD *)(a1 + 340) || *v21 && *(_DWORD *)(*v21 - 12));
    v35 = *v20;
    if ((*v20 & 0x8000000000000000) == 0)
      break;
    if ((v35 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_60;
  }
  v36 = (_QWORD *)(2 * v35);
  v37 = ((unint64_t)(*v36 + 63) >> 6);
  while (v37 * 8)
  {
    if (v36[v37--])
      goto LABEL_6;
  }
LABEL_60:
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::assignRegistersToTmp<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  char v36;
  int v37;
  int v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  unsigned int *v42;
  unint64_t v43;
  unsigned int *v44;
  BOOL v45;
  unsigned int v46;
  unsigned int *v47;
  char v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  char v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  char v63;
  int v64;
  unint64_t v65;
  char v66;
  int v67;
  char v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  _QWORD v79[13];
  __int16 v80;
  char v81;

  v8 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v8)
    return;
  v11 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v11))
  {
    if (v8 == ++v11)
      return;
  }
  if ((_DWORD)v8 == (_DWORD)v11)
    return;
  v12 = &v77;
  v13 = 31;
  LODWORD(v14) = *(_DWORD *)(a1 + 108);
  v15 = v11;
  do
  {
    if (v14 <= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198083D80);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v15);
    if (!*(_DWORD *)(v16 + 20))
    {
      v46 = 0;
      v41 = 0;
      v39 = *(unsigned int **)(v16 + 8);
      a3 = (unint64_t)v39;
      v42 = v39;
      goto LABEL_54;
    }
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(v16 + 8) + (v17 << 7);
      if ((*(__int16 *)(v18 + 120) - 107) > 6 || ((1 << (*(_WORD *)(v18 + 120) - 107)) & 0x43) == 0)
      {
        v20 = *(_QWORD *)v18;
        v21 = *(unsigned int *)(v18 + 12);
      }
      else
      {
        v21 = *(unsigned int *)(v18 + 12);
        v20 = *(_QWORD *)v18;
        if ((_DWORD)v21 == 2)
        {
          if (*(_BYTE *)(v20 + 8) != 1 || *(_BYTE *)(v20 + 40) != 1)
            goto LABEL_74;
          if (*(_WORD *)(v18 + 120) != 94)
            goto LABEL_93;
          v22 = *(_QWORD *)(a2 + 368);
          if (!v22)
            goto LABEL_75;
          v65 = *(unsigned int *)(v20 + 16);
          if ((int)v65 < 1)
          {
            v65 = -(int)v65;
            if (v65 >= *(unsigned int *)(v22 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x198083DA0);
            }
            v22 += 16;
            v12 = &v77;
            v13 = 31;
          }
          else if (v65 >= *(_DWORD *)(v22 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198083D98);
          }
          if (*(unsigned __int8 *)(*(_QWORD *)v22 + 2 * v65 + 1) <= 2u)
LABEL_93:
            LODWORD(v22) = 1;
          else
LABEL_74:
            LODWORD(v22) = 0;
LABEL_75:
          v23 = v20 + 64;
          goto LABEL_17;
        }
      }
      if (!v21)
        goto LABEL_29;
      LODWORD(v22) = 0;
      v23 = v20 + 32 * v21;
LABEL_17:
      v24 = *(_QWORD *)(a2 + 144);
      v25 = *(_QWORD *)(a2 + 112);
      v26 = v20;
      do
      {
        v27 = *(char *)(v26 + 8);
        if (v27 <= 0xD)
        {
          if (((1 << v27) & 0x31C2) != 0)
          {
            v28 = *(_DWORD *)(v26 + 16);
            if (v28 <= 0xFFFFFFDF && v28 - 1 >= 0x20 && (v28 & 0x80000000) != 0)
            {
              v30 = -v28;
              do
              {
                v29 = (unsigned __int16)v30;
                v30 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v30);
              }
              while (v30);
              if (-(int)v29 >= 0xFFFFFFE0)
              {
                v63 = v29 + 31;
                v64 = (char)-(char)v29;
                v50 = (v29 + 32);
                if ((v63 & 0x60) != 0)
                  v50 = v64;
              }
              else
              {
                LODWORD(v77) = -(int)v29;
                v48 = *(_BYTE *)(v25 + v29);
                v49 = v48 & 0x7F;
                if (v49 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v77);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(a2 + 248));
                  __break(0xC471u);
                  JUMPOUT(0x198083BE8);
                }
                if ((v48 & 0x60) != 0)
                  v50 = (char)(31 - v49);
                else
                  v50 = v49 + 1;
              }
              *(_DWORD *)(v26 + 16) = v50;
            }
          }
          else if (v27 == 11)
          {
            v32 = *(_DWORD *)(v26 + 16);
            if (v32 <= 0xFFFFFFDF && v32 - 1 >= 0x20 && (v32 & 0x80000000) != 0)
            {
              v51 = -v32;
              do
              {
                v52 = (unsigned __int16)v51;
                v51 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v51);
              }
              while (v51);
              if (-(int)v52 >= 0xFFFFFFE0)
              {
                v66 = v52 + 31;
                v67 = (char)-(char)v52;
                v55 = (v52 + 32);
                if ((v66 & 0x60) != 0)
                  v55 = v67;
              }
              else
              {
                LODWORD(v77) = -(int)v52;
                v53 = *(_BYTE *)(v25 + v52);
                v54 = v53 & 0x7F;
                if (v54 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v77);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(a2 + 248));
                  __break(0xC471u);
                  JUMPOUT(0x198083C94);
                }
                if ((v53 & 0x60) != 0)
                  v55 = (char)(31 - v54);
                else
                  v55 = v54 + 1;
              }
              *(_DWORD *)(v26 + 16) = v55;
            }
            v33 = *(_DWORD *)(v26 + 20);
            if (v33 <= 0xFFFFFFDF && v33 - 1 >= 0x20 && (v33 & 0x80000000) != 0)
            {
              v34 = -v33;
              do
              {
                v35 = (unsigned __int16)v34;
                v34 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v34);
              }
              while (v34);
              if (-(int)v35 >= 0xFFFFFFE0)
              {
                v68 = v35 + 31;
                v69 = (char)-(char)v35;
                v38 = (v35 + 32);
                if ((v68 & 0x60) != 0)
                  v38 = v69;
              }
              else
              {
                LODWORD(v77) = -(int)v35;
                v36 = *(_BYTE *)(v25 + v35);
                v37 = v36 & 0x7F;
                if (v37 == 127)
                {
                  WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v77);
                  WTF::dataLog<char [7]>();
                  WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(a2 + 248));
                  __break(0xC471u);
                  JUMPOUT(0x198083CC8);
                }
                if ((v36 & 0x60) != 0)
                  v38 = (char)(31 - v37);
                else
                  v38 = v37 + 1;
              }
              *(_DWORD *)(v26 + 20) = v38;
            }
          }
        }
        v26 += 32;
      }
      while (v26 != v23);
      if ((_DWORD)v22)
      {
        v56 = *(_DWORD *)(v18 + 12);
        if (!v56)
        {
          __break(0xC471u);
          JUMPOUT(0x198083D88);
        }
        if (*(_BYTE *)(v20 + 8) == 1)
        {
          if (v56 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198083D90);
          }
          if (*(_BYTE *)(v20 + 40) == 1 && *(_DWORD *)(v20 + 16) == *(_DWORD *)(v20 + 48))
          {
            v57 = v8;
            v77 = (WTF *)v79;
            v78 = 3;
            v79[12] = 0;
            v80 = 0;
            v81 &= 0xFCu;
            JSC::B3::Air::Inst::operator=(v18, &v77, a3, (uint64_t)&v77, 31, a6, a7, a8);
            v61 = v77;
            if (v79 != (_QWORD *)v77 && v77)
            {
              v77 = 0;
              LODWORD(v78) = 0;
              WTF::fastFree((unint64_t)v61, v58, a3, v59, v60, a6, a7, a8);
            }
            v8 = v57;
            v12 = &v77;
            v13 = 31;
          }
        }
      }
LABEL_29:
      ++v17;
      v31 = *(unsigned int *)(v16 + 20);
    }
    while (v17 < v31);
    v39 = *(unsigned int **)(v16 + 8);
    a3 = (unint64_t)&v39[32 * v31];
    if ((_DWORD)v31)
    {
      v40 = 0;
      v41 = 0;
      v42 = &v39[32 * v31];
      v43 = (unint64_t)v42;
      do
      {
        v44 = &v39[v40];
        if (*(_QWORD *)&v39[v40 + 28])
          v45 = 0;
        else
          v45 = LOWORD(v39[v40 + 30]) == 0;
        if (v45 && (*((_BYTE *)v44 + 122) & 3) == 0)
        {
          v76 = v15;
          v70 = v8;
          v71 = v43;
          v72 = a3;
          if (!v39[v40 + 3])
          {
            if (v43 == *(_QWORD *)(v16 + 8) + ((unint64_t)*(unsigned int *)(v16 + 20) << 7))
            {
              v71 = (unint64_t)&v39[v40];
            }
            else if (v44 != v42)
            {
              v74 = v42;
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v42, v44, v43, (uint64_t)&v77, 31, a6, a7, a8);
              v71 += (char *)&v39[v40] - (char *)v74;
            }
            v73 = *(_QWORD *)&v39[v40];
            if (&v39[v40 + 4] != (unsigned int *)v73 && v73)
            {
              v75 = &v39[v40];
              *(_QWORD *)v75 = 0;
              v75[2] = 0;
              WTF::fastFree(v73, v44, a3, (uint64_t)v12, v13, a6, a7, a8);
            }
            v42 = &v39[v40 + 32];
            ++v41;
          }
          a3 = v72;
          v43 = v71;
          v8 = v70;
          v12 = &v77;
          v13 = 31;
          v15 = v76;
        }
        v40 += 32;
      }
      while ((unint64_t)&v39[v40] < a3);
      v39 = *(unsigned int **)(v16 + 8);
      v46 = *(_DWORD *)(v16 + 20);
      a3 = v43;
    }
    else
    {
      v46 = 0;
      v41 = 0;
      v42 = &v39[32 * v31];
    }
LABEL_54:
    v47 = &v39[32 * (unint64_t)v46];
    if (v42 != v47)
    {
      v62 = v8;
      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v42, v47, a3, (uint64_t)&v77, 31, a6, a7, a8);
      v13 = 31;
      v12 = &v77;
      v8 = v62;
      v46 = *(_DWORD *)(v16 + 20);
    }
    *(_DWORD *)(v16 + 20) = v46 - v41;
    v15 = (v15 + 1);
    v14 = *(unsigned int *)(a1 + 108);
    if (v14 > v15)
    {
      while (!*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v15))
      {
        if (v14 == ++v15)
        {
          v15 = *(unsigned int *)(a1 + 108);
          break;
        }
      }
    }
  }
  while ((_DWORD)v8 != (_DWORD)v15);
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(uint64_t *a1, uint64_t a2, WTF::BitVector *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::BitVector *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t **v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int *v90;
  unint64_t v91;
  unsigned int *v92;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t **v107;
  WTF::BitVector *v108;
  char v110;
  __int16 v111;
  unsigned int v112;
  char v113;
  __int128 v114;
  uint64_t v115;
  _BYTE v116[1088];
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD v120[12];
  _QWORD v121[2];
  unsigned int *v122;
  uint64_t **v123;
  uint64_t v124;
  uint64_t *v125;
  WTF::BitVector *v126;
  __int128 *v127;
  unsigned int *v128;
  _DWORD *v129;
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[3];

  v117 = 0;
  v107 = (uint64_t **)a2;
  v9 = *(unsigned int *)(a2 + 140);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t)(a1 + 1);
    v11 = 2 * v9;
    v12 = *(unsigned __int16 **)(a2 + 128);
    do
    {
      v13 = *v12;
      LODWORD(v118) = -(int)v13;
      v14 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x8000000000000000) != 0)
        v15 = 63;
      else
        v15 = *(_QWORD *)(2 * v14);
      if (v15 <= v13)
      {
        WTF::BitVector::resizeOutOfLine(this, v13 + 1, 0);
        v14 = *(_QWORD *)this;
      }
      if (v14 >= 0)
        v16 = (WTF::BitVector *)(2 * v14 + 8);
      else
        v16 = this;
      *(_QWORD *)((char *)v16 + ((v13 >> 3) & 0x1FF8)) |= 1 << v13;
      v17 = *a1;
      v18 = JSC::B3::Air::TmpWidth::requiredWidth(v10, -(int)v13);
      v19 = 16;
      if (v18 == 3)
        v19 = 8;
      if (v18 >= 3)
        v20 = v19;
      else
        v20 = 4;
      v122 = JSC::B3::Air::Code::addStackSlot(v17, v20, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v114, &v117, (int *)&v118, &v122, v21, v22, v23, v24);
      ++v12;
      v11 -= 2;
    }
    while (v11);
  }
  v25 = *a1;
  *(_QWORD *)&v114 = v25;
  *((_QWORD *)&v114 + 1) = v116;
  v115 = 8;
  v105 = *(unsigned int *)(v25 + 108);
  if ((_DWORD)v105)
  {
    v26 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v25 + 96) + 8 * v26))
    {
      if (v105 == ++v26)
        goto LABEL_126;
    }
    if ((_DWORD)v105 != (_DWORD)v26)
    {
      LODWORD(v27) = *(_DWORD *)(v25 + 108);
      LODWORD(v28) = v26;
      v108 = this;
      v104 = v25;
      do
      {
        if (v27 <= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x1980848C4);
        }
        v106 = v28;
        v29 = *(_QWORD *)(*(_QWORD *)(v25 + 96) + 8 * v28);
        v113 = 0;
        v112 = 0;
        if (*(_DWORD *)(v29 + 20))
        {
          v30 = 0;
          do
          {
            v31 = v30;
            v32 = *(_QWORD *)(v29 + 8);
            v33 = (_DWORD *)(v32 + ((unint64_t)v30 << 7));
            v111 = 0;
            v110 = 0;
            v122 = (unsigned int *)&v117;
            v123 = (uint64_t **)v33;
            v124 = (uint64_t)a1;
            v125 = (uint64_t *)((char *)&v111 + 1);
            v126 = (WTF::BitVector *)&v111;
            v127 = (__int128 *)&v110;
            v34 = (__int16 *)(v33 + 30);
            if ((*((__int16 *)v33 + 60) - 446) > 5)
            {
              v35 = v33[3];
              if ((_DWORD)v35)
              {
                v36 = 0;
                v37 = 0;
                v38 = (char *)&JSC::B3::Air::g_formTable
                    + 21 * *((__int16 *)v33 + 60)
                    + ((unint64_t)((v35 - 1) * v35) >> 1);
                v39 = 32 * v35;
                do
                {
                  if (v37 >= v33[3])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980848ACLL);
                  }
                  if ((*v38 >> 5) - 1 >= 5u)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980847B8);
                  }
                  ++v37;
                  ++v38;
                  v36 += 32;
                }
                while (v39 != v36);
              }
            }
            else
            {
              v119 = (uint64_t)&v118;
              v120[0] = &v122;
              v131[1] = &v118;
              if (*v34 == 448)
              {
                v132[1] = &v118;
                if (!v33[3])
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980848BCLL);
                }
                (*(void (**)(_QWORD, _DWORD *, _QWORD *))(***(_QWORD ***)v33 + 16))(**(_QWORD **)v33, v33, v132);
              }
              else
              {
                switch(*v34)
                {
                  case 446:
                    break;
                  case 447:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v33, (uint64_t)v131);
                    break;
                  case 449:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v33, (uint64_t)v131);
                    break;
                  case 450:
                    v132[0] = v131;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v33, (uint64_t)v132);
                    break;
                  case 451:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v33, (uint64_t)v131);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v33 + 30), "\n");
                    __break(0xC471u);
                    JUMPOUT(0x198084884);
                }
              }
            }
            if ((_BYTE)v111 && HIBYTE(v111))
              *v34 = 94;
            if (v110)
            {
              v40 = *v34;
              if ((v40 - 107) >= 2)
              {
                if (v40 == 90 || v40 == 94)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980847E8);
                }
                __break(0xC471u);
                JUMPOUT(0x198084808);
              }
              v41 = *(_DWORD *)(*a1 + 180);
              *(_DWORD *)(*a1 + 180) = v41 + 1;
              LODWORD(v132[0]) = -33 - v41;
              v42 = *(_QWORD *)v108;
              if ((*(_QWORD *)v108 & 0x8000000000000000) != 0)
                v43 = 63;
              else
                v43 = *(_QWORD *)(2 * v42);
              v50 = (v41 + 33);
              if (v43 <= v50)
              {
                WTF::BitVector::resizeOutOfLine(v108, v50 + 1, 0);
                v42 = *(_QWORD *)v108;
              }
              if (v42 >= 0)
                v51 = 2 * v42 + 8;
              else
                v51 = (uint64_t)v108;
              *(_QWORD *)(v51 + ((v50 >> 3) & 0x1FFFFFF8)) |= 1 << v50;
              v52 = v33[3];
              if ((_DWORD)v52 == v33[2])
              {
                WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v33, (unsigned int *)v132, (uint64_t)this, a4, a5, a6, a7, a8);
                v55 = v33[3];
              }
              else
              {
                v53 = *(_QWORD *)v33 + 32 * v52;
                v54 = v132[0];
                *(_QWORD *)v53 = 0;
                *(_WORD *)(v53 + 8) = 513;
                *(_DWORD *)(v53 + 12) = 1;
                *(_QWORD *)(v53 + 16) = v54;
                *(_BYTE *)(v53 + 24) = 0;
                v55 = v33[3] + 1;
                v33[3] = v55;
              }
              if (v55 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198084798);
              }
              v56 = *(_QWORD *)(v32 + (v31 << 7) + 112);
              v118 = v120;
              v121[0] = v56;
              LODWORD(v121[1]) = 0;
              v122 = (unsigned int *)v112;
              v123 = &v125;
              v119 = 3;
              v124 = 3;
              v130[0] = v56;
              *(_DWORD *)((char *)v130 + 7) = *(_DWORD *)((char *)v121 + 7);
              v57 = HIDWORD(v115);
              if (HIDWORD(v115) == (_DWORD)v115)
              {
                v73 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114 + 8, HIDWORD(v115) + 1, (unint64_t)&v122, a4, a5, a6, a7, a8);
                v74 = HIDWORD(v115);
                v75 = *((_QWORD *)&v114 + 1);
                v76 = *((_QWORD *)&v114 + 1) + 136 * HIDWORD(v115);
                *(_QWORD *)v76 = *(_QWORD *)v73;
                v77 = (_OWORD *)(v76 + 24);
                *(_QWORD *)(v76 + 8) = v76 + 24;
                *(_QWORD *)(v76 + 16) = 3;
                v78 = *(__int128 **)(v73 + 8);
                if (v78 == (__int128 *)(v73 + 24))
                {
                  v79 = *(unsigned int *)(v73 + 20);
                  if ((_DWORD)v79)
                  {
                    v80 = 32 * v79;
                    do
                    {
                      v81 = *v78;
                      v82 = v78[1];
                      v78 += 2;
                      *v77 = v81;
                      v77[1] = v82;
                      v77 += 2;
                      v80 -= 32;
                    }
                    while (v80);
                  }
                }
                else
                {
                  *(_QWORD *)(v73 + 8) = v73 + 24;
                  *(_QWORD *)(v76 + 8) = v78;
                  v84 = *(_DWORD *)(v73 + 16);
                  *(_DWORD *)(v73 + 16) = 3;
                  *(_DWORD *)(v76 + 16) = v84;
                }
                v68 = (_QWORD *)(v73 + 120);
                v83 = *(_DWORD *)(v73 + 20);
                *(_DWORD *)(v73 + 20) = 0;
                *(_DWORD *)(v76 + 20) = v83;
                v67 = v75 + 136 * v74 + 120;
              }
              else
              {
                v58 = *((_QWORD *)&v114 + 1);
                v59 = *((_QWORD *)&v114 + 1) + 136 * HIDWORD(v115);
                *(_QWORD *)v59 = v112;
                v60 = (_OWORD *)(v59 + 24);
                *(_QWORD *)(v59 + 8) = v59 + 24;
                *(_QWORD *)(v59 + 16) = 3;
                v61 = v123;
                if (v123 == &v125)
                {
                  if (HIDWORD(v124))
                  {
                    v62 = 32 * HIDWORD(v124);
                    v63 = &v125;
                    do
                    {
                      v64 = *(_OWORD *)v63;
                      v65 = *((_OWORD *)v63 + 1);
                      v63 += 4;
                      *v60 = v64;
                      v60[1] = v65;
                      v60 += 2;
                      v62 -= 32;
                    }
                    while (v62);
                  }
                }
                else
                {
                  v123 = &v125;
                  *(_QWORD *)(v59 + 8) = v61;
                  v72 = v124;
                  LODWORD(v124) = 3;
                  *(_DWORD *)(v59 + 16) = v72;
                }
                v66 = HIDWORD(v124);
                HIDWORD(v124) = 0;
                *(_DWORD *)(v59 + 20) = v66;
                v67 = v58 + 136 * v57 + 120;
                v68 = v130;
              }
              v69 = *v68;
              *(_DWORD *)(v67 + 7) = *(_DWORD *)((char *)v68 + 7);
              *(_QWORD *)v67 = v69;
              ++HIDWORD(v115);
              v70 = (unint64_t)v123;
              if (&v125 != v123 && v123)
              {
                v123 = 0;
                LODWORD(v124) = 0;
                WTF::fastFree(v70, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
              }
              v71 = (unint64_t)v118;
              if (v120 != v118 && v118)
              {
                v118 = 0;
                LODWORD(v119) = 0;
                WTF::fastFree(v71, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
              }
            }
            else
            {
              v122 = (unsigned int *)&v117;
              v123 = v107;
              v124 = (uint64_t)&v113;
              v125 = a1;
              v126 = v108;
              v127 = &v114;
              v128 = &v112;
              v129 = v33;
              v132[0] = &v122;
              if ((*v34 - 446) > 5)
              {
                v44 = v33[3];
                if ((_DWORD)v44)
                {
                  v45 = 0;
                  v46 = 0;
                  v47 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                      + 21 * *v34
                      + ((unint64_t)((v44 - 1) * v44) >> 1);
                  v48 = 32 * v44;
                  do
                  {
                    if (v46 >= v33[3])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980848B4);
                    }
                    v49 = *v47;
                    if ((v49 >> 5) - 1 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980848A4);
                    }
                    ++v46;
                    ++v47;
                    v45 += 32;
                  }
                  while (v48 != v45);
                }
              }
              else
              {
                v119 = (uint64_t)&v118;
                v120[0] = v132;
              }
            }
            v30 = v112 + 1;
            v112 = v30;
          }
          while (v30 < *(_DWORD *)(v29 + 20));
        }
        JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v114, (JSC::B3::Air::BasicBlock *)v29, (uint64_t)this, a4, a5, a6, a7, a8);
        if (v113)
        {
          v85 = *(_QWORD *)(v29 + 8);
          v86 = *(unsigned int *)(v29 + 20);
          v87 = v85 + (v86 << 7);
          if ((_DWORD)v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = (unsigned int *)(v85 + (v86 << 7));
            v91 = (unint64_t)v90;
            do
            {
              v92 = (unsigned int *)(v85 + v88);
              if ((*(__int16 *)(v85 + v88 + 120) - 107) <= 6
                && ((1 << (*(_WORD *)(v85 + v88 + 120) - 107)) & 0x43) != 0
                && v92[3] == 2)
              {
                v94 = *(_QWORD *)v92;
                if (*(_BYTE *)(*(_QWORD *)v92 + 8) == 1)
                {
                  v95 = *(_WORD *)(v85 + v88 + 120) != 94 && *(_BYTE *)(v94 + 40) == 1;
                  if (v95 && *(_DWORD *)(v94 + 16) == *(_DWORD *)(v94 + 48))
                  {
                    if (v91 == *(_QWORD *)(v29 + 8) + ((unint64_t)*(unsigned int *)(v29 + 20) << 7))
                    {
                      v91 = v85 + v88;
                    }
                    else if (v92 != v90)
                    {
                      v96 = v91;
                      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v90, v92, v91, a4, a5, a6, a7, a8);
                      v91 = v96 + v85 + v88 - (_QWORD)v90;
                      v94 = *(_QWORD *)(v85 + v88);
                    }
                    if (v85 + v88 + 16 != v94 && v94)
                    {
                      v97 = v85 + v88;
                      *(_QWORD *)v97 = 0;
                      *(_DWORD *)(v97 + 8) = 0;
                      v98 = v91;
                      WTF::fastFree(v94, v92, (uint64_t)this, a4, a5, a6, a7, a8);
                      v91 = v98;
                    }
                    v90 = (unsigned int *)(v85 + v88 + 128);
                    ++v89;
                  }
                }
              }
              v88 += 128;
            }
            while (v85 + v88 < v87);
            v85 = *(_QWORD *)(v29 + 8);
            LODWORD(v86) = *(_DWORD *)(v29 + 20);
            v87 = v91;
          }
          else
          {
            v89 = 0;
            v90 = (unsigned int *)(v85 + (v86 << 7));
          }
          a2 = v85 + ((unint64_t)v86 << 7);
          if (v90 != (unsigned int *)a2)
          {
            WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v90, (unsigned int *)a2, v87, a4, a5, a6, a7, a8);
            LODWORD(v86) = *(_DWORD *)(v29 + 20);
          }
          *(_DWORD *)(v29 + 20) = v86 - v89;
        }
        v28 = (v106 + 1);
        v25 = v104;
        v27 = *(unsigned int *)(v104 + 108);
        if (v27 > v28)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v104 + 96) + 8 * v28))
          {
            if (v27 == ++v28)
            {
              LODWORD(v28) = *(_DWORD *)(v104 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v105 != (_DWORD)v28);
      v99 = (_BYTE *)*((_QWORD *)&v114 + 1);
      if (HIDWORD(v115))
      {
        v100 = 136 * HIDWORD(v115);
        v101 = *((_QWORD *)&v114 + 1) + 24;
        do
        {
          v102 = *(_QWORD *)(v101 - 16);
          if (v101 != v102 && v102 != 0)
          {
            *(_QWORD *)(v101 - 16) = 0;
            *(_DWORD *)(v101 - 8) = 0;
            WTF::fastFree(v102, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
          }
          v101 += 136;
          v100 -= 136;
        }
        while (v100);
        v99 = (_BYTE *)*((_QWORD *)&v114 + 1);
      }
      if (v116 != v99 && v99)
      {
        *((_QWORD *)&v114 + 1) = 0;
        LODWORD(v115) = 0;
        WTF::fastFree((unint64_t)v99, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
      }
    }
  }
LABEL_126:
  if (v117)
    WTF::fastFree(v117 - 16, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
}

_WORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::makeWorkList(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v12[15];
  unsigned __int16 v13;

  v8 = result[8] + 1;
  v13 = v8;
  if (*((_DWORD *)result + 17) > v8)
  {
    v9 = result;
    v10 = (uint64_t)(result + 92);
    do
    {
      if (*((_DWORD *)v9 + 3) <= *(unsigned __int16 *)(*((_QWORD *)v9 + 7) + 2 * v8))
      {
      }
      else
      {
        if (*((_DWORD *)v9 + 27) <= v8)
        {
          __break(0xC471u);
          return result;
        }
        if (*(_DWORD *)(*((_QWORD *)v9 + 12) + 40 * v8))
        {
          result = WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(v12, (uint64_t *)v9 + 36, &v13, a4, a5, a6, a7, a8);
        }
        else
        {
          v11 = *((unsigned int *)v9 + 49);
          if ((_DWORD)v11 == *((_DWORD *)v9 + 48))
          {
            result = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v10, (unint64_t)&v13);
          }
          else
          {
            *(_WORD *)(*((_QWORD *)v9 + 23) + 2 * v11) = v8;
            *((_DWORD *)v9 + 49) = v11 + 1;
          }
        }
      }
      v8 = v13 + 1;
      v13 = v8;
    }
    while (*((_DWORD *)v9 + 17) > v8);
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::enableMoves(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;

  v2 = (uint64_t *)(a1 + 360);
  v6 = (unint64_t *)WTF::BitVector::begin((uint64_t *)(a1 + 360));
  v7 = v3;
  v4 = *(_QWORD *)(a1 + 360);
  if (v4 < 0)
    v5 = 63;
  else
    v5 = *(_QWORD *)(2 * v4);
  if (v3 != v5)
  {
    do
    {
      WTF::BitVector::iterator::operator++(&v6);
      LOWORD(v3) = v7;
    }
    while (v7 != v5);
    v4 = *v2;
  }
  if (v4 < 0)
    *v2 = 0x8000000000000000;
  else
    bzero((void *)(2 * v4 + 8), (unint64_t)(*(_QWORD *)(2 * v4) + 7) >> 3);
}

void JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::coalesce(uint64_t a1)
{
  unsigned int v2;
  _DWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned __int16 v13;
  unsigned int v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_DWORD *)(a1 + 324);
  if (v2)
  {
    v3 = (_DWORD *)(a1 + 324);
    v4 = (_QWORD *)(a1 + 312);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 328);
    v3 = (_DWORD *)(a1 + 340);
    v2 = *(_DWORD *)(a1 + 340);
  }
  v5 = *(unsigned int *)(*v4 + 4 * v2 - 4);
  *v3 = v2 - 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v5) = -1;
  v6 = *(_QWORD *)(a1 + 80);
  LOWORD(v7) = *(_WORD *)(v6 + 4 * v5);
  v8 = *(_QWORD *)(a1 + 144);
  do
  {
    v9 = v7;
    v7 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v7);
  }
  while (v7);
  LOWORD(v10) = *(_WORD *)(v6 + 4 * v5 + 2);
  do
  {
    v11 = v10;
    v10 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v10);
  }
  while (v10);
  v12 = *(unsigned __int16 *)(a1 + 16);
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v9;
  v14 = v13;
  if (v12 >= v11)
    v15 = v9;
  else
    v15 = v11;
  if (v13 == v15)
    goto LABEL_23;
  if (v12 >= v15)
    goto LABEL_22;
  v16 = a1 + 24;
  v17 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v16 = 2 * v17 + 8;
  v18 = *(unsigned __int16 *)(a1 + 36) * (unint64_t)v13 + v15;
  if (((*(_QWORD *)(v16 + ((v18 >> 3) & 0x3FFFFFF8)) >> v18) & 1) != 0)
  {
LABEL_22:
    v14 = v15;
LABEL_23:
    return;
  }
  v19 = v13;
  {
    *(_BYTE *)(a1 + 209) = 1;
  }
  else
  {
    v25 = a1 + 352;
    v26 = *(_QWORD *)(a1 + 352);
    if (v26 >= 0)
      v25 = 2 * v26 + 8;
    *(_QWORD *)(v25 + ((v5 >> 3) & 0x1FFFFFF8)) |= 1 << v5;
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::freeze(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 v13;

  v9 = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::takeAny((uint64_t *)(a1 + 288), a2, a3, a4, a5, a6, a7, a8);
  v13 = v9;
  v10 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 192))
  {
    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 184, (unint64_t)&v13);
    v11 = v13;
  }
  else
  {
    v11 = v9;
    *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v10) = v9;
    *(_DWORD *)(a1 + 196) = v10 + 1;
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::selectSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 v16;

  v16 = v9;
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 200);
  if (v11 >= 0)
    v12 = 2 * v11 + 8;
  else
    v12 = a1 + 200;
  *(_QWORD *)(v12 + (((unint64_t)v9 >> 3) & 0x1FF8)) &= ~(1 << v9);
  v13 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + 192))
  {
    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 184, (unint64_t)&v16);
    v10 = v16;
    v14 = v16;
  }
  else
  {
    v14 = v9;
    *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v13) = v9;
    *(_DWORD *)(a1 + 196) = v13 + 1;
  }
}

BOOL JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::addToSpill(_BOOL8 result, unsigned int a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(result + 232);
  if (*v2 >= 0)
    v2 = (uint64_t *)(2 * *v2 + 8);
  if (((*(unint64_t *)((char *)v2 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0)
    return WTF::BitVector::add((WTF::BitVector *)(result + 200), a2);
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::decrementDegree(_WORD *result, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD v15[15];
  __int16 v16;

  v16 = a2;
  v2 = *((_QWORD *)result + 7);
  v3 = *(unsigned __int16 *)(v2 + 2 * a2);
  *(_WORD *)(v2 + 2 * a2) = v3 - 1;
  if (*((_DWORD *)result + 3) == v3)
  {
    v5 = (uint64_t)result;
    v6 = a2;
    v7 = v5 + 200;
    v8 = *(_QWORD *)(v5 + 200);
    if (v8 >= 0)
      v7 = 2 * v8 + 8;
    *(_QWORD *)(v7 + ((v6 >> 3) & 0x1FF8)) &= ~(1 << v6);
    if ((_DWORD)result)
    {
      return WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(v15, (uint64_t *)(v5 + 288), &v16, v9, v10, v11, v12, v13);
    }
    else
    {
      v14 = *(unsigned int *)(v5 + 196);
      if ((_DWORD)v14 == *(_DWORD *)(v5 + 192))
      {
        return WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v5 + 184, (unint64_t)&v16);
      }
      else
      {
        *(_WORD *)(*(_QWORD *)(v5 + 184) + 2 * v14) = a2;
        *(_DWORD *)(v5 + 196) = v14 + 1;
      }
    }
  }
  return result;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::lazyEnableMovesOnValueAndAdjacents(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)(a1 + 45);
  v3 = a1[45];
  if (v3 >= 0)
    v2 = 2 * v3 + 8;
  *(_QWORD *)(v2 + (((unint64_t)a2 >> 3) & 0x1FF8)) |= 1 << a2;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::isMoveRelated(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(result + 108) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v2 = *(_QWORD *)(result + 96) + 40 * a2;
    v3 = *(unsigned int *)(v2 + 4);
    v4 = (_QWORD *)(v2 + 8);
    if ((_DWORD)v3 != 8)
      v4 = (_QWORD *)*v4;
    v5 = 0;
    while ((_DWORD)v3 != v5)
    {
      v6 = v5;
      v7 = *((_DWORD *)v4 + v5++);
      if (v7 != -1)
      {
        v8 = v6;
        goto LABEL_8;
      }
    }
    v8 = v3;
LABEL_8:
    if ((_DWORD)v3 == (_DWORD)v8)
    {
      return 0;
    }
    else
    {
      v9 = v8 | (v3 << 32);
      v10 = result + 352;
      v11 = *(_QWORD *)(result + 352);
      if (v11 >= 0)
        v10 = 2 * v11 + 8;
      while (1)
      {
        v12 = *((unsigned int *)v4 + v9);
        if (((*(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0
          || *(_DWORD *)(*(_QWORD *)(result + 296) + 4 * v12) != -1)
        {
          return 1;
        }
        v13 = HIDWORD(v9);
        if ((v8 + 1) > HIDWORD(v9))
          LODWORD(v13) = v8 + 1;
        while (1)
        {
          v14 = (v8 + 1);
          v9 = v9 & 0xFFFFFFFF00000000 | v14;
          if ((_DWORD)v13 - 1 == (_DWORD)v8)
            break;
          LODWORD(v8) = v8 + 1;
          if (*((_DWORD *)v4 + v14) != -1)
            goto LABEL_17;
        }
        LODWORD(v14) = v13;
LABEL_17:
        LODWORD(v8) = v14;
        if ((_DWORD)v3 == (_DWORD)v14)
          return 0;
      }
    }
  }
  return result;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::forEachAdjacent<JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::lazyEnableMovesOnValueAndAdjacents(unsigned short)::{lambda(unsigned short)#1}>(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[5] + 16 * a2;
  v4 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned __int16 **)v3;
    v6 = result + 20;
    v7 = (uint64_t *)(a3 + 360);
    v8 = 2 * v4;
    do
    {
      v9 = *v5;
      v10 = 2 * *v6 + 8;
      if (*v6 < 0)
        v10 = (uint64_t)(result + 20);
      v11 = v9 >> 6;
      v12 = *(_QWORD *)(v10 + 8 * (v9 >> 6));
      v13 = 1 << v9;
      if (((1 << v9) & v12) == 0 && !*(_WORD *)(result[18] + 2 * v9))
      {
        if (*v7 >= 0)
          v14 = 2 * *v7 + 8;
        else
          v14 = a3 + 360;
        *(_QWORD *)(v14 + 8 * v11) |= v13;
      }
      ++v5;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

_DWORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::enableMovesOnValue(_DWORD *result, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (result[27] <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v2 = result;
    v3 = *((_QWORD *)result + 12) + 40 * a2;
    v4 = *(unsigned int *)(v3 + 4);
    v5 = (_QWORD *)(v3 + 8);
    if ((_DWORD)v4 != 8)
      v5 = (_QWORD *)*v5;
    v6 = 0;
    while ((_DWORD)v4 != v6)
    {
      v7 = v6;
      v8 = *((_DWORD *)v5 + v6++);
      if (v8 != -1)
      {
        v9 = v7;
        goto LABEL_8;
      }
    }
    v9 = v4;
LABEL_8:
    if ((_DWORD)v4 != (_DWORD)v9)
    {
      v10 = v9 | (v4 << 32);
      v11 = (uint64_t *)(result + 88);
      do
      {
        v12 = *((unsigned int *)v5 + v10);
        if (*v11 >= 0)
          v13 = 2 * *v11 + 8;
        else
          v13 = (uint64_t)(v2 + 88);
        v14 = (v12 >> 3) & 0x1FFFFFF8;
        v15 = *(_QWORD *)(v13 + v14);
        *(_QWORD *)(v13 + v14) = v15 & ~(1 << v12);
        if (((1 << v12) & v15) != 0)
        v16 = HIDWORD(v10);
        if ((v9 + 1) > HIDWORD(v10))
          LODWORD(v16) = v9 + 1;
        while (1)
        {
          v17 = (v9 + 1);
          v10 = v10 & 0xFFFFFFFF00000000 | v17;
          if ((_DWORD)v16 - 1 == (_DWORD)v9)
            break;
          LODWORD(v9) = v9 + 1;
          if (*((_DWORD *)v5 + v17) != -1)
            goto LABEL_21;
        }
        LODWORD(v17) = v16;
LABEL_21:
        LODWORD(v9) = v17;
      }
      while ((_DWORD)v4 != (_DWORD)v17);
    }
  }
  return result;
}

_DWORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::OrderedMoveSet::returnMove(_DWORD *result, unsigned int a2)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v2 = result;
  v8 = a2;
  if (result[12] <= a2)
  {
    v3 = result + 11;
    v6 = result[11];
    v5 = result + 8;
    LODWORD(v4) = result[11];
    if ((_DWORD)v4 != result[10])
    {
      *(_DWORD *)(*v5 + 4 * v6) = a2;
      goto LABEL_6;
    }
    v7 = v6 + 1;
LABEL_9:
    result = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v7, (unint64_t)&v8);
    *(_DWORD *)(*v5 + 4 * *v3) = *result;
    goto LABEL_6;
  }
  v3 = result + 7;
  v4 = result[7];
  v5 = result + 4;
  if (result[7] == result[6])
  {
    v7 = v4 + 1;
    goto LABEL_9;
  }
  *(_DWORD *)(*v5 + 4 * v4) = a2;
LABEL_6:
  ++*v3;
  *(_DWORD *)(*v2 + 4 * v8) = v4;
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::addWorkList(uint64_t result, unsigned int a2)
{
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  v11 = a2;
  if (*(unsigned __int16 *)(result + 16) < a2)
  {
    v2 = a2;
    v3 = result;
    if (*(_DWORD *)(result + 12) > *(unsigned __int16 *)(*(_QWORD *)(result + 56) + 2 * a2))
    {
      if ((result & 1) == 0)
      {
        result = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove((uint64_t *)(v3 + 288), v2, v4, v5, v6, v7, v8, v9);
        v10 = *(unsigned int *)(v3 + 196);
        if ((_DWORD)v10 == *(_DWORD *)(v3 + 192))
        {
          return (uint64_t)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v3 + 184, (unint64_t)&v11);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(v3 + 184) + 2 * v10) = v2;
          *(_DWORD *)(v3 + 196) = v10 + 1;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::canBeSafelyCoalesced(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 **v17;
  unsigned __int16 **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _WORD v49[64];

  v3 = *(unsigned __int16 *)(a1 + 16);
  LOBYTE(v4) = a2;
  if (v3 >= a2)
  {
    v36 = *(_QWORD *)(a1 + 40) + 16 * a3;
    v37 = *(unsigned int *)(v36 + 12);
    if ((_DWORD)v37)
    {
      v38 = *(unsigned __int16 **)v36;
      v39 = (uint64_t *)(a1 + 160);
      v40 = 2 * v37;
      while (1)
      {
        v41 = *v38;
        if (v3 < v41)
        {
          v42 = *v39 >= 0 ? 2 * *v39 + 8 : a1 + 160;
          if (((*(_QWORD *)(v42 + ((v41 >> 3) & 0x1FF8)) >> v41) & 1) == 0
            && !*(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v41)
            && *(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v41))
          {
            v43 = v41 + *(unsigned __int16 *)(a1 + 36) * (unint64_t)a2;
            v44 = *(_QWORD *)(a1 + 24);
            v45 = v44 >= 0 ? 2 * v44 + 8 : a1 + 24;
            if (((*(_QWORD *)(v45 + ((v43 >> 3) & 0x3FFFFFF8)) >> v43) & 1) == 0)
              break;
          }
        }
        ++v38;
        v13 = 1;
        v40 -= 2;
        if (!v40)
          return v13 & 1;
      }
      goto LABEL_14;
    }
LABEL_22:
    v13 = 1;
    return v13 & 1;
  }
  v5 = *(uint64_t **)(a1 + 232);
  v6 = *v5;
  v7 = (unint64_t *)(2 * *v5);
  if (*v5 < 0)
    v8 = 63;
  else
    v8 = *v7;
  if (v8 <= a2)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v9 = v7 + 1;
    if (v6 < 0)
      v9 = *(_QWORD **)(a1 + 232);
    v10 = (*(_QWORD *)((char *)v9 + (((unint64_t)a2 >> 3) & 0x1FF8)) >> a2) & 1;
  }
  if (v6 < 0)
    v11 = 63;
  else
    v11 = *v7;
  if (v11 <= a3)
  {
    if ((v10 & 1) != 0)
    {
LABEL_14:
      v13 = 0;
      return v13 & 1;
    }
  }
  else
  {
    v12 = (uint64_t *)(v7 + 1);
    if (v6 >= 0)
      v5 = v12;
    if (((v10 ^ (*(unint64_t *)((char *)v5 + (((unint64_t)a3 >> 3) & 0x1FF8)) >> a3)) & 1) != 0)
      goto LABEL_14;
  }
  v15 = *(unsigned int *)(a1 + 12);
  if (v15 >= 0x41)
  {
    __break(0xC471u);
LABEL_83:
    __break(1u);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 40);
    v17 = (unsigned __int16 **)(v16 + 16 * a2);
    v18 = (unsigned __int16 **)(v16 + 16 * a3);
    v19 = *((unsigned int *)v17 + 3);
    v20 = *((unsigned int *)v18 + 3);
    v4 = v20 + v19;
    if (v15 > (int)v20 + (int)v19)
      goto LABEL_22;
    v21 = 0;
    if ((_DWORD)v19)
    {
      v22 = *v17;
      v23 = a1 + 160;
      v24 = *(_QWORD *)(a1 + 160);
      if (v24 >= 0)
        v23 = 2 * v24 + 8;
      for (i = 2 * v19; i; i -= 2)
      {
        v26 = *v22;
        --v4;
        if (((*(_QWORD *)(v23 + ((v26 >> 3) & 0x1FF8)) >> v26) & 1) != 0
          || *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v26)
          || v15 > *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v26))
        {
          if (v21 + v4 < v15)
            goto LABEL_22;
        }
        else
        {
          if (v21 >= 0x40)
            goto LABEL_83;
          v49[v21++] = v26;
          if (v21 >= v15)
            goto LABEL_14;
        }
        ++v22;
      }
    }
    if ((_DWORD)v20)
    {
      v27 = *v18;
      v28 = a1 + 160;
      v29 = *(_QWORD *)(a1 + 160);
      if (v29 >= 0)
        v28 = 2 * v29 + 8;
      if (v21)
      {
        v30 = v21;
        v31 = &v27[v20];
        while (1)
        {
          v32 = *v27;
          --v4;
          if (((*(_QWORD *)(v28 + ((v32 >> 3) & 0x1FF8)) >> v32) & 1) != 0
            || *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v32)
            || v15 > *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v32))
          {
            goto LABEL_44;
          }
          v33 = v49;
          v34 = 2 * v21;
          while (*v33 != (_DWORD)v32)
          {
            ++v33;
            v34 -= 2;
            if (!v34)
            {
              v33 = &v49[v21];
              break;
            }
          }
          if (v21 != v33 - v49)
          {
LABEL_44:
            if (v30 + v4 < v15)
              goto LABEL_80;
          }
          else
          {
            if (v30 >= 0x40)
              goto LABEL_83;
            v49[v30++] = v32;
            if (v30 >= v15)
              goto LABEL_54;
          }
          if (++v27 == v31)
            goto LABEL_84;
        }
      }
      v46 = 0;
      v47 = 2 * v20;
      --v4;
      do
      {
        v48 = *v27;
        if (((*(_QWORD *)(v28 + ((v48 >> 3) & 0x1FF8)) >> v48) & 1) != 0
          || *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v48)
          || v15 > *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v48))
        {
          if (v46 + v4 < v15)
          {
LABEL_80:
            v35 = 0;
            LOBYTE(v4) = 1;
            goto LABEL_81;
          }
        }
        else
        {
          if (v46 > 0x3F)
            goto LABEL_83;
          v49[v46++] = v48;
          if (v46 >= v15)
          {
LABEL_54:
            v35 = 0;
            LOBYTE(v4) = 0;
            goto LABEL_81;
          }
        }
        ++v27;
        --v4;
        v47 -= 2;
      }
      while (v47);
    }
  }
LABEL_84:
  v35 = 1;
LABEL_81:
  v13 = v35 | v4;
  return v13 & 1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::combine(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];

  v8 = a3;
  v11 = (uint64_t *)(a1 + 288);
  if (!WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 288), a3, a3, a4, a5, a6, a7, a8))
  {
    v30 = a1 + 200;
    v31 = *(_QWORD *)(a1 + 200);
    if (v31 >= 0)
      v30 = 2 * v31 + 8;
    *(_QWORD *)(v30 + (((unint64_t)v8 >> 3) & 0x1FF8)) &= ~(1 << v8);
  }
  *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v8) = a2;
  if (*(_DWORD *)(a1 + 108) <= v8)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(a1 + 96) + 40 * v8;
  v13 = *(unsigned int *)(v12 + 4);
  v14 = (_QWORD *)(v12 + 8);
  if ((_DWORD)v13 != 8)
    v14 = (_QWORD *)*v14;
  v15 = 0;
  while ((_DWORD)v13 != v15)
  {
    v16 = v15;
    v17 = *((_DWORD *)v14 + v15++);
    if (v17 != -1)
    {
      v18 = v16;
      goto LABEL_9;
    }
  }
  v18 = v13;
LABEL_9:
  if ((_DWORD)v13 != (_DWORD)v18)
  {
    v19 = v18 | (v13 << 32);
    v20 = a2;
    while (*(_DWORD *)(a1 + 108) > a2)
    {
      WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v32, (unsigned int *)(*(_QWORD *)(a1 + 96) + 40 * a2), *((_DWORD *)v14 + v19));
      v21 = HIDWORD(v19);
      if ((v18 + 1) > HIDWORD(v19))
        LODWORD(v21) = v18 + 1;
      while (1)
      {
        v22 = (v18 + 1);
        v19 = v19 & 0xFFFFFFFF00000000 | v22;
        if ((_DWORD)v21 - 1 == (_DWORD)v18)
          break;
        LODWORD(v18) = v18 + 1;
        if (*((_DWORD *)v14 + v22) != -1)
          goto LABEL_16;
      }
      LODWORD(v22) = v21;
LABEL_16:
      LODWORD(v18) = v22;
      if ((_DWORD)v13 == (_DWORD)v22)
        goto LABEL_17;
    }
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x1980858A8);
  }
  v20 = a2;
LABEL_17:
  if (*(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 2 * v20))
  {
    result = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove(v11, a2, v24, v25, v26, v27, v28, v29);
    if ((_DWORD)result)
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::addBias(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _QWORD v23[3];
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = a2;
  v24 = a3;
  v11 = *(unsigned __int16 *)(a1 + 16);
  if (v11 < a2)
  {
    v26 = 0x800000000;
    v27 = (WTF *)-1;
    v28 = -1;
    WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v23, (uint64_t *)(a1 + 72), &v25, (uint64_t)&v26, a5, a6, a7, a8);
    WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v22, (unsigned int *)(v23[0] + 8), a3);
    if (HIDWORD(v26) != 8)
      WTF::fastFree((unint64_t)v27, v12, v13, v14, a5, a6, a7, a8);
    v11 = *(unsigned __int16 *)(a1 + 16);
  }
  if (v11 < a3)
  {
    v26 = 0x800000000;
    v27 = (WTF *)-1;
    v28 = -1;
    WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v23, (uint64_t *)(a1 + 72), &v24, (uint64_t)&v26, a5, a6, a7, a8);
    WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v22, (unsigned int *)(v23[0] + 8), a2);
    if (HIDWORD(v26) != 8)
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
  }
}

_WORD *JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::forEachAdjacent<JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::combine(unsigned short,unsigned short)::{lambda(unsigned short)#1}>(_WORD *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  unsigned __int16 *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  v4 = *((_QWORD *)result + 5) + 16 * a2;
  v5 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    v7 = *(unsigned __int16 **)v4;
    v8 = (uint64_t *)(result + 80);
    v9 = 2 * v5;
    do
    {
      v10 = *v7;
      if (*v8 >= 0)
        v11 = 2 * *v8 + 8;
      else
        v11 = (uint64_t)v8;
      if (((*(_QWORD *)(v11 + ((v10 >> 3) & 0x1FF8)) >> v10) & 1) == 0 && !*(_WORD *)(*((_QWORD *)v6 + 18) + 2 * v10))
      ++v7;
      v9 -= 2;
    }
    while (v9);
  }
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::combine(unsigned short,unsigned short)::{lambda(unsigned short)#1}::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  _WORD *result;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  if (!(_DWORD)result)
  v6 = *(unsigned __int16 *)(a1 + 8);
  if (*(unsigned __int16 *)(v4 + 16) < v6)
    ++*(_WORD *)(*(_QWORD *)(v4 + 56) + 2 * v6);
  return result;
}

BOOL JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::addEdgeDistinctWithoutDegreeChange(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  unsigned __int16 v28;
  __int16 v29;

  v29 = a2;
  v28 = a3;
  v3 = (uint64_t *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int16 *)(a1 + 36);
  v6 = a3 + *(unsigned __int16 *)(a1 + 36) * (unint64_t)a2;
  if (v4 >= 0)
    v7 = 2 * v4 + 8;
  else
    v7 = a1 + 24;
  v8 = (v6 >> 3) & 0x3FFFFFF8;
  v9 = *(_QWORD *)(v7 + v8);
  v10 = 1 << v6;
  v11 = v10 & v9;
  *(_QWORD *)(v7 + v8) = v10 | v9;
  v12 = *(_DWORD *)(a1 + 32);
  if ((v10 & v9) == 0)
    ++v12;
  v13 = a2 + v5 * (unint64_t)a3;
  if (*v3 >= 0)
    v14 = 2 * *v3 + 8;
  else
    v14 = a1 + 24;
  v15 = (v13 >> 3) & 0x3FFFFFF8;
  v16 = 1 << v13;
  v17 = *(_QWORD *)(v14 + v15);
  *(_QWORD *)(v14 + v15) = v17 | v16;
  if ((v17 & v16) == 0)
    ++v12;
  *(_DWORD *)(a1 + 32) = v12;
  if (!v11)
  {
    v18 = a2;
    if (*(unsigned __int16 *)(a1 + 16) < a2)
    {
      v20 = *(_QWORD *)(a1 + 40) + 16 * a2;
      v21 = *(unsigned int *)(v20 + 12);
      if ((_DWORD)v21 == *(_DWORD *)(v20 + 8))
      {
        v26 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)&v28);
        v27 = *(unsigned int *)(v20 + 12);
        *(_WORD *)(*(_QWORD *)v20 + 2 * v27) = *v26;
        *(_DWORD *)(v20 + 12) = v27 + 1;
        a3 = v28;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)v20 + 2 * v21) = a3;
        *(_DWORD *)(v20 + 12) = v21 + 1;
      }
    }
    if (*(unsigned __int16 *)(a1 + 16) < a3)
    {
      v22 = *(_QWORD *)(a1 + 40) + 16 * a3;
      v23 = *(unsigned int *)(v22 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(v22 + 8))
      {
        v25 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)&v29);
        v23 = *(unsigned int *)(v22 + 12);
        *(_WORD *)(*(_QWORD *)v22 + 2 * v23) = *v25;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)v22 + 2 * v23) = v18;
      }
      *(_DWORD *)(v22 + 12) = v23 + 1;
    }
  }
  return v11 == 0;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::forEachNodeMoves<JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::freezeMoves(unsigned short)::{lambda(unsigned short)#1}>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[0] = a3;
  v18[1] = a4;
  if (*(_DWORD *)(result + 108) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 96) + 40 * a2;
    v6 = *(unsigned int *)(v5 + 4);
    v7 = (_QWORD *)(v5 + 8);
    if ((_DWORD)v6 != 8)
      v7 = (_QWORD *)*v7;
    v8 = 0;
    while ((_DWORD)v6 != v8)
    {
      v9 = v8;
      v10 = *((_DWORD *)v7 + v8++);
      if (v10 != -1)
      {
        v11 = v9;
        goto LABEL_8;
      }
    }
    v11 = v6;
LABEL_8:
    if ((_DWORD)v6 != (_DWORD)v11)
    {
      v12 = v11 | (v6 << 32);
      v13 = (uint64_t *)(result + 352);
      do
      {
        v14 = *((unsigned int *)v7 + v12);
        if (*v13 >= 0)
          v15 = 2 * *v13 + 8;
        else
          v15 = v4 + 352;
        if (((*(_QWORD *)(v15 + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) != 0
          || *(_DWORD *)(*(_QWORD *)(v4 + 296) + 4 * v14) != -1)
        {
        }
        v16 = HIDWORD(v12);
        if ((v11 + 1) > HIDWORD(v12))
          LODWORD(v16) = v11 + 1;
        while (1)
        {
          v17 = (v11 + 1);
          v12 = v12 & 0xFFFFFFFF00000000 | v17;
          if ((_DWORD)v16 - 1 == (_DWORD)v11)
            break;
          LODWORD(v11) = v11 + 1;
          if (*((_DWORD *)v7 + v17) != -1)
            goto LABEL_19;
        }
        LODWORD(v17) = v16;
LABEL_19:
        LODWORD(v11) = v17;
      }
      while ((_DWORD)v6 != (_DWORD)v17);
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::freezeMoves(unsigned short)::{lambda(unsigned short)#1}::operator()(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;

  v2 = result;
  v3 = *(_QWORD *)result;
  v4 = (uint64_t *)(*(_QWORD *)result + 352);
  v5 = a2;
  if (*v4 >= 0)
    v4 = (uint64_t *)(2 * *v4 + 8);
  v6 = ((unint64_t)a2 >> 3) & 0x1FF8;
  v7 = *(uint64_t *)((char *)v4 + v6);
  *(uint64_t *)((char *)v4 + v6) = v7 & ~(1 << a2);
  if ((v7 & (1 << a2)) == 0)
  v8 = (unsigned __int16 *)(*(_QWORD *)(v3 + 80) + 4 * v5);
  v9 = *v8;
  v10 = v8[1];
  if (v9 == *(unsigned __int16 *)(v2 + 8))
    LOWORD(v9) = v10;
  do
  {
    v11 = v9;
    v12 = (unsigned __int16)v9;
    v9 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 144) + 2 * (unsigned __int16)v9);
  }
  while (v9);
  v20 = v11;
  if (*(_DWORD *)(v3 + 12) > *(unsigned __int16 *)(*(_QWORD *)(v3 + 56) + 2 * v12))
  {
    if ((result & 1) == 0)
    {
      result = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove((uint64_t *)(v3 + 288), v11, v13, v14, v15, v16, v17, v18);
      if ((_DWORD)result)
      {
        v19 = *(unsigned int *)(v3 + 196);
        if ((_DWORD)v19 == *(_DWORD *)(v3 + 192))
        {
          return (uint64_t)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v3 + 184, (unint64_t)&v20);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(v3 + 184) + 2 * v19) = v11;
          *(_DWORD *)(v3 + 196) = v19 + 1;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::selectSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  float v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;

  if (!*(_BYTE *)(a1 + 208))
  {
    *(_BYTE *)(a1 + 208) = 1;
    if (*(_BYTE *)(a1 + 209))
      WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 216), (const void **)(a1 + 144), a3, a4, a5, a6, a7, a8);
  }
  v9 = WTF::BitVector::begin((uint64_t *)(a1 + 200));
  v12 = *(_QWORD *)(a1 + 200);
  v13 = (uint64_t *)(2 * v12);
  if (v12 < 0)
    v14 = 63;
  else
    v14 = *v13;
  if (v10 == v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198086104);
  }
  v15 = *(uint64_t **)(a1 + 232);
  v16 = (unint64_t *)(2 * *v15);
  if (*v15 < 0)
    v17 = 63;
  else
    v17 = *v16;
  if (v17 > v10)
  {
    v18 = (uint64_t *)(v16 + 1);
    if (*v15 >= 0)
      v15 = v18;
    if (((*(unint64_t *)((char *)v15 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x1980860E4);
    }
  }
  v19 = 0.0;
  v20 = v10;
LABEL_12:
  while (1)
  {
    v21 = v12 < 0 ? 63 : *v13;
    if (v10 == v21)
      return v20;
    v22 = *(_QWORD *)(a1 + 240);
    v23 = *(_DWORD **)(v22 + 8);
    if (*v23 <= (unsigned __int16)v10)
      goto LABEL_47;
    v24 = *(float *)&v23[(unsigned __int16)v10 + 1];
    if (v24 == 0.0)
      return (unsigned __int16)v10;
    LOWORD(v11) = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v10);
    v26 = *(_QWORD *)(v22 + 24);
    v25 = v22 + 24;
    v27 = (float)LODWORD(v11) / v24;
    v28 = 2 * v26 + 8;
    if (v26 >= 0)
      v25 = v28;
    v11 = v27 + v27;
    if (((*(_QWORD *)(v25 + (((unint64_t)(unsigned __int16)v10 >> 3) & 0x1FF8)) >> v10) & 1) != 0)
      v27 = v27 + v27;
    if (v27 > v19)
    {
      v19 = v27;
      v20 = v10;
    }
    v29 = v10 + 1;
    v30 = *v9;
    if (*v9 < 0)
    {
      v39 = __clz(__rbit64(v30 >> v29)) + v29;
      if (v39 >= 0x3F)
        v10 = 63;
      else
        v10 = v39;
    }
    else
    {
      v31 = 2 * v30;
      v10 = *(_QWORD *)(2 * v30);
      v32 = v29 >> 6;
      if (v29 >> 6 < (v10 + 63) >> 6)
      {
        v33 = *(_QWORD *)(v31 + 8 * v32 + 8);
        if (v33)
        {
          v34 = __clz(__rbit64(v33 >> v29)) + (v29 & 0x3F);
          if (v34 < 0x40)
            goto LABEL_27;
        }
        v35 = (v10 + 63) >> 6;
        if (v32 + 1 != v35)
        {
          v36 = v35 - 1;
          v37 = v31 + 16;
          while (1)
          {
            v38 = *(_QWORD *)(v37 + 8 * v32);
            if (v38)
            {
              v34 = __clz(__rbit64(v38));
              if (v34 <= 0x3F)
                break;
            }
            if (v36 == ++v32)
              goto LABEL_12;
          }
          ++v32;
LABEL_27:
          v10 = v34 + (v32 << 6);
        }
      }
    }
  }
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::assignColors(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _WORD *v33;
  _WORD *v34;
  uint64_t v35;
  unint64_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  unsigned __int16 *v41;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unsigned __int16 *v79;
  WTF **v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  WTF **v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  unsigned __int16 *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF **v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  char v100;
  WTF *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  WTF *v106[2];
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 < 0)
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  else
    bzero((void *)(2 * v9 + 8), (unint64_t)(*(_QWORD *)(2 * v9) + 7) >> 3);
  *(_DWORD *)(a1 + 32) = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v10 = *(_QWORD *)(a1 + 56);
    if (v10)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 104))
  {
    v11 = *(unsigned int *)(a1 + 108);
    v12 = *(_QWORD *)(a1 + 96);
    if ((_DWORD)v11)
    {
      v13 = 40 * v11;
      v14 = (unint64_t *)(v12 + 8);
      do
      {
        if (*((_DWORD *)v14 - 1) != 8)
          WTF::fastFree(*v14, a2, a3, a4, a5, a6, a7, a8);
        v14 += 5;
        v13 -= 40;
      }
      while (v13);
      *(_DWORD *)(a1 + 108) = 0;
      v12 = *(_QWORD *)(a1 + 96);
    }
    if (v12)
    {
      *(_QWORD *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 104) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(a1 + 192))
  {
    if (*(_DWORD *)(a1 + 196))
      *(_DWORD *)(a1 + 196) = 0;
    v36 = *(_QWORD *)(a1 + 184);
    if (v36)
    {
      *(_QWORD *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v15 = *(_QWORD *)(a1 + 200);
  if (v15 < 0)
    *(_QWORD *)(a1 + 200) = 0x8000000000000000;
  else
    bzero((void *)(2 * v15 + 8), (unint64_t)(*(_QWORD *)(2 * v15) + 7) >> 3);
  v16 = (unint64_t *)(a1 + 112);
  v17 = *(unsigned int *)(a1 + 52);
  v18 = *(unsigned int *)(a1 + 124);
  if (v18 < v17)
  {
    v19 = *(unsigned int *)(a1 + 120);
    v20 = *(_QWORD *)(a1 + 112);
    if (v19 < v17)
    {
      v21 = v19 + (v19 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v17)
        v23 = *(unsigned int *)(a1 + 52);
      else
        v23 = v22;
      if (HIDWORD(v23))
      {
        __break(0xC471u);
        goto LABEL_180;
      }
      v24 = (_BYTE *)WTF::fastMalloc((WTF *)v23);
      *(_DWORD *)(a1 + 120) = v23;
      *(_QWORD *)(a1 + 112) = v24;
      if ((_DWORD)v18)
      {
        v25 = (char *)v20;
        do
        {
          v26 = *v25++;
          *v24++ = v26;
          --v18;
        }
        while (v18);
        v24 = (_BYTE *)*v16;
      }
      if (v20)
      {
        if (v24 == (_BYTE *)v20)
        {
          *(_QWORD *)(a1 + 112) = 0;
          *(_DWORD *)(a1 + 120) = 0;
        }
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        v20 = *v16;
      }
      else
      {
        v20 = (unint64_t)v24;
      }
    }
    if (v20)
    {
      v27 = *(unsigned int *)(a1 + 124);
      if ((_DWORD)v27 != (_DWORD)v17)
      {
        v28 = (_BYTE *)(v20 + v27);
        v29 = v17 - v27;
        do
        {
          *v28++ |= 0x7Fu;
          --v29;
        }
        while (v29);
      }
    }
  }
  *(_DWORD *)(a1 + 124) = v17;
  v101 = (WTF *)&v103;
  v102 = 4;
  v31 = (uint64_t *)(a1 + 72);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v32 = *(unsigned int *)(v30 - 4);
    v33 = (_WORD *)(v30 + 32 * v32);
    if (*(_DWORD *)(v30 - 12))
    {
      v34 = *(_WORD **)(a1 + 72);
      if ((_DWORD)v32)
      {
        v35 = 32 * v32;
        v34 = *(_WORD **)(a1 + 72);
        while ((unsigned __int16)*v34 >= 0xFFFEu)
        {
          v34 += 16;
          v35 -= 32;
          if (!v35)
          {
            v34 = v33;
            goto LABEL_57;
          }
        }
      }
      goto LABEL_57;
    }
    v34 = (_WORD *)(v30 + 32 * v32);
  }
  else
  {
    v34 = 0;
    v32 = 0;
  }
  v33 = (_WORD *)(v30 + 32 * v32);
LABEL_57:
  if (v30)
    v37 = (_WORD *)(v30 + 32 * *(unsigned int *)(v30 - 4));
  else
    v37 = 0;
  if (v37 != v34)
  {
    do
    {
      LOWORD(v106[0]) = 0;
      LOWORD(v106[0]) = *v34;
      v38 = LOWORD(v106[0]);
      do
      {
        v39 = v38;
        v38 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * v38);
      }
      while ((_DWORD)v38);
      if (LOWORD(v106[0]) != v39)
      {
        v78 = HIDWORD(v102);
        if (HIDWORD(v102) == (_DWORD)v102)
        {
          WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v101, (unint64_t)v106);
        }
        else
        {
          *((_WORD *)v101 + HIDWORD(v102)) = v106[0];
          HIDWORD(v102) = v78 + 1;
        }
      }
      v40 = v34 + 16;
      v34 = v33;
      if (v40 != v33)
      {
        v34 = v40;
        while ((unsigned __int16)*v34 >= 0xFFFEu)
        {
          v34 += 16;
          if (v34 == v33)
          {
            v34 = v33;
            break;
          }
        }
      }
    }
    while (v34 != v37);
    v41 = (unsigned __int16 *)v101;
    if (HIDWORD(v102))
    {
      v79 = (unsigned __int16 *)((char *)v101 + 2 * HIDWORD(v102));
      v80 = &v105;
      do
      {
        LOWORD(v81) = *v41;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::take(v106, (uint64_t *)(a1 + 72), *v41);
        do
        {
          v86 = v81;
          v81 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * (unsigned __int16)v81);
        }
        while (v81);
        v98 = v86;
        v104 = 0x800000000;
        *v80 = (WTF *)-1;
        v80[1] = (WTF *)-1;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)&v99, (uint64_t *)(a1 + 72), &v98, (uint64_t)&v104, v82, v83, v84, v85);
        if (HIDWORD(v104) != 8)
          WTF::fastFree((unint64_t)v105, a2, a3, a4, a5, a6, a7, a8);
        v97 = v99 + 8;
        if (v100)
        {
          if (*(_DWORD *)(v99 + 12) != 8)
            WTF::fastFree(*(_QWORD *)(v99 + 16), a2, a3, a4, a5, a6, a7, a8);
          *(_OWORD *)v97 = *(_OWORD *)v106;
          *(_QWORD *)(v97 + 16) = v107;
        }
        else
        {
          v87 = HIDWORD(v106[0]);
          if (HIDWORD(v106[0]) == 8)
            v88 = &v106[1];
          else
            v88 = (WTF **)v106[1];
          v89 = 0;
          v96 = v80;
          while (HIDWORD(v106[0]) != v89)
          {
            LODWORD(v90) = v89;
            v91 = *((__int16 *)v88 + v89++);
            if (v91 != -1)
            {
              v92 = v79;
              v90 = v90;
              goto LABEL_151;
            }
          }
          v92 = v79;
          v90 = HIDWORD(v106[0]);
LABEL_151:
          if (HIDWORD(v106[0]) != (_DWORD)v90)
          {
            v93 = v90 | ((unint64_t)HIDWORD(v106[0]) << 32);
            do
            {
              LODWORD(v94) = v90;
              WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)&v104, (unsigned int *)v97, *((unsigned __int16 *)v88 + v93));
              if (HIDWORD(v93) <= (v94 + 1))
                v90 = (v94 + 1);
              else
                v90 = HIDWORD(v93);
              while ((_DWORD)v90 - 1 != (_DWORD)v94)
              {
                v94 = (v94 + 1);
                if (*((__int16 *)v88 + v94) != -1)
                {
                  LODWORD(v90) = v94;
                  goto LABEL_159;
                }
              }
              v94 = v90;
LABEL_159:
              v93 = v94 | v93 & 0xFFFFFFFF00000000;
            }
            while (v87 != (_DWORD)v90);
          }
          v79 = v92;
          v80 = v96;
          if (v87 != 8)
            WTF::fastFree((unint64_t)v106[1], a2, a3, a4, a5, a6, a7, a8);
        }
        ++v41;
      }
      while (v41 != v79);
      v41 = (unsigned __int16 *)v101;
    }
    if (&v103 != (uint64_t *)v41 && v41 != 0)
    {
      v101 = 0;
      LODWORD(v102) = 0;
      WTF::fastFree((unint64_t)v41, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v43 = *(_DWORD *)(a1 + 180);
  if (!v43)
  {
LABEL_127:
    if (*(_DWORD *)(a1 + 176))
    {
      v76 = *(_QWORD *)(a1 + 168);
      if (v76)
      {
        *(_QWORD *)(a1 + 168) = 0;
        *(_DWORD *)(a1 + 176) = 0;
        WTF::fastFree(v76, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if (*(_DWORD *)(a1 + 140))
    {
      WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(a1 + 112, a2, a3, a4, a5, a6, a7, a8);
    }
    else if (*(_DWORD *)(a1 + 224))
    {
      if (*(_DWORD *)(a1 + 228))
        *(_DWORD *)(a1 + 228) = 0;
      v77 = *(_QWORD *)(a1 + 216);
      if (v77)
      {
        *(_QWORD *)(a1 + 216) = 0;
        *(_DWORD *)(a1 + 224) = 0;
        WTF::fastFree(v77, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    return;
  }
  while (1)
  {
    v44 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 168) + 2 * v43 - 2);
    *(_DWORD *)(a1 + 180) = v43 - 1;
    LODWORD(v101) = v44;
    v45 = *(_QWORD *)(a1 + 40) + 16 * v44;
    v46 = *(unsigned int *)(v45 + 12);
    if ((_DWORD)v46)
    {
      v47 = 0;
      v48 = *(unsigned __int16 **)v45;
      v49 = &v48[v46];
      do
      {
        v50 = *v48;
        do
        {
          v51 = v50;
          v50 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * v50);
        }
        while ((_DWORD)v50);
        v52 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 112) + v51);
        if ((~v52 & 0x7F) != 0)
        {
          if ((v52 & 0x40) != 0)
            goto LABEL_180;
          v47 |= 1 << v52;
        }
        ++v48;
      }
      while (v48 != v49);
    }
    else
    {
      v47 = 0;
    }
    v53 = *v31;
    if (*v31)
    {
      v54 = *(_DWORD *)(v53 - 8);
      v55 = 9 * ((~((_DWORD)v44 << 15) + v44) ^ ((~((_DWORD)v44 << 15) + v44) >> 10));
      v56 = (v55 ^ (v55 >> 6)) + ~((v55 ^ (v55 >> 6)) << 11);
      v57 = v54 & (v56 ^ HIWORD(v56));
      v58 = *(unsigned __int16 *)(v53 + 32 * v57);
      if (v58 != (_DWORD)v44)
      {
        v59 = 1;
        while (v58 != 0xFFFF)
        {
          v57 = ((_DWORD)v57 + v59) & v54;
          v58 = *(unsigned __int16 *)(v53 + 32 * v57);
          ++v59;
          if (v58 == (_DWORD)v44)
            goto LABEL_91;
        }
        v57 = *(unsigned int *)(v53 - 4);
      }
LABEL_91:
      if (v57 != *(_DWORD *)(v53 - 4))
      {
        v62 = v53 + 32 * v57;
        v63 = *(unsigned int *)(v62 + 12);
        v64 = (_QWORD *)(v62 + 16);
        if ((_DWORD)v63 != 8)
          v64 = (_QWORD *)*v64;
        v65 = 0;
        while ((_DWORD)v63 != v65)
        {
          v66 = v65;
          v67 = *((__int16 *)v64 + v65++);
          if (v67 != -1)
          {
            v68 = v66;
            goto LABEL_107;
          }
        }
        v68 = v63;
LABEL_107:
        if ((_DWORD)v63 != (_DWORD)v68)
        {
          v69 = v68 | (v63 << 32);
          v70 = *(_QWORD *)(a1 + 112);
          while (1)
          {
            v71 = *((unsigned __int16 *)v64 + v69);
            do
            {
              v72 = v71;
              v71 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 144) + 2 * v71);
            }
            while ((_DWORD)v71);
            v73 = *(_BYTE *)(v70 + v72);
            v74 = v73 & 0x7F;
            if (v74 != 127)
            {
              if (v74 >= 0x40)
                goto LABEL_180;
              if (((v47 >> v74) & 1) == 0)
                break;
            }
            if (HIDWORD(v69) <= (v68 + 1))
              v75 = (v68 + 1);
            else
              v75 = HIDWORD(v69);
            while ((_DWORD)v75 - 1 != (_DWORD)v68)
            {
              v68 = (v68 + 1);
              if (*((__int16 *)v64 + v68) != -1)
              {
                LODWORD(v75) = v68;
                goto LABEL_118;
              }
            }
            v68 = v75;
LABEL_118:
            v69 = v68 | v69 & 0xFFFFFFFF00000000;
            LODWORD(v68) = v75;
            if ((_DWORD)v63 == (_DWORD)v75)
              goto LABEL_92;
          }
          *(_BYTE *)(v70 + v44) = v73;
          goto LABEL_99;
        }
      }
    }
LABEL_92:
    v60 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v60)
      break;
LABEL_169:
    v95 = *(unsigned int *)(a1 + 140);
    if ((_DWORD)v95 == *(_DWORD *)(a1 + 136))
    {
      WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(a1 + 128, &v101);
    }
    else
    {
      *(_WORD *)(*(_QWORD *)(a1 + 128) + 2 * v95) = v44;
      *(_DWORD *)(a1 + 140) = v95 + 1;
    }
LABEL_99:
    v43 = *(_DWORD *)(a1 + 180);
    if (!v43)
      goto LABEL_127;
  }
  v61 = *(_BYTE **)a1;
  while ((*v61 & 0x7Fu) < 0x40)
  {
    if (((v47 >> (*v61 & 0x7F)) & 1) == 0)
    {
      *(_BYTE *)(*v16 + v44) = *v61;
      goto LABEL_99;
    }
    ++v61;
    if (!--v60)
      goto LABEL_169;
  }
LABEL_180:
  __break(1u);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;

  if (a4 == 1 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (int *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = result;
      v9 = **(_QWORD **)result;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = *(JSC::B3::Air::Inst **)(result + 8);
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198086C4CLL);
          }
          v19 = *(_QWORD *)(v8 + 16);
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          v20 = result;
          if ((result & 1) != 0)
            goto LABEL_16;
          v26 = *(uint64_t **)(v8 + 8);
          v27 = *((__int16 *)v26 + 60) - 90;
          v28 = v27 > 0x12;
          v29 = (1 << v27) & 0x60011;
          if (!v28 && v29 != 0)
          {
            v31 = *((unsigned int *)v26 + 3);
            if (!(_DWORD)v31)
            {
              __break(0xC471u);
              JUMPOUT(0x198086C54);
            }
            v32 = *v26;
            v33 = ((unint64_t)(a2 - v32) >> 5) ^ 1;
            if (v33 >= v31)
            {
              __break(0xC471u);
              JUMPOUT(0x198086C5CLL);
            }
            if ((_DWORD)v31 == 2)
            {
              v34 = (_BYTE *)(v32 + 32 * v33);
              if (v34[8] == 9 && *(_BYTE *)(*(_QWORD *)v34 + 4) == 1)
              {
LABEL_16:
                if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
                {
                  v21 = *(_QWORD *)(v19 + 40);
                  v22 = *v7;
                  v24 = *(_QWORD *)(v21 + 24);
                  v23 = v21 + 24;
                  v25 = 2 * v24 + 8;
                  if (v24 >= 0)
                    v23 = v25;
                  if (((*(_QWORD *)(v23 + (((unint64_t)-*v7 >> 3) & 0x1FFFFFF8)) >> -(char)v22) & 1) != 0)
                    return result;
                }
                else
                {
                  v22 = *v7;
                }
                result = JSC::B3::Air::TmpWidth::requiredWidth(v19 + 8, v22);
                if (a3 - 4 <= 6 && result > a5)
                  return result;
                v35 = *(_BYTE **)(v8 + 24);
                if ((_DWORD)result == 2)
                {
                  v36 = *v35;
                  v37 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  if (v36)
                  {
LABEL_41:
                    v38 = 4;
LABEL_42:
                    if (*v37 > v38)
                      v38 = *v37;
                    *v37 = v38;
                    *(_BYTE *)(a2 + 24) = 0;
                    *(_QWORD *)v7 = 0;
                    *(_QWORD *)a2 = v37;
                    *(_WORD *)(a2 + 8) = 521;
                    *(_DWORD *)(a2 + 12) = 0;
                    **(_BYTE **)(v8 + 32) = 1;
                    if ((v20 & 1) == 0)
                      **(_BYTE **)(v8 + 40) = 1;
                    return result;
                  }
                }
                else
                {
                  *v35 = 0;
                  v37 = *(unsigned int **)(v9 + 16 * v15 + 8);
                }
                if (a5 != 3)
                {
                  v38 = 1;
                  switch(a5)
                  {
                    case 0u:
                      goto LABEL_42;
                    case 1u:
                      v38 = 2;
                      goto LABEL_42;
                    case 2u:
                      goto LABEL_41;
                    case 4u:
                      v38 = 16;
                      goto LABEL_42;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x198086C44);
                  }
                }
                v38 = 8;
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  _BYTE v47[25];
  WTF *v48;
  uint64_t v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  _BYTE v53[12];
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  _OWORD v57[6];
  _QWORD v58[2];

  if (*(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v7 = **a1;
      if (!v7)
        goto LABEL_13;
      v9 = *(_DWORD *)(v7 - 8);
      v10 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
      v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
      v12 = v9 & (v11 ^ HIWORD(v11));
      v13 = *(_DWORD *)(v7 + 16 * v12);
      if (v13 != v5)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v9;
          v13 = *(_DWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == v5)
            goto LABEL_12;
        }
        v12 = *(unsigned int *)(v7 - 4);
      }
LABEL_12:
      if (v12 != *(_DWORD *)(v7 - 4))
      {
        v19 = a1[3];
        v20 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v19 + 1), v5);
        if (v20 == 3)
          v27 = 8;
        else
          v27 = 16;
        if (v20 < 3)
          v27 = 4;
        if (v27 == 4)
        {
          v28 = 107;
        }
        else if (v27 == 16)
        {
          v28 = 113;
        }
        else
        {
          v28 = 108;
        }
        v29 = *(_DWORD *)(*v19 + 180);
        *(_DWORD *)(*v19 + 180) = v29 + 1;
        v30 = (v29 + 33);
        *(_DWORD *)(a2 + 16) = -33 - v29;
        v31 = a1[4];
        v32 = *v31;
        if (*v31 < 0)
          v33 = 63;
        else
          v33 = *(_QWORD *)(2 * v32);
        if (v33 <= v30)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1[4], v30 + 1, 0);
          v32 = *v31;
        }
        if (v32 >= 0)
          v34 = 2 * v32 + 8;
        else
          v34 = (uint64_t)v31;
        *(_QWORD *)(v34 + ((v30 >> 3) & 0x1FFFFFF8)) |= 1 << v30;
        if (a3 != 10)
        {
          v35 = *(_QWORD *)(v7 + 16 * v12 + 8);
          *(_QWORD *)&v47[16] = 0;
          v47[24] = 0;
          *(_WORD *)&v47[8] = 521;
          *(_QWORD *)v47 = v35;
          *(_DWORD *)&v47[12] = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            v36 = (uint64_t)a1[5];
            v37 = *(unsigned int *)a1[6];
            v38 = *(_DWORD *)(a2 + 16);
            *(_OWORD *)&v50[9] = *(_OWORD *)&v47[9];
            *(_OWORD *)v50 = *(_OWORD *)v47;
            *(_QWORD *)&v51 = 0;
            WORD4(v51) = 513;
            HIDWORD(v51) = 1;
            *(_QWORD *)&v52 = v38;
            BYTE8(v52) = 0;
            v57[0] = *(_OWORD *)v47;
            v57[2] = v51;
            v57[3] = v52;
            v39 = a1[7][14];
            v48 = (WTF *)v50;
            *(_QWORD *)v53 = v39;
            *(_DWORD *)&v53[8] = v28;
            v54 = v37;
            v55 = (WTF *)v57;
            v57[1] = *(_OWORD *)&v50[16];
            v49 = 3;
            v56 = 0x200000003;
            v58[0] = v39;
            *(_DWORD *)((char *)v58 + 7) = *(_DWORD *)&v53[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v36, (unint64_t)&v54, v21, v22, v23, v24, v25, v26);
            v45 = v55;
            if (v57 != (_OWORD *)v55 && v55)
            {
              v55 = 0;
              LODWORD(v56) = 0;
              WTF::fastFree((unint64_t)v45, v40, v41, v42, v43, v44, v25, v26);
            }
            v46 = v48;
            if (v50 != (_BYTE *)v48 && v48)
            {
              v48 = 0;
              LODWORD(v49) = 0;
              WTF::fastFree((unint64_t)v46, v40, v41, v42, v43, v44, v25, v26);
            }
          }
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>((uint64_t)a1[5], (*(_DWORD *)a1[6] + 1), v28, a1[7][14], *(unsigned int *)(a2 + 16), v47, v25, v26);
        }
      }
      else
      {
LABEL_13:
        v15 = a1[1];
        if (*((_DWORD *)v15 + 57))
        {
          v16 = -v5;
          v17 = v15[27];
          do
          {
            v18 = v16;
            v16 = *(unsigned __int16 *)(v17 + 2 * (unsigned __int16)v16);
          }
          while (v16);
          if (v5 + v18)
          {
            *(_DWORD *)(a2 + 16) = -v18;
            *(_BYTE *)a1[2] = 1;
          }
        }
      }
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::~AbstractColoringAllocator(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t StatusReg;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t *v36;

  v9 = *(_QWORD *)(a1 + 256);
  if (a1 + 272 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 256) = 0;
    *(_DWORD *)(a1 + 264) = 0;
    WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 216);
  if (v11)
  {
    *(_QWORD *)(a1 + 216) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 200);
  if ((v12 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v12, (void *)a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 184);
  if (v13)
  {
    *(_QWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    WTF::fastFree(v13, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 168);
  if (v14)
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = 0;
    WTF::fastFree(v14, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 160);
  if ((v15 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v15, (void *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 144);
  if (v16)
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    WTF::fastFree(v16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(_QWORD *)(a1 + 128);
  if (v17)
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    WTF::fastFree(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *(_QWORD *)(a1 + 112);
  if (v18)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *(unsigned int *)(a1 + 108);
  v20 = *(_QWORD *)(a1 + 96);
  if (!(_DWORD)v19)
  {
    if (!v20)
      goto LABEL_24;
    goto LABEL_65;
  }
  v35 = 40 * v19;
  v36 = (unint64_t *)(v20 + 8);
  do
  {
    if (*((_DWORD *)v36 - 1) != 8)
      WTF::fastFree(*v36, (void *)a2, a3, a4, a5, a6, a7, a8);
    v36 += 5;
    v35 -= 40;
  }
  while (v35);
  v20 = *(_QWORD *)(a1 + 96);
  if (v20)
  {
LABEL_65:
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_24:
  v21 = *(_QWORD *)(a1 + 80);
  if (v21)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v21, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (unint64_t *)(v22 + 16);
      do
      {
        if (*((__int16 *)v24 - 8) != -2 && *((_DWORD *)v24 - 1) != 8)
          WTF::fastFree(*v24, (void *)a2, a3, a4, a5, a6, a7, a8);
        v24 += 4;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree(v22 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)(a1 + 56);
  if (v25)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v25, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *(unsigned int *)(a1 + 52);
  v27 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v26)
  {
    v28 = 16 * v26;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      a2 = *(_QWORD *)v27;
      if (*(_QWORD *)v27)
      {
        *(_QWORD *)v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
        v30 = *(_QWORD *)(StatusReg + 752);
        if (v30)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
          {
LABEL_42:
            v31 = *(unsigned int *)(v30 + 8000);
            if (v31 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v30, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v30 + 8 * v31) = a2 | 0x5000000000000;
              *(_DWORD *)(v30 + 8000) = v31 + 1;
            }
            goto LABEL_44;
          }
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_42;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v30, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_44:
      v27 += 16;
      v28 -= 16;
      if (!v28)
      {
        v27 = *(_QWORD *)(a1 + 40);
        break;
      }
    }
  }
  if (v27)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v27, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *(_QWORD *)(a1 + 24);
  if ((v32 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v32, (void *)a2, a3, a4, a5, a6, a7, a8);
  v33 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v33, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD **v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t (*v50)(void);
  uint64_t *v51;
  _DWORD *v52;
  uint64_t i;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _QWORD *v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 *v96;
  int v97;
  uint64_t v98;
  __int16 v99;
  _DWORD *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int16 *v109;
  int v110;
  uint64_t v111;
  __int16 v112;
  _DWORD *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _WORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD **v124;
  _QWORD **v125;
  uint64_t **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t ***v131;
  uint64_t ***v132;
  uint64_t **v133;

  v124 = a3;
  v125 = a2;
  v121 = (uint64_t *)&v125;
  v122 = (uint64_t *)&v124;
  v123 = a1;
  v129 = &v121;
  if (a2)
  {
    v130 = (uint64_t *)&v129;
    v126 = &v130;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v131 = (uint64_t ***)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v132 = (uint64_t ***)&v131;
      v133 = (uint64_t **)&v126;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v131);
    }
    else
    {
      v8 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
        v11 = 1;
        do
        {
          if (v9 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198087EBCLL);
          }
          v12 = v10[v9];
          if ((v12 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198087E54);
          }
          if ((v12 & 0xC) == 4 && LOBYTE((*a2)[v11]) == 1)
          {
            v14 = *v130;
            LODWORD(v131) = (*a2)[v11 + 1];
          }
          ++v9;
          v11 += 4;
        }
        while (v8 != v9);
      }
    }
  }
  if (a3)
  {
    v130 = (uint64_t *)&v129;
    v126 = &v130;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v131 = (uint64_t ***)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v132 = (uint64_t ***)&v131;
      v133 = (uint64_t **)&v126;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v131);
    }
    else
    {
      v15 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v15 - 1) * v15) >> 1);
        v18 = 1;
        do
        {
          if (v16 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198087EB4);
          }
          v19 = v17[v16];
          if ((v19 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198087E34);
          }
          v20 = &(*a3)[v18];
          if (*(_BYTE *)v20 == 1 && (v19 & 0xF) - 8 <= 2)
          {
            v90 = *v130;
            LODWORD(v131) = *((_DWORD *)v20 + 2);
          }
          ++v16;
          v18 += 4;
        }
        while (v15 != v16);
      }
    }
  }
  v131 = (uint64_t ***)&v121;
  v132 = (uint64_t ***)&v130;
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    LOBYTE(v130) = 4;
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198087F2CLL);
    }
    v126 = (uint64_t **)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v127 = v48;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v130) = 8;
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198087F24);
    }
    v126 = (uint64_t **)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v127 = v47;
  }
  v21 = v125;
  if (v125)
  {
    v22 = *((__int16 *)v125 + 60);
    if ((v22 - 107) <= 6
      && ((1 << (*((_WORD *)v125 + 60) - 107)) & 0x43) != 0
      && *((_DWORD *)v125 + 3) == 2)
    {
      v56 = *v125;
      if (*((_BYTE *)*v125 + 8) == 1 && *((_BYTE *)v56 + 40) == 1)
      {
        if (v22 != 94)
          goto LABEL_88;
        v119 = *(_QWORD *)(a1 + 328);
        if (v119)
        {
          v120 = *((unsigned int *)v56 + 4);
          if ((int)v120 < 1)
          {
            v120 = -(int)v120;
            if (v120 >= *(unsigned int *)(v119 + 28))
            {
LABEL_191:
              __break(0xC471u);
              JUMPOUT(0x198087CB8);
            }
            v119 += 16;
          }
          else if (v120 >= *(_DWORD *)(v119 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198087F64);
          }
          if (*(unsigned __int8 *)(*(_QWORD *)v119 + 2 * v120 + 1) <= 2u)
          {
LABEL_88:
            v57 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v125 + 60);
            v58 = v57[1];
            if ((v58 >> 5) - 1 >= 5 || (v59 = v57[2], (v59 >> 5) - 1 > 4))
            {
              __break(0xC471u);
              JUMPOUT(0x198087EECLL);
            }
            v60 = v58 & 0xC;
            v61 = *((_DWORD *)v56 + 4);
            v62 = v60 == 4;
            if (v60 == 4)
              v63 = 0;
            else
              v63 = *((_DWORD *)v56 + 4);
            v64 = *((_DWORD *)v56 + 12);
            v65 = v59 & 0xC;
            if (!v62)
              v61 = 0;
            if (v65 == 4)
              v66 = v63;
            else
              v66 = v64;
            v67 = (_QWORD *)(a1 + 80);
            if (v65 == 4)
              v68 = v64;
            else
              v68 = v61;
            LOWORD(v131) = -(__int16)v66;
            v69 = -v68;
            WORD1(v131) = -(__int16)v68;
            v70 = *(unsigned int *)(a1 + 92);
            if ((_DWORD)v70 == *(_DWORD *)(a1 + 88))
            else
              *(_DWORD *)(*v67 + 4 * v70) = (_DWORD)v131;
            ++*(_DWORD *)(a1 + 92);
            v71 = *(_DWORD *)(a1 + 288);
            *(_DWORD *)(a1 + 288) = v71 + 1;
            LODWORD(v131) = v71;
            v72 = (_QWORD *)(a1 + 296);
            v73 = *(unsigned int *)(a1 + 308);
            if ((_DWORD)v73 == *(_DWORD *)(a1 + 304))
              *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * *(unsigned int *)(a1 + 308)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v131);
            else
              *(_DWORD *)(*v72 + 4 * v73) = v71;
            ++*(_DWORD *)(a1 + 308);
            v74 = *((unsigned int *)v125 + 3);
            if ((_DWORD)v74)
            {
              v75 = 32 * v74;
              v76 = (int *)(*v125 + 2);
              do
              {
                v77 = *v76;
                v76 += 8;
                v78 = -v77;
                if (*(_DWORD *)(a1 + 108) <= -v77)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198087F44);
                }
                WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v131, (unsigned int *)(*(_QWORD *)(a1 + 96) + 40 * v78), v70);
                v75 -= 32;
              }
              while (v75);
            }
            v79 = *(unsigned int *)(*a4 + 60);
            if ((_DWORD)v79)
            {
              v80 = *(_DWORD **)(*a4 + 48);
              v81 = 4 * v79;
              do
              {
                if (v66 + *v80)
                ++v80;
                v81 -= 4;
              }
              while (v81);
            }
            v82 = *(unsigned int *)(a1 + 268);
            if ((_DWORD)v82)
            {
              v117 = *(_WORD **)(a1 + 256);
              v118 = 4 * v82;
              do
              {
                if (v66 != *(_DWORD *)v117)
                v117 += 2;
                v118 -= 4;
              }
              while (v118);
            }
            v83 = (uint64_t)v124;
            v84 = *a4;
            v127 = a1;
            v128 = v84;
            v126 = (uint64_t **)&v128;
            v129 = (uint64_t **)&v126;
            if (v124)
            {
              v130 = (uint64_t *)&v129;
              v121 = (uint64_t *)&v130;
              if ((*((__int16 *)v124 + 60) - 446) <= 5)
              {
                v131 = (uint64_t ***)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
                v132 = (uint64_t ***)&v131;
                v133 = &v121;
                JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v124, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v131);
              }
              else
              {
                v85 = *((unsigned int *)v124 + 3);
                if ((_DWORD)v85)
                {
                  v86 = 0;
                  v87 = (char *)&JSC::B3::Air::g_formTable
                      + 21 * *((__int16 *)v124 + 60)
                      + ((unint64_t)((v85 - 1) * v85) >> 1);
                  do
                  {
                    if (v86 >= *(unsigned int *)(v83 + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198087F4CLL);
                    }
                    v88 = v87[v86];
                    if ((v88 >> 5) - 1 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198087F1CLL);
                    }
                    v89 = *(_QWORD *)v83 + 32 * v86;
                    if (*(_BYTE *)(v89 + 8) == 1 && (v88 & 0xF) - 8 <= 2 && (v88 & 0x10) != 0)
                    {
                      v104 = *(_DWORD *)(v89 + 16);
                      v105 = *(_QWORD *)(*v130 + 8);
                      v106 = **(_QWORD **)*v130;
                      v107 = *(unsigned int *)(v106 + 60);
                      if ((_DWORD)v107)
                      {
                        v113 = *(_DWORD **)(v106 + 48);
                        v114 = 4 * v107;
                        do
                        {
                          v115 = -*v113;
                          v116 = *(_QWORD *)(v105 + 328);
                          if (v115 < 0 || *v113 == 0)
                          {
                            if (*v113 >= *(_DWORD *)(v116 + 28))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198087E14);
                            }
                          }
                          else if (*(_DWORD *)(v116 + 12) <= v115)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198087F54);
                          }
                          v114 -= 4;
                        }
                        while (v114);
                      }
                      v108 = *(unsigned int *)(v105 + 268);
                      if ((_DWORD)v108)
                      {
                        v109 = *(__int16 **)(v105 + 256);
                        v110 = -v104;
                        v111 = 4 * v108;
                        do
                        {
                          v112 = *v109;
                          v109 += 2;
                          v111 -= 4;
                        }
                        while (v111);
                      }
                    }
                    ++v86;
                  }
                  while (v86 != v85);
                }
              }
              v131 = &v126;
              v132 = (uint64_t ***)&v130;
              if (*(_WORD *)(v83 + 120) == 448)
              {
                LOBYTE(v130) = 8;
                if (!*(_DWORD *)(v83 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198087F5CLL);
                }
                v50 = *(uint64_t (**)(void))(***(_QWORD ***)v83 + 72);
LABEL_78:
                v121 = (uint64_t *)v50();
                v122 = v51;
                return;
              }
            }
            return;
          }
        }
      }
    }
    v24 = (uint64_t)v124;
    v25 = *a4;
    v127 = a1;
    v128 = v25;
    v126 = (uint64_t **)&v128;
    v129 = (uint64_t **)&v126;
    v130 = (uint64_t *)&v129;
    v121 = (uint64_t *)&v130;
    if ((v22 - 446) <= 5)
    {
      v131 = (uint64_t ***)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v132 = (uint64_t ***)&v131;
      v133 = &v121;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v125, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v131);
    }
    else
    {
      v26 = *((unsigned int *)v125 + 3);
      if ((_DWORD)v26)
      {
        v27 = 0;
        v28 = (char *)&JSC::B3::Air::g_formTable + 21 * v22 + ((unint64_t)((v26 - 1) * v26) >> 1);
        do
        {
          if (v27 >= *((unsigned int *)v21 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198087ECCLL);
          }
          v29 = v28[v27];
          if ((v29 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198087E94);
          }
          v30 = (uint64_t)&(*v21)[4 * v27];
          v31 = (v29 & 0xC) == 4 && *(_BYTE *)(v30 + 8) == 1;
          if (v31 && (v29 & 0x10) != 0)
          {
            v32 = *(_DWORD *)(v30 + 16);
            v33 = *(_QWORD *)(*v130 + 8);
            v34 = **(_QWORD **)*v130;
            v35 = *(unsigned int *)(v34 + 60);
            if ((_DWORD)v35)
            {
              v52 = *(_DWORD **)(v34 + 48);
              for (i = 4 * v35; i; i -= 4)
              {
                v54 = -*v52;
                v55 = *(_QWORD *)(v33 + 328);
                if (v54 < 0 || *v52 == 0)
                {
                  if (*v52 >= *(_DWORD *)(v55 + 28))
                    goto LABEL_191;
                }
                else if (*(_DWORD *)(v55 + 12) <= v54)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198087EFCLL);
                }
              }
            }
            v36 = *(unsigned int *)(v33 + 268);
            if ((_DWORD)v36)
            {
              v37 = *(__int16 **)(v33 + 256);
              v38 = -v32;
              v39 = 4 * v36;
              do
              {
                v40 = *v37;
                v37 += 2;
                v39 -= 4;
              }
              while (v39);
            }
          }
          ++v27;
        }
        while (v27 != v26);
      }
    }
  }
  else
  {
    v24 = (uint64_t)v124;
    v41 = *a4;
    v127 = a1;
    v128 = v41;
    v126 = (uint64_t **)&v128;
    v129 = (uint64_t **)&v126;
  }
  if (v24)
  {
    v130 = (uint64_t *)&v129;
    v121 = (uint64_t *)&v130;
    if ((*(__int16 *)(v24 + 120) - 446) <= 5)
    {
      v131 = (uint64_t ***)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v132 = (uint64_t ***)&v131;
      v133 = &v121;
      JSC::B3::Air::Inst::forEachArgCustom(v24, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v131);
    }
    else
    {
      v42 = *(unsigned int *)(v24 + 12);
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v24 + 120)
            + ((unint64_t)((v42 - 1) * v42) >> 1);
        do
        {
          if (v43 >= *(unsigned int *)(v24 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198087EC4);
          }
          v45 = v44[v43];
          if ((v45 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198087E74);
          }
          v46 = *(_QWORD *)v24 + 32 * v43;
          if (*(_BYTE *)(v46 + 8) == 1 && (v45 & 0xF) - 8 <= 2 && (v45 & 0x10) != 0)
          {
            v91 = *(_DWORD *)(v46 + 16);
            v92 = *(_QWORD *)(*v130 + 8);
            v93 = **(_QWORD **)*v130;
            v94 = *(unsigned int *)(v93 + 60);
            if ((_DWORD)v94)
            {
              v100 = *(_DWORD **)(v93 + 48);
              v101 = 4 * v94;
              do
              {
                v102 = -*v100;
                v103 = *(_QWORD *)(v92 + 328);
                if (v102 < 0 || *v100 == 0)
                {
                  if (*v100 >= *(_DWORD *)(v103 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198087D44);
                  }
                }
                else if (*(_DWORD *)(v103 + 12) <= v102)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198087EF4);
                }
                v101 -= 4;
              }
              while (v101);
            }
            v95 = *(unsigned int *)(v92 + 268);
            if ((_DWORD)v95)
            {
              v96 = *(__int16 **)(v92 + 256);
              v97 = -v91;
              v98 = 4 * v95;
              do
              {
                v99 = *v96;
                v96 += 2;
                v98 -= 4;
              }
              while (v98);
            }
          }
          ++v43;
        }
        while (v43 != v42);
      }
    }
  }
  v131 = &v126;
  v132 = (uint64_t ***)&v130;
  if (v21 && *((_WORD *)v21 + 60) == 448)
  {
    LOBYTE(v130) = 4;
    if (!*((_DWORD *)v21 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198087F34);
    }
    v121 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v21 + 80))(**v21, v21);
    v122 = v49;
  }
  if (v24 && *(_WORD *)(v24 + 120) == 448)
  {
    LOBYTE(v130) = 8;
    if (!*(_DWORD *)(v24 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198087F3CLL);
    }
    v50 = *(uint64_t (**)(void))(***(_QWORD ***)v24 + 72);
    goto LABEL_78;
  }
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t *a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int v27;
  _QWORD v28[3];
  BOOL v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void **v33;
  _QWORD *v34;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      v6 = ((*v4 >> v5) & 1) == 0;
      if (v5 > 0x1F)
      {
        v7 = *a2;
        v27 = (char)(31 - v5);
        v29 = v6;
        v8 = *(_QWORD *)(v7 + 16);
        v9 = **(_QWORD **)v7;
        v10 = **(_QWORD **)(v7 + 8);
        v28[0] = &v29;
        v28[1] = &v27;
        v28[2] = v8;
        if (v9)
        {
          v30 = v28;
          v31 = &v30;
          if ((*(__int16 *)(v9 + 120) - 446) > 5)
          {
            v25 = *(unsigned int *)(v9 + 12);
            if ((_DWORD)v25)
            {
              v22 = 0;
              v24 = (char *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v9 + 120)
                  + ((unint64_t)((v25 - 1) * v25) >> 1);
              v23 = 8;
              while (v22 < *(unsigned int *)(v9 + 12))
              {
                v18 = v24[v22];
                v19 = (v18 >> 5) - 1;
                if (v19 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980882A4);
                }
                v20 = *(_QWORD *)v9 + v23;
                if ((v18 & 0xC) == 4 && *(_BYTE *)v20 == 1 && (v18 & 0x10) != 0)
                {
                  result = (_QWORD *)v30[2];
                  if (((0xFu >> v19) & 1) == 0 || !*(_BYTE *)*v30)
                  {
                    v26 = v24;
                    v24 = v26;
                  }
                }
                ++v22;
                v23 += 32;
                if (v25 == v22)
                  goto LABEL_9;
              }
LABEL_41:
              __break(0xC471u);
              JUMPOUT(0x198088284);
            }
          }
          else
          {
            v32 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v33 = &v32;
            v34 = &v31;
            result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom(v9, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v32);
          }
        }
LABEL_9:
        if (v10)
        {
          v30 = v28;
          v31 = &v30;
          if ((*(__int16 *)(v10 + 120) - 446) <= 5)
          {
            v32 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v33 = &v32;
            v34 = &v31;
            result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom(v10, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v32);
          }
          else
          {
            v11 = *(unsigned int *)(v10 + 12);
            if ((_DWORD)v11)
            {
              v12 = 0;
              v13 = (char *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v10 + 120)
                  + ((unint64_t)((v11 - 1) * v11) >> 1);
              v14 = 8;
              do
              {
                if (v12 >= *(unsigned int *)(v10 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980882ACLL);
                }
                v15 = v13[v12];
                v16 = (v15 >> 5) - 1;
                if (v16 >= 5)
                  goto LABEL_41;
                v17 = *(_QWORD *)v10 + v14;
                if (*(_BYTE *)v17 == 1 && (v15 & 0xF) - 8 <= 2 && (v15 & 0x10) != 0)
                {
                  result = (_QWORD *)v30[2];
                  if (((0xFu >> v16) & 1) == 0 || !*(_BYTE *)*v30)
                }
                ++v12;
                v14 += 32;
              }
              while (v11 != v12);
            }
          }
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  int v6;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v5 = ****(_QWORD ****)(result + 16);
    v6 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t i;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v21[3];
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void **v26;
  _QWORD *v27;

  v22 = 0;
  if (a3 != 1)
    return result;
  v3 = *(_QWORD *)(result + 16);
  v4 = **(_QWORD **)result;
  v5 = **(_QWORD **)(result + 8);
  v21[0] = &v22;
  v21[1] = a2;
  v21[2] = v3;
  if (v4)
  {
    v23 = v21;
    v24 = &v23;
    if ((*(__int16 *)(v4 + 120) - 446) > 5)
    {
      v13 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v4 + 120)
            + ((unint64_t)((v13 - 1) * v13) >> 1);
        v16 = 8;
        while (v14 < *(unsigned int *)(v4 + 12))
        {
          v17 = v15[v14];
          v18 = (v17 >> 5) - 1;
          if (v18 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980885D4);
          }
          v19 = *(_QWORD *)v4 + v16;
          if ((v17 & 0xC) == 4 && *(_BYTE *)v19 == 1 && (v17 & 0x10) != 0)
          {
            result = v23[2];
            if (((0xFu >> v18) & 1) == 0 || !*(_BYTE *)*v23)
          }
          ++v14;
          v16 += 32;
          if (v13 == v14)
            goto LABEL_6;
        }
LABEL_38:
        __break(0xC471u);
        JUMPOUT(0x1980885B4);
      }
    }
    else
    {
      v25 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v26 = &v25;
      v27 = &v24;
      result = JSC::B3::Air::Inst::forEachArgCustom(v4, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v25);
    }
  }
LABEL_6:
  if (v5)
  {
    v23 = v21;
    v24 = &v23;
    if ((*(__int16 *)(v5 + 120) - 446) <= 5)
    {
      v25 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v26 = &v25;
      v27 = &v24;
      return JSC::B3::Air::Inst::forEachArgCustom(v5, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v25);
    }
    v6 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(v5 + 120) + ((unint64_t)((v6 - 1) * v6) >> 1);
      for (i = 8; ; i += 32)
      {
        if (v7 >= *(unsigned int *)(v5 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980885DCLL);
        }
        v10 = v8[v7];
        v11 = (v10 >> 5) - 1;
        if (v11 >= 5)
          break;
        v12 = *(_QWORD *)v5 + i;
        if (*(_BYTE *)v12 == 1 && (v10 & 0xF) - 8 <= 2 && (v10 & 0x10) != 0)
        {
          result = v23[2];
          if (((0xFu >> v11) & 1) == 0 || !*(_BYTE *)*v23)
        }
        if (v6 == ++v7)
          return result;
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SM_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESW_S6_S7_S8_SX_EUlRSC_S6_S7_S8_E_EEvSM_SM_RKT0_EUlSZ_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && a4 == 1)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE5buildEPSA_SN_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S12_EUlRSC_S6_S7_S8_E0_EEvS12_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v5 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      if (v5 >= 0x20)
      {
        v6 = (char)(31 - v5);
        v7 = (uint64_t)(*a2)[1];
        v8 = ***a2;
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v11 = *(_DWORD **)(v8 + 48);
          v12 = 4 * v9;
          if (((1 << v5) & *v4) != 0)
          {
            while (1)
            {
              v13 = -*v11;
              v14 = *(_QWORD *)(v7 + 328);
              if (v13 < 0 || *v11 == 0)
              {
                if (*v11 >= *(_DWORD *)(v14 + 28))
                  goto LABEL_27;
              }
              else if (*(_DWORD *)(v14 + 12) <= v13)
              {
                goto LABEL_27;
              }
              v12 -= 4;
              if (!v12)
                goto LABEL_7;
            }
          }
          do
          {
            v19 = -*v11;
            v20 = *(_QWORD *)(v7 + 328);
            if ((int)v19 < 1)
            {
              v19 = *v11;
              if (v19 >= *(unsigned int *)(v20 + 28))
              {
LABEL_27:
                __break(0xC471u);
                JUMPOUT(0x19808884CLL);
              }
              v20 += 16;
            }
            else if (*(_DWORD *)(v20 + 12) <= v19)
            {
              goto LABEL_27;
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v20 + 2 * v19) >= 4u)
            ++v11;
            v12 -= 4;
          }
          while (v12);
        }
LABEL_7:
        v10 = *(unsigned int *)(v7 + 268);
        if ((_DWORD)v10)
        {
          v15 = *(__int16 **)(v7 + 256);
          v16 = -v6;
          v17 = 4 * v10;
          do
          {
            v18 = *v15;
            v15 += 2;
            v17 -= 4;
          }
          while (v17);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  __int16 v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = (a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1;
  if (v4 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v7 = ******(_QWORD ******)(result + 16);
    v8 = *(unsigned int *)(v7 + 60);
    if ((_DWORD)v8)
    {
      v13 = *(_DWORD **)(v7 + 48);
      v14 = 4 * v8;
      do
      {
        v15 = -*v13;
        v16 = *(_QWORD *)(v6 + 328);
        if (v15 < 0 || *v13 == 0)
        {
          if (*v13 >= *(_DWORD *)(v16 + 28))
          {
LABEL_18:
            __break(0xC471u);
            JUMPOUT(0x1980889C4);
          }
        }
        else if (*(_DWORD *)(v16 + 12) <= v15)
        {
          goto LABEL_18;
        }
        v14 -= 4;
      }
      while (v14);
    }
    v9 = *(unsigned int *)(v6 + 268);
    if ((_DWORD)v9)
    {
      v10 = *(__int16 **)(v6 + 256);
      v11 = 4 * v9;
      do
      {
        v12 = *v10;
        v10 += 2;
        v11 -= 4;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE8addEdgesEPSA_SN_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSN_SN_RKT0_EUlSC_S6_S7_S8_E_EEvSN_SN_S11_EUlRSC_S6_S7_S8_E0_EEvS11_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  __int16 v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && a4 == 1)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v6 = ******(_QWORD ******)(result + 16);
    v7 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v7)
    {
      v12 = *(_DWORD **)(v6 + 48);
      v13 = 4 * v7;
      do
      {
        v14 = -*v12;
        v15 = *(_QWORD *)(v5 + 328);
        if (v14 < 0 || *v12 == 0)
        {
          if (*v12 >= *(_DWORD *)(v15 + 28))
          {
LABEL_16:
            __break(0xC471u);
            JUMPOUT(0x198088AD4);
          }
        }
        else if (*(_DWORD *)(v15 + 12) <= v14)
        {
          goto LABEL_16;
        }
        v13 -= 4;
      }
      while (v13);
    }
    v8 = *(unsigned int *)(v5 + 268);
    if ((_DWORD)v8)
    {
      v9 = *(__int16 **)(v5 + 256);
      v10 = 4 * v8;
      do
      {
        v11 = *v9;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
    }
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(uint64_t *a1, uint64_t a2, WTF::BitVector *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD **v30;
  JSC::B3::Air::Kind *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int *v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v52;
  BOOL v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  WTF::BitVector *v77;
  _QWORD **v78;
  unsigned int *v79;
  _QWORD **v80;
  uint64_t *v81;
  uint64_t *v82;
  WTF::BitVector *v83;
  __int128 *v84;
  unsigned int *v85;
  _QWORD **v86;
  char v87;
  __int16 v88;
  unsigned int v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t **v95;
  void *v96;
  void **v97;
  uint64_t **v98;
  void *v99;
  void **v100;
  void **v101;
  void **v102;

  v94 = 0;
  v78 = (_QWORD **)a2;
  v10 = *(unsigned int *)(a2 + 140);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned __int16 **)(a2 + 128);
    v12 = 2 * v10;
    do
    {
      v13 = *v11++;
      LODWORD(v96) = -v13;
      WTF::BitVector::set(this, v13);
      v14 = *a1;
      v15 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(a1 + 1), -v13);
      if (v15 == 3)
        v16 = 8;
      else
        v16 = 16;
      if (v15 >= 3)
        v17 = v16;
      else
        v17 = 4;
      v79 = JSC::B3::Air::Code::addStackSlot(v14, v17, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v91, &v94, (int *)&v96, &v79, v18, v19, v20, v21);
      v12 -= 2;
    }
    while (v12);
  }
  v77 = this;
  v22 = *a1;
  *(_QWORD *)&v91 = v22;
  *((_QWORD *)&v91 + 1) = &v93;
  v92 = 8;
  v75 = *(unsigned int *)(v22 + 108);
  if ((_DWORD)v75)
  {
    v23 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v22 + 96) + 8 * v23))
    {
      if (v75 == ++v23)
        goto LABEL_88;
    }
    if ((_DWORD)v75 != (_DWORD)v23)
    {
      LODWORD(v24) = *(_DWORD *)(v22 + 108);
      LODWORD(v25) = v23;
      v74 = v22;
      do
      {
        if (v24 <= v25)
        {
          __break(0xC471u);
          JUMPOUT(0x198089340);
        }
        v76 = v25;
        v26 = *(_QWORD *)(*(_QWORD *)(v22 + 96) + 8 * v25);
        v90 = 0;
        v89 = 0;
        if (*(_DWORD *)(v26 + 20))
        {
          v27 = 0;
          do
          {
            v28 = v27;
            v29 = *(_QWORD *)(v26 + 8);
            v30 = (_QWORD **)(v29 + ((unint64_t)v27 << 7));
            v88 = 0;
            v87 = 0;
            v79 = (unsigned int *)&v94;
            v80 = v30;
            v81 = a1;
            v82 = (uint64_t *)((char *)&v88 + 1);
            v83 = (WTF::BitVector *)&v88;
            v84 = (__int128 *)&v87;
            v31 = (JSC::B3::Air::Kind *)(v30 + 15);
            if ((*((__int16 *)v30 + 60) - 446) <= 5)
            {
              v97 = &v96;
              v98 = (uint64_t **)&v79;
              v100 = &v96;
              if (*(_WORD *)v31 == 448)
              {
                v102 = &v96;
                if (!*((_DWORD *)v30 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198089348);
                }
                (*(void (**)(_QWORD, _QWORD **, void ***))(*(_QWORD *)**v30 + 16))(**v30, v30, &v101);
              }
              else
              {
                switch(*(_WORD *)v31)
                {
                  case 0x1BE:
                    break;
                  case 0x1BF:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v30, (uint64_t)&v99);
                    break;
                  case 0x1C1:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v30, (uint64_t)&v99);
                    break;
                  case 0x1C2:
                    v101 = &v99;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v30, (uint64_t)&v101);
                    break;
                  case 0x1C3:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v30, (uint64_t)&v99);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v31, "\n");
                    __break(0xC471u);
                    JUMPOUT(0x198089280);
                }
              }
            }
            else
            {
              v32 = *((unsigned int *)v30 + 3);
              if ((_DWORD)v32)
              {
                v33 = 0;
                v34 = 0;
                v35 = (char *)&JSC::B3::Air::g_formTable
                    + 21 * *((__int16 *)v30 + 60)
                    + ((unint64_t)((v32 - 1) * v32) >> 1);
                v36 = 32 * v32;
                do
                {
                  if (v34 >= *((unsigned int *)v30 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980892E0);
                  }
                  if ((*v35 >> 5) - 1 >= 5u)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980891C8);
                  }
                  ++v34;
                  ++v35;
                  v33 += 32;
                }
                while (v36 != v33);
              }
            }
            if ((_BYTE)v88 && HIBYTE(v88))
              *(_WORD *)v31 = 94;
            if (v87)
            {
              v54 = *(__int16 *)v31;
              if ((v54 - 107) >= 2)
              {
                if (v54 == 90 || v54 == 94)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198089318);
                }
                __break(0xC471u);
                JUMPOUT(0x198089338);
              }
              v55 = *(_DWORD *)(*a1 + 180);
              *(_DWORD *)(*a1 + 180) = v55 + 1;
              LODWORD(v79) = -33 - v55;
              WTF::BitVector::set(v77, (v55 + 33));
              v62 = *((unsigned int *)v30 + 3);
              if ((_DWORD)v62 == *((_DWORD *)v30 + 2))
              {
                WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v30, (unsigned int *)&v79, v56, v57, v58, v59, v60, v61);
                v65 = *((_DWORD *)v30 + 3);
              }
              else
              {
                v63 = (uint64_t)&(*v30)[4 * v62];
                v64 = v79;
                *(_QWORD *)v63 = 0;
                *(_WORD *)(v63 + 8) = 513;
                *(_DWORD *)(v63 + 12) = 1;
                *(_QWORD *)(v63 + 16) = v64;
                *(_BYTE *)(v63 + 24) = 0;
                v65 = *((_DWORD *)v30 + 3) + 1;
                *((_DWORD *)v30 + 3) = v65;
              }
              if (v65 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1980891E8);
              }
              JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&>((uint64_t)&v91, v89, 0, *(_QWORD *)(v29 + (v28 << 7) + 112), v58, v59, v60, v61);
            }
            else
            {
              v79 = (unsigned int *)&v94;
              v80 = v78;
              v81 = (uint64_t *)&v90;
              v82 = a1;
              v83 = v77;
              v84 = &v91;
              v85 = &v89;
              v86 = v30;
              v95 = (uint64_t **)&v79;
              if ((*(__int16 *)v31 - 446) <= 5)
              {
                v97 = &v96;
                v98 = (uint64_t **)&v95;
                v100 = &v96;
                if (*(_WORD *)v31 == 448)
                {
                  v102 = &v96;
                  if (!*((_DWORD *)v30 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198089350);
                  }
                  (*(void (**)(_QWORD, _QWORD **, void ***))(*(_QWORD *)**v30 + 16))(**v30, v30, &v101);
                }
                else
                {
                  switch(*(_WORD *)v31)
                  {
                    case 0x1BE:
                      break;
                    case 0x1BF:
                      JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v30, (uint64_t)&v99);
                      break;
                    case 0x1C1:
                      JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v30, (uint64_t)&v99);
                      break;
                    case 0x1C2:
                      v101 = &v99;
                      JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v30, (uint64_t)&v101);
                      break;
                    case 0x1C3:
                      JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v30, (uint64_t)&v99);
                      break;
                    default:
                      WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v31, "\n");
                      __break(0xC471u);
                      JUMPOUT(0x1980892B8);
                  }
                }
              }
              else
              {
                v37 = *((unsigned int *)v30 + 3);
                if ((_DWORD)v37)
                {
                  v38 = 0;
                  v39 = 0;
                  v40 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                      + 21 * *(__int16 *)v31
                      + ((unint64_t)((v37 - 1) * v37) >> 1);
                  v41 = 32 * v37;
                  do
                  {
                    if (v39 >= *((unsigned int *)v30 + 3))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980892E8);
                    }
                    v42 = *v40;
                    if ((v42 >> 5) - 1 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980892D8);
                    }
                    ++v39;
                    ++v40;
                    v38 += 32;
                  }
                  while (v41 != v38);
                }
              }
            }
            v27 = v89 + 1;
            v89 = v27;
          }
          while (v27 < *(_DWORD *)(v26 + 20));
        }
        JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v91, (JSC::B3::Air::BasicBlock *)v26, (uint64_t)this, a4, a5, a6, a7, a8);
        if (v90)
        {
          v43 = *(_QWORD *)(v26 + 8);
          v44 = *(unsigned int *)(v26 + 20);
          v45 = v43 + (v44 << 7);
          if ((_DWORD)v44)
          {
            v46 = 0;
            v47 = 0;
            v48 = (unsigned int *)(v43 + (v44 << 7));
            v49 = (unint64_t)v48;
            do
            {
              v50 = (unsigned int *)(v43 + v46);
              if ((*(__int16 *)(v43 + v46 + 120) - 107) <= 6
                && ((1 << (*(_WORD *)(v43 + v46 + 120) - 107)) & 0x43) != 0
                && v50[3] == 2)
              {
                v52 = *(_QWORD *)v50;
                if (*(_BYTE *)(*(_QWORD *)v50 + 8) == 1)
                {
                  v53 = *(_WORD *)(v43 + v46 + 120) != 94 && *(_BYTE *)(v52 + 40) == 1;
                  if (v53 && *(_DWORD *)(v52 + 16) == *(_DWORD *)(v52 + 48))
                  {
                    if (v49 == *(_QWORD *)(v26 + 8) + ((unint64_t)*(unsigned int *)(v26 + 20) << 7))
                    {
                      v49 = v43 + v46;
                    }
                    else if (v50 != v48)
                    {
                      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v48, v50, v49, a4, a5, a6, a7, a8);
                      v49 += v43 + v46 - (_QWORD)v48;
                      v52 = *(_QWORD *)(v43 + v46);
                    }
                    if (v43 + v46 + 16 != v52 && v52)
                    {
                      v66 = v43 + v46;
                      *(_QWORD *)v66 = 0;
                      *(_DWORD *)(v66 + 8) = 0;
                      WTF::fastFree(v52, v50, (uint64_t)this, a4, a5, a6, a7, a8);
                    }
                    v48 = (unsigned int *)(v43 + v46 + 128);
                    ++v47;
                  }
                }
              }
              v46 += 128;
            }
            while (v43 + v46 < v45);
            v43 = *(_QWORD *)(v26 + 8);
            LODWORD(v44) = *(_DWORD *)(v26 + 20);
            v45 = v49;
          }
          else
          {
            v47 = 0;
            v48 = (unsigned int *)(v43 + (v44 << 7));
          }
          a2 = v43 + ((unint64_t)v44 << 7);
          if (v48 != (unsigned int *)a2)
          {
            WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v48, (unsigned int *)a2, v45, a4, a5, a6, a7, a8);
            LODWORD(v44) = *(_DWORD *)(v26 + 20);
          }
          *(_DWORD *)(v26 + 20) = v44 - v47;
        }
        v25 = (v76 + 1);
        v22 = v74;
        v24 = *(unsigned int *)(v74 + 108);
        if (v24 > v25)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v74 + 96) + 8 * v25))
          {
            if (v24 == ++v25)
            {
              LODWORD(v25) = *(_DWORD *)(v74 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v75 != (_DWORD)v25);
    }
  }
LABEL_88:
  JSC::B3::Air::InsertionSet::~InsertionSet((JSC::B3::Air::InsertionSet *)&v91, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v94)
    WTF::fastFree(v94 - 16, v67, v68, v69, v70, v71, v72, v73);
}

uint64_t JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::selectSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;

  v13 = result;
  v10 = *(_QWORD *)(a1 + 200);
  if (v10 >= 0)
    v11 = 2 * v10 + 8;
  else
    v11 = a1 + 200;
  *(_QWORD *)(v11 + (((unint64_t)result >> 3) & 0x1FF8)) &= ~(1 << result);
  v12 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 192))
    return (uint64_t)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 184, (unint64_t)&v13);
  *(_WORD *)(*(_QWORD *)(a1 + 184) + 2 * v12) = result;
  *(_DWORD *)(a1 + 196) = v12 + 1;
  return result;
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>,(JSC::B3::Bank)1>::allocate(void)::{lambda(unsigned int &)#1}::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  _DWORD *v40;
  _BYTE v41[24];

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  LOWORD(v7) = *(_WORD *)(v6 + 4 * v5);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  do
  {
    v9 = v7;
    v7 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v7);
  }
  while (v7);
  LOWORD(v6) = *(_WORD *)(v6 + 4 * v5 + 2);
  do
  {
    v10 = v6;
    LODWORD(v6) = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v6);
  }
  while ((_DWORD)v6);
  v11 = *(unsigned __int16 *)(v4 + 16);
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v11 >= v10)
    v13 = v9;
  else
    v13 = v10;
  if (v12 != v13)
  {
    if (v11 >= v13)
      goto LABEL_51;
    v14 = v4 + 24;
    v15 = *(_QWORD *)(v4 + 24);
    if (v15 >= 0)
      v14 = 2 * v15 + 8;
    v16 = *(unsigned __int16 *)(v4 + 36) * (unint64_t)v12 + v13;
    if (((*(_QWORD *)(v14 + ((v16 >> 3) & 0x3FFFFFF8)) >> v16) & 1) != 0)
    {
LABEL_51:
      *a2 = -1;
    }
    else
    {
      {
        return;
      }
      *(_WORD *)(*(_QWORD *)(v4 + 144) + 2 * v13) = v12;
      if (*(_DWORD *)(v4 + 108) <= v13)
      {
        __break(0xC471u);
        goto LABEL_55;
      }
      v22 = *(_QWORD *)(v4 + 96) + 40 * v13;
      v23 = *(unsigned int *)(v22 + 4);
      v24 = (_QWORD *)(v22 + 8);
      if ((_DWORD)v23 != 8)
        v24 = (_QWORD *)*v24;
      v25 = 0;
      v40 = a2;
      while ((_DWORD)v23 != v25)
      {
        v26 = v25;
        v27 = *((_DWORD *)v24 + v25++);
        if (v27 != -1)
        {
          v28 = v26;
          goto LABEL_25;
        }
      }
      v28 = v23;
LABEL_25:
      if ((_DWORD)v23 != (_DWORD)v28)
      {
        v29 = v28 | (v23 << 32);
        while (*(_DWORD *)(v4 + 108) > v12)
        {
          WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v41, (unsigned int *)(*(_QWORD *)(v4 + 96) + 40 * v12), *((_DWORD *)v24 + v29));
          v30 = HIDWORD(v29);
          if ((v28 + 1) > HIDWORD(v29))
            LODWORD(v30) = v28 + 1;
          while (1)
          {
            v31 = (v28 + 1);
            v29 = v29 & 0xFFFFFFFF00000000 | v31;
            if ((_DWORD)v30 - 1 == (_DWORD)v28)
              break;
            LODWORD(v28) = v28 + 1;
            if (*((_DWORD *)v24 + v31) != -1)
              goto LABEL_32;
          }
          LODWORD(v31) = v30;
LABEL_32:
          LODWORD(v28) = v31;
          if ((_DWORD)v23 == (_DWORD)v31)
            goto LABEL_35;
        }
        __break(0xC471u);
LABEL_55:
        JUMPOUT(0x198089704);
      }
LABEL_35:
      v32 = *(_QWORD *)(v4 + 40) + 16 * v13;
      v33 = *(unsigned int *)(v32 + 12);
      if ((_DWORD)v33)
      {
        v34 = *(unsigned __int16 **)v32;
        v35 = (uint64_t *)(v4 + 160);
        v36 = 2 * v33;
        while (1)
        {
          v37 = *v34;
          if (*v35 >= 0)
            v38 = 2 * *v35 + 8;
          else
            v38 = v4 + 160;
          if (((*(_QWORD *)(v38 + ((v37 >> 3) & 0x1FF8)) >> v37) & 1) != 0
            || *(_WORD *)(*(_QWORD *)(v4 + 144) + 2 * v37))
          {
            goto LABEL_46;
          }
          if (*(unsigned __int16 *)(v4 + 16) < v12)
          {
            v39 = 1;
            v37 = v12;
LABEL_45:
            *(_WORD *)(*(_QWORD *)(v4 + 56) + 2 * v37) += v39;
          }
LABEL_46:
          ++v34;
          v36 -= 2;
          if (!v36)
            goto LABEL_49;
        }
        v39 = -1;
        goto LABEL_45;
      }
LABEL_49:
      *(_BYTE *)(v4 + 209) = 1;
      **(_BYTE **)(a1 + 8) = 1;
      *v40 = -1;
    }
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  JSC::B3::Air::Inst *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  int v38;

  if (a4 == 1 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (int *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v8 = result;
      v9 = **(_QWORD **)result;
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v13 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(_DWORD *)(v9 + 16 * v15);
        if (v16 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v17) & v12;
            v16 = *(_DWORD *)(v9 + 16 * v15);
            ++v17;
            if (v16 == v6)
              goto LABEL_12;
          }
          v15 = *(unsigned int *)(v9 - 4);
        }
LABEL_12:
        if (v15 != *(_DWORD *)(v9 - 4))
        {
          v18 = *(JSC::B3::Air::Inst **)(result + 8);
          if (!*((_DWORD *)v18 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198089A08);
          }
          v19 = *(_QWORD *)(v8 + 16);
          result = JSC::B3::Air::Inst::admitsStack(v18, (unint64_t)(a2 - *(_QWORD *)v18) >> 5);
          v20 = result;
          if ((result & 1) != 0)
            goto LABEL_17;
          v29 = *(uint64_t **)(v8 + 8);
          v30 = *((__int16 *)v29 + 60) - 90;
          v31 = v30 > 0x12;
          v32 = (1 << v30) & 0x60011;
          if (!v31 && v32 != 0)
          {
            v34 = *((unsigned int *)v29 + 3);
            if (!(_DWORD)v34)
            {
              __break(0xC471u);
              JUMPOUT(0x198089A10);
            }
            v35 = *v29;
            v36 = ((unint64_t)(a2 - v35) >> 5) ^ 1;
            if (v36 >= v34)
            {
              __break(0xC471u);
              JUMPOUT(0x198089A18);
            }
            if ((_DWORD)v34 == 2)
            {
              v37 = (_BYTE *)(v35 + 32 * v36);
              if (v37[8] == 9 && *(_BYTE *)(*(_QWORD *)v37 + 4) == 1)
              {
LABEL_17:
                if (a3 > 0xB || ((1 << a3) & 0xFF5) == 0)
                {
                  v22 = *v7;
                  goto LABEL_21;
                }
                v21 = *(_QWORD *)(v19 + 40);
                v22 = *v7;
                v24 = *(_QWORD *)(v21 + 24);
                v23 = v21 + 24;
                v25 = 2 * v24 + 8;
                if (v24 >= 0)
                  v23 = v25;
                if (((*(_QWORD *)(v23 + (((unint64_t)-*v7 >> 3) & 0x1FFFFFF8)) >> -(char)v22) & 1) == 0)
                {
LABEL_21:
                  result = JSC::B3::Air::TmpWidth::requiredWidth(v19 + 8, v22);
                  if (a3 - 4 <= 6 && result > a5)
                    return result;
                  v26 = *(_BYTE **)(v8 + 24);
                  if ((_DWORD)result == 2)
                  {
                    v38 = *v26;
                    v27 = *(unsigned int **)(v9 + 16 * v15 + 8);
                    if (v38)
                    {
LABEL_33:
                      v28 = 4;
LABEL_27:
                      if (*v27 > v28)
                        v28 = *v27;
                      *v27 = v28;
                      *(_BYTE *)(a2 + 24) = 0;
                      *(_QWORD *)v7 = 0;
                      *(_QWORD *)a2 = v27;
                      *(_WORD *)(a2 + 8) = 521;
                      *(_DWORD *)(a2 + 12) = 0;
                      **(_BYTE **)(v8 + 32) = 1;
                      if ((v20 & 1) == 0)
                        **(_BYTE **)(v8 + 40) = 1;
                      return result;
                    }
                  }
                  else
                  {
                    *v26 = 0;
                    v27 = *(unsigned int **)(v9 + 16 * v15 + 8);
                  }
                  if (a5 != 3)
                  {
                    v28 = 1;
                    switch(a5)
                    {
                      case 0u:
                        goto LABEL_27;
                      case 1u:
                        v28 = 2;
                        goto LABEL_27;
                      case 2u:
                        goto LABEL_33;
                      case 4u:
                        v28 = 16;
                        goto LABEL_27;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x198089A00);
                    }
                  }
                  v28 = 8;
                  goto LABEL_27;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  if (*(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v7 = **a1;
      if (!v7)
        goto LABEL_13;
      v9 = *(_DWORD *)(v7 - 8);
      v10 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
      v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
      v12 = v9 & (v11 ^ HIWORD(v11));
      v13 = *(_DWORD *)(v7 + 16 * v12);
      if (v13 != v5)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v9;
          v13 = *(_DWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == v5)
            goto LABEL_12;
        }
        v12 = *(unsigned int *)(v7 - 4);
      }
LABEL_12:
      if (v12 != *(_DWORD *)(v7 - 4))
      {
        v19 = a1[3];
        v20 = JSC::B3::Air::TmpWidth::requiredWidth((uint64_t)(v19 + 1), v5);
        if (v20 == 3)
          v21 = 8;
        else
          v21 = 16;
        if (v20 < 3)
          v21 = 4;
        if (v21 == 8)
        {
          v22 = 108;
        }
        else if (v21 == 4)
        {
          v22 = 107;
        }
        else
        {
          v22 = 113;
        }
        v23 = *(_DWORD *)(*v19 + 180);
        *(_DWORD *)(*v19 + 180) = v23 + 1;
        *(_DWORD *)(a2 + 16) = -33 - v23;
        WTF::BitVector::set((WTF::BitVector *)a1[4], (v23 + 33));
        if (a3 != 10)
        {
          v26 = *(_QWORD *)(v7 + 16 * v12 + 8);
          v28 = 0;
          v29 = 0;
          WORD4(v27) = 521;
          *(_QWORD *)&v27 = v26;
          HIDWORD(v27) = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Arg &,JSC::B3::Air::Tmp &>((uint64_t)a1[5], *(unsigned int *)a1[6], v22, a1[7][14], &v27, *(unsigned int *)(a2 + 16), v24, v25);
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>((uint64_t)a1[5], (*(_DWORD *)a1[6] + 1), v22, a1[7][14], *(unsigned int *)(a2 + 16), &v27, v24, v25);
        }
      }
      else
      {
LABEL_13:
        v15 = a1[1];
        if (*((_DWORD *)v15 + 57))
        {
          v16 = -v5;
          v17 = v15[27];
          do
          {
            v18 = v16;
            v16 = *(unsigned __int16 *)(v17 + 2 * (unsigned __int16)v16);
          }
          while (v16);
          if (v5 + v18)
          {
            *(_DWORD *)(a2 + 16) = -v18;
            *(_BYTE *)a1[2] = 1;
          }
        }
      }
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::AbstractColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v17;

  v11 = WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a3);
  *(_WORD *)(v11 + 16) = 32;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_DWORD *)(v11 + 40) = 0;
  v12 = v11 + 104;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  v17 = 0;
  WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::Vector(v11 + 152, a4, &v17);
  *(_QWORD *)(a1 + 168) = 0x8000000000000000;
  *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  v13 = (_QWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a5;
  *(_QWORD *)(a1 + 248) = a6;
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 4;
  WTF::Vector<WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 48, a4);
  WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(v12, a4);
  if ((*(_QWORD *)(a1 + 168) & 0x8000000000000000) != 0)
    v14 = 63;
  else
    v14 = *(_QWORD *)(2 * *(_QWORD *)(a1 + 168));
  if (v14 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 168), a4, 0);
  if ((*v13 & 0x8000000000000000) != 0)
    v15 = 63;
  else
    v15 = *(_QWORD *)(2 * *v13);
  if (v15 < a4)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a1 + 208), a4, 0);
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::initializeDegrees(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  char *v5;

  WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(a1 + 64, a2);
  v4 = *(unsigned __int16 *)(a1 + 16);
  v5 = *(char **)(a1 + 64);
  memset(v5, 255, 2 * v4 + 2);
  bzero(&v5[2 * v4 + 2], 2 * (a2 - ((_DWORD)v4 + 1)));
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  _WORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD **v44;
  uint64_t v45;
  _QWORD *v46;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _WORD *v74;
  uint64_t v75;
  _QWORD v76[3];
  _QWORD **v77;
  _QWORD **v78;
  _QWORD *v79;
  _WORD **v80;
  _QWORD *v81;
  void *v82;
  void **v83;
  _QWORD *v84;

  v77 = a3;
  v78 = a2;
  v76[0] = &v78;
  v76[1] = &v77;
  v76[2] = a1;
  v79 = v76;
  if (a2)
  {
    v80 = (_WORD **)&v79;
    v81 = &v80;
    if ((*((__int16 *)a2 + 60) - 446) > 5)
    {
      v12 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a2 + 60)
            + ((unint64_t)((v12 - 1) * v12) >> 1);
        v15 = 1;
        do
        {
          if (v13 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808A4D0);
          }
          v16 = v14[v13];
          if ((v16 >> 5) - 1 >= 5)
            goto LABEL_104;
          if ((v16 & 0xC) == 4 && LOBYTE((*a2)[v15]) == 1)
          {
            v18 = *v80;
            LODWORD(v82) = (*a2)[v15 + 1];
          }
          ++v13;
          v15 += 4;
        }
        while (v12 != v13);
      }
    }
    else
    {
      v82 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v83 = &v82;
      v84 = &v81;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v82);
    }
  }
  if (a3)
  {
    v80 = (_WORD **)&v79;
    v81 = &v80;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v19 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 1;
        do
        {
          if (v20 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808A4D8);
          }
          v23 = v21[v20];
          if ((v23 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19808A4C8);
          }
          v24 = &(*a3)[v22];
          if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
          {
            v25 = *v80;
            LODWORD(v82) = *((_DWORD *)v24 + 2);
          }
          ++v20;
          v22 += 4;
        }
        while (v19 != v20);
      }
    }
    else
    {
      v82 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v83 = &v82;
      v84 = &v81;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v82);
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19808A508);
    }
    v26 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v28 = v27 | v26;
    if (v27 | v26)
    {
      v29 = v26;
      do
      {
        v30 = __clz(__rbit64(v28));
        v31 = (char)(31 - v30);
        if (v30 < 0x20)
          v31 = v30 + 1;
        LODWORD(v82) = v31;
        v28 &= v28 - 1;
      }
      while (v28);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19808A510);
    }
    v32 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v34 = v33 | v32;
    if (v33 | v32)
    {
      v35 = v32;
      do
      {
        v36 = __clz(__rbit64(v34));
        v37 = (char)(31 - v36);
        if (v36 < 0x20)
          v37 = v36 + 1;
        LODWORD(v82) = v37;
        v34 &= v34 - 1;
      }
      while (v34);
    }
  }
  v38 = (uint64_t)v78;
  if (!v78)
    goto LABEL_55;
  v39 = *((__int16 *)v78 + 60);
  if ((v39 - 107) > 6 || ((1 << (*((_WORD *)v78 + 60) - 107)) & 0x43) == 0)
    goto LABEL_55;
  if (*((_DWORD *)v78 + 3) != 2)
    goto LABEL_55;
  v41 = (uint64_t)*v78;
  if (*((_BYTE *)*v78 + 8) != 1 || *(_BYTE *)(v41 + 40) != 1)
    goto LABEL_55;
  if (v39 != 94)
    goto LABEL_57;
  v42 = *(_QWORD *)(a1 + 376);
  if (!v42)
  {
LABEL_55:
    v44 = v77;
    v45 = *(_QWORD *)a4;
    v46 = (_QWORD *)a1;
  }
  v43 = *(unsigned int *)(v41 + 16);
  if ((int)v43 < 1)
  {
    v43 = -(int)v43;
    if (v43 < *(unsigned int *)(v42 + 28))
    {
      v42 += 16;
      goto LABEL_54;
    }
LABEL_104:
    __break(0xC471u);
    JUMPOUT(0x19808A4A8);
  }
  if (v43 >= *(_DWORD *)(v42 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x19808A518);
  }
LABEL_54:
  if (*(unsigned __int8 *)(*(_QWORD *)v42 + 2 * v43 + 1) > 2u)
    goto LABEL_55;
LABEL_57:
  v48 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v78 + 60);
  v49 = v48[1];
  if ((v49 >> 5) - 1 >= 5 || (v50 = v48[2], (v50 >> 5) - 1 > 4))
  {
    __break(0xC471u);
    JUMPOUT(0x19808A4F8);
  }
  v51 = v49 & 0xC;
  v52 = *(_DWORD *)(v41 + 16);
  v53 = v51 == 4;
  if (v51 == 4)
    v54 = 0;
  else
    v54 = *(_DWORD *)(v41 + 16);
  v55 = *(_DWORD *)(v41 + 48);
  v56 = v50 & 0xC;
  if (!v53)
    v52 = 0;
  if (v56 == 4)
    v57 = v54;
  else
    v57 = v55;
  if (v56 != 4)
    v55 = v52;
  LOWORD(v82) = -(__int16)v57;
  v58 = -v55;
  WORD1(v82) = -(__int16)v55;
  v59 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v59 == *(_DWORD *)(a1 + 96))
  {
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v59) = (_DWORD)v82;
    ++*(_DWORD *)(a1 + 100);
  }
  v60 = *(_DWORD *)(a1 + 316);
  LODWORD(v82) = v60;
  v61 = (_QWORD *)(a1 + 320);
  v62 = *(unsigned int *)(a1 + 332);
  LODWORD(v76[0]) = v62;
  if ((_DWORD)v62 == *(_DWORD *)(a1 + 328))
    *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * *(unsigned int *)(a1 + 332)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v82);
  else
    *(_DWORD *)(*v61 + 4 * v62) = v60;
  v63 = (_QWORD *)(a1 + 304);
  ++*(_DWORD *)(a1 + 332);
  v64 = *(unsigned int *)(a1 + 316);
  if ((_DWORD)v64 == *(_DWORD *)(a1 + 312))
    *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(a1 + 316)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)v76);
  else
    *(_DWORD *)(*v63 + 4 * v64) = v62;
  ++*(_DWORD *)(a1 + 316);
  v65 = *((unsigned int *)v78 + 3);
  if ((_DWORD)v65)
  {
    v66 = 32 * v65;
    v67 = (int *)(*v78 + 2);
    do
    {
      v68 = *v67;
      v67 += 8;
      v69 = -v68;
      if (*(_DWORD *)(a1 + 116) <= -v68)
      {
        __break(0xC471u);
        JUMPOUT(0x19808A500);
      }
      WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v82, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v69), v59);
      v66 -= 32;
    }
    while (v66);
  }
  v70 = *(unsigned int *)(*(_QWORD *)a4 + 60);
  if ((_DWORD)v70)
  {
    v71 = *(_DWORD **)(*(_QWORD *)a4 + 48);
    v72 = 4 * v70;
    do
    {
      if (v57 + *v71)
      ++v71;
      v72 -= 4;
    }
    while (v72);
  }
  v73 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v73)
  {
    v74 = *(_WORD **)(a1 + 264);
    v75 = 4 * v73;
    do
    {
      if (v57 != *(_DWORD *)v74)
      v74 += 2;
      v75 -= 4;
    }
    while (v75);
  }
  v44 = v77;
  v45 = *(_QWORD *)a4;
  v46 = (_QWORD *)a1;
  v38 = 0;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD **v8;
  _QWORD **v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t ****v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t ***v84;
  unsigned __int16 v85;
  uint64_t **v86;
  uint64_t ***v87;
  uint64_t *****v88;

  v8 = a3;
  v9 = (_QWORD **)a2;
  v79[1] = result;
  v80 = a4;
  v79[0] = &v80;
  v83 = v79;
  if (a2)
  {
    v84 = (uint64_t ***)&v83;
    v81 = &v84;
    if ((*(__int16 *)(a2 + 120) - 446) > 5)
    {
      v78 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v78)
      {
        v10 = 0;
        v75 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(a2 + 120)
            + ((unint64_t)((v78 - 1) * v78) >> 1);
        do
        {
          if (v10 >= *((unsigned int *)v9 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808AB54);
          }
          v11 = v75[v10];
          if ((v11 >> 5) - 1 >= 5)
            goto LABEL_89;
          v12 = (uint64_t)&(*v9)[4 * v10];
          v13 = (v11 & 0xC) == 4 && *(_BYTE *)(v12 + 8) == 1;
          if (v13 && (v11 & 0x10) != 0)
          {
            v14 = *(_DWORD *)(v12 + 16);
            v15 = (*v84)[1];
            v16 = ***v84;
            v17 = *(unsigned int *)(v16 + 60);
            if ((_DWORD)v17)
            {
              v18 = *(unsigned int **)(v16 + 48);
              v19 = -v14;
              v20 = (unsigned __int16)-(__int16)v14;
              v21 = 4 * v17;
              do
              {
                v22 = *v18;
                v23 = -*v18;
                v24 = v15[47];
                if (v23 < 0 || *v18 == 0)
                {
                  if (v22 >= *(_DWORD *)(v24 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19808AB64);
                  }
                }
                else if (*(_DWORD *)(v24 + 12) <= v23)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19808AB44);
                }
                v25 = (unsigned __int16)-(__int16)v14;
                if ((_DWORD)v25 != (unsigned __int16)v22)
                {
                  LOWORD(v86) = -(__int16)v14;
                  v85 = v22;
                  result = (_QWORD *)WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::addAndReturnIsNewEntry((uint64_t)(v15 + 3), v25, (unsigned __int16)v22, a4, a5, a6, a7, a8);
                  if ((_DWORD)result)
                  {
                    v26 = *((unsigned __int16 *)v15 + 8);
                    if (v26 < (unsigned __int16)v19)
                    {
                      v27 = v15[6] + 16 * v20;
                      v28 = *(unsigned int *)(v27 + 12);
                      if ((_DWORD)v28 == *(_DWORD *)(v27 + 8))
                      {
                        result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15[6] + 16 * v20, v28 + 1, (unint64_t)&v85);
                        v28 = *(unsigned int *)(v27 + 12);
                        *(_WORD *)(*(_QWORD *)v27 + 2 * v28) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v27 + 2 * v28) = v22;
                      }
                      *(_DWORD *)(v27 + 12) = v28 + 1;
                      ++*(_WORD *)(v15[8] + 2 * v20);
                      LOWORD(v22) = v85;
                      v26 = *((unsigned __int16 *)v15 + 8);
                    }
                    if (v26 < (unsigned __int16)v22)
                    {
                      v29 = v15[6] + 16 * (unsigned __int16)v22;
                      v30 = *(unsigned int *)(v29 + 12);
                      if ((_DWORD)v30 == *(_DWORD *)(v29 + 8))
                      {
                        result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15[6] + 16 * (unsigned __int16)v22, v30 + 1, (unint64_t)&v86);
                        v30 = *(unsigned int *)(v29 + 12);
                        *(_WORD *)(*(_QWORD *)v29 + 2 * v30) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v29 + 2 * v30) = v19;
                      }
                      *(_DWORD *)(v29 + 12) = v30 + 1;
                      ++*(_WORD *)(v15[8] + 2 * v85);
                    }
                  }
                }
                ++v18;
                v21 -= 4;
              }
              while (v21);
            }
            v31 = *((unsigned int *)v15 + 69);
            if ((_DWORD)v31)
            {
              v32 = (unsigned __int16 *)v15[33];
              v33 = -v14;
              v34 = (unsigned __int16)-(__int16)v14;
              v35 = 4 * v31;
              do
              {
                v36 = *v32;
                if (v36 != (unsigned __int16)v14)
                {
                  v37 = -v36;
                  LOWORD(v86) = -(__int16)v14;
                  v85 = -(__int16)v36;
                  result = (_QWORD *)WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::addAndReturnIsNewEntry((uint64_t)(v15 + 3), (unsigned __int16)-(__int16)v14, (unsigned __int16)-(__int16)v36, a4, a5, a6, a7, a8);
                  if ((_DWORD)result)
                  {
                    v38 = *((unsigned __int16 *)v15 + 8);
                    if (v38 < (unsigned __int16)v33)
                    {
                      v39 = v15[6] + 16 * v34;
                      v40 = *(unsigned int *)(v39 + 12);
                      if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
                      {
                        result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15[6] + 16 * v34, v40 + 1, (unint64_t)&v85);
                        v40 = *(unsigned int *)(v39 + 12);
                        *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v39 + 2 * v40) = v37;
                      }
                      *(_DWORD *)(v39 + 12) = v40 + 1;
                      ++*(_WORD *)(v15[8] + 2 * v34);
                      LOWORD(v37) = v85;
                      v38 = *((unsigned __int16 *)v15 + 8);
                    }
                    if (v38 < (unsigned __int16)v37)
                    {
                      v41 = v15[6] + 16 * (unsigned __int16)v37;
                      v42 = *(unsigned int *)(v41 + 12);
                      if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
                      {
                        result = (_QWORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15[6] + 16 * (unsigned __int16)v37, v42 + 1, (unint64_t)&v86);
                        v42 = *(unsigned int *)(v41 + 12);
                        *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = *(_WORD *)result;
                      }
                      else
                      {
                        *(_WORD *)(*(_QWORD *)v41 + 2 * v42) = v33;
                      }
                      *(_DWORD *)(v41 + 12) = v42 + 1;
                      ++*(_WORD *)(v15[8] + 2 * v85);
                    }
                  }
                }
                v32 += 2;
                v35 -= 4;
              }
              while (v35);
            }
          }
          ++v10;
          v8 = a3;
          v9 = (_QWORD **)a2;
        }
        while (v10 != v78);
      }
    }
    else
    {
      v86 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v87 = &v86;
      v88 = &v81;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom(a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v86);
    }
  }
  if (v8)
  {
    v84 = (uint64_t ***)&v83;
    v81 = &v84;
    if ((*((__int16 *)v8 + 60) - 446) > 5)
    {
      v43 = *((unsigned int *)v8 + 3);
      if ((_DWORD)v43)
      {
        v44 = 0;
        v45 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)v8 + 60)
            + ((unint64_t)((v43 - 1) * v43) >> 1);
        do
        {
          if (v44 >= *((unsigned int *)v8 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808AB5CLL);
          }
          v46 = v45[v44];
          if ((v46 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19808AB3CLL);
          }
          v47 = (uint64_t)&(*v8)[4 * v44];
          if (*(_BYTE *)(v47 + 8) == 1 && (v46 & 0xF) - 8 <= 2 && (v46 & 0x10) != 0)
          {
            v48 = *(_DWORD *)(v47 + 16);
            v49 = (*v84)[1];
            v50 = ***v84;
            v51 = *(unsigned int *)(v50 + 60);
            if ((_DWORD)v51)
            {
              v52 = *(_DWORD **)(v50 + 48);
              v53 = 4 * v51;
              do
              {
                v54 = -*v52;
                v55 = v49[47];
                if (v54 < 0 || *v52 == 0)
                {
                  if (*v52 >= *(_DWORD *)(v55 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19808AB6CLL);
                  }
                }
                else if (*(_DWORD *)(v55 + 12) <= v54)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19808AB4CLL);
                }
                v53 -= 4;
              }
              while (v53);
            }
            v56 = *((unsigned int *)v49 + 69);
            if ((_DWORD)v56)
            {
              v57 = (__int16 *)v49[33];
              v58 = -v48;
              v59 = 4 * v56;
              do
              {
                v60 = *v57;
                v57 += 2;
                v59 -= 4;
              }
              while (v59);
            }
          }
          ++v44;
        }
        while (v44 != v43);
      }
    }
    else
    {
      v86 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v87 = &v86;
      v88 = &v81;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v8, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v86);
    }
  }
  v86 = (uint64_t **)v79;
  v87 = (uint64_t ***)&v84;
  if (v9 && *((_WORD *)v9 + 60) == 448)
  {
    LOBYTE(v84) = 4;
    if (!*((_DWORD *)v9 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19808AB74);
    }
    v81 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v9 + 80))(**v9, v9);
    v82 = v61;
  }
  if (v8 && *((_WORD *)v8 + 60) == 448)
  {
    LOBYTE(v84) = 8;
    if (*((_DWORD *)v8 + 3))
    {
      v81 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v8 + 72))(**v8, v8);
      v82 = v68;
    }
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x19808AB1CLL);
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v9;
  int v10;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v9 = (_WORD *)****((_QWORD ****)result + 2);
    v10 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(_WORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[3];
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void **v31;
  _QWORD *v32;

  v27 = a4;
  if (a3 == 1)
  {
    v8 = *((_QWORD *)result + 2);
    v9 = **(_QWORD **)result;
    v10 = **((_QWORD **)result + 1);
    v26[0] = &v27;
    v26[1] = a2;
    v26[2] = v8;
    if (v9)
    {
      v28 = v26;
      v29 = &v28;
      if ((*(__int16 *)(v9 + 120) - 446) > 5)
      {
        v11 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v9 + 120)
              + ((unint64_t)((v11 - 1) * v11) >> 1);
          v14 = 8;
          while (1)
          {
            if (v12 >= *(unsigned int *)(v9 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19808AE98);
            }
            v15 = v13[v12];
            v16 = (v15 >> 5) - 1;
            if (v16 >= 5)
              break;
            v17 = *(_QWORD *)v9 + v14;
            if ((v15 & 0xC) == 4 && *(_BYTE *)v17 == 1 && (v15 & 0x10) != 0)
            {
              result = (_WORD *)v28[2];
              if (((0xFu >> v16) & 1) == 0 || !*(_BYTE *)*v28)
            }
            ++v12;
            v14 += 32;
            if (v11 == v12)
              goto LABEL_19;
          }
LABEL_37:
          __break(0xC471u);
          JUMPOUT(0x19808AE70);
        }
      }
      else
      {
        v30 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v31 = &v30;
        v32 = &v29;
        result = (_WORD *)JSC::B3::Air::Inst::forEachArgCustom(v9, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v30);
      }
    }
LABEL_19:
    if (v10)
    {
      v28 = v26;
      v29 = &v28;
      if ((*(__int16 *)(v10 + 120) - 446) <= 5)
      {
        v30 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v31 = &v30;
        v32 = &v29;
        return (_WORD *)JSC::B3::Air::Inst::forEachArgCustom(v10, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v30);
      }
      v19 = *(unsigned int *)(v10 + 12);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v10 + 120)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 8;
        while (v20 < *(unsigned int *)(v10 + 12))
        {
          v23 = v21[v20];
          v24 = (v23 >> 5) - 1;
          if (v24 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19808AE90);
          }
          v25 = *(_QWORD *)v10 + v22;
          if (*(_BYTE *)v25 == 1 && (v23 & 0xF) - 8 <= 2 && (v23 & 0x10) != 0)
          {
            result = (_WORD *)v28[2];
            if (((0xFu >> v24) & 1) == 0 || !*(_BYTE *)*v28)
          }
          ++v20;
          v22 += 32;
          if (v19 == v20)
            return result;
        }
        goto LABEL_37;
      }
    }
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1 && (_DWORD)a4 == 1)
  {
    v8 = ***((_QWORD ***)result + 2);
    result = *(_WORD **)(v8 + 16);
    if (a5 > 3 || !**(_BYTE **)v8)
  }
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::addEdge(_WORD *result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _WORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  if ((_DWORD)a2 != a3)
  {
    v22 = v8;
    v23 = v9;
    v10 = a3;
    v11 = a2;
    v12 = result;
    v21 = a2;
    v20 = a3;
    result = (_WORD *)WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::addAndReturnIsNewEntry((uint64_t)(result + 12), a2, a3, a4, a5, a6, a7, a8);
    if ((_DWORD)result)
    {
      v13 = (unsigned __int16)v12[8];
      if (v13 < v11)
      {
        v14 = *((_QWORD *)v12 + 6) + 16 * v11;
        v15 = *(unsigned int *)(v14 + 12);
        if ((_DWORD)v15 == *(_DWORD *)(v14 + 8))
        {
          result = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*((_QWORD *)v12 + 6) + 16 * v11, v15 + 1, (unint64_t)&v20);
          v15 = *(unsigned int *)(v14 + 12);
          *(_WORD *)(*(_QWORD *)v14 + 2 * v15) = *result;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v14 + 2 * v15) = v10;
        }
        v16 = *((_QWORD *)v12 + 8);
        v17 = *(_WORD *)(v16 + 2 * v11);
        *(_DWORD *)(v14 + 12) = v15 + 1;
        *(_WORD *)(v16 + 2 * v11) = v17 + 1;
        v10 = v20;
        v13 = (unsigned __int16)v12[8];
      }
      if (v13 < v10)
      {
        v18 = *((_QWORD *)v12 + 6) + 16 * v10;
        v19 = *(unsigned int *)(v18 + 12);
        if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
        {
          result = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v21);
          v19 = *(unsigned int *)(v18 + 12);
          *(_WORD *)(*(_QWORD *)v18 + 2 * v19) = *result;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v18 + 2 * v19) = v11;
        }
        *(_DWORD *)(v18 + 12) = v19 + 1;
        ++*(_WORD *)(*((_QWORD *)v12 + 8) + 2 * v20);
      }
    }
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && (_DWORD)a4 == 1)
  {
    v8 = ***((_QWORD ***)result + 2);
    result = *(_WORD **)(v8 + 16);
    if (a5 > 3 || !**(_BYTE **)v8)
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v8;
  int v9;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v8 = (_WORD *)****((_QWORD ****)result + 2);
    v9 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_DWORD *WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::MoveOperands>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::MoveOperands,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(const void **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      memcpy(v6, v4, 4 * v5);
      if (v4)
      {
        if (*(const void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _QWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  uint64_t v25;
  __int16 v26;

  v8 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v10 = result;
    do
    {
      v11 = __clz(__rbit64(v8));
      if (v11 >= 0x20)
      {
        v12 = (char)(31 - v11);
        v13 = (*a2)[1];
        v14 = ***a2;
        v15 = *(unsigned int *)(v14 + 60);
        if ((_DWORD)v15)
        {
          v16 = *(_DWORD **)(v14 + 48);
          v17 = 4 * v15;
          if (((1 << v11) & *v10) != 0)
          {
            while (1)
            {
              v18 = -*v16;
              v19 = v13[47];
              if (v18 < 0 || *v16 == 0)
              {
                if (*v16 >= *(_DWORD *)(v19 + 28))
                  goto LABEL_26;
              }
              else if (*(_DWORD *)(v19 + 12) <= v18)
              {
                goto LABEL_26;
              }
              v17 -= 4;
              if (!v17)
                goto LABEL_21;
            }
          }
          do
          {
            v20 = -*v16;
            v21 = v13[47];
            if ((int)v20 < 1)
            {
              v20 = *v16;
              if (v20 >= *(unsigned int *)(v21 + 28))
                goto LABEL_26;
              v21 += 16;
            }
            else if (*(_DWORD *)(v21 + 12) <= v20)
            {
LABEL_26:
              __break(0xC471u);
              JUMPOUT(0x19808B410);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v21 + 2 * v20) >= 4u)
            ++v16;
            v17 -= 4;
          }
          while (v17);
        }
LABEL_21:
        v22 = *((unsigned int *)v13 + 69);
        if ((_DWORD)v22)
        {
          v23 = (__int16 *)v13[33];
          v24 = -v12;
          v25 = 4 * v22;
          do
          {
            v26 = *v23;
            v23 += 2;
            v25 -= 4;
          }
          while (v25);
        }
      }
      v8 &= v8 - 1;
    }
    while (v8);
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v8 = (a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1;
  if (v8 && (_DWORD)a4 == 1)
  {
    v9 = *(_DWORD *)(a2 + 16);
    v10 = *(_QWORD *)(****((_QWORD ****)result + 2) + 8);
    v11 = ******((_QWORD ******)result + 2);
    v12 = *(unsigned int *)(v11 + 60);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD **)(v11 + 48);
      v14 = 4 * v12;
      do
      {
        v15 = -*v13;
        v16 = *(_QWORD *)(v10 + 376);
        if (v15 < 0 || *v13 == 0)
        {
          if (*v13 >= *(_DWORD *)(v16 + 28))
          {
LABEL_19:
            __break(0xC471u);
            JUMPOUT(0x19808B4D0);
          }
        }
        else if (*(_DWORD *)(v16 + 12) <= v15)
        {
          goto LABEL_19;
        }
        v14 -= 4;
      }
      while (v14);
    }
    v17 = *(unsigned int *)(v10 + 276);
    if ((_DWORD)v17)
    {
      v18 = *(__int16 **)(v10 + 264);
      v19 = -v9;
      v20 = 4 * v17;
      v21 = (unsigned __int16)v19;
      do
      {
        v22 = *v18;
        v18 += 2;
        v20 -= 4;
      }
      while (v20);
    }
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && (_DWORD)a4 == 1)
  {
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_QWORD *)(****((_QWORD ****)result + 2) + 8);
    v10 = ******((_QWORD ******)result + 2);
    v11 = *(unsigned int *)(v10 + 60);
    if ((_DWORD)v11)
    {
      v12 = *(_DWORD **)(v10 + 48);
      v13 = 4 * v11;
      do
      {
        v14 = -*v12;
        v15 = *(_QWORD *)(v9 + 376);
        if (v14 < 0 || *v12 == 0)
        {
          if (*v12 >= *(_DWORD *)(v15 + 28))
          {
LABEL_16:
            __break(0xC471u);
            JUMPOUT(0x19808B5E0);
          }
        }
        else if (*(_DWORD *)(v15 + 12) <= v14)
        {
          goto LABEL_16;
        }
        v13 -= 4;
      }
      while (v13);
    }
    v16 = *(unsigned int *)(v9 + 276);
    if ((_DWORD)v16)
    {
      v17 = *(__int16 **)(v9 + 264);
      v18 = -v8;
      v19 = 4 * v16;
      v20 = (unsigned __int16)v18;
      do
      {
        v21 = *v17;
        v17 += 2;
        v19 -= 4;
      }
      while (v19);
    }
  }
  return result;
}

BOOL JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::addToSpill(_BOOL8 result, unsigned int a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(result + 240);
  if (*v2 >= 0)
    v2 = (uint64_t *)(2 * *v2 + 8);
  if (((*(unint64_t *)((char *)v2 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0)
    return WTF::BitVector::add((WTF::BitVector *)(result + 208), a2);
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::decrementDegree(_WORD *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _WORD v39[15];
  __int16 v40;

  v40 = a2;
  v8 = *((_QWORD *)result + 8);
  v9 = *(unsigned __int16 *)(v8 + 2 * a2);
  *(_WORD *)(v8 + 2 * a2) = v9 - 1;
  if (*((_DWORD *)result + 3) == v9)
  {
    v10 = (uint64_t *)(result + 184);
    v11 = *((_QWORD *)result + 46);
    if (v11 >= 0)
      v12 = 2 * v11 + 8;
    else
      v12 = (uint64_t)(result + 184);
    *(_QWORD *)(v12 + 8 * ((unint64_t)a2 >> 6)) |= 1 << a2;
    v13 = *((_QWORD *)result + 6) + 16 * a2;
    v14 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v14)
    {
      v15 = *(unsigned __int16 **)v13;
      v16 = (uint64_t *)(result + 84);
      v17 = 2 * v14;
      do
      {
        v18 = *v15;
        v19 = 2 * *v16 + 8;
        if (*v16 < 0)
          v19 = (uint64_t)(result + 84);
        v20 = v18 >> 6;
        a4 = *(_QWORD *)(v19 + 8 * (v18 >> 6));
        v21 = 1 << v18;
        if (((1 << v18) & a4) == 0)
        {
          a4 = *((_QWORD *)result + 19);
          if (!*(_WORD *)(a4 + 2 * v18))
          {
            if (*v10 >= 0)
              v22 = 2 * *v10 + 8;
            else
              v22 = (uint64_t)(result + 184);
            a4 = *(_QWORD *)(v22 + 8 * v20);
            *(_QWORD *)(v22 + 8 * v20) = a4 | v21;
          }
        }
        ++v15;
        v17 -= 2;
      }
      while (v17);
    }
    v23 = *((_QWORD *)result + 26);
    if (v23 >= 0)
      v24 = 2 * v23 + 8;
    else
      v24 = (uint64_t)(result + 104);
    *(_QWORD *)(v24 + 8 * ((unint64_t)a2 >> 6)) &= ~(1 << a2);
    if (*((_DWORD *)result + 29) <= a2)
    {
      __break(0xC471u);
    }
    else
    {
      v25 = *((_QWORD *)result + 13) + 40 * a2;
      v26 = *(unsigned int *)(v25 + 4);
      v27 = (_QWORD *)(v25 + 8);
      if ((_DWORD)v26 != 8)
        v27 = (_QWORD *)*v27;
      v28 = 0;
      while ((_DWORD)v26 != v28)
      {
        v29 = v28;
        v30 = *((_DWORD *)v27 + v28++);
        if (v30 != -1)
        {
          v31 = v29;
          goto LABEL_26;
        }
      }
      v31 = v26;
LABEL_26:
      if ((_DWORD)v26 == (_DWORD)v31)
      {
LABEL_27:
        v32 = *((unsigned int *)result + 51);
        if ((_DWORD)v32 == *((_DWORD *)result + 50))
        {
          return WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)(result + 96), (unint64_t)&v40);
        }
        else
        {
          *(_WORD *)(*((_QWORD *)result + 24) + 2 * v32) = a2;
          *((_DWORD *)result + 51) = v32 + 1;
        }
      }
      else
      {
        v33 = v31 | (v26 << 32);
        v34 = (uint64_t)(result + 180);
        v35 = *((_QWORD *)result + 45);
        if (v35 >= 0)
          v34 = 2 * v35 + 8;
        while (1)
        {
          v36 = *((unsigned int *)v27 + v33);
          if (((*(_QWORD *)(v34 + ((v36 >> 3) & 0x1FFFFFF8)) >> v36) & 1) != 0
            || *(_DWORD *)(*((_QWORD *)result + 38) + 4 * v36) != -1)
          {
            return WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTraits<unsigned short>>::add(v39, (uint64_t *)result + 37, &v40, a4, a5, a6, a7, a8);
          }
          v37 = HIDWORD(v33);
          if ((v31 + 1) > HIDWORD(v33))
            LODWORD(v37) = v31 + 1;
          while (1)
          {
            v38 = (v31 + 1);
            v33 = v33 & 0xFFFFFFFF00000000 | v38;
            if ((_DWORD)v37 - 1 == (_DWORD)v31)
              break;
            LODWORD(v31) = v31 + 1;
            if (*((_DWORD *)v27 + v38) != -1)
              goto LABEL_37;
          }
          LODWORD(v38) = v37;
LABEL_37:
          LODWORD(v31) = v38;
          if ((_DWORD)v26 == (_DWORD)v38)
            goto LABEL_27;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::canBeSafelyCoalesced(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 **v14;
  unsigned __int16 **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _WORD v37[64];

  if (*(unsigned __int16 *)(result + 16) >= a2)
  v3 = *(uint64_t **)(result + 240);
  v4 = *v3;
  v5 = (unint64_t *)(2 * *v3);
  if (*v3 < 0)
    v6 = 63;
  else
    v6 = *v5;
  if (v6 <= a2)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    v7 = v5 + 1;
    if (v4 < 0)
      v7 = *(_QWORD **)(result + 240);
    v8 = (*(_QWORD *)((char *)v7 + (((unint64_t)a2 >> 3) & 0x1FF8)) >> a2) & 1;
  }
  if (v4 < 0)
    v9 = 63;
  else
    v9 = *v5;
  if (v9 <= a3)
  {
    if ((v8 & 1) != 0)
    {
LABEL_14:
      v11 = 0;
      return v11 & 1;
    }
  }
  else
  {
    v10 = (uint64_t *)(v5 + 1);
    if (v4 >= 0)
      v3 = v10;
    if (((v8 ^ (*(unint64_t *)((char *)v3 + (((unint64_t)a3 >> 3) & 0x1FF8)) >> a3)) & 1) != 0)
      goto LABEL_14;
  }
  v12 = *(unsigned int *)(result + 12);
  if (v12 < 0x41)
  {
    v13 = *(_QWORD *)(result + 48);
    v14 = (unsigned __int16 **)(v13 + 16 * a2);
    v15 = (unsigned __int16 **)(v13 + 16 * a3);
    v16 = *((unsigned int *)v14 + 3);
    v17 = *((unsigned int *)v15 + 3);
    v18 = v17 + v16;
    if (v12 > (int)v17 + (int)v16)
    {
LABEL_35:
      v11 = 1;
    }
    else
    {
      v19 = 0;
      if ((_DWORD)v16)
      {
        v20 = *v14;
        v21 = result + 168;
        v22 = *(_QWORD *)(result + 168);
        if (v22 >= 0)
          v21 = 2 * v22 + 8;
        for (i = 2 * v16; i; i -= 2)
        {
          v24 = *v20;
          --v18;
          if (((*(_QWORD *)(v21 + ((v24 >> 3) & 0x1FF8)) >> v24) & 1) != 0
            || *(_WORD *)(*(_QWORD *)(result + 152) + 2 * v24)
            || v12 > *(unsigned __int16 *)(*(_QWORD *)(result + 64) + 2 * v24))
          {
            if (v19 + v18 < v12)
              goto LABEL_35;
          }
          else
          {
            if (v19 >= 0x40)
              goto LABEL_70;
            v37[v19++] = v24;
            if (v19 >= v12)
              goto LABEL_14;
          }
          ++v20;
        }
      }
      if ((_DWORD)v17)
      {
        v25 = *v15;
        v26 = result + 168;
        v27 = *(_QWORD *)(result + 168);
        if (v27 >= 0)
          v26 = 2 * v27 + 8;
        if (v19)
        {
          v28 = v19;
          v29 = &v25[v17];
          while (1)
          {
            v30 = *v25;
            --v18;
            if (((*(_QWORD *)(v26 + ((v30 >> 3) & 0x1FF8)) >> v30) & 1) != 0
              || *(_WORD *)(*(_QWORD *)(result + 152) + 2 * v30)
              || v12 > *(unsigned __int16 *)(*(_QWORD *)(result + 64) + 2 * v30))
            {
              goto LABEL_44;
            }
            v31 = v37;
            v32 = 2 * v19;
            while (*v31 != (_DWORD)v30)
            {
              ++v31;
              v32 -= 2;
              if (!v32)
              {
                v31 = &v37[v19];
                break;
              }
            }
            if (v19 != v31 - v37)
            {
LABEL_44:
              if (v28 + v18 < v12)
                goto LABEL_65;
            }
            else
            {
              if (v28 >= 0x40)
                goto LABEL_70;
              v37[v28++] = v30;
              if (v28 >= v12)
                goto LABEL_54;
            }
            if (++v25 == v29)
              goto LABEL_68;
          }
        }
        v34 = 0;
        v35 = 2 * v17;
        --v18;
        do
        {
          v36 = *v25;
          if (((*(_QWORD *)(v26 + ((v36 >> 3) & 0x1FF8)) >> v36) & 1) != 0
            || *(_WORD *)(*(_QWORD *)(result + 152) + 2 * v36)
            || v12 > *(unsigned __int16 *)(*(_QWORD *)(result + 64) + 2 * v36))
          {
            if (v34 + v18 < v12)
            {
LABEL_65:
              v33 = 0;
              LOBYTE(v18) = 1;
              goto LABEL_66;
            }
          }
          else
          {
            if (v34 > 0x3F)
              goto LABEL_70;
            v37[v34++] = v36;
            if (v34 >= v12)
            {
LABEL_54:
              v33 = 0;
              LOBYTE(v18) = 0;
              goto LABEL_66;
            }
          }
          ++v25;
          --v18;
          v35 -= 2;
        }
        while (v35);
      }
LABEL_68:
      v33 = 1;
LABEL_66:
      v11 = v33 | v18;
    }
    return v11 & 1;
  }
  result = 221;
  __break(0xC471u);
LABEL_70:
  __break(1u);
  return result;
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::addBias(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _QWORD v23[3];
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = a2;
  v24 = a3;
  v11 = *(unsigned __int16 *)(a1 + 16);
  if (v11 < a2)
  {
    v26 = 0x800000000;
    v27 = (WTF *)-1;
    v28 = -1;
    WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v23, (uint64_t *)(a1 + 80), &v25, (uint64_t)&v26, a5, a6, a7, a8);
    WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v22, (unsigned int *)(v23[0] + 8), a3);
    if (HIDWORD(v26) != 8)
      WTF::fastFree((unint64_t)v27, v12, v13, v14, a5, a6, a7, a8);
    v11 = *(unsigned __int16 *)(a1 + 16);
  }
  if (v11 < a3)
  {
    v26 = 0x800000000;
    v27 = (WTF *)-1;
    v28 = -1;
    WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)v23, (uint64_t *)(a1 + 80), &v24, (uint64_t)&v26, a5, a6, a7, a8);
    WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)v22, (unsigned int *)(v23[0] + 8), a2);
    if (HIDWORD(v26) != 8)
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::precoloredCoalescingHeuristic(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48) + 16 * a3;
  v4 = *(unsigned int *)(v3 + 12);
  if (!(_DWORD)v4)
    return 1;
  v7 = *(unsigned __int16 **)v3;
  v8 = (uint64_t *)(a1 + 168);
  v9 = a1 + 24;
  v10 = 2 * v4;
  while (1)
  {
    v11 = *v7;
    if (*(unsigned __int16 *)(a1 + 16) < v11)
    {
      v12 = *v8 >= 0 ? 2 * *v8 + 8 : (uint64_t)v8;
      if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0x1FF8)) >> v11) & 1) == 0
        && !*(_WORD *)(*(_QWORD *)(a1 + 152) + 2 * v11)
        && *(_DWORD *)(a1 + 12) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * v11))
      {
        result = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::contains(v9, a2, v11);
        if (!(_DWORD)result)
          break;
      }
    }
    ++v7;
    v10 -= 2;
    if (!v10)
      return 1;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::IRC<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::freezeMoves(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  int v31;
  unsigned __int16 v32;
  int v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  unsigned __int16 v54;

  if (*(_DWORD *)(result + 116) <= a2)
  {
    __break(0xC471u);
LABEL_61:
    JUMPOUT(0x19808C148);
  }
  v9 = result;
  v10 = *(_QWORD *)(result + 104) + 40 * a2;
  v11 = *(unsigned int *)(v10 + 4);
  v12 = (_QWORD *)(v10 + 8);
  if ((_DWORD)v11 != 8)
    v12 = (_QWORD *)*v12;
  v13 = 0;
  while ((_DWORD)v11 != v13)
  {
    v14 = v13;
    v15 = *((_DWORD *)v12 + v13++);
    if (v15 != -1)
    {
      v16 = v14;
      goto LABEL_8;
    }
  }
  v16 = v11;
LABEL_8:
  if ((_DWORD)v11 != (_DWORD)v16)
  {
    v17 = (uint64_t *)(result + 360);
    v52 = (_DWORD *)(result + 332);
    v53 = (_DWORD *)(result + 348);
    v51 = result + 192;
    v18 = v16 | (v11 << 32);
    do
    {
      v19 = *((unsigned int *)v12 + v18);
      if (*v17 >= 0)
        v20 = 2 * *v17 + 8;
      else
        v20 = v9 + 360;
      if (((*(_QWORD *)(v20 + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) != 0
        || *(_DWORD *)(*(_QWORD *)(v9 + 304) + 4 * v19) != -1)
      {
        v21 = (unsigned __int16)*((_DWORD *)v12 + v18);
        v22 = (v21 >> 3) & 0x1FF8;
        v23 = *(_QWORD *)(v20 + v22);
        *(_QWORD *)(v20 + v22) = v23 & ~(1 << *((_DWORD *)v12 + v18));
        if ((v23 & (1 << v21)) == 0)
        {
          v24 = *(_QWORD *)(v9 + 304);
          v25 = *(unsigned int *)(v24 + 4 * v21);
          if ((_DWORD)v25 != -1)
          {
            if (*(_DWORD *)(v9 + 352) <= v21)
            {
              v26 = *(_QWORD *)(v9 + 336);
              v27 = (unsigned int *)(v26 + 4 * *(unsigned int *)(v9 + 348) - 4);
              v28 = v53;
            }
            else
            {
              v26 = *(_QWORD *)(v9 + 320);
              v27 = (unsigned int *)(v26 + 4 * *(unsigned int *)(v9 + 332) - 4);
              v28 = v52;
            }
            v29 = *v27;
            *(_DWORD *)(v24 + 4 * v29) = v25;
            *(_DWORD *)(v26 + 4 * v25) = v29;
            --*v28;
            *(_DWORD *)(v24 + 4 * v21) = -1;
          }
        }
        v30 = (unsigned __int16 *)(*(_QWORD *)(v9 + 88) + 4 * v21);
        v31 = *v30;
        v32 = v30[1];
        LOWORD(v33) = v31 == a2 ? v32 : v31;
        do
        {
          v34 = v33;
          v35 = (unsigned __int16)v33;
          v33 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 152) + 2 * (unsigned __int16)v33);
        }
        while (v33);
        v54 = v34;
        if (*(_DWORD *)(v9 + 12) > *(unsigned __int16 *)(*(_QWORD *)(v9 + 64) + 2 * v35))
        {
          if (*(_DWORD *)(v9 + 116) <= v34)
          {
            __break(0xC471u);
            goto LABEL_61;
          }
          v36 = *(_QWORD *)(v9 + 104) + 40 * v35;
          v37 = *(unsigned int *)(v36 + 4);
          v38 = (_QWORD *)(v36 + 8);
          if ((_DWORD)v37 != 8)
            v38 = (_QWORD *)*v38;
          v39 = 0;
          while ((_DWORD)v37 != v39)
          {
            v40 = v39;
            v41 = *((_DWORD *)v38 + v39++);
            if (v41 != -1)
            {
              v42 = v40;
              goto LABEL_33;
            }
          }
          v42 = v37;
LABEL_33:
          if ((_DWORD)v37 == (_DWORD)v42)
          {
LABEL_34:
            result = WTF::HashSet<unsigned short,WTF::DefaultHash<unsigned short>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::remove((uint64_t *)(v9 + 296), v34, a3, a4, a5, a6, a7, a8);
            if ((_DWORD)result)
            {
              v43 = *(unsigned int *)(v9 + 204);
              if ((_DWORD)v43 == *(_DWORD *)(v9 + 200))
              {
                result = (uint64_t)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v51, (unint64_t)&v54);
              }
              else
              {
                *(_WORD *)(*(_QWORD *)(v9 + 192) + 2 * v43) = v54;
                *(_DWORD *)(v9 + 204) = v43 + 1;
              }
            }
          }
          else
          {
            v46 = v42 | (v37 << 32);
            if (*v17 >= 0)
              v47 = 2 * *v17 + 8;
            else
              v47 = v9 + 360;
            while (1)
            {
              v48 = *((unsigned int *)v38 + v46);
              if (((*(_QWORD *)(v47 + ((v48 >> 3) & 0x1FFFFFF8)) >> v48) & 1) != 0
                || *(_DWORD *)(*(_QWORD *)(v9 + 304) + 4 * v48) != -1)
              {
                break;
              }
              v49 = HIDWORD(v46);
              if ((v42 + 1) > HIDWORD(v46))
                LODWORD(v49) = v42 + 1;
              while (1)
              {
                v50 = (v42 + 1);
                v46 = v46 & 0xFFFFFFFF00000000 | v50;
                if ((_DWORD)v49 - 1 == (_DWORD)v42)
                  break;
                LODWORD(v42) = v42 + 1;
                if (*((_DWORD *)v38 + v50) != -1)
                  goto LABEL_52;
              }
              LODWORD(v50) = v49;
LABEL_52:
              LODWORD(v42) = v50;
              if ((_DWORD)v37 == (_DWORD)v50)
                goto LABEL_34;
            }
          }
        }
      }
      v44 = HIDWORD(v18);
      if ((v16 + 1) > HIDWORD(v18))
        LODWORD(v44) = v16 + 1;
      while (1)
      {
        v45 = (v16 + 1);
        v18 = v18 & 0xFFFFFFFF00000000 | v45;
        if ((_DWORD)v44 - 1 == (_DWORD)v16)
          break;
        LODWORD(v16) = v16 + 1;
        if (*((_DWORD *)v12 + v45) != -1)
          goto LABEL_41;
      }
      LODWORD(v45) = v44;
LABEL_41:
      LODWORD(v16) = v45;
    }
    while ((_DWORD)v11 != (_DWORD)v45);
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::selectSpill(uint64_t a1, double a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  float v34;
  unint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  _DWORD *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t *v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  unint64_t v59;

  if (!*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 1;
    if (*(_BYTE *)(a1 + 217))
      WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 224), (const void **)(a1 + 152), a6, a7, a8, a9, a10, a11);
  }
  v12 = *(_QWORD *)(a1 + 208);
  v13 = (uint64_t *)(2 * v12);
  if ((v12 & 0x8000000000000000) != 0)
  {
    v19 = __clz(__rbit64(v12));
    v14 = 63;
    if (v19 >= 0x3F)
      v19 = 63;
  }
  else
  {
    v14 = *v13;
    v15 = *v13 + 63;
    if (v15 < 0x40)
      goto LABEL_71;
    v16 = *(_QWORD *)(2 * v12 + 8);
    if (v16 && (v17 = __clz(__rbit64(v16)), v17 < 0x40))
    {
      v18 = 0;
    }
    else
    {
      v45 = (v15 >> 6) - 1;
      if (!v45)
        goto LABEL_71;
      v46 = 0;
      while (1)
      {
        v47 = *(_QWORD *)(2 * v12 + 0x10 + 8 * v46);
        if (v47)
        {
          v17 = __clz(__rbit64(v47));
          if (v17 <= 0x3F)
            break;
        }
        if (v45 == ++v46)
          goto LABEL_71;
      }
      v18 = v46 + 1;
    }
    v19 = v17 + (v18 << 6);
  }
  if (v19 == v14)
    goto LABEL_71;
  v20 = *(uint64_t **)(a1 + 240);
  v21 = (_QWORD *)(2 * *v20);
  v22 = *v20 < 0 ? 63 : *v21;
  if (v22 > v19)
  {
    v23 = v21 + 1;
    if (*v20 >= 0)
      v20 = v23;
    if (((*(unint64_t *)((char *)v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
    {
LABEL_71:
      __break(0xC471u);
      JUMPOUT(0x19808C398);
    }
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    if (v19 != 63)
    {
      v48 = *(_QWORD *)(a1 + 248);
      v49 = *(unsigned int **)(v48 + 8);
      v52 = *v49;
      v50 = v49 + 1;
      v51 = v52;
      v53 = (uint64_t *)(v48 + 24);
      v54 = 0.0;
      v55 = v19;
      while (1)
      {
        if (v51 <= (unsigned __int16)v55)
        {
LABEL_70:
          __break(0xC471u);
          JUMPOUT(0x19808C490);
        }
        v56 = *(float *)&v50[(unsigned __int16)v55];
        if (v56 == 0.0)
          break;
        LOWORD(a4) = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v55);
        v57 = (float)LODWORD(a4) / v56;
        if (*v53 >= 0)
          v58 = 2 * *v53 + 8;
        else
          v58 = (uint64_t)v53;
        a4 = v57 + v57;
        if (((*(_QWORD *)(v58 + (((unint64_t)(unsigned __int16)v55 >> 3) & 0x1FF8)) >> v55) & 1) != 0)
          v57 = v57 + v57;
        if (v57 > v54)
        {
          v54 = v57;
          LOWORD(v19) = v55;
        }
        v59 = __clz(__rbit64(v12 >> (v55 + 1))) + v55 + 1;
        if (v59 >= 0x3F)
          v55 = 63;
        else
          v55 = v59;
        if (v59 > 0x3E)
          return (unsigned __int16)v19;
      }
      LOWORD(v19) = v55;
    }
  }
  else
  {
    v24 = *v13;
    if (v19 != *v13)
    {
      v25 = v13 + 1;
      v26 = *(_QWORD *)(a1 + 248);
      v27 = *(unsigned int **)(v26 + 8);
      v30 = *v27;
      v28 = v27 + 1;
      v29 = v30;
      v31 = (uint64_t *)(v26 + 24);
      v32 = (unint64_t)(v24 + 63) >> 6;
      v33 = v13 + 2;
      v34 = 0.0;
      v35 = v19;
      while (1)
      {
        if (v29 <= (unsigned __int16)v35)
          goto LABEL_70;
        v36 = *(float *)&v28[(unsigned __int16)v35];
        if (v36 == 0.0)
          break;
        LOWORD(a4) = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v35);
        v37 = (float)LODWORD(a4) / v36;
        if (*v31 >= 0)
          v38 = 2 * *v31 + 8;
        else
          v38 = (uint64_t)v31;
        a4 = v37 + v37;
        if (((*(_QWORD *)(v38 + (((unint64_t)(unsigned __int16)v35 >> 3) & 0x1FF8)) >> v35) & 1) != 0)
          v37 = v37 + v37;
        if (v37 > v34)
        {
          v34 = v37;
          LOWORD(v19) = v35;
        }
        v39 = v35 + 1;
        v40 = (v35 + 1) >> 6;
        if (v40 >= v32)
          return (unsigned __int16)v19;
        v41 = v25[v40];
        if (!v41 || (v42 = __clz(__rbit64(v41 >> v39)) + (v39 & 0x3F), v42 >= 0x40))
        {
          if (v40 + 1 == v32)
            return (unsigned __int16)v19;
          while (1)
          {
            v43 = v33[v40];
            if (v43)
            {
              v42 = __clz(__rbit64(v43));
              if (v42 < 0x40)
                break;
            }
            if (v32 - 1 == ++v40)
              return (unsigned __int16)v19;
          }
          ++v40;
        }
        v35 = v42 + (v40 << 6);
        if (v35 == v24)
          return (unsigned __int16)v19;
      }
      LOWORD(v19) = v35;
    }
  }
  return (unsigned __int16)v19;
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::assignColors(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _WORD *v41;
  _WORD *v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  int v48;
  unsigned __int16 *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  int v57;
  WTF **v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  __int16 v107;
  uint64_t v108;
  char v109;
  WTF *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  WTF *v116[2];
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::clear(a1 + 24, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(a1 + 64, v9, v10, v11, v12, v13, v14, v15);
  WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 104, v16, v17, v18, v19, v20, v21, v22);
  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 192, v23, v24, v25, v26, v27, v28, v29);
  v30 = *(_QWORD *)(a1 + 208);
  if (v30 < 0)
    *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  else
    bzero((void *)(2 * v30 + 8), (unint64_t)(*(_QWORD *)(2 * v30) + 7) >> 3);
  WTF::Vector<JSC::Reg,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(a1 + 120, (WTF *)*(unsigned int *)(a1 + 60));
  v110 = (WTF *)&v112;
  v111 = 4;
  v39 = (uint64_t *)(a1 + 80);
  v38 = *(_QWORD *)(a1 + 80);
  if (v38)
  {
    v40 = *(unsigned int *)(v38 - 4);
    v41 = (_WORD *)(v38 + 32 * v40);
    if (*(_DWORD *)(v38 - 12))
    {
      v42 = *(_WORD **)(a1 + 80);
      if ((_DWORD)v40)
      {
        v43 = 32 * v40;
        v42 = *(_WORD **)(a1 + 80);
        while ((unsigned __int16)*v42 >= 0xFFFEu)
        {
          v42 += 16;
          v43 -= 32;
          if (!v43)
          {
            v42 = v41;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v42 = (_WORD *)(v38 + 32 * v40);
  }
  else
  {
    v42 = 0;
    v40 = 0;
  }
  v41 = (_WORD *)(v38 + 32 * v40);
LABEL_13:
  if (v38)
    v44 = (_WORD *)(v38 + 32 * *(unsigned int *)(v38 - 4));
  else
    v44 = 0;
  if (v44 != v42)
  {
    do
    {
      LOWORD(v116[0]) = 0;
      LOWORD(v116[0]) = *v42;
      v45 = LOWORD(v116[0]);
      do
      {
        v46 = v45;
        v45 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v45);
      }
      while ((_DWORD)v45);
      if (LOWORD(v116[0]) != v46)
      {
        v48 = HIDWORD(v111);
        if (HIDWORD(v111) == (_DWORD)v111)
        {
          WTF::Vector<unsigned short,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v110, (unint64_t)v116);
        }
        else
        {
          *((_WORD *)v110 + HIDWORD(v111)) = v116[0];
          HIDWORD(v111) = v48 + 1;
        }
      }
      v47 = v42 + 16;
      v42 = v41;
      if (v47 != v41)
      {
        v42 = v47;
        while ((unsigned __int16)*v42 >= 0xFFFEu)
        {
          v42 += 16;
          if (v42 == v41)
          {
            v42 = v41;
            break;
          }
        }
      }
    }
    while (v42 != v44);
    v49 = (unsigned __int16 *)v110;
    if (HIDWORD(v111))
    {
      v106 = (unsigned __int16 *)((char *)v110 + 2 * HIDWORD(v111));
      do
      {
        LOWORD(v50) = *v49;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::take(v116, (uint64_t *)(a1 + 80), *v49);
        do
        {
          v55 = v50;
          v50 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * (unsigned __int16)v50);
        }
        while (v50);
        v107 = v55;
        v113 = 0x800000000;
        v114 = (WTF *)-1;
        v115 = -1;
        WTF::HashMap<unsigned short,WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>,WTF::DefaultHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTraits<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>>((uint64_t)&v108, (uint64_t *)(a1 + 80), &v107, (uint64_t)&v113, v51, v52, v53, v54);
        if (HIDWORD(v113) != 8)
          WTF::fastFree((unint64_t)v114, v31, v32, v33, v34, v35, v36, v37);
        v56 = v108 + 8;
        if (v109)
        {
          if (*(_DWORD *)(v108 + 12) != 8)
            WTF::fastFree(*(_QWORD *)(v108 + 16), v31, v32, v33, v34, v35, v36, v37);
          *(_OWORD *)v56 = *(_OWORD *)v116;
          *(_QWORD *)(v56 + 16) = v117;
        }
        else
        {
          v57 = HIDWORD(v116[0]);
          v58 = &v116[1];
          if (HIDWORD(v116[0]) != 8)
            v58 = (WTF **)v116[1];
          v59 = 0;
          while (HIDWORD(v116[0]) != v59)
          {
            LODWORD(v60) = v59;
            v61 = *((__int16 *)v58 + v59++);
            if (v61 != -1)
            {
              v60 = v60;
              goto LABEL_41;
            }
          }
          v60 = HIDWORD(v116[0]);
LABEL_41:
          if (HIDWORD(v116[0]) != (_DWORD)v60)
          {
            v62 = v60 | ((unint64_t)HIDWORD(v116[0]) << 32);
            do
            {
              LODWORD(v63) = v60;
              WTF::SmallSet<unsigned short,WTF::IntHash<unsigned short>,8u>::add((uint64_t)&v113, (unsigned int *)v56, *((unsigned __int16 *)v58 + v62));
              if (HIDWORD(v62) <= (v63 + 1))
                v60 = (v63 + 1);
              else
                v60 = HIDWORD(v62);
              while ((_DWORD)v60 - 1 != (_DWORD)v63)
              {
                v63 = (v63 + 1);
                if (*((__int16 *)v58 + v63) != -1)
                {
                  LODWORD(v60) = v63;
                  goto LABEL_53;
                }
              }
              v63 = v60;
LABEL_53:
              v62 = v63 | v62 & 0xFFFFFFFF00000000;
            }
            while (v57 != (_DWORD)v60);
          }
          if (v57 != 8)
            WTF::fastFree((unint64_t)v116[1], v31, v32, v33, v34, v35, v36, v37);
        }
        ++v49;
      }
      while (v49 != v106);
      v49 = (unsigned __int16 *)v110;
    }
    if (&v112 != (uint64_t *)v49 && v49 != 0)
    {
      v110 = 0;
      LODWORD(v111) = 0;
      WTF::fastFree((unint64_t)v49, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  v65 = *(_DWORD *)(a1 + 188);
  if (!v65)
    goto LABEL_119;
  while (1)
  {
    v66 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 176) + 2 * v65 - 2);
    *(_DWORD *)(a1 + 188) = v65 - 1;
    LODWORD(v110) = v66;
    v67 = *(_QWORD *)(a1 + 48) + 16 * v66;
    v68 = *(unsigned int *)(v67 + 12);
    if ((_DWORD)v68)
    {
      v69 = 0;
      v70 = *(unsigned __int16 **)v67;
      v71 = &v70[v68];
      while (1)
      {
        v72 = *v70;
        do
        {
          v73 = v72;
          v72 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v72);
        }
        while ((_DWORD)v72);
        v74 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v73);
        if ((~v74 & 0x7F) != 0)
        {
          if ((v74 & 0x40) != 0)
            goto LABEL_118;
          v69 |= 1 << v74;
        }
        if (++v70 == v71)
          goto LABEL_76;
      }
    }
    v69 = 0;
LABEL_76:
    v75 = *v39;
    if (*v39)
    {
      v76 = *(_DWORD *)(v75 - 8);
      v77 = 9 * ((~((_DWORD)v66 << 15) + v66) ^ ((~((_DWORD)v66 << 15) + v66) >> 10));
      v78 = (v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11);
      v79 = v76 & (v78 ^ HIWORD(v78));
      v80 = *(unsigned __int16 *)(v75 + 32 * v79);
      if (v80 != (_DWORD)v66)
      {
        v81 = 1;
        while (v80 != 0xFFFF)
        {
          v79 = ((_DWORD)v79 + v81) & v76;
          v80 = *(unsigned __int16 *)(v75 + 32 * v79);
          ++v81;
          if (v80 == (_DWORD)v66)
            goto LABEL_83;
        }
        v79 = *(unsigned int *)(v75 - 4);
      }
LABEL_83:
      if (v79 != *(_DWORD *)(v75 - 4))
      {
        v82 = v75 + 32 * v79;
        v83 = *(unsigned int *)(v82 + 12);
        v84 = (_QWORD *)(v82 + 16);
        if ((_DWORD)v83 != 8)
          v84 = (_QWORD *)*v84;
        v85 = 0;
        while ((_DWORD)v83 != v85)
        {
          v86 = v85;
          v87 = *((__int16 *)v84 + v85++);
          if (v87 != -1)
          {
            v88 = v86;
            goto LABEL_90;
          }
        }
        v88 = v83;
LABEL_90:
        if ((_DWORD)v83 != (_DWORD)v88)
        {
          v89 = v88 | (v83 << 32);
          v90 = *(_QWORD *)(a1 + 120);
          while (1)
          {
            v91 = *((unsigned __int16 *)v84 + v89);
            do
            {
              v92 = v91;
              v91 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 152) + 2 * v91);
            }
            while ((_DWORD)v91);
            v93 = *(_BYTE *)(v90 + v92);
            v94 = v93 & 0x7F;
            if (v94 != 127)
            {
              if (v94 >= 0x40)
                goto LABEL_118;
              if (((v69 >> v94) & 1) == 0)
                break;
            }
            if (HIDWORD(v89) <= (v88 + 1))
              v95 = (v88 + 1);
            else
              v95 = HIDWORD(v89);
            while ((_DWORD)v95 - 1 != (_DWORD)v88)
            {
              v88 = (v88 + 1);
              if (*((__int16 *)v84 + v88) != -1)
              {
                LODWORD(v95) = v88;
                goto LABEL_101;
              }
            }
            v88 = v95;
LABEL_101:
            v89 = v88 | v89 & 0xFFFFFFFF00000000;
            LODWORD(v88) = v95;
            if ((_DWORD)v83 == (_DWORD)v95)
              goto LABEL_107;
          }
          *(_BYTE *)(v90 + v66) = v93;
          goto LABEL_114;
        }
      }
    }
LABEL_107:
    v96 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v96)
      break;
LABEL_122:
    v105 = *(unsigned int *)(a1 + 148);
    if ((_DWORD)v105 == *(_DWORD *)(a1 + 144))
    {
      WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(a1 + 136, &v110);
    }
    else
    {
      *(_WORD *)(*(_QWORD *)(a1 + 136) + 2 * v105) = v66;
      *(_DWORD *)(a1 + 148) = v105 + 1;
    }
LABEL_114:
    v65 = *(_DWORD *)(a1 + 188);
    if (!v65)
      goto LABEL_119;
  }
  v97 = *(_BYTE **)a1;
  while ((*v97 & 0x7Fu) < 0x40)
  {
    if (((v69 >> (*v97 & 0x7F)) & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v66) = *v97;
      goto LABEL_114;
    }
    ++v97;
    if (!--v96)
      goto LABEL_122;
  }
LABEL_118:
  __break(1u);
LABEL_119:
  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 176, v31, v32, v33, v34, v35, v36, v37);
  if (*(_DWORD *)(a1 + 148))
    WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(a1 + 120, v98, v99, v100, v101, v102, v103, v104);
  else
    WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(a1 + 224, v98, v99, v100, v101, v102, v103, v104);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Air::Inst *v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;

  if (a4 == 1 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (int *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 16);
      v12 = **(_QWORD **)result;
      result = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v12, v6);
      v13 = result;
      v14 = v12 ? v12 + 16 * *(unsigned int *)(v12 - 4) : 0;
      if (v14 != result)
      {
        v15 = *(JSC::B3::Air::Inst **)(v10 + 8);
        if (!*((_DWORD *)v15 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19808CDB4);
        }
        result = JSC::B3::Air::Inst::admitsStack(v15, (unint64_t)(a2 - *(_QWORD *)v15) >> 5);
        v16 = result;
        if ((result & 1) != 0)
          goto LABEL_11;
        v22 = *(uint64_t **)(v10 + 8);
        v23 = *((__int16 *)v22 + 60) - 90;
        if (v23 <= 0x12 && ((1 << v23) & 0x60011) != 0)
        {
          v24 = *((unsigned int *)v22 + 3);
          if (!(_DWORD)v24)
          {
            __break(0xC471u);
            JUMPOUT(0x19808CDBCLL);
          }
          v25 = *v22;
          v26 = ((unint64_t)(a2 - v25) >> 5) ^ 1;
          if (v26 >= v24)
          {
            __break(0xC471u);
            JUMPOUT(0x19808CDC4);
          }
          if ((_DWORD)v24 == 2)
          {
            v27 = (_BYTE *)(v25 + 32 * v26);
            if (v27[8] == 9 && *(_BYTE *)(*(_QWORD *)v27 + 4) == 1)
            {
LABEL_11:
              if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
              {
                v17 = *(_QWORD *)(v11 + 40);
                v18 = *v7;
                v20 = *(_QWORD *)(v17 + 24);
                v19 = v17 + 24;
                v21 = 2 * v20 + 8;
                if (v20 >= 0)
                  v19 = v21;
                if (((*(_QWORD *)(v19 + (((unint64_t)-*v7 >> 3) & 0x1FFFFFF8)) >> -(char)v18) & 1) != 0)
                  return result;
              }
              else
              {
                v18 = *v7;
              }
              result = JSC::B3::Air::TmpWidth::requiredWidth(v11 + 8, v18);
              if (a3 - 4 <= 6 && result > a5)
                return result;
              v28 = *(_BYTE **)(v10 + 24);
              if ((_DWORD)result == 2)
              {
                v29 = *v28;
                v30 = *(unsigned int **)(v13 + 8);
                if (v29)
                {
LABEL_34:
                  v31 = 4;
LABEL_35:
                  if (*v30 > v31)
                    v31 = *v30;
                  *v30 = v31;
                  *(_BYTE *)(a2 + 24) = 0;
                  *(_QWORD *)v7 = 0;
                  *(_QWORD *)a2 = v30;
                  *(_WORD *)(a2 + 8) = 521;
                  *(_DWORD *)(a2 + 12) = 0;
                  **(_BYTE **)(v10 + 32) = 1;
                  if ((v16 & 1) == 0)
                    **(_BYTE **)(v10 + 40) = 1;
                  return result;
                }
              }
              else
              {
                *v28 = 0;
                v30 = *(unsigned int **)(v13 + 8);
              }
              if (a5 != 3)
              {
                v31 = 1;
                switch(a5)
                {
                  case 0u:
                    goto LABEL_35;
                  case 1u:
                    v31 = 2;
                    goto LABEL_35;
                  case 2u:
                    goto LABEL_34;
                  case 4u:
                    v31 = 16;
                    goto LABEL_35;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x19808CDACLL);
                }
              }
              v31 = 8;
              goto LABEL_35;
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int16 v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  _BYTE v44[25];
  WTF *v45;
  uint64_t v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  _BYTE v50[12];
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _OWORD v54[6];
  _QWORD v55[2];

  if (*(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = **(_QWORD **)a1;
      v10 = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v9, *(_DWORD *)(a2 + 16));
      v11 = v10;
      if (v9)
        v12 = v9 + 16 * *(unsigned int *)(v9 - 4);
      else
        v12 = 0;
      if (v12 == v10)
      {
        v22 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v22 + 236))
        {
          v23 = -v5;
          v24 = *(_QWORD *)(v22 + 224);
          do
          {
            v25 = v23;
            v23 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v23);
          }
          while (v23);
          if (v5 + v25)
          {
            *(_DWORD *)(a2 + 16) = -v25;
            **(_BYTE **)(a1 + 16) = 1;
          }
        }
      }
      else
      {
        v13 = JSC::B3::Air::TmpWidth::requiredWidth(v8 + 8, v5);
        if (v13 == 3)
          v20 = 8;
        else
          v20 = 16;
        if (v13 < 3)
          v20 = 4;
        if (v20 == 4)
        {
          v21 = 107;
        }
        else if (v20 == 16)
        {
          v21 = 113;
        }
        else
        {
          v21 = 108;
        }
        v26 = *(_DWORD *)(*(_QWORD *)v8 + 180);
        *(_DWORD *)(*(_QWORD *)v8 + 180) = v26 + 1;
        v27 = (v26 + 33);
        *(_DWORD *)(a2 + 16) = -33 - v26;
        v28 = *(uint64_t **)(a1 + 32);
        v29 = *v28;
        if (*v28 < 0)
          v30 = 63;
        else
          v30 = *(_QWORD *)(2 * v29);
        if (v30 <= v27)
        {
          WTF::BitVector::resizeOutOfLine(*(WTF::BitVector **)(a1 + 32), v27 + 1, 0);
          v29 = *v28;
        }
        if (v29 >= 0)
          v31 = 2 * v29 + 8;
        else
          v31 = (uint64_t)v28;
        *(_QWORD *)(v31 + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
        if (a3 != 10)
        {
          v32 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)&v44[16] = 0;
          v44[24] = 0;
          *(_WORD *)&v44[8] = 521;
          *(_QWORD *)v44 = v32;
          *(_DWORD *)&v44[12] = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            v33 = *(_QWORD *)(a1 + 40);
            v34 = **(unsigned int **)(a1 + 48);
            v35 = *(_DWORD *)(a2 + 16);
            *(_OWORD *)&v47[9] = *(_OWORD *)&v44[9];
            *(_OWORD *)v47 = *(_OWORD *)v44;
            *(_QWORD *)&v48 = 0;
            WORD4(v48) = 513;
            HIDWORD(v48) = 1;
            *(_QWORD *)&v49 = v35;
            BYTE8(v49) = 0;
            v54[0] = *(_OWORD *)v44;
            v54[2] = v48;
            v54[3] = v49;
            v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112);
            v45 = (WTF *)v47;
            *(_QWORD *)v50 = v36;
            *(_DWORD *)&v50[8] = v21;
            v51 = v34;
            v52 = (WTF *)v54;
            v54[1] = *(_OWORD *)&v47[16];
            v46 = 3;
            v53 = 0x200000003;
            v55[0] = v36;
            *(_DWORD *)((char *)v55 + 7) = *(_DWORD *)&v50[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v33, (unint64_t)&v51, v14, v15, v16, v17, v18, v19);
            v42 = v52;
            if (v54 != (_OWORD *)v52 && v52)
            {
              v52 = 0;
              LODWORD(v53) = 0;
              WTF::fastFree((unint64_t)v42, v37, v38, v39, v40, v41, v18, v19);
            }
            v43 = v45;
            if (v47 != (_BYTE *)v45 && v45)
            {
              v45 = 0;
              LODWORD(v46) = 0;
              WTF::fastFree((unint64_t)v43, v37, v38, v39, v40, v41, v18, v19);
            }
          }
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>(*(_QWORD *)(a1 + 40), (**(_DWORD **)(a1 + 48) + 1), v21, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112), *(unsigned int *)(a2 + 16), v44, v18, v19);
        }
      }
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::ColoringAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;

  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_QWORD *)(v8 + 336) = a3;
  v15 = *(_QWORD *)(a2 + 56);
  if (v15)
  {
    v16 = 0;
    do
    {
      v16 |= v15 & -v15;
      v15 &= v15 - 1;
    }
    while (v15);
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      do
      {
        v31 = v17 | 0x80;
        if ((v17 & 0x60) == 0x20)
        {
          v30 = (char)(31 - v17);
          v20 = *(unsigned int *)(a1 + 276);
          if ((_DWORD)v20 == *(_DWORD *)(a1 + 272))
          {
            WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(a1 + 264, (unint64_t)&v30, v9, v10, v11, v12, v13, v14);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v20) = (char)(31 - v17);
            ++*(_DWORD *)(a1 + 276);
          }
          v21 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
          {
            WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Reg&>(a1, (unint64_t)&v31);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a1 + v21) = v31;
            ++*(_DWORD *)(a1 + 12);
          }
        }
        if (v17 > 0x3E)
          break;
        v18 = __clz(__rbit64(v16 >> (v17 + 1)));
        v19 = v18 + v17 + 1;
        if (v19 >= 0x40)
          v17 = 64;
        else
          v17 += v18 + 1;
      }
      while (v19 <= 0x3F);
    }
  }
  WTF::Vector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(a1 + 24, (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 180) + 33), v9, v10, v11, v12, v13, v14);
  return a1;
}

void JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::initializePrecoloredTmp(uint64_t a1)
{
  unint64_t v2;

  WTF::Vector<JSC::Reg,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::resize(a1 + 120, (WTF *)(*(unsigned __int16 *)(a1 + 16) + 1));
  if (*(_WORD *)(a1 + 16))
  {
    v2 = 1;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v2) = (v2 + 31) & 0x7F;
    while (v2++ < *(unsigned __int16 *)(a1 + 16));
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int **v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD **v41;
  _QWORD **v42;
  _QWORD **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int **v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  _DWORD *v70;
  _DWORD *v71;
  _QWORD v73[2];
  _BYTE v74[8];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;

  *(_DWORD *)(a1 + 296) = 0;
  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)v74, *(_QWORD *)(a1 + 256));
  v30 = *(_QWORD *)(a1 + 256);
  v31 = *(unsigned int *)(v30 + 108);
  if ((_DWORD)v31)
  {
    v32 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v30 + 96) + 8 * v32))
    {
      if (v31 == ++v32)
        return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v74, v23, v24, v25, v26, v27, v28, v29);
    }
    if ((_DWORD)v31 != (_DWORD)v32)
    {
      LODWORD(v33) = *(_DWORD *)(v30 + 108);
      do
      {
        if (v33 <= v32)
        {
LABEL_52:
          __break(0xC471u);
          JUMPOUT(0x19808D640);
        }
        v34 = *(unsigned int **)(*(_QWORD *)(v30 + 96) + 8 * v32);
        v73[0] = v74;
        v73[1] = v34;
        v79 = 0;
        v35 = (unsigned int **)(v80 + 32 * *v34);
        v36 = *((unsigned int *)v35 + 3);
        if ((_DWORD)v36)
        {
          v64 = *v35;
          v65 = v76;
          v66 = 4 * v36;
          do
          {
            v67 = *v64;
            v68 = *(unsigned int *)(v65 + 4 * v67);
            v69 = v79;
            if (v79 <= v68 || *(_DWORD *)(v77 + 4 * v68) != (_DWORD)v67)
            {
              v81 = *v64;
              if (v79 == v78)
              {
                v70 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, v79 + 1, (unint64_t)&v81);
                *(_DWORD *)(v77 + 4 * v79) = *v70;
                v65 = v76;
              }
              else
              {
                *(_DWORD *)(v77 + 4 * v79) = v67;
              }
              ++v79;
              *(_DWORD *)(v65 + 4 * v67) = v69;
            }
            ++v64;
            v66 -= 4;
          }
          while (v66);
        }
        v37 = v34[5];
        if (!(_DWORD)v37)
          goto LABEL_51;
        do
        {
          v38 = v37 - 1;
          v39 = v34[5];
          if (v39 <= (int)v37 - 1)
            goto LABEL_52;
          v40 = *((_QWORD *)v34 + 1);
          v41 = (_QWORD **)(v40 + ((unint64_t)(v37 - 1) << 7));
          v42 = (_QWORD **)(v40 + (v37 << 7));
          if (v37 >= v39)
            v43 = 0;
          else
            v43 = v42;
          v44 = v75;
          v45 = *(_QWORD *)(v75 + 16 * *v34);
          v46 = v45 + (v37 << 6);
          v47 = *(unsigned int *)(v46 + 44);
          if ((_DWORD)v47)
          {
            v56 = *(unsigned int **)(v46 + 32);
            v57 = v79;
            v58 = 4 * v47;
            v59 = v76;
            v60 = v77;
            do
            {
              v61 = *v56;
              v62 = *(unsigned int *)(v59 + 4 * v61);
              if (v57 > v62 && *(_DWORD *)(v60 + 4 * v62) == (_DWORD)v61)
              {
                v63 = *(unsigned int *)(v60 + 4 * v57 - 4);
                *(_DWORD *)(v60 + 4 * v62) = v63;
                *(_DWORD *)(v59 + 4 * v63) = v62;
                v57 = --v79;
              }
              ++v56;
              v58 -= 4;
            }
            while (v58);
            v45 = *(_QWORD *)(v44 + 16 * *v34);
          }
          v48 = (unsigned int **)(v45 + ((unint64_t)(v37 - 1) << 6));
          v49 = *((unsigned int *)v48 + 3);
          if ((_DWORD)v49)
          {
            v50 = *v48;
            v51 = v76;
            v52 = 4 * v49;
            do
            {
              v53 = *v50;
              v54 = *(unsigned int *)(v51 + 4 * v53);
              v55 = v79;
              if (v79 <= v54 || *(_DWORD *)(v77 + 4 * v54) != (_DWORD)v53)
              {
                v81 = *v50;
                if (v79 == v78)
                {
                  v71 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, v79 + 1, (unint64_t)&v81);
                  *(_DWORD *)(v77 + 4 * v79) = *v71;
                  v51 = v76;
                }
                else
                {
                  *(_DWORD *)(v77 + 4 * v79) = v53;
                }
                ++v79;
                *(_DWORD *)(v51 + 4 * v53) = v55;
              }
              ++v50;
              v52 -= 4;
            }
            while (v52);
          }
          v37 = v38;
        }
        while ((_DWORD)v38);
        if (!v34[5])
        {
LABEL_51:
          __break(0xC471u);
          JUMPOUT(0x19808D648);
        }
        v32 = (v32 + 1);
        v33 = *(unsigned int *)(v30 + 108);
        if (v33 > v32)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v30 + 96) + 8 * v32))
          {
            if (v33 == ++v32)
            {
              LODWORD(v32) = *(_DWORD *)(v30 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v31 != (_DWORD)v32);
    }
  }
  return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v74, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  _WORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD **v25;
  int v26;
  _QWORD **v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  _WORD *v66;
  uint64_t v67;
  _WORD *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD v71[3];
  _QWORD **v72;
  _QWORD **v73;
  _QWORD *v74;
  _WORD **v75;
  _QWORD *v76;
  void *v77;
  void **v78;
  _QWORD *v79;

  v72 = a3;
  v73 = a2;
  v71[0] = &v73;
  v71[1] = &v72;
  v71[2] = a1;
  v74 = v71;
  if (a2)
  {
    v75 = (_WORD **)&v74;
    v76 = &v75;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v77 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v78 = &v77;
      v79 = &v76;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v77);
    }
    else
    {
      v12 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a2 + 60)
            + ((unint64_t)((v12 - 1) * v12) >> 1);
        v15 = 1;
        while (1)
        {
          if (v13 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808DC50);
          }
          v16 = v14[v13];
          if ((v16 >> 5) - 1 >= 5)
            break;
          if ((v16 & 0xC) == 4 && LOBYTE((*a2)[v15]) == 1)
          {
            v18 = *v75;
            LODWORD(v77) = (*a2)[v15 + 1];
          }
          ++v13;
          v15 += 4;
          if (v12 == v13)
            goto LABEL_15;
        }
LABEL_102:
        __break(0xC471u);
        JUMPOUT(0x19808DC08);
      }
    }
  }
LABEL_15:
  if (a3)
  {
    v75 = (_WORD **)&v74;
    v76 = &v75;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v77 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v78 = &v77;
      v79 = &v76;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v77);
    }
    else
    {
      v19 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v19 - 1) * v19) >> 1);
        v22 = 1;
        do
        {
          if (v20 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808DC58);
          }
          v23 = v21[v20];
          if ((v23 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19808DC28);
          }
          v24 = &(*a3)[v22];
          if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
          {
            v68 = *v75;
            LODWORD(v77) = *((_DWORD *)v24 + 2);
          }
          ++v20;
          v22 += 4;
        }
        while (v19 != v20);
      }
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19808DC68);
    }
    v56 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v58 = v57 | v56;
    if (v57 | v56)
    {
      v59 = v56;
      do
      {
        v60 = __clz(__rbit64(v58));
        v58 &= v58 - 1;
      }
      while (v58);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19808DC70);
    }
    v61 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v63 = v62 | v61;
    if (v62 | v61)
    {
      v64 = v61;
      do
      {
        v65 = __clz(__rbit64(v63));
        v63 &= v63 - 1;
      }
      while (v63);
    }
  }
  v25 = v73;
  if (!v73)
    goto LABEL_35;
  v26 = *((__int16 *)v73 + 60);
  if ((v26 - 107) > 6 || ((1 << (*((_WORD *)v73 + 60) - 107)) & 0x43) == 0)
    goto LABEL_35;
  if (*((_DWORD *)v73 + 3) != 2)
    goto LABEL_35;
  v32 = *v73;
  if (*((_BYTE *)*v73 + 8) != 1 || *((_BYTE *)v32 + 40) != 1)
    goto LABEL_35;
  if (v26 != 94)
    goto LABEL_41;
  v69 = *(_QWORD *)(a1 + 336);
  if (!v69)
    goto LABEL_35;
  v70 = *((unsigned int *)v32 + 4);
  if ((int)v70 < 1)
  {
    v70 = -(int)v70;
    if (v70 >= *(unsigned int *)(v69 + 28))
      goto LABEL_102;
    v69 += 16;
  }
  else if (v70 >= *(_DWORD *)(v69 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x19808DC78);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)v69 + 2 * v70 + 1) <= 2u)
  {
LABEL_41:
    v33 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v73 + 60);
    v34 = v33[1];
    if ((v34 >> 5) - 1 >= 5 || (v35 = v33[2], (v35 >> 5) - 1 > 4))
    {
      __break(0xC471u);
      JUMPOUT(0x19808DC48);
    }
    v36 = v34 & 0xC;
    v37 = *((_DWORD *)v32 + 4);
    v38 = v36 == 4;
    if (v36 == 4)
      v39 = 0;
    else
      v39 = *((_DWORD *)v32 + 4);
    v40 = *((_DWORD *)v32 + 12);
    v41 = v35 & 0xC;
    if (!v38)
      v37 = 0;
    if (v41 == 4)
      v42 = v39;
    else
      v42 = v40;
    if (v41 != 4)
      v40 = v37;
    LOWORD(v77) = -(__int16)v42;
    v43 = -v40;
    WORD1(v77) = -(__int16)v40;
    v44 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v44 == *(_DWORD *)(a1 + 96))
    {
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v44) = (_DWORD)v77;
      ++*(_DWORD *)(a1 + 100);
    }
    v45 = *(_DWORD *)(a1 + 296);
    *(_DWORD *)(a1 + 296) = v45 + 1;
    LODWORD(v77) = v45;
    v46 = *(unsigned int *)(a1 + 316);
    if ((_DWORD)v46 == *(_DWORD *)(a1 + 312))
    {
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(a1 + 304, (unint64_t)&v77);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * v46) = v45;
      ++*(_DWORD *)(a1 + 316);
    }
    v47 = *((unsigned int *)v73 + 3);
    if ((_DWORD)v47)
    {
      v48 = 32 * v47;
      v49 = (int *)(*v73 + 2);
      do
      {
        v50 = *v49;
        v49 += 8;
        v51 = -v50;
        if (*(_DWORD *)(a1 + 116) <= -v50)
        {
          __break(0xC471u);
          JUMPOUT(0x19808DC60);
        }
        WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v77, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v51), v44);
        v48 -= 32;
      }
      while (v48);
    }
    v52 = *(unsigned int *)(*(_QWORD *)a4 + 60);
    if ((_DWORD)v52)
    {
      v53 = *(_DWORD **)(*(_QWORD *)a4 + 48);
      v54 = 4 * v52;
      do
      {
        if (v42 + *v53)
        ++v53;
        v54 -= 4;
      }
      while (v54);
    }
    v55 = *(unsigned int *)(a1 + 276);
    if ((_DWORD)v55)
    {
      v66 = *(_WORD **)(a1 + 264);
      v67 = 4 * v55;
      do
      {
        if (v42 != *(_DWORD *)v66)
        v66 += 2;
        v67 -= 4;
      }
      while (v67);
    }
    v28 = v72;
    v29 = *(_QWORD *)a4;
    v30 = a1;
    v25 = 0;
  }
  else
  {
LABEL_35:
    v28 = v72;
    v29 = *(_QWORD *)a4;
    v30 = a1;
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(uint64_t result, _QWORD **a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  int v51;
  _QWORD v52[2];
  uint64_t v53;
  _QWORD *v54;
  uint64_t ***v55;
  uint64_t ****v56;
  void *v57;
  void **v58;
  uint64_t *****v59;

  v52[1] = result;
  v53 = a4;
  v52[0] = &v53;
  v54 = v52;
  if (a2)
  {
    v55 = (uint64_t ***)&v54;
    v56 = &v55;
    if ((*((__int16 *)a2 + 60) - 446) <= 5)
    {
      v57 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v58 = &v57;
      v59 = &v56;
      result = JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v57);
    }
    else
    {
      v10 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a2 + 60)
            + ((unint64_t)((v10 - 1) * v10) >> 1);
        do
        {
          if (v11 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808E064);
          }
          v13 = v12[v11];
          if ((v13 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19808E054);
          }
          v14 = (uint64_t)&(*a2)[4 * v11];
          v15 = (v13 & 0xC) == 4 && *(_BYTE *)(v14 + 8) == 1;
          if (v15 && (v13 & 0x10) != 0)
          {
            v51 = *(_DWORD *)(v14 + 16);
            v16 = (*v55)[1];
            v17 = ***v55;
            v18 = *(unsigned int *)(v17 + 60);
            if ((_DWORD)v18)
            {
              v19 = *(_DWORD **)(v17 + 48);
              v20 = 4 * v18;
              do
              {
                v21 = -*v19;
                v22 = v16[42];
                if (v21 < 0 || *v19 == 0)
                {
                  if (*v19 >= *(_DWORD *)(v22 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19808E074);
                  }
                }
                else if (*(_DWORD *)(v22 + 12) <= v21)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19808E06CLL);
                }
                v20 -= 4;
              }
              while (v20);
            }
            v23 = *((unsigned int *)v16 + 69);
            if ((_DWORD)v23)
            {
              v24 = (__int16 *)v16[33];
              v25 = 4 * v23;
              do
              {
                v26 = *v24;
                v24 += 2;
                v25 -= 4;
              }
              while (v25);
            }
          }
          ++v11;
        }
        while (v11 != v10);
      }
    }
  }
  if (a3)
  {
    v55 = (uint64_t ***)&v54;
    v56 = &v55;
    if ((*((__int16 *)a3 + 60) - 446) <= 5)
    {
      v57 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v58 = &v57;
      v59 = &v56;
      result = JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v57);
    }
    else
    {
      v27 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v27)
      {
        v28 = 0;
        v29 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v27 - 1) * v27) >> 1);
        v30 = 1;
        while (1)
        {
          if (v28 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19808E05CLL);
          }
          v31 = v29[v28];
          if ((v31 >> 5) - 1 >= 5)
            break;
          v32 = &(*a3)[v30];
          if (*(_BYTE *)v32 == 1 && (v31 & 0xF) - 8 <= 2)
          ++v28;
          v30 += 4;
          if (v27 == v28)
            goto LABEL_37;
        }
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x19808E034);
      }
    }
  }
LABEL_37:
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
      goto LABEL_59;
    result = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v48 = v47 | result;
    if (v47 | result)
    {
      v49 = result;
      do
      {
        v50 = __clz(__rbit64(v48));
        v48 &= v48 - 1;
      }
      while (v48);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19808E07CLL);
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v39 = v38 | result;
    if (v38 | result)
    {
      v40 = result;
      do
      {
        v41 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
      }
      while (v39);
    }
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v9;
  int v10;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v9 = (_WORD *)****((_QWORD ****)result + 2);
    v10 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(_WORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD v25[3];
  char v26;
  _WORD *v27;
  _WORD **v28;
  void *v29;
  void **v30;
  _QWORD *v31;

  v26 = a4;
  if (a3 == 1)
  {
    v8 = *((_QWORD *)result + 2);
    v9 = **(_QWORD **)result;
    v10 = **((_QWORD **)result + 1);
    v25[0] = &v26;
    v25[1] = a2;
    v25[2] = v8;
    if (v9)
    {
      v27 = v25;
      v28 = &v27;
      if ((*(__int16 *)(v9 + 120) - 446) <= 5)
      {
        v29 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v30 = &v29;
        v31 = &v28;
        result = (_WORD *)JSC::B3::Air::Inst::forEachArgCustom(v9, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v29);
      }
      else
      {
        v11 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v9 + 120)
              + ((unint64_t)((v11 - 1) * v11) >> 1);
          v14 = 8;
          while (1)
          {
            if (v12 >= *(unsigned int *)(v9 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19808E370);
            }
            v15 = v13[v12];
            v16 = (v15 >> 5) - 1;
            if (v16 >= 5)
              break;
            v17 = *(_QWORD *)v9 + v14;
            if ((v15 & 0xC) == 4 && *(_BYTE *)v17 == 1 && (v15 & 0x10) != 0)
            {
              result = (_WORD *)*((_QWORD *)v27 + 2);
              if (((0xFu >> v16) & 1) == 0 || !**(_BYTE **)v27)
            }
            ++v12;
            v14 += 32;
            if (v11 == v12)
              goto LABEL_18;
          }
LABEL_34:
          __break(0xC471u);
          JUMPOUT(0x19808E348);
        }
      }
    }
LABEL_18:
    if (v10)
    {
      v27 = v25;
      v28 = &v27;
      if ((*(__int16 *)(v10 + 120) - 446) <= 5)
      {
        v29 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v30 = &v29;
        v31 = &v28;
        return (_WORD *)JSC::B3::Air::Inst::forEachArgCustom(v10, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v29);
      }
      else
      {
        v19 = *(unsigned int *)(v10 + 12);
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v10 + 120)
              + ((unint64_t)((v19 - 1) * v19) >> 1);
          v22 = 8;
          while (v20 < *(unsigned int *)(v10 + 12))
          {
            v23 = v21[v20];
            if ((v23 >> 5) - 1 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x19808E368);
            }
            v24 = *(_QWORD *)v10 + v22;
            if (*(_BYTE *)v24 == 1 && (v23 & 0xF) - 8 <= 2)
            ++v20;
            v22 += 32;
            if (v19 == v20)
              return result;
          }
          goto LABEL_34;
        }
      }
    }
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1 && (_DWORD)a4 == 1)
  {
    v8 = ***((_QWORD ***)result + 2);
    result = *(_WORD **)(v8 + 16);
    if (a5 > 3 || !**(_BYTE **)v8)
  }
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator() const(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_WORD *result, __int16 a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v8;

  if (a3 == 1)
  {
    v8 = result;
    result = (_WORD *)*((_QWORD *)result + 2);
    if (a4 > 3 || !**(_BYTE **)v8)
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v8;
  int v9;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v8 = (_WORD *)****((_QWORD ****)result + 2);
    v9 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_WORD *JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::build(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}::operator()(_WORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;

  if ((a2 & 0x60) != 0)
    v8 = (char)(31 - (a2 & 0x7F));
  else
    v8 = (a2 & 0x7F) + 1;
  v10 = v8;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v8 = (a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1;
  if (v8 && (_DWORD)a4 == 1)
  {
    v9 = *(_DWORD *)(a2 + 16);
    v10 = *(_QWORD *)(****((_QWORD ****)result + 2) + 8);
    v11 = ******((_QWORD ******)result + 2);
    v12 = *(unsigned int *)(v11 + 60);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD **)(v11 + 48);
      v14 = 4 * v12;
      do
      {
        v15 = -*v13;
        v16 = *(_QWORD *)(v10 + 336);
        if (v15 < 0 || *v13 == 0)
        {
          if (*v13 >= *(_DWORD *)(v16 + 28))
          {
LABEL_19:
            __break(0xC471u);
            JUMPOUT(0x19808E5C8);
          }
        }
        else if (*(_DWORD *)(v16 + 12) <= v15)
        {
          goto LABEL_19;
        }
        v14 -= 4;
      }
      while (v14);
    }
    v17 = *(unsigned int *)(v10 + 276);
    if ((_DWORD)v17)
    {
      v18 = *(__int16 **)(v10 + 264);
      v19 = -v9;
      v20 = 4 * v17;
      v21 = (unsigned __int16)v19;
      do
      {
        v22 = *v18;
        v18 += 2;
        v20 -= 4;
      }
      while (v20);
    }
  }
  return result;
}

_WORD *JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::B3::Air::Tmp,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_WORD *result, __int16 a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  if (a3 == 1)
  {
    v9 = *((_QWORD *)result + 1);
    v10 = **(_QWORD **)result;
    v11 = *(unsigned int *)(v10 + 60);
    if ((_DWORD)v11)
    {
      v12 = *(_DWORD **)(v10 + 48);
      v13 = 4 * v11;
      do
      {
        v14 = -*v12;
        v15 = *(_QWORD *)(v9 + 336);
        if (v14 < 0 || *v12 == 0)
        {
          if (*v12 >= *(_DWORD *)(v15 + 28))
          {
LABEL_15:
            __break(0xC471u);
            JUMPOUT(0x19808E6A0);
          }
        }
        else if (*(_DWORD *)(v15 + 12) <= v14)
        {
          goto LABEL_15;
        }
        v13 -= 4;
      }
      while (v13);
    }
    v16 = *(unsigned int *)(v9 + 276);
    if ((_DWORD)v16)
    {
      v17 = *(__int16 **)(v9 + 264);
      v18 = 4 * v16;
      v19 = (unsigned __int16)-a2;
      do
      {
        v20 = *v17;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
    }
  }
  return result;
}

_WORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(_WORD *result, _WORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  __int16 v21;

  if (a3 == 1)
  {
    v9 = *((_QWORD *)result + 1);
    v10 = **(_QWORD **)result;
    v11 = *(unsigned int *)(v10 + 60);
    if ((_DWORD)v11)
    {
      v12 = *(_DWORD **)(v10 + 48);
      v13 = 4 * v11;
      if ((_DWORD)a4)
      {
        do
        {
          v14 = -*v12;
          v15 = *(_QWORD *)(v9 + 336);
          if ((int)v14 < 1)
          {
            v14 = *v12;
            if (v14 >= *(unsigned int *)(v15 + 28))
              goto LABEL_22;
            v15 += 16;
          }
          else if (*(_DWORD *)(v15 + 12) <= v14)
          {
            goto LABEL_22;
          }
          if (*(unsigned __int8 *)(*(_QWORD *)v15 + 2 * v14) >= 4u)
          ++v12;
          v13 -= 4;
        }
        while (v13);
      }
      else
      {
        do
        {
          v16 = -*v12;
          v17 = *(_QWORD *)(v9 + 336);
          if (v16 < 0 || *v12 == 0)
          {
            if (*v12 >= *(_DWORD *)(v17 + 28))
              goto LABEL_22;
          }
          else if (*(_DWORD *)(v17 + 12) <= v16)
          {
LABEL_22:
            __break(0xC471u);
            JUMPOUT(0x19808E84CLL);
          }
          v13 -= 4;
        }
        while (v13);
      }
    }
    v18 = *(unsigned int *)(v9 + 276);
    if ((_DWORD)v18)
    {
      v19 = *(__int16 **)(v9 + 264);
      v20 = 4 * v18;
      do
      {
        v21 = *v19;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
    }
  }
  return result;
}

_WORD *_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorItLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(_WORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  return result;
}

_WORD *JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}::operator()(_WORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;

  if ((a2 & 0x60) != 0)
    v8 = (char)(31 - (a2 & 0x7F));
  else
    v8 = (a2 & 0x7F) + 1;
  v10 = v8;
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::allocate(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  float v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v41;
  unsigned __int8 v42;
  unsigned __int16 v43;
  __int16 v44;

  do
  {
    v42 = 0;
  }
  while (v42);
  do
  {
    v42 = 0;
  }
  while (v42);
  v19 = (uint64_t *)(a1 + 168);
  v20 = (uint64_t *)(a1 + 208);
  do
  {
    v42 = 0;
    while (1)
    {
      v21 = *(_DWORD *)(a1 + 204);
      if (!v21)
        break;
      v22 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 192) + 2 * v21 - 2);
      *(_DWORD *)(a1 + 204) = v21 - 1;
      v43 = v22;
      v23 = *(unsigned int *)(a1 + 188);
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 184))
      {
        WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 176, (unint64_t)&v43);
        v22 = v43;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)(a1 + 176) + 2 * v23) = v22;
        *(_DWORD *)(a1 + 188) = v23 + 1;
      }
      v24 = *(_QWORD *)(a1 + 168);
      if (v24 >= 0)
        v25 = 2 * v24 + 8;
      else
        v25 = a1 + 168;
      *(_QWORD *)(v25 + ((v22 >> 3) & 0x1FF8)) |= 1 << v22;
      v26 = *(_QWORD *)(a1 + 48) + 16 * v22;
      v27 = *(unsigned int *)(v26 + 12);
      if ((_DWORD)v27)
      {
        v28 = *(unsigned __int16 **)v26;
        v29 = 2 * v27;
        do
        {
          v30 = *v28;
          v31 = 2 * *v19 + 8;
          if (*v19 < 0)
            v31 = a1 + 168;
          if (((1 << v30) & *(_QWORD *)(v31 + 8 * (v30 >> 6))) == 0 && !*(_WORD *)(*(_QWORD *)(a1 + 152) + 2 * v30))
          {
            v44 = *v28;
            v32 = *(_QWORD *)(a1 + 64);
            v33 = *(unsigned __int16 *)(v32 + 2 * v30);
            *(_WORD *)(v32 + 2 * v30) = v33 - 1;
            if (*(_DWORD *)(a1 + 12) == v33)
            {
              v34 = *(_QWORD *)(a1 + 208);
              if (v34 >= 0)
                v35 = 2 * v34 + 8;
              else
                v35 = a1 + 208;
              *(_QWORD *)(v35 + 8 * (v30 >> 6)) &= ~(1 << v30);
              v36 = *(unsigned int *)(a1 + 204);
              if ((_DWORD)v36 == *(_DWORD *)(a1 + 200))
              {
                WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 192, (unint64_t)&v44);
              }
              else
              {
                *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v36) = v30;
                *(_DWORD *)(a1 + 204) = v36 + 1;
              }
            }
          }
          ++v28;
          v29 -= 2;
        }
        while (v29);
      }
    }
    v37 = *v20;
    if (*v20 < 0)
    {
      if ((v37 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
LABEL_31:
        v41 = 1;
        v42 = 1;
        continue;
      }
    }
    else
    {
      v38 = (_QWORD *)(2 * v37);
      v39 = ((unint64_t)(*v38 + 63) >> 6);
      while (v39 * 8)
      {
        if (v38[v39--])
          goto LABEL_31;
      }
    }
    v41 = v42;
  }
  while (v41);
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::assignRegistersToTmp<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  WTF *v61;
  char v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  __int128 v77;
  __int128 v78;
  int v79;
  WTF *v81;
  uint64_t v82;
  _BYTE v83[96];
  _BYTE v84[11];

  v8 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v8)
    return;
  v9 = (uint64_t)a2;
  v10 = a1;
  v11 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v11))
  {
    if (v8 == ++v11)
      return;
  }
  if ((_DWORD)v8 == (_DWORD)v11)
    return;
  v12 = 3;
  v13 = 67;
  v14 = 31;
  v15 = 12736;
  LODWORD(v16) = *(_DWORD *)(a1 + 108);
  v79 = v16;
  do
  {
    if (v16 <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x19808F1A0);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 8 * v11);
    LODWORD(v18) = *(_DWORD *)(v17 + 20);
    if (!(_DWORD)v18)
    {
      v45 = 0;
      v42 = *(_QWORD *)(v17 + 8);
      v43 = v42;
      v46 = v42;
      goto LABEL_61;
    }
    v19 = 0;
    do
    {
      v20 = *(_QWORD *)(v17 + 8);
      v21 = v20 + (v19 << 7);
      if ((*(__int16 *)(v21 + 120) - 107) > 6 || ((1 << (*(_WORD *)(v21 + 120) - 107)) & 0x43) == 0)
      {
        v23 = *(_QWORD *)v21;
        v24 = *(unsigned int *)(v21 + 12);
      }
      else
      {
        v24 = *(unsigned int *)(v21 + 12);
        v23 = *(_QWORD *)v21;
        if ((_DWORD)v24 == 2)
        {
          if (*(_BYTE *)(v23 + 8) != 1 || *(_BYTE *)(v23 + 40) != 1)
            goto LABEL_89;
          if (*(_WORD *)(v21 + 120) != 94)
            goto LABEL_40;
          v64 = *(_QWORD *)(v9 + 336);
          if (!v64)
            goto LABEL_89;
          v65 = *(unsigned int *)(v23 + 16);
          if ((int)v65 < 1)
          {
            v65 = -(int)v65;
            if (v65 >= *(unsigned int *)(v64 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x19808F188);
            }
            v64 += 16;
          }
          else if (v65 >= *(_DWORD *)(v64 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19808F180);
          }
          if (*(unsigned __int8 *)(*(_QWORD *)v64 + 2 * v65 + 1) <= 2u)
LABEL_40:
            v25 = 1;
          else
LABEL_89:
            v25 = 0;
          v26 = v23 + 64;
          while (1)
          {
LABEL_17:
            v27 = *(char *)(v23 + 8);
            if (v27 == 1)
              goto LABEL_18;
            if (v27 <= 0xD)
              break;
LABEL_19:
            v23 += 32;
            if (v23 == v26)
            {
              if (v25)
              {
                v34 = *(_DWORD *)(v21 + 12);
                if (!v34)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19808F190);
                }
                v35 = *(_QWORD *)v21;
                if (*(_BYTE *)(*(_QWORD *)v21 + 8) == 1)
                {
                  if (v34 <= 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19808F198);
                  }
                  if (*(_BYTE *)(v35 + 40) == 1 && *(_DWORD *)(v35 + 16) == *(_DWORD *)(v35 + 48))
                  {
                    v81 = (WTF *)v83;
                    v82 = 3;
                    *(_QWORD *)v84 = 0;
                    *(_WORD *)&v84[8] = 0;
                    v84[10] &= 0xFCu;
                    v37 = (_OWORD *)(v21 + 16);
                    v36 = *(_QWORD *)v21;
                    if (*(_QWORD *)v21 != v21 + 16)
                    {
                      if (v36)
                      {
                        *(_QWORD *)v21 = 0;
                        *(_DWORD *)(v21 + 8) = 0;
                        WTF::fastFree(v36, a2, 3, 67, 31, 12736, a7, a8);
                        v15 = 12736;
                        v14 = 31;
                        v13 = 67;
                        v12 = 3;
                        LODWORD(v8) = v79;
                        v10 = a1;
                      }
                      *(_QWORD *)v21 = v37;
                      v61 = v81;
                      if (v81 == (WTF *)v83)
                      {
                        if (HIDWORD(v82))
                        {
                          v75 = 32 * HIDWORD(v82);
                          v76 = (__int128 *)v83;
                          do
                          {
                            v77 = *v76;
                            v78 = v76[1];
                            v76 += 2;
                            *v37 = v77;
                            v37[1] = v78;
                            v37 += 2;
                            v75 -= 32;
                          }
                          while (v75);
                        }
                      }
                      else
                      {
                        v81 = (WTF *)v83;
                        *(_QWORD *)v21 = v61;
                      }
                    }
                    *(_DWORD *)(v21 + 8) = v82;
                    v38 = HIDWORD(v82);
                    HIDWORD(v82) = 0;
                    *(_DWORD *)(v21 + 12) = v38;
                    v39 = v20 + (v19 << 7);
                    v40 = *(_QWORD *)v84;
                    *(_DWORD *)(v39 + 119) = *(_DWORD *)&v84[7];
                    *(_QWORD *)(v39 + 112) = v40;
                    v41 = v81;
                    if (v83 != (_BYTE *)v81 && v81)
                    {
                      v81 = 0;
                      LODWORD(v82) = 0;
                      WTF::fastFree((unint64_t)v41, a2, 3, 67, 31, 12736, a7, a8);
                      v15 = 12736;
                      v14 = 31;
                      v13 = 67;
                      v12 = 3;
                      LODWORD(v8) = v79;
                      v10 = a1;
                    }
                  }
                }
              }
              goto LABEL_34;
            }
          }
          if (((1 << v27) & 0x31C0) == 0)
          {
            if (v27 == 11)
            {
              v15 = 12736;
              v14 = 31;
              v13 = 67;
              v12 = 3;
              LODWORD(v8) = v79;
              v10 = a1;
            }
            goto LABEL_19;
          }
LABEL_18:
          v28 = *(_DWORD *)(v23 + 16);
          if (v28 <= -33)
          {
            v29 = -v28;
            do
            {
              v30 = (unsigned __int16)v29;
              v29 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 152) + 2 * (unsigned __int16)v29);
            }
            while (v29);
            if (-(int)v30 >= 0xFFFFFFE0)
            {
              v62 = v30 + 31;
              v63 = (char)-(char)v30;
              v33 = (v30 + 32);
              if ((v62 & 0x60) != 0)
                v33 = v63;
            }
            else
            {
              LODWORD(v81) = -(int)v30;
              v31 = *(_BYTE *)(*(_QWORD *)(v9 + 120) + v30);
              v32 = v31 & 0x7F;
              if (v32 == 127)
              {
                WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v81);
                WTF::dataLog<char [7]>();
                WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v9 + 256));
                __break(0xC471u);
                JUMPOUT(0x19808EFF0);
              }
              if ((v31 & 0x60) != 0)
                v33 = (char)(31 - v32);
              else
                v33 = v32 + 1;
            }
            *(_DWORD *)(v23 + 16) = v33;
          }
          goto LABEL_19;
        }
      }
      if (v24)
      {
        v25 = 0;
        v26 = v23 + 32 * v24;
        goto LABEL_17;
      }
LABEL_34:
      ++v19;
      v18 = *(unsigned int *)(v17 + 20);
    }
    while (v19 < v18);
    v42 = *(_QWORD *)(v17 + 8);
    v43 = v42 + (v18 << 7);
    if ((_DWORD)v18)
    {
      v44 = 0;
      v45 = 0;
      v46 = v42 + (v18 << 7);
      v47 = v46;
      do
      {
        a2 = (_BYTE *)(v42 + v44);
        if (*(_QWORD *)(v42 + v44 + 112))
          v48 = 0;
        else
          v48 = *(unsigned __int16 *)(v42 + v44 + 120) == 0;
        if (v48 && (a2[122] & 3) == 0)
        {
          if (!*(_DWORD *)(v42 + v44 + 12))
          {
            if (v47 == *(_QWORD *)(v17 + 8) + ((unint64_t)*(unsigned int *)(v17 + 20) << 7))
            {
              v47 = v42 + v44;
            }
            else if (a2 != (_BYTE *)v46)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)v46, (unsigned int *)a2, v47, 67, 31, 12736, a7, a8);
              v47 += v42 + v44 - v46;
            }
            v73 = *(_QWORD *)(v42 + v44);
            if (v42 + v44 + 16 != v73 && v73)
            {
              v74 = v42 + v44;
              *(_QWORD *)v74 = 0;
              *(_DWORD *)(v74 + 8) = 0;
              WTF::fastFree(v73, a2, v12, v13, v14, v15, a7, a8);
            }
            v46 = v42 + v44 + 128;
            ++v45;
          }
          LODWORD(v8) = v79;
          v10 = a1;
          v12 = 3;
          v13 = 67;
          v14 = 31;
          v15 = 12736;
        }
        v44 += 128;
      }
      while (v42 + v44 < v43);
      v42 = *(_QWORD *)(v17 + 8);
      LODWORD(v18) = *(_DWORD *)(v17 + 20);
      v43 = v47;
    }
    else
    {
      v45 = 0;
      v46 = v42 + (v18 << 7);
    }
LABEL_61:
    v49 = v42 + ((unint64_t)v18 << 7);
    if (v46 != v49)
    {
      if (v46 <= v43)
      {
        v66 = 0;
        do
        {
          JSC::B3::Air::Inst::Inst(v43 + ((v49 - v46) & 0xFFFFFFFFFFFFFF80) - 128 + v66, v49 + v66 - 128);
          v71 = *(_QWORD *)(v49 + v66 - 128);
          if (v49 + v66 - 112 != v71 && v71 != 0)
          {
            *(_QWORD *)(v49 + v66 - 128) = 0;
            *(_DWORD *)(v49 + v66 - 120) = 0;
            WTF::fastFree(v71, a2, v67, v68, v69, v70, a7, a8);
          }
          v66 -= 128;
          LODWORD(v8) = v79;
          v10 = a1;
          v12 = 3;
          v13 = 67;
          v14 = 31;
          v15 = 12736;
        }
        while (v49 + v66 != v46);
      }
      else
      {
        do
        {
          *(_QWORD *)v43 = v43 + 16;
          *(_QWORD *)(v43 + 8) = 3;
          v50 = v46 + 16;
          v51 = *(_QWORD *)v46;
          if (*(_QWORD *)v46 == v46 + 16)
          {
            v52 = *(unsigned int *)(v46 + 12);
            if ((_DWORD)v52)
            {
              v53 = 0;
              v54 = 32 * v52;
              do
              {
                v55 = v43 + v53;
                v56 = *(_OWORD *)(v51 + v53 + 16);
                *(_OWORD *)(v55 + 16) = *(_OWORD *)(v51 + v53);
                *(_OWORD *)(v55 + 32) = v56;
                v53 += 32;
              }
              while (v54 != v53);
            }
          }
          else
          {
            *(_QWORD *)v46 = v50;
            *(_QWORD *)v43 = v51;
            v60 = *(_DWORD *)(v46 + 8);
            *(_DWORD *)(v46 + 8) = 3;
            *(_DWORD *)(v43 + 8) = v60;
          }
          v57 = *(_DWORD *)(v46 + 12);
          *(_DWORD *)(v46 + 12) = 0;
          *(_DWORD *)(v43 + 12) = v57;
          v58 = *(_QWORD *)(v46 + 112);
          *(_DWORD *)(v43 + 119) = *(_DWORD *)(v46 + 119);
          *(_QWORD *)(v43 + 112) = v58;
          v59 = *(_QWORD *)v46;
          if (v50 != *(_QWORD *)v46)
          {
            if (v59)
            {
              *(_QWORD *)v46 = 0;
              *(_DWORD *)(v46 + 8) = 0;
              WTF::fastFree(v59, a2, 3, 67, 31, 12736, a7, a8);
              v15 = 12736;
              v14 = 31;
              v13 = 67;
              v12 = 3;
              LODWORD(v8) = v79;
              v10 = a1;
            }
          }
          v43 += 128;
          v46 += 128;
        }
        while (v46 != v49);
      }
      LODWORD(v18) = *(_DWORD *)(v17 + 20);
    }
    *(_DWORD *)(v17 + 20) = v18 - v45;
    v11 = (v11 + 1);
    v16 = *(unsigned int *)(v10 + 108);
    if (v16 > v11)
    {
      while (!*(_QWORD *)(*(_QWORD *)(v10 + 96) + 8 * v11))
      {
        if (v16 == ++v11)
        {
          LODWORD(v11) = *(_DWORD *)(v10 + 108);
          break;
        }
      }
    }
  }
  while ((_DWORD)v8 != (_DWORD)v11);
}

void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(uint64_t *a1, uint64_t a2, WTF::BitVector *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::BitVector *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t **v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int *v90;
  unint64_t v91;
  unsigned int *v92;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t **v107;
  WTF::BitVector *v108;
  char v110;
  __int16 v111;
  unsigned int v112;
  char v113;
  __int128 v114;
  uint64_t v115;
  _BYTE v116[1088];
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD v120[12];
  _QWORD v121[2];
  unsigned int *v122;
  uint64_t **v123;
  uint64_t v124;
  uint64_t *v125;
  WTF::BitVector *v126;
  __int128 *v127;
  unsigned int *v128;
  _DWORD *v129;
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[3];

  v117 = 0;
  v107 = (uint64_t **)a2;
  v9 = *(unsigned int *)(a2 + 148);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t)(a1 + 1);
    v11 = 2 * v9;
    v12 = *(unsigned __int16 **)(a2 + 136);
    do
    {
      v13 = *v12;
      LODWORD(v118) = -(int)v13;
      v14 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x8000000000000000) != 0)
        v15 = 63;
      else
        v15 = *(_QWORD *)(2 * v14);
      if (v15 <= v13)
      {
        WTF::BitVector::resizeOutOfLine(this, v13 + 1, 0);
        v14 = *(_QWORD *)this;
      }
      if (v14 >= 0)
        v16 = (WTF::BitVector *)(2 * v14 + 8);
      else
        v16 = this;
      *(_QWORD *)((char *)v16 + ((v13 >> 3) & 0x1FF8)) |= 1 << v13;
      v17 = *a1;
      v18 = JSC::B3::Air::TmpWidth::requiredWidth(v10, -(int)v13);
      v19 = 16;
      if (v18 == 3)
        v19 = 8;
      if (v18 >= 3)
        v20 = v19;
      else
        v20 = 4;
      v122 = JSC::B3::Air::Code::addStackSlot(v17, v20, 1);
      WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::add<JSC::B3::Air::StackSlot *&>(&v114, &v117, (int *)&v118, &v122, v21, v22, v23, v24);
      ++v12;
      v11 -= 2;
    }
    while (v11);
  }
  v25 = *a1;
  *(_QWORD *)&v114 = v25;
  *((_QWORD *)&v114 + 1) = v116;
  v115 = 8;
  v105 = *(unsigned int *)(v25 + 108);
  if ((_DWORD)v105)
  {
    v26 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v25 + 96) + 8 * v26))
    {
      if (v105 == ++v26)
        goto LABEL_126;
    }
    if ((_DWORD)v105 != (_DWORD)v26)
    {
      LODWORD(v27) = *(_DWORD *)(v25 + 108);
      LODWORD(v28) = v26;
      v108 = this;
      v104 = v25;
      do
      {
        if (v27 <= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x19808FCE8);
        }
        v106 = v28;
        v29 = *(_QWORD *)(*(_QWORD *)(v25 + 96) + 8 * v28);
        v113 = 0;
        v112 = 0;
        if (*(_DWORD *)(v29 + 20))
        {
          v30 = 0;
          do
          {
            v31 = v30;
            v32 = *(_QWORD *)(v29 + 8);
            v33 = (_DWORD *)(v32 + ((unint64_t)v30 << 7));
            v111 = 0;
            v110 = 0;
            v122 = (unsigned int *)&v117;
            v123 = (uint64_t **)v33;
            v124 = (uint64_t)a1;
            v125 = (uint64_t *)((char *)&v111 + 1);
            v126 = (WTF::BitVector *)&v111;
            v127 = (__int128 *)&v110;
            v34 = (__int16 *)(v33 + 30);
            if ((*((__int16 *)v33 + 60) - 446) > 5)
            {
              v35 = v33[3];
              if ((_DWORD)v35)
              {
                v36 = 0;
                v37 = 0;
                v38 = (char *)&JSC::B3::Air::g_formTable
                    + 21 * *((__int16 *)v33 + 60)
                    + ((unint64_t)((v35 - 1) * v35) >> 1);
                v39 = 32 * v35;
                do
                {
                  if (v37 >= v33[3])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19808FCD0);
                  }
                  if ((*v38 >> 5) - 1 >= 5u)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19808FBDCLL);
                  }
                  ++v37;
                  ++v38;
                  v36 += 32;
                }
                while (v39 != v36);
              }
            }
            else
            {
              v119 = (uint64_t)&v118;
              v120[0] = &v122;
              v131[1] = &v118;
              if (*v34 == 448)
              {
                v132[1] = &v118;
                if (!v33[3])
                {
                  __break(0xC471u);
                  JUMPOUT(0x19808FCE0);
                }
                (*(void (**)(_QWORD, _DWORD *, _QWORD *))(***(_QWORD ***)v33 + 16))(**(_QWORD **)v33, v33, v132);
              }
              else
              {
                switch(*v34)
                {
                  case 446:
                    break;
                  case 447:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v33, (uint64_t)v131);
                    break;
                  case 449:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v33, (uint64_t)v131);
                    break;
                  case 450:
                    v132[0] = v131;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v33, (uint64_t)v132);
                    break;
                  case 451:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v33, (uint64_t)v131);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v33 + 30), "\n");
                    __break(0xC471u);
                    JUMPOUT(0x19808FCA8);
                }
              }
            }
            if ((_BYTE)v111 && HIBYTE(v111))
              *v34 = 94;
            if (v110)
            {
              v40 = *v34;
              if ((v40 - 107) >= 2)
              {
                if (v40 == 90 || v40 == 94)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19808FC0CLL);
                }
                __break(0xC471u);
                JUMPOUT(0x19808FC2CLL);
              }
              v41 = *(_DWORD *)(*a1 + 180);
              *(_DWORD *)(*a1 + 180) = v41 + 1;
              LODWORD(v132[0]) = -33 - v41;
              v42 = *(_QWORD *)v108;
              if ((*(_QWORD *)v108 & 0x8000000000000000) != 0)
                v43 = 63;
              else
                v43 = *(_QWORD *)(2 * v42);
              v50 = (v41 + 33);
              if (v43 <= v50)
              {
                WTF::BitVector::resizeOutOfLine(v108, v50 + 1, 0);
                v42 = *(_QWORD *)v108;
              }
              if (v42 >= 0)
                v51 = 2 * v42 + 8;
              else
                v51 = (uint64_t)v108;
              *(_QWORD *)(v51 + ((v50 >> 3) & 0x1FFFFFF8)) |= 1 << v50;
              v52 = v33[3];
              if ((_DWORD)v52 == v33[2])
              {
                WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v33, (unsigned int *)v132, (uint64_t)this, a4, a5, a6, a7, a8);
                v55 = v33[3];
              }
              else
              {
                v53 = *(_QWORD *)v33 + 32 * v52;
                v54 = v132[0];
                *(_QWORD *)v53 = 0;
                *(_WORD *)(v53 + 8) = 513;
                *(_DWORD *)(v53 + 12) = 1;
                *(_QWORD *)(v53 + 16) = v54;
                *(_BYTE *)(v53 + 24) = 0;
                v55 = v33[3] + 1;
                v33[3] = v55;
              }
              if (v55 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x19808FBBCLL);
              }
              v56 = *(_QWORD *)(v32 + (v31 << 7) + 112);
              v118 = v120;
              v121[0] = v56;
              LODWORD(v121[1]) = 0;
              v122 = (unsigned int *)v112;
              v123 = &v125;
              v119 = 3;
              v124 = 3;
              v130[0] = v56;
              *(_DWORD *)((char *)v130 + 7) = *(_DWORD *)((char *)v121 + 7);
              v57 = HIDWORD(v115);
              if (HIDWORD(v115) == (_DWORD)v115)
              {
                v73 = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114 + 8, HIDWORD(v115) + 1, (unint64_t)&v122, a4, a5, a6, a7, a8);
                v74 = HIDWORD(v115);
                v75 = *((_QWORD *)&v114 + 1);
                v76 = *((_QWORD *)&v114 + 1) + 136 * HIDWORD(v115);
                *(_QWORD *)v76 = *(_QWORD *)v73;
                v77 = (_OWORD *)(v76 + 24);
                *(_QWORD *)(v76 + 8) = v76 + 24;
                *(_QWORD *)(v76 + 16) = 3;
                v78 = *(__int128 **)(v73 + 8);
                if (v78 == (__int128 *)(v73 + 24))
                {
                  v79 = *(unsigned int *)(v73 + 20);
                  if ((_DWORD)v79)
                  {
                    v80 = 32 * v79;
                    do
                    {
                      v81 = *v78;
                      v82 = v78[1];
                      v78 += 2;
                      *v77 = v81;
                      v77[1] = v82;
                      v77 += 2;
                      v80 -= 32;
                    }
                    while (v80);
                  }
                }
                else
                {
                  *(_QWORD *)(v73 + 8) = v73 + 24;
                  *(_QWORD *)(v76 + 8) = v78;
                  v84 = *(_DWORD *)(v73 + 16);
                  *(_DWORD *)(v73 + 16) = 3;
                  *(_DWORD *)(v76 + 16) = v84;
                }
                v68 = (_QWORD *)(v73 + 120);
                v83 = *(_DWORD *)(v73 + 20);
                *(_DWORD *)(v73 + 20) = 0;
                *(_DWORD *)(v76 + 20) = v83;
                v67 = v75 + 136 * v74 + 120;
              }
              else
              {
                v58 = *((_QWORD *)&v114 + 1);
                v59 = *((_QWORD *)&v114 + 1) + 136 * HIDWORD(v115);
                *(_QWORD *)v59 = v112;
                v60 = (_OWORD *)(v59 + 24);
                *(_QWORD *)(v59 + 8) = v59 + 24;
                *(_QWORD *)(v59 + 16) = 3;
                v61 = v123;
                if (v123 == &v125)
                {
                  if (HIDWORD(v124))
                  {
                    v62 = 32 * HIDWORD(v124);
                    v63 = &v125;
                    do
                    {
                      v64 = *(_OWORD *)v63;
                      v65 = *((_OWORD *)v63 + 1);
                      v63 += 4;
                      *v60 = v64;
                      v60[1] = v65;
                      v60 += 2;
                      v62 -= 32;
                    }
                    while (v62);
                  }
                }
                else
                {
                  v123 = &v125;
                  *(_QWORD *)(v59 + 8) = v61;
                  v72 = v124;
                  LODWORD(v124) = 3;
                  *(_DWORD *)(v59 + 16) = v72;
                }
                v66 = HIDWORD(v124);
                HIDWORD(v124) = 0;
                *(_DWORD *)(v59 + 20) = v66;
                v67 = v58 + 136 * v57 + 120;
                v68 = v130;
              }
              v69 = *v68;
              *(_DWORD *)(v67 + 7) = *(_DWORD *)((char *)v68 + 7);
              *(_QWORD *)v67 = v69;
              ++HIDWORD(v115);
              v70 = (unint64_t)v123;
              if (&v125 != v123 && v123)
              {
                v123 = 0;
                LODWORD(v124) = 0;
                WTF::fastFree(v70, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
              }
              v71 = (unint64_t)v118;
              if (v120 != v118 && v118)
              {
                v118 = 0;
                LODWORD(v119) = 0;
                WTF::fastFree(v71, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
              }
            }
            else
            {
              v122 = (unsigned int *)&v117;
              v123 = v107;
              v124 = (uint64_t)&v113;
              v125 = a1;
              v126 = v108;
              v127 = &v114;
              v128 = &v112;
              v129 = v33;
              v132[0] = &v122;
              if ((*v34 - 446) > 5)
              {
                v44 = v33[3];
                if ((_DWORD)v44)
                {
                  v45 = 0;
                  v46 = 0;
                  v47 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                      + 21 * *v34
                      + ((unint64_t)((v44 - 1) * v44) >> 1);
                  v48 = 32 * v44;
                  do
                  {
                    if (v46 >= v33[3])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19808FCD8);
                    }
                    v49 = *v47;
                    if ((v49 >> 5) - 1 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19808FCC8);
                    }
                    ++v46;
                    ++v47;
                    v45 += 32;
                  }
                  while (v48 != v45);
                }
              }
              else
              {
                v119 = (uint64_t)&v118;
                v120[0] = v132;
              }
            }
            v30 = v112 + 1;
            v112 = v30;
          }
          while (v30 < *(_DWORD *)(v29 + 20));
        }
        JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v114, (JSC::B3::Air::BasicBlock *)v29, (uint64_t)this, a4, a5, a6, a7, a8);
        if (v113)
        {
          v85 = *(_QWORD *)(v29 + 8);
          v86 = *(unsigned int *)(v29 + 20);
          v87 = v85 + (v86 << 7);
          if ((_DWORD)v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = (unsigned int *)(v85 + (v86 << 7));
            v91 = (unint64_t)v90;
            do
            {
              v92 = (unsigned int *)(v85 + v88);
              if ((*(__int16 *)(v85 + v88 + 120) - 107) <= 6
                && ((1 << (*(_WORD *)(v85 + v88 + 120) - 107)) & 0x43) != 0
                && v92[3] == 2)
              {
                v94 = *(_QWORD *)v92;
                if (*(_BYTE *)(*(_QWORD *)v92 + 8) == 1)
                {
                  v95 = *(_WORD *)(v85 + v88 + 120) != 94 && *(_BYTE *)(v94 + 40) == 1;
                  if (v95 && *(_DWORD *)(v94 + 16) == *(_DWORD *)(v94 + 48))
                  {
                    if (v91 == *(_QWORD *)(v29 + 8) + ((unint64_t)*(unsigned int *)(v29 + 20) << 7))
                    {
                      v91 = v85 + v88;
                    }
                    else if (v92 != v90)
                    {
                      v96 = v91;
                      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v90, v92, v91, a4, a5, a6, a7, a8);
                      v91 = v96 + v85 + v88 - (_QWORD)v90;
                      v94 = *(_QWORD *)(v85 + v88);
                    }
                    if (v85 + v88 + 16 != v94 && v94)
                    {
                      v97 = v85 + v88;
                      *(_QWORD *)v97 = 0;
                      *(_DWORD *)(v97 + 8) = 0;
                      v98 = v91;
                      WTF::fastFree(v94, v92, (uint64_t)this, a4, a5, a6, a7, a8);
                      v91 = v98;
                    }
                    v90 = (unsigned int *)(v85 + v88 + 128);
                    ++v89;
                  }
                }
              }
              v88 += 128;
            }
            while (v85 + v88 < v87);
            v85 = *(_QWORD *)(v29 + 8);
            LODWORD(v86) = *(_DWORD *)(v29 + 20);
            v87 = v91;
          }
          else
          {
            v89 = 0;
            v90 = (unsigned int *)(v85 + (v86 << 7));
          }
          a2 = v85 + ((unint64_t)v86 << 7);
          if (v90 != (unsigned int *)a2)
          {
            WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v90, (unsigned int *)a2, v87, a4, a5, a6, a7, a8);
            LODWORD(v86) = *(_DWORD *)(v29 + 20);
          }
          *(_DWORD *)(v29 + 20) = v86 - v89;
        }
        v28 = (v106 + 1);
        v25 = v104;
        v27 = *(unsigned int *)(v104 + 108);
        if (v27 > v28)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v104 + 96) + 8 * v28))
          {
            if (v27 == ++v28)
            {
              LODWORD(v28) = *(_DWORD *)(v104 + 108);
              break;
            }
          }
        }
      }
      while ((_DWORD)v105 != (_DWORD)v28);
      v99 = (_BYTE *)*((_QWORD *)&v114 + 1);
      if (HIDWORD(v115))
      {
        v100 = 136 * HIDWORD(v115);
        v101 = *((_QWORD *)&v114 + 1) + 24;
        do
        {
          v102 = *(_QWORD *)(v101 - 16);
          if (v101 != v102 && v102 != 0)
          {
            *(_QWORD *)(v101 - 16) = 0;
            *(_DWORD *)(v101 - 8) = 0;
            WTF::fastFree(v102, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
          }
          v101 += 136;
          v100 -= 136;
        }
        while (v100);
        v99 = (_BYTE *)*((_QWORD *)&v114 + 1);
      }
      if (v116 != v99 && v99)
      {
        *((_QWORD *)&v114 + 1) = 0;
        LODWORD(v115) = 0;
        WTF::fastFree((unint64_t)v99, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
      }
    }
  }
LABEL_126:
  if (v117)
    WTF::fastFree(v117 - 16, (void *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::MoveSet::forEachMove<JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::allocate(void)::{lambda(unsigned int &)#1}>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (a2)
  {
    v5 = 4 * a2;
    do
    {
      if (*a1 != -1)
      ++a1;
      v5 -= 4;
    }
    while (v5);
  }
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::MoveSet::forEachLowPriorityMove<JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::allocate(void)::{lambda(unsigned int &)#1}>(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (a2)
  {
    v5 = 4 * a2;
    do
    {
      if (*a1 != -1)
      ++a1;
      v5 -= 4;
    }
    while (v5);
  }
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::makeInitialWorklist(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;

  v9 = a1 + 192;
  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 192, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 208);
  if (v10 < 0)
    *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  else
    bzero((void *)(2 * v10 + 8), (unint64_t)(*(_QWORD *)(2 * v10) + 7) >> 3);
  v11 = *(_DWORD *)(a1 + 12);
  v12 = *(unsigned __int16 *)(a1 + 16) + 1;
  v16 = v12;
  if (*(_DWORD *)(a1 + 76) > (unsigned __int16)v12)
  {
    v13 = (uint64_t *)(a1 + 168);
    do
    {
      if (*v13 >= 0)
        v14 = 2 * *v13 + 8;
      else
        v14 = a1 + 168;
      if (((*(_QWORD *)(v14 + ((v12 >> 3) & 0x1FF8)) >> v12) & 1) == 0
        && !*(_WORD *)(*(_QWORD *)(a1 + 152) + 2 * (unsigned __int16)v12))
      {
        if (v11 <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v12))
        {
        }
        else
        {
          v15 = *(unsigned int *)(a1 + 204);
          if ((_DWORD)v15 == *(_DWORD *)(a1 + 200))
          {
            WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(v9, (unint64_t)&v16);
          }
          else
          {
            *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v15) = v12;
            *(_DWORD *)(a1 + 204) = v15 + 1;
          }
        }
      }
      v12 = v16 + 1;
      v16 = v12;
    }
    while (*(_DWORD *)(a1 + 76) > (unsigned __int16)v12);
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::selectSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, float a11)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;

  v16 = result;
  v13 = *(_QWORD *)(a1 + 208);
  if (v13 >= 0)
    v14 = 2 * v13 + 8;
  else
    v14 = a1 + 208;
  *(_QWORD *)(v14 + (((unint64_t)result >> 3) & 0x1FF8)) &= ~(1 << result);
  v15 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 200))
    return (uint64_t)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(a1 + 192, (unint64_t)&v16);
  *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v15) = result;
  *(_DWORD *)(a1 + 204) = v15 + 1;
  return result;
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::assignColors(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)(a1 + 296) = 0;
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned short,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>,(JSC::B3::Bank)1>::allocate(void)::{lambda(unsigned int &)#1}::operator()(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t *v34;
  uint64_t i;
  unint64_t v36;
  uint64_t v37;
  __int16 v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  uint64_t v46;
  _WORD *v47;
  uint64_t *v48;
  _DWORD *v49;
  _WORD v50[15];
  unsigned __int16 v51;

  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*a1 + 88);
  LOWORD(v7) = *(_WORD *)(v6 + 4 * v5);
  v8 = *(_QWORD *)(*a1 + 152);
  do
  {
    v9 = v7;
    v7 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v7);
  }
  while (v7);
  LOWORD(v6) = *(_WORD *)(v6 + 4 * v5 + 2);
  do
  {
    v10 = v6;
    LODWORD(v6) = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)v6);
  }
  while ((_DWORD)v6);
  v11 = *(unsigned __int16 *)(v4 + 16);
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v11 >= v10)
    v13 = v9;
  else
    v13 = v10;
  if (v12 != v13)
  {
    if (v11 >= v13
      || WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::contains(v4 + 24, v12, v13))
    {
      *a2 = -1;
    }
    else
    {
      {
        return;
      }
      v19 = v13;
      *(_WORD *)(*(_QWORD *)(v4 + 152) + 2 * v13) = v12;
      if (*(_DWORD *)(v4 + 116) <= v13)
      {
        __break(0xC471u);
        goto LABEL_63;
      }
      v20 = *(_QWORD *)(v4 + 104) + 40 * v13;
      v21 = *(unsigned int *)(v20 + 4);
      v22 = (_QWORD *)(v20 + 8);
      if ((_DWORD)v21 != 8)
        v22 = (_QWORD *)*v22;
      v23 = 0;
      v48 = a1;
      v49 = a2;
      while ((_DWORD)v21 != v23)
      {
        v24 = v23;
        v25 = *((_DWORD *)v22 + v23++);
        if (v25 != -1)
        {
          v26 = v24;
          goto LABEL_23;
        }
      }
      v26 = v21;
LABEL_23:
      if ((_DWORD)v21 != (_DWORD)v26)
      {
        v27 = v12;
        v28 = v26 | (v21 << 32);
        while (*(_DWORD *)(v4 + 116) > v12)
        {
          WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v50, (unsigned int *)(*(_QWORD *)(v4 + 104) + 40 * v12), *((_DWORD *)v22 + v28));
          v29 = HIDWORD(v28);
          if ((v26 + 1) > HIDWORD(v28))
            LODWORD(v29) = v26 + 1;
          while (1)
          {
            v30 = (v26 + 1);
            v28 = v28 & 0xFFFFFFFF00000000 | v30;
            if ((_DWORD)v29 - 1 == (_DWORD)v26)
              break;
            LODWORD(v26) = v26 + 1;
            if (*((_DWORD *)v22 + v30) != -1)
              goto LABEL_30;
          }
          LODWORD(v30) = v29;
LABEL_30:
          LODWORD(v26) = v30;
          if ((_DWORD)v21 == (_DWORD)v30)
            goto LABEL_34;
        }
        __break(0xC471u);
LABEL_63:
        JUMPOUT(0x198090338);
      }
      v27 = v12;
LABEL_34:
      v31 = *(_QWORD *)(v4 + 48) + 16 * v19;
      v32 = *(unsigned int *)(v31 + 12);
      if ((_DWORD)v32)
      {
        v33 = *(unsigned __int16 **)v31;
        v34 = (uint64_t *)(v4 + 168);
        for (i = 2 * v32; i; i -= 2)
        {
          v36 = *v33;
          if (*v34 >= 0)
            v37 = 2 * *v34 + 8;
          else
            v37 = v4 + 168;
          if (((*(_QWORD *)(v37 + ((v36 >> 3) & 0x1FF8)) >> v36) & 1) == 0
            && !*(_WORD *)(*(_QWORD *)(v4 + 152) + 2 * v36))
          {
            v50[0] = *v33;
            v51 = v12;
            if (WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>::addAndReturnIsNewEntry(v4 + 24, v36, v12, v14, v15, v16, v17, v18))
            {
              v39 = v12;
              if (*(unsigned __int16 *)(v4 + 16) < v36)
              {
                v40 = *(_QWORD *)(v4 + 48) + 16 * v36;
                v41 = *(unsigned int *)(v40 + 12);
                if ((_DWORD)v41 == *(_DWORD *)(v40 + 8))
                {
                  v45 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v4 + 48) + 16 * v36, v41 + 1, (unint64_t)&v51);
                  v46 = *(unsigned int *)(v40 + 12);
                  *(_WORD *)(*(_QWORD *)v40 + 2 * v46) = *v45;
                  *(_DWORD *)(v40 + 12) = v46 + 1;
                  v39 = v51;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v40 + 2 * v41) = v12;
                  *(_DWORD *)(v40 + 12) = v41 + 1;
                  v39 = v12;
                }
              }
              v42 = *(unsigned __int16 *)(v4 + 16);
              if (v42 < v39)
              {
                v43 = *(_QWORD *)(v4 + 48) + 16 * v39;
                v44 = *(unsigned int *)(v43 + 12);
                if ((_DWORD)v44 == *(_DWORD *)(v43 + 8))
                {
                  v47 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43, v44 + 1, (unint64_t)v50);
                  v44 = *(unsigned int *)(v43 + 12);
                  *(_WORD *)(*(_QWORD *)v43 + 2 * v44) = *v47;
                }
                else
                {
                  *(_WORD *)(*(_QWORD *)v43 + 2 * v44) = v36;
                }
                *(_DWORD *)(v43 + 12) = v44 + 1;
                v42 = *(unsigned __int16 *)(v4 + 16);
              }
              if (v42 >= v12)
                goto LABEL_44;
              v38 = 1;
              v36 = v27;
            }
            else
            {
              v38 = -1;
            }
            *(_WORD *)(*(_QWORD *)(v4 + 64) + 2 * v36) += v38;
          }
LABEL_44:
          ++v33;
        }
      }
      *(_BYTE *)(v4 + 217) = 1;
      *(_BYTE *)v48[1] = 1;
      *v49 = -1;
    }
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::assignRegistersToTmp<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&)::{lambda(JSC::B3::Air::Tmp &)#1}::operator()(uint64_t result, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  char v8;
  int v9;
  int v10;

  if (*a2 <= -33)
  {
    v2 = result;
    v3 = -*a2;
    do
    {
      v4 = (unsigned __int16)v3;
      v3 = *(unsigned __int16 *)(*(_QWORD *)(result + 152) + 2 * (unsigned __int16)v3);
    }
    while (v3);
    if (-(int)v4 >= 0xFFFFFFE0)
    {
      v8 = v4 + 31;
      v9 = (char)-(char)v4;
      v7 = (v4 + 32);
      if ((v8 & 0x60) != 0)
        v7 = v9;
      goto LABEL_9;
    }
    v10 = -(int)v4;
    v5 = *(_BYTE *)(*(_QWORD *)(result + 120) + v4);
    v6 = v5 & 0x7F;
    if (v6 != 127)
    {
      if ((v5 & 0x60) != 0)
        v7 = (char)(31 - v6);
      else
        v7 = v6 + 1;
LABEL_9:
      *a2 = v7;
      return result;
    }
    WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v10);
    WTF::dataLog<char [7]>();
    WTF::dataLog<JSC::B3::Air::Code>(*(JSC::B3::Air::Code **)(v2 + 256));
    result = 1492;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Air::Inst *v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;

  if (a4 == 1 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (int *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 16);
      v12 = **(_QWORD **)result;
      result = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v12, v6);
      v13 = result;
      v14 = v12 ? v12 + 16 * *(unsigned int *)(v12 - 4) : 0;
      if (v14 != result)
      {
        v15 = *(JSC::B3::Air::Inst **)(v10 + 8);
        if (!*((_DWORD *)v15 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980906B0);
        }
        result = JSC::B3::Air::Inst::admitsStack(v15, (unint64_t)(a2 - *(_QWORD *)v15) >> 5);
        v16 = result;
        if ((result & 1) != 0)
          goto LABEL_11;
        v22 = *(uint64_t **)(v10 + 8);
        v23 = *((__int16 *)v22 + 60) - 90;
        if (v23 <= 0x12 && ((1 << v23) & 0x60011) != 0)
        {
          v24 = *((unsigned int *)v22 + 3);
          if (!(_DWORD)v24)
          {
            __break(0xC471u);
            JUMPOUT(0x1980906B8);
          }
          v25 = *v22;
          v26 = ((unint64_t)(a2 - v25) >> 5) ^ 1;
          if (v26 >= v24)
          {
            __break(0xC471u);
            JUMPOUT(0x1980906C0);
          }
          if ((_DWORD)v24 == 2)
          {
            v27 = (_BYTE *)(v25 + 32 * v26);
            if (v27[8] == 9 && *(_BYTE *)(*(_QWORD *)v27 + 4) == 1)
            {
LABEL_11:
              if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
              {
                v17 = *(_QWORD *)(v11 + 40);
                v18 = *v7;
                v20 = *(_QWORD *)(v17 + 24);
                v19 = v17 + 24;
                v21 = 2 * v20 + 8;
                if (v20 >= 0)
                  v19 = v21;
                if (((*(_QWORD *)(v19 + (((unint64_t)-*v7 >> 3) & 0x1FFFFFF8)) >> -(char)v18) & 1) != 0)
                  return result;
              }
              else
              {
                v18 = *v7;
              }
              result = JSC::B3::Air::TmpWidth::requiredWidth(v11 + 8, v18);
              if (a3 - 4 <= 6 && result > a5)
                return result;
              v28 = *(_BYTE **)(v10 + 24);
              if ((_DWORD)result == 2)
              {
                v29 = *v28;
                v30 = *(unsigned int **)(v13 + 8);
                if (v29)
                {
LABEL_34:
                  v31 = 4;
LABEL_35:
                  if (*v30 > v31)
                    v31 = *v30;
                  *v30 = v31;
                  *(_BYTE *)(a2 + 24) = 0;
                  *(_QWORD *)v7 = 0;
                  *(_QWORD *)a2 = v30;
                  *(_WORD *)(a2 + 8) = 521;
                  *(_DWORD *)(a2 + 12) = 0;
                  **(_BYTE **)(v10 + 32) = 1;
                  if ((v16 & 1) == 0)
                    **(_BYTE **)(v10 + 40) = 1;
                  return result;
                }
              }
              else
              {
                *v28 = 0;
                v30 = *(unsigned int **)(v13 + 8);
              }
              if (a5 != 3)
              {
                v31 = 1;
                switch(a5)
                {
                  case 0u:
                    goto LABEL_35;
                  case 1u:
                    v31 = 2;
                    goto LABEL_35;
                  case 2u:
                    goto LABEL_34;
                  case 4u:
                    v31 = 16;
                    goto LABEL_35;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1980906A8);
                }
              }
              v31 = 8;
              goto LABEL_35;
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned short,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int16 v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  _BYTE v44[25];
  WTF *v45;
  uint64_t v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  _BYTE v50[12];
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _OWORD v54[6];
  _QWORD v55[2];

  if (*(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = **(_QWORD **)a1;
      v10 = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v9, *(_DWORD *)(a2 + 16));
      v11 = v10;
      if (v9)
        v12 = v9 + 16 * *(unsigned int *)(v9 - 4);
      else
        v12 = 0;
      if (v12 == v10)
      {
        v22 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v22 + 236))
        {
          v23 = -v5;
          v24 = *(_QWORD *)(v22 + 224);
          do
          {
            v25 = v23;
            v23 = *(unsigned __int16 *)(v24 + 2 * (unsigned __int16)v23);
          }
          while (v23);
          if (v5 + v25)
          {
            *(_DWORD *)(a2 + 16) = -v25;
            **(_BYTE **)(a1 + 16) = 1;
          }
        }
      }
      else
      {
        v13 = JSC::B3::Air::TmpWidth::requiredWidth(v8 + 8, v5);
        if (v13 == 3)
          v20 = 8;
        else
          v20 = 16;
        if (v13 < 3)
          v20 = 4;
        if (v20 == 4)
        {
          v21 = 107;
        }
        else if (v20 == 16)
        {
          v21 = 113;
        }
        else
        {
          v21 = 108;
        }
        v26 = *(_DWORD *)(*(_QWORD *)v8 + 180);
        *(_DWORD *)(*(_QWORD *)v8 + 180) = v26 + 1;
        v27 = (v26 + 33);
        *(_DWORD *)(a2 + 16) = -33 - v26;
        v28 = *(uint64_t **)(a1 + 32);
        v29 = *v28;
        if (*v28 < 0)
          v30 = 63;
        else
          v30 = *(_QWORD *)(2 * v29);
        if (v30 <= v27)
        {
          WTF::BitVector::resizeOutOfLine(*(WTF::BitVector **)(a1 + 32), v27 + 1, 0);
          v29 = *v28;
        }
        if (v29 >= 0)
          v31 = 2 * v29 + 8;
        else
          v31 = (uint64_t)v28;
        *(_QWORD *)(v31 + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
        if (a3 != 10)
        {
          v32 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)&v44[16] = 0;
          v44[24] = 0;
          *(_WORD *)&v44[8] = 521;
          *(_QWORD *)v44 = v32;
          *(_DWORD *)&v44[12] = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            v33 = *(_QWORD *)(a1 + 40);
            v34 = **(unsigned int **)(a1 + 48);
            v35 = *(_DWORD *)(a2 + 16);
            *(_OWORD *)&v47[9] = *(_OWORD *)&v44[9];
            *(_OWORD *)v47 = *(_OWORD *)v44;
            *(_QWORD *)&v48 = 0;
            WORD4(v48) = 513;
            HIDWORD(v48) = 1;
            *(_QWORD *)&v49 = v35;
            BYTE8(v49) = 0;
            v54[0] = *(_OWORD *)v44;
            v54[2] = v48;
            v54[3] = v49;
            v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112);
            v45 = (WTF *)v47;
            *(_QWORD *)v50 = v36;
            *(_DWORD *)&v50[8] = v21;
            v51 = v34;
            v52 = (WTF *)v54;
            v54[1] = *(_OWORD *)&v47[16];
            v46 = 3;
            v53 = 0x200000003;
            v55[0] = v36;
            *(_DWORD *)((char *)v55 + 7) = *(_DWORD *)&v50[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v33, (unint64_t)&v51, v14, v15, v16, v17, v18, v19);
            v42 = v52;
            if (v54 != (_OWORD *)v52 && v52)
            {
              v52 = 0;
              LODWORD(v53) = 0;
              WTF::fastFree((unint64_t)v42, v37, v38, v39, v40, v41, v18, v19);
            }
            v43 = v45;
            if (v47 != (_BYTE *)v45 && v45)
            {
              v45 = 0;
              LODWORD(v46) = 0;
              WTF::fastFree((unint64_t)v43, v37, v38, v39, v40, v41, v18, v19);
            }
          }
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>(*(_QWORD *)(a1 + 40), (**(_DWORD **)(a1 + 48) + 1), v21, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112), *(unsigned int *)(a2 + 16), v44, v18, v19);
        }
      }
    }
  }
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD **v40;
  uint64_t v41;
  _QWORD *v42;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char **v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  _QWORD v73[3];
  _QWORD **v74;
  _QWORD **v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t **v78;
  void *v79;
  void **v80;
  uint64_t ***v81;

  v74 = a3;
  v75 = a2;
  v73[0] = &v75;
  v73[1] = &v74;
  v73[2] = a1;
  v76 = v73;
  if (a2)
  {
    v77 = (uint64_t *)&v76;
    v78 = &v77;
    if ((*((__int16 *)a2 + 60) - 446) > 5)
    {
      v8 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
        v11 = 1;
        do
        {
          if (v9 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198091090);
          }
          v12 = v10[v9];
          if ((v12 >> 5) - 1 >= 5)
            goto LABEL_104;
          if ((v12 & 0xC) == 4 && LOBYTE((*a2)[v11]) == 1)
          {
            v14 = *v77;
            LODWORD(v79) = (*a2)[v11 + 1];
          }
          ++v9;
          v11 += 4;
        }
        while (v8 != v9);
      }
    }
    else
    {
      v79 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v80 = &v79;
      v81 = &v78;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v79);
    }
  }
  if (a3)
  {
    v77 = (uint64_t *)&v76;
    v78 = &v77;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v15 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v15 - 1) * v15) >> 1);
        v18 = 1;
        do
        {
          if (v16 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198091098);
          }
          v19 = v17[v16];
          if ((v19 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198091088);
          }
          v20 = &(*a3)[v18];
          if (*(_BYTE *)v20 == 1 && (v19 & 0xF) - 8 <= 2)
          {
            v21 = *v77;
            LODWORD(v79) = *((_DWORD *)v20 + 2);
          }
          ++v16;
          v18 += 4;
        }
        while (v15 != v16);
      }
    }
    else
    {
      v79 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v80 = &v79;
      v81 = &v78;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v79);
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1980910C8);
    }
    v22 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v24 = v23 | v22;
    if (v23 | v22)
    {
      v25 = v22;
      do
      {
        v26 = __clz(__rbit64(v24));
        v27 = (char)(31 - v26);
        if (v26 < 0x20)
          v27 = v26 + 1;
        LODWORD(v79) = v27;
        v24 &= v24 - 1;
      }
      while (v24);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1980910D0);
    }
    v28 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v30 = v29 | v28;
    if (v29 | v28)
    {
      v31 = v28;
      do
      {
        v32 = __clz(__rbit64(v30));
        v33 = (char)(31 - v32);
        if (v32 < 0x20)
          v33 = v32 + 1;
        LODWORD(v79) = v33;
        v30 &= v30 - 1;
      }
      while (v30);
    }
  }
  v34 = (uint64_t)v75;
  if (!v75)
    goto LABEL_55;
  v35 = *((__int16 *)v75 + 60);
  if ((v35 - 107) > 6 || ((1 << (*((_WORD *)v75 + 60) - 107)) & 0x43) == 0)
    goto LABEL_55;
  if (*((_DWORD *)v75 + 3) != 2)
    goto LABEL_55;
  v37 = (uint64_t)*v75;
  if (*((_BYTE *)*v75 + 8) != 1 || *(_BYTE *)(v37 + 40) != 1)
    goto LABEL_55;
  if (v35 != 94)
    goto LABEL_57;
  v38 = *(_QWORD *)(a1 + 376);
  if (!v38)
  {
LABEL_55:
    v40 = v74;
    v41 = *a4;
    v42 = (_QWORD *)a1;
  }
  v39 = *(unsigned int *)(v37 + 16);
  if ((int)v39 < 1)
  {
    v39 = -(int)v39;
    if (v39 < *(unsigned int *)(v38 + 28))
    {
      v38 += 16;
      goto LABEL_54;
    }
LABEL_104:
    __break(0xC471u);
    JUMPOUT(0x198091068);
  }
  if (v39 >= *(_DWORD *)(v38 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x1980910D8);
  }
LABEL_54:
  if (*(unsigned __int8 *)(*(_QWORD *)v38 + 2 * v39 + 1) > 2u)
    goto LABEL_55;
LABEL_57:
  v44 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v75 + 60);
  v45 = v44[1];
  if ((v45 >> 5) - 1 >= 5 || (v46 = v44[2], (v46 >> 5) - 1 > 4))
  {
    __break(0xC471u);
    JUMPOUT(0x1980910B8);
  }
  v47 = v45 & 0xC;
  v48 = *(_DWORD *)(v37 + 16);
  v49 = v47 == 4;
  if (v47 == 4)
    v50 = 0;
  else
    v50 = *(_DWORD *)(v37 + 16);
  if (!v49)
    v48 = 0;
  v51 = *(_DWORD *)(v37 + 48);
  v52 = v46 & 0xC;
  if (v52 == 4)
    v53 = v50;
  else
    v53 = v51;
  if (v52 != 4)
    v51 = v48;
  v54 = (char **)(a1 + 88);
  v55 = -v51;
  LODWORD(v79) = -v53;
  HIDWORD(v79) = -v51;
  v56 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v56 == *(_DWORD *)(a1 + 96))
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * *(unsigned int *)(a1 + 100)) = *(_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54, v56 + 1, (unint64_t)&v79);
  else
    *(_QWORD *)&(*v54)[8 * v56] = v79;
  ++*(_DWORD *)(a1 + 100);
  v57 = *(_DWORD *)(a1 + 316);
  LODWORD(v79) = v57;
  v58 = (_QWORD *)(a1 + 320);
  v59 = *(unsigned int *)(a1 + 332);
  LODWORD(v73[0]) = v59;
  if ((_DWORD)v59 == *(_DWORD *)(a1 + 328))
    *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * *(unsigned int *)(a1 + 332)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)&v79);
  else
    *(_DWORD *)(*v58 + 4 * v59) = v57;
  v60 = (_QWORD *)(a1 + 304);
  ++*(_DWORD *)(a1 + 332);
  v61 = *(unsigned int *)(a1 + 316);
  if ((_DWORD)v61 == *(_DWORD *)(a1 + 312))
    *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(a1 + 316)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)v73);
  else
    *(_DWORD *)(*v60 + 4 * v61) = v59;
  ++*(_DWORD *)(a1 + 316);
  v62 = *((unsigned int *)v75 + 3);
  if ((_DWORD)v62)
  {
    v63 = 32 * v62;
    v64 = (int *)(*v75 + 2);
    do
    {
      v65 = *v64;
      v64 += 8;
      v66 = -v65;
      if (*(_DWORD *)(a1 + 116) <= -v65)
      {
        __break(0xC471u);
        JUMPOUT(0x1980910C0);
      }
      WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v79, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v66), v56);
      v63 -= 32;
    }
    while (v63);
  }
  v67 = *(unsigned int *)(*a4 + 60);
  if ((_DWORD)v67)
  {
    v68 = *(unsigned int **)(*a4 + 48);
    v69 = 4 * v67;
    do
    {
      if (v53 + *v68)
      ++v68;
      v69 -= 4;
    }
    while (v69);
  }
  v70 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v70)
  {
    v71 = *(_DWORD **)(a1 + 264);
    v72 = 4 * v70;
    do
    {
      if (v53 != *v71)
      ++v71;
      v72 -= 4;
    }
    while (v72);
  }
  v40 = v74;
  v41 = *a4;
  v42 = (_QWORD *)a1;
  v34 = 0;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  _QWORD **v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD **v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD **v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t ****v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t ***v71;
  unsigned int v72;
  uint64_t **v73;
  uint64_t ***v74;
  uint64_t *****v75;

  v5 = (_QWORD **)a2;
  v66[1] = result;
  v67 = a4;
  v66[0] = &v67;
  v70 = v66;
  if (a2)
  {
    v71 = (uint64_t ***)&v70;
    v68 = &v71;
    if ((*(__int16 *)(a2 + 120) - 446) > 5)
    {
      v65 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v65)
      {
        v6 = 0;
        v63 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(a2 + 120)
            + ((unint64_t)((v65 - 1) * v65) >> 1);
        do
        {
          if (v6 >= *((unsigned int *)v5 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198091768);
          }
          v7 = v63[v6];
          if ((v7 >> 5) - 1 >= 5)
            goto LABEL_105;
          v8 = a3;
          v9 = (uint64_t)&(*v5)[4 * v6];
          v10 = (v7 & 0xC) == 4 && *(_BYTE *)(v9 + 8) == 1;
          if (v10 && (v7 & 0x10) != 0)
          {
            v11 = *(_DWORD *)(v9 + 16);
            v12 = (*v71)[1];
            v13 = ***v71;
            v14 = *(unsigned int *)(v13 + 60);
            if ((_DWORD)v14)
            {
              v15 = *(unsigned int **)(v13 + 48);
              v16 = -v11;
              v17 = 4 * v14;
              do
              {
                v18 = *v15;
                v19 = -*v15;
                v20 = v12[47];
                if (v19 < 0 || *v15 == 0)
                {
                  if (v18 >= *(_DWORD *)(v20 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198091778);
                  }
                }
                else if (*(_DWORD *)(v20 + 12) <= v19)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198091748);
                }
                if (v18 != (_DWORD)v16)
                {
                  v72 = *v15;
                  LODWORD(v73) = -v11;
                  if (v18 >= v16)
                    v21 = -v11;
                  else
                    v21 = v18;
                  if (*((_DWORD *)v12 + 9) <= v21)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198091750);
                  }
                  if (v18 <= v16)
                    v22 = -v11;
                  else
                    v22 = v18;
                  result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v12[3] + 24 * v21), v22);
                  *((_DWORD *)v12 + 10) += result;
                  if ((_BYTE)result)
                  {
                    v23 = *((_DWORD *)v12 + 4);
                    if (v23 < v16)
                    {
                      v24 = v12[6] + 16 * v16;
                      v25 = *(unsigned int *)(v24 + 12);
                      if ((_DWORD)v25 == *(_DWORD *)(v24 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v16), v25 + 1, (unint64_t)&v72);
                        *(_DWORD *)(*(_QWORD *)v24 + 4 * *(unsigned int *)(v24 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v24 + 4 * v25) = v18;
                      }
                      ++*(_DWORD *)(v24 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v16);
                      v18 = v72;
                      v23 = *((_DWORD *)v12 + 4);
                    }
                    if (v23 < v18)
                    {
                      v26 = v12[6] + 16 * v18;
                      v27 = *(unsigned int *)(v26 + 12);
                      if ((_DWORD)v27 == *(_DWORD *)(v26 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v18), v27 + 1, (unint64_t)&v73);
                        *(_DWORD *)(*(_QWORD *)v26 + 4 * *(unsigned int *)(v26 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v26 + 4 * v27) = v16;
                      }
                      ++*(_DWORD *)(v26 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v72);
                    }
                  }
                }
                ++v15;
                v17 -= 4;
              }
              while (v17);
            }
            v28 = *((unsigned int *)v12 + 69);
            if ((_DWORD)v28)
            {
              v29 = (int *)v12[33];
              v30 = -v11;
              v31 = 4 * v28;
              do
              {
                v32 = *v29;
                if (*v29 != v11)
                {
                  v33 = -v32;
                  v72 = -v32;
                  LODWORD(v73) = -v11;
                  if (-v32 >= v30)
                    v34 = -v11;
                  else
                    v34 = -v32;
                  if (*((_DWORD *)v12 + 9) <= v34)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198091758);
                  }
                  if (v33 <= v30)
                    v35 = -v11;
                  else
                    v35 = v33;
                  result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v12[3] + 24 * v34), v35);
                  *((_DWORD *)v12 + 10) += result;
                  if ((_BYTE)result)
                  {
                    v36 = *((_DWORD *)v12 + 4);
                    if (v36 < v30)
                    {
                      v37 = v12[6] + 16 * v30;
                      v38 = *(unsigned int *)(v37 + 12);
                      if ((_DWORD)v38 == *(_DWORD *)(v37 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v30), v38 + 1, (unint64_t)&v72);
                        *(_DWORD *)(*(_QWORD *)v37 + 4 * *(unsigned int *)(v37 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v37 + 4 * v38) = v33;
                      }
                      ++*(_DWORD *)(v37 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v30);
                      v33 = v72;
                      v36 = *((_DWORD *)v12 + 4);
                    }
                    if (v36 < v33)
                    {
                      v39 = v12[6] + 16 * v33;
                      v40 = *(unsigned int *)(v39 + 12);
                      if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v33), v40 + 1, (unint64_t)&v73);
                        *(_DWORD *)(*(_QWORD *)v39 + 4 * *(unsigned int *)(v39 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v39 + 4 * v40) = v30;
                      }
                      ++*(_DWORD *)(v39 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v72);
                    }
                  }
                }
                ++v29;
                v31 -= 4;
              }
              while (v31);
            }
          }
          ++v6;
          v5 = (_QWORD **)a2;
          a3 = v8;
        }
        while (v6 != v65);
      }
    }
    else
    {
      v73 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v74 = &v73;
      v75 = &v68;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom(a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v73);
    }
  }
  if (a3)
  {
    v41 = v5;
    v71 = (uint64_t ***)&v70;
    v68 = &v71;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v42 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v42 - 1) * v42) >> 1);
        do
        {
          if (v43 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198091770);
          }
          v45 = v44[v43];
          if ((v45 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198091740);
          }
          v46 = (uint64_t)&(*a3)[4 * v43];
          if (*(_BYTE *)(v46 + 8) == 1 && (v45 & 0xF) - 8 <= 2 && (v45 & 0x10) != 0)
          {
            v47 = *(_DWORD *)(v46 + 16);
            v48 = (uint64_t)(*v71)[1];
            v49 = ***v71;
            v50 = *(unsigned int *)(v49 + 60);
            if ((_DWORD)v50)
            {
              v51 = *(unsigned int **)(v49 + 48);
              v52 = 4 * v50;
              do
              {
                v53 = *v51;
                v54 = -*v51;
                v55 = *(_QWORD *)(v48 + 376);
                if (v54 < 0 || *v51 == 0)
                {
                  if (v53 >= *(_DWORD *)(v55 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198091780);
                  }
                }
                else if (*(_DWORD *)(v55 + 12) <= v54)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198091760);
                }
                ++v51;
                v52 -= 4;
              }
              while (v52);
            }
            v56 = *(unsigned int *)(v48 + 276);
            if ((_DWORD)v56)
            {
              v57 = *(int **)(v48 + 264);
              v58 = -v47;
              v59 = 4 * v56;
              do
              {
                v60 = *v57++;
                v59 -= 4;
              }
              while (v59);
            }
          }
          ++v43;
        }
        while (v43 != v42);
      }
    }
    else
    {
      v73 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v74 = &v73;
      v75 = &v68;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v73);
    }
    v5 = v41;
  }
  v73 = (uint64_t **)v66;
  v74 = (uint64_t ***)&v71;
  if (v5 && *((_WORD *)v5 + 60) == 448)
  {
    LOBYTE(v71) = 4;
    if (!*((_DWORD *)v5 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198091788);
    }
    v68 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v5 + 80))(**v5, v5);
    v69 = v61;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v71) = 8;
    if (*((_DWORD *)a3 + 3))
    {
      v68 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
      v69 = v62;
    }
LABEL_105:
    __break(0xC471u);
    JUMPOUT(0x198091720);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  int v6;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v5 = ****(_QWORD ****)(result + 16);
    v6 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void **v27;
  _QWORD *v28;

  v23 = a4;
  if (a3 == 1)
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = **(_QWORD **)result;
    v6 = **(_QWORD **)(result + 8);
    v22[0] = &v23;
    v22[1] = a2;
    v22[2] = v4;
    if (v5)
    {
      v24 = v22;
      v25 = &v24;
      if ((*(__int16 *)(v5 + 120) - 446) > 5)
      {
        v7 = *(unsigned int *)(v5 + 12);
        if ((_DWORD)v7)
        {
          v8 = 0;
          v9 = (char *)&JSC::B3::Air::g_formTable
             + 21 * *(__int16 *)(v5 + 120)
             + ((unint64_t)((v7 - 1) * v7) >> 1);
          v10 = 8;
          while (1)
          {
            if (v8 >= *(unsigned int *)(v5 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198091A9CLL);
            }
            v11 = v9[v8];
            v12 = (v11 >> 5) - 1;
            if (v12 >= 5)
              break;
            v13 = *(_QWORD *)v5 + v10;
            if ((v11 & 0xC) == 4 && *(_BYTE *)v13 == 1 && (v11 & 0x10) != 0)
            {
              result = v24[2];
              if (((0xFu >> v12) & 1) == 0 || !*(_BYTE *)*v24)
            }
            ++v8;
            v10 += 32;
            if (v7 == v8)
              goto LABEL_19;
          }
LABEL_37:
          __break(0xC471u);
          JUMPOUT(0x198091A74);
        }
      }
      else
      {
        v26 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v27 = &v26;
        v28 = &v25;
        result = JSC::B3::Air::Inst::forEachArgCustom(v5, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v26);
      }
    }
LABEL_19:
    if (v6)
    {
      v24 = v22;
      v25 = &v24;
      if ((*(__int16 *)(v6 + 120) - 446) <= 5)
      {
        v26 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v27 = &v26;
        v28 = &v25;
        return JSC::B3::Air::Inst::forEachArgCustom(v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v26);
      }
      v15 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v6 + 120)
            + ((unint64_t)((v15 - 1) * v15) >> 1);
        v18 = 8;
        while (v16 < *(unsigned int *)(v6 + 12))
        {
          v19 = v17[v16];
          v20 = (v19 >> 5) - 1;
          if (v20 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198091A94);
          }
          v21 = *(_QWORD *)v6 + v18;
          if (*(_BYTE *)v21 == 1 && (v19 & 0xF) - 8 <= 2 && (v19 & 0x10) != 0)
          {
            result = v24[2];
            if (((0xFu >> v20) & 1) == 0 || !*(_BYTE *)*v24)
          }
          ++v16;
          v18 += 32;
          if (v15 == v16)
            return result;
        }
        goto LABEL_37;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && a4 == 1)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v5 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      if (v5 >= 0x20)
      {
        v6 = (char)(31 - v5);
        v7 = (uint64_t)(*a2)[1];
        v8 = ***a2;
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v10 = *(unsigned int **)(v8 + 48);
          v11 = 4 * v9;
          if (((1 << v5) & *v4) != 0)
          {
            while (1)
            {
              v12 = *v10;
              v13 = -*v10;
              v14 = *(_QWORD *)(v7 + 376);
              if (v13 < 0 || *v10 == 0)
              {
                if (v12 >= *(_DWORD *)(v14 + 28))
                  goto LABEL_26;
              }
              else if (*(_DWORD *)(v14 + 12) <= v13)
              {
                goto LABEL_26;
              }
              ++v10;
              v11 -= 4;
              if (!v11)
                goto LABEL_21;
            }
          }
          do
          {
            v15 = -*v10;
            v16 = *(_QWORD *)(v7 + 376);
            if ((int)v15 < 1)
            {
              v15 = *v10;
              if (v15 >= *(unsigned int *)(v16 + 28))
                goto LABEL_26;
              v16 += 16;
            }
            else if (*(_DWORD *)(v16 + 12) <= v15)
            {
LABEL_26:
              __break(0xC471u);
              JUMPOUT(0x198091D54);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v16 + 2 * v15) >= 4u)
            ++v10;
            v11 -= 4;
          }
          while (v11);
        }
LABEL_21:
        v17 = *(unsigned int *)(v7 + 276);
        if ((_DWORD)v17)
        {
          v18 = *(int **)(v7 + 264);
          v19 = -v6;
          v20 = 4 * v17;
          do
          {
            v21 = *v18++;
            v20 -= 4;
          }
          while (v20);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v4 = (a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1;
  if (v4 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v7 = ******(_QWORD ******)(result + 16);
    v8 = *(unsigned int *)(v7 + 60);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned int **)(v7 + 48);
      v10 = 4 * v8;
      do
      {
        v11 = *v9;
        v12 = -*v9;
        v13 = *(_QWORD *)(v6 + 376);
        if (v12 < 0 || *v9 == 0)
        {
          if (v11 >= *(_DWORD *)(v13 + 28))
          {
LABEL_19:
            __break(0xC471u);
            JUMPOUT(0x198091E0CLL);
          }
        }
        else if (*(_DWORD *)(v13 + 12) <= v12)
        {
          goto LABEL_19;
        }
        ++v9;
        v10 -= 4;
      }
      while (v10);
    }
    v14 = *(unsigned int *)(v6 + 276);
    if ((_DWORD)v14)
    {
      v15 = *(int **)(v6 + 264);
      v16 = -v5;
      v17 = 4 * v14;
      do
      {
        v18 = *v15++;
        v17 -= 4;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_3IRCENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && a4 == 1)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v6 = ******(_QWORD ******)(result + 16);
    v7 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int **)(v6 + 48);
      v9 = 4 * v7;
      do
      {
        v10 = *v8;
        v11 = -*v8;
        v12 = *(_QWORD *)(v5 + 376);
        if (v11 < 0 || *v8 == 0)
        {
          if (v10 >= *(_DWORD *)(v12 + 28))
          {
LABEL_16:
            __break(0xC471u);
            JUMPOUT(0x198091F0CLL);
          }
        }
        else if (*(_DWORD *)(v12 + 12) <= v11)
        {
          goto LABEL_16;
        }
        ++v8;
        v9 -= 4;
      }
      while (v9);
    }
    v13 = *(unsigned int *)(v5 + 276);
    if ((_DWORD)v13)
    {
      v14 = *(int **)(v5 + 264);
      v15 = -v4;
      v16 = 4 * v13;
      do
      {
        v17 = *v14++;
        v16 -= 4;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)1>::canBeSafelyCoalesced(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  __int32 *v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int32 *v43;
  unint64_t v44;
  char v45;
  __int32 __s[66];

  v4 = result;
  if (*(_DWORD *)(result + 16) >= a2)
  {
    v9 = *(_QWORD *)(result + 48) + 16 * a3;
    v10 = *(unsigned int *)(v9 + 12);
    if (!(_DWORD)v10)
      goto LABEL_71;
    v11 = *(unsigned int **)v9;
    v12 = (uint64_t *)(result + 168);
    v13 = 4 * v10;
    while (1)
    {
      v14 = *v11;
      if (*(_DWORD *)(v4 + 16) < v14)
      {
        v15 = *v12 >= 0 ? 2 * *v12 + 8 : v4 + 168;
        if (((*(_QWORD *)(v15 + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) == 0
          && !*(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v14)
          && *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * v14) >= *(_DWORD *)(v4 + 12))
        {
          v16 = v14 >= a2 ? a2 : *v11;
          v17 = v14 <= a2 ? a2 : *v11;
          if (!WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains(v4 + 24, v16, v17))goto LABEL_34;
        }
      }
      ++v11;
      v13 -= 4;
      if (!v13)
        goto LABEL_71;
    }
  }
  v5 = *(uint64_t **)(result + 240);
  v6 = *v5;
  v7 = (unint64_t *)(2 * *v5);
  if (*v5 < 0)
    v8 = 63;
  else
    v8 = *v7;
  if (v8 <= a2)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v18 = v7 + 1;
    if (v6 < 0)
      v18 = *(_QWORD **)(result + 240);
    v19 = (*(_QWORD *)((char *)v18 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1;
  }
  if (v6 < 0)
    v20 = 63;
  else
    v20 = *v7;
  if (v20 <= a3)
  {
    if ((v19 & 1) == 0)
      goto LABEL_37;
LABEL_34:
    v22 = 0;
    return v22 & 1;
  }
  v21 = (uint64_t *)(v7 + 1);
  if (v6 >= 0)
    v5 = v21;
  if (((v19 ^ (*(unint64_t *)((char *)v5 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3)) & 1) != 0)
    goto LABEL_34;
LABEL_37:
  v23 = *(unsigned int *)(result + 12);
  if (v23 >= 0x41)
  {
    result = 221;
    __break(0xC471u);
LABEL_77:
    __break(1u);
    return result;
  }
  v24 = *(_QWORD *)(result + 48);
  v25 = (unsigned int **)(v24 + 16 * a2);
  v26 = v24 + 16 * a3;
  v27 = *((unsigned int *)v25 + 3);
  v28 = *(unsigned int *)(v26 + 12);
  v29 = v28 + v27;
  if (v23 > (int)v28 + (int)v27)
    goto LABEL_71;
  v30 = 0;
  if ((_DWORD)v27)
  {
    v31 = *v25;
    v32 = result + 168;
    v33 = *(_QWORD *)(result + 168);
    if (v33 >= 0)
      v32 = 2 * v33 + 8;
    for (i = 4 * v27; i; i -= 4)
    {
      v35 = *v31;
      --v29;
      if (((*(_QWORD *)(v32 + ((v35 >> 3) & 0x1FFFFFF8)) >> v35) & 1) != 0
        || *(_DWORD *)(*(_QWORD *)(result + 152) + 4 * v35)
        || *(_DWORD *)(*(_QWORD *)(result + 64) + 4 * v35) < v23)
      {
        if (v30 + v29 < v23)
          goto LABEL_71;
      }
      else
      {
        if (v30 >= 0x40)
          goto LABEL_77;
        __s[v30++] = v35;
        if (v30 >= v23)
          goto LABEL_34;
      }
      ++v31;
    }
  }
  if (!(_DWORD)v28)
  {
LABEL_71:
    v22 = 1;
    return v22 & 1;
  }
  v36 = *(__int32 **)v26;
  v37 = (uint64_t *)(result + 168);
  v38 = 4 * v28;
  v39 = v29 - 1;
  v40 = v30;
  while (1)
  {
    v41 = *v36;
    v42 = *v37 >= 0 ? 2 * *v37 + 8 : v4 + 168;
    if (((*(_QWORD *)(v42 + ((v41 >> 3) & 0x1FFFFFF8)) >> v41) & 1) == 0
      && !*(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v41)
      && *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * v41) >= v23)
    {
      break;
    }
LABEL_68:
    v44 = v40 + v39;
    if (v44 < v23)
    {
      v45 = 0;
      LOBYTE(v44) = 1;
      goto LABEL_74;
    }
LABEL_69:
    ++v36;
    --v39;
    v38 -= 4;
    if (!v38)
    {
      v45 = 1;
      goto LABEL_74;
    }
  }
  result = (uint64_t)wmemchr(__s, *v36, v30);
  if (result)
    v43 = (__int32 *)result;
  else
    v43 = &__s[v30];
  if (v30 != v43 - __s)
  {
    LODWORD(v23) = *(_DWORD *)(v4 + 12);
    goto LABEL_68;
  }
  if (v40 >= 0x40)
    goto LABEL_77;
  LOBYTE(v44) = v40 + 1;
  __s[v40] = v41;
  v23 = *(unsigned int *)(v4 + 12);
  if (v40 + 1 < v23)
  {
    ++v40;
    goto LABEL_69;
  }
  v45 = 0;
  LOBYTE(v44) = 0;
LABEL_74:
  v22 = v45 | v44;
  return v22 & 1;
}

unint64_t JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)1>::selectSpill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  float v31;
  unint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t *v50;
  float v51;
  uint64_t v52;
  float v53;
  float v54;
  uint64_t v55;
  unint64_t v56;

  if (!*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 1;
    if (*(_BYTE *)(a1 + 217))
      WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 224), (const void **)(a1 + 152), a3, a4, a5, a6, a7, a8);
  }
  v9 = *(_QWORD *)(a1 + 208);
  v10 = (uint64_t *)(2 * v9);
  if ((v9 & 0x8000000000000000) != 0)
  {
    v44 = __clz(__rbit64(v9));
    v11 = 63;
    if (v44 >= 0x3F)
      result = 63;
    else
      result = v44;
  }
  else
  {
    v11 = *v10;
    v12 = *v10 + 63;
    if (v12 < 0x40)
      goto LABEL_73;
    v13 = *(_QWORD *)(2 * v9 + 8);
    if (v13 && (v14 = __clz(__rbit64(v13)), v14 < 0x40))
    {
      v15 = 0;
    }
    else
    {
      v41 = (v12 >> 6) - 1;
      if (!v41)
        goto LABEL_73;
      v42 = 0;
      while (1)
      {
        v43 = *(_QWORD *)(2 * v9 + 0x10 + 8 * v42);
        if (v43)
        {
          v14 = __clz(__rbit64(v43));
          if (v14 <= 0x3F)
            break;
        }
        if (v41 == ++v42)
          goto LABEL_73;
      }
      v15 = v42 + 1;
    }
    result = v14 + (v15 << 6);
  }
  if (result == v11)
    goto LABEL_73;
  v17 = *(uint64_t **)(a1 + 240);
  v18 = (_QWORD *)(2 * *v17);
  v19 = *v17 < 0 ? 63 : *v18;
  if (v19 > result)
  {
    v20 = v18 + 1;
    if (*v17 >= 0)
      v17 = v20;
    if (((*(unint64_t *)((char *)v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) != 0)
    {
LABEL_73:
      __break(0xC471u);
      JUMPOUT(0x198092514);
    }
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    if (result != 63)
    {
      v45 = *(_QWORD *)(a1 + 248);
      v46 = *(unsigned int **)(v45 + 8);
      v49 = *v46;
      v47 = v46 + 1;
      v48 = v49;
      v50 = (uint64_t *)(v45 + 24);
      v51 = 0.0;
      v52 = result;
      while (1)
      {
        if (v48 <= v52)
        {
LABEL_72:
          __break(0xC471u);
          JUMPOUT(0x19809260CLL);
        }
        v53 = *(float *)&v47[v52];
        if (v53 == 0.0)
          break;
        v54 = (float)*(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v52) / v53;
        if (*v50 >= 0)
          v55 = 2 * *v50 + 8;
        else
          v55 = (uint64_t)v50;
        if (((*(_QWORD *)(v55 + (((unint64_t)v52 >> 3) & 0x1FFFFFF8)) >> v52) & 1) != 0)
          v54 = v54 + v54;
        if (v54 <= v51)
        {
          result = result;
        }
        else
        {
          v51 = v54;
          result = v52;
        }
        v56 = __clz(__rbit64(v9 >> (v52 + 1))) + v52 + 1;
        if (v56 >= 0x3F)
          v52 = 63;
        else
          v52 = v56;
        if (v56 > 0x3E)
          return result;
      }
      return v52;
    }
  }
  else
  {
    v21 = *v10;
    if (result != *v10)
    {
      v22 = v10 + 1;
      v23 = *(_QWORD *)(a1 + 248);
      v24 = *(unsigned int **)(v23 + 8);
      v27 = *v24;
      v25 = v24 + 1;
      v26 = v27;
      v28 = (uint64_t *)(v23 + 24);
      v29 = (unint64_t)(v21 + 63) >> 6;
      v30 = v10 + 2;
      v31 = 0.0;
      v32 = result;
      while (1)
      {
        if (v26 <= v32)
          goto LABEL_72;
        v33 = *(float *)&v25[v32];
        if (v33 == 0.0)
          return v32;
        v34 = (float)*(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v32) / v33;
        if (*v28 >= 0)
          v35 = 2 * *v28 + 8;
        else
          v35 = (uint64_t)v28;
        if (((*(_QWORD *)(v35 + (((unint64_t)v32 >> 3) & 0x1FFFFFF8)) >> v32) & 1) != 0)
          v34 = v34 + v34;
        if (v34 <= v31)
        {
          result = result;
        }
        else
        {
          v31 = v34;
          result = v32;
        }
        v36 = v32 + 1;
        v37 = (v32 + 1) >> 6;
        if (v37 >= v29)
          return result;
        v38 = v22[v37];
        if (!v38 || (v39 = __clz(__rbit64(v38 >> v36)) + (v36 & 0x3F), v39 >= 0x40))
        {
          if (v37 + 1 == v29)
            return result;
          while (1)
          {
            v40 = v30[v37];
            if (v40)
            {
              v39 = __clz(__rbit64(v40));
              if (v39 < 0x40)
                break;
            }
            if (v29 - 1 == ++v37)
              return result;
          }
          ++v37;
        }
        v32 = v39 + (v37 << 6);
        if (v32 == v21)
          return result;
      }
    }
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::AbstractColoringAllocator<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)1>::assignColors(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  char v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  int *v53;
  int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  WTF *v65;
  WTF **v66;
  unsigned int v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  _DWORD *v90;
  int v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  char v114;
  WTF *v115;
  uint64_t v116;
  _BYTE v117[16];
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  WTF *v121[2];
  __int128 v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 32))
  {
    v9 = *(unsigned int *)(a1 + 36);
    v10 = *(_QWORD *)(a1 + 24);
    if ((_DWORD)v9)
    {
      v11 = 24 * v9;
      while (1)
      {
        if (*(_DWORD *)(v10 + 8) == -1)
        {
          if (*(_QWORD *)v10)
          {
            v12 = *(_QWORD *)v10 - 16;
            goto LABEL_9;
          }
        }
        else if ((*(_QWORD *)v10 & 0x8000000000000000) == 0)
        {
          v12 = 2 * *(_QWORD *)v10;
LABEL_9:
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
        v10 += 24;
        v11 -= 24;
        if (!v11)
        {
          *(_DWORD *)(a1 + 36) = 0;
          v10 = *(_QWORD *)(a1 + 24);
          break;
        }
      }
    }
    if (v10)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 40) = 0;
  WTF::Vector<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 104, v13, v14, v15, v16, v17, v18, v19);
  if (*(_DWORD *)(a1 + 200))
  {
    if (*(_DWORD *)(a1 + 204))
      *(_DWORD *)(a1 + 204) = 0;
    v27 = *(_QWORD *)(a1 + 192);
    if (v27)
    {
      *(_QWORD *)(a1 + 192) = 0;
      *(_DWORD *)(a1 + 200) = 0;
      WTF::fastFree(v27, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  v28 = *(_QWORD *)(a1 + 208);
  if (v28 < 0)
    *(_QWORD *)(a1 + 208) = 0x8000000000000000;
  else
    bzero((void *)(2 * v28 + 8), (unint64_t)(*(_QWORD *)(2 * v28) + 7) >> 3);
  v29 = (unint64_t *)(a1 + 120);
  v30 = *(unsigned int *)(a1 + 60);
  v31 = *(unsigned int *)(a1 + 132);
  if (v31 < v30)
  {
    v32 = *(unsigned int *)(a1 + 128);
    v33 = *(_QWORD *)(a1 + 120);
    if (v32 < v30)
    {
      v34 = v32 + (v32 >> 2);
      if (v34 >= 0x10)
        v35 = v34 + 1;
      else
        v35 = 16;
      if (v35 <= v30)
        v36 = *(unsigned int *)(a1 + 60);
      else
        v36 = v35;
      if (HIDWORD(v36))
      {
        __break(0xC471u);
        goto LABEL_167;
      }
      v37 = (_BYTE *)WTF::fastMalloc((WTF *)v36);
      *(_DWORD *)(a1 + 128) = v36;
      *(_QWORD *)(a1 + 120) = v37;
      if ((_DWORD)v31)
      {
        v38 = (char *)v33;
        do
        {
          v39 = *v38++;
          *v37++ = v39;
          --v31;
        }
        while (v31);
        v37 = (_BYTE *)*v29;
      }
      if (!v33)
      {
        v33 = (unint64_t)v37;
        if (!v37)
          goto LABEL_45;
LABEL_42:
        v40 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v40 != (_DWORD)v30)
        {
          v41 = (_BYTE *)(v33 + v40);
          v42 = v30 - v40;
          do
          {
            *v41++ |= 0x7Fu;
            --v42;
          }
          while (v42);
        }
        goto LABEL_45;
      }
      if (v37 == (_BYTE *)v33)
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 128) = 0;
      }
      WTF::fastFree(v33, v20, v21, v22, v23, v24, v25, v26);
      v33 = *v29;
    }
    if (!v33)
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_45:
  *(_DWORD *)(a1 + 132) = v30;
  v115 = (WTF *)v117;
  v116 = 4;
  v44 = (uint64_t *)(a1 + 80);
  v43 = *(_QWORD *)(a1 + 80);
  if (v43)
  {
    v45 = *(unsigned int *)(v43 - 4);
    v46 = (_DWORD *)(v43 + 48 * v45);
    if (*(_DWORD *)(v43 - 12))
    {
      v47 = *(_DWORD **)(a1 + 80);
      if ((_DWORD)v45)
      {
        v48 = 48 * v45;
        v47 = *(_DWORD **)(a1 + 80);
        while (*v47 >= 0xFFFFFFFE)
        {
          v47 += 12;
          v48 -= 48;
          if (!v48)
          {
            v47 = v46;
            goto LABEL_52;
          }
        }
      }
      goto LABEL_52;
    }
    v47 = (_DWORD *)(v43 + 48 * v45);
  }
  else
  {
    v47 = 0;
    LODWORD(v45) = 0;
  }
  v46 = (_DWORD *)(v43 + 48 * v45);
  if (!v43)
  {
    v49 = 0;
    goto LABEL_57;
  }
LABEL_52:
  v49 = (_DWORD *)(v43 + 48 * *(unsigned int *)(v43 - 4));
LABEL_57:
  if (v49 != v47)
  {
    do
    {
      LODWORD(v121[0]) = 0;
      LODWORD(v121[0]) = *v47;
      v50 = LODWORD(v121[0]);
      do
      {
        v51 = v50;
        v50 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v50);
      }
      while ((_DWORD)v50);
      if (LODWORD(v121[0]) != v51)
      {
        if (HIDWORD(v116) == (_DWORD)v116)
        {
          WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v115, (unint64_t)v121);
        }
        else
        {
          *((_DWORD *)v115 + HIDWORD(v116)) = v121[0];
          ++HIDWORD(v116);
        }
      }
      v52 = v47 + 12;
      v47 = v46;
      if (v52 != v46)
      {
        v47 = v52;
        while (*v47 >= 0xFFFFFFFE)
        {
          v47 += 12;
          if (v47 == v46)
          {
            v47 = v46;
            break;
          }
        }
      }
    }
    while (v47 != v49);
    v53 = (int *)v115;
    if (HIDWORD(v116))
    {
      v54 = (int *)((char *)v115 + 4 * HIDWORD(v116));
      v111 = v54;
      do
      {
        v55 = *v53;
        WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::take((uint64_t)v121, v44, *v53);
        do
        {
          v60 = v55;
          v55 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v55);
        }
        while (v55);
        v112 = v60;
        v118 = 0x800000000;
        *(_QWORD *)&v61 = -1;
        *((_QWORD *)&v61 + 1) = -1;
        v119 = v61;
        v120 = v61;
        WTF::HashMap<unsigned int,WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>,WTF::HashTableTraits>::add<WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>>((uint64_t)&v113, v44, &v112, (uint64_t)&v118, v56, v57, v58, v59);
        if (HIDWORD(v118) != 8)
          WTF::fastFree(v119, v20, v21, v22, v23, v24, v25, v26);
        v62 = v113 + 8;
        if (v114)
        {
          if (*(_DWORD *)(v113 + 12) != 8)
            WTF::fastFree(*(_QWORD *)(v113 + 16), v20, v21, v22, v23, v24, v25, v26);
          *(_OWORD *)v62 = *(_OWORD *)v121;
          *(_OWORD *)(v62 + 16) = v122;
          *(_QWORD *)(v62 + 32) = v123;
        }
        else
        {
          v63 = 0;
          v64 = HIDWORD(v121[0]);
          v65 = v121[1];
          if (HIDWORD(v121[0]) == 8)
            v66 = &v121[1];
          else
            v66 = (WTF **)v121[1];
          while (HIDWORD(v121[0]) != v63)
          {
            v67 = v63;
            v68 = *((_DWORD *)v66 + v63++);
            if (v68 != -1)
            {
              v69 = v44;
              v70 = v67;
              goto LABEL_87;
            }
          }
          v69 = v44;
          v70 = HIDWORD(v121[0]);
LABEL_87:
          if (HIDWORD(v121[0]) != (_DWORD)v70)
          {
            v71 = v70 | ((unint64_t)HIDWORD(v121[0]) << 32);
            do
            {
              WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v118, (unsigned int *)v62, *((_DWORD *)v66 + v71));
              v72 = HIDWORD(v71);
              if ((v70 + 1) > HIDWORD(v71))
                LODWORD(v72) = v70 + 1;
              v73 = v70;
              while (1)
              {
                v70 = (v73 + 1);
                v71 = v71 & 0xFFFFFFFF00000000 | v70;
                if ((_DWORD)v72 - 1 == v73)
                  break;
                ++v73;
                if (*((_DWORD *)v66 + v70) != -1)
                  goto LABEL_98;
              }
              LODWORD(v70) = v72;
LABEL_98:
              ;
            }
            while (v64 != (_DWORD)v70);
          }
          v74 = v64 == 8;
          v44 = v69;
          v54 = v111;
          if (!v74)
            WTF::fastFree((unint64_t)v65, v20, v21, v22, v23, v24, v25, v26);
        }
        ++v53;
      }
      while (v53 != v54);
      v53 = (int *)v115;
      v29 = (unint64_t *)(a1 + 120);
    }
    v74 = v117 == (_BYTE *)v53 || v53 == 0;
    if (!v74)
    {
      v115 = 0;
      LODWORD(v116) = 0;
      WTF::fastFree((unint64_t)v53, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  v75 = *(_DWORD *)(a1 + 188);
  if (!v75)
  {
LABEL_160:
    if (*(_DWORD *)(a1 + 184))
    {
      v110 = *(_QWORD *)(a1 + 176);
      if (v110)
      {
        *(_QWORD *)(a1 + 176) = 0;
        *(_DWORD *)(a1 + 184) = 0;
        WTF::fastFree(v110, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    if (*(_DWORD *)(a1 + 148))
      WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)v29, v20, v21, v22, v23, v24, v25, v26);
    else
    return;
  }
  while (1)
  {
    LODWORD(v121[0]) = 0;
    v76 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 4 * v75 - 4);
    *(_DWORD *)(a1 + 188) = v75 - 1;
    LODWORD(v121[0]) = v76;
    v77 = *(_QWORD *)(a1 + 48) + 16 * v76;
    v78 = *(unsigned int *)(v77 + 12);
    if ((_DWORD)v78)
    {
      v79 = 0;
      v80 = *(unsigned int **)v77;
      v81 = &v80[v78];
      do
      {
        v82 = *v80;
        do
        {
          v83 = v82;
          v82 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v82);
        }
        while ((_DWORD)v82);
        v84 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v83);
        if ((~v84 & 0x7F) != 0)
        {
          if ((v84 & 0x40) != 0)
            goto LABEL_167;
          v79 |= 1 << v84;
        }
        ++v80;
      }
      while (v80 != v81);
    }
    else
    {
      v79 = 0;
    }
    v85 = *v44;
    if (*v44)
    {
      v86 = *(_DWORD *)(v85 - 8);
      v87 = 9 * ((v76 + ~((_DWORD)v76 << 15)) ^ ((v76 + ~((_DWORD)v76 << 15)) >> 10));
      v88 = (v87 ^ (v87 >> 6)) + ~((v87 ^ (v87 >> 6)) << 11);
      v89 = v86 & (v88 ^ HIWORD(v88));
      v90 = (_DWORD *)(v85 + 48 * v89);
      v91 = *v90;
      if (*v90 != (_DWORD)v76)
      {
        v92 = 1;
        while (v91 != -1)
        {
          v89 = (v89 + v92) & v86;
          v90 = (_DWORD *)(v85 + 48 * v89);
          v91 = *v90;
          ++v92;
          if (*v90 == (_DWORD)v76)
            goto LABEL_125;
        }
        v90 = (_DWORD *)(v85 + 48 * *(unsigned int *)(v85 - 4));
      }
LABEL_125:
      if (v90 != (_DWORD *)(v85 + 48 * *(unsigned int *)(v85 - 4)))
      {
        v93 = v90[3];
        v94 = v90 + 4;
        if ((_DWORD)v93 != 8)
          v94 = (_QWORD *)*v94;
        v95 = 0;
        while ((_DWORD)v93 != v95)
        {
          v96 = v95;
          v97 = *((_DWORD *)v94 + v95++);
          if (v97 != -1)
          {
            v98 = v96;
            goto LABEL_132;
          }
        }
        v98 = v93;
LABEL_132:
        if ((_DWORD)v93 != (_DWORD)v98)
        {
          v102 = v98 | (v93 << 32);
          v103 = *(_QWORD *)(a1 + 120);
          while (1)
          {
            v104 = *((unsigned int *)v94 + v102);
            do
            {
              v105 = v104;
              v104 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v104);
            }
            while ((_DWORD)v104);
            v106 = *(_BYTE *)(v103 + v105);
            v107 = v106 & 0x7F;
            if (v107 != 127)
            {
              if (v107 >= 0x40)
                goto LABEL_167;
              if (((v79 >> v107) & 1) == 0)
                break;
            }
            v108 = HIDWORD(v102);
            if ((v98 + 1) > HIDWORD(v102))
              LODWORD(v108) = v98 + 1;
            while (1)
            {
              v109 = (v98 + 1);
              v102 = v102 & 0xFFFFFFFF00000000 | v109;
              if ((_DWORD)v108 - 1 == (_DWORD)v98)
                break;
              v20 = (void *)*((unsigned int *)v94 + v109);
              LODWORD(v98) = v98 + 1;
              if ((_DWORD)v20 != -1)
                goto LABEL_151;
            }
            LODWORD(v109) = v108;
LABEL_151:
            LODWORD(v98) = v109;
            if ((_DWORD)v93 == (_DWORD)v109)
              goto LABEL_133;
          }
          *(_BYTE *)(v103 + v76) = v106;
          goto LABEL_156;
        }
      }
    }
LABEL_133:
    v99 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v99)
      break;
LABEL_138:
    v101 = *(unsigned int *)(a1 + 148);
    if ((_DWORD)v101 == *(_DWORD *)(a1 + 144))
      *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * *(unsigned int *)(a1 + 148)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 136, v101 + 1, (unint64_t)v121);
    else
      *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v101) = v76;
    ++*(_DWORD *)(a1 + 148);
LABEL_156:
    v75 = *(_DWORD *)(a1 + 188);
    if (!v75)
      goto LABEL_160;
  }
  v100 = *(_BYTE **)a1;
  while ((*v100 & 0x7Fu) < 0x40)
  {
    if (((v79 >> (*v100 & 0x7F)) & 1) == 0)
    {
      *(_BYTE *)(*v29 + v76) = *v100;
      goto LABEL_156;
    }
    ++v100;
    if (!--v99)
      goto LABEL_138;
  }
LABEL_167:
  __break(1u);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Air::Inst *v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;

  if (a4 == 1 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (int *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 16);
      v12 = **(_QWORD **)result;
      result = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v12, v6);
      v13 = result;
      v14 = v12 ? v12 + 16 * *(unsigned int *)(v12 - 4) : 0;
      if (v14 != result)
      {
        v15 = *(JSC::B3::Air::Inst **)(v10 + 8);
        if (!*((_DWORD *)v15 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980930C8);
        }
        result = JSC::B3::Air::Inst::admitsStack(v15, (unint64_t)(a2 - *(_QWORD *)v15) >> 5);
        v16 = result;
        if ((result & 1) != 0)
          goto LABEL_11;
        v22 = *(uint64_t **)(v10 + 8);
        v23 = *((__int16 *)v22 + 60) - 90;
        if (v23 <= 0x12 && ((1 << v23) & 0x60011) != 0)
        {
          v24 = *((unsigned int *)v22 + 3);
          if (!(_DWORD)v24)
          {
            __break(0xC471u);
            JUMPOUT(0x1980930D0);
          }
          v25 = *v22;
          v26 = ((unint64_t)(a2 - v25) >> 5) ^ 1;
          if (v26 >= v24)
          {
            __break(0xC471u);
            JUMPOUT(0x1980930D8);
          }
          if ((_DWORD)v24 == 2)
          {
            v27 = (_BYTE *)(v25 + 32 * v26);
            if (v27[8] == 9 && *(_BYTE *)(*(_QWORD *)v27 + 4) == 1)
            {
LABEL_11:
              if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
              {
                v17 = *(_QWORD *)(v11 + 40);
                v18 = *v7;
                v20 = *(_QWORD *)(v17 + 24);
                v19 = v17 + 24;
                v21 = 2 * v20 + 8;
                if (v20 >= 0)
                  v19 = v21;
                if (((*(_QWORD *)(v19 + (((unint64_t)-*v7 >> 3) & 0x1FFFFFF8)) >> -(char)v18) & 1) != 0)
                  return result;
              }
              else
              {
                v18 = *v7;
              }
              result = JSC::B3::Air::TmpWidth::requiredWidth(v11 + 8, v18);
              if (a3 - 4 <= 6 && result > a5)
                return result;
              v28 = *(_BYTE **)(v10 + 24);
              if ((_DWORD)result == 2)
              {
                v29 = *v28;
                v30 = *(unsigned int **)(v13 + 8);
                if (v29)
                {
LABEL_34:
                  v31 = 4;
LABEL_35:
                  if (*v30 > v31)
                    v31 = *v30;
                  *v30 = v31;
                  *(_BYTE *)(a2 + 24) = 0;
                  *(_QWORD *)v7 = 0;
                  *(_QWORD *)a2 = v30;
                  *(_WORD *)(a2 + 8) = 521;
                  *(_DWORD *)(a2 + 12) = 0;
                  **(_BYTE **)(v10 + 32) = 1;
                  if ((v16 & 1) == 0)
                    **(_BYTE **)(v10 + 40) = 1;
                  return result;
                }
              }
              else
              {
                *v28 = 0;
                v30 = *(unsigned int **)(v13 + 8);
              }
              if (a5 != 3)
              {
                v31 = 1;
                switch(a5)
                {
                  case 0u:
                    goto LABEL_35;
                  case 1u:
                    v31 = 2;
                    goto LABEL_35;
                  case 2u:
                    goto LABEL_34;
                  case 4u:
                    v31 = 16;
                    goto LABEL_35;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1980930C0);
                }
              }
              v31 = 8;
              goto LABEL_35;
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::IRC,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  _BYTE v44[25];
  WTF *v45;
  uint64_t v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  _BYTE v50[12];
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _OWORD v54[6];
  _QWORD v55[2];

  if (*(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = **(_QWORD **)a1;
      v10 = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v9, *(_DWORD *)(a2 + 16));
      v11 = v10;
      if (v9)
        v12 = v9 + 16 * *(unsigned int *)(v9 - 4);
      else
        v12 = 0;
      if (v12 == v10)
      {
        v22 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v22 + 236))
        {
          v23 = -v5;
          v24 = *(_QWORD *)(v22 + 224);
          do
          {
            v25 = v23;
            v23 = *(_DWORD *)(v24 + 4 * v23);
          }
          while (v23);
          if (v5 + v25)
          {
            *(_DWORD *)(a2 + 16) = -v25;
            **(_BYTE **)(a1 + 16) = 1;
          }
        }
      }
      else
      {
        v13 = JSC::B3::Air::TmpWidth::requiredWidth(v8 + 8, v5);
        if (v13 == 3)
          v20 = 8;
        else
          v20 = 16;
        if (v13 < 3)
          v20 = 4;
        if (v20 == 4)
        {
          v21 = 107;
        }
        else if (v20 == 16)
        {
          v21 = 113;
        }
        else
        {
          v21 = 108;
        }
        v26 = *(_DWORD *)(*(_QWORD *)v8 + 180);
        *(_DWORD *)(*(_QWORD *)v8 + 180) = v26 + 1;
        v27 = (v26 + 33);
        *(_DWORD *)(a2 + 16) = -33 - v26;
        v28 = *(uint64_t **)(a1 + 32);
        v29 = *v28;
        if (*v28 < 0)
          v30 = 63;
        else
          v30 = *(_QWORD *)(2 * v29);
        if (v30 <= v27)
        {
          WTF::BitVector::resizeOutOfLine(*(WTF::BitVector **)(a1 + 32), v27 + 1, 0);
          v29 = *v28;
        }
        if (v29 >= 0)
          v31 = 2 * v29 + 8;
        else
          v31 = (uint64_t)v28;
        *(_QWORD *)(v31 + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
        if (a3 != 10)
        {
          v32 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)&v44[16] = 0;
          v44[24] = 0;
          *(_WORD *)&v44[8] = 521;
          *(_QWORD *)v44 = v32;
          *(_DWORD *)&v44[12] = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            v33 = *(_QWORD *)(a1 + 40);
            v34 = **(unsigned int **)(a1 + 48);
            v35 = *(_DWORD *)(a2 + 16);
            *(_OWORD *)&v47[9] = *(_OWORD *)&v44[9];
            *(_OWORD *)v47 = *(_OWORD *)v44;
            *(_QWORD *)&v48 = 0;
            WORD4(v48) = 513;
            HIDWORD(v48) = 1;
            *(_QWORD *)&v49 = v35;
            BYTE8(v49) = 0;
            v54[0] = *(_OWORD *)v44;
            v54[2] = v48;
            v54[3] = v49;
            v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112);
            v45 = (WTF *)v47;
            *(_QWORD *)v50 = v36;
            *(_DWORD *)&v50[8] = v21;
            v51 = v34;
            v52 = (WTF *)v54;
            v54[1] = *(_OWORD *)&v47[16];
            v46 = 3;
            v53 = 0x200000003;
            v55[0] = v36;
            *(_DWORD *)((char *)v55 + 7) = *(_DWORD *)&v50[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v33, (unint64_t)&v51, v14, v15, v16, v17, v18, v19);
            v42 = v52;
            if (v54 != (_OWORD *)v52 && v52)
            {
              v52 = 0;
              LODWORD(v53) = 0;
              WTF::fastFree((unint64_t)v42, v37, v38, v39, v40, v41, v18, v19);
            }
            v43 = v45;
            if (v47 != (_BYTE *)v45 && v45)
            {
              v45 = 0;
              LODWORD(v46) = 0;
              WTF::fastFree((unint64_t)v43, v37, v38, v39, v40, v41, v18, v19);
            }
          }
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>(*(_QWORD *)(a1 + 40), (**(_DWORD **)(a1 + 48) + 1), v21, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112), *(unsigned int *)(a2 + 16), v44, v18, v19);
        }
      }
    }
  }
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD **v40;
  uint64_t v41;
  _QWORD *v42;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char **v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  _QWORD v71[3];
  _QWORD **v72;
  _QWORD **v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t **v76;
  void *v77;
  void **v78;
  uint64_t ***v79;

  v72 = a3;
  v73 = a2;
  v71[0] = &v73;
  v71[1] = &v72;
  v71[2] = a1;
  v74 = v71;
  if (a2)
  {
    v75 = (uint64_t *)&v74;
    v76 = &v75;
    if ((*((__int16 *)a2 + 60) - 446) > 5)
    {
      v8 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)a2 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
        v11 = 1;
        do
        {
          if (v9 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198093A5CLL);
          }
          v12 = v10[v9];
          if ((v12 >> 5) - 1 >= 5)
            goto LABEL_101;
          if ((v12 & 0xC) == 4 && LOBYTE((*a2)[v11]) == 1)
          {
            v14 = *v75;
            LODWORD(v77) = (*a2)[v11 + 1];
          }
          ++v9;
          v11 += 4;
        }
        while (v8 != v9);
      }
    }
    else
    {
      v77 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v78 = &v77;
      v79 = &v76;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v77);
    }
  }
  if (a3)
  {
    v75 = (uint64_t *)&v74;
    v76 = &v75;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v15 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v15 - 1) * v15) >> 1);
        v18 = 1;
        do
        {
          if (v16 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198093A64);
          }
          v19 = v17[v16];
          if ((v19 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198093A54);
          }
          v20 = &(*a3)[v18];
          if (*(_BYTE *)v20 == 1 && (v19 & 0xF) - 8 <= 2)
          {
            v21 = *v75;
            LODWORD(v77) = *((_DWORD *)v20 + 2);
          }
          ++v16;
          v18 += 4;
        }
        while (v15 != v16);
      }
    }
    else
    {
      v77 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v78 = &v77;
      v79 = &v76;
      JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v77);
    }
  }
  if (a2 && *((_WORD *)a2 + 60) == 448)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198093A94);
    }
    v22 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a2 + 80))(**a2, a2);
    v24 = v23 | v22;
    if (v23 | v22)
    {
      v25 = v22;
      do
      {
        v26 = __clz(__rbit64(v24));
        v27 = (char)(31 - v26);
        if (v26 < 0x20)
          v27 = v26 + 1;
        LODWORD(v77) = v27;
        v24 &= v24 - 1;
      }
      while (v24);
    }
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    if (!*((_DWORD *)a3 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198093A9CLL);
    }
    v28 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
    v30 = v29 | v28;
    if (v29 | v28)
    {
      v31 = v28;
      do
      {
        v32 = __clz(__rbit64(v30));
        v33 = (char)(31 - v32);
        if (v32 < 0x20)
          v33 = v32 + 1;
        LODWORD(v77) = v33;
        v30 &= v30 - 1;
      }
      while (v30);
    }
  }
  v34 = (uint64_t)v73;
  if (!v73)
    goto LABEL_55;
  v35 = *((__int16 *)v73 + 60);
  if ((v35 - 107) > 6 || ((1 << (*((_WORD *)v73 + 60) - 107)) & 0x43) == 0)
    goto LABEL_55;
  if (*((_DWORD *)v73 + 3) != 2)
    goto LABEL_55;
  v37 = (uint64_t)*v73;
  if (*((_BYTE *)*v73 + 8) != 1 || *(_BYTE *)(v37 + 40) != 1)
    goto LABEL_55;
  if (v35 != 94)
    goto LABEL_57;
  v38 = *(_QWORD *)(a1 + 336);
  if (!v38)
  {
LABEL_55:
    v40 = v72;
    v41 = *a4;
    v42 = (_QWORD *)a1;
  }
  v39 = *(unsigned int *)(v37 + 16);
  if ((int)v39 < 1)
  {
    v39 = -(int)v39;
    if (v39 < *(unsigned int *)(v38 + 28))
    {
      v38 += 16;
      goto LABEL_54;
    }
LABEL_101:
    __break(0xC471u);
    JUMPOUT(0x198093A34);
  }
  if (v39 >= *(_DWORD *)(v38 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198093AA4);
  }
LABEL_54:
  if (*(unsigned __int8 *)(*(_QWORD *)v38 + 2 * v39 + 1) > 2u)
    goto LABEL_55;
LABEL_57:
  v44 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v73 + 60);
  v45 = v44[1];
  if ((v45 >> 5) - 1 >= 5 || (v46 = v44[2], (v46 >> 5) - 1 > 4))
  {
    __break(0xC471u);
    JUMPOUT(0x198093A84);
  }
  v47 = v45 & 0xC;
  v48 = *(_DWORD *)(v37 + 16);
  v49 = v47 == 4;
  if (v47 == 4)
    v50 = 0;
  else
    v50 = *(_DWORD *)(v37 + 16);
  if (!v49)
    v48 = 0;
  v51 = *(_DWORD *)(v37 + 48);
  v52 = v46 & 0xC;
  if (v52 == 4)
    v53 = v50;
  else
    v53 = v51;
  if (v52 != 4)
    v51 = v48;
  v54 = (char **)(a1 + 88);
  v55 = -v51;
  LODWORD(v77) = -v53;
  HIDWORD(v77) = -v51;
  v56 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v56 == *(_DWORD *)(a1 + 96))
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * *(unsigned int *)(a1 + 100)) = *(_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54, v56 + 1, (unint64_t)&v77);
  else
    *(_QWORD *)&(*v54)[8 * v56] = v77;
  ++*(_DWORD *)(a1 + 100);
  v57 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)(a1 + 296) = v57 + 1;
  LODWORD(v77) = v57;
  v58 = (_QWORD *)(a1 + 304);
  v59 = *(unsigned int *)(a1 + 316);
  if ((_DWORD)v59 == *(_DWORD *)(a1 + 312))
    *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(a1 + 316)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)&v77);
  else
    *(_DWORD *)(*v58 + 4 * v59) = v57;
  ++*(_DWORD *)(a1 + 316);
  v60 = *((unsigned int *)v73 + 3);
  if ((_DWORD)v60)
  {
    v61 = 32 * v60;
    v62 = (int *)(*v73 + 2);
    do
    {
      v63 = *v62;
      v62 += 8;
      v64 = -v63;
      if (*(_DWORD *)(a1 + 116) <= -v63)
      {
        __break(0xC471u);
        JUMPOUT(0x198093A8CLL);
      }
      WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)&v77, (unsigned int *)(*(_QWORD *)(a1 + 104) + 40 * v64), v56);
      v61 -= 32;
    }
    while (v61);
  }
  v65 = *(unsigned int *)(*a4 + 60);
  if ((_DWORD)v65)
  {
    v66 = *(unsigned int **)(*a4 + 48);
    v67 = 4 * v65;
    do
    {
      if (v53 + *v66)
      ++v66;
      v67 -= 4;
    }
    while (v67);
  }
  v68 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v68)
  {
    v69 = *(_DWORD **)(a1 + 264);
    v70 = 4 * v68;
    do
    {
      if (v53 != *v69)
      ++v69;
      v70 -= 4;
    }
    while (v70);
  }
  v40 = v72;
  v41 = *a4;
  v42 = (_QWORD *)a1;
  v34 = 0;
}

_QWORD *JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  _QWORD **v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD **v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD **v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t ****v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t ***v71;
  unsigned int v72;
  uint64_t **v73;
  uint64_t ***v74;
  uint64_t *****v75;

  v5 = (_QWORD **)a2;
  v66[1] = result;
  v67 = a4;
  v66[0] = &v67;
  v70 = v66;
  if (a2)
  {
    v71 = (uint64_t ***)&v70;
    v68 = &v71;
    if ((*(__int16 *)(a2 + 120) - 446) > 5)
    {
      v65 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v65)
      {
        v6 = 0;
        v63 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(a2 + 120)
            + ((unint64_t)((v65 - 1) * v65) >> 1);
        do
        {
          if (v6 >= *((unsigned int *)v5 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198094134);
          }
          v7 = v63[v6];
          if ((v7 >> 5) - 1 >= 5)
            goto LABEL_105;
          v8 = a3;
          v9 = (uint64_t)&(*v5)[4 * v6];
          v10 = (v7 & 0xC) == 4 && *(_BYTE *)(v9 + 8) == 1;
          if (v10 && (v7 & 0x10) != 0)
          {
            v11 = *(_DWORD *)(v9 + 16);
            v12 = (*v71)[1];
            v13 = ***v71;
            v14 = *(unsigned int *)(v13 + 60);
            if ((_DWORD)v14)
            {
              v15 = *(unsigned int **)(v13 + 48);
              v16 = -v11;
              v17 = 4 * v14;
              do
              {
                v18 = *v15;
                v19 = -*v15;
                v20 = v12[42];
                if (v19 < 0 || *v15 == 0)
                {
                  if (v18 >= *(_DWORD *)(v20 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198094144);
                  }
                }
                else if (*(_DWORD *)(v20 + 12) <= v19)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198094114);
                }
                if (v18 != (_DWORD)v16)
                {
                  v72 = *v15;
                  LODWORD(v73) = -v11;
                  if (v18 >= v16)
                    v21 = -v11;
                  else
                    v21 = v18;
                  if (*((_DWORD *)v12 + 9) <= v21)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19809411CLL);
                  }
                  if (v18 <= v16)
                    v22 = -v11;
                  else
                    v22 = v18;
                  result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v12[3] + 24 * v21), v22);
                  *((_DWORD *)v12 + 10) += result;
                  if ((_BYTE)result)
                  {
                    v23 = *((_DWORD *)v12 + 4);
                    if (v23 < v16)
                    {
                      v24 = v12[6] + 16 * v16;
                      v25 = *(unsigned int *)(v24 + 12);
                      if ((_DWORD)v25 == *(_DWORD *)(v24 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v16), v25 + 1, (unint64_t)&v72);
                        *(_DWORD *)(*(_QWORD *)v24 + 4 * *(unsigned int *)(v24 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v24 + 4 * v25) = v18;
                      }
                      ++*(_DWORD *)(v24 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v16);
                      v18 = v72;
                      v23 = *((_DWORD *)v12 + 4);
                    }
                    if (v23 < v18)
                    {
                      v26 = v12[6] + 16 * v18;
                      v27 = *(unsigned int *)(v26 + 12);
                      if ((_DWORD)v27 == *(_DWORD *)(v26 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v18), v27 + 1, (unint64_t)&v73);
                        *(_DWORD *)(*(_QWORD *)v26 + 4 * *(unsigned int *)(v26 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v26 + 4 * v27) = v16;
                      }
                      ++*(_DWORD *)(v26 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v72);
                    }
                  }
                }
                ++v15;
                v17 -= 4;
              }
              while (v17);
            }
            v28 = *((unsigned int *)v12 + 69);
            if ((_DWORD)v28)
            {
              v29 = (int *)v12[33];
              v30 = -v11;
              v31 = 4 * v28;
              do
              {
                v32 = *v29;
                if (*v29 != v11)
                {
                  v33 = -v32;
                  v72 = -v32;
                  LODWORD(v73) = -v11;
                  if (-v32 >= v30)
                    v34 = -v11;
                  else
                    v34 = -v32;
                  if (*((_DWORD *)v12 + 9) <= v34)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198094124);
                  }
                  if (v33 <= v30)
                    v35 = -v11;
                  else
                    v35 = v33;
                  result = (_QWORD *)WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v12[3] + 24 * v34), v35);
                  *((_DWORD *)v12 + 10) += result;
                  if ((_BYTE)result)
                  {
                    v36 = *((_DWORD *)v12 + 4);
                    if (v36 < v30)
                    {
                      v37 = v12[6] + 16 * v30;
                      v38 = *(unsigned int *)(v37 + 12);
                      if ((_DWORD)v38 == *(_DWORD *)(v37 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v30), v38 + 1, (unint64_t)&v72);
                        *(_DWORD *)(*(_QWORD *)v37 + 4 * *(unsigned int *)(v37 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v37 + 4 * v38) = v33;
                      }
                      ++*(_DWORD *)(v37 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v30);
                      v33 = v72;
                      v36 = *((_DWORD *)v12 + 4);
                    }
                    if (v36 < v33)
                    {
                      v39 = v12[6] + 16 * v33;
                      v40 = *(unsigned int *)(v39 + 12);
                      if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
                      {
                        result = WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12[6] + 16 * v33), v40 + 1, (unint64_t)&v73);
                        *(_DWORD *)(*(_QWORD *)v39 + 4 * *(unsigned int *)(v39 + 12)) = *(_DWORD *)result;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)v39 + 4 * v40) = v30;
                      }
                      ++*(_DWORD *)(v39 + 12);
                      ++*(_DWORD *)(v12[8] + 4 * v72);
                    }
                  }
                }
                ++v29;
                v31 -= 4;
              }
              while (v31);
            }
          }
          ++v6;
          v5 = (_QWORD **)a2;
          a3 = v8;
        }
        while (v6 != v65);
      }
    }
    else
    {
      v73 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v74 = &v73;
      v75 = &v68;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom(a2, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v73);
    }
  }
  if (a3)
  {
    v41 = v5;
    v71 = (uint64_t ***)&v70;
    v68 = &v71;
    if ((*((__int16 *)a3 + 60) - 446) > 5)
    {
      v42 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *((__int16 *)a3 + 60)
            + ((unint64_t)((v42 - 1) * v42) >> 1);
        do
        {
          if (v43 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19809413CLL);
          }
          v45 = v44[v43];
          if ((v45 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19809410CLL);
          }
          v46 = (uint64_t)&(*a3)[4 * v43];
          if (*(_BYTE *)(v46 + 8) == 1 && (v45 & 0xF) - 8 <= 2 && (v45 & 0x10) != 0)
          {
            v47 = *(_DWORD *)(v46 + 16);
            v48 = (uint64_t)(*v71)[1];
            v49 = ***v71;
            v50 = *(unsigned int *)(v49 + 60);
            if ((_DWORD)v50)
            {
              v51 = *(unsigned int **)(v49 + 48);
              v52 = 4 * v50;
              do
              {
                v53 = *v51;
                v54 = -*v51;
                v55 = *(_QWORD *)(v48 + 336);
                if (v54 < 0 || *v51 == 0)
                {
                  if (v53 >= *(_DWORD *)(v55 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19809414CLL);
                  }
                }
                else if (*(_DWORD *)(v55 + 12) <= v54)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19809412CLL);
                }
                ++v51;
                v52 -= 4;
              }
              while (v52);
            }
            v56 = *(unsigned int *)(v48 + 276);
            if ((_DWORD)v56)
            {
              v57 = *(int **)(v48 + 264);
              v58 = -v47;
              v59 = 4 * v56;
              do
              {
                v60 = *v57++;
                v59 -= 4;
              }
              while (v59);
            }
          }
          ++v43;
        }
        while (v43 != v42);
      }
    }
    else
    {
      v73 = (uint64_t **)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v74 = &v73;
      v75 = &v68;
      result = (_QWORD *)JSC::B3::Air::Inst::forEachArgCustom((uint64_t)a3, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v73);
    }
    v5 = v41;
  }
  v73 = (uint64_t **)v66;
  v74 = (uint64_t ***)&v71;
  if (v5 && *((_WORD *)v5 + 60) == 448)
  {
    LOBYTE(v71) = 4;
    if (!*((_DWORD *)v5 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198094154);
    }
    v68 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v5 + 80))(**v5, v5);
    v69 = v61;
  }
  if (a3 && *((_WORD *)a3 + 60) == 448)
  {
    LOBYTE(v71) = 8;
    if (*((_DWORD *)a3 + 3))
    {
      v68 = (uint64_t ****)(*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**a3 + 72))(**a3, a3);
      v69 = v62;
    }
LABEL_105:
    __break(0xC471u);
    JUMPOUT(0x1980940ECLL);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  int v6;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1)
  {
    v5 = ****(_QWORD ****)(result + 16);
    v6 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::build(JSC::B3::Air::Inst *,JSC::B3::Air::Inst *,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc const&)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}::operator()(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void **v27;
  _QWORD *v28;

  v23 = a4;
  if (a3 == 1)
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = **(_QWORD **)result;
    v6 = **(_QWORD **)(result + 8);
    v22[0] = &v23;
    v22[1] = a2;
    v22[2] = v4;
    if (v5)
    {
      v24 = v22;
      v25 = &v24;
      if ((*(__int16 *)(v5 + 120) - 446) > 5)
      {
        v7 = *(unsigned int *)(v5 + 12);
        if ((_DWORD)v7)
        {
          v8 = 0;
          v9 = (char *)&JSC::B3::Air::g_formTable
             + 21 * *(__int16 *)(v5 + 120)
             + ((unint64_t)((v7 - 1) * v7) >> 1);
          v10 = 8;
          while (1)
          {
            if (v8 >= *(unsigned int *)(v5 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198094468);
            }
            v11 = v9[v8];
            v12 = (v11 >> 5) - 1;
            if (v12 >= 5)
              break;
            v13 = *(_QWORD *)v5 + v10;
            if ((v11 & 0xC) == 4 && *(_BYTE *)v13 == 1 && (v11 & 0x10) != 0)
            {
              result = v24[2];
              if (((0xFu >> v12) & 1) == 0 || !*(_BYTE *)*v24)
            }
            ++v8;
            v10 += 32;
            if (v7 == v8)
              goto LABEL_19;
          }
LABEL_37:
          __break(0xC471u);
          JUMPOUT(0x198094440);
        }
      }
      else
      {
        v26 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v27 = &v26;
        v28 = &v25;
        result = JSC::B3::Air::Inst::forEachArgCustom(v5, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v26);
      }
    }
LABEL_19:
    if (v6)
    {
      v24 = v22;
      v25 = &v24;
      if ((*(__int16 *)(v6 + 120) - 446) <= 5)
      {
        v26 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
        v27 = &v26;
        v28 = &v25;
        return JSC::B3::Air::Inst::forEachArgCustom(v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v26);
      }
      v15 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v6 + 120)
            + ((unint64_t)((v15 - 1) * v15) >> 1);
        v18 = 8;
        while (v16 < *(unsigned int *)(v6 + 12))
        {
          v19 = v17[v16];
          v20 = (v19 >> 5) - 1;
          if (v20 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198094460);
          }
          v21 = *(_QWORD *)v6 + v18;
          if (*(_BYTE *)v21 == 1 && (v19 & 0xF) - 8 <= 2 && (v19 & 0x10) != 0)
          {
            result = v24[2];
            if (((0xFu >> v20) & 1) == 0 || !*(_BYTE *)*v24)
          }
          ++v16;
          v18 += 32;
          if (v15 == v16)
            return result;
        }
        goto LABEL_37;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if ((a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSE_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SO_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEENKUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_clESY_S6_S7_S8_SZ_EUlRSC_S6_S7_S8_E_EEvSO_SO_RKT0_EUlS11_S6_S7_S8_E0_EEvS15_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && a4 == 1)
  {
    v5 = ***(_QWORD ***)(result + 16);
    result = *(_QWORD *)(v5 + 16);
    if (a5 > 3 || !**(_BYTE **)v5)
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE5buildEPSA_SP_RKNS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalcEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S14_EUlRSC_S6_S7_S8_E0_EEvS14_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v4 = ****(_QWORD ****)(result + 16);
    v5 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

_QWORD *JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::B3::Air::Tmp,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::addEdges(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::LocalCalc::Iterable)::{lambda(JSC::B3::Air::Tmp const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(_QWORD *result, uint64_t ***a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  v2 = result[1] | *result;
  if (*(_OWORD *)result != 0)
  {
    v4 = result;
    do
    {
      v5 = __clz(__rbit64(v2));
      if (v5 >= 0x20)
      {
        v6 = (char)(31 - v5);
        v7 = (uint64_t)(*a2)[1];
        v8 = ***a2;
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v10 = *(unsigned int **)(v8 + 48);
          v11 = 4 * v9;
          if (((1 << v5) & *v4) != 0)
          {
            while (1)
            {
              v12 = *v10;
              v13 = -*v10;
              v14 = *(_QWORD *)(v7 + 336);
              if (v13 < 0 || *v10 == 0)
              {
                if (v12 >= *(_DWORD *)(v14 + 28))
                  goto LABEL_26;
              }
              else if (*(_DWORD *)(v14 + 12) <= v13)
              {
                goto LABEL_26;
              }
              ++v10;
              v11 -= 4;
              if (!v11)
                goto LABEL_21;
            }
          }
          do
          {
            v15 = -*v10;
            v16 = *(_QWORD *)(v7 + 336);
            if ((int)v15 < 1)
            {
              v15 = *v10;
              if (v15 >= *(unsigned int *)(v16 + 28))
                goto LABEL_26;
              v16 += 16;
            }
            else if (*(_DWORD *)(v16 + 12) <= v15)
            {
LABEL_26:
              __break(0xC471u);
              JUMPOUT(0x198094720);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v16 + 2 * v15) >= 4u)
            ++v10;
            v11 -= 4;
          }
          while (v11);
        }
LABEL_21:
        v17 = *(unsigned int *)(v7 + 276);
        if ((_DWORD)v17)
        {
          v18 = *(int **)(v7 + 264);
          v19 = -v6;
          v20 = 4 * v17;
          do
          {
            v21 = *v18++;
            v20 -= 4;
          }
          while (v20);
        }
      }
      v2 &= v2 - 1;
    }
    while (v2);
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, int a4)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v4 = (a3 & 0xFC) == 4 && *(_BYTE *)(a2 + 8) == 1;
  if (v4 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v7 = ******(_QWORD ******)(result + 16);
    v8 = *(unsigned int *)(v7 + 60);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned int **)(v7 + 48);
      v10 = 4 * v8;
      do
      {
        v11 = *v9;
        v12 = -*v9;
        v13 = *(_QWORD *)(v6 + 336);
        if (v12 < 0 || *v9 == 0)
        {
          if (v11 >= *(_DWORD *)(v13 + 28))
          {
LABEL_19:
            __break(0xC471u);
            JUMPOUT(0x1980947D8);
          }
        }
        else if (*(_DWORD *)(v13 + 12) <= v12)
        {
          goto LABEL_19;
        }
        ++v9;
        v10 -= 4;
      }
      while (v10);
    }
    v14 = *(unsigned int *)(v6 + 276);
    if ((_DWORD)v14)
    {
      v15 = *(int **)(v6 + 264);
      v16 = -v5;
      v17 = 4 * v14;
      do
      {
        v18 = *v15++;
        v17 -= 4;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_117ColoringAllocatorIjLS7_1ENSF_6BriggsENS_27UndirectedEdgesDedupAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE8addEdgesEPSA_SP_NS_8LivenessINS3_18TmpLivenessAdapterILS7_1ELNS4_11TemperatureE0EEEE9LocalCalc8IterableEEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvSP_SP_RKT0_EUlSC_S6_S7_S8_E_EEvSP_SP_S13_EUlRSC_S6_S7_S8_E0_EEvS13_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2 && a4 == 1)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(****(_QWORD ****)(result + 16) + 8);
    v6 = ******(_QWORD ******)(result + 16);
    v7 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int **)(v6 + 48);
      v9 = 4 * v7;
      do
      {
        v10 = *v8;
        v11 = -*v8;
        v12 = *(_QWORD *)(v5 + 336);
        if (v11 < 0 || *v8 == 0)
        {
          if (v10 >= *(_DWORD *)(v12 + 28))
          {
LABEL_16:
            __break(0xC471u);
            JUMPOUT(0x1980948D8);
          }
        }
        else if (*(_DWORD *)(v12 + 12) <= v11)
        {
          goto LABEL_16;
        }
        ++v8;
        v9 -= 4;
      }
      while (v9);
    }
    v13 = *(unsigned int *)(v5 + 276);
    if ((_DWORD)v13)
    {
      v14 = *(int **)(v5 + 264);
      v15 = -v4;
      v16 = 4 * v13;
      do
      {
        v17 = *v14++;
        v16 -= 4;
      }
      while (v16);
    }
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::Briggs<unsigned int,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>,(JSC::B3::Bank)1>::allocate(void)::{lambda(unsigned int &)#1}::operator()(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40[24];

  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*a1 + 88);
  v7 = *(_DWORD *)(v6 + 8 * v5);
  v8 = *(_QWORD *)(*a1 + 152);
  do
  {
    v9 = v7;
    v7 = *(_DWORD *)(v8 + 4 * v7);
  }
  while (v7);
  v10 = *(_DWORD *)(v6 + 8 * v5 + 4);
  do
  {
    v11 = v10;
    v10 = *(_DWORD *)(v8 + 4 * v10);
  }
  while (v10);
  v12 = *(_DWORD *)(v4 + 16);
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v9;
  if (v12 >= v11)
    v14 = v9;
  else
    v14 = v11;
  if ((_DWORD)v13 != (_DWORD)v14)
  {
    if (v12 < v14)
    {
      v15 = v14 >= v13 ? v13 : v14;
      v16 = v14 <= v13 ? v13 : v14;
      if (!WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains(v4 + 24, v15, v16))
      {
        {
          return;
        }
        *(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v14) = v13;
        if (*(_DWORD *)(v4 + 116) <= v14)
        {
          __break(0xC471u);
        }
        else
        {
          v22 = *(_QWORD *)(v4 + 104) + 40 * v14;
          v23 = *(unsigned int *)(v22 + 4);
          v24 = (_QWORD *)(v22 + 8);
          if ((_DWORD)v23 != 8)
            v24 = (_QWORD *)*v24;
          v25 = 0;
          while ((_DWORD)v23 != v25)
          {
            v26 = v25;
            v27 = *((_DWORD *)v24 + v25++);
            if (v27 != -1)
            {
              v28 = v26;
              goto LABEL_28;
            }
          }
          v28 = v23;
LABEL_28:
          if ((_DWORD)v23 == (_DWORD)v28)
          {
LABEL_29:
            v29 = *(_QWORD *)(v4 + 48) + 16 * v14;
            v30 = *(unsigned int *)(v29 + 12);
            if ((_DWORD)v30)
            {
              v31 = *(unsigned int **)v29;
              v32 = (uint64_t *)(v4 + 168);
              v33 = 4 * v30;
              while (1)
              {
                v34 = *v31;
                if (*v32 >= 0)
                  v35 = 2 * *v32 + 8;
                else
                  v35 = v4 + 168;
                if (((*(_QWORD *)(v35 + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0
                  || *(_DWORD *)(*(_QWORD *)(v4 + 152) + 4 * v34))
                {
                  goto LABEL_41;
                }
                if (*(_DWORD *)(v4 + 16) < v13)
                {
                  v36 = 1;
                  v34 = v13;
LABEL_40:
                  *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * v34) += v36;
                }
LABEL_41:
                ++v31;
                v33 -= 4;
                if (!v33)
                  goto LABEL_42;
              }
              v36 = -1;
              goto LABEL_40;
            }
LABEL_42:
            *(_BYTE *)(v4 + 217) = 1;
            *(_BYTE *)a1[1] = 1;
            goto LABEL_43;
          }
          v37 = v28 | (v23 << 32);
          while (*(_DWORD *)(v4 + 116) > v13)
          {
            WTF::SmallSet<unsigned int,WTF::IntHash<unsigned int>,8u>::add((uint64_t)v40, (unsigned int *)(*(_QWORD *)(v4 + 104) + 40 * v13), *((_DWORD *)v24 + v37));
            v38 = HIDWORD(v37);
            if ((v28 + 1) > HIDWORD(v37))
              LODWORD(v38) = v28 + 1;
            while (1)
            {
              v39 = (v28 + 1);
              v37 = v37 & 0xFFFFFFFF00000000 | v39;
              if ((_DWORD)v38 - 1 == (_DWORD)v28)
                break;
              LODWORD(v28) = v28 + 1;
              if (*((_DWORD *)v24 + v39) != -1)
                goto LABEL_52;
            }
            LODWORD(v39) = v38;
LABEL_52:
            LODWORD(v28) = v39;
            if ((_DWORD)v23 == (_DWORD)v39)
              goto LABEL_29;
          }
          __break(0xC471u);
        }
        JUMPOUT(0x198094BC0);
      }
    }
LABEL_43:
    *a2 = -1;
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned int v6;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Air::Inst *v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;

  if (a4 == 1 && *(_BYTE *)(a2 + 8) == 1)
  {
    v7 = (int *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    if (v6 <= 0xFFFFFFDF && v6 - 1 >= 0x20)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 16);
      v12 = **(_QWORD **)result;
      result = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v12, v6);
      v13 = result;
      v14 = v12 ? v12 + 16 * *(unsigned int *)(v12 - 4) : 0;
      if (v14 != result)
      {
        v15 = *(JSC::B3::Air::Inst **)(v10 + 8);
        if (!*((_DWORD *)v15 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x198094E60);
        }
        result = JSC::B3::Air::Inst::admitsStack(v15, (unint64_t)(a2 - *(_QWORD *)v15) >> 5);
        v16 = result;
        if ((result & 1) != 0)
          goto LABEL_11;
        v22 = *(uint64_t **)(v10 + 8);
        v23 = *((__int16 *)v22 + 60) - 90;
        if (v23 <= 0x12 && ((1 << v23) & 0x60011) != 0)
        {
          v24 = *((unsigned int *)v22 + 3);
          if (!(_DWORD)v24)
          {
            __break(0xC471u);
            JUMPOUT(0x198094E68);
          }
          v25 = *v22;
          v26 = ((unint64_t)(a2 - v25) >> 5) ^ 1;
          if (v26 >= v24)
          {
            __break(0xC471u);
            JUMPOUT(0x198094E70);
          }
          if ((_DWORD)v24 == 2)
          {
            v27 = (_BYTE *)(v25 + 32 * v26);
            if (v27[8] == 9 && *(_BYTE *)(*(_QWORD *)v27 + 4) == 1)
            {
LABEL_11:
              if (a3 <= 0xB && ((1 << a3) & 0xFF5) != 0)
              {
                v17 = *(_QWORD *)(v11 + 40);
                v18 = *v7;
                v20 = *(_QWORD *)(v17 + 24);
                v19 = v17 + 24;
                v21 = 2 * v20 + 8;
                if (v20 >= 0)
                  v19 = v21;
                if (((*(_QWORD *)(v19 + (((unint64_t)-*v7 >> 3) & 0x1FFFFFF8)) >> -(char)v18) & 1) != 0)
                  return result;
              }
              else
              {
                v18 = *v7;
              }
              result = JSC::B3::Air::TmpWidth::requiredWidth(v11 + 8, v18);
              if (a3 - 4 <= 6 && result > a5)
                return result;
              v28 = *(_BYTE **)(v10 + 24);
              if ((_DWORD)result == 2)
              {
                v29 = *v28;
                v30 = *(unsigned int **)(v13 + 8);
                if (v29)
                {
LABEL_34:
                  v31 = 4;
LABEL_35:
                  if (*v30 > v31)
                    v31 = *v30;
                  *v30 = v31;
                  *(_BYTE *)(a2 + 24) = 0;
                  *(_QWORD *)v7 = 0;
                  *(_QWORD *)a2 = v30;
                  *(_WORD *)(a2 + 8) = 521;
                  *(_DWORD *)(a2 + 12) = 0;
                  **(_BYTE **)(v10 + 32) = 1;
                  if ((v16 & 1) == 0)
                    **(_BYTE **)(v10 + 40) = 1;
                  return result;
                }
              }
              else
              {
                *v28 = 0;
                v30 = *(unsigned int **)(v13 + 8);
              }
              if (a5 != 3)
              {
                v31 = 1;
                switch(a5)
                {
                  case 0u:
                    goto LABEL_35;
                  case 1u:
                    v31 = 2;
                    goto LABEL_35;
                  case 2u:
                    goto LABEL_34;
                  case 4u:
                    v31 = 16;
                    goto LABEL_35;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198094E58);
                }
              }
              v31 = 8;
              goto LABEL_35;
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::`anonymous namespace'::GraphColoringRegisterAllocation::addSpillAndFill<(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>>(JSC::B3::Air::`anonymous namespace'::ColoringAllocator<unsigned int,(JSC::B3::Bank)1,JSC::B3::Air::`anonymous namespace'::Briggs,WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>> const&,WTF::BitVector &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  _BYTE v44[25];
  WTF *v45;
  uint64_t v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  _BYTE v50[12];
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _OWORD v54[6];
  _QWORD v55[2];

  if (*(_BYTE *)(a2 + 8) == 1 && a4 == 1)
  {
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 <= 0xFFFFFFDF && v5 - 1 >= 0x20)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = **(_QWORD **)a1;
      v10 = WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::StackSlot *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::StackSlot *>,WTF::HashTableTraits>::find(v9, *(_DWORD *)(a2 + 16));
      v11 = v10;
      if (v9)
        v12 = v9 + 16 * *(unsigned int *)(v9 - 4);
      else
        v12 = 0;
      if (v12 == v10)
      {
        v22 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v22 + 236))
        {
          v23 = -v5;
          v24 = *(_QWORD *)(v22 + 224);
          do
          {
            v25 = v23;
            v23 = *(_DWORD *)(v24 + 4 * v23);
          }
          while (v23);
          if (v5 + v25)
          {
            *(_DWORD *)(a2 + 16) = -v25;
            **(_BYTE **)(a1 + 16) = 1;
          }
        }
      }
      else
      {
        v13 = JSC::B3::Air::TmpWidth::requiredWidth(v8 + 8, v5);
        if (v13 == 3)
          v20 = 8;
        else
          v20 = 16;
        if (v13 < 3)
          v20 = 4;
        if (v20 == 4)
        {
          v21 = 107;
        }
        else if (v20 == 16)
        {
          v21 = 113;
        }
        else
        {
          v21 = 108;
        }
        v26 = *(_DWORD *)(*(_QWORD *)v8 + 180);
        *(_DWORD *)(*(_QWORD *)v8 + 180) = v26 + 1;
        v27 = (v26 + 33);
        *(_DWORD *)(a2 + 16) = -33 - v26;
        v28 = *(uint64_t **)(a1 + 32);
        v29 = *v28;
        if (*v28 < 0)
          v30 = 63;
        else
          v30 = *(_QWORD *)(2 * v29);
        if (v30 <= v27)
        {
          WTF::BitVector::resizeOutOfLine(*(WTF::BitVector **)(a1 + 32), v27 + 1, 0);
          v29 = *v28;
        }
        if (v29 >= 0)
          v31 = 2 * v29 + 8;
        else
          v31 = (uint64_t)v28;
        *(_QWORD *)(v31 + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
        if (a3 != 10)
        {
          v32 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)&v44[16] = 0;
          v44[24] = 0;
          *(_WORD *)&v44[8] = 521;
          *(_QWORD *)v44 = v32;
          *(_DWORD *)&v44[12] = 0;
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            v33 = *(_QWORD *)(a1 + 40);
            v34 = **(unsigned int **)(a1 + 48);
            v35 = *(_DWORD *)(a2 + 16);
            *(_OWORD *)&v47[9] = *(_OWORD *)&v44[9];
            *(_OWORD *)v47 = *(_OWORD *)v44;
            *(_QWORD *)&v48 = 0;
            WORD4(v48) = 513;
            HIDWORD(v48) = 1;
            *(_QWORD *)&v49 = v35;
            BYTE8(v49) = 0;
            v54[0] = *(_OWORD *)v44;
            v54[2] = v48;
            v54[3] = v49;
            v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112);
            v45 = (WTF *)v47;
            *(_QWORD *)v50 = v36;
            *(_DWORD *)&v50[8] = v21;
            v51 = v34;
            v52 = (WTF *)v54;
            v54[1] = *(_OWORD *)&v47[16];
            v46 = 3;
            v53 = 0x200000003;
            v55[0] = v36;
            *(_DWORD *)((char *)v55 + 7) = *(_DWORD *)&v50[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v33, (unint64_t)&v51, v14, v15, v16, v17, v18, v19);
            v42 = v52;
            if (v54 != (_OWORD *)v52 && v52)
            {
              v52 = 0;
              LODWORD(v53) = 0;
              WTF::fastFree((unint64_t)v42, v37, v38, v39, v40, v41, v18, v19);
            }
            v43 = v45;
            if (v47 != (_BYTE *)v45 && v45)
            {
              v45 = 0;
              LODWORD(v46) = 0;
              WTF::fastFree((unint64_t)v43, v37, v38, v39, v40, v41, v18, v19);
            }
          }
          if (a3 - 4 <= 6)
            JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg &>(*(_QWORD *)(a1 + 40), (**(_DWORD **)(a1 + 48) + 1), v21, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112), *(unsigned int *)(a2 + 16), v44, v18, v19);
        }
      }
    }
  }
}

_OWORD *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::insertBlocksForFlushAfterTerminalPatchpoints(void)::$_0>::implFunction(_OWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;

  if (*(_BYTE *)(a2 + 8) == 1)
  {
    v8 = (uint64_t **)*((_QWORD *)result + 2);
    v9 = *(_DWORD *)(a2 + 16);
    v13 = v9;
    if ((a3 - 4) <= 6 && v9 <= 0xFFFFFFDF && v9 - 1 >= 0x20)
    {
      v10 = *v8;
      v12 = a2;
      return WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Arg *>,WTF::HashTableTraits>::add<JSC::B3::Air::Arg *>(&v11, v10, (int *)&v13, &v12, a5, a6, a7, a8);
    }
  }
  return result;
}

_OWORD *WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Arg *>,WTF::HashTableTraits>::add<JSC::B3::Air::Arg *>(_OWORD *result, uint64_t *a2, int *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Arg *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = v12 + 16 * v18;
  v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v15)
      {
        if ((v13 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v12 - 4);
        v31 = 0;
        v32 = v12 + 16 * v25;
        goto LABEL_32;
      }
      if (v20 == 0x7FFFFFFF)
        v21 = (_QWORD *)v19;
      v18 = (v18 + v22) & v14;
      v19 = v12 + 16 * v18;
      v20 = *(_DWORD *)v19;
      ++v22;
    }
    while (*(_DWORD *)v19);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v19 = (uint64_t)v21;
    }
  }
  *(_DWORD *)v19 = v15;
  *(_QWORD *)(v19 + 8) = *a4;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_23;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
LABEL_28:
      result = WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Arg *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(a2, v30, v19, (uint64_t)a4, a5, a6, a7, a8);
      v19 = (uint64_t)result;
      v26 = *a2;
      if (*a2)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
    goto LABEL_28;
  }
LABEL_31:
  v32 = v26 + 16 * v29;
  v31 = 1;
LABEL_32:
  *(_QWORD *)v11 = v19;
  *((_QWORD *)v11 + 1) = v32;
  *((_BYTE *)v11 + 16) = v31;
  return result;
}

_OWORD *WTF::HashTable<JSC::B3::Air::Tmp,WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *>>,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Arg *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Tmp>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  int *v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (int *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24)
        v26 = v25 == 0x7FFFFFFF;
      else
        v26 = 1;
      if (!v26)
      {
        v27 = *a1;
        if (*a1)
          v28 = *(_DWORD *)(v27 - 8);
        else
          v28 = 0;
        v29 = 0;
        v30 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
        v31 = ((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) ^ (((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) >> 16);
        do
        {
          v32 = v31 & v28;
          v31 = ++v29 + v32;
        }
        while (*(_DWORD *)(v27 + 16 * v32));
        v33 = (_OWORD *)(v27 + 16 * v32);
        *v33 = *(_OWORD *)v24;
        if (v24 == (int *)a3)
          v23 = v33;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashTable<JSC::B3::Air::BasicBlock *,WTF::KeyValuePair<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>>,WTF::DefaultHash<JSC::B3::Air::BasicBlock *>,WTF::HashMap<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData,WTF::DefaultHash<JSC::B3::Air::BasicBlock *>,WTF::HashTraits<JSC::B3::Air::BasicBlock *>,WTF::HashTraits<JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::BasicBlock *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v16 = (_QWORD *)(v8 + 40);
    do
    {
      *(v16 - 3) = 0;
      *(v16 - 2) = 0xFFFFFFFFLL;
      *((_DWORD *)v16 - 2) = -16773311;
      *((_DWORD *)v16 - 1) = -1;
      *v16 = 0;
      v16 += 4;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    while (1)
    {
      v18 = (uint64_t *)(v4 + 32 * v17);
      v19 = *v18;
      if (*v18 != -1)
      {
        if (v19)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = *(_QWORD *)(v21 + 32 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (v29);
          v30 = v21 + 32 * v28;
          v32 = (_QWORD *)(v30 + 24);
          v31 = *(_QWORD *)(v30 + 24);
          if (v31)
          {
            WTF::fastFree(v31 - 16, v9, v10, v11, v12, v13, v14, v15);
            v19 = *v18;
          }
          *(_QWORD *)v30 = v19;
          v33 = v4 + 32 * v17;
          *(_DWORD *)(v30 + 8) = *(_DWORD *)(v33 + 8);
          *(_QWORD *)(v30 + 12) = *(_QWORD *)(v33 + 12);
          *(_DWORD *)(v30 + 20) = *(_DWORD *)(v33 + 20);
          *v32 = 0;
          v34 = *(_QWORD *)(v33 + 24);
          *(_QWORD *)(v33 + 24) = 0;
          *v32 = v34;
          v20 = *(_QWORD *)(v33 + 24);
          if (!v20)
            goto LABEL_22;
LABEL_21:
          WTF::fastFree(v20 - 16, v9, v10, v11, v12, v13, v14, v15);
          goto LABEL_22;
        }
        v20 = *(_QWORD *)(v4 + 32 * v17 + 24);
        if (v20)
          goto LABEL_21;
      }
LABEL_22:
      if (++v17 == v5)
        goto LABEL_25;
    }
  }
  if (v4)
LABEL_25:
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::HashMap<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *a3 + ~(*a3 << 32);
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ ((_DWORD)v18 + ~((_DWORD)v18 << 27)));
  v20 = (uint64_t *)(v12 + 32 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v12 - 4);
        v40 = 0;
        v41 = v12 + 32 * v28;
        goto LABEL_43;
      }
      if (v21 == -1)
        v22 = (uint64_t)v20;
      v19 = ((_DWORD)v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 32 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (!v22)
      goto LABEL_12;
    v24 = v22 + 24;
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = v22 + 24;
    *(_QWORD *)(v22 + 16) = 2;
    --*(_DWORD *)(*a2 - 16);
    v15 = *a3;
  }
  else
  {
LABEL_12:
    v24 = v20[1];
    v22 = (uint64_t)v20;
  }
  *(_QWORD *)v22 = v15;
  v25 = (_DWORD *)(v22 + 24);
  if (v24 != v22 + 24)
  {
    if (v24)
    {
      *(_QWORD *)(v22 + 8) = 0;
      *(_DWORD *)(v22 + 16) = 0;
      WTF::fastFree(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)(v22 + 8) = v25;
  }
  v26 = *(int **)a4;
  if (*(_QWORD *)a4 == a4 + 16)
  {
    v29 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v29)
    {
      v30 = 4 * v29;
      do
      {
        v31 = *v26++;
        *v25++ = v31;
        v30 -= 4;
      }
      while (v30);
    }
    v27 = *(_DWORD *)(a4 + 8);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(v22 + 8) = v26;
    v27 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 2;
  }
  *(_DWORD *)(v22 + 16) = v27;
  v32 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = 0;
  *(_DWORD *)(v22 + 20) = v32;
  v33 = *a2;
  if (*a2)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *a2;
  if (*a2)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
      goto LABEL_34;
  }
  else if (3 * v38 <= 4 * v37)
  {
    if (!(_DWORD)v38)
    {
      v39 = 8;
LABEL_39:
      v22 = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a2, v39, (uint64_t *)v22);
      v35 = *a2;
      if (*a2)
        v38 = *(unsigned int *)(v35 - 4);
      else
        v38 = 0;
      goto LABEL_42;
    }
LABEL_34:
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
    goto LABEL_39;
  }
LABEL_42:
  v41 = v35 + 32 * v38;
  v40 = 1;
  v20 = (uint64_t *)v22;
LABEL_43:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v41;
  *(_BYTE *)(a1 + 16) = v40;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _DWORD *v42;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _DWORD *v47;
  int *v48;
  _DWORD *v49;
  int v50;
  unint64_t v51;
  int v52;
  uint64_t *v53;
  int *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t result;
  uint64_t *v61;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = v10 + 40;
    do
    {
      *(_QWORD *)(v18 - 24) = 0;
      *(_QWORD *)(v18 - 16) = v18;
      *(_QWORD *)(v18 - 8) = 2;
      v18 += 32;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    v21 = a3;
    do
    {
      v22 = (uint64_t *)(v5 + 32 * v19);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v30 = *a1;
          if (*a1)
            v31 = *(_DWORD *)(v30 - 8);
          else
            v31 = 0;
          v32 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          v35 = v31 & ((v34 >> 31) ^ v34);
          v36 = 1;
          do
          {
            v37 = v35;
            v38 = *(_QWORD *)(v30 + 32 * v35);
            v35 = (v35 + v36++) & v31;
          }
          while (v38);
          v39 = v30 + 32 * v37;
          v41 = (_QWORD *)(v39 + 8);
          v40 = *(_QWORD *)(v39 + 8);
          v42 = (_DWORD *)(v39 + 24);
          if (v39 + 24 != v40 && v40 != 0)
          {
            *v41 = 0;
            *(_DWORD *)(v39 + 16) = 0;
            v61 = v21;
            WTF::fastFree(v40, v11, v12, v13, v14, v15, v16, v17);
            v21 = v61;
            v23 = *v22;
          }
          *(_QWORD *)v39 = v23;
          v44 = v5 + 32 * v19;
          *v41 = v42;
          v45 = (unint64_t *)(v44 + 8);
          v46 = *(_QWORD *)(v44 + 8);
          *(_QWORD *)(v39 + 16) = 2;
          v47 = (_DWORD *)(v39 + 20);
          v48 = (int *)(v44 + 24);
          if (v46 == v44 + 24)
          {
            v56 = *(_DWORD *)(v44 + 20);
            v54 = (int *)(v44 + 20);
            v55 = v56;
            if (v56)
            {
              v57 = 4 * v55;
              do
              {
                v58 = *v48++;
                *v42++ = v58;
                v57 -= 4;
              }
              while (v57);
            }
            v59 = *v54;
            *v54 = 0;
            *v47 = v59;
          }
          else
          {
            *v45 = (unint64_t)v48;
            *v41 = v46;
            v50 = *(_DWORD *)(v44 + 16);
            v49 = (_DWORD *)(v44 + 16);
            *v49 = 2;
            *(_DWORD *)(v39 + 16) = v50;
            v51 = *v45;
            v52 = v49[1];
            v49[1] = 0;
            *v47 = v52;
            if (v48 != (int *)v51 && v51)
            {
              *v45 = 0;
              *v49 = 0;
              v53 = v21;
              WTF::fastFree(v51, v11, v12, v13, v14, v15, v16, v17);
              v21 = v53;
            }
          }
          if (v22 == v21)
            v20 = v39;
        }
        else
        {
          v24 = v5 + 32 * v19;
          v27 = *(_QWORD **)(v24 + 8);
          v26 = (_QWORD *)(v24 + 8);
          v25 = (unint64_t)v27;
          if (v26 + 2 != v27 && v25 != 0)
          {
            *v26 = 0;
            *(_DWORD *)(v5 + 32 * v19 + 16) = 0;
            v29 = v21;
            WTF::fastFree(v25, v11, v12, v13, v14, v15, v16, v17);
            v21 = v29;
          }
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v11, v12, v13, v14, v15, v16, v17);
  return v20;
}

uint64_t WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 4 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v16 = *(_QWORD *)a1;
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
      if (v15 < 3)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_34;
      }
      if (!(v15 >> 30))
      {
        v16 = WTF::fastMalloc((WTF *)(4 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_DWORD *)(v16 + v27) = *(_DWORD *)(v10 + v27);
          v27 += 4;
        }
        while (4 * v11 != v27);
        if (a1 + 16 != v10 && v10)
        {
          if (v16 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198095E2CLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 3)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 30)
        goto LABEL_43;
      v22 = WTF::fastMalloc((WTF *)(4 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 4 * v21;
    v24 = (_DWORD *)v22;
    v25 = (int *)v10;
    do
    {
      v26 = *v25++;
      *v24++ = v26;
      v23 -= 4;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (v22 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

