unint64_t JSC::webAssemblyTableProtoGetterLength(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const WTF::String *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  JSC::Exception *v21;
  WTF::AtomStringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  v9 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyTable::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0x3C00000002;
    *(_QWORD *)(v12 + 8) = "expected |this| value to be an instance of WebAssembly.Table";
    *(_DWORD *)(v12 + 16) = 4;
    v34 = (WTF::StringImpl *)v12;
    v14 = JSC::createTypeError((unint64_t)a1, &v34, v13);
    v21 = (JSC::Exception *)v14;
    if ((v14 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
    {
      v21 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v14, 0, v15, v16, v17, v18, v19);
    }
    JSC::VM::throwException((JSC::VM *)v9, a1, v21, v20, v15, v16, v17, v18, v19);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v22, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    a2 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v24 = *(_DWORD *)(v9 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    {
      v33 = a2;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a2 = v33;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v10 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 4);
  if ((v10 & 0x80000000) != 0)
    return COERCE__INT64((double)v10) + 0x2000000000000;
  else
    return v10 | 0xFFFE000000000000;
}

unint64_t JSC::WebAssemblyTablePrototype::create(JSC::WebAssemblyTablePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;

  v10 = JSC::allocateCell<JSC::IntlCollatorPrototype>(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::WebAssemblyTablePrototype::finishCreation((JSC::WebAssemblyTablePrototype *)v10, this);
  return v10;
}

void JSC::WebAssemblyTablePrototype::finishCreation(JSC::WebAssemblyTablePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x1100000002;
  *(_QWORD *)(v5 + 8) = "WebAssembly.Table";
  *(_DWORD *)(v5 + 16) = 4;
  v33 = (WTF::StringImpl *)v5;
  v12 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v33, v6, v7, v8, v9, v10, v11);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v4, v12, 6, v13, v14, v15, v16);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

uint64_t JSC::WebAssemblyTablePrototype::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;

  v10 = 8215;
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)&JSC::WebAssemblyTablePrototype::s_info, 0, 0, a9, a4);
}

unint64_t JSC::WebAssemblyTagConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyTag, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyTag);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x300000002;
  *(_QWORD *)(v13 + 8) = "Tag";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyTagConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyTagConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callJSWebAssemblyTag(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Tag", 16);
}

unint64_t JSC::constructJSWebAssemblyTag(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const JSC::Wasm::Type *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  JSC::JSString *v21;
  int8x16_t v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  JSC::JSString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  JSC::JSString *v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  BOOL v79;
  int v81;
  JSC::VM *v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  JSC::VM *v91;
  unint64_t i;
  unint64_t v93;
  uint64_t v94;
  int8x16_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t **v109;
  int v110;
  JSC::VM *v111;
  JSC::VM *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int8x16_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  unsigned __int8 *v120;
  unsigned int *v122;
  unsigned int v123;
  int v124;
  WTF *v125;
  uint64_t v127;
  char **v128;
  uint64_t v129;
  JSC::JSGlobalObject *v130;
  unint64_t v131;
  unint64_t SubclassStructure;
  JSC::VM *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  JSC::VM *v145;
  int v148;
  _WORD *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  unsigned __int16 *v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  JSC::VMTraps *v159;
  JSC::VMTraps *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  JSC::VM *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  int v178;
  unsigned int v179;
  int v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  JSC::VM *v186;
  char *v187;
  char *v188;
  char OwnStaticPropertySlot;
  uint64_t v190;
  JSC::VM *v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  unsigned __int8 *v195;
  int v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  unint64_t v202;
  size_t v203;
  char *v204;
  char *v205;
  int v206;
  uint64_t v207;
  unsigned __int8 *v208;
  JSC::VM **v209;
  uint64_t v210;
  int v211;
  int v212;
  JSC::VM **p_dst;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  uint64_t (*v228)(WTF **);
  WTF **v229;
  uint64_t (*v230)(WTF **);
  WTF **v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int8x16_t v235;
  _BOOL4 v236;
  uint64_t v237;
  int8x16_t v238;
  int v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  int8x16_t **v245;
  int v246;
  JSC::VM *v247;
  uint64_t v248;
  unsigned __int8 *v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int *v252;
  uint64_t v253;
  WTF *Index;
  int v255;
  char v256;
  int v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int16 *v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  char v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  char v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unsigned __int8 *v281;
  unsigned int v282;
  int v283;
  unsigned __int8 *v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  JSC::JSString *v288;
  int v289;
  unint64_t v290;
  JSC::VMTraps *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  char v296;
  JSC::Structure *v297;
  JSC::VMTraps *v298;
  JSC::VMTraps *v299;
  JSC::VMTraps *v300;
  JSC::VMTraps *v301;
  JSC::VMTraps *v302;
  JSC::VMTraps *v303;
  WTF *v304;
  uint64_t v305;
  unint64_t v306;
  JSC::JSString *v307;
  JSC::JSString *v308;
  _QWORD v309[2];
  uint64_t v310;
  char v311;
  int8x16_t **v312;
  uint64_t v313;
  JSC::JSString *v314;
  JSC::VM *v315;
  uint64_t *v316[2];
  char v317;
  JSC::VM *__dst;
  uint64_t v319;
  _BYTE v320[256];
  char __s[32];
  uint64_t v322;

  v8 = (unint64_t)this;
  v322 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v315 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v10 = "WebAssembly.Tag constructor expects the tag type as the first argument.";
    v11 = 72;
    return JSC::throwTypeError((unint64_t)this, &v315, (uint64_t)v10, v11);
  }
  v314 = (JSC::JSString *)*((_QWORD *)a2 + 6);
  WTF::AtomStringImpl::addLiteral((uint64_t)"parameters", 0xAuLL, a4, a5, a6, a7, a8, &__dst);
  v20 = (unint64_t)__dst;
  v21 = v314;
  v22.i64[0] = 0xFFFFFFFF00000000;
  v306 = 0xFFFFFFFF00000000;
  LOBYTE(v310) = 0;
  v311 = 0;
  v312 = 0;
  v313 = 0;
  v308 = 0;
  memset(v309, 0, 13);
  v307 = v314;
  if (((unint64_t)v314 & 0xFFFE000000000002) != 0)
    goto LABEL_486;
  v23 = *(_QWORD *)(v8 + 56);
  v24 = *((unsigned __int8 *)v314 + 5);
  if (v24 > 0x16)
    goto LABEL_5;
  if (v24 != 2)
    goto LABEL_486;
  if (*(JSC::VM **)(*(_QWORD *)(v23 + 41952) + 1768) == __dst)
  {
    v251 = *((_QWORD *)v314 + 1);
    if ((v251 & 1) != 0)
      v252 = (unsigned int *)((char *)v314 + 16);
    else
      v252 = (unsigned int *)(v251 + 4);
    v253 = *v252;
    if ((v253 & 0x80000000) != 0)
    {
      *(double *)v22.i64 = (double)v253;
      Index = (WTF *)(COERCE__INT64((double)v253) + 0x2000000000000);
    }
    else
    {
      Index = (WTF *)(v253 | 0xFFFE000000000000);
    }
    v255 = 14;
    goto LABEL_477;
  }
  if (__dst)
  {
    v257 = *((_DWORD *)__dst + 4);
    if ((v257 & 0x20) == 0)
    {
      v258 = (_BYTE *)*((_QWORD *)__dst + 1);
      v259 = *((unsigned int *)__dst + 1);
      if ((v257 & 4) != 0)
      {
        if (!(_DWORD)v259)
          goto LABEL_483;
        v14 = *v258 - 48;
        if (v14 > 9 || v259 >= 2 && *v258 == 48)
          goto LABEL_483;
        v284 = v258 + 1;
        v285 = v259 - 1;
        while (v285)
        {
          if (v14 > 0x19999999)
            goto LABEL_483;
          v286 = *v284 - 48;
          if (v286 > 9)
            goto LABEL_483;
          v256 = 0;
          v60 = __CFADD__(v286, 10 * v14);
          v14 = v286 + 10 * (_DWORD)v14;
          ++v284;
          --v285;
          if (v60)
            goto LABEL_484;
        }
      }
      else
      {
        if (!(_DWORD)v259)
          goto LABEL_483;
        v14 = *(unsigned __int16 *)v258 - 48;
        if (v14 > 9)
          goto LABEL_483;
        if (*(_WORD *)v258 == 48 && v259 > 1)
          goto LABEL_483;
        v262 = (unsigned __int16 *)(v258 + 2);
        v263 = v259 - 1;
        while (v263)
        {
          if (v14 > 0x19999999)
            goto LABEL_483;
          v264 = *v262 - 48;
          if (v264 > 9)
            goto LABEL_483;
          v256 = 0;
          v60 = __CFADD__(v264, 10 * v14);
          v14 = v264 + 10 * (_DWORD)v14;
          ++v262;
          --v263;
          if (v60)
            goto LABEL_484;
        }
      }
      if ((_DWORD)v14 != -1)
      {
        v287 = *((_QWORD *)v314 + 1);
        v288 = (v287 & 1) != 0 ? (JSC::JSString *)((char *)v314 + 16) : (JSC::JSString *)(v287 + 4);
        if (*(_DWORD *)v288 > v14)
        {
          Index = (WTF *)JSC::JSString::getIndex(v314, (JSC::JSGlobalObject *)v8, v14, v15, (uint64_t)v16, v17, v18, v19, v22);
          if (!*(_DWORD *)(v23 + 80))
            goto LABEL_596;
          v289 = *(_DWORD *)(v23 + 80);
          if ((v289 & 0x27) != 0 && (v289 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
          if (!*(_QWORD *)(v23 + 16))
          {
LABEL_596:
            v255 = 10;
LABEL_477:
            v304 = Index;
            LODWORD(v306) = v255;
            v308 = 0;
            v256 = 1;
            BYTE1(v309[1]) = 1;
            goto LABEL_484;
          }
        }
      }
    }
  }
LABEL_483:
  v256 = 0;
LABEL_484:
  if (*(_DWORD *)(v23 + 80))
  {
    v283 = *(_DWORD *)(v23 + 80);
    if ((v283 & 0x27) != 0 && (v283 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
    if (*(_QWORD *)(v23 + 16))
      goto LABEL_573;
  }
  if ((v256 & 1) != 0)
    goto LABEL_109;
LABEL_486:
  v260 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v314, v8);
  if (!v260)
  {
LABEL_573:
    v53 = 10;
    goto LABEL_129;
  }
  v21 = (JSC::JSString *)v260;
  v23 = *(_QWORD *)(v8 + 56);
LABEL_5:
  v25 = (char *)v21 + 6;
  v26 = v20 >> 4;
  v27 = (uint64_t)v21;
  if ((*((_BYTE *)v21 + 6) & 8) == 0)
  {
    v28 = v21;
    do
    {
      v29 = *(_DWORD *)v28 & 0xFFFFFFFE;
      v30 = 16 * v29;
      if (!(_DWORD)v26 || (v26 & ~*(_DWORD *)(16 * v29 + 0x20)) != 0)
        goto LABEL_34;
      v31 = *(_QWORD *)(16 * v29 + 0x58);
      if (!v31)
      {
        v32 = *(_QWORD *)(16 * v29 + 0x40);
        if (!v32 || *(_BYTE *)(v32 + 5) != 1 && *(_DWORD *)(v32 + 80) < 2u)
          goto LABEL_34;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v30, (JSC::VM *)v23, 1, (const JSC::PropertyTable *)v15, (uint64_t)v16, v17, v18, v19);
        if (!v31)
          goto LABEL_34;
      }
      if (!*(_DWORD *)(v31 + 24))
        goto LABEL_34;
      v33 = *(_QWORD *)(v31 + 16);
      v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
      v35 = *(unsigned int *)(v31 + 8);
      v36 = *(_DWORD *)(v20 + 16);
      if ((v33 & 1) != 0)
      {
        if ((v36 & 0x20) != 0)
          v36 = *(_DWORD *)(v20 + 32);
        v37 = *(_DWORD *)(v31 + 12);
        v38 = (v36 >> 8) & *(_QWORD *)&v37;
        v39 = *(unsigned __int8 *)(v34 + v38);
        if (!*(_BYTE *)(v34 + v38))
          goto LABEL_34;
        v40 = v34 + v35;
        v41 = 1;
        while (1)
        {
          v42 = *(_QWORD *)(v40 + 8 * (v39 - 1));
          if (v20 == (v42 & 0xFFFFFFFFFFFFLL))
            break;
          v38 = ((_DWORD)v38 + v41) & v37;
          v39 = *(unsigned __int8 *)(v34 + v38);
          ++v41;
          if (!*(_BYTE *)(v34 + v38))
            goto LABEL_34;
        }
        v17 = (v42 >> 16) & 0xFF00000000 | HIBYTE(v42);
      }
      else
      {
        if ((v36 & 0x20) != 0)
          v36 = *(_DWORD *)(v20 + 32);
        v43 = *(_DWORD *)(v31 + 12);
        v44 = v43 & (v36 >> 8);
        v45 = *(_DWORD *)(v34 + 4 * v44);
        if (!v45)
          goto LABEL_34;
        v46 = v34 + 4 * v35;
        v47 = 1;
        while (1)
        {
          v48 = (v45 - 1);
          if (v20 == *(_QWORD *)(v46 + 16 * v48))
            break;
          v44 = (v44 + v47) & v43;
          v45 = *(_DWORD *)(v34 + 4 * v44);
          ++v47;
          if (!v45)
            goto LABEL_34;
        }
        v17 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
      }
      if ((_DWORD)v17 != -1)
      {
        v16 = (const JSC::Wasm::Type *)HIDWORD(v17);
        if ((int)v17 <= 63)
        {
          v54 = (uint64_t)v28 + 16;
          v55 = v17 << 32;
        }
        else
        {
          v54 = *((_QWORD *)v28 + 1) - 8;
          v55 = 0x3F00000000 - (v17 << 32);
        }
        v15 = *(_QWORD *)(v54 + (v55 >> 29));
        if ((v15 & 0xFFFE000000000002) != 0)
          goto LABEL_55;
        v56 = *(unsigned __int8 *)(v15 + 5);
        if (v56 == 5)
        {
          v71 = (unsigned int *)v28;
          v72 = v23;
          goto LABEL_108;
        }
        if (v56 != 6)
        {
LABEL_55:
          v304 = (WTF *)v15;
          v308 = v28;
          goto LABEL_56;
        }
        v106 = *(_DWORD *)(v30 + 16) & 3;
        v107 = *(_QWORD *)(v15 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v304 = *(WTF **)(v15 + 8);
          v305 = v107;
          LODWORD(v306) = HIDWORD(v17);
          v308 = v28;
          BYTE1(v309[1]) = 3;
          if (v106 == 2)
            goto LABEL_109;
          goto LABEL_380;
        }
        v109 = *(int8x16_t ***)(v15 + 24);
        v108 = *(_QWORD *)(v15 + 32);
        v304 = *(WTF **)(v15 + 8);
        v305 = v107;
        LODWORD(v306) = HIDWORD(v17);
        v308 = v28;
        BYTE1(v309[1]) = 3;
        if (v106 != 2)
          LOBYTE(v309[1]) = 1;
        BYTE3(v309[1]) = 1;
        v312 = v109;
        v313 = v108;
LABEL_109:
        if (BYTE1(v309[1]) == 1)
        {
          v53 = (uint64_t)v304;
        }
        else
        {
          if (BYTE1(v309[1]) == 2)
          {
            v73 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v304, (JSC::JSGlobalObject *)v8, v14, v15, (uint64_t)v16, v17, v18, v19);
          }
          else
          {
            v74 = v308;
            v75 = *(_QWORD *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0x28);
            if ((v306 & 0x20) != 0)
              v74 = v307;
            if (BYTE3(v309[1]) != 1)
              goto LABEL_127;
            if (((unint64_t)v74 & 0xFFFE000000000002) != 0)
              goto LABEL_447;
            v76 = *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C);
            v77 = *(_DWORD *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C) != 0;
            v78 = 16 * v76;
            if ((_DWORD)v76)
              v79 = v312 == (int8x16_t **)v78;
            else
              v79 = 1;
            if (!v79)
            {
              do
              {
                v78 = *(_QWORD *)(v78 + 16);
                v77 = v78 != 0;
              }
              while ((int8x16_t **)v78 != v312 && v78 != 0);
            }
            if (!v77)
            {
LABEL_447:
              __dst = *(JSC::VM **)(v8 + 56);
              v73 = JSC::throwDOMAttributeGetterTypeError(v75, &__dst, v312, (WTF::StringImpl *)v20);
            }
            else
            {
LABEL_127:
              v73 = ((uint64_t (*)(unint64_t))v304)(v75);
            }
          }
          v53 = v73;
        }
        goto LABEL_129;
      }
LABEL_34:
      if ((*v25 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v28, (JSC::VM *)v23, v20, (uint64_t)&v304) & 1) != 0)
      {
        goto LABEL_109;
      }
      v27 = *(_QWORD *)(v30 + 48);
      if (!v27)
        v27 = *((_QWORD *)v28 + 2);
      if ((v27 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v27 + 5) < 0x17u)
      {
        if (!v20)
          goto LABEL_48;
        v49 = *(_DWORD *)(v20 + 16);
        if ((v49 & 0x20) != 0)
          goto LABEL_48;
        v50 = *(_BYTE **)(v20 + 8);
        v51 = *(unsigned int *)(v20 + 4);
        if ((v49 & 4) != 0)
        {
          v247 = v9;
          if (!(_DWORD)v51 || (v52 = *v50 - 48, v52 > 9) || v51 >= 2 && *v50 == 48)
          {
            v53 = 10;
LABEL_455:
            v9 = v247;
            goto LABEL_129;
          }
          v248 = v51 - 1;
          v249 = v50 + 1;
          v53 = 10;
          while (v248)
          {
            if (v52 > 0x19999999)
              goto LABEL_455;
            v250 = *v249 - 48;
            if (v250 > 9)
              goto LABEL_455;
            v60 = __CFADD__(v250, 10 * v52);
            v52 = v250 + 10 * v52;
            --v248;
            ++v249;
            v9 = v247;
            if (v60)
              goto LABEL_129;
          }
          v9 = v247;
          if (v52 == -1)
            goto LABEL_48;
        }
        else
        {
          if (!(_DWORD)v51)
            goto LABEL_48;
          v52 = *(unsigned __int16 *)v50 - 48;
          if (v52 > 9 || *(_WORD *)v50 == 48 && v51 > 1)
            goto LABEL_48;
          v57 = v51 - 1;
          v58 = (unsigned __int16 *)(v50 + 2);
          v53 = 10;
          while (v57)
          {
            if (v52 <= 0x19999999)
            {
              v59 = *v58 - 48;
              if (v59 <= 9)
              {
                v60 = __CFADD__(v59, 10 * v52);
                v52 = v59 + 10 * v52;
                --v57;
                ++v58;
                if (!v60)
                  continue;
              }
            }
            goto LABEL_129;
          }
          if (v52 == -1)
            goto LABEL_48;
        }
        v61 = v52;
        v62 = *(_QWORD *)(v8 + 56);
        v300 = (JSC::VMTraps *)(v62 + 64);
        v53 = 10;
        while (2)
        {
          v63 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
          v64 = (*(uint64_t (**)(JSC::JSString *, unint64_t, unint64_t, WTF **))(16 * *(unsigned int *)(v63 + 0x4C) + 0x70))(v21, v8, v61, &v304);
          if (*(_DWORD *)(v62 + 80))
          {
            v67 = *(_DWORD *)(v62 + 80);
            if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v300, 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
            if (*(_QWORD *)(v62 + 16))
              goto LABEL_129;
          }
          if ((v64 & 1) != 0)
            goto LABEL_109;
          if (BYTE2(v309[1]) == 3)
          {
            if (BYTE4(v309[1]))
              goto LABEL_129;
            v65 = *((unsigned __int8 *)v21 + 5);
            if (v65 != 61)
              goto LABEL_71;
          }
          else
          {
            v65 = *((unsigned __int8 *)v21 + 5);
            if (v65 == 61)
            {
              if (BYTE2(v309[1]) == 1)
                goto LABEL_129;
            }
            else
            {
LABEL_71:
              if ((v65 - 39) <= 0xA)
              {
                if ((*((_BYTE *)v21 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v319) = 0;
                  v69 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v21, (uint64_t)&__dst, v14, v15, (uint64_t)v16, v17, v18, v19);
                  v68 = (_BYTE)v13 ? v69 : 0;
                }
                else
                {
                  v68 = *((_QWORD *)v21 + 3);
                }
                if (v68 <= v61)
                  goto LABEL_129;
              }
            }
          }
          if ((*(_WORD *)(v63 + 12) & 0x800) == 0 || BYTE2(v309[1]) == 3)
          {
            v66 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x30);
            if (!v66)
              v66 = *((_QWORD *)v21 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v66 = (*(uint64_t (**)(JSC::JSString *, unint64_t))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0xB0))(v21, v8);
            }
            else
            {
              v66 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x30);
              if (!v66)
                v66 = *((_QWORD *)v21 + 2);
            }
            if (*(_DWORD *)(v62 + 80))
            {
              v70 = *(_DWORD *)(v62 + 80);
              if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v300, 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
              if (*(_QWORD *)(v62 + 16))
                goto LABEL_129;
            }
          }
          if ((v66 & 0xFFFE000000000002) != 0)
            goto LABEL_129;
          v21 = (JSC::JSString *)v66;
          if (*(unsigned __int8 *)(v66 + 5) <= 0x16u)
            goto LABEL_129;
          continue;
        }
      }
      v25 = (_BYTE *)(v27 + 6);
      v28 = (JSC::JSString *)v27;
    }
    while ((*(_BYTE *)(v27 + 6) & 8) == 0);
  }
  if (!v20)
    goto LABEL_251;
  v148 = *(_DWORD *)(v20 + 16);
  if ((v148 & 0x20) != 0)
    goto LABEL_251;
  v149 = *(_WORD **)(v20 + 8);
  v150 = *(unsigned int *)(v20 + 4);
  if ((v148 & 4) == 0)
  {
    if ((_DWORD)v150)
    {
      v151 = (unsigned __int16)*v149 - 48;
      if (v151 <= 9 && (*v149 != 48 || v150 <= 1))
      {
        v155 = v149 + 1;
        v156 = v150 - 1;
        while (v156)
        {
          if (v151 > 0x19999999)
            goto LABEL_231;
          v157 = *v155 - 48;
          if (v157 > 9)
            goto LABEL_231;
          v152 = 0;
          LOBYTE(v150) = 0;
          v153 = 0;
          v60 = __CFADD__(v157, 10 * v151);
          v151 = v157 + 10 * v151;
          ++v155;
          --v156;
          if (v60)
            goto LABEL_250;
        }
        v153 = v151 & 0xFFFFFF00;
        v152 = 0x100000000;
        if (v151 == -1)
        {
          v152 = 0;
          LOBYTE(v150) = 0;
        }
        else
        {
          LOBYTE(v150) = v151;
        }
        if (v151 == -1)
          v153 = 0;
LABEL_250:
        v158 = v150;
        if ((v152 & 0x100000000) == 0)
        {
LABEL_251:
          v159 = *(JSC::VMTraps **)(v8 + 56);
          v160 = (JSC::VMTraps *)((char *)v159 + 64);
          v161 = &__s[1];
          v162 = &__s[3];
          v53 = 10;
          while (1)
          {
            v13 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
            if ((*(_BYTE *)(v27 + 6) & 8) == 0)
            {
              if ((_DWORD)v26 && (v26 & ~*(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x20)) == 0)
              {
                v163 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x58);
                if (v163)
                  goto LABEL_605;
                v164 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x40);
                if (v164 && (*(_BYTE *)(v164 + 5) == 1 || *(_DWORD *)(v164 + 80) >= 2u))
                {
                  v297 = (JSC::Structure *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE));
                  v301 = v159;
                  v165 = v159;
                  v166 = v161;
                  v167 = v162;
                  JSC::Structure::materializePropertyTable(v297, v165, 1, (const JSC::PropertyTable *)v15, (uint64_t)v16, v17, v18, v19);
                  v162 = v167;
                  v161 = v166;
                  v13 = (uint64_t)v297;
                  v159 = v301;
                  if (v163)
                  {
LABEL_605:
                    if (*(_DWORD *)(v163 + 24))
                    {
                      v168 = *(_QWORD *)(v163 + 16);
                      v169 = v168 & 0xFFFFFFFFFFFFFFFELL;
                      v170 = *(unsigned int *)(v163 + 8);
                      v171 = *(_DWORD *)(v20 + 16);
                      if ((v168 & 1) != 0)
                      {
                        if ((v171 & 0x20) != 0)
                          v171 = *(_DWORD *)(v20 + 32);
                        v172 = *(_DWORD *)(v163 + 12);
                        v173 = (v171 >> 8) & *(_QWORD *)&v172;
                        v174 = *(unsigned __int8 *)(v169 + v173);
                        if (*(_BYTE *)(v169 + v173))
                        {
                          v175 = v169 + v170;
                          v176 = 1;
                          while (1)
                          {
                            v177 = *(_QWORD *)(v175 + 8 * (v174 - 1));
                            if (v20 == (v177 & 0xFFFFFFFFFFFFLL))
                              break;
                            v173 = ((_DWORD)v173 + v176) & v172;
                            v174 = *(unsigned __int8 *)(v169 + v173);
                            ++v176;
                            if (!*(_BYTE *)(v169 + v173))
                              goto LABEL_280;
                          }
                          v17 = (v177 >> 16) & 0xFF00000000 | HIBYTE(v177);
LABEL_277:
                          if ((_DWORD)v17 != -1)
                          {
                            v16 = (const JSC::Wasm::Type *)HIDWORD(v17);
                            if ((int)v17 <= 63)
                            {
                              v219 = v27 + 16;
                              v220 = v17 << 32;
                            }
                            else
                            {
                              v219 = *(_QWORD *)(v27 + 8) - 8;
                              v220 = 0x3F00000000 - (v17 << 32);
                            }
                            v15 = *(_QWORD *)(v219 + (v220 >> 29));
                            if ((v15 & 0xFFFE000000000002) == 0)
                            {
                              v221 = *(unsigned __int8 *)(v15 + 5);
                              if (v221 != 5)
                              {
                                if (v221 != 6)
                                  goto LABEL_378;
                                v242 = *(_DWORD *)(v13 + 16) & 3;
                                v243 = *(_QWORD *)(v15 + 16);
                                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
                                {
                                  v245 = *(int8x16_t ***)(v15 + 24);
                                  v244 = *(_QWORD *)(v15 + 32);
                                  v304 = *(WTF **)(v15 + 8);
                                  v305 = v243;
                                  LODWORD(v306) = HIDWORD(v17);
                                  v308 = (JSC::JSString *)v27;
                                  BYTE1(v309[1]) = 3;
                                  if (v242 != 2)
                                    LOBYTE(v309[1]) = 1;
                                  BYTE3(v309[1]) = 1;
                                  v312 = v245;
                                  v313 = v244;
                                  goto LABEL_109;
                                }
                                v304 = *(WTF **)(v15 + 8);
                                v305 = v243;
                                LODWORD(v306) = HIDWORD(v17);
                                v308 = (JSC::JSString *)v27;
                                BYTE1(v309[1]) = 3;
                                if (v242 == 2)
                                  goto LABEL_109;
LABEL_380:
                                LOBYTE(v309[1]) = 1;
                                goto LABEL_109;
                              }
                              v71 = (unsigned int *)v27;
                              v72 = (uint64_t)v159;
LABEL_108:
                              JSC::JSObject::fillGetterPropertySlot(v71, v72, (uint64_t)&v304, v15, (int)v16, v17);
                              goto LABEL_109;
                            }
LABEL_378:
                            v304 = (WTF *)v15;
                            v308 = (JSC::JSString *)v27;
LABEL_56:
                            v306 = __PAIR64__(v17, v16);
                            LOWORD(v309[1]) = 257;
                            goto LABEL_109;
                          }
                        }
                      }
                      else
                      {
                        if ((v171 & 0x20) != 0)
                          v171 = *(_DWORD *)(v20 + 32);
                        v178 = *(_DWORD *)(v163 + 12);
                        v179 = v178 & (v171 >> 8);
                        v180 = *(_DWORD *)(v169 + 4 * v179);
                        if (v180)
                        {
                          v181 = v169 + 4 * v170;
                          v182 = 1;
                          while (1)
                          {
                            v183 = (v180 - 1);
                            if (v20 == *(_QWORD *)(v181 + 16 * v183))
                              break;
                            v179 = (v179 + v182) & v178;
                            v180 = *(_DWORD *)(v169 + 4 * v179);
                            ++v182;
                            if (!v180)
                              goto LABEL_280;
                          }
                          v17 = *(unsigned int *)(v181 + 16 * v183 + 8) | ((unint64_t)*(unsigned __int8 *)(v181 + 16 * v183 + 12) << 32);
                          goto LABEL_277;
                        }
                      }
                    }
                  }
                }
              }
LABEL_280:
              if ((*(_BYTE *)(v27 + 6) & 0x20) != 0)
              {
                v298 = (JSC::VMTraps *)v13;
                v302 = v159;
                v186 = v159;
                v187 = v161;
                v188 = v162;
                OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v27, v186, v20, (uint64_t)&v304);
                v162 = v188;
                v161 = v187;
                v13 = (uint64_t)v298;
                v159 = v302;
                if ((OwnStaticPropertySlot & 1) != 0)
                  goto LABEL_109;
              }
              goto LABEL_281;
            }
            v293 = v162;
            v295 = v161;
            v291 = v160;
            v191 = v9;
            v299 = (JSC::VMTraps *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE));
            v296 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF **))(16 * *((unsigned int *)v299 + 19)
                                                                                                  + 0x68))(v27, v8, v20, &v304);
            if (*((_DWORD *)v159 + 20))
            {
              v217 = *((_DWORD *)v159 + 20);
              if ((v217 & 0x27) != 0 && (v217 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v291, 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
              if (*((_QWORD *)v159 + 2))
                goto LABEL_129;
            }
            if ((v296 & 1) != 0)
              goto LABEL_109;
            if (BYTE2(v309[1]) == 3)
            {
              if (BYTE4(v309[1]))
                goto LABEL_129;
              v192 = *(unsigned __int8 *)(v27 + 5);
              if (v192 == 61)
                goto LABEL_352;
            }
            else
            {
              v192 = *(unsigned __int8 *)(v27 + 5);
              if (v192 == 61)
              {
                v160 = v291;
                v162 = v293;
                v161 = v295;
                v13 = (uint64_t)v299;
                if (BYTE2(v309[1]) == 1)
                  goto LABEL_129;
                goto LABEL_281;
              }
            }
            if (!v20)
              goto LABEL_352;
            if ((v192 - 50) < 0xFFFFFFF5)
              goto LABEL_352;
            v193 = *(_DWORD *)(v20 + 16);
            if ((v193 & 0x20) != 0)
              goto LABEL_352;
            v194 = *(unsigned int *)(v20 + 4);
            if (!(_DWORD)v194)
              goto LABEL_352;
            v195 = *(unsigned __int8 **)(v20 + 8);
            if ((v193 & 4) != 0)
            {
              v196 = *v195;
              if ((_DWORD)v194 == 1)
              {
LABEL_306:
                v160 = v291;
                v162 = v293;
                v161 = v295;
                v13 = (uint64_t)v299;
                if ((v196 - 48) < 0xA)
                  goto LABEL_129;
                goto LABEL_281;
              }
              if (v196 == 45)
              {
                v196 = v195[1];
                goto LABEL_310;
              }
              if ((v196 - 48) < 0xA)
                goto LABEL_321;
              if ((_DWORD)v194 == 8)
                goto LABEL_320;
            }
            else
            {
              v196 = *(unsigned __int16 *)v195;
              if ((_DWORD)v194 == 1)
                goto LABEL_306;
              if (v196 == 45)
              {
                v196 = *((unsigned __int16 *)v195 + 1);
LABEL_310:
                if ((v196 - 48) < 0xA)
                {
                  if ((_DWORD)v194 == 2)
                    goto LABEL_129;
                  goto LABEL_321;
                }
                if ((_DWORD)v194 != 9)
                  goto LABEL_352;
LABEL_320:
                if (v196 != 73)
                  goto LABEL_352;
                goto LABEL_321;
              }
              if ((v196 - 48) < 0xA || (_DWORD)v194 == 8 && v196 == 73)
                goto LABEL_321;
            }
            if ((_DWORD)v194 != 3 || v196 != 78)
              goto LABEL_352;
LABEL_321:
            v290 = v290 & 0xFFFFFF0000000000 | v194 | ((unint64_t)((v193 >> 2) & 1) << 32);
            JSC::jsToNumber(v195, v290);
            v198 = (v197 >> 52) & 0x7FF;
            if ((_DWORD)v198 == 2047)
            {
              if ((v197 & 0xFFFFFFFFFFFFFLL) != 0)
              {
                qmemcpy(__s, "NaN", 3);
                v199 = v293;
              }
              else
              {
                if ((v197 & 0x8000000000000000) != 0)
                {
                  __s[0] = 45;
                  v205 = v295;
                }
                else
                {
                  v205 = __s;
                }
                *(_QWORD *)v205 = 0x7974696E69666E49;
                v199 = v205 + 8;
              }
              goto LABEL_335;
            }
            v200 = v197 & 0x7FFFFFFFFFFFFFFFLL;
            if ((v197 & 0x8000000000000000) != 0 && v200)
            {
              __s[0] = 45;
              v201 = v295;
            }
            else
            {
              if (!v200)
              {
                __s[0] = 48;
                v199 = v295;
                goto LABEL_335;
              }
              v201 = __s;
            }
            v202 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v197 & 0x800FFFFFFFFFFFFFLL, v198);
            v199 = WTF::dragonbox::detail::to_shortest(v202, v203, (uint64_t)v201, v204);
LABEL_335:
            *v199 = 0;
            v206 = strlen(__s);
            memcpy(&__dst, __s, v206);
            *((_BYTE *)&__dst + v206) = 0;
            v207 = *(unsigned int *)(v20 + 4);
            v208 = *(unsigned __int8 **)(v20 + 8);
            if ((*(_BYTE *)(v20 + 16) & 4) != 0)
            {
              if ((_DWORD)v207)
              {
                p_dst = &__dst;
                v214 = *(unsigned int *)(v20 + 4);
                do
                {
                  v216 = *(unsigned __int8 *)p_dst;
                  p_dst = (JSC::VM **)((char *)p_dst + 1);
                  v215 = v216;
                  if (!v216 || *v208 != v215)
                    goto LABEL_349;
                  ++v208;
                }
                while (--v214);
              }
            }
            else if ((_DWORD)v207)
            {
              v209 = &__dst;
              v210 = *(unsigned int *)(v20 + 4);
              while (1)
              {
                v212 = *(unsigned __int8 *)v209;
                v209 = (JSC::VM **)((char *)v209 + 1);
                v211 = v212;
                if (!v212 || *(unsigned __int16 *)v208 != v211)
                  break;
                v208 += 2;
                if (!--v210)
                  goto LABEL_347;
              }
LABEL_349:
              v9 = v191;
LABEL_352:
              v160 = v291;
              v162 = v293;
              v161 = v295;
              v13 = (uint64_t)v299;
              goto LABEL_281;
            }
LABEL_347:
            v9 = v191;
            v160 = v291;
            v162 = v293;
            v161 = v295;
            v13 = (uint64_t)v299;
            if (!*((_BYTE *)&__dst + v207))
              goto LABEL_129;
LABEL_281:
            if ((*(_WORD *)(v13 + 12) & 0x800) == 0)
            {
              v184 = *(_DWORD *)v27;
LABEL_283:
              v185 = *(_QWORD *)(16 * (v184 & 0xFFFFFFFE) + 0x30);
              if (!v185)
                v185 = *(_QWORD *)(v27 + 16);
              goto LABEL_285;
            }
            v184 = *(_DWORD *)v27;
            if (BYTE2(v309[1]) == 3)
              goto LABEL_283;
            v292 = v162;
            v294 = v161;
            v190 = 16 * (v184 & 0xFFFFFFFE);
            if ((*(_WORD *)(v190 + 12) & 0x800) != 0)
            {
              v185 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v190 + 76) + 0xB0))(v27, v8);
            }
            else
            {
              v185 = *(_QWORD *)(v190 + 48);
              if (!v185)
                v185 = *(_QWORD *)(v27 + 16);
            }
            if (*((_DWORD *)v159 + 20))
            {
              v218 = *((_DWORD *)v159 + 20);
              if ((v218 & 0x27) != 0 && (v218 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v160, 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
              v162 = v292;
              v161 = v294;
              if (*((_QWORD *)v159 + 2))
                goto LABEL_129;
            }
            else
            {
              v162 = v292;
              v161 = v294;
            }
LABEL_285:
            if ((v185 & 0xFFFE000000000002) == 0)
            {
              v27 = v185;
              if (*(unsigned __int8 *)(v185 + 5) > 0x16u)
                continue;
            }
            goto LABEL_129;
          }
        }
        goto LABEL_505;
      }
LABEL_231:
      v152 = 0;
      LOBYTE(v150) = 0;
    }
    else
    {
      v152 = 0;
    }
    v153 = 0;
    goto LABEL_250;
  }
  if (!(_DWORD)v150)
  {
    v158 = 0;
    goto LABEL_503;
  }
  v265 = *(unsigned __int8 *)v149 - 48;
  if (v265 > 9 || v150 >= 2 && *(_BYTE *)v149 == 48)
  {
LABEL_502:
    v158 = 0;
    LOBYTE(v150) = 0;
LABEL_503:
    v266 = 0;
    goto LABEL_504;
  }
  v280 = v150 - 1;
  v281 = (unsigned __int8 *)v149 + 1;
  while (v280)
  {
    if (v265 > 0x19999999)
      goto LABEL_502;
    v282 = *v281 - 48;
    if (v282 > 9)
      goto LABEL_502;
    v158 = 0;
    LOBYTE(v150) = 0;
    v266 = 0;
    v60 = __CFADD__(v282, 10 * v265);
    v265 = v282 + 10 * v265;
    --v280;
    ++v281;
    if (v60)
      goto LABEL_504;
  }
  if (v265 == -1)
    v158 = 0;
  else
    v158 = v265 & 0xFFFFFF00;
  if (v265 == -1)
    LOBYTE(v150) = 0;
  else
    LOBYTE(v150) = v265;
  if (v265 == -1)
    v266 = 0;
  else
    v266 = 0x100000000;
LABEL_504:
  v153 = v150;
  if ((v266 & 0x100000000) == 0)
    goto LABEL_251;
LABEL_505:
  v267 = v153 | v158;
  v268 = *(_QWORD *)(v8 + 56);
  v303 = (JSC::VMTraps *)(v268 + 64);
  v53 = 10;
  while (1)
  {
    v269 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
    v270 = (*(uint64_t (**)(JSC::JSString *, unint64_t, unint64_t, WTF **))(16 * *(unsigned int *)(v269 + 0x4C)
                                                                                                  + 0x70))(v21, v8, v267, &v304);
    v271 = v270;
    if (*(_DWORD *)(v268 + 80))
      break;
    if ((v270 & 1) != 0)
      goto LABEL_109;
LABEL_508:
    if (BYTE2(v309[1]) == 3)
    {
      if (BYTE4(v309[1]))
        goto LABEL_129;
      v272 = *((unsigned __int8 *)v21 + 5);
      if (v272 == 61)
        goto LABEL_511;
    }
    else
    {
      v272 = *((unsigned __int8 *)v21 + 5);
      if (v272 == 61)
      {
        if (BYTE2(v309[1]) == 1)
          goto LABEL_129;
        goto LABEL_511;
      }
    }
    if ((v272 - 39) <= 0xA)
    {
      if ((*((_BYTE *)v21 + 40) & 7u) > 2)
      {
        LOBYTE(__dst) = 0;
        LOBYTE(v319) = 0;
        v279 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v21, (uint64_t)&__dst, v14, v15, (uint64_t)v16, v17, v18, v19);
        v278 = (_BYTE)v13 ? v279 : 0;
      }
      else
      {
        v278 = *((_QWORD *)v21 + 3);
      }
      if (v278 <= v267)
        goto LABEL_129;
    }
LABEL_511:
    if ((*(_WORD *)(v269 + 12) & 0x800) == 0 || BYTE2(v309[1]) == 3)
    {
      v273 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x30);
      if (!v273)
        v273 = *((_QWORD *)v21 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v273 = (*(uint64_t (**)(JSC::JSString *, unint64_t))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v21, v8);
      }
      else
      {
        v273 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x30);
        if (!v273)
          v273 = *((_QWORD *)v21 + 2);
      }
      if (*(_DWORD *)(v268 + 80))
      {
        v277 = *(_DWORD *)(v268 + 80);
        if ((v277 & 0x27) != 0 && (v277 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v303, 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
        if (*(_QWORD *)(v268 + 16))
          goto LABEL_129;
      }
    }
    if ((v273 & 0xFFFE000000000002) == 0)
    {
      v21 = (JSC::JSString *)v273;
      if (*(unsigned __int8 *)(v273 + 5) > 0x16u)
        continue;
    }
    goto LABEL_129;
  }
  v274 = *(_DWORD *)(v268 + 80);
  if ((v274 & 0x27) != 0 && (v274 & 0x20) == 0)
    JSC::VMTraps::handleTraps(v303, 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
  v275 = *(_QWORD *)(v268 + 16);
  if (v275)
    v276 = 1;
  else
    v276 = v271;
  if ((v276 & 1) == 0)
    goto LABEL_508;
  if (!v275)
    goto LABEL_109;
LABEL_48:
  v53 = 10;
LABEL_129:
  if (v311)
  {
    v81 = *(_DWORD *)(v310 + 4);
    if (!v81)
    {
      __break(0xC471u);
      JUMPOUT(0x198E60CC0);
    }
    *(_DWORD *)(v310 + 4) = v81 - 1;
  }
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, (WTF::AtomStringImpl *)v13, v14, v15, (uint64_t)v16, v17, v18, v19);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v82 = v315;
  if (*((_DWORD *)v315 + 20))
  {
    v154 = *((_DWORD *)v315 + 20);
    if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v315 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
    if (*((_QWORD *)v82 + 2))
      return 0;
  }
  if ((v53 & 0xFFFE000000000002) != 0 || (v83 = *(unsigned __int8 *)(v53 + 5), v83 <= 0x16))
  {
    v10 = "WebAssembly.Tag constructor expects a tag type with the 'parameters' property.";
    this = (JSC *)v8;
    v11 = 79;
    return JSC::throwTypeError((unint64_t)this, &v315, (uint64_t)v10, v11);
  }
  __dst = (JSC::VM *)v320;
  v319 = 16;
  v304 = (WTF *)&__dst;
  v84 = *(_QWORD *)(v8 + 56);
  if (v83 == 36
    && ((v85 = *(unsigned __int8 *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 8), (v85 & 0x10) != 0)
      ? (v86 = ((v85 & 0xE) + 10) >> 1)
      : (v86 = (v85 >> 1) & 7),
        (v87 = *(_DWORD *)(v8 + 4 * v86 + 852)) != 0 ? (v88 = 16 * (v87 & 0xFFFFFFFE)) : (v88 = 0),
        v88 == 16 * (*(_DWORD *)v53 & 0xFFFFFFFE)
     && ((v89 = *(_QWORD *)(v8 + 2216), (v89 & 1) != 0)
       ? (v90 = (v89 >> 1) & 3)
       : (v90 = *(unsigned __int8 *)(v89 + 4)),
         v90 != 2)))
  {
    v91 = v9;
    for (i = 0; ; ++i)
    {
      v93 = (*(_BYTE *)(v53 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(v53 + 8) - 8) : 0;
      if (i >= v93)
        break;
      v94 = JSC::JSObject::getIndex((JSC::JSObject *)v53, (JSC::JSGlobalObject *)v8, i, v15, (uint64_t)v16, v17, v18, v19);
      if (*(_DWORD *)(v84 + 80))
      {
        v96 = *(_DWORD *)(v84 + 80);
        if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v84 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
        if (*(_QWORD *)(v84 + 16))
          break;
      }
      JSC::constructJSWebAssemblyTag(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()<JSC::VM,JSC::JSGlobalObject>((uint64_t *)&v304, v84, (JSC::JSGlobalObject *)v8, v94, (uint64_t)v16, v17, v18, v19, v95);
      if (*(_QWORD *)(v84 + 16))
      {
        v110 = *(_DWORD *)(v8 + 1000);
        if (v110)
          v111 = (JSC::VM *)(16 * (v110 & 0xFFFFFFFE));
        else
          v111 = 0;
        v112 = JSC::JSArrayIterator::create(v84, v111, v53, 0xFFFE000000000001, (uint64_t)v16, v17, v18, v19);
        v115 = (uint64_t)v112;
        *(double *)v116.i64 = (double)(i + 1);
        if ((int)i + 1 < 0)
          v117 = COERCE__INT64((double)(i + 1)) + 0x2000000000000;
        else
          v117 = (i + 1) | 0xFFFE000000000000;
        *((_QWORD *)v112 + 2) = v117;
        goto LABEL_177;
      }
    }
  }
  else
  {
    v91 = v9;
    v115 = JSC::iteratorForIterable((JSC::VM **)v8, v53, v14, v15, (uint64_t)v16, v17, v18, v19, v22);
    v232 = v13;
    if (!*(_DWORD *)(v84 + 80))
      goto LABEL_420;
    v246 = *(_DWORD *)(v84 + 80);
    if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v84 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
    if (!*(_QWORD *)(v84 + 16))
    {
LABEL_420:
      while (1)
      {
        v233 = *(_QWORD *)(v8 + 56);
        v234 = JSC::iteratorNext((JSC::JSGlobalObject *)v8, v115, v232, 0, (uint64_t)v16, v17, v18, v19);
        if (*(_DWORD *)(v233 + 80))
        {
          v239 = *(_DWORD *)(v233 + 80);
          if ((v239 & 0x27) != 0 && (v239 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v233 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
          if (*(_QWORD *)(v233 + 16))
            goto LABEL_418;
        }
        v236 = JSC::iteratorComplete((JSC::JSGlobalObject *)v8, v234, v14, v15, (uint64_t)v16, v17, v18, v19, v235);
        if (!*(_DWORD *)(v233 + 80))
          goto LABEL_405;
        v240 = *(_DWORD *)(v233 + 80);
        if ((v240 & 0x27) != 0 && (v240 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v233 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
        if (*(_QWORD *)(v233 + 16))
LABEL_418:
          v13 = 0;
        else
LABEL_405:
          v13 = v236 ? 6 : v234;
        if (*(_QWORD *)(v84 + 16) || v13 == 6)
          break;
        v237 = JSC::iteratorValue((JSC::JSGlobalObject *)v8, v13, v14, v15, (uint64_t)v16, v17, v18, v19, v235);
        if (*(_DWORD *)(v84 + 80))
        {
          v241 = *(_DWORD *)(v84 + 80);
          if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v84 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
          if (*(_QWORD *)(v84 + 16))
            break;
        }
        JSC::constructJSWebAssemblyTag(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()<JSC::VM,JSC::JSGlobalObject>((uint64_t *)&v304, v84, (JSC::JSGlobalObject *)v8, v237, (uint64_t)v16, v17, v18, v19, v238);
        if (*(_QWORD *)(v84 + 16))
        {
LABEL_177:
          JSC::iteratorClose((JSC::JSGlobalObject *)v8, v115, v113, v114, (uint64_t)v16, v17, v18, v19, v116);
          break;
        }
      }
    }
  }
  if (*((_DWORD *)v82 + 20))
  {
    v222 = *((_DWORD *)v82 + 20);
    if ((v222 & 0x27) != 0 && (v222 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v82 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
    if (*((_QWORD *)v82 + 2))
    {
      v97 = 0;
      goto LABEL_220;
    }
  }
  v304 = (WTF *)&v306;
  v305 = 16;
  v118 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v118 != -1)
  {
    *(_QWORD *)__s = &v317;
    v316[0] = (uint64_t *)__s;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v316, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v119 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v120 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
    goto LABEL_184;
  }
  if (__stxr(1u, v120))
LABEL_184:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v120);
  v316[0] = (uint64_t *)&v304;
  v316[1] = (uint64_t *)&__dst;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v119, v316, (uint64_t)v316, v15, v16, v17, v18, v19, (uint64_t)__s);
  v122 = **(unsigned int ***)__s;
  if (**(_QWORD **)__s)
  {
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 + 1, v122));
  }
  v124 = __ldxr(v120);
  if (v124 == 1)
  {
    if (!__stlxr(0, v120))
      goto LABEL_192;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v120, 0, v14, v15, (uint64_t)v16, v17, v18, v19);
LABEL_192:
  v125 = v304;
  if (&v306 != (unint64_t *)v304 && v304 != 0)
  {
    v304 = 0;
    LODWORD(v305) = 0;
    WTF::fastFree((unint64_t)v125, (void *)v13, v14, v15, (uint64_t)v16, v17, v18, v19);
  }
  v127 = *((_QWORD *)a2 + 5);
  if (v127 == *((_QWORD *)a2 + 3))
  {
    SubclassStructure = *(_QWORD *)(v8 + 1456);
    if ((SubclassStructure & 1) != 0)
    {
      v230 = *(uint64_t (**)(WTF **))(SubclassStructure & 0xFFFFFFFFFFFFFFFCLL);
      v231 = (WTF **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v8 & 8) != 0)
        v231 = (WTF **)(v8 - 16);
      v304 = *v231;
      v305 = v8;
      v306 = v8 + 1456;
      SubclassStructure = v230(&v304);
    }
  }
  else
  {
    v304 = *(WTF **)(v8 + 56);
    while (1)
    {
      while (1)
      {
        v128 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v127 & 0xFFFFFFFE) + 0x4C));
        if (v128 != &JSC::JSBoundFunction::s_info && v128 != &JSC::JSRemoteFunction::s_info)
          break;
        v127 = *(_QWORD *)(v127 + 32);
      }
      if (*(_BYTE *)(v127 + 5) != 61)
      {
        v129 = *(_QWORD *)(16 * (*(_DWORD *)v127 & 0xFFFFFFFE) + 0x28);
        goto LABEL_206;
      }
      if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v127))
        break;
      v127 = *(_QWORD *)(v127 + 16);
    }
    JSC::throwTypeError(v8, &v304, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v129 = 0;
    if (!*((_DWORD *)v91 + 20))
      goto LABEL_207;
LABEL_206:
    v227 = *((_DWORD *)v91 + 20);
    if ((v227 & 0x27) != 0 && (v227 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v91 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
    if (*((_QWORD *)v91 + 2))
    {
      SubclassStructure = 0;
    }
    else
    {
LABEL_207:
      v130 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
      v131 = *(_QWORD *)(v129 + 1456);
      if ((v131 & 1) != 0)
      {
        v228 = *(uint64_t (**)(WTF **))(v131 & 0xFFFFFFFFFFFFFFFCLL);
        v229 = (WTF **)(v129 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v129 & 8) != 0)
          v229 = (WTF **)(v129 - 16);
        v304 = *v229;
        v305 = v129;
        v306 = v129 + 1456;
        v131 = v228(&v304);
      }
      SubclassStructure = (unint64_t)JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)v8, v130, (JSC::JSObject *)v131, (JSC::Structure *)v15, (uint64_t)v16, v17, v18, v19);
    }
  }
  v133 = v315;
  if (!*((_DWORD *)v315 + 20))
    goto LABEL_211;
  v223 = *((_DWORD *)v315 + 20);
  if ((v223 & 0x27) != 0 && (v223 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v315 + 64), 7u, v14, v15, (uint64_t)v16, v17, v18, v19);
  if (*((_QWORD *)v133 + 2))
  {
    v97 = 0;
  }
  else
  {
LABEL_211:
    v134 = WTF::fastMalloc((WTF *)0x10);
    v139 = v134;
    *(_DWORD *)v134 = 1;
    do
      v140 = __ldaxr(v122);
    while (__stlxr(v140 + 1, v122));
    *(_QWORD *)(v134 + 8) = v122;
    v97 = JSC::JSWebAssemblyTag::create(v91, (JSC::VM *)v8, SubclassStructure, (unsigned int *)v134, v135, v136, v137, v138);
    do
    {
      v141 = __ldaxr((unsigned int *)v139);
      v142 = v141 - 1;
    }
    while (__stlxr(v142, (unsigned int *)v139));
    if (!v142)
    {
      atomic_store(1u, (unsigned int *)v139);
      v224 = *(unsigned int **)(v139 + 8);
      *(_QWORD *)(v139 + 8) = 0;
      if (v224)
      {
        do
        {
          v225 = __ldaxr(v224);
          v226 = v225 - 1;
        }
        while (__stlxr(v226, v224));
        if (!v226)
        {
          atomic_store(1u, v224);
          WTF::fastFree((unint64_t)v224, (void *)v13, v14, v15, (uint64_t)v16, v17, v18, v19);
        }
      }
      WTF::fastFree(v139, (void *)v13, v14, v15, (uint64_t)v16, v17, v18, v19);
    }
  }
  if (v122)
  {
    do
    {
      v143 = __ldaxr(v122);
      v144 = v143 - 1;
    }
    while (__stlxr(v144, v122));
    if (!v144)
    {
      atomic_store(1u, v122);
      WTF::fastFree((unint64_t)v122, (void *)v13, v14, v15, (uint64_t)v16, v17, v18, v19);
    }
  }
LABEL_220:
  v145 = __dst;
  if (v320 != (_BYTE *)__dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v319) = 0;
    WTF::fastFree((unint64_t)v145, (void *)v13, v14, v15, (uint64_t)v16, v17, v18, v19);
  }
  return v97;
}

unint64_t JSC::WebAssemblyTagPrototype::create(JSC::WebAssemblyTagPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xF00000002;
  *(_QWORD *)(v13 + 8) = "WebAssembly.Tag";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::WebAssemblyTagPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyTagPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::WebAssemblyWrapperFunction::visitChildren(JSC::WebAssemblyWrapperFunction *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::WebAssemblyFunctionBase::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::WebAssemblyWrapperFunction::visitChildren(JSC::WebAssemblyWrapperFunction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;
  _QWORD v13[2];
  _QWORD *v14;
  char v15;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    v13[0] = a2;
    v13[1] = this;
    v15 = 0;
    v14 = v10;
    *((_QWORD *)a2 + 11) = v13;
    JSC::JSCallee::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)(v13[0] + 88) = v14;
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    *(_QWORD *)(v10[0] + 88) = v11;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 9));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::WebAssemblyWrapperFunction::create(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  JSC::Wasm::TypeDefinition *v15;
  int v16;
  char *v17;
  uint64_t (*v18)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t HostFunction;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  JSC::NativeExecutable *v28;
  _QWORD *v29;
  unint64_t SlowCase;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSFunction *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int *v57;
  WTF *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t CachedUnrolling;
  uint64_t v66;
  uint64_t v67;
  const JSC::Wasm::Type *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  const JSC::Wasm::TypeDefinition *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  WTF::StringImpl *v83;
  _QWORD v84[3];

  WTF::StringImpl::s_emptyAtomString += 2;
  v83 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  v15 = (JSC::Wasm::TypeDefinition *)a7;
  if (*(_DWORD *)(a7 + 32) == 4)
  {
    v57 = *(unsigned int **)(a7 + 8);
    v58 = *(WTF **)v57;
    v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v57 + 8) + 8 * v57[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v15))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)a7, v59, v60, v61, v62, v63, v64, (uint64_t)a8);
      if (v71)
      {
        v15 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v15 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v15, v58, v66, v67, v68, v69, v70, (uint64_t)a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)a7, v15, v72, v73, v74, v75, v76, v77);
      }
    }
  }
  v16 = *((_DWORD *)v15 + 8);
  if (v16 == 5)
  {
    v15 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v15 + 1);
    v16 = *((_DWORD *)v15 + 8);
  }
  if (v16)
    v17 = 0;
  else
    v17 = (char *)v15 + 8;
  if (v17[17])
    v18 = (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))JSC::callWebAssemblyWrapperFunctionIncludingV128;
  else
    v18 = JSC::callWebAssemblyWrapperFunction;
  HostFunction = JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)v18, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0, &v83, (uint64_t)a8);
  if ((a4 & 0xFFFE000000000002) != 0
    || (v27 = *(unsigned __int8 *)(a4 + 5), v27 < 0x17)
    || (v28 = (JSC::NativeExecutable *)HostFunction, (v27 & 0xFE) != 0x1A)
    && ((*(_BYTE *)(a4 + 6) & 4) == 0
     || ((*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x38))(v84, a4), !LOBYTE(v84[0]))))
  {
    __break(0xC471u);
    JUMPOUT(0x198E62270);
  }
  v81 = a3;
  v29 = *(_QWORD **)(a1 + 41048);
  if (!v29)
    v29 = (_QWORD *)JSC::GCClient::Heap::webAssemblyWrapperFunctionSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = v29[3];
  if (SlowCase < v29[4])
    goto LABEL_19;
  SlowCase = v29[5];
  if ((SlowCase & 1) == 0)
  {
    v56 = *(_QWORD *)(SlowCase + 8) ^ v29[6];
    v29[4] = SlowCase + HIDWORD(v56);
    v29[5] = SlowCase + (int)v56;
LABEL_19:
    v29[3] = SlowCase + 80;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v20, v21, v22, v23, v24, v25, v26);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v29, a1 + 192, 80, 0, 0, v78, v79, v80);
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  v31 = *(_QWORD *)(a6 + 16);
  if (*(_DWORD *)(v31 + 112) <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x198E623C0);
  }
  v32 = v31 + 120 * a5 + 168;
  v33 = *a8;
  v34 = (JSC::JSFunction *)JSC::JSCallee::JSCallee(SlowCase, a1, a2, v81);
  *(_QWORD *)(SlowCase + 24) = v28;
  *(_QWORD *)(SlowCase + 32) = a6;
  *(_QWORD *)(SlowCase + 40) = a7;
  *(_QWORD *)(SlowCase + 48) = v32;
  *(_QWORD *)(SlowCase + 56) = &JSC::Wasm::NullWasmCallee;
  *(_QWORD *)(SlowCase + 64) = v33;
  *(_QWORD *)(SlowCase + 72) = a4;
  JSC::JSFunction::finishCreation(v34, (JSC::VM *)a1, v28, *((_DWORD *)v17 + 2), (const WTF::String *)&v83, v38, v35, v36, v37);
  v46 = v83;
  v83 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  return SlowCase;
}

uint64_t JSC::callWebAssemblyWrapperFunctionIncludingV128(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"an exported wasm function cannot contain a v128 parameter or return value", 74);
}

uint64_t JSC::callWebAssemblyWrapperFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 72);
  if (*(_BYTE *)(v10 + 5) == 26)
  {
    v11 = *(_QWORD *)(v10 + 24);
    if ((v11 & 1) != 0)
      v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v11 + 5) == 8)
    {
      LOBYTE(v16) = 1;
      v17 = *(_QWORD *)(v11 + 40);
      LOBYTE(v18) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v16) = 2;
      v12 = *(_QWORD *)(v10 + 16);
      v17 = v11;
      v18 = v12;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD))(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                        + 0x38))(&v16, *(_QWORD *)(*((_QWORD *)a2 + 3) + 72));
  if ((_BYTE)v16)
  {
LABEL_7:
    v14 = (char *)a2 + 48;
    v15 = *((_DWORD *)a2 + 8) - 1;
    return JSC::call((uint64_t *)this, v10, (unsigned __int8 *)&v16, 10, (uint64_t)&v14, a6, a7, a8);
  }
  result = 90;
  __break(0xC471u);
  return result;
}

uint64_t JSC::WebAssemblyWrapperFunction::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67440154;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyWrapperFunction::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::webAssemblyTableProtoFuncGrow(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, __n128 a10)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  char **v23;
  BOOL v24;
  const char *v25;
  JSC *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  const WTF::String *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  WTF::AtomStringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  JSC::Exception *v50;
  uint64_t v51;
  unint64_t v52;
  JSC::Heap **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  JSC::Exception *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const WTF::String *v88;
  unint64_t TypeError;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  JSC::Exception *v96;
  WTF::AtomStringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(WTF::StringImpl **);
  WTF::StringImpl **v110;
  int v111;
  unint64_t v112;
  JSC::VM *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115[3];

  v12 = *(_QWORD *)(this + 56);
  v113 = (JSC::VM *)v12;
  v13 = *((_QWORD *)a2 + 5);
  if ((v13 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyTable::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
  {
    v87 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v87 = 0x3C00000002;
    *(_QWORD *)(v87 + 8) = "expected |this| value to be an instance of WebAssembly.Table";
    *(_DWORD *)(v87 + 16) = 4;
    v115[0] = (WTF::StringImpl *)v87;
    TypeError = JSC::createTypeError(this, v115, v88);
    v96 = (JSC::Exception *)TypeError;
    if ((TypeError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)TypeError & 0xFFFFFFFE) + 0x4C)))
    {
      v96 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)TypeError, 0, v90, v91, v92, v93, v94);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)this, v96, v95, v90, v91, v92, v93, v94);
    v98 = v115[0];
    v115[0] = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v97, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
    v13 = 0;
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v99 = *(_DWORD *)(v12 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v115[0] = (WTF::StringImpl *)10;
    v15 = *(_QWORD *)(this + 56);
  }
  else
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    v115[0] = v14;
    v15 = *(_QWORD *)(this + 56);
    if ((unint64_t)v14 >= 0xFFFE000000000000 && (v14 & 0x80000000) == 0)
      goto LABEL_7;
    if ((unint64_t)v14 >= 0xFFFE000000000000)
    {
      *(double *)a9.i64 = (double)(int)v14;
      goto LABEL_45;
    }
    if ((unint64_t)v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = (uint64_t)v14 - 0x2000000000000;
      goto LABEL_45;
    }
  }
  JSC::JSValue::toNumberSlowCase(v115, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_45:
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_54;
  v112 = a9.i64[0];
  v111 = *(_DWORD *)(v15 + 80);
  if ((v111 & 0x27) != 0 && (v111 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  a9.i64[0] = v112;
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_54:
    if (fabs(*(double *)a9.i64) != INFINITY)
    {
      a10.n128_f64[0] = trunc(*(double *)a9.i64);
      if (a10.n128_f64[0] >= 0.0 && a10.n128_f64[0] <= 4294967300.0)
      {
        LODWORD(v14) = *(double *)a9.i64;
        goto LABEL_7;
      }
    }
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x3600000002;
    *(_QWORD *)(v35 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
    *(_DWORD *)(v35 + 16) = 4;
    v114 = (WTF::StringImpl *)v35;
    v37 = JSC::createTypeError(this, &v114, v36);
    v44 = (JSC::Exception *)v37;
    if ((v37 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
    {
      v44 = (JSC::Exception *)JSC::Exception::create(v15, (JSC::VM *)v37, 0, v38, v39, v40, v41, v42);
    }
    JSC::VM::throwException((JSC::VM *)v15, (JSC::JSGlobalObject *)this, v44, v43, v38, v39, v40, v41, v42);
    v46 = v114;
    v114 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v45, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  LODWORD(v14) = 0;
LABEL_7:
  v16 = v113;
  if (*((_DWORD *)v113 + 20))
  {
    v100 = *((_DWORD *)v113 + 20);
    if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v113 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v113 + 2))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) > 1)
  {
    v22 = *((_QWORD *)a2 + 7);
    v17 = *(_QWORD *)(v13 + 16);
  }
  else
  {
    v18 = v13 + 16;
    v17 = *(_QWORD *)(v13 + 16);
    v19 = *(_QWORD *)(v17 + 16);
    if (v19 - 239 >= 2 && v19 != 227)
    {
      v25 = "WebAssembly.Table.prototype.grow requires the second argument for non-defaultable table type";
      v26 = (JSC *)this;
      v27 = 93;
      return JSC::throwTypeError((unint64_t)v26, &v113, (uint64_t)v25, v27);
    }
    if (BYTE1(dword_1ECF4C7B0))
    {
      if ((v19 + 29) > 1u || *(_QWORD *)(v17 + 24) != -17)
      {
LABEL_15:
        v21 = *(unsigned __int8 *)(v17 + 13);
        v22 = 2;
        if (v21 == 1)
          goto LABEL_69;
        goto LABEL_27;
      }
    }
    else if (v19 != 239)
    {
      goto LABEL_15;
    }
    v22 = 10;
  }
  v18 = v13 + 16;
  v21 = *(unsigned __int8 *)(v17 + 13);
  if (v21 == 1)
  {
    if (v22 != 2)
    {
      if ((v22 & 0xFFFE000000000002) != 0
        || *(unsigned __int8 *)(v22 + 5) < 0x17u
        || ((v23 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)),
             v23 != &JSC::WebAssemblyFunction::s_info)
          ? (v24 = v23 == &JSC::WebAssemblyWrapperFunction::s_info)
          : (v24 = 1),
            !v24))
      {
        v25 = "WebAssembly.Table.prototype.grow expects the second argument to be null or an instance of WebAssembly.Function";
        v26 = (JSC *)this;
        v27 = 111;
        return JSC::throwTypeError((unint64_t)v26, &v113, (uint64_t)v25, v27);
      }
    }
    goto LABEL_69;
  }
LABEL_27:
  if (!v21)
  {
    v28 = *(unsigned __int8 *)(v17 + 16);
    v29 = *(_QWORD *)(v17 + 24);
    if (!BYTE1(dword_1ECF4C7B0))
    {
      if (v28 == 239)
        goto LABEL_69;
LABEL_33:
      if (!BYTE2(dword_1ECF4C7B0))
      {
        __break(0xC471u);
        JUMPOUT(0x198E62CE8);
      }
      *(_QWORD *)&v31 = v22 - 0x2000000000000;
      v32 = v22;
      if ((unint64_t)(v22 - 0x2000000000000) > 0xFFFBFFFFFFFFFFFFLL)
        goto LABEL_68;
      v32 = v22;
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_68;
      a9.i64[0] = v22 - 0x2000000000000;
      a10.n128_f64[0] = (double)(int)v31;
      v32 = v22;
      if (a10.n128_f64[0] != v31)
        goto LABEL_68;
      if ((*(_QWORD *)&v31 & 0x8000000000000000) != 0)
      {
        v32 = v22;
        if (!(int)v31)
          goto LABEL_68;
      }
      v33 = (*(_QWORD *)&v31 >> 52) & 0x7FFLL;
      if ((v33 - 1023) <= 0x53)
      {
        v47 = *(_QWORD *)&v31 >> (51 - (*(_QWORD *)&v31 >> 52));
        if (v33 > 0x433)
          LODWORD(v47) = v22 << ((*(_QWORD *)&v31 >> 52) - 51);
        if (v33 >= 0x41F)
          v48 = v47;
        else
          v48 = (((1 << ((*(_QWORD *)&v31 >> 52) + 1)) - 1) & v47) + (1 << ((*(_QWORD *)&v31 >> 52) + 1));
        if (v31 >= 0.0)
          v34 = v48;
        else
          v34 = -v48;
        v32 = v22;
        if ((int)(v34 + 0x40000000) < 0)
          goto LABEL_68;
      }
      else
      {
        v34 = 0;
      }
      v32 = v34 | 0xFFFE000000000000;
LABEL_68:
      if ((((uint64_t (*)(unint64_t, uint64_t, uint64_t, __n128, __n128))JSC::Wasm::TypeInformation::castReference)(v32, 1, v29, (__n128)a9, a10) & 1) != 0)goto LABEL_69;
      v25 = "WebAssembly.Table.prototype.grow failed to cast the second argument to the table's element type";
      v26 = (JSC *)this;
      v27 = 96;
      return JSC::throwTypeError((unint64_t)v26, &v113, (uint64_t)v25, v27);
    }
    if ((v28 + 29) > 1u || v29 != -17)
      goto LABEL_33;
  }
LABEL_69:
  v49 = *(unsigned int *)(*(_QWORD *)v18 + 4);
  if ((_DWORD)v14
    && (JSC::Wasm::Table::grow(*(_QWORD *)(v13 + 16), (int)v14, v22, a4, a5, a6, a7, a8) & 0xFF00000000) == 0)
  {
    v51 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v51 = 0x3900000002;
    *(_QWORD *)(v51 + 8) = "WebAssembly.Table.prototype.grow could not grow the table";
    *(_DWORD *)(v51 + 16) = 4;
    v114 = (WTF::StringImpl *)v51;
    v52 = *(_QWORD *)(this + 128);
    v53 = *(JSC::Heap ***)(this + 56);
    if ((v52 & 1) != 0)
    {
      v109 = *(uint64_t (**)(WTF::StringImpl **))(v52 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v110 = (WTF::StringImpl **)(this - 16);
      else
        v110 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v115[0] = *v110;
      v115[1] = (WTF::StringImpl *)this;
      v115[2] = (WTF::StringImpl *)(this + 128);
      v52 = v109(v115);
    }
    v54 = JSC::ErrorInstance::create(v53, v52, &v114, 0, 0, 0, 2, 1);
    v61 = (JSC::Exception *)v54;
    if ((v54 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)))
    {
      v61 = (JSC::Exception *)JSC::Exception::create((uint64_t)v16, (JSC::VM *)v54, 0, v55, v56, v57, v58, v59);
    }
    v50 = JSC::VM::throwException(v16, (JSC::JSGlobalObject *)this, v61, v60, v55, v56, v57, v58, v59);
    v69 = v114;
    v114 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
      {
        WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v69 -= 2;
      }
    }
  }
  else if ((v49 & 0x80000000) != 0)
  {
    return COERCE__INT64((double)v49) + 0x2000000000000;
  }
  else
  {
    return v49 | 0xFFFE000000000000;
  }
  return (unint64_t)v50;
}

JSC::Exception *JSC::webAssemblyTableProtoFuncGet(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Heap **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  JSC::Exception *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::Exception *v35;
  WTF::StringImpl *v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  const WTF::String *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  JSC::Exception *v56;
  WTF::AtomStringImpl *v57;
  WTF::StringImpl *v58;
  double v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const WTF::String *v69;
  unint64_t TypeError;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  JSC::Exception *v77;
  WTF::AtomStringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  int v81;
  uint64_t (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  double v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96[3];

  v11 = *(_QWORD *)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyTable::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    v68 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v68 = 0x3C00000002;
    *(_QWORD *)(v68 + 8) = "expected |this| value to be an instance of WebAssembly.Table";
    *(_DWORD *)(v68 + 16) = 4;
    v96[0] = (WTF::StringImpl *)v68;
    TypeError = JSC::createTypeError(this, v96, v69);
    v77 = (JSC::Exception *)TypeError;
    if ((TypeError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)TypeError & 0xFFFFFFFE) + 0x4C)))
    {
      v77 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)TypeError, 0, v71, v72, v73, v74, v75);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v77, v76, v71, v72, v73, v74, v75);
    v79 = v96[0];
    v96[0] = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::~StringImpl(v79, v78, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v79 -= 2;
      }
    }
    v12 = 0;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v80 = *(_DWORD *)(v11 + 80);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v96[0] = (WTF::StringImpl *)10;
    v14 = *(_QWORD *)(this + 56);
  }
  else
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    v96[0] = v13;
    v14 = *(_QWORD *)(this + 56);
    if ((unint64_t)v13 >= 0xFFFE000000000000 && (v13 & 0x80000000) == 0)
      goto LABEL_7;
    if ((unint64_t)v13 >= 0xFFFE000000000000)
    {
      v46 = (double)(int)v13;
      goto LABEL_25;
    }
    if ((unint64_t)v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v46 = (char *)v13 - 0x2000000000000;
      goto LABEL_25;
    }
  }
  JSC::JSValue::toNumberSlowCase(v96, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_25:
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_34;
  v94 = v46;
  v92 = *(_DWORD *)(v14 + 80);
  if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v46 = v94;
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_34:
    if (fabs(v46) != INFINITY)
    {
      v59 = trunc(v46);
      if (v59 >= 0.0 && v59 <= 4294967300.0)
      {
        LODWORD(v13) = v46;
        goto LABEL_7;
      }
    }
    v47 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v47 = 0x3600000002;
    *(_QWORD *)(v47 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
    *(_DWORD *)(v47 + 16) = 4;
    v95 = (WTF::StringImpl *)v47;
    v49 = JSC::createTypeError(this, &v95, v48);
    v56 = (JSC::Exception *)v49;
    if ((v49 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C)))
    {
      v56 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v49, 0, v50, v51, v52, v53, v54);
    }
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)this, v56, v55, v50, v51, v52, v53, v54);
    v58 = v95;
    v95 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::~StringImpl(v58, v57, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v58 -= 2;
      }
    }
  }
  LODWORD(v13) = 0;
LABEL_7:
  if (*(_DWORD *)(v11 + 80))
  {
    v81 = *(_DWORD *)(v11 + 80);
    if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    {
      v93 = (int)v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      LODWORD(v13) = v93;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v15 = *(_QWORD *)(v12 + 16);
  if (v13 >= *(_DWORD *)(v15 + 4))
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v17 = 0x5400000002;
    *(_QWORD *)(v17 + 8) = "WebAssembly.Table.prototype.get expects an integer less than the length of the table";
    *(_DWORD *)(v17 + 16) = 4;
    v95 = (WTF::StringImpl *)v17;
    v18 = *(_QWORD *)(this + 128);
    v19 = *(JSC::Heap ***)(this + 56);
    if ((v18 & 1) != 0)
    {
      v82 = *(uint64_t (**)(WTF::StringImpl **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v83 = (WTF::StringImpl **)(this - 16);
      else
        v83 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v96[0] = *v83;
      v96[1] = (WTF::StringImpl *)this;
      v96[2] = (WTF::StringImpl *)(this + 128);
      v18 = v82(v96);
    }
    v20 = JSC::ErrorInstance::create(v19, v18, &v95, 0, 0, 0, 2, 1);
    v27 = (JSC::Exception *)v20;
    if ((v20 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C)))
    {
      v27 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v20, 0, v21, v22, v23, v24, v25);
    }
    v35 = JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v27, v26, v21, v22, v23, v24, v25);
    v36 = v95;
    v95 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  else
  {
    if (!*(_QWORD *)(v15 + 40))
    {
      __break(0xC471u);
      JUMPOUT(0x198E63188);
    }
    if (*(_BYTE *)(v15 + 13) == 1)
    {
      v16 = *(_QWORD *)(v15 + 48) + 48 * v13 + 40;
    }
    else
    {
      if (*(_BYTE *)(v15 + 13))
      {
        __break(0xC471u);
        JUMPOUT(0x198E63270);
      }
      v16 = *(_QWORD *)(v15 + 48) + 8 * v13;
    }
    return *(JSC::Exception **)v16;
  }
  return v35;
}

uint64_t JSC::webAssemblyTableProtoFuncSet(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, __n128 a10)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::Heap **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  JSC::Exception *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  double v43;
  uint64_t v44;
  unsigned int v45;
  char **v46;
  const char *v47;
  JSC *v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const WTF::String *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  JSC::Exception *v67;
  WTF::AtomStringImpl *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const WTF::String *v88;
  unint64_t TypeError;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  JSC::Exception *v96;
  WTF::AtomStringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  uint64_t (*v101)(WTF::StringImpl **);
  WTF::StringImpl **v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  JSC::VM *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115[3];

  v12 = *(_QWORD *)(this + 56);
  v113 = (JSC::VM *)v12;
  v13 = *((_QWORD *)a2 + 5);
  if ((v13 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyTable::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
  {
    v87 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v87 = 0x3C00000002;
    *(_QWORD *)(v87 + 8) = "expected |this| value to be an instance of WebAssembly.Table";
    *(_DWORD *)(v87 + 16) = 4;
    v115[0] = (WTF::StringImpl *)v87;
    TypeError = JSC::createTypeError(this, v115, v88);
    v96 = (JSC::Exception *)TypeError;
    if ((TypeError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)TypeError & 0xFFFFFFFE) + 0x4C)))
    {
      v96 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)TypeError, 0, v90, v91, v92, v93, v94);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)this, v96, v95, v90, v91, v92, v93, v94);
    v98 = v115[0];
    v115[0] = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v97, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
    v13 = 0;
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v99 = *(_DWORD *)(v12 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v115[0] = (WTF::StringImpl *)10;
    v15 = *(_QWORD *)(this + 56);
  }
  else
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    v115[0] = v14;
    v15 = *(_QWORD *)(this + 56);
    if ((unint64_t)v14 >= 0xFFFE000000000000 && (v14 & 0x80000000) == 0)
      goto LABEL_7;
    if ((unint64_t)v14 >= 0xFFFE000000000000)
    {
      *(double *)a9.i64 = (double)(int)v14;
      goto LABEL_43;
    }
    if ((unint64_t)v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = (uint64_t)v14 - 0x2000000000000;
      goto LABEL_43;
    }
  }
  JSC::JSValue::toNumberSlowCase(v115, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_43:
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_65;
  v112 = a9.i64[0];
  v111 = *(_DWORD *)(v15 + 80);
  if ((v111 & 0x27) != 0 && (v111 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  a9.i64[0] = v112;
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_65:
    if (fabs(*(double *)a9.i64) != INFINITY)
    {
      a10.n128_f64[0] = trunc(*(double *)a9.i64);
      if (a10.n128_f64[0] >= 0.0 && a10.n128_f64[0] <= 4294967300.0)
      {
        LODWORD(v14) = *(double *)a9.i64;
        goto LABEL_7;
      }
    }
    v58 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v58 = 0x3600000002;
    *(_QWORD *)(v58 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
    *(_DWORD *)(v58 + 16) = 4;
    v114 = (WTF::StringImpl *)v58;
    v60 = JSC::createTypeError(this, &v114, v59);
    v67 = (JSC::Exception *)v60;
    if ((v60 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C)))
    {
      v67 = (JSC::Exception *)JSC::Exception::create(v15, (JSC::VM *)v60, 0, v61, v62, v63, v64, v65);
    }
    JSC::VM::throwException((JSC::VM *)v15, (JSC::JSGlobalObject *)this, v67, v66, v61, v62, v63, v64, v65);
    v69 = v114;
    v114 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
      {
        WTF::StringImpl::~StringImpl(v69, v68, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v69 -= 2;
      }
    }
  }
  LODWORD(v14) = 0;
LABEL_7:
  v16 = v113;
  if (*((_DWORD *)v113 + 20))
  {
    v100 = *((_DWORD *)v113 + 20);
    if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v113 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v113 + 2))
      return 0;
  }
  v17 = *(_QWORD *)(v13 + 16);
  if (v14 >= *(_DWORD *)(v17 + 4))
  {
    v21 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v21 = 0x5400000002;
    *(_QWORD *)(v21 + 8) = "WebAssembly.Table.prototype.set expects an integer less than the length of the table";
    *(_DWORD *)(v21 + 16) = 4;
    v114 = (WTF::StringImpl *)v21;
    v22 = *(_QWORD *)(this + 128);
    v23 = *(JSC::Heap ***)(this + 56);
    if ((v22 & 1) != 0)
    {
      v101 = *(uint64_t (**)(WTF::StringImpl **))(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v102 = (WTF::StringImpl **)(this - 16);
      else
        v102 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v115[0] = *v102;
      v115[1] = (WTF::StringImpl *)this;
      v115[2] = (WTF::StringImpl *)(this + 128);
      v22 = v101(v115);
    }
    v24 = JSC::ErrorInstance::create(v23, v22, &v114, 0, 0, 0, 2, 1);
    v31 = (JSC::Exception *)v24;
    if ((v24 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C)))
    {
      v31 = (JSC::Exception *)JSC::Exception::create((uint64_t)v16, (JSC::VM *)v24, 0, v25, v26, v27, v28, v29);
    }
    v20 = (uint64_t)JSC::VM::throwException(v16, (JSC::JSGlobalObject *)this, v31, v30, v25, v26, v27, v28, v29);
    v39 = v114;
    v114 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    return v20;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = *((_QWORD *)a2 + 7);
    goto LABEL_11;
  }
  v71 = *(unsigned __int8 *)(v17 + 16);
  if (BYTE1(dword_1ECF4C7B0))
  {
    if ((v71 + 29) > 1u || *(_QWORD *)(v17 + 24) != -17)
      goto LABEL_60;
LABEL_92:
    v18 = 10;
    goto LABEL_61;
  }
  if (v71 == 239)
    goto LABEL_92;
LABEL_60:
  v18 = 2;
LABEL_61:
  if ((v71 - 239) >= 2 && (_DWORD)v71 != 227)
  {
    v47 = "WebAssembly.Table.prototype.set requires the second argument for non-defaultable table type";
    v48 = (JSC *)this;
    v49 = 92;
    return JSC::throwTypeError((unint64_t)v48, &v113, (uint64_t)v47, v49);
  }
LABEL_11:
  if (*(_BYTE *)(v17 + 13) == 1)
  {
    if (v18 == 2)
    {
      if (!*(_QWORD *)(v17 + 40))
      {
        __break(0xC471u);
        JUMPOUT(0x198E63968);
      }
      v19 = (_QWORD *)(*(_QWORD *)(v17 + 48) + 48 * v14);
      *v19 = 0;
      v19[1] = 0;
      v19[2] = &JSC::Wasm::NullWasmCallee;
      v19[3] = 0;
      v19[4] = 0;
      v19[5] = 2;
      return 10;
    }
    if ((v18 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v18 + 5) >= 0x17u)
    {
      v46 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C));
      if (v46 == &JSC::WebAssemblyFunction::s_info || v46 == &JSC::WebAssemblyWrapperFunction::s_info)
      {
        JSC::JSWebAssemblyTable::set(v13, v14, v18);
        return 10;
      }
    }
    v47 = "WebAssembly.Table.prototype.set expects the second argument to be null or an instance of WebAssembly.Function";
    v48 = (JSC *)this;
    v49 = 110;
    return JSC::throwTypeError((unint64_t)v48, &v113, (uint64_t)v47, v49);
  }
  v40 = *(unsigned __int8 *)(v17 + 16);
  v41 = *(_QWORD *)(v17 + 24);
  if (BYTE1(dword_1ECF4C7B0))
  {
    if ((v40 + 29) > 1u || v41 != -17)
    {
LABEL_27:
      if (!BYTE2(dword_1ECF4C7B0))
      {
        __break(0xC471u);
        JUMPOUT(0x198E63988);
      }
      *(_QWORD *)&v43 = v18 - 0x2000000000000;
      if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        goto LABEL_77;
      if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_77;
      a9.i64[0] = v18 - 0x2000000000000;
      a10.n128_f64[0] = (double)(int)v43;
      if (a10.n128_f64[0] != v43 || (*(_QWORD *)&v43 & 0x8000000000000000) != 0 && !(int)v43)
        goto LABEL_77;
      v44 = (*(_QWORD *)&v43 >> 52) & 0x7FFLL;
      if ((v44 - 1023) <= 0x53)
      {
        v73 = *(_QWORD *)&v43 >> (51 - (*(_QWORD *)&v43 >> 52));
        if (v44 > 0x433)
          LODWORD(v73) = v18 << ((*(_QWORD *)&v43 >> 52) - 51);
        if (v44 >= 0x41F)
          v74 = v73;
        else
          v74 = (((1 << ((*(_QWORD *)&v43 >> 52) + 1)) - 1) & v73) + (1 << ((*(_QWORD *)&v43 >> 52) + 1));
        if (v43 >= 0.0)
          v45 = v74;
        else
          v45 = -v74;
        if ((int)(v45 + 0x40000000) < 0)
          goto LABEL_77;
      }
      else
      {
        v45 = 0;
      }
      v18 = v45 | 0xFFFE000000000000;
LABEL_77:
      if (!((uint64_t (*)(unint64_t, uint64_t, uint64_t, __n128, __n128))JSC::Wasm::TypeInformation::castReference)(v18, 1, v41, (__n128)a9, a10))
      {
        v47 = "WebAssembly.Table.prototype.set failed to cast the second argument to the table's element type";
        v48 = (JSC *)this;
        v49 = 95;
        return JSC::throwTypeError((unint64_t)v48, &v113, (uint64_t)v47, v49);
      }
      v17 = *(_QWORD *)(v13 + 16);
      if (*(_DWORD *)(v17 + 4) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198E639E0);
      }
      if (*(_BYTE *)(v17 + 13))
      {
        __break(0xC471u);
        JUMPOUT(0x198E63A00);
      }
      v70 = *(_QWORD *)(v17 + 40);
      if (!v70)
      {
        __break(0xC471u);
        JUMPOUT(0x198E63A20);
      }
      goto LABEL_81;
    }
  }
  else if (v40 != 239)
  {
    goto LABEL_27;
  }
  if (*(_BYTE *)(v17 + 13))
  {
    __break(0xC471u);
    JUMPOUT(0x198E639A8);
  }
  v70 = *(_QWORD *)(v17 + 40);
  if (!v70)
  {
    __break(0xC471u);
    JUMPOUT(0x198E6366CLL);
  }
LABEL_81:
  v75 = *(_QWORD *)(v17 + 48);
  v76 = (uint64_t *)(v70 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v70 & 8) != 0)
    v76 = (uint64_t *)(v70 - 16);
  v77 = *v76;
  *(_QWORD *)(v75 + 8 * v14) = v18;
  v20 = 10;
  if (v18 && (v18 & 0xFFFE000000000002) == 0)
  {
    if (*(_DWORD *)(v77 + 760) >= *(unsigned __int8 *)(v70 + 7))
      JSC::Heap::writeBarrierSlowPath(v77 + 192, v70);
    return 10;
  }
  return v20;
}

uint64_t JSC::webAssemblyTableProtoFuncType(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSWebAssemblyTable *v10;
  uint64_t result;
  uint64_t v12;
  const WTF::String *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  JSC::Exception *v21;
  WTF::AtomStringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::JSWebAssemblyTable *v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;

  v9 = *((_QWORD *)this + 7);
  v34 = (JSC::VM *)v9;
  v10 = (JSC::JSWebAssemblyTable *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyTable::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0x3C00000002;
    *(_QWORD *)(v12 + 8) = "expected |this| value to be an instance of WebAssembly.Table";
    *(_DWORD *)(v12 + 16) = 4;
    v35 = (WTF::StringImpl *)v12;
    v14 = JSC::createTypeError((unint64_t)this, &v35, v13);
    v21 = (JSC::Exception *)v14;
    if ((v14 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
    {
      v21 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v14, 0, v15, v16, v17, v18, v19);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, v21, v20, v15, v16, v17, v18, v19);
    v23 = v35;
    v35 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v22, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    v10 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v24 = *(_DWORD *)(v9 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    {
      v33 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v33;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  result = JSC::JSWebAssemblyTable::type(v10, this);
  if (!result)
    return JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)"WebAssembly.Table.prototype.type unable to produce type descriptor for the given table", 87);
  return result;
}

void JSC::constructJSWebAssemblyTag(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()<JSC::VM,JSC::JSGlobalObject>(uint64_t *a1, uint64_t a2, JSC::JSGlobalObject *a3, uint64_t this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  WTF::StringImpl *v12;
  __int128 *v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int8x16_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t v29;
  int64x2_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x2_t v34;
  int64x2_t v35;
  int v36;
  WTF::StringImpl *v37;
  int8x16_t v38;
  JSC::VM *v39;
  uint64_t v40;

  v39 = (JSC::VM *)a2;
  v40 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, a3, a3, this, a5, a6, a7, a8, (int **)&v37);
    goto LABEL_7;
  }
  v12 = *(WTF::StringImpl **)(this + 8);
  if ((v12 & 1) != 0)
  {
    v12 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(this, a3, (uint64_t)a3, this, a9, a5, a6, a7, a8);
    if (!v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v12)
LABEL_5:
    *(_DWORD *)v12 += 2;
LABEL_6:
  v37 = v12;
LABEL_7:
  if (!*(_DWORD *)(a2 + 80))
    goto LABEL_45;
  v36 = *(_DWORD *)(a2 + 80);
  if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_45:
    if (WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"i32", 3))
    {
      v13 = &JSC::Wasm::Types::I32;
LABEL_21:
      v14 = (int8x16_t)*v13;
LABEL_22:
      v38 = v14;
      v15 = *a1;
      v16 = *(unsigned int *)(v15 + 12);
      if ((_DWORD)v16 == *(_DWORD *)(v15 + 8))
      {
        v17 = WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v15, v16 + 1, (unint64_t)&v38);
        v16 = *(unsigned int *)(v15 + 12);
        v18 = *(char **)v15;
        v19 = *(int8x16_t *)v17;
      }
      else
      {
        v18 = *(char **)v15;
        v19 = v38;
      }
      *(int8x16_t *)&v18[16 * v16] = v19;
      ++*(_DWORD *)(v15 + 12);
      goto LABEL_26;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"i64", 3))
    {
      v13 = &JSC::Wasm::Types::I64;
      goto LABEL_21;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"f32", 3))
    {
      v13 = &JSC::Wasm::Types::F32;
      goto LABEL_21;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"f64", 3))
    {
      v13 = &JSC::Wasm::Types::F64;
      goto LABEL_21;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"v128", 4))
    {
      v13 = &JSC::Wasm::Types::V128;
      goto LABEL_21;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"funcref", 7)
      || WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"anyfunc", 7))
    {
      v29 = vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
      v30.i64[0] = v29.u32[0];
      v30.i64[1] = v29.u32[1];
      v31 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v30, 0x3FuLL));
      v32 = (int8x16_t)xmmword_19915AE50;
      v33 = (int8x16_t)xmmword_19915A120;
LABEL_34:
      v14 = vbslq_s8(v31, v33, v32);
      goto LABEL_22;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)"externref", 9))
    {
      v34 = vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
      v35.i64[0] = v34.u32[0];
      v35.i64[1] = v34.u32[1];
      v31 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v35, 0x3FuLL));
      v32 = (int8x16_t)xmmword_19915AFE0;
      v33 = (int8x16_t)xmmword_19915AFF0;
      goto LABEL_34;
    }
    JSC::throwTypeError((unint64_t)a3, &v39, (uint64_t)"WebAssembly.Tag constructor expects the 'parameters' field of the first argument to be a sequence of WebAssembly value types.", 126);
  }
LABEL_26:
  v20 = v37;
  v37 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, (uint64_t)a3, this, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
}

char *WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[16 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *a1;
        return &v11[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
      if (v10 < 0x11)
      {
        v26 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_33;
      }
      if (!(v10 >> 28))
      {
        v26 = (char *)WTF::fastMalloc((WTF *)(16 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v26;
LABEL_33:
        memcpy(v26, v5, 16 * v6);
        v11 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v11 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v27, v28, v29, v30, v31, v32, v33);
          v11 = *a1;
        }
        return &v11[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x198E640CCLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v17 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v18 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_38;
      v18 = (char *)WTF::fastMalloc((WTF *)(16 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v18;
    }
    memcpy(v18, v5, 16 * v17);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  return (char *)v3;
}

int *JSC::webAssemblyTagProtoFuncType(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  JSC *v33;
  JSC::VM *v34;
  JSC::Structure *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  double v82;
  int v83;
  unint64_t OutOfMemoryError;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  JSC::Exception *v91;
  int v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  _OWORD v104[4];
  uint64_t v105;
  JSC::VM *v106;
  JSC::VM *v107;
  int *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t *v112;

  v9 = *((_QWORD *)this + 7);
  v106 = (JSC::VM *)v9;
  v107 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    v68 = WTF::fastCompactMalloc((WTF *)0x20);
    v69.i64[0] = 0x1000000002;
    *(_QWORD *)v68 = 0x1000000002;
    *(_QWORD *)(v68 + 8) = "is not an object";
    *(_DWORD *)(v68 + 16) = 4;
    v101 = v68;
    v81 = JSC::createError((unint64_t)this, v10, &v101, (uint64_t)JSC::defaultSourceAppender, v70, v71, v72, v73, v69);
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v68, v74, v75, v76, v77, v78, v79, v80);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
    if ((v81 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v81 & 0xFFFFFFFE) + 0x4C)))
    {
      v81 = JSC::Exception::create(v9, (JSC::VM *)v81, 0, v76, v77, v78, v79, v80);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, (JSC::Exception *)v81, v82, v76, v77, v78, v79, v80);
    goto LABEL_67;
  }
  if (&JSC::JSWebAssemblyTag::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    JSC::throwTypeError((unint64_t)this, &v107, (uint64_t)"WebAssembly.Tag operation called on non-Tag object", 51);
LABEL_67:
    v10 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v83 = *(_DWORD *)(v9 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v11 = *(_QWORD *)(v10 + 16);
  LOBYTE(v101) = 0;
  v102 = 0x800000000;
  v103 = (_OWORD *)((char *)v104 + 8);
  v12 = 0.0;
  memset(v104, 0, sizeof(v104));
  v105 = 0;
  v13 = *(_QWORD *)(v11 + 8);
  if (*(_DWORD *)(v13 + 32))
    v14 = 0;
  else
    v14 = v13 + 8;
  v15 = (JSC::JSGlobalObject *)*(unsigned int *)(v14 + 8);
  if (v15 >= 9
    && ((v15 & 0x80000000) != 0
     || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v102, v15)))
  {
    LOBYTE(v101) = 1;
  }
  v16 = *(_QWORD *)(v11 + 8);
  v17 = v16 + 8;
  if (*(_DWORD *)(v16 + 32))
    v18 = 0;
  else
    v18 = v16 + 8;
  if (*(_DWORD *)(v18 + 8))
  {
    v19 = 0;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)v17 + 16 * (v19 + *(_DWORD *)(v17 + 12)));
      v21 = JSC::Wasm::typeToJSAPIString(v9, *v20, v20[1]);
      if (!v21)
      {
        v41 = (int *)JSC::throwTypeError((unint64_t)this, &v106, (uint64_t)"WebAssembly.Tag.prototype.type unable to produce type descriptor for the given tag", 83);
        goto LABEL_52;
      }
      v22 = v21;
      v23 = v102;
      if ((_DWORD)v102 == HIDWORD(v102))
      {
        if (!(v102 >> 30)
          && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v102, 2 * (int)v102))
        {
          v23 = v102;
LABEL_30:
          *((_QWORD *)v103 + v23) = v22;
          LODWORD(v102) = v23 + 1;
          if ((v22 & 0xFFFE000000000002) == 0 && *(_QWORD *)&v104[0] == 0)
          {
            v28 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v22 & 8) != 0)
              v28 = (_QWORD *)(v22 - 16);
            *(_QWORD *)&v104[0] = *v28 + 560;
            v112 = &v102;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v104[0], (uint64_t *)&v112, a4, a5, a6, a7, a8, (uint64_t)&v107);
          }
          goto LABEL_21;
        }
        LOBYTE(v101) = 1;
      }
      else
      {
        if (v103 != (_OWORD *)((char *)v104 + 8) && v103 != 0)
          goto LABEL_30;
        *((_QWORD *)v103 + v102) = v21;
        LODWORD(v102) = v23 + 1;
      }
LABEL_21:
      ++v19;
      v25 = *(_QWORD *)(v11 + 8);
      v17 = v25 + 8;
      if (*(_DWORD *)(v25 + 32))
        v26 = 0;
      else
        v26 = v25 + 8;
    }
    while (v19 < *(unsigned int *)(v26 + 8));
  }
  if ((_BYTE)v101)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v15);
    v91 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v91 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v85, v86, v87, v88, v89);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, v91, v90, v85, v86, v87, v88, v89);
  }
  else
  {
    v107 = (JSC::VM *)v103;
    LODWORD(v108) = v102;
    v29 = *((_QWORD *)this + 7);
    v30 = *((_DWORD *)this + 224);
    if (v30)
      v31 = 16 * (v30 & 0xFFFFFFFE);
    else
      v31 = 0;
    if (!*(_DWORD *)(v29 + 80))
      goto LABEL_43;
    v92 = *(_DWORD *)(v29 + 80);
    if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v29 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v29 + 16))
      v32 = 0;
    else
LABEL_43:
      v32 = JSC::constructArray((uint64_t)this, v31, (uint64_t)&v107, a4, a5, a6, a7, a8);
    v33 = (JSC *)*((_QWORD *)this + 7);
    v34 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC *)((char *)this + 1968), this, *((JSC::JSObject **)this + 82), 1, 0, 0, a7, a8, v12);
    v41 = (int *)JSC::constructEmptyObject(v33, v34, v35, v36, v37, v38, v39, v40);
    WTF::AtomStringImpl::addLiteral((uint64_t)"parameters", 0xAuLL, v42, v43, v44, v45, v46, &v107);
    v47 = v107;
    v107 = 0;
    v108 = v41;
    v109 = -1;
    v48.n128_u64[0] = 0x100000001000000;
    v110 = 0x1000000;
    v111 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v41, v9, (unint64_t)v47, v32, 0, (uint64_t)&v107, v49, v50, v48);
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v51, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_52;
    v58 = *(_DWORD *)(v9 + 80);
    if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v52, v53, v54, v55, v56, v57);
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_52;
  }
  v41 = 0;
LABEL_52:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v102, v51, v52, v53, v54, v55, v56, v57);
  return v41;
}

uint64_t *JSC::Yarr::RegularExpression::RegularExpression(uint64_t *a1, char *a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v19[2];
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[176];

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)(v8 + 4) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)v8 = 1;
  *(_DWORD *)(v8 + 16) = -1;
  v9 = (uint64_t *)(v8 + 24);
  LOBYTE(v19[0]) = 0;
  v19[1] = a4;
  v21 = 0;
  v20 = 0;
  v22 = v24;
  v23 = 4;
  memset(&v24[32], 0, 144);
  v10 = JSC::Yarr::YarrPattern::compile(v19, a2, a3);
  *(_BYTE *)(v8 + 4) = v10;
  if (v10)
  {
    *v9 = 0;
  }
  else
  {
    *(_DWORD *)(v8 + 20) = v20;
    JSC::Yarr::byteCompile((unint64_t)v19, v8 + 8, (_BYTE *)(v8 + 4), 0, v9);
  }
  JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)v19, v11, v12, v13, v14, v15, v16, v17);
  *a1 = v8;
  return a1;
}

{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v19[2];
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[176];

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)(v8 + 4) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)v8 = 1;
  *(_DWORD *)(v8 + 16) = -1;
  v9 = (uint64_t *)(v8 + 24);
  LOBYTE(v19[0]) = 0;
  v19[1] = a4;
  v21 = 0;
  v20 = 0;
  v22 = v24;
  v23 = 4;
  memset(&v24[32], 0, 144);
  v10 = JSC::Yarr::YarrPattern::compile(v19, a2, a3);
  *(_BYTE *)(v8 + 4) = v10;
  if (v10)
  {
    *v9 = 0;
  }
  else
  {
    *(_DWORD *)(v8 + 20) = v20;
    JSC::Yarr::byteCompile((unint64_t)v19, v8 + 8, (_BYTE *)(v8 + 4), 0, v9);
  }
  JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)v19, v11, v12, v13, v14, v15, v16, v17);
  *a1 = v8;
  return a1;
}

_QWORD *JSC::Yarr::RegularExpression::RegularExpression(_QWORD *result, _DWORD **a2)
{
  _DWORD *v2;

  v2 = *a2;
  if (*a2)
    ++*v2;
  *result = v2;
  return result;
}

{
  _DWORD *v2;

  v2 = *a2;
  if (*a2)
    ++*v2;
  *result = v2;
  return result;
}

void JSC::Yarr::RegularExpression::~RegularExpression(JSC::Yarr::RegularExpression *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::Yarr::BytecodePattern *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  size_t v20;

  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v9 = *(JSC::Yarr::BytecodePattern **)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      if (v9)
      {
        JSC::Yarr::BytecodePattern::~BytecodePattern(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      v18 = *(_QWORD **)(v8 + 8);
      if (v18 && (v19 = (void *)v18[5], v20 = v18[6], v18[5] = 0, v18[6] = 0, v18[4] = 0, munmap(v19, v20) == -1))
        __break(0xC471u);
      else
        WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
}

{
  unint64_t v8;
  JSC::Yarr::BytecodePattern *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  size_t v20;

  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v9 = *(JSC::Yarr::BytecodePattern **)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      if (v9)
      {
        JSC::Yarr::BytecodePattern::~BytecodePattern(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      v18 = *(_QWORD **)(v8 + 8);
      if (v18 && (v19 = (void *)v18[5], v20 = v18[6], v18[5] = 0, v18[6] = 0, v18[4] = 0, munmap(v19, v20) == -1))
        __break(0xC471u);
      else
        WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
}

unint64_t *JSC::Yarr::RegularExpression::operator=(unint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;
  unint64_t *result;
  JSC::Yarr::BytecodePattern *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  size_t v23;

  v9 = (_DWORD *)*a2;
  if (*a2)
    ++*v9;
  v10 = *a1;
  *a1 = (unint64_t)v9;
  if (!v10)
    return a1;
  if (*(_DWORD *)v10 != 1)
  {
    --*(_DWORD *)v10;
    return a1;
  }
  v12 = *(JSC::Yarr::BytecodePattern **)(v10 + 24);
  *(_QWORD *)(v10 + 24) = 0;
  if (v12)
  {
    JSC::Yarr::BytecodePattern::~BytecodePattern(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v21 = *(_QWORD **)(v10 + 8);
  if (!v21
    || (v22 = (void *)v21[5],
        v23 = v21[6],
        v21[5] = 0,
        v21[6] = 0,
        v21[4] = 0,
        result = (unint64_t *)munmap(v22, v23),
        (_DWORD)result != -1))
  {
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::RegularExpression::match(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  int v11;
  int v15;
  int v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF *v23;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[128];

  v8 = *a1;
  if (*(_QWORD *)(*a1 + 24))
    v9 = a2 == 0;
  else
    v9 = 1;
  if (v9)
    return 0xFFFFFFFFLL;
  v11 = a4;
  v15 = *(_DWORD *)(v8 + 20);
  v16 = 2 * v15 + 2;
  v26 = (WTF *)v28;
  v27 = 32;
  if (v16 >= 0x21)
  {
    WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, v16);
    v17 = v26;
    v8 = *a1;
    v15 = *(_DWORD *)(*a1 + 20);
  }
  else
  {
    v17 = (WTF *)v28;
  }
  HIDWORD(v27) = v16;
  if (v15 != -1)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      *((_DWORD *)v17 + v19) = -1;
      v19 += 2;
      ++v18;
    }
    while (v18 < *(_DWORD *)(v8 + 20) + 1);
  }
  if ((a3 & 0x80000000) != 0
    || (v20 = JSC::Yarr::interpret(*(_QWORD *)(v8 + 24), (uint64_t)a2, a3, v11, (uint64_t)v17, a6, a7, a8),
        v8 = *a1,
        v20 == -1))
  {
    v22 = 0xFFFFFFFFLL;
    *(_DWORD *)(v8 + 16) = -1;
  }
  else
  {
    v21 = *((_DWORD *)v17 + 1) - *(_DWORD *)v17;
    *(_DWORD *)(v8 + 16) = v21;
    if (a5)
      *a5 = v21;
    v22 = *(unsigned int *)v17;
  }
  v23 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree((unint64_t)v23, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  return v22;
}

uint64_t JSC::Yarr::interpret(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v9 = a2;
  v10 = a1;
  if ((a3 & 0xFF00000000) != 0)
  {
    v15 = a1;
    v11 = *(unsigned __int16 *)(a1 + 8);
    v12 = (v11 >> 5) & 2;
    if ((v11 & 0x20) != 0)
      LOBYTE(v12) = 1;
    v16 = v12;
    v17 = a5;
    v18 = v9;
    v19 = a4;
    v20 = a3;
    v21 = (v11 & 0x60) != 0;
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13)
      v13 = WTF::Thread::initializeCurrentTLS(0);
    v22 = *(_QWORD *)(v13 + 24) + 0x10000;
    v23 = 0;
    v24 = a4;
    v25 = 1000000;
    return JSC::Yarr::Interpreter<unsigned char>::interpret((uint64_t)&v15, v10, a3, v9, a5, a6, a7, a8);
  }
  else
  {
    JSC::Yarr::Interpreter<char16_t>::Interpreter((uint64_t)&v15, a1, a5, v9, a3, a4);
    return JSC::Yarr::Interpreter<char16_t>::interpret(&v15);
  }
}

uint64_t JSC::Yarr::RegularExpression::searchRev(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v17;

  v11 = 0;
  v12 = 0xFFFFFFFFLL;
  v13 = -1;
  do
  {
    v17 = 0;
    v14 = JSC::Yarr::RegularExpression::match(a1, a2, a3, v11, &v17, a6, a7, a8);
    if ((v14 & 0x80000000) == 0)
    {
      v15 = v13 + v12;
      if ((int)(v17 + v14) <= v13 + (int)v12)
        v12 = v12;
      else
        v12 = v14;
      if ((int)(v17 + v14) > v15)
        v13 = v17;
      v11 = v14 + 1;
    }
  }
  while (v14 != -1);
  *(_DWORD *)(*a1 + 16) = v13;
  return v12;
}

uint64_t JSC::Yarr::RegularExpression::matchedLength(JSC::Yarr::RegularExpression *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 16);
}

void JSC::Yarr::replace(int **a1, uint64_t *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  int *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int *v33;

  for (i = 0; ; i = v18 + a4)
  {
    v13 = *a1;
    if (*a1)
    {
      v14 = v13[1];
      if ((int)i >= (int)v14)
        return;
      v32 = 0;
      v15 = (void *)*((_QWORD *)v13 + 1);
      v16 = ((unint64_t)v13[4] >> 2) & 1;
    }
    else
    {
      if ((i & 0x80000000) == 0)
        return;
      v15 = 0;
      v14 = 0;
      v32 = 0;
      v16 = 1;
    }
    v17 = JSC::Yarr::RegularExpression::match(a2, v15, v14 | (v16 << 32), i, (int *)&v32, a6, a7, a8);
    if ((v17 & 0x80000000) != 0)
      break;
    v18 = v17;
    if (*a1)
    {
      WTF::StringImpl::replace(*a1, v17, v32, a3, a4, &v33);
      v23 = *a1;
      *a1 = v33;
      if (v23)
      {
        if (*v23 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, v19, v20, v21, v22, a6, a7, a8);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        else
        {
          *v23 -= 2;
        }
      }
    }
    else
    {
      *a1 = 0;
    }
    if (!v32)
      break;
  }
}

BOOL JSC::Yarr::RegularExpression::isValid(JSC::Yarr::RegularExpression *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24) != 0;
}

uint64_t JSC::Yarr::YarrDisassembler::YarrDisassembler(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = -1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v4;
  if (v4)
  {
    v5 = v4;
    if (v4 >> 30)
      goto LABEL_10;
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * v4));
    *(_DWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    v7 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v7)
      memset(v6, 255, 4 * v7);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = v8;
  if (!v8)
    goto LABEL_9;
  v9 = v8;
  if (v8 >> 30)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198E64EA0);
  }
  v10 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
  *(_DWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v11)
    memset(v10, 255, 4 * v11);
LABEL_9:
  *(_QWORD *)(a1 + 48) = -1;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void JSC::Yarr::YarrDisassembler::dump(JSC::Yarr::YarrDisassembler *this, WTF::PrintStream *a2, JSC::LinkBuffer *a3)
{
  uint64_t v6;
  const char *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  char *v10;
  char *v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::PrintStream *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;

  v6 = *((_QWORD *)a3 + 23);
  *((_QWORD *)this + 8) = v6;
  *((_QWORD *)this + 9) = v6 + *((_QWORD *)a3 + 1);
  v7 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", "Generated JIT code for ");
  WTF::PrintStream::printf(v8, "%s", v7);
  WTF::PrintStream::printf(v8, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(_QWORD, WTF::PrintStream *))(**(_QWORD **)this + 32))(*(_QWORD *)this, a2);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v9, "%s", ":\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v10 = (char *)*((_QWORD *)a3 + 23);
  v11 = &v10[*((_QWORD *)a3 + 1)];
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v12, "%s", "    Code at [");
  WTF::PrintStream::printf(v12, "%p", v10);
  WTF::PrintStream::printf(v12, "%s", ", ");
  WTF::PrintStream::printf(v12, "%p", v11);
  WTF::PrintStream::printf(v12, "%s", "):\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  LODWORD(v13) = 2 * *((_DWORD *)this + 20) + 6;
  if (v13 >= 0x18)
    v13 = 24;
  else
    v13 = v13;
  if (!*((_DWORD *)this + 7)
    || ((v14 = *((_DWORD *)this + 2), v14 < 4)
      ? (v15 = 0)
      : (v15 = *(_DWORD *)((v14 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4)),
        (v16 = (v14 - v15), v17 = *((_QWORD *)a3 + 23), v18 = v16 + v17, v17 > v18)
     || (v19 = v17 + *((_QWORD *)a3 + 1), v19 < v18)))
  {
    __break(0xC471u);
    JUMPOUT(0x198E65304);
  }
  v20 = **((_DWORD **)this + 2);
  v40 = v18;
  if (v20 < 4)
    v21 = 0;
  else
    v21 = *(_DWORD *)((v20 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
  v22 = (v20 - v21) + v17;
  if (v17 > v22 || v19 < v22)
  {
    __break(0xC471u);
    JUMPOUT(0x198E65324);
  }
  JSC::tryToDisassemble(&v40, v22 - v18, *((_QWORD *)this + 8), *((_QWORD *)this + 9), &JSC::Yarr::s_spaces[-v13 + 24], a2);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v23, "%s", "     == Matching ==\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  JSC::Yarr::YarrDisassembler::dumpForInstructions(this, a2, a3, (uint64_t)this + 16, *((unsigned int *)this + 12), 0, v24, v25);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v26, "%s", "     == Backtracking ==\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  JSC::Yarr::YarrDisassembler::dumpForInstructions(this, a2, a3, (uint64_t)this + 32, *((unsigned int *)this + 13), 1, v27, v28);
  if (*((_DWORD *)this + 13) != *((_DWORD *)this + 14))
  {
    v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v29, "%s", "     == Helpers ==\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    LODWORD(v30) = 2 * *((_DWORD *)this + 20) + 6;
    if (v30 >= 0x18)
      v30 = 24;
    else
      v30 = v30;
    v31 = *((_DWORD *)this + 13);
    if (v31 < 4)
      v32 = 0;
    else
      v32 = *(_DWORD *)((v31 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
    v33 = (v31 - v32);
    v34 = *((_QWORD *)a3 + 23);
    v35 = v33 + v34;
    if (v34 > v35 || (v36 = v34 + *((_QWORD *)a3 + 1), v36 < v35))
    {
      __break(0xC471u);
      JUMPOUT(0x198E65344);
    }
    v37 = *((_DWORD *)this + 14);
    v40 = v35;
    if (v37 < 4)
      v38 = 0;
    else
      v38 = *(_DWORD *)((v37 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
    v39 = (v37 - v38) + v34;
    if (v34 > v39 || v36 < v39)
    {
      __break(0xC471u);
      JUMPOUT(0x198E65364);
    }
    JSC::tryToDisassemble(&v40, v39 - v35, *((_QWORD *)this + 8), *((_QWORD *)this + 9), &JSC::Yarr::s_spaces[-v30 + 24], a2);
  }
  *((_BYTE *)a3 + 170) = 1;
}

void JSC::Yarr::YarrDisassembler::dumpForInstructions(_QWORD *a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  WTF *v43;
  size_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  char *v48;
  _DWORD *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  WTF *v59;
  size_t v60;
  uint64_t v61;
  char *v62;
  _DWORD *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t *v66;
  WTF::PrintStream *v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  _DWORD **v72;
  _DWORD *v73;
  unsigned int v74;
  WTF *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  unint64_t v82;
  WTF *v83;
  void (**v84)(WTF::StringPrintStream *__hidden);
  WTF *v85;
  __int128 v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v84 = off_1E3572250;
  v85 = (WTF *)v87;
  v86 = xmmword_199122F80;
  v87[0] = 0;
  v80 = 0;
  v81 = 0;
  v9 = *(_DWORD *)(a4 + 12);
  if ((_DWORD)a6)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (!v9)
  {
    LODWORD(v17) = 0;
    goto LABEL_79;
  }
  v11 = a6;
  v12 = a5;
  v15 = 0;
  v16 = 0;
  LODWORD(v17) = 0;
  v18 = 0;
  v76 = v10 - 1;
  v19 = "                        ";
  v79 = a4;
  v78 = v10;
  while (1)
  {
    if (v10)
      v20 = v10 - v18;
    else
      v20 = v18;
    if (v9 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198E659D4);
    }
    if (*(_DWORD *)(*(_QWORD *)a4 + 4 * v20) != -1)
      break;
    ++v18;
LABEL_51:
    if (v9 <= v18)
      goto LABEL_79;
  }
  *(_QWORD *)&v86 = 0;
  *(_BYTE *)v85 = 0;
  v82 = 0;
  v83 = 0;
  if ((_DWORD)v17 == (_DWORD)v81)
  {
    v21 = WTF::Vector<JSC::JITDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v80, v17 + 1, (unint64_t)&v82);
    LODWORD(v17) = HIDWORD(v81);
    v15 = v80;
    v22 = (char *)v80 + 16 * HIDWORD(v81);
    *(_DWORD *)v22 = *(_DWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)(v21 + 8) = 0;
    *((_QWORD *)v22 + 1) = v23;
  }
  else
  {
    v24 = (uint64_t)v16 + 16 * v17;
    *(_DWORD *)v24 = 0;
    v83 = 0;
    *(_QWORD *)(v24 + 8) = 0;
  }
  v17 = (v17 + 1);
  HIDWORD(v81) = v17;
  v25 = v83;
  v83 = 0;
  if (!v25)
    goto LABEL_18;
  if (*(_DWORD *)v25 != 1)
  {
    --*(_DWORD *)v25;
LABEL_18:
    if (!(_DWORD)v17)
      goto LABEL_109;
    goto LABEL_19;
  }
  WTF::fastFree((unint64_t)v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v17)
  {
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x198E659F4);
  }
LABEL_19:
  v77 = v17 - 1;
  *((_DWORD *)v15 + 4 * v17 - 4) = v20;
  v26 = (*(uint64_t (**)(_QWORD, void (***)(WTF::StringPrintStream *__hidden), uint64_t))(*(_QWORD *)*a1 + 40))(*a1, &v84, v20);
  if ((_DWORD)v11)
    v27 = -v26;
  else
    v27 = v26;
  v28 = *((_DWORD *)a1 + 20) + v27;
  *((_DWORD *)a1 + 20) = v28;
  v29 = *(_DWORD *)(v79 + 12);
  v30 = *(_QWORD *)v79;
  if (!v78)
  {
    do
    {
      if (v29 <= ++v18)
        goto LABEL_58;
      v32 = *(_DWORD *)(v30 + 4 * v18);
    }
    while (v32 == -1);
LABEL_30:
    LODWORD(v33) = 2 * v28 + 6;
    if (v33 >= 0x18)
      v33 = 24;
    else
      v33 = v33;
    if (v29 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198E659DCLL);
    }
    v34 = *(_DWORD *)(v30 + 4 * v20);
    if (v34 < 4)
      v35 = 0;
    else
      v35 = *(_DWORD *)((v34 & 0xFFFFFFFC) + a3[3] - 4);
    v36 = (v34 - v35);
    v37 = a3[23];
    v38 = v36 + v37;
    if (v37 > v38 || (v39 = v37 + a3[1], v39 < v38))
    {
      __break(0xC471u);
      JUMPOUT(0x198E659A0);
    }
    v82 = v38;
    if (v32 < 4)
      v40 = 0;
    else
      v40 = *(_DWORD *)((v32 & 0xFFFFFFFC) + a3[3] - 4);
    v41 = (v32 - v40) + v37;
    if (v37 > v41 || v39 < v41)
    {
      __break(0xC471u);
      JUMPOUT(0x198E659C0);
    }
    v42 = v12;
    v75 = v15;
    JSC::tryToDisassemble(&v82, v41 - v38, a1[8], a1[9], &v19[-v33 + 24], (WTF::PrintStream *)&v84);
    v43 = v85;
    if (v85)
    {
      v74 = v12;
      v44 = v86;
      if ((unint64_t)v86 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198E659E4);
      }
      if ((_QWORD)v86 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x198E659ECLL);
      }
      v45 = v11;
      v46 = v19;
      v47 = WTF::fastMalloc((WTF *)(v86 + 17));
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = v44;
      memcpy((void *)(v47 + 16), v43, v44);
      *(_BYTE *)(v47 + 16 + v44) = 0;
      v42 = v74;
    }
    else
    {
      v45 = v11;
      v46 = v19;
      v47 = 0;
    }
    a4 = v79;
    v15 = v75;
    v48 = (char *)v75 + 16 * v77;
    v49 = (_DWORD *)*((_QWORD *)v48 + 1);
    *((_QWORD *)v48 + 1) = v47;
    v19 = v46;
    v11 = v45;
    v12 = v42;
    if (v49)
    {
      if (*v49 == 1)
      {
        WTF::fastFree((unint64_t)v49, a2, (uint64_t)a3, v79, a5, a6, a7, a8);
        a4 = v79;
      }
      else
      {
        --*v49;
      }
    }
    v9 = *(_DWORD *)(a4 + 12);
    v16 = v75;
    v10 = v78;
    goto LABEL_51;
  }
  v31 = v76 - v18;
  while (v29 > ++v18)
  {
    if (v29 <= v31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E659CCLL);
    }
    v32 = *(_DWORD *)(v30 + 4 * v31--);
    if (v32 != -1)
      goto LABEL_30;
  }
LABEL_58:
  LODWORD(v50) = 2 * v28 + 6;
  if (v50 >= 0x18)
    v50 = 24;
  else
    v50 = v50;
  if (v29 <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x198E659FCLL);
  }
  v51 = *(_DWORD *)(v30 + 4 * v20);
  if (v51 < 4)
    v52 = 0;
  else
    v52 = *(_DWORD *)((v51 & 0xFFFFFFFC) + a3[3] - 4);
  v53 = (v51 - v52);
  v54 = a3[23];
  v55 = v53 + v54;
  if (v54 > v55)
    goto LABEL_112;
  v56 = v54 + a3[1];
  if (v56 < v55)
    goto LABEL_112;
  v82 = v55;
  if ((int)v12 < 4)
    v57 = 0;
  else
    v57 = *(_DWORD *)((v12 & 0xFFFFFFFC) + a3[3] - 4);
  v58 = (v12 - v57) + v54;
  if (v54 > v58 || v56 < v58)
  {
    __break(0xC471u);
    JUMPOUT(0x198E65980);
  }
  JSC::tryToDisassemble(&v82, v58 - v55, a1[8], a1[9], &v19[-v50 + 24], (WTF::PrintStream *)&v84);
  v59 = v85;
  if (!v85)
  {
    v61 = 0;
    goto LABEL_76;
  }
  v60 = v86;
  if ((unint64_t)v86 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x198E65A04);
  }
  if ((_QWORD)v86 == -17)
  {
LABEL_112:
    __break(0xC471u);
    JUMPOUT(0x198E65960);
  }
  v61 = WTF::fastMalloc((WTF *)(v86 + 17));
  *(_DWORD *)v61 = 1;
  *(_QWORD *)(v61 + 8) = v60;
  memcpy((void *)(v61 + 16), v59, v60);
  *(_BYTE *)(v61 + 16 + v60) = 0;
LABEL_76:
  v62 = (char *)v15 + 16 * v77;
  v63 = (_DWORD *)*((_QWORD *)v62 + 1);
  *((_QWORD *)v62 + 1) = v61;
  if (v63)
  {
    if (*v63 == 1)
      WTF::fastFree((unint64_t)v63, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*v63;
  }
LABEL_79:
  if (v85 != (WTF *)v87)
    WTF::fastFree((unint64_t)v85, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v64 = v80;
  if ((_DWORD)v17)
  {
    v65 = v17;
    v66 = (uint64_t *)((char *)v80 + 8);
    v17 = v17;
    do
    {
      v67 = (WTF::PrintStream *)(*(uint64_t (**)(void *))(*(_QWORD *)a2 + 32))(a2);
      v68 = *v66;
      v66 += 2;
      v69 = (const char *)(v68 + 16);
      if (v68)
        v70 = v69;
      else
        v70 = 0;
      WTF::PrintStream::printf(v67, "%s", v70);
      (*(void (**)(void *))(*(_QWORD *)a2 + 40))(a2);
      --v17;
    }
    while (v17);
    v71 = 16 * v65;
    v72 = (_DWORD **)((char *)v64 + 8);
    do
    {
      v73 = *v72;
      *v72 = 0;
      if (v73)
      {
        if (*v73 == 1)
          WTF::fastFree((unint64_t)v73, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        else
          --*v73;
      }
      v72 += 2;
      v71 -= 16;
    }
    while (v71);
  }
  if (v64)
    WTF::fastFree((unint64_t)v64, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Yarr::errorMessage(unsigned int a1)
{
  return JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[2 * a1];
}

unint64_t JSC::Yarr::errorToThrow(JSC::JSGlobalObject *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  const WTF::String *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  if (a2 - 1 < 0x19 || a2 - 27 < 5)
  {
    v3 = &JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[2 * a2];
    v4 = v3[1];
    if (v4)
    {
      v5 = v4 - 1;
      if (v4 == 1)
      {
        v7 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      else
      {
        v6 = *v3;
        v7 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        *v7 = 2;
        v7[1] = v5;
        *((_QWORD *)v7 + 1) = v6;
        v7[4] = 4;
      }
    }
    else
    {
      v7 = 0;
    }
    v29 = (WTF::StringImpl *)v7;
    v8 = JSC::createSyntaxError(a1, &v29, 0);
  }
  else
  {
    if (a2 != 26)
      return 0;
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v19 = 0x3800000002;
    *(_QWORD *)(v19 + 8) = "Invalid regular expression: too many nested disjunctions";
    *(_DWORD *)(v19 + 16) = 4;
    v29 = (WTF::StringImpl *)v19;
    v8 = JSC::createOutOfMemoryError((unint64_t)a1, &v29, v20);
  }
  v16 = v8;
  v17 = v29;
  v29 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  return v16;
}

uint64_t JSC::Yarr::parseFlags(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned int v4;
  int v5;
  int v7;
  char v8;
  int v9;
  char v10;

  v2 = a2;
  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v3 = 0;
      while (2)
      {
        v4 = 0;
        v7 = *(unsigned __int8 *)a1;
        a1 = (unsigned __int16 *)((char *)a1 + 1);
        v5 = 0;
        switch(v7)
        {
          case 'd':
            if ((v3 & 1) != 0)
              goto LABEL_28;
            v8 = 1;
            goto LABEL_10;
          case 'e':
          case 'f':
          case 'h':
          case 'j':
          case 'k':
          case 'l':
            return v5 | v4;
          case 'g':
            if ((v3 & 2) != 0)
              goto LABEL_28;
            v8 = 2;
            goto LABEL_10;
          case 'i':
            if ((v3 & 4) != 0)
              goto LABEL_28;
            v8 = 4;
            goto LABEL_10;
          case 'm':
            if ((v3 & 8) != 0)
              goto LABEL_28;
            v8 = 8;
LABEL_10:
            v3 |= v8;
            if (--v2)
              continue;
            goto LABEL_26;
          default:
            goto LABEL_31;
        }
      }
    }
    v3 = 0;
    do
    {
      v4 = 0;
      v9 = *a1++;
      v5 = 0;
      switch(v9)
      {
        case 'd':
          if ((v3 & 1) != 0)
            goto LABEL_28;
          v10 = 1;
          break;
        case 'e':
        case 'f':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
          return v5 | v4;
        case 'g':
          if ((v3 & 2) != 0)
            goto LABEL_28;
          v10 = 2;
          break;
        case 'i':
          if ((v3 & 4) != 0)
            goto LABEL_28;
          v10 = 4;
          break;
        case 'm':
          if ((v3 & 8) != 0)
            goto LABEL_28;
          v10 = 8;
          break;
        default:
LABEL_31:
          v5 = 0;
          return v5 | v4;
      }
      v3 |= v10;
      --v2;
    }
    while (v2);
LABEL_26:
    if ((v3 & 0x20) != 0 && (v3 & 0x40) != 0)
    {
LABEL_28:
      v4 = 0;
      v5 = 0;
      return v5 | v4;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = v3;
  v5 = 0x10000;
  return v5 | v4;
}

uint64_t JSC::Yarr::flagsString(char a1)
{
  unsigned int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  if ((a1 & 1) != 0)
  {
    LOBYTE(v6[0]) = 100;
    v1 = 1;
  }
  else
  {
    v1 = 0;
  }
  if ((a1 & 2) != 0)
  {
    v3 = v1++;
    *(_BYTE *)((unint64_t)v6 | v3) = 103;
  }
  if ((a1 & 4) != 0)
  {
    v4 = v1++;
    *(_BYTE *)((unint64_t)v6 | v4) = 105;
  }
  if ((a1 & 8) != 0)
  {
    v5 = v1++;
    *(_BYTE *)((unint64_t)v6 | v5) = 109;
  }
  if ((a1 & 0x10) != 0)
    *((_BYTE *)v6 + v1++) = 115;
  if ((a1 & 0x20) != 0)
    *((_BYTE *)v6 + v1++) = 117;
  if ((a1 & 0x40) != 0)
    *((_BYTE *)v6 + v1++) = 118;
  if (a1 < 0)
    *((_BYTE *)v6 + v1++) = 121;
  *((_BYTE *)v6 + v1) = 0;
  return v6[0];
}

void JSC::Yarr::ByteTermDumper::dumpTerm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  WTF::PrintStream *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  int v15;
  unsigned int v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  WTF::PrintStream *v29;
  WTF::PrintStream *v30;
  WTF::PrintStream *v31;
  const char *v32;
  int v33;
  unsigned int v34;
  WTF::PrintStream *v35;
  WTF::PrintStream *v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  WTF::PrintStream *v41;
  WTF::PrintStream *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  WTF::PrintStream *v47;
  WTF::PrintStream *v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  WTF::PrintStream *v53;
  WTF::PrintStream *v54;
  int v55;
  unsigned int v56;
  WTF::PrintStream *v57;
  WTF::PrintStream *v58;
  int v59;
  unsigned int v60;
  WTF::PrintStream *v61;
  WTF::PrintStream *v62;
  int v63;
  unsigned int v64;
  WTF::PrintStream *v65;
  WTF::PrintStream *v66;
  WTF::PrintStream *v67;
  char v68;
  int v69;
  unsigned int v70;
  WTF::PrintStream *v71;
  WTF::PrintStream *v72;
  WTF::PrintStream *v73;
  WTF::PrintStream *v74;
  int v75;
  unsigned int v76;
  WTF::PrintStream *v77;
  WTF::PrintStream *v78;
  WTF::PrintStream *v79;
  WTF::PrintStream *v80;
  WTF::PrintStream *v81;
  int v82;
  unsigned int v83;
  WTF::PrintStream *v84;
  WTF::PrintStream *v85;
  WTF::PrintStream *v86;
  const char *v87;
  int v88;
  unsigned int v89;
  WTF::PrintStream *v90;
  WTF::PrintStream *v91;
  WTF::PrintStream *v92;
  WTF::PrintStream *v93;
  int v94;
  unsigned int v95;
  WTF::PrintStream *v96;
  WTF::PrintStream *v97;
  int v98;
  unsigned int v99;
  WTF::PrintStream *v100;
  WTF::PrintStream *v101;
  int v102;
  unsigned int v103;
  WTF::PrintStream *v104;
  WTF::PrintStream *v105;
  int v106;
  unsigned int v107;
  WTF::PrintStream *v108;
  WTF::PrintStream *v109;
  WTF::PrintStream *v110;
  int v111;
  unsigned int v112;
  WTF::PrintStream *v113;
  WTF::PrintStream *v114;
  WTF::PrintStream *v115;
  WTF::PrintStream *v116;
  WTF::PrintStream *v117;
  JSC::Yarr::CharacterClass *v118;
  WTF::PrintStream *v119;
  int v120;
  unsigned int v121;
  WTF::PrintStream *v122;
  WTF::PrintStream *v123;
  int v124;
  WTF::PrintStream *v125;
  int v126;
  unsigned int v127;
  WTF::PrintStream *v128;
  WTF::PrintStream *v129;
  WTF::PrintStream *v130;
  char v131;
  int v132;
  WTF::PrintStream *v133;
  const char *v134;
  WTF::PrintStream *v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  WTF::PrintStream *v140;
  WTF::PrintStream *v141;
  WTF::PrintStream *v142;
  const char *v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  WTF::PrintStream *v148;
  WTF::PrintStream *v149;
  char v150;
  int v151;
  WTF::PrintStream *v152;
  const char *v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  WTF::PrintStream *v158;
  WTF::PrintStream *v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  WTF::PrintStream *v164;
  WTF::PrintStream *v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  WTF::PrintStream *v170;
  WTF::PrintStream *v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  WTF::PrintStream *v176;
  WTF::PrintStream *v177;
  WTF::PrintStream *v178;
  WTF::PrintStream *v179;
  int v180;
  unsigned int v181;
  WTF::PrintStream *v182;
  WTF::PrintStream *v183;
  WTF::PrintStream *v184;
  WTF::PrintStream *v185;
  const char *v186;
  int v187;
  unsigned int v188;
  WTF::PrintStream *v189;
  WTF::PrintStream *v190;
  int v191;
  unsigned int v192;
  WTF::PrintStream *v193;
  WTF::PrintStream *v194;
  int v195;
  unsigned int v196;
  WTF::PrintStream *v197;
  WTF::PrintStream *v198;
  int v199;
  WTF::PrintStream *v200;
  WTF::PrintStream *v201;
  int v202;
  WTF::PrintStream *v203;
  WTF::PrintStream *v204;
  char v205;
  char **v206;
  char *v207;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v207 = &v205;
    v206 = &v207;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v206, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = (WTF::PrintStream *)WTF::s_file;
  v207 = (char *)WTF::s_file;
  switch(*(_BYTE *)(a3 + 36))
  {
    case 0:
      v8 = *(_DWORD *)(a1 + 8);
      v9 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v8 + 1;
      if (*(_BYTE *)(a1 + 17))
        v10 = v8;
      else
        v10 = 1;
      if (v9)
      {
        v11 = 0;
        do
        {
          v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v12, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v11;
        }
        while (v11 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v10; --v10)
      {
        v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v13, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v14, "%s", "BodyAlternativeBegin");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_207;
      return;
    case 1:
      if (*(_BYTE *)(a1 + 17))
        v15 = *(_DWORD *)(a1 + 8) - 1;
      else
        v15 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v16 = 0;
        do
        {
          v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v17, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v16;
        }
        while (v16 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v15; --v15)
      {
        v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v18, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_207;
    case 2:
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v20;
      if (*(_BYTE *)(a1 + 17))
        v21 = v20;
      else
        v21 = 1;
      if (v19)
      {
        v22 = 0;
        do
        {
          v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v23, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v22;
        }
        while (v22 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v21; --v21)
      {
        v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v24, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_207;
    case 3:
      v25 = *(_DWORD *)(a1 + 8);
      v26 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v25 + 1;
      if (*(_BYTE *)(a1 + 17))
        v27 = v25;
      else
        v27 = 1;
      if (v26)
      {
        v28 = 0;
        do
        {
          v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v29, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v28;
        }
        while (v28 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v27; --v27)
      {
        v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v30, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v32 = "AlternativeBegin";
      goto LABEL_59;
    case 4:
      if (*(_BYTE *)(a1 + 17))
        v33 = *(_DWORD *)(a1 + 8) - 1;
      else
        v33 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v34 = 0;
        do
        {
          v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v35, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v34;
        }
        while (v34 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v33; --v33)
      {
        v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v36, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v32 = "AlternativeDisjunction";
      goto LABEL_59;
    case 5:
      v37 = *(_DWORD *)(a1 + 12);
      v38 = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v38;
      if (*(_BYTE *)(a1 + 17))
        v39 = v38;
      else
        v39 = 1;
      if (v37)
      {
        v40 = 0;
        do
        {
          v41 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v41, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v40;
        }
        while (v40 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v39; --v39)
      {
        v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v42, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v32 = "AlternativeEnd";
LABEL_59:
      WTF::PrintStream::printf(v31, "%s", v32);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      goto LABEL_258;
    case 6:
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v43 + 1;
      if (*(_BYTE *)(a1 + 17))
        v45 = v43;
      else
        v45 = 1;
      if (v44)
      {
        v46 = 0;
        do
        {
          v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v47, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v46;
        }
        while (v46 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v45; --v45)
      {
        v48 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v48, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_188;
    case 7:
      v49 = *(_DWORD *)(a1 + 12);
      v50 = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v50;
      if (*(_BYTE *)(a1 + 17))
        v51 = v50;
      else
        v51 = 1;
      if (v49)
      {
        v52 = 0;
        do
        {
          v53 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v53, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v52;
        }
        while (v52 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v51; --v51)
      {
        v54 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v54, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_188;
    case 8:
      if (*(_BYTE *)(a1 + 17))
        v55 = *(_DWORD *)(a1 + 8);
      else
        v55 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v56 = 0;
        do
        {
          v57 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v57, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v56;
        }
        while (v56 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v55; --v55)
      {
        v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v58, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_207;
    case 9:
      if (*(_BYTE *)(a1 + 17))
        v59 = *(_DWORD *)(a1 + 8);
      else
        v59 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v60 = 0;
        do
        {
          v61 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v61, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v60;
        }
        while (v60 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v59; --v59)
      {
        v62 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v62, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_207;
    case 0xA:
      if (*(_BYTE *)(a1 + 17))
        v63 = *(_DWORD *)(a1 + 8);
      else
        v63 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v64 = 0;
        do
        {
          v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v65, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v64;
        }
        while (v64 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v63; --v63)
      {
        v66 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v66, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v67 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v67, "%s", "AssertionWordBoundary");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      v68 = *(_BYTE *)(a3 + 37);
      if ((v68 & 2) != 0)
        goto LABEL_188;
      goto LABEL_206;
    case 0xB:
      if (*(_BYTE *)(a1 + 17))
        v69 = *(_DWORD *)(a1 + 8);
      else
        v69 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v70 = 0;
        do
        {
          v71 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v71, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v70;
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v69; --v69)
      {
        v72 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v72, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v73 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v73, "%s", "PatternCharacterOnce");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_BYTE *)(a3 + 37) & 2) != 0)
      {
        v74 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v74, "%s", " inverted");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      WTF::PrintStream::printf(v7, " inputPosition %u");
      goto LABEL_150;
    case 0xC:
      if (*(_BYTE *)(a1 + 17))
        v75 = *(_DWORD *)(a1 + 8);
      else
        v75 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v76 = 0;
        do
        {
          v77 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v77, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v76;
        }
        while (v76 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v75; --v75)
      {
        v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v78, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v79 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v79, "%s", "PatternCharacterFixed");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_BYTE *)(a3 + 37) & 2) != 0)
      {
        v80 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v80, "%s", " inverted");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      WTF::PrintStream::printf(v7, " inputPosition %u", *(_DWORD *)(a3 + 40));
      WTF::PrintStream::printf(v7, " frameLocation %u", *(_DWORD *)(a3 + 32));
      v81 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v81, "%s", " ");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_DWORD *)a3 - 32) > 0xDF)
        WTF::PrintStream::printf(v7, "0x%04x");
      else
        WTF::PrintStream::printf(v7, "'%c'");
      v201 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v201, "%s", " {");
      WTF::PrintStream::printf(v201, "%u", *(_DWORD *)(a3 + 20));
      WTF::PrintStream::printf(v201, "%s");
      goto LABEL_189;
    case 0xD:
      if (*(_BYTE *)(a1 + 17))
        v82 = *(_DWORD *)(a1 + 8);
      else
        v82 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v83 = 0;
        do
        {
          v84 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v84, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v83;
        }
        while (v83 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v82; --v82)
      {
        v85 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v85, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v86 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v87 = "PatternCharacterGreedy";
      goto LABEL_147;
    case 0xE:
      if (*(_BYTE *)(a1 + 17))
        v88 = *(_DWORD *)(a1 + 8);
      else
        v88 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v89 = 0;
        do
        {
          v90 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v90, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v89;
        }
        while (v89 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v88; --v88)
      {
        v91 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v91, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v86 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v87 = "PatternCharacterNonGreedy";
LABEL_147:
      WTF::PrintStream::printf(v86, "%s", v87);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_BYTE *)(a3 + 37) & 2) != 0)
      {
        v92 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v92, "%s", " inverted");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      WTF::PrintStream::printf(v7, " inputPosition %u", *(_DWORD *)(a3 + 40));
      WTF::PrintStream::printf(v7, " frameLocation %u");
LABEL_150:
      v93 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v93, "%s", " ");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_DWORD *)a3 - 32) > 0xDF)
        WTF::PrintStream::printf(v7, "0x%04x");
      else
        WTF::PrintStream::printf(v7, "'%c'");
      goto LABEL_204;
    case 0xF:
      if (*(_BYTE *)(a1 + 17))
        v94 = *(_DWORD *)(a1 + 8);
      else
        v94 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v95 = 0;
        do
        {
          v96 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v96, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v95;
        }
        while (v95 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v94; --v94)
      {
        v97 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v97, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_188;
    case 0x10:
      if (*(_BYTE *)(a1 + 17))
        v98 = *(_DWORD *)(a1 + 8);
      else
        v98 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v99 = 0;
        do
        {
          v100 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v100, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v99;
        }
        while (v99 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v98; --v98)
      {
        v101 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v101, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_188;
    case 0x11:
      if (*(_BYTE *)(a1 + 17))
        v102 = *(_DWORD *)(a1 + 8);
      else
        v102 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v103 = 0;
        do
        {
          v104 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v104, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v103;
        }
        while (v103 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v102; --v102)
      {
        v105 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v105, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_188;
    case 0x12:
      if (*(_BYTE *)(a1 + 17))
        v106 = *(_DWORD *)(a1 + 8);
      else
        v106 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v107 = 0;
        do
        {
          v108 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v108, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v107;
        }
        while (v107 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v106; --v106)
      {
        v109 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v109, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
LABEL_188:
      v110 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v110, "%s");
LABEL_189:
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      goto LABEL_205;
    case 0x13:
      if (*(_BYTE *)(a1 + 17))
        v111 = *(_DWORD *)(a1 + 8);
      else
        v111 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v112 = 0;
        do
        {
          v113 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v113, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v112;
        }
        while (v112 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v111; --v111)
      {
        v114 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v114, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v115 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v115, "%s", "CharacterClass");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_BYTE *)(a3 + 37) & 2) != 0)
      {
        v116 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v116, "%s", " inverted");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      WTF::PrintStream::printf(v7, " inputPosition %u", *(_DWORD *)(a3 + 40));
      if (*(_BYTE *)(a3 + 16) || *(unsigned __int8 *)(a1 + 16) - 1 <= 1)
        WTF::PrintStream::printf(v7, " frameLocation %u", *(_DWORD *)(a3 + 32));
      v117 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v117, "%s", " ");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      JSC::Yarr::dumpCharacterClass(v7, *(WTF::PrintStream **)a1, *(const void ***)a3, v118);
LABEL_204:
      JSC::Yarr::ByteTermDumper::dumpTerm(unsigned long,JSC::Yarr::ByteTerm)::$_1::operator()(&v207, a3);
LABEL_205:
      v68 = *(_BYTE *)(a3 + 37);
LABEL_206:
      if ((v68 & 4) != 0)
        goto LABEL_207;
      return;
    case 0x14:
      if (*(_BYTE *)(a1 + 17))
        v120 = *(_DWORD *)(a1 + 8);
      else
        v120 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v121 = 0;
        do
        {
          v122 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v122, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v121;
        }
        while (v121 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v120; --v120)
      {
        v123 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v123, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v124 = *(_DWORD *)a3;
      v125 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v125, "%s", "BackReference #");
      WTF::PrintStream::printf(v125, "%u", v124);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      WTF::PrintStream::printf(v7, " inputPosition %u", *(_DWORD *)(a3 + 40));
      JSC::Yarr::ByteTermDumper::dumpTerm(unsigned long,JSC::Yarr::ByteTerm)::$_1::operator()(&v207, a3);
      return;
    case 0x15:
      if (*(_BYTE *)(a1 + 17))
        v126 = *(_DWORD *)(a1 + 8);
      else
        v126 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v127 = 0;
        do
        {
          v128 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v128, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v127;
        }
        while (v127 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v126; --v126)
      {
        v129 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v129, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v130 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v130, "%s", "ParenthesesSubpattern");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      v131 = *(_BYTE *)(a3 + 37);
      if ((v131 & 1) != 0)
      {
        v202 = *(_DWORD *)a3;
        v203 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v203, "%s", " captured (#");
        WTF::PrintStream::printf(v203, "%u", v202);
        WTF::PrintStream::printf(v203, "%s", ")");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
        v131 = *(_BYTE *)(a3 + 37);
        if ((v131 & 2) == 0)
        {
LABEL_227:
          if ((v131 & 4) == 0)
            goto LABEL_231;
          goto LABEL_228;
        }
      }
      else if ((*(_BYTE *)(a3 + 37) & 2) == 0)
      {
        goto LABEL_227;
      }
      v204 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v204, "%s", " inverted");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_BYTE *)(a3 + 37) & 4) == 0)
        goto LABEL_231;
LABEL_228:
      v132 = *(_BYTE *)(a3 + 36) & 0xFE;
      v133 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v134 = " backward";
      if (v132 == 26)
        v134 = " lookbehind";
      WTF::PrintStream::printf(v133, "%s", v134);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
LABEL_231:
      WTF::PrintStream::printf(v7, " inputPosition %u", *(_DWORD *)(a3 + 40));
      WTF::PrintStream::printf(v7, " frameLocation %u", *(_DWORD *)(a3 + 32));
      JSC::Yarr::ByteTermDumper::dumpTerm(unsigned long,JSC::Yarr::ByteTerm)::$_1::operator()(&v207, a3);
      if (*(_BYTE *)(a1 + 17))
      {
        v135 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v135, "%s", "\n");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
        JSC::Yarr::ByteTermDumper::dumpDisjunction(a1, *(_QWORD *)(a3 + 8), *(unsigned int *)(a1 + 8));
      }
      return;
    case 0x16:
      v136 = *(_DWORD *)(a1 + 8);
      v137 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v136 + 1;
      if (*(_BYTE *)(a1 + 17))
        v138 = v136;
      else
        v138 = 1;
      if (v137)
      {
        v139 = 0;
        do
        {
          v140 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v140, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v139;
        }
        while (v139 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v138; --v138)
      {
        v141 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v141, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v142 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v143 = "ParenthesesSubpatternOnceBegin";
      goto LABEL_251;
    case 0x17:
      v144 = *(_DWORD *)(a1 + 12);
      v145 = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v145;
      if (*(_BYTE *)(a1 + 17))
        v146 = v145;
      else
        v146 = 1;
      if (v144)
      {
        v147 = 0;
        do
        {
          v148 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v148, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v147;
        }
        while (v147 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v146; --v146)
      {
        v149 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v149, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v142 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v143 = "ParenthesesSubpatternOnceEnd";
LABEL_251:
      WTF::PrintStream::printf(v142, "%s", v143);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      v150 = *(_BYTE *)(a3 + 37);
      if ((v150 & 1) != 0)
      {
        v199 = *(_DWORD *)a3;
        v200 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v200, "%s", " captured (#");
        WTF::PrintStream::printf(v200, "%u", v199);
        WTF::PrintStream::printf(v200, "%s");
LABEL_296:
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
        v150 = *(_BYTE *)(a3 + 37);
        if ((v150 & 2) == 0)
        {
LABEL_253:
          if ((v150 & 4) == 0)
            goto LABEL_257;
          goto LABEL_254;
        }
      }
      else if ((*(_BYTE *)(a3 + 37) & 2) == 0)
      {
        goto LABEL_253;
      }
      v179 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v179, "%s", " inverted");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_BYTE *)(a3 + 37) & 4) == 0)
        goto LABEL_257;
LABEL_254:
      v151 = *(_BYTE *)(a3 + 36) & 0xFE;
      v152 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v153 = " backward";
      if (v151 == 26)
        v153 = " lookbehind";
      WTF::PrintStream::printf(v152, "%s", v153);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
LABEL_257:
      WTF::PrintStream::printf(v7, " inputPosition %u", *(_DWORD *)(a3 + 40));
LABEL_258:
      WTF::PrintStream::printf(v7, " frameLocation %u", *(_DWORD *)(a3 + 32));
      return;
    case 0x18:
      v154 = *(_DWORD *)(a1 + 8);
      v155 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v154 + 1;
      if (*(_BYTE *)(a1 + 17))
        v156 = v154;
      else
        v156 = 1;
      if (v155)
      {
        v157 = 0;
        do
        {
          v158 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v158, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v157;
        }
        while (v157 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v156; --v156)
      {
        v159 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v159, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_295;
    case 0x19:
      v160 = *(_DWORD *)(a1 + 12);
      v161 = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v161;
      if (*(_BYTE *)(a1 + 17))
        v162 = v161;
      else
        v162 = 1;
      if (v160)
      {
        v163 = 0;
        do
        {
          v164 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v164, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v163;
        }
        while (v163 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v162; --v162)
      {
        v165 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v165, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_295;
    case 0x1A:
      v166 = *(_DWORD *)(a1 + 8);
      v167 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v166 + 1;
      if (*(_BYTE *)(a1 + 17))
        v168 = v166;
      else
        v168 = 1;
      if (v167)
      {
        v169 = 0;
        do
        {
          v170 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v170, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v169;
        }
        while (v169 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v168; --v168)
      {
        v171 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v171, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      goto LABEL_295;
    case 0x1B:
      v172 = *(_DWORD *)(a1 + 12);
      v173 = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v173;
      if (*(_BYTE *)(a1 + 17))
        v174 = v173;
      else
        v174 = 1;
      if (v172)
      {
        v175 = 0;
        do
        {
          v176 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v176, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v175;
        }
        while (v175 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v174; --v174)
      {
        v177 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v177, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
LABEL_295:
      v178 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v178, "%s");
      goto LABEL_296;
    case 0x1C:
      if (*(_BYTE *)(a1 + 17))
        v180 = *(_DWORD *)(a1 + 8);
      else
        v180 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v181 = 0;
        do
        {
          v182 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v182, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v181;
        }
        while (v181 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v180; --v180)
      {
        v183 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v183, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v184 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v185 = v184;
      v186 = "CheckInput ";
      goto LABEL_326;
    case 0x1D:
      if (*(_BYTE *)(a1 + 17))
        v187 = *(_DWORD *)(a1 + 8);
      else
        v187 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v188 = 0;
        do
        {
          v189 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v189, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v188;
        }
        while (v188 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v187; --v187)
      {
        v190 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v190, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v184 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v185 = v184;
      v186 = "UncheckInput ";
      goto LABEL_326;
    case 0x1E:
      if (*(_BYTE *)(a1 + 17))
        v191 = *(_DWORD *)(a1 + 8);
      else
        v191 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v192 = 0;
        do
        {
          v193 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v193, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v192;
        }
        while (v192 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v191; --v191)
      {
        v194 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v194, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
      v184 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v185 = v184;
      v186 = "HaveCheckedInput ";
LABEL_326:
      WTF::PrintStream::printf(v184, "%s", v186);
      WTF::PrintStream::printf(v185, "%u");
      goto LABEL_327;
    case 0x1F:
      if (*(_BYTE *)(a1 + 17))
        v195 = *(_DWORD *)(a1 + 8);
      else
        v195 = 1;
      if (*(_DWORD *)(a1 + 12))
      {
        v196 = 0;
        do
        {
          v197 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
          WTF::PrintStream::printf(v197, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
          ++v196;
        }
        while (v196 < *(_DWORD *)(a1 + 12));
      }
      WTF::PrintStream::printf(v7, "%4zu", a2);
      for (; v195; --v195)
      {
        v198 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v198, "%s", "  ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      }
LABEL_207:
      v119 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v119, "%s");
LABEL_327:
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      return;
    default:
      return;
  }
}

_QWORD *JSC::Yarr::ByteTermDumper::dumpTerm(unsigned long,JSC::Yarr::ByteTerm)::$_1::operator()(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  int v14;
  WTF::PrintStream *v15;

  v3 = result;
  if (!*(_BYTE *)(a2 + 16))
  {
    if (*(_DWORD *)(a2 + 24) < 2u)
      return result;
    v10 = *result;
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 32))(*result);
    WTF::PrintStream::printf(v11, "%s", " {");
    WTF::PrintStream::printf(v11, "%u", *(_DWORD *)(a2 + 24));
    WTF::PrintStream::printf(v11, "%s");
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  v4 = *result;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 32))(*result);
  WTF::PrintStream::printf(v5, "%s", " {");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)(a2 + 20));
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v6 = *(_DWORD *)(a2 + 24);
  v7 = *v3;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  v9 = v8;
  if (v6 == -1)
  {
    WTF::PrintStream::printf(v8, "%s");
  }
  else
  {
    WTF::PrintStream::printf(v8, "%s", ",");
    WTF::PrintStream::printf(v9, "%u");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v12 = *v3;
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  WTF::PrintStream::printf(v13, "%s", "}");
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 2 || v14 == 1)
  {
    v10 = *v3;
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    WTF::PrintStream::printf(v15, "%s");
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return result;
}

void JSC::Yarr::ByteTermDumper::dumpDisjunction(uint64_t a1, unsigned int *a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  __int128 v14;
  WTF::PrintStream *v15;
  _OWORD v16[2];
  int v17;
  char v18;
  _QWORD v19[2];
  _BYTE v20[11];
  char v21;
  _BYTE *v22;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    *(_QWORD *)v20 = &v21;
    v22 = v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = *(_DWORD *)(a1 + 12);
  if (a3)
  {
    *(_DWORD *)(a1 + 12) = a3 - 1;
  }
  else
  {
    WTF::PrintStream::printf((WTF::PrintStream *)WTF::s_file, "ByteDisjunction(%p):\n", a2);
    *(_BYTE *)(a1 + 17) = 1;
    *(_DWORD *)(a1 + 8) = 1;
  }
  if (a2[3])
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)a2 + v9;
      v12 = *(unsigned __int8 *)(v11 + 36);
      *(_QWORD *)v20 = *(_QWORD *)(v11 + 37);
      *(_DWORD *)&v20[7] = *(_DWORD *)(v11 + 44);
      v13 = *(_DWORD *)(v11 + 32);
      v14 = *(_OWORD *)(v11 + 16);
      v16[0] = *(_OWORD *)v11;
      v16[1] = v14;
      v17 = v13;
      v18 = v12;
      *(_DWORD *)((char *)v19 + 7) = *(_DWORD *)&v20[7];
      v19[0] = *(_QWORD *)v20;
      JSC::Yarr::ByteTermDumper::dumpTerm(a1, v10, (uint64_t)v16);
      if (v12 != 21)
      {
        v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
        WTF::PrintStream::printf(v15, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      }
      ++v10;
      v9 += 48;
    }
    while (v10 < a2[3]);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void JSC::Yarr::byteCompile(unint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  WTF *v25[2];
  WTF *v26[2];

  v21 = a1;
  v22 = 0;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
    v9 = WTF::Thread::initializeCurrentTLS(0);
  v23 = *(_QWORD *)(v9 + 24) + 0x10000;
  v24 = 0;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)v26 = 0u;
  JSC::Yarr::ByteCompiler::compile(&v21, a2, a4, a3, a5);
  if (HIDWORD(v26[1]))
    WTF::VectorDestructor<true,std::unique_ptr<JSC::Yarr::ByteDisjunction>>::destruct((unint64_t *)v26[0], (unint64_t *)v26[0] + HIDWORD(v26[1]), v11, v12, v13, v14, v15, v16);
  v17 = v26[0];
  if (v26[0])
  {
    v26[0] = 0;
    LODWORD(v26[1]) = 0;
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  }
  v18 = v25[0];
  if (v25[0])
  {
    v25[0] = 0;
    LODWORD(v25[1]) = 0;
    WTF::fastFree((unint64_t)v18, v10, v11, v12, v13, v14, v15, v16);
  }
  v19 = v22;
  v22 = 0;
  if (v19)
  {
    v20 = *(_QWORD *)v19;
    if (*(_QWORD *)v19)
    {
      *(_QWORD *)v19 = 0;
      *((_DWORD *)v19 + 2) = 0;
      WTF::fastFree(v20, v10, v11, v12, v13, v14, v15, v16);
    }
    WTF::fastFree((unint64_t)v19, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Yarr::ByteCompiler::compile(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t *a5@<X8>)
{
  _DWORD *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned __int16 v30;
  _DWORD *v31;
  unsigned int v32;
  _DWORD *v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  unsigned int *v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  _DWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  char v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87[4];
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  if ((unint64_t)&v86 < a1[2])
  {
    v53 = 0;
    *a4 = 26;
    goto LABEL_42;
  }
  v8 = *(_DWORD **)(*a1 + 16);
  if (!v8[3])
  {
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x198E68D88);
  }
  v11 = v8[7];
  v12 = *(_DWORD *)(*a1 + 4);
  v13 = *(_BYTE *)(**(_QWORD **)v8 + 37) & 1;
  v14 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_DWORD *)(v14 + 16) = v12;
  *(_DWORD *)(v14 + 20) = v11;
  v22 = a1[1];
  a1[1] = v14;
  if (v22)
  {
    v23 = *(_QWORD *)v22;
    if (*(_QWORD *)v22)
    {
      *(_QWORD *)v22 = 0;
      *(_DWORD *)(v22 + 8) = 0;
      WTF::fastFree(v23, v15, v16, v17, v18, v19, v20, v21);
    }
    WTF::fastFree(v22, v15, v16, v17, v18, v19, v20, v21);
    v14 = a1[1];
  }
  LODWORD(v91) = 0;
  WORD2(v91) = 0;
  DWORD2(v91) = 0;
  LOBYTE(v90) = 0;
  *(_QWORD *)((char *)&v90 + 4) = 0x100000001;
  *(_QWORD *)&v89 = 0;
  BYTE8(v89) = v13;
  v24 = *(_DWORD *)(v14 + 12);
  if (v24 == *(_DWORD *)(v14 + 8))
  {
    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v14, (unint64_t)&v89);
  }
  else
  {
    v25 = (_OWORD *)(*(_QWORD *)v14 + 48 * v24);
    v26 = v89;
    v27 = v91;
    v25[1] = v90;
    v25[2] = v27;
    *v25 = v26;
    ++*(_DWORD *)(v14 + 12);
  }
  v28 = (_DWORD *)a1[1];
  if (!v28[3])
  {
    __break(0xC471u);
    JUMPOUT(0x198E68D90);
  }
  *(_DWORD *)(*(_QWORD *)v28 + 32) = 0;
  *((_DWORD *)a1 + 6) = 0;
  v29 = *(_QWORD *)(*a1 + 16);
  v87[0] = 0;
  v88 = 0;
  v30 = JSC::Yarr::ByteCompiler::emitDisjunction((uint64_t)a1, v29, v87, 0, 0);
  if (v30 >= 0x100u)
  {
    v53 = 0;
    *a4 = v30;
    goto LABEL_42;
  }
  v31 = (_DWORD *)a1[1];
  v32 = v31[3];
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x198E68D98);
  }
  v33 = *(_DWORD **)v31;
  v34 = *(_DWORD *)(*(_QWORD *)v31 + 32);
  v35 = **(_DWORD **)v31;
  if (v35)
  {
    v36 = 0;
    v72 = v32;
    v73 = v33;
    while (1)
    {
      v36 += v35;
      if (v72 <= v36)
      {
        __break(0xC471u);
        JUMPOUT(0x198E68DB8);
      }
      v73[12 * v36 + 1] = v32 - v36;
      v74 = a1[1];
      v72 = *(_DWORD *)(v74 + 12);
      if (v72 <= v36)
        goto LABEL_71;
      v73 = *(_DWORD **)v74;
      v33 = (_DWORD *)(*(_QWORD *)v74 + 48 * v36);
      v33[8] = v34;
      v35 = *v33;
      if (!*v33)
        goto LABEL_14;
    }
  }
  v36 = 0;
LABEL_14:
  *v33 = -v36;
  v37 = a1[1];
  LODWORD(v91) = 0;
  WORD2(v91) = 2;
  DWORD2(v91) = 0;
  LOBYTE(v90) = 0;
  *(_QWORD *)((char *)&v90 + 4) = 0x100000001;
  BYTE8(v89) = 0;
  *(_QWORD *)&v89 = 0;
  v38 = *(_DWORD *)(v37 + 12);
  if (v38 == *(_DWORD *)(v37 + 8))
  {
    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v37, (unint64_t)&v89);
  }
  else
  {
    v39 = (_OWORD *)(*(_QWORD *)v37 + 48 * v38);
    v40 = v89;
    v41 = v91;
    v39[1] = v90;
    v39[2] = v41;
    *v39 = v40;
    ++*(_DWORD *)(v37 + 12);
  }
  v42 = (unsigned int *)a1[1];
  if (v42[3] <= v32)
  {
    __break(0xC471u);
    JUMPOUT(0x198E68DA0);
  }
  *(_DWORD *)(*(_QWORD *)v42 + 48 * v32 + 32) = v34;
  if (BYTE4(qword_1ECF4C6B8))
  {
    v75 = *a1;
    v89 = *a1;
    LOWORD(v90) = 0;
    if (v75)
    {
      v76 = *(unsigned __int16 *)(v75 + 2);
      if ((v76 & 0x20) != 0)
        v77 = 1;
      else
        v77 = (v76 >> 5) & 2;
      LOBYTE(v90) = v77;
    }
    JSC::Yarr::ByteTermDumper::dumpDisjunction((uint64_t)&v89, v42, 0);
  }
  v43 = *a1;
  v44 = 2 * *(_DWORD *)(*a1 + 4) + 2;
  v45 = v44 + *(_DWORD *)(*a1 + 12);
  v53 = WTF::fastMalloc((WTF *)0x70);
  v54 = a1[1];
  a1[1] = 0;
  *(_QWORD *)v53 = v54;
  *(_WORD *)(v53 + 8) = *(_WORD *)(v43 + 2);
  *(_QWORD *)(v53 + 16) = a2;
  *(_QWORD *)(v53 + 24) = a3;
  *(_DWORD *)(v53 + 36) = v44;
  *(_DWORD *)(v53 + 40) = v45;
  v55 = *(unsigned int *)(v43 + 124);
  *(_QWORD *)(v53 + 48) = 0;
  *(_QWORD *)(v53 + 56) = 0;
  *(_DWORD *)(v53 + 60) = v55;
  if ((_DWORD)v55)
  {
    if (v55 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198E68DA8);
    }
    v56 = (void *)WTF::fastMalloc((WTF *)(4 * v55));
    *(_DWORD *)(v53 + 56) = v55;
    *(_QWORD *)(v53 + 48) = v56;
    memcpy(v56, *(const void **)(v43 + 112), 4 * *(unsigned int *)(v43 + 124));
    v54 = *(_QWORD *)v53;
  }
  *(_OWORD *)(v53 + 80) = 0u;
  *(_OWORD *)(v53 + 96) = 0u;
  v57 = *(unsigned int *)(v54 + 12);
  if (*(_DWORD *)(v54 + 8) > v57)
  {
    v58 = *(_QWORD *)v54;
    if ((_DWORD)v57)
    {
      if (v57 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x198E68DB0);
      }
      v59 = 48 * v57;
      v60 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v57));
      *(_DWORD *)(v54 + 8) = (v59 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v54 = v60;
      if (v60 != (_OWORD *)v58)
      {
        v61 = (__int128 *)v58;
        do
        {
          v62 = *v61;
          v63 = v61[2];
          v60[1] = v61[1];
          v60[2] = v63;
          *v60 = v62;
          v60 += 3;
          v61 += 3;
          v59 -= 48;
        }
        while (v59);
      }
    }
    if (v58)
    {
      if (*(_QWORD *)v54 == v58)
      {
        *(_QWORD *)v54 = 0;
        *(_DWORD *)(v54 + 8) = 0;
      }
      WTF::fastFree(v58, v46, v47, v48, v49, v50, v51, v52);
    }
  }
  JSC::Yarr::YarrPattern::newlineCharacterClass((JSC::Yarr::YarrPattern *)v43);
  *(_QWORD *)(v53 + 64) = v64;
  if ((*(_WORD *)(v53 + 8) & 0x60) == 0 || (*(_WORD *)(v53 + 8) & 4) == 0)
    JSC::Yarr::YarrPattern::wordcharCharacterClass((JSC::Yarr::YarrPattern *)v43);
  else
    JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass((JSC::Yarr::YarrPattern *)v43);
  *(_QWORD *)(v53 + 72) = v78;
  v66 = *(_QWORD *)(v53 + 80);
  *(_QWORD *)(v53 + 80) = a1[6];
  a1[6] = v66;
  LODWORD(v66) = *(_DWORD *)(v53 + 88);
  *(_DWORD *)(v53 + 88) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v66;
  LODWORD(v66) = *(_DWORD *)(v53 + 92);
  *(_DWORD *)(v53 + 92) = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = v66;
  v67 = *(unsigned int *)(v53 + 92);
  if (*(_DWORD *)(v53 + 88) > v67)
  {
    v71 = *(_QWORD *)(v53 + 80);
    if ((_DWORD)v67)
    {
      *(_DWORD *)(v53 + 88) = v67;
      *(_QWORD *)(v53 + 80) = WTF::fastRealloc(v71, 8 * v67, v80, v81, v82, v83, v84, v85);
    }
    else if (v71)
    {
      *(_QWORD *)(v53 + 80) = 0;
      *(_DWORD *)(v53 + 88) = 0;
      WTF::fastFree(v71, v79, v80, v81, v82, v83, v84, v85);
    }
  }
  v68 = *(_QWORD *)(v53 + 96);
  *(_QWORD *)(v53 + 96) = *(_QWORD *)(v43 + 72);
  *(_QWORD *)(v43 + 72) = v68;
  LODWORD(v68) = *(_DWORD *)(v53 + 104);
  *(_DWORD *)(v53 + 104) = *(_DWORD *)(v43 + 80);
  *(_DWORD *)(v43 + 80) = v68;
  LODWORD(v68) = *(_DWORD *)(v53 + 108);
  *(_DWORD *)(v53 + 108) = *(_DWORD *)(v43 + 84);
  *(_DWORD *)(v43 + 84) = v68;
  v69 = *(unsigned int *)(v53 + 108);
  if (*(_DWORD *)(v53 + 104) > v69)
  {
    v70 = *(_QWORD *)(v53 + 96);
    if ((_DWORD)v69)
    {
      *(_DWORD *)(v53 + 104) = v69;
      *(_QWORD *)(v53 + 96) = WTF::fastRealloc(v70, 8 * v69, v80, v81, v82, v83, v84, v85);
    }
    else if (v70)
    {
      *(_QWORD *)(v53 + 96) = 0;
      *(_DWORD *)(v53 + 104) = 0;
      WTF::fastFree(v70, v79, v80, v81, v82, v83, v84, v85);
    }
  }
  *(_DWORD *)(v53 + 32) = *(_DWORD *)(v43 + 12);
LABEL_42:
  *a5 = v53;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::interpret(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char **v17;
  char *v18;
  unint64_t **v19;
  uint64_t v20;
  unint64_t v21;
  WTF::BumpPointerPool *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  int v39;
  _DWORD *v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  WTF::BumpPointerPool *v46;
  char *v47;
  uint64_t v48;
  void *v49;
  size_t v50;

  if (*(_DWORD *)(a1 + 32) <= *(_DWORD *)(a1 + 36))
  {
    v9 = *(unsigned __int8 **)(*(_QWORD *)a1 + 24);
    if (!v9)
      goto LABEL_6;
    if (__ldaxr(v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
LABEL_6:
      v11 = *(uint64_t **)a1;
      v12 = **(_QWORD **)a1;
      if (*(_DWORD *)(v12 + 16) != -1)
      {
        v13 = 0;
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 16);
        do
        {
          *(_DWORD *)(v15 + 4 * (v13 & 0xFFFFFFFE)) = -1;
          ++v14;
          v13 += 2;
        }
        while (v14 < (*(_DWORD *)(v12 + 16) + 1));
      }
      v16 = *((unsigned int *)v11 + 9);
      if (v16 < *((_DWORD *)v11 + 10))
      {
        v48 = *(_QWORD *)(a1 + 16);
        do
          *(_DWORD *)(v48 + 4 * v16++) = 0;
        while (v16 < *((unsigned int *)v11 + 10));
      }
      v17 = (char **)v11[2];
      v18 = *v17;
      if (*v17)
      {
        *(_QWORD *)(a1 + 56) = v18;
        v19 = (unint64_t **)(a1 + 56);
      }
      else
      {
        v42 = WTF::s_pageSize;
        if (!WTF::s_pageSize)
        {
          v42 = sysconf(29);
          WTF::s_pageSize = v42;
          if ((v42 & (v42 - 1)) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198E6910CLL);
          }
          if (v42 > 0x4000)
          {
            __break(0xC471u);
            JUMPOUT(0x198E6912CLL);
          }
          if (((v42 + 0x3FFF) & -(uint64_t)v42) != 0x4000)
          {
LABEL_59:
            __break(0xC471u);
            JUMPOUT(0x198E69028);
          }
        }
        if (v42 <= 0x1000)
          v43 = 4096;
        else
          v43 = v42;
        v44 = (char *)mmap(0, v43, 3, 4098, -1, 0);
        if ((unint64_t)(v44 + 1) <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198E6914CLL);
        }
        v45 = &v44[v43];
        *((_QWORD *)v45 - 7) = v44;
        *((_QWORD *)v45 - 6) = v44;
        v18 = &v44[v43 - 56];
        *((_QWORD *)v18 + 2) = 0;
        *((_QWORD *)v18 + 3) = 0;
        *((_QWORD *)v18 + 4) = v44;
        *((_QWORD *)v18 + 5) = v44;
        *((_QWORD *)v18 + 6) = v43;
        *v17 = v18;
        *(_QWORD *)(a1 + 56) = v18;
        v19 = (unint64_t **)(a1 + 56);
        v11 = *(uint64_t **)a1;
      }
      v20 = 8 * *(unsigned int *)(*v11 + 20);
      v21 = v20 + 16;
      v22 = (WTF::BumpPointerPool *)((v20 + 23) & 0xFFFFFFFF8);
      if ((unint64_t)v22 < v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198E6905CLL);
      }
      v23 = *(_QWORD *)v18;
      if ((char *)v22 + *(_QWORD *)v18 > v18)
      {
        while (1)
        {
          v24 = (char *)*((_QWORD *)v18 + 2);
          if (!v24)
            break;
          v23 = *(_QWORD *)v24;
          v18 = (char *)*((_QWORD *)v18 + 2);
          if ((char *)v22 + *(_QWORD *)v24 <= v24)
            goto LABEL_15;
        }
        v46 = v22;
        v47 = v18;
        v24 = WTF::BumpPointerPool::create(v22);
        v22 = v46;
        *((_QWORD *)v47 + 2) = v24;
        *((_QWORD *)v24 + 3) = v47;
        v23 = *(_QWORD *)v24;
      }
      else
      {
        v24 = v18;
      }
LABEL_15:
      *(_QWORD *)(a1 + 56) = v24;
      *(_QWORD *)v24 = (char *)v22 + v23;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      if (JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(a1, **(uint64_t ***)a1, (int *)v23, 0, a5, a6, a7, a8) == 1)
      {
        v41 = *(_DWORD **)(a1 + 16);
        *v41 = *(_DWORD *)(v23 + 4);
        v41[1] = *(_DWORD *)(v23 + 8);
      }
      v32 = *v19;
      while (1)
      {
        v33 = v32[1];
        if ((unint64_t)v32 >= v23 && v33 <= v23)
          break;
        *v32 = v33;
        v32 = (unint64_t *)v32[3];
        if (!v32)
        {
          __break(0xC471u);
          JUMPOUT(0x198E6903CLL);
        }
      }
      *v32 = v23;
      *(_QWORD *)(a1 + 56) = v32;
      v35 = *(uint64_t ***)a1;
      v36 = **(_QWORD ***)(*(_QWORD *)a1 + 16);
      if (v36)
      {
        v37 = (_QWORD *)v36[2];
        *v36 = v36[1];
        if (v37)
        {
          do
          {
            v49 = (void *)v37[5];
            v50 = v37[6];
            v37[5] = 0;
            v37[6] = 0;
            v37[4] = 0;
            v37 = (_QWORD *)v37[2];
            if (munmap(v49, v50) == -1)
              goto LABEL_59;
            v36[2] = v37;
          }
          while (v37);
          v35 = *(uint64_t ***)a1;
        }
      }
      v38 = (unsigned __int8 *)v35[3];
      if (!v38)
        return **(unsigned int **)(a1 + 16);
      v39 = __ldxr(v38);
      if (v39 == 1)
      {
        if (!__stlxr(0, v38))
          return **(unsigned int **)(a1 + 16);
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v38, v25, v26, v27, v28, v29, v30, v31);
      return **(unsigned int **)(a1 + 16);
    }
    WTF::Lock::lockSlow((WTF::Lock *)v9);
    goto LABEL_6;
  }
  return 0xFFFFFFFFLL;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::interpret(_DWORD *a1)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *started;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t result;
  uint64_t v27;

  if (a1[8] > a1[9])
    return 0xFFFFFFFFLL;
  v2 = *(unsigned __int8 **)(*(_QWORD *)a1 + 24);
  if (v2)
  {
    if (__ldaxr(v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v2))
    {
      goto LABEL_6;
    }
    WTF::Lock::lockSlow((WTF::Lock *)v2);
  }
LABEL_6:
  v4 = *(_QWORD *)a1;
  v5 = **(_QWORD **)a1;
  if (*(_DWORD *)(v5 + 16) != -1)
  {
    v6 = 0;
    v7 = 0;
    v8 = *((_QWORD *)a1 + 2);
    do
    {
      *(_DWORD *)(v8 + 4 * (v6 & 0xFFFFFFFE)) = -1;
      ++v7;
      v6 += 2;
    }
    while (v7 < (*(_DWORD *)(v5 + 16) + 1));
  }
  v9 = *(unsigned int *)(v4 + 36);
  if (v9 < *(_DWORD *)(v4 + 40))
  {
    v27 = *((_QWORD *)a1 + 2);
    do
      *(_DWORD *)(v27 + 4 * v9++) = 0;
    while (v9 < *(unsigned int *)(v4 + 40));
  }
  started = WTF::BumpPointerAllocator::startAllocator(*(char ***)(v4 + 16));
  *((_QWORD *)a1 + 7) = started;
  if (started)
  {
    v11 = (int *)JSC::Yarr::Interpreter<char16_t>::allocDisjunctionContext((uint64_t)a1, *(_DWORD *)(**(_QWORD **)a1 + 20));
    if (JSC::Yarr::Interpreter<char16_t>::matchDisjunction((uint64_t)a1, **(uint64_t ***)a1, v11, 0, v12, v13, v14, v15) == 1)
    {
      v16 = (_DWORD *)*((_QWORD *)a1 + 2);
      *v16 = v11[1];
      v16[1] = v11[2];
    }
    JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext((uint64_t)a1, (unint64_t)v11);
    WTF::BumpPointerAllocator::stopAllocator(**(_QWORD **)(*(_QWORD *)a1 + 16));
    v24 = *(unsigned __int8 **)(*(_QWORD *)a1 + 24);
    if (!v24)
      return **((unsigned int **)a1 + 2);
    v25 = __ldxr(v24);
    if (v25 == 1)
    {
      if (!__stlxr(0, v24))
        return **((unsigned int **)a1 + 2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24, v17, v18, v19, v20, v21, v22, v23);
    return **((unsigned int **)a1 + 2);
  }
  result = 2179;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::BoyerMooreFastCandidates::dump(int **this, WTF::PrintStream *a2)
{
  int v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  int v7;
  int *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  int v13;
  WTF::PrintStream *v15;
  int v16;
  int v17;
  char v18;

  v4 = *((unsigned __int8 *)this + 24);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v6 = v5;
  if (v4)
  {
    v15 = a2;
    WTF::PrintStream::printf(v5, "%s", "isValid:(true),characters:(");
    if (*((_DWORD *)this + 3))
    {
      v7 = 0;
      v8 = *this;
      do
      {
        v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
        v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
        if (v7)
        {
          WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v16, v12);
          WTF::printExpectedCStringHelper(v11, "StringView", &v16);
          if (v17 != -1)
            ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v17])(&v18, &v16);
        }
        else
        {
          WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v16, v12);
          WTF::printExpectedCStringHelper(v11, "StringView", &v16);
          if (v17 != -1)
            ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v17])(&v18, &v16);
          v7 = 1;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
        v13 = *v8++;
        WTF::PrintStream::printf(v9, "%u", v13);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      }
      while (v8 != &(*this)[*((unsigned int *)this + 3)]);
    }
    WTF::PrintStream::printf(v6, "%s", ")");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v15 + 40))(v15);
  }
  else
  {
    WTF::PrintStream::printf(v5, "%s", "isValid:(false)");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
}

unint64_t JSC::Yarr::BoyerMooreInfo::findBestCharacterSequence(uint64_t *a1, uint64_t a2, unsigned __int32 a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int32 *v11;
  unsigned __int32 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int32 *v24;
  unsigned __int32 v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x2_t v29;
  signed __int32 v30;

  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a1;
    v5 = *(unsigned __int8 *)(a2 + 128);
    if (*(_BYTE *)(a2 + 128))
    {
      v6 = 0;
      v7 = 0;
      v8 = 0x80000000;
      do
      {
        v9 = v6;
        if (v3 <= v6 + 1)
          v10 = v6 + 1;
        else
          v10 = v3;
        v11 = (unsigned __int32 *)(v4 + 48 + 56 * v6);
        while (1)
        {
          v12 = *v11;
          v11 += 14;
          if (v12 <= a3)
            break;
          if (++v9 >= v3)
            goto LABEL_12;
        }
        v10 = v9;
LABEL_12:
        if (v10 == (_DWORD)v3)
          break;
        if (v10 >= v3)
        {
          i = 0;
          v6 = v10;
        }
        else
        {
          v13 = 0;
          v14 = 0;
          v15 = (uint64_t *)(v4 + 56 * v10);
          v6 = v10;
          while (*((_DWORD *)v15 + 12) <= a3)
          {
            v16 = *v15;
            v17 = v15[1];
            v15 += 7;
            v14 |= v16;
            v13 |= v17;
            if ((_DWORD)v3 == ++v6)
            {
              v6 = v3;
              break;
            }
          }
          for (i = 0; v14; v14 &= v14 - 1)
            i += (*(unsigned __int8 *)(a2 + __clz(__rbit64(v14))) << 7) / v5;
          for (; v13; v13 &= v13 - 1)
            i += (*(unsigned __int8 *)(a2 + (__clz(__rbit64(v13)) | 0x40)) << 7) / v5;
        }
        v19 = (64 - i) * (v6 - v10);
        v7 = v19 <= v8 ? v7 : v10;
        if (v19 > v8)
          v8 = (64 - i) * (v6 - v10);
      }
      while (v6 < v3);
    }
    else
    {
      v21 = 0;
      v7 = 0;
      v8 = 0x80000000;
      do
      {
        v22 = v21;
        if (v3 <= v21 + 1)
          v23 = v21 + 1;
        else
          v23 = v3;
        v24 = (unsigned __int32 *)(v4 + 48 + 56 * v21);
        while (1)
        {
          v25 = *v24;
          v24 += 14;
          if (v25 <= a3)
            break;
          if (++v22 >= v3)
            goto LABEL_41;
        }
        v23 = v22;
LABEL_41:
        if (v23 == (_DWORD)v3)
          break;
        if (v23 >= v3)
        {
          v27 = 0uLL;
          v21 = v23;
        }
        else
        {
          v26 = (int8x16_t *)(v4 + 56 * v23);
          v27 = 0uLL;
          v21 = v23;
          while (v26[3].i32[0] <= a3)
          {
            v28 = *v26;
            v26 = (int8x16_t *)((char *)v26 + 56);
            v27 = vorrq_s8(v28, v27);
            if ((_DWORD)v3 == ++v21)
            {
              v21 = v3;
              break;
            }
          }
        }
        v29 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v27)))));
        v30 = (64 - vadd_s32(vdup_lane_s32(v29, 1), v29).u32[0]) * (v21 - v23);
        if (v30 <= v8)
          v7 = v7;
        else
          v7 = v23;
        if (v30 > v8)
          v8 = v30;
      }
      while (v21 < v3);
    }
  }
  else
  {
    v7 = 0;
    v8 = 0x80000000;
  }
  return v8 | (unint64_t)(v7 << 32);
}

unint64_t *JSC::Yarr::BoyerMooreFastCandidates::merge(unint64_t *this, const JSC::Yarr::BoyerMooreFastCandidates *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  const JSC::Yarr::BoyerMooreFastCandidates *v19;
  const JSC::Yarr::BoyerMooreFastCandidates *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  int v25;

  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)a2 + 24))
    {
      if (*((_DWORD *)a2 + 3))
      {
        v8 = 0;
        do
        {
          v9 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v8);
          v25 = v9;
          if (*((_BYTE *)this + 24))
          {
            v10 = *((unsigned int *)this + 3);
            if ((_DWORD)v10)
            {
              v12 = 0;
              v13 = *this;
              while (*(_DWORD *)(v13 + v12) != v9)
              {
                v12 += 4;
                if (4 * v10 == v12)
                {
                  v11 = *((_DWORD *)this + 2);
                  if (v10 <= 1)
                    goto LABEL_9;
                  if (v11)
                  {
                    *((_DWORD *)this + 3) = 0;
                    if (this + 2 != (unint64_t *)v13)
                    {
                      *this = 0;
                      *((_DWORD *)this + 2) = 0;
                      v23 = (uint64_t)this;
                      v18 = v8;
                      v20 = a2;
                      v16 = this + 2;
                      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
                      v8 = v18;
                      a2 = v20;
                      this = (unint64_t *)v23;
                      if (!*(_QWORD *)v23)
                      {
                        *(_QWORD *)v23 = v16;
                        *(_DWORD *)(v23 + 8) = 2;
                      }
                    }
                  }
                  *((_BYTE *)this + 24) = 0;
                  break;
                }
              }
            }
            else
            {
              v11 = *((_DWORD *)this + 2);
LABEL_9:
              if ((_DWORD)v10 == v11)
              {
                v19 = a2;
                v22 = (uint64_t)this;
                v17 = v8;
                WTF::Vector<char32_t,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this, (unint64_t)&v25);
                v8 = v17;
                a2 = v19;
                this = (unint64_t *)v22;
              }
              else
              {
                *(_DWORD *)(*this + 4 * v10) = v9;
                *((_DWORD *)this + 3) = v10 + 1;
              }
            }
          }
          ++v8;
        }
        while (v8 < *((unsigned int *)a2 + 3));
      }
    }
    else
    {
      if (*((_DWORD *)this + 2))
      {
        if (*((_DWORD *)this + 3))
          *((_DWORD *)this + 3) = 0;
        v15 = (unint64_t)(this + 2);
        v14 = *this;
        if (this + 2 != (unint64_t *)*this)
        {
          if (!v14
            || (*this = 0,
                *((_DWORD *)this + 2) = 0,
                v24 = this,
                v21 = this + 2,
                WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8),
                v15 = (unint64_t)v21,
                this = v24,
                !*v24))
          {
            *this = v15;
            *((_DWORD *)this + 2) = 2;
          }
        }
      }
      *((_BYTE *)this + 24) = 0;
    }
  }
  return this;
}

uint64_t JSC::Yarr::areCanonicallyEquivalentThunkGenerator@<X0>(std::once_flag::_State_type *a1@<X8>)
{
  std::once_flag::_State_type *v4;
  unint64_t v5;
  unint64_t v6;
  pthread_key_t *v7;
  std::once_flag::_State_type *v8;
  std::once_flag::_State_type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::AssemblerBuffer *v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint8x8_t v47;
  __int32 v48;
  uint8x8_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  char v60;
  unsigned __int8 v61;
  uint64_t v62;
  int v63;
  std::once_flag::_State_type *v64;
  std::once_flag::_State_type *v65;
  std::once_flag::_State_type *v66;
  uint64_t v67;
  int v68;
  std::once_flag::_State_type *v69;
  void *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  pthread_key_t *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  unsigned int v121;
  char v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v138;
  std::once_flag::_State_type *v139;
  std::once_flag::_State_type *v140;
  JSC::AssemblerBuffer *v141;
  char v142;
  void ***p_p_dst;
  void **p_dst;
  void *__dst;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  _BYTE v149[128];
  unsigned int v150;
  char v151;
  int v152;
  int v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _DWORD v157[6];
  char v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  std::once_flag::_State_type *v162;
  _BYTE v163[128];
  unsigned int v164;
  unsigned int v165;
  int v166;
  char v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _DWORD *v171;
  char v172;
  uint64_t v173;
  int v174;
  _DWORD *v175;
  char v176;
  uint64_t v177;
  int v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  LOBYTE(v157[0]) = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0x8000000080000000;
  v162 = (std::once_flag::_State_type *)v163;
  v164 = 128;
  v4 = &JSC::threadSpecificAssemblerData(void)::flag;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    p_dst = &__dst;
    __dst = &p_p_dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = 0x1EE342000uLL;
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v8 = (std::once_flag::_State_type *)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  v16 = (uint64_t)v8;
  if (!v8)
  {
    v16 = WTF::fastMalloc((WTF *)0x98);
    v8 = WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v16, v7);
  }
  v17 = (JSC::AssemblerBuffer *)&v162;
  v18 = *(_QWORD *)v16;
  v19 = v164;
  if (*(_QWORD *)v16 != v16 + 8)
  {
    v20 = *(_DWORD *)(v16 + 136);
    if (v164 < v20)
    {
      v8 = v162;
      if (v162 && v162 != (std::once_flag::_State_type *)v163)
      {
        WTF::fastFree((unint64_t)v162, v9, v10, v11, v12, v13, v14, v15);
        v18 = *(_QWORD *)v16;
        v20 = *(_DWORD *)(v16 + 136);
      }
      v162 = (std::once_flag::_State_type *)v18;
      v164 = v20;
      *(_QWORD *)v16 = v16 + 8;
      *(_DWORD *)(v16 + 136) = 128;
      v19 = v164;
    }
  }
  v21 = 0;
  v167 = 1;
  v172 = 16;
  v174 = 0x10000;
  v176 = 17;
  v178 = 0x20000;
  v165 = 0;
  v166 = 0;
  v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  v171 = v157;
  v173 = 0;
  v175 = v157;
  v177 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  if (v19 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v21 = v165;
  }
  *(_DWORD *)((char *)v162 + v21) = -1447068675;
  v22 = v165;
  v23 = v165 + 4;
  v165 += 4;
  if (v22 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v23 = v165;
  }
  *(_DWORD *)((char *)v162 + v23) = -1862269955;
  v24 = v165;
  v25 = v165 + 4;
  v165 += 4;
  if (v24 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v25 = v165;
  }
  *(_DWORD *)((char *)v162 + v25) = -1447098400;
  v26 = v165;
  v27 = v165 + 4;
  v165 += 4;
  if (v26 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v27 = v165;
  }
  *(_DWORD *)((char *)v162 + v27) = -1447096350;
  v28 = v165;
  v29 = v165 + 4;
  v165 += 4;
  if (v28 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v29 = v165;
  }
  *(_DWORD *)((char *)v162 + v29) = -1447094300;
  v30 = v165;
  v31 = v165 + 4;
  v165 += 4;
  if (v30 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v31 = v165;
  }
  *(_DWORD *)((char *)v162 + v31) = -1447092250;
  v32 = v165;
  v33 = v165 + 4;
  v165 += 4;
  if (v32 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v33 = v165;
  }
  *(_DWORD *)((char *)v162 + v33) = -1447090200;
  v34 = v165;
  v35 = v165 + 4;
  v165 += 4;
  if (v34 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v35 = v165;
  }
  *(_DWORD *)((char *)v162 + v35) = -1447088150;
  v36 = v165;
  v37 = v165 + 4;
  v165 += 4;
  if (v36 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v37 = v165;
  }
  *(_DWORD *)((char *)v162 + v37) = -1447086100;
  v38 = v165;
  v39 = v165 + 4;
  v165 += 4;
  if (v38 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v162, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v39 = v165;
  }
  *(_DWORD *)((char *)v162 + v39) = -1447084050;
  v165 += 4;
  __dst = &v147;
  LODWORD(v147) = 17235974;
  WORD2(v147) = 522;
  v146 = 0x300000003;
  v40 = 3;
  do
  {
    v41 = 0;
    v42 = 0;
    v43 = (char *)__dst;
    v44 = v40;
    do
    {
      if ((*((_BYTE *)__dst + v41 + 1) & 0x40) != 0)
      {
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      v42 |= 1 << *((_BYTE *)__dst + v41 + 1);
      v41 += 2;
    }
    while (2 * v40 != v41);
    v45 = 0;
    do
    {
      v46 = *((_BYTE *)__dst + v45) & 0x7F;
      if (v46 >= 0x40)
        goto LABEL_117;
      v42 &= ~(1 << v46);
      v45 += 2;
    }
    while (2 * v40 != v45);
    v47 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
    v47.i16[0] = vaddlv_u8(v47);
    v48 = v47.i32[0];
    v49 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v42));
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.i32[0] + v48)
    {
      v50 = 0;
      if (v40 <= 1uLL)
        v51 = 1;
      else
        v51 = v40;
      v52 = 2 * v51;
      while (1)
      {
        v53 = *((unsigned __int8 *)__dst + v50 + 1);
        if ((v53 & 0x7Fu) >= 0x40)
          goto LABEL_117;
        if (((v42 >> (v53 & 0x7F)) & 1) != 0)
          break;
        v50 += 2;
        if (v52 == v50)
          goto LABEL_59;
      }
      v54 = *((unsigned __int8 *)__dst + v50);
      if (v54 == v53)
        goto LABEL_57;
      v55 = (char)v54;
      if ((char)v54 == 63)
      {
        v56 = v165;
        v57 = v164;
        if (v53 != 31)
        {
          v59 = v53 & 0x1F | 0xD2800000;
          goto LABEL_54;
        }
      }
      else
      {
        v56 = v165;
        v57 = v164;
        v58 = (char)v53 == 31 || v55 == 31;
        if (!v58)
        {
          v59 = v53 & 0xFFE0FFFF | ((v55 & 0x1F) << 16) | 0xAA0003E0;
LABEL_54:
          if (v56 + 4 > v57)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v17, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
            v56 = v165;
          }
          *(_DWORD *)((char *)v162 + v56) = v59;
          v165 += 4;
          v43 = (char *)__dst;
          v44 = HIDWORD(v146);
LABEL_57:
          v8 = (std::once_flag::_State_type *)memmove(&v43[v50], &v43[v50 + 2], 2 * v44 - v50 - 2);
          v40 = HIDWORD(v146) - 1;
          goto LABEL_58;
        }
      }
      v59 = (char)v53 | (32 * v55) | 0x91000000;
      goto LABEL_54;
    }
    v141 = v17;
    v17 = (JSC::AssemblerBuffer *)v6;
    v6 = (unint64_t)a1;
    a1 = v4;
    v60 = *(_BYTE *)__dst;
    v61 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v157, *(char *)__dst, (char)v61, v11, v12, v13, v14, v15);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v146) - 2);
    v62 = (HIDWORD(v146) - 1);
    v58 = HIDWORD(v146) == 1;
    HIDWORD(v146) = v62;
    v4 = (std::once_flag::_State_type *)__dst;
    v8 = (std::once_flag::_State_type *)((char *)__dst + 2 * v62);
    if (v58)
    {
      v67 = 0;
      v68 = 0;
      v63 = 0;
      v9 = v8;
    }
    else
    {
      LOBYTE(v40) = v60;
      LODWORD(v43) = v61;
      v44 = 2 * v62;
      v42 = (unint64_t)__dst;
      while (*(unsigned __int8 *)v42 != (_DWORD)v43)
      {
LABEL_118:
        v42 += 2;
        v44 -= 2;
        if (!v44)
          goto LABEL_65;
      }
      *(_BYTE *)v42 = v40;
LABEL_65:
      v63 = 0;
      v64 = v4;
      v9 = v8;
      v65 = v8;
      do
      {
        if (*(unsigned __int8 *)v4 == *((unsigned __int8 *)v4 + 1))
        {
          v66 = v4;
          if (v65 != (std::once_flag::_State_type *)((char *)__dst + 2 * HIDWORD(v146)))
          {
            v140 = v8;
            if (v4 == v9)
            {
              v66 = v65;
            }
            else
            {
              v138 = (char *)v64 - (char *)v9;
              v139 = v65;
              memmove(v65, v9, (char *)v64 - (char *)v9);
              v66 = (std::once_flag::_State_type *)((char *)v139 + v138);
            }
            v8 = v140;
          }
          v9 = (std::once_flag::_State_type *)((char *)v4 + 2);
          ++v63;
          v65 = v66;
        }
        v4 = (std::once_flag::_State_type *)((char *)v4 + 2);
        v64 = (std::once_flag::_State_type *)((char *)v64 + 2);
      }
      while (v4 < v8);
      v4 = (std::once_flag::_State_type *)__dst;
      v67 = HIDWORD(v146);
      v68 = HIDWORD(v146);
      v8 = v65;
    }
    v69 = (std::once_flag::_State_type *)((char *)v4 + 2 * v67);
    if (v9 != v69)
    {
      v8 = (std::once_flag::_State_type *)memmove(v8, v9, (char *)v69 - (char *)v9);
      v68 = HIDWORD(v146);
    }
    v40 = v68 - v63;
    v4 = a1;
    a1 = (std::once_flag::_State_type *)v6;
    v6 = (unint64_t)v17;
    v17 = v141;
LABEL_58:
    HIDWORD(v146) = v40;
LABEL_59:
    ;
  }
  while (v40);
  v70 = __dst;
  if (&v147 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v146) = 0;
    WTF::fastFree((unint64_t)v70, v9, v10, v11, v12, v13, v14, v15);
  }
  if (!v167)
  {
    __break(0xC471u);
    JUMPOUT(0x198E6A3FCLL);
  }
  v171[52] &= ~v174;
  v71 = v172;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v157, (uint64_t)operationAreCanonicallyEquivalent, v172, v11, v12, v13, v14, v15);
  v166 = 0;
  v79 = v165;
  if (v165 + 4 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v72, v73, v74, v75, v76, v77, v78);
    v79 = v165;
  }
  *(_DWORD *)((char *)v162 + v79) = (32 * (v71 & 0x1F)) | 0xD63F0000;
  v165 += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v157, (JSC::ARM64LogicalImmediate *)0xFF, 0, 16);
  v87 = v165;
  if (v165 + 4 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v87 = v165;
  }
  *(_DWORD *)((char *)v162 + v87) = -1463730194;
  v88 = v165;
  v89 = v165 + 4;
  v165 += 4;
  if (v88 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v89 = v165;
  }
  *(_DWORD *)((char *)v162 + v89) = -1463732244;
  v90 = v165;
  v91 = v165 + 4;
  v165 += 4;
  if (v90 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v91 = v165;
  }
  *(_DWORD *)((char *)v162 + v91) = -1463734294;
  v92 = v165;
  v93 = v165 + 4;
  v165 += 4;
  if (v92 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v93 = v165;
  }
  *(_DWORD *)((char *)v162 + v93) = -1463736344;
  v94 = v165;
  v95 = v165 + 4;
  v165 += 4;
  if (v94 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v95 = v165;
  }
  *(_DWORD *)((char *)v162 + v95) = -1463738394;
  v96 = v165;
  v97 = v165 + 4;
  v165 += 4;
  if (v96 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v97 = v165;
  }
  *(_DWORD *)((char *)v162 + v97) = -1463740444;
  v98 = v165;
  v99 = v165 + 4;
  v165 += 4;
  if (v98 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v99 = v165;
  }
  *(_DWORD *)((char *)v162 + v99) = -1463742494;
  v100 = v165;
  v101 = v165 + 4;
  v165 += 4;
  if (v100 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v101 = v165;
  }
  *(_DWORD *)((char *)v162 + v101) = -1463744544;
  v102 = v165;
  v103 = v165 + 4;
  v165 += 4;
  if (v102 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v103 = v165;
  }
  *(_DWORD *)((char *)v162 + v103) = -1441791002;
  v104 = v165;
  v105 = v165 + 4;
  v165 += 4;
  if (v104 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v105 = v165;
  }
  *(_DWORD *)((char *)v162 + v105) = -1862270017;
  v106 = v165;
  v107 = v165 + 4;
  v165 += 4;
  if (v106 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v107 = v165;
  }
  *(_DWORD *)((char *)v162 + v107) = -1463714819;
  v108 = v165;
  v109 = v165 + 4;
  v165 += 4;
  if (v108 + 8 > v164)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v80, v81, v82, v83, v84, v85, v86);
    v109 = v165;
  }
  *(_DWORD *)((char *)v162 + v109) = -698416192;
  v165 += 4;
  __dst = 0;
  v146 = 0;
  v147 = -1;
  v148 = (WTF *)v149;
  v150 = 128;
  v110 = atomic_load(v4);
  if (v110 != -1)
  {
    p_dst = (void **)&v142;
    p_p_dst = &p_dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v111 = *(pthread_key_t **)(v6 + 3160);
  v119 = (uint64_t)pthread_getspecific(*v111);
  if (!v119)
  {
    v119 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v119, v111);
  }
  v120 = *(WTF **)v119;
  if (*(_QWORD *)v119 != v119 + 8)
  {
    v121 = *(_DWORD *)(v119 + 136);
    if (v150 < v121)
    {
      if (v148 && v148 != (WTF *)v149)
      {
        WTF::fastFree((unint64_t)v148, v112, v113, v114, v115, v116, v117, v118);
        v120 = *(WTF **)v119;
        v121 = *(_DWORD *)(v119 + 136);
      }
      v148 = v120;
      v150 = v121;
      *(_QWORD *)v119 = v119 + 8;
      *(_DWORD *)(v119 + 136) = 128;
    }
  }
  v122 = 1;
  v151 = 1;
  v152 = 0;
  v153 = 8;
  v154 = 0u;
  v155 = 0u;
  v156 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v157, 1, v114, v115, v116, v117, v118);
  BYTE2(v152) = 1;
  if (byte_1ECF4C288)
    goto LABEL_123;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v122 = HIBYTE(word_1ECF4C286) != 0;
LABEL_123:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v122, 0, 0, "YARR areCanonicallyEquivalent call", a1);
    goto LABEL_116;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, 0, 0, a1);
LABEL_116:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v123, v124, v125, v126, v127, v128, v129);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v157, v130, v131, v132, v133, v134, v135, v136);
}

BOOL operationAreCanonicallyEquivalent(unsigned int a1, int a2, int a3)
{
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  BOOL v7;
  uint64_t v8;
  _UNKNOWN **v9;
  int *v10;
  int v11;
  int v12;
  BOOL v13;
  _BOOL8 result;
  unsigned int v15;
  unsigned int v16;

  v3 = &JSC::Yarr::unicodeRangeInfo;
  if (!a3)
    v3 = &JSC::Yarr::ucs2RangeInfo;
  v4 = 540;
  if (!a3)
    v4 = 448;
  while (1)
  {
    do
    {
      v5 = v4;
      v4 >>= 1;
    }
    while (v3[4 * v4] > a1);
    v6 = &v3[4 * v4];
    if (v6[1] >= a1)
      break;
    v3 = v6 + 4;
    v4 = v5 + ~v4;
  }
  switch(v6[3])
  {
    case 0:
      v7 = a1 == a2;
      goto LABEL_28;
    case 1:
      v8 = v3[4 * v4 + 2];
      v9 = &JSC::Yarr::unicodeCharacterSetInfo;
      if (!a3)
        v9 = &JSC::Yarr::ucs2CharacterSetInfo;
      v10 = (int *)v9[v8];
      do
      {
        v12 = *v10++;
        v11 = v12;
        if (v12)
          v13 = v11 == a2;
        else
          v13 = 1;
      }
      while (!v13);
      return v11 != 0;
    case 2:
      if (a1 == a2)
        goto LABEL_22;
      v15 = v3[4 * v4 + 2] + a1;
      goto LABEL_27;
    case 3:
      if (a1 == a2)
      {
LABEL_22:
        result = 1;
      }
      else
      {
        v15 = a1 - v3[4 * v4 + 2];
LABEL_27:
        v7 = v15 == a2;
LABEL_28:
        result = v7;
      }
      break;
    case 4:
      v16 = a2 ^ a1;
      goto LABEL_25;
    case 5:
      v16 = (a2 - 1) ^ (a1 - 1);
LABEL_25:
      result = v16 < 2;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198E6A684);
  }
  return result;
}

BOOL JSC::Yarr::areCanonicallyEquivalent(unsigned int a1, int a2, int a3)
{
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  BOOL v7;
  uint64_t v8;
  _UNKNOWN **v9;
  int *v10;
  int v11;
  int v12;
  BOOL v13;
  _BOOL8 result;
  unsigned int v15;
  unsigned int v16;

  v3 = &JSC::Yarr::unicodeRangeInfo;
  if (!a3)
    v3 = &JSC::Yarr::ucs2RangeInfo;
  v4 = 540;
  if (!a3)
    v4 = 448;
  while (1)
  {
    do
    {
      v5 = v4;
      v4 >>= 1;
    }
    while (v3[4 * v4] > a1);
    v6 = &v3[4 * v4];
    if (v6[1] >= a1)
      break;
    v3 = v6 + 4;
    v4 = v5 + ~v4;
  }
  switch(v6[3])
  {
    case 0:
      v7 = a1 == a2;
      goto LABEL_28;
    case 1:
      v8 = v3[4 * v4 + 2];
      v9 = &JSC::Yarr::unicodeCharacterSetInfo;
      if (!a3)
        v9 = &JSC::Yarr::ucs2CharacterSetInfo;
      v10 = (int *)v9[v8];
      do
      {
        v12 = *v10++;
        v11 = v12;
        if (v12)
          v13 = v11 == a2;
        else
          v13 = 1;
      }
      while (!v13);
      return v11 != 0;
    case 2:
      if (a1 == a2)
        goto LABEL_22;
      v15 = v3[4 * v4 + 2] + a1;
      goto LABEL_27;
    case 3:
      if (a1 == a2)
      {
LABEL_22:
        result = 1;
      }
      else
      {
        v15 = a1 - v3[4 * v4 + 2];
LABEL_27:
        v7 = v15 == a2;
LABEL_28:
        result = v7;
      }
      break;
    case 4:
      v16 = a2 ^ a1;
      goto LABEL_25;
    case 5:
      v16 = (a2 - 1) ^ (a1 - 1);
LABEL_25:
      result = v16 < 2;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198E6A7E4);
  }
  return result;
}

uint64_t JSC::Yarr::jitCompile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  pthread_key_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  char v32;
  int v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  __int128 v45;
  __int128 v46;
  int v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  int v53;
  uint64_t *v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v97;
  unsigned int *v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  __int128 v104;
  int v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  int v109;
  int v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  unsigned int **v114;
  _DWORD *v115;
  _DWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  _DWORD *v119;
  int v120;
  unsigned int v121;
  _DWORD *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _DWORD *v167;
  unsigned int v168;
  uint64_t v169;
  _DWORD *v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  _DWORD *v191;
  int v192;
  _BOOL4 v193;
  unint64_t v194;
  uint64_t v195;
  WTF *v196;
  uint64_t *v197;
  uint64_t *v198;
  WTF *v199;
  unsigned int v200;
  _DWORD *v201;
  unint64_t v202;
  pthread_key_t *v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  WTF *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char **v222;
  JSC::Yarr::YarrDisassembler *v223;
  uint64_t v224;
  size_t v225;
  unsigned int *v226;
  char *v227;
  unsigned int v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  char v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  BOOL v247;
  _DWORD *v248;
  unsigned int v249;
  int v251;
  uint64_t v252;
  size_t v253;
  unsigned int *v254;
  char *v255;
  unsigned int v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int v262;
  char v263;
  unint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  BOOL v275;
  unsigned int v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  _DWORD *v286;
  unsigned int v287;
  uint64_t *v288;
  uint64_t *v289;
  __int128 v290;
  __int128 v291;
  int v292;
  _DWORD *v293;
  _DWORD *v294;
  _DWORD *v295;
  _DWORD *v296;
  int v297;
  int v298;
  uint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  unint64_t v303;
  unsigned int *v304;
  unsigned int v305;
  unint64_t v306;
  uint64_t *v307;
  uint64_t *v308;
  int v309;
  _DWORD *v310;
  _DWORD *v311;
  _DWORD *v312;
  int v313;
  int v314;
  uint64_t *v315;
  unint64_t v316;
  unsigned int **v317;
  _DWORD *v318;
  _DWORD *v319;
  uint64_t *v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  _DWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t *v333;
  uint64_t *v334;
  __int128 v335;
  __int128 v336;
  int v337;
  _DWORD *v338;
  _DWORD *v339;
  _DWORD *v340;
  _DWORD *v341;
  int v342;
  int v343;
  uint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  _QWORD *v349;
  void *v350;
  WTF *v351;
  __int128 *v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _DWORD *v361;
  uint64_t v362;
  _DWORD *v363;
  _DWORD *v364;
  unint64_t v365;
  uint64_t *v366;
  unint64_t v367;
  unsigned int v369;
  int v370;
  unsigned int v371;
  WTF *v372;
  WTF *v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  _QWORD *v387;
  uint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  _QWORD *v397;
  void *v398;
  _DWORD *v399;
  _DWORD *v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  _QWORD *v405;
  uint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  _DWORD *v409;
  _DWORD *v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  const void *v418;
  void *v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  size_t v425;
  unsigned int *v426;
  char *v427;
  unsigned int v428;
  unsigned int *v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int *v432;
  unsigned int v433;
  unsigned int v434;
  unint64_t v435;
  uint64_t v436;
  unsigned int *v437;
  unsigned int v438;
  unsigned int *v439;
  unsigned int v440;
  unsigned int v441;
  unint64_t v442;
  uint64_t v443;
  unsigned int v444;
  unsigned __int8 v445;
  uint64_t v446;
  __int16 *v447;
  __int16 v448;
  __int16 v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  JSC::ExecutableMemoryHandle *v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _DWORD *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  _QWORD *v529;
  void *v530;
  int v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t *v534;
  _QWORD *v535;
  uint64_t v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  char v574;
  char v575;
  unint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unint64_t v592;
  void *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  void *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  void *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  void *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  void *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  WTF::PrintStream *v632;
  uint64_t v633;
  unsigned int v634;
  unsigned int v635;
  char v636;
  char v637;
  unint64_t v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  void *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unsigned int v663;
  uint64_t v664;
  uint64_t **v665;
  __int128 v666;
  char *v667;
  uint64_t v668;
  __int128 v669;
  uint64_t v670;
  uint64_t v671;
  char v672;
  char **v673;
  JSC::ExecutableMemoryHandle *v674;
  WTF *v675;
  int v676;
  unsigned int v677;
  _BYTE v678[36];
  int v679;
  int v680;
  int v681;
  unsigned int v682[2];
  char v683;
  __int16 v684;
  char v685;
  int v686;
  char *v687;
  JSC::ExecutableMemoryHandle *v688;
  char v689;
  WTF **v690;
  _DWORD *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  char *v695;
  uint64_t v696;
  uint64_t v697;
  char *v698;
  uint64_t v699;
  char v700;
  char v701;
  __int16 v702;
  char v703;
  unsigned __int8 v704;
  _BOOL4 v705;
  char v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t *v713;
  uint64_t v714;
  uint64_t v715;
  __int128 v716;
  int v717;
  _QWORD *v718;
  uint64_t v719;
  _QWORD v720[5];
  uint64_t v721;
  uint64_t *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t *v725;
  uint64_t v726;
  uint64_t v727;
  __int128 v728;
  _BYTE *v729;
  uint64_t v730;
  _BYTE v731[32];
  uint64_t *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t *v735;
  uint64_t v736;
  uint64_t v737;
  JSC::Yarr::YarrDisassembler *v738;
  int v739;
  __int128 v740;
  uint64_t v741;
  _BYTE v742[128];
  unsigned __int8 v743;
  BOOL v744;
  _BYTE v745[32];
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  _BYTE *v749;
  _BYTE v750[128];
  unsigned int v751;
  int v752;
  int v753;
  char v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  _BYTE *v758;
  char v759;
  uint64_t v760;
  int v761;
  _BYTE *v762;
  char v763;
  uint64_t v764;
  int v765;
  char v766;
  uint64_t v767;
  uint64_t v768;
  __int128 v769;
  __int128 v770;
  _BYTE v771[4];
  int v772;
  _DWORD *v773;
  uint64_t v774;
  _DWORD v775[6];
  _BYTE v776[12];
  char v777;
  _QWORD v778[2];
  uint64_t v779;
  unsigned int v780;
  char v781;
  int v782;
  unsigned int v783;
  __int128 v784;
  __int128 v785;
  uint64_t v786;
  uint64_t v787;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v670 = v2;
  v671 = v5;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v667 = v12;
  v668 = v13;
  v787 = *MEMORY[0x1E0C80C00];
  v745[0] = 0;
  v745[24] = 0;
  v746 = 0;
  v747 = 0;
  v748 = 0x8000000080000000;
  v749 = v750;
  v751 = 128;
  v14 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v14 != -1)
  {
    v690 = &v675;
    *(_QWORD *)&v769 = &v690;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v769, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v15 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v23 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v23)
  {
    v23 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v23, v15);
  }
  v25 = *(_QWORD *)v23;
  if (*(_QWORD *)v23 != v23 + 8)
  {
    v26 = *(_DWORD *)(v23 + 136);
    if (v751 < v26)
    {
      if (v749 && v749 != v750)
      {
        WTF::fastFree((unint64_t)v749, v16, v17, v18, v19, v20, v21, v22);
        v25 = *(_QWORD *)v23;
        v26 = *(_DWORD *)(v23 + 136);
      }
      v749 = (_BYTE *)v25;
      v751 = v26;
      *(_QWORD *)v23 = v23 + 8;
      *(_DWORD *)(v23 + 136) = 128;
    }
  }
  v27 = 0;
  v752 = 0;
  v754 = 1;
  v753 = 0;
  v28 = 0uLL;
  v755 = 0u;
  v756 = 0u;
  v757 = 0u;
  v758 = v745;
  v759 = 16;
  v760 = 0;
  v761 = 0x10000;
  v762 = v745;
  v763 = 17;
  v764 = 0;
  v765 = 0x20000;
  v766 = 0;
  v767 = 0;
  v768 = 0;
  v690 = (WTF **)&off_1E35B9FF0;
  v691 = v745;
  v692 = v7;
  v29 = v671;
  v693 = v671;
  v694 = v671;
  v695 = &v672;
  v696 = 0;
  v697 = v670;
  v698 = v667;
  v699 = v668;
  v700 = v11;
  v701 = v4;
  v30 = *(unsigned __int16 *)(v670 + 2);
  v31 = v30 & 0x60;
  v702 = 0;
  if (v11 == 1)
    v27 = v31 != 0;
  v32 = v703 & 0xF8 | v27;
  if ((v30 & 0x60) != 0)
    v33 = (v30 >> 1) & 2;
  else
    LOBYTE(v33) = 0;
  v34 = v32 | v33;
  if (v11 == 1)
    v35 = v30 & (4 * *(_BYTE *)v670) & 4;
  else
    v35 = 0;
  v703 = v34 | v35;
  v704 = 0;
  v705 = v31 != 0;
  v706 = 0;
  v36 = *(unsigned int *)(v670 + 4);
  v37 = *(unsigned int *)(v670 + 12);
  if (v4 != 1)
  {
    v36 = 0;
    v37 = 0;
  }
  v38 = *(unsigned int **)(v670 + 16);
  v39 = v38[7];
  v707 = v36;
  v708 = v37;
  v709 = v39;
  v710 = &v712;
  v711 = 2;
  v713 = &v715;
  v714 = 2;
  v716 = 0uLL;
  v717 = -1;
  v718 = v720;
  v719 = 2;
  v720[3] = &v721;
  v720[4] = 2;
  v722 = &v724;
  v723 = 128;
  v725 = &v727;
  v726 = 4;
  v728 = 0uLL;
  v729 = v731;
  v730 = 2;
  v731[24] = 0;
  v732 = &v734;
  v733 = 4;
  v735 = &v737;
  v736 = 4;
  v738 = 0;
  v739 = 0;
  v740 = *v9;
  v741 = *((_QWORD *)v9 + 2);
  memset(v742, 0, sizeof(v742));
  v743 = 0;
  v744 = v11 == 0;
  if ((*(_BYTE *)v670 & 1) != 0 && !v4)
  {
    v449 = 257;
    goto LABEL_458;
  }
  if ((*(_BYTE *)v670 & 4) != 0)
  {
    v449 = 259;
    goto LABEL_458;
  }
  if ((unint64_t)&v664 < *(_QWORD *)(v7 + 93104))
  {
    v702 = 263;
    goto LABEL_106;
  }
  v665 = &v722;
  v40 = v38[3];
  v41 = &qword_199123000;
  if (!(_DWORD)v40)
  {
    v40 = 0;
    goto LABEL_24;
  }
  if ((*(_BYTE *)(**(_QWORD **)v38 + 37) & 1) == 0)
  {
LABEL_24:
    v42 = 0;
    goto LABEL_25;
  }
  v771[0] = 0;
  v772 = -1;
  v773 = v775;
  v774 = 2;
  *(_QWORD *)v776 = 0xFFFFFFFFLL;
  *(_QWORD *)&v28 = 4278193985;
  v669 = v28;
  *(_DWORD *)&v776[8] = -16773311;
  v777 = 0;
  v778[0] = 0;
  LODWORD(v778[1]) = -1;
  v779 = 0;
  v287 = HIDWORD(v723);
  v288 = v722;
  v289 = &v722[15 * HIDWORD(v723)];
  v290 = v769;
  v291 = v770;
  *((_BYTE *)v289 + 32) = 0;
  *(_OWORD *)v289 = v290;
  *((_OWORD *)v289 + 1) = v291;
  v292 = v772;
  v289[6] = 2;
  v293 = v289 + 6;
  *(v293 - 3) = v292;
  v294 = v293 + 2;
  *((_QWORD *)v293 - 1) = v293 + 2;
  v295 = v293 + 1;
  v296 = v773;
  if (v773 == v775)
  {
    if (HIDWORD(v774))
    {
      v399 = &v775[3 * HIDWORD(v774)];
      v400 = v775;
      do
      {
        *v294 = *v400;
        *(_QWORD *)(v294 + 1) = *(_QWORD *)(v400 + 1);
        v400 += 3;
        v294 += 3;
      }
      while (v400 != v399);
    }
  }
  else
  {
    v773 = v775;
    *((_QWORD *)v293 - 1) = v296;
    v297 = v774;
    LODWORD(v774) = 2;
    *v293 = v297;
  }
  v298 = HIDWORD(v774);
  HIDWORD(v774) = 0;
  *v295 = v298;
  v299 = &v288[15 * v287];
  *((_DWORD *)v299 + 20) = *(_DWORD *)v776;
  *(uint64_t *)((char *)v299 + 84) = *(_QWORD *)&v776[4];
  *((_BYTE *)v299 + 92) = v777;
  *((_DWORD *)v299 + 24) = v778[0];
  *(_QWORD *)&v28 = *(_QWORD *)((char *)v778 + 4);
  *(uint64_t *)((char *)v299 + 100) = *(_QWORD *)((char *)v778 + 4);
  v299[14] = v779;
  ++HIDWORD(v723);
  v300 = (unint64_t)v773;
  if (v775 != v773 && v773)
  {
    v773 = 0;
    LODWORD(v774) = 0;
    WTF::fastFree(v300, v16, v17, v18, v19, v20, v21, v22);
  }
  v301 = HIDWORD(v723);
  if (!HIDWORD(v723))
  {
    __break(0xC471u);
    JUMPOUT(0x198E6D180);
  }
  v42 = 0;
  v302 = v722;
  v722[15 * HIDWORD(v723) - 14] = -1;
  v40 = v38[3];
  do
  {
    if (v42 >= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x198E6D188);
    }
    v303 = v301 - 1;
    v304 = *(unsigned int **)(*(_QWORD *)v38 + 8 * v42);
    v305 = v304[6];
    HIDWORD(v302[15 * v303 + 12]) = v305;
    LODWORD(v675) = v305;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::opCompileAlternative((uint64_t)&v690, &v675, v304, v18, v19, v20, v21, v22, *(double *)&v28, *(double *)&v291, v24);
    v306 = HIDWORD(v723);
    v771[0] = 1;
    v772 = -1;
    v773 = v775;
    v774 = 2;
    *(_QWORD *)v776 = 0xFFFFFFFFLL;
    *(_DWORD *)&v776[8] = v669;
    v777 = 0;
    v778[0] = 0;
    LODWORD(v778[1]) = -1;
    v779 = 0;
    if (HIDWORD(v723) == (unint64_t)v723)
    {
      WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp>((uint64_t)v665, (unint64_t)&v769, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      v307 = v722;
      v308 = &v722[15 * HIDWORD(v723)];
      v28 = v769;
      v291 = v770;
      *((_BYTE *)v308 + 32) = v771[0];
      *(_OWORD *)v308 = v28;
      *((_OWORD *)v308 + 1) = v291;
      v309 = v772;
      v308[6] = 2;
      v310 = v308 + 6;
      *(v310 - 3) = v309;
      v311 = v310 + 2;
      *((_QWORD *)v310 - 1) = v310 + 2;
      v312 = v773;
      if (v773 == v775)
      {
        if (HIDWORD(v774))
        {
          v318 = &v775[3 * HIDWORD(v774)];
          v319 = v775;
          do
          {
            *v311 = *v319;
            *(_QWORD *)(v311 + 1) = *(_QWORD *)(v319 + 1);
            v319 += 3;
            v311 += 3;
          }
          while (v319 != v318);
        }
      }
      else
      {
        v773 = v775;
        *((_QWORD *)v310 - 1) = v312;
        v313 = v774;
        LODWORD(v774) = 2;
        *v310 = v313;
      }
      v314 = HIDWORD(v774);
      HIDWORD(v774) = 0;
      v310[1] = v314;
      v315 = &v307[15 * v306];
      *((_DWORD *)v315 + 20) = *(_DWORD *)v776;
      *(uint64_t *)((char *)v315 + 84) = *(_QWORD *)&v776[4];
      *((_BYTE *)v315 + 92) = v777;
      *((_DWORD *)v315 + 24) = v778[0];
      *(_QWORD *)&v28 = *(_QWORD *)((char *)v778 + 4);
      *(uint64_t *)((char *)v315 + 100) = *(_QWORD *)((char *)v778 + 4);
      v315[14] = v779;
      ++HIDWORD(v723);
    }
    v316 = (unint64_t)v773;
    if (v775 != v773 && v773)
    {
      v773 = 0;
      LODWORD(v774) = 0;
      WTF::fastFree(v316, v16, v17, v18, v19, v20, v21, v22);
    }
    v301 = HIDWORD(v723);
    if (v303 >= HIDWORD(v723))
    {
      __break(0xC471u);
      JUMPOUT(0x198E6D190);
    }
    if (HIDWORD(v723) <= v306)
    {
      __break(0xC471u);
      JUMPOUT(0x198E6D198);
    }
    v302 = v722;
    v317 = (unsigned int **)&v722[15 * v303];
    *v317 = v304;
    v317[2] = (unsigned int *)v306;
    v302[15 * v306 + 1] = v303;
    ++v42;
    v40 = v38[3];
  }
  while (v42 < v40 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38 + 8 * v42) + 37) & 1) != 0);
  v320 = &v302[15 * v301];
  *((_BYTE *)v320 - 88) = 2;
  *(v320 - 15) = 0;
  *(v320 - 13) = -1;
  *((_DWORD *)v320 - 5) = 0;
  v41 = &qword_199123000;
LABEL_25:
  if (v42 == v40)
  {
    v771[0] = 18;
    v772 = -1;
    v773 = v775;
    v774 = 2;
    *(_QWORD *)v776 = 0xFFFFFFFFLL;
    *(_DWORD *)&v776[8] = v41[320];
    v777 = 0;
    v778[0] = 0;
    LODWORD(v778[1]) = -1;
    v779 = 0;
    v332 = HIDWORD(v723);
    if (HIDWORD(v723) == (_DWORD)v723)
    {
      WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp>((uint64_t)v665, (unint64_t)&v769, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      v333 = v722;
      v334 = &v722[15 * HIDWORD(v723)];
      v335 = v769;
      v336 = v770;
      *((_BYTE *)v334 + 32) = v771[0];
      *(_OWORD *)v334 = v335;
      *((_OWORD *)v334 + 1) = v336;
      v337 = v772;
      v334[6] = 2;
      v338 = v334 + 6;
      *(v338 - 3) = v337;
      v339 = v338 + 2;
      *((_QWORD *)v338 - 1) = v338 + 2;
      v340 = v338 + 1;
      v341 = v773;
      if (v773 == v775)
      {
        if (HIDWORD(v774))
        {
          v409 = &v775[3 * HIDWORD(v774)];
          v410 = v775;
          do
          {
            *v339 = *v410;
            *(_QWORD *)(v339 + 1) = *(_QWORD *)(v410 + 1);
            v410 += 3;
            v339 += 3;
          }
          while (v410 != v409);
        }
      }
      else
      {
        v773 = v775;
        *((_QWORD *)v338 - 1) = v341;
        v342 = v774;
        LODWORD(v774) = 2;
        *v338 = v342;
      }
      v343 = HIDWORD(v774);
      HIDWORD(v774) = 0;
      *v340 = v343;
      v344 = &v333[15 * v332];
      *((_DWORD *)v344 + 20) = *(_DWORD *)v776;
      *(uint64_t *)((char *)v344 + 84) = *(_QWORD *)&v776[4];
      *((_BYTE *)v344 + 92) = v777;
      *((_DWORD *)v344 + 24) = v778[0];
      *(uint64_t *)((char *)v344 + 100) = *(_QWORD *)((char *)v778 + 4);
      v344[14] = v779;
      ++HIDWORD(v723);
    }
    v345 = (unint64_t)v773;
    if (v775 != v773 && v773)
    {
      v773 = 0;
      LODWORD(v774) = 0;
      WTF::fastFree(v345, v16, v17, v18, v19, v20, v21, v22);
    }
    if (!HIDWORD(v723))
    {
      __break(0xC471u);
      JUMPOUT(0x198E6D1A0);
    }
    *((_DWORD *)&v722[15 * HIDWORD(v723) - 2] - 1) = 0;
  }
  else
  {
    v771[0] = 0;
    v772 = -1;
    v773 = v775;
    v774 = 2;
    *(_QWORD *)v776 = 0xFFFFFFFFLL;
    *(_QWORD *)&v28 = v41[320];
    v666 = v28;
    *(_DWORD *)&v776[8] = v28;
    v777 = 0;
    v778[0] = 0;
    LODWORD(v778[1]) = -1;
    v779 = 0;
    *(_QWORD *)&v669 = HIDWORD(v723);
    if (HIDWORD(v723) == (_DWORD)v723)
    {
      WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp>((uint64_t)v665, (unint64_t)&v769, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      v43 = v722;
      v44 = &v722[15 * HIDWORD(v723)];
      v45 = v769;
      v46 = v770;
      *((_BYTE *)v44 + 32) = v771[0];
      *(_OWORD *)v44 = v45;
      *((_OWORD *)v44 + 1) = v46;
      v47 = v772;
      v44[6] = 2;
      v48 = v44 + 6;
      *(v48 - 3) = v47;
      v49 = v48 + 2;
      *((_QWORD *)v48 - 1) = v48 + 2;
      v50 = v48 + 1;
      v51 = v773;
      if (v773 == v775)
      {
        if (HIDWORD(v774))
        {
          v285 = &v775[3 * HIDWORD(v774)];
          v286 = v775;
          do
          {
            *v49 = *v286;
            *(_QWORD *)(v49 + 1) = *(_QWORD *)(v286 + 1);
            v286 += 3;
            v49 += 3;
          }
          while (v286 != v285);
        }
      }
      else
      {
        v773 = v775;
        *((_QWORD *)v48 - 1) = v51;
        v52 = v774;
        LODWORD(v774) = 2;
        *v48 = v52;
      }
      v53 = HIDWORD(v774);
      HIDWORD(v774) = 0;
      *v50 = v53;
      v54 = &v43[15 * v669];
      *((_DWORD *)v54 + 20) = *(_DWORD *)v776;
      *(uint64_t *)((char *)v54 + 84) = *(_QWORD *)&v776[4];
      *((_BYTE *)v54 + 92) = v777;
      *((_DWORD *)v54 + 24) = v778[0];
      *(_QWORD *)&v55 = *(_QWORD *)((char *)v778 + 4);
      *(uint64_t *)((char *)v54 + 100) = *(_QWORD *)((char *)v778 + 4);
      v54[14] = v779;
      ++HIDWORD(v723);
    }
    v56 = (unint64_t)v773;
    if (v775 != v773 && v773)
    {
      v773 = 0;
      LODWORD(v774) = 0;
      WTF::fastFree(v56, v16, v17, v18, v19, v20, v21, v22);
    }
    v57 = HIDWORD(v723);
    if (!HIDWORD(v723))
    {
      __break(0xC471u);
      JUMPOUT(0x198E6D140);
    }
    v722[15 * HIDWORD(v723) - 14] = -1;
    v58 = v38[6];
    if (v58 && (*(_WORD *)(v697 + 2) & 0xE0) == 0)
    {
      v59 = v700;
      v60 = " ";
      if (v58 <= 0x20)
        v60 = (const char *)(v38 + 6);
      v61 = *(unsigned int *)v60;
      v64 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v64 = 0;
      *(_QWORD *)(v64 + 8) = 0;
      *(_DWORD *)(v64 + 12) = v61;
      if ((_DWORD)v61)
      {
        if (v61 >= 0x4924925)
        {
          __break(0xC471u);
          JUMPOUT(0x198E6D168);
        }
        v65 = WTF::fastMalloc((WTF *)(56 * v61));
        *(_DWORD *)(v64 + 8) = 56 * (int)v61 / 0x38u;
        *(_QWORD *)v64 = v65;
        v66 = *(_DWORD *)(v64 + 12);
        if (v66)
        {
          v67 = v65 + 56 * v66;
          v55 = 0uLL;
          do
          {
            *(_QWORD *)(v65 + 48) = 0;
            *(_OWORD *)(v65 + 32) = 0uLL;
            *(_OWORD *)v65 = 0uLL;
            *(_OWORD *)(v65 + 16) = 0uLL;
            *(_QWORD *)(v65 + 16) = v65 + 32;
            *(_DWORD *)(v65 + 24) = 2;
            *(_BYTE *)(v65 + 40) = 1;
            v65 += 56;
          }
          while (v65 != v67);
        }
      }
      *(_BYTE *)(v64 + 16) = v59;
      *(_QWORD *)&v769 = v64;
      if (v42 < v38[3])
      {
        v68 = v42;
        do
        {
          v69 = v42;
          v70 = v38;
          v71 = *(_QWORD *)(*(_QWORD *)v38 + 8 * v68);
          if (*(_DWORD *)(v71 + 12))
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            while (v74 < *(_DWORD *)(v64 + 12))
            {
              v75 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::collectBoyerMooreInfoFromTerm((uint64_t)&v690, (unsigned __int8 *)(*(_QWORD *)v71 + v72), v74, v64, v19, v20, v21, v22);
              if (!HIDWORD(v75))
              {
                v414 = *(_DWORD *)(v64 + 12);
                if (v414 >= v74)
                {
                  if (v414 != (_DWORD)v74)
                  {
                    v80 = 56 * v414 - 56 * v74;
                    v79 = *(_QWORD *)v64 + 56 * v74 + 32;
                    do
                    {
                      v77 = *(_QWORD *)(v79 - 16);
                      if (v79 != v77 && v77 != 0)
                      {
                        *(_QWORD *)(v79 - 16) = 0;
                        *(_DWORD *)(v79 - 8) = 0;
                        WTF::fastFree(v77, v62, v63, v18, v19, v20, v21, v22);
                      }
                      v79 += 56;
                      v80 -= 56;
                    }
                    while (v80);
                  }
                  *(_DWORD *)(v64 + 12) = v74;
                }
                break;
              }
              ++v73;
              v72 += 48;
              v74 = v75;
              if (v73 >= *(unsigned int *)(v71 + 12))
                break;
            }
          }
          ++v68;
          v38 = v70;
          v76 = v70[3];
          v42 = v69;
        }
        while (v68 < v76);
      }
      if (*(_DWORD *)(v64 + 12))
      {
        if (!HIDWORD(v723))
        {
          __break(0xC471u);
          JUMPOUT(0x198E6D170);
        }
        v722[15 * HIDWORD(v723) - 1] = v769;
        v81 = HIDWORD(v726);
        if (HIDWORD(v726) == (_DWORD)v726)
        {
          WTF::Vector<WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>>((uint64_t)&v725, (unint64_t)&v769);
        }
        else
        {
          v82 = v769;
          *(_QWORD *)&v769 = 0;
          v725[HIDWORD(v726)] = v82;
          HIDWORD(v726) = v81 + 1;
        }
        v704 = 1;
        if ((_BYTE)v741)
        {
          v83 = (DWORD2(v740) - 128) >> 1;
          if (DWORD2(v740) <= 0x80)
            v83 = 0;
          LODWORD(v84) = v83 + 128;
          if (v83 + 128 >= DWORD2(v740))
            v84 = DWORD2(v740);
          else
            v84 = v84;
          if ((*((_QWORD *)&v740 + 1) & 0xFF00000000) != 0)
          {
            if (v83 < v84)
            {
              v85 = v743;
              v86 = v84 - v83;
              v87 = (char *)(v740 + v83);
              do
              {
                v88 = *v87++;
                v743 = ++v85;
                ++v742[v88 & 0x7F];
                --v86;
              }
              while (v86);
            }
          }
          else if (v83 < v84)
          {
            v445 = v743;
            v446 = v84 - v83;
            v447 = (__int16 *)(v740 + 2 * v83);
            do
            {
              v448 = *v447++;
              ++v742[v448 & 0x7F];
              --v446;
            }
            while (v446);
            v743 = v84 - v83 + v445;
          }
        }
      }
      v89 = v769;
      *(_QWORD *)&v769 = 0;
      if (v89)
      {
        v90 = *(unsigned int *)(v89 + 12);
        v91 = *(_QWORD *)v89;
        if ((_DWORD)v90)
        {
          v92 = v38;
          v93 = 56 * v90;
          v94 = v91 + 32;
          do
          {
            v95 = *(_QWORD *)(v94 - 16);
            if (v94 != v95 && v95 != 0)
            {
              *(_QWORD *)(v94 - 16) = 0;
              *(_DWORD *)(v94 - 8) = 0;
              WTF::fastFree(v95, v62, v63, v18, v19, v20, v21, v22);
            }
            v94 += 56;
            v93 -= 56;
          }
          while (v93);
          v91 = *(_QWORD *)v89;
          v38 = v92;
        }
        if (v91)
        {
          *(_QWORD *)v89 = 0;
          *(_DWORD *)(v89 + 8) = 0;
          WTF::fastFree(v91, v62, v63, v18, v19, v20, v21, v22);
        }
        WTF::fastFree(v89, v62, v63, v18, v19, v20, v21, v22);
      }
      v57 = HIDWORD(v723);
    }
    v97 = v38[3];
    do
    {
      if (v42 >= v97)
      {
        __break(0xC471u);
        JUMPOUT(0x198E6D148);
      }
      if (!v57)
      {
        __break(0xC471u);
        JUMPOUT(0x198E6D150);
      }
      v98 = *(unsigned int **)(*(_QWORD *)v38 + 8 * v42);
      v99 = v57 - 1;
      v100 = v98[6];
      HIDWORD(v722[15 * v99 + 12]) = v100;
      LODWORD(v687) = v100;
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::opCompileAlternative((uint64_t)&v690, &v687, v98, v18, v19, v20, v21, v22, *(double *)&v55, *(double *)&v46, v24);
      v101 = HIDWORD(v723);
      v771[0] = 1;
      v772 = -1;
      v773 = v775;
      v774 = 2;
      *(_QWORD *)v776 = 0xFFFFFFFFLL;
      *(_DWORD *)&v776[8] = v666;
      v777 = 0;
      v778[0] = 0;
      LODWORD(v778[1]) = -1;
      v779 = 0;
      if (HIDWORD(v723) == (unint64_t)v723)
      {
        WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp>((uint64_t)v665, (unint64_t)&v769, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        v102 = v722;
        v103 = &v722[15 * HIDWORD(v723)];
        v104 = v769;
        v46 = v770;
        *((_BYTE *)v103 + 32) = v771[0];
        *(_OWORD *)v103 = v104;
        *((_OWORD *)v103 + 1) = v46;
        v105 = v772;
        v103[6] = 2;
        v106 = v103 + 6;
        *(v106 - 3) = v105;
        v107 = v106 + 2;
        *((_QWORD *)v106 - 1) = v106 + 2;
        v108 = v773;
        if (v773 == v775)
        {
          if (HIDWORD(v774))
          {
            v115 = &v775[3 * HIDWORD(v774)];
            v116 = v775;
            do
            {
              *v107 = *v116;
              *(_QWORD *)(v107 + 1) = *(_QWORD *)(v116 + 1);
              v116 += 3;
              v107 += 3;
            }
            while (v116 != v115);
          }
        }
        else
        {
          v773 = v775;
          *((_QWORD *)v106 - 1) = v108;
          v109 = v774;
          LODWORD(v774) = 2;
          *v106 = v109;
        }
        v110 = HIDWORD(v774);
        HIDWORD(v774) = 0;
        v106[1] = v110;
        v111 = &v102[15 * v101];
        *((_DWORD *)v111 + 20) = *(_DWORD *)v776;
        *(uint64_t *)((char *)v111 + 84) = *(_QWORD *)&v776[4];
        *((_BYTE *)v111 + 92) = v777;
        *((_DWORD *)v111 + 24) = v778[0];
        *(_QWORD *)&v55 = *(_QWORD *)((char *)v778 + 4);
        *(uint64_t *)((char *)v111 + 100) = *(_QWORD *)((char *)v778 + 4);
        v111[14] = v779;
        ++HIDWORD(v723);
      }
      v112 = (unint64_t)v773;
      if (v775 != v773 && v773)
      {
        v773 = 0;
        LODWORD(v774) = 0;
        WTF::fastFree(v112, v16, v17, v18, v19, v20, v21, v22);
      }
      v57 = HIDWORD(v723);
      if (v99 >= HIDWORD(v723))
      {
        __break(0xC471u);
        JUMPOUT(0x198E6D158);
      }
      if (HIDWORD(v723) <= v101)
      {
        __break(0xC471u);
        JUMPOUT(0x198E6D160);
      }
      v113 = v722;
      v114 = (unsigned int **)&v722[15 * v99];
      *v114 = v98;
      v114[2] = (unsigned int *)v101;
      v113[15 * v101 + 1] = v99;
      ++v42;
      v97 = v38[3];
    }
    while (v42 < v97);
    v117 = &v113[15 * v57];
    *((_BYTE *)v117 - 88) = 2;
    *(v117 - 15) = 0;
    *(v117 - 13) = v669;
    *((_DWORD *)v117 - 5) = 0;
  }
LABEL_106:
  if (HIBYTE(v702))
  {
    v449 = v702 | 0x100;
    v29 = v671;
LABEL_458:
    *(_WORD *)(v29 + 105) = v449;
    goto LABEL_356;
  }
  if (HIBYTE(word_1ECF4C286) | HIBYTE(dword_1ECF4C28A))
  {
    v560 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)&v769 = JSC::Yarr::YarrDisassembler::YarrDisassembler(v560, (uint64_t)&v690);
    std::unique_ptr<JSC::JITDisassembler>::operator=[abi:sn180100]((unint64_t *)&v738, (unint64_t *)&v769, v561, v562, v563, v564, v565, v566);
    std::unique_ptr<JSC::JITDisassembler>::~unique_ptr[abi:sn180100]((unint64_t *)&v769, v567, v568, v569, v570, v571, v572, v573);
  }
  v118 = (unint64_t)v738;
  if (v738)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v691, (uint64_t)v16, v17, v18, v19, v20, v21, v22, &v686);
    *(_DWORD *)(v118 + 8) = v686;
  }
  if (v706)
    *(_BYTE *)(v671 + 104) = 1;
  if (!BYTE1(qword_1ECF4C780))
  {
    if ((v703 & 5) == 0)
      goto LABEL_115;
    JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v691, (JSC::CCallHelpers *)v16, v17, v18, v19, v20, v21, v22);
    v739 += 2;
    goto LABEL_507;
  }
  if ((v703 & 5) != 0)
  {
LABEL_507:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v691, (JSC::ARM64LogicalImmediate *)0xD800, 13, v18, v19, v20, v21, v22);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v691, (JSC::ARM64LogicalImmediate *)0xDC00, 14, v542, v543, v544, v545, v546);
  }
LABEL_115:
  v119 = v691;
  v120 = v691[50];
  if (v120 < v691[13])
  {
    do
    {
      if ((v120 + 4) > v119[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v119 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
        v120 = v119[50];
      }
      *(_DWORD *)(*((_QWORD *)v119 + 7) + v120) = -721215457;
      v120 = v119[50] + 4;
      v119[50] = v120;
    }
    while (v120 < v119[13]);
    v122 = v691;
    v121 = v691[50];
  }
  else
  {
    v121 = v691[50];
    v122 = v691;
  }
  v119[52] = 0;
  if (v121 + 4 > v122[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
    v121 = v122[50];
  }
  *(_DWORD *)(*((_QWORD *)v122 + 7) + v121) = 1795293247;
  v123 = v122[50] + 4;
  v122[50] = v123;
  if (*((_BYTE *)v122 + 328))
  {
    for (; (signed int)v123 < v122[13]; v122[50] = v123)
    {
      if (v123 + 4 > v122[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
        v123 = v122[50];
      }
      *(_DWORD *)(*((_QWORD *)v122 + 7) + v123) = -721215457;
      v123 = v122[50] + 4;
    }
    v122[52] = 0;
  }
  if (v123 + 4 > v122[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
    v123 = v122[50];
  }
  *(_DWORD *)(*((_QWORD *)v122 + 7) + v123) = 1409286153;
  v124 = v122[50];
  v125 = v124 + 4;
  v122[50] = v124 + 4;
  v126 = v124 + 8;
  v127 = v124 + 4;
  if (v126 > v122[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
    v127 = v122[50];
  }
  *(_DWORD *)(*((_QWORD *)v122 + 7) + v127) = -721215457;
  v122[50] += 4;
  if (*((_BYTE *)v122 + 328))
    v128 = -122;
  else
    v128 = -126;
  v682[0] = v125;
  v682[1] = 0;
  v683 = v128;
  v684 = 9;
  v685 = -1;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateFailReturn((uint64_t)&v690, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v682, (uint64_t)v691, v129, v130, v131, v132, v133, v134);
  v135 = *(_DWORD *)(*(_QWORD *)(v697 + 16) + 28);
  if (v135)
  {
    if (v135 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198E6D178);
    }
    v136 = (8 * v135 + 63) & 0xFFFFFFC0;
    if (v136)
    {
      JSC::MacroAssemblerARM64::add64((uint64_t)v691, -v136, 31, 6, v19, v20, v21, v22);
      v144 = v691;
      if (!*((_BYTE *)v691 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E6CCA8);
      }
      *(_DWORD *)(*((_QWORD *)v691 + 37) + 208) &= ~v691[80];
      v145 = v144[76] & 0x1F | 0xF8408080;
      v146 = v144[50];
      if (v146 + 4 > v144[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v144 + 14), v137, v138, v139, v140, v141, v142, v143);
        v146 = v144[50];
      }
      *(_DWORD *)(*((_QWORD *)v144 + 7) + v146) = v145;
      v144[50] += 4;
      JSC::MacroAssemblerARM64::branch64((uint64_t)v144, 9, 17, 6, v140, v141, v142, v143, (uint64_t)&v769);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v691, -2, 0, v147, v148, v149, v150, v151);
      v159 = v691;
      v160 = v691[50];
      if (v160 + 4 > v691[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v691 + 14), v152, v153, v154, v155, v156, v157, v158);
        v160 = v159[50];
      }
      *(_DWORD *)(*((_QWORD *)v159 + 7) + v160) = 1384120321;
      v159[50] += 4;
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn((uint64_t)&v690, v152, v153, v154, v155, v156, v157, v158);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v769, (uint64_t)v691, v161, v162, v163, v164, v165, v166);
      v167 = v691;
      v168 = v691[50];
      if (v168 + 4 > v691[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v691 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
        v168 = v167[50];
      }
      *(_DWORD *)(*((_QWORD *)v167 + 7) + v168) = -1862270753;
      v167[50] += 4;
    }
  }
  else
  {
    v136 = 0;
  }
  if ((v703 & 1) != 0)
    JSC::MacroAssemblerARM64::getEffectiveAddress(v691, 0x100000200uLL, 0x200000000, 15, v19, v20, v21, v22);
  if (v706)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v691, (JSC::ARM64LogicalImmediate *)0xF4240, 9, v18, v19, v20, v21, v22);
  v169 = v697;
  if (v701 == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(v697 + 16) + 32))
    {
      v172 = 0;
    }
    else
    {
      v170 = v691;
      v171 = v691[50];
      if (v171 + 4 > v691[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v691 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
        v171 = v170[50];
      }
      *(_DWORD *)(*((_QWORD *)v170 + 7) + v171) = -1207959455;
      v170[50] += 4;
      v172 = 1;
      v169 = v697;
    }
    v173 = *(_DWORD *)(v169 + 4);
    if (v172 < v173 + 1)
    {
      v324 = v172;
      v325 = ((unint64_t)v172 << 35) | 3;
      do
      {
        v326 = v691;
        if (!*((_BYTE *)v691 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198E6CD6CLL);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg(v691, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)(v691 + 66), v18, v19, v20, v21, v22);
        JSC::MacroAssemblerARM64::store32((uint64_t)v326, 16, v325, v327, v328, v329, v330, v331);
        ++v324;
        v169 = v697;
        v173 = *(_DWORD *)(v697 + 4);
        v325 += 0x800000000;
      }
      while (v324 < (v173 + 1));
    }
    v174 = (2 * v173 + 2);
    if (v174 < (int)v174 + *(_DWORD *)(v169 + 12))
    {
      v633 = (v174 << 34) | 3;
      do
      {
        JSC::MacroAssemblerARM64::store32((uint64_t)v691, 63, v633, v18, v19, v20, v21, v22);
        ++v174;
        v633 += 0x400000000;
      }
      while (v174 < (*(_DWORD *)(v697 + 12) + 2 * *(_DWORD *)(v697 + 4) + 2));
    }
  }
  else if (!*(_BYTE *)(*(_QWORD *)(v697 + 16) + 32))
  {
    v248 = v691;
    v249 = v691[50];
    if (v249 + 4 > v691[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v691 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
      v249 = v248[50];
    }
    *(_DWORD *)(*((_QWORD *)v248 + 7) + v249) = -1442774045;
    v248[50] += 4;
  }
  if (v706)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::initParenContextFreeList((unsigned int *)&v690, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
    if (HIBYTE(v702))
    {
      v29 = v671;
      *(_WORD *)(v671 + 105) = v702 | 0x100;
      goto LABEL_356;
    }
  }
  if ((*(_BYTE *)v697 & 0x40) != 0)
    JSC::MacroAssemblerARM64::move(v691, 1, 11, v18, v19, v20, v21, v22);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generate((uint64_t)&v690, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
  v182 = (unint64_t)v738;
  if (v738)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v691, v175, (uint64_t)v176, v177, v178, v179, v180, v181, &v681);
    *(_DWORD *)(v182 + 48) = v681;
  }
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::backtrack((uint64_t)&v690, v175, v176, v177, v178, v179, v180, v181);
  v190 = (unint64_t)v738;
  if (v738)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v691, (uint64_t)v183, v184, v185, v186, v187, v188, v189, &v680);
    *(_DWORD *)(v190 + 52) = v680;
  }
  v191 = v691;
  v192 = v691[50];
  if (v192 < v691[13])
  {
    do
    {
      if ((v192 + 4) > v191[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v191 + 14), (uint64_t)v183, v184, v185, v186, v187, v188, v189);
        v192 = v191[50];
      }
      *(_DWORD *)(*((_QWORD *)v191 + 7) + v192) = -721215457;
      v192 = v191[50] + 4;
      v191[50] = v192;
    }
    while (v192 < v191[13]);
  }
  v193 = 0;
  v191[52] = 0;
  if (v701 != 1)
  {
    if ((*(_WORD *)(v697 + 2) & 0xE2) == 0 && v706 == 0)
      v193 = (*(_BYTE *)v697 & 1) == 0 && (*(_BYTE *)v697 & 0x40) == 0;
    else
      v193 = 0;
  }
  if (HIDWORD(v716))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v691, (uint64_t)v183, v184, v185, v186, v187, v188, v189, (int *)&v769);
    v717 = v769;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeCharImpl<(JSC::Yarr::TryReadUnicodeCharCodeLocation)1>((uint64_t)&v690, v547, v548, v549, v550, v551, v552, v553);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v691 + 14), 3596551104, v554, v555, v556, v557, v558, v559);
  }
  if (!HIDWORD(v711))
  {
    if (!HIDWORD(v714))
      goto LABEL_162;
    *(_QWORD *)&v769 = &v770;
    *((_QWORD *)&v769 + 1) = 2;
    goto LABEL_471;
  }
  *(_QWORD *)&v769 = &v770;
  *((_QWORD *)&v769 + 1) = 2;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v710, (uint64_t)v691, v184, v185, v186, v187, v188, v189);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v691, -2, 0, v472, v473, v474, v475, v476);
  v477 = v691;
  JSC::ARM64Assembler::label(v691 + 8, v478, v479, v480, v481, v482, v483, v484, (int *)&v687);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v477 + 14), 335544320, v485, v486, v487, v488, v489, v490);
  if (*((_BYTE *)v477 + 328))
    v497 = 69;
  else
    v497 = 65;
  v675 = (WTF *)v687;
  LOBYTE(v676) = v497;
  *(_WORD *)((char *)&v676 + 1) = 15;
  HIBYTE(v676) = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v769, &v675, v491, v492, v493, v494, v495, v496);
  if (HIDWORD(v714))
  {
LABEL_471:
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v713, (uint64_t)v691, v184, v185, v186, v187, v188, v189);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v691, -1, 0, v498, v499, v500, v501, v502);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v769, (uint64_t)v691, v184, v185, v186, v187, v188, v189);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::removeCallFrame((uint64_t)&v690, v503, v504, v505, v506, v507, v508, v509);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v691, 0, 1, v510, v511, v512, v513, v514);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn((uint64_t)&v690, v515, v516, v517, v518, v519, v520, v521);
  v522 = v769;
  if (&v770 != (__int128 *)v769 && (_QWORD)v769)
  {
    *(_QWORD *)&v769 = 0;
    DWORD2(v769) = 0;
    WTF::fastFree(v522, v183, v184, v185, v186, v187, v188, v189);
  }
LABEL_162:
  LODWORD(v666) = v193;
  LODWORD(v669) = v136;
  v194 = (unint64_t)v738;
  if (v738)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v691, (uint64_t)v183, v184, v185, v186, v187, v188, v189, &v679);
    *(_DWORD *)(v194 + 56) = v679;
  }
  v195 = HIDWORD(v736);
  v675 = (WTF *)v678;
  v676 = 4;
  v677 = HIDWORD(v736);
  if (HIDWORD(v736) >= 5)
  {
    if (HIDWORD(v736) >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198E6D1B8);
    }
    v196 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v736)));
    v676 = v195;
    v675 = v196;
    v195 = HIDWORD(v736);
  }
  else
  {
    v196 = (WTF *)v678;
  }
  if ((_DWORD)v195)
  {
    v197 = v735;
    v198 = &v735[v195];
    v199 = v196;
    do
    {
      *(_DWORD *)v199 = *(_DWORD *)v197;
      *((_DWORD *)v199 + 1) = *((_DWORD *)v197++ + 1);
      v199 = (WTF *)((char *)v199 + 8);
    }
    while (v197 != v198);
  }
  v200 = v677;
  v201 = v691;
  if (v677)
  {
    *(_QWORD *)&v769 = &v770;
    DWORD2(v769) = 4;
    HIDWORD(v769) = v677;
    if (v677 > 4)
    {
      if (v677 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198E6D1C8);
      }
      v423 = WTF::fastMalloc((WTF *)(8 * v677));
      DWORD2(v769) = v200;
      *(_QWORD *)&v769 = v423;
      if (!v677)
        goto LABEL_331;
      v352 = (__int128 *)v423;
      v196 = v675;
      v351 = (WTF *)((char *)v675 + 8 * v677);
    }
    else
    {
      v351 = (WTF *)((char *)v196 + 8 * v677);
      v352 = &v770;
    }
    do
    {
      *(_DWORD *)v352 = *(_DWORD *)v196;
      *((_DWORD *)v352 + 1) = *((_DWORD *)v196 + 1);
      v196 = (WTF *)((char *)v196 + 8);
      v352 = (__int128 *)((char *)v352 + 8);
    }
    while (v196 != v351);
LABEL_331:
    v360 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)(v360 + 8) = 1;
    *(_QWORD *)v360 = &off_1E35BA030;
    v361 = (_DWORD *)(v360 + 32);
    v362 = HIDWORD(v769);
    *(_QWORD *)(v360 + 16) = v360 + 32;
    *(_DWORD *)(v360 + 24) = 4;
    *(_DWORD *)(v360 + 28) = v362;
    if (v362 >= 5)
    {
      if (v362 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198E6D1D0);
      }
      v361 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v362));
      *(_DWORD *)(v360 + 24) = v362;
      *(_QWORD *)(v360 + 16) = v361;
      v362 = HIDWORD(v769);
    }
    if ((_DWORD)v362)
    {
      v363 = (_DWORD *)v769;
      v364 = (_DWORD *)(v769 + 8 * v362);
      do
      {
        *v361 = *v363;
        v361[1] = v363[1];
        v363 += 2;
        v361 += 2;
      }
      while (v363 != v364);
    }
    v365 = v201[61];
    if ((_DWORD)v365 == v201[60])
    {
      v415 = v365 + (v365 >> 2);
      if (v415 >= 0x10)
        v416 = v415 + 1;
      else
        v416 = 16;
      if (v416 <= v365 + 1)
        v417 = v365 + 1;
      else
        v417 = v416;
      if (v417 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198E6D1C0);
      }
      v418 = (const void *)*((_QWORD *)v201 + 29);
      v419 = (void *)WTF::fastMalloc((WTF *)(8 * v417));
      v201[60] = v417;
      *((_QWORD *)v201 + 29) = v419;
      memcpy(v419, v418, 8 * v365);
      if (v418)
      {
        if (*((const void **)v201 + 29) == v418)
        {
          *((_QWORD *)v201 + 29) = 0;
          v201[60] = 0;
        }
        WTF::fastFree((unint64_t)v418, v353, v354, v355, v356, v357, v358, v359);
      }
      v365 = v201[61];
      v366 = (uint64_t *)(*((_QWORD *)v201 + 29) + 8 * v365);
    }
    else
    {
      v366 = (uint64_t *)(*((_QWORD *)v201 + 29) + 8 * v365);
    }
    *v366 = v360;
    v201[61] = v365 + 1;
    v367 = v769;
    if (&v770 != (__int128 *)v769 && (_QWORD)v769 != 0)
    {
      *(_QWORD *)&v769 = 0;
      DWORD2(v769) = 0;
      WTF::fastFree(v367, v353, v354, v355, v356, v357, v358, v359);
    }
    v201 = v691;
  }
  if (HIDWORD(v716))
  {
    *(_QWORD *)&v769 = &v690;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#2}>((uint64_t)v201, &v769);
    v201 = v691;
  }
  v769 = 0uLL;
  *(_QWORD *)&v770 = v671;
  *((_QWORD *)&v770 + 1) = v771;
  v780 = 128;
  v202 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v202 != -1)
  {
    v687 = &v689;
    v673 = &v687;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v673, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v203 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v211 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v211)
  {
    v211 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v211, v203);
  }
  v212 = *(_QWORD *)v211;
  if (*(_QWORD *)v211 != v211 + 8)
  {
    v213 = *(_DWORD *)(v211 + 136);
    if (v780 < v213)
    {
      if (*((_QWORD *)&v770 + 1) && *((_BYTE **)&v770 + 1) != v771)
      {
        WTF::fastFree(*((unint64_t *)&v770 + 1), v204, v205, v206, v207, v208, v209, v210);
        v212 = *(_QWORD *)v211;
        v213 = *(_DWORD *)(v211 + 136);
      }
      *((_QWORD *)&v770 + 1) = v212;
      v780 = v213;
      *(_QWORD *)v211 = v211 + 8;
      *(_DWORD *)(v211 + 136) = 128;
    }
  }
  v781 = 1;
  v782 = 0;
  v783 = 16;
  v784 = 0u;
  v785 = 0u;
  v786 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v769, (uint64_t)v201, 0, v206, v207, v208, v209, v210);
  if ((_BYTE)v782)
  {
    v222 = (char **)&v784;
    v223 = v738;
    if (v738)
    {
      v632 = (WTF::PrintStream *)WTF::dataFile(v214);
      JSC::Yarr::YarrDisassembler::dump(v223, v632, (JSC::LinkBuffer *)&v769);
    }
    if (v701)
    {
      if (!v700)
      {
        if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
        {
          v574 = 1;
        }
        else
        {
          if (!HIBYTE(dword_1ECF4C28A) && !byte_1ECF4C289)
          {
            if (DWORD1(v785))
            {
              v321 = (uint64_t *)*((_QWORD *)&v784 + 1);
              v322 = 8 * DWORD1(v785);
              do
              {
                v323 = *v321++;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v323 + 16))(v323, &v769);
                v322 -= 8;
              }
              while (v322);
            }
            if (HIDWORD(v786))
            {
              v411 = (uint64_t *)*((_QWORD *)&v785 + 1);
              v412 = 8 * HIDWORD(v786);
              do
              {
                v413 = *v411++;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v413 + 16))(v413, &v769);
                v412 -= 8;
              }
              while (v412);
            }
            v224 = v783;
            v225 = *((_QWORD *)&v769 + 1);
            *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v783 / 2] += *((_QWORD *)&v769 + 1);
            ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v224);
            sys_icache_invalidate((void *)v784, v225);
            v226 = (unsigned int *)v769;
            if ((_QWORD)v769)
            {
              do
                v634 = __ldaxr(v226);
              while (__stlxr(v634 + 1, v226));
              v222 = (char **)(v226 + 2);
            }
            v227 = *v222;
            v687 = *v222;
            v688 = (JSC::ExecutableMemoryHandle *)v226;
            v29 = v671;
            if (byte_1ECF4C2A2)
              JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v769, (uint64_t)&v687, 0, 0);
            v673 = (char **)v227;
            v674 = 0;
            if (v226)
            {
              do
                v228 = __ldaxr(v226);
              while (__stlxr(v228 + 1, v226));
              v229 = (unsigned int *)v674;
              v674 = (JSC::ExecutableMemoryHandle *)v226;
              if (v229)
              {
                do
                {
                  v230 = __ldaxr(v229);
                  v231 = v230 - 1;
                }
                while (__stlxr(v231, v229));
                if (!v231)
                {
                  atomic_store(1u, v229);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v229, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                  WTF::fastFree(v584, v585, v586, v587, v588, v589, v590, v591);
                }
              }
              v232 = (unsigned int *)v688;
              v688 = 0;
              if (v232)
              {
                do
                {
                  v233 = __ldaxr(v232);
                  v234 = v233 - 1;
                }
                while (__stlxr(v234, v232));
                if (!v234)
                {
                  atomic_store(1u, v232);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v232, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                  WTF::fastFree(v592, v593, v594, v595, v596, v597, v598, v599);
                }
              }
            }
            v235 = 0;
LABEL_206:
            v236 = v728;
            v237 = HIDWORD(v728);
            v728 = 0uLL;
            v238 = (unsigned int *)v674;
            *(_QWORD *)(v29 + 16) = v673;
            if (v238)
            {
              do
                v239 = __ldaxr(v238);
              while (__stlxr(v239 + 1, v238));
            }
            v240 = *(unsigned int **)(v29 + 24);
            *(_QWORD *)(v29 + 24) = v238;
            if (v240)
            {
              do
              {
                v241 = __ldaxr(v240);
                v242 = v241 - 1;
              }
              while (__stlxr(v242, v240));
              if (!v242)
              {
                atomic_store(1u, v240);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v240, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                WTF::fastFree(v576, v577, v578, v579, v580, v581, v582, v583);
              }
            }
            v243 = *(unsigned int *)(v29 + 8);
            v244 = *(unsigned int *)(v29 + 12);
            if (v244 + v237 > v243)
            {
              v346 = v243 + (v243 >> 2);
              if (v346 >= 0x10)
                v347 = v346 + 1;
              else
                v347 = 16;
              if (v347 <= v244 + v237)
                v348 = v244 + v237;
              else
                v348 = v347;
              if (v348 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198E6D1A8);
              }
              v349 = *(_QWORD **)v29;
              v350 = (void *)WTF::fastMalloc((WTF *)(8 * v348));
              *(_DWORD *)(v29 + 8) = v348;
              *(_QWORD *)v29 = v350;
              memcpy(v350, v349, 8 * v244);
              if (v349)
              {
                if (*(_QWORD **)v29 == v349)
                {
                  *(_QWORD *)v29 = 0;
                  *(_DWORD *)(v29 + 8) = 0;
                }
                WTF::fastFree((unint64_t)v349, v215, v216, v217, v218, v219, v220, v221);
              }
            }
            if ((_DWORD)v237)
            {
              v383 = *(_DWORD *)(v29 + 12);
              v384 = 8 * v237;
              v385 = 8 * v237;
              v386 = (uint64_t *)v236;
              do
              {
                v387 = *(_QWORD **)v29;
                v388 = *v386;
                *v386++ = 0;
                v387[v383++] = v388;
                v385 -= 8;
              }
              while (v385);
              *(_DWORD *)(v29 + 12) = v383;
              v389 = (unint64_t *)v236;
              do
              {
                v390 = *v389;
                *v389 = 0;
                if (v390)
                  WTF::fastFree(v390, v215, v216, v217, v218, v219, v220, v221);
                ++v389;
                v384 -= 8;
              }
              while (v384);
            }
            if (v236)
              WTF::fastFree(v236, v215, v216, v217, v218, v219, v220, v221);
            v245 = (unsigned int *)v674;
            v674 = 0;
            if ((v235 & 1) != 0)
            {
              if (v245)
              {
                do
                {
                  v246 = __ldaxr(v245);
                  v247 = --v246 == 0;
                }
                while (__stlxr(v246, v245));
                goto LABEL_269;
              }
            }
            else if (v245)
            {
              do
              {
                v276 = __ldaxr(v245);
                v247 = --v276 == 0;
              }
              while (__stlxr(v276, v245));
LABEL_269:
              if (v247)
              {
                atomic_store(1u, v245);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v245, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
              }
            }
LABEL_351:
            if (HIBYTE(v702))
              *(_WORD *)(v29 + 105) = v702 | 0x100;
            goto LABEL_353;
          }
          v574 = HIBYTE(dword_1ECF4C28A) != 0;
        }
        JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)40109>(&v673, (uint64_t)&v769, v574);
        v235 = 1;
        v29 = v671;
        goto LABEL_206;
      }
      if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
      {
        v636 = 1;
      }
      else
      {
        if (!HIBYTE(dword_1ECF4C28A) && !byte_1ECF4C289)
        {
          if (DWORD1(v785))
          {
            v523 = (uint64_t *)*((_QWORD *)&v784 + 1);
            v524 = 8 * DWORD1(v785);
            do
            {
              v525 = *v523++;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v525 + 16))(v525, &v769);
              v524 -= 8;
            }
            while (v524);
          }
          if (HIDWORD(v786))
          {
            v539 = (uint64_t *)*((_QWORD *)&v785 + 1);
            v540 = 8 * HIDWORD(v786);
            do
            {
              v541 = *v539++;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v541 + 16))(v541, &v769);
              v540 -= 8;
            }
            while (v540);
          }
          v424 = v783;
          v425 = *((_QWORD *)&v769 + 1);
          *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v783 / 2] += *((_QWORD *)&v769 + 1);
          ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v424);
          sys_icache_invalidate((void *)v784, v425);
          v426 = (unsigned int *)v769;
          if ((_QWORD)v769)
          {
            do
              v663 = __ldaxr(v426);
            while (__stlxr(v663 + 1, v426));
            v222 = (char **)(v426 + 2);
          }
          v427 = *v222;
          v687 = *v222;
          v688 = (JSC::ExecutableMemoryHandle *)v426;
          v29 = v671;
          if (byte_1ECF4C2A2)
            JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v769, (uint64_t)&v687, 0, 0);
          v673 = (char **)v427;
          v674 = 0;
          if (v426)
          {
            do
              v428 = __ldaxr(v426);
            while (__stlxr(v428 + 1, v426));
            v429 = (unsigned int *)v674;
            v674 = (JSC::ExecutableMemoryHandle *)v426;
            if (v429)
            {
              do
              {
                v430 = __ldaxr(v429);
                v431 = v430 - 1;
              }
              while (__stlxr(v431, v429));
              if (!v431)
              {
                atomic_store(1u, v429);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v429, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                WTF::fastFree(v646, v647, v648, v649, v650, v651, v652, v653);
              }
            }
            v432 = (unsigned int *)v688;
            v688 = 0;
            if (v432)
            {
              do
              {
                v433 = __ldaxr(v432);
                v434 = v433 - 1;
              }
              while (__stlxr(v434, v432));
              if (!v434)
              {
                atomic_store(1u, v432);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v432, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                WTF::fastFree(v654, v655, v656, v657, v658, v659, v660, v661);
              }
            }
          }
          goto LABEL_440;
        }
        v636 = HIBYTE(dword_1ECF4C28A) != 0;
      }
      JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)57659>(&v673, (uint64_t)&v769, v636);
      v29 = v671;
LABEL_440:
      v435 = v728;
      v436 = HIDWORD(v728);
      v728 = 0uLL;
      v437 = (unsigned int *)v674;
      *(_QWORD *)(v29 + 32) = v673;
      if (v437)
      {
        do
          v438 = __ldaxr(v437);
        while (__stlxr(v438 + 1, v437));
      }
      v439 = *(unsigned int **)(v29 + 40);
      *(_QWORD *)(v29 + 40) = v437;
      if (v439)
      {
        do
        {
          v440 = __ldaxr(v439);
          v441 = v440 - 1;
        }
        while (__stlxr(v441, v439));
        if (!v441)
        {
          atomic_store(1u, v439);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v439, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
          WTF::fastFree(v638, v639, v640, v641, v642, v643, v644, v645);
        }
      }
      v442 = *(unsigned int *)(v29 + 8);
      v443 = *(unsigned int *)(v29 + 12);
      if (v443 + v436 > v442)
      {
        v526 = v442 + (v442 >> 2);
        if (v526 >= 0x10)
          v527 = v526 + 1;
        else
          v527 = 16;
        if (v527 <= v443 + v436)
          v528 = v443 + v436;
        else
          v528 = v527;
        if (v528 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198E6D1D8);
        }
        v529 = *(_QWORD **)v29;
        v530 = (void *)WTF::fastMalloc((WTF *)(8 * v528));
        *(_DWORD *)(v29 + 8) = v528;
        *(_QWORD *)v29 = v530;
        memcpy(v530, v529, 8 * v443);
        if (v529)
        {
          if (*(_QWORD **)v29 == v529)
          {
            *(_QWORD *)v29 = 0;
            *(_DWORD *)(v29 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v529, v215, v216, v217, v218, v219, v220, v221);
        }
      }
      if ((_DWORD)v436)
      {
        v531 = *(_DWORD *)(v29 + 12);
        v532 = 8 * v436;
        v533 = 8 * v436;
        v534 = (uint64_t *)v435;
        do
        {
          v535 = *(_QWORD **)v29;
          v536 = *v534;
          *v534++ = 0;
          v535[v531++] = v536;
          v533 -= 8;
        }
        while (v533);
        *(_DWORD *)(v29 + 12) = v531;
        v537 = (unint64_t *)v435;
        do
        {
          v538 = *v537;
          *v537 = 0;
          if (v538)
            WTF::fastFree(v538, v215, v216, v217, v218, v219, v220, v221);
          ++v537;
          v532 -= 8;
        }
        while (v532);
      }
      if (v435)
        WTF::fastFree(v435, v215, v216, v217, v218, v219, v220, v221);
      v245 = (unsigned int *)v674;
      v674 = 0;
      if (!v245)
        goto LABEL_351;
      do
      {
        v444 = __ldaxr(v245);
        v247 = --v444 == 0;
      }
      while (__stlxr(v444, v245));
      goto LABEL_269;
    }
    v251 = v192 - v120;
    if (!v700)
    {
      if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
      {
        v575 = 1;
      }
      else
      {
        if (!HIBYTE(dword_1ECF4C28A) && !byte_1ECF4C289)
        {
          if (DWORD1(v785))
          {
            v391 = (uint64_t *)*((_QWORD *)&v784 + 1);
            v392 = 8 * DWORD1(v785);
            do
            {
              v393 = *v391++;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v393 + 16))(v393, &v769);
              v392 -= 8;
            }
            while (v392);
          }
          if (HIDWORD(v786))
          {
            v420 = (uint64_t *)*((_QWORD *)&v785 + 1);
            v421 = 8 * HIDWORD(v786);
            do
            {
              v422 = *v420++;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v422 + 16))(v422, &v769);
              v421 -= 8;
            }
            while (v421);
          }
          v252 = v783;
          v253 = *((_QWORD *)&v769 + 1);
          *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v783 / 2] += *((_QWORD *)&v769 + 1);
          ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v252);
          sys_icache_invalidate((void *)v784, v253);
          v254 = (unsigned int *)v769;
          if ((_QWORD)v769)
          {
            do
              v635 = __ldaxr(v254);
            while (__stlxr(v635 + 1, v254));
            v222 = (char **)(v254 + 2);
          }
          v255 = *v222;
          v687 = *v222;
          v688 = (JSC::ExecutableMemoryHandle *)v254;
          v29 = v671;
          if (byte_1ECF4C2A2)
            JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v769, (uint64_t)&v687, 0, 0);
          v673 = (char **)v255;
          v674 = 0;
          if (v254)
          {
            do
              v256 = __ldaxr(v254);
            while (__stlxr(v256 + 1, v254));
            v257 = (unsigned int *)v674;
            v674 = (JSC::ExecutableMemoryHandle *)v254;
            if (v257)
            {
              do
              {
                v258 = __ldaxr(v257);
                v259 = v258 - 1;
              }
              while (__stlxr(v259, v257));
              if (!v259)
              {
                atomic_store(1u, v257);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v257, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                WTF::fastFree(v616, v617, v618, v619, v620, v621, v622, v623);
              }
            }
            v260 = (unsigned int *)v688;
            v688 = 0;
            if (v260)
            {
              do
              {
                v261 = __ldaxr(v260);
                v262 = v261 - 1;
              }
              while (__stlxr(v262, v260));
              if (!v262)
              {
                atomic_store(1u, v260);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v260, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
                WTF::fastFree(v624, v625, v626, v627, v628, v629, v630, v631);
              }
            }
          }
          v263 = 0;
LABEL_253:
          v264 = v728;
          v265 = HIDWORD(v728);
          v728 = 0uLL;
          v266 = (unsigned int *)v674;
          *(_QWORD *)(v29 + 48) = v673;
          if (v266)
          {
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 + 1, v266));
          }
          v268 = *(unsigned int **)(v29 + 56);
          *(_QWORD *)(v29 + 56) = v266;
          if (v268)
          {
            do
            {
              v269 = __ldaxr(v268);
              v270 = v269 - 1;
            }
            while (__stlxr(v270, v268));
            if (!v270)
            {
              atomic_store(1u, v268);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v268, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
              WTF::fastFree(v600, v601, v602, v603, v604, v605, v606, v607);
            }
          }
          v271 = *(unsigned int *)(v29 + 8);
          v272 = *(unsigned int *)(v29 + 12);
          if (v272 + v265 > v271)
          {
            v394 = v271 + (v271 >> 2);
            if (v394 >= 0x10)
              v395 = v394 + 1;
            else
              v395 = 16;
            if (v395 <= v272 + v265)
              v396 = v272 + v265;
            else
              v396 = v395;
            if (v396 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198E6D1B0);
            }
            v397 = *(_QWORD **)v29;
            v398 = (void *)WTF::fastMalloc((WTF *)(8 * v396));
            *(_DWORD *)(v29 + 8) = v396;
            *(_QWORD *)v29 = v398;
            memcpy(v398, v397, 8 * v272);
            if (v397)
            {
              if (*(_QWORD **)v29 == v397)
              {
                *(_QWORD *)v29 = 0;
                *(_DWORD *)(v29 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v397, v215, v216, v217, v218, v219, v220, v221);
            }
          }
          if ((_DWORD)v265)
          {
            v401 = *(_DWORD *)(v29 + 12);
            v402 = 8 * v265;
            v403 = 8 * v265;
            v404 = (uint64_t *)v264;
            do
            {
              v405 = *(_QWORD **)v29;
              v406 = *v404;
              *v404++ = 0;
              v405[v401++] = v406;
              v403 -= 8;
            }
            while (v403);
            *(_DWORD *)(v29 + 12) = v401;
            v407 = (unint64_t *)v264;
            do
            {
              v408 = *v407;
              *v407 = 0;
              if (v408)
                WTF::fastFree(v408, v215, v216, v217, v218, v219, v220, v221);
              ++v407;
              v402 -= 8;
            }
            while (v402);
          }
          if (v264)
            WTF::fastFree(v264, v215, v216, v217, v218, v219, v220, v221);
          v273 = (unsigned int *)v674;
          v674 = 0;
          if ((v263 & 1) != 0)
          {
            if (v273)
            {
              do
              {
                v274 = __ldaxr(v273);
                v275 = --v274 == 0;
              }
              while (__stlxr(v274, v273));
              goto LABEL_345;
            }
          }
          else if (v273)
          {
            do
            {
              v369 = __ldaxr(v273);
              v275 = --v369 == 0;
            }
            while (__stlxr(v369, v273));
LABEL_345:
            if (v275)
            {
              atomic_store(1u, v273);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v273, (uint64_t)v215, v216, v217, v218, v219, v220, v221);
              WTF::fastFree(v608, v609, v610, v611, v612, v613, v614, v615);
            }
          }
          v370 = v669 & 0x3FFFFFC0 | (v704 << 30) | *(_DWORD *)(v29 + 84) & 0x80000000;
          *(_DWORD *)(v29 + 80) = v251;
          *(_DWORD *)(v29 + 84) = v370;
          __dmb(0xAu);
          if ((_DWORD)v666)
            v371 = 0x80000000;
          else
            v371 = 0;
          *(_DWORD *)(v29 + 84) = v371 & 0x80000000 | *(_DWORD *)(v29 + 84) & 0x7FFFFFFF;
          goto LABEL_351;
        }
        v575 = HIBYTE(dword_1ECF4C28A) != 0;
      }
      JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)38072>(&v673, (uint64_t)&v769, v575);
      v263 = 1;
      v29 = v671;
      goto LABEL_253;
    }
    v29 = v671;
    if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    {
      v637 = 1;
    }
    else
    {
      if (!HIBYTE(dword_1ECF4C28A) && !byte_1ECF4C289)
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)64376>(&v687, (uint64_t)&v769);
LABEL_463:
        v455 = (JSC::ExecutableMemoryHandle *)*((_QWORD *)&v728 + 1);
        v673 = (char **)v728;
        v728 = 0uLL;
        v674 = v455;
        JSC::Yarr::YarrCodeBlock::set16BitCodeMatchOnly(v29, &v687, (uint64_t)&v673, v450, v451, v452, v453, v454);
        WTF::Vector<WTF::UniqueRef<WTF::BitSet<128ul,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v673, v456, v457, v458, v459, v460, v461, v462);
        JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v687, v463, v464, v465, v466, v467, v468, v469);
        v470 = v669 & 0x3FFFFFC0 | (v704 << 30) | *(_DWORD *)(v29 + 92) & 0x80000000;
        *(_DWORD *)(v29 + 88) = v251;
        *(_DWORD *)(v29 + 92) = v470;
        __dmb(0xAu);
        if ((_DWORD)v666)
          v471 = 0x80000000;
        else
          v471 = 0;
        *(_DWORD *)(v29 + 92) = v471 & 0x80000000 | *(_DWORD *)(v29 + 92) & 0x7FFFFFFF;
        goto LABEL_351;
      }
      v637 = HIBYTE(dword_1ECF4C28A) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)50227>(&v687, (uint64_t)&v769, v637);
    v29 = v671;
    goto LABEL_463;
  }
  v29 = v671;
  *(_WORD *)(v671 + 105) = 264;
LABEL_353:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v769, v215, v216, v217, v218, v219, v220, v221);
  v372 = v675;
  if (v678 != (_BYTE *)v675 && v675)
  {
    v675 = 0;
    v676 = 0;
    WTF::fastFree((unint64_t)v372, v16, v17, v18, v19, v20, v21, v22);
  }
LABEL_356:
  v373 = (WTF *)JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::~YarrGenerator((uint64_t)&v690, v16, v17, v18, v19, v20, v21, v22);
  v381 = *(unsigned __int16 *)(v29 + 105);
  if (v381 >= 0x100 && BYTE4(qword_1ECF4C6B8))
  {
    v662 = WTF::dataFile(v373);
    JSC::Yarr::YarrPattern::dumpPatternString(v670, v662, v667, v668);
    WTF::dataLog<char [16]>(" : ");
    JSC::Yarr::dumpCompileFailure(v381);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v745, v374, v375, v376, v377, v378, v379, v380);
}

uint64_t JSC::Yarr::dumpCompileFailure(uint64_t result)
{
  switch((int)result)
  {
    case 0:
      result = WTF::dataLog<char [16]>("Can't JIT a pattern decoding surrogate pairs\n");
      break;
    case 1:
      result = WTF::dataLog<char [52]>();
      break;
    case 2:
      result = WTF::dataLog<char [51]>();
      break;
    case 3:
      result = WTF::dataLog<char [44]>();
      break;
    case 4:
      result = WTF::dataLog<char [87]>();
      break;
    case 5:
      result = WTF::dataLog<char [58]>();
      break;
    case 6:
      result = WTF::dataLog<char [70]>();
      break;
    case 7:
      result = WTF::dataLog<char [16]>("Can't JIT pattern due to parentheses nested too deeply\n");
      break;
    case 8:
      result = WTF::dataLog<char [16]>("Can't JIT because of failure of allocation of executable memory\n");
      break;
    case 9:
      result = WTF::dataLog<char [16]>("Can't JIT because pattern exceeds string length limits\n");
      break;
    default:
      return result;
  }
  return result;
}

void JSC::Yarr::jitCompileInlinedTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  BOOL v31;
  int v32;
  char v33;
  int v34;
  char v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE v59[176];
  _QWORD v60[6];
  uint64_t v61;
  unsigned __int16 *v62;
  char *v63;
  uint64_t v64;
  char v65;
  __int16 v66;
  char v67;
  char v68;
  BOOL v69;
  _BOOL4 v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[5];
  _BYTE v77[40];
  int v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD v81[5];
  _QWORD v82[5];
  _QWORD v83[1922];
  _OWORD v84[3];
  _BYTE *v85;
  uint64_t v86;
  _BYTE v87[32];
  _QWORD *v88;
  uint64_t v89;
  _QWORD v90[4];
  _QWORD v91[5];
  int v92;
  char v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  BOOL v104;
  uint64_t v105;

  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = v9;
  v105 = *MEMORY[0x1E0C80C00];
  LOBYTE(v52) = 0;
  v53 = v23;
  v55 = 0;
  v54 = 0;
  v57 = v59;
  v58 = 4;
  memset(&v59[32], 0, 144);
  if (JSC::Yarr::YarrPattern::compile(&v52, v20, v18))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v11, -2, *(char *)(a9 + 7), v25, v26, v27, v28, v29);
  }
  else
  {
    v31 = 0;
    v60[0] = &off_1E35BA080;
    v60[1] = v11;
    v60[2] = v15;
    v60[3] = 0;
    v60[4] = v13;
    v60[5] = a9;
    v61 = 0;
    v62 = &v52;
    v63 = v21;
    v64 = v19;
    v65 = v17;
    v66 = 2;
    v32 = v53 & 0x60;
    v67 = 0;
    if (v17 == 1)
      v31 = v32 != 0;
    v33 = v68 & 0xF8 | v31;
    if ((v53 & 0x60) != 0)
      v34 = (v53 >> 1) & 2;
    else
      LOBYTE(v34) = 0;
    v35 = v33 | v34;
    if (v17 == 1)
      v36 = v53 & (4 * v52) & 4;
    else
      v36 = 0;
    v68 = v35 | v36;
    v70 = v32 != 0;
    v71 = 0;
    v37 = *(unsigned int *)(v56 + 28);
    v72 = 0u;
    v73 = v37;
    v74 = v76;
    v75 = 2;
    v76[3] = v77;
    v76[4] = 2;
    *(_OWORD *)&v77[24] = 0u;
    v78 = -1;
    v79 = v81;
    v80 = 2;
    v81[3] = v82;
    v81[4] = 2;
    v82[3] = v83;
    v30.n128_u64[0] = 128;
    v82[4] = 128;
    v83[1920] = v84;
    v83[1921] = 4;
    v84[2] = 0u;
    v85 = v87;
    v86 = 2;
    v87[24] = 0;
    v88 = v90;
    v89 = 4;
    v90[2] = v91;
    v90[3] = 4;
    v91[4] = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v101 = 0u;
    v102 = 0u;
    v103 = 0;
    v104 = v17 == 0;
    v69 = (v52 & 1) != 0;
    v61 = v22;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline((uint64_t)v60, v13, v24, v25, v26, v27, v28, v29, (__n128)0, COERCE_DOUBLE(2), v30);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::~YarrGenerator((uint64_t)v60, v38, v39, v40, v41, v42, v43, v44);
  }
  JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)&v52, v45, v46, v47, v48, v49, v50, v51);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, double a10, __n128 a11)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v14;
  unint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  WTF *v28;
  int v29;
  int v30;
  uint64_t v31;
  WTF *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  WTF *v45;
  int v46;
  int v47;
  uint64_t v48;
  WTF *v49;
  uint64_t *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  WTF *v66;
  int v67;
  int v68;
  uint64_t v69;
  WTF *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  WTF *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  _BYTE *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  int j;
  unint64_t v131;
  uint64_t v132;
  unsigned int **v133;
  uint64_t v134;
  unsigned int *v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  BOOL v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  int v171;
  _DWORD *v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int8x8_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int *v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int *v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unint64_t v264;
  unint64_t v265;
  _DWORD *v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  WTF *v291;
  int v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  WTF *v297;
  unsigned int *v299;
  uint64_t v300;
  uint64_t v301;
  __n128 v302;
  __int128 v303;
  int v304;
  _DWORD *v305;
  _DWORD *v306;
  _DWORD *v307;
  WTF *v308;
  int v309;
  int v310;
  uint64_t v311;
  WTF *v312;
  unint64_t v313;
  unsigned int v314;
  char v315;
  const char *v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  WTF *v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  BOOL v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  BOOL v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  WTF *v336;
  WTF *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  _DWORD *v352;
  _DWORD *v353;
  WTF *v354;
  int v355;
  int v356;
  uint64_t v357;
  WTF *v358;
  uint64_t v359;
  uint64_t *v360;
  _DWORD *v361;
  _DWORD *v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  const void *v367;
  void *v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _DWORD *v394;
  int v395;
  unsigned int v396;
  uint64_t v397;
  int i;
  unsigned int v399;
  char v400;
  uint64_t v401;
  int *v402;
  int *v403;
  int v404;
  uint64_t v405;
  _DWORD *v406;
  _DWORD *v407;
  WTF *v408;
  uint64_t *v409;
  unsigned int v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  _DWORD *v414;
  _DWORD *v415;
  _DWORD *v416;
  _DWORD *v417;
  int v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unsigned int v433;
  _QWORD *v434;
  uint64_t v435;
  _DWORD *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  _DWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  _DWORD *v467;
  unsigned int v468;
  unsigned int v469;
  unint64_t v470;
  _DWORD *v471;
  _QWORD *v472;
  _DWORD *v473;
  uint64_t v474;
  _DWORD *v475;
  uint64_t v476;
  WTF *v477;
  _DWORD *v478;
  uint64_t v479;
  _DWORD *v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t *v483;
  unint64_t v484;
  int v486;
  uint64_t v487;
  char *v488;
  uint64_t v489;
  char v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _DWORD *v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  const void *v505;
  void *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  _DWORD *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  char v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unsigned int *v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  char *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  char v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  _DWORD *v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int8x8_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  _QWORD *v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  WTF *v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  unsigned int v732;
  unsigned int v733;
  uint64_t v734;
  uint64_t v735;
  int v736;
  uint64_t v737;
  char v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  int8x8_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unsigned int v755;
  unsigned int v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unsigned int *v800;
  unint64_t v801;
  uint64_t v802;
  char v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unsigned int *v812;
  unsigned int v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  void *v846;
  WTF *v847;
  uint64_t v848;
  uint64_t v849;
  int v850;
  _QWORD *v851;
  uint64_t v852;
  _BYTE *v853;
  uint64_t v854;
  unsigned int *v855;
  unsigned int *v856;
  __n128 v857;
  _BYTE v858[12];
  unsigned int v859;
  _BYTE v860[32];
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  char v866;
  __int16 v867;
  char v868;
  unsigned int v869[3];
  int v870;
  WTF *v871[2];
  __int128 v872;
  char v873;
  int v874;
  WTF *v875;
  uint64_t v876;
  _DWORD v877[6];
  _BYTE v878[12];
  char v879;
  _BYTE v880[12];
  uint64_t v881;
  unsigned int v882;
  unsigned int v883;
  _DWORD v884[3];
  unsigned int v885;
  int v886;
  uint64_t v887;
  unsigned int v888;
  unsigned int v889;
  int v890;
  unsigned int v891;
  int v892;
  uint64_t v893;
  unsigned int v894;
  unsigned int v895;
  _DWORD v896[2];
  char v897;
  __int16 v898;
  char v899;
  unsigned int v900;
  int v901;
  unsigned int v902;
  int v903[3];
  int v904;
  unsigned int v905;
  unsigned int v906;
  unsigned int v907;
  unsigned int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  unsigned int v913[3];

  v11 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198E6FEB4);
  }
  v12 = a2;
  v853 = (_BYTE *)(a1 + 15784);
  v14 = *(unsigned int **)(v11 + 16);
  v15 = *(unint64_t **)(a1 + 48);
  v16 = &qword_199123000;
  v856 = a2;
  if (v15)
    v17 = *v15;
  else
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 93104);
  if ((unint64_t)&v849 < v17)
  {
    *(_WORD *)(a1 + 82) = 263;
    goto LABEL_50;
  }
  v18 = v14[3];
  if (!(_DWORD)v18)
  {
    v18 = 0;
    goto LABEL_37;
  }
  if ((*(_BYTE *)(**(_QWORD **)v14 + 37) & 1) == 0)
  {
LABEL_37:
    v34 = 0;
    goto LABEL_40;
  }
  v19 = (uint64_t *)(a1 + 304);
  v873 = 0;
  v874 = -1;
  v875 = (WTF *)v877;
  v876 = 2;
  *(_QWORD *)v878 = 0xFFFFFFFFLL;
  a9.n128_u64[0] = 4278193985;
  v857 = a9;
  *(_DWORD *)&v878[8] = -16773311;
  v879 = 0;
  *(_QWORD *)v880 = 0;
  *(_DWORD *)&v880[8] = -1;
  v881 = 0;
  v20 = *(_DWORD *)(a1 + 316);
  if (v20 == *(_DWORD *)(a1 + 312))
  {
    a9.n128_f64[0] = WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>(a1 + 304, (unint64_t)v871, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v21 = *v19;
    v22 = *v19 + 120 * v20;
    a9 = *(__n128 *)v871;
    v23 = v872;
    *(_BYTE *)(v22 + 32) = v873;
    *(__n128 *)v22 = a9;
    *(_OWORD *)(v22 + 16) = v23;
    v24 = v874;
    *(_QWORD *)(v22 + 48) = 2;
    v25 = (_DWORD *)(v22 + 48);
    *(v25 - 3) = v24;
    v26 = v25 + 2;
    *((_QWORD *)v25 - 1) = v25 + 2;
    v27 = v25 + 1;
    v28 = v875;
    if (v875 == (WTF *)v877)
    {
      if (HIDWORD(v876))
      {
        v53 = &v877[3 * HIDWORD(v876)];
        v54 = v877;
        do
        {
          *v26 = *v54;
          *(_QWORD *)(v26 + 1) = *(_QWORD *)(v54 + 1);
          v54 += 3;
          v26 += 3;
        }
        while (v54 != v53);
      }
    }
    else
    {
      v875 = (WTF *)v877;
      *((_QWORD *)v25 - 1) = v28;
      v29 = v876;
      LODWORD(v876) = 2;
      *v25 = v29;
    }
    v30 = HIDWORD(v876);
    HIDWORD(v876) = 0;
    *v27 = v30;
    v31 = v21 + 120 * v20;
    *(_DWORD *)(v31 + 80) = *(_DWORD *)v878;
    *(_QWORD *)(v31 + 84) = *(_QWORD *)&v878[4];
    *(_BYTE *)(v31 + 92) = v879;
    *(_DWORD *)(v31 + 96) = *(_DWORD *)v880;
    a9.n128_u64[0] = *(_QWORD *)&v880[4];
    *(_QWORD *)(v31 + 100) = *(_QWORD *)&v880[4];
    *(_QWORD *)(v31 + 112) = v881;
    ++*(_DWORD *)(a1 + 316);
  }
  v32 = v875;
  if (v877 != (_DWORD *)v875 && v875)
  {
    v875 = 0;
    LODWORD(v876) = 0;
    WTF::fastFree((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
  }
  v33 = *(unsigned int *)(a1 + 316);
  if (!(_DWORD)v33)
  {
    __break(0xC471u);
    JUMPOUT(0x198E704E0);
  }
  v34 = 0;
  v35 = *v19;
  *(_QWORD *)(*v19 + 120 * v33 - 112) = -1;
  v18 = v14[3];
  do
  {
    if (v34 >= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x198E704E8);
    }
    v36 = v33 - 1;
    v37 = *(_QWORD *)(*(_QWORD *)v14 + 8 * v34);
    v38 = *(_DWORD *)(v37 + 24);
    *(_DWORD *)(v35 + 120 * v36 + 100) = v38;
    *(_DWORD *)v858 = v38;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCompileAlternative(a1, (unsigned int *)v858, v37, a4, a5, a6, a7, a8, a9, *(double *)&v23, a11);
    v39 = *(unsigned int *)(a1 + 316);
    v873 = 1;
    v874 = -1;
    v875 = (WTF *)v877;
    v876 = 2;
    *(_QWORD *)v878 = 0xFFFFFFFFLL;
    *(_DWORD *)&v878[8] = v857.n128_u32[0];
    v879 = 0;
    *(_QWORD *)v880 = 0;
    *(_DWORD *)&v880[8] = -1;
    v881 = 0;
    if (v39 == *(_DWORD *)(a1 + 312))
    {
      a9.n128_f64[0] = WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>(a1 + 304, (unint64_t)v871, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v40 = *v19;
      v41 = *v19 + 120 * v39;
      a9 = *(__n128 *)v871;
      v23 = v872;
      *(_BYTE *)(v41 + 32) = v873;
      *(__n128 *)v41 = a9;
      *(_OWORD *)(v41 + 16) = v23;
      v42 = v874;
      *(_QWORD *)(v41 + 48) = 2;
      v43 = (_DWORD *)(v41 + 48);
      *(v43 - 3) = v42;
      v44 = v43 + 2;
      *((_QWORD *)v43 - 1) = v43 + 2;
      v45 = v875;
      if (v875 == (WTF *)v877)
      {
        if (HIDWORD(v876))
        {
          v51 = &v877[3 * HIDWORD(v876)];
          v52 = v877;
          do
          {
            *v44 = *v52;
            *(_QWORD *)(v44 + 1) = *(_QWORD *)(v52 + 1);
            v52 += 3;
            v44 += 3;
          }
          while (v52 != v51);
        }
      }
      else
      {
        v875 = (WTF *)v877;
        *((_QWORD *)v43 - 1) = v45;
        v46 = v876;
        LODWORD(v876) = 2;
        *v43 = v46;
      }
      v47 = HIDWORD(v876);
      HIDWORD(v876) = 0;
      v43[1] = v47;
      v48 = v40 + 120 * v39;
      *(_DWORD *)(v48 + 80) = *(_DWORD *)v878;
      *(_QWORD *)(v48 + 84) = *(_QWORD *)&v878[4];
      *(_BYTE *)(v48 + 92) = v879;
      *(_DWORD *)(v48 + 96) = *(_DWORD *)v880;
      a9.n128_u64[0] = *(_QWORD *)&v880[4];
      *(_QWORD *)(v48 + 100) = *(_QWORD *)&v880[4];
      *(_QWORD *)(v48 + 112) = v881;
      ++*(_DWORD *)(a1 + 316);
    }
    v49 = v875;
    if (v877 != (_DWORD *)v875 && v875)
    {
      v875 = 0;
      LODWORD(v876) = 0;
      WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
    }
    v33 = *(unsigned int *)(a1 + 316);
    if (v36 >= v33)
    {
      __break(0xC471u);
      JUMPOUT(0x198E704F0);
    }
    if (v33 <= v39)
    {
      __break(0xC471u);
      JUMPOUT(0x198E704F8);
    }
    v35 = *v19;
    v50 = (uint64_t *)(*v19 + 120 * v36);
    *v50 = v37;
    v50[2] = v39;
    *(_QWORD *)(v35 + 120 * v39 + 8) = v36;
    ++v34;
    v18 = v14[3];
    v12 = v856;
  }
  while (v34 < v18 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v14 + 8 * v34) + 37) & 1) != 0);
  v55 = v35 + 120 * v33;
  *(_BYTE *)(v55 - 88) = 2;
  *(_QWORD *)(v55 - 120) = 0;
  *(_QWORD *)(v55 - 104) = -1;
  *(_DWORD *)(v55 - 20) = 0;
  v16 = &qword_199123000;
LABEL_40:
  v56 = (uint64_t *)(a1 + 304);
  if (v34 == v18)
  {
    v873 = 18;
    v874 = -1;
    v875 = (WTF *)v877;
    v876 = 2;
    *(_QWORD *)v878 = 0xFFFFFFFFLL;
    *(_DWORD *)&v878[8] = -16773311;
    v879 = 0;
    *(_QWORD *)v880 = 0;
    *(_DWORD *)&v880[8] = -1;
    v881 = 0;
    v57 = *(_DWORD *)(a1 + 316);
    if (v57 == *(_DWORD *)(a1 + 312))
    {
      WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>(a1 + 304, (unint64_t)v871, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v58 = *v56;
      v59 = *v56 + 120 * v57;
      v60 = *(_OWORD *)v871;
      v61 = v872;
      *(_BYTE *)(v59 + 32) = v873;
      *(_OWORD *)v59 = v60;
      *(_OWORD *)(v59 + 16) = v61;
      v62 = v874;
      *(_QWORD *)(v59 + 48) = 2;
      v63 = (_DWORD *)(v59 + 48);
      *(v63 - 3) = v62;
      v64 = v63 + 2;
      *((_QWORD *)v63 - 1) = v63 + 2;
      v65 = v63 + 1;
      v66 = v875;
      if (v875 == (WTF *)v877)
      {
        if (HIDWORD(v876))
        {
          v414 = &v877[3 * HIDWORD(v876)];
          v415 = v877;
          do
          {
            *v64 = *v415;
            *(_QWORD *)(v64 + 1) = *(_QWORD *)(v415 + 1);
            v415 += 3;
            v64 += 3;
          }
          while (v415 != v414);
        }
      }
      else
      {
        v875 = (WTF *)v877;
        *((_QWORD *)v63 - 1) = v66;
        v67 = v876;
        LODWORD(v876) = 2;
        *v63 = v67;
      }
      v68 = HIDWORD(v876);
      HIDWORD(v876) = 0;
      *v65 = v68;
      v69 = v58 + 120 * v57;
      *(_DWORD *)(v69 + 80) = *(_DWORD *)v878;
      *(_QWORD *)(v69 + 84) = *(_QWORD *)&v878[4];
      *(_BYTE *)(v69 + 92) = v879;
      *(_DWORD *)(v69 + 96) = *(_DWORD *)v880;
      *(_QWORD *)(v69 + 100) = *(_QWORD *)&v880[4];
      *(_QWORD *)(v69 + 112) = v881;
      ++*(_DWORD *)(a1 + 316);
    }
    v70 = v875;
    if (v877 != (_DWORD *)v875 && v875)
    {
      v875 = 0;
      LODWORD(v876) = 0;
      WTF::fastFree((unint64_t)v70, a2, a3, a4, a5, a6, a7, a8);
    }
    v71 = *(_DWORD *)(a1 + 316);
    if (!v71)
    {
      __break(0xC471u);
      JUMPOUT(0x198E704D8);
    }
    *(_DWORD *)(*v56 + 120 * v71 - 20) = 0;
  }
  else
  {
    v299 = (unsigned int *)*(unsigned int *)(a1 + 316);
    v873 = 0;
    v874 = -1;
    v875 = (WTF *)v877;
    v876 = 2;
    *(_QWORD *)v878 = 0xFFFFFFFFLL;
    a9.n128_u64[0] = 4278193985;
    v857 = a9;
    *(_DWORD *)&v878[8] = -16773311;
    v879 = 0;
    *(_QWORD *)v880 = 0;
    *(_DWORD *)&v880[8] = -1;
    v881 = 0;
    if ((_DWORD)v299 == *(_DWORD *)(a1 + 312))
    {
      v302.n128_f64[0] = WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>(a1 + 304, (unint64_t)v871, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v300 = *v56;
      v301 = *v56 + 120 * v299;
      v302 = *(__n128 *)v871;
      v303 = v872;
      *(_BYTE *)(v301 + 32) = v873;
      *(__n128 *)v301 = v302;
      *(_OWORD *)(v301 + 16) = v303;
      v304 = v874;
      *(_QWORD *)(v301 + 48) = 2;
      v305 = (_DWORD *)(v301 + 48);
      *(v305 - 3) = v304;
      v306 = v305 + 2;
      *((_QWORD *)v305 - 1) = v305 + 2;
      v307 = v305 + 1;
      v308 = v875;
      if (v875 == (WTF *)v877)
      {
        if (HIDWORD(v876))
        {
          v416 = &v877[3 * HIDWORD(v876)];
          v417 = v877;
          do
          {
            *v306 = *v417;
            *(_QWORD *)(v306 + 1) = *(_QWORD *)(v417 + 1);
            v417 += 3;
            v306 += 3;
          }
          while (v417 != v416);
        }
      }
      else
      {
        v875 = (WTF *)v877;
        *((_QWORD *)v305 - 1) = v308;
        v309 = v876;
        LODWORD(v876) = 2;
        *v305 = v309;
      }
      v310 = HIDWORD(v876);
      HIDWORD(v876) = 0;
      *v307 = v310;
      v311 = v300 + 120 * v299;
      *(_DWORD *)(v311 + 80) = *(_DWORD *)v878;
      *(_QWORD *)(v311 + 84) = *(_QWORD *)&v878[4];
      *(_BYTE *)(v311 + 92) = v879;
      *(_DWORD *)(v311 + 96) = *(_DWORD *)v880;
      v302.n128_u64[0] = *(_QWORD *)&v880[4];
      *(_QWORD *)(v311 + 100) = *(_QWORD *)&v880[4];
      *(_QWORD *)(v311 + 112) = v881;
      ++*(_DWORD *)(a1 + 316);
    }
    v312 = v875;
    if (v877 != (_DWORD *)v875 && v875)
    {
      v875 = 0;
      LODWORD(v876) = 0;
      WTF::fastFree((unint64_t)v312, a2, a3, a4, a5, a6, a7, a8);
    }
    v313 = *(unsigned int *)(a1 + 316);
    if (!(_DWORD)v313)
    {
      __break(0xC471u);
      JUMPOUT(0x198E70500);
    }
    *(_QWORD *)(*v56 + 120 * v313 - 112) = -1;
    v314 = v14[6];
    v855 = v299;
    if (v314 && (*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 0xE0) == 0)
    {
      v315 = *(_BYTE *)(a1 + 80);
      v316 = " ";
      if (v314 <= 0x20)
        v316 = (const char *)(v14 + 6);
      v317 = *(unsigned int *)v316;
      v320 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v320 = 0;
      *(_QWORD *)(v320 + 8) = 0;
      *(_DWORD *)(v320 + 12) = v317;
      if ((_DWORD)v317)
      {
        if (v317 >= 0x4924925)
        {
          __break(0xC471u);
          JUMPOUT(0x198E70508);
        }
        v321 = (WTF *)(56 * v317);
        v322 = WTF::fastMalloc(v321);
        *(_DWORD *)(v320 + 8) = v321 / 0x38;
        *(_QWORD *)v320 = v322;
        v323 = *(_DWORD *)(v320 + 12);
        if (v323)
        {
          v324 = v322 + 56 * v323;
          v302 = 0uLL;
          do
          {
            *(_QWORD *)(v322 + 48) = 0;
            *(_OWORD *)(v322 + 32) = 0uLL;
            *(_OWORD *)v322 = 0uLL;
            *(_OWORD *)(v322 + 16) = 0uLL;
            *(_QWORD *)(v322 + 16) = v322 + 32;
            *(_DWORD *)(v322 + 24) = 2;
            *(_BYTE *)(v322 + 40) = 1;
            v322 += 56;
          }
          while (v322 != v324);
        }
      }
      *(_BYTE *)(v320 + 16) = v315;
      v871[0] = (WTF *)v320;
      if (v34 < v14[3])
      {
        v325 = v34;
        do
        {
          v326 = *(_QWORD *)(*(_QWORD *)v14 + 8 * v325);
          if (*(_DWORD *)(v326 + 12))
            v327 = *(_DWORD *)(v320 + 12) == 0;
          else
            v327 = 1;
          if (!v327)
          {
            v328 = 0;
            v329 = 0;
            v330 = 1;
            while (1)
            {
              v331 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::collectBoyerMooreInfoFromTerm(a1, (unsigned __int8 *)(*(_QWORD *)v326 + v328), v329, v320, a5, a6, a7, a8);
              if (!HIDWORD(v331))
                break;
              v147 = v330++ >= *(unsigned int *)(v326 + 12);
              v328 += 48;
              v332 = !v147 && *(_DWORD *)(v320 + 12) > v331;
              v329 = v331;
              if (!v332)
                goto LABEL_233;
            }
            JSC::Yarr::BoyerMooreInfo::shortenLength(v320, v329, v319, a4, a5, a6, a7, a8);
          }
LABEL_233:
          ++v325;
        }
        while (v325 < v14[3]);
      }
      if (*(_DWORD *)(v320 + 12))
      {
        v333 = *(_DWORD *)(a1 + 316);
        if (!v333)
        {
          __break(0xC471u);
          JUMPOUT(0x198E70510);
        }
        *(WTF **)(*(_QWORD *)(a1 + 304) + 120 * v333 - 8) = v871[0];
        v334 = *(unsigned int *)(a1 + 15692);
        if ((_DWORD)v334 == *(_DWORD *)(a1 + 15688))
        {
          WTF::Vector<WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>>(a1 + 15680, (unint64_t)v871);
        }
        else
        {
          v335 = *(_QWORD *)(a1 + 15680);
          v336 = v871[0];
          v871[0] = 0;
          *(_QWORD *)(v335 + 8 * v334) = v336;
          *(_DWORD *)(a1 + 15692) = v334 + 1;
        }
        *(_BYTE *)(a1 + 85) = 1;
        if (v853[120])
          JSC::Yarr::SubjectSampler::sample(a1 + 15912, *(_QWORD *)(a1 + 15888), *(_QWORD *)(a1 + 15896));
      }
      v337 = v871[0];
      v871[0] = 0;
      if (v337)
      {
        v338 = *((unsigned int *)v337 + 3);
        v339 = *(_QWORD *)v337;
        if ((_DWORD)v338)
        {
          v340 = 56 * v338;
          v341 = v339 + 32;
          do
          {
            v342 = *(_QWORD *)(v341 - 16);
            if (v341 != v342 && v342 != 0)
            {
              *(_QWORD *)(v341 - 16) = 0;
              *(_DWORD *)(v341 - 8) = 0;
              WTF::fastFree(v342, v318, v319, a4, a5, a6, a7, a8);
            }
            v341 += 56;
            v340 -= 56;
          }
          while (v340);
          v339 = *(_QWORD *)v337;
        }
        if (v339)
        {
          *(_QWORD *)v337 = 0;
          *((_DWORD *)v337 + 2) = 0;
          WTF::fastFree(v339, v318, v319, a4, a5, a6, a7, a8);
        }
        WTF::fastFree((unint64_t)v337, v318, v319, a4, a5, a6, a7, a8);
      }
      v313 = *(unsigned int *)(a1 + 316);
    }
    v344 = v14[3];
    do
    {
      if (v34 >= v344)
      {
        __break(0xC471u);
        JUMPOUT(0x198E704B8);
      }
      if (!v313)
      {
        __break(0xC471u);
        JUMPOUT(0x198E704C0);
      }
      v345 = *(_QWORD *)(*(_QWORD *)v14 + 8 * v34);
      v346 = v313 - 1;
      v347 = *(_DWORD *)(v345 + 24);
      *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v346 + 100) = v347;
      v903[0] = v347;
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCompileAlternative(a1, (unsigned int *)v903, v345, a4, a5, a6, a7, a8, v302, *(double *)&v303, a11);
      v348 = *(unsigned int *)(a1 + 316);
      v873 = 1;
      v874 = -1;
      v875 = (WTF *)v877;
      v876 = 2;
      *(_QWORD *)v878 = 0xFFFFFFFFLL;
      *(_DWORD *)&v878[8] = v857.n128_u32[0];
      v879 = 0;
      *(_QWORD *)v880 = 0;
      *(_DWORD *)&v880[8] = -1;
      v881 = 0;
      if (v348 == *(_DWORD *)(a1 + 312))
      {
        v302.n128_f64[0] = WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>(a1 + 304, (unint64_t)v871, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v349 = *v56;
        v350 = *v56 + 120 * v348;
        v302 = *(__n128 *)v871;
        v303 = v872;
        *(_BYTE *)(v350 + 32) = v873;
        *(__n128 *)v350 = v302;
        *(_OWORD *)(v350 + 16) = v303;
        v351 = v874;
        *(_QWORD *)(v350 + 48) = 2;
        v352 = (_DWORD *)(v350 + 48);
        *(v352 - 3) = v351;
        v353 = v352 + 2;
        *((_QWORD *)v352 - 1) = v352 + 2;
        v354 = v875;
        if (v875 == (WTF *)v877)
        {
          if (HIDWORD(v876))
          {
            v361 = &v877[3 * HIDWORD(v876)];
            v362 = v877;
            do
            {
              *v353 = *v362;
              *(_QWORD *)(v353 + 1) = *(_QWORD *)(v362 + 1);
              v362 += 3;
              v353 += 3;
            }
            while (v362 != v361);
          }
        }
        else
        {
          v875 = (WTF *)v877;
          *((_QWORD *)v352 - 1) = v354;
          v355 = v876;
          LODWORD(v876) = 2;
          *v352 = v355;
        }
        v356 = HIDWORD(v876);
        HIDWORD(v876) = 0;
        v352[1] = v356;
        v357 = v349 + 120 * v348;
        *(_DWORD *)(v357 + 80) = *(_DWORD *)v878;
        *(_QWORD *)(v357 + 84) = *(_QWORD *)&v878[4];
        *(_BYTE *)(v357 + 92) = v879;
        *(_DWORD *)(v357 + 96) = *(_DWORD *)v880;
        v302.n128_u64[0] = *(_QWORD *)&v880[4];
        *(_QWORD *)(v357 + 100) = *(_QWORD *)&v880[4];
        *(_QWORD *)(v357 + 112) = v881;
        ++*(_DWORD *)(a1 + 316);
      }
      v358 = v875;
      if (v877 != (_DWORD *)v875 && v875)
      {
        v875 = 0;
        LODWORD(v876) = 0;
        WTF::fastFree((unint64_t)v358, a2, a3, a4, a5, a6, a7, a8);
      }
      v313 = *(unsigned int *)(a1 + 316);
      if (v346 >= v313)
      {
        __break(0xC471u);
        JUMPOUT(0x198E704C8);
      }
      if (v313 <= v348)
      {
        __break(0xC471u);
        JUMPOUT(0x198E704D0);
      }
      v359 = *v56;
      v360 = (uint64_t *)(*v56 + 120 * v346);
      *v360 = v345;
      v360[2] = v348;
      *(_QWORD *)(v359 + 120 * v348 + 8) = v346;
      ++v34;
      v344 = v14[3];
    }
    while (v34 < v344);
    v363 = v359 + 120 * v313;
    *(_BYTE *)(v363 - 88) = 2;
    *(_QWORD *)(v363 - 120) = 0;
    v12 = v856;
    *(_QWORD *)(v363 - 104) = v855;
    *(_DWORD *)(v363 - 20) = 0;
    v16 = &qword_199123000;
  }
LABEL_50:
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198E6FED4);
  }
  if (*(_BYTE *)(a1 + 92))
  {
    __break(0xC471u);
    JUMPOUT(0x198E6FF00);
  }
  if (HIBYTE(word_1ECF4C286) | HIBYTE(dword_1ECF4C28A))
  {
    v540 = WTF::fastMalloc((WTF *)0x58);
    v871[0] = (WTF *)JSC::Yarr::YarrDisassembler::YarrDisassembler(v540, a1);
    std::unique_ptr<JSC::JITDisassembler>::operator=[abi:sn180100]((unint64_t *)(a1 + 15872), (unint64_t *)v871, v541, v542, v543, v544, v545, v546);
    std::unique_ptr<JSC::JITDisassembler>::~unique_ptr[abi:sn180100]((unint64_t *)v871, v547, v548, v549, v550, v551, v552, v553);
  }
  v72 = *(_QWORD *)(a1 + 15872);
  if (v72)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), (uint64_t)a2, a3, a4, a5, a6, a7, a8, &v870);
    *(_DWORD *)(v72 + 8) = v870;
  }
  if (*(_BYTE *)(a1 + 83))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), -2, *(char *)(*(_QWORD *)(a1 + 40) + 7), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 8), v554, v555, v556, v557, v558);
    return;
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), a5, a6, a7, a8, (uint64_t)v869);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateFailReturn(a1, v73, v74, v75, v76, v77, v78, v79);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v869, *(_QWORD *)(a1 + 8), v80, v81, v82, v83, v84, v85);
  v93 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 28);
  if (v93)
  {
    if (v93 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198E70520);
    }
    v369 = (8 * v93 + 63) & 0xFFFFFFC0;
    if (v369)
    {
      JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), -v369, 31, *(char *)(*(_QWORD *)(a1 + 40) + 9), v89, v90, v91, v92);
      v375 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v375 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E70238);
      }
      v376 = *(char *)(*(_QWORD *)(a1 + 40) + 9);
      v377 = *(_QWORD *)(a1 + 16) + 8;
      *(_DWORD *)(*(_QWORD *)(v375 + 264) + 208) &= ~*(_DWORD *)(v375 + 288);
      JSC::MacroAssemblerARM64::load64(v375, v377, *(char *)(v375 + 272), v370, v371, v372, v373, v374);
      JSC::MacroAssemblerARM64::branch64(v375, 9, 16, v376, v378, v379, v380, v381, (uint64_t)v871);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), -2, *(char *)(*(_QWORD *)(a1 + 40) + 7), v382, v383, v384, v385, v386);
      v394 = *(_DWORD **)(a1 + 8);
      v395 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 8) & 0x1F | 0x52800000;
      v396 = v394[50];
      if (v396 + 4 > v394[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v394 + 14), v387, v388, v389, v390, v391, v392, v393);
        v396 = v394[50];
      }
      *(_DWORD *)(*((_QWORD *)v394 + 7) + v396) = v395;
      v394[50] += 4;
      v397 = *(_QWORD *)(a1 + 8);
      for (i = *(_DWORD *)(v397 + 200); i < *(_DWORD *)(v397 + 52); *(_DWORD *)(v397 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v397 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v397 + 56), v387, v388, v389, v390, v391, v392, v393);
          i = *(_DWORD *)(v397 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v397 + 56) + i) = -721215457;
        i = *(_DWORD *)(v397 + 200) + 4;
      }
      v399 = i;
      if ((i + 4) > *(_DWORD *)(v397 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v397 + 56), v387, v388, v389, v390, v391, v392, v393);
        v399 = *(_DWORD *)(v397 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v397 + 56) + v399) = 335544320;
      *(_DWORD *)(v397 + 200) += 4;
      if (*(_BYTE *)(v397 + 328))
        v400 = 69;
      else
        v400 = 65;
      v864 = i;
      v865 = 0;
      v866 = v400;
      v867 = 15;
      v868 = -1;
      if (i != -1)
      {
        v401 = *(unsigned int *)(a1 + 276);
        if ((_DWORD)v401 == *(_DWORD *)(a1 + 272))
        {
          v402 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 264, (void *)(v401 + 1), (unint64_t)&v864, v389, v390, v391, v392, v393);
          v404 = *v402;
          v403 = v402 + 1;
          v405 = *(_QWORD *)(a1 + 264) + 12 * *(unsigned int *)(a1 + 276);
          *(_DWORD *)v405 = v404;
        }
        else
        {
          v403 = &v865;
          v405 = *(_QWORD *)(a1 + 264) + 12 * v401;
          *(_DWORD *)v405 = i;
        }
        *(_QWORD *)(v405 + 4) = *(_QWORD *)v403;
        ++*(_DWORD *)(a1 + 276);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v871, *(_QWORD *)(a1 + 8), v388, v389, v390, v391, v392, v393);
      v466 = *(char *)(*(_QWORD *)(a1 + 40) + 9);
      if (v466 != 31)
      {
        v467 = *(_DWORD **)(a1 + 8);
        v468 = (32 * v466) | 0x9100001F;
        v469 = v467[50];
        if (v469 + 4 > v467[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v467 + 14), v86, v87, v88, v89, v90, v91, v92);
          v469 = v467[50];
        }
        *(_DWORD *)(*((_QWORD *)v467 + 7) + v469) = v468;
        v467[50] += 4;
      }
    }
  }
  if (*(_BYTE *)(a1 + 92))
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xF4240, *(char *)(*(_QWORD *)(a1 + 40) + 13), v88, v89, v90, v91, v92);
  v94 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 81) == 1)
  {
    v559 = *(_DWORD *)(v94 + 4);
    if (v559 != -1)
    {
      v560 = 0;
      v561 = 0;
      do
      {
        JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 0xFFFFFFFF, v560 + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3), v88, v89, v90, v91, v92);
        ++v561;
        v94 = *(_QWORD *)(a1 + 56);
        v559 = *(_DWORD *)(v94 + 4);
        v560 += 0x800000000;
      }
      while (v561 < (v559 + 1));
    }
    v562 = (2 * v559 + 2);
    if (v562 < (int)v562 + *(_DWORD *)(v94 + 12))
    {
      v563 = v562 << 34;
      do
      {
        JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, v563 + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3), v88, v89, v90, v91, v92);
        ++v562;
        v94 = *(_QWORD *)(a1 + 56);
        v563 += 0x400000000;
      }
      while (v562 < (*(_DWORD *)(v94 + 12) + 2 * *(_DWORD *)(v94 + 4) + 2));
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(v94 + 16) + 32))
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, *(char *)(*(_QWORD *)(a1 + 40) + 1), v87, v88, v89, v90, v91, v92);
    v94 = *(_QWORD *)(a1 + 56);
  }
  if ((*(_BYTE *)v94 & 0x40) != 0)
    JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 12), v88, v89, v90, v91, v92);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generate(a1, v86, v87, v88, v89, v90, v91, v92);
  v102 = *(_QWORD *)(a1 + 15872);
  if (v102)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v95, (uint64_t)v96, v97, v98, v99, v100, v101, &v863);
    *(_DWORD *)(v102 + 48) = v863;
  }
  v103 = *(unsigned int *)(a1 + 316);
  v104 = (unsigned int *)(a1 + 15744);
  v857.n128_u64[0] = (unint64_t)&v872;
  v105 = (WTF *)v16[138];
  v851 = (_QWORD *)(a1 + 15792);
  while (2)
  {
    --v103;
    v106 = *(_QWORD *)(a1 + 15872);
    if (v106)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v95, (uint64_t)v96, v97, v98, v99, v100, v101, &v912);
      if (*(_DWORD *)(v106 + 44) <= v103)
      {
        __break(0xC471u);
        JUMPOUT(0x198E70408);
      }
      *(_DWORD *)(*(_QWORD *)(v106 + 32) + 4 * v103) = v912;
    }
    v107 = *(unsigned int *)(a1 + 316);
    if (v103 >= v107)
    {
      __break(0xC471u);
      JUMPOUT(0x198E703E8);
    }
    v108 = *(_QWORD *)(a1 + 304);
    v109 = (uint64_t *)(v108 + 120 * v103);
    v111 = v109 + 4;
    v110 = *((unsigned __int8 *)v109 + 32);
    switch(*((_BYTE *)v109 + 32))
    {
      case 0:
      case 1:
        v116 = *(_QWORD *)(v108 + 120 * v103 + 16);
        if (v116 >= v107)
        {
          __break(0xC471u);
          JUMPOUT(0x198E70478);
        }
        if (*(_BYTE *)(v108 + 120 * v116 + 32) != 2)
        {
          v911 = *(_DWORD *)(v108 + 120 * v116 + 36);
          v216 = *(_QWORD *)(a1 + 8);
          v217 = (unsigned int *)&v911;
          goto LABEL_137;
        }
        v117 = *v109;
        v118 = v103;
        if (*((_BYTE *)v109 + 32))
        {
          do
          {
            v118 = *(_QWORD *)(v108 + 120 * v118 + 8);
            if (v118 >= v107)
            {
              __break(0xC471u);
              JUMPOUT(0x198E70488);
            }
          }
          while (*(_BYTE *)(v108 + 120 * v118 + 32));
          v109 = (uint64_t *)(v108 + 120 * v118);
        }
        v119 = *(_QWORD *)(v108 + 120 * v116 + 16);
        v871[0] = (WTF *)v857.n128_u64[0];
        v871[1] = v105;
        v854 = v119;
        v855 = v104;
        if (v119 == -1)
        {
          v910 = *(_DWORD *)(v108 + 120 * v116 + 36);
          v120 = *(_QWORD *)(a1 + 8);
          v121 = (unsigned int *)&v910;
LABEL_89:
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::linkTo(v104, v121, v120, v97, v98, v99, v100, v101);
          goto LABEL_90;
        }
        v144 = *(_QWORD *)(a1 + 56);
        if ((*(_WORD *)(v144 + 2) & 0x80) != 0)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::takeBacktracksToJumpList((uint64_t)v104, v871, *(_QWORD *)(a1 + 8), v97, v98, v99, v100, v101);
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(v144 + 16) + 32))
          {
            v145 = *(_DWORD *)(v117 + 24);
            v146 = *(_DWORD *)(*v109 + 24);
            v147 = v145 >= v146;
            v148 = v145 - v146;
            if (v148 != 0 && v147 && v148 == 1)
            {
              v909 = *((_DWORD *)v109 + 9);
              v120 = *(_QWORD *)(a1 + 8);
              v121 = (unsigned int *)&v909;
              goto LABEL_89;
            }
          }
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 32))
          {
            v486 = *(_DWORD *)(v117 + 24);
            v487 = (v486 - 1);
            if (v486 == 1)
            {
              v488 = (char *)(*(_QWORD *)(a1 + 40) + 1);
            }
            else
            {
              if (v486)
                JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v487, *(char *)(*(_QWORD *)(a1 + 40) + 9), v125, v126, v127, v128);
              else
                JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 9), v125, v126, v127, v128);
              v488 = (char *)(*(_QWORD *)(a1 + 40) + 9);
            }
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, *v488, v487, v124, v125, v126, v127, v128);
          }
          v149 = *(_DWORD *)(v117 + 24);
          v150 = *(_DWORD *)(*v109 + 24);
          v151 = v149 - v150;
          if (v149 > v150)
          {
            v718 = v151 - 1;
            if (v151 != 1)
            {
              v719 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
              JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v719, v718, v719, v125, v126, v127, v128);
            }
            v720 = *(_QWORD *)(a1 + 8);
            v908 = *((_DWORD *)v109 + 9);
            JSC::MacroAssembler::jump(v720, &v908, v718, v124, v125, v126, v127, v128);
          }
          else
          {
            v152 = v150 - v149;
            if (v152 != -1)
            {
              v153 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
              JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v152 + 1, v153, v153, v125, v126, v127, v128);
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v154, v155, v156, v157, (uint64_t)v858);
              v907 = *((_DWORD *)v109 + 9);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v858, &v907, *(_QWORD *)(a1 + 8), v158, v159, v160, v161, v162);
            }
          }
        }
LABEL_90:
        v852 = v117;
        v129 = *(_DWORD **)(a1 + 8);
        for (j = v129[50]; j < v129[13]; v129[50] = j)
        {
          if ((j + 4) > v129[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v129 + 14), v122, v123, v124, v125, v126, v127, v128);
            j = v129[50];
          }
          *(_DWORD *)(*((_QWORD *)v129 + 7) + j) = -721215457;
          j = v129[50] + 4;
        }
        v850 = j;
        v129[52] = 0;
        v131 = v109[2];
        if (v131 >= *(unsigned int *)(a1 + 316))
        {
          __break(0xC471u);
          JUMPOUT(0x198E70480);
        }
        v132 = *(_QWORD *)(a1 + 304);
        if (*(_BYTE *)(v132 + 120 * v131 + 32) != 2)
        {
          v218 = v132 + 120 * v131;
          v219 = (uint64_t)v109;
          do
          {
            v849 = v218;
            v220 = *(unsigned int *)(v219 + 52);
            if ((_DWORD)v220)
            {
              v221 = 0;
              v222 = 0;
              v223 = *(_QWORD *)(a1 + 8);
              do
              {
                if (v222 >= *(unsigned int *)(v219 + 52))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E70400);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v219 + 40) + v221), v223, v123, v124, v125, v126, v127, v128);
                ++v222;
                v221 += 12;
              }
              while (v220 != v222);
            }
            v224 = *(_DWORD *)(*(_QWORD *)v219 + 24);
            v219 = v849;
            v225 = *(_DWORD *)(*(_QWORD *)v849 + 24);
            v226 = v224 - v225;
            if (v224 <= v225)
            {
              v12 = v856;
              if (v224 < v225)
              {
                v728 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v225 - v224, v728, v728, v125, v126, v127, v128);
              }
            }
            else
            {
              v227 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
              JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v227, v226, v227, v125, v126, v127, v128);
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v228, v229, v230, v231, (uint64_t)v858);
              v232 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
              JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v226, v232, v232, v233, v234, v235, v236);
              v237 = *(_QWORD *)(a1 + 8);
              v906 = *(_DWORD *)(v219 + 36);
              JSC::MacroAssembler::jump(v237, &v906, v238, v239, v240, v241, v242, v243);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v858, *(_QWORD *)(a1 + 8), v244, v245, v246, v247, v248, v249);
              v12 = v856;
            }
            v250 = *(_QWORD *)(v219 + 16);
            if (v250 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E70490);
            }
            v218 = *(_QWORD *)(a1 + 304) + 120 * v250;
          }
          while (*(_BYTE *)(v218 + 32) != 2);
        }
        v133 = (unsigned int **)(v108 + 120 * v103 + 40);
        if (v854 == -1)
        {
          v134 = v108 + 120 * v116;
          v137 = *(_DWORD *)(v134 + 36);
          v135 = (unsigned int *)(v134 + 36);
          v136 = v137;
          v138 = *(_QWORD *)(a1 + 8);
          v139 = *(unsigned int *)(v108 + 120 * v103 + 52);
          if ((_DWORD)v139)
          {
            v140 = *v133;
            v141 = 12 * v139;
            do
            {
              *(_DWORD *)v858 = v136;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v140, (unsigned int *)v858, v138, v124, v125, v126, v127, v128);
              v140 += 3;
              v141 -= 12;
            }
            while (v141);
            v138 = *(_QWORD *)(a1 + 8);
          }
          v104 = v855;
          v905 = *v135;
          JSC::MacroAssembler::jump(v138, &v905, v123, v124, v125, v126, v127, v128);
        }
        else
        {
          v163 = *(unsigned int *)(v108 + 120 * v103 + 52);
          if ((_DWORD)v163)
          {
            v164 = 0;
            v165 = 0;
            v166 = *(_QWORD *)(a1 + 8);
            do
            {
              if (v165 >= *(unsigned int *)(v108 + 120 * v103 + 52))
              {
                __break(0xC471u);
                JUMPOUT(0x198E703F0);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&(*v133)[v164], v166, v123, v124, v125, v126, v127, v128);
              ++v165;
              v164 += 3;
            }
            while (v163 != v165);
          }
          v167 = *(_QWORD *)(a1 + 56);
          if (*(_BYTE *)(*(_QWORD *)(v167 + 16) + 32))
          {
            v168 = 0;
            v104 = v855;
            v169 = v852;
          }
          else
          {
            v169 = v852;
            v104 = v855;
            if (*(_DWORD *)(v852 + 24) == 1)
            {
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, *(char *)(*(_QWORD *)(a1 + 40) + 1), v123, v124, v125, v126, v127, v128);
              v168 = 0;
              v167 = *(_QWORD *)(a1 + 56);
            }
            else
            {
              v168 = 1;
            }
          }
          if ((*(_WORD *)(v167 + 2) & 0x80) == 0)
          {
            v170 = *(_DWORD *)(v169 + 24);
            v171 = *(_DWORD *)(*(_QWORD *)(v167 + 16) + 24);
            if (v170 == v171)
            {
              v172 = *(_DWORD **)(a1 + 8);
              v173 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
              v174 = v172[50];
              if (v174 + 4 > v172[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v172 + 14), v122, v123, v124, v125, v126, v127, v128);
                v174 = v172[50];
              }
              *(_DWORD *)(*((_QWORD *)v172 + 7) + v174) = v173 | (32 * v173) | 0x11000400;
              v172[50] += 4;
            }
            else
            {
              v716 = ~v171;
              if (v170 + v716)
              {
                v717 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v717, (v170 + v716), v717, v125, v126, v127, v128);
              }
            }
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v125, v126, v127, v128, (uint64_t)v858);
            if (v168)
            {
              v538 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 24);
              if ((_DWORD)v538)
              {
                JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v538, *(char *)(*(_QWORD *)(a1 + 40) + 9), v177, v178, v179, v180);
                v539 = (char *)(*(_QWORD *)(a1 + 40) + 9);
              }
              else
              {
                v539 = (char *)(*(_QWORD *)(a1 + 40) + 1);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, *v539, v538, v176, v177, v178, v179, v180);
            }
            v181 = *(_DWORD *)(*v109 + 24);
            v182 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 24);
            if (v181 == v182)
            {
              v183 = *(_QWORD *)(a1 + 8);
              v904 = *((_DWORD *)v109 + 9);
              v184 = (unsigned int *)&v904;
            }
            else
            {
              v489 = *(_QWORD *)(a1 + 8);
              v490 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1);
              if (v181 <= v182)
                JSC::MacroAssemblerARM64::sub32(v489, v490, v182 - v181, v490, v177, v178, v179, v180);
              else
                JSC::MacroAssemblerARM64::add32(v489, v181 - v182, v490, v490, v177, v178, v179, v180);
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v491, v492, v493, v494, (uint64_t)v903);
              v902 = *((_DWORD *)v109 + 9);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v903, &v902, *(_QWORD *)(a1 + 8), v495, v496, v497, v498, v499);
              v183 = *(_QWORD *)(a1 + 8);
              v901 = v850;
              v184 = (unsigned int *)&v901;
            }
            JSC::MacroAssembler::jump(v183, v184, v175, v176, v177, v178, v179, v180);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v858, *(_QWORD *)(a1 + 8), v185, v186, v187, v188, v189, v190);
          }
          v191 = HIDWORD(v871[1]);
          if (HIDWORD(v871[1]))
          {
            v192 = 0;
            v193 = 0;
            v194 = *(_QWORD *)(a1 + 8);
            do
            {
              if (v193 >= HIDWORD(v871[1]))
              {
                __break(0xC471u);
                JUMPOUT(0x198E703F8);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v871[0] + v192), v194, v123, v124, v125, v126, v127, v128);
              ++v193;
              v192 += 12;
            }
            while (v191 != v193);
          }
          v195 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 28);
          if (v195)
          {
            if (v195 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198E704A8);
            }
            v418 = 8 * v195 + 63;
            v122 = v418 & 0xFFFFFFC0;
            if ((v418 & 0xFFFFFFC0) != 0)
              JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v122, 31, 31, v125, v126, v127, v128);
          }
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateFailReturn(a1, v122, v123, v124, v125, v126, v127, v128);
        }
        v142 = v871[0];
        if ((WTF *)v857.n128_u64[0] != v871[0] && v871[0] != 0)
        {
          v871[0] = 0;
          LODWORD(v871[1]) = 0;
          WTF::fastFree((unint64_t)v142, (void *)v95, (uint64_t)v96, v97, v98, v99, v100, v101);
        }
        goto LABEL_75;
      case 3:
      case 4:
      case 6:
      case 7:
        v251 = v108 + 120 * v103;
        v254 = *(_QWORD *)(v251 + 16);
        v252 = (unint64_t *)(v251 + 16);
        v253 = v254;
        if (v254 >= v107)
        {
          __break(0xC471u);
          JUMPOUT(0x198E70498);
        }
        v255 = v12;
        v256 = v104;
        v257 = v108 + 120 * v103;
        v854 = *(_QWORD *)(v257 + 8);
        v258 = *(_QWORD *)(v108 + 120 * v253 + 16);
        WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v256, (unsigned int *)(v257 + 40), (uint64_t)v96, v97, v98, v99, v100, v101);
        v260 = *(_DWORD *)(v257 + 96);
        v259 = (unsigned int *)(v257 + 96);
        if (v260)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v256, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          v507 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
          JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v507, *v259, v507, v508, v509, v510, v511);
          if (v258 == -1)
          {
            if (v854 == -1)
            {
              *v853 = 1;
            }
            else
            {
              v513 = (_DWORD *)(v108 + 120 * v253 + 40);
              v514 = *(_QWORD *)(a1 + 8);
              JSC::ARM64Assembler::label((_DWORD *)(v514 + 32), v512, (uint64_t)v96, v97, v98, v99, v100, v101, (int *)v871);
              JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v514 + 56), 335544320, v515, v516, v517, v518, v519, v520);
              if (*(_BYTE *)(v514 + 328))
                v527 = 69;
              else
                v527 = 65;
              v896[0] = v871[0];
              v896[1] = 0;
              v897 = v527;
              v898 = 15;
              v899 = -1;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v513, v896, v521, v522, v523, v524, v525, v526);
            }
          }
          else
          {
            v528 = *(_QWORD *)(a1 + 8);
            v900 = *(_DWORD *)(v108 + 120 * v253 + 36);
            JSC::MacroAssembler::jump(v528, &v900, (uint64_t)v96, v97, v98, v99, v100, v101);
          }
          v104 = v256;
        }
        else if (v258 == -1)
        {
          v104 = v256;
          if (v854 != -1)
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::takeBacktracksToJumpList((uint64_t)v256, (_DWORD *)(v108 + 120 * v253 + 40), *(_QWORD *)(a1 + 8), v97, v98, v99, v100, v101);
        }
        else
        {
          v895 = *(_DWORD *)(v108 + 120 * v253 + 36);
          v104 = v256;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::linkTo(v256, &v895, *(_QWORD *)(a1 + 8), v97, v98, v99, v100, v101);
        }
        v261 = v108 + 120 * v103;
        v263 = *(_DWORD *)(v261 + 80);
        v262 = v261 + 80;
        v95 = v263;
        v12 = v255;
        if (v263 != -1)
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::append((unint64_t)v104, v95, *(_QWORD *)(v262 + 4), v97, v98, v99, v100, v101);
        if (*v111 == 4)
        {
          v96 = (_DWORD *)(v108 + 120 * v103 + 104);
          v474 = *(unsigned int *)(a1 + 15804);
          if ((_DWORD)v474 == *(_DWORD *)(a1 + 15800))
          {
            v96 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v851, (void *)(v474 + 1), (unint64_t)v96, v97, v98, v99, v100, v101);
            v474 = *(unsigned int *)(a1 + 15804);
            v475 = (_DWORD *)(*(_QWORD *)(a1 + 15792) + 4 * v474);
          }
          else
          {
            v475 = (_DWORD *)(*v851 + 4 * v474);
          }
          *v475 = *v96;
          *(_DWORD *)(a1 + 15804) = v474 + 1;
        }
        if (v854 == -1)
        {
          v265 = *v252;
          v419 = *(unsigned int *)(a1 + 316);
          if (*v252 >= v419)
          {
            __break(0xC471u);
            JUMPOUT(0x198E704B0);
          }
          v420 = *(_QWORD *)(a1 + 304);
          while (1)
          {
            v264 = *(_QWORD *)(v420 + 120 * v265 + 16);
            if (v264 == -1)
              break;
            v265 = *(_QWORD *)(v420 + 120 * v265 + 16);
            if (v264 >= v419)
            {
              __break(0xC471u);
              JUMPOUT(0x198E704A0);
            }
          }
          v114 = v420 + 120 * v265;
          goto LABEL_74;
        }
        goto LABEL_75;
      case 5:
      case 8:
        v421 = v108 + 120 * v103;
        v423 = *(_DWORD *)(v421 + 80);
        v422 = v421 + 80;
        v95 = v423;
        v424 = *(_QWORD *)(v422 - 56);
        if (v423 != -1)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::append((unint64_t)v104, v95, *(_QWORD *)(v422 + 4), v97, v98, v99, v100, v101);
          v110 = *v111;
        }
        if (v110 == 5)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          v430 = *(_QWORD *)(a1 + 8);
          if (!*(_BYTE *)(v430 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x198E70390);
          }
          v431 = ((unint64_t)((8 * *(_DWORD *)(v424 + 44) + 8) >> 3) << 35) | 0x1F;
          *(_DWORD *)(*(_QWORD *)(v430 + 264) + 208) &= ~*(_DWORD *)(v430 + 288);
          JSC::MacroAssemblerARM64::load64(v430, v431, *(char *)(v430 + 272), v425, v426, v427, v428, v429);
          v433 = *(_DWORD *)(v430 + 200);
          if (v433 + 4 > *(_DWORD *)(v430 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v430 + 56), v95, v432, v97, v98, v99, v100, v101);
            v433 = *(_DWORD *)(v430 + 200);
          }
          v434 = (_QWORD *)(a1 + 15792);
          *(_DWORD *)(*(_QWORD *)(v430 + 56) + v433) = -702610944;
          *(_DWORD *)(v430 + 200) += 4;
          v96 = (_DWORD *)(v108 + 120 * v103 + 104);
          v435 = *(unsigned int *)(a1 + 15804);
          if ((_DWORD)v435 == *(_DWORD *)(a1 + 15800))
          {
            v96 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v434, (void *)(v435 + 1), (unint64_t)v96, v97, v98, v99, v100, v101);
            v435 = *(unsigned int *)(a1 + 15804);
            v436 = (_DWORD *)(*(_QWORD *)(a1 + 15792) + 4 * v435);
          }
          else
          {
            v436 = (_DWORD *)(*v434 + 4 * v435);
          }
          *v436 = *v96;
          *(_DWORD *)(a1 + 15804) = v435 + 1;
        }
        goto LABEL_75;
      case 9:
        v451 = *(_QWORD *)(v108 + 120 * v103 + 24);
        if ((*(_BYTE *)(v451 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1 || *(_BYTE *)(v451 + 2) == 1)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          if ((*(_BYTE *)(v451 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
          {
            v729 = *(unsigned int *)(v451 + 24);
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::clearSubpatternStart(a1, v729, (uint64_t)v96, v97, v98, v99, v100, v101);
            v730 = *(_QWORD *)(a1 + 56);
            if (*(_DWORD *)(v730 + 12))
            {
              if (*(_DWORD *)(v730 + 124) <= v729)
              {
                __break(0xC471u);
                JUMPOUT(0x198E70458);
              }
              v731 = *(_DWORD *)(*(_QWORD *)(v730 + 112) + 4 * v729);
              if (v731)
                JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((4 * v731 + 8 * *(_DWORD *)(v730 + 4) + 4) >> 2) << 34), v97, v98, v99, v100, v101);
            }
          }
          if (*(_BYTE *)(v451 + 2) == 1)
          {
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*(_QWORD *)(a1 + 8), 0xFFFFFFFF, *(unsigned int *)(v451 + 44), v97, v98, v99, v100, v101);
            if (*(_BYTE *)(a1 + 81) == 1)
            {
              v732 = *(_DWORD *)(v451 + 28);
              if (v732)
              {
                v733 = *(_DWORD *)(v451 + 24);
                if (v732 >= v733)
                {
                  v734 = v733 + (*(_BYTE *)(v451 + 1) & 1);
                  while (v734 <= v732)
                  {
                    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::clearSubpatternStart(a1, v734, v452, v453, v454, v455, v456, v457);
                    v735 = *(_QWORD *)(a1 + 56);
                    if (*(_DWORD *)(v735 + 12))
                    {
                      if (*(_DWORD *)(v735 + 124) <= v734)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E70460);
                      }
                      v736 = *(_DWORD *)(*(_QWORD *)(v735 + 112) + 4 * v734);
                      if (v736)
                        JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((4 * v736 + 8 * *(_DWORD *)(v735 + 4) + 4) >> 2) << 34), v453, v454, v455, v456, v457);
                    }
                    v734 = (v734 + 1);
                    v732 = *(_DWORD *)(v451 + 28);
                  }
                }
              }
            }
            v458 = *(_QWORD *)(v108 + 120 * v103 + 16);
            if (v458 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E70420);
            }
            v459 = *(_QWORD *)(a1 + 8);
            v894 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v458 + 36);
            JSC::MacroAssembler::jump(v459, &v894, v452, v453, v454, v455, v456, v457);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v108 + 120 * v103 + 40), *(_QWORD *)(a1 + 8), v460, v461, v462, v463, v464, v465);
          }
          *v853 = 1;
        }
        goto LABEL_75;
      case 0xA:
        v437 = *(_QWORD *)(v108 + 120 * v103 + 24);
        if (*(_BYTE *)(v437 + 2))
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, ((unint64_t)*(unsigned int *)(v437 + 44) << 35) | 0x1F, 0xFFFFFFFFLL, v438, v439, v440, v441, (uint64_t)v871);
          v448 = *(_QWORD *)(v108 + 120 * v103 + 8);
          v449 = *(unsigned int *)(a1 + 316);
          if (*(_BYTE *)(v437 + 2) == 1)
          {
            if (v448 >= v449)
            {
              __break(0xC471u);
              JUMPOUT(0x198E70418);
            }
            v450 = (_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v448 + 40);
            v892 = (int)v871[0];
            v893 = *(uint64_t *)((char *)v871 + 4);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v450, &v892, v442, v443, v444, v445, v446, v447);
          }
          else
          {
            if (v448 >= v449)
            {
              __break(0xC471u);
              JUMPOUT(0x198E70450);
            }
            v891 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v448 + 36);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v871, &v891, *(_QWORD *)(a1 + 8), v443, v444, v445, v446, v447);
          }
          *v853 = 1;
        }
        goto LABEL_73;
      case 0xB:
        v618 = *(_QWORD *)(v108 + 120 * v103 + 16);
        if (v618 >= v107)
        {
          __break(0xC471u);
          JUMPOUT(0x198E70438);
        }
        v890 = *(_DWORD *)(v108 + 120 * v618 + 36);
        v216 = *(_QWORD *)(a1 + 8);
        v217 = (unsigned int *)&v890;
LABEL_137:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::linkTo(v104, v217, v216, v97, v98, v99, v100, v101);
        goto LABEL_75;
      case 0xC:
LABEL_398:
        v114 = v108 + 120 * v103;
        goto LABEL_74;
      case 0xD:
        v619 = *(_QWORD *)(v108 + 120 * v103 + 24);
        if (*(_BYTE *)(v619 + 2))
        {
          v620 = *(_QWORD *)(v108 + 120 * v103 + 24);
          v621 = *(unsigned int *)(v619 + 44);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          v622 = *(_QWORD *)(a1 + 40);
          v623 = *(char *)(v622 + 9);
          v624 = *(char *)(v622 + 10);
          v625 = *(_QWORD *)(a1 + 8);
          v850 = 8 * v621;
          JSC::MacroAssemblerARM64::load64(v625, ((unint64_t)((8 * v621 + 24) >> 3) << 35) | 0x1F, v623, v626, v627, v628, v629, v630);
          v631 = *(char *)(*(_QWORD *)(a1 + 40) + 11);
          v632 = *(unsigned int *)(v620 + 24);
          v633 = *(unsigned int *)(v620 + 28);
          v852 = v620;
          LODWORD(v854) = v621;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::restoreParenContext(a1, v623, v631, v632, v633, v621, v634, v635);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::freeParenContext(a1, v623, v624, v636, v637, v638, v639, v640);
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v624, ((unint64_t)((8 * v621 + 24) >> 3) << 35) | 0x1F, v641, v642, v643, v644, v645);
          v646 = *(char *)(*(_QWORD *)(a1 + 40) + 9);
          v647 = ((unint64_t)((v850 + 16) >> 3) << 35) | 0x1F;
          JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v647, v646, v648, v649, v650, v651, v652);
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, v646, v653, v654, v655, v656, (uint64_t)v871, v657);
          JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v646, 1, v646, v658, v659, v660, v661);
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v646, v647, v662, v663, v664, v665, v666);
          v673 = v108 + 120 * v103;
          v676 = *(_QWORD *)(v673 + 16);
          v675 = (_QWORD *)(v673 + 16);
          v674 = v676;
          if (v676 >= *(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E70440);
          }
          v677 = *(_QWORD *)(a1 + 8);
          v889 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v674 + 36);
          JSC::MacroAssembler::jump(v677, &v889, v667, v668, v669, v670, v671, v672);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v871, *(_QWORD *)(a1 + 8), v678, v679, v680, v681, v682, v683);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*(_QWORD *)(a1 + 8), 0xFFFFFFFF, v854, v684, v685, v686, v687, v688);
          v689 = v852;
          if (*(_BYTE *)(v852 + 2) == 1)
          {
            if (*v675 >= (unint64_t)*(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E70448);
            }
            v690 = *(_QWORD *)(a1 + 8);
            v888 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * *v675 + 36);
            JSC::MacroAssembler::jump(v690, &v888, (uint64_t)v96, v97, v98, v99, v100, v101);
            if (*(_BYTE *)(v689 + 2) == 1)
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v108 + 120 * v103 + 40), *(_QWORD *)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          }
          *v853 = 1;
        }
        goto LABEL_75;
      case 0xE:
        v603 = *(_QWORD *)(v108 + 120 * v103 + 24);
        if (*(_BYTE *)(v603 + 2))
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          v609 = *(unsigned int *)(v603 + 44);
          if (*(_BYTE *)(v603 + 2) == 1)
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, (v609 << 35) | 0x1F, 0xFFFFFFFFLL, v605, v606, v607, v608, (uint64_t)v871);
            v616 = *(_QWORD *)(v108 + 120 * v103 + 8);
            if (v616 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E70430);
            }
            v617 = (_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v616 + 40);
            v886 = (int)v871[0];
            v887 = *(uint64_t *)((char *)v871 + 4);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v617, &v886, v610, v611, v612, v613, v614, v615);
          }
          else
          {
            v800 = v104;
            v801 = *(_QWORD *)(v108 + 120 * v103 + 8);
            if (v801 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E70470);
            }
            v802 = *(_QWORD *)(a1 + 40);
            v803 = *(_BYTE *)(v802 + 9);
            LODWORD(v852) = *(unsigned __int8 *)(v802 + 10);
            v804 = *(_QWORD *)(a1 + 304);
            v805 = v803;
            JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v609 << 35) | 0x1F, v805, v604, v605, v606, v607, v608);
            v806 = *(_QWORD *)(a1 + 8);
            LODWORD(v854) = v805;
            JSC::MacroAssemblerARM64::branch32(v806, 0, v805, 0xFFFFFFFFLL, v807, v808, v809, v810, (uint64_t)v871);
            v811 = v804 + 120 * v801;
            v813 = *(_DWORD *)(v811 + 36);
            v812 = (unsigned int *)(v811 + 36);
            v885 = v813;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v871, &v885, *(_QWORD *)(a1 + 8), v814, v815, v816, v817, v818);
            v871[0] = (WTF *)&v872;
            v871[1] = v105;
            if (*(_DWORD *)(v603 + 8) != -1)
            {
              v824 = (char)v852;
              JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)(8 * v609 + 16) << 32) | 0x1F, v824, v819, v820, v821, v822, v823);
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 2, v824, *(unsigned int *)(v603 + 8), v825, v826, v827, v828, (uint64_t)v884);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v871, v884, v829, v830, v831, v832, v833, v834);
            }
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, *(char *)(*(_QWORD *)(a1 + 40) + 1), v854, v820, v821, v822, v823, (uint64_t)v858);
            v883 = *v812;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v858, &v883, *(_QWORD *)(a1 + 8), v835, v836, v837, v838, v839);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v871, *(_QWORD *)(a1 + 8), v840, v841, v842, v843, v844, v845);
            v847 = v871[0];
            if (&v872 != (__int128 *)v871[0] && v871[0])
            {
              v871[0] = 0;
              LODWORD(v871[1]) = 0;
              WTF::fastFree((unint64_t)v847, v846, (uint64_t)v96, v97, v98, v99, v100, v101);
            }
            v104 = v800;
            v12 = v856;
          }
          *v853 = 1;
        }
        v114 = v108 + 120 * v103;
        goto LABEL_74;
      case 0xF:
        v529 = v108 + 120 * v103;
        v530 = *(_QWORD *)(v529 + 16);
        if (v530 >= v107)
        {
          __break(0xC471u);
          JUMPOUT(0x198E70428);
        }
        v531 = *(_QWORD *)(v529 + 24);
        v532 = v108 + 120 * v103;
        v534 = *(_DWORD *)(v532 + 96);
        v533 = (unsigned int *)(v532 + 96);
        if (v534 || (*(_BYTE *)(v531 + 1) & 2) != 0)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          v535 = *v533;
          if ((_DWORD)v535)
          {
            v536 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
            JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v535, v536, v536, v98, v99, v100, v101);
          }
          if ((*(_BYTE *)(v531 + 1) & 2) != 0)
          {
            v537 = *(_QWORD *)(a1 + 8);
            v882 = *(_DWORD *)(v108 + 120 * v530 + 36);
            JSC::MacroAssembler::jump(v537, &v882, (uint64_t)v96, v97, v98, v99, v100, v101);
          }
          *v853 = 1;
        }
        v114 = v108 + 120 * v530;
        goto LABEL_74;
      case 0x10:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::takeBacktracksToJumpList((uint64_t)v104, (_DWORD *)(v108 + 120 * v103 + 40), *(_QWORD *)(a1 + 8), v97, v98, v99, v100, v101);
        goto LABEL_75;
      case 0x11:
        v112 = *(_QWORD *)(v108 + 120 * v103 + 24);
        if (*(_BYTE *)v112 != 3)
        {
          switch(*(_BYTE *)v112)
          {
            case 0:
            case 1:
              goto LABEL_73;
            case 2:
            case 9:
              goto LABEL_398;
            case 4:
              v115 = *(unsigned __int8 *)(v112 + 2);
              if (*(_BYTE *)(v112 + 2))
              {
                if (v115 == 1)
                {
                  v196 = *(char *)(*(_QWORD *)(a1 + 40) + 10);
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
                  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * *(_DWORD *)(v112 + 44) + 8) >> 3) << 35) | 0x1F, v196, v197, v198, v199, v200, v201);
                  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, v196, v202, v203, v204, v205, (uint64_t)v858, v206);
                  LODWORD(v871[0]) = *(_DWORD *)v858;
                  v214 = *(_QWORD *)&v858[4];
                  *(WTF **)((char *)v871 + 4) = *(WTF **)&v858[4];
                  if (*(_DWORD *)v858 != -1)
                  {
                    v215 = *(unsigned int *)(a1 + 15756);
                    if ((_DWORD)v215 == *(_DWORD *)(a1 + 15752))
                    {
                      v470 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v104, (void *)(v215 + 1), (unint64_t)v871, v209, v210, v211, v212, v213);
                      v471 = (_DWORD *)(*(_QWORD *)(a1 + 15744) + 12 * *(unsigned int *)(a1 + 15756));
                      *v471 = *(_DWORD *)v470;
                      v472 = v471 + 1;
                      v214 = *(_QWORD *)(v470 + 4);
                    }
                    else
                    {
                      v473 = (_DWORD *)(*(_QWORD *)v104 + 12 * v215);
                      *v473 = *(_DWORD *)v858;
                      v472 = v473 + 1;
                    }
                    *v472 = v214;
                    ++*(_DWORD *)(a1 + 15756);
                  }
                  v266 = *(_DWORD **)(a1 + 8);
                  v267 = v266[50];
                  if (v267 + 4 > v266[48])
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v266 + 14), v207, v208, v209, v210, v211, v212, v213);
                    v267 = v266[50];
                  }
                  *(_DWORD *)(*((_QWORD *)v266 + 7) + v267) = v196 | (32 * v196) | 0x51000400;
                  v266[50] += 4;
                  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v196, ((unint64_t)((8 * *(_DWORD *)(v112 + 44) + 8) >> 3) << 35) | 0x1F, v209, v210, v211, v212, v213);
                  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                  {
                    if (*(_BYTE *)v112 != 4
                      || (v721 = *(unsigned __int8 *)(*(_QWORD *)(v112 + 16) + 88), (v721 - 1) > 1)
                      || (*(_BYTE *)(v112 + 1) & 2) != 0)
                    {
                      v737 = *(_QWORD *)(a1 + 40);
                      v738 = *(_BYTE *)(v737 + 9);
                      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)*(unsigned int *)(v112 + 44) << 35) | 0x1F, *(char *)(v737 + 1), v270, v271, v272, v273, v274);
                      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label(v903, *(_QWORD *)(a1 + 8), v739, v740, v741, v742, v743, v744);
                      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, v196, v745, v746, v747, v748, (uint64_t)v871, v749);
                      v755 = *(_DWORD *)(v108 + 120 * v103 + 100);
                      v756 = *(_DWORD *)(v112 + 40);
                      if (v755 < v756)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E70468);
                      }
                      v757 = v738;
                      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, v755 - v756, v757, v750, v751, v752, v753, v754);
                      JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v196, 1, v196, v758, v759, v760, v761);
                      v762 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                      JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, v762, v762, v763, v764, v765, v766);
                      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, v757, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20), v767, v768, v769, v770, (uint64_t)v858);
                      v771 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                      JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, v771, v771, v772, v773, v774, v775);
                      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v858, *(_QWORD *)(a1 + 8), v776, v777, v778, v779, v780, v781);
                      v782 = *(_QWORD *)(a1 + 8);
                      v913[0] = v903[0];
                      JSC::MacroAssembler::jump(v782, v913, v783, v784, v785, v786, v787, v788);
                      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v871, *(_QWORD *)(a1 + 8), v789, v790, v791, v792, v793, v794);
                      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * *(_DWORD *)(v112 + 44) + 8) >> 3) << 35) | 0x1F, v196, v795, v796, v797, v798, v799);
                    }
                    else
                    {
                      if ((v721 & 2) != 0)
                        v722 = 2;
                      else
                        v722 = 1;
                      JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v722, *(char *)(*(_QWORD *)(a1 + 40) + 1), v271, v272, v273, v274);
                    }
                  }
                  else
                  {
                    v275 = *(_DWORD **)(a1 + 8);
                    v276 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                    v277 = v275[50];
                    if (v277 + 4 > v275[48])
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v275 + 14), v268, v269, v270, v271, v272, v273, v274);
                      v277 = v275[50];
                    }
                    *(_DWORD *)(*((_QWORD *)v275 + 7) + v277) = v276 | (32 * v276) | 0x51000400;
                    v275[50] += 4;
                  }
                  v278 = *(_QWORD *)(a1 + 8);
                  LODWORD(v871[0]) = *(_DWORD *)(v108 + 120 * v103 + 36);
                  JSC::MacroAssembler::jump(v278, (unsigned int *)v871, v269, v270, v271, v272, v273, v274);
                }
                else if (v115 == 2)
                {
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackCharacterClassNonGreedy(a1, v103, (uint64_t)v96, v97, v98, v99, v100, v101);
                }
                goto LABEL_75;
              }
              if (*(_DWORD *)(v112 + 8) != 1)
                goto LABEL_398;
              if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              {
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)v104, *(void **)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
                JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)*(unsigned int *)(v112 + 44) << 35) | 0x1F, *(char *)(*(_QWORD *)(a1 + 40) + 1), v723, v724, v725, v726, v727);
                *v853 = 1;
                v107 = *(unsigned int *)(a1 + 316);
              }
              if (v107 <= v103)
              {
                __break(0xC471u);
                JUMPOUT(0x198E70410);
              }
              v114 = *(_QWORD *)(a1 + 304) + 120 * v103;
              break;
            case 5:
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackBackReference(a1, v103, (uint64_t)v96, v97, v98, v99, v100, v101);
              goto LABEL_75;
            case 6:
              *(_WORD *)(a1 + 82) = 258;
              goto LABEL_75;
            case 7:
            case 8:
              __break(0xC471u);
              JUMPOUT(0x198E6F4F4);
            default:
              goto LABEL_75;
          }
          goto LABEL_74;
        }
        v113 = *(unsigned __int8 *)(v112 + 2);
        if (!*(_BYTE *)(v112 + 2))
        {
LABEL_73:
          v114 = v108 + 120 * v103;
LABEL_74:
          WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v104, (unsigned int *)(v114 + 40), (uint64_t)v96, v97, v98, v99, v100, v101);
          goto LABEL_75;
        }
        if (v113 == 1)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackPatternCharacterGreedy((unsigned int *)a1, v103, (uint64_t)v96, v97, v98, v99, v100, v101);
        }
        else if (v113 == 2)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackPatternCharacterNonGreedy(a1, v103, (uint64_t)v96, v97, v98, v99, v100, v101);
        }
LABEL_75:
        if (v103)
          continue;
        v279 = *(_QWORD *)(a1 + 15872);
        if (v279)
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v95, (uint64_t)v96, v97, v98, v99, v100, v101, &v862);
          *(_DWORD *)(v279 + 52) = v862;
        }
        if (*(_DWORD *)(a1 + 212))
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v95, (uint64_t)v96, v97, v98, v99, v100, v101, (int *)v871);
          *(_DWORD *)(a1 + 216) = v871[0];
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeCharImpl<(JSC::Yarr::TryReadUnicodeCharCodeLocation)1>(a1, *(char *)(*(_QWORD *)(a1 + 40) + 9), v564, v565, v566, v567, v568, v569);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), 3596551104, v570, v571, v572, v573, v574, v575);
        }
        if (*(_DWORD *)(a1 + 132))
        {
          v871[0] = (WTF *)&v872;
          v871[1] = v105;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(a1 + 120), *(_QWORD *)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), -2, *(char *)(*(_QWORD *)(a1 + 40) + 7), v576, v577, v578, v579, v580);
          v581 = *(_QWORD *)(a1 + 8);
          JSC::ARM64Assembler::label((_DWORD *)(v581 + 32), v582, v583, v584, v585, v586, v587, v588, v903);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v581 + 56), 335544320, v589, v590, v591, v592, v593, v594);
          if (*(_BYTE *)(v581 + 328))
            v601 = 69;
          else
            v601 = 65;
          *(_QWORD *)v858 = v903[0];
          v858[8] = v601;
          *(_WORD *)&v858[9] = 15;
          v858[11] = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v871, v858, v595, v596, v597, v598, v599, v600);
          if (*(_DWORD *)(a1 + 172))
            goto LABEL_450;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 172))
            goto LABEL_179;
          v871[0] = (WTF *)&v872;
          v871[1] = v105;
LABEL_450:
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(a1 + 160), *(_QWORD *)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), -1, *(char *)(*(_QWORD *)(a1 + 40) + 7), v691, v692, v693, v694, v695);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v871, *(_QWORD *)(a1 + 8), (uint64_t)v96, v97, v98, v99, v100, v101);
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::removeCallFrame(a1, v696, v697, v698, v699, v700, v701, v702);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 8), v703, v704, v705, v706, v707);
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn(a1, v708, v709, v710, v711, v712, v713, v714);
        v715 = v871[0];
        if (&v872 != (__int128 *)v871[0] && v871[0])
        {
          v871[0] = 0;
          LODWORD(v871[1]) = 0;
          WTF::fastFree((unint64_t)v715, (void *)v95, (uint64_t)v96, v97, v98, v99, v100, v101);
        }
LABEL_179:
        v280 = *(_QWORD *)(a1 + 15872);
        if (v280)
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v95, (uint64_t)v96, v97, v98, v99, v100, v101, &v861);
          *(_DWORD *)(v280 + 56) = v861;
        }
        v281 = *(_QWORD *)(a1 + 8);
        v282 = *(unsigned int *)(a1 + 276);
        if ((_DWORD)v282)
        {
          v283 = 0;
          v284 = 0;
          v285 = 12 * v282;
          do
          {
            if (v284 >= *(unsigned int *)(a1 + 276))
            {
              __break(0xC471u);
              JUMPOUT(0x198E703D8);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 264) + v283), v281, (uint64_t)v96, v97, v98, v99, v100, v101);
            ++v284;
            v283 += 12;
          }
          while (v285 != v283);
          v281 = *(_QWORD *)(a1 + 8);
        }
        v286 = *(unsigned int *)(a1 + 236);
        if ((_DWORD)v286)
        {
          v287 = 0;
          v288 = 0;
          v289 = 12 * v286;
          do
          {
            if (v288 >= *(unsigned int *)(a1 + 236))
            {
              __break(0xC471u);
              JUMPOUT(0x198E703E0);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 224) + v287), v281, (uint64_t)v96, v97, v98, v99, v100, v101);
            ++v288;
            v287 += 12;
          }
          while (v289 != v287);
        }
        v290 = *(unsigned int *)(a1 + 15836);
        v871[0] = (WTF *)&v872;
        LODWORD(v871[1]) = 4;
        HIDWORD(v871[1]) = v290;
        if (v290 >= 5)
        {
          if (v290 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198E70530);
          }
          v291 = (WTF *)WTF::fastMalloc((WTF *)(8 * v290));
          LODWORD(v871[1]) = v290;
          v871[0] = v291;
          v290 = *(unsigned int *)(a1 + 15836);
        }
        else
        {
          v291 = (WTF *)&v872;
        }
        if ((_DWORD)v290)
        {
          v406 = *(_DWORD **)(a1 + 15824);
          v407 = &v406[2 * v290];
          v408 = v291;
          do
          {
            *(_DWORD *)v408 = *v406;
            *((_DWORD *)v408 + 1) = v406[1];
            v406 += 2;
            v408 = (WTF *)((char *)v408 + 8);
          }
          while (v406 != v407);
        }
        v292 = HIDWORD(v871[1]);
        if (HIDWORD(v871[1]))
        {
          v476 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)v858 = v860;
          *(_DWORD *)&v858[8] = 4;
          v859 = HIDWORD(v871[1]);
          if (HIDWORD(v871[1]) > 4)
          {
            if (HIDWORD(v871[1]) >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198E70538);
            }
            v848 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v871[1])));
            *(_DWORD *)&v858[8] = v292;
            *(_QWORD *)v858 = v848;
            v12 = v856;
            if (!HIDWORD(v871[1]))
              goto LABEL_355;
            v478 = (_DWORD *)v848;
            v291 = v871[0];
            v477 = (WTF *)((char *)v871[0] + 8 * HIDWORD(v871[1]));
          }
          else
          {
            v477 = (WTF *)((char *)v291 + 8 * HIDWORD(v871[1]));
            v478 = v860;
          }
          do
          {
            *v478 = *(_DWORD *)v291;
            v478[1] = *((_DWORD *)v291 + 1);
            v291 = (WTF *)((char *)v291 + 8);
            v478 += 2;
          }
          while (v291 != v477);
LABEL_355:
          v479 = WTF::fastMalloc((WTF *)0x40);
          *(_DWORD *)(v479 + 8) = 1;
          *(_QWORD *)v479 = &off_1E35BA0C0;
          v480 = (_DWORD *)(v479 + 32);
          v481 = v859;
          *(_QWORD *)(v479 + 16) = v479 + 32;
          *(_DWORD *)(v479 + 24) = 4;
          *(_DWORD *)(v479 + 28) = v481;
          if (v481 >= 5)
          {
            if (v481 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198E70540);
            }
            v480 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v481));
            *(_DWORD *)(v479 + 24) = v481;
            *(_QWORD *)(v479 + 16) = v480;
            v481 = v859;
            v12 = v856;
          }
          if ((_DWORD)v481)
          {
            v500 = *(_DWORD **)v858;
            v501 = *(_QWORD *)v858 + 8 * v481;
            do
            {
              *v480 = *v500;
              v480[1] = v500[1];
              v500 += 2;
              v480 += 2;
            }
            while (v500 != (_DWORD *)v501);
          }
          v482 = *(unsigned int *)(v476 + 244);
          if ((_DWORD)v482 == *(_DWORD *)(v476 + 240))
          {
            v502 = v482 + (v482 >> 2);
            if (v502 >= 0x10)
              v503 = v502 + 1;
            else
              v503 = 16;
            if (v503 <= v482 + 1)
              v504 = v482 + 1;
            else
              v504 = v503;
            if (v504 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198E70528);
            }
            v505 = *(const void **)(v476 + 232);
            v506 = (void *)WTF::fastMalloc((WTF *)(8 * v504));
            *(_DWORD *)(v476 + 240) = v504;
            *(_QWORD *)(v476 + 232) = v506;
            memcpy(v506, v505, 8 * v482);
            if (v505)
            {
              if (*(const void **)(v476 + 232) == v505)
              {
                *(_QWORD *)(v476 + 232) = 0;
                *(_DWORD *)(v476 + 240) = 0;
              }
              WTF::fastFree((unint64_t)v505, (void *)v95, (uint64_t)v96, v97, v98, v99, v100, v101);
            }
            v482 = *(unsigned int *)(v476 + 244);
            v483 = (uint64_t *)(*(_QWORD *)(v476 + 232) + 8 * v482);
          }
          else
          {
            v483 = (uint64_t *)(*(_QWORD *)(v476 + 232) + 8 * v482);
          }
          *v483 = v479;
          *(_DWORD *)(v476 + 244) = v482 + 1;
          v484 = *(_QWORD *)v858;
          if (v860 != *(_BYTE **)v858 && *(_QWORD *)v858 != 0)
          {
            memset(v858, 0, sizeof(v858));
            WTF::fastFree(v484, (void *)v95, (uint64_t)v96, v97, v98, v99, v100, v101);
          }
        }
        if (*(_DWORD *)(a1 + 212))
        {
          v602 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)v858 = a1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMooreData &)::{lambda(JSC::LinkBuffer &)#2}>(v602, v858);
        }
        v293 = v12[2];
        v294 = v12[3];
        v295 = *(unsigned int *)(a1 + 15740) + v294;
        if (v295 > v293)
        {
          v364 = v293 + (v293 >> 2);
          if (v364 >= 0x10)
            v365 = v364 + 1;
          else
            v365 = 16;
          if (v365 <= v295)
            v366 = *(unsigned int *)(a1 + 15740) + v294;
          else
            v366 = v365;
          if (v366 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198E70518);
          }
          v367 = *(const void **)v12;
          v368 = (void *)WTF::fastMalloc((WTF *)(8 * v366));
          v12[2] = v366;
          *(_QWORD *)v12 = v368;
          memcpy(v368, v367, 8 * v294);
          if (v367)
          {
            if (*(const void **)v12 == v367)
            {
              *(_QWORD *)v12 = 0;
              v12[2] = 0;
            }
            WTF::fastFree((unint64_t)v367, (void *)v95, (uint64_t)v96, v97, v98, v99, v100, v101);
          }
        }
        v296 = *(unsigned int *)(a1 + 15740);
        if ((_DWORD)v296)
        {
          v409 = *(uint64_t **)(a1 + 15728);
          v410 = v12[3];
          v411 = 8 * v296;
          do
          {
            v412 = *(_QWORD **)v12;
            v413 = *v409;
            *v409++ = 0;
            v412[v410++] = v413;
            v411 -= 8;
          }
          while (v411);
          v12[3] = v410;
        }
        v297 = v871[0];
        if (&v872 != (__int128 *)v871[0] && v871[0] != 0)
        {
          v871[0] = 0;
          LODWORD(v871[1]) = 0;
          WTF::fastFree((unint64_t)v297, (void *)v95, (uint64_t)v96, v97, v98, v99, v100, v101);
        }
        return;
      default:
        goto LABEL_75;
    }
  }
}

uint64_t JSC::Yarr::ByteCompiler::emitDisjunction(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  char v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  BOOL v22;
  char v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  unsigned int v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  int *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int *v103;
  char v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  __int128 v110;
  uint64_t *v111;
  unsigned int v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  _OWORD *v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  _DWORD *v151;
  int v152;
  int v153;
  unsigned int v154;
  char v155;
  uint64_t v156;
  unsigned int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int *v176;
  char v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  _OWORD *v203;
  __int128 v204;
  __int128 v205;
  _OWORD *v206;
  __int128 v207;
  __int128 v208;
  _OWORD *v209;
  __int128 v210;
  __int128 v211;
  _OWORD *v212;
  __int128 v213;
  __int128 v214;
  _OWORD *v215;
  __int128 v216;
  __int128 v217;
  _OWORD *v218;
  __int128 v219;
  __int128 v220;
  unsigned int v221;
  int v222;
  uint64_t v223;
  __int16 v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  _OWORD *v234;
  _OWORD *v235;
  __int128 v236;
  __int128 v237;
  int v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t *v242;
  int v243;
  _OWORD *v244;
  _OWORD *v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  uint64_t v249;
  _OWORD *v250;
  _OWORD *v251;
  __int128 v252;
  __int128 v253;
  uint64_t *v254;
  int v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  _OWORD *v262;
  _OWORD *v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  _OWORD *v267;
  _OWORD *v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  _OWORD *v272;
  _OWORD *v273;
  __int128 v274;
  __int128 v275;
  __int128 *v276;
  _OWORD *v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  int v287;
  uint64_t *v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  unint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  int v300;
  int *v301;
  int v302;
  int v303;
  uint64_t v304;
  unsigned int v305;
  unsigned __int8 *v306;
  unsigned int v307;
  uint64_t *v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  int v317;
  unint64_t v318;
  unsigned int v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unsigned int v328;
  unint64_t v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  unint64_t v333;
  uint64_t v334;
  unsigned int v335;
  int v336;
  uint64_t v337;
  int *v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  int v357;
  char v358;
  int v359;
  unsigned int v360;
  _OWORD *v361;
  __int128 v362;
  __int128 v363;
  uint64_t v364;
  int v365;
  unsigned int v366;
  uint64_t *v367;
  unsigned int *v368;
  unsigned int v369;
  unsigned __int8 *v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t *v373;
  unint64_t v374;
  unsigned int v375;
  uint64_t v376;
  unsigned __int8 *v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  uint64_t v381;
  int v382;
  _BYTE v383[4];
  unsigned int v384;
  int v385;
  _BYTE v386[4];
  int v387;
  _BYTE v388[4];
  int v389;
  unsigned int v390;
  int v391;
  _BYTE v392[4];
  int v393;
  _BYTE v394[4];
  int v395;
  int v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  unint64_t v400;

  if ((unint64_t)&v364 < *(_QWORD *)(a1 + 16))
  {
    v6 = 1;
    LOBYTE(v24) = 26;
    return v24 | (v6 << 8);
  }
  v5 = a2;
  v6 = *(_DWORD *)(a2 + 12);
  if (!v6)
  {
    LOBYTE(v24) = 0;
    return v24 | (v6 << 8);
  }
  v7 = a5;
  v9 = 0;
  v10 = 4 * (a5 & 1);
  v373 = (uint64_t *)(a1 + 32);
  v379 = 4 * (a5 & 1);
  v380 = a5;
  v378 = a4;
  v376 = a2;
  v377 = a3;
  do
  {
    v11 = *a3;
    v12 = *a3 != 0;
    v13 = *((unsigned int *)a3 + 1);
    v14 = *(uint64_t **)(*(_QWORD *)v5 + 8 * v9);
    if (v9)
    {
      if (*(_QWORD *)(*(_QWORD *)a1 + 16) == v5)
      {
        v293 = *((_BYTE *)v14 + 37) & 1;
        v294 = v9;
        v295 = *(uint64_t **)(*(_QWORD *)v5 + 8 * v9);
        v296 = *((unsigned int *)a3 + 1);
        JSC::Yarr::ByteCompiler::alternativeBodyDisjunction((JSC::Yarr::ByteCompiler *)a1, v293);
        v13 = v296;
        v14 = v295;
        LODWORD(a4) = v378;
        v10 = v379;
        v9 = v294;
        v5 = v376;
        a3 = v377;
      }
      else
      {
        v198 = *(_QWORD *)(a1 + 8);
        v199 = *(_DWORD *)(v198 + 12);
        v200 = *(_DWORD *)(a1 + 24);
        if (v199 <= v200)
        {
          __break(0xC471u);
          JUMPOUT(0x198E720ECLL);
        }
        *(_DWORD *)(*(_QWORD *)v198 + 48 * v200) = v199 - v200;
        v201 = *(_QWORD *)(a1 + 8);
        LODWORD(v399) = 0;
        WORD2(v399) = 4;
        DWORD2(v399) = 0;
        LOBYTE(v398) = 0;
        *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
        BYTE8(v397) = 0;
        *(_QWORD *)&v397 = 0;
        v202 = *(unsigned int *)(v201 + 12);
        if ((_DWORD)v202 == *(_DWORD *)(v201 + 8))
        {
          v259 = v9;
          v260 = v14;
          v261 = v13;
          v262 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v201, v202 + 1, (unint64_t)&v397);
          v13 = v261;
          v14 = v260;
          LODWORD(a4) = v378;
          v10 = v379;
          v9 = v259;
          v5 = v376;
          a3 = v377;
          v263 = (_OWORD *)(*(_QWORD *)v201 + 48 * *(unsigned int *)(v201 + 12));
          v265 = v262[1];
          v264 = v262[2];
          *v263 = *v262;
          v263[1] = v265;
          v263[2] = v264;
        }
        else
        {
          v203 = (_OWORD *)(*(_QWORD *)v201 + 48 * v202);
          v204 = v397;
          v205 = v399;
          v203[1] = v398;
          v203[2] = v205;
          *v203 = v204;
        }
        ++*(_DWORD *)(v201 + 12);
        *(_DWORD *)(a1 + 24) = v199;
      }
    }
    v15 = *((_DWORD *)v14 + 6);
    if ((_DWORD)v7)
    {
      v323 = *(_DWORD *)(v5 + 24);
      if (v323 >= a4)
        v323 = a4;
      v324 = v15 - v323;
      if (v15 <= v323)
      {
LABEL_135:
        v375 = 0;
        goto LABEL_15;
      }
      if (v11 || (v22 = __CFADD__(v324, (_DWORD)v13), v325 = v324 + v13, v22))
      {
        __break(0xC471u);
        JUMPOUT(0x198E720F4);
      }
      v326 = v9;
      v327 = v325;
      JSC::Yarr::ByteCompiler::haveCheckedInput(*(_QWORD *)(a1 + 8), v325);
      v13 = v327;
      v12 = 0;
      v5 = v376;
      a3 = v377;
      if (v15 <= *(_DWORD *)(v376 + 24))
        v328 = v15;
      else
        v328 = v324;
      v375 = v328;
      LODWORD(a4) = v378;
      v10 = v379;
      v9 = v326;
    }
    else
    {
      v16 = v15 - a4;
      if (!v16)
        goto LABEL_135;
      v17 = *(_QWORD *)(a1 + 8);
      LODWORD(v399) = 0;
      WORD2(v399) = 28;
      DWORD2(v399) = 0;
      LOBYTE(v398) = 0;
      *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
      LODWORD(v397) = v16;
      v18 = *(unsigned int *)(v17 + 12);
      if ((_DWORD)v18 == *(_DWORD *)(v17 + 8))
      {
        v241 = v9;
        v242 = v14;
        v243 = v13;
        v244 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v397);
        LODWORD(v13) = v243;
        v14 = v242;
        LODWORD(a4) = v378;
        v10 = v379;
        v9 = v241;
        v5 = v376;
        a3 = v377;
        v245 = (_OWORD *)(*(_QWORD *)v17 + 48 * *(unsigned int *)(v17 + 12));
        v247 = v244[1];
        v246 = v244[2];
        *v245 = *v244;
        v245[1] = v247;
        v245[2] = v246;
      }
      else
      {
        v19 = (_OWORD *)(*(_QWORD *)v17 + 48 * v18);
        v20 = v397;
        v21 = v399;
        v19[1] = v398;
        v19[2] = v21;
        *v19 = v20;
      }
      ++*(_DWORD *)(v17 + 12);
      v22 = __CFADD__((_DWORD)v13, v16);
      v13 = (v13 + v16);
      v23 = v22;
      v6 = 1;
      LOBYTE(v24) = 27;
      if (v11 || (v23 & 1) != 0)
        return v24 | (v6 << 8);
      v375 = 0;
      v12 = 0;
    }
LABEL_15:
    v25 = *((unsigned int *)v14 + 3);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v381 = *((unsigned int *)v14 + 3);
      while (1)
      {
        v27 = v26;
        if ((_DWORD)v7)
          v27 = ~(_DWORD)v26 + v25;
        v28 = v27;
        if (v27 >= (unint64_t)*((unsigned int *)v14 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x198E71F68);
        }
        v29 = *v14;
        switch(*(_BYTE *)(*v14 + 48 * v27))
        {
          case 0:
            if (v12
              || (v221 = *(_DWORD *)(v29 + 48 * v27 + 40), v22 = v13 >= v221, v222 = v13 - v221, !v22))
            {
              __break(0xC471u);
              JUMPOUT(0x198E7208CLL);
            }
            v223 = *(_QWORD *)(a1 + 8);
            LODWORD(v399) = 0;
            v224 = 8;
            goto LABEL_88;
          case 1:
            if (v12
              || (v226 = *(_DWORD *)(v29 + 48 * v27 + 40), v22 = v13 >= v226, v222 = v13 - v226, !v22))
            {
              __break(0xC471u);
              JUMPOUT(0x198E72094);
            }
            v223 = *(_QWORD *)(a1 + 8);
            LODWORD(v399) = 0;
            v224 = 9;
LABEL_88:
            WORD2(v399) = v224;
            LOBYTE(v398) = 0;
            *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
            DWORD2(v399) = v222;
            v144 = *(_DWORD *)(v223 + 12);
            if (v144 == *(_DWORD *)(v223 + 8))
            {
              v284 = v9;
              v285 = v13;
              WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v223, (unint64_t)&v397);
              v25 = v381;
              v13 = v285;
              LODWORD(a4) = v378;
              v10 = v379;
              v9 = v284;
              v5 = v376;
              a3 = v377;
            }
            else
            {
              v145 = (_OWORD *)(*(_QWORD *)v223 + 48 * v144);
              v146 = v397;
              v147 = v399;
              v145[1] = v398;
              v145[2] = v147;
              *v145 = v146;
              ++*(_DWORD *)(v223 + 12);
            }
            goto LABEL_90;
          case 2:
            if (v12 || (v330 = *(_DWORD *)(v29 + 48 * v27 + 40), v13 < v330))
            {
              __break(0xC471u);
              JUMPOUT(0x198E720BCLL);
            }
            v318 = v9;
            v331 = (*(unsigned __int8 *)(v29 + 48 * v28 + 1) >> 1) & 1;
            v322 = v13;
            JSC::Yarr::ByteCompiler::assertionWordBoundary(*(_QWORD *)(a1 + 8), v331, v7, v13 - v330);
            goto LABEL_186;
          case 3:
            if (v12 || (v127 = *(_DWORD *)(v29 + 48 * v27 + 40), v128 = v13 - v127, v13 < v127))
            {
              __break(0xC471u);
              JUMPOUT(0x198E7201CLL);
            }
            v129 = *(unsigned int *)(v29 + 48 * v28 + 16);
            v130 = v29 + 48 * v28;
            v131 = *(_DWORD *)(v130 + 44);
            v132 = *(_DWORD *)(v130 + 8);
            v133 = *(unsigned __int8 *)(v130 + 2);
            if ((*(_WORD *)(*(_QWORD *)a1 + 2) & 4) == 0)
            {
              v134 = *(_QWORD *)(a1 + 8);
              goto LABEL_77;
            }
            v371 = v14;
            v345 = v13;
            v374 = v9;
            v346 = MEMORY[0x19AEBC048](v129);
            v347 = MEMORY[0x19AEBC054](v129);
            v348 = v346;
            v134 = *(_QWORD *)(a1 + 8);
            if (v348 == v347)
            {
              LODWORD(a4) = v378;
              v10 = v379;
              v5 = v376;
              a3 = v377;
              v9 = v374;
              v13 = v345;
              v14 = v371;
              v25 = v381;
LABEL_77:
              LODWORD(v399) = v131;
              BYTE5(v399) = 0;
              DWORD2(v399) = v128;
              LODWORD(v397) = v129;
              LOBYTE(v398) = v133;
              DWORD1(v398) = v132;
              DWORD2(v398) = v132;
              if (v133)
              {
                if (v133 == 1)
                {
                  DWORD1(v398) = 0;
                  v135 = 13;
                  goto LABEL_81;
                }
                if (v133 == 2)
                {
                  DWORD1(v398) = 0;
                  v135 = 14;
                  goto LABEL_81;
                }
              }
              else
              {
                if (v132 == 1)
                  v135 = 11;
                else
                  v135 = 12;
LABEL_81:
                BYTE4(v399) = v135;
              }
              v136 = *(unsigned int *)(v134 + 12);
              if ((_DWORD)v136 == *(_DWORD *)(v134 + 8))
              {
                v248 = v9;
                v249 = v13;
                v250 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v134, v136 + 1, (unint64_t)&v397);
                v25 = v381;
                v13 = v249;
                LODWORD(a4) = v378;
                v10 = v379;
                v9 = v248;
                v5 = v376;
                a3 = v377;
                v251 = (_OWORD *)(*(_QWORD *)v134 + 48 * *(unsigned int *)(v134 + 12));
                v253 = v250[1];
                v252 = v250[2];
                *v251 = *v250;
                v251[1] = v253;
                v251[2] = v252;
              }
              else
              {
                v137 = (_OWORD *)(*(_QWORD *)v134 + 48 * v136);
                v138 = v397;
                v139 = v399;
                v137[1] = v398;
                v137[2] = v139;
                *v137 = v138;
              }
              ++*(_DWORD *)(v134 + 12);
              v140 = *(_QWORD *)(a1 + 8);
              v141 = *(_DWORD *)(v140 + 12);
              if (!v141)
              {
                __break(0xC471u);
                JUMPOUT(0x198E72024);
              }
              goto LABEL_85;
            }
            LODWORD(v399) = v131;
            BYTE5(v399) = 0;
            DWORD2(v399) = v128;
            if (v133 == 2)
            {
              v359 = 0;
              v358 = 18;
              LODWORD(a4) = v378;
              v10 = v379;
              v5 = v376;
              a3 = v377;
              v9 = v374;
              v13 = v345;
              v25 = v381;
            }
            else
            {
              LODWORD(a4) = v378;
              v10 = v379;
              v5 = v376;
              a3 = v377;
              v9 = v374;
              v13 = v345;
              v25 = v381;
              if (v133 == 1)
              {
                v359 = 0;
                v358 = 17;
              }
              else
              {
                if (v133)
                  goto LABEL_243;
                if (v132 == 1)
                  v358 = 15;
                else
                  v358 = 16;
                v359 = v132;
              }
            }
            BYTE4(v399) = v358;
            DWORD1(v398) = v359;
LABEL_243:
            *(_QWORD *)&v397 = __PAIR64__(v347, v348);
            LOBYTE(v398) = v133;
            DWORD2(v398) = v132;
            v360 = *(_DWORD *)(v134 + 12);
            if (v360 == *(_DWORD *)(v134 + 8))
            {
              WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v134, (unint64_t)&v397);
              v25 = v381;
              v13 = v345;
              LODWORD(a4) = v378;
              v10 = v379;
              v9 = v374;
              v5 = v376;
              a3 = v377;
            }
            else
            {
              v361 = (_OWORD *)(*(_QWORD *)v134 + 48 * v360);
              v362 = v397;
              v363 = v399;
              v361[1] = v398;
              v361[2] = v363;
              *v361 = v362;
              ++*(_DWORD *)(v134 + 12);
            }
            v14 = v371;
            v140 = *(_QWORD *)(a1 + 8);
            v141 = *(_DWORD *)(v140 + 12);
            if (!v141)
            {
              __break(0xC471u);
              JUMPOUT(0x198E71F20);
            }
LABEL_85:
            v12 = 0;
            v49 = *(_QWORD *)v140 + 48 * v141;
LABEL_31:
            *(_BYTE *)(v49 - 11) = *(_BYTE *)(v49 - 11) & 0xFB | v10;
            goto LABEL_32;
          case 4:
            if (v12
              || (v30 = *(_DWORD *)(v29 + 48 * v27 + 40), v22 = v13 >= v30, v31 = v13 - v30, !v22))
            {
              __break(0xC471u);
              JUMPOUT(0x198E71F70);
            }
            v32 = v29 + 48 * v28;
            v33 = *(_QWORD *)(v32 + 16);
            LOBYTE(v32) = *(_BYTE *)(v32 + 1) & 2;
            v34 = v29 + 48 * v28;
            v35 = *(_DWORD *)(v34 + 44);
            v36 = *(_DWORD *)(v34 + 8);
            v37 = *(unsigned __int8 *)(v34 + 2);
            v38 = *(_QWORD *)(a1 + 8);
            LODWORD(v399) = 0;
            BYTE4(v399) = 19;
            BYTE5(v399) = v32;
            DWORD2(v399) = v31;
            *(_QWORD *)&v397 = v33;
            LOBYTE(v398) = 0;
            *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
            v39 = *(unsigned int *)(v38 + 12);
            if ((_DWORD)v39 == *(_DWORD *)(v38 + 8))
            {
              v231 = v9;
              v232 = v14;
              v233 = v13;
              v234 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v39 + 1, (unint64_t)&v397);
              v25 = v381;
              v13 = v233;
              v14 = v232;
              LODWORD(a4) = v378;
              v10 = v379;
              v9 = v231;
              v5 = v376;
              a3 = v377;
              v235 = (_OWORD *)(*(_QWORD *)v38 + 48 * *(unsigned int *)(v38 + 12));
              v237 = v234[1];
              v236 = v234[2];
              *v235 = *v234;
              v235[1] = v237;
              v235[2] = v236;
            }
            else
            {
              v40 = (_OWORD *)(*(_QWORD *)v38 + 48 * v39);
              v41 = v397;
              v42 = v399;
              v40[1] = v398;
              v40[2] = v42;
              *v40 = v41;
            }
            ++*(_DWORD *)(v38 + 12);
            if (v37)
            {
              v142 = *(_QWORD *)(a1 + 8);
              v143 = *(_DWORD *)(v142 + 12);
              if (!v143)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7202CLL);
              }
              *(_DWORD *)(*(_QWORD *)v142 + 48 * v143 - 28) = 0;
            }
            v43 = *(_QWORD *)(a1 + 8);
            v44 = *(_DWORD *)(v43 + 12);
            if (!v44)
            {
              __break(0xC471u);
              JUMPOUT(0x198E71F8CLL);
            }
            *(_DWORD *)(*(_QWORD *)v43 + 48 * v44 - 24) = v36;
            v45 = *(_QWORD *)(a1 + 8);
            v46 = *(_DWORD *)(v45 + 12);
            if (!v46)
            {
              __break(0xC471u);
              JUMPOUT(0x198E71F94);
            }
            *(_BYTE *)(*(_QWORD *)v45 + 48 * v46 - 32) = v37;
            v47 = *(_QWORD *)(a1 + 8);
            v48 = *(_DWORD *)(v47 + 12);
            if (!v48)
            {
              __break(0xC471u);
              JUMPOUT(0x198E71F9CLL);
            }
            v12 = 0;
            v49 = *(_QWORD *)v47 + 48 * v48;
            *(_DWORD *)(v49 - 16) = v35;
            goto LABEL_31;
          case 5:
            if (v12 || (v316 = *(_DWORD *)(v29 + 48 * v27 + 40), v317 = v13 - v316, v13 < v316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E720B4);
            }
            v318 = v9;
            v319 = *(_DWORD *)(v29 + 48 * v28 + 16);
            v320 = v29 + 48 * v28;
            v321 = *(_DWORD *)(v320 + 44);
            v396 = *(_DWORD *)(v320 + 8);
            v322 = v13;
            JSC::Yarr::ByteCompiler::atomBackReference((_QWORD *)a1, v319, v7, v317, v321, &v396, *(_BYTE *)(v320 + 2));
LABEL_186:
            v13 = v322;
            v12 = 0;
            LODWORD(a4) = v378;
            v10 = v379;
            v5 = v376;
            a3 = v377;
            v9 = v318;
            goto LABEL_179;
          case 7:
            v60 = v29 + 48 * v27;
            v62 = *(_DWORD *)(v60 + 8);
            v61 = (unsigned int *)(v60 + 8);
            v374 = v9;
            if (v62 == 1)
            {
              v63 = v29 + 48 * v27;
              v64 = *(_BYTE *)(v63 + 32);
              if ((v64 & 1) == 0)
              {
                v65 = (uint64_t *)(v63 + 16);
                v66 = v29 + 48 * v28;
                v69 = *(_DWORD *)(v66 + 44);
                v67 = (int *)(v66 + 44);
                v68 = v69;
                v70 = *((unsigned __int8 *)v67 - 42);
                v370 = (unsigned __int8 *)v67 - 42;
                if (v70)
                {
                  v71 = 0;
                  v72 = v68 + 2;
                }
                else
                {
                  v71 = *(unsigned int *)(*v65 + 24);
                  v72 = v68;
                }
                if (v12 || (v73 = *(_DWORD *)(v29 + 48 * v28 + 40), v74 = v13 - v73, v13 < v73))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FA4);
                }
                v75 = v29 + 48 * v28;
                v76 = *(_DWORD *)(v75 + 24);
                LOBYTE(v75) = *(_BYTE *)(v75 + 1) & 1;
                v77 = *(_QWORD *)(a1 + 8);
                v78 = *(unsigned int *)(v77 + 12);
                LODWORD(v399) = 0;
                BYTE4(v399) = 22;
                BYTE5(v399) = v75 | v10;
                DWORD2(v399) = v74 + v71;
                *(_QWORD *)&v397 = v76;
                LOBYTE(v398) = 0;
                *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
                LODWORD(v75) = *(_DWORD *)(v77 + 8);
                LODWORD(v372) = v74;
                v371 = v14;
                if ((_DWORD)v78 == (_DWORD)v75)
                {
                  v266 = v13;
                  v367 = v65;
                  v365 = v72;
                  v366 = v71;
                  v267 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v77, v78 + 1, (unint64_t)&v397);
                  v72 = v365;
                  v71 = v366;
                  v65 = v367;
                  v13 = v266;
                  v268 = (_OWORD *)(*(_QWORD *)v77 + 48 * *(unsigned int *)(v77 + 12));
                  v270 = v267[1];
                  v269 = v267[2];
                  *v268 = *v267;
                  v268[1] = v270;
                  v268[2] = v269;
                }
                else
                {
                  v79 = (_OWORD *)(*(_QWORD *)v77 + 48 * v78);
                  v80 = v397;
                  v81 = v399;
                  v79[1] = v398;
                  v79[2] = v81;
                  *v79 = v80;
                }
                ++*(_DWORD *)(v77 + 12);
                v82 = *(_QWORD *)(a1 + 8);
                v83 = *(unsigned int *)(v82 + 12);
                if (!(_DWORD)v83)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FACLL);
                }
                v84 = *(_QWORD *)v82;
                *(_DWORD *)(*(_QWORD *)v82 + 48 * v83 - 16) = v68;
                LODWORD(v399) = 0;
                WORD2(v399) = 3;
                DWORD2(v399) = 0;
                LOBYTE(v398) = 0;
                *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
                BYTE8(v397) = 0;
                *(_QWORD *)&v397 = 0;
                if ((_DWORD)v83 == *(_DWORD *)(v82 + 8))
                {
                  v271 = v13;
                  v367 = v65;
                  v365 = v72;
                  v366 = v71;
                  v272 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v82, v83 + 1, (unint64_t)&v397);
                  v72 = v365;
                  v71 = v366;
                  v65 = v367;
                  v13 = v271;
                  v273 = (_OWORD *)(*(_QWORD *)v82 + 48 * *(unsigned int *)(v82 + 12));
                  v275 = v272[1];
                  v274 = v272[2];
                  *v273 = *v272;
                  v273[1] = v275;
                  v273[2] = v274;
                }
                else
                {
                  v85 = (_OWORD *)(v84 + 48 * v83);
                  v86 = v397;
                  v87 = v399;
                  v85[1] = v398;
                  v85[2] = v87;
                  *v85 = v86;
                }
                ++*(_DWORD *)(v82 + 12);
                v88 = *(_QWORD *)(a1 + 8);
                v89 = *(_DWORD *)(v88 + 12);
                if (!v89)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FB4);
                }
                *(_DWORD *)(*(_QWORD *)v88 + 48 * v89 - 16) = v72;
                *(_QWORD *)&v397 = __PAIR64__(*(_DWORD *)(a1 + 24), v78);
                v90 = *(unsigned int *)(a1 + 44);
                if ((_DWORD)v90 == *(_DWORD *)(a1 + 40))
                {
                  v227 = v13;
                  v228 = v65;
                  v229 = v71;
                  v230 = (uint64_t *)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v373, v90 + 1, (unint64_t)&v397);
                  v71 = v229;
                  v65 = v228;
                  v13 = v227;
                  v90 = *(unsigned int *)(a1 + 44);
                  v91 = *(_QWORD *)(a1 + 32);
                  v92 = *v230;
                }
                else
                {
                  v91 = *v373;
                  v92 = v397;
                }
                *(_QWORD *)(v91 + 8 * v90) = v92;
                ++*(_DWORD *)(a1 + 44);
                *(_DWORD *)(a1 + 24) = v78 + 1;
                v93 = *v65;
                v394[0] = 0;
                v94 = v13;
                v395 = v13;
                v24 = JSC::Yarr::ByteCompiler::emitDisjunction(a1, v93, v394, v71, v380);
                v6 = HIBYTE(v24);
                if (HIBYTE(v24))
                  return v24 | (v6 << 8);
                v95 = *(unsigned int *)(a1 + 44);
                if (!(_DWORD)v95)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FBCLL);
                }
                v96 = *v67;
                v97 = *(_DWORD *)(v29 + 48 * v28 + 4);
                v98 = *v61;
                LODWORD(v370) = *v370;
                v99 = *(_QWORD *)(a1 + 32) + 8 * v95;
                v100 = *(_DWORD *)(v99 - 8);
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(v99 - 4);
                *(_DWORD *)(a1 + 44) = v95 - 1;
                JSC::Yarr::ByteCompiler::closeAlternative((JSC::Yarr::ByteCompiler *)a1, v100 + 1);
                v101 = *(_QWORD *)(a1 + 8);
                v102 = *(_DWORD *)(v101 + 12);
                if (v102 <= v100)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FC4);
                }
                v103 = (unsigned int *)(*(_QWORD *)v101 + 48 * v100);
                v104 = *((_BYTE *)v103 + 37) & 1;
                v105 = *v103;
                LODWORD(v399) = 0;
                BYTE4(v399) = 23;
                BYTE5(v399) = v104;
                v106 = v372;
                DWORD2(v399) = v372;
                *(_QWORD *)&v397 = v105;
                LOBYTE(v398) = 0;
                *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
                v107 = *(unsigned int *)(v101 + 12);
                v10 = v379;
                v25 = v381;
                if ((_DWORD)v107 == *(_DWORD *)(v101 + 8))
                {
                  v276 = (__int128 *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v101, v107 + 1, (unint64_t)&v397);
                  v25 = v381;
                  v13 = v94;
                  v10 = v379;
                  v277 = (_OWORD *)(*(_QWORD *)v101 + 48 * *(unsigned int *)(v101 + 12));
                  v279 = v276[1];
                  v278 = v276[2];
                  v280 = *v276;
                  v106 = v372;
                  *v277 = v280;
                  v277[1] = v279;
                  v277[2] = v278;
                }
                else
                {
                  v13 = v94;
                  v108 = (_OWORD *)(*(_QWORD *)v101 + 48 * v107);
                  v109 = v397;
                  v110 = v399;
                  v108[1] = v398;
                  v108[2] = v110;
                  *v108 = v109;
                }
                ++*(_DWORD *)(v101 + 12);
                v111 = *(uint64_t **)(a1 + 8);
                v112 = *((_DWORD *)v111 + 3);
                if (v112 <= v100)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FCCLL);
                }
                v113 = *v111;
                v114 = *(_BYTE *)(*v111 + 48 * v100 + 37);
                if ((v114 & 4) != 0)
                {
                  if (v112 <= v102)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E720CCLL);
                  }
                  v349 = v113 + 48 * v100;
                  *(_DWORD *)(v113 + 48 * v102 + 40) = *(_DWORD *)(v349 + 40);
                  *(_DWORD *)(v349 + 40) = v106;
                }
                v115 = *(_QWORD *)a1;
                if (*(_DWORD *)(*(_QWORD *)a1 + 12) && (v114 & 1) != 0)
                {
                  v9 = v374;
                  if (*(_DWORD *)(v115 + 124) <= v105)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E720D4);
                  }
                  v350 = *(_DWORD *)(*(_QWORD *)(v115 + 112) + 4 * v105);
                  if (v350)
                  {
                    if (v112 <= v102)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E720DCLL);
                    }
                    *(_DWORD *)(v113 + 48 * v102 + 4) = v350;
                    v351 = *(_QWORD *)(a1 + 8);
                    if (*(_DWORD *)(v351 + 12) <= v100)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E720E4);
                    }
                    *(_DWORD *)(*(_QWORD *)v351 + 48 * v100 + 4) = v350;
                    v111 = *(uint64_t **)(a1 + 8);
                    v112 = *((_DWORD *)v111 + 3);
                    v9 = v374;
                    v10 = v379;
                    v13 = v94;
                    v25 = v381;
                  }
                }
                else
                {
                  v9 = v374;
                }
                LODWORD(a4) = v378;
                v5 = v376;
                a3 = v377;
                if (v112 <= v100)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FD4);
                }
                *(_DWORD *)(*v111 + 48 * v100 + 8) = v102 - v100;
                v116 = *(_QWORD *)(a1 + 8);
                v14 = v371;
                if (*(_DWORD *)(v116 + 12) <= v102)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FDCLL);
                }
                *(_DWORD *)(*(_QWORD *)v116 + 48 * v102 + 8) = v102 - v100;
                v117 = *(uint64_t **)(a1 + 8);
                if (*((_DWORD *)v117 + 3) <= v102)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FE4);
                }
                v118 = *v117;
                v119 = v118 + 48 * v102;
                *(_DWORD *)(v119 + 32) = v96;
                *(_BYTE *)(v119 + 37) = *(_BYTE *)(v119 + 37) & 0xFB | *(_BYTE *)(v118 + 48 * v100 + 37) & 4;
                v120 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v120 + 12) <= v100)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FECLL);
                }
                *(_DWORD *)(*(_QWORD *)v120 + 48 * v100 + 20) = v97;
                v121 = *(_QWORD *)(a1 + 8);
                v7 = v380;
                if (*(_DWORD *)(v121 + 12) <= v100)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FF4);
                }
                *(_DWORD *)(*(_QWORD *)v121 + 48 * v100 + 24) = v98;
                v122 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v122 + 12) <= v100)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E71FFCLL);
                }
                v123 = (char)v370;
                *(_BYTE *)(*(_QWORD *)v122 + 48 * v100 + 16) = (_BYTE)v370;
                v124 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v124 + 12) <= v102)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E72004);
                }
                *(_DWORD *)(*(_QWORD *)v124 + 48 * v102 + 20) = v97;
                v125 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v125 + 12) <= v102)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E7200CLL);
                }
                *(_DWORD *)(*(_QWORD *)v125 + 48 * v102 + 24) = v98;
                v126 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v126 + 12) <= v102)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E72014);
                }
                v12 = 0;
                *(_BYTE *)(*(_QWORD *)v126 + 48 * v102 + 16) = v123;
                goto LABEL_32;
              }
            }
            else
            {
              v64 = *(_BYTE *)(v29 + 48 * v27 + 32);
            }
            v372 = v29 + 48 * v28 + 16;
            v368 = v61;
            if ((v64 & 2) == 0)
            {
              if (v12 || (v148 = *(_DWORD *)(v29 + 48 * v28 + 40), v149 = v13 - v148, v13 < v148))
              {
                __break(0xC471u);
                JUMPOUT(0x198E72034);
              }
              v150 = v29 + 48 * v28;
              v153 = *(_DWORD *)(v150 + 44);
              v151 = (_DWORD *)(v150 + 44);
              v152 = v153;
              v154 = *(v151 - 5);
              v155 = *((_BYTE *)v151 - 43) & 1;
              v156 = *(_QWORD *)(a1 + 8);
              v157 = *(_DWORD *)(v156 + 12);
              LODWORD(v399) = 0;
              BYTE4(v399) = 22;
              BYTE5(v399) = v155 | v10;
              DWORD2(v399) = v149;
              *(_QWORD *)&v397 = v154;
              LOBYTE(v398) = 0;
              *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
              v158 = *(_DWORD *)(v156 + 8);
              LODWORD(v370) = v149;
              if (v157 == v158)
              {
                v286 = v14;
                v287 = v13;
                WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v156, (unint64_t)&v397);
                LODWORD(v13) = v287;
                v14 = v286;
              }
              else
              {
                v206 = (_OWORD *)(*(_QWORD *)v156 + 48 * v157);
                v207 = v397;
                v208 = v399;
                v206[1] = v398;
                v206[2] = v208;
                *v206 = v207;
                ++*(_DWORD *)(v156 + 12);
              }
              v159 = *(_QWORD *)(a1 + 8);
              v160 = *(_DWORD *)(v159 + 12);
              if (!v160)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7203CLL);
              }
              v161 = *(_QWORD *)v159;
              *(_DWORD *)(*(_QWORD *)v159 + 48 * v160 - 16) = v152;
              LODWORD(v399) = 0;
              WORD2(v399) = 3;
              DWORD2(v399) = 0;
              LOBYTE(v398) = 0;
              *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
              BYTE8(v397) = 0;
              *(_QWORD *)&v397 = 0;
              if (v160 == *(_DWORD *)(v159 + 8))
              {
                v288 = v14;
                v289 = v13;
                WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v159, (unint64_t)&v397);
                LODWORD(v13) = v289;
                v14 = v288;
              }
              else
              {
                v209 = (_OWORD *)(v161 + 48 * v160);
                v210 = v397;
                v211 = v399;
                v209[1] = v398;
                v209[2] = v211;
                *v209 = v210;
                ++*(_DWORD *)(v159 + 12);
              }
              v162 = *(_QWORD *)(a1 + 8);
              v163 = *(_DWORD *)(v162 + 12);
              if (!v163)
              {
                __break(0xC471u);
                JUMPOUT(0x198E72044);
              }
              *(_DWORD *)(*(_QWORD *)v162 + 48 * v163 - 16) = 0;
              *(_QWORD *)&v397 = __PAIR64__(*(_DWORD *)(a1 + 24), v157);
              v164 = *(unsigned int *)(a1 + 44);
              if ((_DWORD)v164 == *(_DWORD *)(a1 + 40))
              {
                v254 = v14;
                v255 = v13;
                v256 = (uint64_t *)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v373, v164 + 1, (unint64_t)&v397);
                LODWORD(v13) = v255;
                v14 = v254;
                v164 = *(unsigned int *)(a1 + 44);
                v257 = *(_QWORD *)(a1 + 32);
                v258 = *v256;
              }
              else
              {
                v257 = *v373;
                v258 = v397;
              }
              *(_QWORD *)(v257 + 8 * v164) = v258;
              ++*(_DWORD *)(a1 + 44);
              *(_DWORD *)(a1 + 24) = v157 + 1;
              v165 = v372;
              v166 = *(_QWORD *)v372;
              v388[0] = 0;
              v369 = v13;
              v389 = v13;
              v24 = JSC::Yarr::ByteCompiler::emitDisjunction(a1, v166, v388, 0, v380);
              v6 = HIBYTE(v24);
              if (HIBYTE(v24))
                return v24 | (v6 << 8);
              v167 = *(unsigned int *)(a1 + 44);
              if (!(_DWORD)v167)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7204CLL);
              }
              v168 = v29 + 48 * v28;
              v169 = *(_DWORD *)(v168 + 28);
              v170 = *v151;
              v365 = *(_DWORD *)(v168 + 4);
              v366 = *v368;
              LODWORD(v367) = v170;
              LODWORD(v368) = *(unsigned __int8 *)(v168 + 2);
              v171 = *(_DWORD *)(*(_QWORD *)v165 + 28);
              v172 = *(_QWORD *)(a1 + 32) + 8 * v167;
              v173 = *(_DWORD *)(v172 - 8);
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(v172 - 4);
              *(_DWORD *)(a1 + 44) = v167 - 1;
              v56 = v173 + 1;
              JSC::Yarr::ByteCompiler::closeAlternative((JSC::Yarr::ByteCompiler *)a1, v173 + 1);
              v174 = *(_QWORD *)(a1 + 8);
              v175 = *(_DWORD *)(v174 + 12);
              if (v175 <= v173)
              {
                __break(0xC471u);
                JUMPOUT(0x198E72054);
              }
              v176 = (unsigned int *)(*(_QWORD *)v174 + 48 * v173);
              v177 = *((_BYTE *)v176 + 37);
              v372 = *v176;
              v178 = v169 - v372 + 1;
              v179 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v179 = 0;
              *(_QWORD *)(v179 + 8) = 0;
              *(_DWORD *)(v179 + 16) = v178;
              *(_DWORD *)(v179 + 20) = v171;
              v400 = v179;
              v180 = v175 - v56 + 2;
              if (v175 - (_DWORD)v56 != -2)
              {
                if (v180 >= 0x5555556)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E7205CLL);
                }
                v181 = 48 * v180;
                v182 = WTF::fastMalloc((WTF *)(48 * v180));
                *(_DWORD *)(v179 + 8) = (v181 & 0xFFFFFFF0) / 0x30;
                *(_QWORD *)v179 = v182;
              }
              LODWORD(v399) = 0;
              BYTE4(v399) = 6;
              BYTE5(v399) &= 0xF8u;
              DWORD2(v399) = 0;
              LOBYTE(v398) = 0;
              *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
              v183 = *(_DWORD *)(v179 + 12);
              if (v183 == *(_DWORD *)(v179 + 8))
              {
                WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v179, (unint64_t)&v397);
                v292 = 48;
              }
              else
              {
                v292 = 48;
                v212 = (_OWORD *)(*(_QWORD *)v179 + 48 * v183);
                v213 = v397;
                v214 = v399;
                v212[1] = v398;
                v212[2] = v214;
                *v212 = v213;
                ++*(_DWORD *)(v179 + 12);
              }
              a4 = v378;
              v10 = v379;
              v5 = v376;
              a3 = v377;
              v9 = v374;
              v13 = v369;
              v25 = v381;
              if (v175 > v56)
              {
                v58 = ~v173 + v175;
                v57 = 48 * (v173 + 1);
                do
                {
                  v50 = *(_QWORD *)(a1 + 8);
                  if (v56 >= *(unsigned int *)(v50 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E71F78);
                  }
                  v51 = (__int128 *)(*(_QWORD *)v50 + v57);
                  v52 = *(_DWORD *)(v179 + 12);
                  if (v52 == *(_DWORD *)(v179 + 8))
                  {
                    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v179, (unint64_t)v51);
                    v25 = v381;
                    v292 = 48;
                    v13 = v369;
                    a4 = v378;
                    v10 = v379;
                    v9 = v374;
                    v5 = v376;
                    a3 = v377;
                  }
                  else
                  {
                    v53 = (_OWORD *)(*(_QWORD *)v179 + 48 * v52);
                    v54 = *v51;
                    v55 = v51[2];
                    v53[1] = v51[1];
                    v53[2] = v55;
                    *v53 = v54;
                    ++*(_DWORD *)(v179 + 12);
                  }
                  ++v56;
                  v57 += 48;
                  --v58;
                }
                while (v58);
              }
              LODWORD(v399) = 0;
              WORD2(v399) = 7;
              DWORD2(v399) = 0;
              LOBYTE(v398) = 0;
              *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
              v59 = *(_DWORD *)(v179 + 12);
              if (v59 == *(_DWORD *)(v179 + 8))
              {
                WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v179, (unint64_t)&v397);
                v25 = v381;
                v292 = 48;
                v13 = v369;
                a4 = v378;
                v10 = v379;
                v9 = v374;
                v5 = v376;
                a3 = v377;
              }
              else
              {
                v215 = (_OWORD *)(*(_QWORD *)v179 + 48 * v59);
                v216 = v397;
                v217 = v399;
                v215[1] = v398;
                v215[2] = v217;
                *v215 = v216;
                ++*(_DWORD *)(v179 + 12);
              }
              v7 = v380;
              v184 = (int)v370;
              v185 = v372;
              v186 = *(_QWORD *)(a1 + 8);
              *(_DWORD *)(v186 + 12) = v173;
              LODWORD(v399) = 0;
              BYTE4(v399) = 21;
              BYTE5(v399) = v177 & 1;
              DWORD2(v399) = v184;
              *(_QWORD *)&v397 = v185;
              *((_QWORD *)&v397 + 1) = v179;
              LOBYTE(v398) = 0;
              *(_QWORD *)((char *)&v398 + 4) = 0x100000001;
              if (v173 == *(_DWORD *)(v186 + 8))
              {
                WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v186, (unint64_t)&v397);
                v25 = v381;
                v292 = 48;
                v13 = v369;
                a4 = v378;
                v10 = v379;
                v9 = v374;
                v5 = v376;
                a3 = v377;
              }
              else
              {
                v218 = (_OWORD *)(*(_QWORD *)v186 + 48 * v173);
                v219 = v397;
                v220 = v399;
                v218[1] = v398;
                v218[2] = v220;
                *v218 = v219;
                ++*(_DWORD *)(v186 + 12);
              }
              v187 = *(_QWORD *)(a1 + 8);
              v188 = *(_DWORD *)(v187 + 12);
              if (!v188)
              {
                __break(0xC471u);
                JUMPOUT(0x198E72064);
              }
              v189 = (uint64_t *)(a1 + 48);
              *(_BYTE *)(*(_QWORD *)v187 + 48 * v188 - 11) = *(_BYTE *)(*(_QWORD *)v187 + 48 * v188 - 11) & 0xFB | v177 & 4;
              v190 = *(unsigned int *)(a1 + 60);
              if ((_DWORD)v190 == *(_DWORD *)(a1 + 56))
              {
                v281 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v189, v190 + 1, (unint64_t)&v400);
                v25 = v381;
                v292 = 48;
                v13 = v369;
                a4 = v378;
                v10 = v379;
                v9 = v374;
                v5 = v376;
                a3 = v377;
                v190 = *(unsigned int *)(a1 + 60);
                v282 = *(_QWORD *)(a1 + 48);
                v283 = *v281;
                *v281 = 0;
                *(_QWORD *)(v282 + 8 * v190) = v283;
              }
              else
              {
                v225 = *v189;
                v400 = 0;
                *(_QWORD *)(v225 + 8 * v190) = v179;
              }
              *(_DWORD *)(a1 + 60) = v190 + 1;
              v191 = *(_QWORD *)a1;
              if (*(_DWORD *)(*(_QWORD *)a1 + 12) && (v177 & 1) != 0)
              {
                if (*(_DWORD *)(v191 + 124) <= v185)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E7209CLL);
                }
                v239 = *(_DWORD *)(*(_QWORD *)(v191 + 112) + 4 * v185);
                if (v239)
                {
                  v240 = *(_QWORD *)(a1 + 8);
                  if (*(_DWORD *)(v240 + 12) <= v173)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E720A4);
                  }
                  *(_DWORD *)(*(_QWORD *)v240 + 48 * v173 + 4) = v239;
                }
              }
              v192 = *(_QWORD *)(a1 + 8);
              if (*(_DWORD *)(v192 + 12) <= v173)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7206CLL);
              }
              *(_DWORD *)(*(_QWORD *)v192 + 48 * v173 + 20) = v365;
              v193 = *(_QWORD *)(a1 + 8);
              if (*(_DWORD *)(v193 + 12) <= v173)
              {
                __break(0xC471u);
                JUMPOUT(0x198E72074);
              }
              *(_DWORD *)(*(_QWORD *)v193 + 48 * v173 + 24) = v366;
              v194 = *(_QWORD *)(a1 + 8);
              if (*(_DWORD *)(v194 + 12) <= v173)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7207CLL);
              }
              *(_BYTE *)(*(_QWORD *)v194 + 48 * v173 + 16) = (_BYTE)v368;
              v195 = *(_QWORD *)(a1 + 8);
              if (*(_DWORD *)(v195 + 12) <= v173)
              {
                __break(0xC471u);
                JUMPOUT(0x198E72084);
              }
              *(_DWORD *)(*(_QWORD *)v195 + 48 * v173 + 32) = (_DWORD)v367;
              v196 = v400;
              v400 = 0;
              if (v196)
              {
                v197 = *(_QWORD *)v196;
                if (*(_QWORD *)v196)
                {
                  *(_QWORD *)v196 = 0;
                  *(_DWORD *)(v196 + 8) = 0;
                  WTF::fastFree(v197, v51, (uint64_t)a3, a4, 48, v25, v290, v291);
                }
                WTF::fastFree(v196, v51, (uint64_t)a3, a4, v292, v25, v290, v291);
                LODWORD(a4) = v378;
                v10 = v379;
                v5 = v376;
                a3 = v377;
                v9 = v374;
                v13 = v369;
                v25 = v381;
              }
LABEL_90:
              v12 = 0;
              goto LABEL_32;
            }
            v371 = v14;
            if (v12 || (v335 = *(_DWORD *)(v29 + 48 * v28 + 40), v336 = v13 - v335, v13 < v335))
            {
              __break(0xC471u);
              JUMPOUT(0x198E720C4);
            }
            v337 = v29 + 48 * v28;
            v339 = *(_DWORD *)(v337 + 44);
            v338 = (int *)(v337 + 44);
            v340 = v13;
            JSC::Yarr::ByteCompiler::atomParenthesesTerminalBegin(a1, *(v338 - 5), v7, *((_BYTE *)v338 - 43) & 1, v336, v339, v339 + 1);
            v341 = *(_QWORD *)v372;
            v392[0] = 0;
            v393 = v340;
            v24 = JSC::Yarr::ByteCompiler::emitDisjunction(a1, v341, v392, 0, v7);
            v6 = HIBYTE(v24);
            if (HIBYTE(v24))
              return v24 | (v6 << 8);
            v342 = *v338;
            v343 = v29 + 48 * v28;
            v344 = *(_DWORD *)(v343 + 4);
            v390 = *v368;
            v391 = v344;
            JSC::Yarr::ByteCompiler::atomParenthesesTerminalEnd((uint64_t *)a1, v336, v342, &v391, &v390, *(_BYTE *)(v343 + 2));
            v12 = 0;
            LODWORD(a4) = v378;
            v10 = v379;
            v5 = v376;
            a3 = v377;
            v9 = v374;
            v13 = v340;
            goto LABEL_178;
          case 8:
            if (v12 || (v297 = *(_DWORD *)(v29 + 48 * v27 + 40), v298 = v13 - v297, v13 < v297))
            {
              __break(0xC471u);
              JUMPOUT(0x198E720ACLL);
            }
            v299 = v29 + 48 * v28;
            v302 = *(_DWORD *)(v299 + 44);
            v301 = (int *)(v299 + 44);
            v300 = v302;
            v303 = v302 + 1;
            v304 = v29 + 48 * v28;
            v307 = *(unsigned __int8 *)(v304 + 1);
            v306 = (unsigned __int8 *)(v304 + 1);
            v305 = v307;
            v308 = (uint64_t *)(v306 + 15);
            v309 = *(_DWORD *)(*(_QWORD *)(v306 + 15) + 24);
            v374 = v9;
            v371 = v14;
            if ((v307 & 4) != 0)
            {
              v369 = v13;
              if (v309)
              {
                v352 = v298 + v309;
                if (__CFADD__(v298, v309))
                  goto LABEL_252;
                if ((v305 & 2) != 0)
                {
                  v298 += v309;
                }
                else
                {
                  v353 = v303;
                  if (v352 > v13)
                  {
                    JSC::Yarr::ByteCompiler::haveCheckedInput(*(_QWORD *)(a1 + 8), v298 + v309);
                    v305 = *v306;
                    v300 = *v301;
                  }
                  v298 = v352;
                  v303 = v353;
                }
              }
              else
              {
                v352 = v298;
              }
              JSC::Yarr::ByteCompiler::atomParentheticalAssertionBegin(a1, *(_DWORD *)(v29 + 48 * v28 + 24), (v305 >> 1) & 1, (v305 & 4) != 0, v300, v303);
              v354 = *v308;
              v383[0] = 0;
              v384 = v298;
              v24 = JSC::Yarr::ByteCompiler::emitDisjunction(a1, v354, v383, v352, (*v306 >> 2) & 1);
              v6 = HIBYTE(v24);
              if (HIBYTE(v24))
                return v24 | (v6 << 8);
              v355 = v29 + 48 * v28;
              v356 = *(_DWORD *)(v355 + 28);
              v357 = *v301;
              v382 = *(_DWORD *)(v355 + 8);
              JSC::Yarr::ByteCompiler::atomParentheticalAssertionEnd(a1, v356, v357, &v382, *(_BYTE *)(v355 + 2));
              v12 = 0;
              v10 = v379;
              v7 = v380;
              LODWORD(a4) = v378;
              v5 = v376;
              a3 = v377;
              v9 = v374;
              v13 = v369;
            }
            else
            {
              v310 = v13;
              v311 = v298 - v309;
              if (v298 > v309)
              {
                LODWORD(v372) = v303;
                JSC::Yarr::ByteCompiler::uncheckInput(*(_QWORD *)(a1 + 8), v298 - v309);
                v22 = v310 >= v311;
                v310 = v310 - v311;
                if (!v22)
                  goto LABEL_252;
                v305 = *v306;
                v300 = *v301;
                v303 = v372;
              }
              else
              {
                v311 = 0;
              }
              JSC::Yarr::ByteCompiler::atomParentheticalAssertionBegin(a1, *(_DWORD *)(v29 + 48 * v28 + 24), (v305 >> 1) & 1, (v305 & 4) != 0, v300, v303);
              v312 = *v308;
              v386[0] = 0;
              v387 = v310;
              v24 = JSC::Yarr::ByteCompiler::emitDisjunction(a1, v312, v386, v298 - v311, (*v306 >> 2) & 1);
              v6 = HIBYTE(v24);
              if (HIBYTE(v24))
                return v24 | (v6 << 8);
              v313 = v29 + 48 * v28;
              v314 = *(_DWORD *)(v313 + 28);
              v315 = *v301;
              v385 = *(_DWORD *)(v313 + 8);
              JSC::Yarr::ByteCompiler::atomParentheticalAssertionEnd(a1, v314, v315, &v385, *(_BYTE *)(v313 + 2));
              if (v311)
              {
                JSC::Yarr::ByteCompiler::checkInput(*(_QWORD *)(a1 + 8), v311);
                v13 = v310 + v311;
                v7 = v380;
                if (__CFADD__((_DWORD)v310, v311))
                {
LABEL_252:
                  v6 = 1;
                  LOBYTE(v24) = 27;
                  return v24 | (v6 << 8);
                }
                v12 = 0;
                LODWORD(a4) = v378;
                v10 = v379;
                v5 = v376;
                a3 = v377;
                v9 = v374;
              }
              else
              {
                v12 = 0;
                v10 = v379;
                v7 = v380;
                LODWORD(a4) = v378;
                v5 = v376;
                a3 = v377;
                v9 = v374;
                v13 = v310;
              }
            }
LABEL_178:
            v14 = v371;
LABEL_179:
            v25 = v381;
LABEL_32:
            if (++v26 == v25)
              goto LABEL_127;
            break;
          case 9:
            v332 = *(unsigned __int8 *)(v29 + 48 * v27 + 16);
            v333 = v9;
            v334 = v13;
            JSC::Yarr::ByteCompiler::assertionDotStarEnclosure(*(_QWORD *)(a1 + 8), v332 & 1, (v332 >> 1) & 1);
            v25 = v381;
            v13 = v334;
            LODWORD(a4) = v378;
            v10 = v379;
            v9 = v333;
            v5 = v376;
            a3 = v377;
            goto LABEL_32;
          default:
            goto LABEL_32;
        }
      }
    }
LABEL_127:
    if ((_DWORD)v7 == 1 && v375)
    {
      v329 = v9;
      JSC::Yarr::ByteCompiler::uncheckInput(*(_QWORD *)(a1 + 8), v375);
      LODWORD(a4) = v378;
      v10 = v379;
      v9 = v329;
      v5 = v376;
      a3 = v377;
    }
    ++v9;
  }
  while (v9 < *(unsigned int *)(v5 + 12));
  LOBYTE(v24) = 0;
  v6 = 0;
  return v24 | (v6 << 8);
}

__n128 WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v6 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 32) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 48 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x5555556)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 48 * v8;
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 48 * v9;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20;
        v22 = v20[2];
        v11[1] = v20[1];
        v11[2] = v22;
        *v11 = v21;
        v11 += 3;
        v20 += 3;
        v19 -= 48;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 48 * v4;
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 48 * v7;
        v18 = (__int128 *)v6;
        do
        {
          v19 = *v18;
          v20 = v18[2];
          v9[1] = v18[1];
          v9[2] = v20;
          *v9 = v19;
          v9 += 3;
          v18 += 3;
          v17 -= 48;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::Yarr::ByteCompiler::alternativeBodyDisjunction(JSC::Yarr::ByteCompiler *this, char a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_DWORD *)(v2 + 12);
  v4 = *((_DWORD *)this + 6);
  if (v3 <= v4)
  {
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)v2 + 48 * v4) = v3 - v4;
    v6 = *((_QWORD *)this + 1);
    LODWORD(v13) = 0;
    WORD2(v13) = 1;
    DWORD2(v13) = 0;
    LOBYTE(v12) = 0;
    *(_QWORD *)((char *)&v12 + 4) = 0x100000001;
    *(_QWORD *)&v11 = 0;
    BYTE8(v11) = a2;
    v7 = *(_DWORD *)(v6 + 12);
    if (v7 == *(_DWORD *)(v6 + 8))
    {
      WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v6, (unint64_t)&v11);
    }
    else
    {
      v8 = (_OWORD *)(*(_QWORD *)v6 + 48 * v7);
      v9 = v11;
      v10 = v13;
      v8[1] = v12;
      v8[2] = v10;
      *v8 = v9;
      ++*(_DWORD *)(v6 + 12);
    }
    *((_DWORD *)this + 6) = v3;
  }
}

uint64_t JSC::Yarr::ByteCompiler::haveCheckedInput(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = this;
  LODWORD(v12) = 0;
  WORD2(v12) = 30;
  DWORD2(v12) = 0;
  LOBYTE(v11) = 0;
  *(_QWORD *)((char *)&v11 + 4) = 0x100000001;
  LODWORD(v10) = a2;
  v3 = *(unsigned int *)(this + 12);
  if ((_DWORD)v3 == *(_DWORD *)(this + 8))
  {
    this = WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, v3 + 1, (unint64_t)&v10);
    v7 = (_OWORD *)(*(_QWORD *)v2 + 48 * *(unsigned int *)(v2 + 12));
    v9 = *(_OWORD *)(this + 16);
    v8 = *(_OWORD *)(this + 32);
    *v7 = *(_OWORD *)this;
    v7[1] = v9;
    v7[2] = v8;
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)this + 48 * v3);
    v5 = v10;
    v6 = v12;
    v4[1] = v11;
    v4[2] = v6;
    *v4 = v5;
  }
  ++*(_DWORD *)(v2 + 12);
  return this;
}

uint64_t JSC::Yarr::ByteCompiler::checkInput(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = this;
  LODWORD(v12) = 0;
  WORD2(v12) = 28;
  DWORD2(v12) = 0;
  LOBYTE(v11) = 0;
  *(_QWORD *)((char *)&v11 + 4) = 0x100000001;
  LODWORD(v10) = a2;
  v3 = *(unsigned int *)(this + 12);
  if ((_DWORD)v3 == *(_DWORD *)(this + 8))
  {
    this = WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, v3 + 1, (unint64_t)&v10);
    v7 = (_OWORD *)(*(_QWORD *)v2 + 48 * *(unsigned int *)(v2 + 12));
    v9 = *(_OWORD *)(this + 16);
    v8 = *(_OWORD *)(this + 32);
    *v7 = *(_OWORD *)this;
    v7[1] = v9;
    v7[2] = v8;
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)this + 48 * v3);
    v5 = v10;
    v6 = v12;
    v4[1] = v11;
    v4[2] = v6;
    *v4 = v5;
  }
  ++*(_DWORD *)(v2 + 12);
  return this;
}

uint64_t JSC::Yarr::ByteCompiler::assertionWordBoundary(uint64_t result, int a2, char a3, int a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = result;
  LODWORD(v15) = 0;
  BYTE4(v15) = 10;
  if (a2)
    v5 = 2;
  else
    v5 = 0;
  LOBYTE(v14) = 0;
  *(_QWORD *)((char *)&v14 + 4) = 0x100000001;
  BYTE5(v15) = v5 & 0xFB | (4 * (a3 & 1));
  DWORD2(v15) = a4;
  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + 1, (unint64_t)&v13);
    v10 = (_OWORD *)(*(_QWORD *)v4 + 48 * *(unsigned int *)(v4 + 12));
    v12 = *(_OWORD *)(result + 16);
    v11 = *(_OWORD *)(result + 32);
    *v10 = *(_OWORD *)result;
    v10[1] = v12;
    v10[2] = v11;
  }
  else
  {
    v7 = (_OWORD *)(*(_QWORD *)result + 48 * v6);
    v8 = v13;
    v9 = v15;
    v7[1] = v14;
    v7[2] = v9;
    *v7 = v8;
  }
  ++*(_DWORD *)(v4 + 12);
  return result;
}

void JSC::Yarr::ByteCompiler::atomBackReference(_QWORD *a1, unsigned int a2, char a3, int a4, int a5, _DWORD *a6, char a7)
{
  uint64_t v12;
  unsigned int v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v12 = a1[1];
  LODWORD(v29) = 0;
  BYTE4(v29) = 20;
  BYTE5(v29) = 4 * (a3 & 1);
  DWORD2(v29) = a4;
  *(_QWORD *)&v27 = a2;
  LOBYTE(v28) = 0;
  *(_QWORD *)((char *)&v28 + 4) = 0x100000001;
  v13 = *(_DWORD *)(v12 + 12);
  if (v13 == *(_DWORD *)(v12 + 8))
  {
    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v12, (unint64_t)&v27);
  }
  else
  {
    v14 = (_OWORD *)(*(_QWORD *)v12 + 48 * v13);
    v15 = v27;
    v16 = v29;
    v14[1] = v28;
    v14[2] = v16;
    *v14 = v15;
    ++*(_DWORD *)(v12 + 12);
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 12))
  {
    if (*(_DWORD *)(v17 + 124) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198E727C4);
    }
    v24 = *(_DWORD *)(*(_QWORD *)(v17 + 112) + 4 * a2);
    if (v24)
    {
      v25 = a1[1];
      v26 = *(_DWORD *)(v25 + 12);
      if (!v26)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x198E727ACLL);
      }
      *(_DWORD *)(*(_QWORD *)v25 + 48 * v26 - 44) = v24;
    }
  }
  v18 = a1[1];
  v19 = *(_DWORD *)(v18 + 12);
  if (!v19)
    goto LABEL_17;
  *(_DWORD *)(*(_QWORD *)v18 + 48 * v19 - 24) = *a6;
  v20 = a1[1];
  v21 = *(_DWORD *)(v20 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x198E727B4);
  }
  *(_BYTE *)(*(_QWORD *)v20 + 48 * v21 - 32) = a7;
  v22 = a1[1];
  v23 = *(_DWORD *)(v22 + 12);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x198E727BCLL);
  }
  *(_DWORD *)(*(_QWORD *)v22 + 48 * v23 - 16) = a5;
}

uint64_t *JSC::Yarr::ByteCompiler::atomParenthesesTerminalBegin(uint64_t a1, unsigned int a2, char a3, char a4, int a5, int a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(v10 + 12);
  LODWORD(v37) = 0;
  BYTE4(v37) = 24;
  BYTE5(v37) = a4 & 0xFB | (4 * (a3 & 1));
  DWORD2(v37) = a5;
  *(_QWORD *)&v35 = a2;
  LOBYTE(v36) = 0;
  *(_QWORD *)((char *)&v36 + 4) = 0x100000001;
  if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
  {
    v27 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v35);
    v28 = (_OWORD *)(*(_QWORD *)v10 + 48 * *(unsigned int *)(v10 + 12));
    v30 = v27[1];
    v29 = v27[2];
    *v28 = *v27;
    v28[1] = v30;
    v28[2] = v29;
  }
  else
  {
    v12 = (_OWORD *)(*(_QWORD *)v10 + 48 * v11);
    v13 = v35;
    v14 = v37;
    v12[1] = v36;
    v12[2] = v14;
    *v12 = v13;
  }
  ++*(_DWORD *)(v10 + 12);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(unsigned int *)(v15 + 12);
  if (!(_DWORD)v16)
    goto LABEL_13;
  v17 = *(_QWORD *)v15;
  *(_DWORD *)(*(_QWORD *)v15 + 48 * v16 - 16) = a6;
  LODWORD(v37) = 0;
  WORD2(v37) = 3;
  DWORD2(v37) = 0;
  LOBYTE(v36) = 0;
  *(_QWORD *)((char *)&v36 + 4) = 0x100000001;
  BYTE8(v35) = 0;
  *(_QWORD *)&v35 = 0;
  if ((_DWORD)v16 == *(_DWORD *)(v15 + 8))
  {
    v31 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v35);
    v32 = (_OWORD *)(*(_QWORD *)v15 + 48 * *(unsigned int *)(v15 + 12));
    v34 = v31[1];
    v33 = v31[2];
    *v32 = *v31;
    v32[1] = v34;
    v32[2] = v33;
  }
  else
  {
    v18 = (_OWORD *)(v17 + 48 * v16);
    v19 = v35;
    v20 = v37;
    v18[1] = v36;
    v18[2] = v20;
    *v18 = v19;
  }
  ++*(_DWORD *)(v15 + 12);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_DWORD *)(v21 + 12);
  if (!v22)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198E729BCLL);
  }
  *(_DWORD *)(*(_QWORD *)v21 + 48 * v22 - 16) = a7;
  result = (uint64_t *)(a1 + 32);
  *(_QWORD *)&v35 = __PAIR64__(*(_DWORD *)(a1 + 24), v11);
  v24 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v24 == *(_DWORD *)(a1 + 40))
  {
    result = (uint64_t *)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v24 + 1, (unint64_t)&v35);
    v24 = *(unsigned int *)(a1 + 44);
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *result;
  }
  else
  {
    v25 = *result;
    v26 = v35;
  }
  *(_QWORD *)(v25 + 8 * v24) = v26;
  ++*(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 24) = v11 + 1;
  return result;
}

void JSC::Yarr::ByteCompiler::atomParenthesesTerminalEnd(uint64_t *a1, int a2, int a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  char v19;
  int v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v6 = *((unsigned int *)a1 + 11);
  if (!(_DWORD)v6)
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  v13 = a1[4] + 8 * v6;
  v14 = *(_DWORD *)(v13 - 8);
  *((_DWORD *)a1 + 6) = *(_DWORD *)(v13 - 4);
  *((_DWORD *)a1 + 11) = v6 - 1;
  JSC::Yarr::ByteCompiler::closeAlternative((JSC::Yarr::ByteCompiler *)a1, v14 + 1);
  v15 = a1[1];
  v16 = *(unsigned int *)(v15 + 12);
  if (v16 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72C98);
  }
  v17 = *(_QWORD *)v15;
  v18 = (unsigned int *)(*(_QWORD *)v15 + 48 * v14);
  v19 = *((_BYTE *)v18 + 37);
  if ((v19 & 4) != 0)
    v20 = 0;
  else
    v20 = a2;
  v21 = *v18;
  LODWORD(v45) = 0;
  BYTE4(v45) = 25;
  BYTE5(v45) = v19 & 1;
  DWORD2(v45) = v20;
  *(_QWORD *)&v43 = v21;
  LOBYTE(v44) = 0;
  *(_QWORD *)((char *)&v44 + 4) = 0x100000001;
  if ((_DWORD)v16 == *(_DWORD *)(v15 + 8))
  {
    v39 = (_OWORD *)WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v43);
    v40 = (_OWORD *)(*(_QWORD *)v15 + 48 * *(unsigned int *)(v15 + 12));
    v42 = v39[1];
    v41 = v39[2];
    *v40 = *v39;
    v40[1] = v42;
    v40[2] = v41;
  }
  else
  {
    v22 = (_OWORD *)(v17 + 48 * v16);
    v23 = v43;
    v24 = v45;
    v22[1] = v44;
    v22[2] = v24;
    *v22 = v23;
  }
  ++*(_DWORD *)(v15 + 12);
  v25 = a1[1];
  if (*(_DWORD *)(v25 + 12) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CA0);
  }
  *(_DWORD *)(*(_QWORD *)v25 + 48 * v14 + 8) = v16 - v14;
  v26 = a1[1];
  if (*(_DWORD *)(v26 + 12) <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CA8);
  }
  *(_DWORD *)(*(_QWORD *)v26 + 48 * v16 + 8) = v16 - v14;
  v27 = (uint64_t *)a1[1];
  v28 = *((_DWORD *)v27 + 3);
  if (v28 <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CB0);
  }
  v29 = *v27;
  v30 = *v27 + 48 * v16;
  *(_DWORD *)(v30 + 32) = a3;
  v31 = *a1;
  if (*(_DWORD *)(*a1 + 12) && (*(_BYTE *)(v29 + 48 * v14 + 37) & 1) != 0)
  {
    if (*(_DWORD *)(v31 + 124) <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198E72CE8);
    }
    v32 = *(_DWORD *)(*(_QWORD *)(v31 + 112) + 4 * v21);
    if (v32)
    {
      *(_DWORD *)(v30 + 4) = v32;
      v33 = a1[1];
      if (*(_DWORD *)(v33 + 12) > v14)
      {
        *(_DWORD *)(*(_QWORD *)v33 + 48 * v14 + 4) = v32;
        v27 = (uint64_t *)a1[1];
        v28 = *((_DWORD *)v27 + 3);
        goto LABEL_17;
      }
      __break(0xC471u);
LABEL_38:
      JUMPOUT(0x198E72C90);
    }
  }
LABEL_17:
  if (v28 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CB8);
  }
  *(_DWORD *)(*v27 + 48 * v14 + 20) = *a4;
  v34 = a1[1];
  if (*(_DWORD *)(v34 + 12) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CC0);
  }
  *(_DWORD *)(*(_QWORD *)v34 + 48 * v14 + 24) = *a5;
  v35 = a1[1];
  if (*(_DWORD *)(v35 + 12) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CC8);
  }
  *(_BYTE *)(*(_QWORD *)v35 + 48 * v14 + 16) = a6;
  v36 = a1[1];
  if (*(_DWORD *)(v36 + 12) <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CD0);
  }
  *(_DWORD *)(*(_QWORD *)v36 + 48 * v16 + 20) = *a4;
  v37 = a1[1];
  if (*(_DWORD *)(v37 + 12) <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CD8);
  }
  *(_DWORD *)(*(_QWORD *)v37 + 48 * v16 + 24) = *a5;
  v38 = a1[1];
  if (*(_DWORD *)(v38 + 12) <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198E72CE0);
  }
  *(_BYTE *)(*(_QWORD *)v38 + 48 * v16 + 16) = a6;
}

uint64_t JSC::Yarr::ByteCompiler::uncheckInput(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = this;
  LODWORD(v12) = 0;
  WORD2(v12) = 29;
  DWORD2(v12) = 0;
  LOBYTE(v11) = 0;
  *(_QWORD *)((char *)&v11 + 4) = 0x100000001;
  LODWORD(v10) = a2;
  v3 = *(unsigned int *)(this + 12);
  if ((_DWORD)v3 == *(_DWORD *)(this + 8))
  {
    this = WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, v3 + 1, (unint64_t)&v10);
    v7 = (_OWORD *)(*(_QWORD *)v2 + 48 * *(unsigned int *)(v2 + 12));
    v9 = *(_OWORD *)(this + 16);
    v8 = *(_OWORD *)(this + 32);
    *v7 = *(_OWORD *)this;
    v7[1] = v9;
    v7[2] = v8;
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)this + 48 * v3);
    v5 = v10;
    v6 = v12;
    v4[1] = v11;
    v4[2] = v6;
    *v4 = v5;
  }
  ++*(_DWORD *)(v2 + 12);
  return this;
}

void JSC::Yarr::ByteCompiler::atomParentheticalAssertionBegin(uint64_t a1, int a2, int a3, char a4, int a5, int a6)
{
  uint64_t v9;
  unsigned int v10;
  char v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v9 + 12);
  LODWORD(v26) = 0;
  BYTE4(v26) = 26;
  DWORD2(v26) = 0;
  LOBYTE(v25) = 0;
  *(_QWORD *)((char *)&v25 + 4) = 0x100000001;
  LODWORD(v24) = a2;
  if (a3)
    v11 = 2;
  else
    v11 = 0;
  BYTE5(v26) = v11 & 0xFB | (4 * (a4 & 1));
  if (v10 == *(_DWORD *)(v9 + 8))
  {
    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v9, (unint64_t)&v24);
  }
  else
  {
    v12 = (_OWORD *)(*(_QWORD *)v9 + 48 * v10);
    v13 = v24;
    v14 = v26;
    v12[1] = v25;
    v12[2] = v14;
    *v12 = v13;
    ++*(_DWORD *)(v9 + 12);
  }
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_DWORD *)(v15 + 12);
  if (!v16)
    goto LABEL_16;
  v17 = *(_QWORD *)v15;
  *(_DWORD *)(*(_QWORD *)v15 + 48 * v16 - 16) = a5;
  LODWORD(v26) = 0;
  WORD2(v26) = 3;
  DWORD2(v26) = 0;
  LOBYTE(v25) = 0;
  *(_QWORD *)((char *)&v25 + 4) = 0x100000001;
  BYTE8(v24) = 0;
  *(_QWORD *)&v24 = 0;
  if (v16 == *(_DWORD *)(v15 + 8))
  {
    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v15, (unint64_t)&v24);
  }
  else
  {
    v18 = (_OWORD *)(v17 + 48 * v16);
    v19 = v24;
    v20 = v26;
    v18[1] = v25;
    v18[2] = v20;
    *v18 = v19;
    ++*(_DWORD *)(v15 + 12);
  }
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_DWORD *)(v21 + 12);
  if (!v22)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198E72F30);
  }
  *(_DWORD *)(*(_QWORD *)v21 + 48 * v22 - 16) = a6;
  *(_QWORD *)&v24 = __PAIR64__(*(_DWORD *)(a1 + 24), v10);
  v23 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 40))
  {
    WTF::Vector<JSC::Yarr::ByteCompiler::ParenthesesStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteCompiler::ParenthesesStackEntry>(a1 + 32, (unint64_t)&v24);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v23) = v24;
    ++*(_DWORD *)(a1 + 44);
  }
  *(_DWORD *)(a1 + 24) = v10 + 1;
}

void JSC::Yarr::ByteCompiler::atomParentheticalAssertionEnd(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v5)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(a1 + 32) + 8 * v5;
  v12 = *(_DWORD *)(v11 - 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v11 - 4);
  *(_DWORD *)(a1 + 44) = v5 - 1;
  JSC::Yarr::ByteCompiler::closeAlternative((JSC::Yarr::ByteCompiler *)a1, v12 + 1);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_DWORD *)(v13 + 12);
  if (v14 <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198E73118);
  }
  v15 = *(_QWORD *)v13;
  v16 = *(_QWORD *)v13 + 48 * v12;
  v17 = *(_BYTE *)(v16 + 37);
  LODWORD(v16) = *(_DWORD *)v16;
  LODWORD(v30) = 0;
  BYTE4(v30) = 27;
  DWORD2(v30) = 0;
  LOBYTE(v29) = 0;
  *(_QWORD *)((char *)&v29 + 4) = 0x100000001;
  *(_QWORD *)&v28 = __PAIR64__(a2, v16);
  BYTE5(v30) = v17 & 6;
  if (v14 == *(_DWORD *)(v13 + 8))
  {
    WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v13, (unint64_t)&v28);
  }
  else
  {
    v18 = (_OWORD *)(v15 + 48 * v14);
    v19 = v28;
    v20 = v30;
    v18[1] = v29;
    v18[2] = v20;
    *v18 = v19;
    ++*(_DWORD *)(v13 + 12);
  }
  v21 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v21 + 12) <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198E73120);
  }
  *(_DWORD *)(*(_QWORD *)v21 + 48 * v12 + 8) = v14 - v12;
  v22 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v22 + 12) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E73128);
  }
  *(_DWORD *)(*(_QWORD *)v22 + 48 * v14 + 8) = v14 - v12;
  v23 = *(uint64_t **)(a1 + 8);
  if (*((_DWORD *)v23 + 3) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E73130);
  }
  v24 = *v23;
  *(_DWORD *)(v24 + 48 * v14 + 32) = a3;
  *(_DWORD *)(v24 + 48 * v12 + 24) = *a4;
  v25 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v25 + 12) <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198E73138);
  }
  *(_BYTE *)(*(_QWORD *)v25 + 48 * v12 + 16) = a5;
  v26 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v26 + 12) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198E73140);
  }
  *(_DWORD *)(*(_QWORD *)v26 + 48 * v14 + 24) = *a4;
  v27 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v27 + 12) <= v14)
  {
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x198E73110);
  }
  *(_BYTE *)(*(_QWORD *)v27 + 48 * v14 + 16) = a5;
}

uint64_t JSC::Yarr::ByteCompiler::assertionDotStarEnclosure(uint64_t this, char a2, int a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = this;
  LODWORD(v14) = 0;
  WORD2(v14) = 31;
  DWORD2(v14) = 0;
  LOBYTE(v13) = 0;
  *(_QWORD *)((char *)&v13 + 4) = 0x100000001;
  if (a3)
    v4 = 2;
  else
    v4 = 0;
  LOBYTE(v12) = v4 | a2;
  v5 = *(unsigned int *)(this + 12);
  if ((_DWORD)v5 == *(_DWORD *)(this + 8))
  {
    this = WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, v5 + 1, (unint64_t)&v12);
    v9 = (_OWORD *)(*(_QWORD *)v3 + 48 * *(unsigned int *)(v3 + 12));
    v11 = *(_OWORD *)(this + 16);
    v10 = *(_OWORD *)(this + 32);
    *v9 = *(_OWORD *)this;
    v9[1] = v11;
    v9[2] = v10;
  }
  else
  {
    v6 = (_OWORD *)(*(_QWORD *)this + 48 * v5);
    v7 = v12;
    v8 = v14;
    v6[1] = v13;
    v6[2] = v8;
    *v6 = v7;
  }
  ++*(_DWORD *)(v3 + 12);
  return this;
}

_QWORD *WTF::Vector<JSC::Yarr::ByteCompiler::ParenthesesStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteCompiler::ParenthesesStackEntry>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

void JSC::Yarr::ByteCompiler::closeAlternative(JSC::Yarr::ByteCompiler *this, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  int *v12;
  uint64_t v13;
  unsigned int v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = *((unsigned int *)v2 + 3);
  if (v3 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E733E4);
  }
  v5 = *v2;
  v6 = (int *)(*v2 + 48 * a2);
  v7 = *v6;
  if (*v6)
  {
    v8 = v6[8];
    v9 = a2;
    v10 = v3;
    while (1)
    {
      v9 += v7;
      if (v10 <= v9)
        break;
      *(_DWORD *)(v5 + 48 * v9 + 4) = v3 - v9;
      v11 = (uint64_t *)*((_QWORD *)this + 1);
      v10 = *((_DWORD *)v11 + 3);
      if (v10 <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E733DCLL);
      }
      v5 = *v11;
      v12 = (int *)(v5 + 48 * v9);
      v12[8] = v8;
      v7 = *v12;
      if (!*v12)
      {
        *v12 = a2 - v9;
        v13 = *((_QWORD *)this + 1);
        LODWORD(v21) = 0;
        WORD2(v21) = 5;
        DWORD2(v21) = 0;
        LOBYTE(v20) = 0;
        *(_QWORD *)((char *)&v20 + 4) = 0x100000001;
        BYTE8(v19) = 0;
        *(_QWORD *)&v19 = 0;
        v14 = *(_DWORD *)(v13 + 12);
        if (v14 == *(_DWORD *)(v13 + 8))
        {
          WTF::Vector<JSC::Yarr::ByteTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::ByteTerm>(v13, (unint64_t)&v19);
        }
        else
        {
          v15 = (_OWORD *)(*(_QWORD *)v13 + 48 * v14);
          v16 = v19;
          v17 = v21;
          v15[1] = v20;
          v15[2] = v17;
          *v15 = v16;
          ++*(_DWORD *)(v13 + 12);
        }
        v18 = *((_QWORD *)this + 1);
        if (*(_DWORD *)(v18 + 12) > v3)
        {
          *(_DWORD *)(*(_QWORD *)v18 + 48 * v3 + 32) = v8;
          return;
        }
        __break(0xC471u);
LABEL_20:
        JUMPOUT(0x198E733D4);
      }
    }
    __break(0xC471u);
    goto LABEL_20;
  }
  if (v6 + 12 != (int *)(v5 + 48 * v3))
  {
    memmove(v6, v6 + 12, 48 * ((48 * (v3 - (unint64_t)a2) - 96) / 0x30) + 48);
    LODWORD(v3) = *((_DWORD *)v2 + 3);
  }
  *((_DWORD *)v2 + 3) = v3 - 1;
}

void JSC::Yarr::YarrPattern::newlineCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Yarr::CharacterClass *v12;
  unsigned int v13;
  JSC::Yarr::CharacterClass *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Yarr::CharacterClass **v23;
  JSC::Yarr::CharacterClass *v24;

  if (!*((_QWORD *)this + 17))
  {
    v2 = (uint64_t *)((char *)this + 72);
    JSC::Yarr::newlineCreate((uint64_t *)&v24);
    v10 = *((unsigned int *)this + 21);
    if ((_DWORD)v10 == *((_DWORD *)this + 20))
    {
      v23 = (JSC::Yarr::CharacterClass **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v10 + 1, (unint64_t)&v24);
      v10 = *((unsigned int *)this + 21);
      v11 = *((_QWORD *)this + 9);
      v12 = *v23;
      *v23 = 0;
    }
    else
    {
      v11 = *v2;
      v12 = v24;
      v24 = 0;
    }
    *(_QWORD *)(v11 + 8 * v10) = v12;
    v13 = v10 + 1;
    *((_DWORD *)this + 21) = v13;
    v14 = v24;
    v24 = 0;
    if (v14)
    {
      JSC::Yarr::CharacterClass::~CharacterClass(v14, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      v13 = *((_DWORD *)this + 21);
    }
    if (v13)
      *((_QWORD *)this + 17) = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v13 - 8);
    else
      __break(0xC471u);
  }
}

void JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Yarr::CharacterClass *v12;
  JSC::Yarr::CharacterClass **v13;
  unsigned int v14;
  JSC::Yarr::CharacterClass *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::Yarr::CharacterClass *v24;

  if (!*((_QWORD *)this + 21))
  {
    v2 = (uint64_t *)((char *)this + 72);
    JSC::Yarr::wordUnicodeIgnoreCaseCharCreate((uint64_t *)&v24);
    v10 = *((unsigned int *)this + 21);
    if ((_DWORD)v10 == *((_DWORD *)this + 20))
    {
      v13 = (JSC::Yarr::CharacterClass **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v10 + 1, (unint64_t)&v24);
      v10 = *((unsigned int *)this + 21);
      v11 = *((_QWORD *)this + 9);
      v12 = *v13;
      *v13 = 0;
    }
    else
    {
      v11 = *v2;
      v12 = v24;
      v24 = 0;
    }
    *(_QWORD *)(v11 + 8 * v10) = v12;
    v14 = v10 + 1;
    *((_DWORD *)this + 21) = v14;
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      JSC::Yarr::CharacterClass::~CharacterClass(v15, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      v14 = *((_DWORD *)this + 21);
    }
    if (v14)
      *((_QWORD *)this + 21) = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v14 - 8);
    else
      __break(0xC471u);
  }
}

void JSC::Yarr::YarrPattern::wordcharCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Yarr::CharacterClass *v12;
  unsigned int v13;
  JSC::Yarr::CharacterClass *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Yarr::CharacterClass **v23;
  JSC::Yarr::CharacterClass *v24;

  if (!*((_QWORD *)this + 20))
  {
    v2 = (uint64_t *)((char *)this + 72);
    JSC::Yarr::wordcharCreate((uint64_t *)&v24);
    v10 = *((unsigned int *)this + 21);
    if ((_DWORD)v10 == *((_DWORD *)this + 20))
    {
      v23 = (JSC::Yarr::CharacterClass **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v10 + 1, (unint64_t)&v24);
      v10 = *((unsigned int *)this + 21);
      v11 = *((_QWORD *)this + 9);
      v12 = *v23;
      *v23 = 0;
    }
    else
    {
      v11 = *v2;
      v12 = v24;
      v24 = 0;
    }
    *(_QWORD *)(v11 + 8 * v10) = v12;
    v13 = v10 + 1;
    *((_DWORD *)this + 21) = v13;
    v14 = v24;
    v24 = 0;
    if (v14)
    {
      JSC::Yarr::CharacterClass::~CharacterClass(v14, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      v13 = *((_DWORD *)this + 21);
    }
    if (v13)
      *((_QWORD *)this + 20) = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v13 - 8);
    else
      __break(0xC471u);
  }
}

_DWORD *WTF::Vector<char32_t,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;
  uint64_t v4;

  result = (_DWORD *)WTF::Vector<char32_t,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<char32_t,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      if (v10 < 3)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_30;
      }
      if (!(v10 >> 30))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 4 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x198E737F0);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 3)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::~YarrGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;

  v9 = *(_QWORD *)(a1 + 15872);
  *(_QWORD *)(a1 + 15872) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 32);
    if (v10)
    {
      *(_QWORD *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    v11 = *(_QWORD *)(v9 + 16);
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 15824);
  if (a1 + 15840 != v12 && v12 != 0)
  {
    *(_QWORD *)(a1 + 15824) = 0;
    *(_DWORD *)(a1 + 15832) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 15792);
  if (a1 + 15808 != v14 && v14 != 0)
  {
    *(_QWORD *)(a1 + 15792) = 0;
    *(_DWORD *)(a1 + 15800) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)(a1 + 15744);
  if (a1 + 15760 != v16 && v16)
  {
    *(_QWORD *)(a1 + 15744) = 0;
    *(_DWORD *)(a1 + 15752) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(unsigned int *)(a1 + 15740);
  if ((_DWORD)v17)
  {
    v40 = *(unint64_t **)(a1 + 15728);
    v41 = 8 * v17;
    do
    {
      v42 = *v40;
      *v40 = 0;
      if (v42)
        WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
      ++v40;
      v41 -= 8;
    }
    while (v41);
  }
  v18 = *(_QWORD *)(a1 + 15728);
  if (v18)
  {
    *(_QWORD *)(a1 + 15728) = 0;
    *(_DWORD *)(a1 + 15736) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::Vector<WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 15680, a2, a3, a4, a5, a6, a7, a8);
  v26 = *(unsigned int *)(a1 + 316);
  v27 = *(_QWORD *)(a1 + 304);
  if ((_DWORD)v26)
  {
    v28 = 120 * v26;
    v29 = v27 + 56;
    do
    {
      v30 = *(_QWORD *)(v29 - 16);
      if (v29 != v30 && v30 != 0)
      {
        *(_QWORD *)(v29 - 16) = 0;
        *(_DWORD *)(v29 - 8) = 0;
        WTF::fastFree(v30, v19, v20, v21, v22, v23, v24, v25);
      }
      v29 += 120;
      v28 -= 120;
    }
    while (v28);
    v27 = *(_QWORD *)(a1 + 304);
  }
  if (a1 + 320 != v27 && v27 != 0)
  {
    *(_QWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    WTF::fastFree(v27, v19, v20, v21, v22, v23, v24, v25);
  }
  v33 = *(_QWORD *)(a1 + 264);
  if (a1 + 280 != v33 && v33 != 0)
  {
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    WTF::fastFree(v33, v19, v20, v21, v22, v23, v24, v25);
  }
  v35 = *(_QWORD *)(a1 + 224);
  if (a1 + 240 != v35 && v35)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    WTF::fastFree(v35, v19, v20, v21, v22, v23, v24, v25);
  }
  v36 = *(_QWORD *)(a1 + 200);
  if (v36)
  {
    *(_QWORD *)(a1 + 200) = 0;
    *(_DWORD *)(a1 + 208) = 0;
    WTF::fastFree(v36, v19, v20, v21, v22, v23, v24, v25);
  }
  v37 = *(_QWORD *)(a1 + 160);
  if (a1 + 176 != v37 && v37)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    WTF::fastFree(v37, v19, v20, v21, v22, v23, v24, v25);
  }
  v38 = *(_QWORD *)(a1 + 120);
  if (a1 + 136 != v38 && v38)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v38, v19, v20, v21, v22, v23, v24, v25);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::UniqueRef<WTF::BitSet<128ul,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(unint64_t **)a1;
    v13 = 8 * v9;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v22;
  uint64_t v23;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(unint64_t **)a1;
    v11 = *(_QWORD *)a1 + 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = *(unsigned int *)(v12 + 12);
        v14 = *(_QWORD *)v12;
        if ((_DWORD)v13)
        {
          v15 = 56 * v13;
          v16 = v14 + 32;
          do
          {
            v17 = *(_QWORD *)(v16 - 16);
            if (v16 != v17 && v17 != 0)
            {
              *(_QWORD *)(v16 - 16) = 0;
              *(_DWORD *)(v16 - 8) = 0;
              v22 = v16;
              v23 = v15;
              WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
              v16 = v22;
              v15 = v23;
            }
            v16 += 56;
            v15 -= 56;
          }
          while (v15);
          v14 = *(_QWORD *)v12;
        }
        if (v14)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v10;
    }
    while (v10 != (unint64_t *)v11);
  }
  v19 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v19 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::dataLog<char [52]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Can't JIT some patterns containing back references\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [51]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Can't JIT a pattern containing forward references\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [44]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Can't JIT a pattern containing lookbehinds\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [87]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Can't JIT a pattern containing a variable counted parenthesis with a non-zero minimum\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [58]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Can't JIT a pattern containing parenthesized subpatterns\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [70]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Can't JIT a pattern containing fixed count parenthesized subpatterns\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::~YarrGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;

  v9 = *(_QWORD *)(a1 + 15872);
  *(_QWORD *)(a1 + 15872) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 32);
    if (v10)
    {
      *(_QWORD *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    v11 = *(_QWORD *)(v9 + 16);
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 15824);
  if (a1 + 15840 != v12 && v12 != 0)
  {
    *(_QWORD *)(a1 + 15824) = 0;
    *(_DWORD *)(a1 + 15832) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 15792);
  if (a1 + 15808 != v14 && v14 != 0)
  {
    *(_QWORD *)(a1 + 15792) = 0;
    *(_DWORD *)(a1 + 15800) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)(a1 + 15744);
  if (a1 + 15760 != v16 && v16)
  {
    *(_QWORD *)(a1 + 15744) = 0;
    *(_DWORD *)(a1 + 15752) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(unsigned int *)(a1 + 15740);
  if ((_DWORD)v17)
  {
    v40 = *(unint64_t **)(a1 + 15728);
    v41 = 8 * v17;
    do
    {
      v42 = *v40;
      *v40 = 0;
      if (v42)
        WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
      ++v40;
      v41 -= 8;
    }
    while (v41);
  }
  v18 = *(_QWORD *)(a1 + 15728);
  if (v18)
  {
    *(_QWORD *)(a1 + 15728) = 0;
    *(_DWORD *)(a1 + 15736) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::Vector<WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 15680, a2, a3, a4, a5, a6, a7, a8);
  v26 = *(unsigned int *)(a1 + 316);
  v27 = *(_QWORD *)(a1 + 304);
  if ((_DWORD)v26)
  {
    v28 = 120 * v26;
    v29 = v27 + 56;
    do
    {
      v30 = *(_QWORD *)(v29 - 16);
      if (v29 != v30 && v30 != 0)
      {
        *(_QWORD *)(v29 - 16) = 0;
        *(_DWORD *)(v29 - 8) = 0;
        WTF::fastFree(v30, v19, v20, v21, v22, v23, v24, v25);
      }
      v29 += 120;
      v28 -= 120;
    }
    while (v28);
    v27 = *(_QWORD *)(a1 + 304);
  }
  if (a1 + 320 != v27 && v27 != 0)
  {
    *(_QWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    WTF::fastFree(v27, v19, v20, v21, v22, v23, v24, v25);
  }
  v33 = *(_QWORD *)(a1 + 264);
  if (a1 + 280 != v33 && v33 != 0)
  {
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    WTF::fastFree(v33, v19, v20, v21, v22, v23, v24, v25);
  }
  v35 = *(_QWORD *)(a1 + 224);
  if (a1 + 240 != v35 && v35)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    WTF::fastFree(v35, v19, v20, v21, v22, v23, v24, v25);
  }
  v36 = *(_QWORD *)(a1 + 200);
  if (v36)
  {
    *(_QWORD *)(a1 + 200) = 0;
    *(_DWORD *)(a1 + 208) = 0;
    WTF::fastFree(v36, v19, v20, v21, v22, v23, v24, v25);
  }
  v37 = *(_QWORD *)(a1 + 160);
  if (a1 + 176 != v37 && v37)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    WTF::fastFree(v37, v19, v20, v21, v22, v23, v24, v25);
  }
  v38 = *(_QWORD *)(a1 + 120);
  if (a1 + 136 != v38 && v38)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v38, v19, v20, v21, v22, v23, v24, v25);
  }
  return a1;
}

char *WTF::BumpPointerAllocator::startAllocator(char **this)
{
  char *result;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;

  result = *this;
  if (!result)
  {
    v3 = WTF::pageSize(0);
    if (v3 <= 0x1000)
      v4 = 4096;
    else
      v4 = v3;
    result = (char *)WTF::OSAllocator::reserveAndCommit(v4, -1, 1, 0, 0, 0);
    if (result)
    {
      v5 = result;
      v6 = &result[v4];
      *((_QWORD *)v6 - 7) = v5;
      *((_QWORD *)v6 - 6) = v5;
      result = v6 - 56;
      *((_QWORD *)result + 2) = 0;
      *((_QWORD *)result + 3) = 0;
      *((_QWORD *)result + 4) = v5;
      *((_QWORD *)result + 5) = v5;
      *((_QWORD *)result + 6) = v4;
    }
    *this = result;
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(uint64_t a1, uint64_t *a2, int *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int *v55;
  int v56;
  uint64_t v57;
  char v58;
  char *v59;
  char v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  int *v74;
  int v75;
  int *v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  int *v87;
  unint64_t v88;
  int *v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t j;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t i;
  uint64_t v106;
  unsigned __int8 *v107;
  char v108;
  uint64_t v109;
  unsigned __int8 *v110;
  char v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  _BYTE *v120;
  char v121;
  unint64_t v122;
  _DWORD *v123;
  unsigned int v124;
  unsigned int v125;
  BOOL v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  int *v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  _DWORD *v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  char *v143;
  char v144;
  char v145;
  int v146;
  uint64_t v148;
  int *v149;
  int v150;
  unint64_t v151;
  int *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  int *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int *v173;
  uint64_t v174;
  int *v175;
  _QWORD *v176;
  uint64_t DisjunctionContext;
  uint64_t matched;
  char v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  BOOL v185;
  _BOOL4 v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  _DWORD *v215;
  int v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  uint64_t v231;
  _DWORD *v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  int v247;
  uint64_t v248;
  _DWORD *v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  int v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t *v266;
  uint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  int *v284;

  if ((unint64_t)&v281 < *(_QWORD *)(a1 + 48))
    return 4294967292;
  v10 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v10;
  if (!v10)
    return 4294967293;
  if ((a4 & 1) == 0)
  {
    LODWORD(v13) = 0;
    a3[1] = *(_DWORD *)(a1 + 32);
    goto LABEL_7;
  }
LABEL_172:
  LODWORD(v13) = *a3;
LABEL_30:
  LODWORD(v13) = v13 - 1;
  *a3 = v13;
  v15 = *((unsigned int *)a2 + 3);
  if (v15 <= (int)v13)
  {
LABEL_436:
    __break(0xC471u);
    JUMPOUT(0x198E75D5CLL);
  }
  v29 = (int)v13;
  v30 = a3 + 4;
  while (1)
  {
    v31 = *a2;
    v32 = *a2 + 48 * v29;
    v14 = 0;
    switch(*(_BYTE *)(v32 + 36))
    {
      case 0:
      case 1:
        v42 = *(_DWORD *)v32;
        LODWORD(v13) = *(_DWORD *)v32 + v13;
        *a3 = v13;
        if (v42 > 0)
          goto LABEL_54;
        v43 = *(_DWORD *)(a1 + 32);
        if (v43 == *(_DWORD *)(a1 + 36) || (*(_WORD *)(*(_QWORD *)a1 + 8) & 0x80) != 0)
          return 0;
        v44 = v43 + 1;
        *(_DWORD *)(a1 + 32) = v44;
        a3[1] = v44;
        if (v15 <= (int)v13)
        {
          __break(0xC471u);
          JUMPOUT(0x198E75DD4);
        }
        v45 = v31 + 48 * (int)v13;
        if (*(_BYTE *)(v45 + 8))
          LODWORD(v13) = *(_DWORD *)v45 + v13;
        goto LABEL_54;
      case 2:
        __break(0xC471u);
        JUMPOUT(0x198E75090);
      case 3:
      case 4:
        v40 = *(_DWORD *)v32;
        v41 = *(_DWORD *)v32 + v13;
        if (*(int *)v32 > 0)
          LODWORD(v13) = v41 + 1;
        else
          LODWORD(v13) = v41 - 1;
        *a3 = v13;
        if (v40 > 0)
          goto LABEL_8;
        goto LABEL_37;
      case 5:
        LODWORD(v13) = v13 + ~v30[2 * *(unsigned int *)(v31 + 48 * v29 + 32)];
        goto LABEL_36;
      case 6:
        return v14;
      case 7:
        __break(0xC471u);
        JUMPOUT(0x198E75050);
      case 8:
      case 9:
      case 0xA:
      case 0x1E:
        goto LABEL_35;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
        v148 = v8;
        v149 = v30;
        v150 = JSC::Yarr::Interpreter<unsigned char>::backtrackPatternCharacter(a1, (int *)(*a2 + 48 * v29), (uint64_t)a3);
        goto LABEL_192;
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        v148 = v8;
        v149 = v30;
        v150 = JSC::Yarr::Interpreter<unsigned char>::backtrackPatternCasedCharacter(a1, *a2 + 48 * v29, (uint64_t)a3);
        goto LABEL_192;
      case 0x13:
        v74 = &v30[2 * *(unsigned int *)(v31 + 48 * v29 + 32)];
        v75 = *(unsigned __int8 *)(v32 + 16);
        if (!*(_BYTE *)(v32 + 16))
        {
          if (*(unsigned __int8 *)(a1 + 8) - 1 >= 2)
            goto LABEL_42;
          goto LABEL_90;
        }
        if (v75 == 1)
        {
          v127 = *((_QWORD *)v74 + 1);
          if (!v127)
            goto LABEL_42;
          if (*(unsigned __int8 *)(a1 + 8) - 1 <= 1)
          {
            v179 = *(_BYTE *)(v31 + 48 * v29 + 37);
            *((_QWORD *)v74 + 1) = v127 - 1;
            if ((v179 & 4) == 0)
            {
              v128 = *(_DWORD *)(a1 + 32);
              if (!v128)
              {
                __break(0xC471u);
                JUMPOUT(0x198E75208);
              }
              goto LABEL_148;
            }
            v128 = *(_DWORD *)(a1 + 32);
            if (v128 < *(_DWORD *)(v31 + 48 * v29 + 40))
            {
              __break(0xC471u);
              JUMPOUT(0x198E75DC4);
            }
          }
          else
          {
            *((_QWORD *)v74 + 1) = v127 - 1;
            v128 = *(_DWORD *)(a1 + 32);
            if ((*(_BYTE *)(v31 + 48 * v29 + 37) & 4) == 0)
            {
              if (!v128)
              {
                __break(0xC471u);
                JUMPOUT(0x198E75C8CLL);
              }
LABEL_148:
              v129 = v128 - 1;
LABEL_149:
              *(_DWORD *)(a1 + 32) = v129;
LABEL_54:
              LODWORD(v13) = v13 + 1;
              goto LABEL_7;
            }
          }
          if (v128 >= *(_DWORD *)(a1 + 36))
            goto LABEL_54;
          v129 = v128 + 1;
          goto LABEL_149;
        }
        if (v75 != 2)
          goto LABEL_42;
        v159 = v8;
        v160 = v30;
        v161 = *((_QWORD *)v74 + 1);
        v162 = *(unsigned int *)(v32 + 24);
        if ((*(_BYTE *)(v31 + 48 * v29 + 37) & 4) != 0)
        {
          if (v161 < v162)
          {
            v229 = *(_DWORD *)(a1 + 32);
            if (v229)
            {
              *(_DWORD *)(a1 + 32) = v229 - 1;
              *((_QWORD *)v74 + 1) = v161 + 1;
              v230 = JSC::Yarr::Interpreter<unsigned char>::checkCharacterClass(a1, v32, *(_DWORD *)(v31 + 48 * v29 + 40));
              v8 = v159;
              v30 = v160;
              if (v230)
                goto LABEL_215;
            }
          }
        }
        else if (v161 < v162)
        {
          v163 = *(_DWORD *)(a1 + 32);
          if (v163 < *(_DWORD *)(a1 + 36))
          {
            *(_DWORD *)(a1 + 32) = v163 + 1;
            *((_QWORD *)v74 + 1) = v161 + 1;
            v164 = JSC::Yarr::Interpreter<unsigned char>::checkCharacterClass(a1, v32, *(_DWORD *)(v31 + 48 * v29 + 40) + 1);
            v8 = v159;
            v30 = v160;
            if ((v164 & 1) != 0)
            {
LABEL_215:
              LODWORD(v13) = *a3;
              goto LABEL_54;
            }
          }
        }
LABEL_90:
        *(_DWORD *)(a1 + 32) = *(_QWORD *)v74;
        goto LABEL_42;
      case 0x14:
        v148 = v8;
        v149 = v30;
        v150 = JSC::Yarr::Interpreter<unsigned char>::backtrackBackReference(a1, *a2 + 48 * v29, (uint64_t)a3);
LABEL_192:
        v50 = *a3;
        if (v150)
          goto LABEL_121;
        LODWORD(v13) = v50 - 1;
        v30 = v149;
        v8 = v148;
        goto LABEL_36;
      case 0x15:
        v76 = &v30[2 * *(unsigned int *)(v31 + 48 * v29 + 32)];
        v284 = *(int **)(v32 + 8);
        v77 = *(unsigned __int8 *)(v32 + 16);
        if (v77 != 1)
        {
          v282 = (unint64_t)v30;
          if (v77 == 2)
          {
            if (*((_QWORD *)v76 + 1) < (unint64_t)*(unsigned int *)(v32 + 24))
            {
              v175 = v284;
              v176 = (_QWORD *)JSC::Yarr::Interpreter<unsigned char>::allocParenthesesDisjunctionContext((_QWORD *)a1, (unint64_t)v284, *(_QWORD *)(a1 + 16), (unsigned int *)v32, a5, a6, a7, a8);
              DisjunctionContext = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext((uint64_t)v176);
              matched = JSC::Yarr::Interpreter<unsigned char>::matchNonZeroDisjunction(a1, (uint64_t)v175, DisjunctionContext, 0);
              if ((_DWORD)matched != 1)
              {
                v14 = matched;
                JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v176, *(_QWORD *)(a1 + 16), *(_DWORD *)v32);
                goto LABEL_450;
              }
              v256 = *((_QWORD *)v76 + 1);
              *v176 = *((_QWORD *)v76 + 2);
              *((_QWORD *)v76 + 1) = v256 + 1;
              *((_QWORD *)v76 + 2) = v176;
              v257 = a1;
              v258 = (int *)v32;
              v259 = (uint64_t)v176;
              goto LABEL_456;
            }
            while (1)
            {
              v30 = (int *)v282;
              v8 = (uint64_t)&jpt_198E7435C;
              if (!*((_QWORD *)v76 + 1))
                goto LABEL_42;
              v176 = (_QWORD *)*((_QWORD *)v76 + 2);
              v260 = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext((uint64_t)v176);
              v261 = JSC::Yarr::Interpreter<unsigned char>::matchNonZeroDisjunction(a1, (uint64_t)v284, v260, 1);
              if ((_DWORD)v261 == 1)
                break;
              v14 = v261;
              JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v176, *(_QWORD *)(a1 + 16), *(_DWORD *)v32);
              JSC::Yarr::Interpreter<unsigned char>::popParenthesesDisjunctionContext((uint64_t)v76);
LABEL_450:
              JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v176);
              if ((_DWORD)v14)
                goto LABEL_129;
            }
            if (!*((_QWORD *)v76 + 1))
              goto LABEL_120;
          }
          else
          {
            if (v77)
            {
              __break(0xC471u);
              JUMPOUT(0x198E7510CLL);
            }
            v14 = JSC::Yarr::Interpreter<unsigned char>::parenthesesDoBacktrack(a1, v32, (uint64_t)v76);
            if ((_DWORD)v14 != 1)
              goto LABEL_129;
LABEL_197:
            v151 = *((_QWORD *)v76 + 1);
            while (v151 < *(unsigned int *)(v32 + 24))
            {
              v152 = v284;
              v153 = (_QWORD *)JSC::Yarr::Interpreter<unsigned char>::allocParenthesesDisjunctionContext((_QWORD *)a1, (unint64_t)v284, *(_QWORD *)(a1 + 16), (unsigned int *)v32, a5, a6, a7, a8);
              v154 = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext((uint64_t)v153);
              v155 = JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(a1, v152, v154, 0);
              if ((_DWORD)v155 != 1)
              {
                v14 = v155;
                JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v153, *(_QWORD *)(a1 + 16), *(_DWORD *)v32);
                JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v153);
                if ((_DWORD)v14)
                  goto LABEL_129;
                v157 = JSC::Yarr::Interpreter<unsigned char>::parenthesesDoBacktrack(a1, v32, (uint64_t)v76);
                if ((_DWORD)v157 != 1)
                {
                  v14 = v157;
                  goto LABEL_129;
                }
                goto LABEL_197;
              }
              v156 = *((_QWORD *)v76 + 1);
              *v153 = *((_QWORD *)v76 + 2);
              v151 = v156 + 1;
              *((_QWORD *)v76 + 1) = v156 + 1;
              *((_QWORD *)v76 + 2) = v153;
            }
          }
          v259 = *((_QWORD *)v76 + 2);
          v257 = a1;
          v258 = (int *)v32;
LABEL_456:
          JSC::Yarr::Interpreter<unsigned char>::recordParenthesesMatch(v257, v258, v259);
          goto LABEL_120;
        }
        if (!*((_QWORD *)v76 + 1))
          goto LABEL_42;
        v78 = *((_QWORD *)v76 + 2);
        v79 = 4 * *(_QWORD *)(v78 + 24);
        v80 = v79 + 48;
        v81 = (v79 + 55) & 0x7FFFFFFF8;
        if (v81 < v80)
        {
          __break(0xC471u);
          JUMPOUT(0x198E74CF8);
        }
        v82 = v81 + v78;
        v83 = a1;
        v84 = v284;
        v282 = (unint64_t)v30;
        v283 = v81 + v78;
        while (1)
        {
          v14 = JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(v83, v84, v82, 1);
          if ((_DWORD)v14 != 1)
          {
            JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput(v78, *(_QWORD *)(a1 + 16), *(_DWORD *)v32);
            v101 = *((_QWORD *)v76 + 1);
            if (!v101)
            {
              __break(0xC471u);
              JUMPOUT(0x198E74D18);
            }
            v102 = (uint64_t *)*((_QWORD *)v76 + 2);
            if (!v102)
            {
              __break(0xC471u);
              JUMPOUT(0x198E74D38);
            }
            v103 = *v102;
            v39 = v101 - 1;
            *((_QWORD *)v76 + 1) = v39;
            *((_QWORD *)v76 + 2) = v103;
            v104 = *(unint64_t **)(a1 + 56);
            for (i = v104[1]; (unint64_t)v104 < v78 || i > v78; i = v104[1])
            {
              *v104 = i;
              v104 = (unint64_t *)v104[3];
              if (!v104)
              {
                __break(0xC471u);
                JUMPOUT(0x198E75DCCLL);
              }
            }
            *v104 = v78;
            *(_QWORD *)(a1 + 56) = v104;
            if (v39 < *(unsigned int *)(v32 + 20))
            {
              if (v39)
              {
                do
                {
                  v222 = *((_QWORD *)v76 + 2);
                  JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput(v222, *(_QWORD *)(a1 + 16), *(_DWORD *)v32);
                  JSC::Yarr::Interpreter<unsigned char>::popParenthesesDisjunctionContext((uint64_t)v76);
                  JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, v222);
                }
                while (*((_QWORD *)v76 + 1));
              }
              *(_DWORD *)(a1 + 32) = *(_QWORD *)v76;
              goto LABEL_129;
            }
            if ((_DWORD)v14)
              goto LABEL_129;
            goto LABEL_118;
          }
          v82 = v283;
          if (*(_DWORD *)(v283 + 4) != *(_DWORD *)(v283 + 8))
            break;
          v83 = a1;
          v84 = v284;
        }
        v39 = *((_QWORD *)v76 + 1);
        while (1)
        {
          if (v39 >= *(unsigned int *)(v32 + 24))
            goto LABEL_118;
          v34 = v284;
          v35 = (_QWORD *)JSC::Yarr::Interpreter<unsigned char>::allocParenthesesDisjunctionContext((_QWORD *)a1, (unint64_t)v284, *(_QWORD *)(a1 + 16), (unsigned int *)v32, a5, a6, a7, a8);
          v36 = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext((uint64_t)v35);
          v37 = JSC::Yarr::Interpreter<unsigned char>::matchNonZeroDisjunction(a1, (uint64_t)v34, v36, 0);
          if ((_DWORD)v37 != 1)
            break;
          v38 = *((_QWORD *)v76 + 1);
          *v35 = *((_QWORD *)v76 + 2);
          v39 = v38 + 1;
          *((_QWORD *)v76 + 1) = v38 + 1;
          *((_QWORD *)v76 + 2) = v35;
        }
        v14 = v37;
        JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v35, *(_QWORD *)(a1 + 16), *(_DWORD *)v32);
        JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v35);
        if (!(_DWORD)v14)
        {
          v39 = *((_QWORD *)v76 + 1);
LABEL_118:
          if (v39)
          {
            v106 = v31 + 48 * v29;
            v108 = *(_BYTE *)(v106 + 37);
            v107 = (unsigned __int8 *)(v106 + 37);
            if ((v108 & 1) != 0)
            {
              v223 = *((_QWORD *)v76 + 2);
              v224 = *(_DWORD *)v32;
              v225 = v31 + 48 * v29;
              *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * ((2 * v224) | (*v107 >> 2) & 1)) = *(_DWORD *)(JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(v223) + 4)
                                                                                        - *(_DWORD *)(v225 + 40);
              v226 = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(v223);
              v227 = *(_QWORD *)(a1 + 16);
              *(_DWORD *)(v227 + 4 * (((2 * v224) | 1) - ((*v107 >> 2) & 1))) = *(_DWORD *)(v226 + 8)
                                                                                - *(_DWORD *)(v225 + 40);
              v228 = *(_DWORD *)(v32 + 4);
              if (v228)
                *(_DWORD *)(v227 + 4 * (v228 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1)) = v224;
            }
          }
          goto LABEL_120;
        }
LABEL_129:
        if ((_DWORD)v14 == 1)
        {
LABEL_120:
          v50 = *a3;
          goto LABEL_121;
        }
        v30 = (int *)v282;
        v8 = (uint64_t)&jpt_198E7435C;
        if (!(_DWORD)v14)
        {
LABEL_42:
          LODWORD(v13) = *a3 - 1;
          goto LABEL_36;
        }
        return v14;
      case 0x16:
        v46 = v31 + 48 * v29;
        v47 = *(unsigned int *)(v46 + 32);
        if ((*(_BYTE *)(v46 + 37) & 1) != 0)
        {
          v48 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(v48 + 4 * (2 * *(_DWORD *)v32)) = -1;
          v49 = *(_DWORD *)(v32 + 4);
          if (v49)
            *(_DWORD *)(v48 + 4 * (v49 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1)) = 0;
        }
        if (*(_BYTE *)(v32 + 16) != 1)
          goto LABEL_42;
        *(_QWORD *)&v30[2 * v47] = -1;
        v50 = *(_DWORD *)(v32 + 8) + *a3;
        goto LABEL_121;
      case 0x17:
        v69 = *(unsigned int *)(v31 + 48 * v29 + 32);
        v70 = *(unsigned __int8 *)(v32 + 16);
        if (v70 == 2)
        {
          if (*(_QWORD *)&v30[2 * v69] != -1)
            goto LABEL_35;
          v254 = *(unsigned int *)(a1 + 32);
          *(_QWORD *)&v30[2 * v69] = v254;
          v255 = *(unsigned __int8 *)(v31 + 48 * v29 + 37);
          if ((v255 & 1) != 0)
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * ((v255 >> 2) & 1 | (2 * *(_DWORD *)v32))) = v254
                                                                                               - *(_DWORD *)(v31 + 48 * v29 + 40);
            LODWORD(v13) = *a3;
          }
          v50 = v13 - *(_DWORD *)(v32 + 8);
LABEL_121:
          LODWORD(v13) = v50 + 1;
LABEL_7:
          *a3 = v13;
          v15 = *((unsigned int *)a2 + 3);
LABEL_8:
          if (v15 <= (int)v13)
          {
LABEL_435:
            __break(0xC471u);
            JUMPOUT(0x198E75D54);
          }
          v16 = (int)v13;
          while (2)
          {
            v17 = *a2;
            v18 = *a2 + 48 * v16;
            switch(*(_BYTE *)(v18 + 36))
            {
              case 0:
              case 3:
              case 6:
                goto LABEL_17;
              case 1:
              case 2:
              case 7:
                a3[2] = *(_DWORD *)(a1 + 32);
                return 1;
              case 4:
              case 5:
                v85 = *(int *)(v18 + 4);
                *(_QWORD *)&a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32) + 4] = v85;
                v68 = v13 + v85;
                goto LABEL_76;
              case 8:
                v22 = *(_DWORD *)(v17 + 48 * v16 + 40);
                v23 = *(_DWORD *)(a1 + 32);
                if (v23 == v22)
                  goto LABEL_17;
                if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 8) != 0)
                {
                  if (v23 < v22 + 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E75CECLL);
                  }
                  v186 = JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 64), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v23 - (v22 + 1)));
                  LODWORD(v13) = *a3;
                  if (v186)
                    goto LABEL_17;
                }
                goto LABEL_30;
              case 9:
                v130 = *(_DWORD *)(v17 + 48 * v16 + 40);
                v131 = *(unsigned int *)(a1 + 32);
                if (v130)
                {
                  if (v131 < v130)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E75D0CLL);
                  }
                  v220 = v131 - v130;
                  if (v220 != *(_DWORD *)(a1 + 36)
                    && ((*(_WORD *)(*(_QWORD *)a1 + 8) & 8) == 0
                     || !JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 64), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v220))))
                  {
                    goto LABEL_172;
                  }
                }
                else
                {
                  v132 = *(_DWORD *)(a1 + 36);
                  if ((_DWORD)v131 != v132)
                  {
                    if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 8) == 0)
                      goto LABEL_172;
                    v221 = v131 >= v132 ? 0xFFFFFFFFLL : *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v131);
                    if (!JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 64), v221))goto LABEL_172;
                  }
                }
                goto LABEL_152;
              case 0xA:
                v180 = JSC::Yarr::Interpreter<unsigned char>::matchAssertionWordBoundary((_DWORD *)a1, *a2 + 48 * v16);
                goto LABEL_260;
              case 0xB:
              case 0xC:
                v24 = *(unsigned __int8 *)(a1 + 8);
                if ((*(_BYTE *)(v17 + 48 * v16 + 37) & 4) != 0)
                {
                  v187 = v24 - 3;
                  v188 = *(_DWORD *)v18;
                  if (v187 < 0xFFFFFFFE || v188 < 0x10000)
                  {
                    v235 = *(_DWORD *)(a1 + 32);
                    v236 = *(_DWORD *)(v17 + 48 * v16 + 40);
                    if (v235 < v236)
                      goto LABEL_30;
                    v237 = *(unsigned int *)(v18 + 24);
                    if (!(_DWORD)v237)
                    {
LABEL_17:
                      LODWORD(v13) = v13 + 1;
                      goto LABEL_18;
                    }
                    v238 = ~v236 + v235;
                    v239 = v236 - v237 + 1;
                    while (1)
                    {
                      v8 = v235 >= v239
                         ? *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v238 + v237)
                         : 0xFFFFFFFFLL;
                      if ((_DWORD)v8 != v188)
                        break;
                      ++v239;
                      if (!--v237)
                        goto LABEL_17;
                    }
                  }
                  else
                  {
                    if (v15 <= (int)v13)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E75D74);
                    }
                    v189 = *(_DWORD *)(v17 + 48 * (int)v13 + 24);
                    if (!v189)
                      goto LABEL_261;
                    if (v188 == -1)
                    {
                      v190 = *(_DWORD *)(v17 + 48 * v16 + 40) - 2;
                      while (1)
                      {
                        v190 += 2;
                        if (*(_DWORD *)(a1 + 32) < v190)
                          break;
                        if (!--v189)
                          goto LABEL_261;
                      }
                    }
                  }
                }
                else if ((v24 - 1) > 1 || *(_DWORD *)v18 < 0x10000u)
                {
                  v25 = *(unsigned int *)(v18 + 24);
                  if (!(_DWORD)v25)
                    goto LABEL_17;
                  v26 = *(_DWORD *)(v17 + 48 * v16 + 40);
                  v27 = *(_DWORD *)(a1 + 32);
                  v28 = v27 - v26;
                  while (1)
                  {
                    if (v27 < v26)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E74C74);
                    }
                    v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v28);
                    if (*(_DWORD *)v18 != (_DWORD)v8)
                      break;
                    ++v28;
                    --v26;
                    if (!--v25)
                      goto LABEL_17;
                  }
                }
                else
                {
                  v193 = *(_DWORD *)(v18 + 24);
                  if (!v193)
                    goto LABEL_17;
                  v194 = *(_DWORD *)(v17 + 48 * v16 + 40);
                  v195 = *(_DWORD *)(a1 + 32);
                  if (*(_DWORD *)v18 == -1)
                  {
                    v196 = v194 + 2;
                    while (1)
                    {
                      v196 -= 2;
                      if (v195 < v196)
                        break;
                      if (!--v193)
                        goto LABEL_17;
                    }
LABEL_427:
                    __break(0xC471u);
                    JUMPOUT(0x198E75C6CLL);
                  }
                  if (v195 < v194)
                    goto LABEL_427;
                }
                goto LABEL_30;
              case 0xD:
                v204 = v17 + 48 * v16;
                v205 = *(unsigned int *)(v204 + 32);
                v206 = *(unsigned int *)(a1 + 32);
                if ((*(_BYTE *)(v204 + 37) & 4) == 0)
                {
                  if (v15 <= (int)v13)
                  {
LABEL_313:
                    __break(0xC471u);
                    JUMPOUT(0x198E755C8);
                  }
                  LODWORD(v207) = 0;
                  v208 = v17 + 48 * (int)v13;
                  v8 = v208 + 40;
                  while (1)
                  {
                    if (v207 >= *(_DWORD *)(v208 + 24)
                      || (v206 + v207) >= *(_DWORD *)(a1 + 36))
                    {
                      goto LABEL_420;
                    }
                    v209 = v206 + v207 + 1;
                    *(_DWORD *)(a1 + 32) = v209;
                    v210 = *(_DWORD *)v8 + 1;
                    if ((*(_BYTE *)(v208 + 37) & 4) == 0)
                      break;
                    if (v209 >= v210)
                      goto LABEL_310;
                    v211 = -1;
LABEL_311:
                    if (v211 != *(_DWORD *)v208)
                    {
                      v245 = v206 + v207;
                      goto LABEL_419;
                    }
                    LODWORD(v207) = v207 + 1;
                    if (*((unsigned int *)a2 + 3) <= (unint64_t)(int)v13)
                      goto LABEL_313;
                  }
                  if (v209 < v210)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E75CCCLL);
                  }
LABEL_310:
                  v211 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + (v206 + v207 - *(_DWORD *)v8));
                  goto LABEL_311;
                }
                v244 = *(_DWORD *)(v17 + 48 * v16 + 40);
                if (v206 < v244)
                  goto LABEL_30;
                if (!*(_DWORD *)(v18 + 24))
                {
                  LODWORD(v206) = 0;
LABEL_421:
                  *(_QWORD *)&a3[2 * v205 + 6] = v206;
                  goto LABEL_261;
                }
                v207 = 0;
                v8 = v17 + 48 * (int)v13;
                v245 = *(_DWORD *)(a1 + 32);
                break;
              case 0xE:
                v197 = &a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32)];
                *((_QWORD *)v197 + 2) = *(unsigned int *)(a1 + 32);
                goto LABEL_302;
              case 0xF:
              case 0x10:
                if (*(unsigned __int8 *)(a1 + 8) - 1 < 2)
                {
                  v165 = *(_DWORD *)(a1 + 32);
                  if ((*(_BYTE *)(v17 + 48 * v16 + 37) & 4) != 0)
                  {
                    v231 = v17 + 48 * v16;
                    v233 = *(_DWORD *)(v231 + 40);
                    v232 = (_DWORD *)(v231 + 40);
                    if (v165 < v233)
                      goto LABEL_30;
                    if (v15 <= (int)v13)
                    {
LABEL_440:
                      __break(0xC471u);
                      JUMPOUT(0x198E75D7CLL);
                    }
                    if (*(_DWORD *)(v17 + 48 * (int)v13 + 24))
                    {
                      v234 = 0;
                      while (JSC::Yarr::Interpreter<unsigned char>::checkCasedCharacter(a1, v18, ++v234 + *v232 - *(_DWORD *)(v18 + 24)))
                      {
                        LODWORD(v13) = *a3;
                        if (*((unsigned int *)a2 + 3) <= (unint64_t)*a3)
                          goto LABEL_440;
                        if (v234 >= *(_DWORD *)(*a2 + 48 * (int)v13 + 24))
                          goto LABEL_261;
                      }
                      goto LABEL_345;
                    }
                  }
                  else
                  {
                    if (v15 <= (int)v13)
                    {
LABEL_437:
                      __break(0xC471u);
                      JUMPOUT(0x198E75D64);
                    }
                    v166 = (int)v13;
                    v167 = v17 + 48 * (int)v13;
                    if (*(_DWORD *)(v167 + 24))
                    {
                      v168 = 0;
                      v169 = 0;
                      while (JSC::Yarr::Interpreter<unsigned char>::checkCasedCharacter(a1, v167, v168 + *(_DWORD *)(v17 + 48 * v166 + 40)))
                      {
                        LODWORD(v13) = *a3;
                        if (*((unsigned int *)a2 + 3) <= (unint64_t)*a3)
                          goto LABEL_437;
                        v166 = (int)v13;
                        ++v169;
                        v17 = *a2;
                        v167 = *a2 + 48 * (int)v13;
                        --v168;
                        if (v169 >= *(_DWORD *)(v167 + 24))
                          goto LABEL_261;
                      }
                      goto LABEL_345;
                    }
                  }
LABEL_261:
                  LODWORD(v13) = v13 + 1;
LABEL_18:
                  *a3 = v13;
                  v16 = (int)v13;
                  v15 = *((unsigned int *)a2 + 3);
                  if (v15 <= (int)v13)
                    goto LABEL_435;
                  continue;
                }
                if (v15 <= (int)v13)
                {
LABEL_438:
                  __break(0xC471u);
                  JUMPOUT(0x198E75D6CLL);
                }
                v181 = (int)v13;
                v182 = v17 + 48 * (int)v13;
                if (!*(_DWORD *)(v182 + 24))
                  goto LABEL_261;
                v183 = 0;
                v184 = 0;
                while (1)
                {
                  v185 = JSC::Yarr::Interpreter<unsigned char>::checkCasedCharacter(a1, v182, v183 + *(_DWORD *)(v17 + 48 * v181 + 40));
                  LODWORD(v13) = *a3;
                  if (!v185)
                    goto LABEL_30;
                  v181 = (int)v13;
                  if (*((unsigned int *)a2 + 3) <= (unint64_t)(int)v13)
                    goto LABEL_438;
                  ++v184;
                  v17 = *a2;
                  v182 = *a2 + 48 * (int)v13;
                  --v183;
                  if (v184 >= *(_DWORD *)(v182 + 24))
                    goto LABEL_261;
                }
              case 0x11:
                v198 = v17 + 48 * v16;
                v199 = *(unsigned int *)(v198 + 32);
                if ((*(_BYTE *)(v198 + 37) & 4) != 0)
                {
                  v240 = *(_DWORD *)(a1 + 32);
                  v241 = v17 + 48 * v16;
                  v243 = *(_DWORD *)(v241 + 40);
                  v242 = (unsigned int *)(v241 + 40);
                  if (v240 < v243)
                    goto LABEL_30;
                  if (*(_DWORD *)(v18 + 24))
                  {
                    v200 = 0;
                    while (v240)
                    {
                      *(_DWORD *)(a1 + 32) = v240 - 1;
                      if (!JSC::Yarr::Interpreter<unsigned char>::checkCasedCharacter(a1, v18, *v242))
                      {
LABEL_416:
                        *(_DWORD *)(a1 + 32) = v240;
                        break;
                      }
                      ++v200;
                      v240 = *(_DWORD *)(a1 + 32);
                      if (v200 >= *(unsigned int *)(v18 + 24))
                        break;
                    }
                  }
                  else
                  {
                    v200 = 0;
                  }
                }
                else
                {
                  if (v15 <= (int)v13)
                  {
LABEL_300:
                    __break(0xC471u);
                    JUMPOUT(0x198E754FCLL);
                  }
                  v200 = 0;
                  v13 = (int)v13;
                  while (1)
                  {
                    v201 = *a2;
                    v202 = *a2 + 48 * v13;
                    if (v200 >= *(unsigned int *)(v202 + 24))
                      break;
                    v203 = *(_DWORD *)(a1 + 32);
                    if (v203 >= *(_DWORD *)(a1 + 36))
                      break;
                    *(_DWORD *)(a1 + 32) = v203 + 1;
                    if (!JSC::Yarr::Interpreter<unsigned char>::checkCasedCharacter(a1, v202, *(_DWORD *)(v201 + 48 * v13 + 40) + 1))
                    {
                      v253 = *(_DWORD *)(a1 + 32);
                      if (!v253)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E75DA4);
                      }
                      v240 = v253 - 1;
                      goto LABEL_416;
                    }
                    ++v200;
                    v13 = *a3;
                    if (*((unsigned int *)a2 + 3) <= v13)
                      goto LABEL_300;
                  }
                }
                *(_QWORD *)&a3[2 * v199 + 6] = v200;
LABEL_152:
                LODWORD(v13) = *a3 + 1;
                goto LABEL_18;
              case 0x12:
                v197 = &a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32)];
LABEL_302:
                *((_QWORD *)v197 + 3) = 0;
                goto LABEL_17;
              case 0x13:
                v55 = &a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32) + 4];
                v56 = *(unsigned __int8 *)(v18 + 16);
                if (*(_BYTE *)(v18 + 16))
                {
                  v284 = &a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32) + 4];
                  if (v56 == 1)
                  {
                    v118 = *(_DWORD *)(a1 + 32);
                    v119 = v17 + 48 * v16;
                    v121 = *(_BYTE *)(v119 + 37);
                    v120 = (_BYTE *)(v119 + 37);
                    if ((v121 & 4) != 0)
                    {
                      v217 = v17 + 48 * v16;
                      v219 = *(_DWORD *)(v217 + 40);
                      v218 = (unsigned int *)(v217 + 40);
                      if (v118 < v219)
                        goto LABEL_172;
                      if (*(_DWORD *)(v18 + 24))
                      {
                        v122 = 0;
                        while (v118)
                        {
                          *(_DWORD *)(a1 + 32) = v118 - 1;
                          if ((JSC::Yarr::Interpreter<unsigned char>::checkCharacterClass(a1, v18, *v218) & 1) == 0)
                          {
                            *(_DWORD *)(a1 + 32) = v118;
                            break;
                          }
                          ++v122;
                          v118 = *(_DWORD *)(a1 + 32);
                          if (v122 >= *(unsigned int *)(v18 + 24))
                            break;
                        }
                      }
                      else
                      {
                        v122 = 0;
                      }
                    }
                    else if (*(_DWORD *)(v18 + 24))
                    {
                      v122 = 0;
                      v123 = (_DWORD *)(v17 + 48 * v16 + 40);
                      while (v118 < *(_DWORD *)(a1 + 36))
                      {
                        v124 = v118 + 1;
                        *(_DWORD *)(a1 + 32) = v118 + 1;
                        v125 = *v123 + 1;
                        if ((*v120 & 4) != 0)
                        {
                          if (v124 < v125)
                          {
LABEL_179:
                            *(_DWORD *)(a1 + 32) = v118;
                            break;
                          }
                        }
                        else if (v124 < v125)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198E74E78);
                        }
                        v126 = JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)v18, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v124 - v125));
                        if ((*v120 & 2) != 0)
                        {
                          if (v126)
                            goto LABEL_179;
                        }
                        else if (!v126)
                        {
                          goto LABEL_179;
                        }
                        ++v122;
                        v118 = *(_DWORD *)(a1 + 32);
                        if (v122 >= *(unsigned int *)(v18 + 24))
                          break;
                      }
                    }
                    else
                    {
                      v122 = 0;
                    }
                  }
                  else
                  {
                    if (v56 != 2)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E7532CLL);
                    }
                    v122 = 0;
                    *(_QWORD *)v284 = *(unsigned int *)(a1 + 32);
                  }
                  *((_QWORD *)v284 + 1) = v122;
                }
                else
                {
                  v57 = v17 + 48 * v16;
                  v60 = *(_BYTE *)(v57 + 37);
                  v59 = (char *)(v57 + 37);
                  v58 = v60;
                  v61 = *(unsigned __int8 *)(a1 + 8) - 1;
                  if ((v60 & 4) != 0)
                  {
                    v212 = *(unsigned int *)(a1 + 32);
                    if (v61 > 1)
                    {
                      v248 = v17 + 48 * v16;
                      v250 = *(_DWORD *)(v248 + 40);
                      v249 = (_DWORD *)(v248 + 40);
                      if (v212 < v250)
                        goto LABEL_172;
                      v251 = *(_DWORD *)(v18 + 24);
                      if (v251)
                      {
                        v252 = 1;
                        do
                        {
                          if ((JSC::Yarr::Interpreter<unsigned char>::checkCharacterClass(a1, v18, v252 + *v249 - v251) & 1) == 0)
                            goto LABEL_172;
                          v251 = *(_DWORD *)(v18 + 24);
                          v21 = v252++ >= v251;
                        }
                        while (!v21);
                      }
                    }
                    else
                    {
                      v133 = &a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32) + 4];
                      *(_QWORD *)v55 = v212;
                      v213 = *(_DWORD *)(v18 + 24);
                      if (v213)
                      {
                        v214 = 0;
                        v215 = (_DWORD *)(v17 + 48 * v16 + 40);
                        v216 = -1;
                        do
                        {
                          if ((*v59 & 2) != 0)
                          {
                            if ((JSC::Yarr::Interpreter<unsigned char>::checkCharacterClass(a1, v18, v214 + *v215 - v213 + 1) & 1) == 0)goto LABEL_344;
                          }
                          else if (!JSC::Yarr::Interpreter<unsigned char>::checkCharacterClassDontAdvanceInputForNonBMP(a1, *(_QWORD *)v18, *v59, *v215 - ((v213 + v216) << (*(_BYTE *)(*(_QWORD *)v18 + 88) == 2))))
                          {
                            goto LABEL_344;
                          }
                          ++v214;
                          v213 = *(_DWORD *)(v18 + 24);
                          --v216;
                        }
                        while (v214 < v213);
                      }
                    }
                  }
                  else if (v61 < 2)
                  {
                    *(_QWORD *)v55 = *(unsigned int *)(a1 + 32);
                    if (*(_DWORD *)(v18 + 24))
                    {
                      v133 = v55;
                      v134 = 0;
                      v135 = v17 + 48 * v16;
                      v136 = 0;
                      v137 = (_DWORD *)(v135 + 40);
                      do
                      {
                        if ((*v59 & 2) != 0)
                        {
                          if ((JSC::Yarr::Interpreter<unsigned char>::checkCharacterClass(a1, v18, v136 + *v137) & 1) == 0)
                            goto LABEL_344;
                        }
                        else
                        {
                          v138 = *(unsigned __int8 *)(*(_QWORD *)v18 + 88);
                          v139 = *v137 - (v134 << (v138 == 2));
                          v140 = *(_DWORD *)(a1 + 32);
                          if ((*v59 & 4) != 0 && v140 < v139)
                            goto LABEL_344;
                          if (v138 == 2)
                          {
                            if (v140 < v139)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198E75D4CLL);
                            }
LABEL_344:
                            v165 = *v133;
LABEL_345:
                            *(_DWORD *)(a1 + 32) = v165;
                            goto LABEL_172;
                          }
                          v21 = v140 >= v139;
                          v141 = v140 - v139;
                          if (!v21)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198E75B94);
                          }
                          if (!JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)v18, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v141)))goto LABEL_344;
                        }
                        ++v134;
                        --v136;
                      }
                      while (v134 < *(_DWORD *)(v18 + 24));
                    }
                  }
                  else if (*(_DWORD *)(v18 + 24))
                  {
                    v62 = 0;
                    v63 = 0;
                    v64 = (_DWORD *)(v17 + 48 * v16 + 40);
                    do
                    {
                      v65 = v62 + *v64;
                      v66 = *(_DWORD *)(a1 + 32);
                      if ((v58 & 4) != 0)
                      {
                        if (v66 < v65)
                          goto LABEL_172;
                      }
                      else if (v66 < v65)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E74CA0);
                      }
                      v67 = JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)v18, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v63 + v66 - *v64));
                      v58 = *v59;
                      if ((*v59 & 2) != 0)
                      {
                        if (v67)
                          goto LABEL_172;
                      }
                      else if (!v67)
                      {
                        goto LABEL_172;
                      }
                      ++v63;
                      --v62;
                    }
                    while (v63 < *(_DWORD *)(v18 + 24));
                  }
                }
LABEL_75:
                v68 = *a3;
LABEL_76:
                LODWORD(v13) = v68 + 1;
                goto LABEL_18;
              case 0x14:
                v146 = JSC::Yarr::Interpreter<unsigned char>::matchBackReference(a1, *a2 + 48 * v16, (uint64_t)a3);
                LODWORD(v13) = *a3;
                if (v146)
                  goto LABEL_17;
                goto LABEL_30;
              case 0x15:
                v87 = &a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32)];
                v88 = *(_QWORD *)(v18 + 8);
                *((_QWORD *)v87 + 2) = *(unsigned int *)(a1 + 32);
                v87 += 4;
                *((_QWORD *)v87 + 1) = 0;
                v89 = v87 + 2;
                v282 = v88;
                v283 = (unint64_t)v87;
                *((_QWORD *)v87 + 2) = 0;
                v90 = *(unsigned int *)(v18 + 20);
                v284 = v87 + 2;
                if (!(_DWORD)v90)
                  goto LABEL_105;
                do
                {
                  v262 = JSC::Yarr::Interpreter<unsigned char>::allocParenthesesDisjunctionContext((_QWORD *)a1, v88, *(_QWORD *)(a1 + 16), (unsigned int *)v18, a5, a6, a7, a8);
                  v263 = 4 * *(_QWORD *)(v262 + 24);
                  v264 = v263 + 48;
                  v265 = (v263 + 55) & 0x7FFFFFFF8;
                  if (v265 < v264)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E7600CLL);
                  }
                  v266 = (unint64_t *)v262;
                  v267 = JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(a1, v88, v265 + v262, 0);
                  if ((_DWORD)v267 == 1)
                  {
                    v278 = v283;
                    v279 = *(_QWORD *)(v283 + 8);
                    *v266 = *(_QWORD *)(v283 + 16);
                    v280 = v279 + 1;
                    *(_QWORD *)(v278 + 8) = v279 + 1;
                    *(_QWORD *)(v278 + 16) = v266;
                  }
                  else
                  {
                    v14 = v267;
                    JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v266, *(_QWORD *)(a1 + 16), *(_DWORD *)v18);
                    v268 = *(unint64_t **)(a1 + 56);
                    while (1)
                    {
                      v269 = v268[1];
                      if (v268 >= v266 && v269 <= (unint64_t)v266)
                        break;
                      *v268 = v269;
                      v268 = (unint64_t *)v268[3];
                      if (!v268)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E75FECLL);
                      }
                    }
                    *v268 = (unint64_t)v266;
                    *(_QWORD *)(a1 + 56) = v268;
                    if ((_DWORD)v14)
                      return v14;
                    while (1)
                    {
                      if (!*(_QWORD *)v284)
                        goto LABEL_172;
                      v271 = *(_QWORD *)(v283 + 16);
                      v272 = *(_QWORD *)(v18 + 8);
                      v273 = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(v271);
                      v274 = JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(a1, v272, v273, 1);
                      if ((_DWORD)v274 == 1)
                        break;
                      v14 = v274;
                      JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput(v271, *(_QWORD *)(a1 + 16), *(_DWORD *)v18);
                      if (!*(_QWORD *)v284)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E7602CLL);
                      }
                      v275 = v283;
                      v276 = *(uint64_t **)(v283 + 16);
                      if (!v276)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E7604CLL);
                      }
                      v277 = *v276;
                      *(_QWORD *)(v283 + 8) = *(_QWORD *)v284 - 1;
                      *(_QWORD *)(v275 + 16) = v277;
                      JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, v271);
                      if ((_DWORD)v14)
                        return v14;
                    }
                    v280 = *(_QWORD *)v284;
                  }
                  v88 = v282;
                }
                while (v280 < v90);
                JSC::Yarr::Interpreter<unsigned char>::recordParenthesesMatch(a1, (int *)v18, *(_QWORD *)(v283 + 16));
                v89 = v284;
LABEL_105:
                v91 = *(unsigned __int8 *)(v18 + 16);
                if (v91 == 1)
                {
                  v92 = *(_QWORD *)v89;
                  if (*(_QWORD *)v89 < (unint64_t)*(unsigned int *)(v18 + 24))
                  {
                    do
                    {
                      v93 = (_QWORD *)JSC::Yarr::Interpreter<unsigned char>::allocParenthesesDisjunctionContext((_QWORD *)a1, v88, *(_QWORD *)(a1 + 16), (unsigned int *)v18, a5, a6, a7, a8);
                      v94 = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext((uint64_t)v93);
                      v95 = a1;
                      v96 = v88;
                      v97 = v94;
                      for (j = 0; ; j = 1)
                      {
                        v14 = JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(v95, v96, v97, j);
                        if ((_DWORD)v14 != 1)
                        {
                          JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v93, *(_QWORD *)(a1 + 16), *(_DWORD *)v18);
                          JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v93);
                          if ((_DWORD)v14)
                            return v14;
                          v92 = *(_QWORD *)v284;
                          goto LABEL_124;
                        }
                        if (*(_DWORD *)(v94 + 4) != *(_DWORD *)(v94 + 8))
                          break;
                        v95 = a1;
                        v96 = v282;
                        v97 = v94;
                      }
                      v88 = v282;
                      v99 = v283;
                      v100 = *(_QWORD *)(v283 + 8);
                      *v93 = *(_QWORD *)(v283 + 16);
                      v92 = v100 + 1;
                      *(_QWORD *)(v99 + 8) = v100 + 1;
                      *(_QWORD *)(v99 + 16) = v93;
                    }
                    while (v100 + 1 < (unint64_t)*(unsigned int *)(v18 + 24));
                  }
LABEL_124:
                  if (v92)
                  {
                    v109 = v17 + 48 * v16;
                    v111 = *(_BYTE *)(v109 + 37);
                    v110 = (unsigned __int8 *)(v109 + 37);
                    if ((v111 & 1) != 0)
                    {
                      v112 = *(_QWORD *)(v283 + 16);
                      v113 = *(_DWORD *)v18;
                      v114 = v17 + 48 * v16;
                      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * ((2 * v113) | (*v110 >> 2) & 1)) = *(_DWORD *)(JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(v112) + 4)
                                                                                                - *(_DWORD *)(v114 + 40);
                      v115 = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(v112);
                      v116 = *(_QWORD *)(a1 + 16);
                      *(_DWORD *)(v116 + 4 * (((2 * v113) | 1) - ((*v110 >> 2) & 1))) = *(_DWORD *)(v115 + 8)
                                                                                        - *(_DWORD *)(v114 + 40);
                      v117 = *(_DWORD *)(v18 + 4);
                      if (v117)
                        *(_DWORD *)(v116 + 4 * (v117 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1)) = v113;
                    }
                  }
                  goto LABEL_75;
                }
                if (*(_BYTE *)(v18 + 16))
                  v158 = v91 == 2;
                else
                  v158 = 1;
                if (!v158)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E74EA4);
                }
                goto LABEL_75;
              case 0x16:
                v51 = a3 + 4;
                v52 = *(unsigned int *)(v17 + 48 * v16 + 32);
                v53 = *(unsigned __int8 *)(v18 + 16);
                if (v53 == 1)
                {
                  *(_QWORD *)&v51[2 * v52] = *(unsigned int *)(a1 + 32);
                }
                else if (v53 == 2)
                {
                  *(_QWORD *)&v51[2 * v52] = -1;
                  LODWORD(v13) = *(_DWORD *)(v18 + 8) + v13;
                  goto LABEL_17;
                }
                v54 = *(unsigned __int8 *)(v17 + 48 * v16 + 37);
                if ((v54 & 1) != 0)
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * ((v54 >> 2) & 1 | (2 * *(_DWORD *)v18))) = *(_DWORD *)(a1 + 32) - *(_DWORD *)(v17 + 48 * v16 + 40);
LABEL_23:
                  LODWORD(v13) = *a3;
                }
                goto LABEL_17;
              case 0x17:
                if ((*(_BYTE *)(v17 + 48 * v16 + 37) & 1) != 0)
                {
                  v71 = *(_DWORD *)v18;
                  v72 = *(_QWORD *)(a1 + 16);
                  *(_DWORD *)(v72
                            + 4 * (((*(_BYTE *)(v17 + 48 * v16 + 37) & 4) == 0) | (2 * *(_DWORD *)v18))) = *(_DWORD *)(a1 + 32) - *(_DWORD *)(v17 + 48 * v16 + 40);
                  v73 = *(_DWORD *)(v18 + 4);
                  if (v73)
                    *(_DWORD *)(v72 + 4 * (v73 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1)) = v71;
                }
                if (!*(_BYTE *)(v18 + 16))
                  goto LABEL_23;
                LODWORD(v13) = *a3;
                if (*(_QWORD *)&a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32) + 4] != *(_DWORD *)(a1 + 32))
                  goto LABEL_17;
                goto LABEL_30;
              case 0x18:
              case 0x1A:
                *(_QWORD *)&a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32) + 4] = *(unsigned int *)(a1 + 32);
                goto LABEL_17;
              case 0x19:
                if (*(_QWORD *)&a3[2 * *(unsigned int *)(v17 + 48 * v16 + 32) + 4] == *(_DWORD *)(a1 + 32))
                  goto LABEL_30;
                LODWORD(v13) = v13 - *(_DWORD *)(v18 + 8);
                goto LABEL_18;
              case 0x1B:
                v180 = JSC::Yarr::Interpreter<unsigned char>::matchParentheticalAssertionEnd(a1, (int *)(*a2 + 48 * v16), a3);
LABEL_260:
                LODWORD(v13) = *a3;
                if (v180)
                  goto LABEL_261;
                goto LABEL_30;
              case 0x1C:
                v19 = *(_DWORD *)(a1 + 32);
                v20 = v19 + *(_DWORD *)v18;
                v21 = v20 <= *(_DWORD *)(a1 + 36) && v20 >= v19;
                if (!v21)
                  goto LABEL_30;
                *(_DWORD *)(a1 + 32) = v20;
                goto LABEL_17;
              case 0x1D:
                v192 = *(_DWORD *)(a1 + 32);
                if (v192 < *(_DWORD *)v18)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E75D2CLL);
                }
                *(_DWORD *)(a1 + 32) = v192 - *(_DWORD *)v18;
                goto LABEL_261;
              case 0x1E:
                v191 = *(_DWORD *)(a1 + 32);
                if (v191 < *(_DWORD *)v18 || v191 - *(_DWORD *)v18 >= *(_DWORD *)(a1 + 36))
                  goto LABEL_30;
                goto LABEL_261;
              case 0x1F:
                if ((JSC::Yarr::Interpreter<unsigned char>::matchDotStarEnclosure(a1, (_BYTE *)(*a2 + 48 * v16), (uint64_t)a3) & 1) == 0)goto LABEL_172;
                return 1;
              default:
                __break(0xC471u);
                JUMPOUT(0x198E756F0);
            }
            break;
          }
          while (2)
          {
            if (v207 == v206)
              goto LABEL_421;
            v246 = v245 - 1;
            *(_DWORD *)(a1 + 32) = v245 - 1;
            if (*((unsigned int *)a2 + 3) <= (unint64_t)(int)v13)
            {
              __break(0xC471u);
              JUMPOUT(0x198E75D84);
            }
            if ((*(_BYTE *)(v8 + 37) & 4) != 0)
            {
              if (v244 <= v246)
                goto LABEL_392;
              v247 = -1;
            }
            else
            {
              if (v244 > v246)
              {
                __break(0xC471u);
                JUMPOUT(0x198E75CACLL);
              }
LABEL_392:
              v247 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + ~v244 + v245);
            }
            if (v247 != *(_DWORD *)v8)
            {
LABEL_419:
              *(_DWORD *)(a1 + 32) = v245;
LABEL_420:
              LODWORD(v206) = v207;
              goto LABEL_421;
            }
            ++v207;
            --v245;
            if (v207 >= *(_DWORD *)(v18 + 24))
              goto LABEL_420;
            continue;
          }
        }
        if (v70 == 1 && *(_QWORD *)&v30[2 * v69] == -1)
          LODWORD(v13) = v13 - *(_DWORD *)(v32 + 8);
LABEL_35:
        LODWORD(v13) = v13 - 1;
LABEL_36:
        *a3 = v13;
        v15 = *((unsigned int *)a2 + 3);
LABEL_37:
        v29 = (int)v13;
        if (v15 <= (int)v13)
          goto LABEL_436;
        break;
      case 0x18:
        goto LABEL_166;
      case 0x19:
        __break(0xC471u);
        JUMPOUT(0x198E75030);
      case 0x1A:
        v142 = v31 + 48 * v29;
        v145 = *(_BYTE *)(v142 + 37);
        v143 = (char *)(v142 + 37);
        v144 = v145;
        if ((v145 & 4) != 0)
        {
          *(_DWORD *)(a1 + 32) = *(_QWORD *)&v30[2 * *(unsigned int *)(v31 + 48 * v29 + 32)];
          v144 = *v143;
        }
        if ((v144 & 2) == 0)
          goto LABEL_35;
LABEL_166:
        v50 = v13 + *(_DWORD *)(v32 + 8);
        goto LABEL_121;
      case 0x1B:
        v173 = v30;
        v174 = v8;
        JSC::Yarr::Interpreter<unsigned char>::backtrackParentheticalAssertionEnd(a1, (unsigned int *)(*a2 + 48 * v29), a3);
        v8 = v174;
        v30 = v173;
        goto LABEL_42;
      case 0x1C:
        v33 = *(_DWORD *)(a1 + 32);
        if (v33 < *(_DWORD *)v32)
        {
          __break(0xC471u);
          JUMPOUT(0x198E74C0CLL);
        }
        *(_DWORD *)(a1 + 32) = v33 - *(_DWORD *)v32;
        goto LABEL_35;
      case 0x1D:
        v170 = *(_DWORD *)(a1 + 32);
        v171 = v170 + *(_DWORD *)v32;
        if (v171 <= *(_DWORD *)(a1 + 36) && v171 >= v170)
          *(_DWORD *)(a1 + 32) = v171;
        LODWORD(v13) = v13 - 1;
        goto LABEL_36;
      case 0x1F:
        __break(0xC471u);
        JUMPOUT(0x198E75070);
      default:
        __break(0xC471u);
        JUMPOUT(0x198E751C8);
    }
  }
}

uint64_t WTF::BumpPointerAllocator::stopAllocator(uint64_t this)
{
  _QWORD *v1;
  void *v2;
  size_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (this)
  {
    v1 = *(_QWORD **)(this + 16);
    *(_QWORD *)this = *(_QWORD *)(this + 8);
    if (v1)
    {
      v4 = this;
      while (1)
      {
        v2 = (void *)v1[5];
        v3 = v1[6];
        v1[5] = 0;
        v1[6] = 0;
        v1[4] = 0;
        v5 = (_QWORD *)v1[2];
        this = munmap(v2, v3);
        if ((_DWORD)this == -1)
          break;
        this = v4;
        v1 = v5;
        *(_QWORD *)(v4 + 16) = v5;
        if (!v5)
          return this;
      }
      __break(0xC471u);
    }
  }
  return this;
}

char *WTF::BumpPointerPool::create(WTF::BumpPointerPool *this)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  char *result;
  char *v7;
  char *v8;

  v2 = WTF::pageSize(this);
  v3 = 4096;
  if (v2 > 0x1000)
    v3 = v2;
  v4 = (char *)this + 56;
  do
  {
    v5 = v3;
    v3 *= 2;
  }
  while (v5 < (unint64_t)v4);
  result = (char *)WTF::OSAllocator::reserveAndCommit(v5, -1, 1, 0, 0, 0);
  if (result)
  {
    v7 = result;
    v8 = &result[v5];
    *((_QWORD *)v8 - 7) = v7;
    *((_QWORD *)v8 - 6) = v7;
    result = v8 - 56;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = v7;
    *((_QWORD *)result + 5) = v7;
    *((_QWORD *)result + 6) = v5;
  }
  return result;
}

char *WTF::BumpPointerPool::ensureCapacity(char *this, WTF::BumpPointerPool *a2)
{
  char *v2;
  char *v3;

  v2 = this;
  if ((char *)a2 + *(_QWORD *)this > this)
  {
    while (1)
    {
      this = (char *)*((_QWORD *)v2 + 2);
      if (!this)
        break;
      v2 = (char *)*((_QWORD *)v2 + 2);
      if ((char *)a2 + *(_QWORD *)this <= this)
        return this;
    }
    v3 = v2;
    this = WTF::BumpPointerPool::create(a2);
    *((_QWORD *)v3 + 2) = this;
    *((_QWORD *)this + 3) = v3;
  }
  return this;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::matchAssertionWordBoundary(_DWORD *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = a1[8];
  if (v5 == v4)
  {
    v6 = 0;
    v7 = *(_DWORD *)(a2 + 40);
    if (v4)
    {
LABEL_3:
      v8 = v7 >= v4;
      v7 -= v4;
      if (!v8)
      {
LABEL_4:
        __break(0xC471u);
        JUMPOUT(0x198E76394);
      }
      if (v7 != a1[9])
      {
        v9 = *(_QWORD *)(*(_QWORD *)a1 + 72);
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v8 = v5 >= v4 + 1;
    v10 = v5 - (v4 + 1);
    if (!v8)
      goto LABEL_4;
    v6 = JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 72), *(unsigned __int8 *)(*((_QWORD *)a1 + 3) + v10));
    v7 = a1[8];
    if (v4)
      goto LABEL_3;
  }
  v11 = a1[9];
  if (v7 != v11)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 72);
    if (v7 >= v11)
    {
      v13 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
LABEL_13:
    v13 = *(unsigned __int8 *)(*((_QWORD *)a1 + 3) + v7);
LABEL_14:
    v12 = JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(v9, v13);
    return (v6 != v12) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
  }
LABEL_11:
  v12 = 0;
  return (v6 != v12) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
}

BOOL JSC::Yarr::Interpreter<unsigned char>::checkCasedCharacter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  int v4;

  v3 = *(_DWORD *)(a1 + 32);
  if ((*(_BYTE *)(a2 + 37) & 4) != 0)
  {
    if (v3 < a3)
    {
      v4 = -1;
      return *(_DWORD *)a2 == v4 || *(_DWORD *)(a2 + 4) == v4;
    }
  }
  else if (v3 < a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198E763E8);
  }
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v3 - a3);
  return *(_DWORD *)a2 == v4 || *(_DWORD *)(a2 + 4) == v4;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::matchBackReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  int v15;
  unsigned int v16;
  int v17;

  v5 = (_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 16);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
LABEL_5:
    *v5 = *(unsigned int *)(a1 + 32);
    goto LABEL_7;
  }
  if (v6 != 1)
  {
    if (v6 != 2)
      goto LABEL_7;
    *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = 0;
    goto LABEL_5;
  }
  *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = 0;
LABEL_7:
  v7 = *(_DWORD *)(a2 + 4);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_DWORD *)(v8 + 4 * (v7 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1));
    if (!v9)
      return 1;
  }
  else
  {
    v9 = *(_DWORD *)a2;
    v8 = *(_QWORD *)(a1 + 16);
  }
  v10 = *(_DWORD *)(v8 + 4 * (2 * v9));
  result = 1;
  v12 = *(_DWORD *)(v8 + 4 * ((2 * v9) | 1u));
  if (v12 != -1 && v10 != -1 && v10 != v12)
  {
    v15 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
    {
      if (v15 == 2)
        return result;
      if (v15 != 1)
      {
        result = 1031;
        __break(0xC471u);
        return result;
      }
      if (*(_DWORD *)(a2 + 24))
      {
        v16 = 0;
        do
        {
          if (!JSC::Yarr::Interpreter<unsigned char>::tryConsumeBackReference(a1, v10, v12, a2))
            break;
          ++v16;
        }
        while (v16 < *(_DWORD *)(a2 + 24));
      }
      else
      {
        v16 = 0;
      }
      v5[1] = v16;
      return 1;
    }
    if (*(_DWORD *)(a2 + 24))
    {
      v17 = 0;
      while ((JSC::Yarr::Interpreter<unsigned char>::tryConsumeBackReference(a1, v10, v12, a2) & 1) != 0)
      {
        if (++v17 >= *(_DWORD *)(a2 + 24))
          return 1;
      }
      result = 0;
      *(_DWORD *)(a1 + 32) = *v5;
    }
  }
  return result;
}

BOOL JSC::Yarr::Interpreter<unsigned char>::matchParentheticalAssertionEnd(uint64_t a1, int *a2, _DWORD *a3)
{
  char v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  *(_DWORD *)(a1 + 32) = *(_QWORD *)&a3[2 * a2[8] + 4];
  v3 = *((_BYTE *)a2 + 37);
  if ((v3 & 2) != 0)
  {
    v4 = *a2;
    if (a2[1] >= *a2)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = 2 * v4;
      do
      {
        *(_DWORD *)(v5 + 4 * v6) = -1;
        ++v4;
        v6 += 2;
      }
      while (v4 <= a2[1]);
    }
    *a3 -= a2[2];
  }
  return (v3 & 2) == 0;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::matchDotStarEnclosure(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int i;

  if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 0x10) != 0)
  {
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 64);
    i = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v6 = *(_DWORD *)(a3 + 4);
    if (v6 > *(_DWORD *)(a1 + 64))
    {
      do
      {
        v7 = v6 - 1;
        if (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 64), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v6 - 1)))
        {
          break;
        }
        --v6;
      }
      while (v7 != *(_DWORD *)(a1 + 64));
    }
    for (i = *(_DWORD *)(a1 + 32);
          i != *(_DWORD *)(a1 + 36)
       && !JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 64), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + i));
    if ((v6 && (*a2 & 1) != 0 || i != *(_DWORD *)(a1 + 36) && (*a2 & 2) != 0)
      && (*(_WORD *)(*(_QWORD *)a1 + 8) & 8) == 0)
    {
      return 0;
    }
    *(_DWORD *)(a3 + 4) = v6;
  }
  *(_DWORD *)(a3 + 8) = i;
  return 1;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::backtrackPatternCharacter(uint64_t a1, int *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;

  v3 = (_QWORD *)(a3 + 8 * a2[8] + 16);
  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 2)
  {
    if ((*((_BYTE *)a2 + 37) & 4) != 0)
    {
      v15 = *(_DWORD *)(a1 + 32);
      v16 = a2[10];
      if (v15 < v16)
        return 0;
      if (!v15 || (v19 = *(_QWORD *)(a3 + 8 * a2[8] + 24), v19 >= a2[6]))
      {
LABEL_39:
        v5 = 0;
        *(_DWORD *)(a1 + 32) = *v3;
        return v5;
      }
      v20 = v15 - 1;
      *(_DWORD *)(a1 + 32) = v15 - 1;
      v3[1] = v19 + 1;
      if ((*((_BYTE *)a2 + 37) & 4) != 0)
      {
        v21 = *a2;
        v8 = v20 >= v16;
        v14 = v20 - v16;
        if (!v8)
        {
          v22 = -1;
LABEL_31:
          if (v21 == v22)
            return 1;
          goto LABEL_39;
        }
LABEL_30:
        v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v14);
        goto LABEL_31;
      }
      v8 = v20 >= v16;
      v14 = v20 - v16;
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198E76888);
      }
    }
    else
    {
      v10 = *(_QWORD *)(a3 + 8 * a2[8] + 24);
      if (v10 >= a2[6])
        goto LABEL_39;
      v11 = *(_DWORD *)(a1 + 32);
      if (v11 >= *(_DWORD *)(a1 + 36))
        goto LABEL_39;
      v12 = v11 + 1;
      *(_DWORD *)(a1 + 32) = v12;
      v3[1] = v10 + 1;
      v13 = a2[10] + 1;
      if ((*((_BYTE *)a2 + 37) & 4) != 0)
      {
        v8 = v12 >= v13;
        v23 = v12 - v13;
        if (v8)
          v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v23);
        else
          v24 = -1;
        if (*a2 == v24)
          return 1;
        goto LABEL_39;
      }
      v14 = v12 - v13;
      if (v12 < v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198E767C4);
      }
    }
    v21 = *a2;
    goto LABEL_30;
  }
  if (v4 != 1)
    return 0;
  v5 = *(_QWORD *)(a3 + 8 * a2[8] + 24);
  if (v5)
  {
    *(_QWORD *)(a3 + 8 * a2[8] + 24) = v5 - 1;
    if (*a2 < 0x10000)
      v6 = 1;
    else
      v6 = 2;
    v7 = *(_DWORD *)(a1 + 32);
    if ((*((_BYTE *)a2 + 37) & 4) == 0)
    {
      v8 = v7 >= v6;
      v9 = v7 - v6;
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198E76868);
      }
      *(_DWORD *)(a1 + 32) = v9;
      return 1;
    }
    v17 = v6 + v7;
    if (v17 >= v7 && v17 <= *(_DWORD *)(a1 + 36))
    {
      *(_DWORD *)(a1 + 32) = v17;
      return 1;
    }
    return 0;
  }
  return v5;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::backtrackPatternCasedCharacter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int v16;

  v3 = (_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 16);
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 2)
  {
    if ((*(_BYTE *)(a2 + 37) & 4) == 0)
    {
      v8 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24);
      if (v8 >= *(unsigned int *)(a2 + 24))
      {
        v9 = *(_DWORD *)(a1 + 32);
      }
      else
      {
        v9 = *(_DWORD *)(a1 + 32);
        if (v9 < *(_DWORD *)(a1 + 36))
        {
          *(_DWORD *)(a1 + 32) = ++v9;
          v3[1] = ++v8;
          v10 = *(_DWORD *)(a2 + 40) + 1;
          if ((*(_BYTE *)(a2 + 37) & 4) != 0)
          {
            if (v9 < v10)
            {
              v15 = -1;
LABEL_27:
              v5 = 1;
              if (*(_DWORD *)a2 == v15 || *(_DWORD *)(a2 + 4) == v15)
                return v5;
              goto LABEL_29;
            }
          }
          else if (v9 < v10)
          {
            goto LABEL_39;
          }
          v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v9 - v10);
          goto LABEL_27;
        }
      }
LABEL_29:
      if (v9 < v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198E76AD0);
      }
      v5 = 0;
      *(_DWORD *)(a1 + 32) = v9 - v8;
      return v5;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = *(_DWORD *)(a2 + 40);
    if (v11 < v12)
      return 0;
    if (!v11 || (v13 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24), v13 >= *(unsigned int *)(a2 + 24)))
    {
LABEL_36:
      v5 = 0;
      *(_DWORD *)(a1 + 32) = *v3;
      return v5;
    }
    v14 = v11 - 1;
    *(_DWORD *)(a1 + 32) = v14;
    v3[1] = v13 + 1;
    if ((*(_BYTE *)(a2 + 37) & 4) != 0)
    {
      if (v14 < v12)
      {
        v16 = -1;
LABEL_34:
        v5 = 1;
        if (*(_DWORD *)a2 == v16 || *(_DWORD *)(a2 + 4) == v16)
          return v5;
        goto LABEL_36;
      }
    }
    else if (v14 < v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198E76A18);
    }
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v14 - v12);
    goto LABEL_34;
  }
  if (v4 != 1)
    return 0;
  v5 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24);
  if (v5)
  {
    *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = v5 - 1;
    v6 = *(_DWORD *)(a1 + 32);
    if ((*(_BYTE *)(a2 + 37) & 4) == 0)
    {
      if (v6)
      {
        v7 = v6 - 1;
LABEL_17:
        *(_DWORD *)(a1 + 32) = v7;
        return 1;
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x198E76988);
    }
    if (v6 < *(_DWORD *)(a1 + 36))
    {
      v7 = v6 + 1;
      goto LABEL_17;
    }
    return 0;
  }
  return v5;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::backtrackBackReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v5 = *(unsigned int *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 4 * (v6 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1));
    if (!v8)
      return 0;
  }
  else
  {
    v8 = *(_DWORD *)a2;
    v7 = *(_QWORD *)(a1 + 16);
  }
  v9 = *(_DWORD *)(v7 + 4 * (2 * v8));
  v10 = *(_DWORD *)(v7 + 4 * ((2 * v8) | 1u));
  if (v9 == -1 || v9 == v10)
    return 0;
  v13 = (_QWORD *)(a3 + 8 * v5 + 16);
  v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 2)
  {
    if (v13[1] >= (unint64_t)*(unsigned int *)(a2 + 24)
      || !JSC::Yarr::Interpreter<unsigned char>::tryConsumeBackReference(a1, v9, v10, a2))
    {
      goto LABEL_21;
    }
    ++v13[1];
  }
  else
  {
    if (v14 != 1)
    {
      if (!*(_BYTE *)(a2 + 16))
      {
LABEL_21:
        result = 0;
        *(_DWORD *)(a1 + 32) = *v13;
        return result;
      }
      return 0;
    }
    v15 = v13[1];
    if (!v15)
      return 0;
    v13[1] = v15 - 1;
    v16 = *(_DWORD *)(a1 + 32);
    if ((*(_BYTE *)(a2 + 37) & 4) != 0)
    {
      v17 = v16 + v10 - v9;
      if (v17 < v16 || v17 > *(_DWORD *)(a1 + 36))
        return 0;
    }
    else
    {
      v17 = v9 - v10 + v16;
    }
    *(_DWORD *)(a1 + 32) = v17;
  }
  return 1;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::backtrackParentheticalAssertionEnd(uint64_t result, unsigned int *a2, _DWORD *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  *(_DWORD *)(result + 32) = *(_QWORD *)&a3[2 * a2[8] + 4];
  v3 = *a2;
  if (a2[1] >= *a2)
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = 2 * v3;
    do
    {
      *(_DWORD *)(v4 + 4 * v5) = -1;
      ++v3;
      v5 += 2;
    }
    while (v3 <= a2[1]);
  }
  *a3 -= a2[2];
  return result;
}

BOOL JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  BOOL v17;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  if ((*(_BYTE *)(a1 + 89) & 2) != 0)
    return 1;
  if (a2 >= 0x80)
  {
    v25 = a2;
    v23 = a1;
    v7 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD **)(a1 + 48);
      if (v7 < 7)
      {
        if (*v8 == v25)
          return 1;
        v19 = 0;
        while (v7 - 1 != v19)
        {
          v20 = v8[++v19];
          if (v20 == v25)
          {
            if (v19 >= v7)
              break;
            return 1;
          }
        }
      }
      else if (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(v25, (uint64_t)v8, v7))
      {
        return 1;
      }
    }
    v9 = *(unsigned int *)(v23 + 76);
    if (!(_DWORD)v9)
      return 0;
    v10 = *(_QWORD *)(v23 + 64);
    if (v9 <= 6)
    {
      v21 = 0;
      v22 = (unsigned int *)(v10 + 4);
      v17 = 1;
      do
      {
        if (*(v22 - 1) <= v25 && *v22 >= v25)
          break;
        v17 = ++v21 < v9;
        v22 += 2;
      }
      while (v9 != v21);
      return v17;
    }
    v11 = v25;
    return (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(v11, v10, v9) & 1) != 0;
  }
  v2 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v2)
  {
LABEL_18:
    v9 = *(unsigned int *)(a1 + 44);
    if (!(_DWORD)v9)
      return 0;
    v14 = *(_QWORD *)(a1 + 32);
    if (v9 <= 6)
    {
      v15 = 0;
      v16 = (_DWORD *)(v14 + 4);
      v17 = 1;
      do
      {
        if (*(v16 - 1) <= a2 && *v16 >= a2)
          break;
        v17 = ++v15 < v9;
        v16 += 2;
      }
      while (v9 != v15);
      return v17;
    }
    v11 = a2;
    v10 = v14;
    return (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(v11, v10, v9) & 1) != 0;
  }
  v3 = *(_DWORD **)(a1 + 16);
  if (v2 >= 7)
  {
    v24 = a1;
    v26 = a2;
    v12 = JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(a2, (uint64_t)v3, v2);
    a2 = v26;
    v13 = v12;
    a1 = v24;
    if (v13)
      return 1;
    goto LABEL_18;
  }
  if (*v3 != (_DWORD)a2)
  {
    v4 = 0;
    v5 = v3 + 1;
    while (v2 - 1 != v4)
    {
      v6 = v5[v4++];
      if (v6 == (_DWORD)a2)
      {
        if (v4 < v2)
          return 1;
        goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
  return 1;
}

BOOL JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(_BOOL8 result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v3 = 0;
  v4 = a3 - 1;
  while (1)
  {
    v5 = v3 + ((v4 - v3) >> 1);
    if (v5 >= a3)
      break;
    v6 = *(_DWORD *)(a2 + 4 * v5);
    if (result == v6)
      return result == v6;
    if (result - v6 < 0)
    {
      if (v4 - v3 < 2)
        return result == v6;
      v4 = v5 - 1;
    }
    else
    {
      v3 = v5 + 1;
    }
    if (v3 > v4)
      return result == v6;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(uint64_t result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = 0;
  v4 = a3 - 1;
  while (1)
  {
    v5 = v3 + ((v4 - v3) >> 1);
    if (v5 >= a3)
      break;
    if ((int)result - *(_DWORD *)(a2 + 8 * v5) < 0)
    {
      if (v4 - v3 < 2)
        return 0;
      v4 = v5 - 1;
    }
    else
    {
      if (*(_DWORD *)(a2 + 8 * v5 + 4) >= result)
        return 1;
      v3 = v5 + 1;
    }
    if (v3 > v4)
      return 0;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::checkCharacterClass(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 32);
  if ((*(_BYTE *)(a2 + 37) & 4) != 0)
  {
    if (v4 < a3)
      return 0;
  }
  else if (v4 < a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198E76F90);
  }
  result = JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(*(_QWORD *)a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v4 - a3));
  if ((*(_BYTE *)(a2 + 37) & 2) != 0)
    return result ^ 1;
  return result;
}

BOOL JSC::Yarr::Interpreter<unsigned char>::checkCharacterClassDontAdvanceInputForNonBMP(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v4 = *(_DWORD *)(a1 + 32);
  if ((a3 & 4) != 0 && v4 < a4)
    return 0;
  if (*(_BYTE *)(a2 + 88) != 2)
  {
    v5 = v4 >= a4;
    v6 = v4 - a4;
    if (v5)
      return JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v6));
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198E77008);
  }
  if (v4 < a4)
    goto LABEL_10;
  return 0;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::tryConsumeBackReference(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v5 = a2;
  v7 = a3 - a2;
  if ((*(_BYTE *)(a4 + 37) & 4) == 0)
  {
    v8 = *(_DWORD *)(a1 + 32);
    v9 = v8 + v7;
    if (v8 + v7 > *(_DWORD *)(a1 + 36) || v9 < v8)
      return 0;
    *(_DWORD *)(a1 + 32) = v9;
  }
  if (a3 == a2)
  {
LABEL_19:
    if ((*(_BYTE *)(a4 + 37) & 4) == 0)
      return 1;
    v27 = *(_DWORD *)(a1 + 32);
    v26 = (unsigned int *)(a1 + 32);
    v25 = v27;
    if (v27 < v7)
    {
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x198E771D4);
    }
    result = 1;
    v11 = v26;
LABEL_38:
    *v11 = v25 - v7;
    return result;
  }
  v11 = (unsigned int *)(a1 + 32);
  v12 = -a3;
  v13 = a3 - a2;
  while (1)
  {
    v14 = *(_DWORD *)(a4 + 40);
    v15 = v13 + v14;
    v16 = *(_BYTE *)(a4 + 37);
    v17 = *v11;
    if ((v16 & 4) != 0)
    {
      if (v15 > v17)
        return 0;
    }
    else if (v17 < v15)
    {
      goto LABEL_42;
    }
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(unsigned __int8 *)(v18 + v5);
    v20 = *(unsigned __int8 *)(v18 + v12 + v5 + v17 - v14);
    if (v19 == v20)
      goto LABEL_15;
    if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 4) == 0)
      goto LABEL_35;
    if ((v20 & v19 & 0x80) != 0 || *(_BYTE *)(a1 + 8))
      break;
    if (v19 - 97 >= 0x1A)
      v22 = 255;
    else
      v22 = 223;
    v23 = v22 & v19;
    if ((v20 - 97) >= 0x1A)
      v24 = 255;
    else
      v24 = 223;
    if (v23 != (v24 & v20))
      goto LABEL_35;
LABEL_15:
    ++v5;
    if (!--v13)
      goto LABEL_19;
  }
  if (JSC::Yarr::areCanonicallyEquivalent(v19, v20, *(unsigned __int8 *)(a1 + 8) - 1 < 2))
    goto LABEL_15;
  v16 = *(_BYTE *)(a4 + 37);
LABEL_35:
  if ((v16 & 4) == 0)
  {
    v25 = *v11;
    if (*v11 < v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198E771F4);
    }
    result = 0;
    goto LABEL_38;
  }
  return 0;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::allocParenthesesDisjunctionContext(_QWORD *a1, unint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v12;
  __int32 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::BumpPointerPool *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  WTF::BumpPointerPool *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int8x8_t v50;
  __int32 v51;
  uint8x8_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;

  v10 = a2;
  v53 = 0x8000000000000000;
  v12 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  if (!*(_DWORD *)(*a1 + 32))
  {
    v13 = 0;
    goto LABEL_3;
  }
  if (v12)
  {
    v45 = *a4;
    v46 = *(unsigned int *)(*((_QWORD *)a4 + 1) + 16);
    do
    {
      if (v45 >= *(unsigned int *)(*a1 + 60))
        goto LABEL_54;
      a2 = *(unsigned int *)(*(_QWORD *)(*a1 + 48) + 4 * v45);
      if ((_DWORD)a2)
        WTF::BitVector::set((WTF::BitVector *)&v53, a2);
      ++v45;
      --v46;
    }
    while (v46);
    v47 = v53;
    if ((v53 & 0x8000000000000000) == 0)
    {
      v13 = WTF::BitVector::bitCountSlow((WTF::BitVector *)&v53);
      goto LABEL_3;
    }
  }
  else
  {
    v47 = 0x8000000000000000;
  }
  v50 = vcnt_s8((int8x8_t)v47);
  v50.i16[0] = vaddlv_u8((uint8x8_t)v50);
  v51 = v50.i32[0];
  v50.i32[0] = HIDWORD(v47) & 0x7FFFFFFF;
  v52 = (uint8x8_t)vcnt_s8(v50);
  v52.i16[0] = vaddlv_u8(v52);
  v13 = v52.i32[0] + v51;
LABEL_3:
  v14 = 4 * (v13 + 2 * v12);
  v15 = v14 + 48;
  v16 = (v14 + 55) & 0x7FFFFFFF8;
  if (v16 < v15)
  {
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x198E77468);
  }
  v17 = 8 * *(unsigned int *)(v10 + 20);
  v18 = v17 + 16;
  v19 = (v17 + 23) & 0xFFFFFFFF8;
  if (v19 < v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198E77488);
  }
  v20 = (WTF::BumpPointerPool *)(v19 + v16);
  v21 = (char *)a1[7];
  v22 = *(_QWORD *)v21;
  if ((char *)v20 + *(_QWORD *)v21 > v21)
  {
    while (1)
    {
      v23 = (char *)*((_QWORD *)v21 + 2);
      if (!v23)
        break;
      v22 = *(_QWORD *)v23;
      v21 = (char *)*((_QWORD *)v21 + 2);
      if ((char *)v20 + *(_QWORD *)v23 <= v23)
        goto LABEL_7;
    }
    v44 = v20;
    v23 = WTF::BumpPointerPool::create(v20);
    v20 = v44;
    *((_QWORD *)v21 + 2) = v23;
    *((_QWORD *)v23 + 3) = v21;
    v22 = *(_QWORD *)v23;
  }
  else
  {
    v23 = (char *)a1[7];
  }
LABEL_7:
  a1[7] = v23;
  *(_QWORD *)v23 = (char *)v20 + v22;
  v24 = *a1;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = v24;
  v25 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  *(_QWORD *)(v22 + 32) = 0x8000000000000000;
  v26 = (unint64_t *)(v22 + 32);
  *(_DWORD *)(v22 + 16) = v25;
  if ((v53 & 0x8000000000000000) != 0)
  {
    *v26 = v53;
  }
  else
  {
    WTF::BitVector::setSlow((WTF::BitVector *)(v22 + 32), (const WTF::BitVector *)&v53, a3, (uint64_t)a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(v22 + 16);
  }
  v27 = (v13 + 2 * v25);
  *(_QWORD *)(v22 + 24) = v27;
  if ((v25 & 0x7FFFFFFF) != 0)
  {
    v39 = 0;
    v40 = 2 * *a4;
    do
    {
      v41 = v40 + v39;
      *(_DWORD *)(v22 + 40 + 4 * v39) = *(_DWORD *)(a3 + 4 * (v40 + v39));
      ++v39;
      *(_DWORD *)(a3 + 4 * v41) = -1;
    }
    while (v39 < (2 * *(_DWORD *)(v22 + 16)));
  }
  v28 = *v26;
  if ((*v26 & 0x8000000000000000) != 0)
  {
    v33 = __clz(__rbit64(v28));
    v29 = 63;
    if (v33 >= 0x3F)
      v33 = 63;
  }
  else
  {
    v29 = *(_QWORD *)(2 * v28);
    if ((unint64_t)(v29 + 63) < 0x40)
      goto LABEL_17;
    v30 = *(_QWORD *)(2 * v28 + 8);
    if (v30 && (v31 = __clz(__rbit64(v30)), v31 < 0x40))
    {
      v32 = 0;
    }
    else
    {
      if ((unint64_t)(v29 + 63) >> 6 == 1)
        goto LABEL_17;
      v42 = 0;
      while (1)
      {
        v43 = *(_QWORD *)(2 * v28 + 0x10 + 8 * v42);
        if (v43)
        {
          v31 = __clz(__rbit64(v43));
          if (v31 <= 0x3F)
            break;
        }
        if (((unint64_t)(v29 + 63) >> 6) - 1 == ++v42)
          goto LABEL_17;
      }
      v32 = v42 + 1;
    }
    v33 = v31 + (v32 << 6);
  }
  v54 = (unint64_t *)(v22 + 32);
  v55 = v33;
  if (v33 != v29)
  {
    v48 = 0;
    do
    {
      v49 = v33 - 1;
      *(_DWORD *)(v22 + 4 * (v48 + 2 * *(_DWORD *)(v22 + 16)) + 40) = *(_DWORD *)(a3
                                                                                                + 4
                                                                                                * (*(_DWORD *)(*(_QWORD *)(v22 + 8) + 36) + v49));
      *(_DWORD *)(a3 + 4 * (*(_DWORD *)(v24 + 36) + v49)) = 0;
      ++v48;
      WTF::BitVector::iterator::operator++(&v54);
      LODWORD(v33) = v55;
    }
    while (v55 != v29);
    v27 = *(_QWORD *)(v22 + 24);
  }
LABEL_17:
  v34 = 4 * v27;
  v35 = v34 + 48;
  v36 = (v34 + 55) & 0x7FFFFFFF8;
  if (v36 < v35)
  {
    __break(0xC471u);
    JUMPOUT(0x198E774A8);
  }
  v37 = (_QWORD *)(v36 + v22);
  *v37 = 0;
  v37[1] = 0;
  v37[2] = 0;
  if ((v53 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v53, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  return v22;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;

  v1 = 4 * *(_QWORD *)(a1 + 24);
  v2 = v1 + 48;
  v3 = (v1 + 55) & 0x7FFFFFFF8;
  if (v3 >= v2)
    return v3 + a1;
  result = 207;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(uint64_t result, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;

  v2 = *(unint64_t **)(result + 56);
  do
  {
    v3 = v2[1];
    if ((unint64_t)v2 >= a2 && v3 <= a2)
    {
      *v2 = a2;
      *(_QWORD *)(result + 56) = v2;
      return result;
    }
    *v2 = v3;
    v2 = (unint64_t *)v2[3];
  }
  while (v2);
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::parenthesesDoBacktrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t DisjunctionContext;
  uint64_t matched;

  while (*(_QWORD *)(a3 + 8))
  {
    v6 = *(_QWORD *)(a3 + 16);
    v7 = *(_QWORD *)(a2 + 8);
    DisjunctionContext = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(v6);
    matched = JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(a1, v7, DisjunctionContext, 1);
    if ((_DWORD)matched != 1)
    {
      JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput(v6, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
      JSC::Yarr::Interpreter<unsigned char>::popParenthesesDisjunctionContext(a3);
      JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, v6);
      if (!(_DWORD)matched)
        continue;
    }
    return matched;
  }
  return 0;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::recordParenthesesMatch(uint64_t result, int *a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  if ((*((_BYTE *)a2 + 37) & 1) != 0)
  {
    v3 = *a2;
    v4 = (_QWORD *)result;
    *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * ((2 * v3) | (*((unsigned __int8 *)a2 + 37) >> 2) & 1u)) = *(_DWORD *)(JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(a3) + 4) - a2[10];
    result = JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::getDisjunctionContext(a3);
    v7 = v4[2];
    *(_DWORD *)(v7 + 4 * (((2 * v3) | 1) - ((*((unsigned __int8 *)a2 + 37) >> 2) & 1u))) = *(_DWORD *)(result + 8)
                                                                                           - a2[10];
    v8 = a2[1];
    if (v8)
      *(_DWORD *)(v7 + 4 * (v8 + *(_DWORD *)(*v4 + 36) - 1)) = v3;
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::matchNonZeroDisjunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a3;
  v5 = a2;
  v6 = a1;
  while (1)
  {
    result = JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(a1, a2, a3, a4);
    if ((_DWORD)result != 1)
      break;
    if (*(_DWORD *)(v4 + 4) != *(_DWORD *)(v4 + 8))
      return 1;
    a1 = v6;
    a2 = v5;
    a3 = v4;
    a4 = 1;
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::restoreOutput(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if ((*(_DWORD *)(result + 16) & 0x7FFFFFFF) != 0)
  {
    v10 = 0;
    do
    {
      *(_DWORD *)(a2 + 4 * (2 * a3 + v10)) = *(_DWORD *)(result + 40 + 4 * v10);
      ++v10;
    }
    while (v10 < (2 * *(_DWORD *)(result + 16)));
  }
  v3 = *(_QWORD *)(result + 32);
  if ((v3 & 0x8000000000000000) != 0)
  {
    v9 = __clz(__rbit64(v3));
    v5 = 63;
    if (v9 >= 0x3F)
      v9 = 63;
  }
  else
  {
    v4 = 2 * v3;
    v5 = *(_QWORD *)(2 * v3);
    if ((unint64_t)(v5 + 63) < 0x40)
      return result;
    v6 = *(_QWORD *)(v4 + 8);
    if (v6 && (v7 = __clz(__rbit64(v6)), v7 < 0x40))
    {
      v8 = 0;
    }
    else
    {
      if ((unint64_t)(v5 + 63) >> 6 == 1)
        return result;
      v11 = 0;
      v12 = v4 + 16;
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 8 * v11);
        if (v13)
        {
          v7 = __clz(__rbit64(v13));
          if (v7 <= 0x3F)
            break;
        }
        if (((unint64_t)(v5 + 63) >> 6) - 1 == ++v11)
          return result;
      }
      v8 = v11 + 1;
    }
    v9 = v7 + (v8 << 6);
  }
  v18 = (unint64_t *)(result + 32);
  v19 = v9;
  if (v9 != v5)
  {
    v14 = 0;
    do
    {
      v15 = v5;
      v16 = a2;
      v17 = result;
      *(_DWORD *)(a2 + 4 * (v9 + *(_DWORD *)(*(_QWORD *)(result + 8) + 36) - 1)) = *(_DWORD *)(result + 4 * (v14 + 2 * *(_DWORD *)(result + 16)) + 40);
      ++v14;
      WTF::BitVector::iterator::operator++(&v18);
      v5 = v15;
      a2 = v16;
      result = v17;
      LODWORD(v9) = v19;
    }
    while (v19 != v15);
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<unsigned char>::popParenthesesDisjunctionContext(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  if (!v1 || (v2 = *(uint64_t **)(result + 16)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198E77984);
  }
  v3 = *v2;
  *(_QWORD *)(result + 8) = v1 - 1;
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::Interpreter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unsigned int v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  v8 = *(unsigned __int16 *)(a2 + 8);
  v9 = (v8 >> 5) & 2;
  if ((v8 & 0x20) != 0)
    LOBYTE(v9) = 1;
  *(_BYTE *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = a5;
  *(_BYTE *)(a1 + 40) = (v8 & 0x60) != 0;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(0);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v10 + 24) + 0x10000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = a6;
  *(_DWORD *)(a1 + 68) = 1000000;
  return a1;
}

_QWORD *JSC::Yarr::Interpreter<char16_t>::allocDisjunctionContext(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  _QWORD *v8;

  v2 = 8 * a2;
  v3 = v2 + 16;
  v4 = v2 + 23;
  v5 = v4 & 0xFFFFFFFF8;
  if ((v4 & 0xFFFFFFFF8uLL) < v3
    || (v7 = WTF::BumpPointerPool::ensureCapacity(*(char **)(a1 + 56), (WTF::BumpPointerPool *)(v4 & 0xFFFFFFFF8)),
        (*(_QWORD *)(a1 + 56) = v7) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x198E77AA0);
  }
  v8 = *(_QWORD **)v7;
  *(_QWORD *)v7 += v5;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  return v8;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::matchDisjunction(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int *v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  unsigned int v26;
  int *v27;
  int v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int *v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int Backward;
  uint64_t result;
  int *v48;
  int matched;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int *v65;
  int *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  int *v76;
  int v77;
  unint64_t v78;
  _DWORD *v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  int *v89;
  int v90;
  unsigned int v91;
  char v92;
  unsigned int v93;
  _DWORD *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  int *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  int *v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  _DWORD *v113;
  unsigned int v114;
  unsigned int v115;
  int *v116;
  unsigned int v117;
  uint64_t v118;
  _DWORD *v119;
  unsigned int v120;
  unsigned int v121;
  int *v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  _DWORD *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  char *v140;
  char v141;
  char v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;

  if ((unint64_t)&v156 < *(_QWORD *)(a1 + 48))
    return 4294967292;
  v9 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v9;
  if (!v9)
    return 4294967293;
  if ((a4 & 1) != 0)
    goto LABEL_200;
  v12 = 0;
  a3[1] = *(_DWORD *)(a1 + 32);
LABEL_5:
  *a3 = v12;
  v13 = *((unsigned int *)a2 + 3);
LABEL_6:
  if (v13 <= v12)
  {
LABEL_286:
    __break(0xC471u);
    JUMPOUT(0x198E78C08);
  }
  v14 = v12;
  v15 = a3 + 4;
  while (2)
  {
    v16 = *a2;
    v17 = *a2 + 48 * v14;
    switch(*(_BYTE *)(v17 + 36))
    {
      case 0:
      case 3:
      case 6:
        goto LABEL_9;
      case 1:
      case 2:
      case 7:
        a3[2] = *(_DWORD *)(a1 + 32);
        return 1;
      case 4:
      case 5:
        v31 = *(int *)(v17 + 4);
        *(_QWORD *)&v15[2 * *(unsigned int *)(v16 + 48 * v14 + 32)] = v31;
        v32 = v12 + v31;
        goto LABEL_28;
      case 8:
        v48 = v15;
        matched = JSC::Yarr::Interpreter<char16_t>::matchAssertionBOL(a1, *(_DWORD *)(v17 + 40));
        goto LABEL_49;
      case 9:
        v48 = v15;
        matched = JSC::Yarr::Interpreter<char16_t>::matchAssertionEOL(a1, *(_DWORD *)(v17 + 40));
        goto LABEL_49;
      case 0xA:
        v48 = v15;
        matched = JSC::Yarr::Interpreter<char16_t>::matchAssertionWordBoundary(a1, *a2 + 48 * v14);
        goto LABEL_49;
      case 0xB:
      case 0xC:
        v33 = *(unsigned __int8 *)(a1 + 8);
        if ((*(_BYTE *)(v16 + 48 * v14 + 37) & 4) != 0)
        {
          if ((v33 - 3) >= 0xFFFFFFFE && *(_DWORD *)v17 >= 0x10000u)
          {
            if (v13 <= v12)
            {
LABEL_103:
              __break(0xC471u);
              JUMPOUT(0x198E78168);
            }
            v76 = v15;
            v77 = 0;
            v78 = v12;
            v79 = (_DWORD *)(v16 + 48 * v14 + 40);
            v80 = -1;
            while (++v80 < *(_DWORD *)(*a2 + 48 * v78 + 24))
            {
              v81 = v77 + *v79;
              if (*(_DWORD *)(a1 + 32) < v81)
                goto LABEL_201;
              if ((JSC::Yarr::Interpreter<char16_t>::checkSurrogatePair(a1, *(_DWORD *)v17, v81) & 1) == 0)
                goto LABEL_200;
              v77 += 2;
              v12 = *a3;
              v78 = *a3;
              if (*((unsigned int *)a2 + 3) <= v78)
                goto LABEL_103;
            }
            ++v12;
            v15 = v76;
            goto LABEL_10;
          }
          v111 = *(_DWORD *)(a1 + 32);
          v112 = v16 + 48 * v14;
          v114 = *(_DWORD *)(v112 + 40);
          v113 = (_DWORD *)(v112 + 40);
          if (v111 < v114)
            goto LABEL_201;
          v115 = *(_DWORD *)(v17 + 24);
          if (v115)
          {
            v116 = v15;
            v117 = 1;
            do
            {
              if ((JSC::Yarr::Interpreter<char16_t>::checkCharacter(a1, *(_DWORD *)v17, *(_BYTE *)(v17 + 37), v117 + *v113 - v115) & 1) == 0)goto LABEL_259;
              v115 = *(_DWORD *)(v17 + 24);
              v20 = v117++ >= v115;
            }
            while (!v20);
            v12 = *a3;
            v15 = v116;
          }
        }
        else
        {
          if ((v33 - 1) <= 1 && *(_DWORD *)v17 >= 0x10000u)
          {
            if (v13 <= v12)
            {
LABEL_289:
              __break(0xC471u);
              JUMPOUT(0x198E78C20);
            }
            v27 = v15;
            v88 = v12;
            v89 = (int *)(v16 + 48 * v12);
            if (v89[6])
            {
              v90 = 0;
              v91 = 0;
              do
              {
                v92 = JSC::Yarr::Interpreter<char16_t>::checkSurrogatePair(a1, *v89, v90 + *(_DWORD *)(v16 + 48 * v88 + 40));
                v12 = *a3;
                if ((v92 & 1) == 0)
                  goto LABEL_201;
                v88 = v12;
                if (*((unsigned int *)a2 + 3) <= (unint64_t)v12)
                  goto LABEL_289;
                ++v91;
                v16 = *a2;
                v89 = (int *)(*a2 + 48 * v12);
                v90 -= 2;
              }
              while (v91 < v89[6]);
            }
LABEL_116:
            ++v12;
            goto LABEL_26;
          }
          if (v13 <= v12)
          {
LABEL_293:
            __break(0xC471u);
            JUMPOUT(0x198E78C40);
          }
          v34 = v12;
          v35 = (int *)(v16 + 48 * v12);
          if (v35[6])
          {
            v36 = 0;
            v37 = 0;
            v38 = *(_DWORD *)(a1 + 32);
            do
            {
              v39 = v16 + 48 * v34;
              v40 = *(_DWORD *)(v39 + 40);
              v41 = v36 + v40;
              v42 = *v35;
              if ((*(_BYTE *)(v39 + 37) & 4) != 0)
              {
                v157 = (uint64_t)v15;
                Backward = JSC::Yarr::Interpreter<char16_t>::InputStream::tryReadBackward((uint64_t *)(a1 + 24), v41);
                v15 = (int *)v157;
                goto LABEL_38;
              }
              v43 = *(_DWORD *)(a1 + 32);
              if (v43 < v41)
              {
                __break(0xC471u);
                JUMPOUT(0x198E78BD8);
              }
              v44 = v43 - v40;
              v45 = *(_QWORD *)(a1 + 24);
              Backward = *(unsigned __int16 *)(v45 + 2 * (v37 + v44));
              if ((Backward & 0xFC00) == 0xD800)
              {
                if (*(_BYTE *)(a1 + 40))
                {
                  v151 = v37 + v44 + 1;
                  v152 = *(_DWORD *)(a1 + 36);
                  if (v151 < v152)
                  {
                    v153 = *(unsigned __int16 *)(v45 + 2 * v151);
                    if ((v153 & 0xFC00) == 0xDC00)
                    {
                      if (v43 == v152)
                        goto LABEL_258;
                      *(_DWORD *)(a1 + 32) = v43 + 1;
                      Backward = v153 + (Backward << 10) - 56613888;
                    }
                  }
                }
              }
              else if (*(_BYTE *)(a1 + 40))
              {
                v155 = v41 != v43 && (Backward & 0xFC00) == 56320;
                if (v155 && (*(_WORD *)(v45 + 2 * (v37 + v44 - 1)) & 0xFC00) == 0xD800)
LABEL_258:
                  Backward = -1;
              }
LABEL_38:
              if (v42 != Backward)
                goto LABEL_199;
              v12 = *a3;
              if (*((unsigned int *)a2 + 3) <= (unint64_t)*a3)
                goto LABEL_293;
              v34 = v12;
              ++v37;
              v16 = *a2;
              v35 = (int *)(*a2 + 48 * v12);
              --v36;
            }
            while (v37 < v35[6]);
          }
        }
LABEL_9:
        ++v12;
LABEL_10:
        *a3 = v12;
        v14 = v12;
        v13 = *((unsigned int *)a2 + 3);
        if (v13 <= v12)
          goto LABEL_286;
        continue;
      case 0xD:
        v68 = v16 + 48 * v14;
        v69 = *(unsigned int *)(v68 + 32);
        v70 = *(_DWORD *)(a1 + 32);
        LOBYTE(v68) = *(_BYTE *)(v68 + 37);
        v157 = v69;
        if ((v68 & 4) != 0)
        {
          v106 = v16 + 48 * v14;
          v108 = *(_DWORD *)(v106 + 40);
          v107 = (unsigned int *)(v106 + 40);
          if (v70 < v108)
            goto LABEL_201;
          v109 = v15;
          if (*(_DWORD *)(v17 + 24))
          {
            v71 = 0;
            while (v70)
            {
              *(_DWORD *)(a1 + 32) = v70 - 1;
              v110 = *a3;
              if (*((unsigned int *)a2 + 3) <= v110)
              {
                __break(0xC471u);
                JUMPOUT(0x198E78C28);
              }
              if (!JSC::Yarr::Interpreter<char16_t>::checkCharacter(a1, *(_DWORD *)(*a2 + 48 * (int)v110), *(_BYTE *)(*a2 + 48 * (int)v110 + 37), *v107))
              {
                v15 = v109;
LABEL_267:
                *(_DWORD *)(a1 + 32) = v70;
                break;
              }
              ++v71;
              v70 = *(_DWORD *)(a1 + 32);
              v15 = v109;
              if (v71 >= *(unsigned int *)(v17 + 24))
                break;
            }
          }
          else
          {
            v71 = 0;
          }
        }
        else
        {
          if (v13 <= v12)
          {
LABEL_94:
            __break(0xC471u);
            JUMPOUT(0x198E780C8);
          }
          v71 = 0;
          v72 = v12;
          while (1)
          {
            v73 = *a2;
            v74 = *a2 + 48 * v72;
            if (v71 >= *(unsigned int *)(v74 + 24) || v70 >= *(_DWORD *)(a1 + 36))
              break;
            v75 = v15;
            *(_DWORD *)(a1 + 32) = v70 + 1;
            if (!JSC::Yarr::Interpreter<char16_t>::checkCharacter(a1, *(_DWORD *)v74, *(_BYTE *)(v74 + 37), *(_DWORD *)(v73 + 48 * v72 + 40) + 1))
            {
              v15 = v75;
              goto LABEL_267;
            }
            ++v71;
            v70 = *(_DWORD *)(a1 + 32);
            v72 = *a3;
            v15 = v75;
            if (*((unsigned int *)a2 + 3) <= v72)
              goto LABEL_94;
          }
        }
        *(_QWORD *)&a3[2 * v157 + 6] = v71;
LABEL_52:
        v32 = *a3;
LABEL_28:
        v12 = v32 + 1;
        goto LABEL_10;
      case 0xE:
        v66 = &v15[2 * *(unsigned int *)(v16 + 48 * v14 + 32)];
        *(_QWORD *)v66 = *(unsigned int *)(a1 + 32);
        *((_QWORD *)v66 + 1) = 0;
        goto LABEL_9;
      case 0xF:
      case 0x10:
        if (*(unsigned __int8 *)(a1 + 8) - 1 >= 2)
        {
          if (v13 <= v12)
          {
LABEL_288:
            __break(0xC471u);
            JUMPOUT(0x198E78C18);
          }
          v27 = v15;
          v83 = v12;
          v84 = v16 + 48 * v12;
          if (*(_DWORD *)(v84 + 24))
          {
            v85 = 0;
            v86 = 0;
            while (1)
            {
              v87 = JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(a1, v84, v85 + *(_DWORD *)(v16 + 48 * v83 + 40));
              v12 = *a3;
              if ((v87 & 1) == 0)
                goto LABEL_201;
              v83 = v12;
              if (*((unsigned int *)a2 + 3) <= (unint64_t)v12)
                goto LABEL_288;
              ++v86;
              v16 = *a2;
              v84 = *a2 + 48 * v12;
              --v85;
              if (v86 >= *(_DWORD *)(v84 + 24))
                goto LABEL_116;
            }
          }
          goto LABEL_116;
        }
        if ((*(_BYTE *)(v16 + 48 * v14 + 37) & 4) != 0)
        {
          v118 = v16 + 48 * v14;
          v120 = *(_DWORD *)(v118 + 40);
          v119 = (_DWORD *)(v118 + 40);
          if (*(_DWORD *)(a1 + 32) < v120)
            goto LABEL_201;
          if (v13 <= v12)
          {
LABEL_291:
            __break(0xC471u);
            JUMPOUT(0x198E78C30);
          }
          if (*(_DWORD *)(v16 + 48 * v12 + 24))
          {
            v111 = *(_DWORD *)(a1 + 32);
            v121 = 0;
            while (1)
            {
              v122 = v15;
              if ((JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(a1, v17, ++v121 + *v119 - *(_DWORD *)(v17 + 24)) & 1) == 0)break;
              v12 = *a3;
              v15 = v122;
              if (*((unsigned int *)a2 + 3) <= (unint64_t)*a3)
                goto LABEL_291;
              if (v121 >= *(_DWORD *)(*a2 + 48 * v12 + 24))
                goto LABEL_9;
            }
LABEL_259:
            v38 = v111;
            goto LABEL_199;
          }
        }
        else
        {
          if (v13 <= v12)
          {
LABEL_287:
            __break(0xC471u);
            JUMPOUT(0x198E78C10);
          }
          v52 = v12;
          v53 = v16 + 48 * v12;
          if (*(_DWORD *)(v53 + 24))
          {
            v54 = *(_DWORD *)(a1 + 32);
            v55 = 0;
            v56 = 0;
            while (1)
            {
              v57 = v15;
              if ((JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(a1, v53, v55 + *(_DWORD *)(v16 + 48 * v52 + 40)) & 1) == 0)break;
              v12 = *a3;
              v15 = v57;
              if (*((unsigned int *)a2 + 3) <= (unint64_t)*a3)
                goto LABEL_287;
              v52 = v12;
              ++v56;
              v16 = *a2;
              v53 = *a2 + 48 * v12;
              --v55;
              if (v56 >= *(_DWORD *)(v53 + 24))
                goto LABEL_9;
            }
            v38 = v54;
LABEL_199:
            *(_DWORD *)(a1 + 32) = v38;
            goto LABEL_200;
          }
        }
        goto LABEL_9;
      case 0x11:
        v58 = v16 + 48 * v14;
        v59 = *(unsigned int *)(v58 + 32);
        if ((*(_BYTE *)(v58 + 37) & 4) != 0)
        {
          v101 = *(_DWORD *)(a1 + 32);
          v102 = v16 + 48 * v14;
          v104 = *(_DWORD *)(v102 + 40);
          v103 = (unsigned int *)(v102 + 40);
          if (v101 < v104)
            goto LABEL_201;
          v105 = v15;
          if (*(_DWORD *)(v17 + 24))
          {
            v60 = 0;
            while (v101)
            {
              *(_DWORD *)(a1 + 32) = v101 - 1;
              if (!JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(a1, v17, *v103))
              {
                v15 = v105;
LABEL_264:
                *(_DWORD *)(a1 + 32) = v101;
                break;
              }
              ++v60;
              v101 = *(_DWORD *)(a1 + 32);
              v15 = v105;
              if (v60 >= *(unsigned int *)(v17 + 24))
                break;
            }
          }
          else
          {
            v60 = 0;
          }
        }
        else
        {
          if (v13 <= v12)
          {
LABEL_76:
            __break(0xC471u);
            JUMPOUT(0x198E77F74);
          }
          v60 = 0;
          v61 = v12;
          while (1)
          {
            v62 = *a2;
            v63 = *a2 + 48 * v61;
            if (v60 >= *(unsigned int *)(v63 + 24))
              break;
            v64 = *(_DWORD *)(a1 + 32);
            if (v64 >= *(_DWORD *)(a1 + 36))
              break;
            v65 = v15;
            *(_DWORD *)(a1 + 32) = v64 + 1;
            if ((JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(a1, v63, *(_DWORD *)(v62 + 48 * v61 + 40) + 1) & 1) == 0)
            {
              v154 = *(_DWORD *)(a1 + 32);
              if (!v154)
              {
                __break(0xC471u);
                JUMPOUT(0x198E78BF8);
              }
              v15 = v65;
              v101 = v154 - 1;
              goto LABEL_264;
            }
            ++v60;
            v61 = *a3;
            v15 = v65;
            if (*((unsigned int *)a2 + 3) <= v61)
              goto LABEL_76;
          }
        }
        *(_QWORD *)&a3[2 * v59 + 6] = v60;
        v12 = *a3 + 1;
        goto LABEL_10;
      case 0x12:
        *(_QWORD *)&a3[2 * *(unsigned int *)(v16 + 48 * v14 + 32) + 6] = 0;
        goto LABEL_9;
      case 0x13:
        v21 = &v15[2 * *(unsigned int *)(v16 + 48 * v14 + 32)];
        v22 = *(unsigned __int8 *)(v17 + 16);
        if (*(_BYTE *)(v17 + 16))
        {
          if (v22 == 1)
          {
            v93 = *(_DWORD *)(a1 + 32);
            if ((*(_BYTE *)(v16 + 48 * v14 + 37) & 4) != 0)
            {
              v123 = v16 + 48 * v14;
              v125 = *(_DWORD *)(v123 + 40);
              v124 = (unsigned int *)(v123 + 40);
              if (v93 < v125)
                goto LABEL_200;
              v27 = v15;
              if (*(_DWORD *)(v17 + 24))
              {
                v51 = 0;
                while (v93)
                {
                  *(_DWORD *)(a1 + 32) = v93 - 1;
                  if ((JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(a1, v17, *v124) & 1) == 0)
                  {
LABEL_261:
                    *(_DWORD *)(a1 + 32) = v93;
                    goto LABEL_58;
                  }
                  ++v51;
                  v93 = *(_DWORD *)(a1 + 32);
                  if (v51 >= *(unsigned int *)(v17 + 24))
                    goto LABEL_58;
                }
                goto LABEL_58;
              }
            }
            else
            {
              v27 = v15;
              if (*(_DWORD *)(v17 + 24))
              {
                v51 = 0;
                v94 = (_DWORD *)(v16 + 48 * v14 + 40);
                do
                {
                  if (v93 >= *(_DWORD *)(a1 + 36))
                    break;
                  *(_DWORD *)(a1 + 32) = v93 + 1;
                  if ((JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(a1, v17, *v94 + 1) & 1) == 0)
                    goto LABEL_261;
                  ++v51;
                  v93 = *(_DWORD *)(a1 + 32);
                }
                while (v51 < *(unsigned int *)(v17 + 24));
                goto LABEL_58;
              }
            }
            v51 = 0;
          }
          else
          {
            if (v22 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198E7839CLL);
            }
            v27 = v15;
            v51 = 0;
            *(_QWORD *)v21 = *(unsigned int *)(a1 + 32);
          }
LABEL_58:
          *((_QWORD *)v21 + 1) = v51;
LABEL_25:
          v12 = *a3 + 1;
LABEL_26:
          v15 = v27;
          goto LABEL_10;
        }
        v23 = v16 + 48 * v14;
        v25 = *(_BYTE *)(v23 + 37);
        v24 = (char *)(v23 + 37);
        v26 = *(unsigned __int8 *)(a1 + 8) - 1;
        v27 = v15;
        if ((v25 & 4) == 0)
        {
          if (v26 < 2)
          {
            *(_QWORD *)v21 = *(unsigned int *)(a1 + 32);
            if (*(_DWORD *)(v17 + 24))
            {
              v99 = 0;
              v100 = 0;
              v157 = v16 + 48 * v14 + 40;
              do
              {
                if ((*v24 & 2) != 0)
                {
                  if ((JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(a1, v17, v99 + *(_DWORD *)v157) & 1) == 0)
                    goto LABEL_198;
                }
                else if (!JSC::Yarr::Interpreter<char16_t>::checkCharacterClassDontAdvanceInputForNonBMP(a1, *(_QWORD *)v17, *v24, *(_DWORD *)v157 - (v100 << (*(_BYTE *)(*(_QWORD *)v17 + 88) == 2))))
                {
                  goto LABEL_198;
                }
                ++v100;
                --v99;
              }
              while (v100 < *(_DWORD *)(v17 + 24));
            }
          }
          else if (*(_DWORD *)(v17 + 24))
          {
            v28 = 0;
            v29 = 0;
            v30 = (_DWORD *)(v16 + 48 * v14 + 40);
            while ((JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(a1, v17, v28 + *v30) & 1) != 0)
            {
              ++v29;
              --v28;
              if (v29 >= *(_DWORD *)(v17 + 24))
                goto LABEL_25;
            }
            goto LABEL_200;
          }
          goto LABEL_25;
        }
        v95 = *(unsigned int *)(a1 + 32);
        if (v26 <= 1)
        {
          *(_QWORD *)v21 = v95;
          v96 = *(_DWORD *)(v17 + 24);
          if (v96)
          {
            v97 = 0;
            v157 = v16 + 48 * v14 + 40;
            v98 = -1;
            while (1)
            {
              if ((*v24 & 2) != 0)
              {
                if ((JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(a1, v17, v97 + *(_DWORD *)v157 - v96 + 1) & 1) == 0)
                {
LABEL_198:
                  v38 = *v21;
                  goto LABEL_199;
                }
              }
              else if (!JSC::Yarr::Interpreter<char16_t>::checkCharacterClassDontAdvanceInputForNonBMP(a1, *(_QWORD *)v17, *v24, *(_DWORD *)v157 - ((v96 + v98) << (*(_BYTE *)(*(_QWORD *)v17 + 88) == 2))))
              {
                goto LABEL_198;
              }
              ++v97;
              v96 = *(_DWORD *)(v17 + 24);
              --v98;
              if (v97 >= v96)
                goto LABEL_25;
            }
          }
          goto LABEL_25;
        }
        v126 = v16 + 48 * v14;
        v128 = *(_DWORD *)(v126 + 40);
        v127 = (_DWORD *)(v126 + 40);
        if (v95 < v128)
          goto LABEL_200;
        v129 = *(_DWORD *)(v17 + 24);
        if (!v129)
          goto LABEL_25;
        v130 = 1;
        while ((JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(a1, v17, v130 + *v127 - v129) & 1) != 0)
        {
          v129 = *(_DWORD *)(v17 + 24);
          v20 = v130++ >= v129;
          if (v20)
            goto LABEL_25;
        }
LABEL_200:
        v12 = *a3;
LABEL_201:
        *a3 = --v12;
        v13 = *((unsigned int *)a2 + 3);
        if (v13 <= v12)
        {
LABEL_285:
          __break(0xC471u);
          JUMPOUT(0x198E78C00);
        }
        v131 = v12;
        while (2)
        {
          v132 = *a2;
          v133 = *a2 + 48 * v131;
          result = 0;
          switch(*(_BYTE *)(v133 + 36))
          {
            case 0:
            case 1:
              v144 = *(_DWORD *)v133;
              v145 = *(_DWORD *)v133 + v12;
              *a3 = v145;
              if (v144 > 0)
                goto LABEL_225;
              v148 = *(_DWORD *)(a1 + 32);
              if (v148 != *(_DWORD *)(a1 + 36) && (*(_WORD *)(*(_QWORD *)a1 + 8) & 0x80) == 0)
              {
                v149 = v148 + 1;
                *(_DWORD *)(a1 + 32) = v149;
                a3[1] = v149;
                if (v13 <= v145)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E78C38);
                }
                v150 = v132 + 48 * v145;
                if (*(_BYTE *)(v150 + 8))
                  v145 += *(_DWORD *)v150;
LABEL_225:
                v12 = v145 + 1;
                goto LABEL_5;
              }
              result = 0;
              break;
            case 2:
              __break(0xC471u);
              JUMPOUT(0x198E78974);
            case 3:
            case 4:
              v136 = *(_DWORD *)v133;
              v137 = *(_DWORD *)v133 + v12;
              if (*(int *)v133 > 0)
                v12 = v137 + 1;
              else
                v12 = v137 - 1;
              *a3 = v12;
              if (v136 > 0)
                goto LABEL_6;
              goto LABEL_208;
            case 5:
              v12 += ~a3[2 * *(unsigned int *)(v132 + 48 * v131 + 32) + 4];
              goto LABEL_207;
            case 6:
              return result;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x198E788F0);
            case 8:
            case 9:
            case 0xA:
            case 0x1E:
              goto LABEL_206;
            case 0xB:
            case 0xC:
            case 0xD:
            case 0xE:
              v143 = JSC::Yarr::Interpreter<char16_t>::backtrackPatternCharacter(a1, (int *)v133, (uint64_t)a3);
              goto LABEL_215;
            case 0xF:
            case 0x10:
            case 0x11:
            case 0x12:
              v143 = JSC::Yarr::Interpreter<char16_t>::backtrackPatternCasedCharacter(a1, v133, (uint64_t)a3);
              goto LABEL_215;
            case 0x13:
              v143 = JSC::Yarr::Interpreter<char16_t>::backtrackCharacterClass(a1, v133, (uint64_t)a3);
              goto LABEL_215;
            case 0x14:
              v143 = JSC::Yarr::Interpreter<char16_t>::backtrackBackReference(a1, v133, (uint64_t)a3);
              goto LABEL_215;
            case 0x15:
              result = JSC::Yarr::Interpreter<char16_t>::backtrackParentheses(a1, v133, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (!(_DWORD)result)
                goto LABEL_235;
              if ((_DWORD)result != 1)
                return result;
              v138 = *a3;
              goto LABEL_221;
            case 0x16:
              v143 = JSC::Yarr::Interpreter<char16_t>::backtrackParenthesesOnceBegin((_QWORD *)a1, v133, a3);
              goto LABEL_215;
            case 0x17:
              v143 = JSC::Yarr::Interpreter<char16_t>::backtrackParenthesesOnceEnd(a1, v133, a3);
LABEL_215:
              v138 = *a3;
              if (!v143)
                goto LABEL_216;
              goto LABEL_221;
            case 0x18:
              goto LABEL_220;
            case 0x19:
              __break(0xC471u);
              JUMPOUT(0x198E789A4);
            case 0x1A:
              v139 = v132 + 48 * v131;
              v142 = *(_BYTE *)(v139 + 37);
              v140 = (char *)(v139 + 37);
              v141 = v142;
              if ((v142 & 4) != 0)
              {
                *(_DWORD *)(a1 + 32) = *(_QWORD *)&a3[2 * *(unsigned int *)(v132 + 48 * v131 + 32) + 4];
                v141 = *v140;
              }
              if ((v141 & 2) == 0)
                goto LABEL_206;
LABEL_220:
              v138 = v12 + *(_DWORD *)(v133 + 8);
LABEL_221:
              v12 = v138 + 1;
              goto LABEL_5;
            case 0x1B:
              JSC::Yarr::Interpreter<unsigned char>::backtrackParentheticalAssertionEnd(a1, (unsigned int *)v133, a3);
LABEL_235:
              v138 = *a3;
LABEL_216:
              v12 = v138 - 1;
              goto LABEL_207;
            case 0x1C:
              v134 = *(_DWORD *)(a1 + 32);
              v135 = v134 - *(_DWORD *)v133;
              if (v134 < *(_DWORD *)v133)
              {
                __break(0xC471u);
                JUMPOUT(0x198E78A88);
              }
              goto LABEL_205;
            case 0x1D:
              v146 = *(_DWORD *)(a1 + 32);
              v135 = v146 + *(_DWORD *)v133;
              if (v135 > *(_DWORD *)(a1 + 36) || v135 < v146)
                goto LABEL_206;
LABEL_205:
              *(_DWORD *)(a1 + 32) = v135;
LABEL_206:
              --v12;
LABEL_207:
              *a3 = v12;
              v13 = *((unsigned int *)a2 + 3);
LABEL_208:
              v131 = v12;
              if (v13 <= v12)
                goto LABEL_285;
              continue;
            case 0x1F:
              __break(0xC471u);
              JUMPOUT(0x198E78920);
            default:
              __break(0xC471u);
              JUMPOUT(0x198E78954);
          }
          return result;
        }
      case 0x14:
        v48 = v15;
        matched = JSC::Yarr::Interpreter<char16_t>::matchBackReference(a1, *a2 + 48 * v14, (uint64_t)a3);
        goto LABEL_49;
      case 0x15:
        v48 = v15;
        result = JSC::Yarr::Interpreter<char16_t>::matchParentheses(a1, *a2 + 48 * v14, (uint64_t)a3, a4, a5, a6, a7, a8);
        if ((_DWORD)result != 1)
        {
          if (!(_DWORD)result)
            goto LABEL_200;
          return result;
        }
        v12 = *a3 + 1;
LABEL_47:
        v15 = v48;
        goto LABEL_10;
      case 0x16:
        v50 = v15;
        JSC::Yarr::Interpreter<char16_t>::matchParenthesesOnceBegin(a1, *a2 + 48 * v14, a3);
        v15 = v50;
        goto LABEL_52;
      case 0x17:
        v48 = v15;
        matched = JSC::Yarr::Interpreter<char16_t>::matchParenthesesOnceEnd(a1, (int *)(*a2 + 48 * v14), (uint64_t)a3);
        goto LABEL_49;
      case 0x18:
      case 0x1A:
        *(_QWORD *)&v15[2 * *(unsigned int *)(v16 + 48 * v14 + 32)] = *(unsigned int *)(a1 + 32);
        goto LABEL_9;
      case 0x19:
        if (*(_QWORD *)&v15[2 * *(unsigned int *)(v16 + 48 * v14 + 32)] == *(_DWORD *)(a1 + 32))
          goto LABEL_201;
        v12 -= *(_DWORD *)(v17 + 8);
        goto LABEL_10;
      case 0x1B:
        v48 = v15;
        matched = JSC::Yarr::Interpreter<unsigned char>::matchParentheticalAssertionEnd(a1, (int *)(*a2 + 48 * v14), a3);
LABEL_49:
        v12 = *a3;
        if (!matched)
          goto LABEL_201;
        ++v12;
        goto LABEL_47;
      case 0x1C:
        v18 = *(_DWORD *)(a1 + 32);
        v19 = v18 + *(_DWORD *)v17;
        v20 = v19 <= *(_DWORD *)(a1 + 36) && v19 >= v18;
        if (!v20)
          goto LABEL_201;
        goto LABEL_17;
      case 0x1D:
        v82 = *(_DWORD *)(a1 + 32);
        v19 = v82 - *(_DWORD *)v17;
        if (v82 < *(_DWORD *)v17)
        {
          __break(0xC471u);
          JUMPOUT(0x198E781D4);
        }
LABEL_17:
        *(_DWORD *)(a1 + 32) = v19;
        goto LABEL_9;
      case 0x1E:
        v67 = *(_DWORD *)(a1 + 32);
        if (v67 < *(_DWORD *)v17 || v67 - *(_DWORD *)v17 >= *(_DWORD *)(a1 + 36))
          goto LABEL_201;
        goto LABEL_9;
      case 0x1F:
        if ((JSC::Yarr::Interpreter<char16_t>::matchDotStarEnclosure(a1, (_BYTE *)(*a2 + 48 * v14), (uint64_t)a3) & 1) == 0)
          goto LABEL_200;
        return 1;
      default:
        __break(0xC471u);
        JUMPOUT(0x198E781F4);
    }
  }
}

BOOL JSC::Yarr::Interpreter<char16_t>::matchAssertionBOL(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t CheckedDontAdvance;

  if (*(_DWORD *)(a1 + 32) == a2)
    return 1;
  if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 8) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  CheckedDontAdvance = JSC::Yarr::Interpreter<char16_t>::InputStream::readCheckedDontAdvance((uint64_t *)(a1 + 24), a2 + 1);
  return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(v3, CheckedDontAdvance);
}

uint64_t JSC::Yarr::Interpreter<char16_t>::matchAssertionEOL(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 32);
  if (!a2)
  {
    v12 = *(_DWORD *)(a1 + 36);
    if ((_DWORD)v2 != v12)
    {
      if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 8) != 0)
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
        if (v2 >= v12)
          v7 = 0xFFFFFFFFLL;
        else
          v7 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 2 * v2);
        return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(v5, v7);
      }
      return 0;
    }
    return 1;
  }
  if (v2 >= a2)
  {
    v3 = v2 - a2;
    v4 = *(_DWORD *)(a1 + 36);
    if ((_DWORD)v2 - a2 != v4)
    {
      if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 8) != 0)
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
        v6 = *(_QWORD *)(a1 + 24);
        v7 = *(unsigned __int16 *)(v6 + 2 * v3);
        if ((v7 & 0xFC00) == 0xD800)
        {
          if (*(_BYTE *)(a1 + 40))
          {
            v8 = v3 + 1;
            if (v8 < v4)
            {
              v9 = *(unsigned __int16 *)(v6 + 2 * v8);
              v10 = (_DWORD)v2 == v4;
              v11 = v9 + ((_DWORD)v7 << 10) - 56613888;
              if (v10)
                v11 = -1;
              if ((v9 & 0xFC00) == 0xDC00)
                v7 = v11;
              else
                v7 = v7;
            }
          }
        }
        return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(v5, v7);
      }
      return 0;
    }
    return 1;
  }
  result = 427;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::matchAssertionWordBoundary(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v24;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == v4)
  {
    v6 = 0;
    v7 = *(_DWORD *)(a2 + 40);
    if (v4)
      goto LABEL_3;
    goto LABEL_15;
  }
  v13 = v5 - (v4 + 1);
  if (v5 < v4 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198E790C4);
  }
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(unsigned __int16 *)(v15 + 2 * v13);
  if ((v16 & 0xFC00) == 0xD800)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v19 = *(_DWORD *)(a1 + 36);
      if (v5 - v4 < v19)
      {
        v20 = *(unsigned __int16 *)(v15 + 2 * (v5 - v4));
        if ((v20 & 0xFC00) == 0xDC00)
        {
          if (v5 != v19)
          {
            *(_DWORD *)(a1 + 32) = v5 + 1;
            v16 = (v20 + ((_DWORD)v16 << 10) - 56613888);
            goto LABEL_14;
          }
          goto LABEL_37;
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    v24 = v5 != v4 + 1 && (v16 & 0xFC00) == 56320;
    if (v24 && (*(_WORD *)(v15 + 2 * (v13 - 1)) & 0xFC00) == 0xD800)
LABEL_37:
      v16 = 0xFFFFFFFFLL;
  }
LABEL_14:
  v6 = JSC::Yarr::Interpreter<char16_t>::testCharacterClass(v14, v16);
  v7 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
LABEL_3:
    v8 = v7 - v4;
    if (v7 < v4)
    {
      __break(0xC471u);
      JUMPOUT(0x198E790A4);
    }
    v9 = *(_DWORD *)(a1 + 36);
    if (v8 != v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a1 + 72);
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(unsigned __int16 *)(v11 + 2 * v8);
      if ((v12 & 0xFC00) == 0xD800)
      {
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_29;
        v21 = v8 + 1;
        if (v21 >= v9)
          goto LABEL_29;
        v22 = *(unsigned __int16 *)(v11 + 2 * v21);
        if ((v22 & 0xFC00) != 0xDC00)
          goto LABEL_29;
        if (v7 != v9)
        {
          *(_DWORD *)(a1 + 32) = v7 + 1;
          v12 = (v22 + ((_DWORD)v12 << 10) - 56613888);
          goto LABEL_29;
        }
      }
      else if (!*(_BYTE *)(a1 + 40)
             || v7 == v4
             || (v12 & 0xFC00) != 0xDC00
             || (*(_WORD *)(v11 + 2 * (v8 - 1)) & 0xFC00) != 0xD800)
      {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    goto LABEL_16;
  }
LABEL_15:
  v17 = *(_DWORD *)(a1 + 36);
  if (v7 != v17)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 72);
    if (v7 < v17)
    {
      v12 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 2 * v7);
LABEL_29:
      v18 = JSC::Yarr::Interpreter<char16_t>::testCharacterClass(v10, v12);
      return (v6 != v18) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
    }
LABEL_28:
    v12 = 0xFFFFFFFFLL;
    goto LABEL_29;
  }
LABEL_16:
  v18 = 0;
  return (v6 != v18) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
}

uint64_t JSC::Yarr::Interpreter<char16_t>::checkSurrogatePair(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 32);
  v4 = v3 - a3;
  if (v3 < a3)
  {
    result = 339;
    __break(0xC471u);
  }
  else
  {
    v5 = v4 + 1;
    if (v4 + 1 < *(_DWORD *)(a1 + 36)
      && (v6 = *(_QWORD *)(a1 + 24), v7 = *(unsigned __int16 *)(v6 + 2 * v4), (v7 & 0xFC00) == 0xD800)
      && (v8 = *(unsigned __int16 *)(v6 + 2 * v5), (v8 & 0xFC00) == 0xDC00))
    {
      v9 = v8 + (v7 << 10) - 56613888;
    }
    else
    {
      v9 = -1;
    }
    return v9 == a2;
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::checkCharacter(uint64_t a1, int a2, char a3, unsigned int a4)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int Backward;
  BOOL v10;
  BOOL v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;

  if ((a3 & 4) != 0)
  {
    Backward = JSC::Yarr::Interpreter<char16_t>::InputStream::tryReadBackward((uint64_t *)(a1 + 24), a4);
    return Backward == a2;
  }
  v6 = *(_DWORD *)(a1 + 32);
  v7 = v6 - a4;
  if (v6 >= a4)
  {
    v8 = *(_QWORD *)(a1 + 24);
    Backward = *(unsigned __int16 *)(v8 + 2 * v7);
    if ((Backward & 0xFC00) == 0xD800)
    {
      if (!*(_BYTE *)(a1 + 40))
        return Backward == a2;
      v13 = v7 + 1;
      v14 = *(_DWORD *)(a1 + 36);
      if (v13 >= v14)
        return Backward == a2;
      v15 = *(unsigned __int16 *)(v8 + 2 * v13);
      if ((v15 & 0xFC00) != 0xDC00)
        return Backward == a2;
      if (v6 != v14)
      {
        *(_DWORD *)(a1 + 32) = v6 + 1;
        Backward = v15 + (Backward << 10) - 56613888;
        return Backward == a2;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 40))
        v10 = v6 == a4;
      else
        v10 = 1;
      v11 = !v10 && (Backward & 0xFC00) == 56320;
      if (!v11 || (*(_WORD *)(v8 + 2 * (v7 - 1)) & 0xFC00) != 0xD800)
        return Backward == a2;
    }
    Backward = -1;
    return Backward == a2;
  }
  result = 279;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v3 = *(_DWORD *)(a1 + 32);
  if ((*(_BYTE *)(a2 + 37) & 4) != 0)
  {
    v9 = v3 - a3;
    if (v3 >= a3)
    {
      v10 = *(_QWORD *)(a1 + 24);
      v6 = *(unsigned __int16 *)(v10 + 2 * v9);
      if ((v6 & 0xFC00) != 0xDC00)
        return *(_DWORD *)a2 == v6 || *(_DWORD *)(a2 + 4) == v6;
      if (v3 == a3 || *(_BYTE *)(a1 + 40) == 0)
        return *(_DWORD *)a2 == v6 || *(_DWORD *)(a2 + 4) == v6;
      v12 = *(unsigned __int16 *)(v10 + 2 * (v9 - 1));
      if ((v12 & 0xFC00) != 0xD800)
        return *(_DWORD *)a2 == v6 || *(_DWORD *)(a2 + 4) == v6;
      *(_DWORD *)(a1 + 32) = v3 - 1;
      v13 = v6 + (v12 << 10);
      goto LABEL_23;
    }
LABEL_15:
    v6 = -1;
    return *(_DWORD *)a2 == v6 || *(_DWORD *)(a2 + 4) == v6;
  }
  v4 = v3 - a3;
  if (v3 < a3)
  {
    result = 279;
    __break(0xC471u);
    return result;
  }
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int16 *)(v5 + 2 * v4);
  if ((v6 & 0xFC00) != 0xD800)
  {
    if (*(_BYTE *)(a1 + 40))
      v7 = v3 == a3;
    else
      v7 = 1;
    v8 = !v7 && (v6 & 0xFC00) == 56320;
    if (!v8 || (*(_WORD *)(v5 + 2 * (v4 - 1)) & 0xFC00) != 0xD800)
      return *(_DWORD *)a2 == v6 || *(_DWORD *)(a2 + 4) == v6;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v16 = v4 + 1;
    v17 = *(_DWORD *)(a1 + 36);
    if (v16 < v17)
    {
      v18 = *(unsigned __int16 *)(v5 + 2 * v16);
      if ((v18 & 0xFC00) == 0xDC00)
      {
        if (v3 != v17)
        {
          *(_DWORD *)(a1 + 32) = v3 + 1;
          v13 = v18 + (v6 << 10);
LABEL_23:
          v6 = v13 - 56613888;
          return *(_DWORD *)a2 == v6 || *(_DWORD *)(a2 + 4) == v6;
        }
        goto LABEL_15;
      }
    }
  }
  return *(_DWORD *)a2 == v6 || *(_DWORD *)(a2 + 4) == v6;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::matchBackReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  int v12;
  int v15;
  unsigned int v16;
  int v17;

  v5 = (_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 16);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
LABEL_5:
    *v5 = *(unsigned int *)(a1 + 32);
    goto LABEL_7;
  }
  if (v6 != 1)
  {
    if (v6 != 2)
      goto LABEL_7;
    *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = 0;
    goto LABEL_5;
  }
  *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = 0;
LABEL_7:
  v7 = *(_DWORD *)(a2 + 4);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_DWORD *)(v8 + 4 * (v7 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1));
    if (!v9)
      return 1;
  }
  else
  {
    v9 = *(_DWORD *)a2;
    v8 = *(_QWORD *)(a1 + 16);
  }
  v10 = *(_DWORD *)(v8 + 4 * (2 * v9));
  result = 1;
  v12 = *(_DWORD *)(v8 + 4 * ((2 * v9) | 1u));
  if (v12 != -1 && v10 != -1 && v10 != v12)
  {
    v15 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
    {
      if (v15 == 2)
        return result;
      if (v15 != 1)
      {
        result = 1031;
        __break(0xC471u);
        return result;
      }
      if (*(_DWORD *)(a2 + 24))
      {
        v16 = 0;
        do
        {
          if (!JSC::Yarr::Interpreter<char16_t>::tryConsumeBackReference(a1, v10, v12, a2))
            break;
          ++v16;
        }
        while (v16 < *(_DWORD *)(a2 + 24));
      }
      else
      {
        v16 = 0;
      }
      v5[1] = v16;
      return 1;
    }
    if (*(_DWORD *)(a2 + 24))
    {
      v17 = 0;
      while ((JSC::Yarr::Interpreter<char16_t>::tryConsumeBackReference(a1, v10, v12, a2) & 1) != 0)
      {
        if (++v17 >= *(_DWORD *)(a2 + 24))
          return 1;
      }
      result = 0;
      *(_DWORD *)(a1 + 32) = *v5;
    }
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::matchParentheses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t DisjunctionContext;
  uint64_t matched;
  uint64_t v36;
  BOOL v37;

  v10 = a3 + 8 * *(unsigned int *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v10 + 16) = *(unsigned int *)(a1 + 32);
  v12 = v10 + 16;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = (unint64_t *)(v12 + 8);
  *(_QWORD *)(v12 + 16) = 0;
  v14 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v14)
  {
    while (1)
    {
      v33 = (_QWORD *)JSC::Yarr::Interpreter<char16_t>::allocParenthesesDisjunctionContext((_QWORD *)a1, v11, *(_QWORD *)(a1 + 16), (unsigned int *)a2, a5, a6, a7, a8);
      DisjunctionContext = JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::getDisjunctionContext((uint64_t)v33);
      matched = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(a1, v11, DisjunctionContext, 0);
      if ((_DWORD)matched == 1)
      {
        v36 = *(_QWORD *)(v12 + 8);
        *v33 = *(_QWORD *)(v12 + 16);
        v32 = v36 + 1;
        *(_QWORD *)(v12 + 8) = v36 + 1;
        *(_QWORD *)(v12 + 16) = v33;
      }
      else
      {
        v29 = matched;
        JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v33, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
        JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v33);
        if ((_DWORD)v29)
          return v29;
        v31 = JSC::Yarr::Interpreter<char16_t>::parenthesesDoBacktrack(a1, a2, v12);
        if ((_DWORD)v31 != 1)
          return v31;
        v32 = *v13;
      }
      if (v32 >= v14)
      {
        JSC::Yarr::Interpreter<char16_t>::recordParenthesesMatch(a1, (int *)a2, *(_QWORD *)(v12 + 16));
        break;
      }
    }
  }
  v15 = *(unsigned __int8 *)(a2 + 16);
  if (v15 != 1)
  {
    if (*(_BYTE *)(a2 + 16))
      v37 = v15 == 2;
    else
      v37 = 1;
    if (!v37)
    {
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x198E79740);
    }
    return 1;
  }
  v16 = *v13;
LABEL_4:
  if (v16 >= *(unsigned int *)(a2 + 24))
  {
LABEL_12:
    if (v16)
      JSC::Yarr::Interpreter<char16_t>::recordParenthesesMatch(a1, (int *)a2, *(_QWORD *)(v12 + 16));
    return 1;
  }
  v17 = JSC::Yarr::Interpreter<char16_t>::allocParenthesesDisjunctionContext((_QWORD *)a1, v11, *(_QWORD *)(a1 + 16), (unsigned int *)a2, a5, a6, a7, a8);
  v18 = 4 * *(_QWORD *)(v17 + 24);
  v19 = v18 + 48;
  v20 = (v18 + 55) & 0x7FFFFFFF8;
  if (v20 < v19)
    goto LABEL_30;
  v21 = (_QWORD *)v17;
  v22 = v20 + v17;
  v23 = a1;
  v24 = v11;
  v25 = v22;
  for (i = 0; ; i = 1)
  {
    v27 = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(v23, v24, v25, i);
    if ((_DWORD)v27 != 1)
      break;
    if (*(_DWORD *)(v22 + 4) != *(_DWORD *)(v22 + 8))
    {
      v28 = *(_QWORD *)(v12 + 8);
      *v21 = *(_QWORD *)(v12 + 16);
      v16 = v28 + 1;
      *(_QWORD *)(v12 + 8) = v28 + 1;
      *(_QWORD *)(v12 + 16) = v21;
      goto LABEL_4;
    }
    v23 = a1;
    v24 = v11;
    v25 = v22;
  }
  v29 = v27;
  JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v21, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
  JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v21);
  if (!(_DWORD)v29)
  {
    v16 = *v13;
    goto LABEL_12;
  }
  return v29;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::matchParenthesesOnceBegin(uint64_t result, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v3 = a3 + 4;
  v4 = *(unsigned int *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 1)
  {
    *(_QWORD *)&v3[2 * v4] = *(unsigned int *)(result + 32);
  }
  else if (v5 == 2)
  {
    *(_QWORD *)&v3[2 * v4] = -1;
    *a3 += *(_DWORD *)(a2 + 8);
    return result;
  }
  v6 = *(unsigned __int8 *)(a2 + 37);
  if ((v6 & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * ((v6 >> 2) & 1 | (2 * *(_DWORD *)a2))) = *(_DWORD *)(result + 32)
                                                                                        - *(_DWORD *)(a2 + 40);
  return result;
}

BOOL JSC::Yarr::Interpreter<char16_t>::matchParenthesesOnceEnd(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;

  if ((*((_BYTE *)a2 + 37) & 1) != 0)
  {
    v3 = *a2;
    v4 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v4 + 4 * (((*((_BYTE *)a2 + 37) & 4) == 0) | (2 * *a2))) = *(_DWORD *)(a1 + 32) - a2[10];
    v5 = a2[1];
    if (v5)
      *(_DWORD *)(v4 + 4 * (v5 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1)) = v3;
  }
  return !*((_BYTE *)a2 + 16) || *(_QWORD *)(a3 + 8 * a2[8] + 16) != *(unsigned int *)(a1 + 32);
}

uint64_t JSC::Yarr::Interpreter<char16_t>::matchDotStarEnclosure(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int i;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;

  if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 0x10) != 0)
  {
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 64);
    v12 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v6 = *(_DWORD *)(a3 + 4);
    if (v6 > *(_DWORD *)(a1 + 64))
    {
      do
      {
        v7 = v6 - 1;
        v8 = *(_QWORD *)(a1 + 24);
        v9 = *(unsigned __int16 *)(v8 + 2 * (v6 - 1));
        if (*(_BYTE *)(a1 + 40) && v6 < *(_DWORD *)(a1 + 36))
        {
          if ((v9 & 0xFC00) == 0xDC00)
          {
            if ((*(_WORD *)(v8 + 2 * v6) & 0xFC00) == 0xD800)
              v9 = 0xFFFFFFFFLL;
          }
          else if ((v9 & 0xFC00) == 0xD800)
          {
            v10 = *(unsigned __int16 *)(v8 + 2 * v6);
            if ((v10 & 0xFC00) == 0xDC00)
              v9 = (v10 + ((_DWORD)v9 << 10) - 56613888);
          }
        }
        if (JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 64), v9))
          break;
        --v6;
      }
      while (v7 != *(_DWORD *)(a1 + 64));
    }
    v12 = *(_DWORD *)(a1 + 32);
    for (i = *(_DWORD *)(a1 + 36); v12 != i; i = *(_DWORD *)(a1 + 36))
    {
      v14 = *(_QWORD *)(a1 + 24);
      v15 = *(unsigned __int16 *)(v14 + 2 * v12);
      v16 = v12 + 1;
      if (*(_BYTE *)(a1 + 40))
        v17 = v16 >= i;
      else
        v17 = 1;
      if (!v17)
      {
        if ((v15 & 0xFC00) == 0xDC00)
        {
          if ((*(_WORD *)(v14 + 2 * v16) & 0xFC00) == 0xD800)
            v15 = 0xFFFFFFFFLL;
        }
        else if ((v15 & 0xFC00) == 0xD800)
        {
          v18 = *(unsigned __int16 *)(v14 + 2 * v16);
          if ((v18 & 0xFC00) == 0xDC00)
            v15 = (v18 + ((_DWORD)v15 << 10) - 56613888);
        }
      }
      if (JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)(*(_QWORD *)a1 + 64), v15))
        break;
      ++v12;
    }
    if ((v6 && (*a2 & 1) != 0 || v12 != *(_DWORD *)(a1 + 36) && (*a2 & 2) != 0)
      && (*(_WORD *)(*(_QWORD *)a1 + 8) & 8) == 0)
    {
      return 0;
    }
    *(_DWORD *)(a3 + 4) = v6;
  }
  *(_DWORD *)(a3 + 8) = v12;
  return 1;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::backtrackPatternCharacter(uint64_t a1, int *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;

  v3 = (_QWORD *)(a3 + 8 * a2[8] + 16);
  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 2)
  {
    if ((*((_BYTE *)a2 + 37) & 4) != 0)
    {
      v21 = *(_DWORD *)(a1 + 32);
      v22 = a2[10];
      if (v21 < v22)
        return 0;
      if (!v21 || (v25 = *(_QWORD *)(a3 + 8 * a2[8] + 24), v25 >= a2[6]))
      {
LABEL_36:
        v5 = 0;
        *(_DWORD *)(a1 + 32) = *v3;
        return v5;
      }
      v26 = v21 - 1;
      *(_DWORD *)(a1 + 32) = v21 - 1;
      v3[1] = v25 + 1;
      v16 = *a2;
      if ((*((_BYTE *)a2 + 37) & 4) == 0)
      {
        v27 = v26 - v22;
        if (v26 < v22)
        {
LABEL_68:
          __break(0xC471u);
          JUMPOUT(0x198E79D20);
        }
        v28 = *(_QWORD *)(a1 + 24);
        v19 = *(unsigned __int16 *)(v28 + 2 * v27);
        if ((v19 & 0xFC00) != 0xD800)
        {
          if (*(_BYTE *)(a1 + 40) && v26 != v22 && (v19 & 0xFC00) == 0xDC00)
          {
            v20 = *(_WORD *)(v28 + 2 * (v27 - 1));
LABEL_65:
            if ((v20 & 0xFC00) != 0xD800)
              goto LABEL_34;
            goto LABEL_66;
          }
LABEL_34:
          if (v16 == v19)
            return 1;
          goto LABEL_36;
        }
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_34;
        v37 = v27 + 1;
        v38 = *(_DWORD *)(a1 + 36);
        if (v37 >= v38)
          goto LABEL_34;
        v36 = *(unsigned __int16 *)(v28 + 2 * v37);
        if ((v36 & 0xFC00) != 0xDC00)
          goto LABEL_34;
        if (v26 != v38)
          goto LABEL_60;
        goto LABEL_66;
      }
      v33 = v26 - v22;
      if (v26 < v22)
        goto LABEL_66;
      v34 = *(_QWORD *)(a1 + 24);
      v19 = *(unsigned __int16 *)(v34 + 2 * v33);
      if ((v19 & 0xFC00) != 0xDC00)
        goto LABEL_34;
      if (v26 == v22)
        goto LABEL_34;
      if (!*(_BYTE *)(a1 + 40))
        goto LABEL_34;
      v32 = *(unsigned __int16 *)(v34 + 2 * (v33 - 1));
      if ((v32 & 0xFC00) != 0xD800)
        goto LABEL_34;
      v11 = v21 - 2;
    }
    else
    {
      v10 = *(_QWORD *)(a3 + 8 * a2[8] + 24);
      if (v10 >= a2[6])
        goto LABEL_36;
      v11 = *(_DWORD *)(a1 + 32);
      v12 = *(_DWORD *)(a1 + 36);
      if (v11 >= v12)
        goto LABEL_36;
      v13 = v11 + 1;
      *(_DWORD *)(a1 + 32) = v11 + 1;
      v3[1] = v10 + 1;
      v14 = a2[10];
      v15 = v14 + 1;
      v16 = *a2;
      if ((*((_BYTE *)a2 + 37) & 4) == 0)
      {
        v17 = v13 - v15;
        if (v13 < v15)
        {
          __break(0xC471u);
          JUMPOUT(0x198E79D74);
        }
        v18 = *(_QWORD *)(a1 + 24);
        v19 = *(unsigned __int16 *)(v18 + 2 * v17);
        if ((v19 & 0xFC00) != 0xD800)
        {
          if (*(_BYTE *)(a1 + 40) && v11 != v14 && (v19 & 0xFC00) == 0xDC00)
          {
            v20 = *(_WORD *)(v18 + 2 * (v17 - 1));
            goto LABEL_65;
          }
          goto LABEL_34;
        }
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_34;
        if (v17 + 1 >= v12)
          goto LABEL_34;
        v36 = *(unsigned __int16 *)(v18 + 2 * (v17 + 1));
        if ((v36 & 0xFC00) != 0xDC00)
          goto LABEL_34;
        if (v13 != v12)
        {
          v21 = v11 + 2;
LABEL_60:
          *(_DWORD *)(a1 + 32) = v21;
          v35 = v36 + (v19 << 10);
          goto LABEL_61;
        }
LABEL_66:
        v19 = -1;
        goto LABEL_34;
      }
      v30 = v13 - v15;
      if (v13 < v15)
        goto LABEL_66;
      v31 = *(_QWORD *)(a1 + 24);
      v19 = *(unsigned __int16 *)(v31 + 2 * v30);
      if ((v19 & 0xFC00) != 0xDC00)
        goto LABEL_34;
      if (v11 == v14)
        goto LABEL_34;
      if (!*(_BYTE *)(a1 + 40))
        goto LABEL_34;
      v32 = *(unsigned __int16 *)(v31 + 2 * (v30 - 1));
      if ((v32 & 0xFC00) != 0xD800)
        goto LABEL_34;
    }
    *(_DWORD *)(a1 + 32) = v11;
    v35 = v19 + (v32 << 10);
LABEL_61:
    v19 = v35 - 56613888;
    goto LABEL_34;
  }
  if (v4 != 1)
    return 0;
  v5 = *(_QWORD *)(a3 + 8 * a2[8] + 24);
  if (v5)
  {
    *(_QWORD *)(a3 + 8 * a2[8] + 24) = v5 - 1;
    if (*a2 < 0x10000)
      v6 = 1;
    else
      v6 = 2;
    v7 = *(_DWORD *)(a1 + 32);
    if ((*((_BYTE *)a2 + 37) & 4) == 0)
    {
      v8 = v7 >= v6;
      v9 = v7 - v6;
      if (!v8)
        goto LABEL_68;
      *(_DWORD *)(a1 + 32) = v9;
      return 1;
    }
    v23 = v6 + v7;
    if (v23 >= v7 && v23 <= *(_DWORD *)(a1 + 36))
    {
      *(_DWORD *)(a1 + 32) = v23;
      return 1;
    }
    return 0;
  }
  return v5;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::backtrackPatternCasedCharacter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;

  v4 = (_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24);
      if (v6)
      {
        *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = v6 - 1;
        v7 = *(_DWORD *)(a1 + 32);
        if ((*(_BYTE *)(a2 + 37) & 4) == 0)
        {
          if (v7)
          {
            v8 = v7 - 1;
LABEL_19:
            *(_DWORD *)(a1 + 32) = v8;
            return 1;
          }
LABEL_25:
          __break(0xC471u);
          JUMPOUT(0x198E79EECLL);
        }
        if (v7 < *(_DWORD *)(a1 + 36))
        {
          v8 = v7 + 1;
          goto LABEL_19;
        }
      }
    }
    return 0;
  }
  if ((*(_BYTE *)(a2 + 37) & 4) == 0)
  {
    v9 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24);
    if (v9 < *(unsigned int *)(a2 + 24))
    {
      v10 = *(_DWORD *)(a1 + 32);
      if (v10 < *(_DWORD *)(a1 + 36))
      {
        *(_DWORD *)(a1 + 32) = v10 + 1;
        v4[1] = v9 + 1;
        if ((JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(a1, a2, *(_DWORD *)(a2 + 40) + 1) & 1) != 0)
          return 1;
        v9 = v4[1];
      }
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = v11 >= v9;
    v13 = v11 - v9;
    if (v12)
    {
      result = 0;
      *(_DWORD *)(a1 + 32) = v13;
      return result;
    }
    goto LABEL_25;
  }
  v15 = *(_DWORD *)(a1 + 32);
  v16 = *(_DWORD *)(a2 + 40);
  if (v15 < v16)
    return 0;
  if (v15)
  {
    v17 = v4[1];
    if (v17 < *(unsigned int *)(a2 + 24))
    {
      *(_DWORD *)(a1 + 32) = v15 - 1;
      v4[1] = v17 + 1;
      if ((JSC::Yarr::Interpreter<char16_t>::checkCasedCharacter(a1, a2, v16) & 1) != 0)
        return 1;
    }
  }
  result = 0;
  *(_DWORD *)(a1 + 32) = *v4;
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::backtrackCharacterClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 2)
  {
    v6 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24);
    v7 = *(unsigned int *)(a2 + 24);
    if ((*(_BYTE *)(a2 + 37) & 4) != 0)
    {
      if (v6 >= v7)
        goto LABEL_25;
      v18 = *(_DWORD *)(a1 + 32);
      if (!v18)
        goto LABEL_25;
      *(_DWORD *)(a1 + 32) = v18 - 1;
      v4[1] = v6 + 1;
      v9 = *(_DWORD *)(a2 + 40);
    }
    else
    {
      if (v6 >= v7)
        goto LABEL_25;
      v8 = *(_DWORD *)(a1 + 32);
      if (v8 >= *(_DWORD *)(a1 + 36))
        goto LABEL_25;
      *(_DWORD *)(a1 + 32) = v8 + 1;
      v4[1] = v6 + 1;
      v9 = *(_DWORD *)(a2 + 40) + 1;
    }
    if ((JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(a1, a2, v9) & 1) == 0)
    {
LABEL_25:
      result = 0;
      *(_DWORD *)(a1 + 32) = *v4;
      return result;
    }
    return 1;
  }
  if (v5 != 1)
  {
    if (!*(_BYTE *)(a2 + 16) && *(unsigned __int8 *)(a1 + 8) - 1 <= 1)
      goto LABEL_25;
    return 0;
  }
  v10 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24);
  if (!v10)
    return 0;
  if (*(unsigned __int8 *)(a1 + 8) - 1 > 1)
  {
    *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = v10 - 1;
    v19 = *(_DWORD *)(a1 + 32);
    if ((*(_BYTE *)(a2 + 37) & 4) == 0)
    {
      if (!v19)
        goto LABEL_35;
      v20 = v19 - 1;
      goto LABEL_32;
    }
LABEL_30:
    if (v19 >= *(_DWORD *)(a1 + 36))
      return 1;
    v20 = v19 + 1;
LABEL_32:
    *(_DWORD *)(a1 + 32) = v20;
    return 1;
  }
  v11 = *(_BYTE *)(a2 + 37);
  *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) = v10 - 1;
  v12 = (uint64_t *)(a1 + 24);
  if ((v11 & 4) != 0)
  {
    JSC::Yarr::Interpreter<char16_t>::InputStream::readChecked(v12, *(_DWORD *)(a2 + 40));
    v19 = *(_DWORD *)(a1 + 32);
    goto LABEL_30;
  }
  v13 = *(_DWORD *)(a1 + 32);
  if (!v13)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x198E7A0E0);
  }
  *(_DWORD *)(a1 + 32) = v13 - 1;
  v14 = *(_DWORD *)(a2 + 40);
  v15 = v13 - 1 - v14;
  if (v13 - 1 < v14)
    return 1;
  v16 = *v12;
  if ((*(_WORD *)(*v12 + 2 * v15) & 0xFC00) != 0xDC00)
    return 1;
  result = 1;
  if (v13 - 1 != v14 && *(_BYTE *)(a1 + 40) && (*(_WORD *)(v16 + 2 * (v15 - 1)) & 0xFC00) == 0xD800)
    *(_DWORD *)(a1 + 32) = v13 - 2;
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::backtrackBackReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v5 = *(unsigned int *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 4 * (v6 + *(_DWORD *)(*(_QWORD *)a1 + 36) - 1));
    if (!v8)
      return 0;
  }
  else
  {
    v8 = *(_DWORD *)a2;
    v7 = *(_QWORD *)(a1 + 16);
  }
  v9 = *(_DWORD *)(v7 + 4 * (2 * v8));
  v10 = *(_DWORD *)(v7 + 4 * ((2 * v8) | 1u));
  if (v9 == -1 || v9 == v10)
    return 0;
  v13 = (_QWORD *)(a3 + 8 * v5 + 16);
  v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 2)
  {
    if (v13[1] >= (unint64_t)*(unsigned int *)(a2 + 24)
      || !JSC::Yarr::Interpreter<char16_t>::tryConsumeBackReference(a1, v9, v10, a2))
    {
      goto LABEL_21;
    }
    ++v13[1];
  }
  else
  {
    if (v14 != 1)
    {
      if (!*(_BYTE *)(a2 + 16))
      {
LABEL_21:
        result = 0;
        *(_DWORD *)(a1 + 32) = *v13;
        return result;
      }
      return 0;
    }
    v15 = v13[1];
    if (!v15)
      return 0;
    v13[1] = v15 - 1;
    v16 = *(_DWORD *)(a1 + 32);
    if ((*(_BYTE *)(a2 + 37) & 4) != 0)
    {
      v17 = v16 + v10 - v9;
      if (v17 < v16 || v17 > *(_DWORD *)(a1 + 36))
        return 0;
    }
    else
    {
      v17 = v9 - v10 + v16;
    }
    *(_DWORD *)(a1 + 32) = v17;
  }
  return 1;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::backtrackParentheses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t DisjunctionContext;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t i;
  uint64_t matched;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t j;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;

  v10 = (_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 16);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 == 2)
  {
    if (*(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24) >= (unint64_t)*(unsigned int *)(a2 + 24))
      goto LABEL_76;
    v25 = JSC::Yarr::Interpreter<char16_t>::allocParenthesesDisjunctionContext((_QWORD *)a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 16), (unsigned int *)a2, a5, a6, a7, a8);
    v26 = 4 * *(_QWORD *)(v25 + 24);
    v27 = v26 + 48;
    v28 = (v26 + 55) & 0x7FFFFFFF8;
    if (v28 < v27)
    {
      __break(0xC471u);
      JUMPOUT(0x198E7A780);
    }
    v29 = (_QWORD *)v25;
    v30 = v28 + v25;
    v31 = a1;
    v32 = v11;
    v33 = v30;
    for (i = 0; ; i = 1)
    {
      matched = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(v31, v32, v33, i);
      if ((_DWORD)matched != 1)
        break;
      if (*(_DWORD *)(v30 + 4) != *(_DWORD *)(v30 + 8))
      {
        v59 = v10[1];
        *v29 = v10[2];
        v10[1] = v59 + 1;
        v10[2] = v29;
        v60 = a1;
        v61 = (int *)a2;
        v62 = (uint64_t)v29;
        goto LABEL_70;
      }
      v31 = a1;
      v32 = v11;
      v33 = v30;
    }
    v21 = matched;
    JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v29, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
    while (1)
    {
      JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v29);
      if ((_DWORD)v21)
        break;
LABEL_76:
      if (!v10[1])
        return 0;
      v29 = (_QWORD *)v10[2];
      v85 = 4 * v29[3];
      v86 = v85 + 48;
      v87 = (v85 + 55) & 0x7FFFFFFF8;
      if (v87 < v86)
      {
        __break(0xC471u);
        JUMPOUT(0x198E7A900);
      }
      v88 = (char *)v29 + v87;
      while (1)
      {
        v89 = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(a1, v11, v88, 1);
        if ((_DWORD)v89 != 1)
          break;
        if (*((_DWORD *)v88 + 1) != *((_DWORD *)v88 + 2))
          goto LABEL_71;
      }
      v21 = v89;
      JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v29, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
      v90 = v10[1];
      if (!v90)
      {
        __break(0xC471u);
        JUMPOUT(0x198E7A920);
      }
      v91 = (uint64_t *)v10[2];
      if (!v91)
      {
LABEL_87:
        __break(0xC471u);
        JUMPOUT(0x198E7A680);
      }
      v92 = *v91;
      v10[1] = v90 - 1;
      v10[2] = v92;
    }
  }
  else
  {
    if (v12 != 1)
    {
      if (*(_BYTE *)(a2 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x198E7A800);
      }
      while (v10[1])
      {
        v13 = v10[2];
        v14 = *(_QWORD *)(a2 + 8);
        DisjunctionContext = JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::getDisjunctionContext(v13);
        v16 = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(a1, v14, DisjunctionContext, 1);
        if ((_DWORD)v16 == 1)
        {
LABEL_30:
          v63 = v10[1];
          while (v63 < *(unsigned int *)(a2 + 24))
          {
            v64 = JSC::Yarr::Interpreter<char16_t>::allocParenthesesDisjunctionContext((_QWORD *)a1, v11, *(_QWORD *)(a1 + 16), (unsigned int *)a2, v17, v18, v19, v20);
            v65 = 4 * *(_QWORD *)(v64 + 24);
            v66 = v65 + 48;
            v67 = (v65 + 55) & 0x7FFFFFFF8;
            if (v67 < v66)
            {
              __break(0xC471u);
              JUMPOUT(0x198E7A7A0);
            }
            v68 = (_QWORD *)v64;
            v69 = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(a1, v11, v67 + v64, 0);
            if ((_DWORD)v69 != 1)
            {
              v21 = v69;
              JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v68, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
              while (1)
              {
                JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v68);
                if ((_DWORD)v21)
                  return v21;
                if (!v10[1])
                  return 0;
                v68 = (_QWORD *)v10[2];
                v71 = *(_QWORD *)(a2 + 8);
                v72 = JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::getDisjunctionContext((uint64_t)v68);
                v73 = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(a1, v71, v72, 1);
                if ((_DWORD)v73 == 1)
                  goto LABEL_30;
                v21 = v73;
                JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v68, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
                v74 = v10[1];
                if (!v74)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E7A6E0);
                }
                v75 = (uint64_t *)v10[2];
                if (!v75)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E7A700);
                }
                v76 = *v75;
                v10[1] = v74 - 1;
                v10[2] = v76;
              }
            }
            v70 = v10[1];
            *v68 = v10[2];
            v63 = v70 + 1;
            v10[1] = v70 + 1;
            v10[2] = v68;
          }
          goto LABEL_69;
        }
        v21 = v16;
        JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput(v13, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
        v22 = v10[1];
        if (!v22)
          goto LABEL_87;
        v23 = (uint64_t *)v10[2];
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x198E7A6A0);
        }
        v24 = *v23;
        v10[1] = v22 - 1;
        v10[2] = v24;
        JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, v13);
        if ((_DWORD)v21)
          return v21;
      }
      return 0;
    }
    if (!*(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 24))
      return 0;
    v36 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a2 + 32) + 32);
    v37 = 4 * *(_QWORD *)(v36 + 24);
    v38 = v37 + 48;
    v39 = (v37 + 55) & 0x7FFFFFFF8;
    if (v39 < v38)
    {
      __break(0xC471u);
      JUMPOUT(0x198E7A720);
    }
    v40 = v39 + v36;
    do
    {
      v41 = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(a1, v11, v40, 1);
      if ((_DWORD)v41 != 1)
      {
        v21 = v41;
        JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput(v36, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
        v77 = v10[1];
        if (!v77)
        {
          __break(0xC471u);
          JUMPOUT(0x198E7A7C0);
        }
        v78 = (uint64_t *)v10[2];
        if (!v78)
        {
          __break(0xC471u);
          JUMPOUT(0x198E7A7E0);
        }
        v79 = *v78;
        v10[1] = v77 - 1;
        v10[2] = v79;
        JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, v36);
        v46 = v10[1];
        if (v46 < *(unsigned int *)(a2 + 20))
        {
          if (v46)
          {
            do
            {
              v80 = v10[2];
              JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput(v80, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
              v81 = v10[1];
              if (!v81)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7A740);
              }
              v82 = (uint64_t *)v10[2];
              if (!v82)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7A760);
              }
              v83 = *v82;
              v10[1] = v81 - 1;
              v10[2] = v83;
              JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, v80);
            }
            while (v10[1]);
          }
          *(_DWORD *)(a1 + 32) = *v10;
          return v21;
        }
        if ((_DWORD)v21)
          return v21;
        goto LABEL_72;
      }
    }
    while (*(_DWORD *)(v40 + 4) == *(_DWORD *)(v40 + 8));
    v46 = v10[1];
LABEL_22:
    if (v46 >= *(unsigned int *)(a2 + 24))
      goto LABEL_72;
    v47 = JSC::Yarr::Interpreter<char16_t>::allocParenthesesDisjunctionContext((_QWORD *)a1, v11, *(_QWORD *)(a1 + 16), (unsigned int *)a2, v42, v43, v44, v45);
    v48 = 4 * *(_QWORD *)(v47 + 24);
    v49 = v48 + 48;
    v50 = (v48 + 55) & 0x7FFFFFFF8;
    if (v50 < v49)
    {
      __break(0xC471u);
      JUMPOUT(0x198E7A6C0);
    }
    v51 = (_QWORD *)v47;
    v52 = v50 + v47;
    v53 = a1;
    v54 = v11;
    v55 = v52;
    for (j = 0; ; j = 1)
    {
      v57 = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(v53, v54, v55, j);
      if ((_DWORD)v57 != 1)
        break;
      if (*(_DWORD *)(v52 + 4) != *(_DWORD *)(v52 + 8))
      {
        v58 = v10[1];
        *v51 = v10[2];
        v46 = v58 + 1;
        v10[1] = v58 + 1;
        v10[2] = v51;
        goto LABEL_22;
      }
      v53 = a1;
      v54 = v11;
      v55 = v52;
    }
    v21 = v57;
    JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput((uint64_t)v51, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
    JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, (unint64_t)v51);
    if (!(_DWORD)v21)
    {
LABEL_71:
      v46 = v10[1];
LABEL_72:
      if (v46)
      {
LABEL_69:
        v62 = v10[2];
        v60 = a1;
        v61 = (int *)a2;
LABEL_70:
        JSC::Yarr::Interpreter<char16_t>::recordParenthesesMatch(v60, v61, v62);
      }
      return 1;
    }
  }
  return v21;
}

BOOL JSC::Yarr::Interpreter<char16_t>::backtrackParenthesesOnceBegin(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v3 = *(unsigned int *)(a2 + 32);
  if ((*(_BYTE *)(a2 + 37) & 1) != 0)
  {
    v4 = a1[2];
    *(_QWORD *)(v4 + 4 * (2 * *(_DWORD *)a2)) = -1;
    v5 = *(_DWORD *)(a2 + 4);
    if (v5)
      *(_DWORD *)(v4 + 4 * (v5 + *(_DWORD *)(*a1 + 36) - 1)) = 0;
  }
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 1)
  {
    *(_QWORD *)&a3[2 * v3 + 4] = -1;
    *a3 += *(_DWORD *)(a2 + 8);
  }
  return v6 == 1;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::backtrackParenthesesOnceEnd(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  v3 = a3 + 4;
  v4 = *(unsigned int *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 2)
  {
    if (*(_QWORD *)&v3[2 * v4] == -1)
    {
      v7 = *(unsigned int *)(a1 + 32);
      *(_QWORD *)&v3[2 * v4] = v7;
      v8 = *(unsigned __int8 *)(a2 + 37);
      if ((v8 & 1) != 0)
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * ((v8 >> 2) & 1 | (2 * *(_DWORD *)a2))) = v7 - *(_DWORD *)(a2 + 40);
      result = 1;
      goto LABEL_10;
    }
    return 0;
  }
  if (v5 != 1)
    return 0;
  result = 0;
  if (*(_QWORD *)&v3[2 * v4] == -1)
LABEL_10:
    *a3 -= *(_DWORD *)(a2 + 8);
  return result;
}

BOOL JSC::Yarr::Interpreter<char16_t>::testCharacterClass(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  BOOL v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v18;
  int v19;

  if ((*(_BYTE *)(a1 + 89) & 2) != 0)
    return 1;
  if (a2 < 0x80)
  {
    v4 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD **)(a1 + 16);
      if (v4 >= 7)
      {
        if (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(a2, (uint64_t)v5, v4))
        {
          return 1;
        }
      }
      else
      {
        if (*v5 == (_DWORD)a2)
          return 1;
        v6 = 0;
        while (v4 - 1 != v6)
        {
          v7 = v5[++v6];
          if (v7 == (_DWORD)a2)
          {
            if (v6 < v4)
              return 1;
            break;
          }
        }
      }
    }
    v10 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a1 + 32);
      if (v10 <= 6)
      {
        v15 = 0;
        v16 = (_DWORD *)(v11 + 4);
        v14 = 1;
        do
        {
          if (*(v16 - 1) <= a2 && *v16 >= a2)
            break;
          v14 = ++v15 < v10;
          v16 += 2;
        }
        while (v10 != v15);
        return v14;
      }
      return (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(a2, v11, v10) & 1) != 0;
    }
    return 0;
  }
  v8 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v8)
  {
    v9 = *(_DWORD **)(a1 + 48);
    if (v8 < 7)
    {
      if (*v9 == (_DWORD)a2)
        return 1;
      v18 = 0;
      while (v8 - 1 != v18)
      {
        v19 = v9[++v18];
        if (v19 == (_DWORD)a2)
        {
          if (v18 >= v8)
            break;
          return 1;
        }
      }
    }
    else if (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(a2, (uint64_t)v9, v8))
    {
      return 1;
    }
  }
  v10 = *(unsigned int *)(a1 + 76);
  if (!(_DWORD)v10)
    return 0;
  v11 = *(_QWORD *)(a1 + 64);
  if (v10 > 6)
    return (JSC::Yarr::Interpreter<unsigned char>::testCharacterClass(JSC::Yarr::CharacterClass *,char32_t)::{lambda(WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(a2, v11, v10) & 1) != 0;
  v12 = 0;
  v13 = (_DWORD *)(v11 + 4);
  v14 = 1;
  do
  {
    if (*(v13 - 1) <= a2 && *v13 >= a2)
      break;
    v14 = ++v12 < v10;
    v13 += 2;
  }
  while (v10 != v12);
  return v14;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::InputStream::readCheckedDontAdvance(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  v2 = *((_DWORD *)a1 + 2);
  v3 = v2 - a2;
  if (v2 < a2)
  {
    result = 295;
    __break(0xC471u);
  }
  else
  {
    v5 = *a1;
    result = *(unsigned __int16 *)(*a1 + 2 * v3);
    if ((result & 0xFC00) == 0xD800)
    {
      if (*((_BYTE *)a1 + 16))
      {
        v7 = v3 + 1;
        v8 = *((_DWORD *)a1 + 3);
        if (v7 < v8)
        {
          v9 = *(unsigned __int16 *)(v5 + 2 * v7);
          v10 = v2 == v8;
          v11 = v9 + ((_DWORD)result << 10) - 56613888;
          if (v10)
            v11 = -1;
          if ((v9 & 0xFC00) == 0xDC00)
            return v11;
          else
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::InputStream::readChecked(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v2 = *((_DWORD *)a1 + 2);
  v3 = v2 - a2;
  if (v2 < a2)
  {
    result = 279;
    __break(0xC471u);
  }
  else
  {
    v5 = *a1;
    result = *(unsigned __int16 *)(*a1 + 2 * v3);
    if ((result & 0xFC00) == 0xD800)
    {
      if (*((_BYTE *)a1 + 16))
      {
        v9 = v3 + 1;
        v10 = *((_DWORD *)a1 + 3);
        if (v9 < v10)
        {
          v11 = *(unsigned __int16 *)(v5 + 2 * v9);
          if ((v11 & 0xFC00) == 0xDC00)
          {
            if (v2 == v10)
              return 0xFFFFFFFFLL;
            *((_DWORD *)a1 + 2) = v2 + 1;
            return (v11 + ((_DWORD)result << 10) - 56613888);
          }
        }
      }
    }
    else
    {
      if (*((_BYTE *)a1 + 16))
        v7 = v2 == a2;
      else
        v7 = 1;
      v8 = !v7 && (result & 0xFC00) == 56320;
      if (v8 && (*(_WORD *)(v5 + 2 * (v3 - 1)) & 0xFC00) == 0xD800)
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::InputStream::tryReadBackward(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v6;
  int v8;

  v2 = *((_DWORD *)a1 + 2);
  v3 = v2 - a2;
  if (v2 < a2)
    return 0xFFFFFFFFLL;
  v6 = *a1;
  result = *(unsigned __int16 *)(*a1 + 2 * v3);
  if ((result & 0xFC00) == 0xDC00 && v2 != a2 && *((_BYTE *)a1 + 16) != 0)
  {
    v8 = *(unsigned __int16 *)(v6 + 2 * (v3 - 1));
    if ((v8 & 0xFC00) == 0xD800)
    {
      *((_DWORD *)a1 + 2) = v2 - 1;
      return (result + (v8 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::checkCharacterClass(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t Backward;
  unsigned int v10;
  unsigned int v11;
  int v12;

  if ((*(_BYTE *)(a2 + 37) & 4) != 0)
  {
    Backward = JSC::Yarr::Interpreter<char16_t>::InputStream::tryReadBackward((uint64_t *)(a1 + 24), a3);
    if ((_DWORD)Backward != -1)
    {
      v7 = Backward;
      return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)a2, v7) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
    }
    return 0;
  }
  v4 = *(_DWORD *)(a1 + 32);
  v5 = v4 - a3;
  if (v4 >= a3)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(unsigned __int16 *)(v6 + 2 * v5);
    if ((v7 & 0xFC00) != 0xD800)
    {
      if (*(_BYTE *)(a1 + 40)
        && v4 != a3
        && (v7 & 0xFC00) == 0xDC00
        && (*(_WORD *)(v6 + 2 * (v5 - 1)) & 0xFC00) == 0xD800)
      {
        return 0;
      }
      return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)a2, v7) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
    }
    if (!*(_BYTE *)(a1 + 40))
      return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)a2, v7) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
    v10 = v5 + 1;
    v11 = *(_DWORD *)(a1 + 36);
    if (v10 >= v11)
      return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)a2, v7) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
    v12 = *(unsigned __int16 *)(v6 + 2 * v10);
    if ((v12 & 0xFC00) != 0xDC00)
      return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)a2, v7) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
    if (v4 != v11)
    {
      *(_DWORD *)(a1 + 32) = v4 + 1;
      v7 = (v12 + ((_DWORD)v7 << 10) - 56613888);
      return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(*(_QWORD *)a2, v7) ^ ((*(_BYTE *)(a2 + 37) & 2) >> 1);
    }
    return 0;
  }
  result = 279;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::checkCharacterClassDontAdvanceInputForNonBMP(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t Checked;
  uint64_t result;

  if ((a3 & 4) != 0 && *(_DWORD *)(a1 + 32) < a4)
    return 0;
  v5 = (uint64_t *)(a1 + 24);
  if (*(_BYTE *)(a2 + 88) != 2)
  {
    Checked = JSC::Yarr::Interpreter<char16_t>::InputStream::readChecked((uint64_t *)(a1 + 24), a4);
    if ((_DWORD)Checked != -1)
      return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(a2, Checked);
    return 0;
  }
  v6 = *(_DWORD *)(a1 + 32);
  v7 = v6 - a4;
  if (v6 >= a4)
  {
    if (v7 + 1 < *(_DWORD *)(a1 + 36))
    {
      v8 = *v5;
      v9 = *(unsigned __int16 *)(*v5 + 2 * v7);
      if ((v9 & 0xFC00) == 0xD800)
      {
        v10 = *(unsigned __int16 *)(v8 + 2 * (v7 + 1));
        if ((v10 & 0xFC00) == 0xDC00)
        {
          Checked = (v10 + (v9 << 10) - 56613888);
          return JSC::Yarr::Interpreter<char16_t>::testCharacterClass(a2, Checked);
        }
      }
    }
    return 0;
  }
  result = 339;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::tryConsumeBackReference(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t result;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int Checked;
  unsigned int v25;
  unsigned int v26;
  unsigned int v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _UNKNOWN **v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;

  v7 = a3 - a2;
  if ((*(_BYTE *)(a4 + 37) & 4) == 0)
  {
    v8 = *(_DWORD *)(a1 + 32);
    v9 = v8 + v7;
    v10 = v8 + v7 <= *(_DWORD *)(a1 + 36) && v9 >= v8;
    if (!v10)
      return 0;
    *(_DWORD *)(a1 + 32) = v9;
  }
  if (a3 != a2)
  {
    v12 = 0;
    v13 = (unsigned int *)(a1 + 32);
    do
    {
      v14 = v7 - v12 + *(_DWORD *)(a4 + 40);
      if ((*(_BYTE *)(a4 + 37) & 4) != 0 && v14 > *v13)
        return 0;
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(unsigned __int16 *)(v15 + 2 * (v12 + a2));
      if (*(_BYTE *)(a1 + 40))
      {
        v17 = v12 + a2 + 1;
        v18 = *(_DWORD *)(a1 + 36);
        if (v17 < v18)
        {
          if ((v16 & 0xFC00) == 0xDC00)
          {
            if ((*(_WORD *)(v15 + 2 * v17) & 0xFC00) == 0xD800)
            {
              v16 = -1;
LABEL_23:
              v20 = *v13 - v14;
              if (*v13 < v14)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7B394);
              }
              v21 = v20 + 1;
              if (v20 + 1 < v18
                && (v22 = *(unsigned __int16 *)(v15 + 2 * v20), (v22 & 0xFC00) == 0xD800)
                && (v23 = *(unsigned __int16 *)(v15 + 2 * v21), (v23 & 0xFC00) == 0xDC00))
              {
                Checked = v23 + (v22 << 10) - 56613888;
              }
              else
              {
                Checked = -1;
              }
              ++v12;
              goto LABEL_39;
            }
          }
          else if ((v16 & 0xFC00) == 0xD800)
          {
            v19 = *(unsigned __int16 *)(v15 + 2 * v17);
            if ((v19 & 0xFC00) == 0xDC00)
            {
              v16 = v19 + (v16 << 10) - 56613888;
              if (v16 >= 0x10000)
                goto LABEL_23;
            }
          }
        }
      }
      if ((*(_BYTE *)(a4 + 37) & 4) != 0)
      {
        v25 = *v13;
        v26 = *v13 - v14;
        if (*v13 < v14)
          return 0;
        Checked = *(unsigned __int16 *)(v15 + 2 * v26);
        if ((Checked & 0xFC00) == 0xDC00 && *(_BYTE *)(a1 + 40) != 0 && v25 != v14)
        {
          v41 = *(unsigned __int16 *)(v15 + 2 * (v26 - 1));
          if ((v41 & 0xFC00) == 0xD800)
          {
            *v13 = v25 - 1;
            Checked = Checked + (v41 << 10) - 56613888;
          }
        }
      }
      else
      {
        Checked = JSC::Yarr::Interpreter<char16_t>::InputStream::readChecked((uint64_t *)(a1 + 24), v14);
      }
LABEL_39:
      if (v16 == -1 || Checked == -1)
        return 0;
      if (v16 != Checked)
      {
        if ((*(_WORD *)(*(_QWORD *)a1 + 8) & 4) == 0)
          goto LABEL_90;
        if (*(_BYTE *)(a1 + 8) || v16 >= 0x80 && Checked > 0x7F)
        {
          v30 = *(unsigned __int8 *)(a1 + 8) - 3;
          v31 = &JSC::Yarr::unicodeRangeInfo;
          if (v30 < 0xFFFFFFFE)
            v31 = &JSC::Yarr::ucs2RangeInfo;
          v32 = 540;
          if (v30 < 0xFFFFFFFE)
            v32 = 448;
          while (1)
          {
            do
            {
              v33 = v32;
              v32 >>= 1;
            }
            while (v31[4 * v32] > v16);
            v34 = &v31[4 * v32];
            if (v34[1] >= v16)
              break;
            v31 = v34 + 4;
            v32 = v33 + ~v32;
          }
          switch(v34[3])
          {
            case 0:
              goto LABEL_90;
            case 1:
              v35 = v31[4 * v32 + 2];
              v10 = __CFADD__(v30, 2);
              v36 = &JSC::Yarr::unicodeCharacterSetInfo;
              if (!v10)
                v36 = &JSC::Yarr::ucs2CharacterSetInfo;
              v37 = (int *)v36[v35];
              do
              {
                v39 = *v37++;
                v38 = v39;
                if (v39)
                  v40 = v38 == Checked;
                else
                  v40 = 1;
              }
              while (!v40);
              if (!v38)
                goto LABEL_90;
              goto LABEL_83;
            case 2:
              v45 = v31[4 * v32 + 2] + v16;
              goto LABEL_78;
            case 3:
              v45 = v16 - v31[4 * v32 + 2];
LABEL_78:
              if (v45 != Checked)
                goto LABEL_90;
              goto LABEL_83;
            case 4:
              v46 = Checked ^ v16;
              goto LABEL_82;
            case 5:
              v46 = (Checked - 1) ^ (v16 - 1);
LABEL_82:
              if (v46 < 2)
                goto LABEL_83;
              goto LABEL_90;
            default:
              __break(0xC471u);
              JUMPOUT(0x198E7B3F4);
          }
        }
        v42 = v16 - 97 >= 0x1A ? -1 : -33;
        v43 = v42 & v16;
        v44 = Checked - 97 >= 0x1A ? -1 : -33;
        if (v43 != (v44 & Checked))
        {
LABEL_90:
          if ((*(_BYTE *)(a4 + 37) & 4) != 0)
            return 0;
          v47 = *v13;
          if (*v13 < v7)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7B3D4);
          }
          result = 0;
          goto LABEL_89;
        }
      }
LABEL_83:
      ++v12;
    }
    while (v12 < v7);
  }
  if ((*(_BYTE *)(a4 + 37) & 4) == 0)
    return 1;
  v49 = *(_DWORD *)(a1 + 32);
  v48 = (unsigned int *)(a1 + 32);
  v47 = v49;
  if (v49 < v7)
  {
    __break(0xC471u);
    JUMPOUT(0x198E7B3B4);
  }
  result = 1;
  v13 = v48;
LABEL_89:
  *v13 = v47 - v7;
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::allocParenthesesDisjunctionContext(_QWORD *a1, unint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v12;
  __int32 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::BumpPointerPool *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int8x8_t v49;
  __int32 v50;
  uint8x8_t v51;
  WTF::BumpPointerPool *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;

  v10 = a2;
  v53 = 0x8000000000000000;
  v12 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  if (!*(_DWORD *)(*a1 + 32))
  {
    v13 = 0;
    goto LABEL_3;
  }
  if (v12)
  {
    v41 = *a4;
    v42 = *(unsigned int *)(*((_QWORD *)a4 + 1) + 16);
    do
    {
      if (v41 >= *(unsigned int *)(*a1 + 60))
        goto LABEL_54;
      a2 = *(unsigned int *)(*(_QWORD *)(*a1 + 48) + 4 * v41);
      if ((_DWORD)a2)
        WTF::BitVector::set((WTF::BitVector *)&v53, a2);
      ++v41;
      --v42;
    }
    while (v42);
    v43 = v53;
    if ((v53 & 0x8000000000000000) == 0)
    {
      v13 = WTF::BitVector::bitCountSlow((WTF::BitVector *)&v53);
      goto LABEL_3;
    }
  }
  else
  {
    v43 = 0x8000000000000000;
  }
  v49 = vcnt_s8((int8x8_t)v43);
  v49.i16[0] = vaddlv_u8((uint8x8_t)v49);
  v50 = v49.i32[0];
  v49.i32[0] = HIDWORD(v43) & 0x7FFFFFFF;
  v51 = (uint8x8_t)vcnt_s8(v49);
  v51.i16[0] = vaddlv_u8(v51);
  v13 = v51.i32[0] + v50;
LABEL_3:
  v14 = 4 * (v13 + 2 * v12);
  v15 = v14 + 48;
  v16 = (v14 + 55) & 0x7FFFFFFF8;
  if (v16 < v15)
  {
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x198E7B73CLL);
  }
  v17 = 8 * *(unsigned int *)(v10 + 20);
  v18 = v17 + 16;
  v19 = (v17 + 23) & 0xFFFFFFFF8;
  if (v19 < v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198E7B75CLL);
  }
  v20 = (WTF::BumpPointerPool *)(v19 + v16);
  v21 = (char *)a1[7];
  v22 = *(_QWORD *)v21;
  if ((char *)v20 + *(_QWORD *)v21 > v21)
  {
    while (1)
    {
      v23 = (char *)*((_QWORD *)v21 + 2);
      if (!v23)
        break;
      v22 = *(_QWORD *)v23;
      v21 = (char *)*((_QWORD *)v21 + 2);
      if ((char *)v20 + *(_QWORD *)v23 <= v23)
        goto LABEL_7;
    }
    v52 = v20;
    v23 = WTF::BumpPointerPool::create(v20);
    v20 = v52;
    *((_QWORD *)v21 + 2) = v23;
    *((_QWORD *)v23 + 3) = v21;
    v22 = *(_QWORD *)v23;
  }
  else
  {
    v23 = (char *)a1[7];
  }
LABEL_7:
  a1[7] = v23;
  *(_QWORD *)v23 = (char *)v20 + v22;
  v24 = *a1;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = v24;
  v25 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  *(_QWORD *)(v22 + 32) = 0x8000000000000000;
  v26 = (unint64_t *)(v22 + 32);
  *(_DWORD *)(v22 + 16) = v25;
  if ((v53 & 0x8000000000000000) != 0)
  {
    *v26 = v53;
  }
  else
  {
    WTF::BitVector::setSlow((WTF::BitVector *)(v22 + 32), (const WTF::BitVector *)&v53, a3, (uint64_t)a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(v22 + 16);
  }
  v27 = (v13 + 2 * v25);
  *(_QWORD *)(v22 + 24) = v27;
  if ((v25 & 0x7FFFFFFF) != 0)
  {
    v44 = 0;
    v45 = 2 * *a4;
    do
    {
      v46 = v45 + v44;
      *(_DWORD *)(v22 + 40 + 4 * v44) = *(_DWORD *)(a3 + 4 * (v45 + v44));
      ++v44;
      *(_DWORD *)(a3 + 4 * v46) = -1;
    }
    while (v44 < (2 * *(_DWORD *)(v22 + 16)));
  }
  v28 = *v26;
  if ((*v26 & 0x8000000000000000) != 0)
  {
    v33 = __clz(__rbit64(v28));
    v29 = 63;
    if (v33 >= 0x3F)
      v33 = 63;
  }
  else
  {
    v29 = *(_QWORD *)(2 * v28);
    if ((unint64_t)(v29 + 63) < 0x40)
      goto LABEL_17;
    v30 = *(_QWORD *)(2 * v28 + 8);
    if (v30 && (v31 = __clz(__rbit64(v30)), v31 < 0x40))
    {
      v32 = 0;
    }
    else
    {
      if ((unint64_t)(v29 + 63) >> 6 == 1)
        goto LABEL_17;
      v39 = 0;
      while (1)
      {
        v40 = *(_QWORD *)(2 * v28 + 0x10 + 8 * v39);
        if (v40)
        {
          v31 = __clz(__rbit64(v40));
          if (v31 <= 0x3F)
            break;
        }
        if (((unint64_t)(v29 + 63) >> 6) - 1 == ++v39)
          goto LABEL_17;
      }
      v32 = v39 + 1;
    }
    v33 = v31 + (v32 << 6);
  }
  v54 = (unint64_t *)(v22 + 32);
  v55 = v33;
  if (v33 != v29)
  {
    v47 = 0;
    do
    {
      v48 = v33 - 1;
      *(_DWORD *)(v22 + 4 * (v47 + 2 * *(_DWORD *)(v22 + 16)) + 40) = *(_DWORD *)(a3
                                                                                                + 4
                                                                                                * (*(_DWORD *)(*(_QWORD *)(v22 + 8) + 36) + v48));
      *(_DWORD *)(a3 + 4 * (*(_DWORD *)(v24 + 36) + v48)) = 0;
      ++v47;
      WTF::BitVector::iterator::operator++(&v54);
      LODWORD(v33) = v55;
    }
    while (v55 != v29);
    v27 = *(_QWORD *)(v22 + 24);
  }
LABEL_17:
  v34 = 4 * v27;
  v35 = v34 + 48;
  v36 = (v34 + 55) & 0x7FFFFFFF8;
  if (v36 < v35)
  {
    __break(0xC471u);
    JUMPOUT(0x198E7B77CLL);
  }
  v37 = (_QWORD *)(v36 + v22);
  *v37 = 0;
  v37[1] = 0;
  v37[2] = 0;
  if ((v53 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v53, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  return v22;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::getDisjunctionContext(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;

  v1 = 4 * *(_QWORD *)(a1 + 24);
  v2 = v1 + 48;
  v3 = (v1 + 55) & 0x7FFFFFFF8;
  if (v3 >= v2)
    return v3 + a1;
  result = 207;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::parenthesesDoBacktrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t DisjunctionContext;
  uint64_t matched;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  while (*(_QWORD *)(a3 + 8))
  {
    v6 = *(_QWORD *)(a3 + 16);
    v7 = *(_QWORD *)(a2 + 8);
    DisjunctionContext = JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::getDisjunctionContext(v6);
    matched = JSC::Yarr::Interpreter<char16_t>::matchDisjunction(a1, v7, DisjunctionContext, 1);
    if ((_DWORD)matched != 1)
    {
      JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput(v6, *(_QWORD *)(a1 + 16), *(_DWORD *)a2);
      v10 = *(_QWORD *)(a3 + 8);
      if (!v10 || (v11 = *(uint64_t **)(a3 + 16)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198E7B8D8);
      }
      v12 = *v11;
      *(_QWORD *)(a3 + 8) = v10 - 1;
      *(_QWORD *)(a3 + 16) = v12;
      JSC::Yarr::Interpreter<unsigned char>::freeParenthesesDisjunctionContext(a1, v6);
      if (!(_DWORD)matched)
        continue;
    }
    return matched;
  }
  return 0;
}

uint64_t JSC::Yarr::Interpreter<char16_t>::recordParenthesesMatch(uint64_t result, int *a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;

  if ((*((_BYTE *)a2 + 37) & 1) != 0)
  {
    v5 = (_QWORD *)result;
    v6 = *a2;
    *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * ((2 * v6) | (*((unsigned __int8 *)a2 + 37) >> 2) & 1u)) = *(_DWORD *)(JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::getDisjunctionContext(a3) + 4) - a2[10];
    result = JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::getDisjunctionContext(a3);
    v7 = v5[2];
    *(_DWORD *)(v7 + 4 * (((2 * v6) | 1) - ((*((unsigned __int8 *)a2 + 37) >> 2) & 1u))) = *(_DWORD *)(result + 8)
                                                                                           - a2[10];
    v8 = a2[1];
    if (v8)
      *(_DWORD *)(v7 + 4 * (v8 + *(_DWORD *)(*v5 + 36) - 1)) = v6;
  }
  return result;
}

unint64_t *JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::restoreOutput(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  uint64_t v12;

  if ((*(_DWORD *)(a1 + 16) & 0x7FFFFFFF) != 0)
  {
    v9 = 0;
    do
    {
      *(_DWORD *)(a2 + 4 * (2 * a3 + v9)) = *(_DWORD *)(a1 + 40 + 4 * v9);
      ++v9;
    }
    while (v9 < (2 * *(_DWORD *)(a1 + 16)));
  }
  result = (unint64_t *)WTF::BitVector::begin((uint64_t *)(a1 + 32));
  v11 = result;
  v12 = v6;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 < 0)
    v8 = 63;
  else
    v8 = *(_QWORD *)(2 * v7);
  if (v6 != v8)
  {
    v10 = 0;
    do
    {
      *(_DWORD *)(a2 + 4 * (v6 + *(_DWORD *)(*(_QWORD *)(a1 + 8) + 36) - 1)) = *(_DWORD *)(a1 + 4 * (v10 + 2 * *(_DWORD *)(a1 + 16)) + 40);
      ++v10;
      result = (unint64_t *)WTF::BitVector::iterator::operator++(&v11);
      LODWORD(v6) = v12;
    }
    while (v12 != v8);
  }
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::~YarrGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::~YarrGenerator(a1, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

const char *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::variant(uint64_t a1)
{
  const char *v1;
  const char *v2;

  if (*(_BYTE *)(a1 + 80))
    v1 = "Match-only 16-bit regular expression";
  else
    v1 = "Match-only 8-bit regular expression";
  v2 = "16-bit regular expression";
  if (!*(_BYTE *)(a1 + 80))
    v2 = "8-bit regular expression";
  if (*(_BYTE *)(a1 + 81))
    return v2;
  else
    return v1;
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::opCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::dumpPatternString(uint64_t a1, uint64_t a2)
{
  return JSC::Yarr::YarrPattern::dumpPatternString(*(_QWORD *)(a1 + 56), a2, *(char **)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::dumpFor(uint64_t a1, WTF::PrintStream *this, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  const char *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  const char *v16;
  JSC::Yarr::CharacterClass *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;

  if (*(_DWORD *)(a1 + 316) > a3)
  {
    WTF::PrintStream::printf(this, "%4d:", a3);
    if (*(_DWORD *)(a1 + 316) <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198E7C248);
    }
    v6 = *(_QWORD *)(a1 + 304);
    v7 = v6 + 120 * a3;
    v8 = a3;
    v9 = *(_QWORD *)(v7 + 24);
    switch(*(_BYTE *)(v7 + 32))
    {
      case 0:
        WTF::PrintStream::printf(this, "BodyAlternativeBegin minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 1:
        WTF::PrintStream::printf(this, "BodyAlternativeNext minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 2:
        WTF::PrintStream::printf(this, "BodyAlternativeEnd checked-offset:(%u)\n");
        return 0;
      case 3:
        WTF::PrintStream::printf(this, "NestedAlternativeBegin minimum-size:(%u),checked-offset:(%u)\n");
        return 1;
      case 4:
        WTF::PrintStream::printf(this, "NestedAlternativeNext minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 5:
        WTF::PrintStream::printf(this, "NestedAlternativeEnd checked-offset:(%u) ");
        goto LABEL_25;
      case 6:
        WTF::PrintStream::printf(this, "SimpleNestedAlternativeBegin minimum-size:(%u),checked-offset:(%u)\n");
        return 1;
      case 7:
        WTF::PrintStream::printf(this, "SimpleNestedAlternativeNext minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 8:
        WTF::PrintStream::printf(this, "SimpleNestedAlternativeEnd checked-offset:(%u) ");
LABEL_25:
        JSC::Yarr::PatternTerm::dumpQuantifier(v9, this);
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        WTF::PrintStream::printf(v14, "%s", "\n");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        return 0xFFFFFFFFLL;
      case 9:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternOnceBegin checked-offset:(%u) ");
        goto LABEL_27;
      case 0xA:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternOnceEnd checked-offset:(%u) ");
LABEL_27:
        if ((*(_BYTE *)(v9 + 1) & 1) == 0)
        {
          v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          v16 = "non-capturing ";
          goto LABEL_33;
        }
        WTF::PrintStream::printf(this, "capturing pattern #%u ");
        goto LABEL_35;
      case 0xB:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternTerminalBegin checked-offset:(%u) ");
        goto LABEL_12;
      case 0xC:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternTerminalEnd checked-offset:(%u) ");
LABEL_12:
        if ((*(_BYTE *)(v9 + 1) & 1) != 0)
        {
          WTF::PrintStream::printf(this, "capturing pattern #%u\n");
        }
        else
        {
          v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          v11 = "non-capturing\n";
LABEL_37:
          WTF::PrintStream::printf(v10, "%s", v11);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        }
        break;
      case 0xD:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternBegin checked-offset:(%u) ");
        goto LABEL_31;
      case 0xE:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternEnd checked-offset:(%u) ");
LABEL_31:
        if ((*(_BYTE *)(v9 + 1) & 1) != 0)
        {
          WTF::PrintStream::printf(this, "capturing pattern #%u");
        }
        else
        {
          v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          v16 = "non-capturing";
LABEL_33:
          WTF::PrintStream::printf(v15, "%s", v16);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        }
LABEL_35:
        JSC::Yarr::PatternTerm::dumpQuantifier(v9, this);
LABEL_36:
        v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        v11 = "\n";
        goto LABEL_37;
      case 0xF:
        WTF::PrintStream::printf(this, "ParentheticalAssertionBegin%s checked-offset:(%u)\n");
        return 0;
      case 0x10:
        WTF::PrintStream::printf(this, "ParentheticalAssertionEnd%s checked-offset:(%u)\n");
        return 0;
      case 0x11:
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        WTF::PrintStream::printf(v12, "%s", "Term ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        switch(*(_BYTE *)v9)
        {
          case 0:
            WTF::PrintStream::printf(this, "Assert BOL checked-offset:(%u)");
            break;
          case 1:
            WTF::PrintStream::printf(this, "Assert EOL checked-offset:(%u)");
            break;
          case 2:
            WTF::PrintStream::printf(this, "%sword boundary checked-offset:(%u)");
            break;
          case 3:
            WTF::PrintStream::printf(this, "PatternCharacter checked-offset:(%u) ", *(_DWORD *)(v6 + 120 * v8 + 100));
            if ((*(_DWORD *)(v9 + 16) - 32) > 0xDF)
              WTF::PrintStream::printf(this, "0x%04x");
            else
              WTF::PrintStream::printf(this, "'%c'");
            if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) != 0)
            {
              v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
              WTF::PrintStream::printf(v19, "%s", "ignore case ");
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
            }
            goto LABEL_54;
          case 4:
            WTF::PrintStream::printf(this, "PatternCharacterClass checked-offset:(%u) ", *(_DWORD *)(v6 + 120 * v8 + 100));
            if ((*(_BYTE *)(v9 + 1) & 2) != 0)
            {
              v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
              WTF::PrintStream::printf(v18, "%s", "not ");
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
            }
            JSC::Yarr::dumpCharacterClass(this, *(WTF::PrintStream **)(a1 + 56), *(const void ***)(v9 + 16), v17);
            goto LABEL_54;
          case 5:
            WTF::PrintStream::printf(this, "BackReference pattern #%u checked-offset:(%u)", *(_DWORD *)(v9 + 16), *(_DWORD *)(v6 + 120 * v8 + 100));
LABEL_54:
            JSC::Yarr::PatternTerm::dumpQuantifier(v9, this);
            break;
          case 6:
            WTF::PrintStream::printf(this, "ForwardReference <not handled> checked-offset:(%u)");
            break;
          case 7:
          case 8:
            __break(0xC471u);
            JUMPOUT(0x198E7C240);
          case 9:
            WTF::PrintStream::printf(this, ".* enclosure checked-offset:(%u)");
            break;
          default:
            break;
        }
        if (*(_BYTE *)(v6 + 120 * v8 + 92))
        {
          v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          WTF::PrintStream::printf(v20, "%s", " already handled");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        }
        goto LABEL_36;
      case 0x12:
        WTF::PrintStream::printf(this, "MatchFailed checked-offset:(%u)\n");
        return 0;
      default:
        return 0;
    }
  }
  return 0;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateFailReturn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _DWORD v28[2];
  char v29;
  __int16 v30;
  char v31;
  int v32;

  v9 = *(_DWORD **)(a1 + 8);
  v10 = v9[50];
  if (v10 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v10) = -1837105152;
  v9[50] += 4;
  v11 = *(_DWORD **)(a1 + 8);
  v12 = v11[50];
  if (v12 + 4 > v11[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = v11[50];
  }
  *(_DWORD *)(*((_QWORD *)v11 + 7) + v12) = 1384120321;
  v11[50] += 4;
  if (*(_BYTE *)(a1 + 81) == 2)
  {
    v13 = (_DWORD *)(a1 + 264);
    v14 = *(_QWORD *)(a1 + 8);
    JSC::ARM64Assembler::label((_DWORD *)(v14 + 32), a2, a3, a4, a5, a6, a7, a8, &v32);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v14 + 56), 335544320, v15, v16, v17, v18, v19, v20);
    if (*(_BYTE *)(v14 + 328))
      v27 = 69;
    else
      v27 = 65;
    v28[0] = v32;
    v28[1] = 0;
    v29 = v27;
    v30 = 15;
    v31 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v13, v28, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  uint64_t v18;
  _DWORD *v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  JSC::AssemblerBuffer *v24;
  int v25;
  int v26;
  char v27;
  __int16 v28;
  char v29;

  if (*(_BYTE *)(a1 + 81) == 2)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (JSC::AssemblerBuffer *)(v9 + 56);
    for (i = *(_DWORD *)(v9 + 200); i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v9 + 192))
      {
        v24 = v10;
        JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
        v10 = v24;
        i = *(_DWORD *)(v9 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
      i = *(_DWORD *)(v9 + 200) + 4;
    }
    v12 = i;
    if ((i + 4) > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v12) = 335544320;
    *(_DWORD *)(v9 + 200) += 4;
    if (*(_BYTE *)(v9 + 328))
      v13 = 69;
    else
      v13 = 65;
    v25 = i;
    v26 = 0;
    v27 = v13;
    v28 = 15;
    v29 = -1;
    if (i != -1)
    {
      v14 = *(unsigned int *)(a1 + 236);
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 232))
      {
        v15 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 224, (void *)(v14 + 1), (unint64_t)&v25, a4, a5, a6, a7, a8);
        v17 = *v15;
        v16 = v15 + 1;
        v18 = *(_QWORD *)(a1 + 224) + 12 * *(unsigned int *)(a1 + 236);
        *(_DWORD *)v18 = v17;
      }
      else
      {
        v16 = &v26;
        v18 = *(_QWORD *)(a1 + 224) + 12 * v14;
        *(_DWORD *)v18 = i;
      }
      *(_QWORD *)(v18 + 4) = *(_QWORD *)v16;
      ++*(_DWORD *)(a1 + 236);
    }
  }
  else
  {
    if ((*(_BYTE *)(a1 + 84) & 5) != 0 && BYTE1(qword_1ECF4C780) == 0)
    {
      v20 = *(_DWORD **)(a1 + 8);
      v21 = v20[50];
      if (v21 + 4 > v20[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 14), a2, a3, a4, a5, a6, a7, a8);
        v21 = v20[50];
      }
      *(_DWORD *)(*((_QWORD *)v20 + 7) + v21) = -1463714819;
      v20[50] += 4;
    }
    v22 = *(_DWORD **)(a1 + 8);
    v23 = v22[50];
    if (v23 + 4 > v22[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 14), a2, a3, a4, a5, a6, a7, a8);
      v23 = v22[50];
    }
    *(_DWORD *)(*((_QWORD *)v22 + 7) + v23) = -698416192;
    v22[50] += 4;
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::setMatchStart(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  _DWORD *v9;

  if (a2 == 1)
  {
    JSC::MacroAssemblerARM64::store32((uint64_t)a1, 1, 3, a4, a5, a6, a7, a8);
  }
  else
  {
    v8 = a1[50];
    if (v8 + 4 > a1[48])
    {
      v9 = a1;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      a1 = v9;
      v8 = v9[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v8) = -1442774045;
    a1[50] += 4;
  }
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::initParenContextFreeList(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88[3];
  int v89;
  unsigned int v90[3];

  v8 = result;
  *((_BYTE *)result + 85) = 1;
  v9 = 4 * *((_QWORD *)result + 13) + 8 * (*((_QWORD *)result + 14) + *((_QWORD *)result + 12)) + 31;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) > 0x2000)
  {
    *((_WORD *)result + 41) = 263;
  }
  else
  {
    JSC::MacroAssemblerARM64::load32(*((_QWORD *)result + 1), 0x1800000004, 5, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(*((_QWORD *)v8 + 1), 0x1000000004, 4, v10, v11, v12, v13, v14);
    JSC::MacroAssemblerARM64::branchTest64(*((_QWORD *)v8 + 1), 0, 4, 0xFFFFFFFFLL, v15, v16, v17, v18, (uint64_t)v90, v19);
    JSC::MacroAssemblerARM64::move(*((_DWORD **)v8 + 1), 4, 6, v20, v21, v22, v23, v24);
    v25 = v9 & 0xFFFFFFF8;
    JSC::MacroAssemblerARM64::add64(*((_QWORD *)v8 + 1), v25, 4, 8, v26, v27, v28, v29);
    JSC::MacroAssemblerARM64::add64(*((_DWORD **)v8 + 1), 4, 5, v30, v31, v32, v33, v34);
    JSC::MacroAssemblerARM64::sub64(*((_QWORD *)v8 + 1), 5, v25, 5, v35, v36, v37, v38);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label(&v89, *((_QWORD *)v8 + 1), v39, v40, v41, v42, v43, v44);
    JSC::MacroAssemblerARM64::branch64(*((_QWORD *)v8 + 1), 8, 8, 5, v45, v46, v47, v48, (uint64_t)v88);
    JSC::MacroAssemblerARM64::store64(*((_QWORD *)v8 + 1), 8, 6, v49, v50, v51, v52, v53);
    JSC::MacroAssemblerARM64::move(*((_DWORD **)v8 + 1), 8, 6, v54, v55, v56, v57, v58);
    JSC::MacroAssemblerARM64::add64(*((_QWORD *)v8 + 1), v25, 6, 8, v59, v60, v61, v62);
    v63 = *((_QWORD *)v8 + 1);
    v87 = v89;
    JSC::MacroAssembler::jump(v63, (unsigned int *)&v87, v64, v65, v66, v67, v68, v69);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v88, *((_QWORD *)v8 + 1), v70, v71, v72, v73, v74, v75);
    JSC::MacroAssemblerARM64::store64(*((_QWORD *)v8 + 1), 63, 6, v76, v77, v78, v79, v80);
    return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v90, *((_QWORD *)v8 + 1), v81, v82, v83, v84, v85, v86);
  }
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  JSC::AssemblerBuffer *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  int *v46;
  int *v47;
  int v48;
  _DWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  JSC::AssemblerBuffer *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  JSC::AssemblerBuffer *v103;
  int j;
  unsigned int v105;
  char v106;
  uint64_t v107;
  int *v108;
  int *v109;
  int v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t BestCharacterSequence;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unint64_t v125;
  int v126;
  unsigned int v127;
  unint64_t v128;
  BOOL v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  _QWORD *v135;
  int *v136;
  uint64_t v137;
  int8x16_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  WTF *v142;
  uint64_t v143;
  uint64_t *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int8x8_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  _DWORD *v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  JSC::AssemblerBuffer *v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  char v211;
  uint64_t v212;
  unsigned int *v213;
  uint64_t v214;
  _DWORD *v215;
  _DWORD *v216;
  JSC::AssemblerBuffer *v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  JSC::AssemblerBuffer *v224;
  int i;
  unsigned int v226;
  char v227;
  uint64_t v228;
  _DWORD *v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  _DWORD *v233;
  _QWORD *v234;
  _DWORD *v235;
  int v236;
  _DWORD *v237;
  unsigned int v238;
  unint64_t v239;
  uint64_t v240;
  JSC::AssemblerBuffer *v241;
  unsigned int v242;
  char v243;
  _QWORD *v244;
  int *v245;
  _QWORD *v246;
  _DWORD *v247;
  int v248;
  _DWORD *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _DWORD *v255;
  _DWORD *v256;
  JSC::AssemblerBuffer *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  int v262;
  unint64_t v263;
  _DWORD *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int *v269;
  unsigned int v270;
  uint64_t v271;
  JSC::AssemblerBuffer *v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  _DWORD *v279;
  int v280;
  int v281;
  _DWORD *v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  int v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  unsigned int v300;
  _DWORD *v301;
  uint64_t *v302;
  int v303;
  int *v304;
  int v305;
  int *v306;
  void *v307;
  _DWORD *v308;
  _DWORD *v309;
  void *v310;
  _DWORD *v311;
  _DWORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  JSC::AssemblerBuffer *v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  char v334;
  unint64_t v335;
  uint64_t v336;
  int v337;
  unsigned int v338;
  int *v339;
  int *v340;
  int v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _DWORD *v345;
  uint64_t v346;
  _DWORD *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  JSC::AssemblerBuffer *v382;
  unsigned int v383;
  unsigned int v384;
  int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  char v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  _QWORD *v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _DWORD *v405;
  unsigned int v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _DWORD *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _DWORD *v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int8x8_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int8x8_t v447;
  int v448;
  uint64_t v449;
  _DWORD *v450;
  _QWORD *v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  WTF **v455;
  uint64_t v456;
  unsigned int v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  unsigned int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  _DWORD *v477;
  _QWORD *v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int v482;
  uint64_t v483;
  unsigned int v484;
  uint64_t v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  _DWORD *v502;
  unsigned int v503;
  void *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unsigned int v512;
  uint64_t *v513;
  void *v514;
  uint64_t v515;
  unint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unsigned int v524;
  unsigned int v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  char v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  char v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  unsigned int v630;
  unsigned int v631;
  uint64_t v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  uint64_t v638;
  uint64_t *v639;
  _DWORD v640[2];
  char v641;
  __int16 v642;
  char v643;
  unsigned int v644;
  unsigned int v645;
  _DWORD v646[3];
  _DWORD v647[2];
  char v648;
  __int16 v649;
  char v650;
  unsigned int v651;
  _DWORD v652[3];
  _DWORD v653[3];
  _DWORD v654[2];
  char v655;
  __int16 v656;
  char v657;
  _DWORD v658[2];
  char v659;
  __int16 v660;
  char v661;
  int v662;
  int v663;
  char v664;
  __int16 v665;
  char v666;
  _DWORD v667[2];
  char v668;
  __int16 v669;
  char v670;
  _DWORD v671[2];
  char v672;
  __int16 v673;
  char v674;
  _DWORD v675[2];
  char v676;
  __int16 v677;
  char v678;
  _DWORD v679[2];
  char v680;
  __int16 v681;
  char v682;
  int v683;
  int v684;
  int v685;
  int v686;
  WTF *v687;
  char v688;
  __int16 v689;
  char v690;
  int v691;
  int v692;
  int v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  char v698;
  unsigned int v699;
  __int128 v700;
  unsigned int *v701;
  int v702;
  unsigned int v703;
  _BYTE v704[16];
  int v705;
  unsigned int v706;
  int v707;
  int v708;
  char v709;
  __int16 v710;
  char v711;
  int v712[3];

  v9 = 0;
  v10 = (uint64_t *)(a1 + 8);
  v638 = a1 + 15912;
  v634 = a1 + 15728;
  v639 = (uint64_t *)(a1 + 8);
  while (2)
  {
    v11 = *(_QWORD *)(a1 + 15872);
    if (v11)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)*v10, a2, a3, a4, a5, a6, a7, a8, v712);
      if (*(_DWORD *)(v11 + 28) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E7F784);
      }
      *(_DWORD *)(*(_QWORD *)(v11 + 16) + 4 * v9) = v712[0];
    }
    v12 = *(unsigned int *)(a1 + 316);
    if (v9 >= v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198E7F67CLL);
    }
    v13 = *(_QWORD *)(a1 + 304);
    v14 = (unsigned __int8 *)(v13 + 120 * v9);
    v16 = v14 + 32;
    v15 = v14[32];
    switch(v14[32])
    {
      case 0u:
        v35 = *(_QWORD *)v14;
        a2 = *(unsigned int *)(*(_QWORD *)v14 + 24);
        v36 = v10;
        v37 = *v10;
        if ((_DWORD)a2)
        {
          JSC::MacroAssemblerARM64::add32(v37, a2, 1, 1, a5, a6, a7, a8);
          v37 = *v36;
        }
        v38 = *(_DWORD *)(v37 + 200);
        if (v38 + 4 > *(_DWORD *)(v37 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 56), a2, a3, a4, a5, a6, a7, a8);
          v38 = *(_DWORD *)(v37 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v37 + 56) + v38) = 1795293247;
        v39 = *(_DWORD *)(v37 + 200) + 4;
        *(_DWORD *)(v37 + 200) = v39;
        v635 = v35;
        if (*(_BYTE *)(v37 + 328))
        {
          for (; (signed int)v39 < *(_DWORD *)(v37 + 52); *(_DWORD *)(v37 + 200) = v39)
          {
            if (v39 + 4 > *(_DWORD *)(v37 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 56), a2, a3, a4, a5, a6, a7, a8);
              v39 = *(_DWORD *)(v37 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v37 + 56) + v39) = -721215457;
            v39 = *(_DWORD *)(v37 + 200) + 4;
          }
          *(_DWORD *)(v37 + 208) = 0;
        }
        if (v39 + 4 > *(_DWORD *)(v37 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 56), a2, a3, a4, a5, a6, a7, a8);
          v39 = *(_DWORD *)(v37 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v37 + 56) + v39) = 1409286152;
        v40 = *(_DWORD *)(v37 + 200);
        v41 = v40 + 4;
        *(_DWORD *)(v37 + 200) = v40 + 4;
        v42 = v40 + 8;
        v43 = v40 + 4;
        if (v42 > *(_DWORD *)(v37 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 56), a2, a3, a4, a5, a6, a7, a8);
          v43 = *(_DWORD *)(v37 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v37 + 56) + v43) = -721215457;
        *(_DWORD *)(v37 + 200) += 4;
        if (*(_BYTE *)(v37 + 328))
          v44 = -122;
        else
          v44 = -126;
        v707 = v41;
        v708 = 0;
        v709 = v44;
        v710 = 8;
        v711 = -1;
        v10 = v639;
        if (v41 != -1)
        {
          v45 = *(unsigned int *)(v13 + 120 * v9 + 52);
          if ((_DWORD)v45 == *(_DWORD *)(v13 + 120 * v9 + 48))
          {
            v46 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 120 * v9 + 40, (void *)(v45 + 1), (unint64_t)&v707, a4, a5, a6, a7, a8);
            v48 = *v46;
            v47 = v46 + 1;
            v49 = (_DWORD *)(*(_QWORD *)(v13 + 120 * v9 + 40) + 12 * *(unsigned int *)(v13 + 120 * v9 + 52));
            *v49 = v48;
            v50 = v49 + 1;
          }
          else
          {
            v112 = (_DWORD *)(*(_QWORD *)(v13 + 120 * v9 + 40) + 12 * v45);
            *v112 = v41;
            v50 = v112 + 1;
            v47 = &v708;
          }
          *v50 = *(_QWORD *)v47;
          ++*(_DWORD *)(v13 + 120 * v9 + 52);
        }
        v113 = (_DWORD *)*v639;
        v114 = *(_DWORD *)(*v639 + 200);
        if (v114 < *(_DWORD *)(*v639 + 52))
        {
          do
          {
            if ((v114 + 4) > v113[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v113 + 14), a2, a3, a4, a5, a6, a7, a8);
              v114 = v113[50];
            }
            *(_DWORD *)(*((_QWORD *)v113 + 7) + v114) = -721215457;
            v114 = v113[50] + 4;
            v113[50] = v114;
          }
          while (v114 < v113[13]);
        }
        v113[52] = 0;
        v115 = v13 + 120 * v9;
        *(_DWORD *)(v115 + 36) = v114;
        v116 = *(_QWORD *)(v115 + 112);
        if (!v116)
          goto LABEL_6;
        BestCharacterSequence = JSC::Yarr::BoyerMooreInfo::findBestCharacterSequence((uint64_t *)v116, v638, 4u);
        v119 = v118;
        v120 = JSC::Yarr::BoyerMooreInfo::findBestCharacterSequence((uint64_t *)v116, v638, 8u);
        v121 = v120;
        v123 = v122;
        if ((int)BestCharacterSequence <= (int)v120)
          v124 = v120;
        else
          v124 = BestCharacterSequence;
        v125 = JSC::Yarr::BoyerMooreInfo::findBestCharacterSequence((uint64_t *)v116, v638, 0x10u);
        if (v124 <= (int)v125)
          v126 = v125;
        else
          v126 = v124;
        if (v126 < 0)
        {
          v10 = v639;
          if (BYTE5(qword_1ECF4C6B8))
            WTF::dataLog<char [88],char [2]>("BM search candidates were not efficient enough. Not using BM search", "\n");
          goto LABEL_6;
        }
        if ((_DWORD)BestCharacterSequence == 0x80000000)
          v127 = 0;
        else
          v127 = v119;
        v128 = HIDWORD(BestCharacterSequence);
        if ((_DWORD)BestCharacterSequence == 0x80000000)
          LODWORD(v128) = 0;
        if ((int)BestCharacterSequence < (int)v121)
        {
          v127 = v123;
          LODWORD(v128) = HIDWORD(v121);
        }
        v129 = v124 < (int)v125;
        if (v124 >= (int)v125)
          v130 = v128;
        else
          v130 = HIDWORD(v125);
        if (v129)
          v131 = a2;
        else
          v131 = v127;
        v705 = v130;
        v706 = v131;
        v695 = (unint64_t)&v697;
        v696 = 2;
        v698 = 1;
        v633 = v131;
        v58 = v131 >= v130;
        v132 = v131 - v130;
        v632 = v132;
        if ((_DWORD)v132 == 0 || !v58)
        {
          v313 = 0;
          v314 = 0;
          v315 = 0;
          v700 = 0uLL;
          v701 = (unsigned int *)v704;
          v702 = 2;
LABEL_148:
          v137 = v13 + 120 * v9 + 40;
          memcpy(v704, &v697, 4 * v315);
          v136 = (int *)v704;
          goto LABEL_149;
        }
        v313 = 0;
        v314 = 0;
        v133 = 56 * v130;
        v134 = v132;
        do
        {
          if (v130 >= *(unsigned int *)(v116 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F6C4);
          }
          v135 = (_QWORD *)(*(_QWORD *)v116 + v133);
          v314 |= *v135;
          v313 |= v135[1];
          JSC::Yarr::BoyerMooreFastCandidates::merge(&v695, (const JSC::Yarr::BoyerMooreFastCandidates *)(v135 + 2), a3, a4, a5, a6, a7, a8);
          ++v130;
          v133 += 56;
          --v134;
        }
        while (v134);
        v136 = (int *)v695;
        *(_QWORD *)&v700 = v314;
        *((_QWORD *)&v700 + 1) = v313;
        v701 = (unsigned int *)v704;
        v702 = 2;
        v315 = HIDWORD(v696);
        if ((uint64_t *)v695 == &v697)
          goto LABEL_148;
        v701 = (unsigned int *)v695;
        v702 = v696;
        v137 = v13 + 120 * v9 + 40;
LABEL_149:
        v703 = v315;
        v704[8] = v698;
        v138.i64[0] = __PAIR64__(v314, v313);
        v138.i64[1] = __PAIR64__(HIDWORD(v314), HIDWORD(v313));
        v699 = vaddlvq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v138)));
        v695 = (unint64_t)&v697;
        v696 = 2;
        if (!v699)
        {
          v10 = v639;
          if (v704 == (_BYTE *)v136)
            goto LABEL_6;
LABEL_457:
          if (v136)
          {
            v701 = 0;
            v702 = 0;
            WTF::fastFree((unint64_t)v136, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_6;
        }
        if (v698 && v315)
        {
          if (BYTE5(qword_1ECF4C6B8))
            WTF::dataLog<char [37],JSC::Yarr::BoyerMooreFastCandidates,char [9],unsigned int,char [3],unsigned int,char [2],char [2]>((int **)&v701, &v705, &v706);
          v10 = v639;
          v282 = (_DWORD *)*v639;
          v283 = v633;
          if ((_BYTE)word_1ECF4C286)
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [40],JSC::Yarr::BoyerMooreFastCandidates,char [9],unsigned int,char [3],unsigned int,char [2]>(*v639, (int **)&v701, &v705, &v706);
            v282 = (_DWORD *)*v639;
          }
          v284 = v282[50];
          if (v284 < v282[13])
          {
            do
            {
              if ((v284 + 4) > v282[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v282 + 14), a2, a3, a4, a5, a6, a7, a8);
                v284 = v282[50];
              }
              *(_DWORD *)(*((_QWORD *)v282 + 7) + v284) = -721215457;
              v284 = v282[50] + 4;
              v282[50] = v284;
            }
            while (v284 < v282[13]);
            v283 = v706;
          }
          v282[52] = 0;
          v285 = *(_DWORD *)(v13 + 120 * v9 + 100);
          v286 = v285 - v283;
          if (v285 < v283)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F72CLL);
          }
          if (v286 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F734);
          }
          v287 = v286 + 1;
          v288 = *(unsigned __int8 *)(a1 + 80);
          if (*(_BYTE *)(a1 + 80))
            v289 = 0x3FFFFFFF;
          else
            v289 = 0x7FFFFFFF;
          if (v286 >= v289)
          {
            JSC::MacroAssemblerARM64::move((_DWORD *)*v639, 0, 6, a4, a5, a6, a7, a8);
            do
            {
              JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
              if (*(_BYTE *)(a1 + 80))
                JSC::MacroAssemblerARM64::sub64(*v639, 6, 0x40000000, 6, a5, a6, a7, a8);
              v631 = v287 - 0x40000000;
              if (v287 < 0x40000000)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7F7ACLL);
              }
              v287 -= 0x40000000;
            }
            while (v631 > v289);
            v288 = *(unsigned __int8 *)(a1 + 80);
            v287 = v631;
            v10 = v639;
            v137 = v13 + 120 * v9 + 40;
          }
          if (v288)
          {
            if (v287 >= 1073741825)
            {
              __break(0xC471u);
              JUMPOUT(0x198E7F774);
            }
            v526 = (-2 * v287) | 0x200000000;
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v526, 6, a5, a6, a7, a8);
            else
              JSC::MacroAssemblerARM64::load16(*v10, 0x100000100uLL, v526, 6, a5, a6, a7, a8);
          }
          else
          {
            JSC::MacroAssemblerARM64::load8(*v10, 0x100uLL, -v287 | 0x200000000, 6, a5, a6, a7, a8);
          }
          if (!v703)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F73CLL);
          }
          JSC::MacroAssemblerARM64::branch32(*v10, 0, 6, *v701, v290, v291, v292, v293, (uint64_t)&v693);
          v299 = v693;
          if (v693 != -1)
          {
            v300 = HIDWORD(v696);
            if (HIDWORD(v696) == (_DWORD)v696)
            {
              v301 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v695, (void *)(HIDWORD(v696) + 1), (unint64_t)&v693, v294, v295, v296, v297, v298);
              v303 = *v301;
              v302 = (uint64_t *)(v301 + 1);
              v299 = v303;
              v300 = HIDWORD(v696);
            }
            else
            {
              v302 = &v694;
            }
            v335 = v695 + 12 * v300;
            *(_DWORD *)v335 = v299;
            *(_QWORD *)(v335 + 4) = *v302;
            ++HIDWORD(v696);
          }
          if (v703 >= 2)
          {
            JSC::MacroAssemblerARM64::branch32(*v10, 0, 6, v701[1], v295, v296, v297, v298, (uint64_t)&v691);
            v337 = v691;
            if (v691 != -1)
            {
              v338 = HIDWORD(v696);
              if (HIDWORD(v696) == (_DWORD)v696)
              {
                v339 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v695, (void *)(HIDWORD(v696) + 1), (unint64_t)&v691, v336, v295, v296, v297, v298);
                v341 = *v339;
                v340 = v339 + 1;
                v337 = v341;
                v338 = HIDWORD(v696);
              }
              else
              {
                v340 = &v692;
              }
              v378 = v695 + 12 * v338;
              *(_DWORD *)v378 = v337;
              *(_QWORD *)(v378 + 4) = *(_QWORD *)v340;
              ++HIDWORD(v696);
            }
          }
          JSC::MacroAssemblerARM64::add32(*v10, v283 - v705, 1, 1, v295, v296, v297, v298);
          v381 = *v10;
          v382 = (JSC::AssemblerBuffer *)(*v10 + 56);
          v383 = *(_DWORD *)(*v10 + 200);
          if (v383 + 4 > *(_DWORD *)(*v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*v10 + 56), v379, v380, v198, v199, v200, v201, v202);
            v383 = *(_DWORD *)(v381 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v381 + 56) + v383) = 1795293247;
          v384 = *(_DWORD *)(v381 + 200) + 4;
          *(_DWORD *)(v381 + 200) = v384;
          if (*(_BYTE *)(v381 + 328))
          {
            for (; (signed int)v384 < *(_DWORD *)(v381 + 52); v137 = v13 + 120 * v9 + 40)
            {
              if (v384 + 4 > *(_DWORD *)(v381 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v382, v379, v380, v198, v199, v200, v201, v202);
                v384 = *(_DWORD *)(v381 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v381 + 56) + v384) = -721215457;
              v384 = *(_DWORD *)(v381 + 200) + 4;
              *(_DWORD *)(v381 + 200) = v384;
              v10 = v639;
            }
            *(_DWORD *)(v381 + 208) = 0;
          }
          if (v384 + 4 > *(_DWORD *)(v381 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v382, v379, v380, v198, v199, v200, v201, v202);
            v384 = *(_DWORD *)(v381 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v381 + 56) + v384) = 1409286153;
          v385 = *(_DWORD *)(v381 + 200);
          v386 = v385 + 4;
          *(_DWORD *)(v381 + 200) = v385 + 4;
          v387 = v385 + 8;
          v388 = v385 + 4;
          if (v387 > *(_DWORD *)(v381 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v382, v379, v380, v198, v199, v200, v201, v202);
            v388 = *(_DWORD *)(v381 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v381 + 56) + v388) = -721215457;
          *(_DWORD *)(v381 + 200) += 4;
          if (*(_BYTE *)(v381 + 328))
            v389 = -122;
          else
            v389 = -126;
          v687 = (WTF *)v386;
          v688 = v389;
          v689 = 9;
          v690 = -1;
          v686 = v284;
          v212 = *v10;
          v213 = (unsigned int *)&v686;
        }
        else
        {
          v139 = *(_QWORD *)(a1 + 32);
          v140 = *(unsigned int *)(v139 + 12);
          if ((_DWORD)v140)
          {
            v455 = *(WTF ***)v139;
            v456 = 8 * v140;
            while (1)
            {
              v142 = *v455;
              if (*(_QWORD *)*v455 == v314 && *((_QWORD *)v142 + 1) == v313)
                break;
              ++v455;
              v456 -= 8;
              if (!v456)
                goto LABEL_153;
            }
          }
          else
          {
LABEL_153:
            v141 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            v142 = v141;
            *(_OWORD *)v141 = v700;
            v687 = v141;
            v143 = *(unsigned int *)(a1 + 15740);
            if ((_DWORD)v143 == *(_DWORD *)(a1 + 15736))
            {
              v144 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v634, v143 + 1, (unint64_t)&v687);
              v147 = *(unsigned int *)(a1 + 15740);
              v148 = *(_QWORD *)(a1 + 15728);
              v149 = *v144;
              *v144 = 0;
              *(_QWORD *)(v148 + 8 * v147) = v149;
              v150 = v687;
              *(_DWORD *)(a1 + 15740) = v147 + 1;
              v687 = 0;
              if (v150)
                WTF::fastFree((unint64_t)v150, v145, v146, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 15728) + 8 * v143) = v141;
              *(_DWORD *)(a1 + 15740) = v143 + 1;
            }
          }
          if (BYTE5(qword_1ECF4C6B8))
            WTF::dataLog<char [31],unsigned int,char [10],unsigned int,char [3],unsigned int,char [2],char [2]>(&v699, &v705, &v706);
          v10 = v639;
          if ((_BYTE)word_1ECF4C286)
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [34],unsigned int,char [10],unsigned int,char [3],unsigned int,char [2]>(*v639, &v699, &v705, &v706);
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)*v639, (uint64_t)v142, 7, a4, a5, a6, a7, a8);
          v158 = (_DWORD *)*v639;
          v159 = *(_DWORD *)(*v639 + 200);
          if (v159 < *(_DWORD *)(*v639 + 52))
          {
            do
            {
              if ((v159 + 4) > v158[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v158 + 14), v151, v152, v153, v154, v155, v156, v157);
                v159 = v158[50];
              }
              *(_DWORD *)(*((_QWORD *)v158 + 7) + v159) = -721215457;
              v159 = v158[50] + 4;
              v158[50] = v159;
            }
            while (v159 < v158[13]);
          }
          v158[52] = 0;
          v160 = *(_DWORD *)(v13 + 120 * v9 + 100);
          v161 = v160 - v633;
          if (v160 < v633)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F704);
          }
          if (v161 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F70CLL);
          }
          v162 = v161 + 1;
          v163 = *(unsigned __int8 *)(a1 + 80);
          if (*(_BYTE *)(a1 + 80))
            v164 = 0x3FFFFFFF;
          else
            v164 = 0x7FFFFFFF;
          if (v161 >= v164)
          {
            JSC::MacroAssemblerARM64::move((_DWORD *)*v639, 0, 6, v153, v154, v155, v156, v157);
            do
            {
              JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, v154, v155, v156, v157);
              if (*(_BYTE *)(a1 + 80))
                JSC::MacroAssemblerARM64::sub64(*v639, 6, 0x40000000, 6, v154, v155, v156, v157);
              v630 = v162 - 0x40000000;
              if (v162 < 0x40000000)
              {
                __break(0xC471u);
                JUMPOUT(0x198E7F7A4);
              }
              v162 -= 0x40000000;
            }
            while (v630 > v164);
            v163 = *(unsigned __int8 *)(a1 + 80);
            v162 = v630;
            v137 = v13 + 120 * v9 + 40;
          }
          if (v163)
          {
            if (v162 >= 1073741825)
            {
              __break(0xC471u);
              JUMPOUT(0x198E7F75CLL);
            }
            v454 = (-2 * v162) | 0x200000000;
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v454, 6, v154, v155, v156, v157);
            else
              JSC::MacroAssemblerARM64::load16(*v639, 0x100000100uLL, v454, 6, v154, v155, v156, v157);
          }
          else
          {
            JSC::MacroAssemblerARM64::load8(*v639, 0x100uLL, -v162 | 0x200000000, 6, v154, v155, v156, v157);
          }
          v172 = *v639;
          v173 = *(_DWORD *)(*v639 + 200);
          if (v173 + 4 > *(_DWORD *)(*v639 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v172 + 56), v165, v166, v167, v168, v169, v170, v171);
            v173 = *(_DWORD *)(v172 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v172 + 56) + v173) = 1392908488;
          *(_DWORD *)(v172 + 200) += 4;
          JSC::MacroAssemblerARM64::load64(*v639, 0x300000807uLL, 0x200000000uLL, 8, v168, v169, v170, v171);
          v182 = *v639;
          v183 = *(_DWORD *)(*v639 + 200);
          if (v183 + 4 > *(_DWORD *)(*v639 + 192))
          {
            v181 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v182 + 56), v174, v175, v176, v177, v178, v179, v180).n128_u64[0];
            v183 = *(_DWORD *)(v182 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v182 + 56) + v183) = -1698290424;
          *(_DWORD *)(v182 + 200) += 4;
          JSC::MacroAssemblerARM64::branchTest64(*v639, 1, 8, 1, v177, v178, v179, v180, (uint64_t)&v684, v181);
          v189 = v684;
          if (v684 != -1)
          {
            v190 = HIDWORD(v696);
            if (HIDWORD(v696) == (_DWORD)v696)
            {
              v304 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v695, (void *)(HIDWORD(v696) + 1), (unint64_t)&v684, v184, v185, v186, v187, v188);
              v305 = *v304;
              v306 = v304 + 1;
              v189 = v305;
              v190 = HIDWORD(v696);
            }
            else
            {
              v306 = &v685;
            }
            v195 = v695 + 12 * v190;
            *(_DWORD *)v195 = v189;
            *(_QWORD *)(v195 + 4) = *(_QWORD *)v306;
            ++HIDWORD(v696);
          }
          JSC::MacroAssemblerARM64::add32(*v639, v632, 1, 1, v185, v186, v187, v188);
          v203 = *v639;
          v204 = (JSC::AssemblerBuffer *)(*v639 + 56);
          v205 = *(_DWORD *)(*v639 + 200);
          if (v205 + 4 > *(_DWORD *)(*v639 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*v639 + 56), v196, v197, v198, v199, v200, v201, v202);
            v205 = *(_DWORD *)(v203 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v203 + 56) + v205) = 1795293247;
          v206 = *(_DWORD *)(v203 + 200) + 4;
          *(_DWORD *)(v203 + 200) = v206;
          if (*(_BYTE *)(v203 + 328))
          {
            for (; (signed int)v206 < *(_DWORD *)(v203 + 52); v137 = v13 + 120 * v9 + 40)
            {
              if (v206 + 4 > *(_DWORD *)(v203 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v204, v196, v197, v198, v199, v200, v201, v202);
                v206 = *(_DWORD *)(v203 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v203 + 56) + v206) = -721215457;
              v206 = *(_DWORD *)(v203 + 200) + 4;
              *(_DWORD *)(v203 + 200) = v206;
              v10 = v639;
            }
            *(_DWORD *)(v203 + 208) = 0;
          }
          if (v206 + 4 > *(_DWORD *)(v203 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v204, v196, v197, v198, v199, v200, v201, v202);
            v206 = *(_DWORD *)(v203 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v203 + 56) + v206) = 1409286153;
          v207 = *(_DWORD *)(v203 + 200);
          v208 = v207 + 4;
          *(_DWORD *)(v203 + 200) = v207 + 4;
          v209 = v207 + 8;
          v210 = v207 + 4;
          if (v209 > *(_DWORD *)(v203 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v204, v196, v197, v198, v199, v200, v201, v202);
            v210 = *(_DWORD *)(v203 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v203 + 56) + v210) = -721215457;
          *(_DWORD *)(v203 + 200) += 4;
          if (*(_BYTE *)(v203 + 328))
            v211 = -122;
          else
            v211 = -126;
          v687 = (WTF *)v208;
          v688 = v211;
          v689 = 9;
          v690 = -1;
          v683 = v159;
          v212 = *v10;
          v213 = (unsigned int *)&v683;
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v687, v213, v212, v198, v199, v200, v201, v202);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 32))
        {
          v240 = *v10;
          v241 = (JSC::AssemblerBuffer *)(*v10 + 56);
          for (i = *(_DWORD *)(*v10 + 200); i < *(_DWORD *)(v240 + 52); *(_DWORD *)(v240 + 200) = i)
          {
            if ((i + 4) > *(_DWORD *)(v240 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v241, a2, a3, a4, a5, a6, a7, a8);
              i = *(_DWORD *)(v240 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v240 + 56) + i) = -721215457;
            i = *(_DWORD *)(v240 + 200) + 4;
          }
          v242 = i;
          if ((i + 4) > *(_DWORD *)(v240 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v241, a2, a3, a4, a5, a6, a7, a8);
            v242 = *(_DWORD *)(v240 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v240 + 56) + v242) = 335544320;
          *(_DWORD *)(v240 + 200) += 4;
          if (*(_BYTE *)(v240 + 328))
            v243 = 69;
          else
            v243 = 65;
          v675[0] = i;
          v675[1] = 0;
          v676 = v243;
          v677 = 15;
          v678 = -1;
          if (i != -1)
          {
            v229 = (_DWORD *)(v137 + 12);
            v228 = *(unsigned int *)(v137 + 12);
            if ((_DWORD)v228 != *(_DWORD *)(v137 + 8))
            {
              v312 = v675;
              goto LABEL_233;
            }
            v310 = (void *)(v228 + 1);
            v311 = v675;
LABEL_234:
            v247 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v137, v310, (unint64_t)v311, a4, a5, a6, a7, a8);
            v248 = *v247;
            v244 = v247 + 1;
            v249 = (_DWORD *)(*(_QWORD *)v137 + 12 * *(unsigned int *)(v137 + 12));
            *v249 = v248;
            v246 = v249 + 1;
            goto LABEL_235;
          }
        }
        else
        {
          v214 = *(unsigned int *)(v635 + 24);
          v215 = (_DWORD *)*v10;
          if ((_DWORD)v214)
          {
            JSC::MacroAssemblerARM64::sub32((uint64_t)v215, 1, v214, 6, a5, a6, a7, a8);
            v216 = *(_DWORD **)(a1 + 8);
            v217 = (JSC::AssemblerBuffer *)(v216 + 14);
            v218 = v216[50];
            v219 = v218 + 4;
            v220 = v216[48];
            if (*(_BYTE *)(a1 + 81) == 1)
            {
              if (v219 > v220)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v217, a2, a3, a4, a5, a6, a7, a8);
                v218 = v216[50];
              }
              v221 = *((_QWORD *)v216 + 7);
              v222 = -1207959450;
            }
            else
            {
              if (v219 > v220)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v217, a2, a3, a4, a5, a6, a7, a8);
                v218 = v216[50];
              }
              v221 = *((_QWORD *)v216 + 7);
              v222 = -1442446365;
            }
            *(_DWORD *)(v221 + v218) = v222;
            v216[50] += 4;
          }
          else
          {
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::setMatchStart(v215, *(unsigned __int8 *)(a1 + 81), v214, a4, a5, a6, a7, a8);
          }
          v223 = *v10;
          v224 = (JSC::AssemblerBuffer *)(*v10 + 56);
          for (i = *(_DWORD *)(*v10 + 200); i < *(_DWORD *)(v223 + 52); *(_DWORD *)(v223 + 200) = i)
          {
            if ((i + 4) > *(_DWORD *)(v223 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v224, a2, a3, a4, a5, a6, a7, a8);
              i = *(_DWORD *)(v223 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v223 + 56) + i) = -721215457;
            i = *(_DWORD *)(v223 + 200) + 4;
          }
          v226 = i;
          if ((i + 4) > *(_DWORD *)(v223 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v224, a2, a3, a4, a5, a6, a7, a8);
            v226 = *(_DWORD *)(v223 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v223 + 56) + v226) = 335544320;
          *(_DWORD *)(v223 + 200) += 4;
          if (*(_BYTE *)(v223 + 328))
            v227 = 69;
          else
            v227 = 65;
          v679[0] = i;
          v679[1] = 0;
          v680 = v227;
          v681 = 15;
          v682 = -1;
          if (i != -1)
          {
            v229 = (_DWORD *)(v137 + 12);
            v228 = *(unsigned int *)(v137 + 12);
            if ((_DWORD)v228 != *(_DWORD *)(v137 + 8))
            {
              v312 = v679;
LABEL_233:
              v244 = v312 + 1;
              v245 = (int *)(*(_QWORD *)v137 + 12 * v228);
              *v245 = i;
              v246 = v245 + 1;
LABEL_235:
              *v246 = *v244;
              ++*v229;
              goto LABEL_236;
            }
            v310 = (void *)(v228 + 1);
            v311 = v679;
            goto LABEL_234;
          }
        }
LABEL_236:
        if (HIDWORD(v696))
        {
          v250 = 0;
          v251 = 0;
          v252 = *v10;
          v253 = 12 * HIDWORD(v696);
          do
          {
            if (v251 >= HIDWORD(v696))
            {
              __break(0xC471u);
              JUMPOUT(0x198E7F6ACLL);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v695 + v250), v252, a3, a4, a5, a6, a7, a8);
            ++v251;
            v250 += 12;
          }
          while (v253 != v250);
        }
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 32))
        {
          v254 = *(unsigned int *)(v635 + 24);
          v255 = (_DWORD *)*v10;
          if ((_DWORD)v254)
          {
            JSC::MacroAssemblerARM64::sub32((uint64_t)v255, 1, v254, 6, a5, a6, a7, a8);
            v256 = *(_DWORD **)(a1 + 8);
            v257 = (JSC::AssemblerBuffer *)(v256 + 14);
            v258 = v256[50];
            v259 = v258 + 4;
            v260 = v256[48];
            if (*(_BYTE *)(a1 + 81) == 1)
            {
              if (v259 > v260)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v257, a2, a3, a4, a5, a6, a7, a8);
                v258 = v256[50];
              }
              v261 = *((_QWORD *)v256 + 7);
              v262 = -1207959450;
            }
            else
            {
              if (v259 > v260)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v257, a2, a3, a4, a5, a6, a7, a8);
                v258 = v256[50];
              }
              v261 = *((_QWORD *)v256 + 7);
              v262 = -1442446365;
            }
            *(_DWORD *)(v261 + v258) = v262;
            v256[50] += 4;
          }
          else
          {
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::setMatchStart(v255, *(unsigned __int8 *)(a1 + 81), v254, a4, a5, a6, a7, a8);
          }
        }
        v263 = v695;
        if (&v697 != (uint64_t *)v695 && v695)
        {
          v695 = 0;
          LODWORD(v696) = 0;
          WTF::fastFree(v263, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v136 = (int *)v701;
        if (v704 != (_BYTE *)v701)
          goto LABEL_457;
LABEL_6:
        if (++v9 < *(unsigned int *)(a1 + 316))
          continue;
        return;
      case 1u:
      case 2u:
        v17 = *(_QWORD *)(v13 + 120 * v9 + 8);
        if (v17 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E7F6CCLL);
        }
        v18 = *(unsigned int **)(v13 + 120 * v17);
        v19 = *(_QWORD *)v14;
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
        v21 = *(_DWORD *)(v20 + 28);
        if (v21)
        {
          if (v21 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F6D4);
          }
          v22 = 8 * v21 + 63;
          a2 = v22 & 0xFFFFFFC0;
          if ((v22 & 0xFFFFFFC0) != 0)
          {
            JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), a2, 31, 31, a5, a6, a7, a8);
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
          }
        }
        if (*(_BYTE *)(v20 + 32))
        {
          v94 = v18[6];
          v95 = (_DWORD *)*v10;
          if ((_DWORD)v94)
            JSC::MacroAssemblerARM64::sub32((uint64_t)v95, 1, v94, 0, a5, a6, a7, a8);
          else
            JSC::MacroAssemblerARM64::move(v95, 1, v94, a4, a5, a6, a7, a8);
          if (*(_BYTE *)(a1 + 81) != 1)
            goto LABEL_24;
          v27 = (unsigned int *)(*v10 + 200);
          v26 = *v27;
          v28 = (JSC::AssemblerBuffer *)(*v10 + 56);
          v29 = *v27 + 4;
          v30 = *(v27 - 2);
          v31 = 687866976;
          goto LABEL_21;
        }
        v23 = *(_DWORD **)(a1 + 8);
        v24 = v23[50];
        if (*(_BYTE *)(a1 + 81) == 1)
          v25 = -1203765152;
        else
          v25 = -1442642976;
        if (v24 + 4 > v23[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v23 + 14), a2, a3, a4, a5, a6, a7, a8);
          v24 = v23[50];
        }
        *(_DWORD *)(*((_QWORD *)v23 + 7) + v24) = v25;
        v23[50] += 4;
        if (*(_BYTE *)(a1 + 81) == 1)
        {
          v27 = (unsigned int *)(*v10 + 200);
          v26 = *v27;
          v28 = (JSC::AssemblerBuffer *)(*v10 + 56);
          v29 = *v27 + 4;
          v30 = *(v27 - 2);
          v31 = -1207943071;
LABEL_21:
          if (v29 > v30)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v28, a2, a3, a4, a5, a6, a7, a8);
            v26 = *v27;
          }
          *(_DWORD *)(*(_QWORD *)v28 + v26) = v31;
          *v27 += 4;
          v10 = v639;
        }
LABEL_24:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn(a1, a2, a3, a4, a5, a6, a7, a8);
        if (*v16 == 1)
        {
          v191 = (_DWORD *)*v10;
          v192 = *(_DWORD *)(*v10 + 200);
          if (v192 < *(_DWORD *)(*v10 + 52))
          {
            do
            {
              if ((v192 + 4) > v191[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v191 + 14), a2, a3, a4, a5, a6, a7, a8);
                v192 = v191[50];
              }
              *(_DWORD *)(*((_QWORD *)v191 + 7) + v192) = -721215457;
              v192 = v191[50] + 4;
              v191[50] = v192;
            }
            while (v192 < v191[13]);
          }
          v191[52] = 0;
          *(_DWORD *)(v13 + 120 * v9 + 36) = v192;
          if (*(_BYTE *)(a1 + 81) == 1)
          {
            v316 = v18[8];
            if (v316)
            {
              v317 = v18[7] <= 1 ? 1 : v18[7];
              if (v317 <= v316)
              {
                v318 = 8 * v317;
                do
                {
                  v319 = *v639;
                  if (!*(_BYTE *)(*v639 + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E7F41CLL);
                  }
                  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)*v639, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v319 + 264, a4, a5, a6, a7, a8);
                  JSC::MacroAssemblerARM64::store32(v319, 16, (v318 << 32) | 3, v320, v321, v322, v323, v324);
                  ++v317;
                  v318 = (v318 + 8);
                }
                while (v317 <= v18[8]);
              }
            }
          }
          v193 = *(_DWORD *)(v19 + 24);
          v194 = v18[6];
          a2 = v193 - v194;
          if (v193 > v194)
          {
            JSC::MacroAssemblerARM64::add32(*v639, a2, 1, 1, a5, a6, a7, a8);
            v327 = *v639;
            v328 = (JSC::AssemblerBuffer *)(*v639 + 56);
            v329 = *(_DWORD *)(*v639 + 200);
            if (v329 + 4 > *(_DWORD *)(*v639 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*v639 + 56), a2, a3, a4, a5, a6, a7, a8);
              v329 = *(_DWORD *)(v327 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v327 + 56) + v329) = 1795293247;
            v330 = *(_DWORD *)(v327 + 200) + 4;
            *(_DWORD *)(v327 + 200) = v330;
            if (*(_BYTE *)(v327 + 328))
            {
              for (; (signed int)v330 < *(_DWORD *)(v327 + 52); *(_DWORD *)(v327 + 200) = v330)
              {
                if (v330 + 4 > *(_DWORD *)(v327 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v328, a2, a3, a4, a5, a6, a7, a8);
                  v330 = *(_DWORD *)(v327 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v327 + 56) + v330) = -721215457;
                v330 = *(_DWORD *)(v327 + 200) + 4;
              }
              *(_DWORD *)(v327 + 208) = 0;
            }
            if (v330 + 4 > *(_DWORD *)(v327 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v328, a2, a3, a4, a5, a6, a7, a8);
              v330 = *(_DWORD *)(v327 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v327 + 56) + v330) = 1409286152;
            v331 = *(_DWORD *)(v327 + 200);
            v64 = v331 + 4;
            *(_DWORD *)(v327 + 200) = v331 + 4;
            v332 = v331 + 8;
            v333 = v331 + 4;
            if (v332 > *(_DWORD *)(v327 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v328, a2, a3, a4, a5, a6, a7, a8);
              v333 = *(_DWORD *)(v327 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v327 + 56) + v333) = -721215457;
            *(_DWORD *)(v327 + 200) += 4;
            if (*(_BYTE *)(v327 + 328))
              v334 = -122;
            else
              v334 = -126;
            v671[0] = v64;
            v671[1] = 0;
            v672 = v334;
            v673 = 8;
            v674 = -1;
            v10 = v639;
            if (v64 != -1)
            {
              v68 = v13 + 120 * v9 + 40;
              v69 = *(unsigned int *)(v13 + 120 * v9 + 52);
              if ((_DWORD)v69 == *(_DWORD *)(v13 + 120 * v9 + 48))
              {
                v307 = (void *)(v69 + 1);
                v308 = v671;
                goto LABEL_215;
              }
              v309 = v671;
              goto LABEL_214;
            }
          }
          else
          {
            a3 = v194 - v193;
            v10 = v639;
            if (v194 > v193)
              goto LABEL_362;
          }
        }
        else if (*(_QWORD *)(v13 + 120 * v9 + 16) == -1)
        {
          v32 = (_DWORD *)*v10;
          v33 = *(_DWORD *)(*v10 + 200);
          if (v33 < *(_DWORD *)(*v10 + 52))
          {
            do
            {
              if ((v33 + 4) > v32[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v32 + 14), a2, a3, a4, a5, a6, a7, a8);
                v33 = v32[50];
              }
              *(_DWORD *)(*((_QWORD *)v32 + 7) + v33) = -721215457;
              v33 = v32[50] + 4;
              v32[50] = v33;
            }
            while (v33 < v32[13]);
            v34 = *v10;
          }
          else
          {
            v34 = *v10;
          }
          v32[52] = 0;
          *(_DWORD *)(v13 + 120 * v9 + 36) = v33;
          a3 = v18[6];
          goto LABEL_29;
        }
        goto LABEL_6;
      case 3u:
      case 6u:
        v51 = v13 + 120 * v9;
        v52 = *(_QWORD *)(v51 + 24);
        v53 = *(_QWORD *)v14;
        v54 = *(_QWORD *)(v52 + 16);
        v55 = *(_DWORD *)(v53 + 24);
        *(_DWORD *)(v51 + 96) = v55;
        v56 = (unsigned int *)(v51 + 96);
        if (!*(_BYTE *)(v52 + 2) && *(_BYTE *)v52 != 8)
        {
          v57 = *(_DWORD *)(v54 + 24);
          v58 = v55 >= v57;
          v55 -= v57;
          if (!v58)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F6DCLL);
          }
          *v56 = v55;
        }
        if (v55)
        {
          JSC::MacroAssemblerARM64::add32(*v10, v55, 1, 1, a5, a6, a7, a8);
          v59 = *v10;
          v60 = (JSC::AssemblerBuffer *)(*v10 + 56);
          v61 = *(_DWORD *)(v59 + 200);
          if (v61 + 4 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v60, a2, a3, a4, a5, a6, a7, a8);
            v61 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v61) = 1795293247;
          v62 = *(_DWORD *)(v59 + 200) + 4;
          *(_DWORD *)(v59 + 200) = v62;
          if (*(_BYTE *)(v59 + 328))
          {
            while ((signed int)v62 < *(_DWORD *)(v59 + 52))
            {
              if (v62 + 4 > *(_DWORD *)(v59 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v60, a2, a3, a4, a5, a6, a7, a8);
                v62 = *(_DWORD *)(v59 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v59 + 56) + v62) = -721215457;
              v62 = *(_DWORD *)(v59 + 200) + 4;
              *(_DWORD *)(v59 + 200) = v62;
            }
            *(_DWORD *)(v59 + 208) = 0;
          }
          if (v62 + 4 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v60, a2, a3, a4, a5, a6, a7, a8);
            v62 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v62) = 1409286152;
          v63 = *(_DWORD *)(v59 + 200);
          v64 = v63 + 4;
          *(_DWORD *)(v59 + 200) = v63 + 4;
          v65 = v63 + 8;
          v66 = v63 + 4;
          if (v65 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v60, a2, a3, a4, a5, a6, a7, a8);
            v66 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v66) = -721215457;
          *(_DWORD *)(v59 + 200) += 4;
          v67 = *(_BYTE *)(v59 + 328) ? -122 : -126;
          v667[0] = v64;
          v667[1] = 0;
          v668 = v67;
          v669 = 8;
          v670 = -1;
          v10 = v639;
          if (v64 != -1)
          {
            v68 = v13 + 120 * v9 + 40;
            v69 = *(unsigned int *)(v13 + 120 * v9 + 52);
            if ((_DWORD)v69 != *(_DWORD *)(v13 + 120 * v9 + 48))
            {
              v309 = v667;
              goto LABEL_214;
            }
            v307 = (void *)(v69 + 1);
            v308 = v667;
            goto LABEL_215;
          }
        }
        goto LABEL_6;
      case 4u:
      case 7u:
        v96 = *(_QWORD *)(v13 + 120 * v9 + 24);
        v97 = *(_QWORD *)v14;
        v98 = *(_QWORD *)(v96 + 16);
        if (v15 == 4)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrameWithPatch((unsigned int *)&v700, *(_QWORD *)(a1 + 8), (*(_DWORD *)(v96 + 44) + 1), a4, a5, a6, a7, a8);
          *(_DWORD *)(v13 + 120 * v9 + 104) = v700;
          v12 = *(unsigned int *)(a1 + 316);
        }
        if (*(_BYTE *)(v96 + 2))
        {
          v376 = *(_QWORD *)(v13 + 120 * v9 + 8);
          if (v376 >= v12)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F74CLL);
          }
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 120 * v376) + 24))
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, ((unint64_t)*(unsigned int *)(v96 + 44) << 35) | 0x1F, a5, a6, a7, a8, (uint64_t)&v700);
            v377 = v13 + 120 * v9;
            *(_DWORD *)(v377 + 80) = v700;
            *(_QWORD *)(v377 + 84) = *(_QWORD *)((char *)&v700 + 4);
            v12 = *(unsigned int *)(a1 + 316);
          }
        }
        v99 = *(_QWORD *)(v13 + 120 * v9 + 16);
        if (v99 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E7F6F4);
        }
        v100 = *(_QWORD *)(a1 + 304);
        while (1)
        {
          v101 = *(_QWORD *)(v100 + 120 * v99 + 16);
          if (v101 == -1)
            break;
          v99 = *(_QWORD *)(v100 + 120 * v99 + 16);
          if (v101 >= v12)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F6FCLL);
          }
        }
        v636 = v97;
        v102 = *v10;
        v103 = (JSC::AssemblerBuffer *)(*v10 + 56);
        for (j = *(_DWORD *)(v102 + 200); j < *(_DWORD *)(v102 + 52); *(_DWORD *)(v102 + 200) = j)
        {
          if ((j + 4) > *(_DWORD *)(v102 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v103, a2, a3, a4, a5, a6, a7, a8);
            j = *(_DWORD *)(v102 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v102 + 56) + j) = -721215457;
          j = *(_DWORD *)(v102 + 200) + 4;
        }
        v105 = j;
        if ((j + 4) > *(_DWORD *)(v102 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v103, a2, a3, a4, a5, a6, a7, a8);
          v105 = *(_DWORD *)(v102 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v102 + 56) + v105) = 335544320;
        *(_DWORD *)(v102 + 200) += 4;
        if (*(_BYTE *)(v102 + 328))
          v106 = 69;
        else
          v106 = 65;
        v662 = j;
        v663 = 0;
        v664 = v106;
        v665 = 15;
        v666 = -1;
        if (j != -1)
        {
          v107 = *(unsigned int *)(v100 + 120 * v99 + 52);
          if ((_DWORD)v107 == *(_DWORD *)(v100 + 120 * v99 + 48))
          {
            v108 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v100 + 120 * v99 + 40, (void *)(v107 + 1), (unint64_t)&v662, a4, a5, a6, a7, a8);
            v110 = *v108;
            v109 = v108 + 1;
            v111 = *(_QWORD *)(v100 + 120 * v99 + 40) + 12 * *(unsigned int *)(v100 + 120 * v99 + 52);
            *(_DWORD *)v111 = v110;
          }
          else
          {
            v109 = &v663;
            v111 = *(_QWORD *)(v100 + 120 * v99 + 40) + 12 * v107;
            *(_DWORD *)v111 = j;
          }
          *(_QWORD *)(v111 + 4) = *(_QWORD *)v109;
          ++*(_DWORD *)(v100 + 120 * v99 + 52);
        }
        v10 = v639;
        v264 = (_DWORD *)*v639;
        v265 = *(_DWORD *)(*v639 + 200);
        if (v265 < *(_DWORD *)(*v639 + 52))
        {
          v266 = v636;
          do
          {
            if ((v265 + 4) > v264[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v264 + 14), a2, a3, a4, a5, a6, a7, a8);
              v265 = v264[50];
            }
            *(_DWORD *)(*((_QWORD *)v264 + 7) + v265) = -721215457;
            v265 = v264[50] + 4;
            v264[50] = v265;
          }
          while (v265 < v264[13]);
        }
        else
        {
          v266 = v636;
        }
        v264[52] = 0;
        v267 = v13 + 120 * v9;
        v268 = *(_DWORD *)(v266 + 24);
        *(_DWORD *)(v267 + 96) = v268;
        v269 = (unsigned int *)(v267 + 96);
        *(v269 - 15) = v265;
        if (!*(_BYTE *)(v96 + 2) && *(_BYTE *)v96 != 8)
        {
          v270 = *(_DWORD *)(v98 + 24);
          v58 = v268 >= v270;
          v268 -= v270;
          if (!v58)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F71CLL);
          }
          *v269 = v268;
        }
        if (v268)
        {
          JSC::MacroAssemblerARM64::add32(*v639, v268, 1, 1, a5, a6, a7, a8);
          v271 = *v639;
          v272 = (JSC::AssemblerBuffer *)(*v639 + 56);
          v273 = *(_DWORD *)(*v639 + 200);
          if (v273 + 4 > *(_DWORD *)(*v639 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v272, a2, a3, a4, a5, a6, a7, a8);
            v273 = *(_DWORD *)(v271 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v271 + 56) + v273) = 1795293247;
          v274 = *(_DWORD *)(v271 + 200) + 4;
          *(_DWORD *)(v271 + 200) = v274;
          if (*(_BYTE *)(v271 + 328))
          {
            while ((signed int)v274 < *(_DWORD *)(v271 + 52))
            {
              if (v274 + 4 > *(_DWORD *)(v271 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v272, a2, a3, a4, a5, a6, a7, a8);
                v274 = *(_DWORD *)(v271 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v271 + 56) + v274) = -721215457;
              v274 = *(_DWORD *)(v271 + 200) + 4;
              *(_DWORD *)(v271 + 200) = v274;
            }
            *(_DWORD *)(v271 + 208) = 0;
          }
          if (v274 + 4 > *(_DWORD *)(v271 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v272, a2, a3, a4, a5, a6, a7, a8);
            v274 = *(_DWORD *)(v271 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v271 + 56) + v274) = 1409286152;
          v275 = *(_DWORD *)(v271 + 200);
          v64 = v275 + 4;
          *(_DWORD *)(v271 + 200) = v275 + 4;
          v276 = v275 + 8;
          v277 = v275 + 4;
          if (v276 > *(_DWORD *)(v271 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v272, a2, a3, a4, a5, a6, a7, a8);
            v277 = *(_DWORD *)(v271 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v271 + 56) + v277) = -721215457;
          *(_DWORD *)(v271 + 200) += 4;
          v278 = *(_BYTE *)(v271 + 328) ? -122 : -126;
          v658[0] = v64;
          v658[1] = 0;
          v659 = v278;
          v660 = 8;
          v661 = -1;
          v10 = v639;
          if (v64 != -1)
          {
            v68 = v13 + 120 * v9 + 40;
            v69 = *(unsigned int *)(v13 + 120 * v9 + 52);
            if ((_DWORD)v69 == *(_DWORD *)(v13 + 120 * v9 + 48))
            {
              v307 = (void *)(v69 + 1);
              v308 = v658;
LABEL_215:
              v235 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v68, v307, (unint64_t)v308, a4, a5, a6, a7, a8);
              v236 = *v235;
              v232 = v235 + 1;
              v237 = (_DWORD *)(*(_QWORD *)v68 + 12 * *(unsigned int *)(v68 + 12));
              *v237 = v236;
              v234 = v237 + 1;
            }
            else
            {
              v309 = v658;
LABEL_214:
              v232 = v309 + 1;
              v233 = (_DWORD *)(*(_QWORD *)v68 + 12 * v69);
              *v233 = v64;
              v234 = v233 + 1;
            }
            *v234 = *v232;
            ++*(_DWORD *)(v68 + 12);
            v10 = v639;
          }
        }
        goto LABEL_6;
      case 5u:
      case 8u:
        v70 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (v15 == 5)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrameWithPatch((unsigned int *)&v700, *v10, (*(_DWORD *)(v70 + 44) + 1), a4, a5, a6, a7, a8);
          *(_DWORD *)(v13 + 120 * v9 + 104) = v700;
        }
        if (*(_BYTE *)(v70 + 2))
        {
          v239 = *(_QWORD *)(v13 + 120 * v9 + 8);
          if (v239 >= *(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F714);
          }
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 120 * v239) + 24))
          {
            JSC::MacroAssemblerARM64::branch32(*v10, 0, 1, ((unint64_t)*(unsigned int *)(v70 + 44) << 35) | 0x1F, a5, a6, a7, a8, (uint64_t)&v700);
            v562 = v13 + 120 * v9;
            *(_DWORD *)(v562 + 80) = v700;
            *(_QWORD *)(v562 + 84) = *(_QWORD *)((char *)&v700 + 4);
          }
        }
        v71 = v13 + 120 * v9;
        v72 = v71 + 40;
        v73 = *(unsigned int *)(v71 + 52);
        if ((_DWORD)v73)
        {
          v74 = 0;
          v75 = 0;
          v76 = *v639;
          v77 = 12 * v73;
          do
          {
            if (v75 >= *(unsigned int *)(v72 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198E7F6A4);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v72 + v74), v76, a3, a4, a5, a6, a7, a8);
            ++v75;
            v74 += 12;
          }
          while (v77 != v74);
        }
        v10 = v639;
        if (*(_DWORD *)(v72 + 8))
        {
          if (*(_DWORD *)(v72 + 12))
            *(_DWORD *)(v72 + 12) = 0;
          v78 = *(_QWORD *)v72;
          if (v72 + 16 != *(_QWORD *)v72 && v78)
          {
            *(_QWORD *)v72 = 0;
            *(_DWORD *)(v72 + 8) = 0;
            WTF::fastFree(v78, (void *)a2, a3, a4, a5, a6, a7, a8);
            v78 = *(_QWORD *)v72;
          }
          if (!v78)
          {
            *(_QWORD *)v72 = v72 + 16;
            *(_DWORD *)(v72 + 8) = 2;
          }
        }
        goto LABEL_6;
      case 9u:
        v85 = *(_QWORD *)(v13 + 120 * v9 + 24);
        v86 = *(unsigned int *)(v85 + 44);
        v87 = *(unsigned __int8 *)(v85 + 2);
        if (v87 == 1)
          goto LABEL_275;
        if (v87 == 2)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*v639, 0xFFFFFFFF, *(unsigned int *)(v85 + 44), a4, a5, a6, a7, a8);
          v569 = v13 + 120 * v9;
          v570 = *v639;
          JSC::ARM64Assembler::label((_DWORD *)(*v639 + 32), v571, v572, v573, v574, v575, v576, v577, (int *)&v700);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v570 + 56), 335544320, v578, v579, v580, v581, v582, v583);
          if (*(_BYTE *)(v570 + 328))
            v590 = 69;
          else
            v590 = 65;
          v654[0] = v700;
          v654[1] = 0;
          v655 = v590;
          v656 = 15;
          v657 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v569 + 40), v654, v584, v585, v586, v587, v588, v589);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)*v639, v591, v592, v593, v594, v595, v596, v597, (int *)&v700);
          *(_DWORD *)(v569 + 36) = v700;
LABEL_275:
          JSC::MacroAssemblerARM64::store64(*v639, 1, (v86 << 35) | 0x1F, a4, a5, a6, a7, a8);
        }
        v10 = v639;
        if ((*(_BYTE *)(v85 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
        {
          v88 = *(_DWORD *)(v13 + 120 * v9 + 100);
          v89 = *(_DWORD *)(v85 + 40);
          v58 = v88 >= v89;
          v90 = v88 - v89;
          if (!v58)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F6ECLL);
          }
          goto LABEL_91;
        }
        goto LABEL_6;
      case 0xAu:
        v79 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (*(_BYTE *)(v79 + 2) && !*(_DWORD *)(*(_QWORD *)(v79 + 16) + 24))
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, ((unint64_t)*(unsigned int *)(v79 + 44) << 35) | 0x1F, a5, a6, a7, a8, (uint64_t)v653);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(a1 + 120), v653, v563, v564, v565, v566, v567, v568);
        }
        if ((*(_BYTE *)(v79 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
        {
          v80 = *(_DWORD *)(v13 + 120 * v9 + 100);
          v81 = *(_DWORD *)(v79 + 40);
          v82 = v80 - v81;
          if (v80 < v81)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F6E4);
          }
          v83 = *(unsigned int *)(v79 + 24);
          v84 = *v639;
          if ((_DWORD)v82)
          {
            JSC::MacroAssemblerARM64::sub32(v84, 1, v82, 6, a5, a6, a7, a8);
            v84 = *v639;
            v325 = ((unint64_t)(((8 * (_DWORD)v83) | 4u) >> 2) << 34) | 3;
            v326 = 6;
          }
          else
          {
            v325 = ((unint64_t)(((8 * (_DWORD)v83) | 4u) >> 2) << 34) | 3;
            v326 = 1;
          }
          JSC::MacroAssemblerARM64::store32(v84, v326, v325, a4, a5, a6, a7, a8);
          v230 = *(_QWORD *)(a1 + 56);
          if (*(_DWORD *)(v230 + 12))
          {
            if (*(_DWORD *)(v230 + 124) <= v83)
            {
              __break(0xC471u);
              JUMPOUT(0x198E7F794);
            }
            v599 = *(_DWORD *)(*(_QWORD *)(v230 + 112) + 4 * v83);
            if (v599)
              JSC::MacroAssemblerARM64::store32(*v639, v83, ((unint64_t)((4 * v599 + 8 * *(_DWORD *)(v230 + 4) + 4) >> 2) << 34) | 3, a4, a5, a6, a7, a8);
          }
        }
        v231 = *(unsigned __int8 *)(v79 + 2);
        if (v231 == 1)
        {
          v10 = v639;
          v279 = (_DWORD *)*v639;
          v280 = *(_DWORD *)(*v639 + 200);
          if (v280 < *(_DWORD *)(*v639 + 52))
          {
            do
            {
              if ((v280 + 4) > v279[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v279 + 14), a2, a3, a4, a5, a6, a7, a8);
                v280 = v279[50];
              }
              *(_DWORD *)(*((_QWORD *)v279 + 7) + v280) = -721215457;
              v280 = v279[50] + 4;
              v279[50] = v280;
            }
            while (v280 < v279[13]);
          }
          v279[52] = 0;
          goto LABEL_280;
        }
        v10 = v639;
        if (v231 == 2)
        {
          v598 = *(_QWORD *)(v13 + 120 * v9 + 8);
          if (v598 >= *(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F78CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)(a1 + 304) + 120 * v598 + 40), *(_QWORD *)(a1 + 8), a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_6;
      case 0xBu:
        v346 = *(_QWORD *)(v13 + 120 * v9 + 24);
        v347 = (_DWORD *)*v10;
        v348 = *(_DWORD *)(*v10 + 200);
        if (v348 < *(_DWORD *)(*v10 + 52))
        {
          do
          {
            if ((v348 + 4) > v347[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v347 + 14), a2, a3, a4, a5, a6, a7, a8);
              v348 = v347[50];
            }
            *(_DWORD *)(*((_QWORD *)v347 + 7) + v348) = -721215457;
            v348 = v347[50] + 4;
            v347[50] = v348;
          }
          while (v348 < v347[13]);
          v10 = v639;
          v349 = *v639;
        }
        else
        {
          v349 = *v10;
        }
        v347[52] = 0;
        *(_DWORD *)(v13 + 120 * v9 + 36) = v348;
        JSC::MacroAssemblerARM64::store64(v349, 1, ((unint64_t)*(unsigned int *)(v346 + 44) << 35) | 0x1F, a4, a5, a6, a7, a8);
        goto LABEL_6;
      case 0xCu:
        v342 = *(_QWORD *)(v13 + 120 * v9 + 8);
        if (v342 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E7F744);
        }
        v343 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (*(_BYTE *)(v343 + 2) && !*(_DWORD *)(*(_QWORD *)(v343 + 16) + 24))
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, ((unint64_t)*(unsigned int *)(v343 + 44) << 35) | 0x1F, a5, a6, a7, a8, (uint64_t)v652);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(a1 + 120), v652, v600, v601, v602, v603, v604, v605);
        }
        v344 = *v10;
        v651 = *(_DWORD *)(v13 + 120 * v342 + 36);
        JSC::MacroAssembler::jump(v344, &v651, a3, a4, a5, a6, a7, a8);
        v345 = (_DWORD *)*v10;
        v280 = *(_DWORD *)(*v10 + 200);
        if (v280 < *(_DWORD *)(*v10 + 52))
        {
          do
          {
            if ((v280 + 4) > v345[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v345 + 14), a2, a3, a4, a5, a6, a7, a8);
              v280 = v345[50];
            }
            *(_DWORD *)(*((_QWORD *)v345 + 7) + v280) = -721215457;
            v280 = v345[50] + 4;
            v345[50] = v280;
            v10 = v639;
          }
          while (v280 < v345[13]);
        }
        v345[52] = 0;
LABEL_280:
        *(_DWORD *)(v13 + 120 * v9 + 36) = v280;
        goto LABEL_6;
      case 0xDu:
        v85 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (*(unsigned __int8 *)(v85 + 2) - 1 <= 1)
        {
          v637 = *(_DWORD *)(v85 + 44);
          v418 = 8 * v637;
          JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, ((unint64_t)((v418 + 16) >> 3) << 35) | 0x1F, a4, a5, a6, a7, a8);
          v419 = ((unint64_t)((v418 + 24) >> 3) << 35) | 0x1F;
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 63, v419, v420, v421, v422, v423, v424);
          if (*(_BYTE *)(v85 + 2) == 2)
          {
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*v10, 0xFFFFFFFF, v637, v427, v428, v429, v430, v431);
            v541 = *v10;
            JSC::ARM64Assembler::label((_DWORD *)(*v10 + 32), v542, v543, v544, v545, v546, v547, v548, (int *)&v700);
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v541 + 56), 335544320, v549, v550, v551, v552, v553, v554);
            if (*(_BYTE *)(v541 + 328))
              v561 = 69;
            else
              v561 = 65;
            v647[0] = v700;
            v647[1] = 0;
            v648 = v561;
            v649 = 15;
            v650 = -1;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v13 + 120 * v9 + 40), v647, v555, v556, v557, v558, v559, v560);
          }
          v432 = (_DWORD *)*v10;
          v433 = *(_DWORD *)(*v10 + 200);
          if (v433 < *(_DWORD *)(*v10 + 52))
          {
            do
            {
              if ((v433 + 4) > v432[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v432 + 14), v425, v426, v427, v428, v429, v430, v431);
                v433 = v432[50];
              }
              *(_DWORD *)(*((_QWORD *)v432 + 7) + v433) = -721215457;
              v433 = v432[50] + 4;
              v432[50] = v433;
            }
            while (v433 < v432[13]);
            v10 = v639;
            v434 = *v639;
          }
          else
          {
            v434 = *v10;
          }
          v432[52] = 0;
          *(_DWORD *)(v13 + 120 * v9 + 36) = v433;
          JSC::MacroAssemblerARM64::load64(v434, v419, 6, v427, v428, v429, v430, v431);
          JSC::MacroAssemblerARM64::branchTest64(*v10, 0, 4, 0xFFFFFFFFLL, v435, v436, v437, v438, (uint64_t)&v700, v439);
          v448 = v700;
          if ((_DWORD)v700 != -1)
          {
            v449 = *(unsigned int *)(a1 + 132);
            if ((_DWORD)v449 == *(_DWORD *)(a1 + 128))
            {
              v450 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, (void *)(v449 + 1), (unint64_t)&v700, v442, v443, v444, v445, v446);
              v452 = *v450;
              v451 = v450 + 1;
              v448 = v452;
              v453 = *(_QWORD *)(a1 + 120) + 12 * *(unsigned int *)(a1 + 132);
            }
            else
            {
              v451 = (_QWORD *)((char *)&v700 + 4);
              v453 = *(_QWORD *)(a1 + 120) + 12 * v449;
            }
            *(_DWORD *)v453 = v448;
            *(_QWORD *)(v453 + 4) = *v451;
            ++*(_DWORD *)(a1 + 132);
          }
          v466 = *v10;
          v467 = *(_DWORD *)(*v10 + 200);
          if (v467 + 4 > *(_DWORD *)(*v10 + 192))
          {
            v447 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v466 + 56), v440, v441, v442, v443, v444, v445, v446).n128_u64[0];
            v467 = *(_DWORD *)(v466 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v466 + 56) + v467) = 1358955817;
          *(_DWORD *)(v466 + 200) += 4;
          JSC::MacroAssemblerARM64::branchTest64(*v10, 0, 9, 0xFFFFFFFFLL, v443, v444, v445, v446, (uint64_t)&v695, v447);
          v475 = v695;
          if ((_DWORD)v695 != -1)
          {
            v476 = *(unsigned int *)(a1 + 172);
            if ((_DWORD)v476 == *(_DWORD *)(a1 + 168))
            {
              v477 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 160, (void *)(v476 + 1), (unint64_t)&v695, v470, v471, v472, v473, v474);
              v479 = *v477;
              v478 = v477 + 1;
              v475 = v479;
              v480 = *(_QWORD *)(a1 + 160) + 12 * *(unsigned int *)(a1 + 172);
            }
            else
            {
              v478 = (unint64_t *)((char *)&v695 + 4);
              v480 = *(_QWORD *)(a1 + 160) + 12 * v476;
            }
            *(_DWORD *)v480 = v475;
            *(_QWORD *)(v480 + 4) = *v478;
            ++*(_DWORD *)(a1 + 172);
          }
          v481 = *v10;
          v482 = *(_DWORD *)(*v10 + 200);
          if (v482 + 4 > *(_DWORD *)(*v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v481 + 56), v468, v469, v470, v471, v472, v473, v474);
            v482 = *(_DWORD *)(v481 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v481 + 56) + v482) = -1442577433;
          *(_DWORD *)(v481 + 200) += 4;
          v483 = *v10;
          v484 = *(_DWORD *)(*v10 + 200);
          if (v484 + 4 > *(_DWORD *)(*v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v483 + 56), v468, v469, v470, v471, v472, v473, v474);
            v484 = *(_DWORD *)(v483 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v483 + 56) + v484) = -130023292;
          *(_DWORD *)(v483 + 200) += 4;
          v485 = *v10;
          v486 = *(_DWORD *)(*v10 + 200);
          if (v486 + 4 > *(_DWORD *)(*v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v485 + 56), v468, v469, v470, v471, v472, v473, v474);
            v486 = *(_DWORD *)(v485 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v485 + 56) + v486) = -134217498;
          *(_DWORD *)(v485 + 200) += 4;
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 7, v419, v470, v471, v472, v473, v474);
          v488 = *(_DWORD *)(v85 + 24);
          v487 = *(_DWORD *)(v85 + 28);
          v695 = 0x8000000000000000;
          v489 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 12);
          JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((v418 + 16) >> 3) << 35) | 0x1F, 8, v490, v491, v492, v493, v494);
          v502 = *(_DWORD **)(a1 + 8);
          v503 = v502[50];
          if (v503 + 4 > v502[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v502 + 14), v495, v496, v497, v498, v499, v500, v501);
            v503 = v502[50];
          }
          *(_DWORD *)(*((_QWORD *)v502 + 7) + v503) = 687939809;
          v502[50] += 4;
          JSC::MacroAssemblerARM64::load64(*v639, ((unint64_t)(v418 + 8) << 32) | 0x1F, 8, v497, v498, v499, v500, v501);
          v511 = *v639;
          v512 = *(_DWORD *)(*v639 + 200);
          if (v512 + 4 > *(_DWORD *)(*v639 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v511 + 56), (uint64_t)v504, v505, v506, v507, v508, v509, v510);
            v512 = *(_DWORD *)(v511 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v511 + 56) + v512) = -134151960;
          *(_DWORD *)(v511 + 200) += 4;
          if (*(_BYTE *)(a1 + 81) == 1)
          {
            if (v488 <= v487)
            {
              v527 = v489;
              v528 = 8 * v488;
              do
              {
                v529 = v639;
                JSC::MacroAssemblerARM64::load64(*v639, (v528 << 32) | 3, 8, v506, v507, v508, v509, v510);
                JSC::MacroAssemblerARM64::store64(*v639, 8, ((unint64_t)(v528 + 16) << 32) | 7, v530, v531, v532, v533, v534);
                if (v527)
                {
                  v628 = *(_QWORD *)(a1 + 56);
                  if (*(_DWORD *)(v628 + 124) <= v488)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E7F79CLL);
                  }
                  v629 = *(unsigned int *)(*(_QWORD *)(v628 + 112) + 4 * v488);
                  v529 = v639;
                  if ((_DWORD)v629)
                    WTF::BitVector::set((WTF::BitVector *)&v695, v629);
                }
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::clearSubpatternStart(*v529, v488++, v535, v536, v537, v538, v539, v540);
                v528 = (v528 + 8);
              }
              while (v488 <= v487);
            }
            v513 = WTF::BitVector::begin((uint64_t *)&v695);
            v514 = v504;
            *(_QWORD *)&v700 = v513;
            *((_QWORD *)&v700 + 1) = v504;
            if ((v695 & 0x8000000000000000) != 0)
              v515 = 63;
            else
              v515 = *(_QWORD *)(2 * v695);
            while (v514 != (void *)v515)
            {
              v606 = 4 * (_DWORD)v514 + 4;
              JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), ((unint64_t)((v606 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)) >> 2) << 34) | 3, 8, v506, v507, v508, v509, v510);
              JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 8, ((_QWORD)v514 << 34) + (*(_QWORD *)(a1 + 96) << 35) + 0x1400000007, v607, v608, v609, v610, v611);
              JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, ((unint64_t)((v606 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)) >> 2) << 34) | 3, v612, v613, v614, v615, v616);
              WTF::BitVector::iterator::operator++((unint64_t **)&v700);
              v514 = (void *)*((_QWORD *)&v700 + 1);
            }
          }
          v516 = v637 + 4;
          if (*(_QWORD *)(a1 + 112) > v516)
          {
            v517 = v637 + 5;
            v518 = (v418 + 32);
            do
            {
              JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v518 << 32) | 0x1F, 8, v506, v507, v508, v509, v510);
              JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 8, (*(_QWORD *)(a1 + 104) << 34)+ ((unint64_t)(*(_DWORD *)(a1 + 96) + v516) << 35)+ 0x1800000007, v519, v520, v521, v522, v523);
              LODWORD(v516) = v517;
              v129 = *(_QWORD *)(a1 + 112) > (unint64_t)v517++;
              v518 = (v518 + 8);
            }
            while (v129);
          }
          if ((v695 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v695, v504, v505, v506, v507, v508, v509, v510);
          v10 = v639;
          JSC::MacroAssemblerARM64::store64(*v639, 1, (v418 << 32) | 0x1F, v506, v507, v508, v509, v510);
        }
        if ((*(_BYTE *)(v85 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
        {
          v524 = *(_DWORD *)(v13 + 120 * v9 + 100);
          v525 = *(_DWORD *)(v85 + 40);
          v58 = v524 >= v525;
          v90 = v524 - v525;
          if (!v58)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7E910);
          }
LABEL_91:
          if (!*(_BYTE *)(v85 + 2))
            v90 += *(_DWORD *)(*(_QWORD *)(v85 + 16) + 24);
          if (v90)
          {
            JSC::MacroAssemblerARM64::sub32(*v10, 1, v90, 6, a5, a6, a7, a8);
            v91 = *v10;
            v92 = ((unint64_t)*(unsigned int *)(v85 + 24) << 35) | 3;
            v93 = 6;
          }
          else
          {
            v91 = *v10;
            v92 = ((unint64_t)*(unsigned int *)(v85 + 24) << 35) | 3;
            v93 = 1;
          }
          JSC::MacroAssemblerARM64::store32(v91, v93, v92, a4, a5, a6, a7, a8);
        }
        goto LABEL_6;
      case 0xEu:
        v390 = *(_QWORD *)(v13 + 120 * v9 + 24);
        v391 = *(unsigned int *)(v390 + 44);
        if (*(_BYTE *)(v390 + 2) && !*(_DWORD *)(*(_QWORD *)(v390 + 16) + 24))
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, (v391 << 35) | 0x1F, a5, a6, a7, a8, (uint64_t)v646);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(a1 + 120), v646, v617, v618, v619, v620, v621, v622);
          v12 = *(unsigned int *)(a1 + 316);
        }
        v392 = v13 + 120 * v9;
        v395 = *(_QWORD *)(v392 + 8);
        v394 = (_QWORD *)(v392 + 8);
        v393 = v395;
        if (v395 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E7F754);
        }
        v396 = *(_QWORD *)(a1 + 304);
        v397 = ((unint64_t)((8 * v391 + 16) >> 3) << 35) | 0x1F;
        JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v397, 7, a4, a5, a6, a7, a8);
        v405 = *(_DWORD **)(a1 + 8);
        v406 = v405[50];
        if (v406 + 4 > v405[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v405 + 14), v398, v399, v400, v401, v402, v403, v404);
          v406 = v405[50];
        }
        *(_DWORD *)(*((_QWORD *)v405 + 7) + v406) = 285213927;
        v405[50] += 4;
        JSC::MacroAssemblerARM64::store64(*v639, 7, v397, v400, v401, v402, v403, v404);
        if ((*(_BYTE *)(v390 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
        {
          v457 = *(_DWORD *)(v13 + 120 * v9 + 100);
          v458 = *(_DWORD *)(v390 + 40);
          v459 = v457 - v458;
          if (v457 < v458)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F764);
          }
          v460 = *(unsigned int *)(v390 + 24);
          v461 = *v639;
          if ((_DWORD)v459)
          {
            JSC::MacroAssemblerARM64::sub32(v461, 1, v459, 6, a5, a6, a7, a8);
            v461 = *v639;
            v462 = ((unint64_t)(((8 * (_DWORD)v460) | 4u) >> 2) << 34) | 3;
            v463 = 6;
          }
          else
          {
            v462 = ((unint64_t)(((8 * (_DWORD)v460) | 4u) >> 2) << 34) | 3;
            v463 = 1;
          }
          JSC::MacroAssemblerARM64::store32(v461, v463, v462, a4, a5, a6, a7, a8);
          v464 = *(_QWORD *)(a1 + 56);
          if (*(_DWORD *)(v464 + 12))
          {
            if (*(_DWORD *)(v464 + 124) <= v460)
            {
              __break(0xC471u);
              JUMPOUT(0x198E7F76CLL);
            }
            v465 = *(_DWORD *)(*(_QWORD *)(v464 + 112) + 4 * v460);
            if (v465)
              JSC::MacroAssemblerARM64::store32(*v639, v460, ((unint64_t)((4 * v465 + 8 * *(_DWORD *)(v464 + 4) + 4) >> 2) << 34) | 3, a4, a5, a6, a7, a8);
          }
        }
        v407 = *(unsigned __int8 *)(v390 + 2);
        if (v407 == 1)
        {
          v408 = *(unsigned int *)(v390 + 8);
          v10 = v639;
          if ((_DWORD)v408 == -1)
          {
            v409 = *v639;
            v644 = *(_DWORD *)(v396 + 120 * v393 + 36);
            JSC::MacroAssembler::jump(v409, &v644, a3, v408, a5, a6, a7, a8);
          }
          else
          {
            JSC::MacroAssemblerARM64::branch32(*v639, 3, 7, v408, a5, a6, a7, a8, (uint64_t)&v700);
            v645 = *(_DWORD *)(v396 + 120 * v393 + 36);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v700, &v645, *v639, v623, v624, v625, v626, v627);
          }
          v417 = (_DWORD *)*v639;
LABEL_390:
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v417, v410, v411, v412, v413, v414, v415, v416, (int *)&v700);
          *(_DWORD *)(v13 + 120 * v9 + 36) = v700;
          goto LABEL_6;
        }
        v10 = v639;
        if (v407 == 2)
        {
          if (*v394 >= (unint64_t)*(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F77CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)(a1 + 304) + 120 * *v394 + 40), *(_QWORD *)(a1 + 8), a3, a4, a5, a6, a7, a8);
          v417 = *(_DWORD **)(a1 + 8);
          goto LABEL_390;
        }
        goto LABEL_6;
      case 0xFu:
        v375 = v13 + 120 * v9;
        JSC::MacroAssemblerARM64::store64(*v10, 1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(v375 + 24) + 44) << 35) | 0x1F, a4, a5, a6, a7, a8);
        a3 = *(unsigned int *)(v375 + 96);
        if ((_DWORD)a3)
        {
LABEL_362:
          v34 = *v10;
LABEL_29:
          JSC::MacroAssemblerARM64::sub32(v34, 1, a3, 1, a5, a6, a7, a8);
        }
        goto LABEL_6;
      case 0x10u:
        v350 = *(_QWORD *)(v13 + 120 * v9 + 24);
        JSC::MacroAssemblerARM64::load64(*v10, ((unint64_t)*(unsigned int *)(v350 + 44) << 35) | 0x1F, 1, a4, a5, a6, a7, a8);
        if ((*(_BYTE *)(v350 + 1) & 2) != 0)
        {
          if (*(_BYTE *)(a1 + 81) == 1)
          {
            v351 = *(_DWORD *)(v350 + 28);
            if (v351)
            {
              v352 = *(unsigned int *)(v350 + 24);
              if (v351 >= v352)
              {
                do
                {
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::clearSubpatternStart(*v10, v352, a3, a4, a5, a6, a7, a8);
                  v352 = (v352 + 1);
                }
                while (v352 <= *(_DWORD *)(v350 + 28));
              }
            }
          }
          v353 = v13 + 120 * v9;
          v354 = *v10;
          JSC::ARM64Assembler::label((_DWORD *)(*v10 + 32), a2, a3, a4, a5, a6, a7, a8, (int *)&v700);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v354 + 56), 335544320, v355, v356, v357, v358, v359, v360);
          if (*(_BYTE *)(v354 + 328))
            v367 = 69;
          else
            v367 = 65;
          v640[0] = v700;
          v640[1] = 0;
          v641 = v367;
          v642 = 15;
          v643 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v353 + 40), v640, v361, v362, v363, v364, v365, v366);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)*v10, v368, v369, v370, v371, v372, v373, v374, (int *)&v700);
          *(_DWORD *)(v353 + 36) = v700;
        }
        goto LABEL_6;
      case 0x11u:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateTerm(a1, v9, a3, a4, a5, a6, a7, a8);
        goto LABEL_6;
      case 0x12u:
        v238 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 28);
        if (v238)
        {
          if (v238 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7F724);
          }
          v281 = 8 * v238 + 63;
          a2 = v281 & 0xFFFFFFC0;
          if ((v281 & 0xFFFFFFC0) != 0)
            JSC::MacroAssemblerARM64::add64(*v10, a2, 31, 31, a5, a6, a7, a8);
        }
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateFailReturn(a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_6;
      default:
        goto LABEL_6;
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::backtrack(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  JSC::AssemblerBuffer *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  JSC::AssemblerBuffer *v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  char v115;
  _DWORD *v116;
  int i;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  _DWORD *v162;
  unint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  JSC::AssemblerBuffer *v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  char v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t *v194;
  uint64_t v195;
  unsigned int *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  int v208;
  unint64_t v209;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  uint64_t v221;
  _DWORD *v222;
  JSC::AssemblerBuffer *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int8x8_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  uint64_t v250;
  int v251;
  unsigned int *v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  JSC::AssemblerBuffer *v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  _DWORD *v324;
  uint64_t v325;
  JSC::AssemblerBuffer *v326;
  int v327;
  unsigned int v328;
  char v329;
  uint64_t v330;
  int *v331;
  int *v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  _DWORD *v338;
  uint64_t *v339;
  int v340;
  unint64_t v341;
  _DWORD *v342;
  _QWORD *v343;
  _DWORD *v344;
  _DWORD *v345;
  unsigned int v346;
  int v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  char v358;
  uint64_t v359;
  int v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int *v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  JSC::AssemblerBuffer *v381;
  unsigned int v382;
  unsigned int v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  char v388;
  int *v389;
  int *v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  _DWORD *v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  unsigned int v424;
  _DWORD *v425;
  unsigned int v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  BOOL v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  int8x8_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  _QWORD *v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unsigned int v527;
  unsigned int v528;
  _DWORD *v529;
  int *v530;
  unsigned int v531;
  uint64_t v532;
  unsigned int v533;
  unsigned int v534;
  int v535;
  int v536;
  unsigned int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int v551;
  uint64_t v552;
  unsigned int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unsigned int *v577;
  unsigned int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  void *v600;
  unint64_t v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unsigned int v612;
  int v613;
  int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int8x8_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  unsigned int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  _DWORD *v646;
  unsigned int v647;
  uint64_t v648;
  unsigned int v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unsigned int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  JSC::AssemblerBuffer *v690;
  unsigned int v691;
  JSC::AssemblerBuffer *v692;
  int v693;
  uint64_t v694;
  int v695;
  _QWORD *v696;
  JSC::AssemblerBuffer *v697;
  int v698;
  JSC::AssemblerBuffer *v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  unsigned int *v703;
  uint64_t *v704;
  unsigned int v705;
  unsigned int v706;
  _DWORD v707[3];
  unsigned int v708;
  int v709;
  uint64_t v710;
  unsigned int v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  int v715;
  uint64_t v716;
  unsigned int v717;
  unsigned int v718;
  int v719;
  int v720;
  char v721;
  __int16 v722;
  char v723;
  unsigned int v724;
  int v725;
  unsigned int v726;
  int v727;
  unsigned int v728;
  unsigned int v729;
  unsigned int v730;
  unsigned int v731;
  int v732;
  int v733;
  unsigned int v734;
  int v735;
  unsigned int v736;
  unsigned int v737;
  int v738;
  unsigned int v739;
  int v740;
  char v741;
  __int16 v742;
  char v743;
  __int128 v744;
  _BYTE v745[24];
  __int128 v746;
  _BYTE v747[32];

  v9 = *(unsigned int *)(a1 + 316);
  v704 = (uint64_t *)(a1 + 8);
  v10 = (unsigned int *)(a1 + 15744);
  v696 = (_QWORD *)(a1 + 15792);
  v703 = (unsigned int *)(a1 + 15744);
  while (2)
  {
    --v9;
    v11 = *(_QWORD *)(a1 + 15872);
    if (v11)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)*v704, a2, (uint64_t)a3, a4, a5, a6, a7, a8, &v735);
      if (*(_DWORD *)(v11 + 44) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E824A0);
      }
      *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4 * v9) = v735;
    }
    v12 = *(unsigned int *)(a1 + 316);
    if (v9 >= v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198E823D8);
    }
    v13 = *(_QWORD *)(a1 + 304);
    v14 = (uint64_t *)(v13 + 120 * v9);
    v16 = v14 + 4;
    v15 = *((unsigned __int8 *)v14 + 32);
    switch(*((_BYTE *)v14 + 32))
    {
      case 0:
      case 1:
        v76 = *(_QWORD *)(v13 + 120 * v9 + 16);
        if (v76 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E82418);
        }
        v77 = v704;
        if (*(_BYTE *)(v13 + 120 * v76 + 32) != 2)
        {
          v734 = *(_DWORD *)(v13 + 120 * v76 + 36);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::linkTo(v10, &v734, *v704, a4, a5, a6, a7, a8);
          goto LABEL_10;
        }
        v78 = *v14;
        v79 = v9;
        if (*((_BYTE *)v14 + 32))
        {
          do
          {
            v79 = *(_QWORD *)(v13 + 120 * v79 + 8);
            if (v79 >= v12)
            {
              __break(0xC471u);
              JUMPOUT(0x198E82448);
            }
          }
          while (*(_BYTE *)(v13 + 120 * v79 + 32));
          v14 = (uint64_t *)(v13 + 120 * v79);
        }
        v80 = *(JSC::AssemblerBuffer **)(v13 + 120 * v76 + 16);
        *(_QWORD *)&v746 = v747;
        *((_QWORD *)&v746 + 1) = 2;
        v697 = v80;
        v701 = v78;
        if (v80 == (JSC::AssemblerBuffer *)-1)
        {
          v733 = *(_DWORD *)(v13 + 120 * v76 + 36);
          v248 = *v704;
          v249 = (unsigned int *)&v733;
LABEL_181:
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::linkTo(v10, v249, v248, a4, a5, a6, a7, a8);
          goto LABEL_66;
        }
        v81 = *(_QWORD *)(a1 + 56);
        if ((*(_WORD *)(v81 + 2) & 0x80) != 0)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::takeBacktracksToJumpList((uint64_t)v10, &v746, *v704, a4, a5, a6, a7, a8);
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(v81 + 16) + 32))
          {
            v82 = *(_DWORD *)(v78 + 24);
            v83 = *(_DWORD *)(*v14 + 24);
            v84 = v82 >= v83;
            v85 = v82 - v83;
            if (v85 != 0 && v84 && v85 == 1)
            {
              v732 = *((_DWORD *)v14 + 9);
              v248 = *v704;
              v249 = (unsigned int *)&v732;
              goto LABEL_181;
            }
          }
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, *(_DWORD **)(a1 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 32))
          {
            v87 = *(_DWORD *)(v78 + 24);
            v21 = (v87 - 1);
            if (v87 == 1)
            {
              v348 = *(_QWORD *)(a1 + 8);
              v349 = *(_DWORD *)(v348 + 200);
              v90 = (unsigned int *)(v348 + 200);
              v89 = v349;
              v92 = (JSC::AssemblerBuffer *)(v90 - 36);
              v93 = v349 + 4;
              v94 = *(v90 - 2);
              if (*(_BYTE *)(a1 + 81) == 1)
                v95 = -1207959455;
              else
                v95 = -1442774045;
            }
            else
            {
              if (v87)
              {
                JSC::MacroAssemblerARM64::sub32(*v704, 1, v21, 6, v23, v24, v25, v26);
              }
              else
              {
                v520 = *v704;
                v521 = *(_DWORD *)(*v704 + 200);
                if (v521 + 4 > *(_DWORD *)(*v704 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v520 + 56), v86, v21, v22, v23, v24, v25, v26);
                  v521 = *(_DWORD *)(v520 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v520 + 56) + v521) = 285213734;
                *(_DWORD *)(v520 + 200) += 4;
              }
              v88 = *(_QWORD *)(a1 + 8);
              v91 = *(_DWORD *)(v88 + 200);
              v90 = (unsigned int *)(v88 + 200);
              v89 = v91;
              v92 = (JSC::AssemblerBuffer *)(v90 - 36);
              v93 = v91 + 4;
              v94 = *(v90 - 2);
              if (*(_BYTE *)(a1 + 81) == 1)
                v95 = -1207959450;
              else
                v95 = -1442446365;
            }
            if (v93 > v94)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v92, v86, v21, v22, v23, v24, v25, v26);
              v89 = *v90;
            }
            *(_DWORD *)(*(_QWORD *)v92 + v89) = v95;
            *v90 += 4;
            v77 = v704;
            v78 = v701;
          }
          v96 = *(_DWORD *)(v78 + 24);
          v97 = *(_DWORD *)(*v14 + 24);
          v98 = v96 - v97;
          if (v96 > v97)
          {
            v560 = v98 - 1;
            if (v98 != 1)
              JSC::MacroAssemblerARM64::sub32(*v77, 1, v560, 1, v23, v24, v25, v26);
            v561 = *v77;
            v731 = *((_DWORD *)v14 + 9);
            JSC::MacroAssembler::jump(v561, &v731, v560, v22, v23, v24, v25, v26);
          }
          else
          {
            v99 = v97 - v96;
            if (v99 != -1)
            {
              JSC::MacroAssemblerARM64::add32(*v77, v99 + 1, 1, 1, v23, v24, v25, v26);
              v107 = v77;
              v108 = *v77;
              v109 = *(_DWORD *)(v108 + 200);
              if (v109 + 4 > *(_DWORD *)(v108 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v108 + 56), v100, v101, v102, v103, v104, v105, v106);
                v109 = *(_DWORD *)(v108 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v108 + 56) + v109) = 1795293247;
              v110 = *(_DWORD *)(v108 + 200) + 4;
              *(_DWORD *)(v108 + 200) = v110;
              if (*(_BYTE *)(v108 + 328))
              {
                for (; (signed int)v110 < *(_DWORD *)(v108 + 52); v107 = v704)
                {
                  if (v110 + 4 > *(_DWORD *)(v108 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v108 + 56), v100, v101, v102, v103, v104, v105, v106);
                    v110 = *(_DWORD *)(v108 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v108 + 56) + v110) = -721215457;
                  v110 = *(_DWORD *)(v108 + 200) + 4;
                  *(_DWORD *)(v108 + 200) = v110;
                }
                *(_DWORD *)(v108 + 208) = 0;
              }
              if (v110 + 4 > *(_DWORD *)(v108 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v108 + 56), v100, v101, v102, v103, v104, v105, v106);
                v110 = *(_DWORD *)(v108 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v108 + 56) + v110) = 1409286153;
              v111 = *(_DWORD *)(v108 + 200);
              v112 = v111 + 4;
              *(_DWORD *)(v108 + 200) = v111 + 4;
              v113 = v111 + 8;
              v114 = v111 + 4;
              if (v113 > *(_DWORD *)(v108 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v108 + 56), v100, v101, v102, v103, v104, v105, v106);
                v114 = *(_DWORD *)(v108 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v108 + 56) + v114) = -721215457;
              *(_DWORD *)(v108 + 200) += 4;
              if (*(_BYTE *)(v108 + 328))
                v115 = -122;
              else
                v115 = -126;
              *(_QWORD *)&v744 = v112;
              BYTE8(v744) = v115;
              *(_WORD *)((char *)&v744 + 9) = 9;
              BYTE11(v744) = -1;
              v730 = *((_DWORD *)v14 + 9);
              v77 = v107;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v744, &v730, *v107, v102, v103, v104, v105, v106);
            }
          }
        }
LABEL_66:
        v116 = (_DWORD *)*v77;
        for (i = v116[50]; i < v116[13]; v116[50] = i)
        {
          if ((i + 4) > v116[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v116 + 14), v86, v21, v22, v23, v24, v25, v26);
            i = v116[50];
          }
          *(_DWORD *)(*((_QWORD *)v116 + 7) + i) = -721215457;
          i = v116[50] + 4;
        }
        v695 = i;
        v116[52] = 0;
        v118 = v14[2];
        if (v118 >= *(unsigned int *)(a1 + 316))
        {
          __break(0xC471u);
          JUMPOUT(0x198E82420);
        }
        v119 = *(_QWORD *)(a1 + 304);
        if (*(_BYTE *)(v119 + 120 * v118 + 32) != 2)
        {
          v255 = v119 + 120 * v118;
          v256 = (uint64_t)v14;
          do
          {
            v694 = v255;
            v257 = *(unsigned int *)(v256 + 52);
            if ((_DWORD)v257)
            {
              v258 = 0;
              v259 = 0;
              v260 = *v704;
              v261 = 12 * v257;
              do
              {
                if (v259 >= *(unsigned int *)(v256 + 52))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E823F0);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v256 + 40) + v258), v260, v21, v22, v23, v24, v25, v26);
                ++v259;
                v258 += 12;
              }
              while (v261 != v258);
            }
            v262 = *(_DWORD *)(*(_QWORD *)v256 + 24);
            v256 = v694;
            v263 = *(_DWORD *)(*(_QWORD *)v694 + 24);
            v264 = v262 - v263;
            if (v262 > v263)
            {
              v266 = v704;
              JSC::MacroAssemblerARM64::sub32(*v704, 1, v262 - v263, 1, v23, v24, v25, v26);
              v274 = *v704;
              v275 = (JSC::AssemblerBuffer *)(*v704 + 56);
              v276 = *(_DWORD *)(*v704 + 200);
              if (v276 + 4 > *(_DWORD *)(*v704 + 192))
              {
                v689 = *v704 + 56;
                JSC::AssemblerBuffer::outOfLineGrow(v275, v267, v268, v269, v270, v271, v272, v273);
                v275 = (JSC::AssemblerBuffer *)v689;
                v276 = *(_DWORD *)(v274 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v274 + 56) + v276) = 1795293247;
              v277 = *(_DWORD *)(v274 + 200) + 4;
              *(_DWORD *)(v274 + 200) = v277;
              if (*(_BYTE *)(v274 + 328))
              {
                for (; (signed int)v277 < *(_DWORD *)(v274 + 52); v275 = v692)
                {
                  v692 = v275;
                  if (v277 + 4 > *(_DWORD *)(v274 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v275, v267, v268, v269, v270, v271, v272, v273);
                    v277 = *(_DWORD *)(v274 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v274 + 56) + v277) = -721215457;
                  v277 = *(_DWORD *)(v274 + 200) + 4;
                  *(_DWORD *)(v274 + 200) = v277;
                  v266 = v704;
                  v256 = v694;
                }
                *(_DWORD *)(v274 + 208) = 0;
              }
              if (v277 + 4 > *(_DWORD *)(v274 + 192))
              {
                v690 = v275;
                JSC::AssemblerBuffer::outOfLineGrow(v275, v267, v268, v269, v270, v271, v272, v273);
                v275 = v690;
                v277 = *(_DWORD *)(v274 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v274 + 56) + v277) = 1409286152;
              v278 = *(_DWORD *)(v274 + 200);
              v279 = v278 + 4;
              *(_DWORD *)(v274 + 200) = v278 + 4;
              v280 = v278 + 8;
              v281 = v278 + 4;
              if (v280 > *(_DWORD *)(v274 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v275, v267, v268, v269, v270, v271, v272, v273);
                v281 = *(_DWORD *)(v274 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v274 + 56) + v281) = -721215457;
              *(_DWORD *)(v274 + 200) += 4;
              if (*(_BYTE *)(v274 + 328))
                v282 = -122;
              else
                v282 = -126;
              *(_QWORD *)&v744 = v279;
              BYTE8(v744) = v282;
              *(_WORD *)((char *)&v744 + 9) = 8;
              BYTE11(v744) = -1;
              JSC::MacroAssemblerARM64::add32(*v266, v264, 1, 1, v270, v271, v272, v273);
              v283 = *v266;
              v729 = *(_DWORD *)(v256 + 36);
              JSC::MacroAssembler::jump(v283, &v729, v284, v285, v286, v287, v288, v289);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v744, *v266, v290, v291, v292, v293, v294, v295);
            }
            else if (v262 < v263)
            {
              JSC::MacroAssemblerARM64::add32(*v704, v263 - v262, 1, 1, v23, v24, v25, v26);
            }
            v265 = *(_QWORD *)(v256 + 16);
            if (v265 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E82450);
            }
            v255 = *(_QWORD *)(a1 + 304) + 120 * v265;
          }
          while (*(_BYTE *)(v255 + 32) != 2);
        }
        v120 = v13 + 120 * v9 + 40;
        if (v697 != (JSC::AssemblerBuffer *)-1)
        {
          v121 = *(unsigned int *)(v13 + 120 * v9 + 52);
          if ((_DWORD)v121)
          {
            v122 = 0;
            v123 = 0;
            v124 = *v704;
            v125 = 12 * v121;
            do
            {
              if (v123 >= *(unsigned int *)(v120 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x198E823E0);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v120 + v122), v124, v21, v22, v23, v24, v25, v26);
              ++v123;
              v122 += 12;
            }
            while (v125 != v122);
          }
          v126 = *(_QWORD *)(a1 + 56);
          if (*(_BYTE *)(*(_QWORD *)(v126 + 16) + 32))
          {
            v128 = 0;
          }
          else
          {
            v127 = v701;
            if (*(_DWORD *)(v701 + 24) != 1)
            {
              v128 = 1;
LABEL_121:
              if ((*(_WORD *)(v126 + 2) & 0x80) == 0)
              {
                v179 = *(_DWORD *)(v127 + 24);
                v180 = *(_DWORD *)(*(_QWORD *)(v126 + 16) + 24);
                if (v179 == v180)
                {
                  v181 = *v704;
                  v182 = *(_DWORD *)(*v704 + 200);
                  if (v182 + 4 > *(_DWORD *)(*v704 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v181 + 56), v86, v21, v22, v23, v24, v25, v26);
                    v182 = *(_DWORD *)(v181 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v181 + 56) + v182) = 285213729;
                  *(_DWORD *)(v181 + 200) += 4;
                }
                else
                {
                  v360 = ~v180;
                  v21 = (v179 + v360);
                  if (v179 + v360)
                    JSC::MacroAssemblerARM64::sub32(*v704, 1, v21, 1, v23, v24, v25, v26);
                }
                v183 = *v704;
                v184 = (JSC::AssemblerBuffer *)(*v704 + 56);
                v185 = *(_DWORD *)(*v704 + 200);
                if (v185 + 4 > *(_DWORD *)(*v704 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*v704 + 56), v86, v21, v22, v23, v24, v25, v26);
                  v185 = *(_DWORD *)(v183 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v183 + 56) + v185) = 1795293247;
                v186 = *(_DWORD *)(v183 + 200) + 4;
                *(_DWORD *)(v183 + 200) = v186;
                if (*(_BYTE *)(v183 + 328))
                {
                  for (; (signed int)v186 < *(_DWORD *)(v183 + 52); *(_DWORD *)(v183 + 200) = v186)
                  {
                    if (v186 + 4 > *(_DWORD *)(v183 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v184, v86, v21, v22, v23, v24, v25, v26);
                      v186 = *(_DWORD *)(v183 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v183 + 56) + v186) = -721215457;
                    v186 = *(_DWORD *)(v183 + 200) + 4;
                  }
                  *(_DWORD *)(v183 + 208) = 0;
                }
                if (v186 + 4 > *(_DWORD *)(v183 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v184, v86, v21, v22, v23, v24, v25, v26);
                  v186 = *(_DWORD *)(v183 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v183 + 56) + v186) = 1409286152;
                v187 = *(_DWORD *)(v183 + 200);
                v188 = v187 + 4;
                *(_DWORD *)(v183 + 200) = v187 + 4;
                v189 = v187 + 8;
                v190 = v187 + 4;
                if (v189 > *(_DWORD *)(v183 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v184, v86, v21, v22, v23, v24, v25, v26);
                  v190 = *(_DWORD *)(v183 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v183 + 56) + v190) = -721215457;
                *(_DWORD *)(v183 + 200) += 4;
                if (*(_BYTE *)(v183 + 328))
                  v191 = -122;
                else
                  v191 = -126;
                *(_QWORD *)&v744 = v188;
                BYTE8(v744) = v191;
                *(_WORD *)((char *)&v744 + 9) = 8;
                BYTE11(v744) = -1;
                if (v128)
                {
                  v219 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 24);
                  v220 = *(_DWORD **)(a1 + 8);
                  if ((_DWORD)v219)
                  {
                    JSC::MacroAssemblerARM64::sub32((uint64_t)v220, 1, v219, 6, v23, v24, v25, v26);
                    v222 = *(_DWORD **)(a1 + 8);
                    v223 = (JSC::AssemblerBuffer *)(v222 + 14);
                    v224 = v222[50];
                    v225 = v224 + 4;
                    v226 = v222[48];
                    if (*(_BYTE *)(a1 + 81) == 1)
                    {
                      if (v225 > v226)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v223, v221, v21, v22, v23, v24, v25, v26);
                        v224 = v222[50];
                      }
                      v227 = *((_QWORD *)v222 + 7);
                      v228 = -1207959450;
                    }
                    else
                    {
                      if (v225 > v226)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v223, v221, v21, v22, v23, v24, v25, v26);
                        v224 = v222[50];
                      }
                      v227 = *((_QWORD *)v222 + 7);
                      v228 = -1442446365;
                    }
                    *(_DWORD *)(v227 + v224) = v228;
                    v222[50] += 4;
                  }
                  else
                  {
                    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::setMatchStart(v220, *(unsigned __int8 *)(a1 + 81), v219, v22, v23, v24, v25, v26);
                  }
                }
                v192 = *(_DWORD *)(*v14 + 24);
                v193 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 24);
                if (v192 == v193)
                {
                  v194 = v704;
                  v195 = *v704;
                  v727 = *((_DWORD *)v14 + 9);
                  v196 = (unsigned int *)&v727;
                }
                else
                {
                  v350 = *v704;
                  if (v192 > v193)
                    JSC::MacroAssemblerARM64::add32(v350, v192 - v193, 1, 1, v23, v24, v25, v26);
                  else
                    JSC::MacroAssemblerARM64::sub32(v350, 1, v193 - v192, 1, v23, v24, v25, v26);
                  v351 = *v704;
                  v352 = *(_DWORD *)(*v704 + 200);
                  if (v352 + 4 > *(_DWORD *)(*v704 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v351 + 56), v604, v605, v606, v607, v608, v609, v610);
                    v352 = *(_DWORD *)(v351 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v351 + 56) + v352) = 1795293247;
                  v353 = *(_DWORD *)(v351 + 200) + 4;
                  *(_DWORD *)(v351 + 200) = v353;
                  if (*(_BYTE *)(v351 + 328))
                  {
                    for (; (signed int)v353 < *(_DWORD *)(v351 + 52); *(_DWORD *)(v351 + 200) = v353)
                    {
                      if (v353 + 4 > *(_DWORD *)(v351 + 192))
                      {
                        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v351 + 56), v604, v605, v606, v607, v608, v609, v610);
                        v353 = *(_DWORD *)(v351 + 200);
                      }
                      *(_DWORD *)(*(_QWORD *)(v351 + 56) + v353) = -721215457;
                      v353 = *(_DWORD *)(v351 + 200) + 4;
                    }
                    *(_DWORD *)(v351 + 208) = 0;
                  }
                  if (v353 + 4 > *(_DWORD *)(v351 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v351 + 56), v604, v605, v606, v607, v608, v609, v610);
                    v353 = *(_DWORD *)(v351 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v351 + 56) + v353) = 1409286153;
                  v354 = *(_DWORD *)(v351 + 200);
                  v355 = v354 + 4;
                  *(_DWORD *)(v351 + 200) = v354 + 4;
                  v356 = v354 + 8;
                  v357 = v354 + 4;
                  if (v356 > *(_DWORD *)(v351 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v351 + 56), v604, v605, v606, v607, v608, v609, v610);
                    v357 = *(_DWORD *)(v351 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v351 + 56) + v357) = -721215457;
                  *(_DWORD *)(v351 + 200) += 4;
                  if (*(_BYTE *)(v351 + 328))
                    v358 = -122;
                  else
                    v358 = -126;
                  v739 = v355;
                  v740 = 0;
                  v741 = v358;
                  v742 = 9;
                  v743 = -1;
                  v726 = *((_DWORD *)v14 + 9);
                  v194 = v704;
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v739, &v726, *v704, v606, v607, v608, v609, v610);
                  v195 = *v704;
                  v725 = v695;
                  v196 = (unsigned int *)&v725;
                }
                JSC::MacroAssembler::jump(v195, v196, v21, v22, v23, v24, v25, v26);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v744, *v194, v197, v198, v199, v200, v201, v202);
              }
              if (HIDWORD(v746))
              {
                v203 = 0;
                v204 = 0;
                v205 = *v704;
                v206 = 12 * HIDWORD(v746);
                do
                {
                  if (v204 >= HIDWORD(v746))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E823E8);
                  }
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v746 + v203), v205, v21, v22, v23, v24, v25, v26);
                  ++v204;
                  v203 += 12;
                }
                while (v206 != v203);
              }
              v207 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 28);
              v10 = v703;
              if (v207)
              {
                if (v207 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E82440);
                }
                v208 = 8 * v207 + 63;
                v86 = v208 & 0xFFFFFFC0;
                if ((v208 & 0xFFFFFFC0) != 0)
                  JSC::MacroAssemblerARM64::add64(*v704, v86, 31, 31, v23, v24, v25, v26);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateFailReturn(a1, v86, v21, v22, v23, v24, v25, v26);
              goto LABEL_149;
            }
            v345 = *(_DWORD **)(a1 + 8);
            v346 = v345[50];
            if (*(_BYTE *)(a1 + 81) == 1)
              v347 = -1207959455;
            else
              v347 = -1442774045;
            if (v346 + 4 > v345[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v345 + 14), v86, v21, v22, v23, v24, v25, v26);
              v346 = v345[50];
            }
            v128 = 0;
            *(_DWORD *)(*((_QWORD *)v345 + 7) + v346) = v347;
            v345[50] += 4;
            v126 = *(_QWORD *)(a1 + 56);
          }
          v127 = v701;
          goto LABEL_121;
        }
        v250 = v13 + 120 * v76;
        v253 = *(_DWORD *)(v250 + 36);
        v252 = (unsigned int *)(v250 + 36);
        v251 = v253;
        v319 = *v704;
        v254 = *(unsigned int *)(v13 + 120 * v9 + 52);
        if ((_DWORD)v254)
        {
          v27 = *(unsigned int **)v120;
          v28 = 12 * v254;
          do
          {
            LODWORD(v744) = v251;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v27, (unsigned int *)&v744, v319, v22, v23, v24, v25, v26);
            v27 += 3;
            v28 -= 12;
          }
          while (v28);
          v319 = *v704;
        }
        v728 = *v252;
        JSC::MacroAssembler::jump(v319, &v728, v21, v22, v23, v24, v25, v26);
        v10 = v703;
LABEL_149:
        v209 = v746;
        if (v747 != (_BYTE *)v746 && (_QWORD)v746 != 0)
        {
LABEL_153:
          *(_QWORD *)&v746 = 0;
          DWORD2(v746) = 0;
          WTF::fastFree(v209, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
LABEL_10:
        if (v9)
          continue;
        return;
      case 3:
      case 4:
      case 6:
      case 7:
        v54 = v13 + 120 * v9;
        v57 = *(_QWORD *)(v54 + 16);
        v55 = (unint64_t *)(v54 + 16);
        v56 = v57;
        if (v57 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E82400);
        }
        v58 = v13 + 120 * v9;
        v59 = *(_QWORD *)(v58 + 8);
        v60 = *(_QWORD *)(v13 + 120 * v56 + 16);
        WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v703, (unsigned int *)(v58 + 40), (uint64_t)a3, a4, a5, a6, a7, a8);
        v62 = *(_DWORD *)(v58 + 96);
        v61 = (unsigned int *)(v58 + 96);
        if (v62)
        {
          v700 = v59;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v703, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::MacroAssemblerARM64::sub32(*v704, 1, *v61, 1, v63, v64, v65, v66);
          if (v60 == -1)
          {
            if (v59 == -1)
            {
              *(_BYTE *)(a1 + 15784) = 1;
              v10 = v703;
            }
            else
            {
              v10 = v703;
              v325 = *v704;
              v326 = (JSC::AssemblerBuffer *)(*v704 + 56);
              v327 = *(_DWORD *)(*v704 + 200);
              if (v327 < *(_DWORD *)(*v704 + 52))
              {
                v699 = (JSC::AssemblerBuffer *)(*v704 + 56);
                do
                {
                  if ((v327 + 4) > *(_DWORD *)(v325 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v699, v67, (uint64_t)a3, a4, a5, a6, a7, a8);
                    v327 = *(_DWORD *)(v325 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v325 + 56) + v327) = -721215457;
                  v327 = *(_DWORD *)(v325 + 200) + 4;
                  *(_DWORD *)(v325 + 200) = v327;
                  v10 = v703;
                  v326 = v699;
                  v59 = v700;
                }
                while (v327 < *(_DWORD *)(v325 + 52));
              }
              v328 = v327;
              if ((v327 + 4) > *(_DWORD *)(v325 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v326, v67, (uint64_t)a3, a4, a5, a6, a7, a8);
                v328 = *(_DWORD *)(v325 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v325 + 56) + v328) = 335544320;
              *(_DWORD *)(v325 + 200) += 4;
              if (*(_BYTE *)(v325 + 328))
                v329 = 69;
              else
                v329 = 65;
              v719 = v327;
              v720 = 0;
              v721 = v329;
              v722 = 15;
              v723 = -1;
              if (v327 != -1)
              {
                v330 = *(unsigned int *)(v13 + 120 * v56 + 52);
                if ((_DWORD)v330 == *(_DWORD *)(v13 + 120 * v56 + 48))
                {
                  v331 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 120 * v56 + 40, (void *)(v330 + 1), (unint64_t)&v719, a4, a5, a6, a7, a8);
                  v333 = *v331;
                  v332 = v331 + 1;
                  v334 = *(_QWORD *)(v13 + 120 * v56 + 40) + 12 * *(unsigned int *)(v13 + 120 * v56 + 52);
                  *(_DWORD *)v334 = v333;
                }
                else
                {
                  v332 = &v720;
                  v334 = *(_QWORD *)(v13 + 120 * v56 + 40) + 12 * v330;
                  *(_DWORD *)v334 = v327;
                }
                *(_QWORD *)(v334 + 4) = *(_QWORD *)v332;
                ++*(_DWORD *)(v13 + 120 * v56 + 52);
              }
            }
          }
          else
          {
            v68 = *v704;
            v724 = *(_DWORD *)(v13 + 120 * v56 + 36);
            JSC::MacroAssembler::jump(v68, &v724, (uint64_t)a3, a4, a5, a6, a7, a8);
            v10 = v703;
          }
        }
        else if (v60 == -1)
        {
          v10 = v703;
          if (v59 != -1)
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::takeBacktracksToJumpList((uint64_t)v703, (_DWORD *)(v13 + 120 * v56 + 40), *v704, a4, a5, a6, a7, a8);
        }
        else
        {
          v718 = *(_DWORD *)(v13 + 120 * v56 + 36);
          v10 = v703;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::linkTo(v703, &v718, *v704, a4, a5, a6, a7, a8);
        }
        v69 = v13 + 120 * v9;
        v71 = *(_DWORD *)(v69 + 80);
        v70 = v69 + 80;
        a2 = v71;
        if (v71 != -1)
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::append((unint64_t)v10, a2, *(_QWORD *)(v70 + 4), a4, a5, a6, a7, a8);
        if (*v16 == 4)
        {
          a3 = (_DWORD *)(v13 + 120 * v9 + 104);
          v161 = *(unsigned int *)(a1 + 15804);
          if ((_DWORD)v161 == *(_DWORD *)(a1 + 15800))
          {
            a3 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v696, (void *)(v161 + 1), (unint64_t)a3, a4, a5, a6, a7, a8);
            v161 = *(unsigned int *)(a1 + 15804);
            v162 = (_DWORD *)(*(_QWORD *)(a1 + 15792) + 4 * v161);
          }
          else
          {
            v162 = (_DWORD *)(*v696 + 4 * v161);
          }
          *v162 = *a3;
          *(_DWORD *)(a1 + 15804) = v161 + 1;
        }
        if (v59 == -1)
        {
          v72 = *v55;
          v73 = *(unsigned int *)(a1 + 316);
          if (*v55 >= v73)
          {
            __break(0xC471u);
            JUMPOUT(0x198E82408);
          }
          v74 = *(_QWORD *)(a1 + 304);
          while (1)
          {
            v75 = *(_QWORD *)(v74 + 120 * v72 + 16);
            if (v75 == -1)
              break;
            v72 = *(_QWORD *)(v74 + 120 * v72 + 16);
            if (v75 >= v73)
            {
              __break(0xC471u);
              JUMPOUT(0x198E82410);
            }
          }
          v19 = v74 + 120 * v72;
          goto LABEL_8;
        }
        goto LABEL_10;
      case 5:
      case 8:
        v129 = v13 + 120 * v9;
        v131 = *(_DWORD *)(v129 + 80);
        v130 = v129 + 80;
        a2 = v131;
        v132 = *(_QWORD *)(v130 - 56);
        if (v131 != -1)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::append((unint64_t)v10, a2, *(_QWORD *)(v130 + 4), a4, a5, a6, a7, a8);
          v15 = *v16;
        }
        if (v15 == 5)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
          v138 = *v704;
          if (!*(_BYTE *)(*v704 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x198E820A8);
          }
          v139 = ((unint64_t)((8 * *(_DWORD *)(v132 + 44) + 8) >> 3) << 35) | 0x1F;
          *(_DWORD *)(*(_QWORD *)(v138 + 264) + 208) &= ~*(_DWORD *)(v138 + 288);
          JSC::MacroAssemblerARM64::load64(v138, v139, *(char *)(v138 + 272), v133, v134, v135, v136, v137);
          v141 = *(_DWORD *)(v138 + 200);
          if (v141 + 4 > *(_DWORD *)(v138 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v138 + 56), a2, v140, a4, a5, a6, a7, a8);
            v141 = *(_DWORD *)(v138 + 200);
          }
          v142 = (_QWORD *)(a1 + 15792);
          *(_DWORD *)(*(_QWORD *)(v138 + 56) + v141) = -702610944;
          *(_DWORD *)(v138 + 200) += 4;
          a3 = (_DWORD *)(v13 + 120 * v9 + 104);
          v143 = *(unsigned int *)(a1 + 15804);
          if ((_DWORD)v143 == *(_DWORD *)(a1 + 15800))
          {
            a3 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v142, (void *)(v143 + 1), (unint64_t)a3, a4, a5, a6, a7, a8);
            v143 = *(unsigned int *)(a1 + 15804);
            v324 = (_DWORD *)(*(_QWORD *)(a1 + 15792) + 4 * v143);
          }
          else
          {
            v324 = (_DWORD *)(*v142 + 4 * v143);
          }
          *v324 = *a3;
          *(_DWORD *)(a1 + 15804) = v143 + 1;
        }
        goto LABEL_10;
      case 9:
        v144 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if ((*(_BYTE *)(v144 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1 || *(_BYTE *)(v144 + 2) == 1)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((*(_BYTE *)(v144 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
          {
            v211 = *v704;
            if (!*(_BYTE *)(*v704 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198E820E4);
            }
            v212 = *(unsigned int *)(v144 + 24);
            JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)*v704, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v211 + 264, a4, a5, a6, a7, a8);
            JSC::MacroAssemblerARM64::store32(v211, 16, (v212 << 35) | 3, v213, v214, v215, v216, v217);
            v218 = *(_QWORD *)(a1 + 56);
            if (*(_DWORD *)(v218 + 12))
            {
              if (*(_DWORD *)(v218 + 124) <= v212)
              {
                __break(0xC471u);
                JUMPOUT(0x198E824B0);
              }
              v603 = *(_DWORD *)(*(_QWORD *)(v218 + 112) + 4 * v212);
              if (v603)
                JSC::MacroAssemblerARM64::store32(*v704, 63, ((unint64_t)((4 * v603 + 8 * *(_DWORD *)(v218 + 4) + 4) >> 2) << 34) | 3, a4, a5, a6, a7, a8);
            }
          }
          if (*(_BYTE *)(v144 + 2) == 1)
          {
            v299 = *v704;
            if (!*(_BYTE *)(*v704 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198E82124);
            }
            v300 = ((unint64_t)*(unsigned int *)(v144 + 44) << 35) | 0x1F;
            JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)*v704, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v299 + 264, a4, a5, a6, a7, a8);
            JSC::MacroAssemblerARM64::store32(v299, 16, v300, v301, v302, v303, v304, v305);
            if (*(_BYTE *)(a1 + 81) == 1)
            {
              v320 = *(_DWORD *)(v144 + 28);
              if (v320)
              {
                v321 = *(_DWORD *)(v144 + 24);
                if (v320 >= v321)
                {
                  v322 = v321 + (*(_BYTE *)(v144 + 1) & 1);
                  while (v322 <= v320)
                  {
                    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::clearSubpatternStart(*(_QWORD *)(a1 + 8), v322, v306, v307, v308, v309, v310, v311);
                    v323 = *(_QWORD *)(a1 + 56);
                    if (*(_DWORD *)(v323 + 12))
                    {
                      if (*(_DWORD *)(v323 + 124) <= v322)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E824B8);
                      }
                      v613 = *(_DWORD *)(*(_QWORD *)(v323 + 112) + 4 * v322);
                      if (v613)
                        JSC::MacroAssemblerARM64::store32(*v704, 63, ((unint64_t)((4 * v613 + 8 * *(_DWORD *)(v323 + 4) + 4) >> 2) << 34) | 3, v307, v308, v309, v310, v311);
                    }
                    v322 = (v322 + 1);
                    v320 = *(_DWORD *)(v144 + 28);
                  }
                }
              }
            }
            v312 = *(_QWORD *)(v13 + 120 * v9 + 16);
            if (v312 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E82458);
            }
            v313 = *(_QWORD *)(a1 + 8);
            v717 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v312 + 36);
            JSC::MacroAssembler::jump(v313, &v717, v306, v307, v308, v309, v310, v311);
            v314 = v13 + 120 * v9;
            v315 = *(unsigned int *)(v314 + 52);
            if ((_DWORD)v315)
            {
              v30 = 0;
              v29 = 0;
              v316 = v314 + 40;
              v317 = *(_QWORD *)(a1 + 8);
              v318 = 12 * v315;
              do
              {
                if (v29 >= *(unsigned int *)(v316 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E823F8);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v316 + v30), v317, (uint64_t)a3, a4, a5, a6, a7, a8);
                ++v29;
                v30 += 12;
              }
              while (v318 != v30);
            }
          }
          *(_BYTE *)(a1 + 15784) = 1;
          v10 = v703;
        }
        goto LABEL_10;
      case 0xA:
        v145 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (!*(_BYTE *)(v145 + 2))
          goto LABEL_7;
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
        v151 = *v704;
        if (!*(_BYTE *)(*v704 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198E82104);
        }
        v152 = ((unint64_t)*(unsigned int *)(v145 + 44) << 35) | 0x1F;
        *(_DWORD *)(*(_QWORD *)(v151 + 296) + 208) &= ~*(_DWORD *)(v151 + 320);
        JSC::MacroAssemblerARM64::load32(v151, v152, *(char *)(v151 + 304), v146, v147, v148, v149, v150);
        JSC::MacroAssemblerARM64::branch32(v151, 0, 17, 0xFFFFFFFFLL, v153, v154, v155, v156, (uint64_t)&v746);
        v157 = *(_QWORD *)(v13 + 120 * v9 + 8);
        v158 = *(unsigned int *)(a1 + 316);
        if (*(_BYTE *)(v145 + 2) == 1)
        {
          if (v157 >= v158)
          {
            __break(0xC471u);
            JUMPOUT(0x198E82430);
          }
          v159 = *(_QWORD *)(a1 + 304);
          v160 = v746;
          v715 = v746;
          v716 = *(_QWORD *)((char *)&v746 + 4);
          if ((_DWORD)v746 != -1)
          {
            v335 = v159 + 120 * v157 + 40;
            v337 = *(_DWORD *)(v159 + 120 * v157 + 48);
            v336 = *(unsigned int *)(v335 + 12);
            if ((_DWORD)v336 == v337)
            {
              v338 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v335, (void *)(v336 + 1), (unint64_t)&v715, a4, a5, a6, a7, a8);
              v340 = *v338;
              v339 = (uint64_t *)(v338 + 1);
              v160 = v340;
              LODWORD(v336) = *(_DWORD *)(v335 + 12);
            }
            else
            {
              v339 = &v716;
            }
            v359 = *(_QWORD *)v335 + 12 * v336;
            *(_DWORD *)v359 = v160;
            *(_QWORD *)(v359 + 4) = *v339;
            ++*(_DWORD *)(v335 + 12);
          }
        }
        else
        {
          if (v157 >= v158)
          {
            __break(0xC471u);
            JUMPOUT(0x198E824A8);
          }
          v714 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v157 + 36);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v746, &v714, *(_QWORD *)(a1 + 8), a4, a5, a6, a7, a8);
        }
        goto LABEL_100;
      case 0xB:
        v361 = *(_QWORD *)(v13 + 120 * v9 + 16);
        if (v361 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E82460);
        }
        v713 = *(_DWORD *)(v13 + 120 * v361 + 36);
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::linkTo(v10, &v713, *v704, a4, a5, a6, a7, a8);
        goto LABEL_10;
      case 0xC:
        goto LABEL_7;
      case 0xD:
        v408 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (*(_BYTE *)(v408 + 2))
        {
          v409 = *(_DWORD *)(v408 + 44);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, *(_DWORD **)(a1 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
          v698 = v409;
          v410 = (8 * v409);
          v702 = ((unint64_t)((v410 + 24) >> 3) << 35) | 0x1F;
          JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v702, 6, v411, v412, v413, v414, v415);
          v423 = *(_DWORD *)(v408 + 24);
          v424 = *(_DWORD *)(v408 + 28);
          *(_QWORD *)&v744 = 0x8000000000000000;
          v693 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 12);
          v425 = *(_DWORD **)(a1 + 8);
          v426 = v425[50];
          if (v426 + 4 > v425[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v425 + 14), v416, v417, v418, v419, v420, v421, v422);
            v426 = v425[50];
          }
          *(_DWORD *)(*((_QWORD *)v425 + 7) + v426) = 692134081;
          v425[50] += 4;
          JSC::MacroAssemblerARM64::store64(*v704, 1, (v410 << 32) | 0x1F, v418, v419, v420, v421, v422);
          v427 = ((unint64_t)(v410 + 16) << 32) | 0x1F;
          JSC::MacroAssemblerARM64::store64(*v704, 8, v427, v428, v429, v430, v431, v432);
          v440 = *v704;
          v441 = *(_DWORD *)(*v704 + 200);
          if (v441 + 4 > *(_DWORD *)(*v704 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v440 + 56), v433, v434, v435, v436, v437, v438, v439);
            v441 = *(_DWORD *)(v440 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v440 + 56) + v441) = -129957688;
          *(_DWORD *)(v440 + 200) += 4;
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 8, ((unint64_t)(v410 + 8) << 32) | 0x1F, v435, v436, v437, v438, v439);
          if (*(_BYTE *)(a1 + 81) == 1)
          {
            if (v423 <= v424)
            {
              v564 = 8 * v423;
              do
              {
                JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)(v564 + 16) << 32) | 6, 8, v444, v445, v446, v447, v448);
                JSC::MacroAssemblerARM64::store64(*v704, 8, (v564 << 32) | 3, v565, v566, v567, v568, v569);
                if (v693)
                {
                  v677 = *(_QWORD *)(a1 + 56);
                  if (*(_DWORD *)(v677 + 124) <= v423)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E824C8);
                  }
                  v678 = *(unsigned int *)(*(_QWORD *)(v677 + 112) + 4 * v423);
                  if ((_DWORD)v678)
                    WTF::BitVector::set((WTF::BitVector *)&v744, v678);
                }
                ++v423;
                v564 = (v564 + 8);
              }
              while (v423 <= v424);
            }
            *(_QWORD *)&v746 = WTF::BitVector::begin((uint64_t *)&v744);
            *((_QWORD *)&v746 + 1) = v442;
            if ((v744 & 0x8000000000000000) != 0)
              v449 = 63;
            else
              v449 = *(_QWORD *)(2 * v744);
            if (v442 != v449)
            {
              do
              {
                v614 = v442;
                JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), (v442 << 34) + (*(_QWORD *)(a1 + 96) << 35) + 0x1400000006, 8, v444, v445, v446, v447, v448);
                JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 8, ((unint64_t)((4 * v614 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) + 4) >> 2) << 34) | 3, v615, v616, v617, v618, v619);
                WTF::BitVector::iterator::operator++((unint64_t **)&v746);
                v442 = *((_QWORD *)&v746 + 1);
              }
              while (*((_QWORD *)&v746 + 1) != v449);
            }
          }
          v450 = (v698 + 4);
          if (*(_QWORD *)(a1 + 112) > v450)
          {
            v451 = v698 + 5;
            v452 = (v410 + 32);
            do
            {
              JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (*(_QWORD *)(a1 + 104) << 34)+ ((unint64_t)(*(_DWORD *)(a1 + 96) + v450) << 35)+ 0x1800000006, 8, v444, v445, v446, v447, v448);
              JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 8, (v452 << 32) | 0x1F, v453, v454, v455, v456, v457);
              LODWORD(v450) = v451;
              v458 = *(_QWORD *)(a1 + 112) > (unint64_t)v451++;
              v452 = (v452 + 8);
            }
            while (v458);
          }
          if ((v744 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v744, (void *)v442, v443, v444, v445, v446, v447, v448);
          v459 = *v704;
          v460 = *(_DWORD *)(*v704 + 200);
          if (v460 + 4 > *(_DWORD *)(*v704 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v459 + 56), v442, v443, v444, v445, v446, v447, v448);
            v460 = *(_DWORD *)(v459 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v459 + 56) + v460) = -130023225;
          *(_DWORD *)(v459 + 200) += 4;
          v461 = *v704;
          v462 = *(_DWORD *)(*v704 + 200);
          if (v462 + 4 > *(_DWORD *)(*v704 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v461 + 56), v442, v443, v444, v445, v446, v447, v448);
            v462 = *(_DWORD *)(v461 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v461 + 56) + v462) = -134217532;
          *(_DWORD *)(v461 + 200) += 4;
          v463 = *v704;
          v464 = *(_DWORD *)(*v704 + 200);
          if (v464 + 4 > *(_DWORD *)(*v704 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v463 + 56), v442, v443, v444, v445, v446, v447, v448);
            v464 = *(_DWORD *)(v463 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v463 + 56) + v464) = -1442446364;
          *(_DWORD *)(v463 + 200) += 4;
          JSC::MacroAssemblerARM64::store64(*v704, 7, v702, v444, v445, v446, v447, v448);
          JSC::MacroAssemblerARM64::load64(*v704, v427, 6, v465, v466, v467, v468, v469);
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *v704, 0, 6, v470, v471, v472, v473, (uint64_t)&v746, v474);
          v482 = *v704;
          v483 = *(_DWORD *)(*v704 + 200);
          if (v483 + 4 > *(_DWORD *)(*v704 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v482 + 56), v475, v476, v477, v478, v479, v480, v481);
            v483 = *(_DWORD *)(v482 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v482 + 56) + v483) = 1358955718;
          *(_DWORD *)(v482 + 200) += 4;
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 6, v427, v477, v478, v479, v480, v481);
          v490 = v13 + 120 * v9;
          v493 = *(_QWORD *)(v490 + 16);
          v492 = (_QWORD *)(v490 + 16);
          v491 = v493;
          if (v493 >= *(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E82478);
          }
          v494 = *(_QWORD *)(a1 + 8);
          v712 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v491 + 36);
          JSC::MacroAssembler::jump(v494, &v712, v484, v485, v486, v487, v488, v489);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v746, *(_QWORD *)(a1 + 8), v495, v496, v497, v498, v499, v500);
          v506 = *(_QWORD *)(a1 + 8);
          v10 = v703;
          if (!*(_BYTE *)(v506 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x198E82290);
          }
          JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v506 + 264, v501, v502, v503, v504, v505);
          JSC::MacroAssemblerARM64::store32(v506, 16, (v410 << 32) | 0x1F, v507, v508, v509, v510, v511);
          if (*(_BYTE *)(v408 + 2) == 1)
          {
            if (*v492 >= (unint64_t)*(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E82480);
            }
            v512 = *(_QWORD *)(a1 + 8);
            v711 = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * *v492 + 36);
            JSC::MacroAssembler::jump(v512, &v711, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_BYTE *)(v408 + 2) == 1)
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v13 + 120 * v9 + 40), *v704, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          *(_BYTE *)(a1 + 15784) = 1;
        }
        goto LABEL_10;
      case 0xE:
        v393 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (*(_BYTE *)(v393 + 2))
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
          v399 = *(unsigned int *)(v393 + 44);
          if (*(_BYTE *)(v393 + 2) == 1)
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, (v399 << 35) | 0x1F, 0xFFFFFFFFLL, v395, v396, v397, v398, (uint64_t)&v746);
            v406 = *(_QWORD *)(v13 + 120 * v9 + 8);
            if (v406 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E82470);
            }
            v407 = (_DWORD *)(*(_QWORD *)(a1 + 304) + 120 * v406 + 40);
            v709 = v746;
            v710 = *(_QWORD *)((char *)&v746 + 4);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v407, &v709, v400, v401, v402, v403, v404, v405);
          }
          else
          {
            v570 = *(_QWORD *)(v13 + 120 * v9 + 8);
            if (v570 >= *(unsigned int *)(a1 + 316))
            {
              __break(0xC471u);
              JUMPOUT(0x198E82490);
            }
            v571 = *(_QWORD *)(a1 + 304);
            JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v399 << 35) | 0x1F, 6, v394, v395, v396, v397, v398);
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, 0xFFFFFFFFLL, v572, v573, v574, v575, (uint64_t)&v746);
            v576 = v571 + 120 * v570;
            v578 = *(_DWORD *)(v576 + 36);
            v577 = (unsigned int *)(v576 + 36);
            v708 = v578;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v746, &v708, *(_QWORD *)(a1 + 8), v579, v580, v581, v582, v583);
            *(_QWORD *)&v746 = v747;
            *((_QWORD *)&v746 + 1) = 2;
            if (*(_DWORD *)(v393 + 8) != -1)
            {
              JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)(8 * v399 + 16) << 32) | 0x1F, 7, v584, v585, v586, v587, v588);
              JSC::MacroAssemblerARM64::branch32(*v704, 2, 7, *(unsigned int *)(v393 + 8), v679, v680, v681, v682, (uint64_t)v707);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v746, v707, v683, v684, v685, v686, v687, v688);
            }
            JSC::MacroAssemblerARM64::branch32(*v704, 8, 1, 6, v585, v586, v587, v588, (uint64_t)&v744);
            v706 = *v577;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v744, &v706, *v704, v589, v590, v591, v592, v593);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v746, *v704, v594, v595, v596, v597, v598, v599);
            v601 = v746;
            if (v747 != (_BYTE *)v746 && (_QWORD)v746)
            {
              *(_QWORD *)&v746 = 0;
              DWORD2(v746) = 0;
              WTF::fastFree(v601, v600, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v10 = v703;
          }
LABEL_100:
          *(_BYTE *)(a1 + 15784) = 1;
        }
        goto LABEL_7;
      case 0xF:
        v362 = v13 + 120 * v9;
        v363 = *(_QWORD *)(v362 + 16);
        if (v363 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198E82468);
        }
        v364 = *(_QWORD *)(v362 + 24);
        v365 = v13 + 120 * v9;
        v367 = *(_DWORD *)(v365 + 96);
        v366 = (unsigned int *)(v365 + 96);
        if (v367 || (*(_BYTE *)(v364 + 1) & 2) != 0)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v703, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
          v513 = *v366;
          if ((_DWORD)v513)
            JSC::MacroAssemblerARM64::add32(*v704, v513, 1, 1, a5, a6, a7, a8);
          if ((*(_BYTE *)(v364 + 1) & 2) != 0)
          {
            v514 = *v704;
            v705 = *(_DWORD *)(v13 + 120 * v363 + 36);
            JSC::MacroAssembler::jump(v514, &v705, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          *(_BYTE *)(a1 + 15784) = 1;
        }
        v20 = (unsigned int *)(v13 + 120 * v363 + 40);
        v10 = v703;
        goto LABEL_9;
      case 0x10:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::takeBacktracksToJumpList((uint64_t)v10, (_DWORD *)(v13 + 120 * v9 + 40), *v704, a4, a5, a6, a7, a8);
        goto LABEL_10;
      case 0x11:
        v17 = *(_QWORD *)(v13 + 120 * v9 + 24);
        if (*(_BYTE *)v17 != 3)
        {
          switch(*(_BYTE *)v17)
          {
            case 0:
            case 1:
            case 2:
              goto LABEL_7;
            case 4:
              v31 = *(unsigned __int8 *)(v17 + 2);
              if (!*(_BYTE *)(v17 + 2))
              {
                if (*(_DWORD *)(v17 + 8) != 1)
                  goto LABEL_7;
                if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                {
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, *(_DWORD **)(a1 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
                  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)*(unsigned int *)(v17 + 44) << 35) | 0x1F, 1, v515, v516, v517, v518, v519);
                  *(_BYTE *)(a1 + 15784) = 1;
                  v12 = *(unsigned int *)(a1 + 316);
                }
                if (v12 <= v9)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E82428);
                }
                v19 = *(_QWORD *)(a1 + 304) + 120 * v9;
                goto LABEL_8;
              }
              if (v31 == 1)
              {
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
                JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)((8 * *(_DWORD *)(v17 + 44) + 8) >> 3) << 35) | 0x1F, 7, v32, v33, v34, v35, v36);
                JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *v704, 0, 7, v37, v38, v39, v40, (uint64_t)&v744, v41);
                LODWORD(v746) = v744;
                v49 = *(_QWORD *)((char *)&v744 + 4);
                *(_QWORD *)((char *)&v746 + 4) = *(_QWORD *)((char *)&v744 + 4);
                if ((_DWORD)v744 != -1)
                {
                  v50 = *(unsigned int *)(a1 + 15756);
                  if ((_DWORD)v50 == *(_DWORD *)(a1 + 15752))
                  {
                    v51 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v50 + 1), (unint64_t)&v746, v44, v45, v46, v47, v48);
                    v52 = (_DWORD *)(*(_QWORD *)(a1 + 15744) + 12 * *(unsigned int *)(a1 + 15756));
                    *v52 = *(_DWORD *)v51;
                    v53 = v52 + 1;
                    v49 = *(_QWORD *)(v51 + 4);
                  }
                  else
                  {
                    v165 = (_DWORD *)(*(_QWORD *)v10 + 12 * v50);
                    *v165 = v744;
                    v53 = v165 + 1;
                  }
                  *v53 = v49;
                  ++*(_DWORD *)(a1 + 15756);
                }
                v166 = *v704;
                v167 = *(_DWORD *)(*v704 + 200);
                if (v167 + 4 > *(_DWORD *)(*v704 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v166 + 56), v42, v43, v44, v45, v46, v47, v48);
                  v167 = *(_DWORD *)(v166 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v166 + 56) + v167) = 1358955751;
                *(_DWORD *)(v166 + 200) += 4;
                JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 7, ((unint64_t)((8 * *(_DWORD *)(v17 + 44) + 8) >> 3) << 35) | 0x1F, v44, v45, v46, v47, v48);
                if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                {
                  v177 = v704;
                  if (*(_BYTE *)v17 != 4
                    || (v562 = *(unsigned __int8 *)(*(_QWORD *)(v17 + 16) + 88), (v562 - 1) > 1)
                    || (*(_BYTE *)(v17 + 1) & 2) != 0)
                  {
                    JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)*(unsigned int *)(v17 + 44) << 35) | 0x1F, 1, v170, v171, v172, v173, v174);
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label((int *)&v739, *v704, v620, v621, v622, v623, v624, v625);
                    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *v704, 0, 7, v626, v627, v628, v629, (uint64_t)&v746, v630);
                    v637 = *(_DWORD *)(v13 + 120 * v9 + 100);
                    v638 = *(_DWORD *)(v17 + 40);
                    if (v637 < v638)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E824C0);
                    }
                    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::readCharacter(a1, v637 - v638, v631, v632, v633, v634, v635, v636);
                    v646 = *(_DWORD **)(a1 + 8);
                    v647 = v646[50];
                    if (v647 + 4 > v646[48])
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v646 + 14), v639, v640, v641, v642, v643, v644, v645);
                      v647 = v646[50];
                    }
                    *(_DWORD *)(*((_QWORD *)v646 + 7) + v647) = 1358955751;
                    v646[50] += 4;
                    v177 = v704;
                    v648 = *v704;
                    v649 = *(_DWORD *)(*v704 + 200);
                    if (v649 + 4 > *(_DWORD *)(*v704 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v648 + 56), v639, v640, v641, v642, v643, v644, v645);
                      v649 = *(_DWORD *)(v648 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v648 + 56) + v649) = 285213729;
                    *(_DWORD *)(v648 + 200) += 4;
                    JSC::MacroAssemblerARM64::branch32(*v704, 11, 6, 0x10000, v642, v643, v644, v645, (uint64_t)&v744);
                    v657 = *v704;
                    v658 = *(_DWORD *)(*v704 + 200);
                    if (v658 + 4 > *(_DWORD *)(*v704 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v657 + 56), v650, v651, v652, v653, v654, v655, v656);
                      v658 = *(_DWORD *)(v657 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v657 + 56) + v658) = 285213729;
                    *(_DWORD *)(v657 + 200) += 4;
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v744, *v704, v651, v652, v653, v654, v655, v656);
                    v659 = *v704;
                    v737 = v739;
                    JSC::MacroAssembler::jump(v659, &v737, v660, v661, v662, v663, v664, v665);
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v746, *v704, v666, v667, v668, v669, v670, v671);
                    JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)((8 * *(_DWORD *)(v17 + 44) + 8) >> 3) << 35) | 0x1F, 7, v672, v673, v674, v675, v676);
                    v10 = v703;
                  }
                  else
                  {
                    if ((v562 & 2) != 0)
                      v563 = 2;
                    else
                      v563 = 1;
                    JSC::MacroAssemblerARM64::sub32(*v704, 1, v563, 1, v171, v172, v173, v174);
                  }
                }
                else
                {
                  v175 = *v704;
                  v176 = *(_DWORD *)(*v704 + 200);
                  if (v176 + 4 > *(_DWORD *)(*v704 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v175 + 56), v168, v169, v170, v171, v172, v173, v174);
                    v176 = *(_DWORD *)(v175 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v175 + 56) + v176) = 1358955553;
                  *(_DWORD *)(v175 + 200) += 4;
                  v177 = v704;
                }
                v178 = *v177;
                goto LABEL_118;
              }
              if (v31 != 2)
                goto LABEL_10;
              *(_QWORD *)&v746 = v747;
              *((_QWORD *)&v746 + 1) = 2;
              *(_QWORD *)&v744 = v745;
              *((_QWORD *)&v744 + 1) = 2;
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)((8 * *(_DWORD *)(v17 + 44) + 8) >> 3) << 35) | 0x1F, 7, v368, v369, v370, v371, v372);
              v380 = *v704;
              v381 = (JSC::AssemblerBuffer *)(*v704 + 56);
              v382 = *(_DWORD *)(*v704 + 200);
              if (v382 + 4 > *(_DWORD *)(*v704 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v381, v373, v374, v375, v376, v377, v378, v379);
                v382 = *(_DWORD *)(v380 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v380 + 56) + v382) = 1795293247;
              v383 = *(_DWORD *)(v380 + 200) + 4;
              *(_DWORD *)(v380 + 200) = v383;
              if (*(_BYTE *)(v380 + 328))
              {
                while ((signed int)v383 < *(_DWORD *)(v380 + 52))
                {
                  if (v383 + 4 > *(_DWORD *)(v380 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v381, v373, v374, v375, v376, v377, v378, v379);
                    v383 = *(_DWORD *)(v380 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v380 + 56) + v383) = -721215457;
                  v383 = *(_DWORD *)(v380 + 200) + 4;
                  *(_DWORD *)(v380 + 200) = v383;
                }
                *(_DWORD *)(v380 + 208) = 0;
              }
              if (v383 + 4 > *(_DWORD *)(v380 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v381, v373, v374, v375, v376, v377, v378, v379);
                v383 = *(_DWORD *)(v380 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v380 + 56) + v383) = 1409286144;
              v384 = *(_DWORD *)(v380 + 200);
              v385 = v384 + 4;
              *(_DWORD *)(v380 + 200) = v384 + 4;
              v386 = v384 + 8;
              v387 = v384 + 4;
              if (v386 > *(_DWORD *)(v380 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v381, v373, v374, v375, v376, v377, v378, v379);
                v387 = *(_DWORD *)(v380 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v380 + 56) + v387) = -721215457;
              *(_DWORD *)(v380 + 200) += 4;
              if (*(_BYTE *)(v380 + 328))
                v388 = -122;
              else
                v388 = -126;
              v739 = v385;
              v740 = 0;
              v741 = v388;
              v742 = 0;
              v743 = -1;
              if (v385 != -1)
              {
                if (HIDWORD(v746) == DWORD2(v746))
                {
                  v389 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v746, (void *)(HIDWORD(v746) + 1), (unint64_t)&v739, v375, v376, v377, v378, v379);
                  v391 = *v389;
                  v390 = v389 + 1;
                  v392 = v746 + 12 * HIDWORD(v746);
                  *(_DWORD *)v392 = v391;
                }
                else
                {
                  v390 = &v740;
                  v392 = v746 + 12 * HIDWORD(v746);
                  *(_DWORD *)v392 = v385;
                }
                *(_QWORD *)(v392 + 4) = *(_QWORD *)v390;
                ++HIDWORD(v746);
              }
              JSC::MacroAssemblerARM64::branch32(*v704, 0, 7, *(unsigned int *)(v17 + 8), v376, v377, v378, v379, (uint64_t)&v737);
              v527 = v737;
              if (v737 != -1)
              {
                v528 = HIDWORD(v746);
                if (HIDWORD(v746) == DWORD2(v746))
                {
                  v529 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v746, (void *)(HIDWORD(v746) + 1), (unint64_t)&v737, v522, v523, v524, v525, v526);
                  v531 = *v529;
                  v530 = v529 + 1;
                  v527 = v531;
                  v528 = HIDWORD(v746);
                }
                else
                {
                  v530 = &v738;
                }
                v532 = v746 + 12 * v528;
                *(_DWORD *)v532 = v527;
                *(_QWORD *)(v532 + 4) = *(_QWORD *)v530;
                ++HIDWORD(v746);
              }
              v533 = *(_DWORD *)(v13 + 120 * v9 + 100);
              v534 = *(_DWORD *)(v17 + 40);
              v535 = v533 - v534;
              if (v533 < v534)
              {
                __break(0xC471u);
                JUMPOUT(0x198E82488);
              }
              v536 = *(unsigned __int8 *)(a1 + 80);
              if (*(_BYTE *)(a1 + 80))
                v537 = 0x3FFFFFFF;
              else
                v537 = 0x7FFFFFFF;
              if (v535 > v537)
              {
                JSC::MacroAssemblerARM64::move((_DWORD *)*v704, 0, 6, v522, v523, v524, v525, v526);
                do
                {
                  JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, v523, v524, v525, v526);
                  if (*(_BYTE *)(a1 + 80))
                    JSC::MacroAssemblerARM64::sub64(*v704, 6, 0x40000000, 6, v523, v524, v525, v526);
                  v691 = v535 - 0x40000000;
                  if (v535 < 0x40000000)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E824D0);
                  }
                  v535 -= 0x40000000;
                }
                while (v691 > v537);
                v536 = *(unsigned __int8 *)(a1 + 80);
                v535 = v691;
              }
              if (v536)
              {
                if (v535 >= 1073741825)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E82498);
                }
                v602 = (-2 * v535) | 0x200000000;
                if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v602, 6, v523, v524, v525, v526);
                else
                  JSC::MacroAssemblerARM64::load16(*v704, 0x100000100uLL, v602, 6, v523, v524, v525, v526);
              }
              else
              {
                JSC::MacroAssemblerARM64::load8(*v704, 0x100uLL, -v535 | 0x200000000, 6, v523, v524, v525, v526);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassTermInner(a1, v17, (uint64_t)&v746, v538, v539, v540, v541, v542);
              if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              {
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::advanceIndexAfterCharacterClassTermMatch(a1, v17, (uint64_t)&v744, v545, v546, v547, v548, v549);
              }
              else
              {
                v550 = *v704;
                v551 = *(_DWORD *)(*v704 + 200);
                if (v551 + 4 > *(_DWORD *)(*v704 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v550 + 56), v543, v544, v545, v546, v547, v548, v549);
                  v551 = *(_DWORD *)(v550 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v550 + 56) + v551) = 285213729;
                *(_DWORD *)(v550 + 200) += 4;
              }
              v552 = *v704;
              v553 = *(_DWORD *)(*v704 + 200);
              if (v553 + 4 > *(_DWORD *)(*v704 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v552 + 56), v543, v544, v545, v546, v547, v548, v549);
                v553 = *(_DWORD *)(v552 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v552 + 56) + v553) = 285213927;
              *(_DWORD *)(v552 + 200) += 4;
              v554 = *v704;
              v736 = *(_DWORD *)(v13 + 120 * v9 + 36);
              JSC::MacroAssembler::jump(v554, &v736, v544, v545, v546, v547, v548, v549);
              if (HIDWORD(v744))
              {
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v744, *v704, (uint64_t)a3, a4, a5, a6, a7, a8);
                v611 = *v704;
                v612 = *(_DWORD *)(*v704 + 200);
                if (v612 + 4 > *(_DWORD *)(*v704 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v611 + 56), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v612 = *(_DWORD *)(v611 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v611 + 56) + v612) = 1358955553;
                *(_DWORD *)(v611 + 200) += 4;
              }
              v555 = HIDWORD(v746);
              if (HIDWORD(v746))
              {
                v164 = 0;
                v163 = 0;
                v556 = *v704;
                do
                {
                  if (v163 >= HIDWORD(v746))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E82438);
                  }
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v746 + v164), v556, (uint64_t)a3, a4, a5, a6, a7, a8);
                  ++v163;
                  v164 += 12;
                }
                while (v555 != v163);
              }
              if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              {
                JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)*(unsigned int *)(v17 + 44) << 35) | 0x1F, 1, a4, a5, a6, a7, a8);
              }
              else
              {
                v557 = *v704;
                v558 = *(_DWORD *)(*v704 + 200);
                if (v558 + 4 > *(_DWORD *)(*v704 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v557 + 56), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v558 = *(_DWORD *)(v557 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v557 + 56) + v558) = 1258749985;
                *(_DWORD *)(v557 + 200) += 4;
              }
              *(_BYTE *)(a1 + 15784) = 1;
              v559 = v744;
              v10 = v703;
              if (v745 != (_BYTE *)v744 && (_QWORD)v744)
              {
                *(_QWORD *)&v744 = 0;
                DWORD2(v744) = 0;
                WTF::fastFree(v559, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v209 = v746;
              if (v747 == (_BYTE *)v746 || !(_QWORD)v746)
                goto LABEL_10;
              goto LABEL_153;
            case 5:
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::backtrackBackReference(a1, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_10;
            case 6:
              *(_WORD *)(a1 + 82) = 258;
              goto LABEL_10;
            case 7:
            case 8:
              __break(0xC471u);
              JUMPOUT(0x198E81C10);
            case 9:
              v19 = v13 + 120 * v9;
              goto LABEL_8;
            default:
              goto LABEL_10;
          }
        }
        v18 = *(unsigned __int8 *)(v17 + 2);
        if (*(_BYTE *)(v17 + 2))
        {
          if (v18 == 1)
          {
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link((uint64_t)v10, (_DWORD *)*v704, (uint64_t)a3, a4, a5, a6, a7, a8);
            JSC::MacroAssemblerARM64::load64(*v704, ((unint64_t)((8 * *(_DWORD *)(v17 + 44) + 8) >> 3) << 35) | 0x1F, 7, v229, v230, v231, v232, v233);
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *v704, 0, 7, v234, v235, v236, v237, (uint64_t)&v744, v238);
            LODWORD(v746) = v744;
            v246 = *(_QWORD *)((char *)&v744 + 4);
            *(_QWORD *)((char *)&v746 + 4) = *(_QWORD *)((char *)&v744 + 4);
            if ((_DWORD)v744 != -1)
            {
              v247 = *(unsigned int *)(a1 + 15756);
              if ((_DWORD)v247 == *(_DWORD *)(a1 + 15752))
              {
                v341 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v247 + 1), (unint64_t)&v746, v241, v242, v243, v244, v245);
                v342 = (_DWORD *)(*(_QWORD *)(a1 + 15744) + 12 * *(unsigned int *)(a1 + 15756));
                *v342 = *(_DWORD *)v341;
                v343 = v342 + 1;
                v246 = *(_QWORD *)(v341 + 4);
              }
              else
              {
                v344 = (_DWORD *)(*(_QWORD *)v10 + 12 * v247);
                *v344 = v744;
                v343 = v344 + 1;
              }
              *v343 = v246;
              ++*(_DWORD *)(a1 + 15756);
            }
            v296 = *v704;
            v297 = *(_DWORD *)(*v704 + 200);
            if (v297 + 4 > *(_DWORD *)(*v704 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v296 + 56), v239, v240, v241, v242, v243, v244, v245);
              v297 = *(_DWORD *)(v296 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v296 + 56) + v297) = 1358955751;
            *(_DWORD *)(v296 + 200) += 4;
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            {
              if (*(_DWORD *)(v17 + 16) < 0x10000u)
                v298 = 1;
              else
                v298 = 2;
            }
            else
            {
              v298 = 1;
            }
            JSC::MacroAssemblerARM64::sub32(*v704, 1, v298, 1, v242, v243, v244, v245);
            v178 = *v704;
LABEL_118:
            LODWORD(v746) = *(_DWORD *)(v13 + 120 * v9 + 36);
            JSC::MacroAssembler::jump(v178, (unsigned int *)&v746, v169, v170, v171, v172, v173, v174);
          }
          else if (v18 == 2)
          {
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::backtrackPatternCharacterNonGreedy(a1, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
        }
        else
        {
LABEL_7:
          v19 = v13 + 120 * v9;
LABEL_8:
          v20 = (unsigned int *)(v19 + 40);
LABEL_9:
          WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)v10, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_10;
      default:
        goto LABEL_10;
    }
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#2}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35BA058;
  *(_QWORD *)(v4 + 16) = *a2;
  v5 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 240))
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v5);
LABEL_12:
    *v6 = v4;
    *(_DWORD *)(a1 + 244) = v5 + 1;
    return;
  }
  v7 = v5 + (v5 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v5 + 1)
    v9 = v5 + 1;
  else
    v9 = v8;
  if (!(v9 >> 29))
  {
    v10 = *(const void **)(a1 + 232);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a1 + 240) = v9;
    *(_QWORD *)(a1 + 232) = v11;
    memcpy(v11, v10, 8 * v5);
    if (v10)
    {
      if (*(const void **)(a1 + 232) == v10)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
    }
    v5 = *(unsigned int *)(a1 + 244);
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v5);
    goto LABEL_12;
  }
  __break(0xC471u);
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)38072>(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  JSC::ExecutableMemoryHandle *v36;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "Match-only 8-bit regular expression", &v35, (uint64_t)v35);
  v11 = (unsigned int *)v36;
  *a1 = v35;
  a1[1] = 0;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (unsigned int *)a1[1];
    a1[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    v16 = (unsigned int *)v36;
    v36 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }
  }
}

void JSC::Yarr::YarrCodeBlock::set16BitCodeMatchOnly(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)(a1 + 64) = *a2;
  v10 = (unsigned int *)a2[1];
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  v15 = *(unsigned int *)(a1 + 8);
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a3 + 12) + v16;
  if (v17 > v15)
  {
    v18 = v15 + (v15 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17)
      v20 = *(unsigned int *)(a3 + 12) + v16;
    else
      v20 = v19;
    if (v20 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v21 = *(_QWORD **)a1;
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(_QWORD *)a1 = v22;
    memcpy(v22, v21, 8 * v16);
    if (v21)
    {
      if (*(_QWORD **)a1 == v21)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  v30 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v30)
  {
    v31 = *(uint64_t **)a3;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = 8 * v30;
    do
    {
      v34 = *(_QWORD **)a1;
      v35 = *v31;
      *v31++ = 0;
      v34[v32++] = v35;
      v33 -= 8;
    }
    while (v33);
    *(_DWORD *)(a1 + 12) = v32;
  }
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)50227>(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  JSC::ExecutableMemoryHandle *v36;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "Match-only 16-bit regular expression", &v35, (uint64_t)v35);
  v11 = (unsigned int *)v36;
  *a1 = v35;
  a1[1] = 0;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (unsigned int *)a1[1];
    a1[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    v16 = (unsigned int *)v36;
    v36 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }
  }
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)40109>(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  JSC::ExecutableMemoryHandle *v36;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "8-bit regular expression", &v35, (uint64_t)v35);
  v11 = (unsigned int *)v36;
  *a1 = v35;
  a1[1] = 0;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (unsigned int *)a1[1];
    a1[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    v16 = (unsigned int *)v36;
    v36 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }
  }
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)57659>(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  JSC::ExecutableMemoryHandle *v36;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "16-bit regular expression", &v35, (uint64_t)v35);
  v11 = (unsigned int *)v36;
  *a1 = v35;
  a1[1] = 0;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (unsigned int *)a1[1];
    a1[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    v16 = (unsigned int *)v36;
    v36 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }
  }
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::opCompileAlternative(uint64_t result, _DWORD *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, __n128 a11)
{
  unsigned int *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  char v45;
  int v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  _DWORD *v78;
  _DWORD *v79;
  WTF *v80;
  int v81;
  int v82;
  uint64_t v83;
  WTF *v84;
  void **v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  int v130;
  _DWORD *v131;
  _DWORD *v132;
  WTF *v133;
  int v134;
  int v135;
  uint64_t v136;
  WTF *v137;
  _QWORD *v138;
  uint64_t v139;
  WTF *v140;
  WTF *v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  unsigned int v154;
  uint64_t *v155;
  _BYTE v156[12];
  int v157;
  _DWORD *v158;
  int v159;
  uint64_t v160;
  WTF *v161;
  WTF *v162;
  int v163;
  void *v164;
  uint64_t *v165;
  __n128 v166;
  _BYTE *v167;
  char v168;
  char v169;
  char v170;
  unsigned int v171;
  _BYTE v172[36];
  int v173;
  WTF *v174;
  uint64_t v175;
  _BYTE v176[24];
  _BYTE v177[12];
  char v178;
  _BYTE v179[12];
  uint64_t v180;
  uint64_t v181;

  v11 = a3;
  v13 = result;
  v181 = *MEMORY[0x1E0C80C00];
  v14 = a3[3];
  if (v14 >= 2)
  {
    v15 = 64;
    v16 = 1;
    do
    {
      if (v16 - 1 >= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83A74);
      }
      if (v16 >= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83A7CLL);
      }
      v17 = *(_QWORD *)a3;
      v18 = *(_QWORD *)a3 + v15;
      v19 = v18 - 64;
      if (*(_BYTE *)(v18 - 64) == 4 && *(_BYTE *)(v18 - 62) == 0)
      {
        v22 = v18 - 16;
        if (((*(_BYTE *)(result + 84) & 1) == 0
           || *(unsigned __int8 *)(*(_QWORD *)(v17 + v15 - 48) + 88) - 1 <= 1
           && (*(_BYTE *)(v17 + v15 - 63) & 2) == 0)
          && *(_BYTE *)v22 == 3)
        {
          v23 = v17 + v15;
          if (!*(_BYTE *)(v23 - 14))
          {
            LOWORD(v167) = *(_WORD *)v19;
            BYTE2(v167) = *(_BYTE *)(v19 + 2);
            v24 = *(_QWORD *)(v23 - 60);
            *(_OWORD *)&v172[4] = *(_OWORD *)(v23 - 48);
            *(_OWORD *)&v172[20] = *(_OWORD *)(v23 - 32);
            *(_WORD *)v19 = *(_WORD *)v22;
            *(_BYTE *)(v19 + 2) = *(_BYTE *)(v22 + 2);
            *(_QWORD *)(v23 - 60) = *(_QWORD *)(v23 - 12);
            a11 = *(__n128 *)v23;
            v25 = *(_OWORD *)(v23 + 16);
            *(_OWORD *)(v23 - 48) = *(_OWORD *)v23;
            *(_OWORD *)(v23 - 32) = v25;
            if (v16 >= a3[3])
            {
              __break(0xC471u);
              JUMPOUT(0x198E83A84);
            }
            v26 = (_OWORD *)(*(_QWORD *)a3 + v15);
            *((_WORD *)v26 - 8) = (_WORD)v167;
            *((_BYTE *)v26 - 14) = BYTE2(v167);
            *(_QWORD *)((char *)v26 - 12) = v24;
            *v26 = *(_OWORD *)&v172[4];
            v26[1] = *(_OWORD *)&v172[20];
            v14 = a3[3];
          }
        }
      }
      v15 += 48;
    }
    while (v14 - 1 > v16++);
  }
  if (v14)
  {
    v27 = 0;
    v28 = (uint64_t *)(result + 304);
    a11.n128_u64[0] = 4278193985;
    result = 17;
    v165 = (uint64_t *)(v13 + 304);
    v166 = a11;
    while (1)
    {
      v29 = *(_QWORD *)v11;
      v30 = (_BYTE *)(*(_QWORD *)v11 + 48 * v27);
      v167 = v30;
      v31 = *v30;
      if (v31 != 7)
        break;
      v35 = *a2;
      v168 = 6;
      v36 = *(unint64_t **)(v13 + 48);
      if (v36)
        v37 = *v36;
      else
        v37 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 93104);
      if ((unint64_t)v156 < v37)
        goto LABEL_133;
      v38 = v29 + 48 * v27;
      v39 = *(_DWORD *)(v38 + 4);
      v40 = *(_DWORD *)(v38 + 8);
      if (!v39)
      {
        v39 = v40;
LABEL_31:
        v41 = v29 + 48 * v27;
        v42 = (uint64_t *)(v41 + 16);
        v43 = *(_BYTE *)(v41 + 32);
        if (v39 == 1 && (v43 & 1) == 0)
        {
          v45 = 9;
          v170 = 9;
          v169 = 10;
          if (*(_DWORD *)(*v42 + 12) == 1)
          {
            v46 = 10;
            goto LABEL_38;
          }
          v48 = 3;
          v168 = 3;
          v163 = 4;
          v47 = 5;
          v45 = 9;
          v96 = 10;
LABEL_77:
          v159 = v96;
LABEL_40:
          v49 = *(_DWORD *)(v13 + 316);
          v50 = *(_DWORD *)(v13 + 312);
          v160 = v49;
          if (v49 == v50)
          {
            v149 = v47;
            v150 = v35;
            WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOpCode &>((uint64_t)v28, &v170, (uint64_t)a3, a4, a5, a6, a7, a8);
            v35 = v150;
            v47 = v149;
            result = 17;
            a11.n128_u32[0] = v166.n128_u32[0];
            v28 = v165;
            v52 = *(_DWORD *)(v13 + 316);
            v50 = *(_DWORD *)(v13 + 312);
          }
          else
          {
            v51 = *(_QWORD *)(v13 + 304) + 120 * v49;
            *(_BYTE *)(v51 + 32) = v45;
            v52 = v49 + 1;
            *(_DWORD *)(v51 + 36) = -1;
            *(_QWORD *)(v51 + 40) = v51 + 56;
            *(_QWORD *)(v51 + 48) = 2;
            *(_QWORD *)(v51 + 80) = 0xFFFFFFFFLL;
            *(_DWORD *)(v51 + 88) = a11.n128_u32[0];
            *(_BYTE *)(v51 + 92) = 0;
            *(_QWORD *)(v51 + 96) = 0;
            *(_DWORD *)(v51 + 104) = -1;
            *(_QWORD *)(v51 + 112) = 0;
            *(_DWORD *)(v13 + 316) = v49 + 1;
          }
          if (v52 == v50)
          {
            v151 = v35;
            WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOpCode &>((uint64_t)v28, &v168, (uint64_t)a3, a4, a5, a6, a7, a8);
            v35 = v151;
            result = 17;
            a11.n128_u32[0] = v166.n128_u32[0];
            v28 = v165;
            LODWORD(v54) = *(_DWORD *)(v13 + 316);
          }
          else
          {
            v53 = *(_QWORD *)(v13 + 304) + 120 * v52;
            *(_BYTE *)(v53 + 32) = v48;
            LODWORD(v54) = v52 + 1;
            *(_DWORD *)(v53 + 36) = -1;
            *(_QWORD *)(v53 + 40) = v53 + 56;
            *(_QWORD *)(v53 + 48) = 2;
            *(_QWORD *)(v53 + 80) = 0xFFFFFFFFLL;
            *(_DWORD *)(v53 + 88) = a11.n128_u32[0];
            *(_BYTE *)(v53 + 92) = 0;
            *(_QWORD *)(v53 + 96) = 0;
            *(_DWORD *)(v53 + 104) = -1;
            *(_QWORD *)(v53 + 112) = 0;
            *(_DWORD *)(v13 + 316) = v52 + 1;
          }
          if (!(_DWORD)v54)
          {
            __break(0xC471u);
            JUMPOUT(0x198E83A8CLL);
          }
          v55 = v54;
          v56 = v54 - 1;
          v57 = *v28;
          v58 = *v28 + 120 * v56;
          *(_QWORD *)(v58 + 8) = -1;
          *(_QWORD *)(v58 + 24) = v30;
          v59 = *v42;
          if (*(_DWORD *)(*v42 + 12))
          {
            v157 = v47;
            v158 = a2;
            v60 = 0;
            v161 = (WTF *)(v29 + 48 * v27 + 2);
            v162 = (WTF *)v176;
            while (1)
            {
              a3 = *(unsigned int **)(*(_QWORD *)v59 + 8 * v60);
              v61 = v54 - 1;
              v62 = a3[6];
              v63 = v57 + 120 * v61;
              *(_DWORD *)(v63 + 96) = v62;
              v64 = (unsigned int *)(v63 + 96);
              if (!*(_BYTE *)v161 && *v30 != 8)
              {
                v65 = *(_DWORD *)(v59 + 24);
                v66 = v62 >= v65;
                v62 -= v65;
                if (!v66)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E83A94);
                }
                *v64 = v62;
              }
              v66 = __CFADD__((_DWORD)v35, v62);
              v67 = v35 + v62;
              if (v66)
                break;
              *(_DWORD *)(v57 + 120 * v61 + 100) = v67;
              if (v61 >= *(unsigned int *)(v13 + 316))
              {
                __break(0xC471u);
                JUMPOUT(0x198E83A9CLL);
              }
              v68 = v59;
              v69 = v35;
              v171 = v67;
              v164 = a3;
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::opCompileAlternative(v13, &v171);
              v71 = (void *)*(unsigned int *)(v13 + 316);
              v172[32] = v163;
              v173 = -1;
              v72 = v162;
              v174 = v162;
              v175 = 2;
              *(_QWORD *)v177 = 0xFFFFFFFFLL;
              a11.n128_u32[0] = v166.n128_u32[0];
              *(_DWORD *)&v177[8] = v166.n128_u32[0];
              v178 = 0;
              *(_QWORD *)v179 = 0;
              *(_DWORD *)&v179[8] = -1;
              v180 = 0;
              if ((_DWORD)v71 == *(_DWORD *)(v13 + 312))
              {
                v153 = v165;
                WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp>((uint64_t)v165, (unint64_t)v172, (uint64_t)a3, a4, a5, a6, a7, a8);
                v72 = v162;
                a11.n128_u32[0] = v166.n128_u32[0];
                v28 = v153;
              }
              else
              {
                v28 = v165;
                v73 = *v165;
                v74 = *v165 + 120 * v71;
                v75 = *(_OWORD *)v172;
                v76 = *(_OWORD *)&v172[16];
                *(_BYTE *)(v74 + 32) = v172[32];
                *(_OWORD *)v74 = v75;
                *(_OWORD *)(v74 + 16) = v76;
                v77 = v173;
                *(_QWORD *)(v74 + 48) = 2;
                v78 = (_DWORD *)(v74 + 48);
                *(v78 - 3) = v77;
                v79 = v78 + 2;
                *((_QWORD *)v78 - 1) = v78 + 2;
                v80 = v174;
                if (v174 == v72)
                {
                  if (HIDWORD(v175))
                  {
                    v87 = (WTF *)((char *)v72 + 12 * HIDWORD(v175));
                    v88 = v72;
                    do
                    {
                      *v79 = *(_DWORD *)v88;
                      *(_QWORD *)(v79 + 1) = *(_QWORD *)((char *)v88 + 4);
                      v88 = (WTF *)((char *)v88 + 12);
                      v79 += 3;
                    }
                    while (v88 != v87);
                  }
                }
                else
                {
                  v174 = v72;
                  *((_QWORD *)v78 - 1) = v80;
                  v81 = v175;
                  LODWORD(v175) = 2;
                  *v78 = v81;
                }
                v82 = HIDWORD(v175);
                HIDWORD(v175) = 0;
                v78[1] = v82;
                v83 = v73 + 120 * v71;
                *(_DWORD *)(v83 + 80) = *(_DWORD *)v177;
                *(_QWORD *)(v83 + 84) = *(_QWORD *)&v177[4];
                *(_BYTE *)(v83 + 92) = v178;
                *(_DWORD *)(v83 + 96) = *(_DWORD *)v179;
                *(_QWORD *)(v83 + 100) = *(_QWORD *)&v179[4];
                *(_QWORD *)(v83 + 112) = v180;
                ++*(_DWORD *)(v13 + 316);
              }
              v84 = v174;
              if (v72 != v174 && v174)
              {
                v174 = 0;
                LODWORD(v175) = 0;
                WTF::fastFree((unint64_t)v84, v70, (uint64_t)a3, a4, a5, a6, a7, a8);
                a11.n128_u32[0] = v166.n128_u32[0];
                v28 = v165;
              }
              v54 = *(unsigned int *)(v13 + 316);
              if (v61 >= v54)
              {
                __break(0xC471u);
                JUMPOUT(0x198E83AA4);
              }
              result = 17;
              if (v54 <= v71)
              {
                __break(0xC471u);
                JUMPOUT(0x198E83AACLL);
              }
              v35 = v69;
              v57 = *v28;
              v85 = (void **)(*v28 + 120 * v61);
              *v85 = v164;
              v85[2] = v71;
              v86 = v57 + 120 * v71;
              *(_QWORD *)(v86 + 8) = v61;
              *(_QWORD *)(v86 + 24) = v30;
              ++v60;
              v59 = v68;
              if (v60 >= *(unsigned int *)(v68 + 12))
              {
                v56 = v54 - 1;
                v55 = v54;
                a2 = v158;
                LOBYTE(v47) = v157;
                goto LABEL_69;
              }
            }
            *(_WORD *)(v13 + 82) = 265;
            a2 = v158;
          }
          else
          {
LABEL_69:
            v89 = v57 + 120 * v56;
            *(_BYTE *)(v89 + 32) = v47;
            *(_QWORD *)v89 = 0;
            *(_QWORD *)(v89 + 16) = -1;
            *(_DWORD *)(v89 + 100) = v35;
            v90 = v160;
            if ((_DWORD)v54 == *(_DWORD *)(v13 + 312))
            {
              v152 = v35;
              WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOpCode &>((uint64_t)v28, &v169, (uint64_t)a3, a4, a5, a6, a7, a8);
              LODWORD(v35) = v152;
              result = 17;
              a11.n128_u32[0] = v166.n128_u32[0];
              v28 = v165;
              v92 = *(_DWORD *)(v13 + 316);
            }
            else
            {
              v91 = v57 + 120 * v55;
              *(_BYTE *)(v91 + 32) = v159;
              *(_DWORD *)(v91 + 36) = -1;
              v92 = v54 + 1;
              *(_QWORD *)(v91 + 40) = v91 + 56;
              *(_QWORD *)(v91 + 48) = 2;
              *(_QWORD *)(v91 + 80) = 0xFFFFFFFFLL;
              *(_DWORD *)(v91 + 88) = a11.n128_u32[0];
              *(_BYTE *)(v91 + 92) = 0;
              *(_QWORD *)(v91 + 96) = 0;
              *(_DWORD *)(v91 + 104) = -1;
              *(_QWORD *)(v91 + 112) = 0;
              *(_DWORD *)(v13 + 316) = v54 + 1;
            }
            if (v92 <= v90)
            {
              __break(0xC471u);
              JUMPOUT(0x198E83AB4);
            }
            v93 = *v28;
            v94 = *v28 + 120 * v90;
            *(_QWORD *)(v94 + 16) = v55;
            *(_QWORD *)(v94 + 24) = v30;
            *(_QWORD *)(v94 + 8) = -1;
            *(_DWORD *)(v94 + 100) = v35;
            if (v92 <= v54)
            {
              __break(0xC471u);
              JUMPOUT(0x198E83ABCLL);
            }
            v95 = v93 + 120 * v55;
            *(_QWORD *)(v95 + 16) = -1;
            *(_QWORD *)(v95 + 24) = v30;
            *(_QWORD *)(v95 + 8) = v90;
            *(_DWORD *)(v95 + 100) = v35;
          }
          goto LABEL_24;
        }
        if ((v43 & 2) != 0)
        {
          v45 = 11;
          v170 = 11;
          v159 = 12;
          v169 = 12;
LABEL_39:
          v163 = 7;
          v47 = 8;
          v48 = 6;
          goto LABEL_40;
        }
        if (*(_BYTE *)(v29 + 48 * v27 + 2))
        {
          *(_BYTE *)(v13 + 92) = 1;
          v45 = 13;
          v170 = 13;
          v169 = 14;
          if (*(_DWORD *)(*v42 + 12) != 1)
          {
            v48 = 3;
            v168 = 3;
            v163 = 4;
            v47 = 5;
            v45 = 13;
            v96 = 14;
            goto LABEL_77;
          }
          v46 = 14;
LABEL_38:
          v159 = v46;
          goto LABEL_39;
        }
        v142 = 262;
        goto LABEL_117;
      }
      if (v39 == v40)
        goto LABEL_31;
      v142 = 260;
LABEL_117:
      *(_WORD *)(v13 + 82) = v142;
LABEL_24:
      if (++v27 >= (unint64_t)v11[3])
        return result;
    }
    if (v31 != 8)
    {
      v32 = *(_DWORD *)(v13 + 316);
      if (v32 == *(_DWORD *)(v13 + 312))
      {
        WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm *&>((uint64_t)v28, (uint64_t *)&v167, (uint64_t)a3, a4, a5, a6, a7, a8);
        result = 17;
        a11.n128_u32[0] = v166.n128_u32[0];
        v28 = v165;
        v34 = *(_DWORD *)(v13 + 316);
      }
      else
      {
        v33 = *(_QWORD *)(v13 + 304) + 120 * v32;
        *(_QWORD *)(v33 + 24) = v30;
        v34 = v32 + 1;
        *(_BYTE *)(v33 + 32) = 17;
        *(_DWORD *)(v33 + 36) = -1;
        *(_QWORD *)(v33 + 40) = v33 + 56;
        *(_QWORD *)(v33 + 48) = 2;
        *(_QWORD *)(v33 + 80) = 0xFFFFFFFFLL;
        *(_DWORD *)(v33 + 88) = a11.n128_u32[0];
        *(_BYTE *)(v33 + 92) = 0;
        *(_QWORD *)(v33 + 96) = 0;
        *(_DWORD *)(v33 + 104) = -1;
        *(_QWORD *)(v33 + 112) = 0;
        *(_DWORD *)(v13 + 316) = v34;
      }
      if (!v34)
      {
LABEL_138:
        __break(0xC471u);
        JUMPOUT(0x198E83A6CLL);
      }
      *(_DWORD *)(*v28 + 120 * v34 - 20) = *a2;
      goto LABEL_24;
    }
    v97 = *a2;
    v98 = *(unint64_t **)(v13 + 48);
    if (v98)
      v99 = *v98;
    else
      v99 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 93104);
    if ((unint64_t)v156 >= v99)
    {
      v100 = (void *)*(unsigned int *)(v13 + 316);
      v172[0] = 15;
      v101 = *(_DWORD *)(v13 + 312);
      v164 = v100;
      if ((_DWORD)v100 == v101)
      {
        WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOpCode &>((uint64_t)v28, v172, (uint64_t)a3, a4, a5, a6, a7, a8);
        v100 = v164;
        v28 = v165;
        result = 17;
        a11.n128_u32[0] = v166.n128_u32[0];
      }
      else
      {
        v102 = *(_QWORD *)(v13 + 304) + 120 * v100;
        *(_BYTE *)(v102 + 32) = 15;
        *(_DWORD *)(v102 + 36) = -1;
        *(_QWORD *)(v102 + 40) = v102 + 56;
        *(_QWORD *)(v102 + 48) = 2;
        *(_QWORD *)(v102 + 80) = 0xFFFFFFFFLL;
        *(_DWORD *)(v102 + 88) = a11.n128_u32[0];
        *(_BYTE *)(v102 + 92) = 0;
        *(_QWORD *)(v102 + 96) = 0;
        *(_DWORD *)(v102 + 104) = -1;
        *(_QWORD *)(v102 + 112) = 0;
        *(_DWORD *)(v13 + 316) = (_DWORD)v100 + 1;
      }
      v103 = *(_DWORD *)(v29 + 48 * v27 + 40);
      v104 = v97 - v103;
      if (v97 < v103)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83AC4);
      }
      v105 = *(unsigned int *)(v13 + 316);
      if (!(_DWORD)v105)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83ACCLL);
      }
      v106 = *v28;
      *(_DWORD *)(*v28 + 120 * (v105 - 1) + 96) = v104;
      v107 = v97 - v104;
      if (v97 < v104)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83AD4);
      }
      *(_DWORD *)(v106 + 120 * (v105 - 1) + 100) = v107;
      v172[0] = 6;
      v108 = *(_DWORD *)(v13 + 312);
      v163 = v107;
      if ((_DWORD)v105 == v108)
      {
        WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOpCode &>((uint64_t)v28, v172, (uint64_t)a3, a4, a5, a6, a7, a8);
        v107 = v163;
        v100 = v164;
        v28 = v165;
        result = 17;
        a11.n128_u32[0] = v166.n128_u32[0];
        LODWORD(v110) = *(_DWORD *)(v13 + 316);
      }
      else
      {
        v109 = v106 + 120 * v105;
        *(_BYTE *)(v109 + 32) = 6;
        *(_DWORD *)(v109 + 36) = -1;
        LODWORD(v110) = v105 + 1;
        *(_QWORD *)(v109 + 40) = v109 + 56;
        *(_QWORD *)(v109 + 48) = 2;
        *(_QWORD *)(v109 + 80) = 0xFFFFFFFFLL;
        *(_DWORD *)(v109 + 88) = a11.n128_u32[0];
        *(_BYTE *)(v109 + 92) = 0;
        *(_QWORD *)(v109 + 96) = 0;
        *(_DWORD *)(v109 + 104) = -1;
        *(_QWORD *)(v109 + 112) = 0;
        *(_DWORD *)(v13 + 316) = v105 + 1;
      }
      LODWORD(v162) = v97;
      if (!(_DWORD)v110)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83ADCLL);
      }
      v111 = v110;
      v112 = v110 - 1;
      v113 = *v28;
      v114 = *v28 + 120 * v112;
      *(_QWORD *)(v114 + 8) = -1;
      *(_QWORD *)(v114 + 24) = v30;
      a3 = *(unsigned int **)(v29 + 48 * v27 + 16);
      if (a3[3])
      {
        v158 = a2;
        v115 = 0;
        v160 = v29 + 48 * v27 + 2;
        v161 = (WTF *)v176;
        v116 = a3;
        do
        {
          v117 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v115);
          v118 = v110 - 1;
          v119 = *(_DWORD *)(v117 + 24);
          v120 = v113 + 120 * v118;
          *(_DWORD *)(v120 + 96) = v119;
          v121 = (unsigned int *)(v120 + 96);
          if (!*(_BYTE *)v160 && *v30 != 8)
          {
            v154 = a3[6];
            v66 = v119 >= v154;
            v119 -= v154;
            if (!v66)
              goto LABEL_138;
            *v121 = v119;
            v107 = v163;
          }
          v66 = __CFADD__(v107, v119);
          v122 = v107 + v119;
          if (v66)
          {
            __break(0xC471u);
            JUMPOUT(0x198E83AE4);
          }
          *(_DWORD *)(v113 + 120 * v118 + 100) = v122;
          if (v118 >= *(unsigned int *)(v13 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E83AECLL);
          }
          v171 = v122;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::opCompileAlternative(v13, &v171);
          v124 = *(unsigned int *)(v13 + 316);
          v172[32] = 7;
          v173 = -1;
          v125 = v161;
          v174 = v161;
          v175 = 2;
          *(_QWORD *)v177 = 0xFFFFFFFFLL;
          a11.n128_u32[0] = v166.n128_u32[0];
          *(_DWORD *)&v177[8] = v166.n128_u32[0];
          v178 = 0;
          *(_QWORD *)v179 = 0;
          *(_DWORD *)&v179[8] = -1;
          v180 = 0;
          if ((_DWORD)v124 == *(_DWORD *)(v13 + 312))
          {
            v155 = v165;
            WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp>((uint64_t)v165, (unint64_t)v172, v123, a4, a5, a6, a7, a8);
            v125 = v161;
            a11.n128_u32[0] = v166.n128_u32[0];
            v28 = v155;
            v100 = v164;
            a3 = v116;
          }
          else
          {
            v28 = v165;
            v126 = *v165;
            v127 = *v165 + 120 * v124;
            v128 = *(_OWORD *)v172;
            v129 = *(_OWORD *)&v172[16];
            *(_BYTE *)(v127 + 32) = v172[32];
            *(_OWORD *)v127 = v128;
            *(_OWORD *)(v127 + 16) = v129;
            v130 = v173;
            *(_QWORD *)(v127 + 48) = 2;
            v131 = (_DWORD *)(v127 + 48);
            *(v131 - 3) = v130;
            v132 = v131 + 2;
            *((_QWORD *)v131 - 1) = v131 + 2;
            v133 = v174;
            if (v174 == v125)
            {
              v100 = v164;
              a3 = v116;
              if (HIDWORD(v175))
              {
                v140 = (WTF *)((char *)v125 + 12 * HIDWORD(v175));
                v141 = v125;
                do
                {
                  *v132 = *(_DWORD *)v141;
                  *(_QWORD *)(v132 + 1) = *(_QWORD *)((char *)v141 + 4);
                  v141 = (WTF *)((char *)v141 + 12);
                  v132 += 3;
                }
                while (v141 != v140);
              }
            }
            else
            {
              v174 = v125;
              *((_QWORD *)v131 - 1) = v133;
              v134 = v175;
              LODWORD(v175) = 2;
              *v131 = v134;
              v100 = v164;
              a3 = v116;
            }
            v135 = HIDWORD(v175);
            HIDWORD(v175) = 0;
            v131[1] = v135;
            v136 = v126 + 120 * v124;
            *(_DWORD *)(v136 + 80) = *(_DWORD *)v177;
            *(_QWORD *)(v136 + 84) = *(_QWORD *)&v177[4];
            *(_BYTE *)(v136 + 92) = v178;
            *(_DWORD *)(v136 + 96) = *(_DWORD *)v179;
            *(_QWORD *)(v136 + 100) = *(_QWORD *)&v179[4];
            *(_QWORD *)(v136 + 112) = v180;
            ++*(_DWORD *)(v13 + 316);
          }
          v137 = v174;
          if (v125 != v174 && v174)
          {
            v174 = 0;
            LODWORD(v175) = 0;
            WTF::fastFree((unint64_t)v137, v100, (uint64_t)a3, a4, a5, a6, a7, a8);
            a3 = v116;
            v100 = v164;
            v28 = v165;
            a11.n128_u32[0] = v166.n128_u32[0];
          }
          v110 = *(unsigned int *)(v13 + 316);
          v107 = v163;
          if (v118 >= v110)
          {
            __break(0xC471u);
            JUMPOUT(0x198E83AF4);
          }
          result = 17;
          if (v110 <= v124)
          {
            __break(0xC471u);
            JUMPOUT(0x198E83AFCLL);
          }
          v113 = *v28;
          v138 = (_QWORD *)(*v28 + 120 * v118);
          *v138 = v117;
          v138[2] = v124;
          v139 = v113 + 120 * v124;
          *(_QWORD *)(v139 + 8) = v118;
          *(_QWORD *)(v139 + 24) = v30;
          ++v115;
        }
        while (v115 < a3[3]);
        v112 = v110 - 1;
        v111 = v110;
        a2 = v158;
      }
      v143 = v113 + 120 * v112;
      *(_BYTE *)(v143 + 32) = 8;
      *(_QWORD *)v143 = 0;
      *(_QWORD *)(v143 + 16) = -1;
      *(_DWORD *)(v143 + 100) = v107;
      v172[0] = 16;
      if ((_DWORD)v110 == *(_DWORD *)(v13 + 312))
      {
        WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOpCode &>((uint64_t)v28, v172, (uint64_t)a3, a4, a5, a6, a7, a8);
        v100 = v164;
        v28 = v165;
        result = 17;
        a11.n128_u32[0] = v166.n128_u32[0];
        v145 = *(_DWORD *)(v13 + 316);
      }
      else
      {
        v144 = v113 + 120 * v111;
        *(_BYTE *)(v144 + 32) = 16;
        *(_DWORD *)(v144 + 36) = -1;
        v145 = v110 + 1;
        *(_QWORD *)(v144 + 40) = v144 + 56;
        *(_QWORD *)(v144 + 48) = 2;
        *(_QWORD *)(v144 + 80) = 0xFFFFFFFFLL;
        *(_DWORD *)(v144 + 88) = a11.n128_u32[0];
        *(_BYTE *)(v144 + 92) = 0;
        *(_QWORD *)(v144 + 96) = 0;
        *(_DWORD *)(v144 + 104) = -1;
        *(_QWORD *)(v144 + 112) = 0;
        *(_DWORD *)(v13 + 316) = v110 + 1;
      }
      if (v145 <= v100)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83B04);
      }
      v146 = *v28;
      v147 = (_QWORD *)(*v28 + 120 * v100);
      v147[2] = v111;
      v147[3] = v30;
      v147[1] = -1;
      if (v145 <= v110)
      {
        __break(0xC471u);
        JUMPOUT(0x198E83B0CLL);
      }
      v148 = v146 + 120 * v111;
      *(_QWORD *)(v148 + 16) = -1;
      *(_QWORD *)(v148 + 24) = v30;
      *(_QWORD *)(v148 + 8) = v100;
      *(_DWORD *)(v148 + 100) = (_DWORD)v162;
      goto LABEL_24;
    }
LABEL_133:
    v142 = 263;
    goto LABEL_117;
  }
  return result;
}

uint64_t JSC::Yarr::SubjectSampler::sample(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char v8;
  char v9;
  uint64_t v10;
  __int16 *v11;
  __int16 v12;

  v3 = (a3 - 128) >> 1;
  if (a3 <= 0x80)
    v3 = 0;
  LODWORD(v4) = v3 + 128;
  if (v3 + 128 >= a3)
    v4 = a3;
  else
    v4 = v4;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (v3 < v4)
    {
      v5 = *(unsigned __int8 *)(result + 128);
      v6 = v4 - v3;
      v7 = (char *)(a2 + v3);
      do
      {
        v8 = *v7++;
        *(_BYTE *)(result + 128) = ++v5;
        ++*(_BYTE *)(result + (v8 & 0x7F));
        --v6;
      }
      while (v6);
    }
  }
  else if (v3 < v4)
  {
    v9 = *(_BYTE *)(result + 128);
    v10 = v4 - v3;
    v11 = (__int16 *)(a2 + 2 * v3);
    do
    {
      v12 = *v11++;
      ++*(_BYTE *)(result + (v12 & 0x7F));
      --v10;
    }
    while (v10);
    *(_BYTE *)(result + 128) = v9 + v4 - v3;
  }
  return result;
}

double JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp::YarrOp(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  double result;

  v2 = *a2;
  v3 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  v4 = a1 + 56;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 2;
  v5 = *((_QWORD *)a2 + 5);
  if ((__int128 *)v5 == (__int128 *)((char *)a2 + 56))
  {
    v7 = *((_DWORD *)a2 + 13);
    if (v7)
    {
      v8 = v5 + 12 * v7;
      do
      {
        *(_DWORD *)v4 = *(_DWORD *)v5;
        *(_QWORD *)(v4 + 4) = *(_QWORD *)(v5 + 4);
        v5 += 12;
        v4 += 12;
      }
      while (v5 != v8);
    }
  }
  else
  {
    *((_QWORD *)a2 + 5) = (char *)a2 + 56;
    *(_QWORD *)(a1 + 40) = v5;
    v6 = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = 2;
    *(_DWORD *)(a1 + 48) = v6;
  }
  v9 = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 52) = v9;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)((char *)a2 + 84);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  result = *(double *)((char *)a2 + 100);
  *(double *)(a1 + 100) = result;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  return result;
}

void WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 *v9;

  v9 = (__int128 *)WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp::YarrOp(*(_QWORD *)a1 + 120 * *(unsigned int *)(a1 + 12), v9);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v12;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = a3 - v10;
    WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v12;
  }
  return v8;
}

void WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t StatusReg;
  _QWORD *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= a2)
    v10 = a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD *)(a1 + 12);
    if (v10 < 0x81)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 128;
    }
    else
    {
      if (v10 >= 0x2222223)
      {
        __break(0xC471u);
        return;
      }
      v14 = 120 * v10;
      v15 = WTF::fastMalloc((WTF *)(120 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x78;
      *(_QWORD *)a1 = v15;
    }
    if (v13)
    {
      v16 = v12 + 120 * v13;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v18 = &unk_1ECF42000;
      v19 = v12;
      while (1)
      {
        v20 = *(_OWORD *)v19;
        v21 = *(_OWORD *)(v19 + 16);
        *(_BYTE *)(v15 + 32) = *(_BYTE *)(v19 + 32);
        *(_OWORD *)v15 = v20;
        *(_OWORD *)(v15 + 16) = v21;
        *(_DWORD *)(v15 + 36) = *(_DWORD *)(v19 + 36);
        *(_QWORD *)(v15 + 40) = v15 + 56;
        *(_QWORD *)(v15 + 48) = 2;
        v22 = *(_QWORD *)(v19 + 40);
        v23 = v19 + 56;
        if (v22 == v19 + 56)
        {
          v28 = *(_DWORD *)(v19 + 52);
          if (v28)
          {
            v29 = 0;
            v30 = v22 + 12 * v28;
            do
            {
              v31 = v15 + v29;
              v32 = v22 + v29;
              *(_DWORD *)(v31 + 56) = *(_DWORD *)(v22 + v29);
              *(_QWORD *)(v31 + 60) = *(_QWORD *)(v22 + v29 + 4);
              v29 += 12;
            }
            while (v32 + 12 != v30);
          }
        }
        else
        {
          *(_QWORD *)(v19 + 40) = v23;
          *(_QWORD *)(v15 + 40) = v22;
          v24 = *(_DWORD *)(v19 + 48);
          *(_DWORD *)(v19 + 48) = 2;
          *(_DWORD *)(v15 + 48) = v24;
        }
        v25 = *(_DWORD *)(v19 + 52);
        *(_DWORD *)(v19 + 52) = 0;
        *(_DWORD *)(v15 + 52) = v25;
        *(_DWORD *)(v15 + 80) = *(_DWORD *)(v19 + 80);
        *(_QWORD *)(v15 + 84) = *(_QWORD *)(v19 + 84);
        *(_BYTE *)(v15 + 92) = *(_BYTE *)(v19 + 92);
        *(_DWORD *)(v15 + 96) = *(_DWORD *)(v19 + 96);
        *(_QWORD *)(v15 + 100) = *(_QWORD *)(v19 + 100);
        *(_QWORD *)(v15 + 112) = *(_QWORD *)(v19 + 112);
        a2 = *(_QWORD *)(v19 + 40);
        if (v23 == a2 || !a2)
          goto LABEL_21;
        *(_QWORD *)(v19 + 40) = 0;
        *(_DWORD *)(v19 + 48) = 0;
        v26 = *(_QWORD *)(StatusReg + 752);
        if (!v26)
          break;
        if (a2 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) == 0)
        {
          v33 = (unint64_t *)v18[191];
          if (a2 >> 24 < *v33 || v33[1] <= a2 >> 24)
          {
            a4 = 0;
LABEL_33:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, a2, 1, a4, a5, a6, a7, a8);
LABEL_34:
            v18 = (_QWORD *)&unk_1ECF42000;
            goto LABEL_21;
          }
          a4 = (*(_DWORD *)((char *)v33 + ((((a2 >> 24) - *v33) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)v33) & 0xF))) & 3;
          if ((_DWORD)a4 != 1)
            goto LABEL_33;
        }
        v27 = *(unsigned int *)(v26 + 8000);
        if (v27 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v26, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          goto LABEL_34;
        }
        *(_QWORD *)(v26 + 8 * v27) = a2 | 0x5000000000000;
        *(_DWORD *)(v26 + 8000) = v27 + 1;
LABEL_21:
        v15 += 120;
        v19 += 120;
        if (v19 == v16)
          goto LABEL_27;
      }
      pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_34;
    }
LABEL_27:
    if (a1 + 16 != v12 && v12)
    {
      if (*(_QWORD *)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v12, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

double WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOpCode &>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  double result;

  WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a3, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = v10 + 1;
  v12 = *(_QWORD *)a1 + 120 * v10;
  *(_BYTE *)(v12 + 32) = *a2;
  *(_DWORD *)(v12 + 36) = -1;
  *(_QWORD *)(v12 + 40) = v12 + 56;
  *(_QWORD *)(v12 + 48) = 2;
  *(_QWORD *)(v12 + 80) = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 4278193985;
  *(_DWORD *)(v12 + 88) = -16773311;
  *(_BYTE *)(v12 + 92) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_DWORD *)(v12 + 104) = -1;
  *(_QWORD *)(v12 + 112) = 0;
  *(_DWORD *)(a1 + 12) = v11;
  return result;
}

double JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp::YarrOp(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = 17;
  *(_DWORD *)(a1 + 36) = -1;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 80) = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 4278193985;
  *(_DWORD *)(a1 + 88) = -16773311;
  *(_BYTE *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

void WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm *&>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a3, a4, a5, a6, a7, a8);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp::YarrOp(*(_QWORD *)a1 + 120 * *(unsigned int *)(a1 + 12), *a2);
  ++*(_DWORD *)(a1 + 12);
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::collectBoyerMooreInfoFromTerm(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v12;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  void *v64;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v83;
  void *v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;

  v9 = a3;
  v12 = *a2;
  if (v12 == 3)
  {
    if (a2[2] > 1u || *((_DWORD *)a2 + 2) != 1 || *((_DWORD *)a2 + 10) != (_DWORD)a3)
      goto LABEL_162;
    v15 = *((unsigned int *)a2 + 4);
    if (v15 >= 0x10000 && (*(_BYTE *)(a1 + 84) & 1) != 0)
      goto LABEL_162;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) == 0 || (v15 | 0x20) - 97 > 0x19)
    {
      if (*(_DWORD *)(a4 + 12) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E84838);
      }
      v17 = *(_QWORD *)a4 + 56 * v9;
      goto LABEL_19;
    }
    if (*(_DWORD *)(a4 + 12) > v9)
    {
      if ((v15 - 97) >= 0x1A)
        v16 = -1;
      else
        v16 = -33;
      JSC::Yarr::BoyerMooreBitmap::add(*(_QWORD *)a4 + 56 * v9, (void *)*(unsigned __int8 *)(a4 + 16), v16 & v15, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(a4 + 12) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E84830);
      }
      v15 = *((_DWORD *)a2 + 4) | (32 * ((*((_DWORD *)a2 + 4) - 65) < 0x1A));
      v17 = *(_QWORD *)a4 + 56 * v9;
LABEL_19:
      JSC::Yarr::BoyerMooreBitmap::add(v17, (void *)*(unsigned __int8 *)(a4 + 16), v15, a4, a5, a6, a7, a8);
      v25 = a2[2];
      v26 = v9 + 1;
      if (!v25)
      {
LABEL_20:
        LODWORD(v9) = v26;
LABEL_21:
        v27 = v9 & 0xFFFFFF00;
        v28 = 0x100000000;
        LOBYTE(v29) = v9;
        return v28 | v27 | v29;
      }
      v78 = *(_DWORD *)(a4 + 12);
      if (v78 <= v9)
        goto LABEL_21;
      if (v78 != v26)
      {
        v79 = 56 * v78 - 56 * v26;
        v80 = *(_QWORD *)a4 + 56 * v26 + 32;
        do
        {
          v81 = *(_QWORD *)(v80 - 16);
          if (v80 != v81 && v81 != 0)
          {
            *(_QWORD *)(v80 - 16) = 0;
            *(_DWORD *)(v80 - 8) = 0;
            WTF::fastFree(v81, v18, v19, v20, v21, v22, v23, v24);
          }
          v80 += 56;
          v79 -= 56;
        }
        while (v79);
      }
LABEL_127:
      *(_DWORD *)(a4 + 12) = v26;
      goto LABEL_21;
    }
LABEL_171:
    __break(0xC471u);
    JUMPOUT(0x198E84828);
  }
  if (v12 == 4)
  {
    v31 = a2[2];
    if (v31 > 1 || *((_DWORD *)a2 + 2) != 1 || *((_DWORD *)a2 + 10) != (_DWORD)a3)
      goto LABEL_162;
    if ((a2[1] & 2) == 0)
    {
      v34 = *((_QWORD *)a2 + 2);
      if ((*(_BYTE *)(v34 + 89) & 2) == 0)
      {
        v35 = *(unsigned int *)(v34 + 76);
        if ((_DWORD)v35)
        {
          if (*(_DWORD *)(a4 + 12) <= a3)
            goto LABEL_171;
          JSC::Yarr::BoyerMooreBitmap::addRanges(*(_QWORD *)a4 + 56 * a3, (void *)*(unsigned __int8 *)(a4 + 16), *(unsigned int **)(v34 + 64), v35, a5, a6, a7, a8);
        }
        v36 = *(unsigned int *)(v34 + 60);
        if ((_DWORD)v36)
        {
          if (*(_DWORD *)(a4 + 12) <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x198E84858);
          }
          v83 = *(_QWORD *)a4 + 56 * v9;
          if (*(_DWORD *)(v83 + 48) != 128)
          {
            v84 = (void *)*(unsigned __int8 *)(a4 + 16);
            v85 = *(unsigned int **)(v34 + 48);
            v86 = 4 * v36;
            if (*(_BYTE *)(a4 + 16))
            {
              v87 = v86 - 4;
              do
              {
                v88 = *v85++;
                v89 = !JSC::Yarr::BoyerMooreBitmap::add(v83, v84, v88, v35, a5, a6, a7, a8) || v87 == 0;
                v87 -= 4;
              }
              while (!v89);
            }
            else
            {
              v92 = v86 - 4;
              do
              {
                a3 = *v85;
                if (a3 > 0xFF)
                  break;
                ++v85;
                v93 = !JSC::Yarr::BoyerMooreBitmap::add(v83, 0, a3, v35, a5, a6, a7, a8) || v92 == 0;
                v92 -= 4;
              }
              while (!v93);
            }
          }
        }
        v37 = *(unsigned int *)(v34 + 44);
        if ((_DWORD)v37)
        {
          if (*(_DWORD *)(a4 + 12) <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x198E84848);
          }
          v63 = *(_QWORD *)a4 + 56 * v9;
          if (*(_DWORD *)(v63 + 48) != 128)
          {
            v64 = (void *)*(unsigned __int8 *)(a4 + 16);
            v65 = *(unsigned int **)(v34 + 32);
            v66 = &v65[2 * v37];
            if (*(_BYTE *)(a4 + 16))
            {
              while (1)
              {
                v90 = *v65;
                v91 = v65[1];
                if (v91 - v90 - 127 < 0xFFFFFF80)
                {
LABEL_159:
                  *(_DWORD *)(v63 + 48) = 128;
                  goto LABEL_39;
                }
                if (v91 >= v90)
                  break;
LABEL_148:
                v65 += 2;
                if (v65 == v66)
                  goto LABEL_39;
              }
              while (JSC::Yarr::BoyerMooreBitmap::add(v63, v64, v90, v35, a5, a6, a7, a8))
              {
                v90 = (v90 + 1);
                if (v90 > v91)
                  goto LABEL_148;
              }
            }
            else
            {
              do
              {
                v67 = *v65;
                if (v67 > 0xFF)
                  break;
                v68 = v65[1];
                if (v68 >= 0x100)
                  v68 = 255;
                if (v68 - v67 - 127 < 0xFFFFFF80)
                  goto LABEL_159;
                if (v68 >= v67)
                {
                  v69 = v68 + 1;
                  while (JSC::Yarr::BoyerMooreBitmap::add(v63, 0, v67, v35, a5, a6, a7, a8))
                  {
                    v67 = (v67 + 1);
                    if (v69 == (_DWORD)v67)
                      goto LABEL_96;
                  }
                  break;
                }
LABEL_96:
                v65 += 2;
              }
              while (v65 != v66);
            }
          }
        }
LABEL_39:
        v38 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v38)
        {
          if (*(_DWORD *)(a4 + 12) <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x198E84840);
          }
          v39 = *(_QWORD *)a4 + 56 * v9;
          if (*(_DWORD *)(v39 + 48) != 128)
          {
            v40 = (void *)*(unsigned __int8 *)(a4 + 16);
            v41 = *(unsigned int **)(v34 + 16);
            v42 = 4 * v38;
            if (*(_BYTE *)(a4 + 16))
            {
              v43 = v42 - 4;
              do
              {
                v44 = *v41++;
                v45 = !JSC::Yarr::BoyerMooreBitmap::add(v39, v40, v44, v35, a5, a6, a7, a8) || v43 == 0;
                v43 -= 4;
              }
              while (!v45);
            }
            else
            {
              v70 = v42 - 4;
              do
              {
                a3 = *v41;
                if (a3 > 0xFF)
                  break;
                ++v41;
                v71 = !JSC::Yarr::BoyerMooreBitmap::add(v39, 0, a3, v35, a5, a6, a7, a8) || v70 == 0;
                v70 -= 4;
              }
              while (!v71);
            }
          }
        }
        v72 = a2[2];
        v26 = v9 + 1;
        if (!v72)
          goto LABEL_20;
        v73 = *(_DWORD *)(a4 + 12);
        if (v73 < v26)
          goto LABEL_21;
        if (v73 != v26)
        {
          v74 = 56 * v73 - 56 * v26;
          v75 = *(_QWORD *)a4 + 56 * v26 + 32;
          do
          {
            v76 = *(_QWORD *)(v75 - 16);
            if (v75 != v76 && v76 != 0)
            {
              *(_QWORD *)(v75 - 16) = 0;
              *(_DWORD *)(v75 - 8) = 0;
              WTF::fastFree(v76, a2, a3, v35, a5, a6, a7, a8);
            }
            v75 += 56;
            v74 -= 56;
          }
          while (v74);
        }
        goto LABEL_127;
      }
    }
LABEL_130:
    if (*(_DWORD *)(a4 + 12) <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198E84850);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 56 * v9 + 48) = 128;
    if (v31)
      JSC::Yarr::BoyerMooreInfo::shortenLength(a4, (v9 + 1), a3, a4, a5, a6, a7, a8);
    else
      LODWORD(v9) = v9 + 1;
    goto LABEL_21;
  }
  if (v12 < 3)
    goto LABEL_21;
  if (v12 != 7)
    goto LABEL_162;
  LOBYTE(v29) = 0;
  v28 = 0;
  if (a2[2] > 1u)
  {
    v27 = 0;
    return v28 | v27 | v29;
  }
  v27 = 0;
  if (*((_DWORD *)a2 + 2) != 1)
    return v28 | v27 | v29;
  if ((a2[1] & 6) != 0)
  {
LABEL_162:
    v28 = 0;
    LOBYTE(v29) = 0;
    v27 = 0;
    return v28 | v27 | v29;
  }
  v46 = *((_QWORD *)a2 + 2);
  if (*(_DWORD *)(v46 + 12))
  {
    v47 = 0;
    v29 = 0;
    v48 = 1;
    v94 = *((_QWORD *)a2 + 2);
    while (1)
    {
      v95 = v48;
      v49 = *(_QWORD *)(*(_QWORD *)v46 + 8 * v47);
      if (*(_DWORD *)(v49 + 12))
        v50 = *(_DWORD *)(a4 + 12) > v9;
      else
        v50 = 0;
      LODWORD(v51) = v9;
      if (v50)
      {
        v52 = 0;
        v53 = 1;
        v54 = v9;
        while (1)
        {
          v51 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::collectBoyerMooreInfoFromTerm(a1, *(_QWORD *)v49 + v52, v54, a4);
          if (!HIDWORD(v51))
            break;
          v52 += 48;
          v56 = v53++ < *(unsigned int *)(v49 + 12) && *(_DWORD *)(a4 + 12) > v51;
          v54 = v51;
          if (!v56)
            goto LABEL_67;
        }
        JSC::Yarr::BoyerMooreInfo::shortenLength(a4, v54, a3, a4, a5, a6, a7, a8);
        LODWORD(v51) = v54;
      }
LABEL_67:
      if ((v95 & 1) != 0)
      {
        v29 = v51;
      }
      else if (v29 != (_DWORD)v51)
      {
        if (v29 >= v51)
          v29 = v51;
        v57 = v29 + 1;
        v58 = *(_DWORD *)(a4 + 12);
        v46 = v94;
        if (v58 >= v29 + 1)
        {
          if (v58 != v57)
          {
            v59 = 56 * v58 - 56 * v57;
            v60 = *(_QWORD *)a4 + 56 * v57 + 32;
            do
            {
              v61 = *(_QWORD *)(v60 - 16);
              if (v60 != v61 && v61 != 0)
              {
                *(_QWORD *)(v60 - 16) = 0;
                *(_DWORD *)(v60 - 8) = 0;
                WTF::fastFree(v61, a2, a3, a4, a5, a6, a7, a8);
              }
              v60 += 56;
              v59 -= 56;
            }
            while (v59);
          }
          *(_DWORD *)(a4 + 12) = v57;
        }
        goto LABEL_70;
      }
      v46 = v94;
LABEL_70:
      v48 = 0;
      if (++v47 >= (unint64_t)*(unsigned int *)(v46 + 12))
      {
        if (!a2[2])
          goto LABEL_117;
        goto LABEL_158;
      }
    }
  }
  if (!a2[2])
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_130;
  }
LABEL_158:
  JSC::Yarr::BoyerMooreInfo::shortenLength(a4, (v9 + 1), a3, a4, a5, a6, a7, a8);
  v29 = v9;
LABEL_117:
  v27 = v29 & 0xFFFFFF00;
  v28 = 0x100000000;
  return v28 | v27 | v29;
}

uint64_t JSC::Yarr::BoyerMooreInfo::shortenLength(uint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v8 = *(_DWORD *)(this + 12);
  if (v8 >= a2)
  {
    if (v8 != (_DWORD)a2)
    {
      v9 = 56 * v8 - 56 * a2;
      v10 = *(_QWORD *)this + 56 * a2 + 32;
      do
      {
        v11 = *(_QWORD *)(v10 - 16);
        if (v10 != v11 && v11 != 0)
        {
          *(_QWORD *)(v10 - 16) = 0;
          *(_DWORD *)(v10 - 8) = 0;
          v16 = this;
          v15 = a2;
          v13 = v9;
          v14 = v10;
          WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
          v9 = v13;
          v10 = v14;
          this = v16;
          a2 = v15;
        }
        v10 += 56;
        v9 -= 56;
      }
      while (v9);
    }
    *(_DWORD *)(this + 12) = a2;
  }
  return this;
}

uint64_t JSC::Yarr::BoyerMooreInfo::addCharacters(uint64_t result, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (*(_DWORD *)(result + 12) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v8 = *(_QWORD *)result + 56 * a2;
    if (*(_DWORD *)(v8 + 48) != 128 && (_DWORD)a4 != 0)
    {
      v11 = (void *)*(unsigned __int8 *)(result + 16);
      v12 = 4 * a4;
      if (*(_BYTE *)(result + 16))
      {
        v13 = v12 - 4;
        do
        {
          v14 = *a3++;
          result = JSC::Yarr::BoyerMooreBitmap::add(v8, v11, v14, a4, a5, a6, a7, a8);
          if ((_DWORD)result)
            v15 = v13 == 0;
          else
            v15 = 1;
          v13 -= 4;
        }
        while (!v15);
      }
      else
      {
        v16 = v12 - 4;
        do
        {
          v17 = *a3;
          if (v17 > 0xFF)
            break;
          result = JSC::Yarr::BoyerMooreBitmap::add(v8, 0, v17, a4, a5, a6, a7, a8);
          ++a3;
          v18 = !(_DWORD)result || v16 == 0;
          v16 -= 4;
        }
        while (!v18);
      }
    }
  }
  return result;
}

uint64_t JSC::Yarr::BoyerMooreBitmap::addRanges(uint64_t result, void *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  if (*(_DWORD *)(result + 48) != 128 && (_DWORD)a4 != 0)
  {
    v9 = a3;
    v11 = result;
    v12 = &a3[2 * a4];
    if ((_DWORD)a2)
    {
      while (1)
      {
        v16 = *v9;
        v17 = v9[1];
        if (v17 - v16 - 127 < 0xFFFFFF80)
        {
LABEL_22:
          *(_DWORD *)(v11 + 48) = 128;
          return result;
        }
        if (v17 >= v16)
          break;
LABEL_20:
        v9 += 2;
        if (v9 == v12)
          return result;
      }
      while (1)
      {
        result = JSC::Yarr::BoyerMooreBitmap::add(v11, a2, v16, a4, a5, a6, a7, a8);
        if ((result & 1) == 0)
          break;
        v16 = (v16 + 1);
        if (v16 > v17)
          goto LABEL_20;
      }
    }
    else
    {
      do
      {
        v13 = *v9;
        if (v13 > 0xFF)
          break;
        v14 = v9[1];
        if (v14 >= 0x100)
          v14 = 255;
        if (v14 - v13 - 127 < 0xFFFFFF80)
          goto LABEL_22;
        if (v14 >= v13)
        {
          v15 = v14 + 1;
          do
          {
            result = JSC::Yarr::BoyerMooreBitmap::add(v11, 0, v13, a4, a5, a6, a7, a8);
            if ((result & 1) == 0)
              return result;
            v13 = (v13 + 1);
          }
          while (v15 != (_DWORD)v13);
        }
        v9 += 2;
      }
      while (v9 != v12);
    }
  }
  return result;
}

BOOL JSC::Yarr::BoyerMooreBitmap::add(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (*(_DWORD *)(a1 + 48) == 128)
    return 0;
  if (!(_DWORD)a2 && a3 > 0xFF)
    return 1;
  v21 = a3;
  if (*(_BYTE *)(a1 + 40))
  {
    v8 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v8)
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 16);
      while (*(_DWORD *)(v15 + v14) != (_DWORD)a3)
      {
        v14 += 4;
        if (4 * v8 == v14)
        {
          if (v8 <= 1)
            goto LABEL_6;
          if (*(_DWORD *)(a1 + 24))
          {
            *(_DWORD *)(a1 + 28) = 0;
            if (a1 + 32 != v15)
            {
              *(_QWORD *)(a1 + 16) = 0;
              *(_DWORD *)(a1 + 24) = 0;
              v20 = a1;
              v18 = a3;
              v16 = a1 + 32;
              WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
              LOBYTE(a3) = v18;
              a1 = v20;
              if (!*(_QWORD *)(v20 + 16))
              {
                *(_QWORD *)(v20 + 16) = v16;
                *(_DWORD *)(v20 + 24) = 2;
              }
            }
          }
          *(_BYTE *)(a1 + 40) = 0;
          break;
        }
      }
    }
    else
    {
LABEL_6:
      if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
      {
        v19 = a1;
        v17 = a3;
        WTF::Vector<char32_t,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 16, (unint64_t)&v21);
        LOBYTE(a3) = v17;
        a1 = v19;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v8) = a3;
        *(_DWORD *)(a1 + 28) = v8 + 1;
      }
    }
  }
  v9 = (unint64_t)(a3 & 0x7F) >> 6;
  v10 = *(_QWORD *)(a1 + 8 * v9);
  v11 = 1 << (a3 & 0x7F);
  v12 = *(_DWORD *)(a1 + 48);
  if ((v10 & v11) == 0)
  {
    *(_QWORD *)(a1 + 8 * v9) = v10 | v11;
    *(_DWORD *)(a1 + 48) = ++v12;
  }
  return v12 != 128;
}

uint64_t *WTF::Vector<WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniqueRef<JSC::Yarr::BoyerMooreInfo>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

int *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label(int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::AssemblerBuffer *v9;
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  int *v12;

  v8 = *(_DWORD *)(a2 + 200);
  *result = v8;
  if (v8 < *(_DWORD *)(a2 + 52))
  {
    v9 = (JSC::AssemblerBuffer *)(a2 + 56);
    do
    {
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        v12 = result;
        v10 = v9;
        v11 = a2;
        JSC::AssemblerBuffer::outOfLineGrow(v9, a2, a3, a4, a5, a6, a7, a8);
        v9 = v10;
        a2 = v11;
        result = v12;
        v8 = *(_DWORD *)(v11 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
      *result = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 208) = 0;
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateTerm(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  signed int v20;
  int v21;
  signed int v22;
  _QWORD *v23;
  uint64_t v24;
  JSC::AssemblerBuffer *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  _DWORD *v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  JSC::Yarr::YarrPattern *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int i;
  unsigned int v121;
  char v122;
  int *v123;
  int *v124;
  int v125;
  char *v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  unsigned int v145;
  _DWORD *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unsigned int v172;
  _DWORD *v173;
  unsigned int v174;
  _DWORD *v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  char v184;
  _DWORD *v185;
  _QWORD *v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  _DWORD *v203;
  _QWORD *v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  char v216;
  uint64_t v217;
  _DWORD *v218;
  _QWORD *v219;
  int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  WTF *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int k;
  unsigned int v242;
  char v243;
  _DWORD *v244;
  _QWORD *v245;
  int v246;
  unint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  unsigned int v258;
  _DWORD *v259;
  _QWORD *v260;
  int v261;
  unint64_t v262;
  _DWORD *v263;
  unsigned int v264;
  _DWORD *v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  _DWORD *v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  WTF *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unsigned int v292;
  WTF *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  int v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  WTF *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  WTF *v313;
  WTF *v315;
  WTF *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _DWORD *v325;
  int j;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  int v330;
  int v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _DWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _DWORD *v346;
  unsigned int v347;
  uint64_t v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  char v355;
  uint64_t v356;
  uint64_t v357;
  _DWORD *v358;
  unsigned int v359;
  _DWORD *v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  _DWORD *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  char v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  char v480;
  signed int v481;
  _QWORD *v482;
  _QWORD *v483;
  unsigned int v484;
  int v485;
  JSC::AssemblerBuffer *v486;
  uint64_t v487;
  unsigned int v488;
  unsigned int *v489;
  unsigned int v490;
  unsigned int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  _DWORD *v498;
  unsigned int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  _DWORD *v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  char v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  _DWORD *v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  char v543;
  _DWORD *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int v551;
  int v552;
  _DWORD *v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  _DWORD *v572;
  unsigned int v573;
  _DWORD *v574;
  unsigned int v575;
  unsigned int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  _DWORD *v590;
  unsigned int v591;
  _DWORD *v592;
  _QWORD *v593;
  int v594;
  uint64_t v595;
  unsigned int v596;
  int v597;
  uint64_t v598;
  unsigned int v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  unsigned int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  _DWORD *v613;
  unsigned int v614;
  unsigned int v615;
  uint64_t v616;
  uint64_t v617;
  _DWORD *v618;
  unsigned int v619;
  unsigned int v620;
  uint64_t v621;
  uint64_t v622;
  _DWORD *v623;
  unsigned int v624;
  unsigned int v625;
  uint64_t v626;
  uint64_t v627;
  _DWORD *v628;
  unsigned int v629;
  unsigned int v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  unsigned int v638;
  int v639;
  unsigned int v640;
  uint64_t v641;
  _DWORD *v642;
  unsigned int v643;
  unsigned int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  uint64_t v660;
  unsigned int v661;
  uint64_t v662;
  int v663;
  BOOL v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  char v672;
  _BYTE *v673;
  uint64_t v674;
  int v675;
  uint64_t v676;
  JSC::AssemblerBuffer *v677;
  int v678;
  _QWORD *v679;
  _DWORD v680[2];
  char v681;
  __int16 v682;
  char v683;
  WTF *v684;
  uint64_t v685;
  _BYTE v686[24];
  WTF *v687;
  uint64_t v688;
  _BYTE v689[24];
  int v690;
  int v691;
  char v692;
  __int16 v693;
  char v694;
  unsigned int v695[2];
  char v696;
  __int16 v697;
  char v698;
  WTF *v699;
  uint64_t v700;
  _BYTE v701[24];
  __int128 v702;
  _QWORD v703[3];
  unint64_t v704;
  uint64_t v705;
  _QWORD v706[3];
  _BYTE v707[12];
  int v708[3];

  v8 = *(unsigned int *)(a1 + 316);
  if (v8 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E87860);
  }
  v9 = a2;
  v11 = *(_QWORD *)(a1 + 304);
  v12 = *(_QWORD *)(v11 + 120 * a2 + 24);
  if (*(_BYTE *)v12 != 3)
  {
    switch(*(_BYTE *)v12)
    {
      case 0:
        if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) != 0)
        {
          v704 = (unint64_t)v706;
          v705 = 2;
          v394 = *(_DWORD *)(v12 + 40);
          if (!v394)
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, *(unsigned int *)(v11 + 120 * a2 + 100), a5, a6, a7, a8, (uint64_t)&v702);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v704, &v702, v395, v396, v397, v398, v399, v400);
            v394 = *(_DWORD *)(v12 + 40);
          }
          v401 = *(_DWORD *)(v11 + 120 * v9 + 100);
          v94 = v401 >= v394;
          v402 = v401 - v394;
          if (!v94)
          {
            __break(0xC471u);
            JUMPOUT(0x198E879C0);
          }
          if (v402 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198E879C8);
          }
          v403 = v402 + 1;
          goto LABEL_387;
        }
        v193 = *(_DWORD *)(v12 + 40);
        v194 = v11 + 120 * a2 + 40;
        v195 = *(_QWORD *)(a1 + 8);
        if (v193)
        {
          JSC::ARM64Assembler::label((_DWORD *)(v195 + 32), a2, a3, a4, a5, a6, a7, a8, (int *)&v702);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v195 + 56), 335544320, v531, v532, v533, v534, v535, v536);
          if (*(_BYTE *)(v195 + 328))
            v543 = 69;
          else
            v543 = 65;
          v704 = v702;
          LOBYTE(v705) = v543;
          *(_WORD *)((char *)&v705 + 1) = 15;
          BYTE3(v705) = -1;
          v544 = (_DWORD *)v194;
          goto LABEL_623;
        }
        JSC::MacroAssemblerARM64::branch32(v195, 1, 1, *(unsigned int *)(v11 + 120 * a2 + 100), a5, a6, a7, a8, (uint64_t)&v687);
        v201 = (int)v687;
        if ((_DWORD)v687 != -1)
        {
          v202 = *(unsigned int *)(v194 + 12);
          if ((_DWORD)v202 == *(_DWORD *)(v194 + 8))
          {
            v203 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v194, (void *)(v202 + 1), (unint64_t)&v687, v196, v197, v198, v199, v200);
            v205 = *v203;
            v204 = v203 + 1;
            v201 = v205;
            LODWORD(v202) = *(_DWORD *)(v194 + 12);
          }
          else
          {
            v204 = (WTF **)((char *)&v687 + 4);
          }
          v283 = *(_QWORD *)v194 + 12 * v202;
          *(_DWORD *)v283 = v201;
          *(_QWORD *)(v283 + 4) = *v204;
          ++*(_DWORD *)(v194 + 12);
        }
        return;
      case 1:
        if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) != 0)
        {
          v704 = (unint64_t)v706;
          v705 = 2;
          v487 = v11 + 120 * a2;
          v490 = *(_DWORD *)(v487 + 100);
          v489 = (unsigned int *)(v487 + 100);
          v488 = v490;
          v491 = *(_DWORD *)(v12 + 40);
          if (v490 == v491)
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, 2, a5, a6, a7, a8, (uint64_t)&v702);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v704, &v702, v492, v493, v494, v495, v496, v497);
            v488 = *v489;
            v491 = *(_DWORD *)(v12 + 40);
          }
          v403 = v488 - v491;
          if (v488 < v491)
          {
            __break(0xC471u);
            JUMPOUT(0x198E86AA4);
          }
LABEL_387:
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::readCharacter(a1, v403, a3, a4, a5, a6, a7, a8);
          JSC::Yarr::YarrPattern::newlineCharacterClass(*(JSC::Yarr::YarrPattern **)(a1 + 56));
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(a1, (uint64_t)&v704, v404, v405, v406, v407, v408, v409);
          v410 = (_DWORD *)(v11 + 120 * v9 + 40);
          v411 = *(_QWORD *)(a1 + 8);
          JSC::ARM64Assembler::label((_DWORD *)(v411 + 32), v412, v413, v414, v415, v416, v417, v418, (int *)&v684);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v411 + 56), 335544320, v419, v420, v421, v422, v423, v424);
          if (*(_BYTE *)(v411 + 328))
            v431 = 69;
          else
            v431 = 65;
          v699 = (WTF *)v684;
          LOBYTE(v700) = v431;
          *(_WORD *)((char *)&v700 + 1) = 15;
          BYTE3(v700) = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v410, &v699, v425, v426, v427, v428, v429, v430);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v704, *(_QWORD *)(a1 + 8), v432, v433, v434, v435, v436, v437);
          v171 = v704;
          if (v706 != (_QWORD *)v704)
            goto LABEL_140;
        }
        else
        {
          v206 = v11 + 120 * a2;
          v207 = *(_DWORD *)(v12 + 40);
          v208 = v206 + 40;
          v209 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v206 + 100) != v207)
          {
            JSC::ARM64Assembler::label((_DWORD *)(v209 + 32), a2, a3, a4, a5, a6, a7, a8, (int *)&v702);
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v209 + 56), 335544320, v545, v546, v547, v548, v549, v550);
            v551 = v702;
            v552 = *(unsigned __int8 *)(v209 + 328);
            goto LABEL_619;
          }
          v210 = *(_DWORD *)(v209 + 200);
          if (v210 + 4 > *(_DWORD *)(v209 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v209 + 56), a2, a3, a4, a5, a6, a7, a8);
            v210 = *(_DWORD *)(v209 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v209 + 56) + v210) = 1795293247;
          v211 = *(_DWORD *)(v209 + 200) + 4;
          *(_DWORD *)(v209 + 200) = v211;
          if (*(_BYTE *)(v209 + 328))
          {
            while ((signed int)v211 < *(_DWORD *)(v209 + 52))
            {
              if (v211 + 4 > *(_DWORD *)(v209 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v209 + 56), a2, a3, a4, a5, a6, a7, a8);
                v211 = *(_DWORD *)(v209 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v209 + 56) + v211) = -721215457;
              v211 = *(_DWORD *)(v209 + 200) + 4;
              *(_DWORD *)(v209 + 200) = v211;
            }
            *(_DWORD *)(v209 + 208) = 0;
          }
          if (v211 + 4 > *(_DWORD *)(v209 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v209 + 56), a2, a3, a4, a5, a6, a7, a8);
            v211 = *(_DWORD *)(v209 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v209 + 56) + v211) = 1409286145;
          v212 = *(_DWORD *)(v209 + 200);
          v213 = v212 + 4;
          *(_DWORD *)(v209 + 200) = v212 + 4;
          v214 = v212 + 8;
          v215 = v212 + 4;
          if (v214 > *(_DWORD *)(v209 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v209 + 56), a2, a3, a4, a5, a6, a7, a8);
            v215 = *(_DWORD *)(v209 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v209 + 56) + v215) = -721215457;
          *(_DWORD *)(v209 + 200) += 4;
          if (*(_BYTE *)(v209 + 328))
            v216 = -122;
          else
            v216 = -126;
          v687 = (WTF *)v213;
          LOBYTE(v688) = v216;
          *(_WORD *)((char *)&v688 + 1) = 1;
          BYTE3(v688) = -1;
          if (v213 != -1)
          {
            v217 = *(unsigned int *)(v208 + 12);
            if ((_DWORD)v217 == *(_DWORD *)(v208 + 8))
            {
              v218 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v208, (void *)(v217 + 1), (unint64_t)&v687, a4, a5, a6, a7, a8);
              v220 = *v218;
              v219 = v218 + 1;
              v221 = *(_QWORD *)v208 + 12 * *(unsigned int *)(v208 + 12);
              *(_DWORD *)v221 = v220;
            }
            else
            {
              v219 = (WTF **)((char *)&v687 + 4);
              v221 = *(_QWORD *)v208 + 12 * v217;
              *(_DWORD *)v221 = v213;
            }
            *(_QWORD *)(v221 + 4) = *v219;
            ++*(_DWORD *)(v208 + 12);
          }
        }
        return;
      case 2:
        *(_QWORD *)v707 = 0xFFFFFFFFLL;
        *(_DWORD *)&v707[8] = -16773311;
        v704 = (unint64_t)v706;
        v705 = 2;
        v92 = *(_DWORD *)(v12 + 40);
        if (!v92)
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, *(unsigned int *)(v11 + 120 * a2 + 100), a5, a6, a7, a8, (uint64_t)&v702);
          *(_DWORD *)v707 = v702;
          *(_QWORD *)&v707[4] = *(_QWORD *)((char *)&v702 + 4);
          v92 = *(_DWORD *)(v12 + 40);
        }
        v93 = *(_DWORD *)(v11 + 120 * v9 + 100);
        v94 = v93 >= v92;
        v95 = v93 - v92;
        if (!v94)
        {
          __break(0xC471u);
          JUMPOUT(0x198E878A8);
        }
        if (v95 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x198E878B0);
        }
        v96 = v95 + 1;
        v97 = *(unsigned __int8 *)(a1 + 80);
        if (*(_BYTE *)(a1 + 80))
          v98 = 0x3FFFFFFF;
        else
          v98 = 0x7FFFFFFF;
        if (v95 >= v98)
        {
          JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, 6, a4, a5, a6, a7, a8);
          do
          {
            JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
            if (*(_BYTE *)(a1 + 80))
              JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
            v659 = v96 - 0x40000000;
            if (v96 < 0x40000000)
            {
              __break(0xC471u);
              JUMPOUT(0x198E879E8);
            }
            v96 -= 0x40000000;
          }
          while (v659 > v98);
          v97 = *(unsigned __int8 *)(a1 + 80);
          v96 = v659;
        }
        if (v97)
        {
          if (v96 >= 1073741825)
          {
            __break(0xC471u);
            JUMPOUT(0x198E87998);
          }
          v363 = (-2 * v96) | 0x200000000;
          if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v363, 6, a5, a6, a7, a8);
          else
            JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 0x100000100uLL, v363, 6, a5, a6, a7, a8);
        }
        else
        {
          JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), 0x100uLL, -v96 | 0x200000000, 6, a5, a6, a7, a8);
        }
        v99 = *(JSC::Yarr::YarrPattern **)(a1 + 56);
        if ((*(_BYTE *)(a1 + 84) & 2) != 0)
          JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(v99);
        else
          JSC::Yarr::YarrPattern::wordcharCharacterClass(v99);
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(a1, (uint64_t)&v704, v100, v101, v102, v103, v104, v105);
        if (!*(_DWORD *)(v12 + 40))
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v707, *(_QWORD *)(a1 + 8), v106, v107, v108, v109, v110, v111);
        *(_QWORD *)&v702 = v703;
        *((_QWORD *)&v702 + 1) = 2;
        v699 = (WTF *)v701;
        v700 = 2;
        if ((*(_BYTE *)(v12 + 1) & 2) != 0)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchAssertionWordchar(a1, v9, (uint64_t)&v699, (uint64_t)&v702, v108, v109, v110, v111);
          v439 = *(_QWORD *)(a1 + 8);
          JSC::ARM64Assembler::label((_DWORD *)(v439 + 32), v440, v441, v442, v443, v444, v445, v446, (int *)&v687);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v439 + 56), 335544320, v447, v448, v449, v450, v451, v452);
          if (*(_BYTE *)(v439 + 328))
            v459 = 69;
          else
            v459 = 65;
          v695[0] = v687;
          v695[1] = 0;
          v696 = v459;
          v697 = 15;
          v698 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v702, v695, v453, v454, v455, v456, v457, v458);
        }
        else
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchAssertionWordchar(a1, v9, (uint64_t)&v702, (uint64_t)&v699, v108, v109, v110, v111);
          v119 = *(_QWORD *)(a1 + 8);
          for (i = *(_DWORD *)(v119 + 200); i < *(_DWORD *)(v119 + 52); *(_DWORD *)(v119 + 200) = i)
          {
            if ((i + 4) > *(_DWORD *)(v119 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v119 + 56), (uint64_t)v112, v113, v114, v115, v116, v117, v118);
              i = *(_DWORD *)(v119 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v119 + 56) + i) = -721215457;
            i = *(_DWORD *)(v119 + 200) + 4;
          }
          v121 = i;
          if ((i + 4) > *(_DWORD *)(v119 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v119 + 56), (uint64_t)v112, v113, v114, v115, v116, v117, v118);
            v121 = *(_DWORD *)(v119 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v119 + 56) + v121) = 335544320;
          *(_DWORD *)(v119 + 200) += 4;
          if (*(_BYTE *)(v119 + 328))
            v122 = 69;
          else
            v122 = 65;
          v690 = i;
          v691 = 0;
          v692 = v122;
          v693 = 15;
          v694 = -1;
          if (i != -1)
          {
            if (HIDWORD(v700) == (_DWORD)v700)
            {
              v123 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v699, (void *)(HIDWORD(v700) + 1), (unint64_t)&v690, v114, v115, v116, v117, v118);
              v125 = *v123;
              v124 = v123 + 1;
              v126 = (char *)v699 + 12 * HIDWORD(v700);
              *(_DWORD *)v126 = v125;
            }
            else
            {
              v124 = &v691;
              v126 = (char *)v699 + 12 * HIDWORD(v700);
              *(_DWORD *)v126 = i;
            }
            *(_QWORD *)(v126 + 4) = *(_QWORD *)v124;
            v222 = ++HIDWORD(v700);
LABEL_194:
            v223 = v11 + 120 * v9;
            v224 = v223 + 40;
            if (v222)
            {
              v225 = v699;
              v226 = v222;
              v227 = *(unsigned int *)(v223 + 48);
              v228 = *(unsigned int *)(v223 + 52);
              v229 = v228 + v226;
              if (v228 + v226 > v227)
              {
                v230 = v227 + (v227 >> 2);
                if (v230 >= 0x10)
                  v231 = v230 + 1;
                else
                  v231 = 16;
                if (v231 <= v229)
                  v231 = v228 + v226;
                v232 = *(_QWORD *)v224;
                if (v231 < 3)
                {
                  v234 = v223 + 56;
                  *(_QWORD *)(v223 + 40) = v223 + 56;
                  *(_DWORD *)(v223 + 48) = 2;
                }
                else
                {
                  v678 = v226;
                  if (v231 >= 0x15555556)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E87958);
                  }
                  v233 = 12 * v231;
                  v234 = WTF::fastMalloc((WTF *)(12 * v231));
                  *(_DWORD *)(v224 + 8) = (v233 & 0xFFFFFFFC) / 0xC;
                  *(_QWORD *)v224 = v234;
                  LODWORD(v226) = v678;
                }
                if ((_DWORD)v228)
                {
                  v284 = v232;
                  do
                  {
                    *(_DWORD *)v234 = *(_DWORD *)v284;
                    *(_QWORD *)(v234 + 4) = *(_QWORD *)(v284 + 4);
                    v284 += 12;
                    v234 += 12;
                  }
                  while (v284 != v232 + 12 * v228);
                }
                if (v224 + 16 != v232 && v232)
                {
                  if (*(_QWORD *)v224 == v232)
                  {
                    *(_QWORD *)v224 = 0;
                    *(_DWORD *)(v224 + 8) = 0;
                  }
                  WTF::fastFree(v232, v112, v113, v114, v115, v116, v117, v118);
                }
              }
              v285 = *(unsigned int *)(v224 + 12);
              if (v229 < v285)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878C0);
              }
              v286 = *(_QWORD *)v224 + 12 * v285;
              v287 = (WTF *)((char *)v225 + 12 * v226);
              do
              {
                *(_DWORD *)v286 = *(_DWORD *)v225;
                *(_QWORD *)(v286 + 4) = *(_QWORD *)((char *)v225 + 4);
                v225 = (WTF *)((char *)v225 + 12);
                v286 += 12;
              }
              while (v225 != v287);
              *(_DWORD *)(v224 + 12) = v229;
            }
            v288 = HIDWORD(v705);
            if (HIDWORD(v705))
            {
              v289 = 0;
              v290 = 0;
              v291 = *(_QWORD *)(a1 + 8);
              do
              {
                if (v290 >= HIDWORD(v705))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E87868);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v704 + v289), v291, v113, v114, v115, v116, v117, v118);
                ++v290;
                v289 += 12;
              }
              while (v288 != v290);
            }
            v687 = (WTF *)v689;
            v688 = 2;
            v684 = (WTF *)v686;
            v685 = 2;
            if ((*(_BYTE *)(v12 + 1) & 2) != 0)
            {
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchAssertionWordchar(a1, v9, (uint64_t)&v684, (uint64_t)&v687, v115, v116, v117, v118);
              v460 = *(_QWORD *)(a1 + 8);
              JSC::ARM64Assembler::label((_DWORD *)(v460 + 32), v461, v462, v463, v464, v465, v466, v467, v708);
              JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v460 + 56), 335544320, v468, v469, v470, v471, v472, v473);
              if (*(_BYTE *)(v460 + 328))
                v480 = 69;
              else
                v480 = 65;
              v680[0] = v708[0];
              v680[1] = 0;
              v681 = v480;
              v682 = 15;
              v683 = -1;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v687, v680, v474, v475, v476, v477, v478, v479);
            }
            else
            {
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchAssertionWordchar(a1, v9, (uint64_t)&v687, (uint64_t)&v684, v115, v116, v117, v118);
            }
            v292 = HIDWORD(v688);
            if (HIDWORD(v688))
            {
              v293 = v687;
              v294 = *(unsigned int *)(v224 + 8);
              v295 = *(unsigned int *)(v224 + 12);
              v296 = v295 + HIDWORD(v688);
              if (v296 > v294)
              {
                v297 = v294 + (v294 >> 2);
                if (v297 >= 0x10)
                  v298 = v297 + 1;
                else
                  v298 = 16;
                if (v298 <= v296)
                  v298 = v295 + HIDWORD(v688);
                v299 = *(_QWORD *)v224;
                if (v298 < 3)
                {
                  v301 = v224 + 16;
                  *(_QWORD *)v224 = v224 + 16;
                  *(_DWORD *)(v224 + 8) = 2;
                }
                else
                {
                  if (v298 >= 0x15555556)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E87960);
                  }
                  v300 = 12 * v298;
                  v301 = WTF::fastMalloc((WTF *)(12 * v298));
                  *(_DWORD *)(v224 + 8) = (v300 & 0xFFFFFFFC) / 0xC;
                  *(_QWORD *)v224 = v301;
                }
                if ((_DWORD)v295)
                {
                  v302 = v299;
                  do
                  {
                    *(_DWORD *)v301 = *(_DWORD *)v302;
                    *(_QWORD *)(v301 + 4) = *(_QWORD *)(v302 + 4);
                    v302 += 12;
                    v301 += 12;
                  }
                  while (v302 != v299 + 12 * v295);
                }
                if (v224 + 16 != v299 && v299)
                {
                  if (*(_QWORD *)v224 == v299)
                  {
                    *(_QWORD *)v224 = 0;
                    *(_DWORD *)(v224 + 8) = 0;
                  }
                  WTF::fastFree(v299, v163, v164, v165, v166, v167, v168, v169);
                }
              }
              v303 = *(unsigned int *)(v224 + 12);
              if (v296 < v303)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878C8);
              }
              v304 = *(_QWORD *)v224 + 12 * v303;
              v305 = (WTF *)((char *)v293 + 12 * v292);
              do
              {
                *(_DWORD *)v304 = *(_DWORD *)v293;
                *(_QWORD *)(v304 + 4) = *(_QWORD *)((char *)v293 + 4);
                v293 = (WTF *)((char *)v293 + 12);
                v304 += 12;
              }
              while (v293 != v305);
              *(_DWORD *)(v224 + 12) = v296;
            }
            v306 = *(_QWORD *)(a1 + 8);
            v307 = HIDWORD(v702);
            if (HIDWORD(v702))
            {
              v308 = 0;
              v309 = 0;
              do
              {
                if (v309 >= HIDWORD(v702))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E87870);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v702 + v308), v306, v164, v165, v166, v167, v168, v169);
                ++v309;
                v308 += 12;
              }
              while (v307 != v309);
              v306 = *(_QWORD *)(a1 + 8);
            }
            v310 = HIDWORD(v685);
            if (HIDWORD(v685))
            {
              v311 = 0;
              v312 = 0;
              do
              {
                if (v312 >= HIDWORD(v685))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E87878);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v684 + v311), v306, v164, v165, v166, v167, v168, v169);
                ++v312;
                v311 += 12;
              }
              while (v310 != v312);
            }
            v313 = v684;
            if (v686 != (_BYTE *)v684 && v684 != 0)
            {
              v684 = 0;
              LODWORD(v685) = 0;
              WTF::fastFree((unint64_t)v313, v163, v164, v165, v166, v167, v168, v169);
            }
            v315 = v687;
            if (v689 != (_BYTE *)v687 && v687)
            {
              v687 = 0;
              LODWORD(v688) = 0;
              WTF::fastFree((unint64_t)v315, v163, v164, v165, v166, v167, v168, v169);
            }
            v316 = v699;
            if (v701 != (_BYTE *)v699 && v699)
            {
              v699 = 0;
              LODWORD(v700) = 0;
              WTF::fastFree((unint64_t)v316, v163, v164, v165, v166, v167, v168, v169);
            }
            v317 = v702;
            if (v703 != (_QWORD *)v702 && (_QWORD)v702)
            {
              *(_QWORD *)&v702 = 0;
              DWORD2(v702) = 0;
              WTF::fastFree(v317, v163, v164, v165, v166, v167, v168, v169);
            }
            v171 = v704;
            if (v706 != (_QWORD *)v704)
            {
LABEL_140:
              if (v171)
              {
                v704 = 0;
                LODWORD(v705) = 0;
                WTF::fastFree(v171, v163, v164, v165, v166, v167, v168, v169);
              }
            }
            return;
          }
        }
        v222 = HIDWORD(v700);
        goto LABEL_194;
      case 4:
        v14 = *(unsigned __int8 *)(v12 + 2);
        if (!*(_BYTE *)(v12 + 2))
        {
          v54 = *(_DWORD *)(v12 + 8);
          if (v54 == 1)
          {
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            {
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, 1, 2, a5, a6, a7, a8, (uint64_t)&v704);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v11 + 120 * v9 + 40), &v704, v364, v365, v366, v367, v368, v369);
              JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 1, ((unint64_t)*(unsigned int *)(v12 + 44) << 35) | 0x1F, v370, v371, v372, v373, v374);
            }
            v55 = *(_DWORD *)(v11 + 120 * v9 + 100);
            v56 = *(_DWORD *)(v12 + 40);
            v57 = v55 - v56;
            if (v55 < v56)
            {
              __break(0xC471u);
              JUMPOUT(0x198E87898);
            }
            v58 = *(unsigned __int8 *)(a1 + 80);
            if (*(_BYTE *)(a1 + 80))
              v59 = 0x3FFFFFFF;
            else
              v59 = 0x7FFFFFFF;
            if (v57 > v59)
            {
              JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, 6, a4, a5, a6, a7, a8);
              do
              {
                JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
                if (*(_BYTE *)(a1 + 80))
                  JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
                v658 = v57 - 0x40000000;
                if (v57 < 0x40000000)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E879D8);
                }
                v57 -= 0x40000000;
              }
              while (v658 > v59);
              v58 = *(unsigned __int8 *)(a1 + 80);
              v57 = v658;
            }
            if (v58)
            {
              if (v57 >= 1073741825)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87988);
              }
              v357 = (-2 * v57) | 0x200000000;
              if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v357, 6, a5, a6, a7, a8);
              else
                JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 0x100000100uLL, v357, 6, a5, a6, a7, a8);
            }
            else
            {
              JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), 0x100uLL, -v57 | 0x200000000, 6, a5, a6, a7, a8);
            }
            v65 = (_DWORD *)(v11 + 120 * v9 + 40);
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassTermInner(a1, v12, (uint64_t)v65, v60, v61, v62, v63, v64);
            if ((*(_BYTE *)(a1 + 84) & 1) != 0
              && (*(unsigned __int8 *)(*(_QWORD *)(v12 + 16) + 88) - 1 > 1
               || (*(_BYTE *)(v12 + 1) & 2) != 0))
            {
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, 6, 0x10000, v66, v67, v68, v69, (uint64_t)&v702);
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, 2, v70, v71, v72, v73, (uint64_t)&v699);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v65, &v699, v74, v75, v76, v77, v78, v79);
              v87 = *(_DWORD **)(a1 + 8);
              v88 = v87[50];
              if (v88 + 4 > v87[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 14), v80, v81, v82, v83, v84, v85, v86);
                v88 = v87[50];
              }
              *(_DWORD *)(*((_QWORD *)v87 + 7) + v88) = 285213729;
              v87[50] += 4;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v702, *(_QWORD *)(a1 + 8), v81, v82, v83, v84, v85, v86);
            }
          }
          else
          {
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            {
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, 1, 2, a5, a6, a7, a8, (uint64_t)&v704);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v11 + 120 * v9 + 40), &v704, v375, v376, v377, v378, v379, v380);
              v54 = *(_DWORD *)(v12 + 8);
              if ((*(_BYTE *)(a1 + 84) & 1) != 0
                && *(_BYTE *)(*(_QWORD *)(v12 + 16) + 88) == 2
                && (*(_BYTE *)(v12 + 1) & 2) == 0)
              {
                if ((v54 & 0x80000000) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E879B8);
                }
                v54 *= 2;
              }
            }
            JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), 1, v54, 7, a5, a6, a7, a8);
            v325 = *(_DWORD **)(a1 + 8);
            for (j = v325[50]; j < v325[13]; v325[50] = j)
            {
              if ((j + 4) > v325[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v325 + 14), v318, v319, v320, v321, v322, v323, v324);
                j = v325[50];
              }
              *(_DWORD *)(*((_QWORD *)v325 + 7) + j) = -721215457;
              j = v325[50] + 4;
            }
            v325[52] = 0;
            v327 = *(_DWORD *)(v11 + 120 * v9 + 100);
            v328 = *(_DWORD *)(v12 + 40);
            v94 = v327 >= v328;
            v329 = v327 - v328;
            if (!v94)
            {
              __break(0xC471u);
              JUMPOUT(0x198E87968);
            }
            v330 = v329 - v54;
            if (v329 < v54)
            {
              __break(0xC471u);
              JUMPOUT(0x198E87970);
            }
            v331 = *(unsigned __int8 *)(a1 + 80);
            if (*(_BYTE *)(a1 + 80))
              v332 = 0x3FFFFFFF;
            else
              v332 = 0x7FFFFFFF;
            if (v330 > v332)
            {
              JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, 6, v320, v321, v322, v323, v324);
              do
              {
                JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, v321, v322, v323, v324);
                if (*(_BYTE *)(a1 + 80))
                  JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, v321, v322, v323, v324);
                v661 = v330 - 0x40000000;
                if (v330 < 0x40000000)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E879F0);
                }
                v330 -= 0x40000000;
              }
              while (v661 > v332);
              v331 = *(unsigned __int8 *)(a1 + 80);
              v330 = v661;
            }
            if (v331)
            {
              if (v330 >= 1073741825)
              {
                __break(0xC471u);
                JUMPOUT(0x198E879E0);
              }
              v438 = (-2 * v330) | 0x200000000;
              if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000700uLL, v438, 6, v321, v322, v323, v324);
              else
                JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 0x100000700uLL, v438, 6, v321, v322, v323, v324);
            }
            else
            {
              JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), 0x700uLL, -v330 | 0x200000000, 6, v321, v322, v323, v324);
            }
            v338 = (_DWORD *)(v11 + 120 * v9 + 40);
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassTermInner(a1, v12, (uint64_t)v338, v333, v334, v335, v336, v337);
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            {
              if (*(_BYTE *)v12 != 4
                || (v381 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 16) + 88), (v381 - 1) > 1)
                || (*(_BYTE *)(v12 + 1) & 2) != 0)
              {
                v553 = *(_DWORD **)(a1 + 8);
                v554 = v553[50];
                if (v554 + 4 > v553[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v553 + 14), v339, v340, v341, v342, v343, v344, v345);
                  v554 = v553[50];
                }
                *(_DWORD *)(*((_QWORD *)v553 + 7) + v554) = 285213927;
                v553[50] += 4;
                JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, 6, 0x10000, v342, v343, v344, v345, (uint64_t)&v702);
                JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, 2, v555, v556, v557, v558, (uint64_t)&v699);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v338, &v699, v559, v560, v561, v562, v563, v564);
                v572 = *(_DWORD **)(a1 + 8);
                v573 = v572[50];
                if (v573 + 4 > v572[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v572 + 14), v565, v566, v567, v568, v569, v570, v571);
                  v573 = v572[50];
                }
                *(_DWORD *)(*((_QWORD *)v572 + 7) + v573) = 285213927;
                v572[50] += 4;
                v574 = *(_DWORD **)(a1 + 8);
                v575 = v574[50];
                if (v575 + 4 > v574[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v574 + 14), v565, v566, v567, v568, v569, v570, v571);
                  v575 = v574[50];
                }
                *(_DWORD *)(*((_QWORD *)v574 + 7) + v575) = 285213729;
                v574[50] += 4;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v702, *(_QWORD *)(a1 + 8), v566, v567, v568, v569, v570, v571);
              }
              else
              {
                if ((v381 & 2) != 0)
                  v382 = 2;
                else
                  v382 = 1;
                JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v382, 7, 7, v342, v343, v344, v345);
              }
            }
            else
            {
              v346 = *(_DWORD **)(a1 + 8);
              v347 = v346[50];
              if (v347 + 4 > v346[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v346 + 14), v339, v340, v341, v342, v343, v344, v345);
                v347 = v346[50];
              }
              *(_DWORD *)(*((_QWORD *)v346 + 7) + v347) = 285213927;
              v346[50] += 4;
            }
            v348 = *(_QWORD *)(a1 + 8);
            v349 = *(_DWORD *)(v348 + 200);
            if (v349 + 4 > *(_DWORD *)(v348 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v348 + 56), v339, v340, v341, v342, v343, v344, v345);
              v349 = *(_DWORD *)(v348 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v348 + 56) + v349) = 1795227903;
            v350 = *(_DWORD *)(v348 + 200) + 4;
            *(_DWORD *)(v348 + 200) = v350;
            if (*(_BYTE *)(v348 + 328))
            {
              while ((signed int)v350 < *(_DWORD *)(v348 + 52))
              {
                if (v350 + 4 > *(_DWORD *)(v348 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v348 + 56), v339, v340, v341, v342, v343, v344, v345);
                  v350 = *(_DWORD *)(v348 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v348 + 56) + v350) = -721215457;
                v350 = *(_DWORD *)(v348 + 200) + 4;
                *(_DWORD *)(v348 + 200) = v350;
              }
              *(_DWORD *)(v348 + 208) = 0;
            }
            if (v350 + 4 > *(_DWORD *)(v348 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v348 + 56), v339, v340, v341, v342, v343, v344, v345);
              v350 = *(_DWORD *)(v348 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v348 + 56) + v350) = 1409286145;
            v351 = *(_DWORD *)(v348 + 200);
            v352 = v351 + 4;
            *(_DWORD *)(v348 + 200) = v351 + 4;
            v353 = v351 + 8;
            v354 = v351 + 4;
            if (v353 > *(_DWORD *)(v348 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v348 + 56), v339, v340, v341, v342, v343, v344, v345);
              v354 = *(_DWORD *)(v348 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v348 + 56) + v354) = -721215457;
            *(_DWORD *)(v348 + 200) += 4;
            if (*(_BYTE *)(v348 + 328))
              v355 = -122;
            else
              v355 = -126;
            *(_QWORD *)&v702 = v352;
            BYTE8(v702) = v355;
            *(_WORD *)((char *)&v702 + 9) = 1;
            BYTE11(v702) = -1;
            LODWORD(v687) = j;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v702, (unsigned int *)&v687, *(_QWORD *)(a1 + 8), v341, v342, v343, v344, v345);
          }
          return;
        }
        if (v14 != 1)
        {
          if (v14 == 2)
          {
            v358 = *(_DWORD **)(a1 + 8);
            v359 = v358[50];
            if (v359 + 4 > v358[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v358 + 14), a2, a3, a4, a5, a6, a7, a8);
              v359 = v358[50];
            }
            *(_DWORD *)(*((_QWORD *)v358 + 7) + v359) = 1384120327;
            v358[50] += 4;
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 1, ((unint64_t)*(unsigned int *)(v12 + 44) << 35) | 0x1F, a4, a5, a6, a7, a8);
            v360 = *(_DWORD **)(a1 + 8);
            v361 = v360[50];
            if (v361 < v360[13])
            {
              do
              {
                if ((v361 + 4) > v360[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v360 + 14), a2, a3, a4, a5, a6, a7, a8);
                  v361 = v360[50];
                }
                *(_DWORD *)(*((_QWORD *)v360 + 7) + v361) = -721215457;
                v361 = v360[50] + 4;
                v360[50] = v361;
              }
              while (v361 < v360[13]);
              v362 = *(_QWORD *)(a1 + 8);
            }
            else
            {
              v362 = *(_QWORD *)(a1 + 8);
            }
            v360[52] = 0;
            *(_DWORD *)(v11 + 120 * v9 + 36) = v361;
            JSC::MacroAssemblerARM64::store64(v362, 7, ((unint64_t)((8 * *(_DWORD *)(v12 + 44) + 8) >> 3) << 35) | 0x1F, a4, a5, a6, a7, a8);
          }
          return;
        }
        if ((*(_BYTE *)(a1 + 84) & 1) != 0
          && (*(unsigned __int8 *)(*(_QWORD *)(v12 + 16) + 88) - 1 > 1 || (*(_BYTE *)(v12 + 1) & 2) != 0))
        {
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 1, ((unint64_t)*(unsigned int *)(v12 + 44) << 35) | 0x1F, a4, a5, a6, a7, a8);
        }
        v15 = *(_DWORD **)(a1 + 8);
        v16 = v15[50];
        if (v16 + 4 > v15[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 14), a2, a3, a4, a5, a6, a7, a8);
          v16 = v15[50];
        }
        *(_DWORD *)(*((_QWORD *)v15 + 7) + v16) = 1384120327;
        v15[50] += 4;
        v17 = v706;
        v704 = (unint64_t)v706;
        v705 = 2;
        v18 = v703;
        *(_QWORD *)&v702 = v703;
        *((_QWORD *)&v702 + 1) = 2;
        v19 = *(_DWORD **)(a1 + 8);
        v20 = v19[50];
        if (v20 < v19[13])
        {
          do
          {
            v481 = v20;
            v482 = v17;
            v483 = v18;
            v484 = v481;
            if ((v481 + 4) > v19[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v19 + 14), a2, a3, a4, a5, a6, a7, a8);
              v484 = v19[50];
            }
            *(_DWORD *)(*((_QWORD *)v19 + 7) + v484) = -721215457;
            v485 = v19[50] + 4;
            v19[50] = v485;
            v18 = v483;
            v17 = v482;
            v20 = v485;
          }
          while (v485 < v19[13]);
        }
        v679 = v18;
        v19[52] = 0;
        if (*(_BYTE *)v12 == 4
          && (v21 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 16) + 88), (v21 - 1) <= 1)
          && (v21 & 2) != 0
          && (*(_BYTE *)(v12 + 1) & 2) == 0)
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)1, 6, a4, a5, a6, a7, a8);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::checkNotEnoughInput((uint64_t)&v699, a1, 6, v383, v384, v385, v386, v387);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v704, &v699, v388, v389, v390, v391, v392, v393);
        }
        else
        {
          v22 = v20;
          v23 = v17;
          v24 = *(_QWORD *)(a1 + 8);
          v25 = (JSC::AssemblerBuffer *)(v24 + 56);
          v26 = *(_DWORD *)(v24 + 200);
          if (v26 + 4 > *(_DWORD *)(v24 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v25, a2, a3, a4, a5, a6, a7, a8);
            v25 = (JSC::AssemblerBuffer *)(v24 + 56);
            v26 = *(_DWORD *)(v24 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v24 + 56) + v26) = 1795293247;
          v27 = *(_DWORD *)(v24 + 200) + 4;
          *(_DWORD *)(v24 + 200) = v27;
          if (*(_BYTE *)(v24 + 328))
          {
            for (; (signed int)v27 < *(_DWORD *)(v24 + 52); v25 = v677)
            {
              v677 = v25;
              if (v27 + 4 > *(_DWORD *)(v24 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v25, a2, a3, a4, a5, a6, a7, a8);
                v27 = *(_DWORD *)(v24 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v24 + 56) + v27) = -721215457;
              v27 = *(_DWORD *)(v24 + 200) + 4;
              *(_DWORD *)(v24 + 200) = v27;
            }
            *(_DWORD *)(v24 + 208) = 0;
          }
          if (v27 + 4 > *(_DWORD *)(v24 + 192))
          {
            v486 = v25;
            JSC::AssemblerBuffer::outOfLineGrow(v25, a2, a3, a4, a5, a6, a7, a8);
            v25 = v486;
            v27 = *(_DWORD *)(v24 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v24 + 56) + v27) = 1409286144;
          v28 = *(_DWORD *)(v24 + 200);
          v29 = v28 + 4;
          *(_DWORD *)(v24 + 200) = v28 + 4;
          v30 = v28 + 8;
          v31 = v28 + 4;
          if (v30 > *(_DWORD *)(v24 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v25, a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(v24 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v24 + 56) + v31) = -721215457;
          *(_DWORD *)(v24 + 200) += 4;
          if (*(_BYTE *)(v24 + 328))
            v32 = -122;
          else
            v32 = -126;
          v687 = (WTF *)v29;
          LOBYTE(v688) = v32;
          *(_WORD *)((char *)&v688 + 1) = 0;
          BYTE3(v688) = -1;
          v17 = v23;
          v20 = v22;
          if (v29 != -1)
          {
            if (HIDWORD(v705) == (_DWORD)v705)
            {
              v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v704, (void *)(HIDWORD(v705) + 1), (unint64_t)&v687, a4, a5, a6, a7, a8);
              v35 = *v33;
              v34 = v33 + 1;
              v36 = v704 + 12 * HIDWORD(v705);
              *(_DWORD *)v36 = v35;
            }
            else
            {
              v34 = (WTF **)((char *)&v687 + 4);
              v36 = v704 + 12 * HIDWORD(v705);
              *(_DWORD *)v36 = v29;
            }
            *(_QWORD *)(v36 + 4) = *v34;
            ++HIDWORD(v705);
          }
        }
        v127 = *(_DWORD *)(v11 + 120 * v9 + 100);
        v128 = *(_DWORD *)(v12 + 40);
        v129 = v127 - v128;
        if (v127 < v128)
        {
          __break(0xC471u);
          JUMPOUT(0x198E87890);
        }
        v130 = *(unsigned __int8 *)(a1 + 80);
        if (*(_BYTE *)(a1 + 80))
          v131 = 0x3FFFFFFF;
        else
          v131 = 0x7FFFFFFF;
        if (v129 > v131)
        {
          JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, 6, a4, a5, a6, a7, a8);
          do
          {
            JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
            if (*(_BYTE *)(a1 + 80))
              JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
            v657 = v129 - 0x40000000;
            if (v129 < 0x40000000)
            {
              __break(0xC471u);
              JUMPOUT(0x198E879D0);
            }
            v129 -= 0x40000000;
          }
          while (v657 > v131);
          v130 = *(unsigned __int8 *)(a1 + 80);
          v129 = v657;
        }
        if (v130)
        {
          if (v129 >= 1073741825)
          {
            __break(0xC471u);
            JUMPOUT(0x198E87980);
          }
          v356 = (-2 * v129) | 0x200000000;
          if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v356, 6, a5, a6, a7, a8);
          else
            JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 0x100000100uLL, v356, 6, a5, a6, a7, a8);
        }
        else
        {
          JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), 0x100uLL, -v129 | 0x200000000, 6, a5, a6, a7, a8);
        }
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassTermInner(a1, v12, (uint64_t)&v704, v132, v133, v134, v135, v136);
        if ((*(_BYTE *)(a1 + 84) & 1) != 0)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::advanceIndexAfterCharacterClassTermMatch(a1, v12, (uint64_t)&v702, v139, v140, v141, v142, v143);
        }
        else
        {
          v144 = *(_DWORD **)(a1 + 8);
          v145 = v144[50];
          if (v145 + 4 > v144[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v144 + 14), v137, v138, v139, v140, v141, v142, v143);
            v145 = v144[50];
          }
          *(_DWORD *)(*((_QWORD *)v144 + 7) + v145) = 285213729;
          v144[50] += 4;
        }
        v146 = *(_DWORD **)(a1 + 8);
        v147 = v146[50];
        if (v147 + 4 > v146[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v146 + 14), v137, v138, v139, v140, v141, v142, v143);
          v147 = v146[50];
        }
        *(_DWORD *)(*((_QWORD *)v146 + 7) + v147) = 285213927;
        v146[50] += 4;
        v148 = *(unsigned int *)(v12 + 8);
        if ((_DWORD)v148 == -1)
        {
          v149 = *(_QWORD *)(a1 + 8);
          LODWORD(v684) = v20;
          JSC::MacroAssembler::jump(v149, (unsigned int *)&v684, v138, v148, v140, v141, v142, v143);
        }
        else
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 7, v148, v140, v141, v142, v143, (uint64_t)&v684);
          v695[0] = v20;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v684, v695, *(_QWORD *)(a1 + 8), v235, v236, v237, v238, v239);
          v240 = *(_QWORD *)(a1 + 8);
          for (k = *(_DWORD *)(v240 + 200); k < *(_DWORD *)(v240 + 52); *(_DWORD *)(v240 + 200) = k)
          {
            if ((k + 4) > *(_DWORD *)(v240 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v240 + 56), v150, v151, v152, v153, v154, v155, v156);
              k = *(_DWORD *)(v240 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v240 + 56) + k) = -721215457;
            k = *(_DWORD *)(v240 + 200) + 4;
          }
          v242 = k;
          if ((k + 4) > *(_DWORD *)(v240 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v240 + 56), v150, v151, v152, v153, v154, v155, v156);
            v242 = *(_DWORD *)(v240 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v240 + 56) + v242) = 335544320;
          *(_DWORD *)(v240 + 200) += 4;
          if (*(_BYTE *)(v240 + 328))
            v243 = 69;
          else
            v243 = 65;
          *(_DWORD *)v707 = k;
          *(_DWORD *)&v707[4] = 0;
          v707[8] = v243;
          *(_WORD *)&v707[9] = 15;
          v707[11] = -1;
          if (k != -1)
          {
            if (HIDWORD(v705) == (_DWORD)v705)
            {
              v244 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v704, (void *)(HIDWORD(v705) + 1), (unint64_t)v707, v152, v153, v154, v155, v156);
              v246 = *v244;
              v245 = v244 + 1;
              v247 = v704 + 12 * HIDWORD(v705);
              *(_DWORD *)v247 = v246;
            }
            else
            {
              v245 = &v707[4];
              v247 = v704 + 12 * HIDWORD(v705);
              *(_DWORD *)v247 = k;
            }
            *(_QWORD *)(v247 + 4) = *v245;
            ++HIDWORD(v705);
          }
        }
        if (HIDWORD(v702))
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v702, *(_QWORD *)(a1 + 8), v151, v152, v153, v154, v155, v156);
          v498 = *(_DWORD **)(a1 + 8);
          v499 = v498[50];
          if (v499 + 4 > v498[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v498 + 14), v150, v151, v152, v153, v154, v155, v156);
            v499 = v498[50];
          }
          *(_DWORD *)(*((_QWORD *)v498 + 7) + v499) = 1358955553;
          v498[50] += 4;
        }
        v157 = *(_DWORD **)(a1 + 8);
        v158 = HIDWORD(v705);
        if (HIDWORD(v705))
        {
          v159 = 0;
          v160 = 0;
          do
          {
            if (v160 >= HIDWORD(v705))
            {
              __break(0xC471u);
              JUMPOUT(0x198E87838);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v704 + v159), (uint64_t)v157, v151, v152, v153, v154, v155, v156);
            ++v160;
            v159 += 12;
          }
          while (v158 != v160);
          v157 = *(_DWORD **)(a1 + 8);
        }
        v161 = v157[50];
        if (v161 < v157[13])
        {
          do
          {
            if ((v161 + 4) > v157[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v157 + 14), v150, v151, v152, v153, v154, v155, v156);
              v161 = v157[50];
            }
            *(_DWORD *)(*((_QWORD *)v157 + 7) + v161) = -721215457;
            v161 = v157[50] + 4;
            v157[50] = v161;
          }
          while (v161 < v157[13]);
          v162 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          v162 = (uint64_t)v157;
        }
        v157[52] = 0;
        *(_DWORD *)(v11 + 120 * v9 + 36) = v161;
        JSC::MacroAssemblerARM64::store64(v162, 7, ((unint64_t)((8 * *(_DWORD *)(v12 + 44) + 8) >> 3) << 35) | 0x1F, v152, v153, v154, v155, v156);
        v170 = v702;
        if (v679 != (_QWORD *)v702 && (_QWORD)v702)
        {
          *(_QWORD *)&v702 = 0;
          DWORD2(v702) = 0;
          WTF::fastFree(v170, v163, v164, v165, v166, v167, v168, v169);
        }
        v171 = v704;
        if (v17 == (_QWORD *)v704)
          return;
        goto LABEL_140;
      case 5:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateBackReference(a1, a2, a3, a4, a5, a6, a7, a8);
        return;
      case 6:
        *(_WORD *)(a1 + 82) = 258;
        return;
      case 7:
      case 8:
        __break(0xC471u);
        JUMPOUT(0x198E86AC4);
      case 9:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateDotStarEnclosure(a1, a2, a3, a4, a5, a6, a7, a8);
        return;
      default:
        return;
    }
  }
  v13 = *(unsigned __int8 *)(v12 + 2);
  if (*(_BYTE *)(v12 + 2))
  {
    if (v13 == 1)
    {
      v172 = *(_DWORD *)(v12 + 16);
      v173 = *(_DWORD **)(a1 + 8);
      v174 = v173[50];
      if (v174 + 4 > v173[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v173 + 14), a2, a3, a4, a5, a6, a7, a8);
        v174 = v173[50];
      }
      *(_DWORD *)(*((_QWORD *)v173 + 7) + v174) = 1384120327;
      v173[50] += 4;
      if (v172 < 0x100 || *(_BYTE *)(a1 + 80))
      {
        v704 = (unint64_t)v706;
        v705 = 2;
        v175 = *(_DWORD **)(a1 + 8);
        v176 = v175[50];
        if (v176 < v175[13])
        {
          do
          {
            if ((v176 + 4) > v175[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v175 + 14), a2, a3, a4, a5, a6, a7, a8);
              v176 = v175[50];
            }
            *(_DWORD *)(*((_QWORD *)v175 + 7) + v176) = -721215457;
            v176 = v175[50] + 4;
            v175[50] = v176;
          }
          while (v176 < v175[13]);
          v178 = *(_QWORD *)(a1 + 8);
          v177 = *(_DWORD *)(v178 + 200);
        }
        else
        {
          v177 = v175[50];
          v178 = *(_QWORD *)(a1 + 8);
        }
        v175[52] = 0;
        if (v177 + 4 > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 + 56), a2, a3, a4, a5, a6, a7, a8);
          v177 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v177) = 1795293247;
        v179 = *(_DWORD *)(v178 + 200) + 4;
        *(_DWORD *)(v178 + 200) = v179;
        if (*(_BYTE *)(v178 + 328))
        {
          while ((signed int)v179 < *(_DWORD *)(v178 + 52))
          {
            if (v179 + 4 > *(_DWORD *)(v178 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 + 56), a2, a3, a4, a5, a6, a7, a8);
              v179 = *(_DWORD *)(v178 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v178 + 56) + v179) = -721215457;
            v179 = *(_DWORD *)(v178 + 200) + 4;
            *(_DWORD *)(v178 + 200) = v179;
          }
          *(_DWORD *)(v178 + 208) = 0;
        }
        if (v179 + 4 > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 + 56), a2, a3, a4, a5, a6, a7, a8);
          v179 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v179) = 1409286144;
        v180 = *(_DWORD *)(v178 + 200);
        v181 = v180 + 4;
        *(_DWORD *)(v178 + 200) = v180 + 4;
        v182 = v180 + 8;
        v183 = v180 + 4;
        if (v182 > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 + 56), a2, a3, a4, a5, a6, a7, a8);
          v183 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v183) = -721215457;
        *(_DWORD *)(v178 + 200) += 4;
        if (*(_BYTE *)(v178 + 328))
          v184 = -122;
        else
          v184 = -126;
        *(_QWORD *)&v702 = v181;
        BYTE8(v702) = v184;
        *(_WORD *)((char *)&v702 + 9) = 0;
        BYTE11(v702) = -1;
        if (v181 != -1)
        {
          if (HIDWORD(v705) == (_DWORD)v705)
          {
            v185 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v704, (void *)(HIDWORD(v705) + 1), (unint64_t)&v702, a4, a5, a6, a7, a8);
            v187 = *v185;
            v186 = v185 + 1;
            v188 = v704 + 12 * HIDWORD(v705);
            *(_DWORD *)v188 = v187;
          }
          else
          {
            v186 = (_QWORD *)((char *)&v702 + 4);
            v188 = v704 + 12 * HIDWORD(v705);
            *(_DWORD *)v188 = v181;
          }
          *(_QWORD *)(v188 + 4) = *v186;
          ++HIDWORD(v705);
        }
        v248 = *(_DWORD *)(v11 + 120 * v9 + 100);
        v249 = *(_DWORD *)(v12 + 40);
        if (v248 < v249)
        {
          __break(0xC471u);
          JUMPOUT(0x198E878B8);
        }
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::jumpIfCharNotEquals((uint64_t)&v699, a1, v172, v248 - v249, 6, a6, a7, a8);
        v257 = (int)v699;
        if ((_DWORD)v699 != -1)
        {
          v258 = HIDWORD(v705);
          if (HIDWORD(v705) == (_DWORD)v705)
          {
            v259 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v704, (void *)(HIDWORD(v705) + 1), (unint64_t)&v699, v252, v253, v254, v255, v256);
            v261 = *v259;
            v260 = v259 + 1;
            v257 = v261;
            v258 = HIDWORD(v705);
          }
          else
          {
            v260 = (WTF **)((char *)&v699 + 4);
          }
          v262 = v704 + 12 * v258;
          *(_DWORD *)v262 = v257;
          *(_QWORD *)(v262 + 4) = *v260;
          ++HIDWORD(v705);
        }
        v263 = *(_DWORD **)(a1 + 8);
        v264 = v263[50];
        if (v264 + 4 > v263[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v263 + 14), v250, v251, v252, v253, v254, v255, v256);
          v264 = v263[50];
        }
        *(_DWORD *)(*((_QWORD *)v263 + 7) + v264) = 285213729;
        v263[50] += 4;
        if ((*(_BYTE *)(a1 + 84) & 1) != 0 && v172 >= 0x10000)
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 1, 2, v253, v254, v255, v256, (uint64_t)&v687);
          v507 = *(_DWORD **)(a1 + 8);
          v508 = v507[50];
          if (v508 + 4 > v507[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v507 + 14), v500, v501, v502, v503, v504, v505, v506);
            v508 = v507[50];
          }
          *(_DWORD *)(*((_QWORD *)v507 + 7) + v508) = 1358955553;
          v507[50] += 4;
          v509 = *(_QWORD *)(a1 + 8);
          JSC::ARM64Assembler::label((_DWORD *)(v509 + 32), v500, v501, v502, v503, v504, v505, v506, (int *)v707);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v509 + 56), 335544320, v510, v511, v512, v513, v514, v515);
          if (*(_BYTE *)(v509 + 328))
            v522 = 69;
          else
            v522 = 65;
          v684 = (WTF *)*(unsigned int *)v707;
          LOBYTE(v685) = v522;
          *(_WORD *)((char *)&v685 + 1) = 15;
          BYTE3(v685) = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v704, &v684, v516, v517, v518, v519, v520, v521);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v687, *(_QWORD *)(a1 + 8), v523, v524, v525, v526, v527, v528);
          v529 = *(_DWORD **)(a1 + 8);
          v530 = v529[50];
          if (v530 + 4 > v529[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v529 + 14), v250, v251, v252, v253, v254, v255, v256);
            v530 = v529[50];
          }
          *(_DWORD *)(*((_QWORD *)v529 + 7) + v530) = 285213729;
          v529[50] += 4;
        }
        v265 = *(_DWORD **)(a1 + 8);
        v266 = v265[50];
        if (v266 + 4 > v265[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v265 + 14), v250, v251, v252, v253, v254, v255, v256);
          v266 = v265[50];
        }
        *(_DWORD *)(*((_QWORD *)v265 + 7) + v266) = 285213927;
        v265[50] += 4;
        v267 = *(unsigned int *)(v12 + 8);
        if ((_DWORD)v267 == -1)
        {
          v268 = *(_QWORD *)(a1 + 8);
          LODWORD(v687) = v176;
          JSC::MacroAssembler::jump(v268, (unsigned int *)&v687, v251, v267, v253, v254, v255, v256);
        }
        else
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 7, v267, v253, v254, v255, v256, (uint64_t)&v687);
          *(_DWORD *)v707 = v176;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v687, (unsigned int *)v707, *(_QWORD *)(a1 + 8), v278, v279, v280, v281, v282);
        }
        v269 = HIDWORD(v705);
        if (HIDWORD(v705))
        {
          v270 = 0;
          v271 = 0;
          v272 = *(_QWORD *)(a1 + 8);
          do
          {
            if (v271 >= HIDWORD(v705))
            {
              __break(0xC471u);
              JUMPOUT(0x198E87880);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v704 + v270), v272, a3, a4, a5, a6, a7, a8);
            ++v271;
            v270 += 12;
          }
          while (v269 != v271);
        }
        v273 = v704;
        if (v706 != (_QWORD *)v704 && v704 != 0)
        {
          v704 = 0;
          LODWORD(v705) = 0;
          WTF::fastFree(v273, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v275 = *(_DWORD **)(a1 + 8);
      v276 = v275[50];
      if (v276 < v275[13])
      {
        do
        {
          if ((v276 + 4) > v275[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v275 + 14), a2, a3, a4, a5, a6, a7, a8);
            v276 = v275[50];
          }
          *(_DWORD *)(*((_QWORD *)v275 + 7) + v276) = -721215457;
          v276 = v275[50] + 4;
          v275[50] = v276;
        }
        while (v276 < v275[13]);
        v277 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v277 = *(_QWORD *)(a1 + 8);
      }
      v275[52] = 0;
      *(_DWORD *)(v11 + 120 * v9 + 36) = v276;
      JSC::MacroAssemblerARM64::store64(v277, 7, ((unint64_t)((8 * *(_DWORD *)(v12 + 44) + 8) >> 3) << 35) | 0x1F, a4, a5, a6, a7, a8);
    }
    else if (v13 == 2)
    {
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterNonGreedy(a1, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else if (*(_DWORD *)(v12 + 8) == 1)
  {
    if (!*(_BYTE *)(v11 + 120 * a2 + 92))
    {
      if (a2 + 1 >= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198E87888);
      }
      v37 = *(unsigned int *)(v12 + 16);
      v38 = *(_BYTE *)(a1 + 80);
      if (v37 >= 0x100 && *(_BYTE *)(a1 + 80) == 0)
      {
LABEL_618:
        v208 = v11 + 120 * v9 + 40;
        v665 = *(_QWORD *)(a1 + 8);
        JSC::ARM64Assembler::label((_DWORD *)(v665 + 32), a2, a3, a4, a5, a6, a7, a8, (int *)&v702);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v665 + 56), 335544320, v666, v667, v668, v669, v670, v671);
        v551 = v702;
        v552 = *(unsigned __int8 *)(v665 + 328);
LABEL_619:
        if (v552)
          v672 = 69;
        else
          v672 = 65;
        v704 = v551;
        LOBYTE(v705) = v672;
        *(_WORD *)((char *)&v705 + 1) = 15;
        BYTE3(v705) = -1;
        v544 = (_DWORD *)v208;
LABEL_623:
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v544, &v704, v537, v538, v539, v540, v541, v542);
      }
      else
      {
        LOBYTE(v684) = 6;
        v40 = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2);
        if ((v40 & 4) != 0)
          v41 = 32 * ((v37 | 0x20) - 97 < 0x1A);
        else
          v41 = 0;
        if (v38)
          v42 = 4;
        else
          v42 = 8;
        v43 = *(_DWORD *)(v12 + 40);
        if (v38)
          v44 = 4;
        else
          v44 = 3;
        if ((v40 & 4) != 0)
        {
          v45 = 0;
          v46 = v42 - 1;
          v47 = v11 + 120 * a2 + 144;
          v48 = a2 + 2;
          v49 = v43 + 1;
          v41 = 32 * ((v37 | 0x20) - 97 < 0x1A);
          if (v38)
          {
            while (*(_BYTE *)(v47 + 8) == 17)
            {
              v50 = *(_BYTE **)v47;
              if (**(_BYTE **)v47 != 3
                || v50[2]
                || *((_DWORD *)v50 + 2) != 1
                || v49 + (_DWORD)v45 != *((_DWORD *)v50 + 10)
                || *((_DWORD *)v50 + 4) >= 0x10000u && (*(_BYTE *)(a1 + 84) & 1) != 0)
              {
                break;
              }
              *(_BYTE *)(v47 + 68) = 1;
              if (v48 + v45 >= v8)
                goto LABEL_639;
              v51 = *((unsigned int *)v50 + 4);
              v52 = ((_DWORD)v45 + 1) << v44;
              a4 = 32 << v52;
              if ((v51 | 0x20) - 97 >= 0x1A)
                v53 = 0;
              else
                v53 = 32 << v52;
              v41 |= v53;
              v37 |= v51 << v52;
              ++v45;
              v47 += 120;
              if (v46 == v45)
                goto LABEL_463;
            }
          }
          else
          {
            while (*(_BYTE *)(v47 + 8) == 17)
            {
              v673 = *(_BYTE **)v47;
              if (**(_BYTE **)v47 != 3)
                break;
              if (v673[2])
                break;
              if (*((_DWORD *)v673 + 2) != 1)
                break;
              a3 = v49 + v45;
              if ((_DWORD)a3 != *((_DWORD *)v673 + 10))
                break;
              a2 = *((unsigned int *)v673 + 4);
              if (a2 >= 0x10000)
              {
                a2 = *(unsigned __int8 *)(a1 + 84);
                if ((a2 & 1) != 0)
                  break;
              }
              *(_BYTE *)(v47 + 68) = 1;
              v674 = *((unsigned int *)v673 + 4);
              if (v674 > 0xFF)
                goto LABEL_618;
              if (v48 + v45 >= v8)
                goto LABEL_639;
              v675 = ((_DWORD)v45 + 1) << v44;
              a4 = 32 << v675;
              if ((v674 | 0x20) - 97 >= 0x1A)
                v676 = 0;
              else
                v676 = 32 << v675;
              v41 |= v676;
              v37 |= v674 << v675;
              ++v45;
              v47 += 120;
              if (v46 == v45)
                goto LABEL_463;
            }
          }
        }
        else
        {
          v45 = 0;
          v89 = v42 - 1;
          if (v38)
          {
            v90 = v11 + 120 * a2 + 144;
            while (*(_BYTE *)(v90 + 8) == 17)
            {
              v91 = *(_BYTE **)v90;
              if (**(_BYTE **)v90 != 3
                || v91[2]
                || *((_DWORD *)v91 + 2) != 1
                || v43 + 1 + (_DWORD)v45 != *((_DWORD *)v91 + 10)
                || *((_DWORD *)v91 + 4) >= 0x10000u && (*(_BYTE *)(a1 + 84) & 1) != 0)
              {
                break;
              }
              *(_BYTE *)(v90 + 68) = 1;
              if (a2 + 2 + v45 >= v8)
                goto LABEL_639;
              v37 |= (unint64_t)*((unsigned int *)v91 + 4) << (((int)v45++ + 1) << v44);
              v90 += 120;
              if (v89 == v45)
                goto LABEL_463;
            }
          }
          else
          {
            v189 = v11 + 120 * a2 + 144;
            v190 = a2 + 2;
            while (*(_BYTE *)(v189 + 8) == 17)
            {
              v191 = *(_BYTE **)v189;
              if (**(_BYTE **)v189 != 3)
                break;
              if (v191[2])
                break;
              if (*((_DWORD *)v191 + 2) != 1)
                break;
              a2 = v43 + 1 + v45;
              if ((_DWORD)a2 != *((_DWORD *)v191 + 10)
                || *((_DWORD *)v191 + 4) >= 0x10000u && (*(_BYTE *)(a1 + 84) & 1) != 0)
              {
                break;
              }
              *(_BYTE *)(v189 + 68) = 1;
              v192 = *((unsigned int *)v191 + 4);
              if (v192 > 0xFF)
                goto LABEL_618;
              if (v190 + v45 >= v8)
              {
LABEL_639:
                __break(0xC471u);
                JUMPOUT(0x198E87B10);
              }
              v37 |= v192 << (((int)v45++ + 1) << v44);
              v189 += 120;
              if (v89 == v45)
                goto LABEL_463;
            }
          }
        }
        LODWORD(v42) = v45 + 1;
LABEL_463:
        if ((*(_BYTE *)(a1 + 84) & 1) != 0)
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, 1, 2, a5, a6, a7, a8, (uint64_t)&v687);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v11 + 120 * v9 + 40), &v687, v651, v652, v653, v654, v655, v656);
          v38 = *(_BYTE *)(a1 + 80);
        }
        if (v38)
        {
          v704 = v11 + 120 * v9;
          v705 = a1;
          v706[0] = &v684;
          *(_QWORD *)&v702 = a1;
          *((_QWORD *)&v702 + 1) = &v684;
          v703[0] = v704;
          switch((int)v42)
          {
            case 1:
              v637 = *(_DWORD *)(v11 + 120 * v9 + 100);
              v577 = v637 - v43;
              if (v637 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87304);
              }
LABEL_468:
              v578 = (char)v684;
              v579 = a1;
              v580 = v37;
LABEL_469:
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::jumpIfCharNotEquals((uint64_t)&v699, v579, v580, v577, v578, a6, a7, a8);
              v586 = (int)v699;
              if ((_DWORD)v699 != -1)
              {
                v587 = (_QWORD *)(v11 + 120 * v9 + 40);
                v588 = v11 + 120 * v9;
                v591 = *(_DWORD *)(v588 + 52);
                v590 = (_DWORD *)(v588 + 52);
                v589 = v591;
                if (v591 == *(v590 - 1))
                  goto LABEL_471;
                v593 = (WTF **)((char *)&v699 + 4);
                goto LABEL_472;
              }
              break;
            case 2:
              v640 = *(_DWORD *)(v11 + 120 * v9 + 100);
              if (v640 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87990);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#2}::operator()((uint64_t)&v702, v640 - v43, v37, v41, a5, a6, a7, a8);
              break;
            case 3:
              v641 = v11 + 120 * v9;
              v643 = *(_DWORD *)(v641 + 100);
              v642 = (_DWORD *)(v641 + 100);
              v644 = v643 - v43;
              if (v643 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E879A0);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#2}::operator()((uint64_t)&v702, v644, v37, v41, a5, a6, a7, a8);
              v650 = *v642 - v43;
              if (*v642 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E879A8);
              }
              if ((unint64_t)(v650 - 2) >> 32)
              {
                __break(0xC471u);
                JUMPOUT(0x198E879B0);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,char32_t)#2}::operator()((uint64_t *)&v704, v650 - 2, WORD2(v37), v645, v646, v647, v648, v649);
              break;
            case 4:
              v638 = *(_DWORD *)(v11 + 120 * v9 + 100);
              v94 = v638 >= v43;
              v639 = v638 - v43;
              if (!v94)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87978);
              }
              v598 = *(_QWORD *)(a1 + 8);
              if (v639 >> 30)
              {
                v662 = (char)v684;
                JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, v662, a4, a5, a6, a7, a8);
                do
                {
                  JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), v662, 0x40000000, v662, a5, a6, a7, a8);
                  if (*(_BYTE *)(a1 + 80))
                    JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), v662, 0x40000000, v662, a5, a6, a7, a8);
                  v663 = v639 - 0x40000000;
                  v664 = v639 < 0x40000000;
                  v639 -= 0x40000000;
                }
                while (v664);
                v599 = -v663;
                if (!*(_BYTE *)(a1 + 80))
                {
LABEL_478:
                  v600 = 256;
                  goto LABEL_479;
                }
              }
              else
              {
                v599 = -v639;
              }
              goto LABEL_515;
            default:
              return;
          }
        }
        else
        {
          v704 = a1;
          v705 = (uint64_t)&v684;
          v706[0] = v11 + 120 * v9;
          *(_QWORD *)&v702 = a1;
          *((_QWORD *)&v702 + 1) = &v684;
          v703[0] = v706[0];
          switch((int)v42)
          {
            case 1:
              v576 = *(_DWORD *)(v11 + 120 * v9 + 100);
              v577 = v576 - v43;
              if (v576 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878A0);
              }
              goto LABEL_468;
            case 2:
              v608 = *(_DWORD *)(v11 + 120 * v9 + 100);
              v609 = v608 - v43;
              if (v608 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878E0);
              }
              v610 = (unsigned __int16)v37;
              v611 = (unsigned __int16)v41;
              goto LABEL_488;
            case 3:
              v622 = v11 + 120 * v9;
              v624 = *(_DWORD *)(v622 + 100);
              v623 = (_DWORD *)(v622 + 100);
              v625 = v624 - v43;
              if (v624 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87918);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()((uint64_t *)&v704, v625, (unsigned __int16)v37, (unsigned __int16)v41, a5, a6, a7, a8);
              v626 = *v623 - v43;
              if (*v623 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87920);
              }
              v577 = v626 - 2;
              if ((unint64_t)(v626 - 2) >> 32)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87928);
              }
              v580 = BYTE2(v37);
              v578 = (char)v684;
              v579 = a1;
              goto LABEL_469;
            case 4:
              v607 = *(_DWORD *)(v11 + 120 * v9 + 100);
              if (v607 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878D8);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t *)&v702, v607 - v43, v37, v41, a5, a6, a7, a8);
              return;
            case 5:
              v612 = v11 + 120 * v9;
              v614 = *(_DWORD *)(v612 + 100);
              v613 = (_DWORD *)(v612 + 100);
              v615 = v614 - v43;
              if (v614 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878E8);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t *)&v702, v615, v37, v41, a5, a6, a7, a8);
              v616 = *v613 - v43;
              if (*v613 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878F0);
              }
              v577 = v616 - 4;
              if ((unint64_t)(v616 - 4) >> 32)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878F8);
              }
              v580 = BYTE4(v37);
              goto LABEL_493;
            case 6:
              v617 = v11 + 120 * v9;
              v619 = *(_DWORD *)(v617 + 100);
              v618 = (_DWORD *)(v617 + 100);
              v620 = v619 - v43;
              if (v619 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87900);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t *)&v702, v620, v37, v41, a5, a6, a7, a8);
              v621 = *v618 - v43;
              if (*v618 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87908);
              }
              v609 = v621 - 4;
              if ((unint64_t)(v621 - 4) >> 32)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87910);
              }
              v610 = WORD2(v37);
              v611 = WORD2(v41);
LABEL_488:
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()((uint64_t *)&v704, v609, v610, v611, a5, a6, a7, a8);
              return;
            case 7:
              v627 = v11 + 120 * v9;
              v629 = *(_DWORD *)(v627 + 100);
              v628 = (_DWORD *)(v627 + 100);
              v630 = v629 - v43;
              if (v629 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87930);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t *)&v702, v630, v37, v41, a5, a6, a7, a8);
              v635 = *v628 - v43;
              if (*v628 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87938);
              }
              if ((unint64_t)(v635 - 4) >> 32)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87940);
              }
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()((uint64_t *)&v704, v635 - 4, WORD2(v37), WORD2(v41), v631, v632, v633, v634);
              v636 = *v628 - v43;
              if (*v628 < v43)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87948);
              }
              v577 = v636 - 6;
              if ((unint64_t)(v636 - 6) >> 32)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87950);
              }
              v580 = BYTE6(v37);
LABEL_493:
              v578 = (char)v684;
              v579 = a1;
              goto LABEL_469;
            case 8:
              v596 = *(_DWORD *)(v11 + 120 * v9 + 100);
              v94 = v596 >= v43;
              v597 = v596 - v43;
              if (!v94)
              {
                __break(0xC471u);
                JUMPOUT(0x198E878D0);
              }
              v598 = *(_QWORD *)(a1 + 8);
              if ((v597 & 0x80000000) == 0)
              {
                v599 = -v597;
                goto LABEL_478;
              }
              v660 = (char)v684;
              JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, v660, a4, a5, a6, a7, a8);
              do
              {
                JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), v660, 0x40000000, v660, a5, a6, a7, a8);
                if (*(_BYTE *)(a1 + 80))
                  JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), v660, 0x40000000, v660, a5, a6, a7, a8);
                v597 -= 0x40000000;
              }
              while (v597 < 0);
              v599 = -v597;
              if (!*(_BYTE *)(a1 + 80))
                goto LABEL_478;
              if (v597 >= 0x40000001)
              {
                __break(0xC471u);
                JUMPOUT(0x198E87698);
              }
              return;
            default:
              return;
          }
LABEL_515:
          v600 = 0x100000100;
          v599 *= 2;
LABEL_479:
          JSC::MacroAssemblerARM64::load64(v598, v600, v599 | 0x200000000, (char)v684, a5, a6, a7, a8);
          if (v41)
            JSC::MacroAssemblerARM64::or64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)v41, (char)v684);
          JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 1, (char)v684, v37 | v41, v601, v602, v603, v604, (uint64_t)&v699);
          v586 = (int)v699;
          if ((_DWORD)v699 != -1)
          {
            v587 = (_QWORD *)(v11 + 120 * v9 + 40);
            v605 = v11 + 120 * v9;
            v606 = *(_DWORD *)(v605 + 52);
            v590 = (_DWORD *)(v605 + 52);
            v589 = v606;
            if (v606 == *(v590 - 1))
            {
LABEL_471:
              v592 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v587, (void *)(v589 + 1), (unint64_t)&v699, v581, v582, v583, v584, v585);
              v594 = *v592;
              v593 = v592 + 1;
              v586 = v594;
              LODWORD(v589) = *v590;
            }
            else
            {
              v593 = (WTF **)((char *)&v699 + 4);
            }
LABEL_472:
            v595 = *v587 + 12 * v589;
            *(_DWORD *)v595 = v586;
            *(_QWORD *)(v595 + 4) = *v593;
            ++*v590;
          }
        }
      }
    }
  }
  else
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterFixed(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [40],JSC::Yarr::BoyerMooreFastCandidates,char [9],unsigned int,char [3],unsigned int,char [2]>(uint64_t a1, int **a2, _DWORD *a3, _DWORD *a4)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v44 = off_1E3572250;
    v45 = (WTF *)v47;
    v46 = xmmword_199122F80;
    v47[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "BMSearch characters fastpath lookahead ");
    JSC::Yarr::BoyerMooreFastCandidates::dump(a2, (WTF::PrintStream *)&v44);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", " range:[");
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%u", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", ", ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%u", *a4);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", ")");
    v44[5]((WTF::StringPrintStream *)&v44);
    if (v45)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v41);
      v15 = v41;
    }
    else
    {
      v15 = 0;
    }
    v16 = *(_DWORD *)(a1 + 200);
    v42 = v16;
    v41 = 0;
    v43 = v15;
    v17 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 224))
    {
      v18 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v17 + 1, (unint64_t)&v42);
      v19 = *(unsigned int *)(a1 + 228);
      v20 = *(_QWORD *)(a1 + 216) + 16 * v19;
      *(_DWORD *)v20 = *(_DWORD *)v18;
      v21 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v20 + 8) = v21;
      v22 = v43;
      *(_DWORD *)(a1 + 228) = v19 + 1;
      v43 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(v22, v8, v9, v10, v11, v12, v13, v14);
          WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v23 = v16;
      *(_QWORD *)(v23 + 8) = v15;
      *(_DWORD *)(a1 + 228) = v17 + 1;
    }
    v24 = v41;
    v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    if (v45 != (WTF *)v47)
      WTF::fastFree((unint64_t)v45, v8, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::readCharacter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  v8 = a2;
  v10 = *(unsigned __int8 *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
    v11 = 0x3FFFFFFF;
  else
    v11 = 0x7FFFFFFF;
  if (v11 < a2)
  {
    JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, 6, a4, a5, a6, a7, a8);
    do
    {
      JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
      if (*(_BYTE *)(a1 + 80))
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), 6, 0x40000000, 6, a5, a6, a7, a8);
      v13 = v8 - 0x40000000;
      if (v8 < 0x40000000)
        goto LABEL_17;
      v8 -= 0x40000000;
    }
    while (v13 > v11);
    v10 = *(unsigned __int8 *)(a1 + 80);
    v8 = v13;
  }
  if (v10)
  {
    if (v8 >= 1073741825)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x198E88080);
    }
    v12 = (-2 * v8) | 0x200000000;
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v12, 6, a5, a6, a7, a8);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 0x100000100uLL, v12, 6, a5, a6, a7, a8);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), 0x100uLL, -v8 | 0x200000000, 6, a5, a6, a7, a8);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [34],unsigned int,char [10],unsigned int,char [3],unsigned int,char [2]>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v44 = off_1E3572250;
    v45 = (WTF *)v47;
    v46 = xmmword_199122F80;
    v47[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "BMSearch bitmap lookahead count:(");
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%u", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "),range:[");
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%u", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", ", ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%u", *a4);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", ")");
    v44[5]((WTF::StringPrintStream *)&v44);
    if (v45)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v41);
      v15 = v41;
    }
    else
    {
      v15 = 0;
    }
    v16 = *(_DWORD *)(a1 + 200);
    v42 = v16;
    v41 = 0;
    v43 = v15;
    v17 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 224))
    {
      v18 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v17 + 1, (unint64_t)&v42);
      v19 = *(unsigned int *)(a1 + 228);
      v20 = *(_QWORD *)(a1 + 216) + 16 * v19;
      *(_DWORD *)v20 = *(_DWORD *)v18;
      v21 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v20 + 8) = v21;
      v22 = v43;
      *(_DWORD *)(a1 + 228) = v19 + 1;
      v43 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(v22, v8, v9, v10, v11, v12, v13, v14);
          WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v23 = v16;
      *(_QWORD *)(v23 + 8) = v15;
      *(_DWORD *)(a1 + 228) = v17 + 1;
    }
    v24 = v41;
    v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    if (v45 != (WTF *)v47)
      WTF::fastFree((unint64_t)v45, v8, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::removeCallFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;

  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 28);
  if (v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v9 = 8 * v8 + 63;
      if ((v9 & 0xFFFFFFC0) != 0)
        JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v9 & 0xFFFFFFC0, 31, 31, a5, a6, a7, a8);
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::clearSubpatternStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 212))
  {
    v9 = (a2 << 35) | 3;
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1 + 264, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store32(a1, 16, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrameWithPatch(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;

  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 200);
  for (*a1 = v11; (signed int)v11 < *(_DWORD *)(a2 + 52); *a1 = v11)
  {
    if (v11 + 4 > *(_DWORD *)(a2 + 192))
    {
      v17 = a1;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      a1 = v17;
      v11 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -721215457;
    v11 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v11;
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198E88564);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v12 = *(_BYTE *)(a2 + 272) & 0x1F;
  if (v11 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = v12 | 0xD2800000;
  v13 = *(_DWORD *)(a2 + 200);
  v14 = v13 + 4;
  *(_DWORD *)(a2 + 200) = v13 + 4;
  if ((v13 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v12 | 0xF2A00000;
  v15 = *(_DWORD *)(a2 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a2 + 200) = v15 + 4;
  if ((v15 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v12 | 0xF2C00000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a2, 16, (a3 << 35) | 0x1F, a4, a5, a6, a7, a8);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a1;
  v9 = (a3 << 35) | 0x1F;
  if (!a2)
  {
    v10 = 63;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, a1 + 264, a4, a5, a6, a7, a8);
    a1 = v8;
    v10 = 16;
LABEL_5:
    JSC::MacroAssemblerARM64::store32(a1, v10, v9, a4, a5, a6, a7, a8);
    return;
  }
  __break(0xC471u);
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterFixed(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60[3];
  _DWORD v61[3];
  int v62;
  _DWORD v63[3];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(unsigned int **)(v10 + 120 * a2 + 24);
  v12 = v11[4];
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, 1, 2, a5, a6, a7, a8, (uint64_t)v63);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v10 + 120 * a2 + 40), v63, v53, v54, v55, v56, v57, v58);
  }
  v13 = (unint64_t)v11[2] << ((v12 & 0xFFFF0000) != 0);
  if (HIDWORD(v13))
  {
    __break(0xC471u);
    JUMPOUT(0x198E887F0);
  }
  JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), 1, v13, 7, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label(&v62, *(_QWORD *)(a1 + 8), v14, v15, v16, v17, v18, v19);
  v24 = *(_DWORD *)(v10 + 120 * a2 + 100);
  v25 = v11[10];
  v41 = v24 >= v25;
  v26 = v24 - v25;
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x198E887F8);
  }
  if (v26 < v13)
  {
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x198E887E8);
  }
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::readCharacter(a1, v26 - v13, 6, 7, v20, v21, v22, v23);
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) != 0 && (v12 | 0x20) - 97 <= 0x19)
  {
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x20, 6, 6);
    v12 |= 0x20u;
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 6, v12, v27, v28, v29, v30, (uint64_t)v61);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v10 + 120 * a2 + 40), v61, v31, v32, v33, v34, v35, v36);
  v41 = (*(_BYTE *)(a1 + 84) & 1) != 0 && v12 >= 0x10000;
  if (v41)
    v42 = 2;
  else
    v42 = 1;
  JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v42, 7, 7, v37, v38, v39, v40);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 7, 1, v43, v44, v45, v46, (uint64_t)v60);
  v59 = v62;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v60, (unsigned int *)&v59, *(_QWORD *)(a1 + 8), v47, v48, v49, v50, v51);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterNonGreedy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  JSC::AssemblerBuffer *v17;
  _DWORD *v18;
  JSC::AssemblerBuffer *v19;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 304);
    v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
    v12 = *(_DWORD **)(a1 + 8);
    v13 = v12[50];
    if (v13 + 4 > v12[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 14), a2, a3, a4, a5, a6, a7, a8);
      v13 = v12[50];
    }
    *(_DWORD *)(*((_QWORD *)v12 + 7) + v13) = 1384120327;
    v12[50] += 4;
    v14 = *(_DWORD **)(a1 + 8);
    v15 = v14[50];
    if (v15 < v14[13])
    {
      v17 = (JSC::AssemblerBuffer *)(v14 + 14);
      do
      {
        if ((v15 + 4) > v14[48])
        {
          v19 = v17;
          v18 = v14;
          JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
          v14 = v18;
          v17 = v19;
          v15 = v18[50];
        }
        *(_DWORD *)(*((_QWORD *)v14 + 7) + v15) = -721215457;
        v15 = v14[50] + 4;
        v14[50] = v15;
      }
      while (v15 < v14[13]);
      v16 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 8);
    }
    v14[52] = 0;
    *(_DWORD *)(v10 + 120 * a2 + 36) = v15;
    JSC::MacroAssemblerARM64::store64(v16, 7, ((unint64_t)((8 * *(_DWORD *)(v11 + 44) + 8) >> 3) << 35) | 0x1F, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateBackReference(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _DWORD *v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  int *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _DWORD *v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  int v434;
  _DWORD v435[2];
  char v436;
  __int16 v437;
  char v438;
  _DWORD v439[3];
  _DWORD v440[2];
  char v441;
  __int16 v442;
  char v443;
  int v444[3];
  _DWORD v445[3];
  _DWORD v446[3];
  _DWORD v447[2];
  char v448;
  __int16 v449;
  char v450;
  __int128 v451;
  _BYTE v452[24];
  unsigned int v453;
  _DWORD v454[3];
  _DWORD v455[3];
  unsigned int v456;
  _DWORD v457[3];
  _DWORD v458[3];
  _DWORD v459[2];
  char v460;
  __int16 v461;
  char v462;
  _DWORD v463[3];
  _DWORD v464[3];
  _DWORD v465[3];
  int v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  _BYTE *v470;
  uint64_t v471;
  _BYTE v472[24];
  _BYTE *v473;
  uint64_t v474;
  _BYTE v475[28];
  int v476[3];

  if (*(unsigned int *)(a1 + 316) <= a2)
    goto LABEL_92;
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
  v12 = *(unsigned int *)(v11 + 16);
  v13 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v13 + 12))
  {
    if (*(_DWORD *)(v13 + 124) > v12)
    {
      v434 = *(_DWORD *)(*(_QWORD *)(v13 + 112) + 4 * v12);
      goto LABEL_4;
    }
LABEL_92:
    __break(0xC471u);
    JUMPOUT(0x198E893BCLL);
  }
  v434 = 0;
LABEL_4:
  v14 = *(unsigned int *)(v11 + 44);
  v15 = 8 * v14;
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 1, (v14 << 35) | 0x1F, a4, a5, a6, a7, a8);
  v432 = v12;
  v433 = (v14 << 35) | 0x1F;
  if (*(_BYTE *)(v11 + 2) || *(_DWORD *)(v11 + 8) != 1)
  {
    JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, ((unint64_t)(v15 + 8) << 32) | 0x1F, v16, v17, v18, v19, v20);
    v112 = &qword_199123000;
    v113 = *(unsigned __int8 *)(v11 + 2);
    v473 = v475;
    v474 = 2;
    if (v113 == 2)
    {
      LODWORD(v12) = 255;
      goto LABEL_32;
    }
  }
  else
  {
    v473 = v475;
    v474 = 2;
  }
  v470 = v472;
  v471 = 2;
  if (v434)
  {
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      v12 = 7;
    else
      v12 = 5;
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), ((unint64_t)((4 * v434 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) + 4) >> 2) << 34) | 3, v12, v16, v17, v18, v19, v20);
    JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, v12, v12, v375, v376, v377, v378, (uint64_t)&v451);
    if (*(_BYTE *)(v11 + 2) || *(_DWORD *)(v11 + 8) != 1)
    {
      v468 = v451;
      v469 = *(_QWORD *)((char *)&v451 + 4);
      v385 = &v473;
      v386 = &v468;
    }
    else
    {
      v466 = v451;
      v467 = *(_QWORD *)((char *)&v451 + 4);
      v385 = &v470;
      v386 = &v466;
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v385, v386, v379, v380, v381, v382, v383, v384);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::loadSubPattern(a1, v12, v387, v388, v389, v390, v391, v392);
  }
  else
  {
    JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), 3, (8 * v12), 8, 7, v18, v19, v20);
    LODWORD(v12) = 255;
  }
  if (*(_BYTE *)(v11 + 2) || *(_DWORD *)(v11 + 8) != 1)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 8, 0xFFFFFFFFLL, v21, v22, v23, v24, (uint64_t)v465);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v465, v275, v276, v277, v278, v279, v280);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 8, 7, v281, v282, v283, v284, (uint64_t)v464);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v464, v285, v286, v287, v288, v289, v290);
  }
  else
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 8, 0xFFFFFFFFLL, v21, v22, v23, v24, (uint64_t)v463);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v470, v463, v25, v26, v27, v28, v29, v30);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 8, 7, v31, v32, v33, v34, (uint64_t)&v451);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v470, *(_QWORD *)(a1 + 8), v35, v36, v37, v38, v39, v40);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*(_QWORD *)(a1 + 8), 1u, (v14 + 1), v41, v42, v43, v44, v45);
    if (*(_BYTE *)(v11 + 2) == 1)
      JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, ((unint64_t)(v15 + 16) << 32) | 0x1F, v48, v49, v50, v51, v52);
    v53 = *(_QWORD *)(a1 + 8);
    JSC::ARM64Assembler::label((_DWORD *)(v53 + 32), v46, v47, v48, v49, v50, v51, v52, v444);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v53 + 56), 335544320, v54, v55, v56, v57, v58, v59);
    if (*(_BYTE *)(v53 + 328))
      v66 = 69;
    else
      v66 = 65;
    v459[0] = v444[0];
    v459[1] = 0;
    v460 = v66;
    v461 = 15;
    v462 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v459, v60, v61, v62, v63, v64, v65);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v451, *(_QWORD *)(a1 + 8), v67, v68, v69, v70, v71, v72);
  }
  v75 = (unint64_t)v470;
  if (v472 != v470 && v470)
  {
    v470 = 0;
    LODWORD(v471) = 0;
    WTF::fastFree(v75, v73, v74, v16, v17, v18, v19, v20);
  }
  v76 = *(unsigned __int8 *)(v11 + 2);
  if (!*(_BYTE *)(v11 + 2))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label((int *)&v470, *(_QWORD *)(a1 + 8), v74, v16, v17, v18, v19, v20);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), 1258815719, v77, v78, v79, v80, v81, v82);
    v83 = (_DWORD *)(v10 + 120 * a2 + 40);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::checkNotEnoughInput((uint64_t)v458, a1, 7, v84, v85, v86, v87, v88);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v83, v458, v89, v90, v91, v92, v93, v94);
    if ((_DWORD)v12 == 5)
      v99 = 5;
    else
      v99 = 0xFFFFFFFFLL;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchBackreference(a1, a2, (uint64_t)v83, v99, v95, v96, v97, v98);
    if (*(_DWORD *)(v11 + 8) != 1)
    {
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)(v15 + 8) << 32) | 0x1F, 6, v101, v102, v103, v104, v105);
      v400 = *(_DWORD **)(a1 + 8);
      v401 = v400[50];
      if (v401 + 4 > v400[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v400 + 14), v393, v394, v395, v396, v397, v398, v399);
        v401 = v400[50];
      }
      *(_DWORD *)(*((_QWORD *)v400 + 7) + v401) = 285213894;
      v400[50] += 4;
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 6, ((unint64_t)(v15 + 8) << 32) | 0x1F, v395, v396, v397, v398, v399);
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, *(unsigned int *)(v11 + 8), v402, v403, v404, v405, (uint64_t)v457);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v457, v406, v407, v408, v409, v410, v411);
      if (v434)
      {
        if ((*(_BYTE *)(a1 + 84) & 1) != 0)
          JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), ((unint64_t)((4 * v434 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) + 4) >> 2) << 34) | 3, (char)v12, v413, v414, v415, v416, v417);
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::loadSubPattern(a1, (char)v12, v412, v413, v414, v415, v416, v417);
      }
      else
      {
        JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), 3, (8 * v432), 8, 7, v415, v416, v417);
      }
      v424 = *(_QWORD *)(a1 + 8);
      v456 = v470;
      JSC::MacroAssembler::jump(v424, &v456, v418, v419, v420, v421, v422, v423);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v473, *(_QWORD *)(a1 + 8), v100, v101, v102, v103, v104, v105);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*(_QWORD *)(a1 + 8), 1u, (v14 + 1), v106, v107, v108, v109, v110);
    goto LABEL_26;
  }
  if (v76 != 1)
  {
    v112 = &qword_199123000;
    if (v76 != 2)
      goto LABEL_26;
LABEL_32:
    v470 = v472;
    v471 = v112[138];
    *(_QWORD *)&v451 = v452;
    *((_QWORD *)&v451 + 1) = v471;
    v114 = *(_QWORD *)(a1 + 8);
    JSC::ARM64Assembler::label((_DWORD *)(v114 + 32), (uint64_t)v73, v74, v16, v17, v18, v19, v20, v444);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v114 + 56), 335544320, v115, v116, v117, v118, v119, v120);
    if (*(_BYTE *)(v114 + 328))
      v127 = 69;
    else
      v127 = 65;
    v447[0] = v444[0];
    v447[1] = 0;
    v448 = v127;
    v449 = 15;
    v450 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v447, v121, v122, v123, v124, v125, v126);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v128, v129, v130, v131, v132, v133, v134, v444);
    *(_DWORD *)(v10 + 120 * a2 + 36) = v444[0];
    if (v434)
    {
      if ((*(_BYTE *)(a1 + 84) & 1) != 0)
        v12 = 7;
      else
        v12 = 5;
      JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), ((unint64_t)((4 * v434 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) + 4) >> 2) << 34) | 3, v12, v135, v136, v137, v138, v139);
      JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, v12, v12, v140, v141, v142, v143, (uint64_t)v446);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v451, v446, v144, v145, v146, v147, v148, v149);
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::loadSubPattern(a1, v12, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), 3, (8 * v432), 8, 7, v137, v138, v139);
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 8, 0xFFFFFFFFLL, v156, v157, v158, v159, (uint64_t)v445);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v451, v445, v160, v161, v162, v163, v164, v165);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 8, 7, v166, v167, v168, v169, (uint64_t)v444);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v451, *(_QWORD *)(a1 + 8), v170, v171, v172, v173, v174, v175);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*(_QWORD *)(a1 + 8), 1u, (v14 + 1), v176, v177, v178, v179, v180);
    v181 = *(_QWORD *)(a1 + 8);
    JSC::ARM64Assembler::label((_DWORD *)(v181 + 32), v182, v183, v184, v185, v186, v187, v188, v476);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v181 + 56), 335544320, v189, v190, v191, v192, v193, v194);
    if (*(_BYTE *)(v181 + 328))
      v201 = 69;
    else
      v201 = 65;
    v440[0] = v476[0];
    v440[1] = 0;
    v441 = v201;
    v442 = 15;
    v443 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v440, v195, v196, v197, v198, v199, v200);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v444, *(_QWORD *)(a1 + 8), v202, v203, v204, v205, v206, v207);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), 1258815719, v208, v209, v210, v211, v212, v213);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::checkNotEnoughInput((uint64_t)v439, a1, 7, v214, v215, v216, v217, v218);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v439, v219, v220, v221, v222, v223, v224);
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 1, v433, v225, v226, v227, v228, v229);
    if ((_DWORD)v12 == 5)
      v234 = 5;
    else
      v234 = 0xFFFFFFFFLL;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchBackreference(a1, a2, (uint64_t)&v470, v234, v230, v231, v232, v233);
    v235 = *(_QWORD *)(a1 + 8);
    JSC::ARM64Assembler::label((_DWORD *)(v235 + 32), v236, v237, v238, v239, v240, v241, v242, v476);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v235 + 56), 335544320, v243, v244, v245, v246, v247, v248);
    if (*(_BYTE *)(v235 + 328))
      v255 = 69;
    else
      v255 = 65;
    v435[0] = v476[0];
    v435[1] = 0;
    v436 = v255;
    v437 = 15;
    v438 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v435, v249, v250, v251, v252, v253, v254);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v470, *(_QWORD *)(a1 + 8), v256, v257, v258, v259, v260, v261);
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v433, 1, v262, v263, v264, v265, v266);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v473, *(_QWORD *)(a1 + 8), v267, v268, v269, v270, v271, v272);
    v273 = v451;
    if (v452 != (_BYTE *)v451 && (_QWORD)v451)
    {
      *(_QWORD *)&v451 = 0;
      DWORD2(v451) = 0;
      WTF::fastFree(v273, v73, v74, v16, v17, v18, v19, v20);
    }
    v274 = (unint64_t)v470;
    if (v472 != v470)
      goto LABEL_66;
    goto LABEL_26;
  }
  v470 = v472;
  v471 = 2;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label((int *)&v451, *(_QWORD *)(a1 + 8), v74, v16, v17, v18, v19, v20);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), 1258815719, v291, v292, v293, v294, v295, v296);
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 7, ((unint64_t)(v15 + 16) << 32) | 0x1F, v297, v298, v299, v300, v301);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::checkNotEnoughInput((uint64_t)v455, a1, 7, v302, v303, v304, v305, v306);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v455, v307, v308, v309, v310, v311, v312);
  if ((_DWORD)v12 == 5)
    v317 = 5;
  else
    v317 = 0xFFFFFFFFLL;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchBackreference(a1, a2, (uint64_t)&v470, v317, v313, v314, v315, v316);
  v318 = ((unint64_t)(v15 + 8) << 32) | 0x1F;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v318, 6, v319, v320, v321, v322, v323);
  v331 = *(_DWORD **)(a1 + 8);
  v332 = v331[50];
  if (v332 + 4 > v331[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v331 + 14), v324, v325, v326, v327, v328, v329, v330);
    v332 = v331[50];
  }
  *(_DWORD *)(*((_QWORD *)v331 + 7) + v332) = 285213894;
  v331[50] += 4;
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 6, v318, v326, v327, v328, v329, v330);
  v338 = *(unsigned int *)(v11 + 8);
  if ((_DWORD)v338 != -1)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, v338, v334, v335, v336, v337, (uint64_t)v454);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v473, v454, v425, v426, v427, v428, v429, v430);
  }
  if (v434)
  {
    v431 = (char)v12;
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), ((unint64_t)((4 * v434 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) + 4) >> 2) << 34) | 3, v431, v338, v334, v335, v336, v337);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::loadSubPattern(a1, v431, v333, v338, v334, v335, v336, v337);
  }
  else
  {
    JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), 3, (8 * v432), 8, 7, v335, v336, v337);
  }
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 1, v433, v339, v340, v341, v342, v343);
  v344 = *(_QWORD *)(a1 + 8);
  v453 = v451;
  JSC::MacroAssembler::jump(v344, &v453, v345, v346, v347, v348, v349, v350);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v470, *(_QWORD *)(a1 + 8), v351, v352, v353, v354, v355, v356);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v433, 1, v357, v358, v359, v360, v361);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v473, *(_QWORD *)(a1 + 8), v362, v363, v364, v365, v366, v367);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v368, v369, v370, v371, v372, v373, v374, v444);
  *(_DWORD *)(v10 + 120 * a2 + 36) = v444[0];
  v274 = (unint64_t)v470;
  if (v472 != v470)
  {
LABEL_66:
    if (v274)
    {
      v470 = 0;
      LODWORD(v471) = 0;
      WTF::fastFree(v274, v73, v74, v16, v17, v18, v19, v20);
    }
  }
LABEL_26:
  v111 = (unint64_t)v473;
  if (v475 != v473)
  {
    if (v473)
    {
      v473 = 0;
      LODWORD(v474) = 0;
      WTF::fastFree(v111, v73, v74, v16, v17, v18, v19, v20);
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateDotStarEnclosure(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  int *v23;
  int *v24;
  int v25;
  char *v26;
  _DWORD *v27;
  unsigned int v28;
  _DWORD *v29;
  unsigned int v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint64_t v67;
  int i;
  unsigned int v69;
  char v70;
  int *v71;
  int *v72;
  int v73;
  char *v74;
  _DWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t *v87;
  int v88;
  uint64_t v89;
  _DWORD *v90;
  unsigned int v91;
  int v92;
  _DWORD *v93;
  unsigned int v94;
  _DWORD *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  char v104;
  int *v105;
  int *v106;
  int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  int *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  WTF *v148;
  WTF *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  char v155;
  __int16 v156;
  char v157;
  int v158;
  int v159;
  int v160;
  char v161;
  __int16 v162;
  char v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  char v168;
  __int16 v169;
  char v170;
  int v171;
  unsigned int v172[2];
  char v173;
  __int16 v174;
  char v175;
  int v176;
  int v177;
  char v178;
  __int16 v179;
  char v180;
  WTF *v181;
  uint64_t v182;
  _BYTE v183[24];
  WTF *v184;
  uint64_t v185;
  _BYTE v186[24];
  _BYTE *v187;
  uint64_t v188;
  _BYTE v189[32];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    goto LABEL_175;
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
  v187 = v189;
  v188 = 2;
  v184 = (WTF *)v186;
  v185 = 2;
  v181 = (WTF *)v183;
  v182 = 2;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 2) & 0x10) != 0)
  {
    v27 = *(_DWORD **)(a1 + 8);
    v28 = v27[50];
    if (v28 + 4 > v27[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v27 + 14), a2, a3, a4, a5, a6, a7, a8);
      v28 = v27[50];
    }
    *(_DWORD *)(*((_QWORD *)v27 + 7) + v28) = 1384120327;
    v27[50] += 4;
    v29 = *(_DWORD **)(a1 + 8);
    v30 = v29[50];
    if (*(_BYTE *)(a1 + 81) == 1)
      v31 = -1207959449;
    else
      v31 = -1442380829;
    if (v30 + 4 > v29[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v29 + 14), a2, a3, a4, a5, a6, a7, a8);
      v30 = v29[50];
    }
    v32 = -1442708511;
    *(_DWORD *)(*((_QWORD *)v29 + 7) + v30) = v31;
    v29[50] += 4;
  }
  else
  {
    v152 = v11;
    v12 = *(_DWORD **)(a1 + 8);
    v13 = v12[50];
    if (*(_BYTE *)(a1 + 81) == 1)
      v14 = -1203765145;
    else
      v14 = -1442642969;
    if (v13 + 4 > v12[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 14), a2, a3, a4, a5, a6, a7, a8);
      v13 = v12[50];
    }
    *(_DWORD *)(*((_QWORD *)v12 + 7) + v13) = v14;
    v12[50] += 4;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_DWORD *)(v15 + 200);
    if (v16 + 4 > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + v16) = 1795883263;
    v17 = *(_DWORD *)(v15 + 200) + 4;
    *(_DWORD *)(v15 + 200) = v17;
    if (*(_BYTE *)(v15 + 328))
    {
      while ((signed int)v17 < *(_DWORD *)(v15 + 52))
      {
        if (v17 + 4 > *(_DWORD *)(v15 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
          v17 = *(_DWORD *)(v15 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v15 + 56) + v17) = -721215457;
        v17 = *(_DWORD *)(v15 + 200) + 4;
        *(_DWORD *)(v15 + 200) = v17;
      }
      *(_DWORD *)(v15 + 208) = 0;
    }
    if (v17 + 4 > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
      v17 = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + v17) = 1409286153;
    v18 = *(_DWORD *)(v15 + 200);
    v19 = v18 + 4;
    *(_DWORD *)(v15 + 200) = v18 + 4;
    v20 = v18 + 8;
    v21 = v18 + 4;
    if (v20 > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + v21) = -721215457;
    *(_DWORD *)(v15 + 200) += 4;
    if (*(_BYTE *)(v15 + 328))
      v22 = -122;
    else
      v22 = -126;
    v176 = v19;
    v177 = 0;
    v178 = v22;
    v179 = 9;
    v180 = -1;
    if (v19 != -1)
    {
      if (HIDWORD(v185) == (_DWORD)v185)
      {
        v23 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v184, (void *)(HIDWORD(v185) + 1), (unint64_t)&v176, a4, a5, a6, a7, a8);
        v25 = *v23;
        v24 = v23 + 1;
        v26 = (char *)v184 + 12 * HIDWORD(v185);
        *(_DWORD *)v26 = v25;
      }
      else
      {
        v24 = &v177;
        v26 = (char *)v184 + 12 * HIDWORD(v185);
        *(_DWORD *)v26 = v19;
      }
      *(_QWORD *)(v26 + 4) = *(_QWORD *)v24;
      ++HIDWORD(v185);
    }
    v33 = *(_DWORD **)(a1 + 8);
    v34 = v33[50];
    if (v34 < v33[13])
    {
      do
      {
        if ((v34 + 4) > v33[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v33 + 14), a2, a3, a4, a5, a6, a7, a8);
          v34 = v33[50];
        }
        *(_DWORD *)(*((_QWORD *)v33 + 7) + v34) = -721215457;
        v34 = v33[50] + 4;
        v33[50] = v34;
      }
      while (v34 < v33[13]);
      v36 = *(_DWORD **)(a1 + 8);
      v35 = v36[50];
    }
    else
    {
      v35 = v33[50];
      v36 = *(_DWORD **)(a1 + 8);
    }
    v33[52] = 0;
    if (v35 + 4 > v36[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v36 + 14), a2, a3, a4, a5, a6, a7, a8);
      v35 = v36[50];
    }
    *(_DWORD *)(*((_QWORD *)v36 + 7) + v35) = 1358955751;
    v36[50] += 4;
    v37 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 80))
      JSC::MacroAssemblerARM64::load16(v37, 0x100000700uLL, 0x200000000uLL, 6, a5, a6, a7, a8);
    else
      JSC::MacroAssemblerARM64::load8(v37, 0x700uLL, 0x200000000uLL, 6, a5, a6, a7, a8);
    JSC::Yarr::YarrPattern::newlineCharacterClass(*(JSC::Yarr::YarrPattern **)(a1 + 56));
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(a1, (uint64_t)&v187, v38, v39, v40, v41, v42, v43);
    v51 = *(_QWORD *)(a1 + 8);
    v52 = *(_DWORD *)(v51 + 200);
    if (v52 + 4 > *(_DWORD *)(v51 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 56), v44, v45, v46, v47, v48, v49, v50);
      v52 = *(_DWORD *)(v51 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v51 + 56) + v52) = 1795883263;
    v53 = *(_DWORD *)(v51 + 200) + 4;
    *(_DWORD *)(v51 + 200) = v53;
    if (*(_BYTE *)(v51 + 328))
    {
      while ((signed int)v53 < *(_DWORD *)(v51 + 52))
      {
        if (v53 + 4 > *(_DWORD *)(v51 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 56), v44, v45, v46, v47, v48, v49, v50);
          v53 = *(_DWORD *)(v51 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v51 + 56) + v53) = -721215457;
        v53 = *(_DWORD *)(v51 + 200) + 4;
        *(_DWORD *)(v51 + 200) = v53;
      }
      *(_DWORD *)(v51 + 208) = 0;
    }
    if (v53 + 4 > *(_DWORD *)(v51 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 56), v44, v45, v46, v47, v48, v49, v50);
      v53 = *(_DWORD *)(v51 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v51 + 56) + v53) = 1409286152;
    v54 = *(_DWORD *)(v51 + 200);
    v55 = v54 + 4;
    *(_DWORD *)(v51 + 200) = v54 + 4;
    v56 = v54 + 8;
    v57 = v54 + 4;
    if (v56 > *(_DWORD *)(v51 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 56), v44, v45, v46, v47, v48, v49, v50);
      v57 = *(_DWORD *)(v51 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v51 + 56) + v57) = -721215457;
    *(_DWORD *)(v51 + 200) += 4;
    if (*(_BYTE *)(v51 + 328))
      v58 = -122;
    else
      v58 = -126;
    v172[0] = v55;
    v172[1] = 0;
    v173 = v58;
    v174 = 8;
    v175 = -1;
    v171 = v34;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v172, (unsigned int *)&v171, *(_QWORD *)(a1 + 8), v46, v47, v48, v49, v50);
    v67 = *(_QWORD *)(a1 + 8);
    for (i = *(_DWORD *)(v67 + 200); i < *(_DWORD *)(v67 + 52); *(_DWORD *)(v67 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v67 + 192))
      {
        v66 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v59, v60, v61, v62, v63, v64, v65).n128_u64[0];
        i = *(_DWORD *)(v67 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v67 + 56) + i) = -721215457;
      i = *(_DWORD *)(v67 + 200) + 4;
    }
    v69 = i;
    if ((i + 4) > *(_DWORD *)(v67 + 192))
    {
      v66 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v59, v60, v61, v62, v63, v64, v65).n128_u64[0];
      v69 = *(_DWORD *)(v67 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v67 + 56) + v69) = 335544320;
    *(_DWORD *)(v67 + 200) += 4;
    if (*(_BYTE *)(v67 + 328))
      v70 = 69;
    else
      v70 = 65;
    v166 = i;
    v167 = 0;
    v168 = v70;
    v169 = 15;
    v170 = -1;
    if (i != -1)
    {
      if (HIDWORD(v185) == (_DWORD)v185)
      {
        v71 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v184, (void *)(HIDWORD(v185) + 1), (unint64_t)&v166, v61, v62, v63, v64, v65);
        v73 = *v71;
        v72 = v71 + 1;
        v74 = (char *)v184 + 12 * HIDWORD(v185);
        *(_DWORD *)v74 = v73;
      }
      else
      {
        v72 = &v167;
        v74 = (char *)v184 + 12 * HIDWORD(v185);
        *(_DWORD *)v74 = i;
      }
      *(_QWORD *)(v74 + 4) = *(_QWORD *)v72;
      ++HIDWORD(v185);
    }
    v75 = *(_DWORD **)(a1 + 8);
    if (HIDWORD(v188))
    {
      v76 = 0;
      v77 = 0;
      v78 = 12 * HIDWORD(v188);
      while (v77 < HIDWORD(v188))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v187[v76], (uint64_t)v75, v60, v61, v62, v63, v64, v65);
        ++v77;
        v76 += 12;
        if (v78 == v76)
        {
          v75 = *(_DWORD **)(a1 + 8);
          goto LABEL_68;
        }
      }
      __break(0xC471u);
LABEL_175:
      JUMPOUT(0x198E8A270);
    }
LABEL_68:
    v79 = v75[50];
    if (v79 + 4 > v75[48])
    {
      v66 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 14), v59, v60, v61, v62, v63, v64, v65).n128_u64[0];
      v79 = v75[50];
    }
    *(_DWORD *)(*((_QWORD *)v75 + 7) + v79) = 285213927;
    v75[50] += 4;
    if (HIDWORD(v185))
    {
      v80 = 0;
      v81 = 0;
      v82 = *(_QWORD *)(a1 + 8);
      v83 = 12 * HIDWORD(v185);
      do
      {
        if (v81 >= HIDWORD(v185))
        {
          __break(0xC471u);
          JUMPOUT(0x198E8A278);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v184 + v80), v82, v60, v61, v62, v63, v64, v65);
        ++v81;
        v80 += 12;
      }
      while (v83 != v80);
    }
    if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) == 0 && (*(_BYTE *)(v152 + 16) & 1) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 1, 7, v62, v63, v64, v65, (uint64_t)&v164, v66);
      v84 = v164;
      if (v164 != -1)
      {
        v85 = *(unsigned int *)(v10 + 120 * a2 + 52);
        if ((_DWORD)v85 == *(_DWORD *)(v10 + 120 * a2 + 48))
        {
          v86 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10 + 120 * a2 + 40, (void *)(v85 + 1), (unint64_t)&v164, v61, v62, v63, v64, v65);
          v88 = *v86;
          v87 = (uint64_t *)(v86 + 1);
          v84 = v88;
          LODWORD(v85) = *(_DWORD *)(v10 + 120 * a2 + 52);
        }
        else
        {
          v87 = &v165;
        }
        v89 = *(_QWORD *)(v10 + 120 * a2 + 40) + 12 * v85;
        *(_DWORD *)v89 = v84;
        *(_QWORD *)(v89 + 4) = *v87;
        ++*(_DWORD *)(v10 + 120 * a2 + 52);
      }
    }
    v151 = v10;
    v32 = -1442380831;
    v90 = *(_DWORD **)(a1 + 8);
    v91 = v90[50];
    if (*(_BYTE *)(a1 + 81) == 1)
      v92 = -1207959449;
    else
      v92 = -1442380829;
    if (v91 + 4 > v90[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v90 + 14), v59, v60, v61, v62, v63, v64, v65);
      v91 = v90[50];
    }
    *(_DWORD *)(*((_QWORD *)v90 + 7) + v91) = v92;
    v90[50] += 4;
    v93 = *(_DWORD **)(a1 + 8);
    v94 = v93[50];
    if (v94 + 4 > v93[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v93 + 14), v59, v60, v61, v62, v63, v64, v65);
      v94 = v93[50];
    }
    *(_DWORD *)(*((_QWORD *)v93 + 7) + v94) = -1442774041;
    v93[50] += 4;
    v95 = *(_DWORD **)(a1 + 8);
    v96 = v95[50];
    if (v96 < v95[13])
    {
      do
      {
        if ((v96 + 4) > v95[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v95 + 14), v59, v60, v61, v62, v63, v64, v65);
          v96 = v95[50];
        }
        *(_DWORD *)(*((_QWORD *)v95 + 7) + v96) = -721215457;
        v96 = v95[50] + 4;
        v95[50] = v96;
      }
      while (v96 < v95[13]);
      v98 = *(_QWORD *)(a1 + 8);
      v97 = *(_DWORD *)(v98 + 200);
    }
    else
    {
      v97 = v95[50];
      v98 = *(_QWORD *)(a1 + 8);
    }
    v95[52] = 0;
    if (v97 + 4 > *(_DWORD *)(v98 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v98 + 56), v59, v60, v61, v62, v63, v64, v65);
      v97 = *(_DWORD *)(v98 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v98 + 56) + v97) = 1795293439;
    v99 = *(_DWORD *)(v98 + 200) + 4;
    *(_DWORD *)(v98 + 200) = v99;
    if (*(_BYTE *)(v98 + 328))
    {
      while ((signed int)v99 < *(_DWORD *)(v98 + 52))
      {
        if (v99 + 4 > *(_DWORD *)(v98 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v98 + 56), v59, v60, v61, v62, v63, v64, v65);
          v99 = *(_DWORD *)(v98 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v98 + 56) + v99) = -721215457;
        v99 = *(_DWORD *)(v98 + 200) + 4;
        *(_DWORD *)(v98 + 200) = v99;
      }
      *(_DWORD *)(v98 + 208) = 0;
    }
    if (v99 + 4 > *(_DWORD *)(v98 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v98 + 56), v59, v60, v61, v62, v63, v64, v65);
      v99 = *(_DWORD *)(v98 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v98 + 56) + v99) = 1409286144;
    v100 = *(_DWORD *)(v98 + 200);
    v101 = v100 + 4;
    *(_DWORD *)(v98 + 200) = v100 + 4;
    v102 = v100 + 8;
    v103 = v100 + 4;
    if (v102 > *(_DWORD *)(v98 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v98 + 56), v59, v60, v61, v62, v63, v64, v65);
      v103 = *(_DWORD *)(v98 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v98 + 56) + v103) = -721215457;
    *(_DWORD *)(v98 + 200) += 4;
    if (*(_BYTE *)(v98 + 328))
      v104 = -122;
    else
      v104 = -126;
    v159 = v101;
    v160 = 0;
    v161 = v104;
    v162 = 0;
    v163 = -1;
    if (v101 != -1)
    {
      if (HIDWORD(v182) == (_DWORD)v182)
      {
        v105 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v181, (void *)(HIDWORD(v182) + 1), (unint64_t)&v159, v61, v62, v63, v64, v65);
        v107 = *v105;
        v106 = v105 + 1;
        v108 = (char *)v181 + 12 * HIDWORD(v182);
        *(_DWORD *)v108 = v107;
      }
      else
      {
        v106 = &v160;
        v108 = (char *)v181 + 12 * HIDWORD(v182);
        *(_DWORD *)v108 = v101;
      }
      *(_QWORD *)(v108 + 4) = *(_QWORD *)v106;
      ++HIDWORD(v182);
    }
    v109 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 80))
      JSC::MacroAssemblerARM64::load16(v109, 0x100000700uLL, 0x200000000uLL, 6, v62, v63, v64, v65);
    else
      JSC::MacroAssemblerARM64::load8(v109, 0x700uLL, 0x200000000uLL, 6, v62, v63, v64, v65);
    JSC::Yarr::YarrPattern::newlineCharacterClass(*(JSC::Yarr::YarrPattern **)(a1 + 56));
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(a1, (uint64_t)&v181, v110, v111, v112, v113, v114, v115);
    v123 = *(_DWORD **)(a1 + 8);
    v124 = v123[50];
    if (v124 + 4 > v123[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v123 + 14), v116, v117, v118, v119, v120, v121, v122);
      v124 = v123[50];
    }
    *(_DWORD *)(*((_QWORD *)v123 + 7) + v124) = 285213927;
    v123[50] += 4;
    v125 = *(_QWORD *)(a1 + 8);
    v158 = v96;
    JSC::MacroAssembler::jump(v125, (unsigned int *)&v158, v117, v118, v119, v120, v121, v122);
    if (HIDWORD(v182))
    {
      v126 = 0;
      v127 = 0;
      v128 = *(_QWORD *)(a1 + 8);
      v129 = 12 * HIDWORD(v182);
      do
      {
        if (v127 >= HIDWORD(v182))
        {
          __break(0xC471u);
          JUMPOUT(0x198E8A280);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v181 + v126), v128, a3, a4, a5, a6, a7, a8);
        ++v127;
        v126 += 12;
      }
      while (v129 != v126);
    }
    if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) == 0 && (*(_BYTE *)(v152 + 16) & 2) != 0)
    {
      v130 = *(_QWORD *)(a1 + 8);
      v131 = *(_DWORD *)(v130 + 200);
      if (v131 + 4 > *(_DWORD *)(v130 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), a2, a3, a4, a5, a6, a7, a8);
        v131 = *(_DWORD *)(v130 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v130 + 56) + v131) = 1795293439;
      v132 = *(_DWORD *)(v130 + 200) + 4;
      *(_DWORD *)(v130 + 200) = v132;
      if (*(_BYTE *)(v130 + 328))
      {
        while ((signed int)v132 < *(_DWORD *)(v130 + 52))
        {
          if (v132 + 4 > *(_DWORD *)(v130 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), a2, a3, a4, a5, a6, a7, a8);
            v132 = *(_DWORD *)(v130 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v130 + 56) + v132) = -721215457;
          v132 = *(_DWORD *)(v130 + 200) + 4;
          *(_DWORD *)(v130 + 200) = v132;
        }
        *(_DWORD *)(v130 + 208) = 0;
      }
      if (v132 + 4 > *(_DWORD *)(v130 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), a2, a3, a4, a5, a6, a7, a8);
        v132 = *(_DWORD *)(v130 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v130 + 56) + v132) = 1409286145;
      v133 = *(_DWORD *)(v130 + 200);
      v134 = v133 + 4;
      *(_DWORD *)(v130 + 200) = v133 + 4;
      v135 = v133 + 8;
      v136 = v133 + 4;
      if (v135 > *(_DWORD *)(v130 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), a2, a3, a4, a5, a6, a7, a8);
        v136 = *(_DWORD *)(v130 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v130 + 56) + v136) = -721215457;
      *(_DWORD *)(v130 + 200) += 4;
      if (*(_BYTE *)(v130 + 328))
        v137 = -122;
      else
        v137 = -126;
      v153 = v134;
      v154 = 0;
      v155 = v137;
      v156 = 1;
      v157 = -1;
      if (v134 != -1)
      {
        v138 = v151 + 120 * a2 + 40;
        v139 = *(unsigned int *)(v138 + 12);
        if ((_DWORD)v139 == *(_DWORD *)(v138 + 8))
        {
          v140 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v138, (void *)(v139 + 1), (unint64_t)&v153, a4, a5, a6, a7, a8);
          v142 = *v140;
          v141 = v140 + 1;
          v143 = *(_QWORD *)v138 + 12 * *(unsigned int *)(v138 + 12);
          *(_DWORD *)v143 = v142;
        }
        else
        {
          v141 = &v154;
          v143 = *(_QWORD *)v138 + 12 * v139;
          *(_DWORD *)v143 = v134;
        }
        *(_QWORD *)(v143 + 4) = *(_QWORD *)v141;
        ++*(_DWORD *)(v138 + 12);
      }
    }
  }
  v144 = *(_QWORD *)(a1 + 8);
  v147 = *(_DWORD *)(v144 + 200);
  v146 = (unsigned int *)(v144 + 200);
  v145 = v147;
  if (v147 + 4 > *(v146 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v146 - 36), a2, a3, a4, a5, a6, a7, a8);
    v145 = *v146;
  }
  *(_DWORD *)(*((_QWORD *)v146 - 18) + v145) = v32;
  *v146 += 4;
  v148 = v181;
  if (v183 != (_BYTE *)v181 && v181)
  {
    v181 = 0;
    LODWORD(v182) = 0;
    WTF::fastFree((unint64_t)v148, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v149 = v184;
  if (v186 != (_BYTE *)v184 && v184)
  {
    v184 = 0;
    LODWORD(v185) = 0;
    WTF::fastFree((unint64_t)v149, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v150 = (unint64_t)v187;
  if (v189 != v187 && v187)
  {
    v187 = 0;
    LODWORD(v188) = 0;
    WTF::fastFree(v150, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v10;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;

  v8 = a4;
  v10 = a2;
  v12 = *a1;
  v13 = *(_DWORD **)(*a1 + 8);
  v14 = *(unsigned __int8 *)(v12 + 80);
  if (*(_BYTE *)(v12 + 80))
    v15 = 0x3FFFFFFF;
  else
    v15 = 0x7FFFFFFF;
  if (v15 < a2)
  {
    v34 = *(char *)a1[1];
    v36 = v13;
    JSC::MacroAssemblerARM64::move(v13, 0, v34, a4, a5, a6, a7, a8);
    do
    {
      JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v12 + 8), v34, 0x40000000, v34, a5, a6, a7, a8);
      if (*(_BYTE *)(v12 + 80))
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v12 + 8), v34, 0x40000000, v34, a5, a6, a7, a8);
      v35 = v10 - 0x40000000;
      if (v10 < 0x40000000)
        goto LABEL_23;
      v10 -= 0x40000000;
    }
    while (v35 > v15);
    v14 = *(unsigned __int8 *)(v12 + 80);
    v10 = v35;
    v13 = v36;
  }
  v16 = -v10;
  if (v14)
  {
    if (v10 >= 1073741825)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x198E8A464);
    }
    v16 = -2 * v10;
    v17 = 0x100000100;
  }
  else
  {
    v17 = 256;
  }
  JSC::MacroAssemblerARM64::load16((uint64_t)v13, v17, v16 | 0x200000000, *(char *)a1[1], a5, a6, a7, a8);
  if (v8)
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(v12 + 8), (JSC::ARM64LogicalImmediate *)v8, *(_BYTE *)a1[1], *(char *)a1[1]);
  v22 = a1[2];
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(v12 + 8), 1, *(char *)a1[1], v8 | a3, v18, v19, v20, v21, (uint64_t)&v37);
  v28 = v37;
  if (v37 != -1)
  {
    v29 = *(unsigned int *)(v22 + 52);
    if ((_DWORD)v29 == *(_DWORD *)(v22 + 48))
    {
      v30 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 40, (void *)(v29 + 1), (unint64_t)&v37, v23, v24, v25, v26, v27);
      v32 = *v30;
      v31 = (uint64_t *)(v30 + 1);
      v28 = v32;
      v33 = *(_QWORD *)(v22 + 40) + 12 * *(unsigned int *)(v22 + 52);
    }
    else
    {
      v31 = &v38;
      v33 = *(_QWORD *)(v22 + 40) + 12 * v29;
    }
    *(_DWORD *)v33 = v28;
    *(_QWORD *)(v33 + 4) = *v31;
    ++*(_DWORD *)(v22 + 52);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  void *v33;
  _DWORD *v34;
  _DWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  _DWORD *v55;
  _DWORD v56[3];
  _DWORD v57[3];

  v9 = a2;
  v11 = *a1;
  if ((_DWORD)a4)
  {
    v12 = a4;
    v13 = *(_DWORD **)(v11 + 8);
    v14 = *(unsigned __int8 *)(v11 + 80);
    if (*(_BYTE *)(v11 + 80))
      v15 = 0x3FFFFFFF;
    else
      v15 = 0x7FFFFFFF;
    if (v15 < a2)
    {
      v51 = *(char *)a1[1];
      v55 = *(_DWORD **)(v11 + 8);
      JSC::MacroAssemblerARM64::move(v13, 0, v51, a4, a5, a6, a7, a8);
      do
      {
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v11 + 8), v51, 0x40000000, v51, a5, a6, a7, a8);
        if (*(_BYTE *)(v11 + 80))
          JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v11 + 8), v51, 0x40000000, v51, a5, a6, a7, a8);
        v52 = v9 - 0x40000000;
        if (v9 < 0x40000000)
        {
          __break(0xC471u);
          JUMPOUT(0x198E8A7B4);
        }
        v9 -= 0x40000000;
      }
      while (v52 > v15);
      v14 = *(unsigned __int8 *)(v11 + 80);
      v9 = v52;
      v13 = v55;
    }
    v16 = -v9;
    if (v14)
    {
      if (v9 >= 1073741825)
      {
        __break(0xC471u);
        JUMPOUT(0x198E8A7A4);
      }
      v17 = 0x100000100;
      v16 = -2 * v9;
    }
    else
    {
      v17 = 256;
    }
    JSC::MacroAssemblerARM64::load32((uint64_t)v13, v17, v16 | 0x200000000, *(char *)a1[1], a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(v11 + 8), (JSC::ARM64LogicalImmediate *)v12, *(_BYTE *)a1[1], *(char *)a1[1]);
    v18 = a1[2];
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(v11 + 8), 1, *(char *)a1[1], v12 | a3, v19, v20, v21, v22, (uint64_t)v57);
    v28 = v57[0];
    if (v57[0] != -1)
    {
      v29 = (_QWORD *)(v18 + 40);
      v32 = *(_DWORD *)(v18 + 52);
      v31 = (_DWORD *)(v18 + 52);
      v30 = v32;
      if (v32 == *(v31 - 1))
      {
        v33 = (void *)(v30 + 1);
        v34 = v57;
LABEL_11:
        v35 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v33, (unint64_t)v34, v23, v24, v25, v26, v27);
        v37 = *v35;
        v36 = v35 + 1;
        v28 = v37;
        LODWORD(v30) = *v31;
LABEL_24:
        v50 = *v29 + 12 * v30;
        *(_DWORD *)v50 = v28;
        *(_QWORD *)(v50 + 4) = *v36;
        ++*v31;
        return;
      }
      v49 = v57;
      goto LABEL_23;
    }
  }
  else
  {
    v38 = a1[2];
    v39 = *(_QWORD *)(v11 + 8);
    v40 = *(unsigned __int8 *)(v11 + 80);
    if (*(_BYTE *)(v11 + 80))
      v41 = 0x3FFFFFFF;
    else
      v41 = 0x7FFFFFFF;
    if (v41 < a2)
    {
      v53 = *(char *)a1[1];
      JSC::MacroAssemblerARM64::move(*(_DWORD **)(v11 + 8), 0, v53, a4, a5, a6, a7, a8);
      do
      {
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v11 + 8), v53, 0x40000000, v53, a5, a6, a7, a8);
        if (*(_BYTE *)(v11 + 80))
          JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v11 + 8), v53, 0x40000000, v53, a5, a6, a7, a8);
        v54 = v9 - 0x40000000;
        if (v9 < 0x40000000)
          goto LABEL_47;
        v9 -= 0x40000000;
      }
      while (v54 > v41);
      v40 = *(unsigned __int8 *)(v11 + 80);
      v9 = v54;
    }
    v42 = -v9;
    if (v40)
    {
      if (v9 >= 1073741825)
      {
        __break(0xC471u);
        JUMPOUT(0x198E8A7ACLL);
      }
      v43 = 0x100000100;
      v42 = -2 * v9;
    }
    else
    {
      v43 = 256;
    }
    if (!*(_BYTE *)(v39 + 212))
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x198E8A6B0);
    }
    *(_DWORD *)(*(_QWORD *)(v39 + 296) + 208) &= ~*(_DWORD *)(v39 + 320);
    JSC::MacroAssemblerARM64::load32(v39, v43, v42 | 0x200000000, *(char *)(v39 + 304), a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(v39, 1, 17, a3, v44, v45, v46, v47, (uint64_t)v56);
    v28 = v56[0];
    if (v56[0] != -1)
    {
      v29 = (_QWORD *)(v38 + 40);
      v48 = *(_DWORD *)(v38 + 52);
      v31 = (_DWORD *)(v38 + 52);
      v30 = v48;
      if (v48 == *(v31 - 1))
      {
        v33 = (void *)(v30 + 1);
        v34 = v56;
        goto LABEL_11;
      }
      v49 = v56;
LABEL_23:
      v36 = v49 + 1;
      goto LABEL_24;
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,char32_t)#2}::operator()(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v8 = *a1;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::jumpIfCharNotEquals((uint64_t)&v20, a1[1], a3, a2, *(char *)a1[2], a6, a7, a8);
  v14 = v20;
  if (v20 != -1)
  {
    v15 = *(unsigned int *)(v8 + 52);
    if ((_DWORD)v15 == *(_DWORD *)(v8 + 48))
    {
      v16 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 40, (void *)(v15 + 1), (unint64_t)&v20, v9, v10, v11, v12, v13);
      v18 = *v16;
      v17 = (uint64_t *)(v16 + 1);
      v14 = v18;
      v19 = *(_QWORD *)(v8 + 40) + 12 * *(unsigned int *)(v8 + 52);
    }
    else
    {
      v17 = &v21;
      v19 = *(_QWORD *)(v8 + 40) + 12 * v15;
    }
    *(_DWORD *)v19 = v14;
    *(_QWORD *)(v19 + 4) = *v17;
    ++*(_DWORD *)(v8 + 52);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#2}::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  _DWORD v56[3];
  unsigned int v57;

  v9 = a2;
  v11 = *(_QWORD *)a1;
  if ((_DWORD)a4)
  {
    v33 = a4;
    v34 = *(_QWORD *)(v11 + 8);
    v35 = **(char **)(a1 + 8);
    v57 = a2;
    v36 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::negativeOffsetIndexedAddress(v11, (int *)&v57, v35, 1, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load32(v34, v36, v37, **(char **)(a1 + 8), v37, v38, v39, v40);
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(v11 + 8), (JSC::ARM64LogicalImmediate *)v33, **(_BYTE **)(a1 + 8), **(char **)(a1 + 8));
    v41 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 40);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(v11 + 8), 1, **(char **)(a1 + 8), v33 | a3, v42, v43, v44, v45, (uint64_t)v56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v41, v56, v46, v47, v48, v49, v50, v51);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(unsigned __int8 *)(v11 + 80);
    if (*(_BYTE *)(v11 + 80))
      v15 = 0x3FFFFFFF;
    else
      v15 = 0x7FFFFFFF;
    if (v15 < a2)
    {
      v52 = **(char **)(a1 + 8);
      JSC::MacroAssemblerARM64::move(*(_DWORD **)(v11 + 8), 0, v52, a4, a5, a6, a7, a8);
      do
      {
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v11 + 8), v52, 0x40000000, v52, a5, a6, a7, a8);
        if (*(_BYTE *)(v11 + 80))
          JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(v11 + 8), v52, 0x40000000, v52, a5, a6, a7, a8);
        v53 = v9 - 0x40000000;
        if (v9 < 0x40000000)
          goto LABEL_26;
        v9 -= 0x40000000;
      }
      while (v53 > v15);
      v14 = *(unsigned __int8 *)(v11 + 80);
      v9 = v53;
    }
    v16 = -v9;
    if (v14)
    {
      if (v9 >= 1073741825)
      {
        __break(0xC471u);
        JUMPOUT(0x198E8AAECLL);
      }
      v16 = -2 * v9;
      v17 = 0x100000100;
    }
    else
    {
      v17 = 256;
    }
    if (!*(_BYTE *)(v13 + 212))
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x198E8AA70);
    }
    *(_DWORD *)(*(_QWORD *)(v13 + 296) + 208) &= ~*(_DWORD *)(v13 + 320);
    JSC::MacroAssemblerARM64::load32(v13, v17, v16 | 0x200000000, *(char *)(v13 + 304), a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(v13, 1, 17, a3, v18, v19, v20, v21, (uint64_t)&v54);
    v27 = v54;
    if (v54 != -1)
    {
      v28 = *(unsigned int *)(v12 + 52);
      if ((_DWORD)v28 == *(_DWORD *)(v12 + 48))
      {
        v29 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 40, (void *)(v28 + 1), (unint64_t)&v54, v22, v23, v24, v25, v26);
        v31 = *v29;
        v30 = (uint64_t *)(v29 + 1);
        v27 = v31;
        v32 = *(_QWORD *)(v12 + 40) + 12 * *(unsigned int *)(v12 + 52);
      }
      else
      {
        v30 = &v55;
        v32 = *(_QWORD *)(v12 + 40) + 12 * v28;
      }
      *(_DWORD *)v32 = v27;
      *(_QWORD *)(v32 + 4) = *v30;
      ++*(_DWORD *)(v12 + 52);
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::jumpIfCharNotEquals(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v9 = a4;
  v13 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
    v14 = 0x3FFFFFFF;
  else
    v14 = 0x7FFFFFFF;
  if (v14 < a4)
  {
    JSC::MacroAssemblerARM64::move(*(_DWORD **)(a2 + 8), 0, a5, a4, a5, a6, a7, a8);
    do
    {
      JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a2 + 8), a5, 0x40000000, a5, a5, a6, a7, a8);
      if (*(_BYTE *)(a2 + 80))
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a2 + 8), a5, 0x40000000, a5, a5, a6, a7, a8);
      v20 = v9 - 0x40000000;
      if (v9 < 0x40000000)
        goto LABEL_21;
      v9 -= 0x40000000;
    }
    while (v20 > v14);
    v13 = *(unsigned __int8 *)(a2 + 80);
    v9 = v20;
  }
  if (v13)
  {
    if (v9 >= 1073741825)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x198E8AC78);
    }
    v19 = (-2 * v9) | 0x200000000;
    if ((*(_BYTE *)(a2 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a2, 0x100000100uLL, v19, a5, a5, a6, a7, a8);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a2 + 8), 0x100000100uLL, v19, a5, a5, a6, a7, a8);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a2 + 8), 0x100uLL, -v9 | 0x200000000, a5, a5, a6, a7, a8);
  }
  if ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 2) & 4) != 0 && (a3 | 0x20) - 97 <= 0x19)
  {
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(a2 + 8), (JSC::ARM64LogicalImmediate *)0x20, a5, a5);
    a3 |= 0x20u;
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a2 + 8), 1, a5, a3, v15, v16, v17, v18, a1);
}

unint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::negativeOffsetIndexedAddress(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v8 = *(unsigned __int8 *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
    v9 = 0x3FFFFFFF;
  else
    v9 = 0x7FFFFFFF;
  i = *a2;
  if (*a2 > v9)
  {
    v20 = a4;
    JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), 0, a3, a4, a5, a6, a7, a8);
    for (i = *a2; i > v9; *a2 = i)
    {
      JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), a3, 0x40000000, a3, v16, v17, v18, v19);
      if (*(_BYTE *)(a1 + 80))
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), a3, 0x40000000, a3, v16, v17, v18, v19);
      i = *a2 - 0x40000000;
      if (*a2 < 0x40000000)
        goto LABEL_16;
    }
    v8 = *(unsigned __int8 *)(a1 + 80);
    LOBYTE(a4) = v20;
  }
  if (v8)
  {
    if (i < 1073741825)
    {
      v11 = 0x100000000;
      return v11 | ((unint64_t)a4 << 8);
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198E8AD90);
  }
  v11 = 0;
  return v11 | ((unint64_t)a4 << 8);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::readCharacter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v16 = a2;
  v11 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::negativeOffsetIndexedAddress(a1, &v16, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 80))
  {
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, v11, v10, a3, v12, v13, v14, v15);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v11, v10, a3, v12, v13, v14, v15);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v11, v10, a3, v12, v13, v14, v15);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  _DWORD *v42;
  uint64_t *v43;
  int v44;
  unsigned int *v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  int *v55;
  int *v56;
  int v57;
  _BYTE *v58;
  _DWORD *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _DWORD *v70;
  uint64_t *v71;
  int v72;
  _BYTE *v73;
  _DWORD *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  char v90;
  int *v91;
  int *v92;
  int v93;
  _BYTE *v94;
  _DWORD *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int i;
  unsigned int v106;
  char v107;
  int *v108;
  int *v109;
  int v110;
  char *v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int *v126;
  int *v127;
  int v128;
  char *v129;
  _DWORD *v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  char v146;
  int *v147;
  int *v148;
  int v149;
  char *v150;
  _DWORD *v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  WTF *v163;
  WTF *v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  int v169;
  char v170;
  __int16 v171;
  char v172;
  int v173;
  int v174;
  int v175;
  int v176;
  char v177;
  __int16 v178;
  char v179;
  int v180;
  int v181;
  char v182;
  __int16 v183;
  char v184;
  int v185;
  uint64_t v186;
  int v187;
  int v188;
  char v189;
  __int16 v190;
  char v191;
  int v192;
  uint64_t v193;
  WTF *v194;
  uint64_t v195;
  _BYTE v196[24];
  WTF *v197;
  uint64_t v198;
  _BYTE v199[24];
  _BYTE *v200;
  uint64_t v201;
  _BYTE v202[24];
  _BYTE *v203;
  uint64_t v204;
  _BYTE v205[32];

  v9 = a3;
  v11 = -1962934262;
  v12 = *(_DWORD **)(a1 + 8);
  v13 = ((_DWORD)a2 << 8) & 0x1F0000;
  v14 = a2 >> 22;
  if (a2 == 31)
  {
    v15 = v14 & 0x1C00 | (32 * a2) | v13;
    v11 = -1960812534;
  }
  else
  {
    v15 = v14 & 0xFC00 | (32 * (a2 & 0x1F)) | v13;
  }
  v16 = v15 | v11;
  v18 = v12 + 50;
  v17 = v12[50];
  if (v17 + 4 > v12[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v17) = v16;
  *v18 += 4;
  v19 = v9;
  if (v9)
    JSC::MacroAssemblerARM64::add64((uint64_t)v12, v9, 10, 10, a5, a6, a7, a8);
  if ((_DWORD)a4 == 6)
  {
    v20 = *(_DWORD **)(a1 + 8);
    v20[52] = 0;
    v21 = v20[50];
    if (v21 + 4 > v20[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 14), v19, a3, a4, a5, a6, a7, a8);
      v21 = v20[50];
    }
    v22 = (_QWORD *)(a1 + 200);
    *(_DWORD *)(*((_QWORD *)v20 + 7) + v21) = -1811939328;
    v23 = v20[50] + 4;
    v20[50] = v23;
    v203 = (_BYTE *)(v23 | 0x300000000);
    v24 = *(unsigned int *)(a1 + 212);
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 208))
    {
      v25 = (_QWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v24 + 1, (unint64_t)&v203);
      v24 = *(unsigned int *)(a1 + 212);
      *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v24) = *v25;
    }
    else
    {
      v45 = (unsigned int *)(*v22 + 8 * v24);
      *v45 = v23;
      v45[1] = 3;
    }
    *(_DWORD *)(a1 + 212) = v24 + 1;
    return;
  }
  v203 = v205;
  v204 = 2;
  v200 = v202;
  v201 = 2;
  v197 = (WTF *)v199;
  v198 = 2;
  v194 = (WTF *)v196;
  v195 = 2;
  v26 = *(_DWORD **)(a1 + 8);
  v27 = a4 & 0x1F;
  v28 = v26[50];
  if (v28 + 4 > v26[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 14), v19, a3, a4, a5, a6, a7, a8);
    v28 = v26[50];
  }
  *(_DWORD *)(*((_QWORD *)v26 + 7) + v28) = (a4 & 0x1F) + 2017460544;
  v26[50] += 4;
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFC00, a4, 5);
  JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, 5, 5, v29, v30, v31, v32, (uint64_t)&v192);
  v40 = v192;
  if (v192 != -1)
  {
    v41 = HIDWORD(v204);
    if (HIDWORD(v204) == (_DWORD)v204)
    {
      v42 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v203, (void *)(HIDWORD(v204) + 1), (unint64_t)&v192, v35, v36, v37, v38, v39);
      v44 = *v42;
      v43 = (uint64_t *)(v42 + 1);
      v40 = v44;
      v41 = HIDWORD(v204);
    }
    else
    {
      v43 = &v193;
    }
    v46 = &v203[12 * v41];
    *(_DWORD *)v46 = v40;
    *(_QWORD *)(v46 + 4) = *v43;
    ++HIDWORD(v204);
  }
  v47 = *(_QWORD *)(a1 + 8);
  v48 = *(_DWORD *)(v47 + 200);
  if (v48 + 4 > *(_DWORD *)(v47 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 56), v33, v34, v35, v36, v37, v38, v39);
    v48 = *(_DWORD *)(v47 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v47 + 56) + v48) = 1796079807;
  v49 = *(_DWORD *)(v47 + 200) + 4;
  *(_DWORD *)(v47 + 200) = v49;
  if (*(_BYTE *)(v47 + 328))
  {
    while ((signed int)v49 < *(_DWORD *)(v47 + 52))
    {
      if (v49 + 4 > *(_DWORD *)(v47 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 56), v33, v34, v35, v36, v37, v38, v39);
        v49 = *(_DWORD *)(v47 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v47 + 56) + v49) = -721215457;
      v49 = *(_DWORD *)(v47 + 200) + 4;
      *(_DWORD *)(v47 + 200) = v49;
    }
    *(_DWORD *)(v47 + 208) = 0;
  }
  if (v49 + 4 > *(_DWORD *)(v47 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 56), v33, v34, v35, v36, v37, v38, v39);
    v49 = *(_DWORD *)(v47 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v47 + 56) + v49) = 1409286144;
  v50 = *(_DWORD *)(v47 + 200);
  v51 = v50 + 4;
  *(_DWORD *)(v47 + 200) = v50 + 4;
  v52 = v50 + 8;
  v53 = v50 + 4;
  if (v52 > *(_DWORD *)(v47 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 56), v33, v34, v35, v36, v37, v38, v39);
    v53 = *(_DWORD *)(v47 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v47 + 56) + v53) = -721215457;
  *(_DWORD *)(v47 + 200) += 4;
  if (*(_BYTE *)(v47 + 328))
    v54 = -122;
  else
    v54 = -126;
  v187 = v51;
  v188 = 0;
  v189 = v54;
  v190 = 0;
  v191 = -1;
  if (v51 != -1)
  {
    if (HIDWORD(v201) == (_DWORD)v201)
    {
      v55 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v200, (void *)(HIDWORD(v201) + 1), (unint64_t)&v187, v35, v36, v37, v38, v39);
      v57 = *v55;
      v56 = v55 + 1;
      v58 = &v200[12 * HIDWORD(v201)];
      *(_DWORD *)v58 = v57;
    }
    else
    {
      v56 = &v188;
      v58 = &v200[12 * HIDWORD(v201)];
      *(_DWORD *)v58 = v51;
    }
    *(_QWORD *)(v58 + 4) = *(_QWORD *)v56;
    ++HIDWORD(v201);
  }
  v59 = *(_DWORD **)(a1 + 8);
  v60 = v59[50];
  if (v60 + 4 > v59[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v33, v34, v35, v36, v37, v38, v39);
    v60 = v59[50];
  }
  *(_DWORD *)(*((_QWORD *)v59 + 7) + v60) = -1862268598;
  v59[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 10, 15, v36, v37, v38, v39, (uint64_t)&v185);
  v68 = v185;
  if (v185 != -1)
  {
    v69 = HIDWORD(v204);
    if (HIDWORD(v204) == (_DWORD)v204)
    {
      v70 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v203, (void *)(HIDWORD(v204) + 1), (unint64_t)&v185, v63, v64, v65, v66, v67);
      v72 = *v70;
      v71 = (uint64_t *)(v70 + 1);
      v68 = v72;
      v69 = HIDWORD(v204);
    }
    else
    {
      v71 = &v186;
    }
    v73 = &v203[12 * v69];
    *(_DWORD *)v73 = v68;
    *(_QWORD *)(v73 + 4) = *v71;
    ++HIDWORD(v204);
  }
  v74 = *(_DWORD **)(a1 + 8);
  v75 = v74[50];
  if (v75 + 4 > v74[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v74 + 14), v61, v62, v63, v64, v65, v66, v67);
    v75 = v74[50];
  }
  *(_DWORD *)(*((_QWORD *)v74 + 7) + v75) = 2017460554;
  v74[50] += 4;
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFC00, 10, 5);
  v83 = *(_QWORD *)(a1 + 8);
  v84 = *(_DWORD *)(v83 + 200);
  if (v84 + 4 > *(_DWORD *)(v83 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 56), v76, v77, v78, v79, v80, v81, v82);
    v84 = *(_DWORD *)(v83 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v83 + 56) + v84) = 1796079807;
  v85 = *(_DWORD *)(v83 + 200) + 4;
  *(_DWORD *)(v83 + 200) = v85;
  if (*(_BYTE *)(v83 + 328))
  {
    while ((signed int)v85 < *(_DWORD *)(v83 + 52))
    {
      if (v85 + 4 > *(_DWORD *)(v83 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 56), v76, v77, v78, v79, v80, v81, v82);
        v85 = *(_DWORD *)(v83 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v83 + 56) + v85) = -721215457;
      v85 = *(_DWORD *)(v83 + 200) + 4;
      *(_DWORD *)(v83 + 200) = v85;
    }
    *(_DWORD *)(v83 + 208) = 0;
  }
  if (v85 + 4 > *(_DWORD *)(v83 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 56), v76, v77, v78, v79, v80, v81, v82);
    v85 = *(_DWORD *)(v83 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v83 + 56) + v85) = 1409286145;
  v86 = *(_DWORD *)(v83 + 200);
  v87 = v86 + 4;
  *(_DWORD *)(v83 + 200) = v86 + 4;
  v88 = v86 + 8;
  v89 = v86 + 4;
  if (v88 > *(_DWORD *)(v83 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 56), v76, v77, v78, v79, v80, v81, v82);
    v89 = *(_DWORD *)(v83 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v83 + 56) + v89) = -721215457;
  *(_DWORD *)(v83 + 200) += 4;
  if (*(_BYTE *)(v83 + 328))
    v90 = -122;
  else
    v90 = -126;
  v180 = v87;
  v181 = 0;
  v182 = v90;
  v183 = 1;
  v184 = -1;
  if (v87 != -1)
  {
    if (HIDWORD(v204) == (_DWORD)v204)
    {
      v91 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v203, (void *)(HIDWORD(v204) + 1), (unint64_t)&v180, v78, v79, v80, v81, v82);
      v93 = *v91;
      v92 = v91 + 1;
      v94 = &v203[12 * HIDWORD(v204)];
      *(_DWORD *)v94 = v93;
    }
    else
    {
      v92 = &v181;
      v94 = &v203[12 * HIDWORD(v204)];
      *(_DWORD *)v94 = v87;
    }
    *(_QWORD *)(v94 + 4) = *(_QWORD *)v92;
    ++HIDWORD(v204);
  }
  v95 = *(_DWORD **)(a1 + 8);
  v96 = v95[50];
  if (v96 + 4 > v95[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v95 + 14), v76, v77, v78, v79, v80, v81, v82);
    v96 = v95[50];
  }
  *(_DWORD *)(*((_QWORD *)v95 + 7) + v96) = v27 | (32 * v27) | 0x53165400;
  v95[50] += 4;
  JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), a4 | 0xA00, 0x2FCA02400, a4, v79, v80, v81, v82);
  v104 = *(_QWORD *)(a1 + 8);
  for (i = *(_DWORD *)(v104 + 200); i < *(_DWORD *)(v104 + 52); *(_DWORD *)(v104 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v104 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v104 + 56), v97, v98, v99, v100, v101, v102, v103);
      i = *(_DWORD *)(v104 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v104 + 56) + i) = -721215457;
    i = *(_DWORD *)(v104 + 200) + 4;
  }
  v106 = i;
  if ((i + 4) > *(_DWORD *)(v104 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v104 + 56), v97, v98, v99, v100, v101, v102, v103);
    v106 = *(_DWORD *)(v104 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v104 + 56) + v106) = 335544320;
  *(_DWORD *)(v104 + 200) += 4;
  if (*(_BYTE *)(v104 + 328))
    v107 = 69;
  else
    v107 = 65;
  v175 = i;
  v176 = 0;
  v177 = v107;
  v178 = 15;
  v179 = -1;
  if (i != -1)
  {
    if (HIDWORD(v198) == (_DWORD)v198)
    {
      v108 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v197, (void *)(HIDWORD(v198) + 1), (unint64_t)&v175, v99, v100, v101, v102, v103);
      v110 = *v108;
      v109 = v108 + 1;
      v111 = (char *)v197 + 12 * HIDWORD(v198);
      *(_DWORD *)v111 = v110;
    }
    else
    {
      v109 = &v176;
      v111 = (char *)v197 + 12 * HIDWORD(v198);
      *(_DWORD *)v111 = i;
    }
    *(_QWORD *)(v111 + 4) = *(_QWORD *)v109;
    ++HIDWORD(v198);
  }
  v112 = *(_DWORD **)(a1 + 8);
  v113 = HIDWORD(v201);
  if (HIDWORD(v201))
  {
    v114 = 0;
    v115 = 0;
    while (v115 < HIDWORD(v201))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v200[v114], (uint64_t)v112, v98, v99, v100, v101, v102, v103);
      ++v115;
      v114 += 12;
      if (v113 == v115)
      {
        v112 = *(_DWORD **)(a1 + 8);
        goto LABEL_82;
      }
    }
    __break(0xC471u);
LABEL_157:
    JUMPOUT(0x198E8BB7CLL);
  }
LABEL_82:
  v116 = v112[50];
  if (v116 + 4 > v112[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v112 + 14), v97, v98, v99, v100, v101, v102, v103);
    v116 = v112[50];
  }
  *(_DWORD *)(*((_QWORD *)v112 + 7) + v116) = -788526774;
  v112[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 3, 10, 0, v100, v101, v102, v103, (uint64_t)&v173);
  v124 = v173;
  if (v173 != -1)
  {
    v125 = HIDWORD(v195);
    if (HIDWORD(v195) == (_DWORD)v195)
    {
      v126 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v194, (void *)(HIDWORD(v195) + 1), (unint64_t)&v173, v119, v120, v121, v122, v123);
      v128 = *v126;
      v127 = v126 + 1;
      v124 = v128;
      v125 = HIDWORD(v195);
    }
    else
    {
      v127 = &v174;
    }
    v129 = (char *)v194 + 12 * v125;
    *(_DWORD *)v129 = v124;
    *(_QWORD *)(v129 + 4) = *(_QWORD *)v127;
    ++HIDWORD(v195);
  }
  v130 = *(_DWORD **)(a1 + 8);
  v131 = v130[50];
  if (v131 + 4 > v130[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 14), v117, v118, v119, v120, v121, v122, v123);
    v131 = v130[50];
  }
  *(_DWORD *)(*((_QWORD *)v130 + 7) + v131) = 2017460554;
  v130[50] += 4;
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFC00, 10, 5);
  v139 = *(_QWORD *)(a1 + 8);
  v140 = *(_DWORD *)(v139 + 200);
  if (v140 + 4 > *(_DWORD *)(v139 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v139 + 56), (uint64_t)v132, v133, v134, v135, v136, v137, v138);
    v140 = *(_DWORD *)(v139 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v139 + 56) + v140) = 1796014271;
  v141 = *(_DWORD *)(v139 + 200) + 4;
  *(_DWORD *)(v139 + 200) = v141;
  if (*(_BYTE *)(v139 + 328))
  {
    while ((signed int)v141 < *(_DWORD *)(v139 + 52))
    {
      if (v141 + 4 > *(_DWORD *)(v139 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v139 + 56), (uint64_t)v132, v133, v134, v135, v136, v137, v138);
        v141 = *(_DWORD *)(v139 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v139 + 56) + v141) = -721215457;
      v141 = *(_DWORD *)(v139 + 200) + 4;
      *(_DWORD *)(v139 + 200) = v141;
    }
    *(_DWORD *)(v139 + 208) = 0;
  }
  if (v141 + 4 > *(_DWORD *)(v139 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v139 + 56), (uint64_t)v132, v133, v134, v135, v136, v137, v138);
    v141 = *(_DWORD *)(v139 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v139 + 56) + v141) = 1409286145;
  v142 = *(_DWORD *)(v139 + 200);
  v143 = v142 + 4;
  *(_DWORD *)(v139 + 200) = v142 + 4;
  v144 = v142 + 8;
  v145 = v142 + 4;
  if (v144 > *(_DWORD *)(v139 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v139 + 56), (uint64_t)v132, v133, v134, v135, v136, v137, v138);
    v145 = *(_DWORD *)(v139 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v139 + 56) + v145) = -721215457;
  *(_DWORD *)(v139 + 200) += 4;
  if (*(_BYTE *)(v139 + 328))
    v146 = -122;
  else
    v146 = -126;
  v168 = v143;
  v169 = 0;
  v170 = v146;
  v171 = 1;
  v172 = -1;
  if (v143 != -1)
  {
    if (HIDWORD(v195) == (_DWORD)v195)
    {
      v147 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v194, (void *)(HIDWORD(v195) + 1), (unint64_t)&v168, v134, v135, v136, v137, v138);
      v149 = *v147;
      v148 = v147 + 1;
      v150 = (char *)v194 + 12 * HIDWORD(v195);
      *(_DWORD *)v150 = v149;
    }
    else
    {
      v148 = &v169;
      v150 = (char *)v194 + 12 * HIDWORD(v195);
      *(_DWORD *)v150 = v143;
    }
    *(_QWORD *)(v150 + 4) = *(_QWORD *)v148;
    ++HIDWORD(v195);
  }
  v151 = *(_DWORD **)(a1 + 8);
  v152 = v151[50];
  if (v152 + 4 > v151[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v151 + 14), (uint64_t)v132, v133, v134, v135, v136, v137, v138);
    v152 = v151[50];
  }
  *(_DWORD *)(*((_QWORD *)v151 + 7) + v152) = v27 | 0x12800000;
  v151[50] += 4;
  v153 = *(_QWORD *)(a1 + 8);
  v154 = HIDWORD(v204);
  if (HIDWORD(v204))
  {
    v155 = 0;
    v156 = 0;
    do
    {
      if (v156 >= HIDWORD(v204))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8BB84);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v203[v155], v153, v133, v134, v135, v136, v137, v138);
      ++v156;
      v155 += 12;
    }
    while (v154 != v156);
    v153 = *(_QWORD *)(a1 + 8);
  }
  v157 = HIDWORD(v195);
  if (HIDWORD(v195))
  {
    v158 = 0;
    v159 = 0;
    do
    {
      if (v159 >= HIDWORD(v195))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8BB8CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v194 + v158), v153, v133, v134, v135, v136, v137, v138);
      ++v159;
      v158 += 12;
    }
    while (v157 != v159);
    v153 = *(_QWORD *)(a1 + 8);
  }
  v160 = HIDWORD(v198);
  if (HIDWORD(v198))
  {
    v161 = 0;
    v162 = 0;
    while (v162 < HIDWORD(v198))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v197 + v161), v153, v133, v134, v135, v136, v137, v138);
      ++v162;
      v161 += 12;
      if (v160 == v162)
        goto LABEL_122;
    }
    __break(0xC471u);
    goto LABEL_157;
  }
LABEL_122:
  v163 = v194;
  if (v196 != (_BYTE *)v194 && v194 != 0)
  {
    v194 = 0;
    LODWORD(v195) = 0;
    WTF::fastFree((unint64_t)v163, v132, v133, v134, v135, v136, v137, v138);
  }
  v165 = v197;
  if (v199 != (_BYTE *)v197 && v197)
  {
    v197 = 0;
    LODWORD(v198) = 0;
    WTF::fastFree((unint64_t)v165, v132, v133, v134, v135, v136, v137, v138);
  }
  v166 = (unint64_t)v200;
  if (v202 != v200 && v200)
  {
    v200 = 0;
    LODWORD(v201) = 0;
    WTF::fastFree(v166, v132, v133, v134, v135, v136, v137, v138);
  }
  v167 = (unint64_t)v203;
  if (v205 != v203 && v203)
  {
    v203 = 0;
    LODWORD(v204) = 0;
    WTF::fastFree(v167, v132, v133, v134, v135, v136, v137, v138);
  }
}

uint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_QWORD *)(v11 + v19) = *(_QWORD *)(v5 + v19);
          v19 += 8;
        }
        while (8 * v6 != v19);
        if (v5)
        {
          if (v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x198E8BCF8);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (v23 >> 29)
      goto LABEL_35;
    v24 = *(unsigned int *)(a1 + 12);
    v25 = WTF::fastMalloc((WTF *)(8 * v23));
    *(_DWORD *)(a1 + 8) = v23;
    *(_QWORD *)a1 = v25;
    if ((_DWORD)v24)
    {
      v33 = 8 * v24;
      v34 = (_QWORD *)v25;
      v35 = (uint64_t *)v5;
      do
      {
        v36 = *v35++;
        *v34++ = v36;
        v33 -= 8;
      }
      while (v33);
    }
    if (v5)
    {
      if (v25 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return v3;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassTermInner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  int i;
  unsigned int v34;
  char v35;
  uint64_t v36;
  int *v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  char v62;
  __int16 v63;
  char v64;
  WTF *v65;
  uint64_t v66;
  _BYTE v67[24];
  int v68;
  int v69;
  int v70;
  uint64_t v71;

  if ((*(_BYTE *)(a1 + 84) & 1) != 0 && (*(_BYTE *)(a2 + 1) & 2) != 0)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)&v68);
    v11 = v68;
    if (v68 != -1)
    {
      v12 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v12 == *(_DWORD *)(a3 + 8))
      {
        v13 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v12 + 1), (unint64_t)&v68, a4, a5, a6, a7, a8);
        v15 = *v13;
        v14 = v13 + 1;
        v11 = v15;
        LODWORD(v12) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v14 = &v69;
      }
      v16 = *(_QWORD *)a3 + 12 * v12;
      *(_DWORD *)v16 = v11;
      *(_QWORD *)(v16 + 4) = *(_QWORD *)v14;
      ++*(_DWORD *)(a3 + 12);
    }
  }
  v17 = *(_BYTE *)(a2 + 1);
  v18 = *(_QWORD *)(a2 + 16);
  if ((v17 & 2) != 0)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(a1, a3, v18, a4, a5, a6, a7, a8);
    return;
  }
  if (!*(_DWORD *)(v18 + 28) && !*(_DWORD *)(v18 + 60))
  {
    v19 = *(unsigned int *)(v18 + 44);
    if (*(unsigned int *)(v18 + 76) + v19 == 1)
    {
      if ((_DWORD)v19)
        v20 = 32;
      else
        v20 = 64;
      if ((_DWORD)v19)
        v21 = v18 + 32;
      else
        v21 = v18 + 64;
      if (!*(_DWORD *)(v21 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8C10CLL);
      }
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, 6, **(unsigned int **)(v18 + v20), a5, a6, a7, a8, (uint64_t)&v65);
      v27 = (int)v65;
      if ((_DWORD)v65 != -1)
      {
        v28 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v28 == *(_DWORD *)(a3 + 8))
        {
          v29 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v28 + 1), (unint64_t)&v65, v22, v23, v24, v25, v26);
          v31 = *v29;
          v30 = v29 + 1;
          v27 = v31;
          LODWORD(v28) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v30 = (WTF **)((char *)&v65 + 4);
        }
        v47 = *(_QWORD *)a3 + 12 * v28;
        *(_DWORD *)v47 = v27;
        *(_QWORD *)(v47 + 4) = *v30;
        ++*(_DWORD *)(a3 + 12);
      }
      if (*(_DWORD *)(v21 + 12))
      {
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 12, 6, *(unsigned int *)(*(_QWORD *)(v18 + v20) + 4), v23, v24, v25, v26, (uint64_t)&v70);
        v53 = v70;
        if (v70 != -1)
        {
          v54 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v54 == *(_DWORD *)(a3 + 8))
          {
            v55 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v54 + 1), (unint64_t)&v70, v48, v49, v50, v51, v52);
            v57 = *v55;
            v56 = (uint64_t *)(v55 + 1);
            v53 = v57;
            LODWORD(v54) = *(_DWORD *)(a3 + 12);
          }
          else
          {
            v56 = &v71;
          }
          v58 = *(_QWORD *)a3 + 12 * v54;
          *(_DWORD *)v58 = v53;
          *(_QWORD *)(v58 + 4) = *v56;
          ++*(_DWORD *)(a3 + 12);
        }
        return;
      }
      __break(0xC471u);
LABEL_60:
      JUMPOUT(0x198E8C104);
    }
  }
  v65 = (WTF *)v67;
  v66 = 2;
  if ((*(_BYTE *)(v18 + 89) & 2) == 0)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(a1, (uint64_t)&v65, v18, a4, a5, a6, a7, a8);
    v32 = *(_QWORD *)(a1 + 8);
    for (i = *(_DWORD *)(v32 + 200); i < *(_DWORD *)(v32 + 52); *(_DWORD *)(v32 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v32 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v32 + 56), a2, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(v32 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v32 + 56) + i) = -721215457;
      i = *(_DWORD *)(v32 + 200) + 4;
    }
    v34 = i;
    if ((i + 4) > *(_DWORD *)(v32 + 192))
    {
      v59 = i;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v32 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = v59;
      v34 = *(_DWORD *)(v32 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v32 + 56) + v34) = 335544320;
    *(_DWORD *)(v32 + 200) += 4;
    if (*(_BYTE *)(v32 + 328))
      v35 = 69;
    else
      v35 = 65;
    v60 = i;
    v61 = 0;
    v62 = v35;
    v63 = 15;
    v64 = -1;
    if (i != -1)
    {
      v36 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v36 == *(_DWORD *)(a3 + 8))
      {
        v37 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v36 + 1), (unint64_t)&v60, a4, a5, a6, a7, a8);
        v39 = *v37;
        v38 = v37 + 1;
        i = v39;
        LODWORD(v36) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v38 = &v61;
      }
      v40 = *(_QWORD *)a3 + 12 * v36;
      *(_DWORD *)v40 = i;
      *(_QWORD *)(v40 + 4) = *(_QWORD *)v38;
      ++*(_DWORD *)(a3 + 12);
    }
    if (HIDWORD(v66))
    {
      v41 = 0;
      v42 = 0;
      v43 = *(_QWORD *)(a1 + 8);
      v44 = 12 * HIDWORD(v66);
      while (v42 < HIDWORD(v66))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v65 + v41), v43, a3, a4, a5, a6, a7, a8);
        ++v42;
        v41 += 12;
        if (v44 == v41)
          goto LABEL_39;
      }
      __break(0xC471u);
      goto LABEL_60;
    }
  }
LABEL_39:
  v45 = v65;
  if (v67 != (_BYTE *)v65 && v65 != 0)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree((unint64_t)v45, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *v31;
  int v32;
  int v33;
  unsigned int v34;
  _DWORD *v35;
  uint64_t *v36;
  int v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int *v42;
  int v43;
  _DWORD *v44;
  _QWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t *v63;
  int v64;
  _DWORD *v65;
  uint64_t *v66;
  _DWORD *v67;
  uint64_t v68;
  int i;
  unsigned int v70;
  int v71;
  int *v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  BOOL v82;
  uint64_t v83;
  uint64_t j;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t *v88;
  int v89;
  _DWORD *v90;
  uint64_t *v91;
  _DWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  WTF *v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  int *v103;
  int *v104;
  int v105;
  _DWORD *v106;
  _QWORD *v107;
  char v108;
  uint64_t v109;
  char *v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  WTF *v114;
  unsigned int v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t *v118;
  int v119;
  _DWORD *v120;
  uint64_t *v121;
  _DWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  WTF *v146;
  uint64_t v147;
  _BYTE v148[24];
  int *v149;
  unint64_t v150;
  _BYTE v151[28];
  int v152;
  uint64_t v153;

  v11 = *(void **)(a3 + 80);
  if (v11 && (*(_BYTE *)(a1 + 84) & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = (*(_BYTE *)(a3 + 89) & 1) == 0;
    if (*(_BYTE *)(v12 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, (uint64_t)v11, *(char *)(v12 + 304), a4, a5, a6, a7, a8);
      v22 = *(_DWORD *)(v12 + 200);
      if (v22 + 4 > *(_DWORD *)(v12 + 192))
      {
        v21 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v14, v15, v16, v17, v18, v19, v20).n128_u64[0];
        v22 = *(_DWORD *)(v12 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v12 + 56) + v22) = 946956497;
      *(_DWORD *)(v12 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v12, v13, 17, v17, v18, v19, v20, (uint64_t)&v152, v21);
      v28 = v152;
      if (v152 != -1)
      {
        v29 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v29 == *(_DWORD *)(a2 + 8))
        {
          v30 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v29 + 1), (unint64_t)&v152, v23, v24, v25, v26, v27);
          v32 = *v30;
          v31 = (uint64_t *)(v30 + 1);
          v28 = v32;
          LODWORD(v29) = *(_DWORD *)(a2 + 12);
        }
        else
        {
          v31 = &v153;
        }
        v123 = *(_QWORD *)a2 + 12 * v29;
        *(_DWORD *)v123 = v28;
        *(_QWORD *)(v123 + 4) = *v31;
        ++*(_DWORD *)(a2 + 12);
      }
      return;
    }
    __break(0xC471u);
LABEL_129:
    JUMPOUT(0x198E8CA70);
  }
  v149 = (int *)v151;
  v150 = 2;
  if (!*(_DWORD *)(a3 + 60) && !*(_DWORD *)(a3 + 76))
    goto LABEL_62;
  v146 = (WTF *)v148;
  v147 = 2;
  if (*(_DWORD *)(a3 + 28) || *(_DWORD *)(a3 + 44))
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 13, 6, 127, a5, a6, a7, a8, (uint64_t)&v144);
    v33 = v144;
    if (v144 != -1)
    {
      v34 = HIDWORD(v147);
      if (HIDWORD(v147) == (_DWORD)v147)
      {
        v35 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v146, (void *)(HIDWORD(v147) + 1), (unint64_t)&v144, a4, a5, a6, a7, a8);
        v37 = *v35;
        v36 = (uint64_t *)(v35 + 1);
        v33 = v37;
        v34 = HIDWORD(v147);
      }
      else
      {
        v36 = &v145;
      }
      v38 = (char *)v146 + 12 * v34;
      *(_DWORD *)v38 = v33;
      *(_QWORD *)(v38 + 4) = *v36;
      ++HIDWORD(v147);
    }
  }
  if (*(_DWORD *)(a3 + 60))
  {
    v39 = 0;
    do
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, *(unsigned int *)(*(_QWORD *)(a3 + 48) + 4 * v39), a5, a6, a7, a8, (uint64_t)&v142);
      if (v142 != -1)
      {
        v40 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v40 == *(_DWORD *)(a2 + 8))
        {
          v41 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v40 + 1), (unint64_t)&v142, a4, a5, a6, a7, a8);
          v43 = *v41;
          v42 = v41 + 1;
          v44 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
          *v44 = v43;
          v45 = v44 + 1;
        }
        else
        {
          v46 = (_DWORD *)(*(_QWORD *)a2 + 12 * v40);
          *v46 = v142;
          v45 = v46 + 1;
          v42 = &v143;
        }
        *v45 = *(_QWORD *)v42;
        ++*(_DWORD *)(a2 + 12);
      }
      ++v39;
    }
    while (v39 < *(unsigned int *)(a3 + 60));
  }
  if (*(_DWORD *)(a3 + 76))
  {
    v47 = 0;
    v48 = 0;
    do
    {
      v49 = (unsigned int *)(*(_QWORD *)(a3 + 64) + v47);
      v50 = v49[1];
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, 6, *v49, a5, a6, a7, a8, (uint64_t)&v136);
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 13, 6, v50, v51, v52, v53, v54, (uint64_t)&v140);
      if (v140 != -1)
      {
        v61 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v61 == *(_DWORD *)(a2 + 8))
        {
          v62 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v61 + 1), (unint64_t)&v140, v56, v57, v58, v59, v60);
          v64 = *v62;
          v63 = (uint64_t *)(v62 + 1);
          v65 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
          *v65 = v64;
          v66 = (uint64_t *)(v65 + 1);
        }
        else
        {
          v67 = (_DWORD *)(*(_QWORD *)a2 + 12 * v61);
          *v67 = v140;
          v66 = (uint64_t *)(v67 + 1);
          v63 = &v141;
        }
        *v66 = *v63;
        ++*(_DWORD *)(a2 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v136, *(_QWORD *)(a1 + 8), v55, v56, v57, v58, v59, v60);
      ++v48;
      v47 += 8;
    }
    while (v48 < *(unsigned int *)(a3 + 76));
  }
  if (*(_DWORD *)(a3 + 28) || *(_DWORD *)(a3 + 44))
  {
    v68 = *(_QWORD *)(a1 + 8);
    for (i = *(_DWORD *)(v68 + 200); i < *(_DWORD *)(v68 + 52); *(_DWORD *)(v68 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v68 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v68 + 56), (uint64_t)v11, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(v68 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v68 + 56) + i) = -721215457;
      i = *(_DWORD *)(v68 + 200) + 4;
    }
    v70 = i;
    if ((i + 4) > *(_DWORD *)(v68 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v68 + 56), (uint64_t)v11, a3, a4, a5, a6, a7, a8);
      v70 = *(_DWORD *)(v68 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v68 + 56) + v70) = 335544320;
    *(_DWORD *)(v68 + 200) += 4;
    v71 = *(unsigned __int8 *)(v68 + 328);
    v72 = &v138;
    v136 = &v138;
    v137 = 2;
    if (i == -1)
    {
      v74 = 0;
    }
    else
    {
      v82 = v71 == 0;
      v73 = 0xFF000F4500000000;
      if (v82)
        v73 = 0xFF000F4100000000;
      v139 = v73;
      v74 = 1;
      HIDWORD(v137) = 1;
      v138 = i;
    }
    v75 = (unint64_t)v149;
    if (v149 != (int *)v151)
    {
      if (v149)
      {
        v149 = 0;
        LODWORD(v150) = 0;
        WTF::fastFree(v75, v11, a3, a4, a5, a6, a7, a8);
        v149 = (int *)v151;
        v74 = HIDWORD(v137);
        if (v136 != &v138)
        {
          v149 = v136;
LABEL_52:
          v150 = __PAIR64__(v74, v137);
          goto LABEL_53;
        }
      }
      else
      {
        v149 = (int *)v151;
      }
    }
    if (v74)
    {
      v76 = v151;
      do
      {
        *(_DWORD *)v76 = *v72;
        *(_QWORD *)(v76 + 4) = *(_QWORD *)(v72 + 1);
        v72 += 3;
        v76 += 12;
      }
      while (v72 != &v138 + 3 * v74);
    }
    goto LABEL_52;
  }
LABEL_53:
  if (HIDWORD(v147))
  {
    v77 = 0;
    v78 = 0;
    v79 = *(_QWORD *)(a1 + 8);
    v80 = 12 * HIDWORD(v147);
    do
    {
      if (v78 >= HIDWORD(v147))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8CA88);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v146 + v77), v79, a3, a4, a5, a6, a7, a8);
      ++v78;
      v77 += 12;
    }
    while (v80 != v77);
  }
  v81 = v146;
  v82 = v148 == (_BYTE *)v146 || v146 == 0;
  if (!v82)
  {
    v146 = 0;
    LODWORD(v147) = 0;
    WTF::fastFree((unint64_t)v81, v11, a3, a4, a5, a6, a7, a8);
  }
LABEL_62:
  v83 = *(unsigned int *)(a3 + 44);
  if ((_DWORD)v83)
  {
    LODWORD(v136) = 0;
    v146 = (WTF *)v148;
    v147 = 2;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassRange(a1, (uint64_t)&v146, a2, *(_QWORD *)(a3 + 32), v83, (unsigned int *)&v136, *(_QWORD *)(a3 + 16), *(unsigned int *)(a3 + 28));
    for (j = v136; *(unsigned int *)(a3 + 28) > (unint64_t)v136; j = v136)
    {
      v85 = *(_QWORD *)(a1 + 8);
      LODWORD(v136) = j + 1;
      JSC::MacroAssemblerARM64::branch32(v85, 0, 6, *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 4 * j), v83, a6, a7, a8, (uint64_t)&v134);
      if (v134 != -1)
      {
        v86 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v86 == *(_DWORD *)(a2 + 8))
        {
          v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v86 + 1), (unint64_t)&v134, a4, v83, a6, a7, a8);
          v89 = *v87;
          v88 = (uint64_t *)(v87 + 1);
          v90 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
          *v90 = v89;
          v91 = (uint64_t *)(v90 + 1);
        }
        else
        {
          v92 = (_DWORD *)(*(_QWORD *)a2 + 12 * v86);
          *v92 = v134;
          v91 = (uint64_t *)(v92 + 1);
          v88 = &v135;
        }
        *v91 = *v88;
        ++*(_DWORD *)(a2 + 12);
      }
    }
    if (!HIDWORD(v147))
    {
LABEL_74:
      v97 = v146;
      if (v148 != (_BYTE *)v146 && v146 != 0)
      {
        v146 = 0;
        LODWORD(v147) = 0;
        goto LABEL_108;
      }
      goto LABEL_109;
    }
    v93 = 0;
    v94 = 0;
    v95 = *(_QWORD *)(a1 + 8);
    v96 = 12 * HIDWORD(v147);
    while (v94 < HIDWORD(v147))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v146 + v93), v95, a3, a4, v83, a6, a7, a8);
      ++v94;
      v93 += 12;
      if (v96 == v93)
        goto LABEL_74;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
  if (!*(_DWORD *)(a3 + 28))
    goto LABEL_109;
  v99 = 0;
  v100 = 0;
  v146 = 0;
  v147 = 0;
  do
  {
    v101 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v100);
    LOBYTE(v136) = v101;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 2) & 4) == 0)
    {
LABEL_82:
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, (unsigned __int16)(char)v101, v83, a6, a7, a8, (uint64_t)&v132);
      if (v132 == -1)
        goto LABEL_94;
      v102 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v102 == *(_DWORD *)(a2 + 8))
      {
        v103 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v102 + 1), (unint64_t)&v132, a4, v83, a6, a7, a8);
        v105 = *v103;
        v104 = v103 + 1;
        v106 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
        *v106 = v105;
        v107 = v106 + 1;
      }
      else
      {
        v112 = (_DWORD *)(*(_QWORD *)a2 + 12 * v102);
        *v112 = v132;
        v107 = v112 + 1;
        v104 = &v133;
      }
      *v107 = *(_QWORD *)v104;
      v111 = (_DWORD *)(a2 + 12);
      goto LABEL_93;
    }
    v108 = v101;
    if (v101 - 97 <= 0x19)
    {
      v109 = HIDWORD(v147);
      if (HIDWORD(v147) == (_DWORD)v147)
      {
        v110 = WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v146, (WTF *)(HIDWORD(v147) + 1), (unint64_t)&v136);
        v109 = HIDWORD(v147);
        v99 = v146;
        v108 = *v110;
      }
      *((_BYTE *)v99 + v109) = v108;
      v111 = (_DWORD *)&v147 + 1;
LABEL_93:
      ++*v111;
      goto LABEL_94;
    }
    if (v101 - 65 >= 0x1A)
      goto LABEL_82;
LABEL_94:
    ++v100;
  }
  while (v100 < *(unsigned int *)(a3 + 28));
  v113 = HIDWORD(v147);
  if (HIDWORD(v147))
  {
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x20, 6, 6);
    v114 = v99;
    do
    {
      v115 = *(char *)v114;
      v114 = (WTF *)((char *)v114 + 1);
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, v115, v83, a6, a7, a8, (uint64_t)&v130);
      if (v130 != -1)
      {
        v116 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v116 == *(_DWORD *)(a2 + 8))
        {
          v117 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v116 + 1), (unint64_t)&v130, a4, v83, a6, a7, a8);
          v119 = *v117;
          v118 = (uint64_t *)(v117 + 1);
          v120 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
          *v120 = v119;
          v121 = (uint64_t *)(v120 + 1);
        }
        else
        {
          v122 = (_DWORD *)(*(_QWORD *)a2 + 12 * v116);
          *v122 = v130;
          v121 = (uint64_t *)(v122 + 1);
          v118 = &v131;
        }
        *v121 = *v118;
        ++*(_DWORD *)(a2 + 12);
      }
      --v113;
    }
    while (v113);
LABEL_107:
    v146 = 0;
    LODWORD(v147) = 0;
    v97 = v99;
LABEL_108:
    WTF::fastFree((unint64_t)v97, v11, a3, a4, v83, a6, a7, a8);
  }
  else if (v99)
  {
    goto LABEL_107;
  }
LABEL_109:
  if ((*(_DWORD *)(a3 + 60) || *(_DWORD *)(a3 + 76)) && HIDWORD(v150))
  {
    v124 = 0;
    v125 = 0;
    v126 = *(_QWORD *)(a1 + 8);
    v127 = 12 * HIDWORD(v150);
    do
    {
      if (v125 >= HIDWORD(v150))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8CA90);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v149[v124 / 4], v126, a3, a4, v83, a6, a7, a8);
      ++v125;
      v124 += 12;
    }
    while (v127 != v124);
  }
  v128 = (unint64_t)v149;
  if (v151 != (_BYTE *)v149 && v149 != 0)
  {
    v149 = 0;
    LODWORD(v150) = 0;
    WTF::fastFree(v128, v11, a3, a4, v83, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v11;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int i;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int *v31;
  int v32;
  _DWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t *v43;
  int v44;
  _DWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  JSC::AssemblerBuffer *v49;
  int k;
  JSC::AssemblerBuffer *v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  void *v55;
  int *v56;
  uint64_t v57;
  JSC::AssemblerBuffer *v58;
  int j;
  JSC::AssemblerBuffer *v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  int *v64;
  int *v65;
  int v66;
  _DWORD *v67;
  _QWORD *v68;
  _DWORD *v69;
  int *v70;
  int *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  int v79;
  _DWORD *v80;
  _QWORD *v81;
  _DWORD *v82;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  char v91;
  __int16 v92;
  char v93;
  int v94;
  int v95;
  char v96;
  __int16 v97;
  char v98;
  int v99;
  int v100;
  unsigned int v101[3];

  v9 = a7;
  v11 = a5;
  do
  {
    v84 = v11 >> 1;
    v16 = (unsigned __int8 *)(a4 + 8 * (v11 >> 1));
    v17 = *v16;
    v18 = v16[4];
    v19 = *a6;
    if (v19 < a8 && *(_DWORD *)(v9 + 4 * v19) < v17)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 10, 6, v17, a5, (uint64_t)a6, a7, a8, (uint64_t)v101);
      if (v11 >= 2)
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassRange(a1, a2, a3, a4, v84, a6, v9, a8);
      for (i = *a6; i < a8; *a6 = i)
      {
        v28 = *(_DWORD *)(v9 + 4 * i);
        if (v28 >= v17)
          break;
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, (unsigned __int16)v28, v23, v24, v25, v26, (uint64_t)&v99);
        if (v99 != -1)
        {
          v29 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v29 == *(_DWORD *)(a3 + 8))
          {
            v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v29 + 1), (unint64_t)&v99, v22, v23, v24, v25, v26);
            v32 = *v30;
            v31 = v30 + 1;
            v33 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
            *v33 = v32;
            v34 = v33 + 1;
          }
          else
          {
            v35 = (_DWORD *)(*(_QWORD *)a3 + 12 * v29);
            *v35 = v99;
            v34 = v35 + 1;
            v31 = &v100;
          }
          *v34 = *(_QWORD *)v31;
          ++*(_DWORD *)(a3 + 12);
        }
        i = *a6 + 1;
      }
      v57 = *(_QWORD *)(a1 + 8);
      v58 = (JSC::AssemblerBuffer *)(v57 + 56);
      for (j = *(_DWORD *)(v57 + 200); j < *(_DWORD *)(v57 + 52); *(_DWORD *)(v57 + 200) = j)
      {
        if ((j + 4) > *(_DWORD *)(v57 + 192))
        {
          v60 = v58;
          JSC::AssemblerBuffer::outOfLineGrow(v58, v20, v21, v22, v23, v24, v25, v26);
          v58 = v60;
          j = *(_DWORD *)(v57 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v57 + 56) + j) = -721215457;
        j = *(_DWORD *)(v57 + 200) + 4;
      }
      v61 = j;
      if ((j + 4) > *(_DWORD *)(v57 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v58, v20, v21, v22, v23, v24, v25, v26);
        v61 = *(_DWORD *)(v57 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v57 + 56) + v61) = 335544320;
      *(_DWORD *)(v57 + 200) += 4;
      if (*(_BYTE *)(v57 + 328))
        v62 = 69;
      else
        v62 = 65;
      v94 = j;
      v95 = 0;
      v96 = v62;
      v97 = 15;
      v98 = -1;
      v9 = a7;
      if (j == -1)
        goto LABEL_51;
      v63 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v63 != *(_DWORD *)(a2 + 8))
      {
        v71 = (int *)(*(_QWORD *)a2 + 12 * v63);
        *v71 = j;
        v68 = v71 + 1;
        v65 = &v95;
        goto LABEL_50;
      }
      v55 = (void *)(v63 + 1);
      v56 = &v94;
      goto LABEL_45;
    }
    if (v11 >= 2)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 10, 6, v17, a5, (uint64_t)a6, a7, a8, (uint64_t)v101);
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClassRange(a1, a2, a3, a4, v84, a6, v9, a8);
      v48 = *(_QWORD *)(a1 + 8);
      v49 = (JSC::AssemblerBuffer *)(v48 + 56);
      for (k = *(_DWORD *)(v48 + 200); k < *(_DWORD *)(v48 + 52); *(_DWORD *)(v48 + 200) = k)
      {
        if ((k + 4) > *(_DWORD *)(v48 + 192))
        {
          v51 = v49;
          JSC::AssemblerBuffer::outOfLineGrow(v49, v47, v21, v22, v23, v24, v25, v26);
          v49 = v51;
          k = *(_DWORD *)(v48 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v48 + 56) + k) = -721215457;
        k = *(_DWORD *)(v48 + 200) + 4;
      }
      v52 = k;
      if ((k + 4) > *(_DWORD *)(v48 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v49, v47, v21, v22, v23, v24, v25, v26);
        v52 = *(_DWORD *)(v48 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v48 + 56) + v52) = 335544320;
      *(_DWORD *)(v48 + 200) += 4;
      if (*(_BYTE *)(v48 + 328))
        v53 = 69;
      else
        v53 = 65;
      v89 = k;
      v90 = 0;
      v91 = v53;
      v92 = 15;
      v93 = -1;
      v9 = a7;
      if (k == -1)
        goto LABEL_51;
      v54 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v54 != *(_DWORD *)(a2 + 8))
      {
        v70 = (int *)(*(_QWORD *)a2 + 12 * v54);
        *v70 = k;
        v68 = v70 + 1;
        v65 = &v90;
        goto LABEL_50;
      }
      v55 = (void *)(v54 + 1);
      v56 = &v89;
LABEL_45:
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v55, (unint64_t)v56, v22, v23, v24, v25, v26);
      v66 = *v64;
      v65 = v64 + 1;
      v67 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
      *v67 = v66;
      v68 = v67 + 1;
LABEL_50:
      *v68 = *(_QWORD *)v65;
      ++*(_DWORD *)(a2 + 12);
LABEL_51:
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v101, *(_QWORD *)(a1 + 8), v21, v22, v23, v24, v25, v26);
      goto LABEL_52;
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, 6, v17, a5, (uint64_t)a6, a7, a8, (uint64_t)&v87);
    if (v87 != -1)
    {
      v41 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v41 == *(_DWORD *)(a2 + 8))
      {
        v42 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v41 + 1), (unint64_t)&v87, v36, v37, v38, v39, v40);
        v44 = *v42;
        v43 = (uint64_t *)(v42 + 1);
        v45 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
        *v45 = v44;
        v46 = (uint64_t *)(v45 + 1);
      }
      else
      {
        v69 = (_DWORD *)(*(_QWORD *)a2 + 12 * v41);
        *v69 = v87;
        v46 = (uint64_t *)(v69 + 1);
        v43 = &v88;
      }
      *v46 = *v43;
      ++*(_DWORD *)(a2 + 12);
    }
LABEL_52:
    v72 = *a6;
    if (v72 < a8)
    {
      v73 = (unsigned int *)(v9 + 4 * v72);
      do
      {
        v74 = *v73++;
        if (v74 > v18)
          break;
        LODWORD(v72) = v72 + 1;
        *a6 = v72;
      }
      while ((_DWORD)a8 != (_DWORD)v72);
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 13, 6, v18, v37, v38, v39, v40, (uint64_t)&v85);
    if (v85 != -1)
    {
      v76 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v76 == *(_DWORD *)(a3 + 8))
      {
        v77 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v76 + 1), (unint64_t)&v85, v75, a5, (uint64_t)a6, a7, a8);
        v79 = *v77;
        v78 = v77 + 1;
        v80 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
        *v80 = v79;
        v81 = v80 + 1;
      }
      else
      {
        v82 = (_DWORD *)(*(_QWORD *)a3 + 12 * v76);
        *v82 = v85;
        v81 = v82 + 1;
        v78 = &v86;
      }
      *v81 = *(_QWORD *)v78;
      ++*(_DWORD *)(a3 + 12);
    }
    a4 += 8 * (v84 + 1);
    v11 -= v84 + 1;
  }
  while (v11);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::checkNotEnoughInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  JSC::MacroAssemblerARM64::add32(*(_DWORD **)(a2 + 8), 1, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a2 + 8), 8, a3, 2, v11, v12, v13, v14, a1);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::advanceIndexAfterCharacterClassTermMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  int v37;
  int v38;
  char v39;
  __int16 v40;
  char v41;
  unsigned int v42[3];

  if (*(_BYTE *)a2 != 4
    || (v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 88), (v10 - 1) > 1)
    || (*(_BYTE *)(a2 + 1) & 2) != 0)
  {
    v13 = *(_DWORD **)(a1 + 8);
    v14 = v13[50];
    if (v14 + 4 > v13[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 14), a2, a3, a4, a5, a6, a7, a8);
      v14 = v13[50];
    }
    *(_DWORD *)(*((_QWORD *)v13 + 7) + v14) = 285213729;
    v13[50] += 4;
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, 6, 0x10000, a5, a6, a7, a8, (uint64_t)v42);
    v22 = *(_QWORD *)(a1 + 8);
    v23 = *(_DWORD *)(v22 + 200);
    if (v23 + 4 > *(_DWORD *)(v22 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v15, v16, v17, v18, v19, v20, v21);
      v23 = *(_DWORD *)(v22 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = 1795293247;
    v24 = *(_DWORD *)(v22 + 200) + 4;
    *(_DWORD *)(v22 + 200) = v24;
    if (*(_BYTE *)(v22 + 328))
    {
      while ((signed int)v24 < *(_DWORD *)(v22 + 52))
      {
        if (v24 + 4 > *(_DWORD *)(v22 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v15, v16, v17, v18, v19, v20, v21);
          v24 = *(_DWORD *)(v22 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v22 + 56) + v24) = -721215457;
        v24 = *(_DWORD *)(v22 + 200) + 4;
        *(_DWORD *)(v22 + 200) = v24;
      }
      *(_DWORD *)(v22 + 208) = 0;
    }
    if (v24 + 4 > *(_DWORD *)(v22 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v15, v16, v17, v18, v19, v20, v21);
      v24 = *(_DWORD *)(v22 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v22 + 56) + v24) = 1409286144;
    v25 = *(_DWORD *)(v22 + 200);
    v26 = v25 + 4;
    *(_DWORD *)(v22 + 200) = v25 + 4;
    v27 = v25 + 8;
    v28 = v25 + 4;
    if (v27 > *(_DWORD *)(v22 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v15, v16, v17, v18, v19, v20, v21);
      v28 = *(_DWORD *)(v22 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v22 + 56) + v28) = -721215457;
    *(_DWORD *)(v22 + 200) += 4;
    if (*(_BYTE *)(v22 + 328))
      v29 = -122;
    else
      v29 = -126;
    v37 = v26;
    v38 = 0;
    v39 = v29;
    v40 = 0;
    v41 = -1;
    if (v26 != -1)
    {
      v30 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v30 == *(_DWORD *)(a3 + 8))
      {
        v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v30 + 1), (unint64_t)&v37, v17, v18, v19, v20, v21);
        v33 = *v31;
        v32 = v31 + 1;
        v34 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
        *(_DWORD *)v34 = v33;
      }
      else
      {
        v32 = &v38;
        v34 = *(_QWORD *)a3 + 12 * v30;
        *(_DWORD *)v34 = v26;
      }
      *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
      ++*(_DWORD *)(a3 + 12);
    }
    v35 = *(_DWORD **)(a1 + 8);
    v36 = v35[50];
    if (v36 + 4 > v35[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v35 + 14), v15, v16, v17, v18, v19, v20, v21);
      v36 = v35[50];
    }
    *(_DWORD *)(*((_QWORD *)v35 + 7) + v36) = 285213729;
    v35[50] += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v42, *(_QWORD *)(a1 + 8), v16, v17, v18, v19, v20, v21);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    if ((v10 & 2) != 0)
      v12 = 2;
    else
      v12 = 1;
    JSC::MacroAssemblerARM64::add32(v11, v12, 1, 1, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchAssertionWordchar(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  JSC::Yarr::YarrPattern *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  char v55;
  __int16 v56;
  char v57;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E8D868);
  }
  v10 = *(_QWORD *)(a1 + 304) + 120 * a2;
  v12 = *(_DWORD *)(v10 + 100);
  v11 = (_DWORD *)(v10 + 100);
  v13 = *(_QWORD *)(v11 - 19);
  if (v12 == *(_DWORD *)(v13 + 40))
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_DWORD *)(v15 + 200);
    if (v16 + 4 > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + v16) = 1795293247;
    v17 = *(_DWORD *)(v15 + 200) + 4;
    *(_DWORD *)(v15 + 200) = v17;
    if (*(_BYTE *)(v15 + 328))
    {
      while ((signed int)v17 < *(_DWORD *)(v15 + 52))
      {
        if (v17 + 4 > *(_DWORD *)(v15 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
          v17 = *(_DWORD *)(v15 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v15 + 56) + v17) = -721215457;
        v17 = *(_DWORD *)(v15 + 200) + 4;
        *(_DWORD *)(v15 + 200) = v17;
      }
      *(_DWORD *)(v15 + 208) = 0;
    }
    if (v17 + 4 > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
      v17 = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + v17) = 1409286144;
    v18 = *(_DWORD *)(v15 + 200);
    v19 = v18 + 4;
    *(_DWORD *)(v15 + 200) = v18 + 4;
    v20 = v18 + 8;
    v21 = v18 + 4;
    if (v20 > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + v21) = -721215457;
    *(_DWORD *)(v15 + 200) += 4;
    if (*(_BYTE *)(v15 + 328))
      v22 = -122;
    else
      v22 = -126;
    v53 = v19;
    v54 = 0;
    v55 = v22;
    v56 = 0;
    v57 = -1;
    if (v19 != -1)
    {
      v23 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a4 + 8))
      {
        v24 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v23 + 1), (unint64_t)&v53, a4, a5, a6, a7, a8);
        v26 = *v24;
        v25 = v24 + 1;
        v27 = *(_QWORD *)a4 + 12 * *(unsigned int *)(a4 + 12);
        *(_DWORD *)v27 = v26;
      }
      else
      {
        v25 = &v54;
        v27 = *(_QWORD *)a4 + 12 * v23;
        *(_DWORD *)v27 = v19;
      }
      *(_QWORD *)(v27 + 4) = *(_QWORD *)v25;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  v28 = *(_DWORD *)(v13 + 40);
  v29 = *v11 - v28;
  if (*v11 < v28)
  {
    __break(0xC471u);
    JUMPOUT(0x198E8D870);
  }
  v30 = *(unsigned __int8 *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
    v31 = 0x3FFFFFFF;
  else
    v31 = 0x7FFFFFFF;
  if (v29 > v31)
  {
    v40 = *(_DWORD **)(a1 + 8);
    v41 = v40[50];
    if (v41 + 4 > v40[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v40 + 14), a2, a3, a4, a5, a6, a7, a8);
      v41 = v40[50];
    }
    *(_DWORD *)(*((_QWORD *)v40 + 7) + v41) = -1442839578;
    v40[50] += 4;
    do
    {
      v42 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v42 + 212))
        goto LABEL_61;
      *(_DWORD *)(*(_QWORD *)(v42 + 264) + 208) &= ~*(_DWORD *)(v42 + 288);
      v43 = *(char *)(v42 + 272);
      v44 = *(_DWORD *)(v42 + 200);
      if (v44 + 4 > *(_DWORD *)(v42 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v42 + 56), a2, a3, a4, a5, a6, a7, a8);
        v44 = *(_DWORD *)(v42 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v42 + 56) + v44) = v43 | 0xB26203E0;
      v45 = *(_DWORD *)(v42 + 200);
      v46 = v45 + 4;
      *(_DWORD *)(v42 + 200) = v45 + 4;
      if ((v45 + 8) > *(_DWORD *)(v42 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v42 + 56), a2, a3, a4, a5, a6, a7, a8);
        v46 = *(_DWORD *)(v42 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v42 + 56) + v46) = -888143674;
      *(_DWORD *)(v42 + 200) += 4;
      if (*(_BYTE *)(a1 + 80))
      {
        v47 = *(_QWORD *)(a1 + 8);
        if (!*(_BYTE *)(v47 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198E8D850);
        }
        *(_DWORD *)(*(_QWORD *)(v47 + 264) + 208) &= ~*(_DWORD *)(v47 + 288);
        v48 = *(char *)(v47 + 272);
        v49 = *(_DWORD *)(v47 + 200);
        if (v49 + 4 > *(_DWORD *)(v47 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 56), a2, a3, a4, a5, a6, a7, a8);
          v49 = *(_DWORD *)(v47 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v47 + 56) + v49) = v48 | 0xB26203E0;
        v50 = *(_DWORD *)(v47 + 200);
        v51 = v50 + 4;
        *(_DWORD *)(v47 + 200) = v50 + 4;
        if ((v50 + 8) > *(_DWORD *)(v47 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 56), a2, a3, a4, a5, a6, a7, a8);
          v51 = *(_DWORD *)(v47 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v47 + 56) + v51) = -888143674;
        *(_DWORD *)(v47 + 200) += 4;
      }
      v52 = v29 - 0x40000000;
      if (v29 < 0x40000000)
      {
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x198E8D830);
      }
      v29 -= 0x40000000;
    }
    while (v52 > v31);
    v30 = *(unsigned __int8 *)(a1 + 80);
    v29 = v52;
  }
  if (v30)
  {
    if (v29 >= 1073741825)
    {
      __break(0xC471u);
      JUMPOUT(0x198E8D878);
    }
    v39 = (-2 * v29) | 0x200000000;
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v39, 6, a5, a6, a7, a8);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 0x100000100uLL, v39, 6, a5, a6, a7, a8);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), 0x100uLL, -v29 | 0x200000000, 6, a5, a6, a7, a8);
  }
  v32 = *(JSC::Yarr::YarrPattern **)(a1 + 56);
  if ((*(_BYTE *)(a1 + 84) & 2) != 0)
    JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(v32);
  else
    JSC::Yarr::YarrPattern::wordcharCharacterClass(v32);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchCharacterClass(a1, a3, v33, v34, v35, v36, v37, v38);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::loadSubPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;

  v9 = *(_DWORD **)(a1 + 8);
  v10 = ((a2 & 0x1F) << 16) | 0x8B000C67;
  v11 = v9[50];
  if (v11 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v11) = v10;
  v9[50] += 4;
  v12 = *(_DWORD **)(a1 + 8);
  v13 = v12[50];
  if (v13 + 4 > v12[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = v12[50];
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v13) = 692067560;
  v12[50] += 4;
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::matchBackreference(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int *v59;
  int *v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  char v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  int v110;
  uint64_t v111;
  int *v112;
  int *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  char v137;
  int *v138;
  int *v139;
  int v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  char v172;
  uint64_t v173;
  int *v174;
  int *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int i;
  unsigned int v180;
  char v181;
  int *v182;
  int *v183;
  int v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  _DWORD *v214;
  uint64_t *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF *v222;
  _DWORD *v224;
  unsigned int v225;
  _DWORD *v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _DWORD *v235;
  unsigned int v236;
  _DWORD *v237;
  unsigned int v238;
  char v239;
  _DWORD *v240;
  unsigned int v241;
  _DWORD *v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  char v251;
  uint64_t v252;
  unsigned int *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  char v263;
  uint64_t v265;
  int v266;
  uint64_t v267;
  JSC::AssemblerBuffer *v268;
  unint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _DWORD *v277;
  unsigned int v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  uint64_t v284;
  int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  JSC::AssemblerBuffer *v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  int v297;
  int v298;
  char v299;
  __int16 v300;
  char v301;
  int v302;
  int v303;
  char v304;
  __int16 v305;
  char v306;
  unsigned int v307[3];
  int v308;
  int v309;
  char v310;
  __int16 v311;
  char v312;
  WTF *v313;
  uint64_t v314;
  _BYTE v315[28];
  int v316;
  uint64_t v317;
  int v318;
  int v319;
  int v320;
  int v321;
  char v322;
  __int16 v323;
  char v324;
  int v325;
  int v326;
  char v327;
  __int16 v328;
  char v329;
  int v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;

  v291 = a4;
  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E8F210);
  }
  v11 = *(_QWORD *)(a1 + 304);
  v12 = *(_QWORD *)(v11 + 120 * a2 + 24);
  v13 = *(unsigned int *)(v12 + 16);
  v14 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v14 + 12))
  {
    if (*(_DWORD *)(v14 + 124) <= v13)
    {
      __break(0xC471u);
      JUMPOUT(0x198E8F220);
    }
    v292 = *(_DWORD *)(*(_QWORD *)(v14 + 112) + 4 * v13);
  }
  else
  {
    v292 = 0;
  }
  v15 = *(_DWORD **)(a1 + 8);
  v16 = v15[50];
  if (v16 < v15[13])
  {
    v268 = (JSC::AssemblerBuffer *)(v15 + 14);
    do
    {
      if ((v16 + 4) > v15[48])
      {
        v290 = v268;
        JSC::AssemblerBuffer::outOfLineGrow(v268, a2, a3, a4, a5, a6, a7, a8);
        v268 = v290;
        v16 = v15[50];
      }
      *(_DWORD *)(*((_QWORD *)v15 + 7) + v16) = -721215457;
      v16 = v15[50] + 4;
      v15[50] = v16;
    }
    while (v16 < v15[13]);
  }
  v15[52] = 0;
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    v24 = *(_DWORD *)(v11 + 120 * a2 + 100);
    v25 = *(_DWORD *)(v12 + 40);
    if (v24 < v25)
    {
      __break(0xC471u);
      JUMPOUT(0x198E8F228);
    }
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::readCharacter(a1, v24 - v25, 6, 8, a5, a6, a7, a8);
    v26 = *(_DWORD **)(a1 + 8);
    v27 = v26[50];
    if (v27 + 4 > v26[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 14), v17, v18, v19, v20, v21, v22, v23);
      v27 = v26[50];
    }
    *(_DWORD *)(*((_QWORD *)v26 + 7) + v27) = -1442446361;
    v26[50] += 4;
  }
  else
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::readCharacter(a1, 0, 7, 8, a5, a6, a7, a8);
  }
  v28 = *(_DWORD *)(v11 + 120 * a2 + 100);
  v29 = *(_DWORD *)(v12 + 40);
  v30 = v28 - v29;
  if (v28 < v29)
  {
    __break(0xC471u);
    JUMPOUT(0x198E8F218);
  }
  v31 = *(unsigned __int8 *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
    v32 = 0x3FFFFFFF;
  else
    v32 = 0x7FFFFFFF;
  if (v30 > v32)
  {
    v277 = *(_DWORD **)(a1 + 8);
    v278 = v277[50];
    if (v278 + 4 > v277[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v277 + 14), v17, v18, v19, v20, v21, v22, v23);
      v278 = v277[50];
    }
    *(_DWORD *)(*((_QWORD *)v277 + 7) + v278) = -1442839578;
    v277[50] += 4;
    while (1)
    {
      v279 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v279 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8F128);
      }
      *(_DWORD *)(*(_QWORD *)(v279 + 264) + 208) &= ~*(_DWORD *)(v279 + 288);
      v280 = *(char *)(v279 + 272);
      v281 = *(_DWORD *)(v279 + 200);
      if (v281 + 4 > *(_DWORD *)(v279 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v279 + 56), v17, v18, v19, v20, v21, v22, v23);
        v281 = *(_DWORD *)(v279 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v279 + 56) + v281) = v280 | 0xB26203E0;
      v282 = *(_DWORD *)(v279 + 200);
      v283 = v282 + 4;
      *(_DWORD *)(v279 + 200) = v282 + 4;
      if ((v282 + 8) > *(_DWORD *)(v279 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v279 + 56), v17, v18, v19, v20, v21, v22, v23);
        v283 = *(_DWORD *)(v279 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v279 + 56) + v283) = -888143674;
      *(_DWORD *)(v279 + 200) += 4;
      if (*(_BYTE *)(a1 + 80))
      {
        v284 = *(_QWORD *)(a1 + 8);
        if (!*(_BYTE *)(v284 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198E8F1F0);
        }
        *(_DWORD *)(*(_QWORD *)(v284 + 264) + 208) &= ~*(_DWORD *)(v284 + 288);
        v285 = *(char *)(v284 + 272);
        v286 = *(_DWORD *)(v284 + 200);
        if (v286 + 4 > *(_DWORD *)(v284 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v284 + 56), v17, v18, v19, v20, v21, v22, v23);
          v286 = *(_DWORD *)(v284 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v284 + 56) + v286) = v285 | 0xB26203E0;
        v287 = *(_DWORD *)(v284 + 200);
        v288 = v287 + 4;
        *(_DWORD *)(v284 + 200) = v287 + 4;
        if ((v287 + 8) > *(_DWORD *)(v284 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v284 + 56), v17, v18, v19, v20, v21, v22, v23);
          v288 = *(_DWORD *)(v284 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v284 + 56) + v288) = -888143674;
        *(_DWORD *)(v284 + 200) += 4;
      }
      v289 = v30 - 0x40000000;
      if (v30 < 0x40000000)
        break;
      v30 -= 0x40000000;
      if (v289 <= v32)
      {
        v31 = *(unsigned __int8 *)(a1 + 80);
        v30 = v289;
        goto LABEL_18;
      }
    }
    __break(0xC471u);
LABEL_281:
    JUMPOUT(0x198E8EBE8);
  }
LABEL_18:
  if (v31)
  {
    if (v30 >= 1073741825)
    {
      __break(0xC471u);
      JUMPOUT(0x198E8F27CLL);
    }
    v267 = (-2 * v30) | 0x200000000;
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeChar(a1, 0x100000100uLL, v267, 6, v20, v21, v22, v23);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 0x100000100uLL, v267, 6, v20, v21, v22, v23);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), 0x100uLL, -v30 | 0x200000000, 6, v20, v21, v22, v23);
  }
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) != 0)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, 0xFFFFFFFFLL, v36, v37, v38, v39, (uint64_t)&v318);
      v57 = v318;
      if (v318 != -1)
      {
        v58 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v58 == *(_DWORD *)(a3 + 8))
        {
          v59 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v58 + 1), (unint64_t)&v318, v52, v53, v54, v55, v56);
          v61 = *v59;
          v60 = v59 + 1;
          v57 = v61;
          LODWORD(v58) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v60 = &v319;
        }
        v116 = *(_QWORD *)a3 + 12 * v58;
        *(_DWORD *)v116 = v57;
        *(_QWORD *)(v116 + 4) = *(_QWORD *)v60;
        ++*(_DWORD *)(a3 + 12);
      }
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 7, 0xFFFFFFFFLL, v53, v54, v55, v56, (uint64_t)&v316);
      v124 = v316;
      if (v316 != -1)
      {
        v125 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v125 == *(_DWORD *)(a3 + 8))
        {
          v126 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v125 + 1), (unint64_t)&v316, v119, v120, v121, v122, v123);
          v128 = *v126;
          v127 = (uint64_t *)(v126 + 1);
          v124 = v128;
          LODWORD(v125) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v127 = &v317;
        }
        v129 = *(_QWORD *)a3 + 12 * v125;
        *(_DWORD *)v129 = v124;
        *(_QWORD *)(v129 + 4) = *v127;
        ++*(_DWORD *)(a3 + 12);
      }
      v313 = (WTF *)v315;
      v314 = 2;
      v130 = *(_QWORD *)(a1 + 8);
      v131 = *(_DWORD *)(v130 + 200);
      if (v131 + 4 > *(_DWORD *)(v130 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), v117, v118, v119, v120, v121, v122, v123);
        v131 = *(_DWORD *)(v130 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v130 + 56) + v131) = 1795621087;
      v132 = *(_DWORD *)(v130 + 200) + 4;
      *(_DWORD *)(v130 + 200) = v132;
      if (*(_BYTE *)(v130 + 328))
      {
        while ((signed int)v132 < *(_DWORD *)(v130 + 52))
        {
          if (v132 + 4 > *(_DWORD *)(v130 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), v117, v118, v119, v120, v121, v122, v123);
            v132 = *(_DWORD *)(v130 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v130 + 56) + v132) = -721215457;
          v132 = *(_DWORD *)(v130 + 200) + 4;
          *(_DWORD *)(v130 + 200) = v132;
        }
        *(_DWORD *)(v130 + 208) = 0;
      }
      if (v132 + 4 > *(_DWORD *)(v130 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), v117, v118, v119, v120, v121, v122, v123);
        v132 = *(_DWORD *)(v130 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v130 + 56) + v132) = 1409286144;
      v133 = *(_DWORD *)(v130 + 200);
      v134 = v133 + 4;
      *(_DWORD *)(v130 + 200) = v133 + 4;
      v135 = v133 + 8;
      v136 = v133 + 4;
      if (v135 > *(_DWORD *)(v130 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v130 + 56), v117, v118, v119, v120, v121, v122, v123);
        v136 = *(_DWORD *)(v130 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v130 + 56) + v136) = -721215457;
      *(_DWORD *)(v130 + 200) += 4;
      if (*(_BYTE *)(v130 + 328))
        v137 = -122;
      else
        v137 = -126;
      v308 = v134;
      v309 = 0;
      v310 = v137;
      v311 = 0;
      v312 = -1;
      if (v134 != -1)
      {
        if (HIDWORD(v314) == (_DWORD)v314)
        {
          v138 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v313, (void *)(HIDWORD(v314) + 1), (unint64_t)&v308, v119, v120, v121, v122, v123);
          v140 = *v138;
          v139 = v138 + 1;
          v141 = (char *)v313 + 12 * HIDWORD(v314);
          *(_DWORD *)v141 = v140;
        }
        else
        {
          v139 = &v309;
          v141 = (char *)v313 + 12 * HIDWORD(v314);
          *(_DWORD *)v141 = v134;
        }
        *(_QWORD *)(v141 + 4) = *(_QWORD *)v139;
        ++HIDWORD(v314);
      }
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 12, 6, 127, v120, v121, v122, v123, (uint64_t)v307);
      v147 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v147 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8EC68);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(*(_DWORD **)(a1 + 8), (uint64_t)&JSC::Yarr::canonicalTableLChar, v147 + 296, v142, v143, v144, v145, v146);
      v155 = *(_DWORD *)(v147 + 200);
      if (v155 + 4 > *(_DWORD *)(v147 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v147 + 56), v148, v149, v150, v151, v152, v153, v154);
        v155 = *(_DWORD *)(v147 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v147 + 56) + v155) = 2019981862;
      *(_DWORD *)(v147 + 200) += 4;
      v156 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v156 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8EC98);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(*(_DWORD **)(a1 + 8), (uint64_t)&JSC::Yarr::canonicalTableLChar, v156 + 296, v150, v151, v152, v153, v154);
      v164 = *(_DWORD *)(v156 + 200);
      if (v164 + 4 > *(_DWORD *)(v156 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v156 + 56), v157, v158, v159, v160, v161, v162, v163);
        v164 = *(_DWORD *)(v156 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v156 + 56) + v164) = 2020047399;
      *(_DWORD *)(v156 + 200) += 4;
      v165 = *(_QWORD *)(a1 + 8);
      v166 = *(_DWORD *)(v165 + 200);
      if (v166 + 4 > *(_DWORD *)(v165 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v165 + 56), v157, v158, v159, v160, v161, v162, v163);
        v166 = *(_DWORD *)(v165 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v165 + 56) + v166) = 1795621087;
      v167 = *(_DWORD *)(v165 + 200) + 4;
      *(_DWORD *)(v165 + 200) = v167;
      if (*(_BYTE *)(v165 + 328))
      {
        for (; (signed int)v167 < *(_DWORD *)(v165 + 52); *(_DWORD *)(v165 + 200) = v167)
        {
          if (v167 + 4 > *(_DWORD *)(v165 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v165 + 56), v157, v158, v159, v160, v161, v162, v163);
            v167 = *(_DWORD *)(v165 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v165 + 56) + v167) = -721215457;
          v167 = *(_DWORD *)(v165 + 200) + 4;
        }
        *(_DWORD *)(v165 + 208) = 0;
      }
      if (v167 + 4 > *(_DWORD *)(v165 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v165 + 56), v157, v158, v159, v160, v161, v162, v163);
        v167 = *(_DWORD *)(v165 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v165 + 56) + v167) = 1409286145;
      v168 = *(_DWORD *)(v165 + 200);
      v169 = v168 + 4;
      *(_DWORD *)(v165 + 200) = v168 + 4;
      v170 = v168 + 8;
      v171 = v168 + 4;
      if (v170 > *(_DWORD *)(v165 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v165 + 56), v157, v158, v159, v160, v161, v162, v163);
        v171 = *(_DWORD *)(v165 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v165 + 56) + v171) = -721215457;
      *(_DWORD *)(v165 + 200) += 4;
      if (*(_BYTE *)(v165 + 328))
        v172 = -122;
      else
        v172 = -126;
      v302 = v169;
      v303 = 0;
      v304 = v172;
      v305 = 1;
      v306 = -1;
      if (v169 != -1)
      {
        v173 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v173 == *(_DWORD *)(a3 + 8))
        {
          v174 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v173 + 1), (unint64_t)&v302, v159, v160, v161, v162, v163);
          v176 = *v174;
          v175 = v174 + 1;
          v177 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
          *(_DWORD *)v177 = v176;
        }
        else
        {
          v175 = &v303;
          v177 = *(_QWORD *)a3 + 12 * v173;
          *(_DWORD *)v177 = v169;
        }
        *(_QWORD *)(v177 + 4) = *(_QWORD *)v175;
        ++*(_DWORD *)(a3 + 12);
      }
      v178 = *(_QWORD *)(a1 + 8);
      for (i = *(_DWORD *)(v178 + 200); i < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 + 56), v157, v158, v159, v160, v161, v162, v163);
          i = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + i) = -721215457;
        i = *(_DWORD *)(v178 + 200) + 4;
      }
      v180 = i;
      if ((i + 4) > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 + 56), v157, v158, v159, v160, v161, v162, v163);
        v180 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v180) = 335544320;
      *(_DWORD *)(v178 + 200) += 4;
      if (*(_BYTE *)(v178 + 328))
        v181 = 69;
      else
        v181 = 65;
      v297 = i;
      v298 = 0;
      v299 = v181;
      v300 = 15;
      v301 = -1;
      if (i != -1)
      {
        if (HIDWORD(v314) == (_DWORD)v314)
        {
          v182 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v313, (void *)(HIDWORD(v314) + 1), (unint64_t)&v297, v159, v160, v161, v162, v163);
          v184 = *v182;
          v183 = v182 + 1;
          v185 = (char *)v313 + 12 * HIDWORD(v314);
          *(_DWORD *)v185 = v184;
        }
        else
        {
          v183 = &v298;
          v185 = (char *)v313 + 12 * HIDWORD(v314);
          *(_DWORD *)v185 = i;
        }
        *(_QWORD *)(v185 + 4) = *(_QWORD *)v183;
        ++HIDWORD(v314);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v307, *(_QWORD *)(a1 + 8), v158, v159, v160, v161, v162, v163);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(*(_BYTE *)(a1 + 84) & 1), 10, v186, v187, v188, v189, v190);
      v198 = *(_QWORD *)(a1 + 8);
      v199 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 90440);
      v200 = *(_QWORD *)(v199 + 1384);
      v201 = *(unsigned int **)(v199 + 1392);
      if (v201)
      {
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 + 1, v201));
      }
      *(_DWORD *)(v198 + 208) = 0;
      v203 = *(_DWORD *)(v198 + 200);
      if (v203 + 4 > *(_DWORD *)(v198 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v198 + 56), v191, v192, v193, v194, v195, v196, v197);
        v203 = *(_DWORD *)(v198 + 200);
      }
      v204 = (_QWORD *)(v198 + 32);
      *(_DWORD *)(*(_QWORD *)(v198 + 56) + v203) = -1811939328;
      v205 = (*(_DWORD *)(v198 + 200) + 4);
      *(_DWORD *)(v198 + 200) = v205;
      LOBYTE(v333) = -1;
      BYTE3(v333) = 15;
      *(_WORD *)((char *)&v333 + 1) = 65;
      *(_QWORD *)&v332 = v205 - 4;
      *((_QWORD *)&v332 + 1) = v200;
      WORD2(v333) = 384;
      v206 = *(unsigned int *)(v198 + 44);
      if ((_DWORD)v206 == *(_DWORD *)(v198 + 40))
      {
        v265 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v204, v206 + 1, (unint64_t)&v332, v193, v194, v195, v196, v197);
        v207 = *(_QWORD *)(v198 + 32) + 24 * *(unsigned int *)(v198 + 44);
        *(_QWORD *)v207 = 0;
        *(_QWORD *)(v207 + 8) = 0;
        *(_BYTE *)(v207 + 16) = -1;
        v266 = (((*(unsigned __int8 *)(v207 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v207 + 17) = 65;
        *(_BYTE *)(v207 + 19) = BYTE2(v266);
        *(_WORD *)(v207 + 20) &= 0xFC00u;
        v208 = *(_OWORD *)v265;
        v209 = *(_QWORD *)(v265 + 16);
      }
      else
      {
        v207 = *v204 + 24 * v206;
        v208 = v332;
        v209 = v333;
      }
      *(_QWORD *)(v207 + 16) = v209;
      *(_OWORD *)v207 = v208;
      ++*(_DWORD *)(v198 + 44);
      if (v201)
      {
        do
        {
          v210 = __ldaxr(v201);
          v211 = v210 - 1;
        }
        while (__stlxr(v211, v201));
        if (!v211)
        {
          atomic_store(1u, v201);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v201, v191, v192, v193, v194, v195, v196, v197);
          WTF::fastFree(v269, v270, v271, v272, v273, v274, v275, v276);
        }
      }
      JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, 6, 6, v194, v195, v196, v197, (uint64_t)&v295);
      v212 = v295;
      if (v295 != -1)
      {
        v213 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v213 == *(_DWORD *)(a3 + 8))
        {
          v214 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v213 + 1), (unint64_t)&v295, v42, v43, v44, v45, v46);
          v216 = *v214;
          v215 = (uint64_t *)(v214 + 1);
          v212 = v216;
          LODWORD(v213) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v215 = &v296;
        }
        v217 = *(_QWORD *)a3 + 12 * v213;
        *(_DWORD *)v217 = v212;
        *(_QWORD *)(v217 + 4) = *v215;
        ++*(_DWORD *)(a3 + 12);
      }
      if (HIDWORD(v314))
      {
        v218 = 0;
        v219 = 0;
        v220 = *(_QWORD *)(a1 + 8);
        v221 = 12 * HIDWORD(v314);
        do
        {
          if (v219 >= HIDWORD(v314))
          {
            __break(0xC471u);
            JUMPOUT(0x198E8F208);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v313 + v218), v220, v41, v42, v43, v44, v45, v46);
          ++v219;
          v218 += 12;
        }
        while (v221 != v218);
      }
      v222 = v313;
      if (v315 != (_BYTE *)v313 && v313 != 0)
      {
        v313 = 0;
        LODWORD(v314) = 0;
        WTF::fastFree((unint64_t)v222, v40, v41, v42, v43, v44, v45, v46);
      }
    }
    else
    {
      v62 = *(_QWORD *)(a1 + 8);
      v63 = *(_DWORD *)(v62 + 200);
      if (v63 + 4 > *(_DWORD *)(v62 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v62 + 56), v33, v34, v35, v36, v37, v38, v39);
        v63 = *(_DWORD *)(v62 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v62 + 56) + v63) = 1795621087;
      v64 = *(_DWORD *)(v62 + 200) + 4;
      *(_DWORD *)(v62 + 200) = v64;
      if (*(_BYTE *)(v62 + 328))
      {
        while ((signed int)v64 < *(_DWORD *)(v62 + 52))
        {
          if (v64 + 4 > *(_DWORD *)(v62 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v62 + 56), v33, v34, v35, v36, v37, v38, v39);
            v64 = *(_DWORD *)(v62 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v62 + 56) + v64) = -721215457;
          v64 = *(_DWORD *)(v62 + 200) + 4;
          *(_DWORD *)(v62 + 200) = v64;
        }
        *(_DWORD *)(v62 + 208) = 0;
      }
      if (v64 + 4 > *(_DWORD *)(v62 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v62 + 56), v33, v34, v35, v36, v37, v38, v39);
        v64 = *(_DWORD *)(v62 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v62 + 56) + v64) = 1409286144;
      v65 = *(_DWORD *)(v62 + 200);
      v66 = v65 + 4;
      *(_DWORD *)(v62 + 200) = v65 + 4;
      v67 = v65 + 8;
      v68 = v65 + 4;
      if (v67 > *(_DWORD *)(v62 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v62 + 56), v33, v34, v35, v36, v37, v38, v39);
        v68 = *(_DWORD *)(v62 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v62 + 56) + v68) = -721215457;
      *(_DWORD *)(v62 + 200) += 4;
      if (*(_BYTE *)(v62 + 328))
        v69 = -122;
      else
        v69 = -126;
      v313 = (WTF *)v66;
      LOBYTE(v314) = v69;
      *(_WORD *)((char *)&v314 + 1) = 0;
      BYTE3(v314) = -1;
      v70 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v70 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8ED60);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(*(_DWORD **)(a1 + 8), (uint64_t)&JSC::Yarr::canonicalTableLChar, v70 + 296, v35, v36, v37, v38, v39);
      v78 = *(_DWORD *)(v70 + 200);
      if (v78 + 4 > *(_DWORD *)(v70 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v70 + 56), v71, v72, v73, v74, v75, v76, v77);
        v78 = *(_DWORD *)(v70 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v70 + 56) + v78) = 2019981862;
      *(_DWORD *)(v70 + 200) += 4;
      v79 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v79 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E8ED90);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(*(_DWORD **)(a1 + 8), (uint64_t)&JSC::Yarr::canonicalTableLChar, v79 + 296, v73, v74, v75, v76, v77);
      v87 = *(_DWORD *)(v79 + 200);
      if (v87 + 4 > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v79 + 56), v80, v81, v82, v83, v84, v85, v86);
        v87 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v87) = 2020047399;
      *(_DWORD *)(v79 + 200) += 4;
      v88 = *(_QWORD *)(a1 + 8);
      v89 = *(_DWORD *)(v88 + 200);
      if (v89 + 4 > *(_DWORD *)(v88 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 + 56), v80, v81, v82, v83, v84, v85, v86);
        v89 = *(_DWORD *)(v88 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v88 + 56) + v89) = 1795621087;
      v90 = *(_DWORD *)(v88 + 200) + 4;
      *(_DWORD *)(v88 + 200) = v90;
      if (*(_BYTE *)(v88 + 328))
      {
        while ((signed int)v90 < *(_DWORD *)(v88 + 52))
        {
          if (v90 + 4 > *(_DWORD *)(v88 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 + 56), v80, v81, v82, v83, v84, v85, v86);
            v90 = *(_DWORD *)(v88 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v88 + 56) + v90) = -721215457;
          v90 = *(_DWORD *)(v88 + 200) + 4;
          *(_DWORD *)(v88 + 200) = v90;
        }
        *(_DWORD *)(v88 + 208) = 0;
      }
      if (v90 + 4 > *(_DWORD *)(v88 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 + 56), v80, v81, v82, v83, v84, v85, v86);
        v90 = *(_DWORD *)(v88 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v88 + 56) + v90) = 1409286145;
      v91 = *(_DWORD *)(v88 + 200);
      v92 = v91 + 4;
      *(_DWORD *)(v88 + 200) = v91 + 4;
      v93 = v91 + 8;
      v94 = v91 + 4;
      if (v93 > *(_DWORD *)(v88 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 + 56), v80, v81, v82, v83, v84, v85, v86);
        v94 = *(_DWORD *)(v88 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v88 + 56) + v94) = -721215457;
      *(_DWORD *)(v88 + 200) += 4;
      if (*(_BYTE *)(v88 + 328))
        v95 = -122;
      else
        v95 = -126;
      v320 = v92;
      v321 = 0;
      v322 = v95;
      v323 = 1;
      v324 = -1;
      if (v92 != -1)
      {
        v96 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v96 == *(_DWORD *)(a3 + 8))
        {
          v97 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v96 + 1), (unint64_t)&v320, v82, v83, v84, v85, v86);
          v99 = *v97;
          v98 = v97 + 1;
          v100 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
          *(_DWORD *)v100 = v99;
        }
        else
        {
          v98 = &v321;
          v100 = *(_QWORD *)a3 + 12 * v96;
          *(_DWORD *)v100 = v92;
        }
        *(_QWORD *)(v100 + 4) = *(_QWORD *)v98;
        ++*(_DWORD *)(a3 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v313, *(_QWORD *)(a1 + 8), v81, v82, v83, v84, v85, v86);
    }
    v110 = v292;
  }
  else
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, 0xFFFFFFFFLL, v36, v37, v38, v39, (uint64_t)&v330);
    v47 = v330;
    if (v330 != -1)
    {
      v48 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v48 == *(_DWORD *)(a3 + 8))
      {
        v49 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v48 + 1), (unint64_t)&v330, v42, v43, v44, v45, v46);
        v51 = *v49;
        v50 = (uint64_t *)(v49 + 1);
        v47 = v51;
        LODWORD(v48) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v50 = &v331;
      }
      v101 = *(_QWORD *)a3 + 12 * v48;
      *(_DWORD *)v101 = v47;
      *(_QWORD *)(v101 + 4) = *v50;
      ++*(_DWORD *)(a3 + 12);
    }
    v102 = *(_QWORD *)(a1 + 8);
    v103 = *(_DWORD *)(v102 + 200);
    if (v103 + 4 > *(_DWORD *)(v102 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v102 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v103 = *(_DWORD *)(v102 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v102 + 56) + v103) = 1795621087;
    v104 = *(_DWORD *)(v102 + 200) + 4;
    *(_DWORD *)(v102 + 200) = v104;
    if (*(_BYTE *)(v102 + 328))
    {
      while ((signed int)v104 < *(_DWORD *)(v102 + 52))
      {
        if (v104 + 4 > *(_DWORD *)(v102 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v102 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
          v104 = *(_DWORD *)(v102 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v102 + 56) + v104) = -721215457;
        v104 = *(_DWORD *)(v102 + 200) + 4;
        *(_DWORD *)(v102 + 200) = v104;
      }
      *(_DWORD *)(v102 + 208) = 0;
    }
    if (v104 + 4 > *(_DWORD *)(v102 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v102 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v104 = *(_DWORD *)(v102 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v102 + 56) + v104) = 1409286145;
    v105 = *(_DWORD *)(v102 + 200);
    v106 = v105 + 4;
    *(_DWORD *)(v102 + 200) = v105 + 4;
    v107 = v105 + 8;
    v108 = v105 + 4;
    if (v107 > *(_DWORD *)(v102 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v102 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v108 = *(_DWORD *)(v102 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v102 + 56) + v108) = -721215457;
    *(_DWORD *)(v102 + 200) += 4;
    if (*(_BYTE *)(v102 + 328))
      v109 = -122;
    else
      v109 = -126;
    v325 = v106;
    v326 = 0;
    v327 = v109;
    v328 = 1;
    v329 = -1;
    v110 = v292;
    if (v106 != -1)
    {
      v111 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v111 == *(_DWORD *)(a3 + 8))
      {
        v112 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v111 + 1), (unint64_t)&v325, v42, v43, v44, v45, v46);
        v114 = *v112;
        v113 = v112 + 1;
        v115 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
        *(_DWORD *)v115 = v114;
      }
      else
      {
        v113 = &v326;
        v115 = *(_QWORD *)a3 + 12 * v111;
        *(_DWORD *)v115 = v106;
      }
      *(_QWORD *)(v115 + 4) = *(_QWORD *)v113;
      ++*(_DWORD *)(a3 + 12);
    }
  }
  v224 = *(_DWORD **)(a1 + 8);
  v225 = v224[50];
  if (v225 + 4 > v224[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v224 + 14), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
    v225 = v224[50];
  }
  *(_DWORD *)(*((_QWORD *)v224 + 7) + v225) = 285213729;
  v224[50] += 4;
  v226 = *(_DWORD **)(a1 + 8);
  v227 = v226[50];
  if (v227 + 4 > v226[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v226 + 14), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
    v227 = v226[50];
  }
  *(_DWORD *)(*((_QWORD *)v226 + 7) + v227) = 285213960;
  v226[50] += 4;
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, 7, 0x10000, v43, v44, v45, v46, (uint64_t)&v313);
    v235 = *(_DWORD **)(a1 + 8);
    v236 = v235[50];
    if (v236 + 4 > v235[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v235 + 14), v228, v229, v230, v231, v232, v233, v234);
      v236 = v235[50];
    }
    *(_DWORD *)(*((_QWORD *)v235 + 7) + v236) = 285213729;
    v235[50] += 4;
    v237 = *(_DWORD **)(a1 + 8);
    v238 = v237[50];
    if (v238 + 4 > v237[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v237 + 14), v228, v229, v230, v231, v232, v233, v234);
      v238 = v237[50];
    }
    *(_DWORD *)(*((_QWORD *)v237 + 7) + v238) = 285213960;
    v237[50] += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v313, *(_QWORD *)(a1 + 8), v229, v230, v231, v232, v233, v234);
  }
  if (v110)
  {
    v239 = v291;
    if (v291 == -1)
    {
      v239 = 5;
      JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), ((unint64_t)((4 * v110 + 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) + 4) >> 2) << 34) | 3, 5, v42, v43, v44, v45, v46);
    }
    v240 = *(_DWORD **)(a1 + 8);
    v241 = v240[50];
    if (v241 + 4 > v240[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v240 + 14), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v241 = v240[50];
    }
    *(_DWORD *)(*((_QWORD *)v240 + 7) + v241) = ((v239 & 0x1F) << 16) | 0x8B000C66;
    v240[50] += 4;
    v242 = *(_DWORD **)(a1 + 8);
    v243 = v242[50];
    if (v243 + 4 > v242[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v242 + 14), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v243 = v242[50];
    }
    *(_DWORD *)(*((_QWORD *)v242 + 7) + v243) = -1203748666;
    v242[50] += 4;
    v244 = *(_QWORD *)(a1 + 8);
    v245 = *(_DWORD *)(v244 + 200);
    if (v245 + 4 > *(_DWORD *)(v244 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v244 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v245 = *(_DWORD *)(v244 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v244 + 56) + v245) = 1795555615;
    v246 = *(_DWORD *)(v244 + 200) + 4;
    *(_DWORD *)(v244 + 200) = v246;
    if (*(_BYTE *)(v244 + 328))
    {
      for (; (signed int)v246 < *(_DWORD *)(v244 + 52); *(_DWORD *)(v244 + 200) = v246)
      {
        if (v246 + 4 > *(_DWORD *)(v244 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v244 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
          v246 = *(_DWORD *)(v244 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v244 + 56) + v246) = -721215457;
        v246 = *(_DWORD *)(v244 + 200) + 4;
      }
      *(_DWORD *)(v244 + 208) = 0;
    }
    if (v246 + 4 > *(_DWORD *)(v244 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v244 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v246 = *(_DWORD *)(v244 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v244 + 56) + v246) = 1409286145;
    v247 = *(_DWORD *)(v244 + 200);
    v248 = v247 + 4;
    *(_DWORD *)(v244 + 200) = v247 + 4;
    v249 = v247 + 8;
    v250 = v247 + 4;
    if (v249 > *(_DWORD *)(v244 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v244 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      v250 = *(_DWORD *)(v244 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v244 + 56) + v250) = -721215457;
    *(_DWORD *)(v244 + 200) += 4;
    if (*(_BYTE *)(v244 + 328))
      v251 = -122;
    else
      v251 = -126;
    v313 = (WTF *)v248;
    LOBYTE(v314) = v251;
    *(_WORD *)((char *)&v314 + 1) = 1;
    BYTE3(v314) = -1;
    v294 = v16;
    v252 = *(_QWORD *)(a1 + 8);
    v253 = (unsigned int *)&v294;
    return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v313, v253, v252, v42, v43, v44, v45, v46);
  }
  v254 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v254 + 212))
  {
    __break(0xC471u);
    goto LABEL_281;
  }
  *(_DWORD *)(*(_QWORD *)(v254 + 296) + 208) &= ~*(_DWORD *)(v254 + 320);
  JSC::MacroAssemblerARM64::load32(v254, ((unint64_t)(((8 * (_DWORD)v13) | 4u) >> 2) << 34) | 3, *(char *)(v254 + 304), v42, v43, v44, v45, v46);
  v257 = *(_DWORD *)(v254 + 200);
  if (v257 + 4 > *(_DWORD *)(v254 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v254 + 56), v255, v256, v42, v43, v44, v45, v46);
    v257 = *(_DWORD *)(v254 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v254 + 56) + v257) = 1796276511;
  v258 = *(_DWORD *)(v254 + 200) + 4;
  *(_DWORD *)(v254 + 200) = v258;
  if (*(_BYTE *)(v254 + 328))
  {
    for (; (signed int)v258 < *(_DWORD *)(v254 + 52); *(_DWORD *)(v254 + 200) = v258)
    {
      if (v258 + 4 > *(_DWORD *)(v254 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v254 + 56), v255, v256, v42, v43, v44, v45, v46);
        v258 = *(_DWORD *)(v254 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v254 + 56) + v258) = -721215457;
      v258 = *(_DWORD *)(v254 + 200) + 4;
    }
    *(_DWORD *)(v254 + 208) = 0;
  }
  if (v258 + 4 > *(_DWORD *)(v254 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v254 + 56), v255, v256, v42, v43, v44, v45, v46);
    v258 = *(_DWORD *)(v254 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v254 + 56) + v258) = 1409286145;
  v259 = *(_DWORD *)(v254 + 200);
  v260 = v259 + 4;
  *(_DWORD *)(v254 + 200) = v259 + 4;
  v261 = v259 + 8;
  v262 = v259 + 4;
  if (v261 > *(_DWORD *)(v254 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v254 + 56), v255, v256, v42, v43, v44, v45, v46);
    v262 = *(_DWORD *)(v254 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v254 + 56) + v262) = -721215457;
  *(_DWORD *)(v254 + 200) += 4;
  if (*(_BYTE *)(v254 + 328))
    v263 = -122;
  else
    v263 = -126;
  v313 = (WTF *)v260;
  LOBYTE(v314) = v263;
  *(_WORD *)((char *)&v314 + 1) = 1;
  BYTE3(v314) = -1;
  v293 = v16;
  v252 = *(_QWORD *)(a1 + 8);
  v253 = (unsigned int *)&v293;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v313, v253, v252, v42, v43, v44, v45, v46);
}

void JSC::MacroAssemblerARM64::load16(uint64_t a1, char a2, JSC::ARM64LogicalImmediate *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_8;
  v8 = a4;
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, (uint64_t)this, a1 + 296, a4, a5, a6, a7, a8);
  v18 = v8 & 0x1F | ((a2 & 0x1F) << 16) | 0x78607A20;
  v19 = *(_DWORD *)(a1 + 200);
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = v18;
  *(_DWORD *)(a1 + 200) += 4;
  if (v8 == 17)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      return;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198E8F348);
  }
}

uint64_t WTF::dataLog<char [37],JSC::Yarr::BoyerMooreFastCandidates,char [9],unsigned int,char [3],unsigned int,char [2],char [2]>(int **a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Found characters fastpath lookahead ");
  JSC::Yarr::BoyerMooreFastCandidates::dump(a1, v8);
  WTF::PrintStream::printf(v8, "%s", " range:[");
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", ", ");
  WTF::PrintStream::printf(v8, "%u", *a3);
  WTF::PrintStream::printf(v8, "%s", ")");
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [31],unsigned int,char [10],unsigned int,char [3],unsigned int,char [2],char [2]>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Found bitmap lookahead count:(");
  WTF::PrintStream::printf(v8, "%u", *a1);
  WTF::PrintStream::printf(v8, "%s", "),range:[");
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", ", ");
  WTF::PrintStream::printf(v8, "%u", *a3);
  WTF::PrintStream::printf(v8, "%s", ")");
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::linkTo(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v10 = result;
  v11 = result[15];
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = result + 20;
    LODWORD(v14) = result[23];
    do
    {
      v15 = *(_DWORD *)(*((_QWORD *)v10 + 6) + 4 * v12);
      v16 = *a2;
      v24 = v15;
      v25 = v16;
      if ((_DWORD)v14 == v10[22])
      {
        result = (unsigned int *)WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 20), (void *)(v14 + 1), (unint64_t)&v24, a4, a5, a6, a7, a8);
        v14 = v10[23];
        v18 = (unsigned int *)(*((_QWORD *)v10 + 10) + 8 * v14);
        *v18 = *result;
        v18[1] = result[1];
        v11 = v10[15];
      }
      else
      {
        v17 = (unsigned int *)(*v13 + 8 * v14);
        *v17 = v15;
        v17[1] = v25;
      }
      LODWORD(v14) = v14 + 1;
      v10[23] = v14;
      ++v12;
    }
    while (v12 < v11);
    if (v10[14])
    {
      if (v11)
        v10[15] = 0;
      result = (unsigned int *)*((_QWORD *)v10 + 6);
      if (v10 + 16 != result && result)
      {
        *((_QWORD *)v10 + 6) = 0;
        v10[14] = 0;
        WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
        result = (unsigned int *)*((_QWORD *)v10 + 6);
      }
      if (!result)
      {
        *((_QWORD *)v10 + 6) = v10 + 16;
        v10[14] = 4;
      }
    }
  }
  if (*((_BYTE *)v10 + 40))
  {
    v23 = *a2;
    result = JSC::MacroAssembler::jump(a3, &v23, a3, a4, a5, a6, a7, a8);
  }
  v19 = v10[3];
  if ((_DWORD)v19)
  {
    v20 = *a2;
    v21 = *(unsigned int **)v10;
    v22 = 12 * v19;
    do
    {
      v24 = v20;
      result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v21, &v24, a3, a4, a5, a6, a7, a8);
      v21 += 3;
      v22 -= 12;
    }
    while (v22);
  }
  if (v10[2])
  {
    if (v10[3])
      v10[3] = 0;
    result = *(unsigned int **)v10;
    if (v10 + 4 != *(unsigned int **)v10 && result)
    {
      *(_QWORD *)v10 = 0;
      v10[2] = 0;
      WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
      result = *(unsigned int **)v10;
    }
    if (!result)
    {
      *(_QWORD *)v10 = v10 + 4;
      v10[2] = 2;
    }
  }
  *((_BYTE *)v10 + 40) = 0;
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::takeBacktracksToJumpList(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  int i;
  unsigned int v21;
  char v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;
  int v41;
  int v42;

  v11 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v11)
  {
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_31;
    goto LABEL_20;
  }
  v12 = *(_DWORD *)(a3 + 200);
  if (v12 >= *(_DWORD *)(a3 + 52))
  {
    *(_DWORD *)(a3 + 208) = 0;
    goto LABEL_4;
  }
  do
  {
    if ((v12 + 4) > *(_DWORD *)(a3 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_DWORD *)(a3 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 56) + v12) = -721215457;
    v12 = *(_DWORD *)(a3 + 200) + 4;
    *(_DWORD *)(a3 + 200) = v12;
  }
  while (v12 < *(_DWORD *)(a3 + 52));
  v11 = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(a3 + 208) = 0;
  if ((_DWORD)v11)
  {
LABEL_4:
    v13 = 0;
    LODWORD(v14) = *(_DWORD *)(a1 + 92);
    do
    {
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v13);
      v41 = v15;
      v42 = v12;
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 88))
      {
        v17 = (_DWORD *)WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 80, (void *)(v14 + 1), (unint64_t)&v41, a4, a5, a6, a7, a8);
        v14 = *(unsigned int *)(a1 + 92);
        v18 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
        *v18 = *v17;
        v18[1] = v17[1];
        v11 = *(unsigned int *)(a1 + 60);
      }
      else
      {
        v16 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
        *v16 = v15;
        v16[1] = v42;
      }
      LODWORD(v14) = v14 + 1;
      *(_DWORD *)(a1 + 92) = v14;
      ++v13;
    }
    while (v13 < v11);
    if (*(_DWORD *)(a1 + 56))
    {
      if (v11)
        *(_DWORD *)(a1 + 60) = 0;
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 56))
  {
LABEL_13:
    v19 = *(_QWORD *)(a1 + 48);
    if (a1 + 64 != v19 && v19)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      v19 = *(_QWORD *)(a1 + 48);
    }
    if (!v19)
    {
      *(_QWORD *)(a1 + 48) = a1 + 64;
      *(_DWORD *)(a1 + 56) = 4;
    }
  }
LABEL_18:
  *(_BYTE *)(a1 + 40) = 1;
LABEL_20:
  for (i = *(_DWORD *)(a3 + 200); i < *(_DWORD *)(a3 + 52); *(_DWORD *)(a3 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a3 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a3 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 56) + i) = -721215457;
    i = *(_DWORD *)(a3 + 200) + 4;
  }
  v21 = i;
  if ((i + 4) > *(_DWORD *)(a3 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v21 = *(_DWORD *)(a3 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 56) + v21) = 335544320;
  *(_DWORD *)(a3 + 200) += 4;
  if (*(_BYTE *)(a3 + 328))
    v22 = 69;
  else
    v22 = 65;
  v36 = i;
  v37 = 0;
  v38 = v22;
  v39 = 15;
  v40 = -1;
  if (i != -1)
  {
    v23 = a2[3];
    if ((_DWORD)v23 == a2[2])
    {
      v24 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, (void *)(v23 + 1), (unint64_t)&v36, a4, a5, a6, a7, a8);
      v26 = *v24;
      v25 = v24 + 1;
      v27 = *(_QWORD *)a2 + 12 * a2[3];
      *(_DWORD *)v27 = v26;
    }
    else
    {
      v25 = &v37;
      v27 = *(_QWORD *)a2 + 12 * v23;
      *(_DWORD *)v27 = i;
    }
    *(_QWORD *)(v27 + 4) = *(_QWORD *)v25;
    ++a2[3];
  }
LABEL_31:
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)a2, (unsigned int *)a1, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
      *(_DWORD *)(a1 + 12) = 0;
    v35 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v35)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
      v35 = *(_QWORD *)a1;
    }
    if (!v35)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
  }
  *(_BYTE *)(a1 + 40) = 0;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  int v25;

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
    goto LABEL_2;
  v16 = a2[50];
  if (v16 < a2[13])
  {
    do
    {
      if ((v16 + 4) > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v16 = a2[50];
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v16) = -721215457;
      v16 = a2[50] + 4;
      a2[50] = v16;
    }
    while (v16 < a2[13]);
    v10 = *(unsigned int *)(a1 + 60);
    a2[52] = 0;
    if (!(_DWORD)v10)
    {
      if (!*(_DWORD *)(a1 + 56))
        goto LABEL_2;
      goto LABEL_24;
    }
  }
  else
  {
    a2[52] = 0;
  }
  v17 = 0;
  LODWORD(v18) = *(_DWORD *)(a1 + 92);
  do
  {
    v19 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v17);
    v24 = v19;
    v25 = v16;
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 88))
    {
      v22 = (_DWORD *)WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 80, (void *)(v18 + 1), (unint64_t)&v24, a4, a5, a6, a7, a8);
      v18 = *(unsigned int *)(a1 + 92);
      v23 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      *v23 = *v22;
      v23[1] = v22[1];
      v10 = *(unsigned int *)(a1 + 60);
    }
    else
    {
      v20 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      *v20 = v19;
      v20[1] = v25;
    }
    LODWORD(v18) = v18 + 1;
    *(_DWORD *)(a1 + 92) = v18;
    ++v17;
  }
  while (v17 < v10);
  if (!*(_DWORD *)(a1 + 56))
    goto LABEL_2;
  if (v10)
    *(_DWORD *)(a1 + 60) = 0;
LABEL_24:
  v21 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v21 && v21)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (!v21)
  {
    *(_QWORD *)(a1 + 48) = a1 + 64;
    *(_DWORD *)(a1 + 56) = 4;
  }
LABEL_2:
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    while (v13 < *(unsigned int *)(a1 + 12))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)a1 + v12), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v14 == v12)
        goto LABEL_6;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_6:
    if (*(_DWORD *)(a1 + 8))
    {
      if (*(_DWORD *)(a1 + 12))
        *(_DWORD *)(a1 + 12) = 0;
      v15 = *(_QWORD *)a1;
      if (a1 + 16 != *(_QWORD *)a1 && v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
        v15 = *(_QWORD *)a1;
      }
      if (!v15)
      {
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
      }
    }
    *(_BYTE *)(a1 + 40) = 0;
  }
}

unint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::append(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  if (a2 != -1)
  {
    v8 = result;
    v9 = *(unsigned int *)(result + 12);
    if ((_DWORD)v9 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v9 + 1), (unint64_t)&v13, a4, a5, a6, a7, a8);
      v10 = (_DWORD *)(*(_QWORD *)v8 + 12 * *(unsigned int *)(v8 + 12));
      *v10 = *(_DWORD *)result;
      v11 = v10 + 1;
      a3 = *(_QWORD *)(result + 4);
    }
    else
    {
      v12 = (_DWORD *)(*(_QWORD *)result + 12 * v9);
      *v12 = a2;
      v11 = v12 + 1;
    }
    *v11 = a3;
    ++*(_DWORD *)(v8 + 12);
  }
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::backtrackPatternCharacterNonGreedy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  int *v33;
  int *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int *v42;
  int *v43;
  int v44;
  char *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  uint64_t *v58;
  int v59;
  char *v60;
  _DWORD *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  _DWORD *v71;
  unsigned int v72;
  uint64_t v73;
  int i;
  unsigned int v75;
  char v76;
  int *v77;
  int *v78;
  int v79;
  char *v80;
  _DWORD *v81;
  unsigned int v82;
  _DWORD *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  _DWORD *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  char v98;
  __int16 v99;
  char v100;
  unsigned int v101[2];
  char v102;
  __int16 v103;
  char v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  char v111;
  __int16 v112;
  char v113;
  WTF *v114;
  uint64_t v115;
  _BYTE v116[24];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E90638);
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(unsigned int **)(v10 + 120 * a2 + 24);
  v12 = v11[4];
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link(a1 + 15744, *(_DWORD **)(a1 + 8), a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * v11[11] + 8) >> 3) << 35) | 0x1F, 7, v13, v14, v15, v16, v17);
  if (v12 < 0x100 || *(_BYTE *)(a1 + 80))
  {
    v114 = (WTF *)v116;
    v115 = 2;
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_DWORD *)(v25 + 200);
    if (v26 + 4 > *(_DWORD *)(v25 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 + 56), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
      v26 = *(_DWORD *)(v25 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v25 + 56) + v26) = 1795293247;
    v27 = *(_DWORD *)(v25 + 200) + 4;
    *(_DWORD *)(v25 + 200) = v27;
    if (*(_BYTE *)(v25 + 328))
    {
      while ((signed int)v27 < *(_DWORD *)(v25 + 52))
      {
        if (v27 + 4 > *(_DWORD *)(v25 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 + 56), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
          v27 = *(_DWORD *)(v25 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v25 + 56) + v27) = -721215457;
        v27 = *(_DWORD *)(v25 + 200) + 4;
        *(_DWORD *)(v25 + 200) = v27;
      }
      *(_DWORD *)(v25 + 208) = 0;
    }
    if (v27 + 4 > *(_DWORD *)(v25 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 + 56), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
      v27 = *(_DWORD *)(v25 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v25 + 56) + v27) = 1409286144;
    v28 = *(_DWORD *)(v25 + 200);
    v29 = v28 + 4;
    *(_DWORD *)(v25 + 200) = v28 + 4;
    v30 = v28 + 8;
    v31 = v28 + 4;
    if (v30 > *(_DWORD *)(v25 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 + 56), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
      v31 = *(_DWORD *)(v25 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v25 + 56) + v31) = -721215457;
    *(_DWORD *)(v25 + 200) += 4;
    if (*(_BYTE *)(v25 + 328))
      v32 = -122;
    else
      v32 = -126;
    v109 = v29;
    v110 = 0;
    v111 = v32;
    v112 = 0;
    v113 = -1;
    if (v29 != -1)
    {
      if (HIDWORD(v115) == (_DWORD)v115)
      {
        v33 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v109, v20, v21, v22, v23, v24);
        v35 = *v33;
        v34 = v33 + 1;
        v36 = (char *)v114 + 12 * HIDWORD(v115);
        *(_DWORD *)v36 = v35;
      }
      else
      {
        v34 = &v110;
        v36 = (char *)v114 + 12 * HIDWORD(v115);
        *(_DWORD *)v36 = v29;
      }
      *(_QWORD *)(v36 + 4) = *(_QWORD *)v34;
      ++HIDWORD(v115);
    }
    v37 = v11[2];
    if ((_DWORD)v37 != -1)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 7, v37, v21, v22, v23, v24, (uint64_t)&v107);
      v40 = v107;
      if (v107 != -1)
      {
        v41 = HIDWORD(v115);
        if (HIDWORD(v115) == (_DWORD)v115)
        {
          v42 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v107, v38, v39, v22, v23, v24);
          v44 = *v42;
          v43 = v42 + 1;
          v40 = v44;
          v41 = HIDWORD(v115);
        }
        else
        {
          v43 = &v108;
        }
        v45 = (char *)v114 + 12 * v41;
        *(_DWORD *)v45 = v40;
        *(_QWORD *)(v45 + 4) = *(_QWORD *)v43;
        ++HIDWORD(v115);
      }
    }
    v46 = *(_DWORD *)(v10 + 120 * a2 + 100);
    v47 = v11[10];
    if (v46 < v47)
    {
      __break(0xC471u);
      goto LABEL_97;
    }
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::jumpIfCharNotEquals((uint64_t)&v105, a1, v12, v46 - v47, 6, v22, v23, v24);
    v55 = v105;
    if (v105 != -1)
    {
      v56 = HIDWORD(v115);
      if (HIDWORD(v115) == (_DWORD)v115)
      {
        v57 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v105, v50, v51, v52, v53, v54);
        v59 = *v57;
        v58 = (uint64_t *)(v57 + 1);
        v55 = v59;
        v56 = HIDWORD(v115);
      }
      else
      {
        v58 = &v106;
      }
      v60 = (char *)v114 + 12 * v56;
      *(_DWORD *)v60 = v55;
      *(_QWORD *)(v60 + 4) = *v58;
      ++HIDWORD(v115);
    }
    v61 = *(_DWORD **)(a1 + 8);
    v62 = v61[50];
    if (v62 + 4 > v61[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v61 + 14), v48, v49, v50, v51, v52, v53, v54);
      v62 = v61[50];
    }
    *(_DWORD *)(*((_QWORD *)v61 + 7) + v62) = 285213729;
    v61[50] += 4;
    if ((*(_BYTE *)(a1 + 84) & 1) != 0 && v12 >= 0x10000)
    {
      v63 = *(_QWORD *)(a1 + 8);
      v64 = *(_DWORD *)(v63 + 200);
      if (v64 + 4 > *(_DWORD *)(v63 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 56), v48, v49, v50, v51, v52, v53, v54);
        v64 = *(_DWORD *)(v63 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v63 + 56) + v64) = 1795293247;
      v65 = *(_DWORD *)(v63 + 200) + 4;
      *(_DWORD *)(v63 + 200) = v65;
      if (*(_BYTE *)(v63 + 328))
      {
        while ((signed int)v65 < *(_DWORD *)(v63 + 52))
        {
          if (v65 + 4 > *(_DWORD *)(v63 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 56), v48, v49, v50, v51, v52, v53, v54);
            v65 = *(_DWORD *)(v63 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v63 + 56) + v65) = -721215457;
          v65 = *(_DWORD *)(v63 + 200) + 4;
          *(_DWORD *)(v63 + 200) = v65;
        }
        *(_DWORD *)(v63 + 208) = 0;
      }
      if (v65 + 4 > *(_DWORD *)(v63 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 56), v48, v49, v50, v51, v52, v53, v54);
        v65 = *(_DWORD *)(v63 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v63 + 56) + v65) = 1409286145;
      v66 = *(_DWORD *)(v63 + 200);
      v67 = v66 + 4;
      *(_DWORD *)(v63 + 200) = v66 + 4;
      v68 = v66 + 8;
      v69 = v66 + 4;
      if (v68 > *(_DWORD *)(v63 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 56), v48, v49, v50, v51, v52, v53, v54);
        v69 = *(_DWORD *)(v63 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v63 + 56) + v69) = -721215457;
      *(_DWORD *)(v63 + 200) += 4;
      if (*(_BYTE *)(v63 + 328))
        v70 = -122;
      else
        v70 = -126;
      v101[0] = v67;
      v101[1] = 0;
      v102 = v70;
      v103 = 1;
      v104 = -1;
      v71 = *(_DWORD **)(a1 + 8);
      v72 = v71[50];
      if (v72 + 4 > v71[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v71 + 14), v48, v49, v50, v51, v52, v53, v54);
        v72 = v71[50];
      }
      *(_DWORD *)(*((_QWORD *)v71 + 7) + v72) = 1358955553;
      v71[50] += 4;
      v73 = *(_QWORD *)(a1 + 8);
      for (i = *(_DWORD *)(v73 + 200); i < *(_DWORD *)(v73 + 52); *(_DWORD *)(v73 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v73 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), v48, v49, v50, v51, v52, v53, v54);
          i = *(_DWORD *)(v73 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v73 + 56) + i) = -721215457;
        i = *(_DWORD *)(v73 + 200) + 4;
      }
      v75 = i;
      if ((i + 4) > *(_DWORD *)(v73 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), v48, v49, v50, v51, v52, v53, v54);
        v75 = *(_DWORD *)(v73 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v73 + 56) + v75) = 335544320;
      *(_DWORD *)(v73 + 200) += 4;
      if (*(_BYTE *)(v73 + 328))
        v76 = 69;
      else
        v76 = 65;
      v96 = i;
      v97 = 0;
      v98 = v76;
      v99 = 15;
      v100 = -1;
      if (i != -1)
      {
        if (HIDWORD(v115) == (_DWORD)v115)
        {
          v77 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v96, v50, v51, v52, v53, v54);
          v79 = *v77;
          v78 = v77 + 1;
          v80 = (char *)v114 + 12 * HIDWORD(v115);
          *(_DWORD *)v80 = v79;
        }
        else
        {
          v78 = &v97;
          v80 = (char *)v114 + 12 * HIDWORD(v115);
          *(_DWORD *)v80 = i;
        }
        *(_QWORD *)(v80 + 4) = *(_QWORD *)v78;
        ++HIDWORD(v115);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v101, *(_QWORD *)(a1 + 8), v49, v50, v51, v52, v53, v54);
      v81 = *(_DWORD **)(a1 + 8);
      v82 = v81[50];
      if (v82 + 4 > v81[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v81 + 14), v48, v49, v50, v51, v52, v53, v54);
        v82 = v81[50];
      }
      *(_DWORD *)(*((_QWORD *)v81 + 7) + v82) = 285213729;
      v81[50] += 4;
    }
    v83 = *(_DWORD **)(a1 + 8);
    v84 = v83[50];
    if (v84 + 4 > v83[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 14), v48, v49, v50, v51, v52, v53, v54);
      v84 = v83[50];
    }
    *(_DWORD *)(*((_QWORD *)v83 + 7) + v84) = 285213927;
    v83[50] += 4;
    v85 = *(_QWORD *)(a1 + 8);
    v95 = *(_DWORD *)(v10 + 120 * a2 + 36);
    JSC::MacroAssembler::jump(v85, &v95, v49, v50, v51, v52, v53, v54);
    if (HIDWORD(v115))
    {
      v86 = 0;
      v87 = 0;
      v88 = *(_QWORD *)(a1 + 8);
      v89 = 12 * HIDWORD(v115);
      while (v87 < HIDWORD(v115))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v114 + v86), v88, v19, v20, v21, v22, v23, v24);
        ++v87;
        v86 += 12;
        if (v89 == v86)
          goto LABEL_71;
      }
      __break(0xC471u);
LABEL_97:
      JUMPOUT(0x198E90630);
    }
LABEL_71:
    v90 = v114;
    if (v116 != (_BYTE *)v114 && v114 != 0)
    {
      v114 = 0;
      LODWORD(v115) = 0;
      WTF::fastFree((unint64_t)v90, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  v92 = *(_DWORD **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 84) & 1) != 0 && v12 >= 0x10000)
  {
    v93 = v92[50];
    if (v93 + 4 > v92[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 14), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
      v93 = v92[50];
    }
    *(_DWORD *)(*((_QWORD *)v92 + 7) + v93) = 1394571495;
    v92[50] += 4;
    v92 = *(_DWORD **)(a1 + 8);
  }
  v94 = v92[50];
  if (v94 + 4 > v92[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 14), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
    v94 = v92[50];
  }
  *(_DWORD *)(*((_QWORD *)v92 + 7) + v94) = 1258749985;
  v92[50] += 4;
  *(_BYTE *)(a1 + 15784) = 1;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::backtrackBackReference(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  unsigned int v100;
  int v101;
  _DWORD v102[3];
  _DWORD v103[3];
  int v104;
  _DWORD v105[3];
  WTF *v106;
  uint64_t v107;
  _BYTE v108[24];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    return;
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = v10 + 120 * a2;
  v12 = *(_QWORD *)(v11 + 24);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::link(a1 + 15744, *(_DWORD **)(a1 + 8), a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v11 + 40), *(_QWORD *)(a1 + 8), v13, v14, v15, v16, v17, v18);
  v106 = (WTF *)v108;
  v107 = 2;
  v25 = *(unsigned int *)(v12 + 44);
  v26 = *(unsigned __int8 *)(v12 + 2);
  if (!*(_BYTE *)(v12 + 2))
  {
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v25 << 35) | 0x1F, 1, v20, v21, v22, v23, v24);
    goto LABEL_4;
  }
  if (v26 == 1)
  {
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * v25 + 8) >> 3) << 35) | 0x1F, 6, v20, v21, v22, v23, v24);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, 6, v35, v36, v37, v38, (uint64_t)v105, v39);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v106, v105, v40, v41, v42, v43, v44, v45);
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * v25 + 16) >> 3) << 35) | 0x1F, 7, v46, v47, v48, v49, v50);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), 1258749985, v51, v52, v53, v54, v55, v56);
    v64 = *(_DWORD **)(a1 + 8);
    v65 = v64[50];
    if (v65 + 4 > v64[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v64 + 14), v57, v58, v59, v60, v61, v62, v63);
      v65 = v64[50];
    }
    *(_DWORD *)(*((_QWORD *)v64 + 7) + v65) = 1358955718;
    v64[50] += 4;
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 6, ((unint64_t)((8 * v25 + 8) >> 3) << 35) | 0x1F, v59, v60, v61, v62, v63);
    v72 = *(_QWORD *)(a1 + 8);
    v104 = *(_DWORD *)(v10 + 120 * a2 + 36);
    v73 = (unsigned int *)&v104;
LABEL_12:
    JSC::MacroAssembler::jump(v72, v73, v66, v67, v68, v69, v70, v71);
    goto LABEL_4;
  }
  if (v26 == 2)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 1, 2, v21, v22, v23, v24, (uint64_t)v103);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v106, v103, v74, v75, v76, v77, v78, v79);
    v80 = ((unint64_t)((8 * v25 + 8) >> 3) << 35) | 0x1F;
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v80, 6, v81, v82, v83, v84, v85);
    v92 = *(unsigned int *)(v12 + 8);
    if ((_DWORD)v92 != -1)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, 6, v92, v88, v89, v90, v91, (uint64_t)v102);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v106, v102, v93, v94, v95, v96, v97, v98);
    }
    v99 = *(_DWORD **)(a1 + 8);
    v100 = v99[50];
    if (v100 + 4 > v99[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v99 + 14), v86, v87, v92, v88, v89, v90, v91);
      v100 = v99[50];
    }
    *(_DWORD *)(*((_QWORD *)v99 + 7) + v100) = 285213894;
    v99[50] += 4;
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 6, v80, v92, v88, v89, v90, v91);
    v72 = *(_QWORD *)(a1 + 8);
    v101 = *(_DWORD *)(v10 + 120 * a2 + 36);
    v73 = (unsigned int *)&v101;
    goto LABEL_12;
  }
LABEL_4:
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v106, *(_QWORD *)(a1 + 8), v19, v20, v21, v22, v23, v24);
  *(_BYTE *)(a1 + 15784) = 1;
  v34 = v106;
  if (v108 != (_BYTE *)v106)
  {
    if (v106)
    {
      v106 = 0;
      LODWORD(v107) = 0;
      WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
    }
  }
}

unint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(result + 8))
  {
    v8 = result;
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result != 0)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (!result)
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_DWORD *)(v8 + 8) = 4;
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 5)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v14 >> 29))
  {
    v16 = WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = (_DWORD *)v16;
      v18 = (_DWORD *)v10;
      do
      {
        *v17 = *v18;
        v17[1] = v18[1];
        v18 += 2;
        v17 += 2;
      }
      while (v18 != (_DWORD *)(v10 + 8 * v15));
    }
    if (v9 + 16 != v10 && v10)
    {
      if (v16 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 5)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v11 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v15 = WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = (_DWORD *)v15;
      v17 = (_DWORD *)v13;
      do
      {
        *v16 = *v17;
        v16[1] = v17[1];
        v17 += 2;
        v16 += 2;
      }
      while (v17 != (_DWORD *)(v13 + 8 * v14));
    }
    if (a1 + 16 != v13 && v13)
    {
      if (v15 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 4 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v16 = *(_QWORD *)a1;
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
      if (v15 < 5)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_34;
      }
      if (!(v15 >> 30))
      {
        v16 = WTF::fastMalloc((WTF *)(4 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_DWORD *)(v16 + v27) = *(_DWORD *)(v10 + v27);
          v27 += 4;
        }
        while (4 * v11 != v27);
        if (a1 + 16 != v10 && v10)
        {
          if (v16 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198E90D44);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 5)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 30)
        goto LABEL_43;
      v22 = WTF::fastMalloc((WTF *)(4 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 4 * v21;
    v24 = (_DWORD *)v22;
    v25 = (int *)v10;
    do
    {
      v26 = *v25++;
      *v24++ = v26;
      v23 -= 4;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (v22 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::tryReadUnicodeCharImpl<(JSC::Yarr::TryReadUnicodeCharCodeLocation)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  WTF *v141;
  unint64_t v142;
  unint64_t v143;
  _DWORD v144[3];
  _DWORD v145[3];
  _DWORD v146[3];
  _DWORD v147[3];
  _DWORD v148[3];
  _DWORD v149[3];
  WTF *v150;
  uint64_t v151;
  _BYTE v152[24];
  WTF *v153;
  uint64_t v154;
  _BYTE v155[24];
  _BYTE *v156;
  uint64_t v157;
  _BYTE v158[24];
  _BYTE *v159;
  uint64_t v160;
  _BYTE v161[24];

  v159 = v161;
  v160 = 2;
  v156 = v158;
  v157 = 2;
  v153 = (WTF *)v155;
  v154 = 2;
  v150 = (WTF *)v152;
  v151 = 2;
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 10, 6, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFC00, 6, 5);
  JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, 5, 5, v9, v10, v11, v12, (uint64_t)v149);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v159, v149, v13, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 5, 14, v19, v20, v21, v22, (uint64_t)v148);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v156, v148, v23, v24, v25, v26, v27, v28);
  v36 = *(_DWORD **)(a1 + 8);
  v37 = v36[50];
  if (v37 + 4 > v36[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v36 + 14), v29, v30, v31, v32, v33, v34, v35);
    v37 = v36[50];
  }
  *(_DWORD *)(*((_QWORD *)v36 + 7) + v37) = -1862268598;
  v36[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 10, 15, v32, v33, v34, v35, (uint64_t)v147);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v159, v147, v38, v39, v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 10, 10, v44, v45, v46, v47, v48);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFC00, 10, 5);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 5, 14, v49, v50, v51, v52, (uint64_t)v146);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v159, v146, v53, v54, v55, v56, v57, v58);
  JSC::MacroAssemblerARM64::lshift32(*(_DWORD **)(a1 + 8), 10, 6, v59, v60, v61, v62, v63);
  JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), 0xA06uLL, 0x2FCA02400, 6, v64, v65, v66, v67);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), 3596551104, v68, v69, v70, v71, v72, v73);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v156, *(_QWORD *)(a1 + 8), v74, v75, v76, v77, v78, v79);
  v87 = *(_DWORD **)(a1 + 8);
  v88 = v87[50];
  if (v88 + 4 > v87[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 14), v80, v81, v82, v83, v84, v85, v86);
    v88 = v87[50];
  }
  *(_DWORD *)(*((_QWORD *)v87 + 7) + v88) = -788526774;
  v87[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 3, 10, 0, v83, v84, v85, v86, (uint64_t)v145);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v150, v145, v89, v90, v91, v92, v93, v94);
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), 10, 10, v95, v96, v97, v98, v99);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFC00, 10, 5);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, 5, 13, v100, v101, v102, v103, (uint64_t)v144);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v150, v144, v104, v105, v106, v107, v108, v109);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 6, v110, v111, v112, v113, v114);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v159, *(_QWORD *)(a1 + 8), v115, v116, v117, v118, v119, v120);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v150, *(_QWORD *)(a1 + 8), v121, v122, v123, v124, v125, v126);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v153, *(_QWORD *)(a1 + 8), v127, v128, v129, v130, v131, v132);
  v140 = v150;
  if (v152 != (_BYTE *)v150 && v150)
  {
    v150 = 0;
    LODWORD(v151) = 0;
    WTF::fastFree((unint64_t)v140, v133, v134, v135, v136, v137, v138, v139);
  }
  v141 = v153;
  if (v155 != (_BYTE *)v153 && v153)
  {
    v153 = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v141, v133, v134, v135, v136, v137, v138, v139);
  }
  v142 = (unint64_t)v156;
  if (v158 != v156 && v156)
  {
    v156 = 0;
    LODWORD(v157) = 0;
    WTF::fastFree(v142, v133, v134, v135, v136, v137, v138, v139);
  }
  v143 = (unint64_t)v159;
  if (v161 != v159)
  {
    if (v159)
    {
      v159 = 0;
      LODWORD(v160) = 0;
      WTF::fastFree(v143, v133, v134, v135, v136, v137, v138, v139);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)(a1 + 16);
  if (a1 + 32 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;

  v9 = (WTF *)*((_QWORD *)this + 2);
  if ((WTF *)((char *)this + 32) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unsigned int v14;

  if (*(_DWORD *)(a1 + 28))
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = (int *)(*(_QWORD *)(a1 + 16) + v4);
      v7 = v6[1];
      v8 = v7 < 4 ? 0 : *(_DWORD *)((v7 & 0xFFFFFFFC) + a2[3] - 4);
      v9 = a2[23];
      v10 = (v7 - v8) + v9;
      if (v9 > v10 || v9 + a2[1] < v10)
        break;
      v12 = *v6;
      if (v12 < 4)
        v13 = 0;
      else
        v13 = *(_DWORD *)((v12 & 0xFFFFFFFC) + a2[3] - 4);
      v14 = v12 - v13;
      JSC::ARM64Assembler::linkPointer(v9, &v14, v10);
      ++v5;
      v4 += 8;
      if (v5 >= *(unsigned int *)(a1 + 28))
        return;
    }
    __break(0xC471u);
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#2}>::run(uint64_t a1, uint64_t a2)
{
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#2}::operator()(*(_QWORD *)(a1 + 16), a2);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::compile(JSC::Yarr::YarrCodeBlock &)::{lambda(JSC::LinkBuffer &)#2}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int *v8;
  int v9;
  int v10;

  v4 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)0>((_QWORD *)a2, *(_DWORD *)(a1 + 216));
  v5 = *(unsigned int *)(a1 + 212);
  if ((_DWORD)v5)
  {
    v6 = v4;
    v7 = *(int **)(a1 + 200);
    v8 = &v7[2 * v5];
    do
    {
      v9 = *v7;
      v10 = v7[1];
      v7 += 2;
      JSC::LinkBuffer::link<(WTF::PtrTag)64323,void (*)(void),void>(*(_QWORD *)(a2 + 24), *(JSC::ExecutableAllocator **)(a2 + 184), v9, v10, v6);
    }
    while (v7 != v8);
  }
}

uint64_t JSC::LinkBuffer::locationOf<(WTF::PtrTag)0>(_QWORD *a1, int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 4)
    v2 = 0;
  else
    v2 = *(_DWORD *)((a2 & 0xFFFFFFFC) + a1[3] - 4);
  v3 = a1[23];
  v4 = (a2 - v2) + v3;
  if (v3 <= v4 && v3 + a1[1] >= v4)
    return v4;
  result = 366;
  __break(0xC471u);
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::~YarrGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::~YarrGenerator(a1, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

const char *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::variant(uint64_t a1)
{
  const char *v1;
  const char *v2;

  if (*(_BYTE *)(a1 + 80))
    v1 = "Match-only 16-bit regular expression";
  else
    v1 = "Match-only 8-bit regular expression";
  v2 = "16-bit regular expression";
  if (!*(_BYTE *)(a1 + 80))
    v2 = "8-bit regular expression";
  if (*(_BYTE *)(a1 + 81))
    return v2;
  else
    return v1;
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::dumpPatternString(uint64_t a1, uint64_t a2)
{
  return JSC::Yarr::YarrPattern::dumpPatternString(*(_QWORD *)(a1 + 56), a2, *(char **)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::dumpFor(uint64_t a1, WTF::PrintStream *this, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  const char *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  const char *v16;
  JSC::Yarr::CharacterClass *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;

  if (*(_DWORD *)(a1 + 316) > a3)
  {
    WTF::PrintStream::printf(this, "%4d:", a3);
    if (*(_DWORD *)(a1 + 316) <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198E91AACLL);
    }
    v6 = *(_QWORD *)(a1 + 304);
    v7 = v6 + 120 * a3;
    v8 = a3;
    v9 = *(_QWORD *)(v7 + 24);
    switch(*(_BYTE *)(v7 + 32))
    {
      case 0:
        WTF::PrintStream::printf(this, "BodyAlternativeBegin minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 1:
        WTF::PrintStream::printf(this, "BodyAlternativeNext minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 2:
        WTF::PrintStream::printf(this, "BodyAlternativeEnd checked-offset:(%u)\n");
        return 0;
      case 3:
        WTF::PrintStream::printf(this, "NestedAlternativeBegin minimum-size:(%u),checked-offset:(%u)\n");
        return 1;
      case 4:
        WTF::PrintStream::printf(this, "NestedAlternativeNext minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 5:
        WTF::PrintStream::printf(this, "NestedAlternativeEnd checked-offset:(%u) ");
        goto LABEL_25;
      case 6:
        WTF::PrintStream::printf(this, "SimpleNestedAlternativeBegin minimum-size:(%u),checked-offset:(%u)\n");
        return 1;
      case 7:
        WTF::PrintStream::printf(this, "SimpleNestedAlternativeNext minimum-size:(%u),checked-offset:(%u)\n");
        return 0;
      case 8:
        WTF::PrintStream::printf(this, "SimpleNestedAlternativeEnd checked-offset:(%u) ");
LABEL_25:
        JSC::Yarr::PatternTerm::dumpQuantifier(v9, this);
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        WTF::PrintStream::printf(v14, "%s", "\n");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        return 0xFFFFFFFFLL;
      case 9:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternOnceBegin checked-offset:(%u) ");
        goto LABEL_27;
      case 0xA:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternOnceEnd checked-offset:(%u) ");
LABEL_27:
        if ((*(_BYTE *)(v9 + 1) & 1) == 0)
        {
          v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          v16 = "non-capturing ";
          goto LABEL_33;
        }
        WTF::PrintStream::printf(this, "capturing pattern #%u ");
        goto LABEL_35;
      case 0xB:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternTerminalBegin checked-offset:(%u) ");
        goto LABEL_12;
      case 0xC:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternTerminalEnd checked-offset:(%u) ");
LABEL_12:
        if ((*(_BYTE *)(v9 + 1) & 1) != 0)
        {
          WTF::PrintStream::printf(this, "capturing pattern #%u\n");
        }
        else
        {
          v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          v11 = "non-capturing\n";
LABEL_37:
          WTF::PrintStream::printf(v10, "%s", v11);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        }
        break;
      case 0xD:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternBegin checked-offset:(%u) ");
        goto LABEL_31;
      case 0xE:
        WTF::PrintStream::printf(this, "ParenthesesSubpatternEnd checked-offset:(%u) ");
LABEL_31:
        if ((*(_BYTE *)(v9 + 1) & 1) != 0)
        {
          WTF::PrintStream::printf(this, "capturing pattern #%u");
        }
        else
        {
          v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          v16 = "non-capturing";
LABEL_33:
          WTF::PrintStream::printf(v15, "%s", v16);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        }
LABEL_35:
        JSC::Yarr::PatternTerm::dumpQuantifier(v9, this);
LABEL_36:
        v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        v11 = "\n";
        goto LABEL_37;
      case 0xF:
        WTF::PrintStream::printf(this, "ParentheticalAssertionBegin%s checked-offset:(%u)\n");
        return 0;
      case 0x10:
        WTF::PrintStream::printf(this, "ParentheticalAssertionEnd%s checked-offset:(%u)\n");
        return 0;
      case 0x11:
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        WTF::PrintStream::printf(v12, "%s", "Term ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        switch(*(_BYTE *)v9)
        {
          case 0:
            WTF::PrintStream::printf(this, "Assert BOL checked-offset:(%u)");
            break;
          case 1:
            WTF::PrintStream::printf(this, "Assert EOL checked-offset:(%u)");
            break;
          case 2:
            WTF::PrintStream::printf(this, "%sword boundary checked-offset:(%u)");
            break;
          case 3:
            WTF::PrintStream::printf(this, "PatternCharacter checked-offset:(%u) ", *(_DWORD *)(v6 + 120 * v8 + 100));
            if ((*(_DWORD *)(v9 + 16) - 32) > 0xDF)
              WTF::PrintStream::printf(this, "0x%04x");
            else
              WTF::PrintStream::printf(this, "'%c'");
            if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) != 0)
            {
              v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
              WTF::PrintStream::printf(v19, "%s", "ignore case ");
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
            }
            goto LABEL_54;
          case 4:
            WTF::PrintStream::printf(this, "PatternCharacterClass checked-offset:(%u) ", *(_DWORD *)(v6 + 120 * v8 + 100));
            if ((*(_BYTE *)(v9 + 1) & 2) != 0)
            {
              v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
              WTF::PrintStream::printf(v18, "%s", "not ");
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
            }
            JSC::Yarr::dumpCharacterClass(this, *(WTF::PrintStream **)(a1 + 56), *(const void ***)(v9 + 16), v17);
            goto LABEL_54;
          case 5:
            WTF::PrintStream::printf(this, "BackReference pattern #%u checked-offset:(%u)", *(_DWORD *)(v9 + 16), *(_DWORD *)(v6 + 120 * v8 + 100));
LABEL_54:
            JSC::Yarr::PatternTerm::dumpQuantifier(v9, this);
            break;
          case 6:
            WTF::PrintStream::printf(this, "ForwardReference <not handled> checked-offset:(%u)");
            break;
          case 7:
          case 8:
            __break(0xC471u);
            JUMPOUT(0x198E91AA4);
          case 9:
            WTF::PrintStream::printf(this, ".* enclosure checked-offset:(%u)");
            break;
          default:
            break;
        }
        if (*(_BYTE *)(v6 + 120 * v8 + 92))
        {
          v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
          WTF::PrintStream::printf(v20, "%s", " already handled");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        }
        goto LABEL_36;
      case 0x12:
        WTF::PrintStream::printf(this, "MatchFailed checked-offset:(%u)\n");
        return 0;
      default:
        return 0;
    }
  }
  return 0;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateFailReturn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  JSC::AssemblerBuffer *v16;
  int i;
  unsigned int v18;
  char v19;
  uint64_t v20;
  int *v21;
  int *v22;
  int v23;
  uint64_t v24;
  JSC::AssemblerBuffer *v25;
  int v26;
  int v27;
  char v28;
  __int16 v29;
  char v30;

  v9 = *(_DWORD **)(a1 + 8);
  v10 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 7) & 0x1F | 0x92800000;
  v11 = v9[50];
  if (v11 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v11) = v10;
  v9[50] += 4;
  v12 = *(_DWORD **)(a1 + 8);
  v13 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 8) & 0x1F | 0x52800000;
  v14 = v12[50];
  if (v14 + 4 > v12[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = v12[50];
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v14) = v13;
  v12[50] += 4;
  if (*(_BYTE *)(a1 + 81) == 2)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = (JSC::AssemblerBuffer *)(v15 + 56);
    for (i = *(_DWORD *)(v15 + 200); i < *(_DWORD *)(v15 + 52); *(_DWORD *)(v15 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v15 + 192))
      {
        v25 = v16;
        JSC::AssemblerBuffer::outOfLineGrow(v16, a2, a3, a4, a5, a6, a7, a8);
        v16 = v25;
        i = *(_DWORD *)(v15 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v15 + 56) + i) = -721215457;
      i = *(_DWORD *)(v15 + 200) + 4;
    }
    v18 = i;
    if ((i + 4) > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v16, a2, a3, a4, a5, a6, a7, a8);
      v18 = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + v18) = 335544320;
    *(_DWORD *)(v15 + 200) += 4;
    if (*(_BYTE *)(v15 + 328))
      v19 = 69;
    else
      v19 = 65;
    v26 = i;
    v27 = 0;
    v28 = v19;
    v29 = 15;
    v30 = -1;
    if (i != -1)
    {
      v20 = *(unsigned int *)(a1 + 276);
      if ((_DWORD)v20 == *(_DWORD *)(a1 + 272))
      {
        v21 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 264, (void *)(v20 + 1), (unint64_t)&v26, a4, a5, a6, a7, a8);
        v23 = *v21;
        v22 = v21 + 1;
        v24 = *(_QWORD *)(a1 + 264) + 12 * *(unsigned int *)(a1 + 276);
        *(_DWORD *)v24 = v23;
      }
      else
      {
        v22 = &v27;
        v24 = *(_QWORD *)(a1 + 264) + 12 * v20;
        *(_DWORD *)v24 = i;
      }
      *(_QWORD *)(v24 + 4) = *(_QWORD *)v22;
      ++*(_DWORD *)(a1 + 276);
    }
  }
  else
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3);
  if (*(_BYTE *)(a1 + 81) == 1)
  {
    JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), a2, v9, a4, a5, a6, a7, a8);
    return;
  }
  if ((char)v9 != (_DWORD)a2)
  {
    if ((_DWORD)a2 == 63)
    {
      if ((_DWORD)v9 != 31)
      {
        v10 = v9 & 0x1F | 0xD2800000;
        goto LABEL_7;
      }
    }
    else if ((_DWORD)a2 != 31 && (char)v9 != 31)
    {
      v9 = v9 & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
      v10 = v9 | 0xAA0003E0;
LABEL_7:
      v13 = *(_DWORD *)(v8 + 200);
      v12 = (unsigned int *)(v8 + 200);
      v11 = v13;
      if (v13 + 4 > *(v12 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 - 36), a2, v9, a4, a5, a6, a7, a8);
        v11 = *v12;
      }
      *(_DWORD *)(*((_QWORD *)v12 - 18) + v11) = v10;
      *v12 += 4;
      return;
    }
    v10 = (char)v9 | (32 * a2) | 0x91000000;
    goto LABEL_7;
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t k;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v64;
  __int16 v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int *v83;
  int *v84;
  int v85;
  _BYTE *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  _DWORD *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _DWORD *v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  _BYTE *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  _DWORD *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t BestCharacterSequence;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  unint64_t v158;
  unint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _QWORD *v164;
  int *v165;
  uint64_t *v166;
  int8x16_t v167;
  _DWORD *v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  char *v204;
  char v205;
  char v206;
  _DWORD *v207;
  unsigned int v208;
  _DWORD *v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  unsigned int v219;
  _DWORD *v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _OWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t *v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _DWORD *v254;
  int i;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  uint64_t v275;
  char v276;
  char v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int8x8_t v286;
  _DWORD *v287;
  uint64_t v288;
  char v289;
  char v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int j;
  unsigned int v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  _DWORD *v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _DWORD *v334;
  int v335;
  unsigned int v336;
  _DWORD *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _DWORD *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  int v359;
  int v360;
  int *v361;
  int *v362;
  int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _DWORD *v386;
  unsigned int v387;
  _DWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _BYTE *v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  char v401;
  int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  int v416;
  unint64_t v417;
  int v418;
  _DWORD *v419;
  uint64_t *v420;
  int v421;
  void *v422;
  _DWORD *v423;
  _DWORD *v424;
  _QWORD *v425;
  int v426;
  _DWORD *v427;
  _QWORD *v428;
  _DWORD *v429;
  int *v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  int v445;
  int *v446;
  int *v447;
  int v448;
  _DWORD *v449;
  _QWORD *v450;
  int v451;
  uint64_t v452;
  unsigned int n;
  unsigned int v454;
  char v455;
  uint64_t v456;
  uint64_t v457;
  _DWORD *v458;
  _QWORD *v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  _DWORD *v463;
  unsigned int v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  int *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  JSC::AssemblerBuffer *v479;
  int v480;
  unsigned int v481;
  char v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  _DWORD *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  uint64_t v494;
  unsigned int v495;
  char v496;
  uint64_t v497;
  char *v498;
  int *v499;
  uint64_t v500;
  _DWORD *v501;
  unsigned int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _DWORD *v511;
  unsigned int v512;
  int v513;
  uint64_t v514;
  int *v515;
  int *v516;
  _DWORD *v517;
  int m;
  uint64_t v519;
  _DWORD *v520;
  unsigned int v521;
  _QWORD **v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  char v549;
  uint64_t v550;
  _DWORD *v551;
  unsigned int v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  char v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  _QWORD *v618;
  unint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  char v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  int8x8_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unsigned int v726;
  unsigned int v727;
  unsigned int v728;
  uint64_t v729;
  unint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unsigned int v746;
  unsigned int v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  __int128 *v762;
  _DWORD *v763;
  uint64_t v764;
  char v765;
  unsigned int v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unsigned int v774;
  unsigned int v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  _DWORD *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  char v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unsigned int v820;
  int v821;
  unsigned int v822;
  char *v823;
  char v824;
  uint64_t v825;
  unsigned int v826;
  unsigned int *v827;
  unsigned int v828;
  unsigned int v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  _DWORD *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  char v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  char v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  char v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  char v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  unsigned int v962;
  unsigned int v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  unint64_t v968;
  uint64_t v969;
  uint64_t v970;
  int v971;
  unsigned int v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  unsigned int v985;
  uint64_t v986;
  _DWORD *v987;
  unsigned int v988;
  int v989;
  uint64_t v990;
  unsigned int v991;
  uint64_t v992;
  JSC::AssemblerBuffer *v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  char v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  JSC::AssemblerBuffer *v1007;
  uint64_t v1008;
  uint64_t *v1009;
  uint64_t v1010;
  uint64_t v1011;
  unsigned int v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  _DWORD v1027[2];
  char v1028;
  __int16 v1029;
  char v1030;
  unsigned int v1031;
  unsigned int v1032;
  _DWORD v1033[3];
  _DWORD v1034[2];
  char v1035;
  __int16 v1036;
  char v1037;
  unsigned int v1038;
  _DWORD v1039[3];
  _DWORD v1040[3];
  _DWORD v1041[2];
  char v1042;
  __int16 v1043;
  char v1044;
  _BYTE v1045[12];
  int v1046;
  int v1047;
  char v1048;
  __int16 v1049;
  char v1050;
  _BYTE v1051[12];
  _BYTE v1052[12];
  _DWORD v1053[2];
  char v1054;
  __int16 v1055;
  char v1056;
  _DWORD v1057[2];
  char v1058;
  __int16 v1059;
  char v1060;
  int v1061;
  int v1062;
  int v1063;
  int v1064;
  int v1065;
  int v1066;
  int v1067;
  uint64_t v1068;
  __int128 v1069;
  unsigned int *v1070;
  int v1071;
  unsigned int v1072;
  _BYTE v1073[16];
  int v1074;
  int v1075;
  int v1076;
  unint64_t v1077;
  unsigned int *v1078;
  uint64_t v1079;
  int v1080[3];
  int v1081;
  unsigned int v1082;
  unsigned int v1083;
  char v1084;
  __int16 v1085;
  char v1086;
  int *v1087;
  uint64_t v1088;
  uint64_t v1089;
  char v1090;

  v9 = 0;
  v10 = -2;
  v11 = 144;
  k = 120;
  v1017 = a1 + 15912;
  v1016 = a1 + 15728;
  while (2)
  {
    v13 = *(_QWORD *)(a1 + 15872);
    if (v13)
    {
      v596 = v10;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), a2, a3, v10, 120, a6, a7, a8, &v1076);
      if (*(_DWORD *)(v13 + 28) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E958A4);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 16) + 4 * v9) = v1076;
      v10 = v596;
      k = 120;
    }
    v14 = *(unsigned int *)(a1 + 316);
    if (v9 >= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198E9575CLL);
    }
    v15 = *(_QWORD *)(a1 + 304);
    v16 = (unsigned __int8 *)(v15 + 120 * v9);
    v18 = v16 + 32;
    v17 = v16[32];
    switch(v16[32])
    {
      case 0u:
        v1022 = v10;
        v76 = *(_QWORD *)v16;
        v77 = *(unsigned int *)(*(_QWORD *)v16 + 24);
        v78 = *(_QWORD *)(a1 + 8);
        v79 = *(_QWORD *)(a1 + 40);
        if ((_DWORD)v77)
        {
          JSC::MacroAssemblerARM64::add32(v78, v77, *(char *)(v79 + 1), *(char *)(v79 + 1), 120, a6, a7, a8);
          v78 = *(_QWORD *)(a1 + 8);
          v79 = *(_QWORD *)(a1 + 40);
        }
        JSC::MacroAssemblerARM64::branch32(v78, 8, *(char *)(v79 + 1), *(char *)(v79 + 2), 120, a6, a7, a8, (uint64_t)&v1074);
        v81 = v1074;
        v10 = v1022;
        if (v1074 != -1)
        {
          v82 = *(unsigned int *)(v15 + 120 * v9 + 52);
          if ((_DWORD)v82 == *(_DWORD *)(v15 + 120 * v9 + 48))
          {
            v83 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15 + 120 * v9 + 40, (void *)(v82 + 1), (unint64_t)&v1074, v1022, v80, a6, a7, a8);
            v10 = v1022;
            v85 = *v83;
            v84 = v83 + 1;
            v81 = v85;
            LODWORD(v82) = *(_DWORD *)(v15 + 120 * v9 + 52);
          }
          else
          {
            v84 = &v1075;
          }
          v140 = *(_QWORD *)(v15 + 120 * v9 + 40) + 12 * v82;
          *(_DWORD *)v140 = v81;
          *(_QWORD *)(v140 + 4) = *(_QWORD *)v84;
          ++*(_DWORD *)(v15 + 120 * v9 + 52);
        }
        v141 = *(_DWORD **)(a1 + 8);
        v142 = v141[50];
        if (v142 < v141[13])
        {
          k = 120;
          do
          {
            if ((v142 + 4) > v141[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v141 + 14), a2, a3, v10, 120, a6, a7, a8);
              k = 120;
              v10 = v1022;
              v142 = v141[50];
            }
            *(_DWORD *)(*((_QWORD *)v141 + 7) + v142) = -721215457;
            v142 = v141[50] + 4;
            v141[50] = v142;
          }
          while (v142 < v141[13]);
        }
        else
        {
          k = 120;
        }
        v141[52] = 0;
        v143 = v15 + 120 * v9;
        *(_DWORD *)(v143 + 36) = v142;
        v144 = *(_QWORD *)(v143 + 112);
        if (!v144)
          goto LABEL_9;
        v1011 = v15 + 120 * v9 + 40;
        v1013 = v76;
        v1019 = v11;
        BestCharacterSequence = JSC::Yarr::BoyerMooreInfo::findBestCharacterSequence((uint64_t *)v144, v1017, 4u);
        v147 = v146;
        v148 = JSC::Yarr::BoyerMooreInfo::findBestCharacterSequence((uint64_t *)v144, v1017, 8u);
        v149 = v148;
        v151 = v150;
        if ((int)BestCharacterSequence <= (int)v148)
          v152 = v148;
        else
          v152 = BestCharacterSequence;
        v153 = JSC::Yarr::BoyerMooreInfo::findBestCharacterSequence((uint64_t *)v144, v1017, 0x10u);
        if (v152 <= (int)v153)
          v156 = v153;
        else
          v156 = v152;
        if (v156 < 0)
        {
          v10 = v1022;
          k = 120;
          if (!BYTE5(qword_1ECF4C6B8))
            goto LABEL_9;
          WTF::dataLog<char [88],char [2]>("BM search candidates were not efficient enough. Not using BM search", "\n");
          goto LABEL_411;
        }
        if ((_DWORD)BestCharacterSequence == 0x80000000)
          v157 = 0;
        else
          v157 = v147;
        v158 = HIDWORD(BestCharacterSequence);
        if ((_DWORD)BestCharacterSequence == 0x80000000)
          LODWORD(v158) = 0;
        if ((int)BestCharacterSequence < (int)v149)
        {
          v157 = v151;
          LODWORD(v158) = HIDWORD(v149);
        }
        if (v152 >= (int)v153)
          v159 = v158;
        else
          v159 = HIDWORD(v153);
        if (v152 >= (int)v153)
          v160 = v157;
        else
          v160 = a2;
        v1082 = v159;
        v1083 = v160;
        v1087 = (int *)&v1089;
        v1088 = 2;
        v1090 = 1;
        v1012 = v160;
        v28 = v160 >= v159;
        v161 = v160 - v159;
        v1010 = v161;
        if ((_DWORD)v161 == 0 || !v28)
        {
          v489 = 0;
          v490 = 0;
          v491 = 0;
          v1069 = 0uLL;
          v1070 = (unsigned int *)v1073;
          v1071 = 2;
LABEL_168:
          memcpy(v1073, &v1089, 4 * v491);
          v165 = (int *)v1073;
          goto LABEL_169;
        }
        v489 = 0;
        v490 = 0;
        v162 = 56 * v159;
        v163 = v161;
        do
        {
          if (v159 >= *(unsigned int *)(v144 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9577CLL);
          }
          v164 = (_QWORD *)(*(_QWORD *)v144 + v162);
          v490 |= *v164;
          v489 |= v164[1];
          JSC::Yarr::BoyerMooreFastCandidates::merge((unint64_t *)&v1087, (const JSC::Yarr::BoyerMooreFastCandidates *)(v164 + 2), a3, v154, v155, a6, a7, a8);
          ++v159;
          v162 += 56;
          --v163;
        }
        while (v163);
        v165 = v1087;
        *(_QWORD *)&v1069 = v490;
        *((_QWORD *)&v1069 + 1) = v489;
        v1070 = (unsigned int *)v1073;
        v1071 = 2;
        v491 = HIDWORD(v1088);
        if (v1087 == (int *)&v1089)
          goto LABEL_168;
        v1070 = (unsigned int *)v1087;
        v1071 = v1088;
LABEL_169:
        v166 = &v1089;
        v1072 = v491;
        v1073[8] = v1090;
        v167.i64[0] = __PAIR64__(v490, v489);
        v167.i64[1] = __PAIR64__(HIDWORD(v490), HIDWORD(v489));
        v1080[0] = vaddlvq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v167)));
        v1087 = (int *)&v1089;
        v1088 = 2;
        v10 = v1022;
        k = 120;
        if (!v1080[0])
        {
          if (v1073 == (_BYTE *)v165)
            goto LABEL_9;
          goto LABEL_554;
        }
        if (v1090 && v491)
        {
          if (BYTE5(qword_1ECF4C6B8))
          {
            WTF::dataLog<char [37],JSC::Yarr::BoyerMooreFastCandidates,char [9],unsigned int,char [3],unsigned int,char [2],char [2]>((int **)&v1070, &v1082, &v1083);
            v166 = &v1089;
          }
          v168 = *(_DWORD **)(a1 + 8);
          v169 = v1013;
          if ((_BYTE)word_1ECF4C286)
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [40],JSC::Yarr::BoyerMooreFastCandidates,char [9],unsigned int,char [3],unsigned int,char [2]>(*(_QWORD *)(a1 + 8), (int **)&v1070, &v1082, &v1083);
            v166 = &v1089;
            v168 = *(_DWORD **)(a1 + 8);
          }
          v170 = v168[50];
          if (v170 < v168[13])
          {
            do
            {
              if ((v170 + 4) > v168[48])
              {
                v1009 = v166;
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v168 + 14), a2, a3, v10, 120, a6, a7, a8);
                v166 = v1009;
                v170 = v168[50];
              }
              *(_DWORD *)(*((_QWORD *)v168 + 7) + v170) = -721215457;
              v170 = v168[50] + 4;
              v168[50] = v170;
            }
            while (v170 < v168[13]);
            v1012 = v1083;
          }
          v168[52] = 0;
          v171 = *(_DWORD *)(v15 + 120 * v9 + 100);
          v28 = v171 >= v1012;
          v172 = v171 - v1012;
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957B4);
          }
          if (v172 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957BCLL);
          }
          v173 = *(_QWORD *)(a1 + 40);
          v174 = *(char *)(v173 + 9);
          v175 = *(_BYTE *)(v173 + 9);
          v176 = *(char *)(v173 + 1);
          LODWORD(v1077) = v172 + 1;
          v178 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v1077, v174, v176, 120, a6, a7, a8);
          if (*(_BYTE *)(a1 + 80))
          {
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v178, v177, v175, v178, v179, v180, v181);
            else
              JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v178, v177, v175, v178, v179, v180, v181);
          }
          else
          {
            JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v178, v177, v175, v178, v179, v180, v181);
          }
          if (!v1072)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957C4);
          }
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 9), *v1070, v182, v183, v184, v185, (uint64_t)&v1067);
          v191 = v1067;
          if (v1067 != -1)
          {
            v418 = HIDWORD(v1088);
            if (HIDWORD(v1088) == (_DWORD)v1088)
            {
              v419 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1087, (void *)(HIDWORD(v1088) + 1), (unint64_t)&v1067, v186, v187, v188, v189, v190);
              v421 = *v419;
              v420 = (uint64_t *)(v419 + 1);
              v191 = v421;
              v418 = HIDWORD(v1088);
            }
            else
            {
              v420 = &v1068;
            }
            v515 = &v1087[3 * v418];
            *v515 = v191;
            *(_QWORD *)(v515 + 1) = *v420;
            ++HIDWORD(v1088);
          }
          if (v1072 >= 2)
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 9), v1070[1], v187, v188, v189, v190, (uint64_t)&v1065);
            v444 = v1065;
            if (v1065 != -1)
            {
              v445 = HIDWORD(v1088);
              if (HIDWORD(v1088) == (_DWORD)v1088)
              {
                v446 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1087, (void *)(HIDWORD(v1088) + 1), (unint64_t)&v1065, v443, v187, v188, v189, v190);
                v448 = *v446;
                v447 = v446 + 1;
                v444 = v448;
                v445 = HIDWORD(v1088);
              }
              else
              {
                v447 = &v1066;
              }
              v516 = &v1087[3 * v445];
              *v516 = v444;
              *(_QWORD *)(v516 + 1) = *(_QWORD *)v447;
              ++HIDWORD(v1088);
            }
          }
          v192 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
          JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v1012 - v1082, v192, v192, v187, v188, v189, v190);
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v193, v194, v195, v196, (uint64_t)&v1077);
          v1064 = v170;
          v202 = *(_QWORD *)(a1 + 8);
          v203 = (unsigned int *)&v1064;
        }
        else
        {
          v235 = *(_QWORD *)(a1 + 32);
          v236 = *(unsigned int *)(v235 + 12);
          if ((_DWORD)v236)
          {
            v522 = *(_QWORD ***)v235;
            v523 = 8 * v236;
            while (1)
            {
              v238 = *v522;
              if (**v522 == v490 && v238[1] == v489)
                break;
              ++v522;
              v523 -= 8;
              if (!v523)
                goto LABEL_222;
            }
          }
          else
          {
LABEL_222:
            v237 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
            v238 = v237;
            *v237 = v1069;
            v1077 = (unint64_t)v237;
            v239 = *(unsigned int *)(a1 + 15740);
            if ((_DWORD)v239 == *(_DWORD *)(a1 + 15736))
            {
              v240 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1016, v239 + 1, (unint64_t)&v1077);
              v243 = *(unsigned int *)(a1 + 15740);
              v244 = *(_QWORD *)(a1 + 15728);
              v245 = *v240;
              *v240 = 0;
              *(_QWORD *)(v244 + 8 * v243) = v245;
              v246 = v1077;
              *(_DWORD *)(a1 + 15740) = v243 + 1;
              v1077 = 0;
              if (v246)
                WTF::fastFree(v246, v241, v242, v10, k, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 15728) + 8 * v239) = v237;
              *(_DWORD *)(a1 + 15740) = v239 + 1;
            }
          }
          if (BYTE5(qword_1ECF4C6B8))
            WTF::dataLog<char [31],unsigned int,char [10],unsigned int,char [3],unsigned int,char [2],char [2]>(v1080, &v1082, &v1083);
          if ((_BYTE)word_1ECF4C286)
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [34],unsigned int,char [10],unsigned int,char [3],unsigned int,char [2]>(*(_QWORD *)(a1 + 8), v1080, &v1082, &v1083);
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)v238, *(char *)(*(_QWORD *)(a1 + 40) + 10), v10, k, a6, a7, a8);
          v254 = *(_DWORD **)(a1 + 8);
          for (i = v254[50]; i < v254[13]; v254[50] = i)
          {
            if ((i + 4) > v254[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v254 + 14), v247, v248, v249, v250, v251, v252, v253);
              i = v254[50];
            }
            *(_DWORD *)(*((_QWORD *)v254 + 7) + i) = -721215457;
            i = v254[50] + 4;
          }
          v254[52] = 0;
          v256 = *(_DWORD *)(v15 + 120 * v9 + 100);
          v28 = v256 >= v1012;
          v257 = v256 - v1012;
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957CCLL);
          }
          v169 = v1013;
          if (v257 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957D4);
          }
          v258 = *(_QWORD *)(a1 + 40);
          v259 = *(char *)(v258 + 9);
          v260 = *(_BYTE *)(v258 + 9);
          v261 = *(char *)(v258 + 1);
          LODWORD(v1077) = v257 + 1;
          v263 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v1077, v259, v261, v250, v251, v252, v253);
          if (*(_BYTE *)(a1 + 80))
          {
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v263, v262, v260, v263, v264, v265, v266);
            else
              JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v263, v262, v260, v263, v264, v265, v266);
          }
          else
          {
            JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v263, v262, v260, v263, v264, v265, v266);
          }
          v274 = *(_DWORD **)(a1 + 8);
          v275 = *(_QWORD *)(a1 + 40);
          v276 = *(_BYTE *)(v275 + 9);
          v277 = *(_BYTE *)(v275 + 11);
          v278 = v274[50];
          if (v278 + 4 > v274[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v274 + 14), v267, v268, v269, v270, v271, v272, v273);
            v278 = v274[50];
          }
          *(_DWORD *)(*((_QWORD *)v274 + 7) + v278) = v277 & 0x1F | (32 * (v276 & 0x1F)) | 0x53061800;
          v274[50] += 4;
          JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 10) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 11) << 8) | 0x300000000, 0x200000000uLL, *(char *)(*(_QWORD *)(a1 + 40) + 11), v270, v271, v272, v273);
          v287 = *(_DWORD **)(a1 + 8);
          v288 = *(_QWORD *)(a1 + 40);
          v289 = *(_BYTE *)(v288 + 9);
          v290 = *(_BYTE *)(v288 + 11);
          v291 = v287[50];
          if (v291 + 4 > v287[48])
          {
            v286 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v287 + 14), v279, v280, v281, v282, v283, v284, v285).n128_u64[0];
            v291 = v287[50];
          }
          *(_DWORD *)(*((_QWORD *)v287 + 7) + v291) = ((v289 & 0x1F) << 16) | (32 * (v290 & 0x1F)) | v290 & 0x1F | 0x9AC02400;
          v287[50] += 4;
          JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 11), 1, v282, v283, v284, v285, (uint64_t)&v1062, v286);
          v297 = v1062;
          if (v1062 != -1)
          {
            v360 = HIDWORD(v1088);
            if (HIDWORD(v1088) == (_DWORD)v1088)
            {
              v361 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1087, (void *)(HIDWORD(v1088) + 1), (unint64_t)&v1062, v292, v293, v294, v295, v296);
              v363 = *v361;
              v362 = v361 + 1;
              v297 = v363;
              v360 = HIDWORD(v1088);
            }
            else
            {
              v362 = &v1063;
            }
            v499 = &v1087[3 * v360];
            *v499 = v297;
            *(_QWORD *)(v499 + 1) = *(_QWORD *)v362;
            ++HIDWORD(v1088);
          }
          v298 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
          JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v1010, v298, v298, v293, v294, v295, v296);
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v299, v300, v301, v302, (uint64_t)&v1077);
          v1061 = i;
          v202 = *(_QWORD *)(a1 + 8);
          v203 = (unsigned int *)&v1061;
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v1077, v203, v202, v197, v198, v199, v200, v201);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 32))
        {
          v303 = *(_QWORD *)(a1 + 8);
          for (j = *(_DWORD *)(v303 + 200); j < *(_DWORD *)(v303 + 52); *(_DWORD *)(v303 + 200) = j)
          {
            if ((j + 4) > *(_DWORD *)(v303 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v303 + 56), a2, a3, v231, v232, a6, a7, a8);
              j = *(_DWORD *)(v303 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v303 + 56) + j) = -721215457;
            j = *(_DWORD *)(v303 + 200) + 4;
          }
          v305 = j;
          if ((j + 4) > *(_DWORD *)(v303 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v303 + 56), a2, a3, v231, v232, a6, a7, a8);
            v305 = *(_DWORD *)(v303 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v303 + 56) + v305) = 335544320;
          *(_DWORD *)(v303 + 200) += 4;
          if (*(_BYTE *)(v303 + 328))
            v306 = 69;
          else
            v306 = 65;
          v1053[0] = j;
          v1053[1] = 0;
          v1054 = v306;
          v1055 = 15;
          v1056 = -1;
          if (j != -1)
          {
            v307 = v1011;
            v309 = (_DWORD *)(v1011 + 12);
            v308 = *(unsigned int *)(v1011 + 12);
            if ((_DWORD)v308 == *(_DWORD *)(v1011 + 8))
            {
              v422 = (void *)(v308 + 1);
              v423 = v1053;
LABEL_337:
              v424 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v307, v422, (unint64_t)v423, v231, v232, a6, a7, a8);
              v426 = *v424;
              v425 = v424 + 1;
              v427 = (_DWORD *)(*(_QWORD *)v307 + 12 * *(unsigned int *)(v307 + 12));
              *v427 = v426;
              v428 = v427 + 1;
LABEL_207:
              *v428 = *v425;
              ++*v309;
              goto LABEL_208;
            }
            v429 = v1053;
            goto LABEL_339;
          }
        }
        else
        {
          v492 = *(unsigned int *)(v169 + 24);
          if ((_DWORD)v492)
          {
            JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v492, *(char *)(*(_QWORD *)(a1 + 40) + 9), v232, a6, a7, a8);
            v493 = (char *)(*(_QWORD *)(a1 + 40) + 9);
          }
          else
          {
            v493 = (char *)(*(_QWORD *)(a1 + 40) + 1);
          }
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, *v493, v492, v231, v232, a6, a7, a8);
          v494 = *(_QWORD *)(a1 + 8);
          for (j = *(_DWORD *)(v494 + 200); j < *(_DWORD *)(v494 + 52); v169 = v1013)
          {
            if ((j + 4) > *(_DWORD *)(v494 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v494 + 56), a2, a3, v231, v232, a6, a7, a8);
              j = *(_DWORD *)(v494 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v494 + 56) + j) = -721215457;
            j = *(_DWORD *)(v494 + 200) + 4;
            *(_DWORD *)(v494 + 200) = j;
            v11 = v1019;
          }
          v495 = j;
          if ((j + 4) > *(_DWORD *)(v494 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v494 + 56), a2, a3, v231, v232, a6, a7, a8);
            v495 = *(_DWORD *)(v494 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v494 + 56) + v495) = 335544320;
          *(_DWORD *)(v494 + 200) += 4;
          if (*(_BYTE *)(v494 + 328))
            v496 = 69;
          else
            v496 = 65;
          v1057[0] = j;
          v1057[1] = 0;
          v1058 = v496;
          v1059 = 15;
          v1060 = -1;
          if (j != -1)
          {
            v307 = v1011;
            v309 = (_DWORD *)(v1011 + 12);
            v308 = *(unsigned int *)(v1011 + 12);
            if ((_DWORD)v308 == *(_DWORD *)(v1011 + 8))
            {
              v422 = (void *)(v308 + 1);
              v423 = v1057;
              goto LABEL_337;
            }
            v429 = v1057;
LABEL_339:
            v425 = v429 + 1;
            v430 = (int *)(*(_QWORD *)v307 + 12 * v308);
            *v430 = j;
            v428 = v430 + 1;
            goto LABEL_207;
          }
        }
LABEL_208:
        if (HIDWORD(v1088))
        {
          v227 = 0;
          v228 = 0;
          v229 = *(_QWORD *)(a1 + 8);
          v230 = 12 * HIDWORD(v1088);
          do
          {
            if (v228 >= HIDWORD(v1088))
            {
              __break(0xC471u);
              JUMPOUT(0x198E95764);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1087[v227 / 4], v229, a3, v231, v232, a6, a7, a8);
            ++v228;
            v227 += 12;
          }
          while (v230 != v227);
        }
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 32))
        {
          v497 = *(unsigned int *)(v169 + 24);
          if ((_DWORD)v497)
          {
            JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v497, *(char *)(*(_QWORD *)(a1 + 40) + 9), v232, a6, a7, a8);
            v498 = (char *)(*(_QWORD *)(a1 + 40) + 9);
          }
          else
          {
            v498 = (char *)(*(_QWORD *)(a1 + 40) + 1);
          }
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, *v498, v497, v231, v232, a6, a7, a8);
        }
        v233 = (unint64_t)v1087;
        if (&v1089 != (uint64_t *)v1087 && v1087)
        {
          v1087 = 0;
          LODWORD(v1088) = 0;
          WTF::fastFree(v233, (void *)a2, a3, v231, v232, a6, a7, a8);
        }
        v165 = (int *)v1070;
        v10 = v1022;
        k = 120;
        if (v1073 == (_BYTE *)v1070)
          goto LABEL_9;
LABEL_554:
        if (v165)
        {
          v1070 = 0;
          v1071 = 0;
          WTF::fastFree((unint64_t)v165, (void *)a2, a3, v10, 120, a6, a7, a8);
LABEL_411:
          k = 120;
          v10 = v1022;
        }
LABEL_9:
        ++v9;
        v11 += 120;
        --v10;
        if (v9 < *(unsigned int *)(a1 + 316))
          continue;
        return;
      case 1u:
      case 2u:
        v43 = *(_QWORD *)(v15 + 120 * v9 + 8);
        if (v43 >= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x198E9578CLL);
        }
        v44 = *(unsigned int **)(v15 + 120 * v43);
        v1018 = *(_QWORD *)v16;
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
        v46 = *(_DWORD *)(v45 + 28);
        if (v46)
        {
          if (v46 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957ACLL);
          }
          v138 = 8 * v46 + 63;
          if ((v138 & 0xFFFFFFC0) != 0)
          {
            v139 = v10;
            JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v138 & 0xFFFFFFC0, 31, 31, 120, a6, a7, a8);
            v10 = v139;
            v45 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
          }
        }
        if (*(_BYTE *)(v45 + 32))
        {
          v47 = v10;
          v48 = v44[6];
          v49 = *(_DWORD **)(a1 + 8);
          v50 = *(_QWORD *)(a1 + 40);
          v51 = *(_BYTE *)(v50 + 1);
          v52 = *(_BYTE *)(v50 + 7);
          v53 = v51;
          if ((_DWORD)v48)
            JSC::MacroAssemblerARM64::sub32((uint64_t)v49, v53, v48, v52, k, a6, a7, a8);
          else
            JSC::MacroAssemblerARM64::move(v49, v53, v52, v10, k, a6, a7, a8);
          if (*(_BYTE *)(a1 + 81) == 1)
            JSC::MacroAssemblerARM64::storePair32(*(_DWORD **)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 7), *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 3), v57, v58, v59, v60);
        }
        else
        {
          v47 = v10;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::getMatchStart(a1, *(char *)(*(_QWORD *)(a1 + 40) + 7), a3, v10, k, a6, a7, a8);
          if (*(_BYTE *)(a1 + 81) == 1)
            JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | 0x400000000, v56, v57, v58, v59, v60);
        }
        v125 = *(_QWORD *)(a1 + 40);
        v126 = *(unsigned __int8 *)(v125 + 1);
        v127 = *(char *)(v125 + 8);
        if (v126 == v127)
          goto LABEL_127;
        v128 = *(_QWORD *)(a1 + 8);
        if ((char)v126 != 63)
        {
          if ((char)v126 != 31 && v127 != 31)
          {
            v129 = v127 | ((v126 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_124;
          }
LABEL_206:
          v129 = v127 | (32 * (char)v126) | 0x91000000;
          goto LABEL_124;
        }
        if (v127 == 31)
          goto LABEL_206;
        v129 = v127 & 0x1F | 0xD2800000;
LABEL_124:
        v132 = *(_DWORD *)(v128 + 200);
        v131 = (unsigned int *)(v128 + 200);
        v130 = v132;
        if (v132 + 4 > *(v131 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v131 - 36), v54, v55, v56, v57, v58, v59, v60);
          v130 = *v131;
        }
        *(_DWORD *)(*((_QWORD *)v131 - 18) + v130) = v129;
        *v131 += 4;
LABEL_127:
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::generateReturn(a1, v54, v55, v56, v57, v58, v59, v60);
        if (*v18 == 1)
        {
          v220 = *(_DWORD **)(a1 + 8);
          v221 = v220[50];
          v10 = v47;
          for (k = 120; v221 < v220[13]; v220[50] = v221)
          {
            if ((v221 + 4) > v220[48])
            {
              v1008 = v10;
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v220 + 14), a2, a3, v10, 120, a6, a7, a8);
              k = 120;
              v10 = v1008;
              v221 = v220[50];
            }
            *(_DWORD *)(*((_QWORD *)v220 + 7) + v221) = -721215457;
            v221 = v220[50] + 4;
          }
          v220[52] = 0;
          *(_DWORD *)(v15 + 120 * v9 + 36) = v221;
          if (*(_BYTE *)(a1 + 81) == 1)
          {
            v746 = v44[8];
            if (v746)
            {
              v747 = v44[7];
              if (v747 <= 1)
                v748 = 1;
              else
                v748 = v747;
              while (v748 <= v746)
              {
                v749 = v10;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::clearSubpatternStart(a1, v748, a3, v10, 120, a6, a7, a8);
                k = 120;
                v10 = v749;
                v748 = (v748 + 1);
                v746 = v44[8];
              }
            }
          }
          v222 = *(_DWORD *)(v1018 + 24);
          v223 = v44[6];
          a2 = v222 - v223;
          if (v222 > v223)
          {
            v89 = v10;
            v750 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
            JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), a2, v750, v750, 120, a6, a7, a8);
            v751 = v15 + 120 * v9 + 40;
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v752, v753, v754, v755, (uint64_t)v1052);
            v762 = (__int128 *)v1052;
LABEL_522:
            v763 = (_DWORD *)v751;
LABEL_523:
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v763, v762, v756, v757, v758, v759, v760, v761);
LABEL_524:
            k = 120;
            v10 = v89;
            goto LABEL_9;
          }
          a3 = v223 - v222;
          if (v223 <= v222)
            goto LABEL_9;
          v136 = *(_QWORD *)(a1 + 8);
          v137 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
          v135 = v10;
        }
        else
        {
          k = 120;
          v10 = v47;
          if (*(_QWORD *)(v15 + 120 * v9 + 16) != -1)
            goto LABEL_9;
          v133 = *(_DWORD **)(a1 + 8);
          v134 = v133[50];
          if (v134 < v133[13])
          {
            do
            {
              if ((v134 + 4) > v133[48])
              {
                v1006 = v10;
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v133 + 14), a2, a3, v10, 120, a6, a7, a8);
                v10 = v1006;
                v134 = v133[50];
              }
              *(_DWORD *)(*((_QWORD *)v133 + 7) + v134) = -721215457;
              v134 = v133[50] + 4;
              v133[50] = v134;
            }
            while (v134 < v133[13]);
            v135 = v10;
            v136 = *(_QWORD *)(a1 + 8);
          }
          else
          {
            v135 = v47;
            v136 = *(_QWORD *)(a1 + 8);
          }
          v133[52] = 0;
          *(_DWORD *)(v15 + 120 * v9 + 36) = v134;
          a3 = v44[6];
          v137 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
        }
        JSC::MacroAssemblerARM64::sub32(v136, v137, a3, v137, 120, a6, a7, a8);
LABEL_133:
        k = 120;
        v10 = v135;
        goto LABEL_9;
      case 3u:
      case 6u:
        v383 = v15 + 120 * v9;
        v384 = *(_QWORD *)(v383 + 24);
        v385 = *(_QWORD *)(v384 + 16);
        a3 = *(unsigned int *)(*(_QWORD *)v16 + 24);
        *(_DWORD *)(v383 + 96) = a3;
        v386 = (_DWORD *)(v383 + 96);
        if (!*(_BYTE *)(v384 + 2) && *(_BYTE *)v384 != 8)
        {
          v387 = *(_DWORD *)(v385 + 24);
          v28 = a3 >= v387;
          a3 = a3 - v387;
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957FCLL);
          }
          *v386 = a3;
        }
        if (!(_DWORD)a3)
          goto LABEL_9;
        v388 = (_DWORD *)(v15 + 120 * v9 + 40);
        v389 = v10;
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfNoAvailableInput((uint64_t)v1051, a1, a3, v10, 120, a6, a7, a8);
        v396 = v1051;
        goto LABEL_306;
      case 4u:
      case 7u:
        v472 = *(_QWORD *)(v15 + 120 * v9 + 24);
        v1020 = *(_QWORD *)v16;
        v1014 = *(_QWORD *)(v472 + 16);
        if (v17 == 4)
        {
          v473 = v10;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrameWithPatch((unsigned int *)&v1069, *(_QWORD *)(a1 + 8), (*(_DWORD *)(v472 + 44) + 1), v10, 120, a6, a7, a8);
          k = 120;
          v10 = v473;
          *(_DWORD *)(v15 + 120 * v9 + 104) = v1069;
          v14 = *(unsigned int *)(a1 + 316);
        }
        if (*(_BYTE *)(v472 + 2))
        {
          v597 = *(_QWORD *)(v15 + 120 * v9 + 8);
          if (v597 >= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x198E958ACLL);
          }
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 120 * v597) + 24))
          {
            v598 = v10;
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)*(unsigned int *)(v472 + 44) << 35) | 0x1F, 120, a6, a7, a8, (uint64_t)&v1069);
            k = 120;
            v10 = v598;
            v599 = v15 + 120 * v9;
            *(_DWORD *)(v599 + 80) = v1069;
            *(_QWORD *)(v599 + 84) = *(_QWORD *)((char *)&v1069 + 4);
            v14 = *(unsigned int *)(a1 + 316);
          }
        }
        v474 = *(_QWORD *)(v15 + 120 * v9 + 16);
        if (v474 >= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x198E95834);
        }
        v475 = &v1047;
        v476 = *(_QWORD *)(a1 + 304);
        while (1)
        {
          v477 = *(_QWORD *)(v476 + 120 * v474 + 16);
          if (v477 == -1)
            break;
          v474 = *(_QWORD *)(v476 + 120 * v474 + 16);
          if (v477 >= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x198E93E14);
          }
        }
        v478 = *(_QWORD *)(a1 + 8);
        v479 = (JSC::AssemblerBuffer *)(v478 + 56);
        v480 = *(_DWORD *)(v478 + 200);
        if (v480 < *(_DWORD *)(v478 + 52))
        {
          v1025 = v10;
          do
          {
            if ((v480 + 4) > *(_DWORD *)(v478 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v478 + 56), a2, a3, v10, 120, a6, a7, a8);
              v480 = *(_DWORD *)(v478 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v478 + 56) + v480) = -721215457;
            v480 = *(_DWORD *)(v478 + 200) + 4;
            *(_DWORD *)(v478 + 200) = v480;
            v10 = v1025;
            k = 120;
            v479 = (JSC::AssemblerBuffer *)(v478 + 56);
          }
          while (v480 < *(_DWORD *)(v478 + 52));
        }
        v481 = v480;
        if ((v480 + 4) > *(_DWORD *)(v478 + 192))
        {
          v1026 = v10;
          JSC::AssemblerBuffer::outOfLineGrow(v479, a2, a3, v10, 120, a6, a7, a8);
          k = 120;
          v10 = v1026;
          v481 = *(_DWORD *)(v478 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v478 + 56) + v481) = 335544320;
        *(_DWORD *)(v478 + 200) += 4;
        if (*(_BYTE *)(v478 + 328))
          v482 = 69;
        else
          v482 = 65;
        v1046 = v480;
        v1047 = 0;
        v1048 = v482;
        v1049 = 15;
        v1050 = -1;
        if (v480 != -1)
        {
          v483 = v476 + 120 * v474 + 40;
          v484 = *(unsigned int *)(v476 + 120 * v474 + 52);
          if ((_DWORD)v484 == *(_DWORD *)(v476 + 120 * v474 + 48))
          {
            v485 = v476 + 120 * v474 + 40;
            v486 = v10;
            v487 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v485, (void *)(v484 + 1), (unint64_t)&v1046, v10, 120, a6, a7, a8);
            k = 120;
            v10 = v486;
            v475 = v487 + 1;
            v488 = *(_QWORD *)v483 + 12 * *(unsigned int *)(v483 + 12);
            *(_DWORD *)v488 = *v487;
          }
          else
          {
            v488 = *(_QWORD *)v483 + 12 * v484;
            *(_DWORD *)v488 = v480;
          }
          *(_QWORD *)(v488 + 4) = *(_QWORD *)v475;
          ++*(_DWORD *)(v483 + 12);
        }
        v517 = *(_DWORD **)(a1 + 8);
        for (m = v517[50]; m < v517[13]; k = 120)
        {
          v1005 = v10;
          if ((m + 4) > v517[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v517 + 14), a2, a3, v10, 120, a6, a7, a8);
            m = v517[50];
          }
          *(_DWORD *)(*((_QWORD *)v517 + 7) + m) = -721215457;
          m = v517[50] + 4;
          v517[50] = m;
          v10 = v1005;
        }
        v517[52] = 0;
        v519 = v15 + 120 * v9;
        a3 = *(unsigned int *)(v1020 + 24);
        *(_DWORD *)(v519 + 96) = a3;
        v520 = (_DWORD *)(v519 + 96);
        *(v520 - 15) = m;
        if (!*(_BYTE *)(v472 + 2) && *(_BYTE *)v472 != 8)
        {
          v521 = *(_DWORD *)(v1014 + 24);
          v28 = a3 >= v521;
          a3 = a3 - v521;
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x198E9587CLL);
          }
          *v520 = a3;
        }
        if (!(_DWORD)a3)
          goto LABEL_9;
        v388 = (_DWORD *)(v15 + 120 * v9 + 40);
        v389 = v10;
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfNoAvailableInput((uint64_t)v1045, a1, a3, v10, 120, a6, a7, a8);
        v396 = v1045;
LABEL_306:
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v388, v396, v390, v391, v392, v393, v394, v395);
        goto LABEL_307;
      case 5u:
      case 8u:
        v376 = v10;
        v377 = *(_QWORD *)(v15 + 120 * v9 + 24);
        if (v17 == 5)
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrameWithPatch((unsigned int *)&v1069, *(_QWORD *)(a1 + 8), (*(_DWORD *)(v377 + 44) + 1), v10, 120, a6, a7, a8);
          k = 120;
          *(_DWORD *)(v15 + 120 * v9 + 104) = v1069;
        }
        if (*(_BYTE *)(v377 + 2))
        {
          v560 = *(_QWORD *)(v15 + 120 * v9 + 8);
          if (v560 >= *(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9589CLL);
          }
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 120 * v560) + 24))
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)*(unsigned int *)(v377 + 44) << 35) | 0x1F, 120, a6, a7, a8, (uint64_t)&v1069);
            k = 120;
            v561 = v15 + 120 * v9;
            *(_DWORD *)(v561 + 80) = v1069;
            *(_QWORD *)(v561 + 84) = *(_QWORD *)((char *)&v1069 + 4);
          }
        }
        v378 = v15 + 120 * v9;
        v379 = v378 + 40;
        v380 = *(unsigned int *)(v378 + 52);
        if ((_DWORD)v380)
        {
          v22 = 0;
          v21 = 0;
          v381 = *(_QWORD *)(a1 + 8);
          v382 = 12 * v380;
          do
          {
            if (v21 >= *(unsigned int *)(v379 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198E95774);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v379 + v22), v381, a3, v10, k, a6, a7, a8);
            ++v21;
            v22 += 12;
          }
          while (v382 != v22);
        }
        v10 = v376;
        k = 120;
        if (*(_DWORD *)(v379 + 8))
        {
          if (*(_DWORD *)(v379 + 12))
            *(_DWORD *)(v379 + 12) = 0;
          v397 = *(_QWORD *)v379;
          if (v379 + 16 != *(_QWORD *)v379 && v397)
          {
            *(_QWORD *)v379 = 0;
            *(_DWORD *)(v379 + 8) = 0;
            WTF::fastFree(v397, (void *)a2, a3, v376, 120, a6, a7, a8);
            k = 120;
            v10 = v376;
            v397 = *(_QWORD *)v379;
          }
          if (!v397)
          {
            *(_QWORD *)v379 = v379 + 16;
            *(_DWORD *)(v379 + 8) = 2;
          }
        }
        goto LABEL_9;
      case 9u:
        v398 = *(_QWORD *)(v15 + 120 * v9 + 24);
        v399 = *(unsigned int *)(v398 + 44);
        v400 = *(_QWORD *)(a1 + 40);
        v401 = *(_BYTE *)(v400 + 9);
        v402 = *(unsigned __int8 *)(v398 + 2);
        if (v402 == 1)
        {
          v562 = v10;
        }
        else
        {
          if (v402 != 2)
            goto LABEL_318;
          v562 = v10;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*(_QWORD *)(a1 + 8), 0xFFFFFFFF, *(unsigned int *)(v398 + 44), v10, 120, a6, a7, a8);
          v933 = v15 + 120 * v9;
          v934 = *(_QWORD *)(a1 + 8);
          JSC::ARM64Assembler::label((_DWORD *)(v934 + 32), v935, v936, v937, v938, v939, v940, v941, (int *)&v1069);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v934 + 56), 335544320, v942, v943, v944, v945, v946, v947);
          if (*(_BYTE *)(v934 + 328))
            v954 = 69;
          else
            v954 = 65;
          v1041[0] = v1069;
          v1041[1] = 0;
          v1042 = v954;
          v1043 = 15;
          v1044 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v933 + 40), v1041, v948, v949, v950, v951, v952, v953);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v955, v956, v957, v958, v959, v960, v961, (int *)&v1069);
          *(_DWORD *)(v933 + 36) = v1069;
          v400 = *(_QWORD *)(a1 + 40);
        }
        JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(v400 + 1), (v399 << 35) | 0x1F, v10, k, a6, a7, a8);
        v10 = v562;
        k = 120;
LABEL_318:
        if ((*(_BYTE *)(v398 + 1) & 1) == 0 || *(_BYTE *)(a1 + 81) != 1)
          goto LABEL_9;
        v403 = *(_DWORD *)(v15 + 120 * v9 + 100);
        v404 = *(_DWORD *)(v398 + 40);
        v28 = v403 >= v404;
        v405 = v403 - v404;
        if (!v28)
        {
          __break(0xC471u);
          JUMPOUT(0x198E95804);
        }
        if (!*(_BYTE *)(v398 + 2))
          v405 += *(_DWORD *)(*(_QWORD *)(v398 + 16) + 24);
        v406 = v10;
        if (v405)
        {
          v407 = v401;
          JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v405, v407, 120, a6, a7, a8);
          v408 = *(_QWORD *)(a1 + 8);
          v409 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3);
          v410 = *(unsigned int *)(v398 + 24);
          goto LABEL_326;
        }
        v974 = *(_QWORD *)(a1 + 40);
        v412 = *(char *)(v974 + 1);
        v408 = *(_QWORD *)(a1 + 8);
        v975 = *(unsigned __int8 *)(v974 + 3);
        v976 = *(unsigned int *)(v398 + 24);
        goto LABEL_591;
      case 0xAu:
        v413 = *(_QWORD *)(v15 + 120 * v9 + 24);
        v414 = *(_QWORD *)(a1 + 40);
        v415 = *(_BYTE *)(v414 + 9);
        if (*(_BYTE *)(v413 + 2) && !*(_DWORD *)(*(_QWORD *)(v413 + 16) + 24))
        {
          v563 = v10;
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(v414 + 1), ((unint64_t)*(unsigned int *)(v413 + 44) << 35) | 0x1F, 120, a6, a7, a8, (uint64_t)v1040);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(a1 + 120), v1040, v564, v565, v566, v567, v568, v569);
          k = 120;
          v10 = v563;
        }
        if ((*(_BYTE *)(v413 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
        {
          v962 = *(_DWORD *)(v15 + 120 * v9 + 100);
          v963 = *(_DWORD *)(v413 + 40);
          v964 = v962 - v963;
          if (v962 < v963)
          {
            __break(0xC471u);
            JUMPOUT(0x198E958FCLL);
          }
          v965 = v10;
          v966 = *(unsigned int *)(v413 + 24);
          if ((_DWORD)v964)
          {
            JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v964, v415, 120, a6, a7, a8);
            v967 = *(_QWORD *)(a1 + 8);
            v968 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)(((8 * (_DWORD)v966) | 4u) >> 2) << 34);
            v969 = v415;
          }
          else
          {
            v977 = *(_QWORD *)(a1 + 40);
            v969 = *(char *)(v977 + 1);
            v967 = *(_QWORD *)(a1 + 8);
            v968 = *(unsigned __int8 *)(v977 + 3) | ((unint64_t)(((8 * (_DWORD)v966) | 4u) >> 2) << 34);
          }
          JSC::MacroAssemblerARM64::store32(v967, v969, v968, v10, k, a6, a7, a8);
          v970 = *(_QWORD *)(a1 + 56);
          v10 = v965;
          k = 120;
          if (*(_DWORD *)(v970 + 12))
          {
            if (*(_DWORD *)(v970 + 124) <= v966)
            {
              __break(0xC471u);
              JUMPOUT(0x198E95904);
            }
            v971 = *(_DWORD *)(*(_QWORD *)(v970 + 112) + 4 * v966);
            if (v971)
            {
              JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), v966, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((4 * v971 + 8 * *(_DWORD *)(v970 + 4) + 4) >> 2) << 34), v965, 120, a6, a7, a8);
              k = 120;
              v10 = v965;
            }
          }
        }
        v416 = *(unsigned __int8 *)(v413 + 2);
        if (v416 == 1)
        {
          v570 = v10;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), a2, a3, v10, 120, a6, a7, a8, (int *)&v1069);
          k = 120;
          v10 = v570;
          *(_DWORD *)(v15 + 120 * v9 + 36) = v1069;
          goto LABEL_9;
        }
        if (v416 != 2)
          goto LABEL_9;
        v417 = *(_QWORD *)(v15 + 120 * v9 + 8);
        if (v417 >= *(unsigned int *)(a1 + 316))
        {
          __break(0xC471u);
          JUMPOUT(0x198E9580CLL);
        }
        v30 = v10;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)(a1 + 304) + 120 * v417 + 40), *(_QWORD *)(a1 + 8), a3, v10, 120, a6, a7, a8);
LABEL_24:
        v10 = v30;
        goto LABEL_25;
      case 0xBu:
        v600 = v15 + 120 * v9;
        v601 = *(_QWORD *)(v600 + 24);
        v89 = v10;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), a2, a3, v10, 120, a6, a7, a8, (int *)&v1069);
        *(_DWORD *)(v600 + 36) = v1069;
        JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)*(unsigned int *)(v601 + 44) << 35) | 0x1F, v602, v603, v604, v605, v606);
        goto LABEL_524;
      case 0xCu:
        v730 = *(_QWORD *)(v15 + 120 * v9 + 8);
        if (v730 >= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x198E958D4);
        }
        v466 = v10;
        v731 = *(_QWORD *)(v15 + 120 * v9 + 24);
        if (*(_BYTE *)(v731 + 2) && !*(_DWORD *)(*(_QWORD *)(v731 + 16) + 24))
        {
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)*(unsigned int *)(v731 + 44) << 35) | 0x1F, 120, a6, a7, a8, (uint64_t)v1039);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(a1 + 120), v1039, v732, v733, v734, v735, v736, v737);
        }
        v738 = *(_QWORD *)(a1 + 8);
        v1038 = *(_DWORD *)(v15 + 120 * v730 + 36);
        JSC::MacroAssembler::jump(v738, &v1038, a3, v10, k, a6, a7, a8);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v739, v740, v741, v742, v743, v744, v745, (int *)&v1069);
        *(_DWORD *)(v15 + 120 * v9 + 36) = v1069;
        goto LABEL_362;
      case 0xDu:
        v658 = *(_QWORD *)(v15 + 120 * v9 + 24);
        if (*(unsigned __int8 *)(v658 + 2) - 1 <= 1)
        {
          v1024 = v10;
          v659 = *(unsigned int *)(v658 + 44);
          JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, ((unint64_t)((8 * v659 + 16) >> 3) << 35) | 0x1F, v10, 120, a6, a7, a8);
          v660 = ((unint64_t)((8 * v659 + 24) >> 3) << 35) | 0x1F;
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), 63, v660, v661, v662, v663, v664, v665);
          if (*(_BYTE *)(v658 + 2) == 2)
          {
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::storeToFrame(*(_QWORD *)(a1 + 8), 0xFFFFFFFF, v659, v668, v669, v670, v671, v672);
            v673 = *(_QWORD *)(a1 + 8);
            JSC::ARM64Assembler::label((_DWORD *)(v673 + 32), v674, v675, v676, v677, v678, v679, v680, (int *)&v1069);
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v673 + 56), 335544320, v681, v682, v683, v684, v685, v686);
            if (*(_BYTE *)(v673 + 328))
              v693 = 69;
            else
              v693 = 65;
            v1034[0] = v1069;
            v1034[1] = 0;
            v1035 = v693;
            v1036 = 15;
            v1037 = -1;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v15 + 120 * v9 + 40), v1034, v687, v688, v689, v690, v691, v692);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v666, v667, v668, v669, v670, v671, v672, (int *)&v1069);
          *(_DWORD *)(v15 + 120 * v9 + 36) = v1069;
          v694 = *(_QWORD *)(a1 + 40);
          v695 = *(char *)(v694 + 9);
          v696 = *(unsigned __int8 *)(v694 + 10);
          JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v660, v695, v697, v698, v699, v700, v701);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::allocateParenContext(a1, (char)v696, v708, v702, v703, v704, v705, v706, v707);
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v695, v696, v709, v710, v711, v712, v713);
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), (char)v696, v660, v714, v715, v716, v717, v718);
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::saveParenContext(a1, (char)v696, *(char *)(*(_QWORD *)(a1 + 40) + 11), *(unsigned int *)(v658 + 24), *(unsigned int *)(v658 + 28), v659, v719, v720);
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)(8 * v659) << 32) | 0x1F, v721, v722, v723, v724, v725);
          v10 = v1024;
          k = 120;
        }
        if ((*(_BYTE *)(v658 + 1) & 1) == 0 || *(_BYTE *)(a1 + 81) != 1)
          goto LABEL_9;
        v726 = *(_DWORD *)(v15 + 120 * v9 + 100);
        v727 = *(_DWORD *)(v658 + 40);
        v28 = v726 >= v727;
        v728 = v726 - v727;
        if (!v28)
        {
          __break(0xC471u);
          JUMPOUT(0x198E958CCLL);
        }
        if (!*(_BYTE *)(v658 + 2))
          v728 += *(_DWORD *)(*(_QWORD *)(v658 + 16) + 24);
        v406 = v10;
        v729 = *(_QWORD *)(a1 + 40);
        if (v728)
        {
          v407 = *(char *)(v729 + 9);
          JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(v729 + 1), v728, v407, 120, a6, a7, a8);
          v408 = *(_QWORD *)(a1 + 8);
          v409 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3);
          v410 = *(unsigned int *)(v658 + 24);
LABEL_326:
          v411 = v409 | (v410 << 35);
          v412 = v407;
        }
        else
        {
          v412 = *(char *)(v729 + 1);
          v408 = *(_QWORD *)(a1 + 8);
          v975 = *(unsigned __int8 *)(v729 + 3);
          v976 = *(unsigned int *)(v658 + 24);
LABEL_591:
          v411 = v975 | (v976 << 35);
        }
        JSC::MacroAssemblerARM64::store32(v408, v412, v411, v10, k, a6, a7, a8);
        v10 = v406;
        goto LABEL_25;
      case 0xEu:
        v607 = *(_QWORD *)(v15 + 120 * v9 + 24);
        v608 = *(unsigned int *)(v607 + 44);
        if (*(_BYTE *)(v607 + 2) && !*(_DWORD *)(*(_QWORD *)(v607 + 16) + 24))
        {
          v609 = v10;
          JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), (v608 << 35) | 0x1F, 120, a6, a7, a8, (uint64_t)v1033);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(a1 + 120), v1033, v610, v611, v612, v613, v614, v615);
          v10 = v609;
          v14 = *(unsigned int *)(a1 + 316);
        }
        v616 = v15 + 120 * v9;
        v619 = *(_QWORD *)(v616 + 8);
        v618 = (_QWORD *)(v616 + 8);
        v617 = v619;
        if (v619 >= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x198E958B4);
        }
        v620 = v10;
        v1021 = *(_QWORD *)(a1 + 304);
        v621 = ((unint64_t)((8 * v608 + 16) >> 3) << 35) | 0x1F;
        v622 = *(char *)(*(_QWORD *)(a1 + 40) + 10);
        JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v621, v622, v10, k, a6, a7, a8);
        JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, v622, v622, v623, v624, v625, v626);
        JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v622, v621, v627, v628, v629, v630, v631);
        v10 = v620;
        k = 120;
        if ((*(_BYTE *)(v607 + 1) & 1) != 0 && *(_BYTE *)(a1 + 81) == 1)
        {
          v632 = *(_DWORD *)(v15 + 120 * v9 + 100);
          v633 = *(_DWORD *)(v607 + 40);
          v634 = v632 - v633;
          if (v632 < v633)
          {
            __break(0xC471u);
            JUMPOUT(0x198E958BCLL);
          }
          v635 = *(_QWORD *)(a1 + 40);
          v636 = *(unsigned int *)(v607 + 24);
          if ((_DWORD)v634)
          {
            v1015 = *(unsigned int *)(v607 + 24);
            v637 = *(char *)(v635 + 9);
            JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(v635 + 1), v634, v637, 120, a6, a7, a8);
            v638 = *(_QWORD *)(a1 + 8);
            v639 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)(((8 * (_DWORD)v1015) | 4u) >> 2) << 34);
            v640 = v637;
            v636 = v1015;
          }
          else
          {
            v640 = *(char *)(v635 + 1);
            v638 = *(_QWORD *)(a1 + 8);
            v639 = *(unsigned __int8 *)(v635 + 3) | ((unint64_t)(((8 * (_DWORD)v636) | 4u) >> 2) << 34);
          }
          JSC::MacroAssemblerARM64::store32(v638, v640, v639, v10, k, a6, a7, a8);
          v641 = *(_QWORD *)(a1 + 56);
          v10 = v620;
          k = 120;
          if (*(_DWORD *)(v641 + 12))
          {
            if (*(_DWORD *)(v641 + 124) <= v636)
            {
              __break(0xC471u);
              JUMPOUT(0x198E958C4);
            }
            v642 = *(_DWORD *)(*(_QWORD *)(v641 + 112) + 4 * v636);
            if (v642)
            {
              JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), v636, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((4 * v642 + 8 * *(_DWORD *)(v641 + 4) + 4) >> 2) << 34), v620, 120, a6, a7, a8);
              k = 120;
              v10 = v620;
            }
          }
        }
        v643 = *(unsigned __int8 *)(v607 + 2);
        if (v643 == 2)
        {
          if (*v618 >= (unint64_t)*(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9590CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)(a1 + 304) + 120 * *v618 + 40), *(_QWORD *)(a1 + 8), a3, v10, 120, a6, a7, a8);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v978, v979, v980, v981, v982, v983, v984, (int *)&v1069);
          v657 = v15 + 120 * v9;
        }
        else
        {
          if (v643 != 1)
            goto LABEL_9;
          v644 = *(unsigned int *)(v607 + 8);
          if ((_DWORD)v644 == -1)
          {
            v1002 = *(_QWORD *)(a1 + 8);
            v1031 = *(_DWORD *)(v1021 + 120 * v617 + 36);
            JSC::MacroAssembler::jump(v1002, &v1031, a3, v644, 120, a6, a7, a8);
          }
          else
          {
            JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 3, v622, v644, 120, a6, a7, a8, (uint64_t)&v1069);
            v1032 = *(_DWORD *)(v1021 + 120 * v617 + 36);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v1069, &v1032, *(_QWORD *)(a1 + 8), v645, v646, v647, v648, v649);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v650, v651, v652, v653, v654, v655, v656, (int *)&v1069);
          v657 = v15 + 120 * v9;
        }
        *(_DWORD *)(v657 + 36) = v1069;
        v10 = v620;
LABEL_25:
        k = 120;
        goto LABEL_9;
      case 0xFu:
        v594 = v15 + 120 * v9;
        v389 = v10;
        JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)*(unsigned int *)(*(_QWORD *)(v594 + 24) + 44) << 35) | 0x1F, v10, 120, a6, a7, a8);
        k = 120;
        v10 = v389;
        a3 = *(unsigned int *)(v594 + 96);
        if (!(_DWORD)a3)
          goto LABEL_9;
        v595 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
        JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v595, a3, v595, 120, a6, a7, a8);
LABEL_307:
        k = 120;
        v10 = v389;
        goto LABEL_9;
      case 0x10u:
        v571 = *(_QWORD *)(v15 + 120 * v9 + 24);
        v466 = v10;
        JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)*(unsigned int *)(v571 + 44) << 35) | 0x1F, *(char *)(*(_QWORD *)(a1 + 40) + 1), v10, 120, a6, a7, a8);
        k = 120;
        v10 = v466;
        if ((*(_BYTE *)(v571 + 1) & 2) == 0)
          goto LABEL_9;
        if (*(_BYTE *)(a1 + 81) == 1)
        {
          v972 = *(_DWORD *)(v571 + 28);
          if (v972)
          {
            v973 = *(unsigned int *)(v571 + 24);
            if (v972 >= v973)
            {
              do
              {
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::clearSubpatternStart(a1, v973, a3, v10, k, a6, a7, a8);
                v973 = (v973 + 1);
              }
              while (v973 <= *(_DWORD *)(v571 + 28));
            }
          }
        }
        v572 = v15 + 120 * v9;
        v573 = *(_QWORD *)(a1 + 8);
        JSC::ARM64Assembler::label((_DWORD *)(v573 + 32), a2, a3, v10, k, a6, a7, a8, (int *)&v1069);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v573 + 56), 335544320, v574, v575, v576, v577, v578, v579);
        if (*(_BYTE *)(v573 + 328))
          v586 = 69;
        else
          v586 = 65;
        v1027[0] = v1069;
        v1027[1] = 0;
        v1028 = v586;
        v1029 = 15;
        v1030 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v572 + 40), v1027, v580, v581, v582, v583, v584, v585);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), v587, v588, v589, v590, v591, v592, v593, (int *)&v1069);
        *(_DWORD *)(v572 + 36) = v1069;
LABEL_362:
        v10 = v466;
        goto LABEL_25;
      case 0x11u:
        v19 = *(_QWORD *)(v15 + 120 * v9 + 24);
        if (*(_BYTE *)v19 != 3)
        {
          switch(*(_BYTE *)v19)
          {
            case 0:
              if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) != 0)
              {
                v764 = *(_QWORD *)(a1 + 40);
                v765 = *(_BYTE *)(v764 + 9);
                *(_QWORD *)&v1069 = &v1070;
                *((_QWORD *)&v1069 + 1) = 2;
                v766 = *(_DWORD *)(v19 + 40);
                if (!v766)
                {
                  v767 = v10;
                  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(v764 + 1), *(unsigned int *)(v15 + 120 * v9 + 100), 120, a6, a7, a8, (uint64_t)&v1087);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1069, &v1087, v768, v769, v770, v771, v772, v773);
                  v10 = v767;
                  v766 = *(_DWORD *)(v19 + 40);
                }
                v774 = *(_DWORD *)(v15 + 120 * v9 + 100);
                v28 = v774 >= v766;
                v775 = v774 - v766;
                if (!v28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E958DCLL);
                }
                if (v775 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E958E4);
                }
                v466 = v10;
                v776 = v765;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, v775 + 1, v776, v10, k, a6, a7, a8);
                JSC::Yarr::YarrPattern::newlineCharacterClass(*(JSC::Yarr::YarrPattern **)(a1 + 56));
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, v776, (uint64_t)&v1069, v777, v778, v779, v780, v781);
                v782 = (_DWORD *)(v15 + 120 * v9 + 40);
                v783 = *(_QWORD *)(a1 + 8);
                JSC::ARM64Assembler::label((_DWORD *)(v783 + 32), v784, v785, v786, v787, v788, v789, v790, (int *)&v1082);
                JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v783 + 56), 335544320, v791, v792, v793, v794, v795, v796);
                if (*(_BYTE *)(v783 + 328))
                  v803 = 69;
                else
                  v803 = 65;
                v1077 = v1082;
                LOBYTE(v1078) = v803;
                *(_WORD *)((char *)&v1078 + 1) = 15;
                BYTE3(v1078) = -1;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v782, &v1077, v797, v798, v799, v800, v801, v802);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v1069, *(_QWORD *)(a1 + 8), v804, v805, v806, v807, v808, v809);
                v812 = v1069;
                if (&v1070 != (unsigned int **)v1069 && (_QWORD)v1069)
                {
                  *(_QWORD *)&v1069 = 0;
                  DWORD2(v1069) = 0;
                  WTF::fastFree(v812, (void *)a2, a3, v810, v811, a6, a7, a8);
                }
                goto LABEL_362;
              }
              v89 = v10;
              v90 = *(_DWORD *)(v19 + 40);
              v91 = (_DWORD *)(v15 + 120 * v9 + 40);
              v92 = *(_QWORD *)(a1 + 8);
              if (v90)
              {
                JSC::ARM64Assembler::label((_DWORD *)(v92 + 32), a2, a3, v10, 120, a6, a7, a8, (int *)&v1087);
                JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v92 + 56), 335544320, v874, v875, v876, v877, v878, v879);
                if (*(_BYTE *)(v92 + 328))
                  v880 = 69;
                else
                  v880 = 65;
                *(_QWORD *)&v1069 = v1087;
                BYTE8(v1069) = v880;
                *(_WORD *)((char *)&v1069 + 9) = 15;
                BYTE11(v1069) = -1;
                v762 = &v1069;
                v763 = (_DWORD *)(v15 + 120 * v9 + 40);
                goto LABEL_523;
              }
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(unsigned int *)(v15 + 120 * v9 + 100), 120, a6, a7, a8, (uint64_t)&v1069);
              k = 120;
              v93 = v1069;
              v10 = v89;
              if ((_DWORD)v1069 == -1)
                goto LABEL_9;
              goto LABEL_78;
            case 1:
              if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) != 0)
              {
                v823 = *(char **)(a1 + 40);
                v824 = v823[9];
                *(_QWORD *)&v1069 = &v1070;
                *((_QWORD *)&v1069 + 1) = 2;
                v825 = v15 + 120 * v9;
                v828 = *(_DWORD *)(v825 + 100);
                v827 = (unsigned int *)(v825 + 100);
                v826 = v828;
                v829 = *(_DWORD *)(v19 + 40);
                v830 = v10;
                if (v828 == v829)
                {
                  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v823[1], v823[2], 120, a6, a7, a8, (uint64_t)&v1087);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1069, &v1087, v831, v832, v833, v834, v835, v836);
                  v826 = *v827;
                  v829 = *(_DWORD *)(v19 + 40);
                }
                if (v826 < v829)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E958F4);
                }
                v837 = v824;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, v826 - v829, v837, v10, k, a6, a7, a8);
                JSC::Yarr::YarrPattern::newlineCharacterClass(*(JSC::Yarr::YarrPattern **)(a1 + 56));
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, v837, (uint64_t)&v1069, v838, v839, v840, v841, v842);
                v843 = (_DWORD *)(v15 + 120 * v9 + 40);
                v844 = *(_QWORD *)(a1 + 8);
                JSC::ARM64Assembler::label((_DWORD *)(v844 + 32), v845, v846, v847, v848, v849, v850, v851, (int *)&v1082);
                JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v844 + 56), 335544320, v852, v853, v854, v855, v856, v857);
                if (*(_BYTE *)(v844 + 328))
                  v864 = 69;
                else
                  v864 = 65;
                v1077 = v1082;
                LOBYTE(v1078) = v864;
                *(_WORD *)((char *)&v1078 + 1) = 15;
                BYTE3(v1078) = -1;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v843, &v1077, v858, v859, v860, v861, v862, v863);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v1069, *(_QWORD *)(a1 + 8), v865, v866, v867, v868, v869, v870);
                v873 = v1069;
                if (&v1070 != (unsigned int **)v1069 && (_QWORD)v1069)
                {
                  *(_QWORD *)&v1069 = 0;
                  DWORD2(v1069) = 0;
                  WTF::fastFree(v873, (void *)a2, a3, v871, v872, a6, a7, a8);
                }
                v10 = v830;
                goto LABEL_25;
              }
              v89 = v10;
              v224 = v15 + 120 * v9;
              v225 = *(_DWORD *)(v19 + 40);
              v91 = (_DWORD *)(v224 + 40);
              v226 = *(_QWORD *)(a1 + 8);
              if (*(_DWORD *)(v224 + 100) != v225)
              {
                JSC::ARM64Assembler::label((_DWORD *)(v226 + 32), a2, a3, v10, 120, a6, a7, a8, (int *)&v1087);
                JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v226 + 56), 335544320, v920, v921, v922, v923, v924, v925);
                if (*(_BYTE *)(v226 + 328))
                  v932 = 69;
                else
                  v932 = 65;
                *(_QWORD *)&v1069 = v1087;
                BYTE8(v1069) = v932;
                *(_WORD *)((char *)&v1069 + 9) = 15;
                BYTE11(v1069) = -1;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v91, &v1069, v926, v927, v928, v929, v930, v931);
                v10 = v89;
                goto LABEL_25;
              }
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), 120, a6, a7, a8, (uint64_t)&v1069);
              v93 = v1069;
              v10 = v89;
              k = 120;
              if ((_DWORD)v1069 == -1)
                goto LABEL_9;
LABEL_78:
              v94 = v91[3];
              if ((_DWORD)v94 == v91[2])
              {
                v95 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, (void *)(v94 + 1), (unint64_t)&v1069, v10, 120, a6, a7, a8);
                k = 120;
                v10 = v89;
                v97 = *v95;
                v96 = v95 + 1;
                v93 = v97;
                LODWORD(v94) = v91[3];
              }
              else
              {
                v96 = (_QWORD *)((char *)&v1069 + 4);
              }
              v234 = *(_QWORD *)v91 + 12 * v94;
              *(_DWORD *)v234 = v93;
              *(_QWORD *)(v234 + 4) = *v96;
              goto LABEL_220;
            case 2:
              v135 = v10;
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateAssertionWordBoundary(a1, v9, a3, v10, 120, a6, a7, a8);
              goto LABEL_133;
            case 4:
              v23 = *(unsigned __int8 *)(v19 + 2);
              if (!*(_BYTE *)(v19 + 2))
              {
                if (*(_DWORD *)(v19 + 8) != 1)
                {
                  v135 = v10;
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateCharacterClassFixed(a1, v9, a3, v10, 120, a6, a7, a8);
                  goto LABEL_133;
                }
                v24 = *(char **)(a1 + 40);
                v25 = v24[9];
                if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                {
                  v887 = v10;
                  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, v24[1], v24[2], 120, a6, a7, a8, (uint64_t)&v1069);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v15 + 120 * v9 + 40), &v1069, v888, v889, v890, v891, v892, v893);
                  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)*(unsigned int *)(v19 + 44) << 35) | 0x1F, v894, v895, v896, v897, v898);
                  v10 = v887;
                }
                v26 = *(_DWORD *)(v15 + 120 * v9 + 100);
                v27 = *(_DWORD *)(v19 + 40);
                v28 = v26 >= v27;
                v29 = v26 - v27;
                if (!v28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95784);
                }
                v30 = v10;
                v31 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                LODWORD(v1087) = v29;
                v33 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v1087, v25, v31, 120, a6, a7, a8);
                if (*(_BYTE *)(a1 + 80))
                {
                  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v33, v32, v25, v34, v35, v36, v37);
                  else
                    JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v33, v32, v25, v34, v35, v36, v37);
                }
                else
                {
                  JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v33, v32, v25, v34, v35, v36, v37);
                }
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassTermInner(a1, v19, v15 + 120 * v9 + 40, v25, v38, v39, v40, v41);
                if ((*(_BYTE *)(a1 + 84) & 1) != 0
                  && (*(unsigned __int8 *)(*(_QWORD *)(v19 + 16) + 88) - 1 > 1
                   || (*(_BYTE *)(v19 + 1) & 2) != 0))
                {
                  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, v25, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20), v42, a6, a7, a8, (uint64_t)&v1087);
                  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v899, v900, v901, v902, (uint64_t)&v1077);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v15 + 120 * v9 + 40), &v1077, v903, v904, v905, v906, v907, v908);
                  v909 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                  JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, v909, v909, v910, v911, v912, v913);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1087, *(_QWORD *)(a1 + 8), v914, v915, v916, v917, v918, v919);
                }
                goto LABEL_24;
              }
              if (v23 == 1)
              {
                v204 = *(char **)(a1 + 40);
                v205 = v204[9];
                v206 = v204[10];
                if ((*(_BYTE *)(a1 + 84) & 1) != 0
                  && (*(unsigned __int8 *)(*(_QWORD *)(v19 + 16) + 88) - 1 > 1
                   || (*(_BYTE *)(v19 + 1) & 2) != 0))
                {
                  v881 = v10;
                  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v204[1], ((unint64_t)*(unsigned int *)(v19 + 44) << 35) | 0x1F, v10, 120, a6, a7, a8);
                  v10 = v881;
                }
                v207 = *(_DWORD **)(a1 + 8);
                v208 = v207[50];
                if (v208 + 4 > v207[48])
                {
                  v992 = v10;
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v207 + 14), a2, a3, v10, k, a6, a7, a8);
                  v10 = v992;
                  v208 = v207[50];
                }
                *(_DWORD *)(*((_QWORD *)v207 + 7) + v208) = v206 & 0x1F | 0x52800000;
                v207[50] += 4;
                *(_QWORD *)&v1069 = &v1070;
                *((_QWORD *)&v1069 + 1) = 2;
                v1087 = (int *)&v1089;
                v1088 = 2;
                v209 = *(_DWORD **)(a1 + 8);
                v210 = v209[50];
                v1023 = v10;
                if (v210 < v209[13])
                {
                  v993 = (JSC::AssemblerBuffer *)(v209 + 14);
                  do
                  {
                    if ((v210 + 4) > v209[48])
                    {
                      v1007 = v993;
                      JSC::AssemblerBuffer::outOfLineGrow(v993, a2, a3, v10, k, a6, a7, a8);
                      v993 = v1007;
                      v210 = v209[50];
                    }
                    *(_DWORD *)(*((_QWORD *)v209 + 7) + v210) = -721215457;
                    v210 = v209[50] + 4;
                    v209[50] = v210;
                  }
                  while (v210 < v209[13]);
                }
                v209[52] = 0;
                v211 = v205;
                if (*(_BYTE *)v19 == 4
                  && (v212 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 16) + 88), (v212 - 1) <= 1)
                  && (v212 & 2) != 0
                  && (*(_BYTE *)(v19 + 1) & 2) == 0)
                {
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)1, v211, v10, k, a6, a7, a8);
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::checkNotEnoughInput((uint64_t)&v1077, a1, v211, v365, v366, v367, v368, v369);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1069, &v1077, v370, v371, v372, v373, v374, v375);
                }
                else
                {
                  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), k, a6, a7, a8, (uint64_t)&v1077);
                  v218 = v1077;
                  if ((_DWORD)v1077 != -1)
                  {
                    v219 = HIDWORD(v1069);
                    if (HIDWORD(v1069) == DWORD2(v1069))
                    {
                      v449 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1069, (void *)(HIDWORD(v1069) + 1), (unint64_t)&v1077, v213, v214, v215, v216, v217);
                      v451 = *v449;
                      v450 = v449 + 1;
                      v218 = v451;
                      v219 = HIDWORD(v1069);
                    }
                    else
                    {
                      v450 = (unint64_t *)((char *)&v1077 + 4);
                    }
                    v312 = v1069 + 12 * v219;
                    *(_DWORD *)v312 = v218;
                    *(_QWORD *)(v312 + 4) = *v450;
                    ++HIDWORD(v1069);
                  }
                }
                v313 = *(_DWORD *)(v15 + 120 * v9 + 100);
                v314 = *(_DWORD *)(v19 + 40);
                v28 = v313 >= v314;
                v315 = v313 - v314;
                if (!v28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E957E4);
                }
                v316 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                v1082 = v315;
                v318 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v1082, v211, v316, v214, v215, v216, v217);
                if (*(_BYTE *)(a1 + 80))
                {
                  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v318, v317, v211, v319, v320, v321, v322);
                  else
                    JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v318, v317, v211, v319, v320, v321, v322);
                }
                else
                {
                  JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v318, v317, v211, v319, v320, v321, v322);
                }
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassTermInner(a1, v19, (uint64_t)&v1069, v211, v323, v324, v325, v326);
                if ((*(_BYTE *)(a1 + 84) & 1) != 0)
                {
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::advanceIndexAfterCharacterClassTermMatch(a1, v19, (uint64_t)&v1087, v211, v330, v331, v332, v333);
                }
                else
                {
                  v334 = *(_DWORD **)(a1 + 8);
                  v335 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                  v336 = v334[50];
                  if (v336 + 4 > v334[48])
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v334 + 14), v327, v328, v329, v330, v331, v332, v333);
                    v336 = v334[50];
                  }
                  *(_DWORD *)(*((_QWORD *)v334 + 7) + v336) = v335 | (32 * v335) | 0x11000400;
                  v334[50] += 4;
                }
                v337 = *(_DWORD **)(a1 + 8);
                v338 = v337[50];
                if (v338 + 4 > v337[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v337 + 14), v327, v328, v329, v330, v331, v332, v333);
                  v338 = v337[50];
                }
                v339 = v206;
                *(_DWORD *)(*((_QWORD *)v337 + 7) + v338) = v339 | (32 * v339) | 0x11000400;
                v337[50] += 4;
                v340 = *(unsigned int *)(v19 + 8);
                if ((_DWORD)v340 == -1)
                {
                  v341 = *(_QWORD *)(a1 + 8);
                  v1082 = v210;
                  JSC::MacroAssembler::jump(v341, &v1082, v328, v340, v330, v331, v332, v333);
                }
                else
                {
                  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v206, v340, v330, v331, v332, v333, (uint64_t)&v1082);
                  v1081 = v210;
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v1082, (unsigned int *)&v1081, *(_QWORD *)(a1 + 8), v524, v525, v526, v527, v528);
                  v529 = *(_QWORD *)(a1 + 8);
                  JSC::ARM64Assembler::label((_DWORD *)(v529 + 32), v530, v531, v532, v533, v534, v535, v536, v1080);
                  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v529 + 56), 335544320, v537, v538, v539, v540, v541, v542);
                  if (*(_BYTE *)(v529 + 328))
                    v549 = 69;
                  else
                    v549 = 65;
                  v1082 = v1080[0];
                  v1083 = 0;
                  v1084 = v549;
                  v1085 = 15;
                  v1086 = -1;
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1069, &v1082, v543, v544, v545, v546, v547, v548);
                }
                if (HIDWORD(v1088))
                {
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v1087, *(_QWORD *)(a1 + 8), v343, v344, v345, v346, v347, v348);
                  v882 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
                  JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v882, 1, v882, v883, v884, v885, v886);
                }
                v349 = *(_DWORD **)(a1 + 8);
                v350 = HIDWORD(v1069);
                if (HIDWORD(v1069))
                {
                  v351 = 0;
                  v352 = 0;
                  do
                  {
                    if (v352 >= HIDWORD(v1069))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E9576CLL);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v1069 + v351), (uint64_t)v349, v343, v344, v345, v346, v347, v348);
                    ++v352;
                    v351 += 12;
                  }
                  while (v350 != v352);
                  v349 = *(_DWORD **)(a1 + 8);
                  v339 = v339;
                }
                v353 = v349[50];
                if (v353 < v349[13])
                {
                  do
                  {
                    if ((v353 + 4) > v349[48])
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v349 + 14), v342, v343, v344, v345, v346, v347, v348);
                      v353 = v349[50];
                    }
                    *(_DWORD *)(*((_QWORD *)v349 + 7) + v353) = -721215457;
                    v353 = v349[50] + 4;
                    v349[50] = v353;
                  }
                  while (v353 < v349[13]);
                  v354 = *(_QWORD *)(a1 + 8);
                }
                else
                {
                  v354 = (uint64_t)v349;
                }
                v349[52] = 0;
                *(_DWORD *)(v15 + 120 * v9 + 36) = v353;
                JSC::MacroAssemblerARM64::store64(v354, v339, ((unint64_t)((8 * *(_DWORD *)(v19 + 44) + 8) >> 3) << 35) | 0x1F, v344, v345, v346, v347, v348);
                v357 = (unint64_t)v1087;
                if (&v1089 != (uint64_t *)v1087 && v1087)
                {
                  v1087 = 0;
                  LODWORD(v1088) = 0;
                  WTF::fastFree(v357, (void *)a2, a3, v355, v356, a6, a7, a8);
                }
                v358 = v1069;
                if (&v1070 != (unsigned int **)v1069 && (_QWORD)v1069)
                {
                  *(_QWORD *)&v1069 = 0;
                  DWORD2(v1069) = 0;
                  WTF::fastFree(v358, (void *)a2, a3, v355, v356, a6, a7, a8);
                }
                v10 = v1023;
                goto LABEL_25;
              }
              if (v23 != 2)
                goto LABEL_9;
              v135 = v10;
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateCharacterClassNonGreedy(a1, v9, a3, v10, 120, a6, a7, a8);
              break;
            case 5:
              v135 = v10;
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateBackReference(a1, v9, a3, v10, 120, a6, a7, a8);
              goto LABEL_133;
            case 6:
              *(_WORD *)(a1 + 82) = 258;
              goto LABEL_9;
            case 7:
            case 8:
              __break(0xC471u);
              JUMPOUT(0x198E94060);
            case 9:
              v135 = v10;
              JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateDotStarEnclosure(a1, v9, a3, v10, 120, a6, a7, a8);
              goto LABEL_133;
            default:
              goto LABEL_9;
          }
          goto LABEL_133;
        }
        v20 = *(unsigned __int8 *)(v19 + 2);
        if (*(_BYTE *)(v19 + 2))
        {
          if (v20 == 1)
          {
            v135 = v10;
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterGreedy(a1, v9, a3, v10, 120, a6, a7, a8);
            goto LABEL_133;
          }
          if (v20 == 2)
          {
            v135 = v10;
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterNonGreedy(a1, v9, a3, v10, 120, a6, a7, a8);
            goto LABEL_133;
          }
        }
        else
        {
          if (*(_DWORD *)(v19 + 8) != 1)
          {
            v135 = v10;
            JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterFixed(a1, v9, a3, v10, 120, a6, a7, a8);
            goto LABEL_133;
          }
          if (*(_BYTE *)(v15 + 120 * v9 + 92))
            goto LABEL_9;
          if (v9 + 1 >= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x198E95794);
          }
          v61 = *(unsigned int *)(v19 + 16);
          v62 = *(_BYTE *)(a1 + 80);
          if (v61 < 0x100 || *(_BYTE *)(a1 + 80) != 0)
          {
            v64 = *(char **)(a1 + 40);
            LOBYTE(v1081) = v64[9];
            v65 = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2);
            if ((v65 & 4) != 0)
              v66 = 32 * ((v61 | 0x20) - 97 < 0x1A);
            else
              v66 = 0;
            if (v62)
              v67 = 4;
            else
              v67 = 8;
            v68 = *(_DWORD *)(v19 + 40);
            if (v62)
              v69 = 4;
            else
              v69 = 3;
            if ((v65 & 4) != 0)
            {
              v70 = 0;
              v98 = v67 - 1;
              v99 = v15 + v11;
              v100 = v10 + v14;
              v101 = v68 + 1;
              v66 = 32 * ((v61 | 0x20) - 97 < 0x1A);
              if (v62)
              {
                while (*(_BYTE *)(v99 + 8) == 17)
                {
                  v102 = *(_BYTE **)v99;
                  if (**(_BYTE **)v99 != 3
                    || v102[2]
                    || *((_DWORD *)v102 + 2) != 1
                    || v101 + (_DWORD)v70 != *((_DWORD *)v102 + 10)
                    || *((_DWORD *)v102 + 4) >= 0x10000u && (*(_BYTE *)(a1 + 84) & 1) != 0)
                  {
                    break;
                  }
                  *(_BYTE *)(v99 + 68) = 1;
                  if (v100 == v70)
                    goto LABEL_687;
                  v103 = *((unsigned int *)v102 + 4);
                  v104 = ((_DWORD)v70 + 1) << v69;
                  a2 = 32 << v104;
                  if ((v103 | 0x20) - 97 >= 0x1A)
                    v105 = 0;
                  else
                    v105 = 32 << v104;
                  v66 |= v105;
                  v61 |= v103 << v104;
                  ++v70;
                  v99 += 120;
                  if (v98 == v70)
                    goto LABEL_107;
                }
              }
              else
              {
                while (*(_BYTE *)(v99 + 8) == 17)
                {
                  v106 = *(_BYTE **)v99;
                  if (**(_BYTE **)v99 != 3
                    || v106[2]
                    || *((_DWORD *)v106 + 2) != 1
                    || v101 + (_DWORD)v70 != *((_DWORD *)v106 + 10)
                    || *((_DWORD *)v106 + 4) >= 0x10000u && (*(_BYTE *)(a1 + 84) & 1) != 0)
                  {
                    break;
                  }
                  *(_BYTE *)(v99 + 68) = 1;
                  v107 = *((unsigned int *)v106 + 4);
                  if (v107 > 0xFF)
                  {
LABEL_630:
                    v751 = v15 + 120 * v9 + 40;
                    v994 = *(_QWORD *)(a1 + 8);
                    v89 = v10;
                    JSC::ARM64Assembler::label((_DWORD *)(v994 + 32), a2, a3, v10, 120, a6, a7, a8, (int *)&v1087);
                    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v994 + 56), 335544320, v995, v996, v997, v998, v999, v1000);
                    if (*(_BYTE *)(v994 + 328))
                      v1001 = 69;
                    else
                      v1001 = 65;
                    *(_QWORD *)&v1069 = v1087;
                    BYTE8(v1069) = v1001;
                    *(_WORD *)((char *)&v1069 + 9) = 15;
                    BYTE11(v1069) = -1;
                    v762 = &v1069;
                    goto LABEL_522;
                  }
                  if (v100 == v70)
                  {
LABEL_687:
                    __break(0xC471u);
                    JUMPOUT(0x198E9579CLL);
                  }
                  v108 = ((_DWORD)v70 + 1) << v69;
                  a2 = 32 << v108;
                  if ((v107 | 0x20) - 97 >= 0x1A)
                    v109 = 0;
                  else
                    v109 = 32 << v108;
                  v66 |= v109;
                  v61 |= v107 << v108;
                  ++v70;
                  v99 += 120;
                  if (v98 == v70)
                    goto LABEL_107;
                }
              }
            }
            else
            {
              v70 = 0;
              v71 = v67 - 1;
              v72 = v15 + v11;
              v73 = v10 + v14;
              v74 = v68 + 1;
              if (v62)
              {
                while (*(_BYTE *)(v72 + 8) == 17)
                {
                  v75 = *(_BYTE **)v72;
                  if (**(_BYTE **)v72 != 3
                    || v75[2]
                    || *((_DWORD *)v75 + 2) != 1
                    || v74 + (_DWORD)v70 != *((_DWORD *)v75 + 10)
                    || *((_DWORD *)v75 + 4) >= 0x10000u && (*(_BYTE *)(a1 + 84) & 1) != 0)
                  {
                    break;
                  }
                  *(_BYTE *)(v72 + 68) = 1;
                  if (v73 == v70)
                    goto LABEL_687;
                  v61 |= (unint64_t)*((unsigned int *)v75 + 4) << (((int)v70++ + 1) << v69);
                  v72 += 120;
                  if (v71 == v70)
                    goto LABEL_107;
                }
              }
              else
              {
                while (*(_BYTE *)(v72 + 8) == 17)
                {
                  v86 = *(_BYTE **)v72;
                  if (**(_BYTE **)v72 != 3
                    || v86[2]
                    || *((_DWORD *)v86 + 2) != 1
                    || v74 + (_DWORD)v70 != *((_DWORD *)v86 + 10)
                    || *((_DWORD *)v86 + 4) >= 0x10000u && (*(_BYTE *)(a1 + 84) & 1) != 0)
                  {
                    break;
                  }
                  *(_BYTE *)(v72 + 68) = 1;
                  v87 = *((unsigned int *)v86 + 4);
                  if (v87 > 0xFF)
                    goto LABEL_630;
                  if (v73 == v70)
                    goto LABEL_687;
                  v61 |= v87 << (((int)v70++ + 1) << v69);
                  v72 += 120;
                  if (v71 == v70)
                    goto LABEL_107;
                }
              }
            }
            LODWORD(v67) = v70 + 1;
LABEL_107:
            if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            {
              v813 = v10;
              JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, v64[1], v64[2], 120, a6, a7, a8, (uint64_t)v1080);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(v15 + 120 * v9 + 40), v1080, v814, v815, v816, v817, v818, v819);
              k = 120;
              v10 = v813;
              v62 = *(_BYTE *)(a1 + 80);
            }
            if (v62)
            {
              *(_QWORD *)&v1069 = v15 + 120 * v9;
              *((_QWORD *)&v1069 + 1) = a1;
              v1070 = (unsigned int *)&v1081;
              v1087 = (int *)a1;
              v1088 = (uint64_t)&v1081;
              v1089 = v1069;
              v1077 = a1;
              v1078 = (unsigned int *)&v1081;
              v1079 = v1069;
              switch((int)v67)
              {
                case 1:
                  v820 = *(_DWORD *)(v15 + 120 * v9 + 100);
                  v821 = v820 - v68;
                  if (v820 < v68)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E958ECLL);
                  }
                  v466 = v10;
                  v822 = v61;
                  goto LABEL_616;
                case 2:
                  v985 = *(_DWORD *)(v15 + 120 * v9 + 100);
                  if (v985 < v68)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E95914);
                  }
                  v466 = v10;
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#2}::operator()((uint64_t)&v1087, v985 - v68, v61, v66, 120, a6, a7, a8);
                  goto LABEL_362;
                case 3:
                  v986 = v15 + 120 * v9;
                  v988 = *(_DWORD *)(v986 + 100);
                  v987 = (_DWORD *)(v986 + 100);
                  v989 = v988 - v68;
                  if (v988 < v68)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E9591CLL);
                  }
                  v466 = v10;
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#2}::operator()((uint64_t)&v1087, v989, v61, v66, 120, a6, a7, a8);
                  v990 = *v987 - v68;
                  if (*v987 < v68)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E95924);
                  }
                  v821 = v990 - 2;
                  if ((unint64_t)(v990 - 2) >> 32)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E9592CLL);
                  }
                  v822 = WORD2(v61);
LABEL_616:
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,char32_t)#1}::operator()((uint64_t *)&v1069, v821, v822, v10, k, a6, a7, a8);
                  goto LABEL_362;
                case 4:
                  v991 = *(_DWORD *)(v15 + 120 * v9 + 100);
                  if (v991 < v68)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E95934);
                  }
                  v466 = v10;
                  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned long long,unsigned long long)#2}::operator()((uint64_t)&v1077, v991 - v68, v61, (JSC::ARM64LogicalImmediate *)v66, 120, a6, a7, a8);
                  goto LABEL_362;
                default:
                  goto LABEL_9;
              }
            }
            *(_QWORD *)&v1069 = v15 + 120 * v9;
            *((_QWORD *)&v1069 + 1) = a1;
            v1070 = (unsigned int *)&v1081;
            v1087 = (int *)a1;
            v1088 = (uint64_t)&v1081;
            v1089 = v1069;
            v1077 = a1;
            v1078 = (unsigned int *)&v1081;
            v1079 = v1069;
            switch((int)v67)
            {
              case 1:
                v110 = v10;
                v111 = *(_DWORD *)(v15 + 120 * v9 + 100);
                v112 = v111 - v68;
                if (v111 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E957A4);
                }
                v113 = (char)v1081;
                v114 = a1;
                v115 = v61;
                goto LABEL_113;
              case 2:
                v310 = *(_DWORD *)(v15 + 120 * v9 + 100);
                if (v310 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E957DCLL);
                }
                v30 = v10;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()((uint64_t)&v1087, v310 - v68, (unsigned __int16)v61, (unsigned __int16)v66, 120, a6, a7, a8);
                goto LABEL_24;
              case 3:
                v550 = v15 + 120 * v9;
                v552 = *(_DWORD *)(v550 + 100);
                v551 = (_DWORD *)(v550 + 100);
                v553 = v552 - v68;
                if (v552 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95884);
                }
                v466 = v10;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()((uint64_t)&v1087, v553, (unsigned __int16)v61, (unsigned __int16)v66, 120, a6, a7, a8);
                v559 = *v551 - v68;
                if (*v551 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E9588CLL);
                }
                if ((unint64_t)(v559 - 2) >> 32)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95894);
                }
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,char32_t)#1}::operator()((uint64_t *)&v1069, v559 - 2, BYTE2(v61), v554, v555, v556, v557, v558);
                goto LABEL_362;
              case 4:
                v364 = *(_DWORD *)(v15 + 120 * v9 + 100);
                if (v364 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E957F4);
                }
                v30 = v10;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t)&v1077, v364 - v68, v61, v66, 120, a6, a7, a8);
                goto LABEL_24;
              case 5:
                v510 = v15 + 120 * v9;
                v512 = *(_DWORD *)(v510 + 100);
                v511 = (_DWORD *)(v510 + 100);
                v513 = v512 - v68;
                if (v512 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95864);
                }
                v110 = v10;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t)&v1077, v513, v61, v66, 120, a6, a7, a8);
                v514 = *v511 - v68;
                if (*v511 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E9586CLL);
                }
                v112 = v514 - 4;
                if ((unint64_t)(v514 - 4) >> 32)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95874);
                }
                v115 = BYTE4(v61);
                goto LABEL_404;
              case 6:
                v462 = v15 + 120 * v9;
                v464 = *(_DWORD *)(v462 + 100);
                v463 = (_DWORD *)(v462 + 100);
                v465 = v464 - v68;
                if (v464 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E9581CLL);
                }
                v466 = v10;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t)&v1077, v465, v61, v66, 120, a6, a7, a8);
                v471 = *v463 - v68;
                if (*v463 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95824);
                }
                if ((unint64_t)(v471 - 4) >> 32)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E9582CLL);
                }
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()((uint64_t)&v1087, v471 - 4, WORD2(v61), WORD2(v66), v467, v468, v469, v470);
                goto LABEL_362;
              case 7:
                v500 = v15 + 120 * v9;
                v502 = *(_DWORD *)(v500 + 100);
                v501 = (_DWORD *)(v500 + 100);
                v503 = v502 - v68;
                if (v502 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E9583CLL);
                }
                v110 = v10;
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()((uint64_t)&v1077, v503, v61, v66, 120, a6, a7, a8);
                v508 = *v501 - v68;
                if (*v501 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95844);
                }
                if ((unint64_t)(v508 - 4) >> 32)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E9584CLL);
                }
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()((uint64_t)&v1087, v508 - 4, WORD2(v61), WORD2(v66), v504, v505, v506, v507);
                v509 = *v501 - v68;
                if (*v501 < v68)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95854);
                }
                v112 = v509 - 6;
                if ((unint64_t)(v509 - 6) >> 32)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E9585CLL);
                }
                v115 = BYTE6(v61);
LABEL_404:
                v113 = (char)v1081;
                v114 = a1;
LABEL_113:
                JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfCharNotEquals((uint64_t)&v1082, v114, v115, v112, v113, a6, a7, a8);
                goto LABEL_114;
              case 8:
                v431 = *(_DWORD *)(v15 + 120 * v9 + 100);
                v28 = v431 >= v68;
                v432 = v431 - v68;
                if (!v28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E95814);
                }
                v110 = v10;
                v433 = *(_QWORD *)(a1 + 8);
                v1082 = v432;
                v434 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v1082, (char)v1081, *(char *)(*(_QWORD *)(a1 + 40) + 1), 120, a6, a7, a8);
                JSC::MacroAssemblerARM64::load64(v433, v434, v435, (char)v1081, v435, v436, v437, v438);
                if (v66)
                  JSC::MacroAssemblerARM64::or64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)v66, (char)v1081);
                JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 1, (char)v1081, v61 | v66, v439, v440, v441, v442, (uint64_t)&v1082);
LABEL_114:
                v116 = v1082;
                v10 = v110;
                k = 120;
                if (v1082 != -1)
                {
                  v117 = (_QWORD *)(v15 + 120 * v9 + 40);
                  v118 = v15 + 120 * v9;
                  v121 = *(_DWORD *)(v118 + 52);
                  v120 = (_DWORD *)(v118 + 52);
                  v119 = v121;
                  if (v121 == *(v120 - 1))
                  {
                    v122 = (unsigned int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, (void *)(v119 + 1), (unint64_t)&v1082, v110, 120, a6, a7, a8);
                    k = 120;
                    v10 = v110;
                    v124 = *v122;
                    v123 = v122 + 1;
                    v116 = v124;
                    LODWORD(v119) = *v120;
                  }
                  else
                  {
                    v123 = &v1083;
                  }
                  v311 = *v117 + 12 * v119;
                  *(_DWORD *)v311 = v116;
                  *(_QWORD *)(v311 + 4) = *(_QWORD *)v123;
                  ++*v120;
                }
                break;
              default:
                goto LABEL_9;
            }
            goto LABEL_9;
          }
          v452 = *(_QWORD *)(a1 + 8);
          for (n = *(_DWORD *)(v452 + 200); (signed int)n < *(_DWORD *)(v452 + 52); k = 120)
          {
            v1003 = v10;
            if (n + 4 > *(_DWORD *)(v452 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v452 + 56), a2, a3, v10, 120, a6, a7, a8);
              n = *(_DWORD *)(v452 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v452 + 56) + n) = -721215457;
            n = *(_DWORD *)(v452 + 200) + 4;
            *(_DWORD *)(v452 + 200) = n;
            v10 = v1003;
          }
          v454 = n;
          if (n + 4 > *(_DWORD *)(v452 + 192))
          {
            v1004 = v10;
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v452 + 56), a2, a3, v10, 120, a6, a7, a8);
            k = 120;
            v10 = v1004;
            v454 = *(_DWORD *)(v452 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v452 + 56) + v454) = 335544320;
          *(_DWORD *)(v452 + 200) += 4;
          if (*(_BYTE *)(v452 + 328))
            v455 = 69;
          else
            v455 = 65;
          *(_QWORD *)&v1069 = n;
          BYTE8(v1069) = v455;
          *(_WORD *)((char *)&v1069 + 9) = 15;
          BYTE11(v1069) = -1;
          if (n != -1)
          {
            v91 = (_DWORD *)(v15 + 120 * v9 + 40);
            v456 = *(unsigned int *)(v15 + 120 * v9 + 52);
            if ((_DWORD)v456 == *(_DWORD *)(v15 + 120 * v9 + 48))
            {
              v457 = v10;
              v458 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15 + 120 * v9 + 40, (void *)(v456 + 1), (unint64_t)&v1069, v10, 120, a6, a7, a8);
              k = 120;
              v10 = v457;
              v460 = *v458;
              v459 = v458 + 1;
              v461 = *(_QWORD *)(v15 + 120 * v9 + 40) + 12 * *(unsigned int *)(v15 + 120 * v9 + 52);
              *(_DWORD *)v461 = v460;
            }
            else
            {
              v459 = (_QWORD *)((char *)&v1069 + 4);
              v461 = *(_QWORD *)v91 + 12 * v456;
              *(_DWORD *)v461 = n;
            }
            *(_QWORD *)(v461 + 4) = *v459;
LABEL_220:
            ++v91[3];
          }
        }
        goto LABEL_9;
      case 0x12u:
        v30 = v10;
        v88 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 28);
        if (v88)
        {
          if (v88 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198E957ECLL);
          }
          v359 = 8 * v88 + 63;
          a2 = v359 & 0xFFFFFFC0;
          if ((v359 & 0xFFFFFFC0) != 0)
            JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), a2, 31, 31, 120, a6, a7, a8);
        }
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateFailReturn(a1, a2, a3, v10, k, a6, a7, a8);
        goto LABEL_24;
      default:
        goto LABEL_9;
    }
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMooreData &)::{lambda(JSC::LinkBuffer &)#2}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35BA0E8;
  *(_QWORD *)(v4 + 16) = *a2;
  v5 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 240))
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v5);
LABEL_12:
    *v6 = v4;
    *(_DWORD *)(a1 + 244) = v5 + 1;
    return;
  }
  v7 = v5 + (v5 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v5 + 1)
    v9 = v5 + 1;
  else
    v9 = v8;
  if (!(v9 >> 29))
  {
    v10 = *(const void **)(a1 + 232);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a1 + 240) = v9;
    *(_QWORD *)(a1 + 232) = v11;
    memcpy(v11, v10, 8 * v5);
    if (v10)
    {
      if (*(const void **)(a1 + 232) == v10)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
    }
    v5 = *(unsigned int *)(a1 + 244);
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v5);
    goto LABEL_12;
  }
  __break(0xC471u);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCompileAlternative(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, double a10, __n128 a11)
{
  uint64_t v11;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  WTF *v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF *v46;
  int v47;
  int v48;
  uint64_t v49;
  WTF *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  WTF *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  _OWORD *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v77;
  char v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  unint64_t v95;
  int v96;
  int v97;
  WTF *v98;
  uint64_t v99;
  _BYTE *v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  _BYTE *v109;
  unsigned int v110;
  char v111;
  char v112;
  char v113;
  _BYTE v114[36];
  int v115;
  WTF *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[12];
  char v120;
  _BYTE v121[12];
  uint64_t v122;
  uint64_t v123;

  v11 = a3;
  v123 = *MEMORY[0x1E0C80C00];
  v14 = *(unsigned int *)(a3 + 12);
  if (v14 >= 2)
  {
    v15 = 64;
    v16 = 1;
    do
    {
      if (v16 - 1 >= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198E963A8);
      }
      if (v16 >= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198E963B0);
      }
      v17 = *(_QWORD *)a3;
      v18 = *(_QWORD *)a3 + v15;
      v19 = v18 - 64;
      if (*(_BYTE *)(v18 - 64) == 4 && *(_BYTE *)(v18 - 62) == 0)
      {
        v63 = v18 - 16;
        if (((*(_BYTE *)(a1 + 84) & 1) == 0
           || *(unsigned __int8 *)(*(_QWORD *)(v17 + v15 - 48) + 88) - 1 <= 1
           && (*(_BYTE *)(v17 + v15 - 63) & 2) == 0)
          && *(_BYTE *)v63 == 3)
        {
          v64 = v17 + v15;
          if (!*(_BYTE *)(v64 - 14))
          {
            LOWORD(v109) = *(_WORD *)v19;
            BYTE2(v109) = *(_BYTE *)(v19 + 2);
            v65 = *(_QWORD *)(v64 - 60);
            *(_OWORD *)&v114[4] = *(_OWORD *)(v64 - 48);
            *(_OWORD *)&v114[20] = *(_OWORD *)(v64 - 32);
            *(_WORD *)v19 = *(_WORD *)v63;
            *(_BYTE *)(v19 + 2) = *(_BYTE *)(v63 + 2);
            *(_QWORD *)(v64 - 60) = *(_QWORD *)(v64 - 12);
            a11 = *(__n128 *)v64;
            v66 = *(_OWORD *)(v64 + 16);
            *(_OWORD *)(v64 - 48) = *(_OWORD *)v64;
            *(_OWORD *)(v64 - 32) = v66;
            if (v16 >= *(unsigned int *)(a3 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198E963B8);
            }
            v67 = (_OWORD *)(*(_QWORD *)a3 + v15);
            *((_WORD *)v67 - 8) = (_WORD)v109;
            *((_BYTE *)v67 - 14) = BYTE2(v109);
            *(_QWORD *)((char *)v67 - 12) = v65;
            *v67 = *(_OWORD *)&v114[4];
            a9 = *(__n128 *)&v114[20];
            v67[1] = *(_OWORD *)&v114[20];
            v14 = *(unsigned int *)(a3 + 12);
          }
        }
      }
      v15 += 48;
    }
    while (v14 - 1 > v16++);
  }
  if (v14)
  {
    v22 = 0;
    v23 = (uint64_t *)(a1 + 304);
    a11.n128_u64[0] = 4278193985;
    do
    {
      v24 = *(_QWORD *)v11;
      v25 = (_BYTE *)(*(_QWORD *)v11 + 48 * v22);
      v109 = v25;
      v26 = *v25;
      if (v26 != 7)
      {
        if (v26 == 8)
        {
          v108 = *a2;
          v104 = a11;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCompileParentheticalAssertion(a1, &v108, (uint64_t)v25, a4, a5, a6, a7, a8, a9);
          a11 = v104;
        }
        else
        {
          v27 = *(_DWORD *)(a1 + 316);
          if (v27 == *(_DWORD *)(a1 + 312))
          {
            v104 = a11;
            WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm *&>(a1 + 304, &v109, a3, a4, a5, a6, a7, a8);
            a11 = v104;
            v29 = *(_DWORD *)(a1 + 316);
          }
          else
          {
            v28 = *(_QWORD *)(a1 + 304) + 120 * v27;
            *(_QWORD *)(v28 + 24) = v25;
            v29 = v27 + 1;
            *(_BYTE *)(v28 + 32) = 17;
            *(_DWORD *)(v28 + 36) = -1;
            *(_QWORD *)(v28 + 40) = v28 + 56;
            *(_QWORD *)(v28 + 48) = 2;
            *(_QWORD *)(v28 + 80) = 0xFFFFFFFFLL;
            *(_DWORD *)(v28 + 88) = a11.n128_u32[0];
            *(_BYTE *)(v28 + 92) = 0;
            *(_QWORD *)(v28 + 96) = 0;
            *(_DWORD *)(v28 + 104) = -1;
            *(_QWORD *)(v28 + 112) = 0;
            *(_DWORD *)(a1 + 316) = v29;
          }
          if (!v29)
            goto LABEL_108;
          *(_DWORD *)(*v23 + 120 * v29 - 20) = *a2;
        }
        goto LABEL_18;
      }
      v53 = *a2;
      v111 = 6;
      v68 = *(unint64_t **)(a1 + 48);
      if (v68)
        v69 = *v68;
      else
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 93104);
      if ((unint64_t)&v96 < v69)
      {
        v94 = 263;
        goto LABEL_88;
      }
      v70 = v24 + 48 * v22;
      v71 = *(_DWORD *)(v70 + 4);
      v72 = *(_DWORD *)(v70 + 8);
      if (v71)
      {
        if (v71 != v72)
        {
          v94 = 260;
LABEL_88:
          *(_WORD *)(a1 + 82) = v94;
          goto LABEL_18;
        }
      }
      else
      {
        v71 = v72;
      }
      v73 = v24 + 48 * v22;
      v74 = v73 + 16;
      v75 = *(_BYTE *)(v73 + 32);
      if (v71 == 1 && (v75 & 1) == 0)
      {
        v77 = 9;
        v113 = 9;
        v112 = 10;
        if (*(_DWORD *)(*(_QWORD *)v74 + 12) != 1)
        {
          v78 = 3;
          v111 = 3;
          v102 = 4;
          v97 = 5;
          v77 = 9;
          v79 = 10;
LABEL_60:
          v96 = v79;
          goto LABEL_61;
        }
        v93 = 10;
      }
      else
      {
        if ((v75 & 2) != 0)
        {
          v77 = 11;
          v113 = 11;
          v96 = 12;
          v112 = 12;
          goto LABEL_75;
        }
        if (!*(_BYTE *)(v24 + 48 * v22 + 2))
        {
          v94 = 262;
          goto LABEL_88;
        }
        *(_BYTE *)(a1 + 92) = 1;
        v77 = 13;
        v113 = 13;
        v112 = 14;
        if (*(_DWORD *)(*(_QWORD *)v74 + 12) != 1)
        {
          v78 = 3;
          v111 = 3;
          v102 = 4;
          v97 = 5;
          v77 = 13;
          v79 = 14;
          goto LABEL_60;
        }
        v93 = 14;
      }
      v96 = v93;
LABEL_75:
      v102 = 7;
      v97 = 8;
      v78 = 6;
LABEL_61:
      v54 = *(unsigned int *)(a1 + 316);
      v80 = *(_DWORD *)(a1 + 312);
      v103 = v54;
      if ((_DWORD)v54 == v80)
      {
        v101 = v53;
        v104 = a11;
        v107 = v74;
        WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOpCode &>(a1 + 304, &v113, a3, a4, a5, a6, a7, a8);
        v74 = v107;
        v54 = v103;
        v53 = v101;
        a11 = v104;
        v82 = *(_DWORD *)(a1 + 316);
        v80 = *(_DWORD *)(a1 + 312);
      }
      else
      {
        v81 = *(_QWORD *)(a1 + 304) + 120 * v54;
        *(_BYTE *)(v81 + 32) = v77;
        v82 = v54 + 1;
        *(_DWORD *)(v81 + 36) = -1;
        *(_QWORD *)(v81 + 40) = v81 + 56;
        *(_QWORD *)(v81 + 48) = 2;
        *(_QWORD *)(v81 + 80) = 0xFFFFFFFFLL;
        *(_DWORD *)(v81 + 88) = a11.n128_u32[0];
        *(_BYTE *)(v81 + 92) = 0;
        *(_QWORD *)(v81 + 96) = 0;
        *(_DWORD *)(v81 + 104) = -1;
        *(_QWORD *)(v81 + 112) = 0;
        *(_DWORD *)(a1 + 316) = v54 + 1;
      }
      if (v82 == v80)
      {
        v101 = v53;
        v104 = a11;
        v51 = v74;
        WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOpCode &>(a1 + 304, &v111, a3, a4, a5, a6, a7, a8);
        v74 = v51;
        v54 = v103;
        v53 = v101;
        a11 = v104;
        LODWORD(v51) = *(_DWORD *)(a1 + 316);
      }
      else
      {
        v83 = *(_QWORD *)(a1 + 304) + 120 * v82;
        *(_BYTE *)(v83 + 32) = v78;
        LODWORD(v51) = v82 + 1;
        *(_DWORD *)(v83 + 36) = -1;
        *(_QWORD *)(v83 + 40) = v83 + 56;
        *(_QWORD *)(v83 + 48) = 2;
        *(_QWORD *)(v83 + 80) = 0xFFFFFFFFLL;
        *(_DWORD *)(v83 + 88) = a11.n128_u32[0];
        *(_BYTE *)(v83 + 92) = 0;
        *(_QWORD *)(v83 + 96) = 0;
        *(_DWORD *)(v83 + 104) = -1;
        *(_QWORD *)(v83 + 112) = 0;
        *(_DWORD *)(a1 + 316) = v82 + 1;
      }
      if (!(_DWORD)v51)
      {
        __break(0xC471u);
        JUMPOUT(0x198E963E0);
      }
      v86 = v51;
      v85 = v51 - 1;
      v57 = *v23;
      v84 = *v23 + 120 * v85;
      *(_QWORD *)(v84 + 8) = -1;
      *(_QWORD *)(v84 + 24) = v25;
      v55 = *(_QWORD *)v74;
      if (*(_DWORD *)(v55 + 12))
      {
        v60 = 0;
        v98 = (WTF *)&v118;
        v99 = v55;
        v100 = (_BYTE *)(v24 + 48 * v22 + 2);
        v104 = a11;
        v101 = v53;
        while (1)
        {
          a3 = *(_QWORD *)(*(_QWORD *)v55 + 8 * v60);
          v30 = v51 - 1;
          v31 = *(_DWORD *)(a3 + 24);
          v32 = v57 + 120 * v30;
          *(_DWORD *)(v32 + 96) = v31;
          v33 = (unsigned int *)(v32 + 96);
          if (*v100)
          {
            v34 = v98;
          }
          else
          {
            v34 = v98;
            if (*v25 != 8)
            {
              v35 = *(_DWORD *)(v55 + 24);
              v36 = v31 >= v35;
              v31 -= v35;
              if (!v36)
              {
                __break(0xC471u);
                JUMPOUT(0x198E963C0);
              }
              *v33 = v31;
            }
          }
          v36 = __CFADD__(v53, v31);
          v37 = v53 + v31;
          if (v36)
            break;
          v106 = v30;
          v107 = v60;
          *(_DWORD *)(v57 + 120 * v30 + 100) = v37;
          if (v30 >= *(unsigned int *)(a1 + 316))
          {
            __break(0xC471u);
            JUMPOUT(0x198E963C8);
          }
          v110 = v37;
          v105 = a3;
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCompileAlternative(a1, &v110, a3);
          v39 = *(unsigned int *)(a1 + 316);
          v114[32] = v102;
          v115 = -1;
          v116 = v34;
          v117 = 2;
          *(_QWORD *)v119 = 0xFFFFFFFFLL;
          a11 = v104;
          *(_DWORD *)&v119[8] = v104.n128_u32[0];
          v120 = 0;
          *(_QWORD *)v121 = 0;
          *(_DWORD *)&v121[8] = -1;
          v122 = 0;
          if ((_DWORD)v39 == *(_DWORD *)(a1 + 312))
          {
            a9.n128_f64[0] = WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>(a1 + 304, (unint64_t)v114, a3, a4, a5, a6, a7, a8);
            a11 = v104;
          }
          else
          {
            v40 = *v23;
            v41 = *v23 + 120 * v39;
            a9 = *(__n128 *)v114;
            v42 = *(_OWORD *)&v114[16];
            *(_BYTE *)(v41 + 32) = v114[32];
            *(__n128 *)v41 = a9;
            *(_OWORD *)(v41 + 16) = v42;
            v43 = v115;
            *(_QWORD *)(v41 + 48) = 2;
            v44 = (_DWORD *)(v41 + 48);
            *(v44 - 3) = v43;
            v45 = v44 + 2;
            *((_QWORD *)v44 - 1) = v44 + 2;
            v46 = v116;
            if (v116 == v34)
            {
              if (HIDWORD(v117))
              {
                v61 = (WTF *)((char *)v34 + 12 * HIDWORD(v117));
                v62 = v34;
                do
                {
                  *v45 = *(_DWORD *)v62;
                  *(_QWORD *)(v45 + 1) = *(_QWORD *)((char *)v62 + 4);
                  v62 = (WTF *)((char *)v62 + 12);
                  v45 += 3;
                }
                while (v62 != v61);
              }
            }
            else
            {
              v116 = v34;
              *((_QWORD *)v44 - 1) = v46;
              v47 = v117;
              LODWORD(v117) = 2;
              *v44 = v47;
            }
            v48 = HIDWORD(v117);
            HIDWORD(v117) = 0;
            v44[1] = v48;
            v49 = v40 + 120 * v39;
            *(_DWORD *)(v49 + 80) = *(_DWORD *)v119;
            *(_QWORD *)(v49 + 84) = *(_QWORD *)&v119[4];
            *(_BYTE *)(v49 + 92) = v120;
            *(_DWORD *)(v49 + 96) = *(_DWORD *)v121;
            a9.n128_u64[0] = *(_QWORD *)&v121[4];
            *(_QWORD *)(v49 + 100) = *(_QWORD *)&v121[4];
            *(_QWORD *)(v49 + 112) = v122;
            ++*(_DWORD *)(a1 + 316);
          }
          v50 = v116;
          if (v34 != v116 && v116)
          {
            v116 = 0;
            LODWORD(v117) = 0;
            WTF::fastFree((unint64_t)v50, v38, a3, a4, a5, a6, a7, a8);
            a11 = v104;
          }
          v51 = *(unsigned int *)(a1 + 316);
          v52 = v106;
          if (v106 >= v51)
          {
            __break(0xC471u);
            JUMPOUT(0x198E963D0);
          }
          v53 = v101;
          v54 = v103;
          v55 = v99;
          v56 = v107;
          if (v51 <= v39)
          {
            __break(0xC471u);
            JUMPOUT(0x198E963D8);
          }
          v57 = *v23;
          v58 = (uint64_t *)(*v23 + 120 * v106);
          *v58 = v105;
          v58[2] = v39;
          v59 = v57 + 120 * v39;
          *(_QWORD *)(v59 + 8) = v52;
          *(_QWORD *)(v59 + 24) = v25;
          v60 = v56 + 1;
          if (v60 >= *(unsigned int *)(v55 + 12))
          {
            v85 = v51 - 1;
            v86 = v51;
            goto LABEL_68;
          }
        }
        *(_WORD *)(a1 + 82) = 265;
      }
      else
      {
LABEL_68:
        v87 = v57 + 120 * v85;
        *(_BYTE *)(v87 + 32) = v97;
        *(_QWORD *)v87 = 0;
        *(_QWORD *)(v87 + 16) = -1;
        *(_DWORD *)(v87 + 100) = v53;
        if ((_DWORD)v51 == *(_DWORD *)(a1 + 312))
        {
          v101 = v53;
          v104 = a11;
          v95 = v86;
          WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOpCode &>(a1 + 304, &v112, a3, a4, a5, a6, a7, a8);
          v86 = v95;
          v54 = v103;
          v53 = v101;
          a11 = v104;
          v89 = *(_DWORD *)(a1 + 316);
        }
        else
        {
          v88 = v57 + 120 * v86;
          *(_BYTE *)(v88 + 32) = v96;
          *(_DWORD *)(v88 + 36) = -1;
          v89 = v51 + 1;
          *(_QWORD *)(v88 + 40) = v88 + 56;
          *(_QWORD *)(v88 + 48) = 2;
          *(_QWORD *)(v88 + 80) = 0xFFFFFFFFLL;
          *(_DWORD *)(v88 + 88) = a11.n128_u32[0];
          *(_BYTE *)(v88 + 92) = 0;
          *(_QWORD *)(v88 + 96) = 0;
          *(_DWORD *)(v88 + 104) = -1;
          *(_QWORD *)(v88 + 112) = 0;
          *(_DWORD *)(a1 + 316) = v51 + 1;
        }
        if (v89 <= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x198E963E8);
        }
        v90 = *v23;
        v91 = *v23 + 120 * v54;
        *(_QWORD *)(v91 + 16) = v86;
        *(_QWORD *)(v91 + 24) = v25;
        *(_QWORD *)(v91 + 8) = -1;
        *(_DWORD *)(v91 + 100) = v53;
        if (v89 <= v51)
        {
LABEL_108:
          __break(0xC471u);
          JUMPOUT(0x198E963A0);
        }
        v92 = v90 + 120 * v86;
        *(_QWORD *)(v92 + 16) = -1;
        *(_QWORD *)(v92 + 24) = v25;
        *(_QWORD *)(v92 + 8) = v54;
        *(_DWORD *)(v92 + 100) = v53;
      }
LABEL_18:
      ++v22;
    }
    while (v22 < *(unsigned int *)(v11 + 12));
  }
}

double WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;

  v9 = WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a1 + 120 * v10;
  v14 = *(_OWORD *)v9;
  v13 = *(_OWORD *)(v9 + 16);
  *(_BYTE *)(v12 + 32) = *(_BYTE *)(v9 + 32);
  *(_OWORD *)v12 = v14;
  *(_OWORD *)(v12 + 16) = v13;
  v15 = *(_DWORD *)(v9 + 36);
  *(_QWORD *)(v12 + 48) = 2;
  v16 = (_DWORD *)(v12 + 48);
  *(v16 - 3) = v15;
  v17 = v16 + 2;
  *((_QWORD *)v16 - 1) = v16 + 2;
  v18 = *(_QWORD *)(v9 + 40);
  if (v18 == v9 + 56)
  {
    v20 = *(_DWORD *)(v9 + 52);
    if (v20)
    {
      v21 = v18 + 12 * v20;
      do
      {
        *v17 = *(_DWORD *)v18;
        *(_QWORD *)(v17 + 1) = *(_QWORD *)(v18 + 4);
        v18 += 12;
        v17 += 3;
      }
      while (v18 != v21);
    }
  }
  else
  {
    *(_QWORD *)(v9 + 40) = v9 + 56;
    *((_QWORD *)v16 - 1) = v18;
    v19 = *(_DWORD *)(v9 + 48);
    *(_DWORD *)(v9 + 48) = 2;
    *v16 = v19;
  }
  v22 = v11 + 120 * v10;
  v23 = *(_DWORD *)(v9 + 52);
  *(_DWORD *)(v9 + 52) = 0;
  *(_DWORD *)(v22 + 52) = v23;
  *(_DWORD *)(v22 + 80) = *(_DWORD *)(v9 + 80);
  *(_QWORD *)(v22 + 84) = *(_QWORD *)(v9 + 84);
  *(_BYTE *)(v22 + 92) = *(_BYTE *)(v9 + 92);
  *(_DWORD *)(v22 + 96) = *(_DWORD *)(v9 + 96);
  result = *(double *)(v9 + 100);
  *(double *)(v22 + 100) = result;
  *(_QWORD *)(v22 + 112) = *(_QWORD *)(v9 + 112);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = a3;
  v10 = *(char **)a1;
  if (*(_QWORD *)a1 > a3 || (v11 = &v10[120 * *(unsigned int *)(a1 + 12)], (unint64_t)v11 <= a3))
  {
    v17 = *(unsigned int *)(a1 + 8);
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= a2)
      v19 = a2;
    if (v19 > v17)
    {
      v20 = *(_DWORD *)(a1 + 12);
      if (v19 < 0x81)
      {
        v22 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 128;
      }
      else
      {
        if (v19 >= 0x2222223)
        {
          __break(0xC471u);
          JUMPOUT(0x198E96704);
        }
        v21 = 120 * v19;
        v22 = WTF::fastMalloc((WTF *)(120 * v19));
        *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x78;
        *(_QWORD *)a1 = v22;
      }
      WTF::VectorMover<false,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>::move(v10, &v10[120 * v20], v22, a4, a5, a6, a7, a8);
      if ((char *)(a1 + 16) != v10 && v10)
      {
        if (*(char **)a1 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v23, v24, v25, v26, v27, v28, v29);
      }
    }
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v14 = a2;
    if (v14 > v12)
    {
      if (v14 < 0x81)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 128;
      }
      else
      {
        if (v14 >= 0x2222223)
        {
          __break(0xC471u);
          JUMPOUT(0x198E9670CLL);
        }
        v15 = 120 * v14;
        v16 = WTF::fastMalloc((WTF *)(120 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0x78;
        *(_QWORD *)a1 = v16;
      }
      WTF::VectorMover<false,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>::move(v10, v11, v16, a4, a5, a6, a7, a8);
      if ((char *)(a1 + 16) != v10 && v10)
      {
        if (*(char **)a1 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - (_QWORD)v10) >> 3);
  }
  return v8;
}

void WTF::VectorMover<false,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  unint64_t v22;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      v11 = *(_OWORD *)v10;
      v12 = *((_OWORD *)v10 + 1);
      *(_BYTE *)(v8 + 32) = v10[32];
      *(_OWORD *)v8 = v11;
      *(_OWORD *)(v8 + 16) = v12;
      *(_DWORD *)(v8 + 36) = *((_DWORD *)v10 + 9);
      *(_QWORD *)(v8 + 40) = v8 + 56;
      *(_QWORD *)(v8 + 48) = 2;
      v13 = (char *)*((_QWORD *)v10 + 5);
      v14 = v10 + 56;
      if (v13 == v10 + 56)
      {
        v16 = *((_DWORD *)v10 + 13);
        if (v16)
        {
          v17 = 0;
          v18 = &v13[12 * v16];
          do
          {
            v19 = v8 + v17;
            v20 = &v13[v17];
            *(_DWORD *)(v19 + 56) = *(_DWORD *)&v13[v17];
            *(_QWORD *)(v19 + 60) = *(_QWORD *)&v13[v17 + 4];
            v17 += 12;
          }
          while (v20 + 12 != v18);
        }
      }
      else
      {
        *((_QWORD *)v10 + 5) = v14;
        *(_QWORD *)(v8 + 40) = v13;
        v15 = *((_DWORD *)v10 + 12);
        *((_DWORD *)v10 + 12) = 2;
        *(_DWORD *)(v8 + 48) = v15;
      }
      v21 = *((_DWORD *)v10 + 13);
      *((_DWORD *)v10 + 13) = 0;
      *(_DWORD *)(v8 + 52) = v21;
      *(_DWORD *)(v8 + 80) = *((_DWORD *)v10 + 20);
      *(_QWORD *)(v8 + 84) = *(_QWORD *)(v10 + 84);
      *(_BYTE *)(v8 + 92) = v10[92];
      *(_DWORD *)(v8 + 96) = *((_DWORD *)v10 + 24);
      *(_QWORD *)(v8 + 100) = *(_QWORD *)(v10 + 100);
      *(_QWORD *)(v8 + 112) = *((_QWORD *)v10 + 14);
      v22 = *((_QWORD *)v10 + 5);
      if (v14 != (char *)v22)
      {
        if (v22)
        {
          *((_QWORD *)v10 + 5) = 0;
          *((_DWORD *)v10 + 12) = 0;
          WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v8 += 120;
      v10 += 120;
    }
    while (v10 != a2);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCompileParentheticalAssertion(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  __n128 v62;
  uint64_t *v63;
  unsigned int *v64;
  WTF *v65;
  uint64_t v66;
  __int128 v67[2];
  char v68;
  int v69;
  WTF *v70;
  uint64_t v71;
  _QWORD v72[4];
  unsigned __int32 v73;
  char v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78[3];

  v10 = *(unint64_t **)(a1 + 48);
  if (v10)
    v11 = *v10;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 93104);
  if ((unint64_t)&v60 < v11)
  {
    *(_WORD *)(a1 + 82) = 263;
  }
  else
  {
    v12 = *a2;
    v13 = (uint64_t *)(a1 + 304);
    v14 = *(unsigned int *)(a1 + 316);
    LOBYTE(v67[0]) = 15;
    v15 = *(_DWORD *)(a1 + 312);
    v16 = &qword_199123000;
    v64 = a2;
    v66 = a3;
    if ((_DWORD)v14 == v15)
    {
      WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOpCode &>(a1 + 304, v67, a3, a4, a5, a6, a7, a8);
      a3 = v66;
      a2 = v64;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 304) + 120 * v14;
      *(_BYTE *)(v17 + 32) = 15;
      *(_DWORD *)(v17 + 36) = -1;
      *(_QWORD *)(v17 + 40) = v17 + 56;
      *(_QWORD *)(v17 + 48) = 2;
      *(_QWORD *)(v17 + 80) = 0xFFFFFFFFLL;
      *(_DWORD *)(v17 + 88) = -16773311;
      *(_BYTE *)(v17 + 92) = 0;
      *(_QWORD *)(v17 + 96) = 0;
      *(_DWORD *)(v17 + 104) = -1;
      *(_QWORD *)(v17 + 112) = 0;
      *(_DWORD *)(a1 + 316) = v14 + 1;
    }
    v18 = *(_DWORD *)(a3 + 40);
    v19 = *a2 >= v18;
    v20 = *a2 - v18;
    if (!v19)
      goto LABEL_53;
    v21 = *(_DWORD *)(a1 + 316);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198E96CFCLL);
    }
    v22 = *v13;
    *(_DWORD *)(*v13 + 120 * v21 - 24) = v20;
    v23 = *a2 - v20;
    if (*a2 < v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198E96D04);
    }
    *a2 = v23;
    v24 = *(_DWORD *)(a1 + 316);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x198E96D0CLL);
    }
    *(_DWORD *)(v22 + 120 * v24 - 20) = v23;
    LOBYTE(v67[0]) = 6;
    if (v24 == *(_DWORD *)(a1 + 312))
    {
      WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOpCode &>(a1 + 304, v67, a3, a4, a5, a6, a7, a8);
      a3 = v66;
      a2 = v64;
      LODWORD(v26) = *(_DWORD *)(a1 + 316);
    }
    else
    {
      v25 = v22 + 120 * v24;
      *(_BYTE *)(v25 + 32) = 6;
      *(_DWORD *)(v25 + 36) = -1;
      LODWORD(v26) = v24 + 1;
      *(_QWORD *)(v25 + 40) = v25 + 56;
      *(_QWORD *)(v25 + 48) = 2;
      *(_QWORD *)(v25 + 80) = 0xFFFFFFFFLL;
      *(_DWORD *)(v25 + 88) = -16773311;
      *(_BYTE *)(v25 + 92) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      *(_DWORD *)(v25 + 104) = -1;
      *(_QWORD *)(v25 + 112) = 0;
      *(_DWORD *)(a1 + 316) = v24 + 1;
    }
    if (!(_DWORD)v26)
    {
      __break(0xC471u);
      JUMPOUT(0x198E96D14);
    }
    v27 = v26;
    v28 = v26 - 1;
    v29 = *v13;
    v30 = *v13 + 120 * v28;
    *(_QWORD *)(v30 + 8) = -1;
    *(_QWORD *)(v30 + 24) = a3;
    v31 = *(_QWORD *)(a3 + 16);
    if (*(_DWORD *)(v31 + 12))
    {
      v63 = (uint64_t *)(a1 + 304);
      v61 = v12;
      v32 = 0;
      v65 = (WTF *)v72;
      a9.n128_u64[0] = 4278193985;
      v62 = a9;
      do
      {
        v33 = *(_QWORD *)(*(_QWORD *)v31 + 8 * v32);
        v34 = v26 - 1;
        v35 = *(_DWORD *)(v33 + 24);
        v36 = v29 + 120 * v34;
        *(_DWORD *)(v36 + 96) = v35;
        v37 = (unsigned int *)(v36 + 96);
        if (!*(_BYTE *)(a3 + 2) && *(_BYTE *)a3 != 8)
        {
          v53 = *(_DWORD *)(v31 + 24);
          v19 = v35 >= v53;
          v35 -= v53;
          if (!v19)
          {
            __break(0xC471u);
            JUMPOUT(0x198E96D3CLL);
          }
          *v37 = v35;
        }
        v19 = __CFADD__(*a2, v35);
        v38 = *a2 + v35;
        if (v19)
        {
          __break(0xC471u);
          JUMPOUT(0x198E96D1CLL);
        }
        *(_DWORD *)(v29 + 120 * v34 + 100) = v38;
        if (v34 >= *(unsigned int *)(a1 + 316))
        {
          __break(0xC471u);
          JUMPOUT(0x198E96D24);
        }
        v39 = v14;
        v40 = v16;
        v78[0] = v38;
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::opCompileAlternative(a1, v78, v33);
        v47 = *(unsigned int *)(a1 + 316);
        v68 = 7;
        v69 = -1;
        v70 = v65;
        v71 = 2;
        v72[3] = 0xFFFFFFFFLL;
        v73 = v62.n128_u32[0];
        v74 = 0;
        v75 = 0;
        v76 = -1;
        v77 = 0;
        if ((_DWORD)v47 == *(_DWORD *)(a1 + 312))
        {
          WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>((uint64_t)v63, (unint64_t)v67, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::YarrOp::YarrOp(*(_QWORD *)(a1 + 304) + 120 * v47, v67);
          ++*(_DWORD *)(a1 + 316);
        }
        v50 = v70;
        if (v65 != v70 && v70)
        {
          v70 = 0;
          LODWORD(v71) = 0;
          WTF::fastFree((unint64_t)v50, v48, v49, a4, a5, a6, a7, a8);
        }
        v26 = *(unsigned int *)(a1 + 316);
        a2 = v64;
        a3 = v66;
        if (v34 >= v26)
        {
          __break(0xC471u);
          JUMPOUT(0x198E96D2CLL);
        }
        if (v26 <= v47)
        {
          __break(0xC471u);
          JUMPOUT(0x198E96D34);
        }
        v29 = *v63;
        v51 = (_QWORD *)(*v63 + 120 * v34);
        *v51 = v33;
        v51[2] = v47;
        v52 = v29 + 120 * v47;
        *(_QWORD *)(v52 + 8) = v34;
        *(_QWORD *)(v52 + 24) = a3;
        ++v32;
        v16 = v40;
        v14 = v39;
      }
      while (v32 < *(unsigned int *)(v31 + 12));
      v28 = v26 - 1;
      v27 = v26;
      v12 = v61;
      v13 = v63;
    }
    v54 = v29 + 120 * v28;
    *(_BYTE *)(v54 + 32) = 8;
    *(_QWORD *)v54 = 0;
    *(_QWORD *)(v54 + 16) = -1;
    *(_DWORD *)(v54 + 100) = *a2;
    LOBYTE(v67[0]) = 16;
    if ((_DWORD)v26 == *(_DWORD *)(a1 + 312))
    {
      WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOpCode &>((uint64_t)v13, v67, a3, a4, a5, a6, a7, a8);
      a3 = v66;
      v56 = *(_DWORD *)(a1 + 316);
    }
    else
    {
      v55 = v29 + 120 * v27;
      *(_BYTE *)(v55 + 32) = 16;
      *(_DWORD *)(v55 + 36) = -1;
      v56 = v26 + 1;
      *(_QWORD *)(v55 + 40) = v55 + 56;
      *(_QWORD *)(v55 + 48) = 2;
      *(_QWORD *)(v55 + 80) = 0xFFFFFFFFLL;
      *(_DWORD *)(v55 + 88) = v16[320];
      *(_BYTE *)(v55 + 92) = 0;
      *(_QWORD *)(v55 + 96) = 0;
      *(_DWORD *)(v55 + 104) = -1;
      *(_QWORD *)(v55 + 112) = 0;
      *(_DWORD *)(a1 + 316) = v26 + 1;
    }
    if (v56 <= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198E96D44);
    }
    v57 = *v13;
    v58 = (_QWORD *)(*v13 + 120 * v14);
    v58[2] = v27;
    v58[3] = a3;
    v58[1] = -1;
    if (v56 <= v26)
    {
LABEL_53:
      __break(0xC471u);
      JUMPOUT(0x198E96CF4);
    }
    v59 = v57 + 120 * v27;
    *(_QWORD *)(v59 + 16) = -1;
    *(_QWORD *)(v59 + 24) = a3;
    *(_QWORD *)(v59 + 8) = v14;
    *(_DWORD *)(v59 + 100) = v12;
  }
}

void WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOpCode &>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (v14 <= v10)
  {
LABEL_13:
    v25 = *(_DWORD *)(a1 + 12);
    v26 = v25 + 1;
    v27 = *(_QWORD *)a1 + 120 * v25;
    *(_BYTE *)(v27 + 32) = *a2;
    *(_DWORD *)(v27 + 36) = -1;
    *(_QWORD *)(v27 + 40) = v27 + 56;
    *(_QWORD *)(v27 + 48) = 2;
    *(_QWORD *)(v27 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v27 + 88) = -16773311;
    *(_BYTE *)(v27 + 92) = 0;
    *(_QWORD *)(v27 + 96) = 0;
    *(_DWORD *)(v27 + 104) = -1;
    *(_QWORD *)(v27 + 112) = 0;
    *(_DWORD *)(a1 + 12) = v26;
    return;
  }
  v15 = *(char **)a1;
  if (v14 < 0x81)
  {
    v17 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 128;
    goto LABEL_12;
  }
  if (v14 < 0x2222223)
  {
    v16 = 120 * v14;
    v17 = WTF::fastMalloc((WTF *)(120 * v14));
    *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)a1 = v17;
LABEL_12:
    WTF::VectorMover<false,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>::move(v15, &v15[120 * v11], v17, a4, a5, a6, a7, a8);
    if ((char *)(a1 + 16) != v15 && v15)
    {
      if (*(char **)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v15, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
}

void WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm *&>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (v14 <= v10)
  {
LABEL_13:
    v25 = *(_DWORD *)(a1 + 12);
    v26 = v25 + 1;
    v27 = *(_QWORD *)a1 + 120 * v25;
    *(_QWORD *)(v27 + 24) = *a2;
    *(_BYTE *)(v27 + 32) = 17;
    *(_DWORD *)(v27 + 36) = -1;
    *(_QWORD *)(v27 + 40) = v27 + 56;
    *(_QWORD *)(v27 + 48) = 2;
    *(_QWORD *)(v27 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v27 + 88) = -16773311;
    *(_BYTE *)(v27 + 92) = 0;
    *(_QWORD *)(v27 + 96) = 0;
    *(_DWORD *)(v27 + 104) = -1;
    *(_QWORD *)(v27 + 112) = 0;
    *(_DWORD *)(a1 + 12) = v26;
    return;
  }
  v15 = *(char **)a1;
  if (v14 < 0x81)
  {
    v17 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 128;
    goto LABEL_12;
  }
  if (v14 < 0x2222223)
  {
    v16 = 120 * v14;
    v17 = WTF::fastMalloc((WTF *)(120 * v14));
    *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)a1 = v17;
LABEL_12:
    WTF::VectorMover<false,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::YarrOp>::move(v15, &v15[120 * v11], v17, a4, a5, a6, a7, a8);
    if ((char *)(a1 + 16) != v15 && v15)
    {
      if (*(char **)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v15, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::collectBoyerMooreInfoFromTerm(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v56;
  uint64_t v57;
  char v58;

  v8 = a4;
  v9 = a3;
  v12 = *a2;
  if (v12 == 3)
  {
    if (a2[2] > 1u || *((_DWORD *)a2 + 2) != 1 || *((_DWORD *)a2 + 10) != (_DWORD)a3)
      goto LABEL_83;
    v15 = *((unsigned int *)a2 + 4);
    if (v15 >= 0x10000 && (*(_BYTE *)(a1 + 84) & 1) != 0)
      goto LABEL_83;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) == 0 || (v15 | 0x20) - 97 > 0x19)
    {
      if (*(_DWORD *)(a4 + 12) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E97540);
      }
      v17 = *(_QWORD *)a4 + 56 * v9;
      goto LABEL_19;
    }
    if (*(_DWORD *)(a4 + 12) > v9)
    {
      if ((v15 - 97) >= 0x1A)
        v16 = -1;
      else
        v16 = -33;
      JSC::Yarr::BoyerMooreBitmap::add(*(_QWORD *)a4 + 56 * v9, (void *)*(unsigned __int8 *)(a4 + 16), v16 & v15, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v8 + 12) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198E97538);
      }
      v15 = *((_DWORD *)a2 + 4) | (32 * ((*((_DWORD *)a2 + 4) - 65) < 0x1A));
      v17 = *(_QWORD *)v8 + 56 * v9;
LABEL_19:
      JSC::Yarr::BoyerMooreBitmap::add(v17, (void *)*(unsigned __int8 *)(v8 + 16), v15, a4, a5, a6, a7, a8);
LABEL_20:
      v18 = a2[2];
      goto LABEL_21;
    }
LABEL_126:
    __break(0xC471u);
    JUMPOUT(0x198E97530);
  }
  if (v12 == 4)
  {
    v18 = a2[2];
    if (v18 > 1 || *((_DWORD *)a2 + 2) != 1 || *((_DWORD *)a2 + 10) != (_DWORD)a3)
      goto LABEL_83;
    if ((a2[1] & 2) != 0 || (v25 = *((_QWORD *)a2 + 2), (*(_BYTE *)(v25 + 89) & 2) != 0))
    {
      if (*(_DWORD *)(a4 + 12) > a3)
      {
        *(_DWORD *)(*(_QWORD *)a4 + 56 * a3 + 48) = 128;
LABEL_21:
        if (v18)
          JSC::Yarr::BoyerMooreInfo::shortenLength(v8, (v9 + 1), a3, a4, a5, a6, a7, a8);
        else
          LODWORD(v9) = v9 + 1;
        goto LABEL_23;
      }
      goto LABEL_126;
    }
    v26 = *(unsigned int *)(v25 + 76);
    if (!(_DWORD)v26)
    {
LABEL_39:
      a4 = *(unsigned int *)(v25 + 60);
      if ((_DWORD)a4)
        JSC::Yarr::BoyerMooreInfo::addCharacters(v8, v9, *(unsigned int **)(v25 + 48), a4, a5, a6, a7, a8);
      v27 = *(unsigned int *)(v25 + 44);
      if ((_DWORD)v27)
      {
        if (*(_DWORD *)(v8 + 12) <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x198E97550);
        }
        v28 = *(_QWORD *)v8 + 56 * v9;
        if (*(_DWORD *)(v28 + 48) != 128)
        {
          v29 = (void *)*(unsigned __int8 *)(v8 + 16);
          v30 = *(unsigned int **)(v25 + 32);
          v31 = &v30[2 * v27];
          if (*(_BYTE *)(v8 + 16))
          {
            while (1)
            {
              v45 = *v30;
              v46 = v30[1];
              if (v46 - v45 - 127 < 0xFFFFFF80)
              {
LABEL_112:
                *(_DWORD *)(v28 + 48) = 128;
                goto LABEL_54;
              }
              if (v46 >= v45)
                break;
LABEL_79:
              v30 += 2;
              if (v30 == v31)
                goto LABEL_54;
            }
            while (JSC::Yarr::BoyerMooreBitmap::add(v28, v29, v45, a4, a5, a6, a7, a8))
            {
              v45 = (v45 + 1);
              if (v45 > v46)
                goto LABEL_79;
            }
          }
          else
          {
            do
            {
              v32 = *v30;
              if (v32 > 0xFF)
                break;
              v33 = v30[1];
              if (v33 >= 0x100)
                v33 = 255;
              if (v33 - v32 - 127 < 0xFFFFFF80)
                goto LABEL_112;
              if (v33 >= v32)
              {
                v34 = v33 + 1;
                while (JSC::Yarr::BoyerMooreBitmap::add(v28, 0, v32, a4, a5, a6, a7, a8))
                {
                  v32 = (v32 + 1);
                  if (v34 == (_DWORD)v32)
                    goto LABEL_53;
                }
                break;
              }
LABEL_53:
              v30 += 2;
            }
            while (v30 != v31);
          }
        }
      }
LABEL_54:
      v35 = *(unsigned int *)(v25 + 28);
      if ((_DWORD)v35)
      {
        if (*(_DWORD *)(v8 + 12) <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x198E97548);
        }
        v36 = *(_QWORD *)v8 + 56 * v9;
        if (*(_DWORD *)(v36 + 48) != 128)
        {
          v37 = (void *)*(unsigned __int8 *)(v8 + 16);
          v38 = *(unsigned int **)(v25 + 16);
          v39 = 4 * v35;
          if (*(_BYTE *)(v8 + 16))
          {
            v40 = v39 - 4;
            do
            {
              v41 = *v38++;
              v42 = !JSC::Yarr::BoyerMooreBitmap::add(v36, v37, v41, a4, a5, a6, a7, a8) || v40 == 0;
              v40 -= 4;
            }
            while (!v42);
          }
          else
          {
            v43 = v39 - 4;
            do
            {
              a3 = *v38;
              if (a3 > 0xFF)
                break;
              ++v38;
              v44 = !JSC::Yarr::BoyerMooreBitmap::add(v36, 0, a3, a4, a5, a6, a7, a8) || v43 == 0;
              v43 -= 4;
            }
            while (!v44);
          }
        }
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(v8 + 12) > a3)
    {
      JSC::Yarr::BoyerMooreBitmap::addRanges(*(_QWORD *)v8 + 56 * a3, (void *)*(unsigned __int8 *)(v8 + 16), *(unsigned int **)(v25 + 64), v26, a5, a6, a7, a8);
      goto LABEL_39;
    }
LABEL_125:
    __break(0xC471u);
    JUMPOUT(0x198E9755CLL);
  }
  if (v12 < 3)
  {
LABEL_23:
    v19 = v9 & 0xFFFFFF00;
    v20 = 0x100000000;
    LOBYTE(v21) = v9;
    return v20 | v19 | v21;
  }
  if (v12 != 7)
  {
LABEL_83:
    v20 = 0;
    LOBYTE(v21) = 0;
    v19 = 0;
    return v20 | v19 | v21;
  }
  LOBYTE(v21) = 0;
  v20 = 0;
  if (a2[2] > 1u)
  {
    v19 = 0;
    return v20 | v19 | v21;
  }
  v19 = 0;
  if (*((_DWORD *)a2 + 2) == 1)
  {
    if ((a2[1] & 6) != 0)
      goto LABEL_83;
    v47 = *((_QWORD *)a2 + 2);
    if (*(_DWORD *)(v47 + 12))
    {
      v48 = 0;
      v21 = 0;
      v57 = *((_QWORD *)a2 + 2);
      v58 = 1;
      do
      {
        v49 = *(_QWORD *)(*(_QWORD *)v47 + 8 * v48);
        if (*(_DWORD *)(v49 + 12))
          v50 = *(_DWORD *)(v8 + 12) > v9;
        else
          v50 = 0;
        LODWORD(v51) = v9;
        if (v50)
        {
          v52 = 0;
          v53 = 1;
          v54 = v9;
          while (1)
          {
            v51 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::collectBoyerMooreInfoFromTerm(a1, *(_QWORD *)v49 + v52, v54, v8);
            if (!HIDWORD(v51))
              break;
            v52 += 48;
            v56 = v53++ < *(unsigned int *)(v49 + 12) && *(_DWORD *)(v8 + 12) > v51;
            v54 = v51;
            if (!v56)
              goto LABEL_94;
          }
          JSC::Yarr::BoyerMooreInfo::shortenLength(v8, v54, a3, a4, a5, a6, a7, a8);
          LODWORD(v51) = v54;
        }
LABEL_94:
        if ((v58 & 1) != 0)
        {
          v21 = v51;
        }
        else if (v21 != (_DWORD)v51)
        {
          if (v21 >= v51)
            v21 = v51;
          JSC::Yarr::BoyerMooreInfo::shortenLength(v8, v21 + 1, a3, a4, a5, a6, a7, a8);
        }
        v47 = v57;
        v58 = 0;
        ++v48;
      }
      while (v48 < *(unsigned int *)(v57 + 12));
      if (!a2[2])
        goto LABEL_118;
    }
    else if (!a2[2])
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_125;
    }
    JSC::Yarr::BoyerMooreInfo::shortenLength(v8, (v9 + 1), a3, a4, a5, a6, a7, a8);
    v21 = v9;
LABEL_118:
    v19 = v21 & 0xFFFFFF00;
    v20 = 0x100000000;
  }
  return v20 | v19 | v21;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfNoAvailableInput(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *(char *)(*(_QWORD *)(a2 + 40) + 1);
  JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a2 + 8), a3, v10, v10, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a2 + 8), 8, *(char *)(*(_QWORD *)(a2 + 40) + 1), *(char *)(*(_QWORD *)(a2 + 40) + 2), v11, v12, v13, v14, a1);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v10 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
  v17 = a2;
  v12 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, &v17, a3, v10, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 80))
  {
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v12, v11, a3, v13, v14, v15, v16);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v12, v11, a3, v13, v14, v15, v16);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v12, v11, a3, v13, v14, v15, v16);
  }
}

{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v16 = a2;
  v11 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, &v16, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 80))
  {
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v11, v10, a3, v12, v13, v14, v15);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v11, v10, a3, v12, v13, v14, v15);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v11, v10, a3, v12, v13, v14, v15);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::removeCallFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;

  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 28);
  if (v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v9 = 8 * v8 + 63;
      if ((v9 & 0xFFFFFFC0) != 0)
        JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v9 & 0xFFFFFFC0, 31, 31, a5, a6, a7, a8);
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::getMatchStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3);
  if (*(_BYTE *)(a1 + 81) == 1)
  {
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), v10, a2, a4, a5, a6, a7, a8);
    return;
  }
  if ((_DWORD)v10 != a2)
  {
    if ((char)v10 == 63)
    {
      if ((_DWORD)a2 != 31)
      {
        v13 = a2 & 0x1F | 0xD2800000;
        goto LABEL_8;
      }
    }
    else if ((_DWORD)a2 != 31 && (char)v10 != 31)
    {
      v11 = a2 & 0x1F | ((v10 & 0x1F) << 16);
      v12 = -1442839584;
LABEL_7:
      v13 = v11 | v12;
LABEL_8:
      v16 = *(_DWORD *)(v9 + 200);
      v15 = (unsigned int *)(v9 + 200);
      v14 = v16;
      if (v16 + 4 > *(v15 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), v10, a2, a4, a5, a6, a7, a8);
        v14 = *v15;
      }
      *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
      *v15 += 4;
      return;
    }
    v11 = a2 | (32 * (char)v10);
    v12 = -1862270976;
    goto LABEL_7;
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::clearSubpatternStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v8 + 212))
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | (unint64_t)(a2 << 35);
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v8 + 264, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store32(v8, 16, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::allocateParenContext(uint64_t a1, int a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int *v38;
  int *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;

  JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 5), 0xFFFFFFFFLL, a6, a7, a8, a9, (uint64_t)&v50, a3);
  v19 = v50;
  if (v50 != -1)
  {
    v20 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v20 == *(_DWORD *)(a1 + 128))
    {
      v21 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, (void *)(v20 + 1), (unint64_t)&v50, v13, v14, v15, v16, v17);
      v23 = *v21;
      v22 = (uint64_t *)(v21 + 1);
      v19 = v23;
      v24 = *(_QWORD *)(a1 + 120) + 12 * *(unsigned int *)(a1 + 132);
    }
    else
    {
      v22 = &v51;
      v24 = *(_QWORD *)(a1 + 120) + 12 * v20;
    }
    *(_DWORD *)v24 = v19;
    *(_QWORD *)(v24 + 4) = *v22;
    ++*(_DWORD *)(a1 + 132);
  }
  v25 = *(_DWORD **)(a1 + 8);
  v26 = *(char *)(*(_QWORD *)(a1 + 40) + 13);
  v27 = v26 | (32 * v26) | 0x51000400;
  v28 = v25[50];
  if (v28 + 4 > v25[48])
  {
    v18 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 + 14), v11, v12, v13, v14, v15, v16, v17).n128_u64[0];
    v28 = v25[50];
  }
  *(_DWORD *)(*((_QWORD *)v25 + 7) + v28) = v27;
  v25[50] += 4;
  JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 13), 0xFFFFFFFFLL, v14, v15, v16, v17, (uint64_t)&v48, v18);
  v36 = v48;
  if (v48 != -1)
  {
    v37 = *(unsigned int *)(a1 + 172);
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 168))
    {
      v38 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 160, (void *)(v37 + 1), (unint64_t)&v48, v31, v32, v33, v34, v35);
      v40 = *v38;
      v39 = v38 + 1;
      v36 = v40;
      v41 = *(_QWORD *)(a1 + 160) + 12 * *(unsigned int *)(a1 + 172);
    }
    else
    {
      v39 = &v49;
      v41 = *(_QWORD *)(a1 + 160) + 12 * v37;
    }
    *(_DWORD *)v41 = v36;
    *(_QWORD *)(v41 + 4) = *(_QWORD *)v39;
    ++*(_DWORD *)(a1 + 172);
  }
  v42 = *(_QWORD *)(a1 + 8);
  v43 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 5);
  if (v43 != a2)
  {
    if ((char)v43 == 63)
    {
      if (a2 != 31)
      {
        v44 = a2 & 0x1F | 0xD2800000;
        goto LABEL_21;
      }
    }
    else if (a2 != 31 && (char)v43 != 31)
    {
      v44 = a2 & 0x1F | ((v43 & 0x1F) << 16) | 0xAA0003E0;
LABEL_21:
      v47 = *(_DWORD *)(v42 + 200);
      v46 = (unsigned int *)(v42 + 200);
      v45 = v47;
      if (v47 + 4 > *(v46 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v46 - 36), v29, v30, v31, v32, v33, v34, v35);
        v45 = *v46;
      }
      *(_DWORD *)(*((_QWORD *)v46 - 18) + v45) = v44;
      *v46 += 4;
      v42 = *(_QWORD *)(a1 + 8);
      LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 5);
      goto LABEL_24;
    }
    v44 = a2 | (32 * (char)v43) | 0x91000000;
    goto LABEL_21;
  }
LABEL_24:
  JSC::MacroAssemblerARM64::load64(v42, a2, (char)a2, v31, v32, v33, v34, v35);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::saveParenContext(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v106 = 0x8000000000000000;
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 12);
  v15 = 8 * a6;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * a6 + 16) >> 3) << 35) | 0x1F, a3, a4, a5, a6, a7, a8);
  v23 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1);
  v24 = *(_DWORD **)(a1 + 8);
  v25 = v24[50];
  if (v25 + 4 > v24[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v24 + 14), v16, v17, v18, v19, v20, v21, v22);
    v25 = v24[50];
  }
  *(_DWORD *)(*((_QWORD *)v24 + 7) + v25) = v23 & 0x1F | (32 * a2) | ((a3 & 0x1F) << 10) | 0x29010000;
  v24[50] += 4;
  v105 = v15;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)(v15 + 8) << 32) | 0x1F, a3, v18, v19, v20, v21, v22);
  v26 = a2;
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, a2 | 0x1000000000, v27, v28, v29, v30, v31);
  if (*(_BYTE *)(a1 + 81) != 1)
  {
    v39 = 0x8000000000000000;
    goto LABEL_51;
  }
  if (v10 > v9)
  {
    v39 = 0x8000000000000000;
LABEL_6:
    v104 = v39;
    v40 = __clz(__rbit64(v39));
    v41 = 63;
    if (v40 >= 0x3F)
      v42 = 63;
    else
      v42 = v40;
    v43 = 1;
    goto LABEL_31;
  }
  v44 = 8 * v10;
  do
  {
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)v44 << 32), a3, v34, v35, v36, v37, v38);
    v45 = v10;
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, v26 | ((unint64_t)(v44 + 16) << 32), v46, v47, v48, v49, v50);
    if (v14)
    {
      v56 = *(_QWORD *)(a1 + 56);
      if (*(_DWORD *)(v56 + 124) <= v10)
        goto LABEL_63;
      v57 = *(unsigned int *)(*(_QWORD *)(v56 + 112) + 4 * v10);
      if ((_DWORD)v57)
      {
        v58 = v106;
        if ((v106 & 0x8000000000000000) != 0)
          v59 = 63;
        else
          v59 = *(_QWORD *)(2 * v106);
        if (v59 <= v57)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v106, v57 + 1, 0);
          v58 = v106;
        }
        v60 = 2 * v58 + 8;
        v61 = v58 < 0;
        v62 = &v106;
        if (!v61)
          v62 = (unint64_t *)v60;
        *(unint64_t *)((char *)v62 + ((v57 >> 3) & 0x1FFFFFF8)) |= 1 << v57;
      }
    }
    v63 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v63 + 212))
    {
LABEL_63:
      __break(0xC471u);
      JUMPOUT(0x198E97F24);
    }
    v64 = (v44 << 32) | *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3);
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v63 + 264, v51, v52, v53, v54, v55);
    JSC::MacroAssemblerARM64::store32(v63, 16, v64, v65, v66, v67, v68, v69);
    v10 = v45 + 1;
    v44 = (v44 + 8);
  }
  while (v45 + 1 <= v9);
  v39 = v106;
  if ((v106 & 0x8000000000000000) != 0)
    goto LABEL_6;
  v41 = *(_QWORD *)(2 * v106);
  if ((unint64_t)(v41 + 63) < 0x40)
    goto LABEL_51;
  v70 = *(_QWORD *)(2 * v106 + 8);
  v104 = v106;
  if (v70 && (v71 = __clz(__rbit64(v70)), v71 < 0x40))
  {
    v72 = 0;
  }
  else
  {
    if ((unint64_t)(v41 + 63) >> 6 == 1)
      goto LABEL_51;
    v102 = 0;
    while (1)
    {
      v103 = *(_QWORD *)(2 * v106 + 0x10 + 8 * v102);
      if (v103)
      {
        v71 = __clz(__rbit64(v103));
        if (v71 <= 0x3F)
          break;
      }
      if (((unint64_t)(v41 + 63) >> 6) - 1 == ++v102)
        goto LABEL_51;
    }
    v72 = v102 + 1;
  }
  v43 = 0;
  v42 = v71 + (v72 << 6);
LABEL_31:
  if (v42 != v41)
  {
    v73 = (uint64_t *)(2 * v104);
    do
    {
      v74 = 4 * v42 + 4;
      JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((v74+ 8* *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)) >> 2) << 34), a3, v34, v35, v36, v37, v38);
      JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), a3, (v26 | 0x1400000000) + (v42 << 34) + (*(_QWORD *)(a1 + 96) << 35), v75, v76, v77, v78, v79);
      JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((v74+ 8* *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)) >> 2) << 34), v80, v81, v82, v83, v84);
      v85 = v42 + 1;
      if (v43)
      {
        v92 = __clz(__rbit64(v104 >> v85)) + v85;
        if (v92 >= 0x3F)
          v42 = 63;
        else
          v42 = v92;
        continue;
      }
      v42 = *v73;
      v86 = *v73 + 63;
      v87 = v85 >> 6;
      if (v85 >> 6 < v86 >> 6)
      {
        v88 = *(_QWORD *)(2 * v104 + 8 + 8 * v87);
        if (!v88 || (v89 = __clz(__rbit64(v88 >> v85)) + (v85 & 0x3F), v89 >= 0x40))
        {
          if (v87 + 1 == v86 >> 6)
            continue;
          v90 = (v86 >> 6) - 1;
          while (1)
          {
            v91 = *(_QWORD *)(2 * v104 + 0x10 + 8 * v87);
            if (v91)
            {
              v89 = __clz(__rbit64(v91));
              if (v89 <= 0x3F)
                break;
            }
            if (v90 == ++v87)
              goto LABEL_38;
          }
          ++v87;
        }
        v42 = v89 + (v87 << 6);
      }
LABEL_38:
      ;
    }
    while (v42 != v41);
  }
  v39 = v104;
LABEL_51:
  v93 = (v8 + 4);
  if (*(_QWORD *)(a1 + 112) > v93)
  {
    v94 = v8 + 5;
    v95 = (v105 + 32);
    do
    {
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v95 << 32) | 0x1F, a3, v34, v35, v36, v37, v38);
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, (v26 | 0x1800000000)+ (*(_QWORD *)(a1 + 104) << 34)+ ((unint64_t)(*(_DWORD *)(a1 + 96) + v93) << 35), v96, v97, v98, v99, v100);
      LODWORD(v93) = v94;
      v101 = *(_QWORD *)(a1 + 112) > (unint64_t)v94++;
      v95 = (v95 + 8);
    }
    while (v101);
  }
  if ((v39 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v39, v32, v33, v34, v35, v36, v37, v38);
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterFixed(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int *v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::AssemblerBuffer *v67;
  _DWORD *v68;
  JSC::AssemblerBuffer *v69;
  int v70;
  unsigned int v71[3];
  int v72;
  int v73;
  int v74;
  uint64_t v75;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(unsigned int **)(v10 + 120 * a2 + 24);
  v12 = v11[4];
  v13 = *(char **)(a1 + 40);
  v14 = v13[9];
  v15 = v13[10];
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, v13[1], v13[2], a5, a6, a7, a8, (uint64_t)&v74);
    v17 = v74;
    if (v74 != -1)
    {
      v18 = *(unsigned int *)(v10 + 120 * a2 + 52);
      if ((_DWORD)v18 == *(_DWORD *)(v10 + 120 * a2 + 48))
      {
        v19 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10 + 120 * a2 + 40, (void *)(v18 + 1), (unint64_t)&v74, v16, a5, a6, a7, a8);
        v21 = *v19;
        v20 = (uint64_t *)(v19 + 1);
        v17 = v21;
        LODWORD(v18) = *(_DWORD *)(v10 + 120 * a2 + 52);
      }
      else
      {
        v20 = &v75;
      }
      v22 = *(_QWORD *)(v10 + 120 * a2 + 40) + 12 * v18;
      *(_DWORD *)v22 = v17;
      *(_QWORD *)(v22 + 4) = *v20;
      ++*(_DWORD *)(v10 + 120 * a2 + 52);
    }
  }
  v23 = (unint64_t)v11[2] << ((v12 & 0xFFFF0000) != 0);
  if (HIDWORD(v23))
  {
    __break(0xC471u);
    JUMPOUT(0x198E98244);
  }
  v24 = v15;
  JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v23, v24, a5, a6, a7, a8);
  v32 = *(_DWORD **)(a1 + 8);
  v33 = v32[50];
  if (v33 < v32[13])
  {
    v67 = (JSC::AssemblerBuffer *)(v32 + 14);
    do
    {
      if ((v33 + 4) > v32[48])
      {
        v69 = v67;
        v68 = v32;
        JSC::AssemblerBuffer::outOfLineGrow(v67, v25, v26, v27, v28, v29, v30, v31);
        v32 = v68;
        v67 = v69;
        v33 = v68[50];
      }
      *(_DWORD *)(*((_QWORD *)v32 + 7) + v33) = -721215457;
      v33 = v32[50] + 4;
      v32[50] = v33;
    }
    while (v33 < v32[13]);
  }
  v32[52] = 0;
  v34 = *(_DWORD *)(v10 + 120 * a2 + 100);
  v35 = v11[10];
  v55 = v34 >= v35;
  v36 = v34 - v35;
  if (!v55)
  {
    __break(0xC471u);
    JUMPOUT(0x198E9824CLL);
  }
  v37 = v36 - v23;
  if (v36 < v23)
  {
    __break(0xC471u);
LABEL_36:
    JUMPOUT(0x198E9823CLL);
  }
  v38 = v14;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, v37, v38, v24, v28, v29, v30, v31);
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) != 0 && (v12 | 0x20) - 97 <= 0x19)
  {
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x20, v38, v38);
    v12 |= 0x20u;
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v38, v12, v39, v40, v41, v42, (uint64_t)&v72);
  v48 = v72;
  if (v72 != -1)
  {
    v49 = v10 + 120 * a2 + 40;
    v50 = *(unsigned int *)(v49 + 12);
    if ((_DWORD)v50 == *(_DWORD *)(v49 + 8))
    {
      v51 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v49, (void *)(v50 + 1), (unint64_t)&v72, v43, v44, v45, v46, v47);
      v53 = *v51;
      v52 = v51 + 1;
      v48 = v53;
      LODWORD(v50) = *(_DWORD *)(v49 + 12);
    }
    else
    {
      v52 = &v73;
    }
    v54 = *(_QWORD *)v49 + 12 * v50;
    *(_DWORD *)v54 = v48;
    *(_QWORD *)(v54 + 4) = *(_QWORD *)v52;
    ++*(_DWORD *)(v49 + 12);
  }
  v55 = (*(_BYTE *)(a1 + 84) & 1) != 0 && v12 >= 0x10000;
  if (v55)
    v56 = 2;
  else
    v56 = 1;
  JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v56, v24, v24, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v24, *(char *)(*(_QWORD *)(a1 + 40) + 1), v57, v58, v59, v60, (uint64_t)v71);
  v70 = v33;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v71, (unsigned int *)&v70, *(_QWORD *)(a1 + 8), v61, v62, v63, v64, v65);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterGreedy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  _DWORD v117[2];
  char v118;
  __int16 v119;
  char v120;
  unsigned int v121[3];
  _DWORD v122[3];
  _DWORD v123[3];
  int v124;
  WTF *v125;
  uint64_t v126;
  _BYTE v127[28];
  int v128;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(unsigned int **)(v10 + 120 * a2 + 24);
  v12 = v11[4];
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(v13 + 9);
  v15 = *(_BYTE *)(v13 + 10);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), 0, v15, a4, a5, a6, a7, a8);
  v23 = v15;
  if (v12 >= 0x100 && !*(_BYTE *)(a1 + 80))
    goto LABEL_11;
  v125 = (WTF *)v127;
  v126 = 2;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label(&v124, *(_QWORD *)(a1 + 8), v17, v18, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v24, v25, v26, v27, (uint64_t)v123);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v125, v123, v28, v29, v30, v31, v32, v33);
  v37 = *(_DWORD *)(v10 + 120 * a2 + 100);
  v38 = v11[10];
  if (v37 < v38)
  {
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x198E9851CLL);
  }
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfCharNotEquals((uint64_t)v122, a1, v12, v37 - v38, v14, v34, v35, v36);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v125, v122, v39, v40, v41, v42, v43, v44);
  v45 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
  JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, v45, v45, v46, v47, v48, v49);
  if ((*(_BYTE *)(a1 + 84) & 1) != 0 && v12 >= 0x10000)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v50, v51, v52, v53, (uint64_t)v121);
    v78 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
    JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), v78, 1, v78, v79, v80, v81, v82);
    v83 = *(_QWORD *)(a1 + 8);
    JSC::ARM64Assembler::label((_DWORD *)(v83 + 32), v84, v85, v86, v87, v88, v89, v90, &v128);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v83 + 56), 335544320, v91, v92, v93, v94, v95, v96);
    if (*(_BYTE *)(v83 + 328))
      v103 = 69;
    else
      v103 = 65;
    v117[0] = v128;
    v117[1] = 0;
    v118 = v103;
    v119 = 15;
    v120 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v125, v117, v97, v98, v99, v100, v101, v102);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, *(_QWORD *)(a1 + 8), v104, v105, v106, v107, v108, v109);
    v110 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
    JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, v110, v110, v111, v112, v113, v114);
  }
  JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), 1, v23, v23, v50, v51, v52, v53);
  v59 = v11[2];
  if ((_DWORD)v59 == -1)
  {
    v77 = *(_QWORD *)(a1 + 8);
    v116 = v124;
    JSC::MacroAssembler::jump(v77, (unsigned int *)&v116, v54, v59, v55, v56, v57, v58);
  }
  else
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v23, v59, v55, v56, v57, v58, (uint64_t)v121);
    v115 = v124;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v121, (unsigned int *)&v115, *(_QWORD *)(a1 + 8), v60, v61, v62, v63, v64);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v125, *(_QWORD *)(a1 + 8), v65, v66, v67, v68, v69, v70);
  v71 = v125;
  if (v127 != (_BYTE *)v125 && v125)
  {
    v125 = 0;
    LODWORD(v126) = 0;
    WTF::fastFree((unint64_t)v71, v16, v17, v18, v19, v20, v21, v22);
  }
LABEL_11:
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)(a1 + 8), (uint64_t)v16, v17, v18, v19, v20, v21, v22, (int *)&v125);
  *(_DWORD *)(v10 + 120 * a2 + 36) = (_DWORD)v125;
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v23, ((unint64_t)((8 * v11[11] + 8) >> 3) << 35) | 0x1F, v72, v73, v74, v75, v76);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterNonGreedy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  JSC::AssemblerBuffer *v18;
  _DWORD *v19;
  JSC::AssemblerBuffer *v20;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 304);
    v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
    v12 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 10);
    v13 = *(_DWORD **)(a1 + 8);
    v14 = v13[50];
    if (v14 + 4 > v13[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 14), a2, a3, a4, a5, a6, a7, a8);
      v14 = v13[50];
    }
    *(_DWORD *)(*((_QWORD *)v13 + 7) + v14) = v12 & 0x1F | 0x52800000;
    v13[50] += 4;
    v15 = *(_DWORD **)(a1 + 8);
    v16 = v15[50];
    if (v16 < v15[13])
    {
      v18 = (JSC::AssemblerBuffer *)(v15 + 14);
      do
      {
        if ((v16 + 4) > v15[48])
        {
          v20 = v18;
          v19 = v15;
          JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
          v15 = v19;
          v18 = v20;
          v16 = v19[50];
        }
        *(_DWORD *)(*((_QWORD *)v15 + 7) + v16) = -721215457;
        v16 = v15[50] + 4;
        v15[50] = v16;
      }
      while (v16 < v15[13]);
      v17 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
    }
    v15[52] = 0;
    *(_DWORD *)(v10 + 120 * a2 + 36) = v16;
    JSC::MacroAssemblerARM64::store64(v17, v12, ((unint64_t)((8 * *(_DWORD *)(v11 + 44) + 8) >> 3) << 35) | 0x1F, a4, a5, a6, a7, a8);
  }
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateCharacterClassFixed(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  _DWORD *v73;
  unsigned int v74;
  _DWORD *v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::AssemblerBuffer *v85;
  _DWORD *v86;
  int v87;
  int v88;
  uint64_t v89;
  unsigned int v90[3];
  int v91;
  uint64_t v92;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
  v12 = *(char **)(a1 + 40);
  v13 = v12[9];
  v14 = v12[10];
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, v12[1], v12[2], a5, a6, a7, a8, (uint64_t)&v91);
    v16 = v91;
    if (v91 != -1)
    {
      v17 = *(unsigned int *)(v10 + 120 * a2 + 52);
      if ((_DWORD)v17 == *(_DWORD *)(v10 + 120 * a2 + 48))
      {
        v18 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10 + 120 * a2 + 40, (void *)(v17 + 1), (unint64_t)&v91, v15, a5, a6, a7, a8);
        v20 = *v18;
        v19 = (uint64_t *)(v18 + 1);
        v16 = v20;
        LODWORD(v17) = *(_DWORD *)(v10 + 120 * a2 + 52);
      }
      else
      {
        v19 = &v92;
      }
      v21 = *(_QWORD *)(v10 + 120 * a2 + 40) + 12 * v17;
      *(_DWORD *)v21 = v16;
      *(_QWORD *)(v21 + 4) = *v19;
      ++*(_DWORD *)(v10 + 120 * a2 + 52);
    }
  }
  v22 = *(_DWORD *)(v11 + 8);
  if ((*(_BYTE *)(a1 + 84) & 1) != 0 && *(_BYTE *)(*(_QWORD *)(v11 + 16) + 88) == 2 && (*(_BYTE *)(v11 + 1) & 2) == 0)
  {
    if ((v22 & 0x80000000) == 0)
    {
      v22 *= 2;
      goto LABEL_13;
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x198E98AE4);
  }
LABEL_13:
  JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v22, v14, a5, a6, a7, a8);
  v30 = *(_DWORD **)(a1 + 8);
  v31 = v30[50];
  if (v31 < v30[13])
  {
    v85 = (JSC::AssemblerBuffer *)(v30 + 14);
    do
    {
      if ((v31 + 4) > v30[48])
      {
        v86 = v30;
        JSC::AssemblerBuffer::outOfLineGrow(v85, v23, v24, v25, v26, v27, v28, v29);
        v30 = v86;
        v31 = v86[50];
      }
      *(_DWORD *)(*((_QWORD *)v30 + 7) + v31) = -721215457;
      v31 = v30[50] + 4;
      v30[50] = v31;
    }
    while (v31 < v30[13]);
  }
  v30[52] = 0;
  v32 = *(_DWORD *)(v10 + 120 * a2 + 100);
  v33 = *(_DWORD *)(v11 + 40);
  v34 = v32 >= v33;
  v35 = v32 - v33;
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x198E98AECLL);
  }
  if (v35 < v22)
  {
    __break(0xC471u);
    JUMPOUT(0x198E98AF4);
  }
  v36 = v13;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, v35 - v22, v36, v14, v26, v27, v28, v29);
  v37 = v10 + 120 * a2 + 40;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassTermInner(a1, v11, v37, v36, v38, v39, v40, v41);
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    if (*(_BYTE *)v11 != 4
      || (v51 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 16) + 88), (v51 - 1) > 1)
      || (*(_BYTE *)(v11 + 1) & 2) != 0)
    {
      v53 = *(_DWORD **)(a1 + 8);
      v54 = v14 | (32 * v14) | 0x11000400;
      v55 = v53[50];
      if (v55 + 4 > v53[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v42, v43, v44, v45, v46, v47, v48);
        v55 = v53[50];
      }
      *(_DWORD *)(*((_QWORD *)v53 + 7) + v55) = v54;
      v53[50] += 4;
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, v36, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20), v45, v46, v47, v48, (uint64_t)v90);
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v56, v57, v58, v59, (uint64_t)&v88);
      v67 = v88;
      if (v88 != -1)
      {
        v68 = *(unsigned int *)(v37 + 12);
        if ((_DWORD)v68 == *(_DWORD *)(v37 + 8))
        {
          v69 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, (void *)(v68 + 1), (unint64_t)&v88, v62, v63, v64, v65, v66);
          v71 = *v69;
          v70 = (uint64_t *)(v69 + 1);
          v67 = v71;
          LODWORD(v68) = *(_DWORD *)(v37 + 12);
        }
        else
        {
          v70 = &v89;
        }
        v72 = *(_QWORD *)v37 + 12 * v68;
        *(_DWORD *)v72 = v67;
        *(_QWORD *)(v72 + 4) = *v70;
        ++*(_DWORD *)(v37 + 12);
      }
      v73 = *(_DWORD **)(a1 + 8);
      v74 = v73[50];
      if (v74 + 4 > v73[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 14), v60, v61, v62, v63, v64, v65, v66);
        v74 = v73[50];
      }
      *(_DWORD *)(*((_QWORD *)v73 + 7) + v74) = v54;
      v73[50] += 4;
      v75 = *(_DWORD **)(a1 + 8);
      v76 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
      v77 = v76 | (32 * v76) | 0x11000400;
      v78 = v75[50];
      if (v78 + 4 > v75[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 14), v60, v61, v62, v63, v64, v65, v66);
        v78 = v75[50];
      }
      *(_DWORD *)(*((_QWORD *)v75 + 7) + v78) = v77;
      v75[50] += 4;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v90, *(_QWORD *)(a1 + 8), v61, v62, v63, v64, v65, v66);
    }
    else
    {
      if ((v51 & 2) != 0)
        v52 = 2;
      else
        v52 = 1;
      JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), v52, v14, v14, v45, v46, v47, v48);
    }
  }
  else
  {
    v49 = *(_DWORD **)(a1 + 8);
    v50 = v49[50];
    if (v50 + 4 > v49[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 + 14), v42, v43, v44, v45, v46, v47, v48);
      v50 = v49[50];
    }
    *(_DWORD *)(*((_QWORD *)v49 + 7) + v50) = v14 | (32 * v14) | 0x11000400;
    v49[50] += 4;
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v14, *(char *)(*(_QWORD *)(a1 + 40) + 1), v45, v46, v47, v48, (uint64_t)v90);
  v87 = v31;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v90, (unsigned int *)&v87, *(_QWORD *)(a1 + 8), v79, v80, v81, v82, v83);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateCharacterClassNonGreedy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  JSC::AssemblerBuffer *v18;
  _DWORD *v19;
  JSC::AssemblerBuffer *v20;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 304);
    v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
    v12 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 10);
    v13 = *(_DWORD **)(a1 + 8);
    v14 = v13[50];
    if (v14 + 4 > v13[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 14), a2, a3, a4, a5, a6, a7, a8);
      v14 = v13[50];
    }
    *(_DWORD *)(*((_QWORD *)v13 + 7) + v14) = v12 & 0x1F | 0x52800000;
    v13[50] += 4;
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), ((unint64_t)*(unsigned int *)(v11 + 44) << 35) | 0x1F, a4, a5, a6, a7, a8);
    v15 = *(_DWORD **)(a1 + 8);
    v16 = v15[50];
    if (v16 < v15[13])
    {
      v18 = (JSC::AssemblerBuffer *)(v15 + 14);
      do
      {
        if ((v16 + 4) > v15[48])
        {
          v20 = v18;
          v19 = v15;
          JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
          v15 = v19;
          v18 = v20;
          v16 = v19[50];
        }
        *(_DWORD *)(*((_QWORD *)v15 + 7) + v16) = -721215457;
        v16 = v15[50] + 4;
        v15[50] = v16;
      }
      while (v16 < v15[13]);
      v17 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
    }
    v15[52] = 0;
    *(_DWORD *)(v10 + 120 * a2 + 36) = v16;
    JSC::MacroAssemblerARM64::store64(v17, v12, ((unint64_t)((8 * *(_DWORD *)(v11 + 44) + 8) >> 3) << 35) | 0x1F, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateAssertionWordBoundary(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Yarr::YarrPattern *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int j;
  unsigned int v47;
  char v48;
  int *v49;
  int *v50;
  int v51;
  char *v52;
  uint64_t v53;
  int i;
  unsigned int v55;
  char v56;
  int *v57;
  int *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int k;
  unsigned int v91;
  char v92;
  int *v93;
  int *v94;
  int v95;
  char *v96;
  unsigned int v97;
  WTF *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF *v121;
  WTF *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  char v128;
  __int16 v129;
  char v130;
  WTF *v131;
  uint64_t v132;
  _BYTE v133[24];
  WTF *v134;
  uint64_t v135;
  _BYTE v136[24];
  int v137;
  int v138;
  char v139;
  __int16 v140;
  char v141;
  int v142;
  int v143;
  char v144;
  __int16 v145;
  char v146;
  WTF *v147;
  uint64_t v148;
  _BYTE v149[24];
  __int128 v150;
  _BYTE v151[24];
  _BYTE *v152;
  uint64_t v153;
  _BYTE v154[24];
  _BYTE v155[12];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E996B0);
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(v12 + 9);
  *(_QWORD *)v155 = 0xFFFFFFFFLL;
  *(_DWORD *)&v155[8] = -16773311;
  v152 = v154;
  v153 = 2;
  v14 = *(_DWORD *)(v11 + 40);
  if (!v14)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(v12 + 1), *(unsigned int *)(v10 + 120 * a2 + 100), a5, a6, a7, a8, (uint64_t)&v150);
    *(_DWORD *)v155 = v150;
    *(_QWORD *)&v155[4] = *(_QWORD *)((char *)&v150 + 4);
    v14 = *(_DWORD *)(v11 + 40);
  }
  v15 = *(_DWORD *)(v10 + 120 * a2 + 100);
  v16 = v15 >= v14;
  v17 = v15 - v14;
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198E996B8);
  }
  if (v17 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198E996C0);
  }
  v18 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
  LODWORD(v150) = v17 + 1;
  v19 = v13;
  v21 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v150, v19, v18, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 80))
  {
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v21, v20, v19, v22, v23, v24, v25);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v21, v20, v19, v22, v23, v24, v25);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v21, v20, v19, v22, v23, v24, v25);
  }
  v26 = *(JSC::Yarr::YarrPattern **)(a1 + 56);
  if ((*(_BYTE *)(a1 + 84) & 2) != 0)
    JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(v26);
  else
    JSC::Yarr::YarrPattern::wordcharCharacterClass(v26);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, v19, (uint64_t)&v152, v27, v28, v29, v30, v31);
  if (!*(_DWORD *)(v11 + 40))
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v155, *(_QWORD *)(a1 + 8), v32, v33, v34, v35, v36, v37);
  *(_QWORD *)&v150 = v151;
  *((_QWORD *)&v150 + 1) = 2;
  v147 = (WTF *)v149;
  v148 = 2;
  if ((*(_BYTE *)(v11 + 1) & 2) != 0)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchAssertionWordchar(a1, a2, (uint64_t)&v147, (uint64_t)&v150, v34, v35, v36, v37);
    v53 = *(_QWORD *)(a1 + 8);
    for (i = *(_DWORD *)(v53 + 200); i < *(_DWORD *)(v53 + 52); *(_DWORD *)(v53 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v53 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 56), (uint64_t)v38, v39, v40, v41, v42, v43, v44);
        i = *(_DWORD *)(v53 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v53 + 56) + i) = -721215457;
      i = *(_DWORD *)(v53 + 200) + 4;
    }
    v55 = i;
    if ((i + 4) > *(_DWORD *)(v53 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 56), (uint64_t)v38, v39, v40, v41, v42, v43, v44);
      v55 = *(_DWORD *)(v53 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v53 + 56) + v55) = 335544320;
    *(_DWORD *)(v53 + 200) += 4;
    if (*(_BYTE *)(v53 + 328))
      v56 = 69;
    else
      v56 = 65;
    v142 = i;
    v143 = 0;
    v144 = v56;
    v145 = 15;
    v146 = -1;
    if (i != -1)
    {
      if (HIDWORD(v150) == DWORD2(v150))
      {
        v57 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v150, (void *)(HIDWORD(v150) + 1), (unint64_t)&v142, v40, v41, v42, v43, v44);
        v59 = *v57;
        v58 = v57 + 1;
        v60 = v150 + 12 * HIDWORD(v150);
        *(_DWORD *)v60 = v59;
      }
      else
      {
        v58 = &v143;
        v60 = v150 + 12 * HIDWORD(v150);
        *(_DWORD *)v60 = i;
      }
      *(_QWORD *)(v60 + 4) = *(_QWORD *)v58;
      ++HIDWORD(v150);
    }
    goto LABEL_37;
  }
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchAssertionWordchar(a1, a2, (uint64_t)&v150, (uint64_t)&v147, v34, v35, v36, v37);
  v45 = *(_QWORD *)(a1 + 8);
  for (j = *(_DWORD *)(v45 + 200); j < *(_DWORD *)(v45 + 52); *(_DWORD *)(v45 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(v45 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 + 56), (uint64_t)v38, v39, v40, v41, v42, v43, v44);
      j = *(_DWORD *)(v45 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v45 + 56) + j) = -721215457;
    j = *(_DWORD *)(v45 + 200) + 4;
  }
  v47 = j;
  if ((j + 4) > *(_DWORD *)(v45 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 + 56), (uint64_t)v38, v39, v40, v41, v42, v43, v44);
    v47 = *(_DWORD *)(v45 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v45 + 56) + v47) = 335544320;
  *(_DWORD *)(v45 + 200) += 4;
  if (*(_BYTE *)(v45 + 328))
    v48 = 69;
  else
    v48 = 65;
  v137 = j;
  v138 = 0;
  v139 = v48;
  v140 = 15;
  v141 = -1;
  if (j == -1)
  {
LABEL_37:
    v61 = HIDWORD(v148);
    goto LABEL_38;
  }
  if (HIDWORD(v148) == (_DWORD)v148)
  {
    v49 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v147, (void *)(HIDWORD(v148) + 1), (unint64_t)&v137, v40, v41, v42, v43, v44);
    v51 = *v49;
    v50 = v49 + 1;
    v52 = (char *)v147 + 12 * HIDWORD(v148);
    *(_DWORD *)v52 = v51;
  }
  else
  {
    v50 = &v138;
    v52 = (char *)v147 + 12 * HIDWORD(v148);
    *(_DWORD *)v52 = j;
  }
  *(_QWORD *)(v52 + 4) = *(_QWORD *)v50;
  v61 = ++HIDWORD(v148);
LABEL_38:
  v62 = v10 + 120 * a2;
  v63 = v62 + 40;
  if (!v61)
    goto LABEL_61;
  v125 = v11;
  v64 = v147;
  v65 = v61;
  v66 = *(unsigned int *)(v62 + 48);
  v67 = *(unsigned int *)(v62 + 52);
  v68 = v67 + v65;
  if (v67 + v65 > v66)
  {
    v69 = v66 + (v66 >> 2);
    if (v69 >= 0x10)
      v70 = v69 + 1;
    else
      v70 = 16;
    if (v70 <= v68)
      v70 = v67 + v65;
    v71 = *(_QWORD *)v63;
    if (v70 < 3)
    {
      v73 = v62 + 56;
      *(_QWORD *)(v62 + 40) = v62 + 56;
      *(_DWORD *)(v62 + 48) = 2;
      if (!(_DWORD)v67)
        goto LABEL_52;
    }
    else
    {
      if (v70 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x198E996D8);
      }
      v72 = 12 * v70;
      v73 = WTF::fastMalloc((WTF *)(12 * v70));
      *(_DWORD *)(v63 + 8) = (v72 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v63 = v73;
      if (!(_DWORD)v67)
        goto LABEL_52;
    }
    v74 = v71;
    do
    {
      *(_DWORD *)v73 = *(_DWORD *)v74;
      *(_QWORD *)(v73 + 4) = *(_QWORD *)(v74 + 4);
      v74 += 12;
      v73 += 12;
    }
    while (v74 != v71 + 12 * v67);
LABEL_52:
    if (v63 + 16 != v71 && v71)
    {
      if (*(_QWORD *)v63 == v71)
      {
        *(_QWORD *)v63 = 0;
        *(_DWORD *)(v63 + 8) = 0;
      }
      WTF::fastFree(v71, v38, v39, v40, v41, v42, v43, v44);
    }
  }
  v75 = *(unsigned int *)(v63 + 12);
  if (v68 < v75)
  {
    __break(0xC471u);
    JUMPOUT(0x198E996C8);
  }
  v76 = *(_QWORD *)v63 + 12 * v75;
  v77 = (WTF *)((char *)v64 + 12 * v65);
  v11 = v125;
  do
  {
    *(_DWORD *)v76 = *(_DWORD *)v64;
    *(_QWORD *)(v76 + 4) = *(_QWORD *)((char *)v64 + 4);
    v64 = (WTF *)((char *)v64 + 12);
    v76 += 12;
  }
  while (v64 != v77);
  *(_DWORD *)(v63 + 12) = v68;
LABEL_61:
  if (HIDWORD(v153))
  {
    v78 = 0;
    v79 = 0;
    v80 = *(_QWORD *)(a1 + 8);
    v81 = 12 * HIDWORD(v153);
    while (v79 < HIDWORD(v153))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v152[v78], v80, v39, v40, v41, v42, v43, v44);
      ++v79;
      v78 += 12;
      if (v81 == v78)
        goto LABEL_65;
    }
    __break(0xC471u);
LABEL_153:
    JUMPOUT(0x198E99698);
  }
LABEL_65:
  v134 = (WTF *)v136;
  v135 = 2;
  v131 = (WTF *)v133;
  v132 = 2;
  if ((*(_BYTE *)(v11 + 1) & 2) == 0)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchAssertionWordchar(a1, a2, (uint64_t)&v134, (uint64_t)&v131, v41, v42, v43, v44);
    goto LABEL_76;
  }
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchAssertionWordchar(a1, a2, (uint64_t)&v131, (uint64_t)&v134, v41, v42, v43, v44);
  v89 = *(_QWORD *)(a1 + 8);
  for (k = *(_DWORD *)(v89 + 200); k < *(_DWORD *)(v89 + 52); *(_DWORD *)(v89 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(v89 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
      k = *(_DWORD *)(v89 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v89 + 56) + k) = -721215457;
    k = *(_DWORD *)(v89 + 200) + 4;
  }
  v91 = k;
  if ((k + 4) > *(_DWORD *)(v89 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
    v91 = *(_DWORD *)(v89 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v89 + 56) + v91) = 335544320;
  *(_DWORD *)(v89 + 200) += 4;
  if (*(_BYTE *)(v89 + 328))
    v92 = 69;
  else
    v92 = 65;
  v126 = k;
  v127 = 0;
  v128 = v92;
  v129 = 15;
  v130 = -1;
  if (k == -1)
  {
LABEL_76:
    v97 = HIDWORD(v135);
    if (!HIDWORD(v135))
      goto LABEL_102;
    goto LABEL_80;
  }
  if (HIDWORD(v135) == (_DWORD)v135)
  {
    v93 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, (void *)(HIDWORD(v135) + 1), (unint64_t)&v126, v84, v85, v86, v87, v88);
    v95 = *v93;
    v94 = v93 + 1;
    v96 = (char *)v134 + 12 * HIDWORD(v135);
    *(_DWORD *)v96 = v95;
  }
  else
  {
    v94 = &v127;
    v96 = (char *)v134 + 12 * HIDWORD(v135);
    *(_DWORD *)v96 = k;
  }
  *(_QWORD *)(v96 + 4) = *(_QWORD *)v94;
  v97 = HIDWORD(v135) + 1;
  HIDWORD(v135) = v97;
  if (!v97)
    goto LABEL_102;
LABEL_80:
  v98 = v134;
  v99 = v97;
  v100 = *(unsigned int *)(v63 + 8);
  v101 = *(unsigned int *)(v63 + 12);
  v102 = v101 + v99;
  if (v101 + v99 > v100)
  {
    v103 = v100 + (v100 >> 2);
    if (v103 >= 0x10)
      v104 = v103 + 1;
    else
      v104 = 16;
    if (v104 <= v102)
      v104 = v101 + v99;
    v105 = *(_QWORD *)v63;
    if (v104 < 3)
    {
      v107 = v63 + 16;
      *(_QWORD *)v63 = v63 + 16;
      *(_DWORD *)(v63 + 8) = 2;
      if (!(_DWORD)v101)
        goto LABEL_93;
    }
    else
    {
      if (v104 >= 0x15555556)
      {
        __break(0xC471u);
        goto LABEL_153;
      }
      v106 = 12 * v104;
      v107 = WTF::fastMalloc((WTF *)(12 * v104));
      *(_DWORD *)(v63 + 8) = (v106 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v63 = v107;
      if (!(_DWORD)v101)
        goto LABEL_93;
    }
    v108 = v105;
    do
    {
      *(_DWORD *)v107 = *(_DWORD *)v108;
      *(_QWORD *)(v107 + 4) = *(_QWORD *)(v108 + 4);
      v108 += 12;
      v107 += 12;
    }
    while (v108 != v105 + 12 * v101);
LABEL_93:
    if (v63 + 16 != v105 && v105)
    {
      if (*(_QWORD *)v63 == v105)
      {
        *(_QWORD *)v63 = 0;
        *(_DWORD *)(v63 + 8) = 0;
      }
      WTF::fastFree(v105, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  v109 = *(unsigned int *)(v63 + 12);
  if (v102 < v109)
  {
    __break(0xC471u);
    JUMPOUT(0x198E996D0);
  }
  v110 = *(_QWORD *)v63 + 12 * v109;
  v111 = (WTF *)((char *)v98 + 12 * v99);
  do
  {
    *(_DWORD *)v110 = *(_DWORD *)v98;
    *(_QWORD *)(v110 + 4) = *(_QWORD *)((char *)v98 + 4);
    v98 = (WTF *)((char *)v98 + 12);
    v110 += 12;
  }
  while (v98 != v111);
  *(_DWORD *)(v63 + 12) = v102;
LABEL_102:
  v112 = *(_QWORD *)(a1 + 8);
  if (HIDWORD(v150))
  {
    v113 = 0;
    v114 = 0;
    v115 = 12 * HIDWORD(v150);
    do
    {
      if (v114 >= HIDWORD(v150))
      {
        __break(0xC471u);
        JUMPOUT(0x198E996A0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v150 + v113), v112, v83, v84, v85, v86, v87, v88);
      ++v114;
      v113 += 12;
    }
    while (v115 != v113);
    v112 = *(_QWORD *)(a1 + 8);
  }
  if (HIDWORD(v132))
  {
    v116 = 0;
    v117 = 0;
    v118 = 12 * HIDWORD(v132);
    do
    {
      if (v117 >= HIDWORD(v132))
      {
        __break(0xC471u);
        JUMPOUT(0x198E996A8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v116), v112, v83, v84, v85, v86, v87, v88);
      ++v117;
      v116 += 12;
    }
    while (v118 != v116);
  }
  v119 = v131;
  if (v133 != (_BYTE *)v131 && v131 != 0)
  {
    v131 = 0;
    LODWORD(v132) = 0;
    WTF::fastFree((unint64_t)v119, v82, v83, v84, v85, v86, v87, v88);
  }
  v121 = v134;
  if (v136 != (_BYTE *)v134 && v134)
  {
    v134 = 0;
    LODWORD(v135) = 0;
    WTF::fastFree((unint64_t)v121, v82, v83, v84, v85, v86, v87, v88);
  }
  v122 = v147;
  if (v149 != (_BYTE *)v147 && v147)
  {
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v122, v82, v83, v84, v85, v86, v87, v88);
  }
  v123 = v150;
  if (v151 != (_BYTE *)v150 && (_QWORD)v150)
  {
    *(_QWORD *)&v150 = 0;
    DWORD2(v150) = 0;
    WTF::fastFree(v123, v82, v83, v84, v85, v86, v87, v88);
  }
  v124 = (unint64_t)v152;
  if (v154 != v152 && v152)
  {
    v152 = 0;
    LODWORD(v153) = 0;
    WTF::fastFree(v124, v82, v83, v84, v85, v86, v87, v88);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateBackReference(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  _DWORD *v46;
  uint64_t *v47;
  int v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  _DWORD *v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  _DWORD *v79;
  uint64_t *v80;
  int v81;
  _BYTE *v82;
  int v83;
  int v84;
  int *v85;
  int *v86;
  int v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  char v118;
  int *v119;
  int *v120;
  int v121;
  _BYTE *v122;
  unint64_t v123;
  int v124;
  unsigned int v125;
  _DWORD *v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t *v145;
  int v146;
  unsigned int v147;
  _DWORD *v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int *v169;
  int *v170;
  int v171;
  uint64_t v172;
  int j;
  unsigned int v174;
  char v175;
  int *v176;
  int *v177;
  int v178;
  _BYTE *v179;
  _DWORD *v180;
  int k;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  int *v195;
  int *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _DWORD *v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned int v214;
  _DWORD *v215;
  uint64_t *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int m;
  unsigned int v245;
  char v246;
  int *v247;
  int *v248;
  int v249;
  _BYTE *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  unsigned int *v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  int *v273;
  int *v274;
  int v275;
  _BYTE *v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int n;
  unsigned int v288;
  char v289;
  int *v290;
  int *v291;
  int v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _DWORD *v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  int *v333;
  int *v334;
  int v335;
  _BYTE *v336;
  char v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _DWORD *v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  int v358;
  _DWORD *v359;
  uint64_t *v360;
  int v361;
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _DWORD *v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _DWORD *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  int i;
  unint64_t v395;
  _BYTE *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _DWORD *v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unsigned int v419;
  unint64_t v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  uint64_t v424;
  unsigned int v425;
  uint64_t v426;
  int v427;
  int v428;
  int v429;
  char v430;
  int v431;
  int v432;
  uint64_t v433;
  unsigned int v434;
  int v435;
  int v436;
  char v437;
  __int16 v438;
  char v439;
  int v440;
  int v441;
  int v442;
  int v443;
  char v444;
  __int16 v445;
  char v446;
  unsigned int v447[3];
  int v448;
  uint64_t v449;
  int v450;
  int v451;
  int v452;
  int v453;
  char v454;
  __int16 v455;
  char v456;
  __int128 v457;
  _BYTE v458[24];
  unsigned int v459;
  int v460;
  uint64_t v461;
  int v462;
  int v463;
  unsigned int v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  int v469;
  int v470;
  char v471;
  __int16 v472;
  char v473;
  int v474;
  uint64_t v475;
  int v476;
  int v477;
  int v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  _BYTE *v484;
  uint64_t v485;
  _BYTE v486[24];
  _BYTE *v487;
  uint64_t v488;
  _BYTE v489[32];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E9B1BCLL);
  }
  v433 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 120 * a2 + 24);
  v9 = *(unsigned int *)(v433 + 16);
  v10 = *(_QWORD *)(a1 + 56);
  v426 = *(_QWORD *)(a1 + 304);
  v422 = *(_DWORD *)(v433 + 16);
  if (*(_DWORD *)(v10 + 12))
  {
    if (*(_DWORD *)(v10 + 124) <= v9)
    {
      __break(0xC471u);
LABEL_300:
      JUMPOUT(0x198E9AE6CLL);
    }
    v429 = *(_DWORD *)(*(_QWORD *)(v10 + 112) + 4 * v9);
  }
  else
  {
    v429 = 0;
  }
  v12 = *(unsigned int *)(v433 + 44);
  v13 = *(char **)(a1 + 40);
  v14 = v13[9];
  v427 = v13[10];
  v15 = v13[10];
  v16 = v13[11];
  v17 = 8 * v12;
  v18 = (v12 << 35) | 0x1F;
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v13[1], v18, a4, a5, a6, a7, a8);
  v430 = v16;
  v24 = v16;
  v25 = (char)v15;
  v434 = v15;
  v428 = v17;
  v424 = v18;
  v423 = v14;
  if (*(_BYTE *)(v433 + 2) || *(_DWORD *)(v433 + 8) != 1)
  {
    JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, ((unint64_t)(v17 + 8) << 32) | 0x1F, v19, v20, v21, v22, v23);
    v29 = *(unsigned __int8 *)(v433 + 2);
    v487 = v489;
    v488 = 2;
    if (v29 == 2)
    {
      v30 = 255;
      v31 = a2;
      goto LABEL_92;
    }
    v26 = (char *)&v488 + 4;
  }
  else
  {
    v487 = v489;
    v26 = (char *)&v488 + 4;
    v488 = 2;
  }
  v484 = v486;
  v485 = 2;
  v32 = v433;
  if (v429)
  {
    v33 = *(_QWORD *)(a1 + 40);
    v34 = v15;
    if ((*(_BYTE *)(a1 + 84) & 1) == 0)
      v34 = *(unsigned __int8 *)(v33 + 15);
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(v33 + 3) | ((unint64_t)((4 * v429+ 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)+ 4) >> 2) << 34), (char)v34, v19, v20, v21, v22, v23);
    JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, (char)v34, (char)v34, v35, v36, v37, v38, (uint64_t)&v457);
    if (*(_BYTE *)(v433 + 2) || *(_DWORD *)(v433 + 8) != 1)
    {
      v44 = v457;
      v482 = v457;
      v483 = *(_QWORD *)((char *)&v457 + 4);
      v31 = a2;
      if ((_DWORD)v457 != -1)
      {
        v45 = HIDWORD(v488);
        if (HIDWORD(v488) == (_DWORD)v488)
        {
          v49 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v482, v39, v40, v41, v42, v43);
          v50 = *v49;
          v47 = (uint64_t *)(v49 + 1);
          v44 = v50;
          v45 = HIDWORD(v488);
        }
        else
        {
          v47 = &v483;
        }
        v55 = v487;
        goto LABEL_26;
      }
    }
    else
    {
      v44 = v457;
      v480 = v457;
      v481 = *(_QWORD *)((char *)&v457 + 4);
      v31 = a2;
      if ((_DWORD)v457 != -1)
      {
        v26 = (char *)&v485 + 4;
        v45 = HIDWORD(v485);
        if (HIDWORD(v485) == (_DWORD)v485)
        {
          v46 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v484, (void *)(HIDWORD(v485) + 1), (unint64_t)&v480, v39, v40, v41, v42, v43);
          v48 = *v46;
          v47 = (uint64_t *)(v46 + 1);
          v44 = v48;
          v45 = HIDWORD(v485);
        }
        else
        {
          v47 = &v481;
        }
        v55 = v484;
LABEL_26:
        v56 = &v55[12 * v45];
        *(_DWORD *)v56 = v44;
        *(_QWORD *)(v56 + 4) = *v47;
        ++*(_DWORD *)v26;
      }
    }
    JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)v34 << 8) | 0x300000000, 0x200000000, v25, v40, v41, v42, v43);
    v60 = *(_DWORD **)(a1 + 8);
    v61 = v60[50];
    if (v61 + 4 > v60[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v60 + 14), v57, v58, v59, v51, v52, v53, v54);
      v61 = v60[50];
    }
    *(_DWORD *)(*((_QWORD *)v60 + 7) + v61) = v430 & 0x1F | (32 * v427) | ((v434 & 0x1F) << 10) | 0x29400000;
    v60[50] += 4;
    goto LABEL_30;
  }
  JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 3), (8 * v422), v24, v25, v21, v22, v23);
  v34 = 255;
  v31 = a2;
LABEL_30:
  if (*(_BYTE *)(v433 + 2) || *(_DWORD *)(v433 + 8) != 1)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v24, 0xFFFFFFFFLL, v51, v52, v53, v54, (uint64_t)&v478);
    v77 = v478;
    if (v478 != -1)
    {
      v78 = HIDWORD(v488);
      if (HIDWORD(v488) == (_DWORD)v488)
      {
        v79 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v478, v72, v73, v74, v75, v76);
        v81 = *v79;
        v80 = (uint64_t *)(v79 + 1);
        v77 = v81;
        v78 = HIDWORD(v488);
      }
      else
      {
        v80 = &v479;
      }
      v82 = &v487[12 * v78];
      *(_DWORD *)v82 = v77;
      *(_QWORD *)(v82 + 4) = *v80;
      ++HIDWORD(v488);
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v24, v25, v73, v74, v75, v76, (uint64_t)&v476);
    v83 = v476;
    if (v476 != -1)
    {
      v84 = HIDWORD(v488);
      if (HIDWORD(v488) == (_DWORD)v488)
      {
        v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v476, v19, v20, v21, v22, v23);
        v87 = *v85;
        v86 = v85 + 1;
        v83 = v87;
        v84 = HIDWORD(v488);
      }
      else
      {
        v86 = &v477;
      }
      v88 = &v487[12 * v84];
      *(_DWORD *)v88 = v83;
      *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
      ++HIDWORD(v488);
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v24, 0xFFFFFFFFLL, v51, v52, v53, v54, (uint64_t)&v474);
    v67 = v474;
    if (v474 != -1)
    {
      v68 = HIDWORD(v485);
      if (HIDWORD(v485) == (_DWORD)v485)
      {
        v69 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v484, (void *)(HIDWORD(v485) + 1), (unint64_t)&v474, v62, v63, v64, v65, v66);
        v71 = *v69;
        v70 = (uint64_t *)(v69 + 1);
        v67 = v71;
        v68 = HIDWORD(v485);
      }
      else
      {
        v70 = &v475;
      }
      v89 = &v484[12 * v68];
      *(_DWORD *)v89 = v67;
      *(_QWORD *)(v89 + 4) = *v70;
      ++HIDWORD(v485);
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v24, v25, v63, v64, v65, v66, (uint64_t)&v457);
    v96 = *(_QWORD *)(a1 + 8);
    if (HIDWORD(v485))
    {
      v419 = v34;
      v97 = v24;
      v98 = v25;
      v99 = v31;
      v100 = 0;
      v101 = 0;
      v102 = 12 * HIDWORD(v485);
      do
      {
        if (v101 >= HIDWORD(v485))
        {
          __break(0xC471u);
          JUMPOUT(0x198E9B1B4);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v484[v100], v96, v90, v91, v92, v93, v94, v95);
        ++v101;
        v100 += 12;
      }
      while (v102 != v100);
      v96 = *(_QWORD *)(a1 + 8);
      v31 = v99;
      v25 = v98;
      v24 = v97;
      v34 = v419;
    }
    if (!*(_BYTE *)(v96 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198E9B0C4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v96, (JSC::ARM64LogicalImmediate *)1, v96 + 264, v91, v92, v93, v94, v95);
    JSC::MacroAssemblerARM64::store32(v96, 16, ((unint64_t)(v428 + 8) << 32) | 0x1F, v103, v104, v105, v106, v107);
    if (*(_BYTE *)(v433 + 2) == 1)
      JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), 63, ((unint64_t)(v428 + 16) << 32) | 0x1F, v110, v111, v112, v113, v114);
    v115 = *(_QWORD *)(a1 + 8);
    v116 = *(_DWORD *)(v115 + 200);
    if (v116 < *(_DWORD *)(v115 + 52))
    {
      v32 = v433;
      do
      {
        if ((v116 + 4) > *(_DWORD *)(v115 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v115 + 56), v108, v109, v110, v111, v112, v113, v114);
          v116 = *(_DWORD *)(v115 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v115 + 56) + v116) = -721215457;
        v116 = *(_DWORD *)(v115 + 200) + 4;
        *(_DWORD *)(v115 + 200) = v116;
      }
      while (v116 < *(_DWORD *)(v115 + 52));
    }
    v117 = v116;
    if ((v116 + 4) > *(_DWORD *)(v115 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v115 + 56), v108, v109, v110, v111, v112, v113, v114);
      v117 = *(_DWORD *)(v115 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v115 + 56) + v117) = 335544320;
    *(_DWORD *)(v115 + 200) += 4;
    if (*(_BYTE *)(v115 + 328))
      v118 = 69;
    else
      v118 = 65;
    v469 = v116;
    v470 = 0;
    v471 = v118;
    v472 = 15;
    v473 = -1;
    if (v116 != -1)
    {
      if (HIDWORD(v488) == (_DWORD)v488)
      {
        v119 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v469, v110, v111, v112, v113, v114);
        v121 = *v119;
        v120 = v119 + 1;
        v122 = &v487[12 * HIDWORD(v488)];
        *(_DWORD *)v122 = v121;
      }
      else
      {
        v120 = &v470;
        v122 = &v487[12 * HIDWORD(v488)];
        *(_DWORD *)v122 = v116;
      }
      *(_QWORD *)(v122 + 4) = *(_QWORD *)v120;
      ++HIDWORD(v488);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v457, *(_QWORD *)(a1 + 8), v109, v110, v111, v112, v113, v114);
  }
  v123 = (unint64_t)v484;
  if (v486 != v484 && v484)
  {
    v484 = 0;
    LODWORD(v485) = 0;
    WTF::fastFree(v123, v27, v28, v19, v20, v21, v22, v23);
  }
  v124 = *(unsigned __int8 *)(v32 + 2);
  if (v124 != 2)
  {
    if (v124 == 1)
    {
      v147 = v34;
      v420 = v31;
      v484 = v486;
      v485 = 2;
      v148 = *(_DWORD **)(a1 + 8);
      v149 = v148[50];
      if (v149 < v148[13])
      {
        do
        {
          if ((v149 + 4) > v148[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v148 + 14), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
            v149 = v148[50];
          }
          *(_DWORD *)(*((_QWORD *)v148 + 7) + v149) = -721215457;
          v149 = v148[50] + 4;
          v148[50] = v149;
        }
        while (v149 < v148[13]);
        v150 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v150 = *(_QWORD *)(a1 + 8);
      }
      v421 = v149;
      v148[52] = 0;
      v432 = v430 & 0x1F;
      v151 = v432 << 16;
      if (v434 == 31)
      {
        v152 = 1260413951;
      }
      else
      {
        v151 |= 32 * (v434 & 0x1F);
        v152 = v434 & 0x1F | 0x4B000000;
      }
      v153 = v151 | v152;
      v156 = *(_DWORD *)(v150 + 200);
      v155 = (unsigned int *)(v150 + 200);
      v154 = v156;
      if (v156 + 4 > *(v155 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v155 - 36), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
        v154 = *v155;
      }
      *(_DWORD *)(*((_QWORD *)v155 - 18) + v154) = v153;
      *v155 += 4;
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v25, ((unint64_t)(v428 + 16) << 32) | 0x1F, v19, v20, v21, v22, v23);
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::checkNotEnoughInput((uint64_t)&v462, a1, v25, v157, v158, v159, v160, v161);
      v167 = v462;
      if (v462 != -1)
      {
        v168 = HIDWORD(v488);
        if (HIDWORD(v488) == (_DWORD)v488)
        {
          v169 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v462, v162, v163, v164, v165, v166);
          v171 = *v169;
          v170 = v169 + 1;
          v167 = v171;
          v168 = HIDWORD(v488);
        }
        else
        {
          v170 = &v463;
        }
        v336 = &v487[12 * v168];
        *(_DWORD *)v336 = v167;
        *(_QWORD *)(v336 + 4) = *(_QWORD *)v170;
        ++HIDWORD(v488);
      }
      if (v147 == *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 15))
        v337 = v147;
      else
        v337 = -1;
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchBackreference(a1, v31, (uint64_t)&v484, v423, v24, v25, v337, v166);
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)(v428 + 8) << 32) | 0x1F, v423, v338, v339, v340, v341, v342);
      v350 = *(_DWORD **)(a1 + 8);
      v351 = v350[50];
      if (v351 + 4 > v350[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v350 + 14), v343, v344, v345, v346, v347, v348, v349);
        v351 = v350[50];
      }
      *(_DWORD *)(*((_QWORD *)v350 + 7) + v351) = v423 | (32 * v423) | 0x11000400;
      v350[50] += 4;
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v423, ((unint64_t)(v428 + 8) << 32) | 0x1F, v345, v346, v347, v348, v349);
      v356 = *(unsigned int *)(v32 + 8);
      if ((_DWORD)v356 != -1)
      {
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v423, v356, v352, v353, v354, v355, (uint64_t)&v460);
        v357 = v460;
        if (v460 != -1)
        {
          v358 = HIDWORD(v488);
          if (HIDWORD(v488) == (_DWORD)v488)
          {
            v359 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v460, v356, v352, v353, v354, v355);
            v361 = *v359;
            v360 = (uint64_t *)(v359 + 1);
            v357 = v361;
            v358 = HIDWORD(v488);
          }
          else
          {
            v360 = &v461;
          }
          v362 = &v487[12 * v358];
          *(_DWORD *)v362 = v357;
          *(_QWORD *)(v362 + 4) = *v360;
          ++HIDWORD(v488);
        }
      }
      if (v429)
      {
        if ((*(_BYTE *)(a1 + 84) & 1) != 0)
          JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((4 * v429+ 8* *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)+ 4) >> 2) << 34), (char)v147, v356, v352, v353, v354, v355);
        JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)v147 << 8) | 0x300000000, 0x200000000, v25, v352, v353, v354, v355);
        v370 = *(_DWORD **)(a1 + 8);
        v371 = v370[50];
        if (v371 + 4 > v370[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v370 + 14), v363, v364, v365, v366, v367, v368, v369);
          v371 = v370[50];
        }
        *(_DWORD *)(*((_QWORD *)v370 + 7) + v371) = (32 * v427) | ((v434 & 0x1F) << 10) | v432 | 0x29400000;
        v370[50] += 4;
      }
      else
      {
        JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 3), (8 * v422), v24, v25, v353, v354, v355);
      }
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v424, v365, v366, v367, v368, v369);
      v372 = *(_QWORD *)(a1 + 8);
      v459 = v421;
      JSC::MacroAssembler::jump(v372, &v459, v373, v374, v375, v376, v377, v378);
      v385 = *(_QWORD *)(a1 + 8);
      if (HIDWORD(v485))
      {
        v386 = 0;
        v387 = 0;
        v388 = 12 * HIDWORD(v485);
        v389 = v424;
        do
        {
          if (v387 >= HIDWORD(v485))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9B19CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v484[v386], v385, v379, v380, v381, v382, v383, v384);
          ++v387;
          v386 += 12;
        }
        while (v388 != v386);
        v385 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v389 = v424;
      }
      JSC::MacroAssemblerARM64::load64(v385, v389, *(char *)(*(_QWORD *)(a1 + 40) + 1), v380, v381, v382, v383, v384);
      v390 = *(_DWORD **)(a1 + 8);
      if (HIDWORD(v488))
      {
        v391 = 0;
        v392 = 0;
        v393 = 12 * HIDWORD(v488);
        do
        {
          if (v392 >= HIDWORD(v488))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9B1A4);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v487[v391], (uint64_t)v390, v28, v19, v20, v21, v22, v23);
          ++v392;
          v391 += 12;
        }
        while (v393 != v391);
        v390 = *(_DWORD **)(a1 + 8);
      }
      for (i = v390[50]; i < v390[13]; v390[50] = i)
      {
        if ((i + 4) > v390[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v390 + 14), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
          i = v390[50];
        }
        *(_DWORD *)(*((_QWORD *)v390 + 7) + i) = -721215457;
        i = v390[50] + 4;
      }
      v390[52] = 0;
      *(_DWORD *)(v426 + 120 * v420 + 36) = i;
      v395 = (unint64_t)v484;
      if (v486 != v484 && v484 != 0)
      {
        v484 = 0;
        LODWORD(v485) = 0;
        WTF::fastFree(v395, v27, v28, v19, v20, v21, v22, v23);
      }
    }
    else if (!*(_BYTE *)(v32 + 2))
    {
      v125 = v34;
      v126 = *(_DWORD **)(a1 + 8);
      v127 = v126[50];
      if (v127 < v126[13])
      {
        do
        {
          if ((v127 + 4) > v126[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v126 + 14), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
            v127 = v126[50];
          }
          *(_DWORD *)(*((_QWORD *)v126 + 7) + v127) = -721215457;
          v127 = v126[50] + 4;
          v126[50] = v127;
        }
        while (v127 < v126[13]);
        v128 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v128 = *(_QWORD *)(a1 + 8);
      }
      v425 = v127;
      v129 = v31;
      v126[52] = 0;
      v431 = v430 & 0x1F;
      v130 = v431 << 16;
      if (v434 == 31)
      {
        v131 = 1260413951;
      }
      else
      {
        v130 |= 32 * (v434 & 0x1F);
        v131 = v434 & 0x1F | 0x4B000000;
      }
      v132 = v130 | v131;
      v135 = *(_DWORD *)(v128 + 200);
      v134 = (unsigned int *)(v128 + 200);
      v133 = v135;
      if (v135 + 4 > *(v134 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v134 - 36), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
        v133 = *v134;
      }
      *(_DWORD *)(*((_QWORD *)v134 - 18) + v133) = v132;
      *v134 += 4;
      v136 = v426 + 120 * v31 + 40;
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::checkNotEnoughInput((uint64_t)&v467, a1, v25, v19, v20, v21, v22, v23);
      v142 = v467;
      if (v467 != -1)
      {
        v143 = *(unsigned int *)(v136 + 12);
        if ((_DWORD)v143 == *(_DWORD *)(v136 + 8))
        {
          v144 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v136, (void *)(v143 + 1), (unint64_t)&v467, v137, v138, v139, v140, v141);
          v146 = *v144;
          v145 = (uint64_t *)(v144 + 1);
          v142 = v146;
          LODWORD(v143) = *(_DWORD *)(v136 + 12);
        }
        else
        {
          v145 = &v468;
        }
        v305 = *(_QWORD *)v136 + 12 * v143;
        *(_DWORD *)v305 = v142;
        *(_QWORD *)(v305 + 4) = *v145;
        ++*(_DWORD *)(v136 + 12);
      }
      if (v125 == *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 15))
        v306 = v125;
      else
        v306 = -1;
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchBackreference(a1, v129, v136, v423, v24, v25, v306, v141);
      if (*(_DWORD *)(v32 + 8) != 1)
      {
        JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)(v428 + 8) << 32) | 0x1F, v423, v308, v309, v310, v311, v312);
        v320 = *(_DWORD **)(a1 + 8);
        v321 = v320[50];
        if (v321 + 4 > v320[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v320 + 14), v313, v314, v315, v316, v317, v318, v319);
          v321 = v320[50];
        }
        *(_DWORD *)(*((_QWORD *)v320 + 7) + v321) = v423 | (32 * v423) | 0x11000400;
        v320[50] += 4;
        JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v423, ((unint64_t)(v428 + 8) << 32) | 0x1F, v315, v316, v317, v318, v319);
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v423, *(unsigned int *)(v32 + 8), v322, v323, v324, v325, (uint64_t)&v465);
        v331 = v465;
        if (v465 != -1)
        {
          v332 = HIDWORD(v488);
          if (HIDWORD(v488) == (_DWORD)v488)
          {
            v333 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v465, v326, v327, v328, v329, v330);
            v335 = *v333;
            v334 = v333 + 1;
            v331 = v335;
            v332 = HIDWORD(v488);
          }
          else
          {
            v334 = &v466;
          }
          v397 = &v487[12 * v332];
          *(_DWORD *)v397 = v331;
          *(_QWORD *)(v397 + 4) = *(_QWORD *)v334;
          ++HIDWORD(v488);
        }
        if (v429)
        {
          if ((*(_BYTE *)(a1 + 84) & 1) != 0)
            JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((4 * v429+ 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)+ 4) >> 2) << 34), (char)v125, v326, v327, v328, v329, v330);
          JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)v125 << 8) | 0x300000000, 0x200000000, v25, v327, v328, v329, v330);
          v405 = *(_DWORD **)(a1 + 8);
          v406 = v405[50];
          if (v406 + 4 > v405[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v405 + 14), v398, v399, v400, v401, v402, v403, v404);
            v406 = v405[50];
          }
          *(_DWORD *)(*((_QWORD *)v405 + 7) + v406) = (32 * v427) | ((v434 & 0x1F) << 10) | v431 | 0x29400000;
          v405[50] += 4;
        }
        else
        {
          JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 3), (8 * v422), v24, v25, v328, v329, v330);
        }
        v407 = *(_QWORD *)(a1 + 8);
        v464 = v425;
        JSC::MacroAssembler::jump(v407, &v464, v399, v400, v401, v402, v403, v404);
      }
      v408 = *(_QWORD *)(a1 + 8);
      if (HIDWORD(v488))
      {
        v409 = 0;
        v410 = 0;
        v411 = 12 * HIDWORD(v488);
        v412 = v428;
        do
        {
          if (v410 >= HIDWORD(v488))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9B1ACLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v487[v409], v408, v307, v308, v309, v310, v311, v312);
          ++v410;
          v409 += 12;
        }
        while (v411 != v409);
        v408 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v412 = v428;
      }
      if (!*(_BYTE *)(v408 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9B094);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v408, (JSC::ARM64LogicalImmediate *)1, v408 + 264, v308, v309, v310, v311, v312);
      JSC::MacroAssemblerARM64::store32(v408, 16, ((unint64_t)(v412 + 8) << 32) | 0x1F, v413, v414, v415, v416, v417);
    }
    goto LABEL_244;
  }
  v30 = v34;
LABEL_92:
  v484 = v486;
  v485 = 2;
  *(_QWORD *)&v457 = v458;
  *((_QWORD *)&v457 + 1) = 2;
  v172 = *(_QWORD *)(a1 + 8);
  for (j = *(_DWORD *)(v172 + 200); j < *(_DWORD *)(v172 + 52); *(_DWORD *)(v172 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(v172 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v172 + 56), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
      j = *(_DWORD *)(v172 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v172 + 56) + j) = -721215457;
    j = *(_DWORD *)(v172 + 200) + 4;
  }
  v174 = j;
  if ((j + 4) > *(_DWORD *)(v172 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v172 + 56), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
    v174 = *(_DWORD *)(v172 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v172 + 56) + v174) = 335544320;
  *(_DWORD *)(v172 + 200) += 4;
  if (*(_BYTE *)(v172 + 328))
    v175 = 69;
  else
    v175 = 65;
  v452 = j;
  v453 = 0;
  v454 = v175;
  v455 = 15;
  v456 = -1;
  if (j != -1)
  {
    if (HIDWORD(v488) == (_DWORD)v488)
    {
      v176 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v452, v19, v20, v21, v22, v23);
      v178 = *v176;
      v177 = v176 + 1;
      v179 = &v487[12 * HIDWORD(v488)];
      *(_DWORD *)v179 = v178;
    }
    else
    {
      v177 = &v453;
      v179 = &v487[12 * HIDWORD(v488)];
      *(_DWORD *)v179 = j;
    }
    *(_QWORD *)(v179 + 4) = *(_QWORD *)v177;
    ++HIDWORD(v488);
  }
  v180 = *(_DWORD **)(a1 + 8);
  for (k = v180[50]; k < v180[13]; v180[50] = k)
  {
    if ((k + 4) > v180[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v180 + 14), (uint64_t)v27, v28, v19, v20, v21, v22, v23);
      k = v180[50];
    }
    *(_DWORD *)(*((_QWORD *)v180 + 7) + k) = -721215457;
    k = v180[50] + 4;
  }
  v180[52] = 0;
  *(_DWORD *)(v426 + 120 * v31 + 36) = k;
  if (v429)
  {
    v182 = *(_QWORD *)(a1 + 40);
    v183 = v434;
    if ((*(_BYTE *)(a1 + 84) & 1) == 0)
      v183 = *(unsigned __int8 *)(v182 + 15);
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(v182 + 3) | ((unint64_t)((4 * v429+ 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)+ 4) >> 2) << 34), (char)v183, v19, v20, v21, v22, v23);
    JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, (char)v183, (char)v183, v184, v185, v186, v187, (uint64_t)&v450);
    v193 = v450;
    if (v450 != -1)
    {
      v194 = HIDWORD(v457);
      if (HIDWORD(v457) == DWORD2(v457))
      {
        v195 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v457, (void *)(HIDWORD(v457) + 1), (unint64_t)&v450, v188, v189, v190, v191, v192);
        v197 = *v195;
        v196 = v195 + 1;
        v193 = v197;
        v194 = HIDWORD(v457);
      }
      else
      {
        v196 = &v451;
      }
      v202 = v457 + 12 * v194;
      *(_DWORD *)v202 = v193;
      *(_QWORD *)(v202 + 4) = *(_QWORD *)v196;
      ++HIDWORD(v457);
    }
    v30 = v183;
    JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)v183 << 8) | 0x300000000, 0x200000000, v25, v189, v190, v191, v192);
    v206 = *(_DWORD **)(a1 + 8);
    v207 = v206[50];
    if (v207 + 4 > v206[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v206 + 14), v203, v204, v205, v198, v199, v200, v201);
      v207 = v206[50];
    }
    *(_DWORD *)(*((_QWORD *)v206 + 7) + v207) = v430 & 0x1F | (32 * v427) | ((v434 & 0x1F) << 10) | 0x29400000;
    v206[50] += 4;
  }
  else
  {
    JSC::MacroAssemblerARM64::loadPair32(*(_DWORD **)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 3), (8 * v422), v24, v25, v21, v22, v23);
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v24, 0xFFFFFFFFLL, v198, v199, v200, v201, (uint64_t)&v448);
  v213 = v448;
  if (v448 != -1)
  {
    v214 = HIDWORD(v457);
    if (HIDWORD(v457) == DWORD2(v457))
    {
      v215 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v457, (void *)(HIDWORD(v457) + 1), (unint64_t)&v448, v208, v209, v210, v211, v212);
      v217 = *v215;
      v216 = (uint64_t *)(v215 + 1);
      v213 = v217;
      v214 = HIDWORD(v457);
    }
    else
    {
      v216 = &v449;
    }
    v218 = v457 + 12 * v214;
    *(_DWORD *)v218 = v213;
    *(_QWORD *)(v218 + 4) = *v216;
    ++HIDWORD(v457);
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v24, v25, v209, v210, v211, v212, (uint64_t)v447);
  v225 = *(_QWORD *)(a1 + 8);
  if (HIDWORD(v457))
  {
    v226 = v25;
    v227 = v31;
    v228 = 0;
    v229 = 0;
    v230 = 12 * HIDWORD(v457);
    do
    {
      if (v229 >= HIDWORD(v457))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9B184);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v457 + v228), v225, v219, v220, v221, v222, v223, v224);
      ++v229;
      v228 += 12;
    }
    while (v230 != v228);
    v225 = *(_QWORD *)(a1 + 8);
    v31 = v227;
    v25 = v226;
  }
  if (!*(_BYTE *)(v225 + 212))
  {
    __break(0xC471u);
    goto LABEL_300;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v225, (JSC::ARM64LogicalImmediate *)1, v225 + 264, v220, v221, v222, v223, v224);
  JSC::MacroAssemblerARM64::store32(v225, 16, ((unint64_t)(v428 + 8) << 32) | 0x1F, v231, v232, v233, v234, v235);
  v243 = *(_QWORD *)(a1 + 8);
  for (m = *(_DWORD *)(v243 + 200); m < *(_DWORD *)(v243 + 52); *(_DWORD *)(v243 + 200) = m)
  {
    if ((m + 4) > *(_DWORD *)(v243 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v243 + 56), v236, v237, v238, v239, v240, v241, v242);
      m = *(_DWORD *)(v243 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v243 + 56) + m) = -721215457;
    m = *(_DWORD *)(v243 + 200) + 4;
  }
  v245 = m;
  if ((m + 4) > *(_DWORD *)(v243 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v243 + 56), v236, v237, v238, v239, v240, v241, v242);
    v245 = *(_DWORD *)(v243 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v243 + 56) + v245) = 335544320;
  *(_DWORD *)(v243 + 200) += 4;
  if (*(_BYTE *)(v243 + 328))
    v246 = 69;
  else
    v246 = 65;
  v442 = m;
  v443 = 0;
  v444 = v246;
  v445 = 15;
  v446 = -1;
  if (m != -1)
  {
    if (HIDWORD(v488) == (_DWORD)v488)
    {
      v247 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v442, v238, v239, v240, v241, v242);
      v249 = *v247;
      v248 = v247 + 1;
      v250 = &v487[12 * HIDWORD(v488)];
      *(_DWORD *)v250 = v249;
    }
    else
    {
      v248 = &v443;
      v250 = &v487[12 * HIDWORD(v488)];
      *(_DWORD *)v250 = m;
    }
    *(_QWORD *)(v250 + 4) = *(_QWORD *)v248;
    ++HIDWORD(v488);
  }
  v251 = v31;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v447, *(_QWORD *)(a1 + 8), v237, v238, v239, v240, v241, v242);
  v259 = *(_QWORD *)(a1 + 8);
  v260 = (v430 & 0x1F) << 16;
  if (v434 == 31)
  {
    v261 = 1260413951;
  }
  else
  {
    v260 |= 32 * (v434 & 0x1F);
    v261 = v434 & 0x1F | 0x4B000000;
  }
  v262 = v260 | v261;
  v265 = *(_DWORD *)(v259 + 200);
  v264 = (unsigned int *)(v259 + 200);
  v263 = v265;
  if (v265 + 4 > *(v264 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v264 - 36), v252, v253, v254, v255, v256, v257, v258);
    v263 = *v264;
  }
  *(_DWORD *)(*((_QWORD *)v264 - 18) + v263) = v262;
  *v264 += 4;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::checkNotEnoughInput((uint64_t)&v440, a1, v25, v254, v255, v256, v257, v258);
  v271 = v440;
  if (v440 != -1)
  {
    v272 = HIDWORD(v488);
    if (HIDWORD(v488) == (_DWORD)v488)
    {
      v273 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v440, v266, v267, v268, v269, v270);
      v275 = *v273;
      v274 = v273 + 1;
      v271 = v275;
      v272 = HIDWORD(v488);
    }
    else
    {
      v274 = &v441;
    }
    v276 = &v487[12 * v272];
    *(_DWORD *)v276 = v271;
    *(_QWORD *)(v276 + 4) = *(_QWORD *)v274;
    ++HIDWORD(v488);
  }
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), v424, v266, v267, v268, v269, v270);
  if (v30 == *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 15))
    v278 = v30;
  else
    v278 = -1;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchBackreference(a1, v251, (uint64_t)&v484, v423, v24, v25, v278, v277);
  v286 = *(_QWORD *)(a1 + 8);
  for (n = *(_DWORD *)(v286 + 200); n < *(_DWORD *)(v286 + 52); *(_DWORD *)(v286 + 200) = n)
  {
    if ((n + 4) > *(_DWORD *)(v286 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v286 + 56), v279, v280, v281, v282, v283, v284, v285);
      n = *(_DWORD *)(v286 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v286 + 56) + n) = -721215457;
    n = *(_DWORD *)(v286 + 200) + 4;
  }
  v288 = n;
  if ((n + 4) > *(_DWORD *)(v286 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v286 + 56), v279, v280, v281, v282, v283, v284, v285);
    v288 = *(_DWORD *)(v286 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v286 + 56) + v288) = 335544320;
  *(_DWORD *)(v286 + 200) += 4;
  if (*(_BYTE *)(v286 + 328))
    v289 = 69;
  else
    v289 = 65;
  v435 = n;
  v436 = 0;
  v437 = v289;
  v438 = 15;
  v439 = -1;
  if (n != -1)
  {
    if (HIDWORD(v488) == (_DWORD)v488)
    {
      v290 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v487, (void *)(HIDWORD(v488) + 1), (unint64_t)&v435, v281, v282, v283, v284, v285);
      v292 = *v290;
      v291 = v290 + 1;
      v293 = &v487[12 * HIDWORD(v488)];
      *(_DWORD *)v293 = v292;
    }
    else
    {
      v291 = &v436;
      v293 = &v487[12 * HIDWORD(v488)];
      *(_DWORD *)v293 = n;
    }
    *(_QWORD *)(v293 + 4) = *(_QWORD *)v291;
    ++HIDWORD(v488);
  }
  v294 = *(_QWORD *)(a1 + 8);
  if (HIDWORD(v485))
  {
    v295 = 0;
    v296 = 0;
    v297 = 12 * HIDWORD(v485);
    do
    {
      if (v296 >= HIDWORD(v485))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9B18CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v484[v295], v294, v280, v281, v282, v283, v284, v285);
      ++v296;
      v295 += 12;
    }
    while (v297 != v295);
    v294 = *(_QWORD *)(a1 + 8);
  }
  JSC::MacroAssemblerARM64::load64(v294, v424, *(char *)(*(_QWORD *)(a1 + 40) + 1), v281, v282, v283, v284, v285);
  if (HIDWORD(v488))
  {
    v298 = 0;
    v299 = 0;
    v300 = *(_QWORD *)(a1 + 8);
    v301 = 12 * HIDWORD(v488);
    do
    {
      if (v299 >= HIDWORD(v488))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9B194);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v487[v298], v300, v28, v19, v20, v21, v22, v23);
      ++v299;
      v298 += 12;
    }
    while (v301 != v298);
  }
  v302 = v457;
  if (v458 != (_BYTE *)v457 && (_QWORD)v457 != 0)
  {
    *(_QWORD *)&v457 = 0;
    DWORD2(v457) = 0;
    WTF::fastFree(v302, v27, v28, v19, v20, v21, v22, v23);
  }
  v304 = (unint64_t)v484;
  if (v486 != v484 && v484)
  {
    v484 = 0;
    LODWORD(v485) = 0;
    WTF::fastFree(v304, v27, v28, v19, v20, v21, v22, v23);
  }
LABEL_244:
  v418 = (unint64_t)v487;
  if (v489 != v487)
  {
    if (v487)
    {
      v487 = 0;
      LODWORD(v488) = 0;
      WTF::fastFree(v418, v27, v28, v19, v20, v21, v22, v23);
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateDotStarEnclosure(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  _DWORD *v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  _DWORD *v46;
  int v47;
  unsigned int v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int8x8_t v74;
  uint64_t v75;
  int i;
  unsigned int v77;
  char v78;
  int *v79;
  int *v80;
  int v81;
  char *v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  int *v122;
  int *v123;
  int v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int *v149;
  int *v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  WTF *v158;
  WTF *v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  char v173;
  __int16 v174;
  char v175;
  int v176;
  unsigned int v177[3];
  int v178;
  uint64_t v179;
  WTF *v180;
  uint64_t v181;
  _BYTE v182[24];
  WTF *v183;
  uint64_t v184;
  _BYTE v185[24];
  _BYTE *v186;
  uint64_t v187;
  _BYTE v188[32];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    goto LABEL_128;
  }
  v9 = *(_QWORD *)(a1 + 304);
  v10 = *(_QWORD *)(v9 + 120 * a2 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(v11 + 9);
  v13 = *(unsigned __int8 *)(v11 + 10);
  v186 = v188;
  v187 = 2;
  v183 = (WTF *)v185;
  v184 = 2;
  v180 = (WTF *)v182;
  v181 = 2;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 2) & 0x10) == 0)
  {
    v161 = v9;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::getMatchStart(a1, (char)v13, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, (char)v13, *(char *)(*(_QWORD *)(a1 + 40) + 12), v14, v15, v16, v17, (uint64_t)&v178);
    v25 = v178;
    if (v178 != -1)
    {
      v26 = HIDWORD(v184);
      if (HIDWORD(v184) == (_DWORD)v184)
      {
        v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v183, (void *)(HIDWORD(v184) + 1), (unint64_t)&v178, v20, v21, v22, v23, v24);
        v29 = *v27;
        v28 = (uint64_t *)(v27 + 1);
        v25 = v29;
        v26 = HIDWORD(v184);
      }
      else
      {
        v28 = &v179;
      }
      v45 = (char *)v183 + 12 * v26;
      *(_DWORD *)v45 = v25;
      *(_QWORD *)(v45 + 4) = *v28;
      ++HIDWORD(v184);
    }
    v46 = *(_DWORD **)(a1 + 8);
    v47 = v46[50];
    if (v47 < v46[13])
    {
      do
      {
        if ((v47 + 4) > v46[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v46 + 14), v18, v19, v20, v21, v22, v23, v24);
          v47 = v46[50];
        }
        *(_DWORD *)(*((_QWORD *)v46 + 7) + v47) = -721215457;
        v47 = v46[50] + 4;
        v46[50] = v47;
      }
      while (v47 < v46[13]);
      v49 = *(_DWORD **)(a1 + 8);
      v48 = v49[50];
    }
    else
    {
      v48 = v46[50];
      v49 = *(_DWORD **)(a1 + 8);
    }
    v46[52] = 0;
    v50 = (char)v13 | (32 * (char)v13);
    if (v48 + 4 > v49[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 + 14), v18, v19, v20, v21, v22, v23, v24);
      v48 = v49[50];
    }
    *(_DWORD *)(*((_QWORD *)v49 + 7) + v48) = v50 | 0x51000400;
    v49[50] += 4;
    v51 = *(_QWORD *)(a1 + 8);
    v52 = **(unsigned __int8 **)(a1 + 40) | ((unint64_t)v13 << 8);
    if (*(_BYTE *)(a1 + 80))
      JSC::MacroAssemblerARM64::load16(v51, v52 | 0x100000000, 0x200000000uLL, v12, v21, v22, v23, v24);
    else
      JSC::MacroAssemblerARM64::load8(v51, v52, 0x200000000uLL, v12, v21, v22, v23, v24);
    JSC::Yarr::YarrPattern::newlineCharacterClass(*(JSC::Yarr::YarrPattern **)(a1 + 56));
    v163 = v12;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, v12, (uint64_t)&v186, v53, v54, v55, v56, v57);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 8, (char)v13, *(char *)(*(_QWORD *)(a1 + 40) + 12), v58, v59, v60, v61, (uint64_t)v177);
    v176 = v47;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v177, (unsigned int *)&v176, *(_QWORD *)(a1 + 8), v62, v63, v64, v65, v66);
    v75 = *(_QWORD *)(a1 + 8);
    for (i = *(_DWORD *)(v75 + 200); i < *(_DWORD *)(v75 + 52); *(_DWORD *)(v75 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v75 + 192))
      {
        v74 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 56), v67, v68, v69, v70, v71, v72, v73).n128_u64[0];
        i = *(_DWORD *)(v75 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v75 + 56) + i) = -721215457;
      i = *(_DWORD *)(v75 + 200) + 4;
    }
    v77 = i;
    if ((i + 4) > *(_DWORD *)(v75 + 192))
    {
      v74 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 56), v67, v68, v69, v70, v71, v72, v73).n128_u64[0];
      v77 = *(_DWORD *)(v75 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v75 + 56) + v77) = 335544320;
    *(_DWORD *)(v75 + 200) += 4;
    if (*(_BYTE *)(v75 + 328))
      v78 = 69;
    else
      v78 = 65;
    v171 = i;
    v172 = 0;
    v173 = v78;
    v174 = 15;
    v175 = -1;
    if (i != -1)
    {
      if (HIDWORD(v184) == (_DWORD)v184)
      {
        v79 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v183, (void *)(HIDWORD(v184) + 1), (unint64_t)&v171, v69, v70, v71, v72, v73);
        v81 = *v79;
        v80 = v79 + 1;
        v82 = (char *)v183 + 12 * HIDWORD(v184);
        *(_DWORD *)v82 = v81;
      }
      else
      {
        v80 = &v172;
        v82 = (char *)v183 + 12 * HIDWORD(v184);
        *(_DWORD *)v82 = i;
      }
      *(_QWORD *)(v82 + 4) = *(_QWORD *)v80;
      ++HIDWORD(v184);
    }
    v83 = *(_DWORD **)(a1 + 8);
    if (HIDWORD(v187))
    {
      v84 = 0;
      v85 = 0;
      v86 = 12 * HIDWORD(v187);
      while (v85 < HIDWORD(v187))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v186[v84], (uint64_t)v83, v68, v69, v70, v71, v72, v73);
        ++v85;
        v84 += 12;
        if (v86 == v84)
        {
          v83 = *(_DWORD **)(a1 + 8);
          goto LABEL_38;
        }
      }
      __break(0xC471u);
LABEL_128:
      JUMPOUT(0x198E9BBE4);
    }
LABEL_38:
    v87 = v50 | 0x11000400;
    v88 = v83[50];
    if (v88 + 4 > v83[48])
    {
      v74 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 14), v67, v68, v69, v70, v71, v72, v73).n128_u64[0];
      v88 = v83[50];
    }
    *(_DWORD *)(*((_QWORD *)v83 + 7) + v88) = v87;
    v83[50] += 4;
    if (HIDWORD(v184))
    {
      v89 = 0;
      v90 = 0;
      v91 = *(_QWORD *)(a1 + 8);
      v92 = 12 * HIDWORD(v184);
      do
      {
        if (v90 >= HIDWORD(v184))
        {
          __break(0xC471u);
          JUMPOUT(0x198E9BBECLL);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v183 + v89), v91, v68, v69, v70, v71, v72, v73);
        ++v90;
        v89 += 12;
      }
      while (v92 != v89);
    }
    if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) == 0 && (*(_BYTE *)(v10 + 16) & 1) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 1, (char)v13, v70, v71, v72, v73, (uint64_t)&v169, v74);
      v93 = v169;
      if (v169 != -1)
      {
        v94 = *(unsigned int *)(v161 + 120 * a2 + 52);
        if ((_DWORD)v94 == *(_DWORD *)(v161 + 120 * a2 + 48))
        {
          v95 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v161 + 120 * a2 + 40, (void *)(v94 + 1), (unint64_t)&v169, v69, v70, v71, v72, v73);
          v97 = *v95;
          v96 = (uint64_t *)(v95 + 1);
          v93 = v97;
          LODWORD(v94) = *(_DWORD *)(v161 + 120 * a2 + 52);
        }
        else
        {
          v96 = &v170;
        }
        v98 = *(_QWORD *)(v161 + 120 * a2 + 40) + 12 * v94;
        *(_DWORD *)v98 = v93;
        *(_QWORD *)(v98 + 4) = *v96;
        ++*(_DWORD *)(v161 + 120 * a2 + 52);
      }
    }
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, (char)v13, v68, v69, v70, v71, v72, v73);
    v106 = *(_DWORD **)(a1 + 8);
    v107 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1);
    if (v107 == (_DWORD)v13)
    {
LABEL_64:
      v113 = v106[50];
      if (v113 < v106[13])
      {
        do
        {
          if ((v113 + 4) > v106[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v106 + 14), v99, v100, v101, v102, v103, v104, v105);
            v113 = v106[50];
          }
          *(_DWORD *)(*((_QWORD *)v106 + 7) + v113) = -721215457;
          v113 = v106[50] + 4;
          v106[50] = v113;
        }
        while (v113 < v106[13]);
        v114 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v114 = (uint64_t)v106;
      }
      v106[52] = 0;
      JSC::MacroAssemblerARM64::branch32(v114, 0, (char)v13, *(char *)(*(_QWORD *)(a1 + 40) + 2), v102, v103, v104, v105, (uint64_t)&v167);
      v120 = v167;
      if (v167 != -1)
      {
        v121 = HIDWORD(v181);
        if (HIDWORD(v181) == (_DWORD)v181)
        {
          v122 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v180, (void *)(HIDWORD(v181) + 1), (unint64_t)&v167, v115, v116, v117, v118, v119);
          v124 = *v122;
          v123 = v122 + 1;
          v120 = v124;
          v121 = HIDWORD(v181);
        }
        else
        {
          v123 = &v168;
        }
        v125 = (char *)v180 + 12 * v121;
        *(_DWORD *)v125 = v120;
        *(_QWORD *)(v125 + 4) = *(_QWORD *)v123;
        ++HIDWORD(v181);
      }
      v126 = *(_QWORD *)(a1 + 8);
      v127 = (v13 << 8) | **(unsigned __int8 **)(a1 + 40);
      if (*(_BYTE *)(a1 + 80))
        JSC::MacroAssemblerARM64::load16(v126, v127 | 0x100000000, 0x200000000uLL, v163, v116, v117, v118, v119);
      else
        JSC::MacroAssemblerARM64::load8(v126, v127, 0x200000000uLL, v163, v116, v117, v118, v119);
      JSC::Yarr::YarrPattern::newlineCharacterClass(*(JSC::Yarr::YarrPattern **)(a1 + 56));
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, v163, (uint64_t)&v180, v128, v129, v130, v131, v132);
      v140 = *(_DWORD **)(a1 + 8);
      v141 = v140[50];
      if (v141 + 4 > v140[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v140 + 14), v133, v134, v135, v136, v137, v138, v139);
        v141 = v140[50];
      }
      *(_DWORD *)(*((_QWORD *)v140 + 7) + v141) = v87;
      v140[50] += 4;
      v142 = *(_QWORD *)(a1 + 8);
      v166 = v113;
      JSC::MacroAssembler::jump(v142, (unsigned int *)&v166, v134, v135, v136, v137, v138, v139);
      if (HIDWORD(v181))
      {
        v143 = 0;
        v144 = 0;
        v145 = *(_QWORD *)(a1 + 8);
        v146 = 12 * HIDWORD(v181);
        do
        {
          if (v144 >= HIDWORD(v181))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9BBF4);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v180 + v143), v145, v33, v34, v35, v36, v37, v38);
          ++v144;
          v143 += 12;
        }
        while (v146 != v143);
      }
      if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 8) == 0 && (*(_BYTE *)(v10 + 16) & 2) != 0)
      {
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, (char)v13, *(char *)(*(_QWORD *)(a1 + 40) + 2), v35, v36, v37, v38, (uint64_t)&v164);
        v147 = v164;
        if (v164 != -1)
        {
          v148 = *(unsigned int *)(v161 + 120 * a2 + 52);
          if ((_DWORD)v148 == *(_DWORD *)(v161 + 120 * a2 + 48))
          {
            v149 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v161 + 120 * a2 + 40, (void *)(v148 + 1), (unint64_t)&v164, v34, v35, v36, v37, v38);
            v151 = *v149;
            v150 = v149 + 1;
            v147 = v151;
            LODWORD(v148) = *(_DWORD *)(v161 + 120 * a2 + 52);
          }
          else
          {
            v150 = &v165;
          }
          v152 = *(_QWORD *)(v161 + 120 * a2 + 40) + 12 * v148;
          *(_DWORD *)v152 = v147;
          *(_QWORD *)(v152 + 4) = *(_QWORD *)v150;
          ++*(_DWORD *)(v161 + 120 * a2 + 52);
        }
      }
      v153 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
      if ((_DWORD)v13 != *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1))
      {
        v42 = *(_QWORD *)(a1 + 8);
        v40 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1);
        if ((_DWORD)v13 != 63)
        {
          if ((_DWORD)v13 != 31 && v153 != 31)
          {
            v44 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1) | ((v13 & 0x1F) << 16);
            goto LABEL_92;
          }
          goto LABEL_95;
        }
        if (v40 == 31)
        {
LABEL_95:
          v109 = (32 * (char)v13) | v153;
          goto LABEL_96;
        }
LABEL_94:
        v154 = v40 & 0x1F | 0xD2800000;
        goto LABEL_97;
      }
      goto LABEL_100;
    }
    if ((char)v107 == 63)
    {
      if ((_DWORD)v13 != 31)
      {
        v108 = v13 & 0x1F | 0xD2800000;
        goto LABEL_61;
      }
    }
    else if ((_DWORD)v13 != 31 && (char)v107 != 31)
    {
      v108 = v13 & 0xFFE0FFFF | ((v107 & 0x1F) << 16) | 0xAA0003E0;
LABEL_61:
      v112 = v106[50];
      v111 = v106 + 50;
      v110 = v112;
      if (v112 + 4 > *(v111 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v111 - 36), v99, v100, v101, v102, v103, v104, v105);
        v110 = *v111;
      }
      *(_DWORD *)(*((_QWORD *)v111 - 18) + v110) = v108;
      *v111 += 4;
      v106 = *(_DWORD **)(a1 + 8);
      goto LABEL_64;
    }
    v108 = (char)v13 | (32 * (char)v107) | 0x91000000;
    goto LABEL_61;
  }
  v30 = *(_DWORD **)(a1 + 8);
  v31 = v30[50];
  if (v31 + 4 > v30[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 14), a2, a3, a4, a5, a6, a7, a8);
    v31 = v30[50];
  }
  *(_DWORD *)(*((_QWORD *)v30 + 7) + v31) = v13 & 0x1F | 0x52800000;
  v30[50] += 4;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::setMatchStart(a1, (char)v13, a3, a4, a5, a6, a7, a8);
  v39 = *(_QWORD *)(a1 + 40);
  v40 = *(unsigned __int8 *)(v39 + 2);
  v41 = *(char *)(v39 + 1);
  if (v40 != v41)
  {
    v42 = *(_QWORD *)(a1 + 8);
    v43 = (char)v40;
    LOBYTE(v40) = v41;
    if (v43 == 63)
    {
      if (v41 != 31)
        goto LABEL_94;
    }
    else if (v43 != 31 && v41 != 31)
    {
      v44 = v41 | ((v43 & 0x1F) << 16);
LABEL_92:
      v154 = v44 | 0xAA0003E0;
LABEL_97:
      v157 = *(_DWORD *)(v42 + 200);
      v156 = (unsigned int *)(v42 + 200);
      v155 = v157;
      if (v157 + 4 > *(v156 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v156 - 36), (uint64_t)v32, v33, v34, v35, v36, v37, v38);
        v155 = *v156;
      }
      *(_DWORD *)(*((_QWORD *)v156 - 18) + v155) = v154;
      *v156 += 4;
      goto LABEL_100;
    }
    v109 = v41 | (32 * v43);
LABEL_96:
    v154 = v109 | 0x91000000;
    goto LABEL_97;
  }
LABEL_100:
  v158 = v180;
  if (v182 != (_BYTE *)v180 && v180)
  {
    v180 = 0;
    LODWORD(v181) = 0;
    WTF::fastFree((unint64_t)v158, v32, v33, v34, v35, v36, v37, v38);
  }
  v159 = v183;
  if (v185 != (_BYTE *)v183 && v183)
  {
    v183 = 0;
    LODWORD(v184) = 0;
    WTF::fastFree((unint64_t)v159, v32, v33, v34, v35, v36, v37, v38);
  }
  v160 = (unint64_t)v186;
  if (v188 != v186)
  {
    if (v186)
    {
      v186 = 0;
      LODWORD(v187) = 0;
      WTF::fastFree(v160, v32, v33, v34, v35, v36, v37, v38);
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,char32_t)#1}::operator()(uint64_t *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v8 = *a1;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfCharNotEquals((uint64_t)&v20, a1[1], a3, a2, *(char *)a1[2], a6, a7, a8);
  v14 = v20;
  if (v20 != -1)
  {
    v15 = *(unsigned int *)(v8 + 52);
    if ((_DWORD)v15 == *(_DWORD *)(v8 + 48))
    {
      v16 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 40, (void *)(v15 + 1), (unint64_t)&v20, v9, v10, v11, v12, v13);
      v18 = *v16;
      v17 = (uint64_t *)(v16 + 1);
      v14 = v18;
      v19 = *(_QWORD *)(v8 + 40) + 12 * *(unsigned int *)(v8 + 52);
    }
    else
    {
      v17 = &v21;
      v19 = *(_QWORD *)(v8 + 40) + 12 * v15;
    }
    *(_DWORD *)v19 = v14;
    *(_QWORD *)(v19 + 4) = *v17;
    ++*(_DWORD *)(v8 + 52);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned short,unsigned short)#1}::operator()(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;

  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v13 = **(char **)(a1 + 8);
  v38 = a2;
  v14 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(v11, &v38, v13, *(char *)(*(_QWORD *)(v11 + 40) + 1), a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load16(v12, v14, v15, **(char **)(a1 + 8), v15, v16, v17, v18);
  if (a4)
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(v11 + 8), (JSC::ARM64LogicalImmediate *)a4, **(_BYTE **)(a1 + 8), **(char **)(a1 + 8));
  v23 = *(_QWORD *)(v11 + 8);
  v24 = *(_QWORD *)(a1 + 16);
  JSC::MacroAssemblerARM64::branch32(v23, 1, **(char **)(a1 + 8), a4 | a3, v19, v20, v21, v22, (uint64_t)&v36);
  v30 = v36;
  if (v36 != -1)
  {
    v31 = *(unsigned int *)(v24 + 52);
    if ((_DWORD)v31 == *(_DWORD *)(v24 + 48))
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 40, (void *)(v31 + 1), (unint64_t)&v36, v25, v26, v27, v28, v29);
      v34 = *v32;
      v33 = v32 + 1;
      v30 = v34;
      v35 = *(_QWORD *)(v24 + 40) + 12 * *(unsigned int *)(v24 + 52);
    }
    else
    {
      v33 = &v37;
      v35 = *(_QWORD *)(v24 + 40) + 12 * v31;
    }
    *(_DWORD *)v35 = v30;
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++*(_DWORD *)(v24 + 52);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#1}::operator()(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  void *v34;
  _DWORD *v35;
  _DWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;
  _DWORD v54[3];
  _DWORD v55[3];
  int v56;

  v10 = *(_QWORD *)a1;
  if (a4)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = **(char **)(a1 + 8);
    v56 = a2;
    v14 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(v10, &v56, v13, *(char *)(*(_QWORD *)(v10 + 40) + 1), a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load32(v12, v14, v15, **(char **)(a1 + 8), v15, v16, v17, v18);
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(v10 + 8), (JSC::ARM64LogicalImmediate *)a4, **(_BYTE **)(a1 + 8), **(char **)(a1 + 8));
    v19 = *(_QWORD *)(a1 + 16);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(v10 + 8), 1, **(char **)(a1 + 8), a4 | a3, v20, v21, v22, v23, (uint64_t)v55);
    v29 = v55[0];
    if (v55[0] == -1)
      return;
    v30 = (_QWORD *)(v19 + 40);
    v33 = *(_DWORD *)(v19 + 52);
    v32 = (_DWORD *)(v19 + 52);
    v31 = v33;
    if (v33 == *(v32 - 1))
    {
      v34 = (void *)(v31 + 1);
      v35 = v55;
LABEL_5:
      v36 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v34, (unint64_t)v35, v24, v25, v26, v27, v28);
      v38 = *v36;
      v37 = v36 + 1;
      v29 = v38;
      LODWORD(v31) = *v32;
LABEL_12:
      v53 = *v30 + 12 * v31;
      *(_DWORD *)v53 = v29;
      *(_QWORD *)(v53 + 4) = *v37;
      ++*v32;
      return;
    }
    v52 = v55;
    goto LABEL_11;
  }
  v39 = *(_QWORD *)(v10 + 8);
  v40 = *(_QWORD *)(a1 + 16);
  v41 = **(char **)(a1 + 8);
  v56 = a2;
  v42 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(v10, &v56, v41, *(char *)(*(_QWORD *)(v10 + 40) + 1), a5, a6, a7, a8);
  if (!*(_BYTE *)(v39 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(v39 + 296) + 208) &= ~*(_DWORD *)(v39 + 320);
  JSC::MacroAssemblerARM64::load32(v39, v42, v43, *(char *)(v39 + 304), v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::branch32(v39, 1, 17, a3, v47, v48, v49, v50, (uint64_t)v54);
  v29 = v54[0];
  if (v54[0] != -1)
  {
    v30 = (_QWORD *)(v40 + 40);
    v51 = *(_DWORD *)(v40 + 52);
    v32 = (_DWORD *)(v40 + 52);
    v31 = v51;
    if (v51 == *(v32 - 1))
    {
      v34 = (void *)(v31 + 1);
      v35 = v54;
      goto LABEL_5;
    }
    v52 = v54;
LABEL_11:
    v37 = v52 + 1;
    goto LABEL_12;
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned int,unsigned int)#2}::operator()(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  void *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  _QWORD *v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  _DWORD v54[3];
  _DWORD v55[3];
  int v56;

  v10 = *(_QWORD *)a1;
  if (a4)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = **(char **)(a1 + 8);
    v56 = a2;
    v14 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(v10, &v56, v13, *(char *)(*(_QWORD *)(v10 + 40) + 1), a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load32(v12, v14, v15, **(char **)(a1 + 8), v15, v16, v17, v18);
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(v10 + 8), (JSC::ARM64LogicalImmediate *)a4, **(_BYTE **)(a1 + 8), **(char **)(a1 + 8));
    v19 = *(_QWORD *)(a1 + 16);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(v10 + 8), 1, **(char **)(a1 + 8), a4 | a3, v20, v21, v22, v23, (uint64_t)v55);
    v29 = v55[0];
    if (v55[0] == -1)
      return;
    v30 = (_QWORD *)(v19 + 40);
    v33 = *(_DWORD *)(v19 + 52);
    v32 = (_DWORD *)(v19 + 52);
    v31 = v33;
    if (v33 == *(v32 - 1))
    {
      v34 = (void *)(v31 + 1);
      v35 = v55;
LABEL_9:
      v49 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v34, (unint64_t)v35, v24, v25, v26, v27, v28);
      v51 = *v49;
      v50 = v49 + 1;
      v29 = v51;
      LODWORD(v31) = *v32;
LABEL_13:
      v53 = *v30 + 12 * v31;
      *(_DWORD *)v53 = v29;
      *(_QWORD *)(v53 + 4) = *v50;
      ++*v32;
      return;
    }
    v52 = v55;
    goto LABEL_12;
  }
  v36 = *(_QWORD *)(v10 + 8);
  v37 = *(_QWORD *)(a1 + 16);
  v38 = **(char **)(a1 + 8);
  v56 = a2;
  v39 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(v10, &v56, v38, *(char *)(*(_QWORD *)(v10 + 40) + 1), a5, a6, a7, a8);
  if (!*(_BYTE *)(v36 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(v36 + 296) + 208) &= ~*(_DWORD *)(v36 + 320);
  JSC::MacroAssemblerARM64::load32(v36, v39, v40, *(char *)(v36 + 304), v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::branch32(v36, 1, 17, a3, v44, v45, v46, v47, (uint64_t)v54);
  v29 = v54[0];
  if (v54[0] != -1)
  {
    v30 = (_QWORD *)(v37 + 40);
    v48 = *(_DWORD *)(v37 + 52);
    v32 = (_DWORD *)(v37 + 52);
    v31 = v48;
    if (v48 == *(v32 - 1))
    {
      v34 = (void *)(v31 + 1);
      v35 = v54;
      goto LABEL_9;
    }
    v52 = v54;
LABEL_12:
    v50 = v52 + 1;
    goto LABEL_13;
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generatePatternCharacterOnce(unsigned long)::{lambda(WTF::Checked<unsigned int,WTF::CrashOnOverflow>,unsigned long long,unsigned long long)#2}::operator()(uint64_t a1, int a2, uint64_t a3, JSC::ARM64LogicalImmediate *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;

  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v13 = **(char **)(a1 + 8);
  v38 = a2;
  v14 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(v11, &v38, v13, *(char *)(*(_QWORD *)(v11 + 40) + 1), a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64(v12, v14, v15, **(char **)(a1 + 8), v15, v16, v17, v18);
  if (a4)
    JSC::MacroAssemblerARM64::or64(*(_QWORD *)(v11 + 8), a4, **(char **)(a1 + 8));
  v23 = *(_QWORD *)(v11 + 8);
  v24 = *(_QWORD *)(a1 + 16);
  JSC::MacroAssemblerARM64::branch64(v23, 1, **(char **)(a1 + 8), (unint64_t)a4 | a3, v19, v20, v21, v22, (uint64_t)&v36);
  v30 = v36;
  if (v36 != -1)
  {
    v31 = *(unsigned int *)(v24 + 52);
    if ((_DWORD)v31 == *(_DWORD *)(v24 + 48))
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 40, (void *)(v31 + 1), (unint64_t)&v36, v25, v26, v27, v28, v29);
      v34 = *v32;
      v33 = v32 + 1;
      v30 = v34;
      v35 = *(_QWORD *)(v24 + 40) + 12 * *(unsigned int *)(v24 + 52);
    }
    else
    {
      v33 = &v37;
      v35 = *(_QWORD *)(v24 + 40) + 12 * v31;
    }
    *(_DWORD *)v35 = v30;
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++*(_DWORD *)(v24 + 52);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfCharNotEquals(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v12 = *(char *)(*(_QWORD *)(a2 + 40) + 1);
  v23 = a4;
  v14 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a2, &v23, a5, v12, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 80))
  {
    if ((*(_BYTE *)(a2 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a2, v14, v13, a5, v15, v16, v17, v18);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a2 + 8), v14, v13, a5, v15, v16, v17, v18);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a2 + 8), v14, v13, a5, v15, v16, v17, v18);
  }
  if ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 2) & 4) != 0 && (a3 | 0x20) - 97 <= 0x19)
  {
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(a2 + 8), (JSC::ARM64LogicalImmediate *)0x20, a5, a5);
    a3 |= 0x20u;
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a2 + 8), 1, a5, a3, v19, v20, v21, v22, a1);
}

unint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  int v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = a4;
  v10 = *(unsigned __int8 *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
    v11 = 0x3FFFFFFF;
  else
    v11 = 0x7FFFFFFF;
  i = *a2;
  if (*a2 > v11)
  {
    JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), **(char **)(a1 + 40), a3, a4, a5, a6, a7, a8);
    for (i = *a2; i > v11; *a2 = i)
    {
      JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), a3, 0x40000000, a3, v17, v18, v19, v20);
      if (*(_BYTE *)(a1 + 80))
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a1 + 8), a3, 0x40000000, a3, v17, v18, v19, v20);
      i = *a2 - 0x40000000;
      if (*a2 < 0x40000000)
        goto LABEL_16;
    }
    v10 = *(unsigned __int8 *)(a1 + 80);
  }
  if (v10)
  {
    if (i < 1073741825)
    {
      v13 = 0x100000000;
      return v13 | ((unint64_t)v8 << 8) | **(unsigned __int8 **)(a1 + 40);
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198E9C4E0);
  }
  v13 = 0;
  return v13 | ((unint64_t)v8 << 8) | **(unsigned __int8 **)(a1 + 40);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _DWORD *v35;
  uint64_t *v36;
  int v37;
  unsigned int *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int *v49;
  int *v50;
  int v51;
  _BYTE *v52;
  _DWORD *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  _DWORD *v64;
  uint64_t *v65;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int *v81;
  int *v82;
  int v83;
  _BYTE *v84;
  _DWORD *v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int i;
  unsigned int v97;
  char v98;
  int *v99;
  int *v100;
  int v101;
  char *v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  int *v117;
  int *v118;
  int v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  _DWORD *v134;
  uint64_t *v135;
  int v136;
  char *v137;
  _DWORD *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  WTF *v150;
  WTF *v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  char v161;
  __int16 v162;
  char v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  WTF *v172;
  uint64_t v173;
  _BYTE v174[24];
  WTF *v175;
  uint64_t v176;
  _BYTE v177[24];
  _BYTE *v178;
  uint64_t v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182;
  _BYTE v183[32];

  JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), a2, a3, *(char *)(*(_QWORD *)(a1 + 40) + 14), a5, a6, a7, a8);
  v17 = *(_QWORD *)(a1 + 40);
  if (*(unsigned __int8 *)(v17 + 9) == a4)
  {
    v18 = *(_DWORD **)(a1 + 8);
    v18[52] = 0;
    v19 = v18[50];
    if (v19 + 4 > v18[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 14), v10, v11, v12, v13, v14, v15, v16);
      v19 = v18[50];
    }
    v20 = (_QWORD *)(a1 + 200);
    *(_DWORD *)(*((_QWORD *)v18 + 7) + v19) = -1811939328;
    v21 = v18[50] + 4;
    v18[50] = v21;
    v181 = (_BYTE *)(v21 | 0x300000000);
    v22 = *(unsigned int *)(a1 + 212);
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 208))
    {
      v23 = (_QWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v22 + 1, (unint64_t)&v181);
      v22 = *(unsigned int *)(a1 + 212);
      *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v22) = *v23;
    }
    else
    {
      v38 = (unsigned int *)(*v20 + 8 * v22);
      *v38 = v21;
      v38[1] = 3;
    }
    *(_DWORD *)(a1 + 212) = v22 + 1;
    return;
  }
  v181 = v183;
  v182 = 2;
  v178 = v180;
  v179 = 2;
  v175 = (WTF *)v177;
  v176 = 2;
  v172 = (WTF *)v174;
  v173 = 2;
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(v17 + 14), a4, v12, v13, v14, v15, v16);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)*(unsigned int *)(*(_QWORD *)(a1 + 40) + 32), a4, *(char *)(*(_QWORD *)(a1 + 40) + 15));
  JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(char *)(*(_QWORD *)(a1 + 40) + 15), v24, v25, v26, v27, (uint64_t)&v170);
  v33 = v170;
  if (v170 != -1)
  {
    v34 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      v35 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v181, (void *)(HIDWORD(v182) + 1), (unint64_t)&v170, v28, v29, v30, v31, v32);
      v37 = *v35;
      v36 = (uint64_t *)(v35 + 1);
      v33 = v37;
      v34 = HIDWORD(v182);
    }
    else
    {
      v36 = &v171;
    }
    v39 = &v181[12 * v34];
    *(_DWORD *)v39 = v33;
    *(_QWORD *)(v39 + 4) = *v36;
    ++HIDWORD(v182);
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28), v29, v30, v31, v32, (uint64_t)&v168);
  v47 = v168;
  if (v168 != -1)
  {
    v48 = HIDWORD(v179);
    if (HIDWORD(v179) == (_DWORD)v179)
    {
      v49 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v178, (void *)(HIDWORD(v179) + 1), (unint64_t)&v168, v42, v43, v44, v45, v46);
      v51 = *v49;
      v50 = v49 + 1;
      v47 = v51;
      v48 = HIDWORD(v179);
    }
    else
    {
      v50 = &v169;
    }
    v52 = &v178[12 * v48];
    *(_DWORD *)v52 = v47;
    *(_QWORD *)(v52 + 4) = *(_QWORD *)v50;
    ++HIDWORD(v179);
  }
  v53 = *(_DWORD **)(a1 + 8);
  v54 = *(char *)(*(_QWORD *)(a1 + 40) + 14);
  v55 = v54 | (32 * v54) | 0x91000800;
  v56 = v53[50];
  if (v56 + 4 > v53[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v40, v41, v42, v43, v44, v45, v46);
    v56 = v53[50];
  }
  *(_DWORD *)(*((_QWORD *)v53 + 7) + v56) = v55;
  v53[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, *(char *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 16), v43, v44, v45, v46, (uint64_t)&v166);
  v62 = v166;
  if (v166 != -1)
  {
    v63 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      v64 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v181, (void *)(HIDWORD(v182) + 1), (unint64_t)&v166, v57, v58, v59, v60, v61);
      v66 = *v64;
      v65 = (uint64_t *)(v64 + 1);
      v62 = v66;
      v63 = HIDWORD(v182);
    }
    else
    {
      v65 = &v167;
    }
    v67 = &v181[12 * v63];
    *(_DWORD *)v67 = v62;
    *(_QWORD *)(v67 + 4) = *v65;
    ++HIDWORD(v182);
  }
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 14), v57, v58, v59, v60, v61);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)*(unsigned int *)(*(_QWORD *)(a1 + 40) + 32), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 15));
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28), v68, v69, v70, v71, (uint64_t)&v164);
  v79 = v164;
  if (v164 != -1)
  {
    v80 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      v81 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v181, (void *)(HIDWORD(v182) + 1), (unint64_t)&v164, v74, v75, v76, v77, v78);
      v83 = *v81;
      v82 = v81 + 1;
      v79 = v83;
      v80 = HIDWORD(v182);
    }
    else
    {
      v82 = &v165;
    }
    v84 = &v181[12 * v80];
    *(_DWORD *)v84 = v79;
    *(_QWORD *)(v84 + 4) = *(_QWORD *)v82;
    ++HIDWORD(v182);
  }
  v85 = *(_DWORD **)(a1 + 8);
  v86 = v85[50];
  if (v86 + 4 > v85[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 14), v72, v73, v74, v75, v76, v77, v78);
    v86 = v85[50];
  }
  v87 = a4 & 0x1F;
  *(_DWORD *)(*((_QWORD *)v85 + 7) + v86) = v87 | (32 * v87) | 0x53165400;
  v85[50] += 4;
  JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), a4 | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14) << 8), 0x2FCA02400, a4, v75, v76, v77, v78);
  v95 = *(_QWORD *)(a1 + 8);
  for (i = *(_DWORD *)(v95 + 200); i < *(_DWORD *)(v95 + 52); *(_DWORD *)(v95 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v95 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v95 + 56), v88, v89, v90, v91, v92, v93, v94);
      i = *(_DWORD *)(v95 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v95 + 56) + i) = -721215457;
    i = *(_DWORD *)(v95 + 200) + 4;
  }
  v97 = i;
  if ((i + 4) > *(_DWORD *)(v95 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v95 + 56), v88, v89, v90, v91, v92, v93, v94);
    v97 = *(_DWORD *)(v95 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v95 + 56) + v97) = 335544320;
  *(_DWORD *)(v95 + 200) += 4;
  if (*(_BYTE *)(v95 + 328))
    v98 = 69;
  else
    v98 = 65;
  v159 = i;
  v160 = 0;
  v161 = v98;
  v162 = 15;
  v163 = -1;
  if (i != -1)
  {
    if (HIDWORD(v176) == (_DWORD)v176)
    {
      v99 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v175, (void *)(HIDWORD(v176) + 1), (unint64_t)&v159, v90, v91, v92, v93, v94);
      v101 = *v99;
      v100 = v99 + 1;
      v102 = (char *)v175 + 12 * HIDWORD(v176);
      *(_DWORD *)v102 = v101;
    }
    else
    {
      v100 = &v160;
      v102 = (char *)v175 + 12 * HIDWORD(v176);
      *(_DWORD *)v102 = i;
    }
    *(_QWORD *)(v102 + 4) = *(_QWORD *)v100;
    ++HIDWORD(v176);
  }
  v103 = *(_DWORD **)(a1 + 8);
  v104 = HIDWORD(v179);
  if (HIDWORD(v179))
  {
    v105 = 0;
    v106 = 0;
    while (v106 < HIDWORD(v179))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v178[v105], (uint64_t)v103, v89, v90, v91, v92, v93, v94);
      ++v106;
      v105 += 12;
      if (v104 == v106)
      {
        v103 = *(_DWORD **)(a1 + 8);
        goto LABEL_48;
      }
    }
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x198E9CE40);
  }
LABEL_48:
  v107 = *(char *)(*(_QWORD *)(a1 + 40) + 14);
  v108 = v107 | (32 * v107) | 0xD1000800;
  v109 = v103[50];
  if (v109 + 4 > v103[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v103 + 14), v88, v89, v90, v91, v92, v93, v94);
    v109 = v103[50];
  }
  *(_DWORD *)(*((_QWORD *)v103 + 7) + v109) = v108;
  v103[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 3, *(char *)(*(_QWORD *)(a1 + 40) + 14), **(char **)(a1 + 40), v91, v92, v93, v94, (uint64_t)&v157);
  v115 = v157;
  if (v157 != -1)
  {
    v116 = HIDWORD(v173);
    if (HIDWORD(v173) == (_DWORD)v173)
    {
      v117 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v172, (void *)(HIDWORD(v173) + 1), (unint64_t)&v157, v110, v111, v112, v113, v114);
      v119 = *v117;
      v118 = v117 + 1;
      v115 = v119;
      v116 = HIDWORD(v173);
    }
    else
    {
      v118 = &v158;
    }
    v120 = (char *)v172 + 12 * v116;
    *(_DWORD *)v120 = v115;
    *(_QWORD *)(v120 + 4) = *(_QWORD *)v118;
    ++HIDWORD(v173);
  }
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 14), v110, v111, v112, v113, v114);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)*(unsigned int *)(*(_QWORD *)(a1 + 40) + 32), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 15));
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24), v121, v122, v123, v124, (uint64_t)&v155);
  v132 = v155;
  if (v155 != -1)
  {
    v133 = HIDWORD(v173);
    if (HIDWORD(v173) == (_DWORD)v173)
    {
      v134 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v172, (void *)(HIDWORD(v173) + 1), (unint64_t)&v155, v127, v128, v129, v130, v131);
      v136 = *v134;
      v135 = (uint64_t *)(v134 + 1);
      v132 = v136;
      v133 = HIDWORD(v173);
    }
    else
    {
      v135 = &v156;
    }
    v137 = (char *)v172 + 12 * v133;
    *(_DWORD *)v137 = v132;
    *(_QWORD *)(v137 + 4) = *v135;
    ++HIDWORD(v173);
  }
  v138 = *(_DWORD **)(a1 + 8);
  v139 = v138[50];
  if (v139 + 4 > v138[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v138 + 14), (uint64_t)v125, v126, v127, v128, v129, v130, v131);
    v139 = v138[50];
  }
  *(_DWORD *)(*((_QWORD *)v138 + 7) + v139) = v87 | 0x12800000;
  v138[50] += 4;
  v140 = *(_QWORD *)(a1 + 8);
  v141 = HIDWORD(v182);
  if (HIDWORD(v182))
  {
    v142 = 0;
    v143 = 0;
    do
    {
      if (v143 >= HIDWORD(v182))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9CE48);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v181[v142], v140, v126, v127, v128, v129, v130, v131);
      ++v143;
      v142 += 12;
    }
    while (v141 != v143);
    v140 = *(_QWORD *)(a1 + 8);
  }
  v144 = HIDWORD(v173);
  if (HIDWORD(v173))
  {
    v145 = 0;
    v146 = 0;
    do
    {
      if (v146 >= HIDWORD(v173))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9CE50);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v172 + v145), v140, v126, v127, v128, v129, v130, v131);
      ++v146;
      v145 += 12;
    }
    while (v144 != v146);
    v140 = *(_QWORD *)(a1 + 8);
  }
  v147 = HIDWORD(v176);
  if (HIDWORD(v176))
  {
    v148 = 0;
    v149 = 0;
    while (v149 < HIDWORD(v176))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v175 + v148), v140, v126, v127, v128, v129, v130, v131);
      ++v149;
      v148 += 12;
      if (v147 == v149)
        goto LABEL_76;
    }
    __break(0xC471u);
    goto LABEL_99;
  }
LABEL_76:
  v150 = v172;
  if (v174 != (_BYTE *)v172 && v172 != 0)
  {
    v172 = 0;
    LODWORD(v173) = 0;
    WTF::fastFree((unint64_t)v150, v125, v126, v127, v128, v129, v130, v131);
  }
  v152 = v175;
  if (v177 != (_BYTE *)v175 && v175)
  {
    v175 = 0;
    LODWORD(v176) = 0;
    WTF::fastFree((unint64_t)v152, v125, v126, v127, v128, v129, v130, v131);
  }
  v153 = (unint64_t)v178;
  if (v180 != v178 && v178)
  {
    v178 = 0;
    LODWORD(v179) = 0;
    WTF::fastFree(v153, v125, v126, v127, v128, v129, v130, v131);
  }
  v154 = (unint64_t)v181;
  if (v183 != v181 && v181)
  {
    v181 = 0;
    LODWORD(v182) = 0;
    WTF::fastFree(v154, v125, v126, v127, v128, v129, v130, v131);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassTermInner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  int i;
  unsigned int v35;
  char v36;
  uint64_t v37;
  int *v38;
  int *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  char v62;
  __int16 v63;
  char v64;
  WTF *v65;
  uint64_t v66;
  _BYTE v67[24];
  int v68;
  int v69;
  int v70;
  uint64_t v71;

  if ((*(_BYTE *)(a1 + 84) & 1) != 0 && (*(_BYTE *)(a2 + 1) & 2) != 0)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, a4, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)&v68);
    v12 = v68;
    if (v68 != -1)
    {
      v13 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
      {
        v14 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v13 + 1), (unint64_t)&v68, a4, a5, a6, a7, a8);
        v16 = *v14;
        v15 = v14 + 1;
        v12 = v16;
        LODWORD(v13) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v15 = &v69;
      }
      v17 = *(_QWORD *)a3 + 12 * v13;
      *(_DWORD *)v17 = v12;
      *(_QWORD *)(v17 + 4) = *(_QWORD *)v15;
      ++*(_DWORD *)(a3 + 12);
    }
  }
  v18 = *(_BYTE *)(a2 + 1);
  v19 = *(_QWORD *)(a2 + 16);
  if ((v18 & 2) != 0)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, a4, a3, v19, a5, a6, a7, a8);
    return;
  }
  if (!*(_DWORD *)(v19 + 28) && !*(_DWORD *)(v19 + 60))
  {
    v20 = *(unsigned int *)(v19 + 44);
    if (*(unsigned int *)(v19 + 76) + v20 == 1)
    {
      if ((_DWORD)v20)
        v21 = 32;
      else
        v21 = 64;
      if ((_DWORD)v20)
        v22 = v19 + 32;
      else
        v22 = v19 + 64;
      if (!*(_DWORD *)(v22 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9D278);
      }
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, a4, **(unsigned int **)(v19 + v21), a5, a6, a7, a8, (uint64_t)&v65);
      v28 = (int)v65;
      if ((_DWORD)v65 != -1)
      {
        v29 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v29 == *(_DWORD *)(a3 + 8))
        {
          v30 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v29 + 1), (unint64_t)&v65, v23, v24, v25, v26, v27);
          v32 = *v30;
          v31 = v30 + 1;
          v28 = v32;
          LODWORD(v29) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v31 = (WTF **)((char *)&v65 + 4);
        }
        v48 = *(_QWORD *)a3 + 12 * v29;
        *(_DWORD *)v48 = v28;
        *(_QWORD *)(v48 + 4) = *v31;
        ++*(_DWORD *)(a3 + 12);
      }
      if (*(_DWORD *)(v22 + 12))
      {
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 12, a4, *(unsigned int *)(*(_QWORD *)(v19 + v21) + 4), v24, v25, v26, v27, (uint64_t)&v70);
        v54 = v70;
        if (v70 != -1)
        {
          v55 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v55 == *(_DWORD *)(a3 + 8))
          {
            v56 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v55 + 1), (unint64_t)&v70, v49, v50, v51, v52, v53);
            v58 = *v56;
            v57 = (uint64_t *)(v56 + 1);
            v54 = v58;
            LODWORD(v55) = *(_DWORD *)(a3 + 12);
          }
          else
          {
            v57 = &v71;
          }
          v59 = *(_QWORD *)a3 + 12 * v55;
          *(_DWORD *)v59 = v54;
          *(_QWORD *)(v59 + 4) = *v57;
          ++*(_DWORD *)(a3 + 12);
        }
        return;
      }
      __break(0xC471u);
LABEL_60:
      JUMPOUT(0x198E9D270);
    }
  }
  v65 = (WTF *)v67;
  v66 = 2;
  if ((*(_BYTE *)(v19 + 89) & 2) == 0)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, a4, (uint64_t)&v65, v19, a5, a6, a7, a8);
    v33 = *(_QWORD *)(a1 + 8);
    for (i = *(_DWORD *)(v33 + 200); i < *(_DWORD *)(v33 + 52); *(_DWORD *)(v33 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v33 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v33 + 56), a2, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(v33 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v33 + 56) + i) = -721215457;
      i = *(_DWORD *)(v33 + 200) + 4;
    }
    v35 = i;
    if ((i + 4) > *(_DWORD *)(v33 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v33 + 56), a2, a3, a4, a5, a6, a7, a8);
      v35 = *(_DWORD *)(v33 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v33 + 56) + v35) = 335544320;
    *(_DWORD *)(v33 + 200) += 4;
    if (*(_BYTE *)(v33 + 328))
      v36 = 69;
    else
      v36 = 65;
    v60 = i;
    v61 = 0;
    v62 = v36;
    v63 = 15;
    v64 = -1;
    if (i != -1)
    {
      v37 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v37 == *(_DWORD *)(a3 + 8))
      {
        v38 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v37 + 1), (unint64_t)&v60, a4, a5, a6, a7, a8);
        v40 = *v38;
        v39 = v38 + 1;
        v41 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
        *(_DWORD *)v41 = v40;
      }
      else
      {
        v39 = &v61;
        v41 = *(_QWORD *)a3 + 12 * v37;
        *(_DWORD *)v41 = i;
      }
      *(_QWORD *)(v41 + 4) = *(_QWORD *)v39;
      ++*(_DWORD *)(a3 + 12);
    }
    if (HIDWORD(v66))
    {
      v42 = 0;
      v43 = 0;
      v44 = *(_QWORD *)(a1 + 8);
      v45 = 12 * HIDWORD(v66);
      while (v43 < HIDWORD(v66))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v65 + v42), v44, a3, a4, a5, a6, a7, a8);
        ++v43;
        v42 += 12;
        if (v45 == v42)
          goto LABEL_39;
      }
      __break(0xC471u);
      goto LABEL_60;
    }
  }
LABEL_39:
  v46 = v65;
  if (v67 != (_BYTE *)v65 && v65 != 0)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree((unint64_t)v46, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t *v32;
  int v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t *v37;
  int v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  int v44;
  _DWORD *v45;
  _QWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t *v64;
  int v65;
  _DWORD *v66;
  uint64_t *v67;
  _DWORD *v68;
  uint64_t v69;
  int i;
  unsigned int v71;
  int v72;
  int *v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  BOOL v83;
  uint64_t v84;
  uint64_t j;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t *v89;
  int v90;
  _DWORD *v91;
  uint64_t *v92;
  _DWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  WTF *v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  int *v104;
  int *v105;
  int v106;
  _DWORD *v107;
  _QWORD *v108;
  char v109;
  uint64_t v110;
  char *v111;
  _DWORD *v112;
  _DWORD *v113;
  uint64_t v114;
  WTF *v115;
  unsigned int v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t *v119;
  int v120;
  _DWORD *v121;
  uint64_t *v122;
  _DWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  WTF *v147;
  uint64_t v148;
  _BYTE v149[24];
  int *v150;
  unint64_t v151;
  _BYTE v152[28];
  int v153;
  uint64_t v154;

  v12 = *(void **)(a4 + 80);
  if (v12 && (*(_BYTE *)(a1 + 84) & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = (*(_BYTE *)(a4 + 89) & 1) == 0;
    if (*(_BYTE *)(v13 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(v13 + 296) + 208) &= ~*(_DWORD *)(v13 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, (uint64_t)v12, *(char *)(v13 + 304), a4, a5, a6, a7, a8);
      v23 = *(_DWORD *)(v13 + 200);
      if (v23 + 4 > *(_DWORD *)(v13 + 192))
      {
        v22 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v15, v16, v17, v18, v19, v20, v21).n128_u64[0];
        v23 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v23) = (32 * (char)a2) | 0x38716811;
      *(_DWORD *)(v13 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v13, v14, 17, v18, v19, v20, v21, (uint64_t)&v153, v22);
      v29 = v153;
      if (v153 != -1)
      {
        v30 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v30 == *(_DWORD *)(a3 + 8))
        {
          v31 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v30 + 1), (unint64_t)&v153, v24, v25, v26, v27, v28);
          v33 = *v31;
          v32 = (uint64_t *)(v31 + 1);
          v29 = v33;
          LODWORD(v30) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v32 = &v154;
        }
        v124 = *(_QWORD *)a3 + 12 * v30;
        *(_DWORD *)v124 = v29;
        *(_QWORD *)(v124 + 4) = *v32;
        ++*(_DWORD *)(a3 + 12);
      }
      return;
    }
    __break(0xC471u);
LABEL_128:
    JUMPOUT(0x198E9DBF4);
  }
  v150 = (int *)v152;
  v151 = 2;
  if (!*(_DWORD *)(a4 + 60) && !*(_DWORD *)(a4 + 76))
    goto LABEL_62;
  v147 = (WTF *)v149;
  v148 = 2;
  if (*(_DWORD *)(a4 + 28) || *(_DWORD *)(a4 + 44))
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 13, a2, 127, a5, a6, a7, a8, (uint64_t)&v145);
    v34 = v145;
    if (v145 != -1)
    {
      v35 = HIDWORD(v148);
      if (HIDWORD(v148) == (_DWORD)v148)
      {
        v36 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v147, (void *)(HIDWORD(v148) + 1), (unint64_t)&v145, a4, a5, a6, a7, a8);
        v38 = *v36;
        v37 = (uint64_t *)(v36 + 1);
        v34 = v38;
        v35 = HIDWORD(v148);
      }
      else
      {
        v37 = &v146;
      }
      v39 = (char *)v147 + 12 * v35;
      *(_DWORD *)v39 = v34;
      *(_QWORD *)(v39 + 4) = *v37;
      ++HIDWORD(v148);
    }
  }
  if (*(_DWORD *)(a4 + 60))
  {
    v40 = 0;
    do
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, a2, *(unsigned int *)(*(_QWORD *)(a4 + 48) + 4 * v40), a5, a6, a7, a8, (uint64_t)&v143);
      if (v143 != -1)
      {
        v41 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v41 == *(_DWORD *)(a3 + 8))
        {
          v42 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v41 + 1), (unint64_t)&v143, a4, a5, a6, a7, a8);
          v44 = *v42;
          v43 = v42 + 1;
          v45 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
          *v45 = v44;
          v46 = v45 + 1;
        }
        else
        {
          v47 = (_DWORD *)(*(_QWORD *)a3 + 12 * v41);
          *v47 = v143;
          v46 = v47 + 1;
          v43 = &v144;
        }
        *v46 = *(_QWORD *)v43;
        ++*(_DWORD *)(a3 + 12);
      }
      ++v40;
    }
    while (v40 < *(unsigned int *)(a4 + 60));
  }
  if (*(_DWORD *)(a4 + 76))
  {
    v48 = 0;
    v49 = 0;
    do
    {
      v50 = (unsigned int *)(*(_QWORD *)(a4 + 64) + v48);
      v51 = v50[1];
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, a2, *v50, a5, a6, a7, a8, (uint64_t)&v137);
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 13, a2, v51, v52, v53, v54, v55, (uint64_t)&v141);
      if (v141 != -1)
      {
        v62 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v62 == *(_DWORD *)(a3 + 8))
        {
          v63 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v62 + 1), (unint64_t)&v141, v57, v58, v59, v60, v61);
          v65 = *v63;
          v64 = (uint64_t *)(v63 + 1);
          v66 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
          *v66 = v65;
          v67 = (uint64_t *)(v66 + 1);
        }
        else
        {
          v68 = (_DWORD *)(*(_QWORD *)a3 + 12 * v62);
          *v68 = v141;
          v67 = (uint64_t *)(v68 + 1);
          v64 = &v142;
        }
        *v67 = *v64;
        ++*(_DWORD *)(a3 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v137, *(_QWORD *)(a1 + 8), v56, v57, v58, v59, v60, v61);
      ++v49;
      v48 += 8;
    }
    while (v49 < *(unsigned int *)(a4 + 76));
  }
  if (*(_DWORD *)(a4 + 28) || *(_DWORD *)(a4 + 44))
  {
    v69 = *(_QWORD *)(a1 + 8);
    for (i = *(_DWORD *)(v69 + 200); i < *(_DWORD *)(v69 + 52); *(_DWORD *)(v69 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v69 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v69 + 56), (uint64_t)v12, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(v69 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v69 + 56) + i) = -721215457;
      i = *(_DWORD *)(v69 + 200) + 4;
    }
    v71 = i;
    if ((i + 4) > *(_DWORD *)(v69 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v69 + 56), (uint64_t)v12, a3, a4, a5, a6, a7, a8);
      v71 = *(_DWORD *)(v69 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v69 + 56) + v71) = 335544320;
    *(_DWORD *)(v69 + 200) += 4;
    v72 = *(unsigned __int8 *)(v69 + 328);
    v73 = &v139;
    v137 = &v139;
    v138 = 2;
    if (i == -1)
    {
      v75 = 0;
    }
    else
    {
      v83 = v72 == 0;
      v74 = 0xFF000F4500000000;
      if (v83)
        v74 = 0xFF000F4100000000;
      v140 = v74;
      v75 = 1;
      HIDWORD(v138) = 1;
      v139 = i;
    }
    v76 = (unint64_t)v150;
    if (v150 != (int *)v152)
    {
      if (v150)
      {
        v150 = 0;
        LODWORD(v151) = 0;
        WTF::fastFree(v76, v12, a3, a4, a5, a6, a7, a8);
        v150 = (int *)v152;
        v75 = HIDWORD(v138);
        if (v137 != &v139)
        {
          v150 = v137;
LABEL_52:
          v151 = __PAIR64__(v75, v138);
          goto LABEL_53;
        }
      }
      else
      {
        v150 = (int *)v152;
      }
    }
    if (v75)
    {
      v77 = v152;
      do
      {
        *(_DWORD *)v77 = *v73;
        *(_QWORD *)(v77 + 4) = *(_QWORD *)(v73 + 1);
        v73 += 3;
        v77 += 12;
      }
      while (v73 != &v139 + 3 * v75);
    }
    goto LABEL_52;
  }
LABEL_53:
  if (HIDWORD(v148))
  {
    v78 = 0;
    v79 = 0;
    v80 = *(_QWORD *)(a1 + 8);
    v81 = 12 * HIDWORD(v148);
    do
    {
      if (v79 >= HIDWORD(v148))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9DC0CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v147 + v78), v80, a3, a4, a5, a6, a7, a8);
      ++v79;
      v78 += 12;
    }
    while (v81 != v78);
  }
  v82 = v147;
  v83 = v149 == (_BYTE *)v147 || v147 == 0;
  if (!v83)
  {
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v82, v12, a3, a4, a5, a6, a7, a8);
  }
LABEL_62:
  v84 = *(unsigned int *)(a4 + 44);
  if ((_DWORD)v84)
  {
    LODWORD(v137) = 0;
    v147 = (WTF *)v149;
    v148 = 2;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassRange(a1, a2, (uint64_t)&v147, a3, *(_QWORD *)(a4 + 32), v84, (unsigned int *)&v137, *(_QWORD *)(a4 + 16), *(_DWORD *)(a4 + 28));
    for (j = v137; *(unsigned int *)(a4 + 28) > (unint64_t)v137; j = v137)
    {
      v86 = *(_QWORD *)(a1 + 8);
      LODWORD(v137) = j + 1;
      JSC::MacroAssemblerARM64::branch32(v86, 0, a2, *(unsigned __int16 *)(*(_QWORD *)(a4 + 16) + 4 * j), a5, v84, a7, a8, (uint64_t)&v135);
      if (v135 != -1)
      {
        v87 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v87 == *(_DWORD *)(a3 + 8))
        {
          v88 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v87 + 1), (unint64_t)&v135, a4, a5, v84, a7, a8);
          v90 = *v88;
          v89 = (uint64_t *)(v88 + 1);
          v91 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
          *v91 = v90;
          v92 = (uint64_t *)(v91 + 1);
        }
        else
        {
          v93 = (_DWORD *)(*(_QWORD *)a3 + 12 * v87);
          *v93 = v135;
          v92 = (uint64_t *)(v93 + 1);
          v89 = &v136;
        }
        *v92 = *v89;
        ++*(_DWORD *)(a3 + 12);
      }
    }
    if (!HIDWORD(v148))
    {
LABEL_74:
      v98 = v147;
      if (v149 != (_BYTE *)v147 && v147 != 0)
      {
        v147 = 0;
        LODWORD(v148) = 0;
        WTF::fastFree((unint64_t)v98, v12, a3, a4, a5, v84, a7, a8);
      }
      goto LABEL_108;
    }
    v94 = 0;
    v95 = 0;
    v96 = *(_QWORD *)(a1 + 8);
    v97 = 12 * HIDWORD(v148);
    while (v95 < HIDWORD(v148))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v147 + v94), v96, a3, a4, a5, v84, a7, a8);
      ++v95;
      v94 += 12;
      if (v97 == v94)
        goto LABEL_74;
    }
    __break(0xC471u);
    goto LABEL_128;
  }
  if (!*(_DWORD *)(a4 + 28))
    goto LABEL_108;
  v100 = 0;
  v101 = 0;
  v147 = 0;
  v148 = 0;
  do
  {
    v102 = *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * v101);
    LOBYTE(v137) = v102;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 2) & 4) == 0)
    {
LABEL_82:
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, a2, (unsigned __int16)(char)v102, a5, v84, a7, a8, (uint64_t)&v133);
      if (v133 == -1)
        goto LABEL_94;
      v103 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v103 == *(_DWORD *)(a3 + 8))
      {
        v104 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v103 + 1), (unint64_t)&v133, a4, a5, v84, a7, a8);
        v106 = *v104;
        v105 = v104 + 1;
        v107 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
        *v107 = v106;
        v108 = v107 + 1;
      }
      else
      {
        v113 = (_DWORD *)(*(_QWORD *)a3 + 12 * v103);
        *v113 = v133;
        v108 = v113 + 1;
        v105 = &v134;
      }
      *v108 = *(_QWORD *)v105;
      v112 = (_DWORD *)(a3 + 12);
      goto LABEL_93;
    }
    v109 = v102;
    if (v102 - 97 <= 0x19)
    {
      v110 = HIDWORD(v148);
      if (HIDWORD(v148) == (_DWORD)v148)
      {
        v111 = WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v147, (WTF *)(HIDWORD(v148) + 1), (unint64_t)&v137);
        v110 = HIDWORD(v148);
        v100 = v147;
        v109 = *v111;
      }
      *((_BYTE *)v100 + v110) = v109;
      v112 = (_DWORD *)&v148 + 1;
LABEL_93:
      ++*v112;
      goto LABEL_94;
    }
    if (v102 - 65 >= 0x1A)
      goto LABEL_82;
LABEL_94:
    ++v101;
  }
  while (v101 < *(unsigned int *)(a4 + 28));
  v114 = HIDWORD(v148);
  if (HIDWORD(v148))
  {
    JSC::MacroAssemblerARM64::or32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x20, a2, a2);
    v115 = v100;
    do
    {
      v116 = *(char *)v115;
      v115 = (WTF *)((char *)v115 + 1);
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, a2, v116, a5, v84, a7, a8, (uint64_t)&v131);
      if (v131 != -1)
      {
        v117 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v117 == *(_DWORD *)(a3 + 8))
        {
          v118 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v117 + 1), (unint64_t)&v131, a4, a5, v84, a7, a8);
          v120 = *v118;
          v119 = (uint64_t *)(v118 + 1);
          v121 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
          *v121 = v120;
          v122 = (uint64_t *)(v121 + 1);
        }
        else
        {
          v123 = (_DWORD *)(*(_QWORD *)a3 + 12 * v117);
          *v123 = v131;
          v122 = (uint64_t *)(v123 + 1);
          v119 = &v132;
        }
        *v122 = *v119;
        ++*(_DWORD *)(a3 + 12);
      }
      --v114;
    }
    while (v114);
LABEL_107:
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v100, v12, a3, a4, a5, v84, a7, a8);
  }
  else if (v100)
  {
    goto LABEL_107;
  }
LABEL_108:
  if ((*(_DWORD *)(a4 + 60) || *(_DWORD *)(a4 + 76)) && HIDWORD(v151))
  {
    v125 = 0;
    v126 = 0;
    v127 = *(_QWORD *)(a1 + 8);
    v128 = 12 * HIDWORD(v151);
    do
    {
      if (v126 >= HIDWORD(v151))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9DC14);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v150[v125 / 4], v127, a3, a4, a5, v84, a7, a8);
      ++v126;
      v125 += 12;
    }
    while (v128 != v125);
  }
  v129 = (unint64_t)v150;
  if (v152 != (_BYTE *)v150 && v150 != 0)
  {
    v150 = 0;
    LODWORD(v151) = 0;
    WTF::fastFree(v129, v12, a3, a4, a5, v84, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int i;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int *v31;
  int v32;
  _DWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t *v44;
  int v45;
  _DWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  JSC::AssemblerBuffer *v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  void *v56;
  int *v57;
  uint64_t v58;
  JSC::AssemblerBuffer *v59;
  int v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  int *v64;
  int *v65;
  int v66;
  _DWORD *v67;
  _QWORD *v68;
  _DWORD *v69;
  int *v70;
  int *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  int v79;
  _DWORD *v80;
  _QWORD *v81;
  _DWORD *v82;
  JSC::AssemblerBuffer *v83;
  JSC::AssemblerBuffer *v84;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  int v97;
  int v98;
  char v99;
  __int16 v100;
  char v101;
  int v102;
  int v103;
  unsigned int v104[3];

  v9 = a8;
  v11 = a6;
  v12 = a5;
  do
  {
    v87 = v11 >> 1;
    v16 = (unsigned __int8 *)(v12 + 8 * (v11 >> 1));
    v17 = *v16;
    v18 = v16[4];
    v19 = *a7;
    if (v19 < a9 && *(_DWORD *)(v9 + 4 * v19) < v17)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 10, a2, v17, a5, a6, (uint64_t)a7, a8, (uint64_t)v104);
      if (v11 >= 2)
        JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassRange(a1, a2, a3, a4, v12, v87, a7, v9, a9);
      for (i = *a7; i < a9; *a7 = i)
      {
        v28 = *(_DWORD *)(v9 + 4 * i);
        if (v28 >= v17)
          break;
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, a2, (unsigned __int16)v28, v23, v24, v25, v26, (uint64_t)&v102);
        if (v102 != -1)
        {
          v29 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v29 == *(_DWORD *)(a4 + 8))
          {
            v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v29 + 1), (unint64_t)&v102, v22, v23, v24, v25, v26);
            v32 = *v30;
            v31 = v30 + 1;
            v33 = (_DWORD *)(*(_QWORD *)a4 + 12 * *(unsigned int *)(a4 + 12));
            *v33 = v32;
            v34 = v33 + 1;
          }
          else
          {
            v35 = (_DWORD *)(*(_QWORD *)a4 + 12 * v29);
            *v35 = v102;
            v34 = v35 + 1;
            v31 = &v103;
          }
          *v34 = *(_QWORD *)v31;
          ++*(_DWORD *)(a4 + 12);
        }
        i = *a7 + 1;
      }
      v58 = *(_QWORD *)(a1 + 8);
      v59 = (JSC::AssemblerBuffer *)(v58 + 56);
      v60 = *(_DWORD *)(v58 + 200);
      if (v60 < *(_DWORD *)(v58 + 52))
      {
        v52 = a3;
        do
        {
          if ((v60 + 4) > *(_DWORD *)(v58 + 192))
          {
            v84 = v59;
            JSC::AssemblerBuffer::outOfLineGrow(v59, v20, v21, v22, v23, v24, v25, v26);
            v59 = v84;
            v52 = a3;
            v60 = *(_DWORD *)(v58 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v58 + 56) + v60) = -721215457;
          v60 = *(_DWORD *)(v58 + 200) + 4;
          *(_DWORD *)(v58 + 200) = v60;
        }
        while (v60 < *(_DWORD *)(v58 + 52));
      }
      else
      {
        v52 = a3;
      }
      v61 = v60;
      if ((v60 + 4) > *(_DWORD *)(v58 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v59, v20, v21, v22, v23, v24, v25, v26);
        v52 = a3;
        v61 = *(_DWORD *)(v58 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v58 + 56) + v61) = 335544320;
      *(_DWORD *)(v58 + 200) += 4;
      if (*(_BYTE *)(v58 + 328))
        v62 = 69;
      else
        v62 = 65;
      v97 = v60;
      v98 = 0;
      v99 = v62;
      v100 = 15;
      v101 = -1;
      v9 = a8;
      if (v60 == -1)
        goto LABEL_45;
      v63 = *(unsigned int *)(v52 + 12);
      if ((_DWORD)v63 != *(_DWORD *)(v52 + 8))
      {
        v71 = (int *)(*(_QWORD *)v52 + 12 * v63);
        *v71 = v60;
        v68 = v71 + 1;
        v65 = &v98;
        goto LABEL_44;
      }
      v56 = (void *)(v63 + 1);
      v57 = &v97;
      goto LABEL_39;
    }
    if (v11 >= 2)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 10, a2, v17, a5, a6, (uint64_t)a7, a8, (uint64_t)v104);
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassRange(a1, a2, a3, a4, v12, v87, a7, v9, a9);
      v49 = *(_QWORD *)(a1 + 8);
      v50 = (JSC::AssemblerBuffer *)(v49 + 56);
      v51 = *(_DWORD *)(v49 + 200);
      if (v51 < *(_DWORD *)(v49 + 52))
      {
        v52 = a3;
        do
        {
          if ((v51 + 4) > *(_DWORD *)(v49 + 192))
          {
            v83 = v50;
            JSC::AssemblerBuffer::outOfLineGrow(v50, v48, v21, v22, v23, v24, v25, v26);
            v50 = v83;
            v52 = a3;
            v51 = *(_DWORD *)(v49 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v49 + 56) + v51) = -721215457;
          v51 = *(_DWORD *)(v49 + 200) + 4;
          *(_DWORD *)(v49 + 200) = v51;
        }
        while (v51 < *(_DWORD *)(v49 + 52));
      }
      else
      {
        v52 = a3;
      }
      v53 = v51;
      if ((v51 + 4) > *(_DWORD *)(v49 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v50, v48, v21, v22, v23, v24, v25, v26);
        v52 = a3;
        v53 = *(_DWORD *)(v49 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v49 + 56) + v53) = 335544320;
      *(_DWORD *)(v49 + 200) += 4;
      if (*(_BYTE *)(v49 + 328))
        v54 = 69;
      else
        v54 = 65;
      v92 = v51;
      v93 = 0;
      v94 = v54;
      v95 = 15;
      v96 = -1;
      v9 = a8;
      if (v51 == -1)
        goto LABEL_45;
      v55 = *(unsigned int *)(v52 + 12);
      if ((_DWORD)v55 != *(_DWORD *)(v52 + 8))
      {
        v70 = (int *)(*(_QWORD *)v52 + 12 * v55);
        *v70 = v51;
        v68 = v70 + 1;
        v65 = &v93;
        goto LABEL_44;
      }
      v56 = (void *)(v55 + 1);
      v57 = &v92;
LABEL_39:
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v56, (unint64_t)v57, v22, v23, v24, v25, v26);
      v52 = a3;
      v66 = *v64;
      v65 = v64 + 1;
      v67 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
      *v67 = v66;
      v68 = v67 + 1;
LABEL_44:
      *v68 = *(_QWORD *)v65;
      ++*(_DWORD *)(v52 + 12);
LABEL_45:
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v104, *(_QWORD *)(a1 + 8), v21, v22, v23, v24, v25, v26);
      goto LABEL_46;
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, a2, v17, a5, a6, (uint64_t)a7, a8, (uint64_t)&v90);
    if (v90 != -1)
    {
      v41 = a3;
      v42 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v42 == *(_DWORD *)(a3 + 8))
      {
        v43 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v42 + 1), (unint64_t)&v90, v36, v37, v38, v39, v40);
        v41 = a3;
        v45 = *v43;
        v44 = (uint64_t *)(v43 + 1);
        v46 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
        *v46 = v45;
        v47 = (uint64_t *)(v46 + 1);
      }
      else
      {
        v69 = (_DWORD *)(*(_QWORD *)a3 + 12 * v42);
        *v69 = v90;
        v47 = (uint64_t *)(v69 + 1);
        v44 = &v91;
      }
      *v47 = *v44;
      ++*(_DWORD *)(v41 + 12);
    }
LABEL_46:
    v72 = *a7;
    if (v72 < a9)
    {
      v73 = (unsigned int *)(v9 + 4 * v72);
      do
      {
        v74 = *v73++;
        if (v74 > v18)
          break;
        LODWORD(v72) = v72 + 1;
        *a7 = v72;
      }
      while (a9 != (_DWORD)v72);
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 13, a2, v18, v37, v38, v39, v40, (uint64_t)&v88);
    if (v88 != -1)
    {
      v76 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v76 == *(_DWORD *)(a4 + 8))
      {
        v77 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v76 + 1), (unint64_t)&v88, v75, a5, a6, (uint64_t)a7, a8);
        v79 = *v77;
        v78 = v77 + 1;
        v80 = (_DWORD *)(*(_QWORD *)a4 + 12 * *(unsigned int *)(a4 + 12));
        *v80 = v79;
        v81 = v80 + 1;
      }
      else
      {
        v82 = (_DWORD *)(*(_QWORD *)a4 + 12 * v76);
        *v82 = v88;
        v81 = v82 + 1;
        v78 = &v89;
      }
      *v81 = *(_QWORD *)v78;
      ++*(_DWORD *)(a4 + 12);
    }
    v12 += 8 * (v87 + 1);
    v11 -= v87 + 1;
  }
  while (v11);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::checkNotEnoughInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 1);
  if (v12 == 31)
  {
    v14 = a3 | ((a3 & 0x1F) << 16);
    v15 = 186672096;
    goto LABEL_4;
  }
  v13 = (v12 & 0x1F) << 16;
  if ((_DWORD)a3 != 31)
  {
    v14 = v13 | (32 * (a3 & 0x1F));
    v15 = a3 & 0x1F | 0xB000000;
LABEL_4:
    v16 = v14 | v15;
    goto LABEL_5;
  }
  v16 = v13 | 0xB2063FF;
LABEL_5:
  v19 = *(_DWORD *)(v11 + 200);
  v18 = (unsigned int *)(v11 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a2 + 8), 8, a3, *(char *)(*(_QWORD *)(a2 + 40) + 2), a5, a6, a7, a8, a1);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::advanceIndexAfterCharacterClassTermMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41[3];

  if (*(_BYTE *)a2 != 4
    || (v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 88), (v11 - 1) > 1)
    || (*(_BYTE *)(a2 + 1) & 2) != 0)
  {
    v14 = *(_DWORD **)(a1 + 8);
    v15 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
    v16 = v15 | (32 * v15) | 0x11000400;
    v17 = v14[50];
    if (v17 + 4 > v14[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 + 14), a2, a3, a4, a5, a6, a7, a8);
      v17 = v14[50];
    }
    *(_DWORD *)(*((_QWORD *)v14 + 7) + v17) = v16;
    v14[50] += 4;
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, a4, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20), a5, a6, a7, a8, (uint64_t)v41);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v18, v19, v20, v21, (uint64_t)&v39);
    v29 = v39;
    if (v39 != -1)
    {
      v30 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v30 == *(_DWORD *)(a3 + 8))
      {
        v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v30 + 1), (unint64_t)&v39, v24, v25, v26, v27, v28);
        v33 = *v31;
        v32 = v31 + 1;
        v29 = v33;
        LODWORD(v30) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v32 = &v40;
      }
      v34 = *(_QWORD *)a3 + 12 * v30;
      *(_DWORD *)v34 = v29;
      *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
      ++*(_DWORD *)(a3 + 12);
    }
    v35 = *(_DWORD **)(a1 + 8);
    v36 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
    v37 = v36 | (32 * v36) | 0x11000400;
    v38 = v35[50];
    if (v38 + 4 > v35[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v35 + 14), v22, v23, v24, v25, v26, v27, v28);
      v38 = v35[50];
    }
    *(_DWORD *)(*((_QWORD *)v35 + 7) + v38) = v37;
    v35[50] += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v41, *(_QWORD *)(a1 + 8), v23, v24, v25, v26, v27, v28);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 8);
    if ((v11 & 2) != 0)
      v13 = 2;
    else
      v13 = 1;
    JSC::MacroAssemblerARM64::add32(v12, v13, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 1), a5, a6, a7, a8);
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchAssertionWordchar(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::Yarr::YarrPattern *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(a1 + 304) + 120 * a2;
  v12 = *(_DWORD *)(v10 + 100);
  v11 = (unsigned int *)(v10 + 100);
  v13 = *(_QWORD *)(v11 - 19);
  v14 = *(char **)(a1 + 40);
  v15 = v14[9];
  if (v12 == *(_DWORD *)(v13 + 40))
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v14[1], v14[2], a5, a6, a7, a8, (uint64_t)&v38);
    v18 = v38;
    if (v38 != -1)
    {
      v19 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v19 == *(_DWORD *)(a4 + 8))
      {
        v20 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v19 + 1), (unint64_t)&v38, v17, a5, a6, a7, a8);
        v22 = *v20;
        v21 = v20 + 1;
        v18 = v22;
        LODWORD(v19) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v21 = &v39;
      }
      v23 = *(_QWORD *)a4 + 12 * v19;
      *(_DWORD *)v23 = v18;
      *(_QWORD *)(v23 + 4) = *(_QWORD *)v21;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  v24 = *(_DWORD *)(v13 + 40);
  if (*v11 < v24)
  {
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x198E9E648);
  }
  v25 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
  v40 = *v11 - v24;
  v27 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v40, v15, v25, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 80))
  {
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v27, v26, v15, v28, v29, v30, v31);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v27, v26, v15, v28, v29, v30, v31);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v27, v26, v15, v28, v29, v30, v31);
  }
  v32 = *(JSC::Yarr::YarrPattern **)(a1 + 56);
  if ((*(_BYTE *)(a1 + 84) & 2) != 0)
    JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(v32);
  else
    JSC::Yarr::YarrPattern::wordcharCharacterClass(v32);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClass(a1, v15, a3, v33, v34, v35, v36, v37);
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchBackreference(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int *v68;
  int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t *v92;
  int v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int *v104;
  int *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  char v129;
  int *v130;
  int *v131;
  int v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  char v164;
  uint64_t v165;
  int *v166;
  int *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int j;
  unsigned int v172;
  char v173;
  int *v174;
  int *v175;
  int v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  _DWORD *v206;
  uint64_t *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  WTF *v214;
  uint64_t v216;
  _DWORD *v217;
  int v218;
  int v219;
  unsigned int v220;
  _DWORD *v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _DWORD *v231;
  int v232;
  int v233;
  unsigned int v234;
  _DWORD *v235;
  unsigned int v236;
  unsigned __int8 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v262;
  int v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  int v275;
  unsigned int v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  int v281;
  int v282;
  char v283;
  __int16 v284;
  char v285;
  int v286;
  int v287;
  char v288;
  __int16 v289;
  char v290;
  unsigned int v291[3];
  int v292;
  int v293;
  char v294;
  __int16 v295;
  char v296;
  WTF *v297;
  uint64_t v298;
  _BYTE v299[28];
  int v300;
  uint64_t v301;
  int v302;
  int v303;
  int v304;
  uint64_t v305;
  int v306;
  int v307;
  int v308;
  uint64_t v309;
  __int128 v310;
  uint64_t v311;

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E9F6C8);
  }
  v13 = *(_QWORD *)(a1 + 304);
  v14 = *(_QWORD *)(v13 + 120 * a2 + 24);
  v15 = *(unsigned int *)(v14 + 16);
  v16 = *(_QWORD *)(a1 + 56);
  v272 = *(_DWORD *)(v14 + 16);
  v273 = a7;
  if (*(_DWORD *)(v16 + 12))
  {
    if (*(_DWORD *)(v16 + 124) <= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198E9F6D8);
    }
    v275 = *(_DWORD *)(*(_QWORD *)(v16 + 112) + 4 * v15);
  }
  else
  {
    v275 = 0;
  }
  v276 = a5;
  v17 = *(_DWORD **)(a1 + 8);
  for (i = v17[50]; i < v17[13]; v17[50] = i)
  {
    if ((i + 4) > v17[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 14), a2, a3, a4, a5, a6, a7, a8);
      i = v17[50];
    }
    *(_DWORD *)(*((_QWORD *)v17 + 7) + i) = -721215457;
    i = v17[50] + 4;
  }
  v17[52] = 0;
  v274 = i;
  if ((*(_BYTE *)(a1 + 84) & 1) == 0)
  {
    v19 = v276;
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, 0, a6, v276, a5, a6, a7, a8);
    goto LABEL_22;
  }
  v24 = *(_DWORD *)(v13 + 120 * a2 + 100);
  v25 = *(_DWORD *)(v14 + 40);
  v19 = v276;
  if (v24 < v25)
  {
    __break(0xC471u);
    goto LABEL_177;
  }
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, v24 - v25, a4, v276, a5, a6, a7, a8);
  if ((_DWORD)a4 != (_DWORD)a6)
  {
    v29 = *(_QWORD *)(a1 + 8);
    if ((_DWORD)a4 == 63)
    {
      if ((_DWORD)a6 != 31)
      {
        v32 = a6 & 0x1F | 0xD2800000;
LABEL_19:
        v35 = *(_DWORD *)(v29 + 200);
        v34 = (unsigned int *)(v29 + 200);
        v33 = v35;
        if (v35 + 4 > *(v34 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v34 - 36), v26, v27, v28, v20, v21, v22, v23);
          v33 = *v34;
        }
        *(_DWORD *)(*((_QWORD *)v34 - 18) + v33) = v32;
        *v34 += 4;
        v19 = v276;
        goto LABEL_22;
      }
    }
    else if ((_DWORD)a4 != 31 && (_DWORD)a6 != 31)
    {
      v30 = a6 & 0x1F | ((a4 & 0x1F) << 16);
      v31 = -1442839584;
LABEL_18:
      v32 = v30 | v31;
      goto LABEL_19;
    }
    v30 = a6 | (32 * a4);
    v31 = -1862270976;
    goto LABEL_18;
  }
LABEL_22:
  v36 = *(_DWORD *)(v13 + 120 * a2 + 100);
  v37 = *(_DWORD *)(v14 + 40);
  v38 = v36 >= v37;
  v39 = v36 - v37;
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x198E9F6D0);
  }
  v40 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
  LODWORD(v297) = v39;
  v42 = JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::negativeOffsetIndexedAddress(a1, (int *)&v297, a4, v40, v20, v21, v22, v23);
  if (*(_BYTE *)(a1 + 80))
  {
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeChar(a1, v42, v41, a4, v43, v44, v45, v46);
    else
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v42, v41, a4, v43, v44, v45, v46);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v42, v41, a4, v43, v44, v45, v46);
  }
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 2) & 4) != 0)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if ((_DWORD)a4 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x198E9F4E8);
      }
      if ((_DWORD)a6 != 7)
      {
        __break(0xC471u);
        JUMPOUT(0x198E9F508);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 14) != 10)
      {
        __break(0xC471u);
        JUMPOUT(0x198E9F528);
      }
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 6, 0xFFFFFFFFLL, v47, v48, v49, v50, (uint64_t)&v302);
      v66 = v302;
      if (v302 != -1)
      {
        v67 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v67 == *(_DWORD *)(a3 + 8))
        {
          v68 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v67 + 1), (unint64_t)&v302, v61, v62, v63, v64, v65);
          v70 = *v68;
          v69 = v68 + 1;
          v66 = v70;
          LODWORD(v67) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v69 = &v303;
        }
        v108 = *(_QWORD *)a3 + 12 * v67;
        *(_DWORD *)v108 = v66;
        *(_QWORD *)(v108 + 4) = *(_QWORD *)v69;
        ++*(_DWORD *)(a3 + 12);
      }
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, 7, 0xFFFFFFFFLL, v62, v63, v64, v65, (uint64_t)&v300);
      v116 = v300;
      if (v300 != -1)
      {
        v117 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v117 == *(_DWORD *)(a3 + 8))
        {
          v118 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v117 + 1), (unint64_t)&v300, v111, v112, v113, v114, v115);
          v120 = *v118;
          v119 = (uint64_t *)(v118 + 1);
          v116 = v120;
          LODWORD(v117) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v119 = &v301;
        }
        v121 = *(_QWORD *)a3 + 12 * v117;
        *(_DWORD *)v121 = v116;
        *(_QWORD *)(v121 + 4) = *v119;
        ++*(_DWORD *)(a3 + 12);
      }
      v297 = (WTF *)v299;
      v298 = 2;
      v122 = *(_QWORD *)(a1 + 8);
      v123 = *(_DWORD *)(v122 + 200);
      if (v123 + 4 > *(_DWORD *)(v122 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 56), v109, v110, v111, v112, v113, v114, v115);
        v123 = *(_DWORD *)(v122 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v122 + 56) + v123) = 1795621087;
      v124 = *(_DWORD *)(v122 + 200) + 4;
      *(_DWORD *)(v122 + 200) = v124;
      if (*(_BYTE *)(v122 + 328))
      {
        while ((signed int)v124 < *(_DWORD *)(v122 + 52))
        {
          if (v124 + 4 > *(_DWORD *)(v122 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 56), v109, v110, v111, v112, v113, v114, v115);
            v124 = *(_DWORD *)(v122 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v122 + 56) + v124) = -721215457;
          v124 = *(_DWORD *)(v122 + 200) + 4;
          *(_DWORD *)(v122 + 200) = v124;
        }
        *(_DWORD *)(v122 + 208) = 0;
      }
      if (v124 + 4 > *(_DWORD *)(v122 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 56), v109, v110, v111, v112, v113, v114, v115);
        v124 = *(_DWORD *)(v122 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v122 + 56) + v124) = 1409286144;
      v125 = *(_DWORD *)(v122 + 200);
      v126 = v125 + 4;
      *(_DWORD *)(v122 + 200) = v125 + 4;
      v127 = v125 + 8;
      v128 = v125 + 4;
      if (v127 > *(_DWORD *)(v122 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 56), v109, v110, v111, v112, v113, v114, v115);
        v128 = *(_DWORD *)(v122 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v122 + 56) + v128) = -721215457;
      *(_DWORD *)(v122 + 200) += 4;
      if (*(_BYTE *)(v122 + 328))
        v129 = -122;
      else
        v129 = -126;
      v292 = v126;
      v293 = 0;
      v294 = v129;
      v295 = 0;
      v296 = -1;
      if (v126 != -1)
      {
        if (HIDWORD(v298) == (_DWORD)v298)
        {
          v130 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v297, (void *)(HIDWORD(v298) + 1), (unint64_t)&v292, v111, v112, v113, v114, v115);
          v132 = *v130;
          v131 = v130 + 1;
          v133 = (char *)v297 + 12 * HIDWORD(v298);
          *(_DWORD *)v133 = v132;
        }
        else
        {
          v131 = &v293;
          v133 = (char *)v297 + 12 * HIDWORD(v298);
          *(_DWORD *)v133 = v126;
        }
        *(_QWORD *)(v133 + 4) = *(_QWORD *)v131;
        ++HIDWORD(v298);
      }
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 12, 6, 127, v112, v113, v114, v115, (uint64_t)v291);
      v139 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v139 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9F578);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(*(_DWORD **)(a1 + 8), (uint64_t)&JSC::Yarr::canonicalTableLChar, v139 + 296, v134, v135, v136, v137, v138);
      v147 = *(_DWORD *)(v139 + 200);
      if (v147 + 4 > *(_DWORD *)(v139 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v139 + 56), v140, v141, v142, v143, v144, v145, v146);
        v147 = *(_DWORD *)(v139 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v139 + 56) + v147) = 2019981862;
      *(_DWORD *)(v139 + 200) += 4;
      v148 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v148 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198E9F5A8);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(*(_DWORD **)(a1 + 8), (uint64_t)&JSC::Yarr::canonicalTableLChar, v148 + 296, v142, v143, v144, v145, v146);
      v156 = *(_DWORD *)(v148 + 200);
      if (v156 + 4 > *(_DWORD *)(v148 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v148 + 56), v149, v150, v151, v152, v153, v154, v155);
        v156 = *(_DWORD *)(v148 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v148 + 56) + v156) = 2020047399;
      *(_DWORD *)(v148 + 200) += 4;
      v157 = *(_QWORD *)(a1 + 8);
      v158 = *(_DWORD *)(v157 + 200);
      if (v158 + 4 > *(_DWORD *)(v157 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v157 + 56), v149, v150, v151, v152, v153, v154, v155);
        v158 = *(_DWORD *)(v157 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v157 + 56) + v158) = 1795621087;
      v159 = *(_DWORD *)(v157 + 200) + 4;
      *(_DWORD *)(v157 + 200) = v159;
      if (*(_BYTE *)(v157 + 328))
      {
        while ((signed int)v159 < *(_DWORD *)(v157 + 52))
        {
          if (v159 + 4 > *(_DWORD *)(v157 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v157 + 56), v149, v150, v151, v152, v153, v154, v155);
            v159 = *(_DWORD *)(v157 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v157 + 56) + v159) = -721215457;
          v159 = *(_DWORD *)(v157 + 200) + 4;
          *(_DWORD *)(v157 + 200) = v159;
        }
        *(_DWORD *)(v157 + 208) = 0;
      }
      if (v159 + 4 > *(_DWORD *)(v157 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v157 + 56), v149, v150, v151, v152, v153, v154, v155);
        v159 = *(_DWORD *)(v157 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v157 + 56) + v159) = 1409286145;
      v160 = *(_DWORD *)(v157 + 200);
      v161 = v160 + 4;
      *(_DWORD *)(v157 + 200) = v160 + 4;
      v162 = v160 + 8;
      v163 = v160 + 4;
      if (v162 > *(_DWORD *)(v157 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v157 + 56), v149, v150, v151, v152, v153, v154, v155);
        v163 = *(_DWORD *)(v157 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v157 + 56) + v163) = -721215457;
      *(_DWORD *)(v157 + 200) += 4;
      if (*(_BYTE *)(v157 + 328))
        v164 = -122;
      else
        v164 = -126;
      v286 = v161;
      v287 = 0;
      v288 = v164;
      v289 = 1;
      v290 = -1;
      if (v161 != -1)
      {
        v165 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v165 == *(_DWORD *)(a3 + 8))
        {
          v166 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v165 + 1), (unint64_t)&v286, v151, v152, v153, v154, v155);
          v168 = *v166;
          v167 = v166 + 1;
          v169 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
          *(_DWORD *)v169 = v168;
        }
        else
        {
          v167 = &v287;
          v169 = *(_QWORD *)a3 + 12 * v165;
          *(_DWORD *)v169 = v161;
        }
        *(_QWORD *)(v169 + 4) = *(_QWORD *)v167;
        ++*(_DWORD *)(a3 + 12);
      }
      v170 = *(_QWORD *)(a1 + 8);
      for (j = *(_DWORD *)(v170 + 200); j < *(_DWORD *)(v170 + 52); *(_DWORD *)(v170 + 200) = j)
      {
        if ((j + 4) > *(_DWORD *)(v170 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v170 + 56), v149, v150, v151, v152, v153, v154, v155);
          j = *(_DWORD *)(v170 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v170 + 56) + j) = -721215457;
        j = *(_DWORD *)(v170 + 200) + 4;
      }
      v172 = j;
      if ((j + 4) > *(_DWORD *)(v170 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v170 + 56), v149, v150, v151, v152, v153, v154, v155);
        v172 = *(_DWORD *)(v170 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v170 + 56) + v172) = 335544320;
      *(_DWORD *)(v170 + 200) += 4;
      if (*(_BYTE *)(v170 + 328))
        v173 = 69;
      else
        v173 = 65;
      v281 = j;
      v282 = 0;
      v283 = v173;
      v284 = 15;
      v285 = -1;
      if (j != -1)
      {
        if (HIDWORD(v298) == (_DWORD)v298)
        {
          v174 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v297, (void *)(HIDWORD(v298) + 1), (unint64_t)&v281, v151, v152, v153, v154, v155);
          v176 = *v174;
          v175 = v174 + 1;
          v177 = (char *)v297 + 12 * HIDWORD(v298);
          *(_DWORD *)v177 = v176;
        }
        else
        {
          v175 = &v282;
          v177 = (char *)v297 + 12 * HIDWORD(v298);
          *(_DWORD *)v177 = j;
        }
        *(_QWORD *)(v177 + 4) = *(_QWORD *)v175;
        ++HIDWORD(v298);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v291, *(_QWORD *)(a1 + 8), v150, v151, v152, v153, v154, v155);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(*(_BYTE *)(a1 + 84) & 1), 10, v178, v179, v180, v181, v182);
      v190 = *(_QWORD *)(a1 + 8);
      v191 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 90440);
      v192 = *(_QWORD *)(v191 + 1384);
      v193 = *(unsigned int **)(v191 + 1392);
      if (v193)
      {
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 + 1, v193));
      }
      *(_DWORD *)(v190 + 208) = 0;
      v195 = *(_DWORD *)(v190 + 200);
      if (v195 + 4 > *(_DWORD *)(v190 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v190 + 56), v183, v184, v185, v186, v187, v188, v189);
        v195 = *(_DWORD *)(v190 + 200);
      }
      v196 = (_QWORD *)(v190 + 32);
      *(_DWORD *)(*(_QWORD *)(v190 + 56) + v195) = -1811939328;
      v197 = (*(_DWORD *)(v190 + 200) + 4);
      *(_DWORD *)(v190 + 200) = v197;
      LOBYTE(v311) = -1;
      BYTE3(v311) = 15;
      *(_WORD *)((char *)&v311 + 1) = 65;
      *(_QWORD *)&v310 = v197 - 4;
      *((_QWORD *)&v310 + 1) = v192;
      WORD2(v311) = 384;
      v198 = *(unsigned int *)(v190 + 44);
      if ((_DWORD)v198 == *(_DWORD *)(v190 + 40))
      {
        v262 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v196, v198 + 1, (unint64_t)&v310, v185, v186, v187, v188, v189);
        v199 = *(_QWORD *)(v190 + 32) + 24 * *(unsigned int *)(v190 + 44);
        *(_QWORD *)v199 = 0;
        *(_QWORD *)(v199 + 8) = 0;
        *(_BYTE *)(v199 + 16) = -1;
        v263 = (((*(unsigned __int8 *)(v199 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v199 + 17) = 65;
        *(_BYTE *)(v199 + 19) = BYTE2(v263);
        *(_WORD *)(v199 + 20) &= 0xFC00u;
        v200 = *(_OWORD *)v262;
        v201 = *(_QWORD *)(v262 + 16);
      }
      else
      {
        v199 = *v196 + 24 * v198;
        v200 = v310;
        v201 = v311;
      }
      *(_QWORD *)(v199 + 16) = v201;
      *(_OWORD *)v199 = v200;
      v19 = v276;
      ++*(_DWORD *)(v190 + 44);
      if (v193)
      {
        do
        {
          v202 = __ldaxr(v193);
          v203 = v202 - 1;
        }
        while (__stlxr(v203, v193));
        if (!v203)
        {
          atomic_store(1u, v193);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v193, v183, v184, v185, v186, v187, v188, v189);
          WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
        }
      }
      JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, 6, 6, v186, v187, v188, v189, (uint64_t)&v279);
      v204 = v279;
      if (v279 != -1)
      {
        v205 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v205 == *(_DWORD *)(a3 + 8))
        {
          v206 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v205 + 1), (unint64_t)&v279, v97, v98, v99, v100, v101);
          v208 = *v206;
          v207 = (uint64_t *)(v206 + 1);
          v204 = v208;
          LODWORD(v205) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v207 = &v280;
        }
        v209 = *(_QWORD *)a3 + 12 * v205;
        *(_DWORD *)v209 = v204;
        *(_QWORD *)(v209 + 4) = *v207;
        ++*(_DWORD *)(a3 + 12);
      }
      if (HIDWORD(v298))
      {
        v210 = 0;
        v211 = 0;
        v212 = *(_QWORD *)(a1 + 8);
        v213 = 12 * HIDWORD(v298);
        do
        {
          if (v211 >= HIDWORD(v298))
          {
            __break(0xC471u);
            JUMPOUT(0x198E9F6C0);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v297 + v210), v212, v96, v97, v98, v99, v100, v101);
          ++v211;
          v210 += 12;
        }
        while (v213 != v210);
      }
      v214 = v297;
      if (v299 != (_BYTE *)v297 && v297 != 0)
      {
        v297 = 0;
        LODWORD(v298) = 0;
        WTF::fastFree((unint64_t)v214, v95, v96, v97, v98, v99, v100, v101);
      }
    }
    else
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, a4, a6, v47, v48, v49, v50, (uint64_t)&v297);
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), a4, (JSC::ARM64LogicalImmediate *)&JSC::Yarr::canonicalTableLChar, a4, v71, v72, v73, v74);
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), a6, (JSC::ARM64LogicalImmediate *)&JSC::Yarr::canonicalTableLChar, a6, v75, v76, v77, v78);
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, a4, a6, v79, v80, v81, v82, (uint64_t)&v304);
      v89 = v304;
      if (v304 != -1)
      {
        v90 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v90 == *(_DWORD *)(a3 + 8))
        {
          v91 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v90 + 1), (unint64_t)&v304, v84, v85, v86, v87, v88);
          v93 = *v91;
          v92 = (uint64_t *)(v91 + 1);
          v89 = v93;
          LODWORD(v90) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v92 = &v305;
        }
        v216 = *(_QWORD *)a3 + 12 * v90;
        *(_DWORD *)v216 = v89;
        *(_QWORD *)(v216 + 4) = *v92;
        ++*(_DWORD *)(a3 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v297, *(_QWORD *)(a1 + 8), v83, v84, v85, v86, v87, v88);
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, a4, 0xFFFFFFFFLL, v47, v48, v49, v50, (uint64_t)&v308);
    v56 = v308;
    if (v308 != -1)
    {
      v57 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v57 == *(_DWORD *)(a3 + 8))
      {
        v58 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v57 + 1), (unint64_t)&v308, v51, v52, v53, v54, v55);
        v60 = *v58;
        v59 = (uint64_t *)(v58 + 1);
        v56 = v60;
        LODWORD(v57) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v59 = &v309;
      }
      v94 = *(_QWORD *)a3 + 12 * v57;
      *(_DWORD *)v94 = v56;
      *(_QWORD *)(v94 + 4) = *v59;
      ++*(_DWORD *)(a3 + 12);
    }
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, a4, a6, v52, v53, v54, v55, (uint64_t)&v306);
    v102 = v306;
    if (v306 != -1)
    {
      v103 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v103 == *(_DWORD *)(a3 + 8))
      {
        v104 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v103 + 1), (unint64_t)&v306, v97, v98, v99, v100, v101);
        v106 = *v104;
        v105 = v104 + 1;
        v102 = v106;
        LODWORD(v103) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v105 = &v307;
      }
      v107 = *(_QWORD *)a3 + 12 * v103;
      *(_DWORD *)v107 = v102;
      *(_QWORD *)(v107 + 4) = *(_QWORD *)v105;
      ++*(_DWORD *)(a3 + 12);
    }
  }
  v217 = *(_DWORD **)(a1 + 8);
  v218 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
  v219 = v218 | (32 * v218) | 0x11000400;
  v220 = v217[50];
  if (v220 + 4 > v217[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v217 + 14), (uint64_t)v95, v96, v97, v98, v99, v100, v101);
    v220 = v217[50];
  }
  *(_DWORD *)(*((_QWORD *)v217 + 7) + v220) = v219;
  v217[50] += 4;
  v221 = *(_DWORD **)(a1 + 8);
  v222 = v19 | (32 * v19) | 0x11000400;
  v223 = v221[50];
  if (v223 + 4 > v221[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v221 + 14), (uint64_t)v95, v96, v97, v98, v99, v100, v101);
    v223 = v221[50];
  }
  *(_DWORD *)(*((_QWORD *)v221 + 7) + v223) = v222;
  v221[50] += 4;
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 11, a6, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20), v98, v99, v100, v101, (uint64_t)&v297);
    v231 = *(_DWORD **)(a1 + 8);
    v232 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
    v233 = v232 | (32 * v232) | 0x11000400;
    v234 = v231[50];
    if (v234 + 4 > v231[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v231 + 14), v224, v225, v226, v227, v228, v229, v230);
      v234 = v231[50];
    }
    *(_DWORD *)(*((_QWORD *)v231 + 7) + v234) = v233;
    v231[50] += 4;
    v235 = *(_DWORD **)(a1 + 8);
    v236 = v235[50];
    if (v236 + 4 > v235[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v235 + 14), v224, v225, v226, v227, v228, v229, v230);
      v236 = v235[50];
    }
    *(_DWORD *)(*((_QWORD *)v235 + 7) + v236) = v222;
    v235[50] += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v297, *(_QWORD *)(a1 + 8), v225, v226, v227, v228, v229, v230);
  }
  if (!v275)
  {
    v255 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v255 + 212))
    {
      v256 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)(((8 * v272) | 4u) >> 2) << 34);
      *(_DWORD *)(*(_QWORD *)(v255 + 296) + 208) &= ~*(_DWORD *)(v255 + 320);
      JSC::MacroAssemblerARM64::load32(v255, v256, *(char *)(v255 + 304), v97, v98, v99, v100, v101);
      JSC::MacroAssemblerARM64::branch32(v255, 1, v19, 17, v257, v258, v259, v260, (uint64_t)&v297);
      v277 = v274;
      v253 = *(_QWORD *)(a1 + 8);
      v254 = (unsigned int *)&v277;
      return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v297, v254, v253, v248, v249, v250, v251, v252);
    }
    __break(0xC471u);
LABEL_177:
    JUMPOUT(0x198E9F4B8);
  }
  v237 = v273;
  if (v273 == -1)
  {
    v238 = *(_QWORD *)(a1 + 40);
    v237 = *(_BYTE *)(v238 + 15);
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(v238 + 3) | ((unint64_t)((4 * v275+ 8 * *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)+ 4) >> 2) << 34), (char)v237, v97, v98, v99, v100, v101);
  }
  JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)v237 << 8) | 0x300000000, 0x200000000, a4, v98, v99, v100, v101);
  JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), a4 | 0x400000000, a4, v239, v240, v241, v242, v243);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, v19, a4, v244, v245, v246, v247, (uint64_t)&v297);
  v278 = v274;
  v253 = *(_QWORD *)(a1 + 8);
  v254 = (unsigned int *)&v278;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v297, v254, v253, v248, v249, v250, v251, v252);
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::linkTo(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v10 = result;
  v11 = result[15];
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = result + 20;
    LODWORD(v14) = result[23];
    do
    {
      v15 = *(_DWORD *)(*((_QWORD *)v10 + 6) + 4 * v12);
      v16 = *a2;
      v24 = v15;
      v25 = v16;
      if ((_DWORD)v14 == v10[22])
      {
        result = (unsigned int *)WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 20), (void *)(v14 + 1), (unint64_t)&v24, a4, a5, a6, a7, a8);
        v14 = v10[23];
        v18 = (unsigned int *)(*((_QWORD *)v10 + 10) + 8 * v14);
        *v18 = *result;
        v18[1] = result[1];
        v11 = v10[15];
      }
      else
      {
        v17 = (unsigned int *)(*v13 + 8 * v14);
        *v17 = v15;
        v17[1] = v25;
      }
      LODWORD(v14) = v14 + 1;
      v10[23] = v14;
      ++v12;
    }
    while (v12 < v11);
    if (v10[14])
    {
      if (v11)
        v10[15] = 0;
      result = (unsigned int *)*((_QWORD *)v10 + 6);
      if (v10 + 16 != result && result)
      {
        *((_QWORD *)v10 + 6) = 0;
        v10[14] = 0;
        WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
        result = (unsigned int *)*((_QWORD *)v10 + 6);
      }
      if (!result)
      {
        *((_QWORD *)v10 + 6) = v10 + 16;
        v10[14] = 4;
      }
    }
  }
  if (*((_BYTE *)v10 + 40))
  {
    v23 = *a2;
    result = JSC::MacroAssembler::jump(a3, &v23, a3, a4, a5, a6, a7, a8);
  }
  v19 = v10[3];
  if ((_DWORD)v19)
  {
    v20 = *a2;
    v21 = *(unsigned int **)v10;
    v22 = 12 * v19;
    do
    {
      v24 = v20;
      result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v21, &v24, a3, a4, a5, a6, a7, a8);
      v21 += 3;
      v22 -= 12;
    }
    while (v22);
  }
  if (v10[2])
  {
    if (v10[3])
      v10[3] = 0;
    result = *(unsigned int **)v10;
    if (v10 + 4 != *(unsigned int **)v10 && result)
    {
      *(_QWORD *)v10 = 0;
      v10[2] = 0;
      WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
      result = *(unsigned int **)v10;
    }
    if (!result)
    {
      *(_QWORD *)v10 = v10 + 4;
      v10[2] = 2;
    }
  }
  *((_BYTE *)v10 + 40) = 0;
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::takeBacktracksToJumpList(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  int i;
  unsigned int v21;
  char v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;
  int v41;
  int v42;

  v11 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v11)
  {
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_31;
    goto LABEL_20;
  }
  v12 = *(_DWORD *)(a3 + 200);
  if (v12 >= *(_DWORD *)(a3 + 52))
  {
    *(_DWORD *)(a3 + 208) = 0;
    goto LABEL_4;
  }
  do
  {
    if ((v12 + 4) > *(_DWORD *)(a3 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_DWORD *)(a3 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 56) + v12) = -721215457;
    v12 = *(_DWORD *)(a3 + 200) + 4;
    *(_DWORD *)(a3 + 200) = v12;
  }
  while (v12 < *(_DWORD *)(a3 + 52));
  v11 = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(a3 + 208) = 0;
  if ((_DWORD)v11)
  {
LABEL_4:
    v13 = 0;
    LODWORD(v14) = *(_DWORD *)(a1 + 92);
    do
    {
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v13);
      v41 = v15;
      v42 = v12;
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 88))
      {
        v17 = (_DWORD *)WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 80, (void *)(v14 + 1), (unint64_t)&v41, a4, a5, a6, a7, a8);
        v14 = *(unsigned int *)(a1 + 92);
        v18 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
        *v18 = *v17;
        v18[1] = v17[1];
        v11 = *(unsigned int *)(a1 + 60);
      }
      else
      {
        v16 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
        *v16 = v15;
        v16[1] = v42;
      }
      LODWORD(v14) = v14 + 1;
      *(_DWORD *)(a1 + 92) = v14;
      ++v13;
    }
    while (v13 < v11);
    if (*(_DWORD *)(a1 + 56))
    {
      if (v11)
        *(_DWORD *)(a1 + 60) = 0;
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 56))
  {
LABEL_13:
    v19 = *(_QWORD *)(a1 + 48);
    if (a1 + 64 != v19 && v19)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      v19 = *(_QWORD *)(a1 + 48);
    }
    if (!v19)
    {
      *(_QWORD *)(a1 + 48) = a1 + 64;
      *(_DWORD *)(a1 + 56) = 4;
    }
  }
LABEL_18:
  *(_BYTE *)(a1 + 40) = 1;
LABEL_20:
  for (i = *(_DWORD *)(a3 + 200); i < *(_DWORD *)(a3 + 52); *(_DWORD *)(a3 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a3 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a3 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 56) + i) = -721215457;
    i = *(_DWORD *)(a3 + 200) + 4;
  }
  v21 = i;
  if ((i + 4) > *(_DWORD *)(a3 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v21 = *(_DWORD *)(a3 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 56) + v21) = 335544320;
  *(_DWORD *)(a3 + 200) += 4;
  if (*(_BYTE *)(a3 + 328))
    v22 = 69;
  else
    v22 = 65;
  v36 = i;
  v37 = 0;
  v38 = v22;
  v39 = 15;
  v40 = -1;
  if (i != -1)
  {
    v23 = a2[3];
    if ((_DWORD)v23 == a2[2])
    {
      v24 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, (void *)(v23 + 1), (unint64_t)&v36, a4, a5, a6, a7, a8);
      v26 = *v24;
      v25 = v24 + 1;
      v27 = *(_QWORD *)a2 + 12 * a2[3];
      *(_DWORD *)v27 = v26;
    }
    else
    {
      v25 = &v37;
      v27 = *(_QWORD *)a2 + 12 * v23;
      *(_DWORD *)v27 = i;
    }
    *(_QWORD *)(v27 + 4) = *(_QWORD *)v25;
    ++a2[3];
  }
LABEL_31:
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)a2, (unsigned int *)a1, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
      *(_DWORD *)(a1 + 12) = 0;
    v35 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v35)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
      v35 = *(_QWORD *)a1;
    }
    if (!v35)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
  }
  *(_BYTE *)(a1 + 40) = 0;
}

unint64_t JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  int v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;

  v9 = result;
  if (*(_DWORD *)(result + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label::Label(&v29, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v21 = *(unsigned int *)(v9 + 60);
    if ((_DWORD)v21)
    {
      for (i = 0; i < v21; ++i)
      {
        v23 = *(_DWORD *)(*(_QWORD *)(v9 + 48) + 4 * i);
        v27 = v23;
        v28 = v29;
        v24 = *(unsigned int *)(v9 + 92);
        if ((_DWORD)v24 == *(_DWORD *)(v9 + 88))
        {
          WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord>(v9 + 80, (unint64_t)&v27, v15, v16, v17, v18, v19, v20);
          v21 = *(unsigned int *)(v9 + 60);
        }
        else
        {
          v25 = v24 + 1;
          v26 = (_DWORD *)(*(_QWORD *)(v9 + 80) + 8 * v24);
          *v26 = v23;
          v26[1] = v28;
          *(_DWORD *)(v9 + 92) = v25;
        }
      }
    }
    result = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 48, v14, v15, v16, v17, v18, v19, v20);
  }
  v10 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    while (v12 < *(unsigned int *)(v9 + 12))
    {
      result = (unint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v9 + v11), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v13 == v11)
        goto LABEL_6;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_6:
    if (*(_DWORD *)(v9 + 8))
    {
      if (*(_DWORD *)(v9 + 12))
        *(_DWORD *)(v9 + 12) = 0;
      result = *(_QWORD *)v9;
      if (v9 + 16 != *(_QWORD *)v9 && result)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
        result = *(_QWORD *)v9;
      }
      if (!result)
      {
        *(_QWORD *)v9 = v9 + 16;
        *(_DWORD *)(v9 + 8) = 2;
      }
    }
    *(_BYTE *)(v9 + 40) = 0;
  }
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::restoreParenContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v12;
  int v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unint64_t v94;

  v9 = a5;
  v10 = a4;
  v12 = a2;
  v94 = 0x8000000000000000;
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 12);
  v15 = *(_DWORD **)(a1 + 8);
  v16 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1) & 0x1F | (32 * a2) | ((a3 & 0x1F) << 10) | 0x29410000;
  v17 = v15[50];
  if (v17 + 4 > v15[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = v15[50];
  }
  *(_DWORD *)(*((_QWORD *)v15 + 7) + v17) = v16;
  v15[50] += 4;
  v18 = 8 * a6;
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 1), (a6 << 35) | 0x1F, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, ((unint64_t)((8 * a6 + 16) >> 3) << 35) | 0x1F, v19, v20, v21, v22, v23);
  v24 = v12;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v12 | 0x1000000000, a3, v25, v26, v27, v28, v29);
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, ((unint64_t)((8 * a6 + 8) >> 3) << 35) | 0x1F, v30, v31, v32, v33, v34);
  if (*(_BYTE *)(a1 + 81) != 1)
  {
    v60 = 0x8000000000000000;
    goto LABEL_52;
  }
  if (v10 > v9)
    goto LABEL_21;
  v42 = 8 * v10;
  if (!v14)
  {
    do
    {
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v12 | ((unint64_t)(v42 + 16) << 32), a3, v37, v38, v39, v40, v41);
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | (unint64_t)(v42 << 32), v55, v56, v57, v58, v59);
      ++v10;
      v42 = (v42 + 8);
    }
    while (v10 <= v9);
LABEL_21:
    v60 = 0x8000000000000000;
LABEL_22:
    v61 = __clz(__rbit64(v60));
    v62 = 63;
    if (v61 >= 0x3F)
      v63 = 63;
    else
      v63 = v61;
    v64 = 1;
    goto LABEL_33;
  }
  v43 = v10;
  v44 = v9 - v10 + 1;
  do
  {
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v12 | ((unint64_t)(v42 + 16) << 32), a3, v37, v38, v39, v40, v41);
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | (unint64_t)(v42 << 32), v45, v46, v47, v48, v49);
    v50 = *(_QWORD *)(a1 + 56);
    if (v43 >= *(unsigned int *)(v50 + 124))
    {
      __break(0xC471u);
      JUMPOUT(0x198EA01ECLL);
    }
    v51 = *(unsigned int *)(*(_QWORD *)(v50 + 112) + 4 * v43);
    if ((_DWORD)v51)
    {
      v52 = v94;
      if ((v94 & 0x8000000000000000) != 0)
        v53 = 63;
      else
        v53 = *(_QWORD *)(2 * v94);
      if (v53 <= v51)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v94, v51 + 1, 0);
        v52 = v94;
      }
      if (v52 >= 0)
        v54 = (unint64_t *)(2 * v52 + 8);
      else
        v54 = &v94;
      *(unint64_t *)((char *)v54 + ((v51 >> 3) & 0x1FFFFFF8)) |= 1 << v51;
    }
    ++v43;
    v42 = (v42 + 8);
    --v44;
  }
  while (v44);
  v60 = v94;
  if ((v94 & 0x8000000000000000) != 0)
  {
    v18 = 8 * a6;
    goto LABEL_22;
  }
  v62 = *(_QWORD *)(2 * v94);
  v18 = 8 * a6;
  if ((unint64_t)(v62 + 63) < 0x40)
    goto LABEL_52;
  v65 = *(_QWORD *)(2 * v94 + 8);
  if (v65)
  {
    v66 = __clz(__rbit64(v65));
    if (v66 < 0x40)
    {
      v67 = 0;
LABEL_32:
      v64 = 0;
      v63 = v66 + (v67 << 6);
LABEL_33:
      if (v63 == v62)
        goto LABEL_52;
      v93 = v18;
      v68 = (uint64_t *)(2 * v60);
      while (1)
      {
        JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), (v24 | 0x1400000000) + (v63 << 34) + (*(_QWORD *)(a1 + 96) << 35), a3, v37, v38, v39, v40, v41);
        JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3) | ((unint64_t)((4 * v63+ 8* *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4)+ 4) >> 2) << 34), v69, v70, v71, v72, v73);
        v74 = v63 + 1;
        if (v64)
        {
          v81 = __clz(__rbit64(v60 >> v74)) + v74;
          if (v81 >= 0x3F)
            v63 = 63;
          else
            v63 = v81;
          goto LABEL_40;
        }
        v63 = *v68;
        v75 = *v68 + 63;
        v76 = v74 >> 6;
        if (v74 >> 6 < v75 >> 6)
        {
          v77 = *(_QWORD *)(2 * v60 + 8 + 8 * v76);
          if (!v77 || (v78 = __clz(__rbit64(v77 >> v74)) + (v74 & 0x3F), v78 >= 0x40))
          {
            if (v76 + 1 == v75 >> 6)
              goto LABEL_40;
            v79 = (v75 >> 6) - 1;
            while (1)
            {
              v80 = *(_QWORD *)(2 * v60 + 0x10 + 8 * v76);
              if (v80)
              {
                v78 = __clz(__rbit64(v80));
                if (v78 <= 0x3F)
                  break;
              }
              if (v79 == ++v76)
                goto LABEL_40;
            }
            ++v76;
          }
          v63 = v78 + (v76 << 6);
        }
LABEL_40:
        if (v63 == v62)
        {
          v18 = v93;
          goto LABEL_52;
        }
      }
    }
  }
  if ((unint64_t)(v62 + 63) >> 6 != 1)
  {
    v91 = 0;
    while (1)
    {
      v92 = *(_QWORD *)(2 * v94 + 0x10 + 8 * v91);
      if (v92)
      {
        v66 = __clz(__rbit64(v92));
        if (v66 <= 0x3F)
          break;
      }
      if (((unint64_t)(v62 + 63) >> 6) - 1 == ++v91)
        goto LABEL_52;
    }
    v67 = v91 + 1;
    goto LABEL_32;
  }
LABEL_52:
  v82 = (a6 + 4);
  if (*(_QWORD *)(a1 + 112) > v82)
  {
    v83 = a6 + 5;
    v84 = (v18 + 32);
    do
    {
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v24 | 0x1800000000)+ (*(_QWORD *)(a1 + 104) << 34)+ ((unint64_t)(*(_DWORD *)(a1 + 96) + v82) << 35), a3, v37, v38, v39, v40, v41);
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), a3, (v84 << 32) | 0x1F, v85, v86, v87, v88, v89);
      LODWORD(v82) = v83;
      v90 = *(_QWORD *)(a1 + 112) > (unint64_t)v83++;
      v84 = (v84 + 8);
    }
    while (v90);
  }
  if ((v60 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v60, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::freeParenContext(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  v10 = a2;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), *(char *)(*(_QWORD *)(a1 + 40) + 5), v10, v11, v12, v13, v14, v15);
  v23 = *(char *)(*(_QWORD *)(a1 + 40) + 5);
  v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 5);
  if (v24 == a2)
    return;
  v25 = *(_QWORD *)(a1 + 8);
  if (a2 != 63)
  {
    if (a2 != 31 && v23 != 31)
    {
      v26 = v24 & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
      v27 = -1442839584;
LABEL_9:
      v28 = v26 | v27;
      goto LABEL_10;
    }
LABEL_8:
    v26 = v23 | (32 * a2);
    v27 = -1862270976;
    goto LABEL_9;
  }
  if (v24 == 31)
    goto LABEL_8;
  v28 = v24 & 0x1F | 0xD2800000;
LABEL_10:
  v31 = *(_DWORD *)(v25 + 200);
  v30 = (unsigned int *)(v25 + 200);
  v29 = v31;
  if (v31 + 4 > *(v30 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 - 36), v16, v17, v18, v19, v20, v21, v22);
    v29 = *v30;
  }
  *(_DWORD *)(*((_QWORD *)v30 - 18) + v29) = v28;
  *v30 += 4;
}

unsigned int *JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackPatternCharacterGreedy(unsigned int *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;

  if (result[79] <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    v10 = *((_QWORD *)result + 38);
    v11 = *(_QWORD *)(v10 + 120 * a2 + 24);
    v12 = *(char *)(*((_QWORD *)result + 5) + 10);
    v13 = (unint64_t)(result + 3936);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link((unint64_t)(result + 3936), *((void **)result + 1), a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(*((_QWORD *)v9 + 1), ((unint64_t)((8 * *(_DWORD *)(v11 + 44) + 8) >> 3) << 35) | 0x1F, v12, v14, v15, v16, v17, v18);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *((_QWORD *)v9 + 1), 0, v12, v19, v20, v21, v22, (uint64_t)&v48, v23);
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITDefaultRegisters>::BacktrackingState::append(v13, v48, v49, v24, v25, v26, v27, v28);
    JSC::MacroAssemblerARM64::sub32(*((_QWORD *)v9 + 1), v12, 1, v12, v29, v30, v31, v32);
    if ((v9[21] & 1) != 0 && *(_WORD *)(v11 + 18))
    {
      v37 = *((_QWORD *)v9 + 1);
      v38 = *(char *)(*((_QWORD *)v9 + 5) + 1);
      v39 = 2;
    }
    else
    {
      v37 = *((_QWORD *)v9 + 1);
      v38 = *(char *)(*((_QWORD *)v9 + 5) + 1);
      v39 = 1;
    }
    JSC::MacroAssemblerARM64::sub32(v37, v38, v39, v38, v33, v34, v35, v36);
    v40 = *((_QWORD *)v9 + 1);
    v47 = *(_DWORD *)(v10 + 120 * a2 + 36);
    return JSC::MacroAssembler::jump(v40, &v47, v41, v42, v43, v44, v45, v46);
  }
  return result;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackPatternCharacterNonGreedy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int *v45;
  int *v46;
  int v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t *v61;
  int v62;
  char *v63;
  _DWORD *v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  JSC::AssemblerBuffer *v80;
  int i;
  unsigned int v82;
  char v83;
  int *v84;
  int *v85;
  int v86;
  char *v87;
  _DWORD *v88;
  int v89;
  int v90;
  unsigned int v91;
  _DWORD *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  _DWORD *v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  JSC::AssemblerBuffer *v112;
  unsigned int v113;
  int v114;
  int v115;
  char v116;
  __int16 v117;
  char v118;
  unsigned int v119[3];
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  _BYTE v128[24];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198EA0A90);
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(unsigned int **)(v10 + 120 * a2 + 24);
  v12 = v11[4];
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(v13 + 9);
  v15 = *(char *)(v13 + 10);
  v16 = *(_BYTE *)(v13 + 10);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link(a1 + 15744, *(void **)(a1 + 8), a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * v11[11] + 8) >> 3) << 35) | 0x1F, v15, v17, v18, v19, v20, v21);
  if (v12 < 0x100 || *(_BYTE *)(a1 + 80))
  {
    v126 = (WTF *)v128;
    v127 = 2;
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v25, v26, v27, v28, (uint64_t)&v124);
    v34 = v124;
    if (v124 != -1)
    {
      v35 = HIDWORD(v127);
      if (HIDWORD(v127) == (_DWORD)v127)
      {
        v36 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v124, v29, v30, v31, v32, v33);
        v38 = *v36;
        v37 = (uint64_t *)(v36 + 1);
        v34 = v38;
        v35 = HIDWORD(v127);
      }
      else
      {
        v37 = &v125;
      }
      v39 = (char *)v126 + 12 * v35;
      *(_DWORD *)v39 = v34;
      *(_QWORD *)(v39 + 4) = *v37;
      ++HIDWORD(v127);
    }
    v40 = v11[2];
    if ((_DWORD)v40 != -1)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v16, v40, v30, v31, v32, v33, (uint64_t)&v122);
      v43 = v122;
      if (v122 != -1)
      {
        v44 = HIDWORD(v127);
        if (HIDWORD(v127) == (_DWORD)v127)
        {
          v45 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v122, v41, v42, v31, v32, v33);
          v47 = *v45;
          v46 = v45 + 1;
          v43 = v47;
          v44 = HIDWORD(v127);
        }
        else
        {
          v46 = &v123;
        }
        v48 = (char *)v126 + 12 * v44;
        *(_DWORD *)v48 = v43;
        *(_QWORD *)(v48 + 4) = *(_QWORD *)v46;
        ++HIDWORD(v127);
      }
    }
    v49 = *(_DWORD *)(v10 + 120 * a2 + 100);
    v50 = v11[10];
    if (v49 < v50)
    {
      __break(0xC471u);
      goto LABEL_71;
    }
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::jumpIfCharNotEquals((uint64_t)&v120, a1, v12, v49 - v50, v14, v31, v32, v33);
    v58 = v120;
    if (v120 != -1)
    {
      v59 = HIDWORD(v127);
      if (HIDWORD(v127) == (_DWORD)v127)
      {
        v60 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v120, v53, v54, v55, v56, v57);
        v62 = *v60;
        v61 = (uint64_t *)(v60 + 1);
        v58 = v62;
        v59 = HIDWORD(v127);
      }
      else
      {
        v61 = &v121;
      }
      v63 = (char *)v126 + 12 * v59;
      *(_DWORD *)v63 = v58;
      *(_QWORD *)(v63 + 4) = *v61;
      ++HIDWORD(v127);
    }
    v64 = *(_DWORD **)(a1 + 8);
    v65 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
    v66 = v65 | (32 * v65) | 0x11000400;
    v67 = v64[50];
    if (v67 + 4 > v64[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v64 + 14), v51, v52, v53, v54, v55, v56, v57);
      v67 = v64[50];
    }
    *(_DWORD *)(*((_QWORD *)v64 + 7) + v67) = v66;
    v64[50] += 4;
    if ((*(_BYTE *)(a1 + 84) & 1) != 0 && v12 >= 0x10000)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v54, v55, v56, v57, (uint64_t)v119);
      v75 = *(_DWORD **)(a1 + 8);
      v76 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
      v77 = v76 | (32 * v76) | 0x51000400;
      v78 = v75[50];
      if (v78 + 4 > v75[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 14), v68, v69, v70, v71, v72, v73, v74);
        v78 = v75[50];
      }
      *(_DWORD *)(*((_QWORD *)v75 + 7) + v78) = v77;
      v75[50] += 4;
      v79 = *(_QWORD *)(a1 + 8);
      v80 = (JSC::AssemblerBuffer *)(v79 + 56);
      for (i = *(_DWORD *)(v79 + 200); i < *(_DWORD *)(v79 + 52); *(_DWORD *)(v79 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v79 + 192))
        {
          v112 = v80;
          JSC::AssemblerBuffer::outOfLineGrow(v80, v68, v69, v70, v71, v72, v73, v74);
          v80 = v112;
          i = *(_DWORD *)(v79 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v79 + 56) + i) = -721215457;
        i = *(_DWORD *)(v79 + 200) + 4;
      }
      v82 = i;
      if ((i + 4) > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80, v68, v69, v70, v71, v72, v73, v74);
        v82 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v82) = 335544320;
      *(_DWORD *)(v79 + 200) += 4;
      if (*(_BYTE *)(v79 + 328))
        v83 = 69;
      else
        v83 = 65;
      v114 = i;
      v115 = 0;
      v116 = v83;
      v117 = 15;
      v118 = -1;
      if (i != -1)
      {
        if (HIDWORD(v127) == (_DWORD)v127)
        {
          v84 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v114, v70, v71, v72, v73, v74);
          v86 = *v84;
          v85 = v84 + 1;
          v87 = (char *)v126 + 12 * HIDWORD(v127);
          *(_DWORD *)v87 = v86;
        }
        else
        {
          v85 = &v115;
          v87 = (char *)v126 + 12 * HIDWORD(v127);
          *(_DWORD *)v87 = i;
        }
        *(_QWORD *)(v87 + 4) = *(_QWORD *)v85;
        ++HIDWORD(v127);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v119, *(_QWORD *)(a1 + 8), v69, v70, v71, v72, v73, v74);
      v88 = *(_DWORD **)(a1 + 8);
      v89 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
      v90 = v89 | (32 * v89) | 0x11000400;
      v91 = v88[50];
      if (v91 + 4 > v88[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 + 14), v51, v52, v53, v54, v55, v56, v57);
        v91 = v88[50];
      }
      *(_DWORD *)(*((_QWORD *)v88 + 7) + v91) = v90;
      v88[50] += 4;
    }
    v92 = *(_DWORD **)(a1 + 8);
    v93 = v92[50];
    if (v93 + 4 > v92[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 14), v51, v52, v53, v54, v55, v56, v57);
      v93 = v92[50];
    }
    *(_DWORD *)(*((_QWORD *)v92 + 7) + v93) = v15 | (32 * v15) | 0x11000400;
    v92[50] += 4;
    v94 = *(_QWORD *)(a1 + 8);
    v113 = *(_DWORD *)(v10 + 120 * a2 + 36);
    JSC::MacroAssembler::jump(v94, &v113, v52, v53, v54, v55, v56, v57);
    if (HIDWORD(v127))
    {
      v95 = 0;
      v96 = 0;
      v97 = *(_QWORD *)(a1 + 8);
      v98 = 12 * HIDWORD(v127);
      while (v96 < HIDWORD(v127))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v126 + v95), v97, v23, v24, v25, v26, v27, v28);
        ++v96;
        v95 += 12;
        if (v98 == v95)
          goto LABEL_47;
      }
      __break(0xC471u);
LABEL_71:
      JUMPOUT(0x198EA0A88);
    }
LABEL_47:
    v99 = v126;
    if (v128 != (_BYTE *)v126 && v126 != 0)
    {
      v126 = 0;
      LODWORD(v127) = 0;
      WTF::fastFree((unint64_t)v99, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  v101 = *(_DWORD **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 84) & 1) != 0 && HIWORD(v12))
  {
    v102 = v101[50];
    if (v102 + 4 > v101[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v101 + 14), (uint64_t)v22, v23, v24, v25, v26, v27, v28);
      v102 = v101[50];
    }
    v103 = v15 & 0x1F;
    *(_DWORD *)(*((_QWORD *)v101 + 7) + v102) = v103 | (32 * v103) | 0x531F7800;
    v101[50] += 4;
    v101 = *(_DWORD **)(a1 + 8);
  }
  else
  {
    v103 = v16 & 0x1F;
  }
  v104 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1);
  v105 = v103 << 16;
  if (v104 == 31)
  {
    v107 = 1260413951;
  }
  else
  {
    v106 = v104 & 0x1F;
    v105 |= 32 * v106;
    v107 = v106 | 0x4B000000;
  }
  v108 = v105 | v107;
  v111 = v101[50];
  v110 = v101 + 50;
  v109 = v111;
  if (v111 + 4 > *(v110 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v110 - 36), (uint64_t)v22, v23, v24, v25, v26, v27, v28);
    v109 = *v110;
  }
  *(_DWORD *)(*((_QWORD *)v110 - 18) + v109) = v108;
  *v110 += 4;
  *(_BYTE *)(a1 + 15784) = 1;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackCharacterClassNonGreedy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int *v42;
  int *v43;
  int v44;
  char *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  WTF *v93;
  WTF *v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  _BYTE v102[24];
  WTF *v103;
  uint64_t v104;
  _BYTE v105[24];

  if (*(unsigned int *)(a1 + 316) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198EA0F40);
  }
  v10 = *(_QWORD *)(a1 + 304);
  v11 = *(unsigned int **)(v10 + 120 * a2 + 24);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(v12 + 9);
  v14 = *(char *)(v12 + 10);
  v103 = (WTF *)v105;
  v104 = 2;
  v100 = (WTF *)v102;
  v101 = 2;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link(a1 + 15744, *(void **)(a1 + 8), a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)((8 * v11[11] + 8) >> 3) << 35) | 0x1F, v14, v15, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 1), *(char *)(*(_QWORD *)(a1 + 40) + 2), v20, v21, v22, v23, (uint64_t)&v98);
  v29 = v98;
  if (v98 != -1)
  {
    v30 = HIDWORD(v104);
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v31 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v24, v25, v26, v27, v28);
      v33 = *v31;
      v32 = (uint64_t *)(v31 + 1);
      v29 = v33;
      v30 = HIDWORD(v104);
    }
    else
    {
      v32 = &v99;
    }
    v34 = (char *)v103 + 12 * v30;
    *(_DWORD *)v34 = v29;
    *(_QWORD *)(v34 + 4) = *v32;
    ++HIDWORD(v104);
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v14, v11[2], v25, v26, v27, v28, (uint64_t)&v96);
  v40 = v96;
  if (v96 != -1)
  {
    v41 = HIDWORD(v104);
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v42 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v96, v35, v36, v37, v38, v39);
      v44 = *v42;
      v43 = v42 + 1;
      v40 = v44;
      v41 = HIDWORD(v104);
    }
    else
    {
      v43 = &v97;
    }
    v45 = (char *)v103 + 12 * v41;
    *(_DWORD *)v45 = v40;
    *(_QWORD *)(v45 + 4) = *(_QWORD *)v43;
    ++HIDWORD(v104);
  }
  v46 = *(_DWORD *)(v10 + 120 * a2 + 100);
  v47 = v11[10];
  if (v46 < v47)
  {
    __break(0xC471u);
    goto LABEL_50;
  }
  v48 = v13;
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::readCharacter(a1, v46 - v47, v48, v35, v36, v37, v38, v39);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::matchCharacterClassTermInner(a1, (uint64_t)v11, (uint64_t)&v103, v48, v49, v50, v51, v52);
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::advanceIndexAfterCharacterClassTermMatch(a1, (uint64_t)v11, (uint64_t)&v100, v48, v56, v57, v58, v59);
  }
  else
  {
    v60 = *(_DWORD **)(a1 + 8);
    v61 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
    v62 = v61 | (32 * v61) | 0x11000400;
    v63 = v60[50];
    if (v63 + 4 > v60[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v60 + 14), v53, v54, v55, v56, v57, v58, v59);
      v63 = v60[50];
    }
    *(_DWORD *)(*((_QWORD *)v60 + 7) + v63) = v62;
    v60[50] += 4;
  }
  v64 = *(_DWORD **)(a1 + 8);
  v65 = v64[50];
  if (v65 + 4 > v64[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v64 + 14), v53, v54, v55, v56, v57, v58, v59);
    v65 = v64[50];
  }
  *(_DWORD *)(*((_QWORD *)v64 + 7) + v65) = v14 | (32 * v14) | 0x11000400;
  v64[50] += 4;
  v66 = *(_QWORD *)(a1 + 8);
  v95 = *(_DWORD *)(v10 + 120 * a2 + 36);
  JSC::MacroAssembler::jump(v66, &v95, v54, v55, v56, v57, v58, v59);
  if (HIDWORD(v101))
  {
    v74 = 0;
    v75 = 0;
    v76 = *(_QWORD *)(a1 + 8);
    v77 = 12 * HIDWORD(v101);
    while (v75 < HIDWORD(v101))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v100 + v74), v76, v68, v69, v70, v71, v72, v73);
      ++v75;
      v74 += 12;
      if (v77 == v74)
      {
        v78 = *(_DWORD **)(a1 + 8);
        v79 = *(char *)(*(_QWORD *)(a1 + 40) + 1);
        v80 = v79 | (32 * v79) | 0x51000400;
        v81 = v78[50];
        if (v81 + 4 > v78[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 + 14), (uint64_t)v67, v68, v69, v70, v71, v72, v73);
          v81 = v78[50];
        }
        *(_DWORD *)(*((_QWORD *)v78 + 7) + v81) = v80;
        v78[50] += 4;
        goto LABEL_27;
      }
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x198EA0F30);
  }
LABEL_27:
  if (HIDWORD(v104))
  {
    v82 = 0;
    v83 = 0;
    v84 = *(_QWORD *)(a1 + 8);
    v85 = 12 * HIDWORD(v104);
    do
    {
      if (v83 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x198EA0F38);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v82), v84, v68, v69, v70, v71, v72, v73);
      ++v83;
      v82 += 12;
    }
    while (v85 != v82);
  }
  v86 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1);
  if ((*(_BYTE *)(a1 + 84) & 1) != 0)
  {
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)v11[11] << 35) | 0x1F, (char)v86, v69, v70, v71, v72, v73);
  }
  else
  {
    v87 = *(_DWORD **)(a1 + 8);
    v88 = (v14 & 0x1F) << 16;
    if (v86 == 31)
    {
      v90 = 1260413951;
    }
    else
    {
      v89 = v86 & 0x1F;
      v88 |= 32 * v89;
      v90 = v89 | 0x4B000000;
    }
    v91 = v88 | v90;
    v92 = v87[50];
    if (v92 + 4 > v87[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 14), (uint64_t)v67, v68, v69, v70, v71, v72, v73);
      v92 = v87[50];
    }
    *(_DWORD *)(*((_QWORD *)v87 + 7) + v92) = v91;
    v87[50] += 4;
  }
  *(_BYTE *)(a1 + 15784) = 1;
  v93 = v100;
  if (v102 != (_BYTE *)v100 && v100)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    WTF::fastFree((unint64_t)v93, v67, v68, v69, v70, v71, v72, v73);
  }
  v94 = v103;
  if (v105 != (_BYTE *)v103)
  {
    if (v103)
    {
      v103 = 0;
      LODWORD(v104) = 0;
      WTF::fastFree((unint64_t)v94, v67, v68, v69, v70, v71, v72, v73);
    }
  }
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackBackReference(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  uint64_t *v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  _DWORD *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int *v99;
  int *v100;
  int v101;
  char *v102;
  _DWORD *v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  _BYTE v121[24];

  if (*(unsigned int *)(a1 + 316) <= a2)
    goto LABEL_50;
  v10 = *(_QWORD *)(a1 + 304);
  v11 = v10 + 120 * a2;
  v12 = *(_QWORD *)(v11 + 24);
  JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::link(a1 + 15744, *(void **)(a1 + 8), a3, a4, a5, a6, a7, a8);
  v20 = *(unsigned int *)(v11 + 52);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = v11 + 40;
    v24 = *(_QWORD *)(a1 + 8);
    v25 = 12 * v20;
    while (v22 < *(unsigned int *)(v23 + 12))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v23 + v21), v24, v14, v15, v16, v17, v18, v19);
      ++v22;
      v21 += 12;
      if (v25 == v21)
        goto LABEL_6;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x198EA1424);
  }
LABEL_6:
  v119 = (WTF *)v121;
  v120 = 2;
  v26 = *(unsigned int *)(v12 + 44);
  v27 = *(unsigned __int8 *)(v12 + 2);
  if (v27 == 2)
  {
    v48 = *(char **)(a1 + 40);
    v49 = v48[9];
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, v48[1], v48[2], v16, v17, v18, v19, (uint64_t)&v114);
    v55 = v114;
    if (v114 != -1)
    {
      v56 = HIDWORD(v120);
      if (HIDWORD(v120) == (_DWORD)v120)
      {
        v57 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, (void *)(HIDWORD(v120) + 1), (unint64_t)&v114, v50, v51, v52, v53, v54);
        v59 = *v57;
        v58 = (uint64_t *)(v57 + 1);
        v55 = v59;
        v56 = HIDWORD(v120);
      }
      else
      {
        v58 = &v115;
      }
      v88 = (char *)v119 + 12 * v56;
      *(_DWORD *)v88 = v55;
      *(_QWORD *)(v88 + 4) = *v58;
      ++HIDWORD(v120);
    }
    v89 = ((unint64_t)((8 * v26 + 8) >> 3) << 35) | 0x1F;
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v89, v49, v50, v51, v52, v53, v54);
    v96 = *(unsigned int *)(v12 + 8);
    if ((_DWORD)v96 != -1)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, v49, v96, v92, v93, v94, v95, (uint64_t)&v112);
      v97 = v112;
      if (v112 != -1)
      {
        v98 = HIDWORD(v120);
        if (HIDWORD(v120) == (_DWORD)v120)
        {
          v99 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, (void *)(HIDWORD(v120) + 1), (unint64_t)&v112, v96, v92, v93, v94, v95);
          v101 = *v99;
          v100 = v99 + 1;
          v97 = v101;
          v98 = HIDWORD(v120);
        }
        else
        {
          v100 = &v113;
        }
        v102 = (char *)v119 + 12 * v98;
        *(_DWORD *)v102 = v97;
        *(_QWORD *)(v102 + 4) = *(_QWORD *)v100;
        ++HIDWORD(v120);
      }
    }
    v103 = *(_DWORD **)(a1 + 8);
    v104 = v103[50];
    if (v104 + 4 > v103[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v103 + 14), v90, v91, v96, v92, v93, v94, v95);
      v104 = v103[50];
    }
    *(_DWORD *)(*((_QWORD *)v103 + 7) + v104) = v49 | (32 * v49) | 0x11000400;
    v103[50] += 4;
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v49, v89, v96, v92, v93, v94, v95);
    v86 = *(_QWORD *)(a1 + 8);
    v111 = *(_DWORD *)(v10 + 120 * a2 + 36);
    v87 = (unsigned int *)&v111;
    goto LABEL_36;
  }
  if (v27 == 1)
  {
    v28 = *(_QWORD *)(a1 + 40);
    v29 = *(char *)(v28 + 9);
    v30 = *(_BYTE *)(v28 + 10);
    v31 = 8 * v26;
    v32 = ((unint64_t)((8 * v26 + 8) >> 3) << 35) | 0x1F;
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v32, v29, v15, v16, v17, v18, v19);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, v29, v33, v34, v35, v36, (uint64_t)&v117, v37);
    v43 = v117;
    if (v117 != -1)
    {
      v44 = HIDWORD(v120);
      if (HIDWORD(v120) == (_DWORD)v120)
      {
        v45 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, (void *)(HIDWORD(v120) + 1), (unint64_t)&v117, v38, v39, v40, v41, v42);
        v47 = *v45;
        v46 = (uint64_t *)(v45 + 1);
        v43 = v47;
        v44 = HIDWORD(v120);
      }
      else
      {
        v46 = &v118;
      }
      v60 = (char *)v119 + 12 * v44;
      *(_DWORD *)v60 = v43;
      *(_QWORD *)(v60 + 4) = *v46;
      ++HIDWORD(v120);
    }
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), ((unint64_t)(v31 + 16) << 32) | 0x1F, v30, v38, v39, v40, v41, v42);
    v68 = *(_QWORD *)(a1 + 8);
    v69 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1);
    v70 = (v30 & 0x1F) << 16;
    if (v69 == 31)
    {
      v72 = 1260413951;
    }
    else
    {
      v71 = v69 & 0x1F;
      v70 |= 32 * v71;
      v72 = v71 | 0x4B000000;
    }
    v73 = v70 | v72;
    v76 = *(_DWORD *)(v68 + 200);
    v75 = (unsigned int *)(v68 + 200);
    v74 = v76;
    v77 = v75 - 36;
    if (v76 + 4 > *(v75 - 2))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 - 36), v61, v62, v63, v64, v65, v66, v67);
      v77 = v75 - 36;
      v74 = *v75;
    }
    *(_DWORD *)(*(_QWORD *)v77 + v74) = v73;
    *v75 += 4;
    v78 = *(_DWORD **)(a1 + 8);
    v79 = v78[50];
    if (v79 + 4 > v78[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 + 14), v61, v62, v63, v64, v65, v66, v67);
      v79 = v78[50];
    }
    *(_DWORD *)(*((_QWORD *)v78 + 7) + v79) = v29 | (32 * v29) | 0x51000400;
    v78[50] += 4;
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v29, v32, v63, v64, v65, v66, v67);
    v86 = *(_QWORD *)(a1 + 8);
    v116 = *(_DWORD *)(v10 + 120 * a2 + 36);
    v87 = (unsigned int *)&v116;
LABEL_36:
    JSC::MacroAssembler::jump(v86, v87, v80, v81, v82, v83, v84, v85);
    goto LABEL_37;
  }
  if (*(_BYTE *)(v12 + 2))
    goto LABEL_41;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v26 << 35) | 0x1F, *(char *)(*(_QWORD *)(a1 + 40) + 1), v15, v16, v17, v18, v19);
LABEL_37:
  if (HIDWORD(v120))
  {
    v105 = 0;
    v106 = 0;
    v107 = *(_QWORD *)(a1 + 8);
    v108 = 12 * HIDWORD(v120);
    do
    {
      if (v106 >= HIDWORD(v120))
      {
        __break(0xC471u);
        JUMPOUT(0x198EA142CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v119 + v105), v107, v14, v15, v16, v17, v18, v19);
      ++v106;
      v105 += 12;
    }
    while (v108 != v105);
  }
LABEL_41:
  *(_BYTE *)(a1 + 15784) = 1;
  v109 = v119;
  if (v121 != (_BYTE *)v119 && v119 != 0)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree((unint64_t)v109, v13, v14, v15, v16, v17, v18, v19);
  }
}

_DWORD *WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;
  uint64_t v10;
  int v11;
  _DWORD *v12;

  result = (_DWORD *)WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = v10 + 1;
  v12 = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
  *v12 = *result;
  v12[1] = result[1];
  *(_DWORD *)(a1 + 12) = v11;
  return result;
}

uint64_t WTF::Vector<JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::BacktrackingState::ReturnAddressRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = v10 + 8 * *(unsigned int *)(a1 + 12);
    if (v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v16 = *(_QWORD *)a1;
        return v16 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
      if (v15 < 5)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_34;
      }
      if (!(v15 >> 29))
      {
        v16 = WTF::fastMalloc((WTF *)(8 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v25 = 0;
        do
        {
          v26 = (_DWORD *)(v16 + v25);
          v27 = v10 + v25;
          *v26 = *(_DWORD *)(v10 + v25);
          v26[1] = *(_DWORD *)(v10 + v25 + 4);
          v25 += 8;
        }
        while (v27 + 8 != v11);
        if (a1 + 16 != v10 && v10)
        {
          if (v16 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        return v16 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198EA1660);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 5)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 29)
        goto LABEL_43;
      v22 = WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = (_DWORD *)v22;
    v24 = (_DWORD *)v10;
    do
    {
      *v23 = *v24;
      v23[1] = v24[1];
      v24 += 2;
      v23 += 2;
    }
    while (v24 != (_DWORD *)(v10 + 8 * v21));
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (v22 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::tryReadUnicodeCharImpl<(JSC::Yarr::TryReadUnicodeCharCodeLocation)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _DWORD *v21;
  uint64_t *v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int *v34;
  int *v35;
  int v36;
  char *v37;
  _DWORD *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  _DWORD *v49;
  uint64_t *v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int *v66;
  int *v67;
  int v68;
  _BYTE *v69;
  _DWORD *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  unsigned int v81;
  _DWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  _DWORD *v96;
  uint64_t *v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  int *v113;
  int *v114;
  int v115;
  char *v116;
  _DWORD *v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  WTF *v130;
  WTF *v132;
  WTF *v133;
  unint64_t v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  WTF *v147;
  uint64_t v148;
  _BYTE v149[24];
  WTF *v150;
  uint64_t v151;
  _BYTE v152[24];
  WTF *v153;
  uint64_t v154;
  _BYTE v155[24];
  _BYTE *v156;
  uint64_t v157;
  _BYTE v158[32];

  v156 = v158;
  v157 = 2;
  v153 = (WTF *)v155;
  v154 = 2;
  v150 = (WTF *)v152;
  v151 = 2;
  v147 = (WTF *)v149;
  v148 = 2;
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14), a2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)*(unsigned int *)(*(_QWORD *)(a1 + 40) + 32), a2, *(char *)(*(_QWORD *)(a1 + 40) + 15));
  JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(char *)(*(_QWORD *)(a1 + 40) + 15), v10, v11, v12, v13, (uint64_t)&v145);
  v19 = v145;
  if (v145 != -1)
  {
    v20 = HIDWORD(v157);
    if (HIDWORD(v157) == (_DWORD)v157)
    {
      v21 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, (void *)(HIDWORD(v157) + 1), (unint64_t)&v145, v14, v15, v16, v17, v18);
      v23 = *v21;
      v22 = (uint64_t *)(v21 + 1);
      v19 = v23;
      v20 = HIDWORD(v157);
    }
    else
    {
      v22 = &v146;
    }
    v24 = &v156[12 * v20];
    *(_DWORD *)v24 = v19;
    *(_QWORD *)(v24 + 4) = *v22;
    ++HIDWORD(v157);
  }
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28), v15, v16, v17, v18, (uint64_t)&v143);
  v32 = v143;
  if (v143 != -1)
  {
    v33 = HIDWORD(v154);
    if (HIDWORD(v154) == (_DWORD)v154)
    {
      v34 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v153, (void *)(HIDWORD(v154) + 1), (unint64_t)&v143, v27, v28, v29, v30, v31);
      v36 = *v34;
      v35 = v34 + 1;
      v32 = v36;
      v33 = HIDWORD(v154);
    }
    else
    {
      v35 = &v144;
    }
    v37 = (char *)v153 + 12 * v33;
    *(_DWORD *)v37 = v32;
    *(_QWORD *)(v37 + 4) = *(_QWORD *)v35;
    ++HIDWORD(v154);
  }
  v38 = *(_DWORD **)(a1 + 8);
  v39 = *(char *)(*(_QWORD *)(a1 + 40) + 14);
  v40 = v39 | (32 * v39) | 0x91000800;
  v41 = v38[50];
  if (v41 + 4 > v38[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v38 + 14), v25, v26, v27, v28, v29, v30, v31);
    v41 = v38[50];
  }
  *(_DWORD *)(*((_QWORD *)v38 + 7) + v41) = v40;
  v38[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, *(char *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 16), v28, v29, v30, v31, (uint64_t)&v141);
  v47 = v141;
  if (v141 != -1)
  {
    v48 = HIDWORD(v157);
    if (HIDWORD(v157) == (_DWORD)v157)
    {
      v49 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, (void *)(HIDWORD(v157) + 1), (unint64_t)&v141, v42, v43, v44, v45, v46);
      v51 = *v49;
      v50 = (uint64_t *)(v49 + 1);
      v47 = v51;
      v48 = HIDWORD(v157);
    }
    else
    {
      v50 = &v142;
    }
    v52 = &v156[12 * v48];
    *(_DWORD *)v52 = v47;
    *(_QWORD *)(v52 + 4) = *v50;
    ++HIDWORD(v157);
  }
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 14), v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)*(unsigned int *)(*(_QWORD *)(a1 + 40) + 32), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 15));
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28), v53, v54, v55, v56, (uint64_t)&v139);
  v64 = v139;
  if (v139 != -1)
  {
    v65 = HIDWORD(v157);
    if (HIDWORD(v157) == (_DWORD)v157)
    {
      v66 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, (void *)(HIDWORD(v157) + 1), (unint64_t)&v139, v59, v60, v61, v62, v63);
      v68 = *v66;
      v67 = v66 + 1;
      v64 = v68;
      v65 = HIDWORD(v157);
    }
    else
    {
      v67 = &v140;
    }
    v69 = &v156[12 * v65];
    *(_DWORD *)v69 = v64;
    *(_QWORD *)(v69 + 4) = *(_QWORD *)v67;
    ++HIDWORD(v157);
  }
  v70 = *(_DWORD **)(a1 + 8);
  v71 = v70[50];
  if (v71 + 4 > v70[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v70 + 14), v57, v58, v59, v60, v61, v62, v63);
    v71 = v70[50];
  }
  v72 = a2 & 0x1F;
  *(_DWORD *)(*((_QWORD *)v70 + 7) + v71) = v72 | (32 * v72) | 0x53165400;
  v70[50] += 4;
  JSC::MacroAssemblerARM64::getEffectiveAddress(*(_DWORD **)(a1 + 8), a2 | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14) << 8), 0x2FCA02400, a2, v60, v61, v62, v63);
  v80 = *(_DWORD **)(a1 + 8);
  v81 = v80[50];
  if (v81 + 4 > v80[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v80 + 14), v73, v74, v75, v76, v77, v78, v79);
    v81 = v80[50];
  }
  *(_DWORD *)(*((_QWORD *)v80 + 7) + v81) = -698416192;
  v80[50] += 4;
  v82 = *(_DWORD **)(a1 + 8);
  if (HIDWORD(v154))
  {
    v83 = 0;
    v84 = 0;
    v85 = 12 * HIDWORD(v154);
    while (v84 < HIDWORD(v154))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v153 + v83), (uint64_t)v82, v74, v75, v76, v77, v78, v79);
      ++v84;
      v83 += 12;
      if (v85 == v83)
      {
        v82 = *(_DWORD **)(a1 + 8);
        goto LABEL_32;
      }
    }
    __break(0xC471u);
LABEL_79:
    JUMPOUT(0x198EA1DA4);
  }
LABEL_32:
  v86 = *(char *)(*(_QWORD *)(a1 + 40) + 14);
  v87 = v86 | (32 * v86) | 0xD1000800;
  v88 = v82[50];
  if (v88 + 4 > v82[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v82 + 14), v73, v74, v75, v76, v77, v78, v79);
    v88 = v82[50];
  }
  *(_DWORD *)(*((_QWORD *)v82 + 7) + v88) = v87;
  v82[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 3, *(char *)(*(_QWORD *)(a1 + 40) + 14), **(char **)(a1 + 40), v76, v77, v78, v79, (uint64_t)&v137);
  v94 = v137;
  if (v137 != -1)
  {
    v95 = HIDWORD(v148);
    if (HIDWORD(v148) == (_DWORD)v148)
    {
      v96 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v147, (void *)(HIDWORD(v148) + 1), (unint64_t)&v137, v89, v90, v91, v92, v93);
      v98 = *v96;
      v97 = (uint64_t *)(v96 + 1);
      v94 = v98;
      v95 = HIDWORD(v148);
    }
    else
    {
      v97 = &v138;
    }
    v99 = (char *)v147 + 12 * v95;
    *(_DWORD *)v99 = v94;
    *(_QWORD *)(v99 + 4) = *v97;
    ++HIDWORD(v148);
  }
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 14), v89, v90, v91, v92, v93);
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)*(unsigned int *)(*(_QWORD *)(a1 + 40) + 32), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 14), *(char *)(*(_QWORD *)(a1 + 40) + 15));
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 1, *(char *)(*(_QWORD *)(a1 + 40) + 15), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24), v100, v101, v102, v103, (uint64_t)&v135);
  v111 = v135;
  if (v135 != -1)
  {
    v112 = HIDWORD(v148);
    if (HIDWORD(v148) == (_DWORD)v148)
    {
      v113 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v147, (void *)(HIDWORD(v148) + 1), (unint64_t)&v135, v106, v107, v108, v109, v110);
      v115 = *v113;
      v114 = v113 + 1;
      v111 = v115;
      v112 = HIDWORD(v148);
    }
    else
    {
      v114 = &v136;
    }
    v116 = (char *)v147 + 12 * v112;
    *(_DWORD *)v116 = v111;
    *(_QWORD *)(v116 + 4) = *(_QWORD *)v114;
    ++HIDWORD(v148);
  }
  v117 = *(_DWORD **)(a1 + 8);
  v118 = v72 | 0x12800000;
  v119 = v117[50];
  if (v119 + 4 > v117[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v117 + 14), (uint64_t)v104, v105, v106, v107, v108, v109, v110);
    v119 = v117[50];
  }
  *(_DWORD *)(*((_QWORD *)v117 + 7) + v119) = v118;
  v117[50] += 4;
  v120 = *(_QWORD *)(a1 + 8);
  if (HIDWORD(v157))
  {
    v121 = 0;
    v122 = 0;
    v123 = 12 * HIDWORD(v157);
    do
    {
      if (v122 >= HIDWORD(v157))
      {
        __break(0xC471u);
        JUMPOUT(0x198EA1DACLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v156[v121], v120, v105, v106, v107, v108, v109, v110);
      ++v122;
      v121 += 12;
    }
    while (v123 != v121);
    v120 = *(_QWORD *)(a1 + 8);
  }
  if (HIDWORD(v148))
  {
    v124 = 0;
    v125 = 0;
    v126 = 12 * HIDWORD(v148);
    do
    {
      if (v125 >= HIDWORD(v148))
      {
        __break(0xC471u);
        JUMPOUT(0x198EA1DB4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v147 + v124), v120, v105, v106, v107, v108, v109, v110);
      ++v125;
      v124 += 12;
    }
    while (v126 != v124);
    v120 = *(_QWORD *)(a1 + 8);
  }
  if (HIDWORD(v151))
  {
    v127 = 0;
    v128 = 0;
    v129 = 12 * HIDWORD(v151);
    while (v128 < HIDWORD(v151))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v150 + v127), v120, v105, v106, v107, v108, v109, v110);
      ++v128;
      v127 += 12;
      if (v129 == v127)
        goto LABEL_60;
    }
    __break(0xC471u);
    goto LABEL_79;
  }
LABEL_60:
  v130 = v147;
  if (v149 != (_BYTE *)v147 && v147 != 0)
  {
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v130, v104, v105, v106, v107, v108, v109, v110);
  }
  v132 = v150;
  if (v152 != (_BYTE *)v150 && v150)
  {
    v150 = 0;
    LODWORD(v151) = 0;
    WTF::fastFree((unint64_t)v132, v104, v105, v106, v107, v108, v109, v110);
  }
  v133 = v153;
  if (v155 != (_BYTE *)v153 && v153)
  {
    v153 = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v133, v104, v105, v106, v107, v108, v109, v110);
  }
  v134 = (unint64_t)v156;
  if (v158 != v156)
  {
    if (v156)
    {
      v156 = 0;
      LODWORD(v157) = 0;
      WTF::fastFree(v134, v104, v105, v106, v107, v108, v109, v110);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMooreData &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)(a1 + 16);
  if (a1 + 32 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMooreData &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;

  v9 = (WTF *)*((_QWORD *)this + 2);
  if ((WTF *)((char *)this + 32) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMooreData &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unsigned int v14;

  if (*(_DWORD *)(a1 + 28))
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = (int *)(*(_QWORD *)(a1 + 16) + v4);
      v7 = v6[1];
      v8 = v7 < 4 ? 0 : *(_DWORD *)((v7 & 0xFFFFFFFC) + a2[3] - 4);
      v9 = a2[23];
      v10 = (v7 - v8) + v9;
      if (v9 > v10 || v9 + a2[1] < v10)
        break;
      v12 = *v6;
      if (v12 < 4)
        v13 = 0;
      else
        v13 = *(_DWORD *)((v12 & 0xFFFFFFFC) + a2[3] - 4);
      v14 = v12 - v13;
      JSC::ARM64Assembler::linkPointer(v9, &v14, v10);
      ++v5;
      v4 += 8;
      if (v5 >= *(unsigned int *)(a1 + 28))
        return;
    }
    __break(0xC471u);
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMooreData &)::{lambda(JSC::LinkBuffer &)#2}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  JSC::ExecutableAllocator *v17;
  unsigned int v18;
  unsigned int v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(v3 + 216);
  if (v4 < 4)
    v5 = 0;
  else
    v5 = *(_DWORD *)((v4 & 0xFFFFFFFC) + a2[3] - 4);
  v6 = (v4 - v5);
  v7 = a2[23];
  v8 = v6 + v7;
  if (v7 <= v6 + v7 && v7 + a2[1] >= v8)
  {
    v10 = *(unsigned int *)(v3 + 212);
    if ((_DWORD)v10)
    {
      v11 = *(int **)(v3 + 200);
      v12 = &v11[2 * v10];
      do
      {
        v13 = *v11;
        if (*v11 < 4)
          v14 = 0;
        else
          v14 = *(_DWORD *)((v13 & 0xFFFFFFFC) + a2[3] - 4);
        v15 = v11[1];
        v16 = v13 - v14;
        v17 = (JSC::ExecutableAllocator *)a2[23];
        if ((v15 & 2) != 0)
        {
          if ((v15 & 4) != 0)
          {
            v18 = v16;
            JSC::ARM64Assembler::linkJump(v17, &v18, v8);
          }
          else
          {
            JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v17 + v16 - 4), (unint64_t)v17 + v16 - 4, v8);
          }
        }
        else
        {
          v19 = v16 - 16;
          JSC::ARM64Assembler::linkPointer((uint64_t)v17, &v19, v8);
        }
        v11 += 2;
      }
      while (v11 != v12);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Yarr::wordcharCreate(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v3 = WTF::fastMalloc((WTF *)0x60);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  v4 = (uint64_t *)(v3 + 32);
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_QWORD *)(v3 + 80) = &JSC::Yarr::_wordcharData;
  *(_BYTE *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 89) &= 0xFCu;
  *a1 = v3;
  v24 = 0x3900000030;
  *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * *(unsigned int *)(v3 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 32, 1uLL, (unint64_t)&v24);
  v5 = *(_DWORD *)(v3 + 40);
  v6 = (*(_DWORD *)(v3 + 44) + 1);
  *(_DWORD *)(v3 + 44) = v6;
  v24 = 0x5A00000041;
  if ((_DWORD)v6 == v5)
  {
    v23 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v24);
    v6 = *(unsigned int *)(v3 + 44);
    v7 = *(_QWORD *)(v3 + 32);
    v8 = *v23;
  }
  else
  {
    v7 = *v4;
    v8 = v24;
  }
  *(_QWORD *)(v7 + 8 * v6) = v8;
  v9 = *(_DWORD *)(v3 + 44) + 1;
  *(_DWORD *)(v3 + 44) = v9;
  v10 = *(unsigned int *)(v3 + 28);
  if ((_DWORD)v10 == *(_DWORD *)(v3 + 24))
  {
    v11 = v10 + (v10 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v10 + 1)
      v13 = v10 + 1;
    else
      v13 = v12;
    if (v13 >> 30)
    {
      __break(0xC471u);
      return;
    }
    v14 = *(const void **)(v3 + 16);
    v15 = (void *)WTF::fastMalloc((WTF *)(4 * v13));
    *(_DWORD *)(v3 + 24) = v13;
    *(_QWORD *)(v3 + 16) = v15;
    memcpy(v15, v14, 4 * v10);
    if (v14)
    {
      if (*(const void **)(v3 + 16) == v14)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v10 = *(unsigned int *)(v3 + 28);
    *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v10) = 95;
    v9 = *(_DWORD *)(v3 + 44);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v10) = 95;
  }
  *(_DWORD *)(v3 + 28) = v10 + 1;
  v24 = 0x7A00000061;
  if (v9 == *(_DWORD *)(v3 + 40))
    *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * *(unsigned int *)(v3 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v9 + 1, (unint64_t)&v24);
  else
    *(_QWORD *)(*v4 + 8 * v9) = v24;
  ++*(_DWORD *)(v3 + 44);
  *(_BYTE *)(v3 + 88) = 1;
}

JSC::Yarr::CharacterClass **std::unique_ptr<JSC::Yarr::CharacterClass>::~unique_ptr[abi:sn180100](JSC::Yarr::CharacterClass **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::CharacterClass *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::Yarr::CharacterClass::~CharacterClass(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

void JSC::Yarr::wordUnicodeIgnoreCaseCharCreate(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  const void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = WTF::fastMalloc((WTF *)0x60);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 73) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  v4 = (uint64_t *)(v3 + 32);
  *(_BYTE *)(v3 + 89) &= ~2u;
  *a1 = v3;
  v55 = 0x3900000030;
  *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * *(unsigned int *)(v3 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 32, 1uLL, (unint64_t)&v55);
  v5 = *(_DWORD *)(v3 + 40);
  v6 = (*(_DWORD *)(v3 + 44) + 1);
  *(_DWORD *)(v3 + 44) = v6;
  v55 = 0x5A00000041;
  if ((_DWORD)v6 == v5)
  {
    v9 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v55);
    v6 = *(unsigned int *)(v3 + 44);
    v7 = *(_QWORD *)(v3 + 32);
    v8 = *v9;
  }
  else
  {
    v7 = *v4;
    v8 = v55;
  }
  *(_QWORD *)(v7 + 8 * v6) = v8;
  v10 = *(_DWORD *)(v3 + 44) + 1;
  *(_DWORD *)(v3 + 44) = v10;
  v11 = *(unsigned int *)(v3 + 28);
  if ((_DWORD)v11 == *(_DWORD *)(v3 + 24))
  {
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (v14 >> 30)
      goto LABEL_50;
    v15 = *(const void **)(v3 + 16);
    v16 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
    *(_DWORD *)(v3 + 24) = v14;
    *(_QWORD *)(v3 + 16) = v16;
    memcpy(v16, v15, 4 * v11);
    if (v15)
    {
      if (*(const void **)(v3 + 16) == v15)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
    }
    v11 = *(unsigned int *)(v3 + 28);
    *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v11) = 95;
    v10 = *(_DWORD *)(v3 + 44);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v11) = 95;
  }
  *(_DWORD *)(v3 + 28) = v11 + 1;
  v55 = 0x7A00000061;
  if (v10 == *(_DWORD *)(v3 + 40))
    *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * *(unsigned int *)(v3 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v10 + 1, (unint64_t)&v55);
  else
    *(_QWORD *)(*v4 + 8 * v10) = v55;
  ++*(_DWORD *)(v3 + 44);
  v24 = *(_DWORD *)(v3 + 56);
  v25 = *(unsigned int *)(v3 + 60);
  if ((_DWORD)v25 == v24)
  {
    v28 = v25 + (v25 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v25 + 1)
      v30 = v25 + 1;
    else
      v30 = v29;
    if (v30 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198EA25C4);
    }
    v31 = *(const void **)(v3 + 48);
    v32 = (void *)WTF::fastMalloc((WTF *)(4 * v30));
    *(_DWORD *)(v3 + 56) = v30;
    *(_QWORD *)(v3 + 48) = v32;
    memcpy(v32, v31, 4 * v25);
    if (v31)
    {
      if (*(const void **)(v3 + 48) == v31)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v31, v33, v34, v35, v36, v37, v38, v39);
    }
    v27 = *(unsigned int *)(v3 + 60);
    v26 = *(_DWORD **)(v3 + 48);
    v26[v27] = 383;
    v24 = *(_DWORD *)(v3 + 56);
  }
  else
  {
    v26 = *(_DWORD **)(v3 + 48);
    v26[v25] = 383;
    LODWORD(v27) = v25;
  }
  v40 = (v27 + 1);
  *(_DWORD *)(v3 + 60) = v40;
  if ((_DWORD)v40 != v24)
  {
    v41 = v27 + 2;
    v42 = &v26[v40];
    goto LABEL_47;
  }
  v43 = v40 + (v40 >> 2);
  if (v43 >= 0x10)
    v44 = v43 + 1;
  else
    v44 = 16;
  if (v44 <= v40 + 1)
    v45 = v40 + 1;
  else
    v45 = v44;
  if (v45 >> 30)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x198EA25BCLL);
  }
  v46 = (void *)WTF::fastMalloc((WTF *)(4 * v45));
  *(_DWORD *)(v3 + 56) = v45;
  *(_QWORD *)(v3 + 48) = v46;
  memcpy(v46, v26, 4 * v40);
  if (*(_DWORD **)(v3 + 48) == v26)
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
  }
  WTF::fastFree((unint64_t)v26, v47, v48, v49, v50, v51, v52, v53);
  v54 = *(unsigned int *)(v3 + 60);
  v41 = v54 + 1;
  v42 = (_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v54);
LABEL_47:
  *v42 = 8490;
  *(_DWORD *)(v3 + 60) = v41;
  *(_BYTE *)(v3 + 88) = 1;
}

void JSC::Yarr::nonwordcharCreate(JSC::Yarr *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 80) = &JSC::Yarr::_wordcharData;
  *(_BYTE *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 89) = *(_BYTE *)(v2 + 89) & 0xFC | 1;
  *(_QWORD *)this = v2;
  v10 = 0x2F00000000;
  WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 32, (unint64_t)&v10);
  v5 = *(_DWORD *)(v2 + 40);
  v4 = *(unsigned int *)(v2 + 44);
  v10 = 0x400000003ALL;
  if ((_DWORD)v4 == v5)
  {
    WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v3, (unint64_t)&v10);
    v6 = *(_DWORD *)(v2 + 44);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v4) = v10;
    v6 = *(_DWORD *)(v2 + 44) + 1;
    *(_DWORD *)(v2 + 44) = v6;
  }
  v10 = 0x5E0000005BLL;
  if (v6 == *(_DWORD *)(v2 + 40))
  {
    WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v3, (unint64_t)&v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v6) = v10;
    ++*(_DWORD *)(v2 + 44);
  }
  LODWORD(v10) = 96;
  v7 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v7 == *(_DWORD *)(v2 + 24))
  {
    WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(v2 + 16, &v10);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v7) = 96;
    *(_DWORD *)(v2 + 28) = v7 + 1;
  }
  v10 = 0x7F0000007BLL;
  v8 = *(unsigned int *)(v2 + 44);
  if ((_DWORD)v8 == *(_DWORD *)(v2 + 40))
  {
    WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v3, (unint64_t)&v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v8) = v10;
    ++*(_DWORD *)(v2 + 44);
  }
  v10 = 0x10FFFF00000080;
  v9 = *(unsigned int *)(v2 + 76);
  if ((_DWORD)v9 == *(_DWORD *)(v2 + 72))
  {
    WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v9) = v10;
    ++*(_DWORD *)(v2 + 76);
  }
  *(_BYTE *)(v2 + 88) = 3;
}

void JSC::Yarr::newlineCreate(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = WTF::fastMalloc((WTF *)0x60);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 73) = 0u;
  *(_BYTE *)(v3 + 89) &= ~2u;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x40);
  v5 = (const void *)v4;
  *(_QWORD *)(v3 + 16) = v4;
  v6 = *(unsigned int *)(v3 + 28);
  *(_DWORD *)(v4 + 4 * v6) = 10;
  v7 = (v6 + 1);
  *(_DWORD *)(v3 + 24) = 16;
  *(_DWORD *)(v3 + 28) = v7;
  if ((_DWORD)v6 == 15)
  {
    v17 = v7 + (v7 >> 2) + 1;
    v18 = (void *)WTF::fastMalloc((WTF *)(4 * v17));
    *(_DWORD *)(v3 + 24) = v17;
    *(_QWORD *)(v3 + 16) = v18;
    memcpy(v18, v5, 4 * v7);
    if (*(const void **)(v3 + 16) == v5)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    WTF::fastFree((unint64_t)v5, v19, v20, v21, v22, v23, v24, v25);
    v26 = *(unsigned int *)(v3 + 28);
    v8 = v26 + 1;
    v9 = (_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v26);
  }
  else
  {
    v8 = v6 + 2;
    v9 = (_DWORD *)(v4 + 4 * v7);
  }
  *v9 = 13;
  *(_DWORD *)(v3 + 28) = v8;
  v10 = *(_DWORD *)(v3 + 56);
  v11 = *(unsigned int *)(v3 + 60);
  if ((_DWORD)v11 == v10)
  {
    v27 = v11 + (v11 >> 2);
    if (v27 >= 0x10)
      v28 = v27 + 1;
    else
      v28 = 16;
    if (v28 <= v11 + 1)
      v29 = v11 + 1;
    else
      v29 = v28;
    if (v29 >> 30)
      goto LABEL_33;
    v30 = *(const void **)(v3 + 48);
    v31 = (void *)WTF::fastMalloc((WTF *)(4 * v29));
    *(_DWORD *)(v3 + 56) = v29;
    *(_QWORD *)(v3 + 48) = v31;
    memcpy(v31, v30, 4 * v11);
    if (v30)
    {
      if (*(const void **)(v3 + 48) == v30)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v30, v32, v33, v34, v35, v36, v37, v38);
    }
    v12 = *(_DWORD **)(v3 + 48);
    v10 = *(_DWORD *)(v3 + 56);
    v13 = *(unsigned int *)(v3 + 60);
    v12[v13] = 8232;
  }
  else
  {
    v12 = *(_DWORD **)(v3 + 48);
    v12[v11] = 8232;
    LODWORD(v13) = v11;
  }
  v14 = (v13 + 1);
  *(_DWORD *)(v3 + 60) = v14;
  if ((_DWORD)v14 != v10)
  {
    v15 = v13 + 2;
    v16 = &v12[v14];
    goto LABEL_7;
  }
  v39 = v14 + (v14 >> 2);
  if (v39 >= 0x10)
    v40 = v39 + 1;
  else
    v40 = 16;
  if (v40 <= v14 + 1)
    v41 = v14 + 1;
  else
    v41 = v40;
  if (v41 >> 30)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x198EA29BCLL);
  }
  v42 = (void *)WTF::fastMalloc((WTF *)(4 * v41));
  *(_DWORD *)(v3 + 56) = v41;
  *(_QWORD *)(v3 + 48) = v42;
  memcpy(v42, v12, 4 * v14);
  if (*(_DWORD **)(v3 + 48) == v12)
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
  }
  WTF::fastFree((unint64_t)v12, v43, v44, v45, v46, v47, v48, v49);
  v50 = *(unsigned int *)(v3 + 60);
  v15 = v50 + 1;
  v16 = (_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v50);
LABEL_7:
  *v16 = 8233;
  *(_DWORD *)(v3 + 60) = v15;
  *(_BYTE *)(v3 + 88) = 1;
}

_QWORD *JSC::Yarr::nonspacesCreate(JSC::Yarr *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 80) = &JSC::Yarr::_spacesData;
  *(_BYTE *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 89) = *(_BYTE *)(v2 + 89) & 0xFC | 1;
  *(_QWORD *)this = v2;
  v18 = 0x800000000;
  result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 32, (unint64_t)&v18);
  v6 = *(_DWORD *)(v2 + 40);
  v5 = *(unsigned int *)(v2 + 44);
  v18 = 0x1F0000000ELL;
  if ((_DWORD)v5 == v6)
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v3, (unint64_t)&v18);
    v7 = *(_DWORD *)(v2 + 44);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v5) = v18;
    v7 = *(_DWORD *)(v2 + 44) + 1;
    *(_DWORD *)(v2 + 44) = v7;
  }
  v18 = 0x7F00000021;
  if (v7 == *(_DWORD *)(v2 + 40))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v3, (unint64_t)&v18);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v7) = v18;
    ++*(_DWORD *)(v2 + 44);
  }
  v18 = 0x9F00000080;
  v8 = *(unsigned int *)(v2 + 76);
  if ((_DWORD)v8 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v9 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v8) = v18;
    v9 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v9;
  }
  v18 = 0x167F000000A1;
  if (v9 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v10 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v9) = v18;
    v10 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v10;
  }
  v18 = 0x180D00001681;
  if (v10 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v11 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v10) = v18;
    v11 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v11;
  }
  v18 = 0x1FFF0000180FLL;
  if (v11 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v12 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v11) = v18;
    v12 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v12;
  }
  v18 = 0x20270000200BLL;
  if (v12 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v13 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v12) = v18;
    v13 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v13;
  }
  v18 = 0x202E0000202ALL;
  if (v13 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v14 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v13) = v18;
    v14 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v14;
  }
  v18 = 0x205E00002030;
  if (v14 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v15 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v14) = v18;
    v15 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v15;
  }
  v18 = 0x2FFF00002060;
  if (v15 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v16 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v15) = v18;
    v16 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v16;
  }
  v18 = 0xFEFE00003001;
  if (v16 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
    v17 = *(_DWORD *)(v2 + 76);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v16) = v18;
    v17 = *(_DWORD *)(v2 + 76) + 1;
    *(_DWORD *)(v2 + 76) = v17;
  }
  v18 = 0x10FFFF0000FF00;
  if (v17 == *(_DWORD *)(v2 + 72))
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v18);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v17) = v18;
    ++*(_DWORD *)(v2 + 76);
  }
  *(_BYTE *)(v2 + 88) = 3;
  return result;
}

uint64_t JSC::Yarr::YarrPattern::compile(unsigned __int16 *a1, char *a2, uint64_t a3)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::Yarr::YarrPattern *v16;
  JSC::Yarr::YarrPattern *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  WTF *v28;
  WTF *v29;
  WTF::StringImpl **v30;
  WTF *v32;
  WTF *v33;
  WTF::StringImpl **v34;
  WTF *v36;
  WTF *v37;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t i;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  BOOL v59;
  uint64_t **v60;
  unsigned __int8 **v61;
  unint64_t v62;
  _BYTE *v63;
  int v64;
  unint64_t v65;
  int v66;
  _BYTE *v67;
  JSC::Yarr::YarrPattern *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  char v76;
  JSC::Yarr::PatternDisjunction *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v104;
  int v105;
  unint64_t j;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl **v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::AtomStringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl **v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl **v156;
  WTF::StringImpl *v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF::PrintStream *v166;
  _DWORD *v167;
  unsigned int v168;
  unsigned int v169;
  _QWORD *v170;
  _QWORD *v171;
  JSC::Yarr::YarrPattern *v172;
  _QWORD *v173;
  uint64_t v174;
  int *v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl **v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  JSC::Yarr::CharacterClassConstructor *v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  WTF::StringImpl *v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  __int16 v216;
  __int128 v217;
  WTF::StringImpl **v218;
  WTF::StringImpl **v219;
  WTF::StringImpl **v220;
  WTF::StringImpl **v221;
  WTF::StringImpl *v222;
  unsigned __int8 v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  char *v235;
  uint64_t v236;
  JSC::Yarr::YarrPattern *v237[2];
  _BYTE v238[4];
  _BOOL4 v239;
  WTF *v240[2];
  WTF *v241[2];
  WTF *v242[2];
  WTF *v243[2];
  WTF *v244[2];
  _BYTE *v245;
  WTF *v246[2];
  WTF *v247[2];
  unint64_t v248;
  unsigned __int8 v249;
  WTF *v250;
  _QWORD v251[2];
  _BYTE v252[12];
  __int128 v253;
  __int128 v254;
  __int16 v255;
  WTF *v256;
  uint64_t v257;
  _BYTE v258[16];
  WTF *v259;
  WTF *v260;
  uint64_t v261;
  uint64_t v262;
  WTF *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  WTF::StringImpl *v267;

  v235 = a2;
  v237[0] = (JSC::Yarr::YarrPattern *)a1;
  v5 = a1[1];
  v238[0] = (v5 & 4) != 0;
  if ((v5 & 0x20) != 0)
    v6 = 1;
  else
    v6 = (v5 >> 5) & 2;
  v238[1] = 0;
  v238[2] = v6;
  v238[3] = 0;
  v239 = v6 != 0;
  *(_OWORD *)v240 = 0u;
  *(_OWORD *)v241 = 0u;
  *(_OWORD *)v242 = 0u;
  *(_OWORD *)v243 = 0u;
  *(_OWORD *)v244 = 0u;
  *(_OWORD *)v246 = 0u;
  *(_OWORD *)v247 = 0u;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7)
    v7 = WTF::Thread::initializeCurrentTLS(0);
  v8 = *(_QWORD *)(v7 + 24) + 0x10000;
  v249 = 0;
  v250 = 0;
  v251[0] = 0;
  *(_QWORD *)((char *)v251 + 6) = 0;
  v248 = v8;
  v245 = v238;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v252 = v9;
  *((_QWORD *)v237[0] + 2) = v9;
  JSC::Yarr::PatternDisjunction::addNewAlternative(v9, 1, 0);
  v237[1] = v16;
  v17 = v237[0];
  v19 = *((_DWORD *)v237[0] + 8);
  v18 = *((unsigned int *)v237[0] + 9);
  v236 = a3;
  if ((_DWORD)v18 == v19)
  {
    v85 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v237[0] + 24, v18 + 1, (unint64_t)v252);
    v87 = *((unsigned int *)v237[0] + 9);
    v88 = *((_QWORD *)v237[0] + 3);
    v89 = *v85;
    *v85 = 0;
    *(_QWORD *)(v88 + 8 * v87) = v89;
    v90 = *(_QWORD *)v252;
    *((_DWORD *)v17 + 9) = v87 + 1;
    *(_QWORD *)v252 = 0;
    if (v90)
    {
      v91 = *(unsigned int *)(v90 + 12);
      if ((_DWORD)v91)
      {
        v92 = *(unint64_t **)v90;
        v93 = 8 * v91;
        do
        {
          v94 = *v92;
          *v92 = 0;
          if (v94)
          {
            v95 = *(_QWORD *)v94;
            if (*(_QWORD *)v94)
            {
              *(_QWORD *)v94 = 0;
              *(_DWORD *)(v94 + 8) = 0;
              WTF::fastFree(v95, v10, (uint64_t)v11, v12, v86, v13, v14, v15);
            }
            WTF::fastFree(v94, v10, (uint64_t)v11, v12, v86, v13, v14, v15);
          }
          ++v92;
          v93 -= 8;
        }
        while (v93);
      }
      v96 = *(_QWORD *)v90;
      if (*(_QWORD *)v90)
      {
        *(_QWORD *)v90 = 0;
        *(_DWORD *)(v90 + 8) = 0;
        WTF::fastFree(v96, v10, (uint64_t)v11, v12, v86, v13, v14, v15);
      }
      WTF::fastFree(v90, v10, (uint64_t)v11, v12, v86, v13, v14, v15);
      a3 = v236;
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)v237[0] + 3) + 8 * v18) = v9;
    *((_DWORD *)v17 + 9) = v18 + 1;
  }
  v20 = a1[1];
  if ((v20 & 0x20) != 0)
    v21 = 1;
  else
    v21 = (v20 >> 5) & 2;
  if ((a3 & 0xFF00000000) == 0)
  {
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::Parser((uint64_t)v252, (uint64_t)v237, (uint64_t)v235, a3, v21, v13, v14, v15);
    v22 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parse((uint64_t)v252, v130, v131, v132, v133, v134, v135, v136);
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::~Parser((uint64_t)v252, v137, v138, v139, v140, v141, v142, v143);
    goto LABEL_46;
  }
  *(_QWORD *)v252 = v237;
  v252[8] = 0;
  *(_QWORD *)&v253 = v235;
  *((_QWORD *)&v253 + 1) = a3;
  LOBYTE(v254) = v21;
  *(_QWORD *)((char *)&v254 + 4) = 0xFFFFFFFFLL;
  HIDWORD(v254) = 0;
  v22 = 1;
  v255 = 1;
  v256 = (WTF *)v258;
  v257 = 16;
  v259 = 0;
  v260 = (WTF *)&v262;
  v262 = 0;
  v263 = (WTF *)&v265;
  v261 = 0x100000001;
  v265 = 0;
  v266 = 0;
  v264 = 0x100000001;
  if (a3 <= 0x100000)
  {
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseTokens((_QWORD **)v252, (uint64_t)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
    if (v252[8])
      goto LABEL_18;
    v23 = HIDWORD(v254);
    v24 = DWORD2(v254);
    if (HIDWORD(v254) > DWORD2(v254))
    {
      if (v254 - 1 <= 1)
      {
        v193 = 20;
LABEL_250:
        v252[8] = v193;
        goto LABEL_18;
      }
      DWORD1(v254) = DWORD2(v254);
    }
    if (HIBYTE(v255) && v259 && *((_DWORD *)v259 - 3))
    {
      v193 = 21;
      goto LABEL_250;
    }
    v25 = v266;
    if (v266 && *((_DWORD *)v266 - 3))
    {
      v233 = HIDWORD(v254);
      v234 = DWORD2(v254);
      if (!v259 || !*((_DWORD *)v259 - 3))
      {
LABEL_159:
        if (v254 - 1 < 2 || v259 && *((_DWORD *)v259 - 3))
        {
          v252[8] = 21;
          goto LABEL_18;
        }
        LOBYTE(v255) = 0;
        goto LABEL_258;
      }
      v218 = (WTF::StringImpl **)WTF::HashSet<JSC::JSArrayBufferView *,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTableTraits>::begin(v266);
      v219 = (WTF::StringImpl **)&v25[*((unsigned int *)v25 - 1)];
      v23 = v233;
      v24 = v234;
      if (v219 != v218)
      {
        v220 = v218;
        v221 = (WTF::StringImpl **)v10;
        while (1)
        {
          v222 = *v220;
          if (*v220)
            *(_DWORD *)v222 += 2;
          v267 = v222;
          v223 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(v259, &v267, v11);
          v267 = 0;
          if (v222)
          {
            if (*(_DWORD *)v222 == 2)
            {
              WTF::StringImpl::~StringImpl(v222, (WTF::AtomStringImpl *)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
              WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
            }
            else
            {
              *(_DWORD *)v222 -= 2;
            }
          }
          if ((v223 & 1) == 0)
            goto LABEL_159;
          while (++v220 != v221)
          {
            if ((unint64_t)*v220 + 1 > 1)
              goto LABEL_294;
          }
          v220 = v221;
LABEL_294:
          if (v220 == v219)
          {
            v23 = v233;
            v24 = v234;
            break;
          }
        }
      }
    }
    if (v23 <= v24)
      goto LABEL_18;
LABEL_258:
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::resetForReparsing((uint64_t)v252, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseTokens((_QWORD **)v252, v194, v195, v196, v197, v198, v199, v200);
LABEL_18:
    v22 = v252[8];
    v26 = v266;
    if (v266)
    {
      v155 = *((unsigned int *)v266 - 1);
      if ((_DWORD)v155)
      {
        v156 = (WTF::StringImpl **)v266;
        do
        {
          v157 = *v156;
          if (*v156 != (WTF::StringImpl *)-1)
          {
            *v156 = 0;
            if (v157)
            {
              if (*(_DWORD *)v157 == 2)
              {
                WTF::StringImpl::~StringImpl(v157, (WTF::AtomStringImpl *)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
                WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
              }
              else
              {
                *(_DWORD *)v157 -= 2;
              }
            }
          }
          ++v156;
          --v155;
        }
        while (v155);
      }
      WTF::fastFree((unint64_t)(v26 - 2), v10, (uint64_t)v11, v12, v21, v13, v14, v15);
    }
    v27 = HIDWORD(v264);
    v28 = v263;
    if (!HIDWORD(v264))
      goto LABEL_24;
    goto LABEL_20;
  }
  v28 = (WTF *)&v265;
  v27 = 1;
LABEL_20:
  v29 = (WTF *)((char *)v28 + 8 * v27);
  do
  {
    v30 = *(WTF::StringImpl ***)v28;
    if (*(_QWORD *)v28)
    {
      v108 = *((unsigned int *)v30 - 1);
      if ((_DWORD)v108)
      {
        v109 = *(WTF::StringImpl ***)v28;
        do
        {
          v110 = *v109;
          if (*v109 != (WTF::StringImpl *)-1)
          {
            *v109 = 0;
            if (v110)
            {
              if (*(_DWORD *)v110 == 2)
              {
                WTF::StringImpl::~StringImpl(v110, (WTF::AtomStringImpl *)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
                WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
              }
              else
              {
                *(_DWORD *)v110 -= 2;
              }
            }
          }
          ++v109;
          --v108;
        }
        while (v108);
      }
      WTF::fastFree((unint64_t)(v30 - 2), v10, (uint64_t)v11, v12, v21, v13, v14, v15);
    }
    v28 = (WTF *)((char *)v28 + 8);
  }
  while (v28 != v29);
  v28 = v263;
LABEL_24:
  if (&v265 != (uint64_t *)v28 && v28 != 0)
  {
    v263 = 0;
    LODWORD(v264) = 0;
    WTF::fastFree((unint64_t)v28, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v32 = v260;
  if (HIDWORD(v261))
  {
    v33 = (WTF *)((char *)v260 + 8 * HIDWORD(v261));
    do
    {
      v34 = *(WTF::StringImpl ***)v32;
      if (*(_QWORD *)v32)
      {
        v119 = *((unsigned int *)v34 - 1);
        if ((_DWORD)v119)
        {
          v120 = *(WTF::StringImpl ***)v32;
          do
          {
            v121 = *v120;
            if (*v120 != (WTF::StringImpl *)-1)
            {
              *v120 = 0;
              if (v121)
              {
                if (*(_DWORD *)v121 == 2)
                {
                  WTF::StringImpl::~StringImpl(v121, (WTF::AtomStringImpl *)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
                  WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
                }
                else
                {
                  *(_DWORD *)v121 -= 2;
                }
              }
            }
            ++v120;
            --v119;
          }
          while (v119);
        }
        WTF::fastFree((unint64_t)(v34 - 2), v10, (uint64_t)v11, v12, v21, v13, v14, v15);
      }
      v32 = (WTF *)((char *)v32 + 8);
    }
    while (v32 != v33);
    v32 = v260;
  }
  if (&v262 != (uint64_t *)v32 && v32 != 0)
  {
    v260 = 0;
    LODWORD(v261) = 0;
    WTF::fastFree((unint64_t)v32, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v36 = v259;
  if (v259)
  {
    v144 = *((unsigned int *)v259 - 1);
    if ((_DWORD)v144)
    {
      v145 = (WTF::StringImpl **)v259;
      do
      {
        v146 = *v145;
        if (*v145 != (WTF::StringImpl *)-1)
        {
          *v145 = 0;
          if (v146)
          {
            if (*(_DWORD *)v146 == 2)
            {
              WTF::StringImpl::~StringImpl(v146, (WTF::AtomStringImpl *)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
              WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
            }
            else
            {
              *(_DWORD *)v146 -= 2;
            }
          }
        }
        ++v145;
        --v144;
      }
      while (v144);
    }
    WTF::fastFree((unint64_t)v36 - 16, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v37 = v256;
  if (v258 != (_BYTE *)v256 && v256 != 0)
  {
    v256 = 0;
    LODWORD(v257) = 0;
    WTF::fastFree((unint64_t)v37, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  a3 = v236;
LABEL_46:
  if (v249)
  {
    v22 = v249;
    goto LABEL_48;
  }
  if ((_DWORD)v22)
    goto LABEL_48;
  v48 = (unint64_t)v237[0];
  if (!*((_DWORD *)v237[0] + 1))
  {
    v49 = *((_QWORD *)v237[0] + 2);
    v50 = *(unsigned int *)(v49 + 12);
    if ((_DWORD)v50)
    {
      for (i = 0; i < v50; ++i)
      {
        v52 = *(uint64_t **)(*(_QWORD *)v49 + 8 * i);
        v53 = *((unsigned int *)v52 + 3);
        if ((_DWORD)v53)
        {
          v54 = v53 - 1;
          v55 = *v52;
          v56 = (unsigned __int8 *)(v55 + 48 * v54);
          v57 = *v56;
          v58 = v56[2];
          v59 = v57 == 7 && v58 == 1;
          if (v59
            && !*(_DWORD *)(v55 + 48 * v54 + 4)
            && *(_DWORD *)(v55 + 48 * v54 + 8) == -1
            && (*(_BYTE *)(v55 + 48 * v54 + 1) & 1) == 0)
          {
            *(_BYTE *)(v55 + 48 * v54 + 32) |= 2u;
            v50 = *(unsigned int *)(v49 + 12);
          }
        }
      }
      v48 = (unint64_t)v237[0];
    }
  }
  v60 = *(uint64_t ***)(v48 + 16);
  if (*((_DWORD *)v60 + 3) == 1)
  {
    if ((*(_WORD *)(v48 + 2) & 0x10) != 0)
      v48 = (unint64_t)JSC::Yarr::YarrPattern::anyCharacterClass((JSC::Yarr::YarrPattern *)v48);
    else
      JSC::Yarr::YarrPattern::newlineCharacterClass((JSC::Yarr::YarrPattern *)v48);
    if (!*((_DWORD *)v60 + 3))
      goto LABEL_302;
    v61 = (unsigned __int8 **)**v60;
    v62 = *((unsigned int *)v61 + 3);
    if (v62 < 3)
      goto LABEL_86;
    v63 = *v61;
    v64 = **v61;
    if (**v61)
    {
      v65 = 1;
      v66 = **v61;
      v67 = *v61;
    }
    else
    {
      v67 = v63 + 48;
      v66 = v63[48];
      v65 = 2;
    }
    if (v66 != 4 || *((_QWORD *)v67 + 2) != v48 || *((_DWORD *)v67 + 1) || *((_DWORD *)v67 + 2) != -1)
      goto LABEL_86;
    v97 = v63[48 * v62 - 48];
    v98 = v97 == 1 ? v62 - 2 : v62 - 1;
    if (v98 >= v62)
    {
LABEL_302:
      __break(0xC471u);
      JUMPOUT(0x198EA3BE8);
    }
    v99 = &v63[48 * v98];
    v100 = *v99;
    v101 = *((_QWORD *)v99 + 2);
    v102 = v99[2];
    v104 = v100 == 4 && v101 == v48 && v102 == 1;
    if (v104 && !*(_DWORD *)&v63[48 * v98 + 4])
    {
      v105 = *(_DWORD *)&v63[48 * v98 + 8];
      if (v65 < v98 && v105 == -1)
      {
        v48 = JSC::Yarr::YarrPatternConstructor::containsCapturingTerms(**v60, v65, v98, v12);
        if ((v48 & 1) == 0)
        {
          for (j = *((unsigned int *)v61 + 3) - 1; j >= v98; --j)
            WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)v61, j);
          v213 = v65 - 1;
          do
            v48 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)v61, v213--);
          while (v213 != -1);
          strcpy(v252, "\t");
          LOBYTE(v253) = (v64 == 0) | (2 * (v97 == 1));
          v252[2] = 0;
          *(_QWORD *)&v252[4] = 0x100000001;
          v214 = *((_DWORD *)v61 + 3);
          if (v214 == *((_DWORD *)v61 + 2))
          {
            WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>((uint64_t)v61, (unint64_t)v252);
          }
          else
          {
            v215 = (uint64_t)&(*v61)[48 * v214];
            v216 = *(_WORD *)v252;
            *(_BYTE *)(v215 + 2) = v252[2];
            *(_WORD *)v215 = v216;
            *(_QWORD *)(v215 + 4) = 0x100000001;
            v217 = v254;
            *(_OWORD *)(v215 + 16) = v253;
            *(_OWORD *)(v215 + 32) = v217;
            ++*((_DWORD *)v61 + 3);
          }
          a3 = v236;
          *(_BYTE *)v237[0] &= ~2u;
        }
      }
    }
  }
LABEL_86:
  if ((*(_BYTE *)v237[0] & 2) != 0 && (*((_WORD *)v237[0] + 1) & 8) == 0)
  {
    v77 = (JSC::Yarr::PatternDisjunction *)*((_QWORD *)v237[0] + 2);
    JSC::Yarr::YarrPatternConstructor::copyDisjunction((JSC::Yarr::YarrPatternConstructor *)v237, v77, 1, v12, v21, v13, v14, v15);
    v78 = v48;
    LODWORD(v79) = *((_DWORD *)v77 + 3);
    if ((_DWORD)v79)
    {
      v80 = 0;
      do
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v77 + 8 * v80++) + 37) |= 1u;
        v79 = *((unsigned int *)v77 + 3);
      }
      while (v80 < v79);
    }
    if (v48)
    {
      if (*(_DWORD *)(v48 + 12))
      {
        v81 = 0;
        do
        {
          v82 = *(_QWORD *)(*(_QWORD *)v78 + 8 * v81);
          *(_QWORD *)(*(_QWORD *)v78 + 8 * v81) = 0;
          if ((_DWORD)v79 == *((_DWORD *)v77 + 2))
          {
            WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v79 + 1);
            v79 = *((unsigned int *)v77 + 3);
            v83 = (_QWORD *)(*(_QWORD *)v77 + 8 * v79);
          }
          else
          {
            v83 = (_QWORD *)(*(_QWORD *)v77 + 8 * v79);
          }
          *v83 = v82;
          LODWORD(v79) = v79 + 1;
          *((_DWORD *)v77 + 3) = v79;
          ++v81;
          v84 = *(unsigned int *)(v78 + 12);
        }
        while (v81 < v84);
        a3 = v236;
        if (!*(_DWORD *)(v78 + 8))
          goto LABEL_87;
        if ((_DWORD)v84)
        {
          WTF::VectorDestructor<true,std::unique_ptr<JSC::Yarr::ByteDisjunction>>::destruct(*(unint64_t **)v78, (unint64_t *)(*(_QWORD *)v78 + 8 * v84), (uint64_t)v11, v12, v21, v13, v14, v15);
          *(_DWORD *)(v78 + 12) = 0;
        }
      }
      else if (!*(_DWORD *)(v48 + 8))
      {
        goto LABEL_87;
      }
      v48 = *(_QWORD *)v78;
      if (*(_QWORD *)v78)
      {
        *(_QWORD *)v78 = 0;
        *(_DWORD *)(v78 + 8) = 0;
        WTF::fastFree(v48, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
      }
    }
  }
LABEL_87:
  v22 = v249;
  if (!v249)
  {
    if ((unint64_t)&v232 < v248)
    {
      v22 = 26;
    }
    else
    {
      v68 = v237[0];
      v69 = *((_QWORD *)v237[0] + 2);
      if (*(_DWORD *)(v69 + 12))
      {
        v70 = 0;
        v71 = 0;
        v72 = -1;
        LOBYTE(v73) = 1;
        while (1)
        {
          v74 = *(_QWORD *)(*(_QWORD *)v69 + 8 * v70);
          *(_DWORD *)v252 = 0;
          v48 = JSC::Yarr::YarrPatternConstructor::setupAlternativeOffsets(v237, (uint64_t *)v74, 0, 0, (unsigned int *)v252);
          if ((_DWORD)v48)
            break;
          v75 = *(_DWORD *)(v74 + 24);
          if (v75 < v72)
            v72 = *(_DWORD *)(v74 + 24);
          if (v71 <= *(_DWORD *)v252)
            v71 = *(_DWORD *)v252;
          v76 = *(_BYTE *)(v74 + 37);
          if ((v75 & 0x80000000) != 0)
            *(_BYTE *)v237[0] |= 8u;
          v73 &= (v76 & 2) >> 1;
          if (++v70 >= (unint64_t)*(unsigned int *)(v69 + 12))
          {
            a3 = v236;
            v68 = v237[0];
            goto LABEL_100;
          }
        }
        v22 = v48;
      }
      else
      {
        v71 = 0;
        LOBYTE(v73) = 1;
        v72 = -1;
LABEL_100:
        *(_BYTE *)(v69 + 32) = v73;
        *(_DWORD *)(v69 + 24) = v72;
        *(_DWORD *)(v69 + 28) = v71;
        if ((*(_BYTE *)v68 & 0x20) != 0)
        {
          v167 = (_DWORD *)((char *)v68 + 100);
          v168 = *((_DWORD *)v68 + 25);
          v169 = *((_DWORD *)v68 + 1);
          if (v168 <= v169)
          {
            a3 = v236;
            do
            {
              v201 = (_QWORD *)((char *)v68 + 88);
              *(_QWORD *)v252 = 0;
              if (v168 == *((_DWORD *)v68 + 24))
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)v201, (unint64_t)v252);
              }
              else
              {
                *(_QWORD *)(*v201 + 8 * v168) = 0;
                *v167 = v168 + 1;
              }
              v202 = *(WTF::StringImpl **)v252;
              *(_QWORD *)v252 = 0;
              if (v202)
              {
                if (*(_DWORD *)v202 == 2)
                {
                  WTF::StringImpl::~StringImpl(v202, (WTF::AtomStringImpl *)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
                  WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
                }
                else
                {
                  *(_DWORD *)v202 -= 2;
                }
              }
              v68 = v237[0];
              v167 = (_DWORD *)((char *)v237[0] + 100);
              v168 = *((_DWORD *)v237[0] + 25);
              v169 = *((_DWORD *)v237[0] + 1);
            }
            while (v168 <= v169);
          }
          v170 = (_QWORD *)*((_QWORD *)v68 + 13);
          v48 = (unint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v170);
          if (v170)
            v171 = &v170[3 * *((unsigned int *)v170 - 1)];
          else
            v171 = 0;
          while ((_QWORD *)v48 != v171)
          {
            if (*(_DWORD *)(v48 + 20) == 2)
              *(_DWORD *)(v48 + 20) = 1;
            while (1)
            {
              v48 += 24;
              if ((void *)v48 == v10)
                break;
              if ((unint64_t)(*(_QWORD *)v48 + 1) > 1)
                goto LABEL_220;
            }
            v48 = (unint64_t)v10;
LABEL_220:
            ;
          }
          if (*((_DWORD *)v68 + 3))
          {
            *(_DWORD *)v252 = 0;
            WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)v68 + 112, v252, v169 + 1, v12, v21, v13, v14, v15);
            v172 = v237[0];
            v173 = (_QWORD *)*((_QWORD *)v237[0] + 13);
            v48 = (unint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v173);
            v174 = v173 ? (uint64_t)&v173[3 * *((unsigned int *)v173 - 1)] : 0;
            a3 = v236;
            while (v48 != v174)
            {
              if (*(_DWORD *)(v48 + 20) >= 3u)
              {
                v175 = *(int **)(v48 + 8);
                v176 = *v175;
                v177 = 1;
                do
                {
                  v178 = v175[v177];
                  if (*((_DWORD *)v172 + 31) <= v178)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198EA3BF0);
                  }
                  *(_DWORD *)(*((_QWORD *)v172 + 14) + 4 * v178) = v176;
                  ++v177;
                }
                while (v177 < *(unsigned int *)(v48 + 20));
              }
              while (1)
              {
                v48 += 24;
                if ((void *)v48 == v10)
                  break;
                if ((unint64_t)(*(_QWORD *)v48 + 1) > 1)
                  goto LABEL_233;
              }
              v48 = (unint64_t)v10;
LABEL_233:
              ;
            }
          }
        }
        if (BYTE4(qword_1ECF4C6B8))
        {
          v166 = (WTF::PrintStream *)WTF::dataFile((WTF *)v48);
          JSC::Yarr::YarrPattern::dumpPattern((uint64_t)a1, v166, v235, a3);
        }
        v22 = 0;
      }
    }
  }
LABEL_48:
  v39 = v250;
  if (v250)
  {
    v250 = 0;
    LODWORD(v251[0]) = 0;
    WTF::fastFree((unint64_t)v39, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  if (HIDWORD(v247[1]))
  {
    v179 = 24 * HIDWORD(v247[1]);
    v180 = (WTF::StringImpl **)((char *)v247[0] + 16);
    do
    {
      v181 = *v180;
      *v180 = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2)
        {
          WTF::StringImpl::~StringImpl(v181, (WTF::AtomStringImpl *)v10, (uint64_t)v11, v12, v21, v13, v14, v15);
          WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
        }
        else
        {
          *(_DWORD *)v181 -= 2;
        }
      }
      v180 += 3;
      v179 -= 24;
    }
    while (v179);
  }
  v40 = v247[0];
  if (v247[0])
  {
    v247[0] = 0;
    LODWORD(v247[1]) = 0;
    WTF::fastFree((unint64_t)v40, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  if (HIDWORD(v246[1]))
  {
    v190 = v246[0];
    v191 = 88 * HIDWORD(v246[1]);
    do
    {
      JSC::Yarr::CharacterClassConstructor::~CharacterClassConstructor(v190, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
      v190 = (JSC::Yarr::CharacterClassConstructor *)(v192 + 88);
      v191 -= 88;
    }
    while (v191);
  }
  v41 = v246[0];
  if (v246[0])
  {
    v246[0] = 0;
    LODWORD(v246[1]) = 0;
    WTF::fastFree((unint64_t)v41, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v42 = v244[0];
  if (v244[0])
  {
    v244[0] = 0;
    LODWORD(v244[1]) = 0;
    WTF::fastFree((unint64_t)v42, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v43 = v243[0];
  if (v243[0])
  {
    v243[0] = 0;
    LODWORD(v243[1]) = 0;
    WTF::fastFree((unint64_t)v43, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v44 = v242[0];
  if (v242[0])
  {
    v242[0] = 0;
    LODWORD(v242[1]) = 0;
    WTF::fastFree((unint64_t)v44, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v45 = v241[0];
  if (v241[0])
  {
    v241[0] = 0;
    LODWORD(v241[1]) = 0;
    WTF::fastFree((unint64_t)v45, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  v46 = v240[0];
  if (HIDWORD(v240[1]))
  {
    v211 = 16 * HIDWORD(v240[1]);
    do
    {
      v212 = *(_QWORD *)v46;
      if (*(_QWORD *)v46)
      {
        *(_QWORD *)v46 = 0;
        *((_DWORD *)v46 + 2) = 0;
        WTF::fastFree(v212, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
      }
      v46 = (WTF *)((char *)v46 + 16);
      v211 -= 16;
    }
    while (v211);
    v46 = v240[0];
  }
  if (v46)
  {
    v240[0] = 0;
    LODWORD(v240[1]) = 0;
    WTF::fastFree((unint64_t)v46, v10, (uint64_t)v11, v12, v21, v13, v14, v15);
  }
  return v22;
}

uint64_t JSC::Yarr::YarrPattern::YarrPattern(uint64_t a1, char *a2, uint64_t a3, __int16 a4, _BYTE *a5)
{
  *(_BYTE *)a1 &= 0x80u;
  *(_WORD *)(a1 + 2) = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *a5 = JSC::Yarr::YarrPattern::compile((unsigned __int16 *)a1, a2, a3);
  return a1;
}

{
  *(_BYTE *)a1 &= 0x80u;
  *(_WORD *)(a1 + 2) = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *a5 = JSC::Yarr::YarrPattern::compile((unsigned __int16 *)a1, a2, a3);
  return a1;
}

uint64_t JSC::Yarr::dumpCharacterClass(JSC::Yarr *this, WTF::PrintStream *a2, const void **a3, JSC::Yarr::CharacterClass *a4)
{
  JSC::Yarr::YarrPattern *v7;
  JSC::Yarr::YarrPattern *v8;
  JSC::Yarr::YarrPattern *v9;
  JSC::Yarr::YarrPattern *v10;
  JSC::Yarr::YarrPattern *v11;
  JSC::Yarr::YarrPattern *v12;
  WTF::PrintStream *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::PrintStream *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::PrintStream *v64;
  uint64_t v66;
  int v67;
  int v68;
  void *v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  void *v75;
  int v76;
  int v77;
  _QWORD v78[2];
  _QWORD v79[2];
  char v80;

  if (!a2)
  {
LABEL_12:
    v80 = 0;
    v79[0] = &v80;
    v79[1] = this;
    v78[0] = &v80;
    v78[1] = this;
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
    WTF::PrintStream::printf(v13, "%s", "[");
    (*(void (**)(JSC::Yarr *))(*(_QWORD *)this + 40))(this);
    v14 = *((unsigned int *)a3 + 7);
    v75 = 0;
    v76 = 0;
    v77 = v14;
    if ((_DWORD)v14)
    {
      if (v14 >> 30)
      {
        __break(0xC471u);
        goto LABEL_50;
      }
      v15 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
      v76 = v14;
      v75 = v15;
      memcpy(v15, a3[2], 4 * *((unsigned int *)a3 + 7));
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_0::operator()((uint64_t)v79, "ASCII", (uint64_t)&v75);
      WTF::fastFree((unint64_t)v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_0::operator()((uint64_t)v79, "ASCII", (uint64_t)&v75);
    }
    v25 = *((unsigned int *)a3 + 11);
    v72 = 0;
    v73 = 0;
    v74 = v25;
    if ((_DWORD)v25)
    {
      if (v25 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA418CLL);
      }
      v26 = WTF::fastMalloc((WTF *)(8 * v25));
      v27 = v26;
      v73 = v25;
      v72 = v26;
      v28 = *((unsigned int *)a3 + 11);
      if ((_DWORD)v28)
      {
        v29 = (uint64_t *)a3[4];
        v30 = 8 * v28;
        v31 = (_QWORD *)v26;
        do
        {
          v32 = *v29++;
          *v31++ = v32;
          v30 -= 8;
        }
        while (v30);
      }
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_1::operator()((uint64_t)v78, "ASCII", (unsigned int *)&v72);
      WTF::fastFree(v27, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_1::operator()((uint64_t)v78, "ASCII", (unsigned int *)&v72);
    }
    v40 = *((unsigned int *)a3 + 15);
    v69 = 0;
    v70 = 0;
    v71 = v40;
    if ((_DWORD)v40)
    {
      if (v40 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4194);
      }
      v41 = (void *)WTF::fastMalloc((WTF *)(4 * v40));
      v70 = v40;
      v69 = v41;
      memcpy(v41, a3[6], 4 * *((unsigned int *)a3 + 15));
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_0::operator()((uint64_t)v79, "Unicode", (uint64_t)&v69);
      WTF::fastFree((unint64_t)v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_0::operator()((uint64_t)v79, "Unicode", (uint64_t)&v69);
    }
    v49 = *((unsigned int *)a3 + 19);
    v66 = 0;
    v67 = 0;
    v68 = v49;
    if (!(_DWORD)v49)
    {
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_1::operator()((uint64_t)v78, "Unicode", (unsigned int *)&v66);
LABEL_36:
      v64 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
      WTF::PrintStream::printf(v64, "%s", "]");
      return (*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 40))(this);
    }
    if (!(v49 >> 29))
    {
      v50 = WTF::fastMalloc((WTF *)(8 * v49));
      v51 = v50;
      v67 = v49;
      v66 = v50;
      v52 = *((unsigned int *)a3 + 19);
      if ((_DWORD)v52)
      {
        v53 = (uint64_t *)a3[8];
        v54 = 8 * v52;
        v55 = (_QWORD *)v50;
        do
        {
          v56 = *v53++;
          *v55++ = v56;
          v54 -= 8;
        }
        while (v54);
      }
      JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_1::operator()((uint64_t)v78, "Unicode", (unsigned int *)&v66);
      WTF::fastFree(v51, v57, v58, v59, v60, v61, v62, v63);
      goto LABEL_36;
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x198EA4184);
  }
  if (JSC::Yarr::YarrPattern::anyCharacterClass(a2) == (JSC::Yarr::CharacterClass **)a3)
  {
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
    v24 = "<any character>";
  }
  else
  {
    JSC::Yarr::YarrPattern::newlineCharacterClass(a2);
    if (v7 == (JSC::Yarr::YarrPattern *)a3)
    {
      v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
      v24 = "<newline>";
    }
    else
    {
      JSC::Yarr::YarrPattern::digitsCharacterClass(a2);
      if (v8 == (JSC::Yarr::YarrPattern *)a3)
      {
        v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
        v24 = "<digits>";
      }
      else if ((const void **)JSC::Yarr::YarrPattern::spacesCharacterClass(a2) == a3)
      {
        v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
        v24 = "<whitespace>";
      }
      else
      {
        JSC::Yarr::YarrPattern::wordcharCharacterClass(a2);
        if (v9 == (JSC::Yarr::YarrPattern *)a3)
        {
          v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
          v24 = "<word>";
        }
        else
        {
          JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(a2);
          if (v10 == (JSC::Yarr::YarrPattern *)a3)
          {
            v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
            v24 = "<unicode word ignore case>";
          }
          else
          {
            JSC::Yarr::YarrPattern::nondigitsCharacterClass(a2);
            if (v11 == (JSC::Yarr::YarrPattern *)a3)
            {
              v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
              v24 = "<non-digits>";
            }
            else
            {
              JSC::Yarr::YarrPattern::nonspacesCharacterClass(a2);
              if (v12 == (JSC::Yarr::YarrPattern *)a3)
              {
                v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
                v24 = "<non-whitespace>";
              }
              else if (JSC::Yarr::YarrPattern::nonwordcharCharacterClass(a2) == (JSC::Yarr::CharacterClass **)a3)
              {
                v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
                v24 = "<non-word>";
              }
              else
              {
                if ((const void **)JSC::Yarr::YarrPattern::nonwordUnicodeIgnoreCaseCharCharacterClass(a2) != a3)
                  goto LABEL_12;
                v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 32))(this);
                v24 = "<unicode non-word ignore case>";
              }
            }
          }
        }
      }
    }
  }
  WTF::PrintStream::printf(v23, "%s", v24);
  return (*(uint64_t (**)(JSC::Yarr *))(*(_QWORD *)this + 40))(this);
}

JSC::Yarr::CharacterClass **JSC::Yarr::YarrPattern::anyCharacterClass(JSC::Yarr::YarrPattern *this)
{
  JSC::Yarr::CharacterClass **result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Yarr::CharacterClass *v12;
  uint64_t v13;
  JSC::Yarr::CharacterClass *v14;

  result = (JSC::Yarr::CharacterClass **)*((_QWORD *)this + 16);
  if (!result)
  {
    JSC::Yarr::anycharCreate((JSC::Yarr *)&v14);
    v10 = *((unsigned int *)this + 21);
    if ((_DWORD)v10 == *((_DWORD *)this + 20))
    {
      WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>((uint64_t)this + 72, (unint64_t)&v14);
    }
    else
    {
      v11 = *((_QWORD *)this + 9);
      v12 = v14;
      v14 = 0;
      *(_QWORD *)(v11 + 8 * v10) = v12;
      *((_DWORD *)this + 21) = v10 + 1;
    }
    result = std::unique_ptr<JSC::Yarr::CharacterClass>::~unique_ptr[abi:sn180100](&v14, v3, v4, v5, v6, v7, v8, v9);
    v13 = *((unsigned int *)this + 21);
    if ((_DWORD)v13)
    {
      result = *(JSC::Yarr::CharacterClass ***)(*((_QWORD *)this + 9) + 8 * v13 - 8);
      *((_QWORD *)this + 16) = result;
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void JSC::Yarr::YarrPattern::digitsCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::Yarr::CharacterClass *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Yarr::CharacterClass *v25;
  uint64_t v26;

  if (!*((_QWORD *)this + 18))
  {
    v2 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 73) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_BYTE *)(v2 + 89) &= ~2u;
    v25 = (JSC::Yarr::CharacterClass *)v2;
    v26 = 0x3900000030;
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * (*(_DWORD *)(v2 + 44))++) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 32, 1uLL, (unint64_t)&v26);
    *(_BYTE *)(v2 + 88) = 1;
    v3 = *((unsigned int *)this + 21);
    if ((_DWORD)v3 == *((_DWORD *)this + 20))
    {
      v5 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v3 + 1, (unint64_t)&v25);
      v13 = *((unsigned int *)this + 21);
      v14 = *((_QWORD *)this + 9);
      v15 = *v5;
      *v5 = 0;
      *(_QWORD *)(v14 + 8 * v13) = v15;
      v16 = v25;
      v4 = v13 + 1;
      *((_DWORD *)this + 21) = v4;
      v25 = 0;
      if (v16)
      {
        JSC::Yarr::CharacterClass::~CharacterClass(v16, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
        v4 = *((_DWORD *)this + 21);
      }
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v3) = v2;
      v4 = v3 + 1;
      *((_DWORD *)this + 21) = v4;
    }
    if (v4)
      *((_QWORD *)this + 18) = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v4 - 8);
    else
      __break(0xC471u);
  }
}

uint64_t JSC::Yarr::YarrPattern::spacesCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unint64_t v5;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  const void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  JSC::Yarr::CharacterClass *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  JSC::Yarr::CharacterClass *v160;
  uint64_t v161;

  result = *((_QWORD *)this + 19);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_QWORD *)(v3 + 80) = &JSC::Yarr::_spacesData;
    *(_BYTE *)(v3 + 88) = 0;
    *(_BYTE *)(v3 + 89) &= 0xFCu;
    v160 = (JSC::Yarr::CharacterClass *)v3;
    v161 = 0xD00000009;
    *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * *(unsigned int *)(v3 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 32, 1uLL, (unint64_t)&v161);
    v4 = *(_DWORD *)(v3 + 24);
    v5 = *(unsigned int *)(v3 + 28);
    ++*(_DWORD *)(v3 + 44);
    if ((_DWORD)v5 == v4)
    {
      v31 = v5 + (v5 >> 2);
      if (v31 >= 0x10)
        v32 = v31 + 1;
      else
        v32 = 16;
      if (v32 <= v5 + 1)
        v33 = v5 + 1;
      else
        v33 = v32;
      if (v33 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A2CLL);
      }
      v34 = *(const void **)(v3 + 16);
      v35 = (void *)WTF::fastMalloc((WTF *)(4 * v33));
      *(_DWORD *)(v3 + 24) = v33;
      *(_QWORD *)(v3 + 16) = v35;
      memcpy(v35, v34, 4 * v5);
      if (v34)
      {
        if (*(const void **)(v3 + 16) == v34)
        {
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        WTF::fastFree((unint64_t)v34, v36, v37, v38, v39, v40, v41, v42);
      }
      v5 = *(unsigned int *)(v3 + 28);
      v6 = (_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v5);
    }
    else
    {
      v6 = (_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v5);
    }
    *v6 = 32;
    *(_DWORD *)(v3 + 28) = v5 + 1;
    v7 = *(_DWORD *)(v3 + 56);
    v8 = *(unsigned int *)(v3 + 60);
    if ((_DWORD)v8 == v7)
    {
      v43 = v8 + (v8 >> 2);
      if (v43 >= 0x10)
        v44 = v43 + 1;
      else
        v44 = 16;
      if (v44 <= v8 + 1)
        v45 = v8 + 1;
      else
        v45 = v44;
      if (v45 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A34);
      }
      v46 = *(const void **)(v3 + 48);
      v47 = (void *)WTF::fastMalloc((WTF *)(4 * v45));
      *(_DWORD *)(v3 + 56) = v45;
      *(_QWORD *)(v3 + 48) = v47;
      memcpy(v47, v46, 4 * v8);
      if (v46)
      {
        if (*(const void **)(v3 + 48) == v46)
        {
          *(_QWORD *)(v3 + 48) = 0;
          *(_DWORD *)(v3 + 56) = 0;
        }
        WTF::fastFree((unint64_t)v46, v48, v49, v50, v51, v52, v53, v54);
      }
      v10 = *(unsigned int *)(v3 + 60);
      v9 = *(_DWORD **)(v3 + 48);
      v9[v10] = 160;
      v7 = *(_DWORD *)(v3 + 56);
    }
    else
    {
      v9 = *(_DWORD **)(v3 + 48);
      v9[v8] = 160;
      LODWORD(v10) = v8;
    }
    v11 = (v10 + 1);
    *(_DWORD *)(v3 + 60) = v11;
    if ((_DWORD)v11 == v7)
    {
      v55 = v11 + (v11 >> 2);
      if (v55 >= 0x10)
        v56 = v55 + 1;
      else
        v56 = 16;
      if (v56 <= v11 + 1)
        v57 = v11 + 1;
      else
        v57 = v56;
      if (v57 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A3CLL);
      }
      v58 = (void *)WTF::fastMalloc((WTF *)(4 * v57));
      *(_DWORD *)(v3 + 56) = v57;
      *(_QWORD *)(v3 + 48) = v58;
      memcpy(v58, v9, 4 * v11);
      if (*(_DWORD **)(v3 + 48) == v9)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v9, v59, v60, v61, v62, v63, v64, v65);
      v66 = *(unsigned int *)(v3 + 60);
      v12 = v66 + 1;
      v13 = (_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v66);
    }
    else
    {
      v12 = v10 + 2;
      v13 = &v9[v11];
    }
    *v13 = 5760;
    *(_DWORD *)(v3 + 60) = v12;
    v14 = (uint64_t *)(v3 + 64);
    v161 = 0x200A00002000;
    v15 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v15 == *(_DWORD *)(v3 + 72))
    {
      v159 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v161);
      v15 = *(unsigned int *)(v3 + 76);
      v16 = *(_QWORD *)(v3 + 64);
      v17 = *v159;
    }
    else
    {
      v16 = *v14;
      v17 = v161;
    }
    *(_QWORD *)(v16 + 8 * v15) = v17;
    ++*(_DWORD *)(v3 + 76);
    v18 = *(_DWORD *)(v3 + 56);
    v19 = *(unsigned int *)(v3 + 60);
    if ((_DWORD)v19 == v18)
    {
      v67 = v19 + (v19 >> 2);
      if (v67 >= 0x10)
        v68 = v67 + 1;
      else
        v68 = 16;
      if (v68 <= v19 + 1)
        v69 = v19 + 1;
      else
        v69 = v68;
      if (v69 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A44);
      }
      v70 = *(const void **)(v3 + 48);
      v71 = (void *)WTF::fastMalloc((WTF *)(4 * v69));
      *(_DWORD *)(v3 + 56) = v69;
      *(_QWORD *)(v3 + 48) = v71;
      memcpy(v71, v70, 4 * v19);
      if (v70)
      {
        if (*(const void **)(v3 + 48) == v70)
        {
          *(_QWORD *)(v3 + 48) = 0;
          *(_DWORD *)(v3 + 56) = 0;
        }
        WTF::fastFree((unint64_t)v70, v72, v73, v74, v75, v76, v77, v78);
      }
      v21 = *(unsigned int *)(v3 + 60);
      v20 = *(_DWORD **)(v3 + 48);
      v20[v21] = 8232;
      v18 = *(_DWORD *)(v3 + 56);
    }
    else
    {
      v20 = *(_DWORD **)(v3 + 48);
      v20[v19] = 8232;
      LODWORD(v21) = v19;
    }
    v22 = (v21 + 1);
    *(_DWORD *)(v3 + 60) = v22;
    if ((_DWORD)v22 == v18)
    {
      v79 = v22 + (v22 >> 2);
      if (v79 >= 0x10)
        v80 = v79 + 1;
      else
        v80 = 16;
      if (v80 <= v22 + 1)
        v81 = v22 + 1;
      else
        v81 = v80;
      if (v81 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A4CLL);
      }
      v82 = (void *)WTF::fastMalloc((WTF *)(4 * v81));
      *(_DWORD *)(v3 + 56) = v81;
      *(_QWORD *)(v3 + 48) = v82;
      memcpy(v82, v20, 4 * v22);
      if (*(_DWORD **)(v3 + 48) == v20)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v20, v83, v84, v85, v86, v87, v88, v89);
      v90 = *(unsigned int *)(v3 + 60);
      LODWORD(v21) = v90 + 1;
      v20 = *(_DWORD **)(v3 + 48);
      v20[v90] = 8233;
      v18 = *(_DWORD *)(v3 + 56);
    }
    else
    {
      LODWORD(v21) = v21 + 2;
      v20[v22] = 8233;
    }
    *(_DWORD *)(v3 + 60) = v21;
    v23 = v21;
    if ((_DWORD)v21 == v18)
    {
      v91 = v21 + 1;
      v92 = v21 + ((unint64_t)v21 >> 2);
      if (v92 >= 0x10)
        v93 = v92 + 1;
      else
        v93 = 16;
      if (v93 <= v91)
        v94 = v23 + 1;
      else
        v94 = v93;
      if (v94 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A54);
      }
      v95 = (void *)WTF::fastMalloc((WTF *)(4 * v94));
      *(_DWORD *)(v3 + 56) = v94;
      *(_QWORD *)(v3 + 48) = v95;
      memcpy(v95, v20, 4 * v23);
      if (*(_DWORD **)(v3 + 48) == v20)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v20, v96, v97, v98, v99, v100, v101, v102);
      v21 = *(unsigned int *)(v3 + 60);
      v20 = *(_DWORD **)(v3 + 48);
      v20[v21] = 8239;
      v18 = *(_DWORD *)(v3 + 56);
    }
    else
    {
      v20[v21] = 8239;
    }
    v24 = (v21 + 1);
    *(_DWORD *)(v3 + 60) = v24;
    if ((_DWORD)v24 == v18)
    {
      v103 = v24 + (v24 >> 2);
      if (v103 >= 0x10)
        v104 = v103 + 1;
      else
        v104 = 16;
      if (v104 <= v24 + 1)
        v105 = v24 + 1;
      else
        v105 = v104;
      if (v105 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A5CLL);
      }
      v106 = (void *)WTF::fastMalloc((WTF *)(4 * v105));
      *(_DWORD *)(v3 + 56) = v105;
      *(_QWORD *)(v3 + 48) = v106;
      memcpy(v106, v20, 4 * v24);
      if (*(_DWORD **)(v3 + 48) == v20)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v20, v107, v108, v109, v110, v111, v112, v113);
      v114 = *(unsigned int *)(v3 + 60);
      LODWORD(v21) = v114 + 1;
      v20 = *(_DWORD **)(v3 + 48);
      v20[v114] = 8287;
      v18 = *(_DWORD *)(v3 + 56);
    }
    else
    {
      LODWORD(v21) = v21 + 2;
      v20[v24] = 8287;
    }
    *(_DWORD *)(v3 + 60) = v21;
    v25 = v21;
    if ((_DWORD)v21 == v18)
    {
      v115 = v21 + 1;
      v116 = v21 + ((unint64_t)v21 >> 2);
      if (v116 >= 0x10)
        v117 = v116 + 1;
      else
        v117 = 16;
      if (v117 <= v115)
        v118 = v25 + 1;
      else
        v118 = v117;
      if (v118 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EA4A64);
      }
      v119 = (void *)WTF::fastMalloc((WTF *)(4 * v118));
      *(_DWORD *)(v3 + 56) = v118;
      *(_QWORD *)(v3 + 48) = v119;
      memcpy(v119, v20, 4 * v25);
      if (*(_DWORD **)(v3 + 48) == v20)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v20, v120, v121, v122, v123, v124, v125, v126);
      v21 = *(unsigned int *)(v3 + 60);
      v20 = *(_DWORD **)(v3 + 48);
      v20[v21] = 12288;
      v18 = *(_DWORD *)(v3 + 56);
    }
    else
    {
      v20[v21] = 12288;
    }
    v26 = (v21 + 1);
    *(_DWORD *)(v3 + 60) = v26;
    if ((_DWORD)v26 == v18)
    {
      v127 = v26 + (v26 >> 2);
      if (v127 >= 0x10)
        v128 = v127 + 1;
      else
        v128 = 16;
      if (v128 <= v26 + 1)
        v129 = v26 + 1;
      else
        v129 = v128;
      if (v129 >> 30)
      {
        __break(0xC471u);
        goto LABEL_136;
      }
      v130 = (void *)WTF::fastMalloc((WTF *)(4 * v129));
      *(_DWORD *)(v3 + 56) = v129;
      *(_QWORD *)(v3 + 48) = v130;
      memcpy(v130, v20, 4 * v26);
      if (*(_DWORD **)(v3 + 48) == v20)
      {
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v20, v131, v132, v133, v134, v135, v136, v137);
      v138 = *(unsigned int *)(v3 + 60);
      v27 = v138 + 1;
      v28 = (_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v138);
    }
    else
    {
      v27 = v21 + 2;
      v28 = &v20[v26];
    }
    *v28 = 65279;
    *(_DWORD *)(v3 + 60) = v27;
    *(_BYTE *)(v3 + 88) = 1;
    v29 = *((unsigned int *)this + 21);
    if ((_DWORD)v29 == *((_DWORD *)this + 20))
    {
      v139 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v29 + 1, (unint64_t)&v160);
      v147 = *((unsigned int *)this + 21);
      v148 = *((_QWORD *)this + 9);
      v149 = *v139;
      *v139 = 0;
      *(_QWORD *)(v148 + 8 * v147) = v149;
      v150 = v160;
      v30 = v147 + 1;
      *((_DWORD *)this + 21) = v30;
      v160 = 0;
      if (v150)
      {
        JSC::Yarr::CharacterClass::~CharacterClass(v150, v140, v141, v142, v143, v144, v145, v146);
        WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
        v30 = *((_DWORD *)this + 21);
      }
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v29) = v160;
      v30 = v29 + 1;
      *((_DWORD *)this + 21) = v30;
    }
    if (v30)
    {
      result = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v30 - 8);
      *((_QWORD *)this + 19) = result;
      return result;
    }
    __break(0xC471u);
LABEL_136:
    JUMPOUT(0x198EA4A24);
  }
  return result;
}

void JSC::Yarr::YarrPattern::nondigitsCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::Yarr::CharacterClass *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Yarr::CharacterClass *v36;
  uint64_t v37;

  if (!*((_QWORD *)this + 22))
  {
    v2 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 73) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    v3 = (uint64_t *)(v2 + 32);
    *(_BYTE *)(v2 + 89) &= ~2u;
    v36 = (JSC::Yarr::CharacterClass *)v2;
    v37 = 0x2F00000000;
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * *(unsigned int *)(v2 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 32, 1uLL, (unint64_t)&v37);
    v4 = *(_DWORD *)(v2 + 40);
    v5 = (*(_DWORD *)(v2 + 44) + 1);
    *(_DWORD *)(v2 + 44) = v5;
    v37 = 0x7F0000003ALL;
    if ((_DWORD)v5 == v4)
    {
      v8 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v5 + 1, (unint64_t)&v37);
      v5 = *(unsigned int *)(v2 + 44);
      v6 = *(_QWORD *)(v2 + 32);
      v7 = *v8;
    }
    else
    {
      v6 = *v3;
      v7 = v37;
    }
    *(_QWORD *)(v6 + 8 * v5) = v7;
    ++*(_DWORD *)(v2 + 44);
    v9 = (uint64_t *)(v2 + 64);
    v37 = 0x10FFFF00000080;
    v10 = *(unsigned int *)(v2 + 76);
    if ((_DWORD)v10 == *(_DWORD *)(v2 + 72))
    {
      v13 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v37);
      v10 = *(unsigned int *)(v2 + 76);
      v11 = *(_QWORD *)(v2 + 64);
      v12 = *v13;
    }
    else
    {
      v11 = *v9;
      v12 = v37;
    }
    *(_QWORD *)(v11 + 8 * v10) = v12;
    ++*(_DWORD *)(v2 + 76);
    *(_BYTE *)(v2 + 88) = 3;
    v14 = *((unsigned int *)this + 21);
    if ((_DWORD)v14 == *((_DWORD *)this + 20))
    {
      v16 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v14 + 1, (unint64_t)&v36);
      v24 = *((unsigned int *)this + 21);
      v25 = *((_QWORD *)this + 9);
      v26 = *v16;
      *v16 = 0;
      *(_QWORD *)(v25 + 8 * v24) = v26;
      v27 = v36;
      v15 = v24 + 1;
      *((_DWORD *)this + 21) = v15;
      v36 = 0;
      if (v27)
      {
        JSC::Yarr::CharacterClass::~CharacterClass(v27, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        v15 = *((_DWORD *)this + 21);
      }
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v14) = v2;
      v15 = v14 + 1;
      *((_DWORD *)this + 21) = v15;
    }
    if (v15)
      *((_QWORD *)this + 22) = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v15 - 8);
    else
      __break(0xC471u);
  }
}

void JSC::Yarr::YarrPattern::nonspacesCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::Yarr::CharacterClass *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::Yarr::CharacterClass *v20;

  if (!*((_QWORD *)this + 23))
  {
    JSC::Yarr::nonspacesCreate((JSC::Yarr *)&v20);
    v2 = *((unsigned int *)this + 21);
    if ((_DWORD)v2 == *((_DWORD *)this + 20))
    {
      WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>((uint64_t)this + 72, (unint64_t)&v20);
      v11 = v20;
      v20 = 0;
      if (v11)
      {
        JSC::Yarr::CharacterClass::~CharacterClass(v11, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      v3 = *((_DWORD *)this + 21);
    }
    else
    {
      v3 = v2 + 1;
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v2) = v20;
      *((_DWORD *)this + 21) = v2 + 1;
    }
    if (v3)
      *((_QWORD *)this + 23) = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v3 - 8);
    else
      __break(0xC471u);
  }
}

JSC::Yarr::CharacterClass **JSC::Yarr::YarrPattern::nonwordcharCharacterClass(JSC::Yarr::YarrPattern *this)
{
  JSC::Yarr::CharacterClass **result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Yarr::CharacterClass *v12;
  uint64_t v13;
  JSC::Yarr::CharacterClass *v14;

  result = (JSC::Yarr::CharacterClass **)*((_QWORD *)this + 24);
  if (!result)
  {
    JSC::Yarr::nonwordcharCreate((JSC::Yarr *)&v14);
    v10 = *((unsigned int *)this + 21);
    if ((_DWORD)v10 == *((_DWORD *)this + 20))
    {
      WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>((uint64_t)this + 72, (unint64_t)&v14);
    }
    else
    {
      v11 = *((_QWORD *)this + 9);
      v12 = v14;
      v14 = 0;
      *(_QWORD *)(v11 + 8 * v10) = v12;
      *((_DWORD *)this + 21) = v10 + 1;
    }
    result = std::unique_ptr<JSC::Yarr::CharacterClass>::~unique_ptr[abi:sn180100](&v14, v3, v4, v5, v6, v7, v8, v9);
    v13 = *((unsigned int *)this + 21);
    if ((_DWORD)v13)
    {
      result = *(JSC::Yarr::CharacterClass ***)(*((_QWORD *)this + 9) + 8 * v13 - 8);
      *((_QWORD *)this + 24) = result;
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t JSC::Yarr::YarrPattern::nonwordUnicodeIgnoreCaseCharCharacterClass(JSC::Yarr::YarrPattern *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::Yarr::CharacterClass *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::Yarr::CharacterClass *v66;
  uint64_t v67;

  result = *((_QWORD *)this + 25);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0x60);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 73) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    v4 = (uint64_t *)(v3 + 32);
    *(_BYTE *)(v3 + 89) &= ~2u;
    v66 = (JSC::Yarr::CharacterClass *)v3;
    v67 = 0x2F00000000;
    *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * *(unsigned int *)(v3 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 32, 1uLL, (unint64_t)&v67);
    v5 = *(_DWORD *)(v3 + 40);
    v6 = (*(_DWORD *)(v3 + 44) + 1);
    *(_DWORD *)(v3 + 44) = v6;
    v67 = 0x400000003ALL;
    if ((_DWORD)v6 == v5)
    {
      v9 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v67);
      v6 = *(unsigned int *)(v3 + 44);
      v7 = *(_QWORD *)(v3 + 32);
      v8 = *v9;
    }
    else
    {
      v7 = *v4;
      v8 = v67;
    }
    *(_QWORD *)(v7 + 8 * v6) = v8;
    v10 = *(_DWORD *)(v3 + 40);
    v11 = (*(_DWORD *)(v3 + 44) + 1);
    *(_DWORD *)(v3 + 44) = v11;
    v67 = 0x5E0000005BLL;
    if ((_DWORD)v11 == v10)
    {
      v14 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v11 + 1, (unint64_t)&v67);
      v11 = *(unsigned int *)(v3 + 44);
      v12 = *(_QWORD *)(v3 + 32);
      v13 = *v14;
    }
    else
    {
      v12 = *v4;
      v13 = v67;
    }
    *(_QWORD *)(v12 + 8 * v11) = v13;
    v15 = *(_DWORD *)(v3 + 44) + 1;
    *(_DWORD *)(v3 + 44) = v15;
    v16 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v16 == *(_DWORD *)(v3 + 24))
    {
      v17 = v16 + (v16 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v16 + 1)
        v19 = v16 + 1;
      else
        v19 = v18;
      if (v19 >> 30)
      {
        __break(0xC471u);
        goto LABEL_43;
      }
      v20 = *(const void **)(v3 + 16);
      v21 = (void *)WTF::fastMalloc((WTF *)(4 * v19));
      *(_DWORD *)(v3 + 24) = v19;
      *(_QWORD *)(v3 + 16) = v21;
      memcpy(v21, v20, 4 * v16);
      if (v20)
      {
        if (*(const void **)(v3 + 16) == v20)
        {
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
      }
      v16 = *(unsigned int *)(v3 + 28);
      *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v16) = 96;
      v15 = *(_DWORD *)(v3 + 44);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v16) = 96;
    }
    *(_DWORD *)(v3 + 28) = v16 + 1;
    v67 = 0x7F0000007BLL;
    if (v15 == *(_DWORD *)(v3 + 40))
      *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * *(unsigned int *)(v3 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v15 + 1, (unint64_t)&v67);
    else
      *(_QWORD *)(*v4 + 8 * v15) = v67;
    ++*(_DWORD *)(v3 + 44);
    v29 = (uint64_t *)(v3 + 64);
    v67 = 0x17E00000080;
    v30 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v30 == *(_DWORD *)(v3 + 72))
    {
      v33 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 64, v30 + 1, (unint64_t)&v67);
      v30 = *(unsigned int *)(v3 + 76);
      v31 = *(_QWORD *)(v3 + 64);
      v32 = *v33;
    }
    else
    {
      v31 = *v29;
      v32 = v67;
    }
    *(_QWORD *)(v31 + 8 * v30) = v32;
    v34 = *(_DWORD *)(v3 + 72);
    v35 = (*(_DWORD *)(v3 + 76) + 1);
    *(_DWORD *)(v3 + 76) = v35;
    v67 = 0x212900000180;
    if ((_DWORD)v35 == v34)
    {
      v38 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 64, v35 + 1, (unint64_t)&v67);
      v35 = *(unsigned int *)(v3 + 76);
      v36 = *(_QWORD *)(v3 + 64);
      v37 = *v38;
    }
    else
    {
      v36 = *v29;
      v37 = v67;
    }
    *(_QWORD *)(v36 + 8 * v35) = v37;
    v39 = *(_DWORD *)(v3 + 72);
    v40 = (*(_DWORD *)(v3 + 76) + 1);
    *(_DWORD *)(v3 + 76) = v40;
    v67 = 0x10FFFF0000212BLL;
    if ((_DWORD)v40 == v39)
    {
      v43 = (uint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 64, v40 + 1, (unint64_t)&v67);
      v40 = *(unsigned int *)(v3 + 76);
      v41 = *(_QWORD *)(v3 + 64);
      v42 = *v43;
    }
    else
    {
      v41 = *v29;
      v42 = v67;
    }
    *(_QWORD *)(v41 + 8 * v40) = v42;
    ++*(_DWORD *)(v3 + 76);
    *(_BYTE *)(v3 + 88) = 3;
    v44 = *((unsigned int *)this + 21);
    if ((_DWORD)v44 == *((_DWORD *)this + 20))
    {
      v46 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v44 + 1, (unint64_t)&v66);
      v54 = *((unsigned int *)this + 21);
      v55 = *((_QWORD *)this + 9);
      v56 = *v46;
      *v46 = 0;
      *(_QWORD *)(v55 + 8 * v54) = v56;
      v57 = v66;
      v45 = v54 + 1;
      *((_DWORD *)this + 21) = v45;
      v66 = 0;
      if (v57)
      {
        JSC::Yarr::CharacterClass::~CharacterClass(v57, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
        v45 = *((_DWORD *)this + 21);
      }
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v44) = v3;
      v45 = v44 + 1;
      *((_DWORD *)this + 21) = v45;
    }
    if (v45)
    {
      result = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v45 - 8);
      *((_QWORD *)this + 25) = result;
      return result;
    }
    __break(0xC471u);
LABEL_43:
    JUMPOUT(0x198EA5100);
  }
  return result;
}

uint64_t JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_0::operator()(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  unint64_t v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;
  uint64_t v17;
  WTF::PrintStream *v18;

  v3 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v3)
  {
    v6 = result;
    v7 = *(_BYTE **)result;
    if (**(_BYTE **)result)
    {
      v8 = *(_QWORD *)(result + 8);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      WTF::PrintStream::printf(v9, "%s", ",");
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      v7 = *(_BYTE **)v6;
    }
    *v7 = 1;
    v10 = *(_QWORD *)(v6 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    WTF::PrintStream::printf(v11, "%s", a2);
    WTF::PrintStream::printf(v11, "%s", ":(");
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!*(_DWORD *)(a3 + 12))
      goto LABEL_17;
    v12 = *(WTF::PrintStream **)(v6 + 8);
    if ((**(_DWORD **)a3 - 32) >= 0xE0)
      WTF::PrintStream::printf(v12, "0x%04x");
    else
      WTF::PrintStream::printf(v12, "'%c'");
    if (v3 >= 2)
    {
      v13 = 1;
      while (1)
      {
        v14 = *(_QWORD *)(v6 + 8);
        v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
        WTF::PrintStream::printf(v15, "%s", ",");
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        if (v13 >= *(unsigned int *)(a3 + 12))
          break;
        v16 = *(WTF::PrintStream **)(v6 + 8);
        if ((*(_DWORD *)(*(_QWORD *)a3 + 4 * v13) - 32) > 0xDF)
          WTF::PrintStream::printf(v16, "0x%04x");
        else
          WTF::PrintStream::printf(v16, "'%c'");
        if (v3 == ++v13)
          goto LABEL_16;
      }
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x198EA5340);
    }
LABEL_16:
    v17 = *(_QWORD *)(v6 + 8);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    WTF::PrintStream::printf(v18, "%s", ")");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  }
  return result;
}

uint64_t JSC::Yarr::dumpCharacterClass(WTF::PrintStream &,JSC::Yarr::YarrPattern *,JSC::Yarr::CharacterClass *)::$_1::operator()(uint64_t result, const char *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  _BYTE *v7;
  const char *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  int v13;
  int v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  const char *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  WTF::PrintStream *v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  WTF::PrintStream *v37;
  uint64_t v38;
  WTF::PrintStream *v39;
  uint64_t v40;
  WTF::PrintStream *v41;

  v3 = a3[3];
  if ((_DWORD)v3)
  {
    v6 = result;
    v7 = *(_BYTE **)result;
    v8 = ",";
    if (**(_BYTE **)result)
    {
      v9 = *(_QWORD *)(result + 8);
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      WTF::PrintStream::printf(v10, "%s", ",");
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      v7 = *(_BYTE **)v6;
    }
    *v7 = 1;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    WTF::PrintStream::printf(v12, "%s", a2);
    WTF::PrintStream::printf(v12, "%s", " ranges:(");
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    if (!a3[3])
      goto LABEL_23;
    v14 = **(_DWORD **)a3;
    v13 = *(_DWORD *)(*(_QWORD *)a3 + 4);
    v15 = *(_QWORD *)(v6 + 8);
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    WTF::PrintStream::printf(v16, "%s", "(");
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    v17 = *(WTF::PrintStream **)(v6 + 8);
    if ((v14 - 32) >= 0xE0)
      WTF::PrintStream::printf(v17, "0x%04x");
    else
      WTF::PrintStream::printf(v17, "'%c'");
    v18 = *(_QWORD *)(v6 + 8);
    v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    WTF::PrintStream::printf(v19, "%s", "..");
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    v20 = *(WTF::PrintStream **)(v6 + 8);
    if ((v13 - 32) >= 0xE0)
      WTF::PrintStream::printf(v20, "0x%04x");
    else
      WTF::PrintStream::printf(v20, "'%c'");
    v21 = *(_QWORD *)(v6 + 8);
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    WTF::PrintStream::printf(v22, "%s", ")");
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    if (v3 >= 2)
    {
      v23 = 0;
      v24 = 8 * v3 - 8;
      v25 = 1;
      while (1)
      {
        v26 = *(_QWORD *)(v6 + 8);
        v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
        v28 = v8;
        WTF::PrintStream::printf(v27, "%s", v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
        if (v25 >= a3[3])
          break;
        v29 = *(_QWORD *)a3 + v23;
        v30 = *(_DWORD *)(v29 + 8);
        v31 = *(_DWORD *)(v29 + 12);
        v32 = *(_QWORD *)(v6 + 8);
        v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
        WTF::PrintStream::printf(v33, "%s", "(");
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
        v34 = *(WTF::PrintStream **)(v6 + 8);
        if ((v30 - 32) > 0xDF)
          WTF::PrintStream::printf(v34, "0x%04x");
        else
          WTF::PrintStream::printf(v34, "'%c'");
        v35 = *(_QWORD *)(v6 + 8);
        v36 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
        WTF::PrintStream::printf(v36, "%s", "..");
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        v37 = *(WTF::PrintStream **)(v6 + 8);
        if ((v31 - 32) > 0xDF)
          WTF::PrintStream::printf(v37, "0x%04x");
        else
          WTF::PrintStream::printf(v37, "'%c'");
        v38 = *(_QWORD *)(v6 + 8);
        v39 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
        WTF::PrintStream::printf(v39, "%s", ")");
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        ++v25;
        v23 += 8;
        v8 = v28;
        if (v24 == v23)
          goto LABEL_22;
      }
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x198EA5760);
    }
LABEL_22:
    v40 = *(_QWORD *)(v6 + 8);
    v41 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
    WTF::PrintStream::printf(v41, "%s", ")");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  }
  return result;
}

uint64_t JSC::Yarr::PatternAlternative::dump(JSC::Yarr::PatternAlternative *this, WTF::PrintStream *a2, JSC::Yarr::YarrPattern *a3, int a4)
{
  WTF::PrintStream *v7;
  char v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  int v15;
  WTF::PrintStream *v16;
  unsigned __int8 *v17;
  int v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  uint64_t v21;
  JSC::Yarr::CharacterClass *v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  char v31;
  WTF::PrintStream *v32;
  const char *v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  int v37;
  WTF::PrintStream *v38;
  const char *v39;
  WTF::PrintStream *v40;
  int v41;
  const char *v42;
  WTF::PrintStream *v43;
  WTF::PrintStream *v44;
  uint64_t v45;
  char v46;
  _BYTE *v47;
  char v48;
  WTF::PrintStream *v49;
  WTF::PrintStream *v50;
  uint64_t v51;
  WTF::PrintStream *v52;
  _DWORD *v53;
  int v54;
  JSC::Yarr::PatternDisjunction *v55;
  WTF::PrintStream *v56;
  unsigned int v57;
  WTF::PrintStream *v58;
  int v59;
  int v61;
  int v62;
  WTF::PrintStream *v63;
  WTF::PrintStream *v64;
  WTF::PrintStream *v65;
  WTF::PrintStream *v66;
  WTF::PrintStream *v67;
  WTF::PrintStream *v68;
  WTF::PrintStream *v69;
  int v70;
  unsigned int v71;

  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "minimum size: ");
  WTF::PrintStream::printf(v7, "%u", *((_DWORD *)this + 6));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v8 = *((_BYTE *)this + 37);
  if ((v8 & 2) != 0)
  {
    v67 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v67, "%s", ",fixed size");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v8 = *((_BYTE *)this + 37);
    if ((v8 & 1) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0)
        goto LABEL_4;
      goto LABEL_77;
    }
  }
  else if ((*((_BYTE *)this + 37) & 1) == 0)
  {
    goto LABEL_3;
  }
  v68 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v68, "%s", ",once through");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v8 = *((_BYTE *)this + 37);
  if ((v8 & 4) == 0)
  {
LABEL_4:
    if ((v8 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_77:
  v69 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v69, "%s", ",starts with ^");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((*((_BYTE *)this + 37) & 8) != 0)
  {
LABEL_5:
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v9, "%s", ",contains ^");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
LABEL_6:
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v10, "%s", "\n");
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 3))
  {
    v12 = 0;
    v70 = a4;
    v71 = a4 + 1;
    while (2)
    {
      v13 = *(_QWORD *)this;
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v14, "%s", "    ");
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      if (a4)
      {
        v15 = a4;
        do
        {
          v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v16, "%s", "  ");
          result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          --v15;
        }
        while (v15);
      }
      v17 = (unsigned __int8 *)(v13 + 48 * v12);
      v18 = *v17;
      if ((v18 - 7) >= 2 && (*(_BYTE *)(v13 + 48 * v12 + 1) & 2) != 0)
      {
        v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v19, "%s", "not ");
        result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v18 = *v17;
      }
      switch(v18)
      {
        case 0:
        case 1:
        case 2:
        case 6:
          v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v23, "%s");
          goto LABEL_28;
        case 3:
          WTF::PrintStream::printf(a2, "character ");
          v24 = v13 + 48 * v12;
          WTF::PrintStream::printf(a2, "inputPosition %u ", *(_DWORD *)(v24 + 40));
          v27 = *(_DWORD *)(v24 + 16);
          v26 = (_DWORD *)(v24 + 16);
          v25 = v27;
          if ((*((_WORD *)a3 + 1) & 4) != 0 && (v25 | 0x20u) - 97 <= 0x19)
          {
            if ((v25 - 97) >= 0x1A)
              v28 = -1;
            else
              v28 = -33;
            if ((v28 & v25) - 32 > 0xDF)
              WTF::PrintStream::printf(a2, "0x%04x");
            else
              WTF::PrintStream::printf(a2, "'%c'");
            v64 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v64, "%s", "/");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            v25 = *v26 | (32 * ((*v26 - 65) < 0x1A));
          }
          if ((v25 - 32) > 0xDF)
            WTF::PrintStream::printf(a2, "0x%04x");
          else
            WTF::PrintStream::printf(a2, "'%c'");
          JSC::Yarr::PatternTerm::dumpQuantifier(v13 + 48 * v12, a2);
          if (*(_BYTE *)(v13 + 48 * v12 + 2))
            goto LABEL_70;
          goto LABEL_71;
        case 4:
          v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v20, "%s", "character class ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v21 = v13 + 48 * v12;
          WTF::PrintStream::printf(a2, "inputPosition %u ", *(_DWORD *)(v21 + 40));
          JSC::Yarr::dumpCharacterClass(a2, a3, *(const void ***)(v21 + 16), v22);
          JSC::Yarr::PatternTerm::dumpQuantifier(v21, a2);
          if (!*(_BYTE *)(v21 + 2) && (*((_WORD *)a3 + 1) & 0x60) == 0)
            goto LABEL_71;
LABEL_70:
          v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v65, "%s", ",frame location ");
          WTF::PrintStream::printf(v65, "%u", *(_DWORD *)(v13 + 48 * v12 + 44));
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          goto LABEL_71;
        case 5:
          v29 = v13 + 48 * v12;
          v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v30, "%s", "back reference of subpattern #");
          WTF::PrintStream::printf(v30, "%u", *(_DWORD *)(v29 + 16));
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          WTF::PrintStream::printf(a2, " inputPosition %u", *(_DWORD *)(v29 + 40));
LABEL_71:
          v66 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v66, "%s", "\n");
          goto LABEL_72;
        case 7:
          v31 = *(_BYTE *)(v13 + 48 * v12 + 1);
          v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v33 = "captured ";
          if ((v31 & 1) == 0)
            v33 = "non-captured ";
          WTF::PrintStream::printf(v32, "%s", v33);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          goto LABEL_32;
        case 8:
LABEL_32:
          v34 = v13 + 48 * v12;
          v36 = *(_BYTE *)(v34 + 1);
          v35 = (_BYTE *)(v34 + 1);
          if ((v36 & 4) != 0)
          {
            v37 = *v17;
            v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            v39 = "lookbehind ";
            if (v37 == 7)
              v39 = "backwards ";
            WTF::PrintStream::printf(v38, "%s", v39);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          }
          WTF::PrintStream::printf(a2, "inputPosition %u ", *(_DWORD *)(v13 + 48 * v12 + 40));
          if ((*v35 & 2) != 0)
          {
            v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v40, "%s", "inverted ");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          }
          v41 = *v17;
          if (v41 == 7)
          {
            v42 = "subpattern";
          }
          else
          {
            if (v41 != 8)
              goto LABEL_43;
            v42 = "assertion";
          }
          v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v43, "%s", v42);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_43:
          if ((*v35 & 1) != 0)
          {
            v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v44, "%s", " #");
            WTF::PrintStream::printf(v44, "%u", *(_DWORD *)(v13 + 48 * v12 + 24));
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          }
          JSC::Yarr::PatternTerm::dumpQuantifier(v13 + 48 * v12, a2);
          v45 = v13 + 48 * v12;
          v48 = *(_BYTE *)(v45 + 32);
          v47 = (_BYTE *)(v45 + 32);
          v46 = v48;
          if ((v48 & 1) != 0)
          {
            v49 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v49, "%s", ",copy");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            v46 = *v47;
          }
          if ((v46 & 2) != 0)
          {
            v50 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v50, "%s", ",terminal");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          }
          v51 = v13 + 48 * v12;
          v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v52, "%s", ",frame location ");
          v54 = *(_DWORD *)(v51 + 44);
          v53 = (_DWORD *)(v51 + 44);
          WTF::PrintStream::printf(v52, "%u", v54);
          WTF::PrintStream::printf(v52, "%s", "\n");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v55 = (JSC::Yarr::PatternDisjunction *)*((_QWORD *)v47 - 2);
          if (*((_DWORD *)v55 + 3) >= 2u)
          {
            v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v56, "%s", "    ");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            if (v71)
            {
              v57 = v71;
              do
              {
                v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
                WTF::PrintStream::printf(v58, "%s", "  ");
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
                --v57;
              }
              while (v57);
            }
            if ((*v47 & 2) != 0)
              v59 = 1;
            else
              v59 = 4;
            if ((*v47 & 1) == 0 && *(_DWORD *)(v13 + 48 * v12 + 8) == 1)
              v61 = 2;
            else
              v61 = v59;
            v62 = v61 + *v53;
            v63 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v63, "%s", "alternative list,frame location ");
            WTF::PrintStream::printf(v63, "%u", v62);
            WTF::PrintStream::printf(v63, "%s", "\n");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            v55 = (JSC::Yarr::PatternDisjunction *)*((_QWORD *)v47 - 2);
          }
          result = JSC::Yarr::PatternDisjunction::dump(v55, a2, a3, v71);
          a4 = v70;
LABEL_73:
          if (++v12 >= (unint64_t)*((unsigned int *)this + 3))
            return result;
          continue;
        case 9:
          v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v23, "%s", ".* enclosure,frame location ");
          WTF::PrintStream::printf(v23, "%u");
LABEL_28:
          WTF::PrintStream::printf(v23, "%s", "\n");
LABEL_72:
          result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          goto LABEL_73;
        default:
          goto LABEL_73;
      }
    }
  }
  return result;
}

uint64_t JSC::Yarr::PatternTerm::dumpQuantifier(uint64_t this, WTF::PrintStream *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  WTF::PrintStream *v6;
  int v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  int v11;
  const char *v12;
  WTF::PrintStream *v13;

  v3 = this;
  v4 = *(_DWORD *)(this + 4);
  if (*(_BYTE *)(this + 2))
    v5 = 0;
  else
    v5 = v4 == 1;
  if (v5)
  {
    if (*(_DWORD *)(this + 8) == 1)
      return this;
    v4 = 1;
  }
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v6, "%s", " {");
  WTF::PrintStream::printf(v6, "%u", v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = *(_DWORD *)(v3 + 8);
  if (*(_DWORD *)(v3 + 4) != v7)
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v9 = v8;
    if (v7 == -1)
    {
      WTF::PrintStream::printf(v8, "%s");
    }
    else
    {
      WTF::PrintStream::printf(v8, "%s", ",");
      WTF::PrintStream::printf(v9, "%u");
    }
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v10, "%s", "}");
  this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v11 = *(unsigned __int8 *)(v3 + 2);
  if (v11 == 1)
  {
    v12 = " greedy";
    goto LABEL_18;
  }
  if (v11 == 2)
  {
    v12 = " non-greedy";
LABEL_18:
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v13, "%s", v12);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return this;
}

uint64_t JSC::Yarr::PatternDisjunction::dump(uint64_t this, WTF::PrintStream *a2, JSC::Yarr::YarrPattern *a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v8;
  int v9;
  unint64_t v10;
  WTF::PrintStream *v11;
  int v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;
  unint64_t v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;

  v4 = *(unsigned int *)(this + 12);
  if ((_DWORD)v4)
  {
    v5 = a4;
    v8 = this;
    if ((_DWORD)v4 == 1)
      v9 = a4;
    else
      v9 = a4 + 1;
    if ((_DWORD)v4 == 1)
    {
      v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v15, "%s", "    ");
      for (this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2); v5; --v5)
      {
        v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v16, "%s", "  ");
        this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      }
      if (*(_DWORD *)(v8 + 12))
        return JSC::Yarr::PatternAlternative::dump(**(JSC::Yarr::PatternAlternative ***)v8, a2, a3, v9);
    }
    else if (a4)
    {
      v10 = 0;
      while (1)
      {
        v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v11, "%s", "    ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v12 = v5;
        do
        {
          v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v13, "%s", "  ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          --v12;
        }
        while (v12);
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v14, "%s", "alternative #");
        WTF::PrintStream::printf(v14, "%u", v10);
        WTF::PrintStream::printf(v14, "%s", ": ");
        this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        if (v10 >= *(unsigned int *)(v8 + 12))
          break;
        this = JSC::Yarr::PatternAlternative::dump(*(JSC::Yarr::PatternAlternative **)(*(_QWORD *)v8 + 8 * v10++), a2, a3, v9);
        if (v10 == v4)
          return this;
      }
    }
    else
    {
      v17 = 0;
      while (1)
      {
        v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v18, "%s", "    ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v19, "%s", "alternative #");
        WTF::PrintStream::printf(v19, "%u", v17);
        WTF::PrintStream::printf(v19, "%s", ": ");
        this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        if (v17 >= *(unsigned int *)(v8 + 12))
          break;
        this = JSC::Yarr::PatternAlternative::dump(*(JSC::Yarr::PatternAlternative **)(*(_QWORD *)v8 + 8 * v17++), a2, a3, v9);
        if (v4 == v17)
          return this;
      }
    }
    __break(0xC471u);
  }
  return this;
}

uint64_t JSC::Yarr::YarrPattern::dumpPatternString(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  WTF::PrintStream *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t result;
  __int16 v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  int v25;
  char v26;

  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", "/");
  if (a3)
  {
    if ((a4 & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(a3, a4, (uint64_t)&v24, v14);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)a3, a4, 0, v9, v10, v11, v12, v13, (uint64_t)&v24);
  }
  else
  {
    v15 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 0;
    v24 = v15;
    v25 = 0;
  }
  WTF::printExpectedCStringHelper(v8, "StringView", &v24);
  if (v25 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
  WTF::PrintStream::printf(v8, "%s", "/");
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v17 = *(_WORD *)(a1 + 2);
  if ((v17 & 2) != 0)
  {
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v18, "%s", "g");
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v17 = *(_WORD *)(a1 + 2);
    if ((v17 & 4) == 0)
    {
LABEL_10:
      if ((v17 & 8) == 0)
        goto LABEL_11;
      goto LABEL_17;
    }
  }
  else if ((v17 & 4) == 0)
  {
    goto LABEL_10;
  }
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v19, "%s", "i");
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v17 = *(_WORD *)(a1 + 2);
  if ((v17 & 8) == 0)
  {
LABEL_11:
    if ((v17 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v20, "%s", "m");
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v17 = *(_WORD *)(a1 + 2);
  if ((v17 & 0x20) == 0)
  {
LABEL_12:
    if ((v17 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_19;
  }
LABEL_18:
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v21, "%s", "u");
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v17 = *(_WORD *)(a1 + 2);
  if ((v17 & 0x40) == 0)
  {
LABEL_13:
    if ((v17 & 0x80) == 0)
      return result;
LABEL_20:
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v23, "%s", "y");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  }
LABEL_19:
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v22, "%s", "v");
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if ((*(_WORD *)(a1 + 2) & 0x80) != 0)
    goto LABEL_20;
  return result;
}

uint64_t JSC::Yarr::YarrPattern::dumpPattern(uint64_t a1, WTF::PrintStream *a2, char *a3, uint64_t a4)
{
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  __int16 v10;
  WTF::PrintStream *v11;
  __int16 v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  uint64_t v25;
  WTF::PrintStream *v26;

  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", "RegExp pattern for ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  JSC::Yarr::YarrPattern::dumpPatternString(a1, (uint64_t)a2, a3, a4);
  if (*(_WORD *)(a1 + 2))
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v9, "%s", " (");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v10 = *(_WORD *)(a1 + 2);
    if ((v10 & 2) != 0)
    {
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v11, "%s", "global");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v12 = *(_WORD *)(a1 + 2);
      if ((v12 & 4) == 0)
      {
        if ((v12 & 8) != 0)
        {
LABEL_17:
          v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v15, "%s", "|");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          goto LABEL_18;
        }
LABEL_11:
        if ((v12 & 0x20) != 0)
        {
LABEL_19:
          v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v17, "%s", "|");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          goto LABEL_20;
        }
LABEL_12:
        if ((v12 & 0x40) != 0)
        {
LABEL_21:
          v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v19, "%s", "|");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_22:
          v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v20, "%s", "unicodeSets");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          if ((*(_WORD *)(a1 + 2) & 0x80) == 0)
          {
LABEL_25:
            v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v23, "%s", ")");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            goto LABEL_26;
          }
          goto LABEL_23;
        }
LABEL_13:
        if ((v12 & 0x80) == 0)
          goto LABEL_25;
LABEL_23:
        v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v21, "%s", "|");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_24:
        v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v22, "%s", "sticky");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        goto LABEL_25;
      }
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v13, "%s", "|");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    else if ((v10 & 4) == 0)
    {
      if ((v10 & 8) == 0)
      {
        if ((v10 & 0x20) == 0)
        {
          if ((v10 & 0x40) == 0)
          {
            if ((v10 & 0x80) == 0)
              goto LABEL_25;
            goto LABEL_24;
          }
          goto LABEL_22;
        }
LABEL_20:
        v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v18, "%s", "unicode");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v12 = *(_WORD *)(a1 + 2);
        if ((v12 & 0x40) != 0)
          goto LABEL_21;
        goto LABEL_13;
      }
LABEL_18:
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v16, "%s", "multiline");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v12 = *(_WORD *)(a1 + 2);
      if ((v12 & 0x20) != 0)
        goto LABEL_19;
      goto LABEL_12;
    }
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v14, "%s", "ignore case");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v12 = *(_WORD *)(a1 + 2);
    if ((v12 & 8) != 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_26:
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v24, "%s", ":\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v25 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v25 + 28))
  {
    v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v26, "%s", "    callframe size: ");
    WTF::PrintStream::printf(v26, "%u", *(_DWORD *)(v25 + 28));
    WTF::PrintStream::printf(v26, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v25 = *(_QWORD *)(a1 + 16);
  }
  return JSC::Yarr::PatternDisjunction::dump(v25, a2, (JSC::Yarr::YarrPattern *)a1, 0);
}

_QWORD *JSC::Yarr::anycharCreate(JSC::Yarr *this)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_BYTE *)(v2 + 89) &= ~2u;
  *(_QWORD *)this = v2;
  v6 = 0x7F00000000;
  result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 32, (unint64_t)&v6);
  v5 = *(_DWORD *)(v2 + 72);
  v4 = *(unsigned int *)(v2 + 76);
  v6 = 0x10FFFF00000080;
  if ((_DWORD)v4 == v5)
  {
    result = WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(v2 + 64, (unint64_t)&v6);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v4) = v6;
    ++*(_DWORD *)(v2 + 76);
  }
  *(_BYTE *)(v2 + 88) = 3;
  *(_BYTE *)(v2 + 89) |= 2u;
  return result;
}

uint64_t JSC::Yarr::checkSyntax(const WTF::StringImpl *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v6 = JSC::Yarr::parseFlags(a3, a4);
  if ((v6 & 0xFF0000) == 0)
    return 28;
  if ((v6 & 0xFF0000) == 0)
  {
    __break(1u);
    return 28;
  }
  if ((v6 & 0x20) != 0)
    v9 = 1;
  else
    v9 = (v6 >> 5) & 2;
  return JSC::Yarr::parse<JSC::Yarr::SyntaxChecker>((WTF::AtomStringImpl *)&v11, a1, a2, v9, 0xFFFFFFFFLL, 1, v7, v8);
}

uint64_t JSC::Yarr::parse<JSC::Yarr::SyntaxChecker>(WTF::AtomStringImpl *a1, const WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  WTF *v20;
  WTF *v21;
  WTF::StringImpl **v22;
  WTF *v24;
  WTF *v25;
  WTF::StringImpl **v26;
  WTF *v28;
  WTF *v29;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  __int16 *v78;
  __int16 *v79;
  __int16 *v80;
  __int16 *v81;
  __int16 *v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  WTF::AtomStringImpl *v91;
  const WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl **v99;
  WTF::StringImpl **v100;
  WTF::StringImpl **v101;
  WTF::StringImpl *v102;
  unsigned __int8 v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  WTF::AtomStringImpl *v114;
  unsigned __int8 v115;
  const WTF::StringImpl *v116;
  int v117;
  int v118;
  unsigned __int8 v119;
  int v120;
  uint64_t v121;
  char v122;
  char v123;
  WTF *v124;
  uint64_t v125;
  _BYTE v126[16];
  WTF *v127;
  WTF *v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  WTF::StringImpl *v135;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  v13 = a1;
  if ((v11 & 0xFF00000000) == 0)
  {
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::Parser((uint64_t)&v114, (uint64_t)a1, (uint64_t)v12, v11, v10, v9, v8, a8);
    v17 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parse((unint64_t)&v114, v76, v77, v78, v79, v80, v81, v82);
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::~Parser((uint64_t)&v114, v83, v84, v85, v86, v87, v88, v89);
    return v17;
  }
  v114 = a1;
  v115 = 0;
  v116 = v12;
  v117 = v11;
  v118 = 0;
  v119 = v10;
  v121 = 0;
  v120 = v9;
  v122 = v8;
  v123 = 0;
  v124 = (WTF *)v126;
  v125 = 16;
  v127 = 0;
  v128 = (WTF *)&v130;
  v130 = 0;
  v131 = (WTF *)&v133;
  v129 = 0x100000001;
  v133 = 0;
  v134 = 0;
  v132 = 0x100000001;
  if (v11 <= 0x100000)
  {
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::parseTokens((uint64_t)&v114, a1, v12, v11, v10, v9, v8, a8);
    if (v115)
      goto LABEL_8;
    v15 = v121;
    v14 = HIDWORD(v121);
    if (HIDWORD(v121) > v121)
    {
      if (v119 - 1 <= 1)
      {
        v90 = 20;
LABEL_84:
        v115 = v90;
        goto LABEL_8;
      }
      v120 = v121;
    }
    if (v123 && v127 && *((_DWORD *)v127 - 3))
    {
      v90 = 21;
      goto LABEL_84;
    }
    v16 = v134;
    if (v134 && *((_DWORD *)v134 - 3))
    {
      v112 = HIDWORD(v121);
      v113 = v121;
      if (!v127 || !*((_DWORD *)v127 - 3))
      {
LABEL_38:
        if (v119 - 1 < 2 || v127 && *((_DWORD *)v127 - 3))
        {
          v115 = 21;
          goto LABEL_8;
        }
        v122 = 0;
        goto LABEL_91;
      }
      v98 = (WTF::StringImpl **)WTF::HashSet<JSC::JSArrayBufferView *,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTableTraits>::begin(v134);
      v99 = (WTF::StringImpl **)&v16[*((unsigned int *)v16 - 1)];
      v14 = v112;
      v15 = v113;
      if (v99 != v98)
      {
        v100 = v98;
        v101 = (WTF::StringImpl **)v13;
        while (1)
        {
          v102 = *v100;
          if (*v100)
            *(_DWORD *)v102 += 2;
          v135 = v102;
          v103 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(v127, &v135, v12);
          v135 = 0;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
            {
              WTF::StringImpl::~StringImpl(v102, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
              WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
            }
            else
            {
              *(_DWORD *)v102 -= 2;
            }
          }
          if ((v103 & 1) == 0)
            goto LABEL_38;
          while (++v100 != v101)
          {
            if ((unint64_t)*v100 + 1 > 1)
              goto LABEL_105;
          }
          v100 = v101;
LABEL_105:
          if (v100 == v99)
          {
            v14 = v112;
            v15 = v113;
            break;
          }
        }
      }
    }
    if (v14 <= v15)
      goto LABEL_8;
LABEL_91:
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::resetForReparsing((uint64_t)&v114, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::parseTokens((uint64_t)&v114, v91, v92, v93, v94, v95, v96, v97);
LABEL_8:
    v17 = v115;
    v18 = v134;
    if (v134)
    {
      v54 = *((unsigned int *)v134 - 1);
      if ((_DWORD)v54)
      {
        v55 = (WTF::StringImpl **)v134;
        do
        {
          v56 = *v55;
          if (*v55 != (WTF::StringImpl *)-1)
          {
            *v55 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
              {
                WTF::StringImpl::~StringImpl(v56, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
                WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
              }
              else
              {
                *(_DWORD *)v56 -= 2;
              }
            }
          }
          ++v55;
          --v54;
        }
        while (v54);
      }
      WTF::fastFree((unint64_t)(v18 - 2), v13, (uint64_t)v12, v11, v10, v9, v8, a8);
    }
    v19 = HIDWORD(v132);
    v20 = v131;
    if (!HIDWORD(v132))
      goto LABEL_14;
    goto LABEL_10;
  }
  v17 = 1;
  v20 = v131;
  v19 = 1;
LABEL_10:
  v21 = (WTF *)((char *)v20 + 8 * v19);
  do
  {
    v22 = *(WTF::StringImpl ***)v20;
    if (*(_QWORD *)v20)
    {
      v32 = *((unsigned int *)v22 - 1);
      if ((_DWORD)v32)
      {
        v33 = *(WTF::StringImpl ***)v20;
        do
        {
          v34 = *v33;
          if (*v33 != (WTF::StringImpl *)-1)
          {
            *v33 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
              {
                WTF::StringImpl::~StringImpl(v34, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
                WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
              }
              else
              {
                *(_DWORD *)v34 -= 2;
              }
            }
          }
          ++v33;
          --v32;
        }
        while (v32);
      }
      WTF::fastFree((unint64_t)(v22 - 2), v13, (uint64_t)v12, v11, v10, v9, v8, a8);
    }
    v20 = (WTF *)((char *)v20 + 8);
  }
  while (v20 != v21);
  v20 = v131;
LABEL_14:
  if (&v133 != (uint64_t *)v20 && v20 != 0)
  {
    v131 = 0;
    LODWORD(v132) = 0;
    WTF::fastFree((unint64_t)v20, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
  }
  v24 = v128;
  if (HIDWORD(v129))
  {
    v25 = (WTF *)((char *)v128 + 8 * HIDWORD(v129));
    do
    {
      v26 = *(WTF::StringImpl ***)v24;
      if (*(_QWORD *)v24)
      {
        v43 = *((unsigned int *)v26 - 1);
        if ((_DWORD)v43)
        {
          v44 = *(WTF::StringImpl ***)v24;
          do
          {
            v45 = *v44;
            if (*v44 != (WTF::StringImpl *)-1)
            {
              *v44 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                {
                  WTF::StringImpl::~StringImpl(v45, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
                  WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
                }
                else
                {
                  *(_DWORD *)v45 -= 2;
                }
              }
            }
            ++v44;
            --v43;
          }
          while (v43);
        }
        WTF::fastFree((unint64_t)(v26 - 2), v13, (uint64_t)v12, v11, v10, v9, v8, a8);
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != v25);
    v24 = v128;
  }
  if (&v130 != (uint64_t *)v24 && v24 != 0)
  {
    v128 = 0;
    LODWORD(v129) = 0;
    WTF::fastFree((unint64_t)v24, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
  }
  v28 = v127;
  if (v127)
  {
    v65 = *((unsigned int *)v127 - 1);
    if ((_DWORD)v65)
    {
      v66 = (WTF::StringImpl **)v127;
      do
      {
        v67 = *v66;
        if (*v66 != (WTF::StringImpl *)-1)
        {
          *v66 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
            {
              WTF::StringImpl::~StringImpl(v67, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
              WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
            }
            else
            {
              *(_DWORD *)v67 -= 2;
            }
          }
        }
        ++v66;
        --v65;
      }
      while (v65);
    }
    WTF::fastFree((unint64_t)v28 - 16, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
  }
  v29 = v124;
  if (v126 != (_BYTE *)v124 && v124 != 0)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree((unint64_t)v29, v13, (uint64_t)v12, v11, v10, v9, v8, a8);
  }
  return v17;
}

size_t JSC::Yarr::unicodeMatchPropertyValue(uint64_t *a1, WTF::StringImpl **a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  char **v9;
  char *v10;
  int v11;
  unint64_t k;
  char *v13;
  size_t result;
  int8x16_t *v15;
  unsigned int v16;
  int8x16_t *v17;
  unsigned int v18;
  int v19;
  int v20;
  int16x8_t *v21;
  unsigned int v22;
  uint8x8_t *v23;
  uint16x8_t v24;
  unsigned int v25;
  uint16x8_t v26;
  int v27;
  int v28;
  uint8x16_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8x16_t v37;
  unsigned int v38;
  uint8x16_t v39;
  int v40;
  __int32 v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v46;
  unsigned int v47;
  int v48;
  WTF::StringImpl *v49;
  char *v50;
  int v51;
  unint64_t i;
  char *v53;
  int8x16_t *v54;
  unsigned int v55;
  int8x16_t *v56;
  unsigned int v57;
  int v58;
  int v59;
  int16x8_t *v60;
  unsigned int v61;
  uint8x8_t *v62;
  uint16x8_t v63;
  unsigned int v64;
  uint16x8_t v65;
  int v66;
  int v67;
  uint8x16_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8x16_t v76;
  unsigned int v77;
  uint8x16_t v78;
  int v79;
  __int32 v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v85;
  unsigned int v86;
  int v87;
  WTF::StringImpl *v88;
  char *v89;
  int v90;
  unint64_t j;
  char *v92;
  int8x16_t *v93;
  unsigned int v94;
  int8x16_t *v95;
  unsigned int v96;
  int v97;
  int v98;
  int16x8_t *v99;
  unsigned int v100;
  uint8x8_t *v101;
  uint16x8_t v102;
  unsigned int v103;
  uint16x8_t v104;
  int v105;
  int v106;
  uint8x16_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint8x16_t v115;
  unsigned int v116;
  uint8x16_t v117;
  int v118;
  __int32 v119;
  uint64_t v120;
  int v121;
  int v122;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;

  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Script", 6)
    && !WTF::equalInternal<unsigned char>(*a1, (unint64_t)"sc", 2))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Script_Extensions", 17)
      || WTF::equalInternal<unsigned char>(*a1, (unint64_t)"scx", 3))
    {
      v46 = *((_DWORD *)*a2 + 4);
      if (v46 < 0x100)
        LOWORD(v47) = WTF::StringImpl::hashSlowCase(*a2);
      else
        v47 = v46 >> 8;
      v48 = v47 & 0x1FF;
      v7 = JSC::Yarr::scriptExtensionTableIndex[2 * (v47 & 0x1FF)];
      if (v7 == 0xFFFF)
        goto LABEL_214;
      v49 = *a2;
      v9 = &JSC::Yarr::scriptExtensionTableValue;
      if (!*a2)
        goto LABEL_104;
LABEL_77:
      v50 = (char *)*((_QWORD *)v49 + 1);
      v51 = *((_DWORD *)v49 + 1);
      for (i = ((unint64_t)*((unsigned int *)v49 + 4) >> 2) & 1; ; i = 1)
      {
        v53 = (&JSC::Yarr::scriptExtensionTableValue)[2 * (__int16)v7];
        if (v53)
          result = strlen((&JSC::Yarr::scriptExtensionTableValue)[2 * (__int16)v7]);
        else
          result = 0;
        if (v50 == v53)
        {
          if (v51 == (_DWORD)result)
            goto LABEL_212;
        }
        else
        {
          if (v51 != (_DWORD)result)
            goto LABEL_86;
          if (!v51)
            goto LABEL_212;
          if (i)
          {
            if (!(_DWORD)result)
              goto LABEL_218;
            if (*v50 != *v53)
              goto LABEL_86;
            v54 = (int8x16_t *)(v50 + 1);
            v55 = result - 1;
            v56 = (int8x16_t *)(v53 + 1);
            if ((_DWORD)result != 2)
            {
              if ((_DWORD)result == 1)
                goto LABEL_212;
              v57 = 32 - __clz(result - 2);
              if (v57 != 3)
              {
                switch(v57)
                {
                  case 1u:
                    v66 = v54->u16[0];
                    v67 = v56->u16[0];
                    goto LABEL_114;
                  case 2u:
                    if (v54->u16[0] != v56->u16[0])
                      goto LABEL_86;
                    v58 = *(unsigned __int16 *)&v50[result - 2];
                    v59 = *(unsigned __int16 *)&v53[result - 2];
                    goto LABEL_94;
                  case 4u:
                    if (v54->i64[0] != v56->i64[0]
                      || *(_QWORD *)&v50[result - 8] != *(_QWORD *)&v53[result - 8])
                    {
                      goto LABEL_86;
                    }
                    goto LABEL_212;
                  case 5u:
                    v68 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v50[result - 16], *(int8x16_t *)&v53[result - 16]), vceqq_s8(*(int8x16_t *)(v50 + 1), *(int8x16_t *)(v53 + 1)));
                    v68.i8[0] = vminvq_u8(v68);
                    if (!v68.i32[0])
                      goto LABEL_86;
                    goto LABEL_212;
                  default:
                    v76 = (uint8x16_t)vceqq_s8(*v54, *v56);
                    v76.i8[0] = vminvq_u8(v76);
                    if (!v76.i32[0])
                      goto LABEL_86;
                    if (v55 < 0x10)
                      goto LABEL_212;
                    v77 = v55 & 0xF;
                    break;
                }
                while (1)
                {
                  v78 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v54 + v77), *(int8x16_t *)((char *)v56 + v77));
                  v78.i8[0] = vminvq_u8(v78);
                  if (!v78.i32[0])
                    goto LABEL_86;
                  v77 += 16;
                  if (v77 >= v55)
                    goto LABEL_212;
                }
              }
              if (v54->i32[0] != v56->i32[0])
                goto LABEL_86;
              v58 = *(_DWORD *)&v50[result - 4];
              v59 = *(_DWORD *)&v53[result - 4];
              goto LABEL_94;
            }
            if (result == 1)
              goto LABEL_218;
            v66 = v54->u8[0];
            v67 = v56->u8[0];
LABEL_114:
            if (v66 == v67)
              goto LABEL_212;
          }
          else
          {
            if (!(_DWORD)result)
              goto LABEL_218;
            if (*(_WORD *)v50 == *v53)
            {
              v60 = (int16x8_t *)(v50 + 2);
              v61 = result - 1;
              v62 = (uint8x8_t *)(v53 + 1);
              if ((result - 1) >= 8)
              {
                v63 = (uint16x8_t)vceqq_s16(*v60, (int16x8_t)vmovl_u8(*v62));
                v63.i16[0] = vminvq_u16(v63);
                if (v63.i32[0])
                {
                  v64 = v61 & 7;
                  while (1)
                  {
                    v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v60 + 2 * v64), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v62 + v64)));
                    v65.i16[0] = vminvq_u16(v65);
                    if (!v65.i32[0])
                      break;
                    v64 += 8;
                    if (v64 >= v61)
                      goto LABEL_212;
                  }
                }
                goto LABEL_86;
              }
              if (v61 < 4)
              {
                if (v61 < 2)
                {
                  if ((_DWORD)result != 2)
                    goto LABEL_212;
                  v59 = v62->u8[0];
                  v58 = v60->u16[0];
LABEL_94:
                  if (v58 == v59)
                    goto LABEL_212;
                  goto LABEL_86;
                }
                v79 = (v62->u16[0] | (v62->u16[0] << 8)) & 0xFF00FF;
                v80 = v60->i32[0];
                v81 = v61 & 1;
                v82 = (*(unsigned __int16 *)((char *)v62->u16 + v81) | (*(unsigned __int16 *)((char *)v62->u16 + v81) << 8)) & 0xFF00FF;
                v83 = *(__int32 *)((char *)v60->i32 + 2 * v81);
                if (v79 == v80 && v82 == v83)
                  goto LABEL_212;
              }
              else
              {
                v69 = (v62->u32[0] | ((unint64_t)v62->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                v70 = v60->i64[0];
                v71 = v61 & 3;
                v72 = (*(unsigned int *)((char *)v62->u32 + v71) | ((unint64_t)*(unsigned int *)((char *)v62->u32 + v71) << 16)) & 0xFFFF0000FFFFLL;
                v73 = (v72 | (v72 << 8)) & 0xFF00FF00FF00FFLL;
                v74 = *(uint64_t *)((char *)v60->i64 + 2 * v71);
                if (((v69 | (v69 << 8)) & 0xFF00FF00FF00FFLL) == v70 && v73 == v74)
                  goto LABEL_212;
              }
            }
          }
        }
LABEL_86:
        v48 = (__int16)JSC::Yarr::scriptExtensionTableIndex[2 * v48 + 1];
        if (v48 == -1)
          goto LABEL_214;
        LOWORD(v7) = JSC::Yarr::scriptExtensionTableIndex[2 * v48];
        if (v49)
          goto LABEL_77;
LABEL_104:
        v50 = 0;
        v51 = 0;
      }
    }
    if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"General_Category", 16)
      && !WTF::equalInternal<unsigned char>(*a1, (unint64_t)"gc", 2))
    {
      goto LABEL_214;
    }
    v85 = *((_DWORD *)*a2 + 4);
    if (v85 < 0x100)
      LOBYTE(v86) = WTF::StringImpl::hashSlowCase(*a2);
    else
      v86 = v85 >> 8;
    v87 = v86 & 0x7F;
    v7 = JSC::Yarr::generalCategoryTableIndex[2 * (v86 & 0x7F)];
    if (v7 == 0xFFFF)
      goto LABEL_214;
    v88 = *a2;
    v9 = &JSC::Yarr::generalCategoryTableValue;
    if (!*a2)
      goto LABEL_175;
LABEL_148:
    v89 = (char *)*((_QWORD *)v88 + 1);
    v90 = *((_DWORD *)v88 + 1);
    for (j = ((unint64_t)*((unsigned int *)v88 + 4) >> 2) & 1; ; j = 1)
    {
      v92 = (&JSC::Yarr::generalCategoryTableValue)[2 * (__int16)v7];
      if (v92)
        result = strlen((&JSC::Yarr::generalCategoryTableValue)[2 * (__int16)v7]);
      else
        result = 0;
      if (v89 == v92)
      {
        if (v90 == (_DWORD)result)
          goto LABEL_212;
      }
      else
      {
        if (v90 != (_DWORD)result)
          goto LABEL_157;
        if (!v90)
          goto LABEL_212;
        if (j)
        {
          if (!(_DWORD)result)
            goto LABEL_218;
          if (*v89 != *v92)
            goto LABEL_157;
          v93 = (int8x16_t *)(v89 + 1);
          v94 = result - 1;
          v95 = (int8x16_t *)(v92 + 1);
          if ((_DWORD)result != 2)
          {
            if ((_DWORD)result == 1)
              goto LABEL_212;
            v96 = 32 - __clz(result - 2);
            if (v96 != 3)
            {
              switch(v96)
              {
                case 1u:
                  v105 = v93->u16[0];
                  v106 = v95->u16[0];
                  goto LABEL_185;
                case 2u:
                  if (v93->u16[0] != v95->u16[0])
                    goto LABEL_157;
                  v97 = *(unsigned __int16 *)&v89[result - 2];
                  v98 = *(unsigned __int16 *)&v92[result - 2];
                  goto LABEL_165;
                case 4u:
                  if (v93->i64[0] != v95->i64[0]
                    || *(_QWORD *)&v89[result - 8] != *(_QWORD *)&v92[result - 8])
                  {
                    goto LABEL_157;
                  }
                  goto LABEL_212;
                case 5u:
                  v107 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v89[result - 16], *(int8x16_t *)&v92[result - 16]), vceqq_s8(*(int8x16_t *)(v89 + 1), *(int8x16_t *)(v92 + 1)));
                  v107.i8[0] = vminvq_u8(v107);
                  if (!v107.i32[0])
                    goto LABEL_157;
                  goto LABEL_212;
                default:
                  v115 = (uint8x16_t)vceqq_s8(*v93, *v95);
                  v115.i8[0] = vminvq_u8(v115);
                  if (!v115.i32[0])
                    goto LABEL_157;
                  if (v94 < 0x10)
                    goto LABEL_212;
                  v116 = v94 & 0xF;
                  break;
              }
              while (1)
              {
                v117 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v93 + v116), *(int8x16_t *)((char *)v95 + v116));
                v117.i8[0] = vminvq_u8(v117);
                if (!v117.i32[0])
                  goto LABEL_157;
                v116 += 16;
                if (v116 >= v94)
                  goto LABEL_212;
              }
            }
            if (v93->i32[0] != v95->i32[0])
              goto LABEL_157;
            v97 = *(_DWORD *)&v89[result - 4];
            v98 = *(_DWORD *)&v92[result - 4];
            goto LABEL_165;
          }
          if (result == 1)
          {
LABEL_218:
            __break(1u);
            return result;
          }
          v105 = v93->u8[0];
          v106 = v95->u8[0];
LABEL_185:
          if (v105 == v106)
          {
LABEL_212:
            v124 = (int)v9[2 * (__int16)v7 + 1];
            if (v124 == -1)
              goto LABEL_214;
            LOBYTE(v126) = v124 + 4;
            v125 = (v124 + 4) & 0xFFFFFF00;
            v126 = v126;
            v127 = 0x100000000;
            return v127 | v126 | v125;
          }
        }
        else
        {
          if (!(_DWORD)result)
            goto LABEL_218;
          if (*(_WORD *)v89 == *v92)
          {
            v99 = (int16x8_t *)(v89 + 2);
            v100 = result - 1;
            v101 = (uint8x8_t *)(v92 + 1);
            if ((result - 1) >= 8)
            {
              v102 = (uint16x8_t)vceqq_s16(*v99, (int16x8_t)vmovl_u8(*v101));
              v102.i16[0] = vminvq_u16(v102);
              if (v102.i32[0])
              {
                v103 = v100 & 7;
                while (1)
                {
                  v104 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v99 + 2 * v103), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v101 + v103)));
                  v104.i16[0] = vminvq_u16(v104);
                  if (!v104.i32[0])
                    break;
                  v103 += 8;
                  if (v103 >= v100)
                    goto LABEL_212;
                }
              }
              goto LABEL_157;
            }
            if (v100 < 4)
            {
              if (v100 < 2)
              {
                if ((_DWORD)result != 2)
                  goto LABEL_212;
                v98 = v101->u8[0];
                v97 = v99->u16[0];
LABEL_165:
                if (v97 == v98)
                  goto LABEL_212;
                goto LABEL_157;
              }
              v118 = (v101->u16[0] | (v101->u16[0] << 8)) & 0xFF00FF;
              v119 = v99->i32[0];
              v120 = v100 & 1;
              v121 = (*(unsigned __int16 *)((char *)v101->u16 + v120) | (*(unsigned __int16 *)((char *)v101->u16 + v120) << 8)) & 0xFF00FF;
              v122 = *(__int32 *)((char *)v99->i32 + 2 * v120);
              if (v118 == v119 && v121 == v122)
                goto LABEL_212;
            }
            else
            {
              v108 = (v101->u32[0] | ((unint64_t)v101->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v109 = v99->i64[0];
              v110 = v100 & 3;
              v111 = (*(unsigned int *)((char *)v101->u32 + v110) | ((unint64_t)*(unsigned int *)((char *)v101->u32 + v110) << 16)) & 0xFFFF0000FFFFLL;
              v112 = (v111 | (v111 << 8)) & 0xFF00FF00FF00FFLL;
              v113 = *(uint64_t *)((char *)v99->i64 + 2 * v110);
              if (((v108 | (v108 << 8)) & 0xFF00FF00FF00FFLL) == v109 && v112 == v113)
                goto LABEL_212;
            }
          }
        }
      }
LABEL_157:
      v87 = (__int16)JSC::Yarr::generalCategoryTableIndex[2 * v87 + 1];
      if (v87 == -1)
        goto LABEL_214;
      LOWORD(v7) = JSC::Yarr::generalCategoryTableIndex[2 * v87];
      if (v88)
        goto LABEL_148;
LABEL_175:
      v89 = 0;
      v90 = 0;
    }
  }
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 < 0x100)
    LOWORD(v5) = WTF::StringImpl::hashSlowCase(*a2);
  else
    v5 = v4 >> 8;
  v6 = v5 & 0x1FF;
  v7 = JSC::Yarr::scriptTableIndex[2 * (v5 & 0x1FF)];
  if (v7 != 0xFFFF)
  {
    v8 = *a2;
    v9 = &JSC::Yarr::scriptTableValue;
    if (!*a2)
      goto LABEL_34;
LABEL_7:
    v10 = (char *)*((_QWORD *)v8 + 1);
    v11 = *((_DWORD *)v8 + 1);
    for (k = ((unint64_t)*((unsigned int *)v8 + 4) >> 2) & 1; ; k = 1)
    {
      v13 = (&JSC::Yarr::scriptTableValue)[2 * (__int16)v7];
      if (v13)
        result = strlen((&JSC::Yarr::scriptTableValue)[2 * (__int16)v7]);
      else
        result = 0;
      if (v10 == v13)
      {
        if (v11 == (_DWORD)result)
          goto LABEL_212;
      }
      else
      {
        if (v11 != (_DWORD)result)
          goto LABEL_16;
        if (!v11)
          goto LABEL_212;
        if (k)
        {
          if (!(_DWORD)result)
            goto LABEL_218;
          if (*v10 != *v13)
            goto LABEL_16;
          v15 = (int8x16_t *)(v10 + 1);
          v16 = result - 1;
          v17 = (int8x16_t *)(v13 + 1);
          if ((_DWORD)result != 2)
          {
            if ((_DWORD)result == 1)
              goto LABEL_212;
            v18 = 32 - __clz(result - 2);
            if (v18 != 3)
            {
              switch(v18)
              {
                case 1u:
                  v27 = v15->u16[0];
                  v28 = v17->u16[0];
                  goto LABEL_44;
                case 2u:
                  if (v15->u16[0] != v17->u16[0])
                    goto LABEL_16;
                  v19 = *(unsigned __int16 *)&v10[result - 2];
                  v20 = *(unsigned __int16 *)&v13[result - 2];
                  goto LABEL_24;
                case 4u:
                  if (v15->i64[0] != v17->i64[0]
                    || *(_QWORD *)&v10[result - 8] != *(_QWORD *)&v13[result - 8])
                  {
                    goto LABEL_16;
                  }
                  goto LABEL_212;
                case 5u:
                  v29 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v10[result - 16], *(int8x16_t *)&v13[result - 16]), vceqq_s8(*(int8x16_t *)(v10 + 1), *(int8x16_t *)(v13 + 1)));
                  v29.i8[0] = vminvq_u8(v29);
                  if (!v29.i32[0])
                    goto LABEL_16;
                  goto LABEL_212;
                default:
                  v37 = (uint8x16_t)vceqq_s8(*v15, *v17);
                  v37.i8[0] = vminvq_u8(v37);
                  if (!v37.i32[0])
                    goto LABEL_16;
                  if (v16 < 0x10)
                    goto LABEL_212;
                  v38 = v16 & 0xF;
                  break;
              }
              while (1)
              {
                v39 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v15 + v38), *(int8x16_t *)((char *)v17 + v38));
                v39.i8[0] = vminvq_u8(v39);
                if (!v39.i32[0])
                  goto LABEL_16;
                v38 += 16;
                if (v38 >= v16)
                  goto LABEL_212;
              }
            }
            if (v15->i32[0] != v17->i32[0])
              goto LABEL_16;
            v19 = *(_DWORD *)&v10[result - 4];
            v20 = *(_DWORD *)&v13[result - 4];
            goto LABEL_24;
          }
          if (result == 1)
            goto LABEL_218;
          v27 = v15->u8[0];
          v28 = v17->u8[0];
LABEL_44:
          if (v27 == v28)
            goto LABEL_212;
        }
        else
        {
          if (!(_DWORD)result)
            goto LABEL_218;
          if (*(_WORD *)v10 == *v13)
          {
            v21 = (int16x8_t *)(v10 + 2);
            v22 = result - 1;
            v23 = (uint8x8_t *)(v13 + 1);
            if ((result - 1) >= 8)
            {
              v24 = (uint16x8_t)vceqq_s16(*v21, (int16x8_t)vmovl_u8(*v23));
              v24.i16[0] = vminvq_u16(v24);
              if (v24.i32[0])
              {
                v25 = v22 & 7;
                while (1)
                {
                  v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v21 + 2 * v25), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v23 + v25)));
                  v26.i16[0] = vminvq_u16(v26);
                  if (!v26.i32[0])
                    break;
                  v25 += 8;
                  if (v25 >= v22)
                    goto LABEL_212;
                }
              }
              goto LABEL_16;
            }
            if (v22 < 4)
            {
              if (v22 < 2)
              {
                if ((_DWORD)result != 2)
                  goto LABEL_212;
                v20 = v23->u8[0];
                v19 = v21->u16[0];
LABEL_24:
                if (v19 == v20)
                  goto LABEL_212;
                goto LABEL_16;
              }
              v40 = (v23->u16[0] | (v23->u16[0] << 8)) & 0xFF00FF;
              v41 = v21->i32[0];
              v42 = v22 & 1;
              v43 = (*(unsigned __int16 *)((char *)v23->u16 + v42) | (*(unsigned __int16 *)((char *)v23->u16 + v42) << 8)) & 0xFF00FF;
              v44 = *(__int32 *)((char *)v21->i32 + 2 * v42);
              if (v40 == v41 && v43 == v44)
                goto LABEL_212;
            }
            else
            {
              v30 = (v23->u32[0] | ((unint64_t)v23->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v31 = v21->i64[0];
              v32 = v22 & 3;
              v33 = (*(unsigned int *)((char *)v23->u32 + v32) | ((unint64_t)*(unsigned int *)((char *)v23->u32 + v32) << 16)) & 0xFFFF0000FFFFLL;
              v34 = (v33 | (v33 << 8)) & 0xFF00FF00FF00FFLL;
              v35 = *(uint64_t *)((char *)v21->i64 + 2 * v32);
              if (((v30 | (v30 << 8)) & 0xFF00FF00FF00FFLL) == v31 && v34 == v35)
                goto LABEL_212;
            }
          }
        }
      }
LABEL_16:
      v6 = (__int16)JSC::Yarr::scriptTableIndex[2 * v6 + 1];
      if (v6 == -1)
        break;
      LOWORD(v7) = JSC::Yarr::scriptTableIndex[2 * v6];
      if (v8)
        goto LABEL_7;
LABEL_34:
      v10 = 0;
      v11 = 0;
    }
  }
LABEL_214:
  v125 = 0;
  v126 = 0;
  v127 = 0;
  return v127 | v126 | v125;
}

uint64_t JSC::Yarr::unicodeMatchProperty(WTF::StringImpl **a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int8x16_t *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  unsigned int v28;
  int8x16_t *v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  __int32 v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  char *v39;
  int v40;
  unint64_t v41;
  char *v42;
  int v43;
  int16x8_t *v45;
  uint8x8_t *v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int16x8_t *v49;
  uint8x8_t *v50;
  uint16x8_t v51;
  uint16x8_t v52;
  unsigned int v53;
  int v54;
  int v55;
  int16x8_t *v56;
  unsigned int v57;
  uint8x8_t *v58;
  uint16x8_t v59;
  unsigned int v60;
  uint16x8_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint8x16_t v66;
  uint8x16_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint8x16_t v82;
  unsigned int v83;
  uint8x16_t v84;
  uint8x16_t v85;
  unsigned int v86;
  uint8x16_t v87;
  int v88;
  int v89;
  __int32 v90;
  uint64_t v91;
  int v92;
  int v93;
  __int32 v95;
  uint64_t v96;
  int v97;
  int v98;
  uint8x16_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint8x16_t v108;
  unsigned int v109;
  uint8x16_t v110;
  int v111;
  __int32 v112;
  uint64_t v113;
  int v114;
  int v115;

  v5 = *a1;
  v6 = *((_DWORD *)*a1 + 4);
  if (v6 < 0x100)
  {
    LOBYTE(v7) = WTF::StringImpl::hashSlowCase(*a1);
    v5 = *a1;
  }
  else
  {
    v7 = v6 >> 8;
  }
  v8 = v7 & 0x7F;
  v9 = JSC::Yarr::binaryPropertyTableIndex[2 * (v7 & 0x7F)];
  if (v9 == 0xFFFF)
    goto LABEL_23;
  while (1)
  {
    if (v5)
    {
      v10 = (unsigned __int16 *)*((_QWORD *)v5 + 1);
      v11 = *((unsigned int *)v5 + 1);
      v12 = ((unint64_t)*((unsigned int *)v5 + 4) >> 2) & 1;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 1;
    }
    v13 = (&JSC::Yarr::binaryPropertyTableValue)[2 * (__int16)v9];
    if (v13)
      v14 = strlen((&JSC::Yarr::binaryPropertyTableValue)[2 * (__int16)v9]);
    else
      v14 = 0;
    if (v10 == (unsigned __int16 *)v13)
    {
      if ((_DWORD)v11 == v14)
        goto LABEL_22;
      goto LABEL_14;
    }
    if ((_DWORD)v11 != v14)
      goto LABEL_14;
    if (!(_DWORD)v11)
      goto LABEL_22;
    v15 = v14;
    if (v12)
      break;
    if (!v14)
      goto LABEL_192;
    v2 = *v13;
    if (*v10 != (_DWORD)v2)
      goto LABEL_14;
    v45 = (int16x8_t *)(v10 + 1);
    v2 = v14 - 1;
    v46 = (uint8x8_t *)(v13 + 1);
    if (v2 >= 8)
    {
      v47 = (uint16x8_t)vceqq_s16(*v45, (int16x8_t)vmovl_u8(*v46));
      v47.i16[0] = vminvq_u16(v47);
      LODWORD(v3) = v47.i32[0];
      if (v47.i32[0])
      {
        LODWORD(v3) = v2 & 7;
        while (1)
        {
          v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v45 + 2 * v3), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v46 + v3)));
          v48.i16[0] = vminvq_u16(v48);
          if (!v48.i32[0])
            break;
          LODWORD(v3) = v3 + 8;
          if (v3 >= v2)
            goto LABEL_22;
        }
      }
      goto LABEL_14;
    }
    if (v2 < 4)
    {
      if (v2 < 2)
      {
        if (v14 != 2)
          goto LABEL_22;
        v19 = v46->u8[0];
        v18 = v45->u16[0];
LABEL_21:
        if (v18 == v19)
          goto LABEL_22;
        goto LABEL_14;
      }
      LODWORD(v3) = (v46->u16[0] | (v46->u16[0] << 8)) & 0xFF00FF;
      v90 = v45->i32[0];
      v91 = v2 & 1;
      v92 = (*(unsigned __int16 *)((char *)v46->u16 + v91) | (*(unsigned __int16 *)((char *)v46->u16 + v91) << 8)) & 0xFF00FF;
      v2 = 2 * v91;
      v93 = *(__int32 *)((char *)v45->i32 + v2);
      if ((_DWORD)v3 == v90 && v92 == v93)
        goto LABEL_22;
    }
    else
    {
      v68 = (v46->u32[0] | ((unint64_t)v46->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v3 = (v68 | (v68 << 8)) & 0xFF00FF00FF00FFLL;
      v69 = v45->i64[0];
      v70 = v2 & 3;
      v71 = (*(unsigned int *)((char *)v46->u32 + v70) | ((unint64_t)*(unsigned int *)((char *)v46->u32 + v70) << 16)) & 0xFFFF0000FFFFLL;
      v72 = (v71 | (v71 << 8)) & 0xFF00FF00FF00FFLL;
      v2 = 2 * v70;
      v73 = *(uint64_t *)((char *)v45->i64 + v2);
      if (v3 == v69 && v72 == v73)
        goto LABEL_22;
    }
LABEL_14:
    v8 = (__int16)JSC::Yarr::binaryPropertyTableIndex[2 * v8 + 1];
    if (v8 == -1)
      goto LABEL_23;
    LOWORD(v9) = JSC::Yarr::binaryPropertyTableIndex[2 * v8];
  }
  if (!v14)
    goto LABEL_192;
  v2 = *v13;
  if (*(unsigned __int8 *)v10 != (_DWORD)v2)
    goto LABEL_14;
  v2 = (uint64_t)v10 + 1;
  LODWORD(v3) = v14 - 1;
  v16 = (int8x16_t *)(v13 + 1);
  if (v14 != 2)
  {
    if (v14 == 1)
      goto LABEL_22;
    v17 = 32 - __clz(v14 - 2);
    if (v17 != 3)
    {
      switch(v17)
      {
        case 1u:
          v62 = *(unsigned __int16 *)v2;
          v63 = v16->u16[0];
          goto LABEL_124;
        case 2u:
          v2 = *(unsigned __int16 *)v2;
          if ((_DWORD)v2 != v16->u16[0])
            goto LABEL_14;
          v18 = *(unsigned __int16 *)((char *)v10 + v14 - 2);
          v19 = *(unsigned __int16 *)&v13[v14 - 2];
          goto LABEL_21;
        case 4u:
          v2 = *(_QWORD *)v2;
          if (v2 != v16->i64[0] || *(_QWORD *)((char *)v10 + v14 - 8) != *(_QWORD *)&v13[v14 - 8])
            goto LABEL_14;
          goto LABEL_22;
        case 5u:
          v66 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)v10 + v14 - 16), *(int8x16_t *)&v13[v14 - 16]), vceqq_s8(*(int8x16_t *)((char *)v10 + 1), *(int8x16_t *)(v13 + 1)));
          v66.i8[0] = vminvq_u8(v66);
          if (!v66.i32[0])
            goto LABEL_14;
          goto LABEL_22;
        default:
          v82 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v2, *v16);
          v82.i8[0] = vminvq_u8(v82);
          if (!v82.i32[0])
            goto LABEL_14;
          if (v3 < 0x10)
            goto LABEL_22;
          v83 = v3 & 0xF;
          break;
      }
      while (1)
      {
        v84 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v2 + v83), *(int8x16_t *)((char *)v16 + v83));
        v84.i8[0] = vminvq_u8(v84);
        if (!v84.i32[0])
          goto LABEL_14;
        v83 += 16;
        if (v83 >= v3)
          goto LABEL_22;
      }
    }
    v2 = *(unsigned int *)v2;
    if ((_DWORD)v2 != v16->i32[0])
      goto LABEL_14;
    v18 = *(_DWORD *)((char *)v10 + v14 - 4);
    v19 = *(_DWORD *)&v13[v14 - 4];
    goto LABEL_21;
  }
  if (v14 == 1)
    goto LABEL_192;
  v62 = *(unsigned __int8 *)v2;
  v63 = v16->u8[0];
LABEL_124:
  if (v62 != v63)
    goto LABEL_14;
LABEL_22:
  v20 = (int)(&JSC::Yarr::binaryPropertyTableValue)[2 * (__int16)v9 + 1];
  if (v20 != -1)
    goto LABEL_46;
LABEL_23:
  v21 = *((_DWORD *)v5 + 4);
  if (v21 < 0x100)
    LOBYTE(v22) = WTF::StringImpl::hashSlowCase(v5);
  else
    v22 = v21 >> 8;
  v23 = v22 & 0x7F;
  v24 = JSC::Yarr::generalCategoryTableIndex[2 * (v22 & 0x7F)];
  if (v24 == 0xFFFF)
    goto LABEL_47;
  v25 = *a1;
  while (2)
  {
    if (v25)
    {
      v26 = (WTF::StringImpl *)*((_QWORD *)v25 + 1);
      v11 = *((unsigned int *)v25 + 1);
      v27 = ((unint64_t)*((unsigned int *)v25 + 4) >> 2) & 1;
    }
    else
    {
      v26 = 0;
      v11 = 0;
      v27 = 1;
    }
    v5 = (WTF::StringImpl *)(&JSC::Yarr::generalCategoryTableValue)[2 * (__int16)v24];
    if (v5)
      v28 = strlen((&JSC::Yarr::generalCategoryTableValue)[2 * (__int16)v24]);
    else
      v28 = 0;
    if (v26 == v5)
    {
      if ((_DWORD)v11 == v28)
        goto LABEL_45;
      goto LABEL_37;
    }
    if ((_DWORD)v11 != v28)
      goto LABEL_37;
    if (!(_DWORD)v11)
      goto LABEL_45;
    v15 = v28;
    if (!v27)
    {
      if (!v28)
        goto LABEL_192;
      v2 = *(unsigned __int8 *)v5;
      if (*(unsigned __int16 *)v26 != (_DWORD)v2)
        goto LABEL_37;
      v49 = (int16x8_t *)((char *)v26 + 2);
      v2 = v28 - 1;
      v50 = (uint8x8_t *)((char *)v5 + 1);
      if (v2 < 8)
      {
        if (v2 >= 4)
        {
          v75 = (v50->u32[0] | ((unint64_t)v50->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v3 = (v75 | (v75 << 8)) & 0xFF00FF00FF00FFLL;
          v76 = v49->i64[0];
          v77 = v2 & 3;
          v78 = (*(unsigned int *)((char *)v50->u32 + v77) | ((unint64_t)*(unsigned int *)((char *)v50->u32 + v77) << 16)) & 0xFFFF0000FFFFLL;
          v79 = (v78 | (v78 << 8)) & 0xFF00FF00FF00FFLL;
          v2 = 2 * v77;
          v80 = *(uint64_t *)((char *)v49->i64 + v2);
          if (v3 == v76 && v79 == v80)
            goto LABEL_45;
          goto LABEL_37;
        }
        if (v2 >= 2)
        {
          LODWORD(v3) = (v50->u16[0] | (v50->u16[0] << 8)) & 0xFF00FF;
          v95 = v49->i32[0];
          v96 = v2 & 1;
          v97 = (*(unsigned __int16 *)((char *)v50->u16 + v96) | (*(unsigned __int16 *)((char *)v50->u16 + v96) << 8)) & 0xFF00FF;
          v2 = 2 * v96;
          v98 = *(__int32 *)((char *)v49->i32 + v2);
          if ((_DWORD)v3 == v95 && v97 == v98)
            goto LABEL_45;
          goto LABEL_37;
        }
        if (v28 != 2)
          goto LABEL_45;
        v32 = v50->u8[0];
        v31 = v49->u16[0];
        goto LABEL_44;
      }
      v51 = (uint16x8_t)vceqq_s16(*v49, (int16x8_t)vmovl_u8(*v50));
      v51.i16[0] = vminvq_u16(v51);
      LODWORD(v3) = v51.i32[0];
      if (v51.i32[0])
      {
        LODWORD(v3) = v2 & 7;
        while (1)
        {
          v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v49 + 2 * v3), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v50 + v3)));
          v52.i16[0] = vminvq_u16(v52);
          if (!v52.i32[0])
            break;
          LODWORD(v3) = v3 + 8;
          if (v3 >= v2)
            goto LABEL_45;
        }
      }
LABEL_37:
      v23 = (__int16)JSC::Yarr::generalCategoryTableIndex[2 * v23 + 1];
      if (v23 == -1)
        goto LABEL_47;
      LOWORD(v24) = JSC::Yarr::generalCategoryTableIndex[2 * v23];
      continue;
    }
    break;
  }
  if (!v28)
    goto LABEL_192;
  v2 = *(unsigned __int8 *)v5;
  if (*(unsigned __int8 *)v26 != (_DWORD)v2)
    goto LABEL_37;
  v2 = (uint64_t)v26 + 1;
  LODWORD(v3) = v28 - 1;
  v29 = (int8x16_t *)((char *)v5 + 1);
  if (v28 != 2)
  {
    if (v28 == 1)
      goto LABEL_45;
    v30 = 32 - __clz(v28 - 2);
    if (v30 == 3)
    {
      v2 = *(unsigned int *)v2;
      if ((_DWORD)v2 == v29->i32[0])
      {
        v31 = *(_DWORD *)((char *)v26 + v28 - 4);
        v32 = *(_DWORD *)((char *)v5 + v28 - 4);
LABEL_44:
        if (v31 == v32)
          goto LABEL_45;
        goto LABEL_37;
      }
    }
    else
    {
      switch(v30)
      {
        case 1u:
          v64 = *(unsigned __int16 *)v2;
          v65 = v29->u16[0];
          goto LABEL_127;
        case 2u:
          v2 = *(unsigned __int16 *)v2;
          if ((_DWORD)v2 != v29->u16[0])
            goto LABEL_37;
          v31 = *(unsigned __int16 *)((char *)v26 + v28 - 2);
          v32 = *(unsigned __int16 *)((char *)v5 + v28 - 2);
          goto LABEL_44;
        case 4u:
          v2 = *(_QWORD *)v2;
          if (v2 != v29->i64[0] || *(_QWORD *)((char *)v26 + v28 - 8) != *(_QWORD *)((char *)v5 + v28 - 8))
            goto LABEL_37;
          goto LABEL_45;
        case 5u:
          v67 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)v26 + v28 - 16), *(int8x16_t *)((char *)v5 + v28 - 16)), vceqq_s8(*(int8x16_t *)((char *)v26 + 1), *(int8x16_t *)((char *)v5 + 1)));
          v67.i8[0] = vminvq_u8(v67);
          if (!v67.i32[0])
            goto LABEL_37;
          goto LABEL_45;
        default:
          v85 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v2, *v29);
          v85.i8[0] = vminvq_u8(v85);
          if (!v85.i32[0])
            goto LABEL_37;
          if (v3 < 0x10)
            goto LABEL_45;
          v86 = v3 & 0xF;
          break;
      }
      while (1)
      {
        v87 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v2 + v86), *(int8x16_t *)((char *)v29 + v86));
        v87.i8[0] = vminvq_u8(v87);
        if (!v87.i32[0])
          break;
        v86 += 16;
        if (v86 >= v3)
          goto LABEL_45;
      }
    }
    goto LABEL_37;
  }
  if (v28 == 1)
    goto LABEL_192;
  v64 = *(unsigned __int8 *)v2;
  v65 = v29->u8[0];
LABEL_127:
  if (v64 != v65)
    goto LABEL_37;
LABEL_45:
  v20 = (int)(&JSC::Yarr::generalCategoryTableValue)[2 * (__int16)v24 + 1];
  if (v20 != -1)
    goto LABEL_46;
LABEL_47:
  if (a2 != 2)
    goto LABEL_61;
  v36 = *((_DWORD *)*a1 + 4);
  if (v36 < 0x100)
    LOBYTE(v37) = WTF::StringImpl::hashSlowCase(*a1);
  else
    v37 = v36 >> 8;
  v11 = JSC::Yarr::sequencePropertyTableIndex[2 * (v37 & 0xF)];
  if (v11 == -1)
    goto LABEL_61;
  v38 = *a1;
  if (*a1)
  {
    v39 = (char *)*((_QWORD *)v38 + 1);
    v40 = *((_DWORD *)v38 + 1);
    v41 = ((unint64_t)*((unsigned int *)v38 + 4) >> 2) & 1;
  }
  else
  {
    v39 = 0;
    v40 = 0;
    v41 = 1;
  }
  v15 = 16 * v11;
  v5 = (WTF::StringImpl *)&JSC::Yarr::sequencePropertyTableValue;
  v42 = (&JSC::Yarr::sequencePropertyTableValue)[2 * v11];
  if (v42)
    v43 = strlen((&JSC::Yarr::sequencePropertyTableValue)[2 * v11]);
  else
    v43 = 0;
  if (v39 == v42)
  {
    if (v40 != v43)
      goto LABEL_61;
    goto LABEL_90;
  }
  if (v40 != v43)
  {
LABEL_61:
    v33 = 0;
LABEL_62:
    v34 = 0;
    goto LABEL_63;
  }
  if (!v40)
    goto LABEL_90;
  if (v41)
  {
    if (v43)
    {
      if (*v39 != *v42)
        goto LABEL_61;
      v2 = (uint64_t)(v39 + 1);
      LODWORD(v3) = v43 - 1;
      v15 = (uint64_t)(v42 + 1);
      if (v43 != 2)
      {
        if (v43 != 1)
        {
          v53 = 32 - __clz(v43 - 2);
          if (v53 == 3)
          {
            if (*(_DWORD *)v2 != *(_DWORD *)v15)
              goto LABEL_61;
            v54 = *(_DWORD *)&v39[v43 - 4];
            v55 = *(_DWORD *)&v42[v43 - 4];
          }
          else
          {
            switch(v53)
            {
              case 1u:
                v88 = *(unsigned __int16 *)v2;
                v89 = *(unsigned __int16 *)v15;
                goto LABEL_166;
              case 2u:
                if (*(unsigned __int16 *)v2 != *(unsigned __int16 *)v15)
                  goto LABEL_61;
                v54 = *(unsigned __int16 *)&v39[v43 - 2];
                v55 = *(unsigned __int16 *)&v42[v43 - 2];
                break;
              case 4u:
                if (*(_QWORD *)v2 != *(_QWORD *)v15 || *(_QWORD *)&v39[v43 - 8] != *(_QWORD *)&v42[v43 - 8])
                  goto LABEL_61;
                goto LABEL_90;
              case 5u:
                v100 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v39[v43 - 16], *(int8x16_t *)&v42[v43 - 16]), vceqq_s8(*(int8x16_t *)(v39 + 1), *(int8x16_t *)(v42 + 1)));
                v100.i8[0] = vminvq_u8(v100);
                v33 = v100.i32[0];
                if (!v100.i32[0])
                  goto LABEL_62;
                goto LABEL_90;
              default:
                goto LABEL_193;
            }
          }
LABEL_89:
          if (v54 != v55)
            goto LABEL_61;
        }
        goto LABEL_90;
      }
      if (v43 != 1)
      {
        v88 = *(unsigned __int8 *)v2;
        v89 = *(unsigned __int8 *)v15;
LABEL_166:
        if (v88 != v89)
          goto LABEL_61;
        goto LABEL_90;
      }
    }
LABEL_192:
    __break(1u);
LABEL_193:
    v108 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v2, *(int8x16_t *)v15);
    v108.i8[0] = vminvq_u8(v108);
    v34 = v108.i32[0];
    if (v108.i32[0])
    {
      if (v3 < 0x10)
        goto LABEL_90;
      v109 = v3 & 0xF;
      while (1)
      {
        v110 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v2 + v109), *(int8x16_t *)(v15 + v109));
        v110.i8[0] = vminvq_u8(v110);
        if (!v110.i32[0])
          goto LABEL_61;
        v109 += 16;
        if (v109 >= v3)
          goto LABEL_90;
      }
    }
    v33 = 0;
LABEL_63:
    v35 = 0;
  }
  else
  {
    if (!v43)
      goto LABEL_192;
    if (*(_WORD *)v39 != *v42)
      goto LABEL_61;
    v56 = (int16x8_t *)(v39 + 2);
    v57 = v43 - 1;
    v58 = (uint8x8_t *)(v42 + 1);
    if ((v43 - 1) >= 8)
    {
      v59 = (uint16x8_t)vceqq_s16(*v56, (int16x8_t)vmovl_u8(*v58));
      v59.i16[0] = vminvq_u16(v59);
      if (v59.i32[0])
      {
        v60 = v57 & 7;
        while (1)
        {
          v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v56 + 2 * v60), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v58 + v60)));
          v61.i16[0] = vminvq_u16(v61);
          if (!v61.i32[0])
            break;
          v60 += 8;
          if (v60 >= v57)
            goto LABEL_90;
        }
      }
      goto LABEL_61;
    }
    if (v57 < 4)
    {
      if (v57 < 2)
      {
        if (v43 == 2)
        {
          v55 = v58->u8[0];
          v54 = v56->u16[0];
          goto LABEL_89;
        }
      }
      else
      {
        v111 = (v58->u16[0] | (v58->u16[0] << 8)) & 0xFF00FF;
        v112 = v56->i32[0];
        v113 = v57 & 1;
        v114 = (*(unsigned __int16 *)((char *)v58->u16 + v113) | (*(unsigned __int16 *)((char *)v58->u16 + v113) << 8)) & 0xFF00FF;
        v115 = *(__int32 *)((char *)v56->i32 + 2 * v113);
        if (v111 != v112 || v114 != v115)
          goto LABEL_61;
      }
    }
    else
    {
      v101 = (v58->u32[0] | ((unint64_t)v58->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v102 = v56->i64[0];
      v103 = v57 & 3;
      v104 = (*(unsigned int *)((char *)v58->u32 + v103) | ((unint64_t)*(unsigned int *)((char *)v58->u32 + v103) << 16)) & 0xFFFF0000FFFFLL;
      v105 = (v104 | (v104 << 8)) & 0xFF00FF00FF00FFLL;
      v106 = *(uint64_t *)((char *)v56->i64 + 2 * v103);
      if (((v101 | (v101 << 8)) & 0xFF00FF00FF00FFLL) != v102 || v105 != v106)
        goto LABEL_61;
    }
LABEL_90:
    v20 = *((_DWORD *)v5 + 4 * v11 + 2);
    if (v20 == -1)
      goto LABEL_61;
LABEL_46:
    LOBYTE(v34) = v20 + 4;
    v33 = (v20 + 4) & 0xFFFFFF00;
    v34 = v34;
    v35 = 0x100000000;
  }
  return v35 | v34 | v33;
}

BOOL JSC::Yarr::characterClassMayContainStrings(int a1)
{
  return (a1 - 329) < 7;
}

void JSC::Yarr::PatternDisjunction::addNewAlternative(uint64_t a1, int a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  WTF *v22;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 28) = a2;
  *(_DWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 36) = a3;
  *(_BYTE *)(v6 + 37) &= 0xF0u;
  v22 = (WTF *)v6;
  v7 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 8))
  {
    v8 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v7 + 1, (unint64_t)&v22);
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(_QWORD *)a1;
    v18 = *v8;
    *v8 = 0;
    *(_QWORD *)(v17 + 8 * v16) = v18;
    v19 = v22;
    v20 = v16 + 1;
    *(_DWORD *)(a1 + 12) = v20;
    v22 = 0;
    if (v19)
    {
      v21 = *(_QWORD *)v19;
      if (*(_QWORD *)v19)
      {
        *(_QWORD *)v19 = 0;
        *((_DWORD *)v19 + 2) = 0;
        WTF::fastFree(v21, v9, v10, v11, v12, v13, v14, v15);
      }
      WTF::fastFree((unint64_t)v19, v9, v10, v11, v12, v13, v14, v15);
      v20 = *(_DWORD *)(a1 + 12);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = v6;
    v20 = v7 + 1;
    *(_DWORD *)(a1 + 12) = v20;
  }
  if (!v20)
    __break(0xC471u);
}

uint64_t *WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::PatternDisjunction>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::YarrPatternConstructor::containsCapturingTerms(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= a3)
  {
    return 0;
  }
  else
  {
    v5 = a2;
    v6 = (uint64_t *)result;
    v7 = 1;
    while (1)
    {
      if (v5 >= *((unsigned int *)v6 + 3))
      {
        __break(0xC471u);
        return result;
      }
      v8 = *v6;
      if ((*(_BYTE *)(*v6 + 48 * v5 + 1) & 1) != 0)
        return v7;
      if (*(_BYTE *)(v8 + 48 * v5) == 7)
      {
        v10 = *(_QWORD *)(v8 + 48 * v5 + 16);
        if (*(_DWORD *)(v10 + 12))
          break;
      }
LABEL_6:
      v7 = ++v5 < a3;
      if (v5 == a3)
        return v7;
    }
    v9 = 0;
    while (1)
    {
      result = JSC::Yarr::YarrPatternConstructor::containsCapturingTerms(*(JSC::Yarr::YarrPatternConstructor **)(*(_QWORD *)v10 + 8 * v9), 0, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v10 + 8 * v9) + 12), a4);
      if ((result & 1) != 0)
        break;
      if (++v9 >= (unint64_t)*(unsigned int *)(v10 + 12))
        goto LABEL_6;
    }
  }
  return v7;
}

uint64_t WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)result + 48 * a2;
  v3 = *(_DWORD *)(result + 12);
  v4 = *(_QWORD *)result + 48 * v3;
  if (v2 + 48 != v4)
  {
    v5 = *(_QWORD *)result + 48 * a2;
    do
    {
      v6 = *(_WORD *)(v5 + 48);
      v5 += 48;
      *(_WORD *)v2 = v6;
      *(_BYTE *)(v2 + 2) = *(_BYTE *)(v2 + 50);
      v7 = *(_DWORD *)(v2 + 56);
      *(_DWORD *)(v2 + 4) = *(_DWORD *)(v2 + 52);
      *(_DWORD *)(v2 + 8) = v7;
      v8 = *(_OWORD *)(v2 + 80);
      v9 = v2 + 96;
      *(_OWORD *)(v2 + 16) = *(_OWORD *)(v2 + 64);
      *(_OWORD *)(v2 + 32) = v8;
      v2 = v5;
    }
    while (v9 != v4);
    v3 = *(_DWORD *)(result + 12);
  }
  *(_DWORD *)(result + 12) = v3 - 1;
  return result;
}

__n128 WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __n128 result;
  __int128 v7;

  v3 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v5 = *(_WORD *)v3;
  *(_BYTE *)(v4 + 2) = *(_BYTE *)(v3 + 2);
  *(_WORD *)v4 = v5;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(v3 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(v3 + 8);
  result = *(__n128 *)(v3 + 16);
  v7 = *(_OWORD *)(v3 + 32);
  *(__n128 *)(v4 + 16) = result;
  *(_OWORD *)(v4 + 32) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int16 v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 48 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x5555556)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 48 * v8;
    v11 = WTF::fastMalloc((WTF *)(48 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v19 = v5;
      do
      {
        v20 = *(_WORD *)v19;
        *(_BYTE *)(v11 + 2) = *(_BYTE *)(v19 + 2);
        *(_WORD *)v11 = v20;
        *(_DWORD *)(v11 + 4) = *(_DWORD *)(v19 + 4);
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v19 + 8);
        v21 = *(_OWORD *)(v19 + 32);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)(v19 + 16);
        *(_OWORD *)(v11 + 32) = v21;
        v19 += 48;
        v11 += 48;
      }
      while (v19 != v5 + 48 * v9);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 48 * v4;
      v9 = WTF::fastMalloc((WTF *)(48 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = v6;
        do
        {
          v18 = *(_WORD *)v17;
          *(_BYTE *)(v9 + 2) = *(_BYTE *)(v17 + 2);
          *(_WORD *)v9 = v18;
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(v17 + 4);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
          v19 = *(_OWORD *)(v17 + 32);
          *(_OWORD *)(v9 + 16) = *(_OWORD *)(v17 + 16);
          *(_OWORD *)(v9 + 32) = v19;
          v17 += 48;
          v9 += 48;
        }
        while (v17 != v6 + 48 * v7);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::Yarr::YarrPatternConstructor::copyDisjunction(JSC::Yarr::YarrPatternConstructor *this, JSC::Yarr::PatternDisjunction *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::PatternDisjunction *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48[4];
  WTF *v49;
  __int16 v50;
  unsigned __int8 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)&v47 < *((_QWORD *)this + 18))
  {
    *((_BYTE *)this + 152) = 1;
    return;
  }
  v9 = a2;
  v49 = 0;
  v10 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v10)
  {
    v11 = a3;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = *(uint64_t **)(*(_QWORD *)v9 + 8 * v12);
      if (!v11 || (*((_BYTE *)v15 + 37) & 4) == 0 || *((_BYTE *)v15 + 36) == 1)
        break;
LABEL_7:
      if (++v12 >= v10)
      {
        if (*((_BYTE *)this + 152))
          goto LABEL_46;
        if (v13)
        {
          v32 = *(_QWORD *)this;
          v33 = *(unsigned int *)(v32 + 36);
          if ((_DWORD)v33 == *(_DWORD *)(v32 + 32))
          {
            v43 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v33 + 1, (unint64_t)&v49);
            v44 = *(unsigned int *)(v32 + 36);
            v34 = v44 + 1;
            v45 = *(_QWORD *)(v32 + 24);
            v46 = *v43;
            *v43 = 0;
            *(_QWORD *)(v45 + 8 * v44) = v46;
          }
          else
          {
            v34 = v33 + 1;
            v35 = *(_QWORD *)(v32 + 24);
            v49 = 0;
            *(_QWORD *)(v35 + 8 * v33) = v13;
          }
          *(_DWORD *)(v32 + 36) = v34;
          goto LABEL_29;
        }
        return;
      }
    }
    if (!v14)
    {
      v13 = WTF::fastMalloc((WTF *)0x28);
      *(_BYTE *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v49 = (WTF *)v13;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v9 + 2);
    }
    JSC::Yarr::PatternDisjunction::addNewAlternative(v13, *((_DWORD *)v15 + 7), *((_BYTE *)v15 + 36));
    v17 = v16;
    *(_DWORD *)(v16 + 32) = *((_DWORD *)v15 + 8);
    v18 = *((unsigned int *)v15 + 3);
    if ((_DWORD)v18)
    {
      if (v18 >= 0x5555556)
      {
        __break(0xC471u);
        return;
      }
      v19 = 48 * v18;
      v20 = WTF::fastMalloc((WTF *)(48 * v18));
      v21 = (v19 & 0xFFFFFFF0) / 0x30uLL;
      v22 = *((unsigned int *)v15 + 3);
      if ((_DWORD)v22)
      {
        v47 = v21;
        *(_DWORD *)v48 = v11;
        v23 = 0;
        v24 = *v15;
        v25 = 48 * v22;
        v26 = ((unint64_t)(16 * v22 - 16) >> 4) + 1;
        do
        {
          v27 = (unsigned __int8 *)(v24 + v23);
          if ((unint64_t)&v47 < *((_QWORD *)this + 18))
          {
            *((_BYTE *)this + 152) = 1;
            v50 = *(_WORD *)v27;
            v51 = v27[2];
            v29 = *(_QWORD *)(v27 + 4);
            a2 = (JSC::Yarr::PatternDisjunction *)*((_QWORD *)v27 + 2);
            v52 = *(_OWORD *)(v27 + 24);
            v53 = *((_QWORD *)v27 + 5);
          }
          else
          {
            v28 = *v27 - 7;
            v50 = *(_WORD *)v27;
            v51 = v27[2];
            v29 = *(_QWORD *)(v27 + 4);
            a2 = (JSC::Yarr::PatternDisjunction *)*((_QWORD *)v27 + 2);
            v52 = *(_OWORD *)(v27 + 24);
            v53 = *((_QWORD *)v27 + 5);
            if (v28 <= 1)
            {
              a2 = (JSC::Yarr::PatternDisjunction *)JSC::Yarr::YarrPatternConstructor::copyDisjunction(this, a2, v48[0]);
              **(_BYTE **)this |= 0x10u;
            }
          }
          v30 = v20 + v23;
          *(_WORD *)v30 = v50;
          *(_BYTE *)(v30 + 2) = v51;
          *(_QWORD *)(v30 + 4) = v29;
          *(_QWORD *)(v30 + 16) = a2;
          *(_OWORD *)(v30 + 24) = v52;
          *(_QWORD *)(v30 + 40) = v53;
          v23 += 48;
        }
        while (v25 != v23);
        v11 = *(_DWORD *)v48;
        LODWORD(v21) = v47;
        goto LABEL_20;
      }
    }
    else
    {
      LODWORD(v21) = 0;
      v20 = 0;
    }
    v26 = 0;
LABEL_20:
    v31 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
    {
      *(_QWORD *)v17 = 0;
      *(_DWORD *)(v17 + 8) = 0;
      WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)v17 = v20;
    *(_DWORD *)(v17 + 8) = v21;
    *(_DWORD *)(v17 + 12) = v26;
    v10 = *((unsigned int *)v9 + 3);
    v14 = v13;
    goto LABEL_7;
  }
  if (*((_BYTE *)this + 152))
  {
LABEL_46:
    std::unique_ptr<JSC::Yarr::PatternDisjunction>::operator=[abi:sn180100]((unint64_t *)&v49, a2, a3, a4, a5, a6, a7, a8);
LABEL_29:
    v36 = v49;
    v49 = 0;
    if (v36)
    {
      v37 = *((unsigned int *)v36 + 3);
      if ((_DWORD)v37)
      {
        v38 = *(unint64_t **)v36;
        v39 = 8 * v37;
        do
        {
          v40 = *v38;
          *v38 = 0;
          if (v40)
          {
            v41 = *(_QWORD *)v40;
            if (*(_QWORD *)v40)
            {
              *(_QWORD *)v40 = 0;
              *(_DWORD *)(v40 + 8) = 0;
              WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
          }
          ++v38;
          v39 -= 8;
        }
        while (v39);
      }
      v42 = *(_QWORD *)v36;
      if (*(_QWORD *)v36)
      {
        *(_QWORD *)v36 = 0;
        *((_DWORD *)v36 + 2) = 0;
        WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree((unint64_t)v36, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

unint64_t *std::unique_ptr<JSC::Yarr::PatternDisjunction>::operator=[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
    {
      v11 = *(unint64_t **)v9;
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
          {
            *(_QWORD *)v13 = 0;
            *(_DWORD *)(v13 + 8) = 0;
            WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    v15 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

__n128 JSC::Yarr::YarrPatternConstructor::copyTerm(JSC::Yarr::YarrPatternConstructor *this, JSC::Yarr::PatternTerm *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  __n128 result;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((unint64_t)&v15 < *((_QWORD *)a2 + 18))
  {
    *((_BYTE *)a2 + 152) = 1;
    *(_WORD *)this = *(_WORD *)a3;
    *((_BYTE *)this + 2) = a3[2];
    *(_QWORD *)((char *)this + 4) = *(_QWORD *)(a3 + 4);
    result = *((__n128 *)a3 + 1);
    v14 = *((_OWORD *)a3 + 2);
    *((__n128 *)this + 1) = result;
    *((_OWORD *)this + 2) = v14;
  }
  else
  {
    v9 = *a3 - 7;
    *(_WORD *)this = *(_WORD *)a3;
    *((_BYTE *)this + 2) = a3[2];
    *(_QWORD *)((char *)this + 4) = *(_QWORD *)(a3 + 4);
    result = *((__n128 *)a3 + 1);
    v11 = *((_OWORD *)a3 + 2);
    *((__n128 *)this + 1) = result;
    *((_OWORD *)this + 2) = v11;
    if (v9 <= 1)
    {
      v12 = (_QWORD *)((char *)this + 16);
      JSC::Yarr::YarrPatternConstructor::copyDisjunction(a2, *((JSC::Yarr::PatternDisjunction **)this + 2), 0, a4, a5, a6, a7, a8);
      *v12 = v13;
      **(_BYTE **)a2 |= 0x10u;
    }
  }
  return result;
}

uint64_t JSC::Yarr::YarrPatternConstructor::setupAlternativeOffsets(_QWORD *a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  _BYTE **v25;
  uint64_t result;
  unsigned int v27;
  char v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  _BYTE **v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  _BYTE **v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  _BYTE **v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;

  if ((unint64_t)&v74 < a1[18])
    return 26;
  *((_BYTE *)a2 + 37) |= 2u;
  if (*((_DWORD *)a2 + 3))
  {
    v6 = 0;
    v7 = a4;
    while (1)
    {
      v8 = *a2;
      switch(*(_BYTE *)(*a2 + 48 * v6))
      {
        case 0:
        case 1:
        case 2:
          *(_DWORD *)(v8 + 48 * v6 + 40) = v7;
          goto LABEL_8;
        case 3:
          v9 = v8 + 48 * v6;
          *(_DWORD *)(v9 + 40) = v7;
          if (*(_BYTE *)(v9 + 2))
            goto LABEL_16;
          v10 = *(unsigned int *)(v8 + 48 * v6 + 8);
          if ((*(_WORD *)(*a1 + 2) & 0x60) == 0)
            goto LABEL_7;
          v73 = v10 << (*(_WORD *)(v8 + 48 * v6 + 18) != 0);
          if (!HIDWORD(v73))
          {
            v11 = __CFADD__(v7, (_DWORD)v73);
            v7 += v73;
            if (!v11)
              goto LABEL_8;
          }
          return 27;
        case 4:
          v12 = v8 + 48 * v6;
          *(_DWORD *)(v12 + 40) = v7;
          if (*(_BYTE *)(v12 + 2))
          {
LABEL_16:
            *(_DWORD *)(v8 + 48 * v6 + 44) = a3;
            a3 += 2;
            goto LABEL_17;
          }
          if ((*(_WORD *)(*a1 + 2) & 0x60) == 0)
          {
            v13 = *(_DWORD *)(v8 + 48 * v6 + 8);
            goto LABEL_13;
          }
          v58 = v8 + 48 * v6;
          *(_DWORD *)(v58 + 44) = a3;
          a3 += 2;
          v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 16) + 88);
          if ((v59 - 1) > 1 || (*(_BYTE *)(v8 + 48 * v6 + 1) & 2) != 0)
          {
            v13 = *(_DWORD *)(v8 + 48 * v6 + 8);
            *((_BYTE *)a2 + 37) &= ~2u;
LABEL_13:
            v11 = __CFADD__(v7, v13);
            v7 += v13;
            if (v11)
              return 27;
            goto LABEL_8;
          }
          v10 = (unint64_t)*(unsigned int *)(v8 + 48 * v6 + 8) << (v59 >> 1);
          if (HIDWORD(v10))
            return 27;
LABEL_7:
          v11 = __CFADD__(v7, (_DWORD)v10);
          v7 += v10;
          if (v11)
            return 27;
          goto LABEL_8;
        case 5:
          v71 = v8 + 48 * v6;
          *(_DWORD *)(v71 + 40) = v7;
          *(_DWORD *)(v71 + 44) = a3;
          a3 += 3;
          goto LABEL_17;
        case 7:
          v14 = v8 + 48 * v6;
          *(_DWORD *)(v14 + 44) = a3;
          v15 = *(_DWORD *)(v14 + 8) == 1;
          v79 = a5;
          v78 = a4;
          if (v15)
          {
            v30 = *(_BYTE *)(v14 + 32);
            if ((v30 & 1) == 0)
            {
              if ((unint64_t)&v74 < a1[18])
                return 26;
              v16 = v14 + 16;
              v17 = *(_QWORD *)(v14 + 16);
              v18 = *(_DWORD *)(v17 + 12);
              if (*(_QWORD *)(*a1 + 16) != v17 && v18 > 1)
                v20 = a3 + 1;
              else
                v20 = a3;
              v75 = v16;
              v76 = a2;
              if (v18)
              {
                v21 = 0;
                a3 = 0;
                v77 = v20 + 2;
                v22 = -1;
                LOBYTE(v23) = 1;
                while (1)
                {
                  v24 = *(_QWORD *)(*(_QWORD *)v17 + 8 * v21);
                  v80 = 0;
                  v25 = (_BYTE **)a1;
                  result = JSC::Yarr::YarrPatternConstructor::setupAlternativeOffsets((JSC::Yarr::YarrPatternConstructor *)a1, (JSC::Yarr::PatternAlternative *)v24, v77, v7, &v80);
                  if ((_DWORD)result)
                    return result;
                  v27 = *(_DWORD *)(v24 + 24);
                  if (v27 < v22)
                    v22 = *(_DWORD *)(v24 + 24);
                  if (a3 <= v80)
                    a3 = v80;
                  v28 = *(_BYTE *)(v24 + 37);
                  if ((v27 & 0x80000000) != 0)
                    **v25 |= 8u;
                  v23 &= (v28 & 2) >> 1;
                  ++v21;
                  a1 = v25;
                  if (v21 >= *(unsigned int *)(v17 + 12))
                    goto LABEL_38;
                }
              }
              a3 = 0;
              LOBYTE(v23) = 1;
              v22 = -1;
LABEL_38:
              *(_BYTE *)(v17 + 32) = v23;
              *(_DWORD *)(v17 + 24) = v22;
              *(_DWORD *)(v17 + 28) = a3;
              if (*(_BYTE *)(v8 + 48 * v6 + 2))
              {
                a5 = v79;
                a4 = v78;
                goto LABEL_48;
              }
              a2 = v76;
              v29 = *(_DWORD *)(*(_QWORD *)v75 + 24);
              v11 = __CFADD__(v7, v29);
              v7 += v29;
              a5 = v79;
              a4 = v78;
              if (v11)
              {
                __break(0xC471u);
                JUMPOUT(0x198EA9CB8);
              }
LABEL_40:
              *(_DWORD *)(v8 + 48 * v6 + 40) = v7;
              goto LABEL_17;
            }
          }
          else
          {
            v30 = *(_BYTE *)(v14 + 32);
          }
          v31 = v8 + 48 * v6 + 16;
          if ((v30 & 2) != 0)
          {
            if ((unint64_t)&v74 < a1[18])
              return 26;
            v76 = a2;
            v60 = *(_QWORD *)v31;
            v61 = *(_DWORD *)(*(_QWORD *)v31 + 12);
            if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)v31 && v61 > 1)
              v63 = a3 + 1;
            else
              v63 = a3;
            if (v61)
            {
              v64 = 0;
              a3 = 0;
              v77 = v63 + 1;
              v65 = -1;
              LOBYTE(v66) = 1;
              while (1)
              {
                v67 = *(_QWORD *)(*(_QWORD *)v60 + 8 * v64);
                v80 = 0;
                v68 = (_BYTE **)a1;
                result = JSC::Yarr::YarrPatternConstructor::setupAlternativeOffsets((JSC::Yarr::YarrPatternConstructor *)a1, (JSC::Yarr::PatternAlternative *)v67, v77, v7, &v80);
                if ((_DWORD)result)
                  return result;
                v69 = *(_DWORD *)(v67 + 24);
                if (v69 < v65)
                  v65 = *(_DWORD *)(v67 + 24);
                if (a3 <= v80)
                  a3 = v80;
                v70 = *(_BYTE *)(v67 + 37);
                if ((v69 & 0x80000000) != 0)
                  **v68 |= 8u;
                v66 &= (v70 & 2) >> 1;
                ++v64;
                a1 = v68;
                if (v64 >= *(unsigned int *)(v60 + 12))
                  goto LABEL_111;
              }
            }
            a3 = 0;
            LOBYTE(v66) = 1;
            v65 = -1;
LABEL_111:
            *(_BYTE *)(v60 + 32) = v66;
            *(_DWORD *)(v60 + 24) = v65;
            *(_DWORD *)(v60 + 28) = a3;
            a5 = v79;
            a4 = v78;
LABEL_48:
            a2 = v76;
            goto LABEL_40;
          }
          *(_DWORD *)(v8 + 48 * v6 + 40) = v7;
          if ((unint64_t)&v74 < a1[18])
            return 26;
          v32 = a2;
          v33 = *(_QWORD *)v31;
          v34 = *(_DWORD *)(*(_QWORD *)v31 + 12);
          if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)v31 && v34 > 1)
            v36 = a3 + 1;
          else
            v36 = a3;
          if (v34)
          {
            v37 = 0;
            a3 = 0;
            v77 = v36 + 4;
            v38 = -1;
            LOBYTE(v39) = 1;
            while (1)
            {
              v40 = *(_QWORD *)(*(_QWORD *)v33 + 8 * v37);
              v80 = 0;
              v41 = (_BYTE **)a1;
              result = JSC::Yarr::YarrPatternConstructor::setupAlternativeOffsets((JSC::Yarr::YarrPatternConstructor *)a1, (JSC::Yarr::PatternAlternative *)v40, v77, v7, &v80);
              if ((_DWORD)result)
                return result;
              v42 = *(_DWORD *)(v40 + 24);
              if (v42 < v38)
                v38 = *(_DWORD *)(v40 + 24);
              if (a3 <= v80)
                a3 = v80;
              v43 = *(_BYTE *)(v40 + 37);
              if ((v42 & 0x80000000) != 0)
                **v41 |= 8u;
              v39 &= (v43 & 2) >> 1;
              ++v37;
              a1 = v41;
              if (v37 >= *(unsigned int *)(v33 + 12))
                goto LABEL_67;
            }
          }
          a3 = 0;
          LOBYTE(v39) = 1;
          v38 = -1;
LABEL_67:
          *(_BYTE *)(v33 + 32) = v39;
          *(_DWORD *)(v33 + 24) = v38;
          *(_DWORD *)(v33 + 28) = a3;
          a5 = v79;
          a4 = v78;
          a2 = v32;
LABEL_17:
          *((_BYTE *)a2 + 37) &= ~2u;
LABEL_8:
          if (++v6 >= (unint64_t)*((unsigned int *)a2 + 3))
            goto LABEL_43;
          break;
        case 8:
          if ((*(_BYTE *)(v8 + 48 * v6 + 1) & 4) != 0)
            v44 = 0;
          else
            v44 = v7;
          v77 = v44;
          v45 = v8 + 48 * v6;
          *(_DWORD *)(v45 + 40) = v7;
          *(_DWORD *)(v45 + 44) = a3;
          if ((unint64_t)&v74 < a1[18])
            return 26;
          v46 = a2;
          v78 = a4;
          v79 = a5;
          v47 = *(_QWORD *)(v45 + 16);
          v48 = *(_DWORD *)(v47 + 12);
          if (*(_QWORD *)(*a1 + 16) != v47 && v48 > 1)
            v50 = a3 + 1;
          else
            v50 = a3;
          if (v48)
          {
            v51 = 0;
            a3 = 0;
            LODWORD(v76) = v50 + 1;
            v52 = -1;
            LOBYTE(v53) = 1;
            while (1)
            {
              v54 = *(_QWORD *)(*(_QWORD *)v47 + 8 * v51);
              v80 = 0;
              v55 = (_BYTE **)a1;
              result = JSC::Yarr::YarrPatternConstructor::setupAlternativeOffsets((JSC::Yarr::YarrPatternConstructor *)a1, (JSC::Yarr::PatternAlternative *)v54, v76, v77, &v80);
              if ((_DWORD)result)
                return result;
              v56 = *(_DWORD *)(v54 + 24);
              if (v56 < v52)
                v52 = *(_DWORD *)(v54 + 24);
              if (a3 <= v80)
                a3 = v80;
              v57 = *(_BYTE *)(v54 + 37);
              if ((v56 & 0x80000000) != 0)
                **v55 |= 8u;
              v53 &= (v57 & 2) >> 1;
              ++v51;
              a1 = v55;
              if (v51 >= *(unsigned int *)(v47 + 12))
                goto LABEL_88;
            }
          }
          a3 = 0;
          LOBYTE(v53) = 1;
          v52 = -1;
LABEL_88:
          *(_BYTE *)(v47 + 32) = v53;
          *(_DWORD *)(v47 + 24) = v52;
          *(_DWORD *)(v47 + 28) = a3;
          a5 = v79;
          a4 = v78;
          a2 = v46;
          goto LABEL_8;
        case 9:
          *((_BYTE *)a2 + 37) &= ~2u;
          *(_DWORD *)(v8 + 48 * v6 + 40) = a4;
          v72 = (_BYTE *)*a1;
          *((_DWORD *)v72 + 2) = a3++;
          *v72 |= 0x40u;
          goto LABEL_8;
        default:
          goto LABEL_8;
      }
    }
  }
  v7 = a4;
LABEL_43:
  if (v7 < a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198EA9CB0);
  }
  result = 0;
  *((_DWORD *)a2 + 6) = v7 - a4;
  *a5 = a3;
  return result;
}

void WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;

  v11 = *(unsigned int *)(a1 + 12);
  if (v11 <= a3)
  {
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 < a3)
    {
      if ((_DWORD)v12)
      {
        if ((_DWORD)v11)
          *(_DWORD *)(a1 + 12) = 0;
        v13 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a3);
      LODWORD(v11) = *(_DWORD *)(a1 + 12);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 12) = a3;
    LODWORD(v11) = a3;
  }
  v14 = *(_QWORD *)a1;
  if ((_DWORD)v11)
  {
    v15 = v11 + 1;
    v16 = *(_DWORD **)a1;
    do
    {
      *v16++ = *a2;
      --v15;
    }
    while (v15 > 1);
    v17 = *(unsigned int *)(a1 + 12);
  }
  else
  {
    v17 = 0;
  }
  if (v17 != a3)
  {
    v18 = (_DWORD *)(v14 + 4 * v17);
    v19 = 4 * a3 - 4 * v17;
    do
    {
      *v18++ = *a2;
      v19 -= 4;
    }
    while (v19);
  }
  *(_DWORD *)(a1 + 12) = a3;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[3 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

void JSC::Yarr::CharacterClassConstructor::~CharacterClassConstructor(JSC::Yarr::CharacterClassConstructor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 7);
  if (v10)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((unsigned int *)this + 5);
  v14 = *((_QWORD *)this + 1);
  if (!(_DWORD)v13)
  {
    if (!v14)
      return;
LABEL_17:
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v15 = 16 * v13;
  do
  {
    v16 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    v14 += 16;
    v15 -= 16;
  }
  while (v15);
  v14 = *((_QWORD *)this + 1);
  if (v14)
    goto LABEL_17;
}

uint64_t *WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 0x10FFFF00000080;
  v7[0] = 0x7F00000000;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v7, 1uLL, 0, 0, v4, &v6, 1uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass1@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x7F00000000;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v6, 1uLL, 0, 0, v4, 0, 0, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass2(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[319];
  uint64_t v8;
  int v9[68];
  uint64_t v10[2];

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v10[1] = *MEMORY[0x1E0C80C00];
  v10[0] = 0x7F00000000;
  memcpy(v9, &unk_199181E5C, sizeof(v9));
  v7[0] = xmmword_1991927A0;
  v7[1] = xmmword_1991927B0;
  v7[2] = xmmword_1991927C0;
  v7[3] = xmmword_1991927D0;
  v7[4] = xmmword_1991927E0;
  v7[5] = xmmword_1991927F0;
  v7[6] = xmmword_199192800;
  v7[7] = xmmword_199192810;
  v7[8] = xmmword_199192820;
  v7[9] = xmmword_199192830;
  v7[10] = xmmword_199192840;
  v7[11] = xmmword_199192850;
  v7[12] = xmmword_199192860;
  v7[13] = xmmword_199192870;
  v7[14] = xmmword_199192880;
  v7[15] = xmmword_199192890;
  v7[16] = xmmword_1991928A0;
  v7[17] = xmmword_1991928B0;
  v7[18] = xmmword_1991928C0;
  v7[19] = xmmword_1991928D0;
  v7[20] = xmmword_1991928E0;
  v7[21] = xmmword_1991928F0;
  v7[22] = xmmword_199192900;
  v7[23] = xmmword_199192910;
  v7[24] = xmmword_199192920;
  v7[25] = xmmword_199192930;
  v7[26] = xmmword_199192940;
  v7[27] = xmmword_199192950;
  v7[28] = xmmword_199192960;
  v7[29] = xmmword_199192970;
  v7[30] = xmmword_199192980;
  v7[31] = xmmword_199192990;
  v7[32] = xmmword_1991929A0;
  v7[33] = xmmword_1991929B0;
  v7[34] = xmmword_1991929C0;
  v7[35] = xmmword_1991929D0;
  v7[36] = xmmword_1991929E0;
  v7[37] = xmmword_1991929F0;
  v7[38] = xmmword_199192A00;
  v7[39] = xmmword_199192A10;
  v7[40] = xmmword_199192A20;
  v7[41] = xmmword_199192A30;
  v7[42] = xmmword_199192A40;
  v7[43] = xmmword_199192A50;
  v7[44] = xmmword_199192A60;
  v7[45] = xmmword_199192A70;
  v7[46] = xmmword_199192A80;
  v7[47] = xmmword_199192A90;
  v7[48] = xmmword_199192AA0;
  v7[49] = xmmword_199192AB0;
  v7[50] = xmmword_199192AC0;
  v7[51] = xmmword_199192AD0;
  v7[52] = xmmword_199192AE0;
  v7[53] = xmmword_199192AF0;
  v7[54] = xmmword_199192B00;
  v7[55] = xmmword_199192B10;
  v7[56] = xmmword_199192B20;
  v7[57] = xmmword_199192B30;
  v7[58] = xmmword_199192B40;
  v7[59] = xmmword_199192B50;
  v7[60] = xmmword_199192B60;
  v7[61] = xmmword_199192B70;
  v7[62] = xmmword_199192B80;
  v7[63] = xmmword_199192B90;
  v7[64] = xmmword_199192BA0;
  v7[65] = xmmword_199192BB0;
  v7[66] = xmmword_199192BC0;
  v7[67] = xmmword_199192BD0;
  v7[68] = xmmword_199192BE0;
  v7[69] = xmmword_199192BF0;
  v7[70] = xmmword_199192C00;
  v7[71] = xmmword_199192C10;
  v7[72] = xmmword_199192C20;
  v7[73] = xmmword_199192C30;
  v7[74] = xmmword_199192C40;
  v7[75] = xmmword_199192C50;
  v7[76] = xmmword_199192C60;
  v7[77] = xmmword_199192C70;
  v7[78] = xmmword_199192C80;
  v7[79] = xmmword_199192C90;
  v7[80] = xmmword_199192CA0;
  v7[81] = xmmword_199192CB0;
  v7[82] = xmmword_199192CC0;
  v7[83] = xmmword_199192CD0;
  v7[84] = xmmword_199192CE0;
  v7[85] = xmmword_199192CF0;
  v7[86] = xmmword_199192D00;
  v7[87] = xmmword_199192D10;
  v7[88] = xmmword_199192D20;
  v7[89] = xmmword_199192D30;
  v7[90] = xmmword_199192D40;
  v7[91] = xmmword_199192D50;
  v7[92] = xmmword_199192D60;
  v7[93] = xmmword_199192D70;
  v7[94] = xmmword_199192D80;
  v7[95] = xmmword_199192D90;
  v7[96] = xmmword_199192DA0;
  v7[97] = xmmword_199192DB0;
  v7[98] = xmmword_199192DC0;
  v7[99] = xmmword_199192DD0;
  v7[100] = xmmword_199192DE0;
  v7[101] = xmmword_199192DF0;
  v7[102] = xmmword_199192E00;
  v7[103] = xmmword_199192E10;
  v7[104] = xmmword_199192E20;
  v7[105] = xmmword_199192E30;
  v7[106] = xmmword_199192E40;
  v7[107] = xmmword_199192E50;
  v7[108] = xmmword_199192E60;
  v7[109] = xmmword_199192E70;
  v7[110] = xmmword_199192E80;
  v7[111] = xmmword_199192E90;
  v7[112] = xmmword_199192EA0;
  v7[113] = xmmword_199192EB0;
  v7[114] = xmmword_199192EC0;
  v7[115] = xmmword_199192ED0;
  v7[116] = xmmword_199192EE0;
  v7[117] = xmmword_199192EF0;
  v7[118] = xmmword_199192F00;
  v7[119] = xmmword_199192F10;
  v7[120] = xmmword_199192F20;
  v7[121] = xmmword_199192F30;
  v7[122] = xmmword_199192F40;
  v7[123] = xmmword_199192F50;
  v7[124] = xmmword_199192F60;
  v7[125] = xmmword_199192F70;
  v7[126] = xmmword_199192F80;
  v7[127] = xmmword_199192F90;
  v7[128] = xmmword_199192FA0;
  v7[129] = xmmword_199192FB0;
  v7[130] = xmmword_199192FC0;
  v7[131] = xmmword_199192FD0;
  v7[132] = xmmword_199192FE0;
  v7[133] = xmmword_199192FF0;
  v7[134] = xmmword_199193000;
  v7[135] = xmmword_199193010;
  v7[136] = xmmword_199193020;
  v7[137] = xmmword_199193030;
  v7[138] = xmmword_199193040;
  v7[139] = xmmword_199193050;
  v7[140] = xmmword_199193060;
  v7[141] = xmmword_199193070;
  v7[142] = xmmword_199193080;
  v7[143] = xmmword_199193090;
  v7[144] = xmmword_1991930A0;
  v7[145] = xmmword_1991930B0;
  v7[146] = xmmword_1991930C0;
  v7[147] = xmmword_1991930D0;
  v7[148] = xmmword_1991930E0;
  v7[149] = xmmword_1991930F0;
  v7[150] = xmmword_199193100;
  v7[151] = xmmword_199193110;
  v7[152] = xmmword_199193120;
  v7[153] = xmmword_199193130;
  v7[154] = xmmword_199193140;
  v7[155] = xmmword_199193150;
  v7[156] = xmmword_199193160;
  v7[157] = xmmword_199193170;
  v7[158] = xmmword_199193180;
  v7[159] = xmmword_199193190;
  v7[160] = xmmword_1991931A0;
  v7[161] = xmmword_1991931B0;
  v7[162] = xmmword_1991931C0;
  v7[163] = xmmword_1991931D0;
  v7[164] = xmmword_1991931E0;
  v7[165] = xmmword_1991931F0;
  v7[166] = xmmword_199193200;
  v7[167] = xmmword_199193210;
  v7[168] = xmmword_199193220;
  v7[169] = xmmword_199193230;
  v7[170] = xmmword_199193240;
  v7[171] = xmmword_199193250;
  v7[172] = xmmword_199193260;
  v7[173] = xmmword_199193270;
  v7[174] = xmmword_199193280;
  v7[175] = xmmword_199193290;
  v7[176] = xmmword_1991932A0;
  v7[177] = xmmword_1991932B0;
  v7[178] = xmmword_1991932C0;
  v7[179] = xmmword_1991932D0;
  v7[180] = xmmword_1991932E0;
  v7[181] = xmmword_1991932F0;
  v7[182] = xmmword_199193300;
  v7[183] = xmmword_199193310;
  v7[184] = xmmword_199193320;
  v7[185] = xmmword_199193330;
  v7[186] = xmmword_199193340;
  v7[187] = xmmword_199193350;
  v7[188] = xmmword_199193360;
  v7[189] = xmmword_199193370;
  v7[190] = xmmword_199193380;
  v7[191] = xmmword_199193390;
  v7[192] = xmmword_1991933A0;
  v7[193] = xmmword_1991933B0;
  v7[194] = xmmword_1991933C0;
  v7[195] = xmmword_1991933D0;
  v7[196] = xmmword_1991933E0;
  v7[197] = xmmword_1991933F0;
  v7[198] = xmmword_199193400;
  v7[199] = xmmword_199193410;
  v7[200] = xmmword_199193420;
  v7[201] = xmmword_199193430;
  v7[202] = xmmword_199193440;
  v7[203] = xmmword_199193450;
  v7[204] = xmmword_199193460;
  v7[205] = xmmword_199193470;
  v7[206] = xmmword_199193480;
  v7[207] = xmmword_199193490;
  v7[208] = xmmword_1991934A0;
  v7[209] = xmmword_1991934B0;
  v7[210] = xmmword_1991934C0;
  v7[211] = xmmword_1991934D0;
  v7[212] = xmmword_1991934E0;
  v7[213] = xmmword_1991934F0;
  v7[214] = xmmword_199193500;
  v7[215] = xmmword_199193510;
  v7[216] = xmmword_199193520;
  v7[217] = xmmword_199193530;
  v7[218] = xmmword_199193540;
  v7[219] = xmmword_199193550;
  v7[220] = xmmword_199193560;
  v7[221] = xmmword_199193570;
  v7[222] = xmmword_199193580;
  v7[223] = xmmword_199193590;
  v7[224] = xmmword_1991935A0;
  v7[225] = xmmword_1991935B0;
  v7[226] = xmmword_1991935C0;
  v7[227] = xmmword_1991935D0;
  v7[228] = xmmword_1991935E0;
  v7[229] = xmmword_1991935F0;
  v7[230] = xmmword_199193600;
  v7[231] = xmmword_199193610;
  v7[232] = xmmword_199193620;
  v7[233] = xmmword_199193630;
  v7[234] = xmmword_199193640;
  v7[235] = xmmword_199193650;
  v7[236] = xmmword_199193660;
  v7[237] = xmmword_199193670;
  v7[238] = xmmword_199193680;
  v7[239] = xmmword_199193690;
  v7[240] = xmmword_1991936A0;
  v7[241] = xmmword_1991936B0;
  v7[242] = xmmword_1991936C0;
  v7[243] = xmmword_1991936D0;
  v7[244] = xmmword_1991936E0;
  v7[245] = xmmword_1991936F0;
  v7[246] = xmmword_199193700;
  v7[247] = xmmword_199193710;
  v7[248] = xmmword_199193720;
  v7[249] = xmmword_199193730;
  v7[250] = xmmword_199193740;
  v7[251] = xmmword_199193750;
  v7[252] = xmmword_199193760;
  v7[253] = xmmword_199193770;
  v7[254] = xmmword_199193780;
  v7[255] = xmmword_199193790;
  v7[256] = xmmword_1991937A0;
  v7[257] = xmmword_1991937B0;
  v7[258] = xmmword_1991937C0;
  v7[259] = xmmword_1991937D0;
  v7[260] = xmmword_1991937E0;
  v7[261] = xmmword_1991937F0;
  v7[262] = xmmword_199193800;
  v7[263] = xmmword_199193810;
  v7[264] = xmmword_199193820;
  v7[265] = xmmword_199193830;
  v7[266] = xmmword_199193840;
  v7[267] = xmmword_199193850;
  v7[268] = xmmword_199193860;
  v7[269] = xmmword_199193870;
  v7[270] = xmmword_199193880;
  v7[271] = xmmword_199193890;
  v7[272] = xmmword_1991938A0;
  v7[273] = xmmword_1991938B0;
  v7[274] = xmmword_1991938C0;
  v7[275] = xmmword_1991938D0;
  v7[276] = xmmword_1991938E0;
  v7[277] = xmmword_1991938F0;
  v7[278] = xmmword_199193900;
  v7[279] = xmmword_199193910;
  v7[280] = xmmword_199193920;
  v7[281] = xmmword_199193930;
  v7[282] = xmmword_199193940;
  v7[283] = xmmword_199193950;
  v7[284] = xmmword_199193960;
  v7[285] = xmmword_199193970;
  v7[286] = xmmword_199193980;
  v7[287] = xmmword_199193990;
  v7[288] = xmmword_1991939A0;
  v7[289] = xmmword_1991939B0;
  v7[290] = xmmword_1991939C0;
  v7[291] = xmmword_1991939D0;
  v7[292] = xmmword_1991939E0;
  v7[293] = xmmword_1991939F0;
  v7[294] = xmmword_199193A00;
  v7[295] = xmmword_199193A10;
  v7[296] = xmmword_199193A20;
  v7[297] = xmmword_199193A30;
  v7[298] = xmmword_199193A40;
  v7[299] = xmmword_199193A50;
  v7[300] = xmmword_199193A60;
  v7[301] = xmmword_199193A70;
  v7[302] = xmmword_199193A80;
  v7[303] = xmmword_199193A90;
  v7[304] = xmmword_199193AA0;
  v7[305] = xmmword_199193AB0;
  v7[306] = xmmword_199193AC0;
  v7[307] = xmmword_199193AD0;
  v7[308] = xmmword_199193AE0;
  v7[309] = xmmword_199193AF0;
  v7[310] = xmmword_199193B00;
  v7[311] = xmmword_199193B10;
  v7[312] = xmmword_199193B20;
  v7[313] = xmmword_199193B30;
  v7[314] = xmmword_199193B40;
  v7[315] = xmmword_199193B50;
  v7[316] = xmmword_199193B60;
  v7[317] = xmmword_199193B70;
  v7[318] = xmmword_199193B80;
  v8 = 0x10FFFD00100000;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, v10, 1uLL, v9, 0x44uLL, v5, (uint64_t *)v7, 0x27FuLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass3(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  _OWORD v8[233];
  int __dst[245];
  uint64_t v10[2];

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v10[1] = *MEMORY[0x1E0C80C00];
  v7 = 127;
  v10[0] = 0x1F00000000;
  memcpy(__dst, &unk_199181F6C, sizeof(__dst));
  v8[0] = xmmword_199193B90;
  v8[1] = xmmword_199193BA0;
  v8[2] = xmmword_199193BB0;
  v8[3] = xmmword_199193BC0;
  v8[4] = xmmword_199193BD0;
  v8[5] = xmmword_199193BE0;
  v8[6] = xmmword_199193BF0;
  v8[7] = xmmword_199193C00;
  v8[8] = xmmword_199193C10;
  v8[9] = xmmword_199193C20;
  v8[10] = xmmword_199193C30;
  v8[11] = xmmword_199193C40;
  v8[12] = xmmword_199193C50;
  v8[13] = xmmword_199193C60;
  v8[14] = xmmword_199193C70;
  v8[15] = xmmword_199193C80;
  v8[16] = xmmword_199193C90;
  v8[17] = xmmword_199193CA0;
  v8[18] = xmmword_199193CB0;
  v8[19] = xmmword_199193CC0;
  v8[20] = xmmword_199193CD0;
  v8[21] = xmmword_199193CE0;
  v8[22] = xmmword_199193CF0;
  v8[23] = xmmword_199193D00;
  v8[24] = xmmword_199193D10;
  v8[25] = xmmword_199193D20;
  v8[26] = xmmword_199193D30;
  v8[27] = xmmword_199193D40;
  v8[28] = xmmword_199193D50;
  v8[29] = xmmword_199193D60;
  v8[30] = xmmword_199193D70;
  v8[31] = xmmword_199193D80;
  v8[32] = xmmword_199193D90;
  v8[33] = xmmword_199193DA0;
  v8[34] = xmmword_199193DB0;
  v8[35] = xmmword_199193DC0;
  v8[36] = xmmword_199193DD0;
  v8[37] = xmmword_199193DE0;
  v8[38] = xmmword_199193DF0;
  v8[39] = xmmword_199193E00;
  v8[40] = xmmword_199193E10;
  v8[41] = xmmword_199193E20;
  v8[42] = xmmword_199193E30;
  v8[43] = xmmword_199193E40;
  v8[44] = xmmword_199193E50;
  v8[45] = xmmword_199193E60;
  v8[46] = xmmword_199193E70;
  v8[47] = xmmword_199193E80;
  v8[48] = xmmword_199193E90;
  v8[49] = xmmword_199193EA0;
  v8[50] = xmmword_199193EB0;
  v8[51] = xmmword_199193EC0;
  v8[52] = xmmword_199193ED0;
  v8[53] = xmmword_199193EE0;
  v8[54] = xmmword_199193EF0;
  v8[55] = xmmword_199193F00;
  v8[56] = xmmword_199193F10;
  v8[57] = xmmword_199193F20;
  v8[58] = xmmword_199193F30;
  v8[59] = xmmword_199193F40;
  v8[60] = xmmword_199193F50;
  v8[61] = xmmword_199193F60;
  v8[62] = xmmword_199193F70;
  v8[63] = xmmword_199193F80;
  v8[64] = xmmword_199193F90;
  v8[65] = xmmword_199193FA0;
  v8[66] = xmmword_199193FB0;
  v8[67] = xmmword_199193FC0;
  v8[68] = xmmword_199193FD0;
  v8[69] = xmmword_199193FE0;
  v8[70] = xmmword_199193FF0;
  v8[71] = xmmword_199194000;
  v8[72] = xmmword_199194010;
  v8[73] = xmmword_199194020;
  v8[74] = xmmword_199194030;
  v8[75] = xmmword_199194040;
  v8[76] = xmmword_199194050;
  v8[77] = xmmword_199194060;
  v8[78] = xmmword_199194070;
  v8[79] = xmmword_199194080;
  v8[80] = xmmword_199194090;
  v8[81] = xmmword_1991940A0;
  v8[82] = xmmword_1991940B0;
  v8[83] = xmmword_1991940C0;
  v8[84] = xmmword_1991940D0;
  v8[85] = xmmword_1991940E0;
  v8[86] = xmmword_1991940F0;
  v8[87] = xmmword_199194100;
  v8[88] = xmmword_199194110;
  v8[89] = xmmword_199194120;
  v8[90] = xmmword_199194130;
  v8[91] = xmmword_199194140;
  v8[92] = xmmword_199194150;
  v8[93] = xmmword_199194160;
  v8[94] = xmmword_199194170;
  v8[95] = xmmword_199194180;
  v8[96] = xmmword_199194190;
  v8[97] = xmmword_1991941A0;
  v8[98] = xmmword_1991941B0;
  v8[99] = xmmword_1991941C0;
  v8[100] = xmmword_1991941D0;
  v8[101] = xmmword_1991941E0;
  v8[102] = xmmword_1991941F0;
  v8[103] = xmmword_199194200;
  v8[104] = xmmword_199194210;
  v8[105] = xmmword_199194220;
  v8[106] = xmmword_199194230;
  v8[107] = xmmword_199194240;
  v8[108] = xmmword_199194250;
  v8[109] = xmmword_199194260;
  v8[110] = xmmword_199194270;
  v8[111] = xmmword_199194280;
  v8[112] = xmmword_199194290;
  v8[113] = xmmword_1991942A0;
  v8[114] = xmmword_1991942B0;
  v8[115] = xmmword_1991942C0;
  v8[116] = xmmword_1991942D0;
  v8[117] = xmmword_1991942E0;
  v8[118] = xmmword_1991942F0;
  v8[119] = xmmword_199194300;
  v8[120] = xmmword_199194310;
  v8[121] = xmmword_199194320;
  v8[122] = xmmword_199194330;
  v8[123] = xmmword_199194340;
  v8[124] = xmmword_199194350;
  v8[125] = xmmword_199194360;
  v8[126] = xmmword_199194370;
  v8[127] = xmmword_199194380;
  v8[128] = xmmword_199194390;
  v8[129] = xmmword_1991943A0;
  v8[130] = xmmword_1991943B0;
  v8[131] = xmmword_1991943C0;
  v8[132] = xmmword_1991943D0;
  v8[133] = xmmword_1991943E0;
  v8[134] = xmmword_1991943F0;
  v8[135] = xmmword_199194400;
  v8[136] = xmmword_199194410;
  v8[137] = xmmword_199194420;
  v8[138] = xmmword_199194430;
  v8[139] = xmmword_199194440;
  v8[140] = xmmword_199194450;
  v8[141] = xmmword_199194460;
  v8[142] = xmmword_199194470;
  v8[143] = xmmword_199194480;
  v8[144] = xmmword_199194490;
  v8[145] = xmmword_1991944A0;
  v8[146] = xmmword_1991944B0;
  v8[147] = xmmword_1991944C0;
  v8[148] = xmmword_1991944D0;
  v8[149] = xmmword_1991944E0;
  v8[150] = xmmword_1991944F0;
  v8[151] = xmmword_199194500;
  v8[152] = xmmword_199194510;
  v8[153] = xmmword_199194520;
  v8[154] = xmmword_199194530;
  v8[155] = xmmword_199194540;
  v8[156] = xmmword_199194550;
  v8[157] = xmmword_199194560;
  v8[158] = xmmword_199194570;
  v8[159] = xmmword_199194580;
  v8[160] = xmmword_199194590;
  v8[161] = xmmword_1991945A0;
  v8[162] = xmmword_1991945B0;
  v8[163] = xmmword_1991945C0;
  v8[164] = xmmword_1991945D0;
  v8[165] = xmmword_1991945E0;
  v8[166] = xmmword_1991945F0;
  v8[167] = xmmword_199194600;
  v8[168] = xmmword_199194610;
  v8[169] = xmmword_199194620;
  v8[170] = xmmword_199194630;
  v8[171] = xmmword_199194640;
  v8[172] = xmmword_199194650;
  v8[173] = xmmword_199194660;
  v8[174] = xmmword_199194670;
  v8[175] = xmmword_199194680;
  v8[176] = xmmword_199194690;
  v8[177] = xmmword_1991946A0;
  v8[178] = xmmword_1991946B0;
  v8[179] = xmmword_1991946C0;
  v8[180] = xmmword_1991946D0;
  v8[181] = xmmword_1991946E0;
  v8[182] = xmmword_1991946F0;
  v8[183] = xmmword_199194700;
  v8[184] = xmmword_199194710;
  v8[185] = xmmword_199194720;
  v8[186] = xmmword_199194730;
  v8[187] = xmmword_199194740;
  v8[188] = xmmword_199194750;
  v8[189] = xmmword_199194760;
  v8[190] = xmmword_199194770;
  v8[191] = xmmword_199194780;
  v8[192] = xmmword_199194790;
  v8[193] = xmmword_1991947A0;
  v8[194] = xmmword_1991947B0;
  v8[195] = xmmword_1991947C0;
  v8[196] = xmmword_1991947D0;
  v8[197] = xmmword_1991947E0;
  v8[198] = xmmword_1991947F0;
  v8[199] = xmmword_199194800;
  v8[200] = xmmword_199194810;
  v8[201] = xmmword_199194820;
  v8[202] = xmmword_199194830;
  v8[203] = xmmword_199194840;
  v8[204] = xmmword_199194850;
  v8[205] = xmmword_199194860;
  v8[206] = xmmword_199194870;
  v8[207] = xmmword_199194880;
  v8[208] = xmmword_199194890;
  v8[209] = xmmword_1991948A0;
  v8[210] = xmmword_1991948B0;
  v8[211] = xmmword_1991948C0;
  v8[212] = xmmword_1991948D0;
  v8[213] = xmmword_1991948E0;
  v8[214] = xmmword_1991948F0;
  v8[215] = xmmword_199194900;
  v8[216] = xmmword_199194910;
  v8[217] = xmmword_199194920;
  v8[218] = xmmword_199194930;
  v8[219] = xmmword_199194940;
  v8[220] = xmmword_199194950;
  v8[221] = xmmword_199194960;
  v8[222] = xmmword_199194970;
  v8[223] = xmmword_199194980;
  v8[224] = xmmword_199194990;
  v8[225] = xmmword_1991949A0;
  v8[226] = xmmword_1991949B0;
  v8[227] = xmmword_1991949C0;
  v8[228] = xmmword_1991949D0;
  v8[229] = xmmword_1991949E0;
  v8[230] = xmmword_1991949F0;
  v8[231] = xmmword_199194A00;
  v8[232] = xmmword_199194A10;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, &v7, 1uLL, v10, 1uLL, __dst, 0xF5uLL, v5, (uint64_t *)v8, 0x1D2uLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass4(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[232];
  int __dst[243];
  uint64_t v9;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v9 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_199189270, sizeof(__dst));
  v7[0] = xmmword_199194A20;
  v7[1] = xmmword_199194A30;
  v7[2] = xmmword_199194A40;
  v7[3] = xmmword_199194A50;
  v7[4] = xmmword_199193BE0;
  v7[5] = xmmword_199193BF0;
  v7[6] = xmmword_199194A60;
  v7[7] = xmmword_199193C10;
  v7[8] = xmmword_199193C20;
  v7[9] = xmmword_199193C30;
  v7[10] = xmmword_199193C40;
  v7[11] = xmmword_199193C50;
  v7[12] = xmmword_199193C60;
  v7[13] = xmmword_199193C70;
  v7[14] = xmmword_199193C80;
  v7[15] = xmmword_199193C90;
  v7[16] = xmmword_199193CA0;
  v7[17] = xmmword_199193CB0;
  v7[18] = xmmword_199193CC0;
  v7[19] = xmmword_199193CD0;
  v7[20] = xmmword_199193CE0;
  v7[21] = xmmword_199193CF0;
  v7[22] = xmmword_199193D00;
  v7[23] = xmmword_199193D10;
  v7[24] = xmmword_199193D20;
  v7[25] = xmmword_199193D30;
  v7[26] = xmmword_199193D40;
  v7[27] = xmmword_199193D50;
  v7[28] = xmmword_199193D60;
  v7[29] = xmmword_199193D70;
  v7[30] = xmmword_199193D80;
  v7[31] = xmmword_199193D90;
  v7[32] = xmmword_199193DA0;
  v7[33] = xmmword_199193DB0;
  v7[34] = xmmword_199193DC0;
  v7[35] = xmmword_199193DD0;
  v7[36] = xmmword_199193DE0;
  v7[37] = xmmword_199193DF0;
  v7[38] = xmmword_199193E00;
  v7[39] = xmmword_199193E10;
  v7[40] = xmmword_199193E20;
  v7[41] = xmmword_199193E30;
  v7[42] = xmmword_199193E40;
  v7[43] = xmmword_199193E50;
  v7[44] = xmmword_199193E60;
  v7[45] = xmmword_199193E70;
  v7[46] = xmmword_199193E80;
  v7[47] = xmmword_199193E90;
  v7[48] = xmmword_199193EA0;
  v7[49] = xmmword_199193EB0;
  v7[50] = xmmword_199193EC0;
  v7[51] = xmmword_199193ED0;
  v7[52] = xmmword_199193EE0;
  v7[53] = xmmword_199193EF0;
  v7[54] = xmmword_199193F00;
  v7[55] = xmmword_199193F10;
  v7[56] = xmmword_199193F20;
  v7[57] = xmmword_199193F30;
  v7[58] = xmmword_199193F40;
  v7[59] = xmmword_199193F50;
  v7[60] = xmmword_199193F60;
  v7[61] = xmmword_199193F70;
  v7[62] = xmmword_199193F80;
  v7[63] = xmmword_199193F90;
  v7[64] = xmmword_199193FA0;
  v7[65] = xmmword_199193FB0;
  v7[66] = xmmword_199193FC0;
  v7[67] = xmmword_199193FD0;
  v7[68] = xmmword_199193FE0;
  v7[69] = xmmword_199193FF0;
  v7[70] = xmmword_199194A70;
  v7[71] = xmmword_199194A80;
  v7[72] = xmmword_199194A90;
  v7[73] = xmmword_199194AA0;
  v7[74] = xmmword_199194AB0;
  v7[75] = xmmword_199194AC0;
  v7[76] = xmmword_199194AD0;
  v7[77] = xmmword_199194AE0;
  v7[78] = xmmword_199194AF0;
  v7[79] = xmmword_199194B00;
  v7[80] = xmmword_199194B10;
  v7[81] = xmmword_199194B20;
  v7[82] = xmmword_199194B30;
  v7[83] = xmmword_199194B40;
  v7[84] = xmmword_199194B50;
  v7[85] = xmmword_199194B60;
  v7[86] = xmmword_199194B70;
  v7[87] = xmmword_199194B80;
  v7[88] = xmmword_199194B90;
  v7[89] = xmmword_199194BA0;
  v7[90] = xmmword_199194BB0;
  v7[91] = xmmword_199194BC0;
  v7[92] = xmmword_199194BD0;
  v7[93] = xmmword_199194BE0;
  v7[94] = xmmword_199194BF0;
  v7[95] = xmmword_199194C00;
  v7[96] = xmmword_199194C10;
  v7[97] = xmmword_199194C20;
  v7[98] = xmmword_199194C30;
  v7[99] = xmmword_199194C40;
  v7[100] = xmmword_199194C50;
  v7[101] = xmmword_199194C60;
  v7[102] = xmmword_199194C70;
  v7[103] = xmmword_199194C80;
  v7[104] = xmmword_199194C90;
  v7[105] = xmmword_199194CA0;
  v7[106] = xmmword_199194CB0;
  v7[107] = xmmword_199194CC0;
  v7[108] = xmmword_199194CD0;
  v7[109] = xmmword_199194CE0;
  v7[110] = xmmword_199194CF0;
  v7[111] = xmmword_199194D00;
  v7[112] = xmmword_199194D10;
  v7[113] = xmmword_199194D20;
  v7[114] = xmmword_199194D30;
  v7[115] = xmmword_199194D40;
  v7[116] = xmmword_199194D50;
  v7[117] = xmmword_199194D60;
  v7[118] = xmmword_199194D70;
  v7[119] = xmmword_199194D80;
  v7[120] = xmmword_199194D90;
  v7[121] = xmmword_199194DA0;
  v7[122] = xmmword_199194DB0;
  v7[123] = xmmword_199194DC0;
  v7[124] = xmmword_199194DD0;
  v7[125] = xmmword_199194DE0;
  v7[126] = xmmword_199194DF0;
  v7[127] = xmmword_199194E00;
  v7[128] = xmmword_199194E10;
  v7[129] = xmmword_199194E20;
  v7[130] = xmmword_199194E30;
  v7[131] = xmmword_199194E40;
  v7[132] = xmmword_199194E50;
  v7[133] = xmmword_199194E60;
  v7[134] = xmmword_199194E70;
  v7[135] = xmmword_199194E80;
  v7[136] = xmmword_199194E90;
  v7[137] = xmmword_199194440;
  v7[138] = xmmword_199194450;
  v7[139] = xmmword_199194460;
  v7[140] = xmmword_199194470;
  v7[141] = xmmword_199194480;
  v7[142] = xmmword_199194490;
  v7[143] = xmmword_1991944A0;
  v7[144] = xmmword_1991944B0;
  v7[145] = xmmword_1991944C0;
  v7[146] = xmmword_1991944D0;
  v7[147] = xmmword_1991944E0;
  v7[148] = xmmword_1991944F0;
  v7[149] = xmmword_199194500;
  v7[150] = xmmword_199194510;
  v7[151] = xmmword_199194520;
  v7[152] = xmmword_199194530;
  v7[153] = xmmword_199194540;
  v7[154] = xmmword_199194550;
  v7[155] = xmmword_199194560;
  v7[156] = xmmword_199194570;
  v7[157] = xmmword_199194580;
  v7[158] = xmmword_199194590;
  v7[159] = xmmword_1991945A0;
  v7[160] = xmmword_1991945B0;
  v7[161] = xmmword_1991945C0;
  v7[162] = xmmword_1991945D0;
  v7[163] = xmmword_1991945E0;
  v7[164] = xmmword_1991945F0;
  v7[165] = xmmword_199194600;
  v7[166] = xmmword_199194610;
  v7[167] = xmmword_199194620;
  v7[168] = xmmword_199194630;
  v7[169] = xmmword_199194EA0;
  v7[170] = xmmword_199194EB0;
  v7[171] = xmmword_199194EC0;
  v7[172] = xmmword_199194ED0;
  v7[173] = xmmword_199194EE0;
  v7[174] = xmmword_199194EF0;
  v7[175] = xmmword_199194F00;
  v7[176] = xmmword_199194F10;
  v7[177] = xmmword_199194F20;
  v7[178] = xmmword_199194F30;
  v7[179] = xmmword_199194F40;
  v7[180] = xmmword_199194F50;
  v7[181] = xmmword_199194F60;
  v7[182] = xmmword_199194F70;
  v7[183] = xmmword_199194F80;
  v7[184] = xmmword_199194F90;
  v7[185] = xmmword_199194FA0;
  v7[186] = xmmword_199194FB0;
  v7[187] = xmmword_199194770;
  v7[188] = xmmword_199194780;
  v7[189] = xmmword_199194790;
  v7[190] = xmmword_1991947A0;
  v7[191] = xmmword_1991947B0;
  v7[192] = xmmword_1991947C0;
  v7[193] = xmmword_1991947D0;
  v7[194] = xmmword_1991947E0;
  v7[195] = xmmword_1991947F0;
  v7[196] = xmmword_199194800;
  v7[197] = xmmword_199194810;
  v7[198] = xmmword_199194820;
  v7[199] = xmmword_199194830;
  v7[200] = xmmword_199194840;
  v7[201] = xmmword_199194850;
  v7[202] = xmmword_199194860;
  v7[203] = xmmword_199194870;
  v7[204] = xmmword_199194880;
  v7[205] = xmmword_199194890;
  v7[206] = xmmword_1991948A0;
  v7[207] = xmmword_1991948B0;
  v7[208] = xmmword_1991948C0;
  v7[209] = xmmword_1991948D0;
  v7[210] = xmmword_1991948E0;
  v7[211] = xmmword_1991948F0;
  v7[212] = xmmword_199194900;
  v7[213] = xmmword_199194910;
  v7[214] = xmmword_199194920;
  v7[215] = xmmword_199194930;
  v7[216] = xmmword_199194940;
  v7[217] = xmmword_199194950;
  v7[218] = xmmword_199194960;
  v7[219] = xmmword_199194970;
  v7[220] = xmmword_199194980;
  v7[221] = xmmword_199194990;
  v7[222] = xmmword_1991949A0;
  v7[223] = xmmword_1991949B0;
  v7[224] = xmmword_1991949C0;
  v7[225] = xmmword_1991949D0;
  v7[226] = xmmword_1991949E0;
  v7[227] = xmmword_1991949F0;
  v7[228] = xmmword_199194A00;
  v7[229] = xmmword_199194FC0;
  v7[230] = xmmword_199194FD0;
  v7[231] = xmmword_199194FE0;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, 0, 0, __dst, 0xF3uLL, v5, (uint64_t *)v7, 0x1D0uLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass5(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[260];
  uint64_t v8;
  int v9[137];
  __int128 v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v11 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_199194FF0;
  memcpy(v9, &unk_199182340, sizeof(v9));
  v7[0] = xmmword_199195000;
  v7[1] = xmmword_199195010;
  v7[2] = xmmword_199195020;
  v7[3] = xmmword_199195030;
  v7[4] = xmmword_199195040;
  v7[5] = xmmword_199195050;
  v7[6] = xmmword_199195060;
  v7[7] = xmmword_199195070;
  v7[8] = xmmword_199195080;
  v7[9] = xmmword_199195090;
  v7[10] = xmmword_1991950A0;
  v7[11] = xmmword_1991950B0;
  v7[12] = xmmword_1991950C0;
  v7[13] = xmmword_1991950D0;
  v7[14] = xmmword_1991950E0;
  v7[15] = xmmword_1991950F0;
  v7[16] = xmmword_199195100;
  v7[17] = xmmword_199195110;
  v7[18] = xmmword_199192850;
  v7[19] = xmmword_199192860;
  v7[20] = xmmword_199195120;
  v7[21] = xmmword_199195130;
  v7[22] = xmmword_1991928B0;
  v7[23] = xmmword_1991928C0;
  v7[24] = xmmword_1991928D0;
  v7[25] = xmmword_199195140;
  v7[26] = xmmword_199195150;
  v7[27] = xmmword_199192920;
  v7[28] = xmmword_199192930;
  v7[29] = xmmword_199195160;
  v7[30] = xmmword_199192980;
  v7[31] = xmmword_199192990;
  v7[32] = xmmword_1991929A0;
  v7[33] = xmmword_199195170;
  v7[34] = xmmword_1991929F0;
  v7[35] = xmmword_199192A00;
  v7[36] = xmmword_199192A10;
  v7[37] = xmmword_199192A20;
  v7[38] = xmmword_199195180;
  v7[39] = xmmword_199192A60;
  v7[40] = xmmword_199195190;
  v7[41] = xmmword_1991951A0;
  v7[42] = xmmword_1991951B0;
  v7[43] = xmmword_1991951C0;
  v7[44] = xmmword_1991951D0;
  v7[45] = xmmword_1991951E0;
  v7[46] = xmmword_1991951F0;
  v7[47] = xmmword_199195200;
  v7[48] = xmmword_199192B50;
  v7[49] = xmmword_199192B60;
  v7[50] = xmmword_199195210;
  v7[51] = xmmword_199195220;
  v7[52] = xmmword_199195230;
  v7[53] = xmmword_199195240;
  v7[54] = xmmword_199195250;
  v7[55] = xmmword_199195260;
  v7[56] = xmmword_199195270;
  v7[57] = xmmword_199195280;
  v7[58] = xmmword_199195290;
  v7[59] = xmmword_1991952A0;
  v7[60] = xmmword_1991952B0;
  v7[61] = xmmword_199192C20;
  v7[62] = xmmword_199192C30;
  v7[63] = xmmword_199192C40;
  v7[64] = xmmword_199192C50;
  v7[65] = xmmword_199192C60;
  v7[66] = xmmword_199192C70;
  v7[67] = xmmword_1991952C0;
  v7[68] = xmmword_1991952D0;
  v7[69] = xmmword_1991952E0;
  v7[70] = xmmword_1991952F0;
  v7[71] = xmmword_199195300;
  v7[72] = xmmword_199195310;
  v7[73] = xmmword_199192CD0;
  v7[74] = xmmword_199195320;
  v7[75] = xmmword_199195330;
  v7[76] = xmmword_199195340;
  v7[77] = xmmword_199195350;
  v7[78] = xmmword_199195360;
  v7[79] = xmmword_199195370;
  v7[80] = xmmword_199195380;
  v7[81] = xmmword_199195390;
  v7[82] = xmmword_1991953A0;
  v7[83] = xmmword_1991953B0;
  v7[84] = xmmword_1991953C0;
  v7[85] = xmmword_1991953D0;
  v7[86] = xmmword_1991953E0;
  v7[87] = xmmword_1991953F0;
  v7[88] = xmmword_199195400;
  v7[89] = xmmword_199195410;
  v7[90] = xmmword_199195420;
  v7[91] = xmmword_199195430;
  v7[92] = xmmword_199195440;
  v7[93] = xmmword_199195450;
  v7[94] = xmmword_199195460;
  v7[95] = xmmword_199195470;
  v7[96] = xmmword_199195480;
  v7[97] = xmmword_199195490;
  v7[98] = xmmword_1991954A0;
  v7[99] = xmmword_1991954B0;
  v7[100] = xmmword_1991954C0;
  v7[101] = xmmword_1991954D0;
  v7[102] = xmmword_1991954E0;
  v7[103] = xmmword_1991954F0;
  v7[104] = xmmword_199195500;
  v7[105] = xmmword_199195510;
  v7[106] = xmmword_199195520;
  v7[107] = xmmword_199195530;
  v7[108] = xmmword_199195540;
  v7[109] = xmmword_199195550;
  v7[110] = xmmword_199195560;
  v7[111] = xmmword_199195570;
  v7[112] = xmmword_199195580;
  v7[113] = xmmword_199195590;
  v7[114] = xmmword_1991955A0;
  v7[115] = xmmword_1991955B0;
  v7[116] = xmmword_1991955C0;
  v7[117] = xmmword_1991955D0;
  v7[118] = xmmword_1991955E0;
  v7[119] = xmmword_1991955F0;
  v7[120] = xmmword_199195600;
  v7[121] = xmmword_199195610;
  v7[122] = xmmword_199195620;
  v7[123] = xmmword_199195630;
  v7[124] = xmmword_199195640;
  v7[125] = xmmword_199195650;
  v7[126] = xmmword_199195660;
  v7[127] = xmmword_199195670;
  v7[128] = xmmword_199195680;
  v7[129] = xmmword_199195690;
  v7[130] = xmmword_1991956A0;
  v7[131] = xmmword_199193010;
  v7[132] = xmmword_199193020;
  v7[133] = xmmword_1991956B0;
  v7[134] = xmmword_1991956C0;
  v7[135] = xmmword_199193050;
  v7[136] = xmmword_1991956D0;
  v7[137] = xmmword_199193070;
  v7[138] = xmmword_1991956E0;
  v7[139] = xmmword_1991956F0;
  v7[140] = xmmword_199195700;
  v7[141] = xmmword_199195710;
  v7[142] = xmmword_199195720;
  v7[143] = xmmword_199195730;
  v7[144] = xmmword_199195740;
  v7[145] = xmmword_199195750;
  v7[146] = xmmword_199195760;
  v7[147] = xmmword_199195770;
  v7[148] = xmmword_199193130;
  v7[149] = xmmword_199193140;
  v7[150] = xmmword_199193150;
  v7[151] = xmmword_199195780;
  v7[152] = xmmword_199195790;
  v7[153] = xmmword_1991957A0;
  v7[154] = xmmword_1991957B0;
  v7[155] = xmmword_1991957C0;
  v7[156] = xmmword_1991957D0;
  v7[157] = xmmword_1991931F0;
  v7[158] = xmmword_1991957E0;
  v7[159] = xmmword_199193210;
  v7[160] = xmmword_199193220;
  v7[161] = xmmword_199193230;
  v7[162] = xmmword_199193240;
  v7[163] = xmmword_199193250;
  v7[164] = xmmword_199193260;
  v7[165] = xmmword_199193270;
  v7[166] = xmmword_199193280;
  v7[167] = xmmword_1991957F0;
  v7[168] = xmmword_199195800;
  v7[169] = xmmword_199195810;
  v7[170] = xmmword_199195820;
  v7[171] = xmmword_199195830;
  v7[172] = xmmword_1991932F0;
  v7[173] = xmmword_199195840;
  v7[174] = xmmword_199195850;
  v7[175] = xmmword_199195860;
  v7[176] = xmmword_199195870;
  v7[177] = xmmword_199193360;
  v7[178] = xmmword_199195880;
  v7[179] = xmmword_199195890;
  v7[180] = xmmword_1991958A0;
  v7[181] = xmmword_1991958B0;
  v7[182] = xmmword_1991958C0;
  v7[183] = xmmword_1991958D0;
  v7[184] = xmmword_1991958E0;
  v7[185] = xmmword_1991958F0;
  v7[186] = xmmword_199195900;
  v7[187] = xmmword_199195910;
  v7[188] = xmmword_199193430;
  v7[189] = xmmword_199195920;
  v7[190] = xmmword_199195930;
  v7[191] = xmmword_199193470;
  v7[192] = xmmword_199193480;
  v7[193] = xmmword_199195940;
  v7[194] = xmmword_199195950;
  v7[195] = xmmword_199195960;
  v7[196] = xmmword_199195970;
  v7[197] = xmmword_199195980;
  v7[198] = xmmword_199195990;
  v7[199] = xmmword_1991959A0;
  v7[200] = xmmword_1991959B0;
  v7[201] = xmmword_199193550;
  v7[202] = xmmword_1991959C0;
  v7[203] = xmmword_1991959D0;
  v7[204] = xmmword_1991959E0;
  v7[205] = xmmword_1991959F0;
  v7[206] = xmmword_199195A00;
  v7[207] = xmmword_199195A10;
  v7[208] = xmmword_199193620;
  v7[209] = xmmword_199195A20;
  v7[210] = xmmword_199195A30;
  v7[211] = xmmword_199195A40;
  v7[212] = xmmword_199195A50;
  v7[213] = xmmword_199195A60;
  v7[214] = xmmword_1991936B0;
  v7[215] = xmmword_199195A70;
  v7[216] = xmmword_199195A80;
  v7[217] = xmmword_199193700;
  v7[218] = xmmword_199195A90;
  v7[219] = xmmword_199195AA0;
  v7[220] = xmmword_199193740;
  v7[221] = xmmword_199193750;
  v7[222] = xmmword_199193760;
  v7[223] = xmmword_199193770;
  v7[224] = xmmword_199193780;
  v7[225] = xmmword_199193790;
  v7[226] = xmmword_1991937A0;
  v7[227] = xmmword_199193810;
  v7[228] = xmmword_199193820;
  v7[229] = xmmword_199193830;
  v7[230] = xmmword_199193840;
  v7[231] = xmmword_199193850;
  v7[232] = xmmword_199193860;
  v7[233] = xmmword_199193870;
  v7[234] = xmmword_199193880;
  v7[235] = xmmword_199195AB0;
  v7[236] = xmmword_199195AC0;
  v7[237] = xmmword_199195AD0;
  v7[238] = xmmword_199195AE0;
  v7[239] = xmmword_199195AF0;
  v7[240] = xmmword_199195B00;
  v7[241] = xmmword_199195B10;
  v7[242] = xmmword_199195B20;
  v7[243] = xmmword_199195B30;
  v7[244] = xmmword_199195B40;
  v7[245] = xmmword_199193930;
  v7[246] = xmmword_199193940;
  v7[247] = xmmword_199195B50;
  v7[248] = xmmword_199195B60;
  v7[249] = xmmword_199195B70;
  v7[250] = xmmword_199195B80;
  v7[251] = xmmword_199195B90;
  v7[252] = xmmword_199195BA0;
  v7[253] = xmmword_199195BB0;
  v7[254] = xmmword_199195BC0;
  v7[255] = xmmword_199195BD0;
  v7[256] = xmmword_199193B30;
  v7[257] = xmmword_199193B40;
  v7[258] = xmmword_199193B50;
  v7[259] = xmmword_199193B60;
  v8 = 0x323AF00031350;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, (uint64_t *)&v10, 2uLL, v9, 0x89uLL, v5, (uint64_t *)v7, 0x209uLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass6@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[58];
  _OWORD v7[6];
  int v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_199194FF0;
  v7[2] = xmmword_199182584;
  v7[3] = unk_199182594;
  v7[4] = xmmword_1991825A4;
  v7[5] = unk_1991825B4;
  v7[0] = xmmword_199182564;
  v7[1] = unk_199182574;
  v8 = 120134;
  v6[0] = xmmword_199195000;
  v6[1] = xmmword_199195BE0;
  v6[2] = xmmword_199195BF0;
  v6[3] = xmmword_199195C00;
  v6[4] = xmmword_199195C10;
  v6[5] = xmmword_199195C20;
  v6[6] = xmmword_199195C30;
  v6[7] = xmmword_199195C40;
  v6[8] = xmmword_199195C50;
  v6[9] = xmmword_199195C60;
  v6[10] = xmmword_199195C70;
  v6[11] = xmmword_199195C80;
  v6[12] = xmmword_199195C90;
  v6[13] = xmmword_199195CA0;
  v6[14] = xmmword_199195400;
  v6[15] = xmmword_199195410;
  v6[16] = xmmword_199195420;
  v6[17] = xmmword_199195430;
  v6[18] = xmmword_199195440;
  v6[19] = xmmword_199195450;
  v6[20] = xmmword_199195460;
  v6[21] = xmmword_199195CB0;
  v6[22] = xmmword_199195CC0;
  v6[23] = xmmword_199195CD0;
  v6[24] = xmmword_199195CE0;
  v6[25] = xmmword_199195CF0;
  v6[26] = xmmword_1991954C0;
  v6[27] = xmmword_199195D00;
  v6[28] = xmmword_199195D10;
  v6[29] = xmmword_199195D20;
  v6[30] = xmmword_199195D30;
  v6[31] = xmmword_199195D40;
  v6[32] = xmmword_199195D50;
  v6[33] = xmmword_199195D60;
  v6[34] = xmmword_199195D70;
  v6[35] = xmmword_199195D80;
  v6[36] = xmmword_199195D90;
  v6[37] = xmmword_199193210;
  v6[38] = xmmword_199193220;
  v6[39] = xmmword_199193230;
  v6[40] = xmmword_199195DA0;
  v6[41] = xmmword_199195DB0;
  v6[42] = xmmword_199195DC0;
  v6[43] = xmmword_199195DD0;
  v6[44] = xmmword_199195DE0;
  v6[45] = xmmword_199195DF0;
  v6[46] = xmmword_199195E00;
  v6[47] = xmmword_199195E10;
  v6[48] = xmmword_199195E20;
  v6[49] = xmmword_199195E30;
  v6[50] = xmmword_199195E40;
  v6[51] = xmmword_199195E50;
  v6[52] = xmmword_199195E60;
  v6[53] = xmmword_199195E70;
  v6[54] = xmmword_199195E80;
  v6[55] = xmmword_199195E90;
  v6[56] = xmmword_199195EA0;
  v6[57] = xmmword_199195EB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v9, 2uLL, (int *)v7, 0x19uLL, v4, (uint64_t *)v6, 0x74uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass7@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v7 = 0x9F00000080;
  v8[0] = 0x1F00000000;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, v8, 1uLL, 0, 0, v4, &v7, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = 32;
  v9 = 12288;
  v7 = xmmword_199195EC0;
  v8 = xmmword_1991825C8;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, 0, 0, (int *)&v8, 5uLL, v4, (uint64_t *)&v7, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass9@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1991825C8;
  v9 = 12288;
  v7 = 0x200A00002000;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, 0, 0, (int *)&v8, 5uLL, v4, &v7, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass10@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[59];
  _OWORD v7[16];
  _OWORD v8[3];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0x7B0000005FLL;
  v10 = 125;
  v8[0] = xmmword_199195ED0;
  v8[1] = xmmword_199195EE0;
  v8[2] = xmmword_199195EF0;
  v7[12] = xmmword_19918269C;
  v7[13] = unk_1991826AC;
  v7[14] = xmmword_1991826BC;
  v7[15] = unk_1991826CC;
  v7[8] = xmmword_19918265C;
  v7[9] = unk_19918266C;
  v7[10] = xmmword_19918267C;
  v7[11] = unk_19918268C;
  v7[4] = xmmword_19918261C;
  v7[5] = unk_19918262C;
  v7[6] = xmmword_19918263C;
  v7[7] = unk_19918264C;
  v7[0] = xmmword_1991825DC;
  v7[1] = unk_1991825EC;
  v7[2] = xmmword_1991825FC;
  v7[3] = unk_19918260C;
  v6[0] = xmmword_199195F00;
  v6[1] = xmmword_199195F10;
  v6[2] = xmmword_199195F20;
  v6[3] = xmmword_199195F30;
  v6[4] = xmmword_199195F40;
  v6[5] = xmmword_199195F50;
  v6[6] = xmmword_199195F60;
  v6[7] = xmmword_199195F70;
  v6[8] = xmmword_199195F80;
  v6[9] = xmmword_199195F90;
  v6[10] = xmmword_199195FA0;
  v6[11] = xmmword_199195FB0;
  v6[12] = xmmword_199195FC0;
  v6[13] = xmmword_199195FD0;
  v6[14] = xmmword_199195FE0;
  v6[15] = xmmword_199195FF0;
  v6[16] = xmmword_199196000;
  v6[17] = xmmword_199196010;
  v6[18] = xmmword_199196020;
  v6[19] = xmmword_199196030;
  v6[20] = xmmword_199196040;
  v6[21] = xmmword_199196050;
  v6[22] = xmmword_199196060;
  v6[23] = xmmword_199196070;
  v6[24] = xmmword_199196080;
  v6[25] = xmmword_199196090;
  v6[26] = xmmword_1991960A0;
  v6[27] = xmmword_1991960B0;
  v6[28] = xmmword_1991960C0;
  v6[29] = xmmword_1991960D0;
  v6[30] = xmmword_1991960E0;
  v6[31] = xmmword_1991960F0;
  v6[32] = xmmword_199196100;
  v6[33] = xmmword_199196110;
  v6[34] = xmmword_199196120;
  v6[35] = xmmword_199196130;
  v6[36] = xmmword_199196140;
  v6[37] = xmmword_199196150;
  v6[38] = xmmword_199196160;
  v6[39] = xmmword_199196170;
  v6[40] = xmmword_199196180;
  v6[41] = xmmword_199196190;
  v6[42] = xmmword_1991961A0;
  v6[43] = xmmword_1991961B0;
  v6[44] = xmmword_1991961C0;
  v6[45] = xmmword_1991961D0;
  v6[46] = xmmword_1991961E0;
  v6[47] = xmmword_1991961F0;
  v6[48] = xmmword_199196200;
  v6[49] = xmmword_199196210;
  v6[50] = xmmword_199196220;
  v6[51] = xmmword_199196230;
  v6[52] = xmmword_199196240;
  v6[53] = xmmword_199196250;
  v6[54] = xmmword_199196260;
  v6[55] = xmmword_199196270;
  v6[56] = xmmword_199196280;
  v6[57] = xmmword_199196290;
  v6[58] = xmmword_1991962A0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v9, 3uLL, (uint64_t *)v8, 6uLL, (int *)v7, 0x40uLL, v4, (uint64_t *)v6, 0x76uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass11@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[57];
  uint64_t v7;
  _OWORD v8[16];
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 92;
  v9[0] = xmmword_1991962B0;
  v9[1] = xmmword_1991962C0;
  v10 = 0x400000003FLL;
  v11 = 0x2C0000002ALL;
  v8[12] = xmmword_19918279C;
  v8[13] = unk_1991827AC;
  v8[14] = xmmword_1991827BC;
  v8[15] = unk_1991827CC;
  v8[8] = xmmword_19918275C;
  v8[9] = unk_19918276C;
  v8[10] = xmmword_19918277C;
  v8[11] = unk_19918278C;
  v8[5] = unk_19918272C;
  v8[6] = xmmword_19918273C;
  v8[7] = unk_19918274C;
  v8[0] = xmmword_1991826DC;
  v8[1] = unk_1991826EC;
  v8[2] = xmmword_1991826FC;
  v8[3] = unk_19918270C;
  v8[4] = xmmword_19918271C;
  v6[0] = xmmword_199195F00;
  v6[1] = xmmword_1991962D0;
  v6[2] = xmmword_1991962E0;
  v6[3] = xmmword_1991962F0;
  v6[4] = xmmword_199196300;
  v6[5] = xmmword_199196310;
  v6[6] = xmmword_199196320;
  v6[7] = xmmword_199195F80;
  v6[8] = xmmword_199196330;
  v6[9] = xmmword_199196340;
  v6[10] = xmmword_199196350;
  v6[11] = xmmword_199196360;
  v6[12] = xmmword_199195FD0;
  v6[13] = xmmword_199195FE0;
  v6[14] = xmmword_199195FF0;
  v6[15] = xmmword_199196000;
  v6[16] = xmmword_199196370;
  v6[17] = xmmword_199196380;
  v6[18] = xmmword_199196390;
  v6[19] = xmmword_1991963A0;
  v6[20] = xmmword_1991963B0;
  v6[21] = xmmword_1991963C0;
  v6[22] = xmmword_1991963D0;
  v6[23] = xmmword_1991963E0;
  v6[24] = xmmword_1991963F0;
  v6[25] = xmmword_199196400;
  v6[26] = xmmword_199196410;
  v6[27] = xmmword_1991960D0;
  v6[28] = xmmword_1991960E0;
  v6[29] = xmmword_1991960F0;
  v6[30] = xmmword_199196100;
  v6[31] = xmmword_199196110;
  v6[32] = xmmword_199196420;
  v6[33] = xmmword_199196430;
  v6[34] = xmmword_199196440;
  v6[35] = xmmword_199196450;
  v6[36] = xmmword_199196460;
  v6[37] = xmmword_199196470;
  v6[38] = xmmword_199196480;
  v6[39] = xmmword_199196490;
  v6[40] = xmmword_1991964A0;
  v6[41] = xmmword_1991964B0;
  v6[42] = xmmword_1991964C0;
  v6[43] = xmmword_1991964D0;
  v6[44] = xmmword_1991964E0;
  v6[45] = xmmword_1991964F0;
  v6[46] = xmmword_199196500;
  v6[47] = xmmword_199196510;
  v6[48] = xmmword_199196520;
  v6[49] = xmmword_199196530;
  v6[50] = xmmword_199196540;
  v6[51] = xmmword_199196550;
  v6[52] = xmmword_199196560;
  v6[53] = xmmword_199196570;
  v6[54] = xmmword_199196580;
  v6[55] = xmmword_199196590;
  v6[56] = xmmword_1991965A0;
  v7 = 0x1E95F0001E95ELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v11, 3uLL, (uint64_t *)v9, 5uLL, (int *)v8, 0x40uLL, v4, (uint64_t *)v6, 0x73uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass12@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[76];
  uint64_t v7;
  int __dst[73];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_1991827DC;
  v11 = 0x7E0000007CLL;
  v9 = 0x3E0000003CLL;
  memcpy(__dst, &unk_1991827F4, sizeof(__dst));
  v6[0] = xmmword_1991965B0;
  v6[1] = xmmword_1991965C0;
  v6[2] = xmmword_1991965D0;
  v6[3] = xmmword_1991965E0;
  v6[4] = xmmword_1991965F0;
  v6[5] = xmmword_199196600;
  v6[6] = xmmword_199196610;
  v6[7] = xmmword_199196620;
  v6[8] = xmmword_199196630;
  v6[9] = xmmword_199196640;
  v6[10] = xmmword_199196650;
  v6[11] = xmmword_199196660;
  v6[12] = xmmword_199196670;
  v6[13] = xmmword_199196680;
  v6[14] = xmmword_199196690;
  v6[15] = xmmword_1991966A0;
  v6[16] = xmmword_1991966B0;
  v6[17] = xmmword_1991966C0;
  v6[18] = xmmword_1991966D0;
  v6[19] = xmmword_1991966E0;
  v6[20] = xmmword_1991966F0;
  v6[21] = xmmword_199196700;
  v6[22] = xmmword_199196710;
  v6[23] = xmmword_199196720;
  v6[24] = xmmword_199196730;
  v6[25] = xmmword_199196740;
  v6[26] = xmmword_199196750;
  v6[27] = xmmword_199196760;
  v6[28] = xmmword_199196770;
  v6[29] = xmmword_199196780;
  v6[30] = xmmword_199196790;
  v6[31] = xmmword_1991967A0;
  v6[32] = xmmword_1991967B0;
  v6[33] = xmmword_1991967C0;
  v6[34] = xmmword_1991967D0;
  v6[35] = xmmword_1991967E0;
  v6[36] = xmmword_1991967F0;
  v6[37] = xmmword_199196800;
  v6[38] = xmmword_199196810;
  v6[39] = xmmword_199196820;
  v6[40] = xmmword_199196830;
  v6[41] = xmmword_199196840;
  v6[42] = xmmword_199196850;
  v6[43] = xmmword_199196860;
  v6[44] = xmmword_199196870;
  v6[45] = xmmword_199196880;
  v6[46] = xmmword_199196890;
  v6[47] = xmmword_1991968A0;
  v6[48] = xmmword_1991968B0;
  v6[49] = xmmword_1991968C0;
  v6[50] = xmmword_1991968D0;
  v6[51] = xmmword_1991968E0;
  v6[52] = xmmword_1991968F0;
  v6[53] = xmmword_199196900;
  v6[54] = xmmword_199196910;
  v6[55] = xmmword_199196920;
  v6[56] = xmmword_199196930;
  v6[57] = xmmword_199196940;
  v6[58] = xmmword_199196950;
  v6[59] = xmmword_199193A10;
  v6[60] = xmmword_199193A20;
  v6[61] = xmmword_199193A30;
  v6[62] = xmmword_199196960;
  v6[63] = xmmword_199193A50;
  v6[64] = xmmword_199193A60;
  v6[65] = xmmword_199193A70;
  v6[66] = xmmword_199193A80;
  v6[67] = xmmword_199193A90;
  v6[68] = xmmword_199193AA0;
  v6[69] = xmmword_199193AB0;
  v6[70] = xmmword_199193AC0;
  v6[71] = xmmword_199193AD0;
  v6[72] = xmmword_199193AE0;
  v6[73] = xmmword_199193AF0;
  v6[74] = xmmword_199193B00;
  v6[75] = xmmword_199193B10;
  v7 = 0x1FBCA0001FB94;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v10, 6uLL, &v9, 1uLL, __dst, 0x49uLL, v4, (uint64_t *)v6, 0x99uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass13@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[3];
  uint64_t v8;
  _OWORD v9[3];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 36;
  v9[0] = xmmword_199182918;
  v9[1] = unk_199182928;
  v9[2] = xmmword_199182938;
  v10 = 126128;
  v7[0] = xmmword_199196970;
  v7[1] = xmmword_199196980;
  v7[2] = xmmword_199196990;
  v8 = 0x11FE000011FDDLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, 0, 0, (int *)v9, 0xDuLL, v4, (uint64_t *)v7, 7uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass14@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int __dst[76];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0x5B00000028;
  v8 = 123;
  memcpy(__dst, &unk_19918294C, sizeof(__dst));
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v7, 3uLL, 0, 0, __dst, 0x4CuLL, v4, 0, 0, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass15@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int __dst[72];
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0x5D00000029;
  v9 = 125;
  memcpy(__dst, &unk_199182A7C, sizeof(__dst));
  v6 = 0x301F0000301ELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v8, 3uLL, 0, 0, __dst, 0x48uLL, v4, &v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass16@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[12];
  uint64_t v7;
  _OWORD v8[7];
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 126;
  v10 = 0x3E0000003CLL;
  v11 = 0x7C0000002BLL;
  v8[6] = xmmword_199182BFC;
  v9[0] = unk_199182C0C;
  *(_OWORD *)((char *)v9 + 12) = unk_199182C18;
  v8[2] = xmmword_199182BBC;
  v8[3] = unk_199182BCC;
  v8[4] = xmmword_199182BDC;
  v8[5] = unk_199182BEC;
  v8[0] = xmmword_199182B9C;
  v8[1] = unk_199182BAC;
  v6[0] = xmmword_1991969A0;
  v6[1] = xmmword_1991969B0;
  v6[2] = xmmword_1991969C0;
  v6[3] = xmmword_1991969D0;
  v6[4] = xmmword_1991969E0;
  v6[5] = xmmword_1991969F0;
  v6[6] = xmmword_199196A00;
  v6[7] = xmmword_199196A10;
  v6[8] = xmmword_199196760;
  v6[9] = xmmword_199196A20;
  v6[10] = xmmword_199196A30;
  v6[11] = xmmword_199196A40;
  v7 = 0x1EEF10001EEF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v11, 3uLL, &v10, 1uLL, (int *)v8, 0x23uLL, v4, (uint64_t *)v6, 0x19uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass17@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 45;
  v9[0] = xmmword_199182C28;
  v9[1] = unk_199182C38;
  v10[0] = xmmword_199182C48;
  *(_OWORD *)((char *)v10 + 12) = *(__int128 *)((char *)&xmmword_199182C48 + 12);
  v7 = xmmword_199196A50;
  v8 = 0xFE320000FE31;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, 0, 0, (int *)v9, 0xFuLL, v4, (uint64_t *)&v7, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass18@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[65];
  __int128 v7;
  uint64_t v8;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x3900000030;
  v7 = xmmword_199182C64;
  v8 = 0x1034A00010341;
  v6[0] = xmmword_199196A60;
  v6[1] = xmmword_199196A70;
  v6[2] = xmmword_199196A80;
  v6[3] = xmmword_199196A90;
  v6[4] = xmmword_199196AA0;
  v6[5] = xmmword_199196AB0;
  v6[6] = xmmword_199196AC0;
  v6[7] = xmmword_199196AD0;
  v6[8] = xmmword_199196AE0;
  v6[9] = xmmword_199196AF0;
  v6[10] = xmmword_199196B00;
  v6[11] = xmmword_199196B10;
  v6[12] = xmmword_199196B20;
  v6[13] = xmmword_199192CF0;
  v6[14] = xmmword_199196B30;
  v6[15] = xmmword_199196B40;
  v6[16] = xmmword_199196B50;
  v6[17] = xmmword_199196B60;
  v6[18] = xmmword_199196B70;
  v6[19] = xmmword_199196B80;
  v6[20] = xmmword_199196B90;
  v6[21] = xmmword_199196BA0;
  v6[22] = xmmword_199196BB0;
  v6[23] = xmmword_199196BC0;
  v6[24] = xmmword_199196BD0;
  v6[25] = xmmword_199196BE0;
  v6[26] = xmmword_199196BF0;
  v6[27] = xmmword_199196C00;
  v6[28] = xmmword_199196C10;
  v6[29] = xmmword_199196C20;
  v6[30] = xmmword_199196C30;
  v6[31] = xmmword_199196C40;
  v6[32] = xmmword_199196C50;
  v6[33] = xmmword_199196C60;
  v6[34] = xmmword_199196C70;
  v6[35] = xmmword_199196C80;
  v6[36] = xmmword_199196C90;
  v6[37] = xmmword_199196CA0;
  v6[38] = xmmword_199196CB0;
  v6[39] = xmmword_199196CC0;
  v6[40] = xmmword_199196CD0;
  v6[41] = xmmword_199196CE0;
  v6[42] = xmmword_199196CF0;
  v6[43] = xmmword_199196D00;
  v6[44] = xmmword_199196D10;
  v6[45] = xmmword_199196D20;
  v6[46] = xmmword_199196D30;
  v6[47] = xmmword_199196D40;
  v6[48] = xmmword_199196D50;
  v6[49] = xmmword_199196D60;
  v6[50] = xmmword_199196D70;
  v6[51] = xmmword_199196D80;
  v6[52] = xmmword_199196D90;
  v6[53] = xmmword_199196DA0;
  v6[54] = xmmword_199196DB0;
  v6[55] = xmmword_199196DC0;
  v6[56] = xmmword_199196DD0;
  v6[57] = xmmword_1991937F0;
  v6[58] = xmmword_199196DE0;
  v6[59] = xmmword_199196DF0;
  v6[60] = xmmword_199196E00;
  v6[61] = xmmword_199196E10;
  v6[62] = xmmword_199196E20;
  v6[63] = xmmword_199196E30;
  v6[64] = xmmword_199196E40;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v9, 1uLL, (int *)&v7, 6uLL, v4, (uint64_t *)v6, 0x82uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass19@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[31];
  uint64_t v7;
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x3900000030;
  v6[0] = xmmword_199196A70;
  v6[1] = xmmword_199196A80;
  v6[2] = xmmword_199196E50;
  v6[3] = xmmword_199196E60;
  v6[4] = xmmword_199196E70;
  v6[5] = xmmword_199196E80;
  v6[6] = xmmword_199196AF0;
  v6[7] = xmmword_199196E90;
  v6[8] = xmmword_199196B10;
  v6[9] = xmmword_199196EA0;
  v6[10] = xmmword_199196EB0;
  v6[11] = xmmword_199196EC0;
  v6[12] = xmmword_199196ED0;
  v6[13] = xmmword_199196EE0;
  v6[14] = xmmword_199196EF0;
  v6[15] = xmmword_199196C10;
  v6[16] = xmmword_199196C20;
  v6[17] = xmmword_199196C30;
  v6[18] = xmmword_199196F00;
  v6[19] = xmmword_199196F10;
  v6[20] = xmmword_199196D30;
  v6[21] = xmmword_199196F20;
  v6[22] = xmmword_199196F30;
  v6[23] = xmmword_199196F40;
  v6[24] = xmmword_199196F50;
  v6[25] = xmmword_199196F60;
  v6[26] = xmmword_199196F70;
  v6[27] = xmmword_199196F80;
  v6[28] = xmmword_199196F90;
  v6[29] = xmmword_199196DF0;
  v6[30] = xmmword_199196FA0;
  v7 = 0x1FBF90001FBF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v8, 1uLL, 0, 0, v4, (uint64_t *)v6, 0x3FuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass20@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[47];
  uint64_t v7;
  int __dst[550];
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x5A00000041;
  memcpy(__dst, &unk_1991848C0, sizeof(__dst));
  v6[0] = xmmword_199196FB0;
  v6[1] = xmmword_199196FC0;
  v6[2] = xmmword_199196FD0;
  v6[3] = xmmword_199196FE0;
  v6[4] = xmmword_199196FF0;
  v6[5] = xmmword_199197000;
  v6[6] = xmmword_199197010;
  v6[7] = xmmword_199197020;
  v6[8] = xmmword_199197030;
  v6[9] = xmmword_199197040;
  v6[10] = xmmword_199197050;
  v6[11] = xmmword_199197060;
  v6[12] = xmmword_199197070;
  v6[13] = xmmword_199197080;
  v6[14] = xmmword_199197090;
  v6[15] = xmmword_199195C80;
  v6[16] = xmmword_1991970A0;
  v6[17] = xmmword_1991970B0;
  v6[18] = xmmword_1991970C0;
  v6[19] = xmmword_1991970D0;
  v6[20] = xmmword_1991970E0;
  v6[21] = xmmword_1991970F0;
  v6[22] = xmmword_199197100;
  v6[23] = xmmword_199197110;
  v6[24] = xmmword_199197120;
  v6[25] = xmmword_199197130;
  v6[26] = xmmword_199197140;
  v6[27] = xmmword_199197150;
  v6[28] = xmmword_199197160;
  v6[29] = xmmword_199197170;
  v6[30] = xmmword_199197180;
  v6[31] = xmmword_199197190;
  v6[32] = xmmword_1991971A0;
  v6[33] = xmmword_1991971B0;
  v6[34] = xmmword_1991971C0;
  v6[35] = xmmword_199193820;
  v6[36] = xmmword_1991971D0;
  v6[37] = xmmword_1991971E0;
  v6[38] = xmmword_199193850;
  v6[39] = xmmword_1991971F0;
  v6[40] = xmmword_199193870;
  v6[41] = xmmword_199197200;
  v6[42] = xmmword_199197210;
  v6[43] = xmmword_199197220;
  v6[44] = xmmword_199197230;
  v6[45] = xmmword_199197240;
  v6[46] = xmmword_199197250;
  v7 = 0x1E9210001E900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v9, 1uLL, __dst, 0x226uLL, v4, (uint64_t *)v6, 0x5FuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass21@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[8];
  uint64_t v7;
  _OWORD v8[3];
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x600000005ELL;
  v8[0] = xmmword_199182C7C;
  v8[1] = unk_199182C8C;
  v8[2] = xmmword_199182C9C;
  v6[0] = xmmword_199197260;
  v6[1] = xmmword_199197270;
  v6[2] = xmmword_199197280;
  v6[3] = xmmword_199197290;
  v6[4] = xmmword_1991972A0;
  v6[5] = xmmword_1991972B0;
  v6[6] = xmmword_199196830;
  v6[7] = xmmword_1991972C0;
  v7 = 0x1F3FF0001F3FBLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)v9, 2uLL, 0, 0, (int *)v8, 0xCuLL, v4, (uint64_t *)v6, 0x11uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass22@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = 95;
  v9[0] = 0xFF3F00002054;
  v7 = xmmword_1991972D0;
  v8 = 0xFE4F0000FE4DLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, 0, 0, (int *)v9, 2uLL, v4, (uint64_t *)&v7, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass23@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[55];
  int __dst[547];
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x7A00000061;
  memcpy(__dst, &unk_199182CAC, sizeof(__dst));
  v6[0] = xmmword_1991972E0;
  v6[1] = xmmword_1991972F0;
  v6[2] = xmmword_199197300;
  v6[3] = xmmword_199197310;
  v6[4] = xmmword_199197320;
  v6[5] = xmmword_199197330;
  v6[6] = xmmword_199197340;
  v6[7] = xmmword_199197350;
  v6[8] = xmmword_199197360;
  v6[9] = xmmword_199197370;
  v6[10] = xmmword_199197380;
  v6[11] = xmmword_199197390;
  v6[12] = xmmword_1991973A0;
  v6[13] = xmmword_1991973B0;
  v6[14] = xmmword_1991973C0;
  v6[15] = xmmword_1991973D0;
  v6[16] = xmmword_1991973E0;
  v6[17] = xmmword_1991973F0;
  v6[18] = xmmword_199197400;
  v6[19] = xmmword_199197410;
  v6[20] = xmmword_199197420;
  v6[21] = xmmword_199197430;
  v6[22] = xmmword_199197440;
  v6[23] = xmmword_199197450;
  v6[24] = xmmword_199197460;
  v6[25] = xmmword_199197470;
  v6[26] = xmmword_199197480;
  v6[27] = xmmword_199197490;
  v6[28] = xmmword_1991974A0;
  v6[29] = xmmword_1991974B0;
  v6[30] = xmmword_1991974C0;
  v6[31] = xmmword_1991974D0;
  v6[32] = xmmword_1991974E0;
  v6[33] = xmmword_199195D50;
  v6[34] = xmmword_199195D60;
  v6[35] = xmmword_1991974F0;
  v6[36] = xmmword_199197500;
  v6[37] = xmmword_199193230;
  v6[38] = xmmword_199197510;
  v6[39] = xmmword_199197520;
  v6[40] = xmmword_199197530;
  v6[41] = xmmword_199197540;
  v6[42] = xmmword_199197550;
  v6[43] = xmmword_199197560;
  v6[44] = xmmword_199197570;
  v6[45] = xmmword_199197580;
  v6[46] = xmmword_199197590;
  v6[47] = xmmword_1991975A0;
  v6[48] = xmmword_1991975B0;
  v6[49] = xmmword_1991975C0;
  v6[50] = xmmword_1991975D0;
  v6[51] = xmmword_1991975E0;
  v6[52] = xmmword_1991975F0;
  v6[53] = xmmword_199195EA0;
  v6[54] = xmmword_199197600;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v8, 1uLL, __dst, 0x223uLL, v4, (uint64_t *)v6, 0x6EuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass24@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[69];
  uint64_t v7;
  _OWORD v8[11];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[8] = xmmword_1991835B8;
  v8[9] = unk_1991835C8;
  v8[10] = xmmword_1991835D8;
  v9 = 0x1F7F00001ED2ELL;
  v8[4] = xmmword_199183578;
  v8[5] = unk_199183588;
  v8[6] = xmmword_199183598;
  v8[7] = unk_1991835A8;
  v8[0] = xmmword_199183538;
  v8[1] = unk_199183548;
  v8[2] = xmmword_199183558;
  v8[3] = unk_199183568;
  v6[0] = xmmword_199197610;
  v6[1] = xmmword_199197620;
  v6[2] = xmmword_199196630;
  v6[3] = xmmword_199196640;
  v6[4] = xmmword_199196650;
  v6[5] = xmmword_199196660;
  v6[6] = xmmword_199196670;
  v6[7] = xmmword_199196680;
  v6[8] = xmmword_1991966D0;
  v6[9] = xmmword_199197630;
  v6[10] = xmmword_1991966F0;
  v6[11] = xmmword_199197640;
  v6[12] = xmmword_199197650;
  v6[13] = xmmword_199197660;
  v6[14] = xmmword_199197670;
  v6[15] = xmmword_199197680;
  v6[16] = xmmword_199197690;
  v6[17] = xmmword_1991976A0;
  v6[18] = xmmword_1991976B0;
  v6[19] = xmmword_1991976C0;
  v6[20] = xmmword_1991976D0;
  v6[21] = xmmword_1991976E0;
  v6[22] = xmmword_1991976F0;
  v6[23] = xmmword_199197700;
  v6[24] = xmmword_199197710;
  v6[25] = xmmword_199197720;
  v6[26] = xmmword_199196780;
  v6[27] = xmmword_199196790;
  v6[28] = xmmword_1991967A0;
  v6[29] = xmmword_1991967B0;
  v6[30] = xmmword_1991967C0;
  v6[31] = xmmword_199197730;
  v6[32] = xmmword_199197740;
  v6[33] = xmmword_199197750;
  v6[34] = xmmword_199197760;
  v6[35] = xmmword_199197770;
  v6[36] = xmmword_199197780;
  v6[37] = xmmword_199197790;
  v6[38] = xmmword_1991977A0;
  v6[39] = xmmword_1991977B0;
  v6[40] = xmmword_1991977C0;
  v6[41] = xmmword_1991977D0;
  v6[42] = xmmword_1991977E0;
  v6[43] = xmmword_1991977F0;
  v6[44] = xmmword_1991968E0;
  v6[45] = xmmword_1991968F0;
  v6[46] = xmmword_199196900;
  v6[47] = xmmword_199196910;
  v6[48] = xmmword_199196920;
  v6[49] = xmmword_199196930;
  v6[50] = xmmword_199196940;
  v6[51] = xmmword_199197800;
  v6[52] = xmmword_199197810;
  v6[53] = xmmword_199197820;
  v6[54] = xmmword_199197830;
  v6[55] = xmmword_199197840;
  v6[56] = xmmword_199197850;
  v6[57] = xmmword_199197860;
  v6[58] = xmmword_199197870;
  v6[59] = xmmword_199193A80;
  v6[60] = xmmword_199193A90;
  v6[61] = xmmword_199193AA0;
  v6[62] = xmmword_199193AB0;
  v6[63] = xmmword_199193AC0;
  v6[64] = xmmword_199193AD0;
  v6[65] = xmmword_199193AE0;
  v6[66] = xmmword_199193AF0;
  v6[67] = xmmword_199193B00;
  v6[68] = xmmword_199193B10;
  v7 = 0x1FBCA0001FB94;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 0x2EuLL, v4, (uint64_t *)v6, 0x8BuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass25@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[201];
  uint64_t v7;
  int __dst[108];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_1991835F0, sizeof(__dst));
  v6[0] = xmmword_199197880;
  v6[1] = xmmword_199197890;
  v6[2] = xmmword_1991978A0;
  v6[3] = xmmword_1991978B0;
  v6[4] = xmmword_1991950B0;
  v6[5] = xmmword_1991950C0;
  v6[6] = xmmword_1991978C0;
  v6[7] = xmmword_1991978D0;
  v6[8] = xmmword_1991978E0;
  v6[9] = xmmword_1991978F0;
  v6[10] = xmmword_199197900;
  v6[11] = xmmword_199197910;
  v6[12] = xmmword_199197920;
  v6[13] = xmmword_199197930;
  v6[14] = xmmword_199197940;
  v6[15] = xmmword_199197950;
  v6[16] = xmmword_199197960;
  v6[17] = xmmword_199197970;
  v6[18] = xmmword_199197980;
  v6[19] = xmmword_199197990;
  v6[20] = xmmword_1991979A0;
  v6[21] = xmmword_1991979B0;
  v6[22] = xmmword_1991979C0;
  v6[23] = xmmword_1991979D0;
  v6[24] = xmmword_1991979E0;
  v6[25] = xmmword_1991979F0;
  v6[26] = xmmword_199197A00;
  v6[27] = xmmword_199197A10;
  v6[28] = xmmword_199197A20;
  v6[29] = xmmword_199197A30;
  v6[30] = xmmword_199197A40;
  v6[31] = xmmword_199197A50;
  v6[32] = xmmword_199197A60;
  v6[33] = xmmword_199197A70;
  v6[34] = xmmword_199192AB0;
  v6[35] = xmmword_199192AC0;
  v6[36] = xmmword_199197A80;
  v6[37] = xmmword_199197A90;
  v6[38] = xmmword_199197AA0;
  v6[39] = xmmword_199197AB0;
  v6[40] = xmmword_199197AC0;
  v6[41] = xmmword_199197AD0;
  v6[42] = xmmword_199197AE0;
  v6[43] = xmmword_199197AF0;
  v6[44] = xmmword_199192BA0;
  v6[45] = xmmword_199197B00;
  v6[46] = xmmword_199197B10;
  v6[47] = xmmword_199197B20;
  v6[48] = xmmword_199197B30;
  v6[49] = xmmword_199197B40;
  v6[50] = xmmword_199197B50;
  v6[51] = xmmword_199197B60;
  v6[52] = xmmword_199197B70;
  v6[53] = xmmword_199197B80;
  v6[54] = xmmword_199197B90;
  v6[55] = xmmword_199197BA0;
  v6[56] = xmmword_199197BB0;
  v6[57] = xmmword_199197BC0;
  v6[58] = xmmword_199197BD0;
  v6[59] = xmmword_199197BE0;
  v6[60] = xmmword_199197BF0;
  v6[61] = xmmword_199197C00;
  v6[62] = xmmword_199197C10;
  v6[63] = xmmword_199197C20;
  v6[64] = xmmword_199197C30;
  v6[65] = xmmword_199197C40;
  v6[66] = xmmword_199195330;
  v6[67] = xmmword_199195340;
  v6[68] = xmmword_199195350;
  v6[69] = xmmword_199195360;
  v6[70] = xmmword_199195370;
  v6[71] = xmmword_199195380;
  v6[72] = xmmword_199195390;
  v6[73] = xmmword_1991953A0;
  v6[74] = xmmword_199197C50;
  v6[75] = xmmword_199197C60;
  v6[76] = xmmword_199197C70;
  v6[77] = xmmword_1991954D0;
  v6[78] = xmmword_1991954E0;
  v6[79] = xmmword_1991954F0;
  v6[80] = xmmword_199195500;
  v6[81] = xmmword_199195510;
  v6[82] = xmmword_199197C80;
  v6[83] = xmmword_199192F40;
  v6[84] = xmmword_199197C90;
  v6[85] = xmmword_199197CA0;
  v6[86] = xmmword_199197CB0;
  v6[87] = xmmword_199197CC0;
  v6[88] = xmmword_199197CD0;
  v6[89] = xmmword_199197CE0;
  v6[90] = xmmword_199197CF0;
  v6[91] = xmmword_199197D00;
  v6[92] = xmmword_199197D10;
  v6[93] = xmmword_199197D20;
  v6[94] = xmmword_199197D30;
  v6[95] = xmmword_199197D40;
  v6[96] = xmmword_199197D50;
  v6[97] = xmmword_199197D60;
  v6[98] = xmmword_199197D70;
  v6[99] = xmmword_199195680;
  v6[100] = xmmword_199197D80;
  v6[101] = xmmword_199197D90;
  v6[102] = xmmword_199197DA0;
  v6[103] = xmmword_199197DB0;
  v6[104] = xmmword_199197DC0;
  v6[105] = xmmword_199197DD0;
  v6[106] = xmmword_199197DE0;
  v6[107] = xmmword_199197DF0;
  v6[108] = xmmword_199193090;
  v6[109] = xmmword_199197E00;
  v6[110] = xmmword_199197E10;
  v6[111] = xmmword_199197E20;
  v6[112] = xmmword_1991930E0;
  v6[113] = xmmword_199197E30;
  v6[114] = xmmword_199197E40;
  v6[115] = xmmword_199193100;
  v6[116] = xmmword_199197E50;
  v6[117] = xmmword_199197E60;
  v6[118] = xmmword_199197E70;
  v6[119] = xmmword_199197E80;
  v6[120] = xmmword_199193190;
  v6[121] = xmmword_199197E90;
  v6[122] = xmmword_199197EA0;
  v6[123] = xmmword_199197EB0;
  v6[124] = xmmword_199197EC0;
  v6[125] = xmmword_199197ED0;
  v6[126] = xmmword_199197EE0;
  v6[127] = xmmword_199197EF0;
  v6[128] = xmmword_199193280;
  v6[129] = xmmword_1991957F0;
  v6[130] = xmmword_199195800;
  v6[131] = xmmword_199195810;
  v6[132] = xmmword_199195820;
  v6[133] = xmmword_199195830;
  v6[134] = xmmword_1991932F0;
  v6[135] = xmmword_199195840;
  v6[136] = xmmword_199195850;
  v6[137] = xmmword_199195860;
  v6[138] = xmmword_199195870;
  v6[139] = xmmword_199197F00;
  v6[140] = xmmword_199195890;
  v6[141] = xmmword_1991958A0;
  v6[142] = xmmword_1991958B0;
  v6[143] = xmmword_1991958C0;
  v6[144] = xmmword_1991958D0;
  v6[145] = xmmword_1991958E0;
  v6[146] = xmmword_1991958F0;
  v6[147] = xmmword_199195900;
  v6[148] = xmmword_199195910;
  v6[149] = xmmword_199193430;
  v6[150] = xmmword_199195920;
  v6[151] = xmmword_199195930;
  v6[152] = xmmword_199193470;
  v6[153] = xmmword_199193480;
  v6[154] = xmmword_199195940;
  v6[155] = xmmword_199195950;
  v6[156] = xmmword_199195960;
  v6[157] = xmmword_199195970;
  v6[158] = xmmword_199195980;
  v6[159] = xmmword_199195990;
  v6[160] = xmmword_1991959A0;
  v6[161] = xmmword_199197F10;
  v6[162] = xmmword_199197F20;
  v6[163] = xmmword_199197F30;
  v6[164] = xmmword_199197F40;
  v6[165] = xmmword_199197F50;
  v6[166] = xmmword_199197F60;
  v6[167] = xmmword_1991935F0;
  v6[168] = xmmword_199197F70;
  v6[169] = xmmword_199197F80;
  v6[170] = xmmword_199197F90;
  v6[171] = xmmword_199197FA0;
  v6[172] = xmmword_199197FB0;
  v6[173] = xmmword_199197FC0;
  v6[174] = xmmword_199197FD0;
  v6[175] = xmmword_199197FE0;
  v6[176] = xmmword_199197FF0;
  v6[177] = xmmword_199193700;
  v6[178] = xmmword_199198000;
  v6[179] = xmmword_199198010;
  v6[180] = xmmword_199193770;
  v6[181] = xmmword_199193780;
  v6[182] = xmmword_199193790;
  v6[183] = xmmword_1991937A0;
  v6[184] = xmmword_199198020;
  v6[185] = xmmword_199198030;
  v6[186] = xmmword_199198040;
  v6[187] = xmmword_199198050;
  v6[188] = xmmword_199198060;
  v6[189] = xmmword_199195B60;
  v6[190] = xmmword_199195B70;
  v6[191] = xmmword_199195B80;
  v6[192] = xmmword_199195B90;
  v6[193] = xmmword_199195BA0;
  v6[194] = xmmword_199195BB0;
  v6[195] = xmmword_199195BC0;
  v6[196] = xmmword_199195BD0;
  v6[197] = xmmword_199193B30;
  v6[198] = xmmword_199193B40;
  v6[199] = xmmword_199193B50;
  v6[200] = xmmword_199193B60;
  v7 = 0x323AF00031350;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, __dst, 0x6CuLL, v4, (uint64_t *)v6, 0x193uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass26@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = xmmword_1991837A0;
  v7[1] = unk_1991837B0;
  v8 = 0x2E2000002E1CLL;
  v6 = 0x201C0000201BLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 0xAuLL, v4, &v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass27@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[5];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = xmmword_1991837C8;
  v8[1] = unk_1991837D8;
  v9 = 0xE0001000110CDLL;
  v6[0] = xmmword_199198070;
  v6[1] = xmmword_199194000;
  v6[2] = xmmword_199198080;
  v6[3] = xmmword_199198090;
  v6[4] = xmmword_1991980A0;
  v7 = 0xE007F000E0020;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 0xAuLL, v4, (uint64_t *)v6, 0xBuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass28@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[33];
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1991837F0;
  v9 = 11517;
  v6[0] = xmmword_199196A60;
  v6[1] = xmmword_1991980B0;
  v6[2] = xmmword_1991980C0;
  v6[3] = xmmword_1991980D0;
  v6[4] = xmmword_1991980E0;
  v6[5] = xmmword_1991980F0;
  v6[6] = xmmword_199198100;
  v6[7] = xmmword_199198110;
  v6[8] = xmmword_199198120;
  v6[9] = xmmword_199198130;
  v6[10] = xmmword_199198140;
  v6[11] = xmmword_199198150;
  v6[12] = xmmword_199198160;
  v6[13] = xmmword_199196C50;
  v6[14] = xmmword_199198170;
  v6[15] = xmmword_199196C80;
  v6[16] = xmmword_199196C90;
  v6[17] = xmmword_199196CA0;
  v6[18] = xmmword_199196CB0;
  v6[19] = xmmword_199196CC0;
  v6[20] = xmmword_199196CD0;
  v6[21] = xmmword_199196CE0;
  v6[22] = xmmword_199198180;
  v6[23] = xmmword_199198190;
  v6[24] = xmmword_1991981A0;
  v6[25] = xmmword_1991981B0;
  v6[26] = xmmword_1991981C0;
  v6[27] = xmmword_1991981D0;
  v6[28] = xmmword_1991981E0;
  v6[29] = xmmword_1991981F0;
  v6[30] = xmmword_199198200;
  v6[31] = xmmword_199196E20;
  v6[32] = xmmword_199196E30;
  v7 = 0x1F10C0001F100;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 5uLL, v4, (uint64_t *)v6, 0x43uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass29@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199183804;
  v6[1] = unk_199183814;
  v7 = 0x2E2100002E1DLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v6, 0xAuLL, v4, 0, 0, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  int v8[10];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v8 = xmmword_19918382C;
  *(_OWORD *)&v8[3] = *(__int128 *)((char *)&xmmword_19918382C + 12);
  v6 = xmmword_199198210;
  v7 = 0x1FAF00001FA8;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, v8, 7uLL, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass31@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[16];
  _OWORD v7[8];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[6] = xmmword_1991838A8;
  v7[7] = unk_1991838B8;
  v8[0] = xmmword_1991838C8;
  *(_OWORD *)((char *)v8 + 12) = *(__int128 *)((char *)&xmmword_1991838C8 + 12);
  v7[2] = xmmword_199183868;
  v7[3] = unk_199183878;
  v7[4] = xmmword_199183888;
  v7[5] = unk_199183898;
  v7[0] = xmmword_199183848;
  v7[1] = unk_199183858;
  v6[0] = xmmword_199198220;
  v6[1] = xmmword_199198230;
  v6[2] = xmmword_199198240;
  v6[3] = xmmword_199198250;
  v6[4] = xmmword_199198260;
  v6[5] = xmmword_199198270;
  v6[6] = xmmword_199198280;
  v6[7] = xmmword_199198290;
  v6[8] = xmmword_1991982A0;
  v6[9] = xmmword_1991982B0;
  v6[10] = xmmword_1991982C0;
  v6[11] = xmmword_1991982D0;
  v6[12] = xmmword_1991982E0;
  v6[13] = xmmword_1991982F0;
  v6[14] = xmmword_199193760;
  v6[15] = xmmword_199198300;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 0x27uLL, v4, (uint64_t *)v6, 0x20uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass32@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[121];
  int __dst[68];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_1991838E4, sizeof(__dst));
  v6[0] = xmmword_199198310;
  v6[1] = xmmword_199198320;
  v6[2] = xmmword_199198330;
  v6[3] = xmmword_199198340;
  v6[4] = xmmword_199198350;
  v6[5] = xmmword_199198360;
  v6[6] = xmmword_199198370;
  v6[7] = xmmword_199198380;
  v6[8] = xmmword_199198390;
  v6[9] = xmmword_1991983A0;
  v6[10] = xmmword_1991983B0;
  v6[11] = xmmword_1991983C0;
  v6[12] = xmmword_1991983D0;
  v6[13] = xmmword_1991983E0;
  v6[14] = xmmword_1991983F0;
  v6[15] = xmmword_199198400;
  v6[16] = xmmword_199198410;
  v6[17] = xmmword_199198420;
  v6[18] = xmmword_199198430;
  v6[19] = xmmword_199192950;
  v6[20] = xmmword_199198440;
  v6[21] = xmmword_199198450;
  v6[22] = xmmword_199198460;
  v6[23] = xmmword_199198470;
  v6[24] = xmmword_199192A30;
  v6[25] = xmmword_199198480;
  v6[26] = xmmword_199198490;
  v6[27] = xmmword_199192A80;
  v6[28] = xmmword_1991984A0;
  v6[29] = xmmword_1991984B0;
  v6[30] = xmmword_199192AE0;
  v6[31] = xmmword_1991984C0;
  v6[32] = xmmword_1991984D0;
  v6[33] = xmmword_1991984E0;
  v6[34] = xmmword_1991984F0;
  v6[35] = xmmword_199192B70;
  v6[36] = xmmword_199198500;
  v6[37] = xmmword_199198510;
  v6[38] = xmmword_199198520;
  v6[39] = xmmword_199198530;
  v6[40] = xmmword_199198540;
  v6[41] = xmmword_199198550;
  v6[42] = xmmword_199198560;
  v6[43] = xmmword_199198570;
  v6[44] = xmmword_199198580;
  v6[45] = xmmword_199198590;
  v6[46] = xmmword_1991985A0;
  v6[47] = xmmword_1991985B0;
  v6[48] = xmmword_1991985C0;
  v6[49] = xmmword_1991985D0;
  v6[50] = xmmword_1991985E0;
  v6[51] = xmmword_1991985F0;
  v6[52] = xmmword_199198600;
  v6[53] = xmmword_199198610;
  v6[54] = xmmword_199198620;
  v6[55] = xmmword_199198630;
  v6[56] = xmmword_199198640;
  v6[57] = xmmword_199198650;
  v6[58] = xmmword_199198660;
  v6[59] = xmmword_199198670;
  v6[60] = xmmword_199198680;
  v6[61] = xmmword_199198690;
  v6[62] = xmmword_1991986A0;
  v6[63] = xmmword_1991986B0;
  v6[64] = xmmword_1991986C0;
  v6[65] = xmmword_1991986D0;
  v6[66] = xmmword_1991986E0;
  v6[67] = xmmword_1991986F0;
  v6[68] = xmmword_199198700;
  v6[69] = xmmword_199198710;
  v6[70] = xmmword_199198720;
  v6[71] = xmmword_199198730;
  v6[72] = xmmword_199198740;
  v6[73] = xmmword_199198750;
  v6[74] = xmmword_199198760;
  v6[75] = xmmword_199198770;
  v6[76] = xmmword_199198780;
  v6[77] = xmmword_199198790;
  v6[78] = xmmword_1991987A0;
  v6[79] = xmmword_1991987B0;
  v6[80] = xmmword_1991987C0;
  v6[81] = xmmword_1991987D0;
  v6[82] = xmmword_1991987E0;
  v6[83] = xmmword_1991987F0;
  v6[84] = xmmword_199198800;
  v6[85] = xmmword_199198810;
  v6[86] = xmmword_199198820;
  v6[87] = xmmword_199198830;
  v6[88] = xmmword_199198840;
  v6[89] = xmmword_199198850;
  v6[90] = xmmword_199198860;
  v6[91] = xmmword_199198870;
  v6[92] = xmmword_199198880;
  v6[93] = xmmword_199198890;
  v6[94] = xmmword_1991988A0;
  v6[95] = xmmword_1991988B0;
  v6[96] = xmmword_1991988C0;
  v6[97] = xmmword_1991988D0;
  v6[98] = xmmword_1991988E0;
  v6[99] = xmmword_1991988F0;
  v6[100] = xmmword_1991935E0;
  v6[101] = xmmword_199198900;
  v6[102] = xmmword_199198910;
  v6[103] = xmmword_199198920;
  v6[104] = xmmword_199198930;
  v6[105] = xmmword_199198940;
  v6[106] = xmmword_199198950;
  v6[107] = xmmword_199198960;
  v6[108] = xmmword_199198970;
  v6[109] = xmmword_199198980;
  v6[110] = xmmword_199198990;
  v6[111] = xmmword_1991989A0;
  v6[112] = xmmword_1991989B0;
  v6[113] = xmmword_1991989C0;
  v6[114] = xmmword_1991989D0;
  v6[115] = xmmword_1991989E0;
  v6[116] = xmmword_1991989F0;
  v6[117] = xmmword_199198A00;
  v6[118] = xmmword_199198A10;
  v6[119] = xmmword_199198A20;
  v6[120] = xmmword_199198A30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, __dst, 0x44uLL, v4, (uint64_t *)v6, 0xF2uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass33@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[113];
  uint64_t v7;
  int __dst[119];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_1991839F4, sizeof(__dst));
  v6[0] = xmmword_199198A40;
  v6[1] = xmmword_199198320;
  v6[2] = xmmword_199198330;
  v6[3] = xmmword_199198340;
  v6[4] = xmmword_199198350;
  v6[5] = xmmword_199198360;
  v6[6] = xmmword_199198370;
  v6[7] = xmmword_199198380;
  v6[8] = xmmword_199198390;
  v6[9] = xmmword_1991983A0;
  v6[10] = xmmword_199198A50;
  v6[11] = xmmword_199198A60;
  v6[12] = xmmword_199198A70;
  v6[13] = xmmword_199198A80;
  v6[14] = xmmword_199198A90;
  v6[15] = xmmword_199198420;
  v6[16] = xmmword_199198AA0;
  v6[17] = xmmword_199198AB0;
  v6[18] = xmmword_199198AC0;
  v6[19] = xmmword_199198AD0;
  v6[20] = xmmword_199198AE0;
  v6[21] = xmmword_199192A80;
  v6[22] = xmmword_199198AF0;
  v6[23] = xmmword_199198B00;
  v6[24] = xmmword_199198B10;
  v6[25] = xmmword_199198B20;
  v6[26] = xmmword_199198B30;
  v6[27] = xmmword_199198B40;
  v6[28] = xmmword_199198B50;
  v6[29] = xmmword_199198B60;
  v6[30] = xmmword_199198B70;
  v6[31] = xmmword_199198B80;
  v6[32] = xmmword_199198B90;
  v6[33] = xmmword_199198BA0;
  v6[34] = xmmword_199198BB0;
  v6[35] = xmmword_199198BC0;
  v6[36] = xmmword_199198BD0;
  v6[37] = xmmword_199198BE0;
  v6[38] = xmmword_199198BF0;
  v6[39] = xmmword_199198C00;
  v6[40] = xmmword_199198C10;
  v6[41] = xmmword_199198C20;
  v6[42] = xmmword_199198C30;
  v6[43] = xmmword_199198C40;
  v6[44] = xmmword_199198C50;
  v6[45] = xmmword_199198C60;
  v6[46] = xmmword_199198C70;
  v6[47] = xmmword_199198C80;
  v6[48] = xmmword_199198C90;
  v6[49] = xmmword_199198CA0;
  v6[50] = xmmword_199198CB0;
  v6[51] = xmmword_199198CC0;
  v6[52] = xmmword_199198CD0;
  v6[53] = xmmword_199198CE0;
  v6[54] = xmmword_199198CF0;
  v6[55] = xmmword_199198D00;
  v6[56] = xmmword_199198D10;
  v6[57] = xmmword_199198D20;
  v6[58] = xmmword_1991986C0;
  v6[59] = xmmword_199198D30;
  v6[60] = xmmword_199198D40;
  v6[61] = xmmword_199198D50;
  v6[62] = xmmword_199198D60;
  v6[63] = xmmword_199198D70;
  v6[64] = xmmword_199198D80;
  v6[65] = xmmword_199198740;
  v6[66] = xmmword_199198750;
  v6[67] = xmmword_199198760;
  v6[68] = xmmword_199198770;
  v6[69] = xmmword_199198780;
  v6[70] = xmmword_199198790;
  v6[71] = xmmword_199198D90;
  v6[72] = xmmword_199198DA0;
  v6[73] = xmmword_199198DB0;
  v6[74] = xmmword_199198DC0;
  v6[75] = xmmword_199198DD0;
  v6[76] = xmmword_199198DE0;
  v6[77] = xmmword_199198DF0;
  v6[78] = xmmword_199198E00;
  v6[79] = xmmword_199198840;
  v6[80] = xmmword_199198E10;
  v6[81] = xmmword_199198E20;
  v6[82] = xmmword_199198E30;
  v6[83] = xmmword_199198E40;
  v6[84] = xmmword_199198E50;
  v6[85] = xmmword_199198E60;
  v6[86] = xmmword_199198E70;
  v6[87] = xmmword_199198E80;
  v6[88] = xmmword_199198E90;
  v6[89] = xmmword_199198EA0;
  v6[90] = xmmword_199198EB0;
  v6[91] = xmmword_199198EC0;
  v6[92] = xmmword_199198ED0;
  v6[93] = xmmword_199198EE0;
  v6[94] = xmmword_199198EF0;
  v6[95] = xmmword_199198F00;
  v6[96] = xmmword_199198F10;
  v6[97] = xmmword_199198F20;
  v6[98] = xmmword_199198F30;
  v6[99] = xmmword_199198F40;
  v6[100] = xmmword_199198950;
  v6[101] = xmmword_199198F50;
  v6[102] = xmmword_199198980;
  v6[103] = xmmword_199198F60;
  v6[104] = xmmword_199198F70;
  v6[105] = xmmword_199198F80;
  v6[106] = xmmword_199198F90;
  v6[107] = xmmword_1991938A0;
  v6[108] = xmmword_1991938C0;
  v6[109] = xmmword_1991938D0;
  v6[110] = xmmword_199198FA0;
  v6[111] = xmmword_199198FB0;
  v6[112] = xmmword_199198FC0;
  v7 = 0xE01EF000E0100;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, __dst, 0x77uLL, v4, (uint64_t *)v6, 0xE3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 6846;
  v7[0] = xmmword_199198FD0;
  v7[1] = xmmword_199198FE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass35@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[55];
  int __dst[72];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_199183BD0, sizeof(__dst));
  v6[0] = xmmword_199198FF0;
  v6[1] = xmmword_199199000;
  v6[2] = xmmword_199199010;
  v6[3] = xmmword_199199020;
  v6[4] = xmmword_199199030;
  v6[5] = xmmword_199199040;
  v6[6] = xmmword_199199050;
  v6[7] = xmmword_199199060;
  v6[8] = xmmword_199199070;
  v6[9] = xmmword_199199080;
  v6[10] = xmmword_199199090;
  v6[11] = xmmword_1991990A0;
  v6[12] = xmmword_1991990B0;
  v6[13] = xmmword_1991990C0;
  v6[14] = xmmword_1991990D0;
  v6[15] = xmmword_1991990E0;
  v6[16] = xmmword_1991990F0;
  v6[17] = xmmword_199199100;
  v6[18] = xmmword_199198570;
  v6[19] = xmmword_199199110;
  v6[20] = xmmword_199199120;
  v6[21] = xmmword_199199130;
  v6[22] = xmmword_199199140;
  v6[23] = xmmword_199199150;
  v6[24] = xmmword_199199160;
  v6[25] = xmmword_199199170;
  v6[26] = xmmword_199199180;
  v6[27] = xmmword_199199190;
  v6[28] = xmmword_1991991A0;
  v6[29] = xmmword_1991991B0;
  v6[30] = xmmword_1991991C0;
  v6[31] = xmmword_1991991D0;
  v6[32] = xmmword_1991991E0;
  v6[33] = xmmword_1991991F0;
  v6[34] = xmmword_199199200;
  v6[35] = xmmword_199199210;
  v6[36] = xmmword_199199220;
  v6[37] = xmmword_199199230;
  v6[38] = xmmword_199199240;
  v6[39] = xmmword_199199250;
  v6[40] = xmmword_199199260;
  v6[41] = xmmword_1991934A0;
  v6[42] = xmmword_199199270;
  v6[43] = xmmword_199199280;
  v6[44] = xmmword_199199290;
  v6[45] = xmmword_1991992A0;
  v6[46] = xmmword_1991992B0;
  v6[47] = xmmword_1991992C0;
  v6[48] = xmmword_1991992D0;
  v6[49] = xmmword_1991992E0;
  v6[50] = xmmword_1991992F0;
  v6[51] = xmmword_199199300;
  v6[52] = xmmword_199199310;
  v6[53] = xmmword_199199320;
  v6[54] = xmmword_199199330;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, __dst, 0x48uLL, v4, (uint64_t *)v6, 0x6EuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass36@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[4];
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0x1034100003007;
  v9 = 66378;
  v6[0] = xmmword_199199340;
  v6[1] = xmmword_199199350;
  v6[2] = xmmword_199199360;
  v6[3] = xmmword_199199370;
  v7 = 0x1246E00012400;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 3uLL, v4, (uint64_t *)v6, 9uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass37@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v6 = 8232;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, 0, 0, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass38@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v6 = 8233;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, 0, 0, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass39@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0xDFFF0000D800;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass40@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199199380;
  v7 = 0x10FFFD00100000;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass41@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[37];
  uint64_t v7;
  _OWORD v8[8];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_199183CF0;
  v11 = 0x7D0000007BLL;
  v9 = 0x2900000028;
  v8[4] = xmmword_199183D48;
  v8[5] = unk_199183D58;
  v8[6] = xmmword_199183D68;
  v8[7] = unk_199183D78;
  v8[0] = xmmword_199183D08;
  v8[1] = unk_199183D18;
  v8[2] = xmmword_199183D28;
  v8[3] = unk_199183D38;
  v6[0] = xmmword_199199390;
  v6[1] = xmmword_1991993A0;
  v6[2] = xmmword_1991993B0;
  v6[3] = xmmword_1991993C0;
  v6[4] = xmmword_1991993D0;
  v6[5] = xmmword_1991993E0;
  v6[6] = xmmword_1991993F0;
  v6[7] = xmmword_199199400;
  v6[8] = xmmword_199199410;
  v6[9] = xmmword_199199420;
  v6[10] = xmmword_199199430;
  v6[11] = xmmword_199199440;
  v6[12] = xmmword_199199450;
  v6[13] = xmmword_199199460;
  v6[14] = xmmword_199199470;
  v6[15] = xmmword_199199480;
  v6[16] = xmmword_199199490;
  v6[17] = xmmword_1991994A0;
  v6[18] = xmmword_1991994B0;
  v6[19] = xmmword_1991994C0;
  v6[20] = xmmword_1991994D0;
  v6[21] = xmmword_1991994E0;
  v6[22] = xmmword_1991994F0;
  v6[23] = xmmword_199199500;
  v6[24] = xmmword_199199510;
  v6[25] = xmmword_199199520;
  v6[26] = xmmword_199199530;
  v6[27] = xmmword_199199540;
  v6[28] = xmmword_199199550;
  v6[29] = xmmword_199199560;
  v6[30] = xmmword_199199570;
  v6[31] = xmmword_199199580;
  v6[32] = xmmword_199199590;
  v6[33] = xmmword_1991995A0;
  v6[34] = xmmword_1991995B0;
  v6[35] = xmmword_1991995C0;
  v6[36] = xmmword_1991995D0;
  v7 = 0xFF630000FF62;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v10, 6uLL, &v9, 1uLL, (int *)v8, 0x20uLL, v4, (uint64_t *)v6, 0x4BuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass42@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[41];
  uint64_t v7;
  _OWORD v8[12];
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = xmmword_1991995E0;
  v10 = 0x3E0000003CLL;
  v8[10] = xmmword_199183E28;
  v8[11] = unk_199183E38;
  v9 = 0x1EE7E0001EE64;
  v8[6] = xmmword_199183DE8;
  v8[7] = unk_199183DF8;
  v8[8] = xmmword_199183E08;
  v8[9] = unk_199183E18;
  v8[2] = xmmword_199183DA8;
  v8[3] = unk_199183DB8;
  v8[4] = xmmword_199183DC8;
  v8[5] = unk_199183DD8;
  v8[0] = xmmword_199183D88;
  v8[1] = unk_199183D98;
  v6[0] = xmmword_1991995F0;
  v6[1] = xmmword_199199600;
  v6[2] = xmmword_199199610;
  v6[3] = xmmword_199199620;
  v6[4] = xmmword_199199630;
  v6[5] = xmmword_199199640;
  v6[6] = xmmword_199199650;
  v6[7] = xmmword_199199660;
  v6[8] = xmmword_199199670;
  v6[9] = xmmword_199199680;
  v6[10] = xmmword_199199690;
  v6[11] = xmmword_1991996A0;
  v6[12] = xmmword_1991996B0;
  v6[13] = xmmword_1991996C0;
  v6[14] = xmmword_1991996D0;
  v6[15] = xmmword_1991996E0;
  v6[16] = xmmword_1991996F0;
  v6[17] = xmmword_199199700;
  v6[18] = xmmword_199199710;
  v6[19] = xmmword_199199720;
  v6[20] = xmmword_199199730;
  v6[21] = xmmword_199199740;
  v6[22] = xmmword_199199750;
  v6[23] = xmmword_199199760;
  v6[24] = xmmword_199195DD0;
  v6[25] = xmmword_199195DE0;
  v6[26] = xmmword_199195DF0;
  v6[27] = xmmword_199195E00;
  v6[28] = xmmword_199195E10;
  v6[29] = xmmword_199195E20;
  v6[30] = xmmword_199195E30;
  v6[31] = xmmword_199199770;
  v6[32] = xmmword_199199780;
  v6[33] = xmmword_199195B60;
  v6[34] = xmmword_199195B70;
  v6[35] = xmmword_199195B80;
  v6[36] = xmmword_199195B90;
  v6[37] = xmmword_199195BA0;
  v6[38] = xmmword_199195BB0;
  v6[39] = xmmword_199195BC0;
  v6[40] = xmmword_199195BD0;
  v7 = 0x1EEF10001EEF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v11, 4uLL, &v10, 1uLL, (int *)v8, 0x32uLL, v4, (uint64_t *)v6, 0x53uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass43(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[306];
  uint64_t v8;
  int v9[118];
  __int128 v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v11 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_199194FF0;
  memcpy(v9, &unk_199183E50, sizeof(v9));
  v7[0] = xmmword_199195000;
  v7[1] = xmmword_199195010;
  v7[2] = xmmword_199195020;
  v7[3] = xmmword_199195030;
  v7[4] = xmmword_199195040;
  v7[5] = xmmword_199195050;
  v7[6] = xmmword_199195060;
  v7[7] = xmmword_199199790;
  v7[8] = xmmword_1991997A0;
  v7[9] = xmmword_1991997B0;
  v7[10] = xmmword_1991997C0;
  v7[11] = xmmword_1991997D0;
  v7[12] = xmmword_1991997E0;
  v7[13] = xmmword_1991997F0;
  v7[14] = xmmword_199199800;
  v7[15] = xmmword_199199810;
  v7[16] = xmmword_199199820;
  v7[17] = xmmword_1991950E0;
  v7[18] = xmmword_1991950F0;
  v7[19] = xmmword_199199830;
  v7[20] = xmmword_199199840;
  v7[21] = xmmword_199199850;
  v7[22] = xmmword_199199860;
  v7[23] = xmmword_199192850;
  v7[24] = xmmword_199192860;
  v7[25] = xmmword_199199870;
  v7[26] = xmmword_199199880;
  v7[27] = xmmword_199192890;
  v7[28] = xmmword_199199890;
  v7[29] = xmmword_1991928B0;
  v7[30] = xmmword_1991928C0;
  v7[31] = xmmword_1991928D0;
  v7[32] = xmmword_1991928E0;
  v7[33] = xmmword_1991998A0;
  v7[34] = xmmword_1991998B0;
  v7[35] = xmmword_199192910;
  v7[36] = xmmword_199192920;
  v7[37] = xmmword_199192930;
  v7[38] = xmmword_1991998C0;
  v7[39] = xmmword_1991998D0;
  v7[40] = xmmword_1991998E0;
  v7[41] = xmmword_1991998F0;
  v7[42] = xmmword_1991979D0;
  v7[43] = xmmword_1991979E0;
  v7[44] = xmmword_199199900;
  v7[45] = xmmword_199199910;
  v7[46] = xmmword_199199920;
  v7[47] = xmmword_199199930;
  v7[48] = xmmword_1991929F0;
  v7[49] = xmmword_199192A00;
  v7[50] = xmmword_199192A10;
  v7[51] = xmmword_199192A20;
  v7[52] = xmmword_199192A30;
  v7[53] = xmmword_199199940;
  v7[54] = xmmword_199197A50;
  v7[55] = xmmword_199199950;
  v7[56] = xmmword_199199960;
  v7[57] = xmmword_199199970;
  v7[58] = xmmword_199199980;
  v7[59] = xmmword_1991951A0;
  v7[60] = xmmword_1991951B0;
  v7[61] = xmmword_199199990;
  v7[62] = xmmword_1991999A0;
  v7[63] = xmmword_1991999B0;
  v7[64] = xmmword_1991999C0;
  v7[65] = xmmword_199192B10;
  v7[66] = xmmword_1991999D0;
  v7[67] = xmmword_1991990C0;
  v7[68] = xmmword_1991999E0;
  v7[69] = xmmword_1991999F0;
  v7[70] = xmmword_199192B50;
  v7[71] = xmmword_199192B60;
  v7[72] = xmmword_199192B70;
  v7[73] = xmmword_199199A00;
  v7[74] = xmmword_199195220;
  v7[75] = xmmword_199195230;
  v7[76] = xmmword_199199A10;
  v7[77] = xmmword_199195250;
  v7[78] = xmmword_199195260;
  v7[79] = xmmword_199199A20;
  v7[80] = xmmword_199199A30;
  v7[81] = xmmword_199199A40;
  v7[82] = xmmword_199199A50;
  v7[83] = xmmword_1991952B0;
  v7[84] = xmmword_199192C20;
  v7[85] = xmmword_199192C30;
  v7[86] = xmmword_199192C40;
  v7[87] = xmmword_199192C50;
  v7[88] = xmmword_199192C60;
  v7[89] = xmmword_199192C70;
  v7[90] = xmmword_1991952C0;
  v7[91] = xmmword_1991952D0;
  v7[92] = xmmword_1991952E0;
  v7[93] = xmmword_1991952F0;
  v7[94] = xmmword_199199A60;
  v7[95] = xmmword_199199A70;
  v7[96] = xmmword_199192CD0;
  v7[97] = xmmword_199199A80;
  v7[98] = xmmword_199199A90;
  v7[99] = xmmword_199192D10;
  v7[100] = xmmword_199192D20;
  v7[101] = xmmword_199199AA0;
  v7[102] = xmmword_199192D40;
  v7[103] = xmmword_199199AB0;
  v7[104] = xmmword_199199AC0;
  v7[105] = xmmword_199199AD0;
  v7[106] = xmmword_199199AE0;
  v7[107] = xmmword_199199AF0;
  v7[108] = xmmword_199199B00;
  v7[109] = xmmword_199199B10;
  v7[110] = xmmword_1991953B0;
  v7[111] = xmmword_1991953C0;
  v7[112] = xmmword_1991953D0;
  v7[113] = xmmword_1991953E0;
  v7[114] = xmmword_199199B20;
  v7[115] = xmmword_199199B30;
  v7[116] = xmmword_199192DF0;
  v7[117] = xmmword_199192E00;
  v7[118] = xmmword_199199B40;
  v7[119] = xmmword_199199B50;
  v7[120] = xmmword_199199B60;
  v7[121] = xmmword_199199B70;
  v7[122] = xmmword_199199B80;
  v7[123] = xmmword_199195CB0;
  v7[124] = xmmword_199199B90;
  v7[125] = xmmword_199195CD0;
  v7[126] = xmmword_199199BA0;
  v7[127] = xmmword_1991954B0;
  v7[128] = xmmword_1991954C0;
  v7[129] = xmmword_1991954D0;
  v7[130] = xmmword_1991954E0;
  v7[131] = xmmword_1991954F0;
  v7[132] = xmmword_199195500;
  v7[133] = xmmword_199195510;
  v7[134] = xmmword_199199BB0;
  v7[135] = xmmword_199199BC0;
  v7[136] = xmmword_199199BD0;
  v7[137] = xmmword_199195540;
  v7[138] = xmmword_199195550;
  v7[139] = xmmword_199195560;
  v7[140] = xmmword_199195570;
  v7[141] = xmmword_199195580;
  v7[142] = xmmword_199195590;
  v7[143] = xmmword_1991955A0;
  v7[144] = xmmword_199199BE0;
  v7[145] = xmmword_1991955C0;
  v7[146] = xmmword_1991955D0;
  v7[147] = xmmword_199199BF0;
  v7[148] = xmmword_199199C00;
  v7[149] = xmmword_199199C10;
  v7[150] = xmmword_199199C20;
  v7[151] = xmmword_199199C30;
  v7[152] = xmmword_199199C40;
  v7[153] = xmmword_199199C50;
  v7[154] = xmmword_199199C60;
  v7[155] = xmmword_199199C70;
  v7[156] = xmmword_199199C80;
  v7[157] = xmmword_199199C90;
  v7[158] = xmmword_199197DA0;
  v7[159] = xmmword_199197DB0;
  v7[160] = xmmword_199199CA0;
  v7[161] = xmmword_199199CB0;
  v7[162] = xmmword_199197DD0;
  v7[163] = xmmword_199197DE0;
  v7[164] = xmmword_199195D60;
  v7[165] = xmmword_199199CC0;
  v7[166] = xmmword_199193090;
  v7[167] = xmmword_199197E00;
  v7[168] = xmmword_199197E10;
  v7[169] = xmmword_199197E20;
  v7[170] = xmmword_1991930E0;
  v7[171] = xmmword_199195D70;
  v7[172] = xmmword_199199CD0;
  v7[173] = xmmword_199193100;
  v7[174] = xmmword_199197E50;
  v7[175] = xmmword_199197E60;
  v7[176] = xmmword_199197E70;
  v7[177] = xmmword_199197E80;
  v7[178] = xmmword_199199CE0;
  v7[179] = xmmword_199195790;
  v7[180] = xmmword_1991931B0;
  v7[181] = xmmword_199197EB0;
  v7[182] = xmmword_199199CF0;
  v7[183] = xmmword_1991957D0;
  v7[184] = xmmword_1991931F0;
  v7[185] = xmmword_1991957E0;
  v7[186] = xmmword_199193210;
  v7[187] = xmmword_199193220;
  v7[188] = xmmword_199193230;
  v7[189] = xmmword_199193240;
  v7[190] = xmmword_199193250;
  v7[191] = xmmword_199193260;
  v7[192] = xmmword_199193270;
  v7[193] = xmmword_199193280;
  v7[194] = xmmword_1991957F0;
  v7[195] = xmmword_199195800;
  v7[196] = xmmword_199195810;
  v7[197] = xmmword_199195820;
  v7[198] = xmmword_199199D00;
  v7[199] = xmmword_1991932E0;
  v7[200] = xmmword_1991932F0;
  v7[201] = xmmword_199195840;
  v7[202] = xmmword_199195850;
  v7[203] = xmmword_199195860;
  v7[204] = xmmword_199195870;
  v7[205] = xmmword_199193360;
  v7[206] = xmmword_199199D10;
  v7[207] = xmmword_199199D20;
  v7[208] = xmmword_199199D30;
  v7[209] = xmmword_199199D40;
  v7[210] = xmmword_199199D50;
  v7[211] = xmmword_199199D60;
  v7[212] = xmmword_199199D70;
  v7[213] = xmmword_199199D80;
  v7[214] = xmmword_199199D90;
  v7[215] = xmmword_199199DA0;
  v7[216] = xmmword_199199DB0;
  v7[217] = xmmword_199199DC0;
  v7[218] = xmmword_199199DD0;
  v7[219] = xmmword_199199DE0;
  v7[220] = xmmword_199193460;
  v7[221] = xmmword_199193470;
  v7[222] = xmmword_199193480;
  v7[223] = xmmword_199199DF0;
  v7[224] = xmmword_199199E00;
  v7[225] = xmmword_199199E10;
  v7[226] = xmmword_199199E20;
  v7[227] = xmmword_199199E30;
  v7[228] = xmmword_199199E40;
  v7[229] = xmmword_199199E50;
  v7[230] = xmmword_199199E60;
  v7[231] = xmmword_199199E70;
  v7[232] = xmmword_199199E80;
  v7[233] = xmmword_1991959B0;
  v7[234] = xmmword_199193550;
  v7[235] = xmmword_199193560;
  v7[236] = xmmword_199199E90;
  v7[237] = xmmword_199193580;
  v7[238] = xmmword_199199EA0;
  v7[239] = xmmword_199199EB0;
  v7[240] = xmmword_199199EC0;
  v7[241] = xmmword_199199ED0;
  v7[242] = xmmword_199199EE0;
  v7[243] = xmmword_1991935E0;
  v7[244] = xmmword_1991935F0;
  v7[245] = xmmword_199193600;
  v7[246] = xmmword_199199EF0;
  v7[247] = xmmword_199193620;
  v7[248] = xmmword_199193630;
  v7[249] = xmmword_199199F00;
  v7[250] = xmmword_199199F10;
  v7[251] = xmmword_199199F20;
  v7[252] = xmmword_199199F30;
  v7[253] = xmmword_199195A50;
  v7[254] = xmmword_199195A60;
  v7[255] = xmmword_1991936B0;
  v7[256] = xmmword_199195A70;
  v7[257] = xmmword_199195A80;
  v7[258] = xmmword_199193700;
  v7[259] = xmmword_199195A90;
  v7[260] = xmmword_199193720;
  v7[261] = xmmword_199199F40;
  v7[262] = xmmword_199193740;
  v7[263] = xmmword_199193750;
  v7[264] = xmmword_199193760;
  v7[265] = xmmword_199193770;
  v7[266] = xmmword_199193780;
  v7[267] = xmmword_199193790;
  v7[268] = xmmword_1991937A0;
  v7[269] = xmmword_199193810;
  v7[270] = xmmword_199193820;
  v7[271] = xmmword_199193830;
  v7[272] = xmmword_199193840;
  v7[273] = xmmword_199193850;
  v7[274] = xmmword_199193860;
  v7[275] = xmmword_199193870;
  v7[276] = xmmword_199193880;
  v7[277] = xmmword_199195AB0;
  v7[278] = xmmword_199195AC0;
  v7[279] = xmmword_199195AD0;
  v7[280] = xmmword_199195AE0;
  v7[281] = xmmword_199195AF0;
  v7[282] = xmmword_199195B00;
  v7[283] = xmmword_199199F50;
  v7[284] = xmmword_1991989F0;
  v7[285] = xmmword_199198A00;
  v7[286] = xmmword_199199F60;
  v7[287] = xmmword_199199F70;
  v7[288] = xmmword_199199F80;
  v7[289] = xmmword_199198040;
  v7[290] = xmmword_199198050;
  v7[291] = xmmword_199199F90;
  v7[292] = xmmword_199193980;
  v7[293] = xmmword_199193990;
  v7[294] = xmmword_1991939A0;
  v7[295] = xmmword_1991939B0;
  v7[296] = xmmword_1991939C0;
  v7[297] = xmmword_1991939D0;
  v7[298] = xmmword_1991939E0;
  v7[299] = xmmword_1991939F0;
  v7[300] = xmmword_199199FA0;
  v7[301] = xmmword_199199FB0;
  v7[302] = xmmword_199193B30;
  v7[303] = xmmword_199193B40;
  v7[304] = xmmword_199193B50;
  v7[305] = xmmword_199193B60;
  v8 = 0x323AF00031350;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, (uint64_t *)&v10, 2uLL, v9, 0x76uLL, v5, (uint64_t *)v7, 0x265uLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass44@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[60];
  int __dst[550];
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x7A00000061;
  memcpy(__dst, &unk_199184028, sizeof(__dst));
  v6[0] = xmmword_1991972E0;
  v6[1] = xmmword_1991972F0;
  v6[2] = xmmword_199197300;
  v6[3] = xmmword_199197310;
  v6[4] = xmmword_199197320;
  v6[5] = xmmword_199197330;
  v6[6] = xmmword_199197340;
  v6[7] = xmmword_199199FC0;
  v6[8] = xmmword_199199FD0;
  v6[9] = xmmword_199199FE0;
  v6[10] = xmmword_199197370;
  v6[11] = xmmword_199197380;
  v6[12] = xmmword_199197390;
  v6[13] = xmmword_1991973A0;
  v6[14] = xmmword_199199FF0;
  v6[15] = xmmword_19919A000;
  v6[16] = xmmword_1991973E0;
  v6[17] = xmmword_1991973F0;
  v6[18] = xmmword_199197400;
  v6[19] = xmmword_199197410;
  v6[20] = xmmword_199197420;
  v6[21] = xmmword_199197430;
  v6[22] = xmmword_199197440;
  v6[23] = xmmword_199197450;
  v6[24] = xmmword_199197460;
  v6[25] = xmmword_199197470;
  v6[26] = xmmword_19919A010;
  v6[27] = xmmword_19919A020;
  v6[28] = xmmword_19919A030;
  v6[29] = xmmword_19919A040;
  v6[30] = xmmword_19919A050;
  v6[31] = xmmword_19919A060;
  v6[32] = xmmword_19919A070;
  v6[33] = xmmword_19919A080;
  v6[34] = xmmword_19919A090;
  v6[35] = xmmword_19919A0A0;
  v6[36] = xmmword_19919A0B0;
  v6[37] = xmmword_199195D60;
  v6[38] = xmmword_1991974F0;
  v6[39] = xmmword_199197500;
  v6[40] = xmmword_199193230;
  v6[41] = xmmword_19919A0C0;
  v6[42] = xmmword_1991982D0;
  v6[43] = xmmword_19919A0D0;
  v6[44] = xmmword_19919A0E0;
  v6[45] = xmmword_19919A0F0;
  v6[46] = xmmword_19919A100;
  v6[47] = xmmword_19919A110;
  v6[48] = xmmword_19919A120;
  v6[49] = xmmword_19919A130;
  v6[50] = xmmword_19919A140;
  v6[51] = xmmword_19919A150;
  v6[52] = xmmword_19919A160;
  v6[53] = xmmword_19919A170;
  v6[54] = xmmword_19919A180;
  v6[55] = xmmword_19919A190;
  v6[56] = xmmword_19919A1A0;
  v6[57] = xmmword_19919A1B0;
  v6[58] = xmmword_19919A1C0;
  v6[59] = xmmword_19919A1D0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v8, 1uLL, __dst, 0x226uLL, v4, (uint64_t *)v6, 0x78uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass45@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[50];
  int __dst[550];
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x5A00000041;
  memcpy(__dst, &unk_1991848C0, sizeof(__dst));
  v6[0] = xmmword_199196FB0;
  v6[1] = xmmword_199196FC0;
  v6[2] = xmmword_199196FD0;
  v6[3] = xmmword_199196FE0;
  v6[4] = xmmword_199196FF0;
  v6[5] = xmmword_199197000;
  v6[6] = xmmword_199197010;
  v6[7] = xmmword_199197020;
  v6[8] = xmmword_199197030;
  v6[9] = xmmword_199197040;
  v6[10] = xmmword_199197050;
  v6[11] = xmmword_199197060;
  v6[12] = xmmword_199197070;
  v6[13] = xmmword_199197080;
  v6[14] = xmmword_199197090;
  v6[15] = xmmword_199195C80;
  v6[16] = xmmword_1991970A0;
  v6[17] = xmmword_1991970B0;
  v6[18] = xmmword_1991970C0;
  v6[19] = xmmword_1991970D0;
  v6[20] = xmmword_1991970E0;
  v6[21] = xmmword_1991970F0;
  v6[22] = xmmword_199197100;
  v6[23] = xmmword_199197110;
  v6[24] = xmmword_19919A1E0;
  v6[25] = xmmword_19919A1F0;
  v6[26] = xmmword_199197130;
  v6[27] = xmmword_199197140;
  v6[28] = xmmword_199197150;
  v6[29] = xmmword_199197160;
  v6[30] = xmmword_199197170;
  v6[31] = xmmword_199197180;
  v6[32] = xmmword_199197190;
  v6[33] = xmmword_1991971A0;
  v6[34] = xmmword_1991971B0;
  v6[35] = xmmword_1991971C0;
  v6[36] = xmmword_199193820;
  v6[37] = xmmword_1991971D0;
  v6[38] = xmmword_1991971E0;
  v6[39] = xmmword_199193850;
  v6[40] = xmmword_1991971F0;
  v6[41] = xmmword_199193870;
  v6[42] = xmmword_199197200;
  v6[43] = xmmword_199197210;
  v6[44] = xmmword_199197220;
  v6[45] = xmmword_199197230;
  v6[46] = xmmword_199197240;
  v6[47] = xmmword_199197250;
  v6[48] = xmmword_19919A200;
  v6[49] = xmmword_199199FB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v8, 1uLL, __dst, 0x226uLL, v4, (uint64_t *)v6, 0x64uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass46@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[62];
  uint64_t v7;
  _OWORD v8[7];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_199194FF0;
  v8[4] = xmmword_199185198;
  v8[5] = unk_1991851A8;
  v8[6] = xmmword_1991851B8;
  v9 = 0x1D5460001D4BBLL;
  v8[0] = xmmword_199185158;
  v8[1] = unk_199185168;
  v8[2] = xmmword_199185178;
  v8[3] = unk_199185188;
  v6[0] = xmmword_199195000;
  v6[1] = xmmword_199195BE0;
  v6[2] = xmmword_19919A210;
  v6[3] = xmmword_199199FD0;
  v6[4] = xmmword_199195C00;
  v6[5] = xmmword_19919A220;
  v6[6] = xmmword_199195C20;
  v6[7] = xmmword_199195C30;
  v6[8] = xmmword_199195C40;
  v6[9] = xmmword_199195C50;
  v6[10] = xmmword_19919A230;
  v6[11] = xmmword_199195C70;
  v6[12] = xmmword_199195C80;
  v6[13] = xmmword_1991953F0;
  v6[14] = xmmword_199195400;
  v6[15] = xmmword_199195410;
  v6[16] = xmmword_199195420;
  v6[17] = xmmword_199195430;
  v6[18] = xmmword_199195440;
  v6[19] = xmmword_199195450;
  v6[20] = xmmword_199195460;
  v6[21] = xmmword_199195470;
  v6[22] = xmmword_199195480;
  v6[23] = xmmword_19919A240;
  v6[24] = xmmword_19919A250;
  v6[25] = xmmword_19919A260;
  v6[26] = xmmword_1991954B0;
  v6[27] = xmmword_1991954C0;
  v6[28] = xmmword_19919A270;
  v6[29] = xmmword_19919A280;
  v6[30] = xmmword_19919A290;
  v6[31] = xmmword_19919A2A0;
  v6[32] = xmmword_19919A0A0;
  v6[33] = xmmword_19919A0B0;
  v6[34] = xmmword_199195D60;
  v6[35] = xmmword_199195D70;
  v6[36] = xmmword_199195D80;
  v6[37] = xmmword_199195D90;
  v6[38] = xmmword_199193210;
  v6[39] = xmmword_199193220;
  v6[40] = xmmword_199193230;
  v6[41] = xmmword_19919A0C0;
  v6[42] = xmmword_1991982D0;
  v6[43] = xmmword_19919A2B0;
  v6[44] = xmmword_19919A2C0;
  v6[45] = xmmword_199193810;
  v6[46] = xmmword_199193820;
  v6[47] = xmmword_199193830;
  v6[48] = xmmword_199193840;
  v6[49] = xmmword_199193850;
  v6[50] = xmmword_199193860;
  v6[51] = xmmword_199193870;
  v6[52] = xmmword_199193880;
  v6[53] = xmmword_199195AB0;
  v6[54] = xmmword_199195AC0;
  v6[55] = xmmword_199195AD0;
  v6[56] = xmmword_199195AE0;
  v6[57] = xmmword_199195AF0;
  v6[58] = xmmword_19919A2D0;
  v6[59] = xmmword_19919A1C0;
  v6[60] = xmmword_19919A2E0;
  v6[61] = xmmword_19919A2F0;
  v7 = 0x1F1890001F170;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v10, 2uLL, (int *)v8, 0x1EuLL, v4, (uint64_t *)v6, 0x7DuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass47@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[134];
  int __dst[164];
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1991851D0;
  v9 = 96;
  memcpy(__dst, &unk_1991851E4, sizeof(__dst));
  v6[0] = xmmword_19919A300;
  v6[1] = xmmword_19919A310;
  v6[2] = xmmword_19919A320;
  v6[3] = xmmword_1991997A0;
  v6[4] = xmmword_19919A330;
  v6[5] = xmmword_19919A340;
  v6[6] = xmmword_19919A350;
  v6[7] = xmmword_19919A360;
  v6[8] = xmmword_19919A370;
  v6[9] = xmmword_19919A380;
  v6[10] = xmmword_19919A390;
  v6[11] = xmmword_199198A60;
  v6[12] = xmmword_199198A70;
  v6[13] = xmmword_199198A80;
  v6[14] = xmmword_199198A90;
  v6[15] = xmmword_199198420;
  v6[16] = xmmword_199198AA0;
  v6[17] = xmmword_199198AB0;
  v6[18] = xmmword_199198AC0;
  v6[19] = xmmword_199198AD0;
  v6[20] = xmmword_199198AE0;
  v6[21] = xmmword_199192A80;
  v6[22] = xmmword_199198AF0;
  v6[23] = xmmword_199198B00;
  v6[24] = xmmword_199198B10;
  v6[25] = xmmword_199198B20;
  v6[26] = xmmword_19919A3A0;
  v6[27] = xmmword_199198B40;
  v6[28] = xmmword_199198B50;
  v6[29] = xmmword_199198B60;
  v6[30] = xmmword_199198B70;
  v6[31] = xmmword_199198B80;
  v6[32] = xmmword_199198B90;
  v6[33] = xmmword_199198BA0;
  v6[34] = xmmword_199198BB0;
  v6[35] = xmmword_199198BC0;
  v6[36] = xmmword_199198BD0;
  v6[37] = xmmword_199198BE0;
  v6[38] = xmmword_199198BF0;
  v6[39] = xmmword_19919A3B0;
  v6[40] = xmmword_199198C10;
  v6[41] = xmmword_199198C20;
  v6[42] = xmmword_199198C30;
  v6[43] = xmmword_19919A3C0;
  v6[44] = xmmword_19919A3D0;
  v6[45] = xmmword_19919A3E0;
  v6[46] = xmmword_19919A3F0;
  v6[47] = xmmword_19919A400;
  v6[48] = xmmword_19919A410;
  v6[49] = xmmword_19919A420;
  v6[50] = xmmword_199198CB0;
  v6[51] = xmmword_199198CC0;
  v6[52] = xmmword_19919A430;
  v6[53] = xmmword_199196690;
  v6[54] = xmmword_1991966A0;
  v6[55] = xmmword_19919A440;
  v6[56] = xmmword_19919A450;
  v6[57] = xmmword_199198080;
  v6[58] = xmmword_19919A460;
  v6[59] = xmmword_19919A470;
  v6[60] = xmmword_199198CF0;
  v6[61] = xmmword_19919A480;
  v6[62] = xmmword_199198280;
  v6[63] = xmmword_19919A490;
  v6[64] = xmmword_19919A4A0;
  v6[65] = xmmword_19919A4B0;
  v6[66] = xmmword_1991982A0;
  v6[67] = xmmword_199198D20;
  v6[68] = xmmword_1991986C0;
  v6[69] = xmmword_199198D30;
  v6[70] = xmmword_199198D40;
  v6[71] = xmmword_19919A4C0;
  v6[72] = xmmword_19919A4D0;
  v6[73] = xmmword_199198700;
  v6[74] = xmmword_19919A4E0;
  v6[75] = xmmword_19919A4F0;
  v6[76] = xmmword_19919A500;
  v6[77] = xmmword_19919A510;
  v6[78] = xmmword_19919A520;
  v6[79] = xmmword_19919A530;
  v6[80] = xmmword_1991982D0;
  v6[81] = xmmword_199198750;
  v6[82] = xmmword_199198760;
  v6[83] = xmmword_199198770;
  v6[84] = xmmword_199198780;
  v6[85] = xmmword_199198790;
  v6[86] = xmmword_199198D90;
  v6[87] = xmmword_199198DA0;
  v6[88] = xmmword_199198DB0;
  v6[89] = xmmword_199198DC0;
  v6[90] = xmmword_199198DD0;
  v6[91] = xmmword_199198DE0;
  v6[92] = xmmword_199198DF0;
  v6[93] = xmmword_199198E00;
  v6[94] = xmmword_199198840;
  v6[95] = xmmword_199198E10;
  v6[96] = xmmword_199198E20;
  v6[97] = xmmword_199198E30;
  v6[98] = xmmword_199198E40;
  v6[99] = xmmword_199198E50;
  v6[100] = xmmword_199198E60;
  v6[101] = xmmword_199198E70;
  v6[102] = xmmword_199198E80;
  v6[103] = xmmword_199198E90;
  v6[104] = xmmword_199198EA0;
  v6[105] = xmmword_199198EB0;
  v6[106] = xmmword_199198EC0;
  v6[107] = xmmword_199198ED0;
  v6[108] = xmmword_199198EE0;
  v6[109] = xmmword_199198EF0;
  v6[110] = xmmword_199198F00;
  v6[111] = xmmword_199198F10;
  v6[112] = xmmword_199198F20;
  v6[113] = xmmword_199198F30;
  v6[114] = xmmword_199198F40;
  v6[115] = xmmword_19919A540;
  v6[116] = xmmword_19919A550;
  v6[117] = xmmword_19919A560;
  v6[118] = xmmword_19919A570;
  v6[119] = xmmword_19919A580;
  v6[120] = xmmword_19919A590;
  v6[121] = xmmword_19919A5A0;
  v6[122] = xmmword_199198F60;
  v6[123] = xmmword_19919A5B0;
  v6[124] = xmmword_199198F80;
  v6[125] = xmmword_199198F90;
  v6[126] = xmmword_1991938A0;
  v6[127] = xmmword_1991938C0;
  v6[128] = xmmword_1991938D0;
  v6[129] = xmmword_1991938E0;
  v6[130] = xmmword_19919A5C0;
  v6[131] = xmmword_19919A5D0;
  v6[132] = xmmword_19919A5E0;
  v6[133] = xmmword_19919A5F0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v8, 5uLL, 0, 0, __dst, 0xA4uLL, v4, (uint64_t *)v6, 0x10CuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass48@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[35];
  uint64_t v7;
  int __dst[537];
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x5A00000041;
  memcpy(__dst, &unk_199185474, sizeof(__dst));
  v6[0] = xmmword_199196FB0;
  v6[1] = xmmword_199196FC0;
  v6[2] = xmmword_199196FD0;
  v6[3] = xmmword_199196FE0;
  v6[4] = xmmword_199196FF0;
  v6[5] = xmmword_199197000;
  v6[6] = xmmword_199197010;
  v6[7] = xmmword_19919A600;
  v6[8] = xmmword_19919A610;
  v6[9] = xmmword_19919A620;
  v6[10] = xmmword_199197030;
  v6[11] = xmmword_199197040;
  v6[12] = xmmword_199197050;
  v6[13] = xmmword_19919A630;
  v6[14] = xmmword_19919A640;
  v6[15] = xmmword_19919A650;
  v6[16] = xmmword_19919A660;
  v6[17] = xmmword_19919A670;
  v6[18] = xmmword_19919A680;
  v6[19] = xmmword_19919A690;
  v6[20] = xmmword_19919A6A0;
  v6[21] = xmmword_19919A6B0;
  v6[22] = xmmword_19919A6C0;
  v6[23] = xmmword_1991970E0;
  v6[24] = xmmword_19919A6D0;
  v6[25] = xmmword_19919A6E0;
  v6[26] = xmmword_19919A6F0;
  v6[27] = xmmword_19919A700;
  v6[28] = xmmword_19919A710;
  v6[29] = xmmword_19919A720;
  v6[30] = xmmword_19919A730;
  v6[31] = xmmword_19919A740;
  v6[32] = xmmword_199193210;
  v6[33] = xmmword_19919A750;
  v6[34] = xmmword_19919A760;
  v7 = 0x1E9210001E900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v9, 1uLL, __dst, 0x219uLL, v4, (uint64_t *)v6, 0x47uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass49@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[36];
  int __dst[554];
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x7A00000061;
  memcpy(__dst, &unk_199185CD8, sizeof(__dst));
  v6[0] = xmmword_1991972E0;
  v6[1] = xmmword_19919A770;
  v6[2] = xmmword_19919A780;
  v6[3] = xmmword_19919A790;
  v6[4] = xmmword_199197330;
  v6[5] = xmmword_19919A7A0;
  v6[6] = xmmword_19919A7B0;
  v6[7] = xmmword_19919A7C0;
  v6[8] = xmmword_19919A7D0;
  v6[9] = xmmword_19919A7E0;
  v6[10] = xmmword_19919A7F0;
  v6[11] = xmmword_199197360;
  v6[12] = xmmword_199197370;
  v6[13] = xmmword_19919A800;
  v6[14] = xmmword_19919A810;
  v6[15] = xmmword_19919A820;
  v6[16] = xmmword_199195C70;
  v6[17] = xmmword_19919A830;
  v6[18] = xmmword_1991973F0;
  v6[19] = xmmword_199197400;
  v6[20] = xmmword_199197410;
  v6[21] = xmmword_19919A840;
  v6[22] = xmmword_19919A850;
  v6[23] = xmmword_19919A860;
  v6[24] = xmmword_19919A870;
  v6[25] = xmmword_19919A880;
  v6[26] = xmmword_19919A890;
  v6[27] = xmmword_1991974A0;
  v6[28] = xmmword_19919A8A0;
  v6[29] = xmmword_19919A8B0;
  v6[30] = xmmword_19919A8C0;
  v6[31] = xmmword_19919A8D0;
  v6[32] = xmmword_19919A8E0;
  v6[33] = xmmword_19919A8F0;
  v6[34] = xmmword_19919A0D0;
  v6[35] = xmmword_19919A900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v8, 1uLL, __dst, 0x22AuLL, v4, (uint64_t *)v6, 0x48uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass50@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[35];
  uint64_t v7;
  int __dst[554];
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x7A00000061;
  memcpy(__dst, &unk_199186580, sizeof(__dst));
  v6[0] = xmmword_1991972E0;
  v6[1] = xmmword_19919A770;
  v6[2] = xmmword_19919A910;
  v6[3] = xmmword_19919A920;
  v6[4] = xmmword_19919A930;
  v6[5] = xmmword_19919A7B0;
  v6[6] = xmmword_19919A7C0;
  v6[7] = xmmword_19919A7D0;
  v6[8] = xmmword_19919A7E0;
  v6[9] = xmmword_19919A7F0;
  v6[10] = xmmword_199197360;
  v6[11] = xmmword_199197370;
  v6[12] = xmmword_19919A800;
  v6[13] = xmmword_19919A810;
  v6[14] = xmmword_199195C70;
  v6[15] = xmmword_19919A830;
  v6[16] = xmmword_1991973F0;
  v6[17] = xmmword_199197400;
  v6[18] = xmmword_199197410;
  v6[19] = xmmword_199197420;
  v6[20] = xmmword_199197430;
  v6[21] = xmmword_199197440;
  v6[22] = xmmword_199197450;
  v6[23] = xmmword_199197460;
  v6[24] = xmmword_199197470;
  v6[25] = xmmword_19919A940;
  v6[26] = xmmword_19919A040;
  v6[27] = xmmword_19919A950;
  v6[28] = xmmword_19919A960;
  v6[29] = xmmword_199195D60;
  v6[30] = xmmword_1991974F0;
  v6[31] = xmmword_199197500;
  v6[32] = xmmword_199193230;
  v6[33] = xmmword_199197510;
  v6[34] = xmmword_199197520;
  v7 = 0x1E9430001E922;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v9, 1uLL, __dst, 0x22AuLL, v4, (uint64_t *)v6, 0x47uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass51@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[41];
  int __dst[539];
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x5A00000041;
  memcpy(__dst, &unk_199186E28, sizeof(__dst));
  v6[0] = xmmword_19919A970;
  v6[1] = xmmword_19919A980;
  v6[2] = xmmword_19919A990;
  v6[3] = xmmword_19919A9A0;
  v6[4] = xmmword_19919A9B0;
  v6[5] = xmmword_19919A9C0;
  v6[6] = xmmword_19919A9D0;
  v6[7] = xmmword_19919A9E0;
  v6[8] = xmmword_19919A9F0;
  v6[9] = xmmword_19919AA00;
  v6[10] = xmmword_19919AA10;
  v6[11] = xmmword_19919AA20;
  v6[12] = xmmword_19919AA30;
  v6[13] = xmmword_19919AA40;
  v6[14] = xmmword_19919AA50;
  v6[15] = xmmword_19919AA60;
  v6[16] = xmmword_199197070;
  v6[17] = xmmword_199197080;
  v6[18] = xmmword_19919AA70;
  v6[19] = xmmword_1991953C0;
  v6[20] = xmmword_19919AA80;
  v6[21] = xmmword_1991970A0;
  v6[22] = xmmword_1991970B0;
  v6[23] = xmmword_1991970C0;
  v6[24] = xmmword_19919AA90;
  v6[25] = xmmword_19919AAA0;
  v6[26] = xmmword_19919AAB0;
  v6[27] = xmmword_19919AAC0;
  v6[28] = xmmword_19919AAD0;
  v6[29] = xmmword_19919A6E0;
  v6[30] = xmmword_19919A6F0;
  v6[31] = xmmword_19919A700;
  v6[32] = xmmword_19919A710;
  v6[33] = xmmword_19919A720;
  v6[34] = xmmword_19919A8B0;
  v6[35] = xmmword_19919AAE0;
  v6[36] = xmmword_199197170;
  v6[37] = xmmword_199197180;
  v6[38] = xmmword_199197190;
  v6[39] = xmmword_1991971A0;
  v6[40] = xmmword_19919AAF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v8, 1uLL, __dst, 0x21BuLL, v4, (uint64_t *)v6, 0x52uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass52@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[50];
  _OWORD v7[7];
  int v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_199194FF0;
  v7[4] = xmmword_1991876D4;
  v7[5] = unk_1991876E4;
  v7[6] = xmmword_1991876F4;
  v7[0] = xmmword_199187694;
  v7[1] = unk_1991876A4;
  v7[2] = xmmword_1991876B4;
  v7[3] = unk_1991876C4;
  v8 = 43859;
  v6[0] = xmmword_199195000;
  v6[1] = xmmword_19919AB00;
  v6[2] = xmmword_19919AB10;
  v6[3] = xmmword_19919AB20;
  v6[4] = xmmword_19919AB30;
  v6[5] = xmmword_19919AB40;
  v6[6] = xmmword_19919A7C0;
  v6[7] = xmmword_19919A7D0;
  v6[8] = xmmword_19919A7E0;
  v6[9] = xmmword_19919A7F0;
  v6[10] = xmmword_199195C00;
  v6[11] = xmmword_199195C10;
  v6[12] = xmmword_19919AB50;
  v6[13] = xmmword_19919AB60;
  v6[14] = xmmword_19919AB70;
  v6[15] = xmmword_19919AB80;
  v6[16] = xmmword_199195C50;
  v6[17] = xmmword_199195C60;
  v6[18] = xmmword_199195C70;
  v6[19] = xmmword_199195C80;
  v6[20] = xmmword_19919AB90;
  v6[21] = xmmword_199195400;
  v6[22] = xmmword_199195410;
  v6[23] = xmmword_199195420;
  v6[24] = xmmword_199195430;
  v6[25] = xmmword_199195440;
  v6[26] = xmmword_199195450;
  v6[27] = xmmword_199195460;
  v6[28] = xmmword_19919ABA0;
  v6[29] = xmmword_19919A260;
  v6[30] = xmmword_19919ABB0;
  v6[31] = xmmword_19919ABC0;
  v6[32] = xmmword_19919ABD0;
  v6[33] = xmmword_19919ABE0;
  v6[34] = xmmword_19919ABF0;
  v6[35] = xmmword_19919AC00;
  v6[36] = xmmword_19919AC10;
  v6[37] = xmmword_19919AC20;
  v6[38] = xmmword_19919AC30;
  v6[39] = xmmword_19919AC40;
  v6[40] = xmmword_199195D60;
  v6[41] = xmmword_199195D70;
  v6[42] = xmmword_199195D80;
  v6[43] = xmmword_199195D90;
  v6[44] = xmmword_199193210;
  v6[45] = xmmword_199193220;
  v6[46] = xmmword_199193230;
  v6[47] = xmmword_199195DA0;
  v6[48] = xmmword_199195DB0;
  v6[49] = xmmword_19919AC50;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v9, 2uLL, (int *)v7, 0x1DuLL, v4, (uint64_t *)v6, 0x64uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass53(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[261];
  int v8[136];
  __int128 v9;
  uint64_t v10;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v10 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_199194FF0;
  memcpy(v8, &unk_199187708, sizeof(v8));
  v7[0] = xmmword_199195000;
  v7[1] = xmmword_199195010;
  v7[2] = xmmword_199195020;
  v7[3] = xmmword_199195030;
  v7[4] = xmmword_199195040;
  v7[5] = xmmword_199195050;
  v7[6] = xmmword_199195060;
  v7[7] = xmmword_199195070;
  v7[8] = xmmword_199195080;
  v7[9] = xmmword_199195090;
  v7[10] = xmmword_1991950A0;
  v7[11] = xmmword_1991950B0;
  v7[12] = xmmword_1991950C0;
  v7[13] = xmmword_1991950D0;
  v7[14] = xmmword_1991950E0;
  v7[15] = xmmword_1991950F0;
  v7[16] = xmmword_199195100;
  v7[17] = xmmword_199195110;
  v7[18] = xmmword_199192850;
  v7[19] = xmmword_199192860;
  v7[20] = xmmword_199195120;
  v7[21] = xmmword_199195130;
  v7[22] = xmmword_1991928B0;
  v7[23] = xmmword_1991928C0;
  v7[24] = xmmword_1991928D0;
  v7[25] = xmmword_199195140;
  v7[26] = xmmword_199195150;
  v7[27] = xmmword_199192920;
  v7[28] = xmmword_199192930;
  v7[29] = xmmword_199195160;
  v7[30] = xmmword_199192980;
  v7[31] = xmmword_199192990;
  v7[32] = xmmword_1991929A0;
  v7[33] = xmmword_199195170;
  v7[34] = xmmword_1991929F0;
  v7[35] = xmmword_199192A00;
  v7[36] = xmmword_199192A10;
  v7[37] = xmmword_199192A20;
  v7[38] = xmmword_199195180;
  v7[39] = xmmword_199192A60;
  v7[40] = xmmword_199195190;
  v7[41] = xmmword_1991951A0;
  v7[42] = xmmword_1991951B0;
  v7[43] = xmmword_1991951C0;
  v7[44] = xmmword_1991951D0;
  v7[45] = xmmword_1991951E0;
  v7[46] = xmmword_1991951F0;
  v7[47] = xmmword_199195200;
  v7[48] = xmmword_199192B50;
  v7[49] = xmmword_199192B60;
  v7[50] = xmmword_199195210;
  v7[51] = xmmword_199195220;
  v7[52] = xmmword_199195230;
  v7[53] = xmmword_199195240;
  v7[54] = xmmword_199195250;
  v7[55] = xmmword_199195260;
  v7[56] = xmmword_199195270;
  v7[57] = xmmword_199195280;
  v7[58] = xmmword_199195290;
  v7[59] = xmmword_1991952A0;
  v7[60] = xmmword_1991952B0;
  v7[61] = xmmword_199192C20;
  v7[62] = xmmword_199192C30;
  v7[63] = xmmword_199192C40;
  v7[64] = xmmword_199192C50;
  v7[65] = xmmword_199192C60;
  v7[66] = xmmword_199192C70;
  v7[67] = xmmword_1991952C0;
  v7[68] = xmmword_1991952D0;
  v7[69] = xmmword_1991952E0;
  v7[70] = xmmword_1991952F0;
  v7[71] = xmmword_19919AC60;
  v7[72] = xmmword_199195310;
  v7[73] = xmmword_199192CD0;
  v7[74] = xmmword_199195320;
  v7[75] = xmmword_19919AC70;
  v7[76] = xmmword_19919AC80;
  v7[77] = xmmword_199192D40;
  v7[78] = xmmword_19919AC90;
  v7[79] = xmmword_19919ACA0;
  v7[80] = xmmword_19919ACB0;
  v7[81] = xmmword_19919ACC0;
  v7[82] = xmmword_19919ACD0;
  v7[83] = xmmword_19919ACE0;
  v7[84] = xmmword_199195C80;
  v7[85] = xmmword_199197C60;
  v7[86] = xmmword_19919ACF0;
  v7[87] = xmmword_199199B30;
  v7[88] = xmmword_199192DF0;
  v7[89] = xmmword_199192E00;
  v7[90] = xmmword_199199B40;
  v7[91] = xmmword_199199B50;
  v7[92] = xmmword_199199B60;
  v7[93] = xmmword_199199B70;
  v7[94] = xmmword_199199B80;
  v7[95] = xmmword_19919AD00;
  v7[96] = xmmword_19919AD10;
  v7[97] = xmmword_19919AD20;
  v7[98] = xmmword_1991954B0;
  v7[99] = xmmword_1991954C0;
  v7[100] = xmmword_1991954D0;
  v7[101] = xmmword_1991954E0;
  v7[102] = xmmword_1991954F0;
  v7[103] = xmmword_199195500;
  v7[104] = xmmword_199195510;
  v7[105] = xmmword_19919AD30;
  v7[106] = xmmword_19919AD40;
  v7[107] = xmmword_19919AD50;
  v7[108] = xmmword_19919AD60;
  v7[109] = xmmword_199192F40;
  v7[110] = xmmword_199197C90;
  v7[111] = xmmword_19919AD70;
  v7[112] = xmmword_19919AD80;
  v7[113] = xmmword_19919AD90;
  v7[114] = xmmword_19919ADA0;
  v7[115] = xmmword_19919ADB0;
  v7[116] = xmmword_19919ADC0;
  v7[117] = xmmword_199195D30;
  v7[118] = xmmword_19919ADD0;
  v7[119] = xmmword_199197CF0;
  v7[120] = xmmword_199197D00;
  v7[121] = xmmword_199197D10;
  v7[122] = xmmword_199197D20;
  v7[123] = xmmword_199197D30;
  v7[124] = xmmword_19919ADE0;
  v7[125] = xmmword_199197D50;
  v7[126] = xmmword_199197D60;
  v7[127] = xmmword_19919ADF0;
  v7[128] = xmmword_19919AE00;
  v7[129] = xmmword_19919AE10;
  v7[130] = xmmword_19919AE20;
  v7[131] = xmmword_199197DA0;
  v7[132] = xmmword_199197DB0;
  v7[133] = xmmword_199199CA0;
  v7[134] = xmmword_19919AE30;
  v7[135] = xmmword_199197DD0;
  v7[136] = xmmword_199197DE0;
  v7[137] = xmmword_199195D60;
  v7[138] = xmmword_199197DF0;
  v7[139] = xmmword_199193090;
  v7[140] = xmmword_199197E00;
  v7[141] = xmmword_199197E10;
  v7[142] = xmmword_199197E20;
  v7[143] = xmmword_1991930E0;
  v7[144] = xmmword_199195D70;
  v7[145] = xmmword_199199CD0;
  v7[146] = xmmword_199193100;
  v7[147] = xmmword_199197E50;
  v7[148] = xmmword_199197E60;
  v7[149] = xmmword_199197E70;
  v7[150] = xmmword_199197E80;
  v7[151] = xmmword_199199CE0;
  v7[152] = xmmword_199195790;
  v7[153] = xmmword_19919AE40;
  v7[154] = xmmword_199197EB0;
  v7[155] = xmmword_199199CF0;
  v7[156] = xmmword_1991957D0;
  v7[157] = xmmword_1991931F0;
  v7[158] = xmmword_1991957E0;
  v7[159] = xmmword_199193210;
  v7[160] = xmmword_199193220;
  v7[161] = xmmword_199193230;
  v7[162] = xmmword_199193240;
  v7[163] = xmmword_199193250;
  v7[164] = xmmword_199193260;
  v7[165] = xmmword_199193270;
  v7[166] = xmmword_199193280;
  v7[167] = xmmword_1991957F0;
  v7[168] = xmmword_199195800;
  v7[169] = xmmword_199195810;
  v7[170] = xmmword_199195820;
  v7[171] = xmmword_199195830;
  v7[172] = xmmword_1991932F0;
  v7[173] = xmmword_199195840;
  v7[174] = xmmword_199195850;
  v7[175] = xmmword_199195860;
  v7[176] = xmmword_199195870;
  v7[177] = xmmword_199193360;
  v7[178] = xmmword_199195880;
  v7[179] = xmmword_199195890;
  v7[180] = xmmword_1991958A0;
  v7[181] = xmmword_1991958B0;
  v7[182] = xmmword_1991958C0;
  v7[183] = xmmword_1991958D0;
  v7[184] = xmmword_1991958E0;
  v7[185] = xmmword_1991958F0;
  v7[186] = xmmword_199195900;
  v7[187] = xmmword_199195910;
  v7[188] = xmmword_199193430;
  v7[189] = xmmword_199195920;
  v7[190] = xmmword_199195930;
  v7[191] = xmmword_199193470;
  v7[192] = xmmword_199193480;
  v7[193] = xmmword_199195940;
  v7[194] = xmmword_199195950;
  v7[195] = xmmword_199195960;
  v7[196] = xmmword_199195970;
  v7[197] = xmmword_199195980;
  v7[198] = xmmword_199195990;
  v7[199] = xmmword_1991959A0;
  v7[200] = xmmword_1991959B0;
  v7[201] = xmmword_199193550;
  v7[202] = xmmword_1991959C0;
  v7[203] = xmmword_1991959D0;
  v7[204] = xmmword_1991959E0;
  v7[205] = xmmword_1991959F0;
  v7[206] = xmmword_199195A00;
  v7[207] = xmmword_199195A10;
  v7[208] = xmmword_199193620;
  v7[209] = xmmword_199195A20;
  v7[210] = xmmword_199195A30;
  v7[211] = xmmword_19919AE50;
  v7[212] = xmmword_199197FB0;
  v7[213] = xmmword_199197FC0;
  v7[214] = xmmword_199197FD0;
  v7[215] = xmmword_199197FE0;
  v7[216] = xmmword_199197FF0;
  v7[217] = xmmword_19919AE60;
  v7[218] = xmmword_19919AE70;
  v7[219] = xmmword_19919AE80;
  v7[220] = xmmword_19919AE90;
  v7[221] = xmmword_199198010;
  v7[222] = xmmword_19919A580;
  v7[223] = xmmword_19919AEA0;
  v7[224] = xmmword_19919AEB0;
  v7[225] = xmmword_19919AEC0;
  v7[226] = xmmword_19919AED0;
  v7[227] = xmmword_19919AEE0;
  v7[228] = xmmword_199195DD0;
  v7[229] = xmmword_199195DE0;
  v7[230] = xmmword_199195DF0;
  v7[231] = xmmword_199195E00;
  v7[232] = xmmword_199195E10;
  v7[233] = xmmword_199195E20;
  v7[234] = xmmword_199195E30;
  v7[235] = xmmword_199195E40;
  v7[236] = xmmword_199195E50;
  v7[237] = xmmword_199195E60;
  v7[238] = xmmword_199195E70;
  v7[239] = xmmword_199195E80;
  v7[240] = xmmword_199195E90;
  v7[241] = xmmword_1991938B0;
  v7[242] = xmmword_199199F60;
  v7[243] = xmmword_199199F70;
  v7[244] = xmmword_199199F80;
  v7[245] = xmmword_199198040;
  v7[246] = xmmword_199198050;
  v7[247] = xmmword_199199F90;
  v7[248] = xmmword_199193980;
  v7[249] = xmmword_199193990;
  v7[250] = xmmword_1991939A0;
  v7[251] = xmmword_1991939B0;
  v7[252] = xmmword_1991939C0;
  v7[253] = xmmword_1991939D0;
  v7[254] = xmmword_1991939E0;
  v7[255] = xmmword_1991939F0;
  v7[256] = xmmword_19919AEF0;
  v7[257] = xmmword_19919AF00;
  v7[258] = xmmword_19919AF10;
  v7[259] = xmmword_19919AF20;
  v7[260] = xmmword_19919AF30;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, (uint64_t *)&v9, 2uLL, v8, 0x88uLL, v5, (uint64_t *)v7, 0x20AuLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass54(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  _OWORD v8[327];
  int v9[111];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v12 = *MEMORY[0x1E0C80C00];
  v7 = 95;
  v10 = xmmword_19919AF40;
  v11 = 0x7A00000061;
  memcpy(v9, &unk_199187928, sizeof(v9));
  v8[0] = xmmword_199195000;
  v8[1] = xmmword_199195010;
  v8[2] = xmmword_19919AF50;
  v8[3] = xmmword_199195030;
  v8[4] = xmmword_19919AF60;
  v8[5] = xmmword_199195050;
  v8[6] = xmmword_19919AF70;
  v8[7] = xmmword_199195C40;
  v8[8] = xmmword_199198320;
  v8[9] = xmmword_19919AF80;
  v8[10] = xmmword_19919AF90;
  v8[11] = xmmword_19919AFA0;
  v8[12] = xmmword_19919AFB0;
  v8[13] = xmmword_19919AFC0;
  v8[14] = xmmword_19919AFD0;
  v8[15] = xmmword_19919AFE0;
  v8[16] = xmmword_1991978D0;
  v8[17] = xmmword_19919AFF0;
  v8[18] = xmmword_19919B000;
  v8[19] = xmmword_19919B010;
  v8[20] = xmmword_199197910;
  v8[21] = xmmword_199197920;
  v8[22] = xmmword_19919B020;
  v8[23] = xmmword_19919B030;
  v8[24] = xmmword_19919B040;
  v8[25] = xmmword_19919B050;
  v8[26] = xmmword_199197950;
  v8[27] = xmmword_199197960;
  v8[28] = xmmword_199197970;
  v8[29] = xmmword_199198410;
  v8[30] = xmmword_19919B060;
  v8[31] = xmmword_19919B070;
  v8[32] = xmmword_199197990;
  v8[33] = xmmword_1991979A0;
  v8[34] = xmmword_1991979B0;
  v8[35] = xmmword_19919B080;
  v8[36] = xmmword_19919B090;
  v8[37] = xmmword_19919B0A0;
  v8[38] = xmmword_1991998F0;
  v8[39] = xmmword_1991979D0;
  v8[40] = xmmword_1991979E0;
  v8[41] = xmmword_19919B0B0;
  v8[42] = xmmword_199198460;
  v8[43] = xmmword_19919B0C0;
  v8[44] = xmmword_19919B0D0;
  v8[45] = xmmword_19919B0E0;
  v8[46] = xmmword_199197A10;
  v8[47] = xmmword_199197A20;
  v8[48] = xmmword_199197A30;
  v8[49] = xmmword_19919B0F0;
  v8[50] = xmmword_19919B100;
  v8[51] = xmmword_19919B110;
  v8[52] = xmmword_199197A50;
  v8[53] = xmmword_19919B120;
  v8[54] = xmmword_19919B130;
  v8[55] = xmmword_199199970;
  v8[56] = xmmword_19919B140;
  v8[57] = xmmword_19919B150;
  v8[58] = xmmword_199192AB0;
  v8[59] = xmmword_199192AC0;
  v8[60] = xmmword_199192AD0;
  v8[61] = xmmword_199192AE0;
  v8[62] = xmmword_199192AF0;
  v8[63] = xmmword_199192B00;
  v8[64] = xmmword_199192B10;
  v8[65] = xmmword_199192B20;
  v8[66] = xmmword_19919B160;
  v8[67] = xmmword_19919B170;
  v8[68] = xmmword_1991999F0;
  v8[69] = xmmword_199192B50;
  v8[70] = xmmword_199192B60;
  v8[71] = xmmword_199192B70;
  v8[72] = xmmword_19919B180;
  v8[73] = xmmword_19919B190;
  v8[74] = xmmword_19919B1A0;
  v8[75] = xmmword_199195230;
  v8[76] = xmmword_19919B1B0;
  v8[77] = xmmword_19919B1C0;
  v8[78] = xmmword_19919B1D0;
  v8[79] = xmmword_19919B1E0;
  v8[80] = xmmword_19919B1F0;
  v8[81] = xmmword_19919B200;
  v8[82] = xmmword_19919B210;
  v8[83] = xmmword_199195C50;
  v8[84] = xmmword_19919B220;
  v8[85] = xmmword_199197B80;
  v8[86] = xmmword_199197B90;
  v8[87] = xmmword_199197BA0;
  v8[88] = xmmword_199197BB0;
  v8[89] = xmmword_199197BC0;
  v8[90] = xmmword_199197BD0;
  v8[91] = xmmword_19919B230;
  v8[92] = xmmword_19919B240;
  v8[93] = xmmword_19919B250;
  v8[94] = xmmword_199197BF0;
  v8[95] = xmmword_19919B260;
  v8[96] = xmmword_19919B270;
  v8[97] = xmmword_19919B280;
  v8[98] = xmmword_19919B290;
  v8[99] = xmmword_19919B2A0;
  v8[100] = xmmword_19919B2B0;
  v8[101] = xmmword_19919B2C0;
  v8[102] = xmmword_199192D10;
  v8[103] = xmmword_199192D20;
  v8[104] = xmmword_19919B2D0;
  v8[105] = xmmword_199192D40;
  v8[106] = xmmword_199192D50;
  v8[107] = xmmword_19919B2E0;
  v8[108] = xmmword_199192D70;
  v8[109] = xmmword_19919B2F0;
  v8[110] = xmmword_19919B300;
  v8[111] = xmmword_19919B310;
  v8[112] = xmmword_19919B320;
  v8[113] = xmmword_19919B330;
  v8[114] = xmmword_1991953C0;
  v8[115] = xmmword_19919B340;
  v8[116] = xmmword_19919B350;
  v8[117] = xmmword_199195400;
  v8[118] = xmmword_199195410;
  v8[119] = xmmword_199195420;
  v8[120] = xmmword_199195430;
  v8[121] = xmmword_199195440;
  v8[122] = xmmword_199195450;
  v8[123] = xmmword_199195460;
  v8[124] = xmmword_19919B360;
  v8[125] = xmmword_19919B370;
  v8[126] = xmmword_19919B380;
  v8[127] = xmmword_19919B390;
  v8[128] = xmmword_199195CD0;
  v8[129] = xmmword_19919B3A0;
  v8[130] = xmmword_19919B3B0;
  v8[131] = xmmword_19919B3C0;
  v8[132] = xmmword_1991954E0;
  v8[133] = xmmword_1991954F0;
  v8[134] = xmmword_199195500;
  v8[135] = xmmword_199195510;
  v8[136] = xmmword_199199BB0;
  v8[137] = xmmword_19919B3D0;
  v8[138] = xmmword_199199BD0;
  v8[139] = xmmword_19919B3E0;
  v8[140] = xmmword_199192F40;
  v8[141] = xmmword_199197C90;
  v8[142] = xmmword_19919AD70;
  v8[143] = xmmword_19919AD80;
  v8[144] = xmmword_19919B3F0;
  v8[145] = xmmword_19919B400;
  v8[146] = xmmword_1991955C0;
  v8[147] = xmmword_1991955D0;
  v8[148] = xmmword_19919B410;
  v8[149] = xmmword_19919B420;
  v8[150] = xmmword_19919B430;
  v8[151] = xmmword_19919B440;
  v8[152] = xmmword_19919B450;
  v8[153] = xmmword_19919B460;
  v8[154] = xmmword_199199C60;
  v8[155] = xmmword_19919B470;
  v8[156] = xmmword_19919B480;
  v8[157] = xmmword_19919B490;
  v8[158] = xmmword_199193010;
  v8[159] = xmmword_199193020;
  v8[160] = xmmword_1991956B0;
  v8[161] = xmmword_19919B4A0;
  v8[162] = xmmword_19919B4B0;
  v8[163] = xmmword_199193050;
  v8[164] = xmmword_1991956D0;
  v8[165] = xmmword_199193070;
  v8[166] = xmmword_19919B4C0;
  v8[167] = xmmword_1991956F0;
  v8[168] = xmmword_199195700;
  v8[169] = xmmword_199195710;
  v8[170] = xmmword_199195720;
  v8[171] = xmmword_19919B4D0;
  v8[172] = xmmword_19919B4E0;
  v8[173] = xmmword_19919B4F0;
  v8[174] = xmmword_19919B500;
  v8[175] = xmmword_199195D70;
  v8[176] = xmmword_19919B510;
  v8[177] = xmmword_199193100;
  v8[178] = xmmword_199197E50;
  v8[179] = xmmword_199197E60;
  v8[180] = xmmword_199197E70;
  v8[181] = xmmword_199197E80;
  v8[182] = xmmword_199199CE0;
  v8[183] = xmmword_199195790;
  v8[184] = xmmword_1991931B0;
  v8[185] = xmmword_199197EB0;
  v8[186] = xmmword_199199CF0;
  v8[187] = xmmword_19919B520;
  v8[188] = xmmword_19919B530;
  v8[189] = xmmword_199197ED0;
  v8[190] = xmmword_199197180;
  v8[191] = xmmword_199197190;
  v8[192] = xmmword_19919A8E0;
  v8[193] = xmmword_19919A8F0;
  v8[194] = xmmword_199197EE0;
  v8[195] = xmmword_19919B540;
  v8[196] = xmmword_1991982D0;
  v8[197] = xmmword_19919B550;
  v8[198] = xmmword_19919B560;
  v8[199] = xmmword_19919B570;
  v8[200] = xmmword_19919B580;
  v8[201] = xmmword_19919B590;
  v8[202] = xmmword_19919B5A0;
  v8[203] = xmmword_19919B5B0;
  v8[204] = xmmword_19919B5C0;
  v8[205] = xmmword_19919B5D0;
  v8[206] = xmmword_199195840;
  v8[207] = xmmword_19919B5E0;
  v8[208] = xmmword_199195860;
  v8[209] = xmmword_199195870;
  v8[210] = xmmword_199193360;
  v8[211] = xmmword_199199D10;
  v8[212] = xmmword_19919B5F0;
  v8[213] = xmmword_19919B600;
  v8[214] = xmmword_19919B610;
  v8[215] = xmmword_19919B620;
  v8[216] = xmmword_19919B630;
  v8[217] = xmmword_19919B640;
  v8[218] = xmmword_19919B650;
  v8[219] = xmmword_19919B660;
  v8[220] = xmmword_19919B670;
  v8[221] = xmmword_19919B680;
  v8[222] = xmmword_19919B690;
  v8[223] = xmmword_19919B6A0;
  v8[224] = xmmword_199193430;
  v8[225] = xmmword_199195920;
  v8[226] = xmmword_199193450;
  v8[227] = xmmword_199193460;
  v8[228] = xmmword_199193470;
  v8[229] = xmmword_199193480;
  v8[230] = xmmword_199193490;
  v8[231] = xmmword_1991934A0;
  v8[232] = xmmword_1991934B0;
  v8[233] = xmmword_19919B6B0;
  v8[234] = xmmword_19919B6C0;
  v8[235] = xmmword_19919B6D0;
  v8[236] = xmmword_19919B6E0;
  v8[237] = xmmword_19919B6F0;
  v8[238] = xmmword_19919B700;
  v8[239] = xmmword_19919B710;
  v8[240] = xmmword_19919B720;
  v8[241] = xmmword_19919B730;
  v8[242] = xmmword_19919B740;
  v8[243] = xmmword_199193550;
  v8[244] = xmmword_199193560;
  v8[245] = xmmword_19919B750;
  v8[246] = xmmword_199193580;
  v8[247] = xmmword_19919B760;
  v8[248] = xmmword_19919B770;
  v8[249] = xmmword_199197F50;
  v8[250] = xmmword_19919B780;
  v8[251] = xmmword_19919B790;
  v8[252] = xmmword_1991935E0;
  v8[253] = xmmword_1991935F0;
  v8[254] = xmmword_199193600;
  v8[255] = xmmword_199193610;
  v8[256] = xmmword_199193620;
  v8[257] = xmmword_199193630;
  v8[258] = xmmword_199193640;
  v8[259] = xmmword_19919B7A0;
  v8[260] = xmmword_19919B7B0;
  v8[261] = xmmword_19919B7C0;
  v8[262] = xmmword_199199F30;
  v8[263] = xmmword_199195A50;
  v8[264] = xmmword_19919B7D0;
  v8[265] = xmmword_1991936B0;
  v8[266] = xmmword_19919B7E0;
  v8[267] = xmmword_1991936D0;
  v8[268] = xmmword_19919B7F0;
  v8[269] = xmmword_19919B800;
  v8[270] = xmmword_199193700;
  v8[271] = xmmword_199195A90;
  v8[272] = xmmword_199193720;
  v8[273] = xmmword_19919A570;
  v8[274] = xmmword_19919B810;
  v8[275] = xmmword_199198010;
  v8[276] = xmmword_19919A580;
  v8[277] = xmmword_19919AEA0;
  v8[278] = xmmword_19919AEB0;
  v8[279] = xmmword_19919AEC0;
  v8[280] = xmmword_19919AED0;
  v8[281] = xmmword_19919B820;
  v8[282] = xmmword_19919B830;
  v8[283] = xmmword_19919B840;
  v8[284] = xmmword_199198F70;
  v8[285] = xmmword_199198F80;
  v8[286] = xmmword_199193810;
  v8[287] = xmmword_199193820;
  v8[288] = xmmword_199193830;
  v8[289] = xmmword_199193840;
  v8[290] = xmmword_199193850;
  v8[291] = xmmword_199193860;
  v8[292] = xmmword_199193870;
  v8[293] = xmmword_199193880;
  v8[294] = xmmword_199195AB0;
  v8[295] = xmmword_199195AC0;
  v8[296] = xmmword_199195AD0;
  v8[297] = xmmword_199195AE0;
  v8[298] = xmmword_199195AF0;
  v8[299] = xmmword_19919B850;
  v8[300] = xmmword_199198F90;
  v8[301] = xmmword_1991938A0;
  v8[302] = xmmword_1991938B0;
  v8[303] = xmmword_1991938C0;
  v8[304] = xmmword_1991938D0;
  v8[305] = xmmword_1991938E0;
  v8[306] = xmmword_1991938F0;
  v8[307] = xmmword_19919B860;
  v8[308] = xmmword_19919B870;
  v8[309] = xmmword_199198040;
  v8[310] = xmmword_199198050;
  v8[311] = xmmword_19919B880;
  v8[312] = xmmword_19919B890;
  v8[313] = xmmword_199193980;
  v8[314] = xmmword_199193990;
  v8[315] = xmmword_1991939A0;
  v8[316] = xmmword_1991939B0;
  v8[317] = xmmword_1991939C0;
  v8[318] = xmmword_1991939D0;
  v8[319] = xmmword_1991939E0;
  v8[320] = xmmword_1991939F0;
  v8[321] = xmmword_19919B8A0;
  v8[322] = xmmword_199193B30;
  v8[323] = xmmword_199193B40;
  v8[324] = xmmword_199193B50;
  v8[325] = xmmword_199193B60;
  v8[326] = xmmword_19919B8B0;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, &v7, 1uLL, (uint64_t *)&v10, 3uLL, v9, 0x6FuLL, v5, (uint64_t *)v8, 0x28EuLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass55(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[260];
  uint64_t v8;
  int v9[144];
  __int128 v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v11 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_199194FF0;
  memcpy(v9, &unk_199187AE4, sizeof(v9));
  v7[0] = xmmword_199195000;
  v7[1] = xmmword_199195010;
  v7[2] = xmmword_199195020;
  v7[3] = xmmword_19919B8C0;
  v7[4] = xmmword_199195040;
  v7[5] = xmmword_199195050;
  v7[6] = xmmword_199195060;
  v7[7] = xmmword_199195070;
  v7[8] = xmmword_199195080;
  v7[9] = xmmword_199195090;
  v7[10] = xmmword_1991950A0;
  v7[11] = xmmword_1991950B0;
  v7[12] = xmmword_1991950C0;
  v7[13] = xmmword_1991950D0;
  v7[14] = xmmword_1991950E0;
  v7[15] = xmmword_1991950F0;
  v7[16] = xmmword_199195100;
  v7[17] = xmmword_199195110;
  v7[18] = xmmword_199192850;
  v7[19] = xmmword_199192860;
  v7[20] = xmmword_199195120;
  v7[21] = xmmword_199195130;
  v7[22] = xmmword_1991928B0;
  v7[23] = xmmword_1991928C0;
  v7[24] = xmmword_1991928D0;
  v7[25] = xmmword_199195140;
  v7[26] = xmmword_199195150;
  v7[27] = xmmword_199192920;
  v7[28] = xmmword_199192930;
  v7[29] = xmmword_199195160;
  v7[30] = xmmword_199192980;
  v7[31] = xmmword_199192990;
  v7[32] = xmmword_1991929A0;
  v7[33] = xmmword_199195170;
  v7[34] = xmmword_1991929F0;
  v7[35] = xmmword_199192A00;
  v7[36] = xmmword_199192A10;
  v7[37] = xmmword_199192A20;
  v7[38] = xmmword_199195180;
  v7[39] = xmmword_199192A60;
  v7[40] = xmmword_199195190;
  v7[41] = xmmword_1991951A0;
  v7[42] = xmmword_1991951B0;
  v7[43] = xmmword_1991951C0;
  v7[44] = xmmword_1991951D0;
  v7[45] = xmmword_1991951E0;
  v7[46] = xmmword_1991951F0;
  v7[47] = xmmword_199195200;
  v7[48] = xmmword_199192B50;
  v7[49] = xmmword_199192B60;
  v7[50] = xmmword_19919B8D0;
  v7[51] = xmmword_199192BA0;
  v7[52] = xmmword_199197B00;
  v7[53] = xmmword_199195250;
  v7[54] = xmmword_199195260;
  v7[55] = xmmword_199195270;
  v7[56] = xmmword_199195280;
  v7[57] = xmmword_199195290;
  v7[58] = xmmword_1991952A0;
  v7[59] = xmmword_1991952B0;
  v7[60] = xmmword_199192C20;
  v7[61] = xmmword_199192C30;
  v7[62] = xmmword_199192C40;
  v7[63] = xmmword_199192C50;
  v7[64] = xmmword_199192C60;
  v7[65] = xmmword_199192C70;
  v7[66] = xmmword_1991952C0;
  v7[67] = xmmword_1991952D0;
  v7[68] = xmmword_1991952E0;
  v7[69] = xmmword_1991952F0;
  v7[70] = xmmword_19919AC60;
  v7[71] = xmmword_199195310;
  v7[72] = xmmword_199192CD0;
  v7[73] = xmmword_199195320;
  v7[74] = xmmword_19919AC70;
  v7[75] = xmmword_19919AC80;
  v7[76] = xmmword_199192D40;
  v7[77] = xmmword_19919AC90;
  v7[78] = xmmword_19919ACA0;
  v7[79] = xmmword_19919ACB0;
  v7[80] = xmmword_19919ACC0;
  v7[81] = xmmword_19919ACD0;
  v7[82] = xmmword_19919ACE0;
  v7[83] = xmmword_199195C80;
  v7[84] = xmmword_199197C60;
  v7[85] = xmmword_19919ACF0;
  v7[86] = xmmword_199199B30;
  v7[87] = xmmword_199192DF0;
  v7[88] = xmmword_199192E00;
  v7[89] = xmmword_199199B40;
  v7[90] = xmmword_199199B50;
  v7[91] = xmmword_199199B60;
  v7[92] = xmmword_199199B70;
  v7[93] = xmmword_199199B80;
  v7[94] = xmmword_19919AD00;
  v7[95] = xmmword_19919AD10;
  v7[96] = xmmword_19919AD20;
  v7[97] = xmmword_1991954B0;
  v7[98] = xmmword_1991954C0;
  v7[99] = xmmword_1991954D0;
  v7[100] = xmmword_1991954E0;
  v7[101] = xmmword_1991954F0;
  v7[102] = xmmword_199195500;
  v7[103] = xmmword_199195510;
  v7[104] = xmmword_19919AD30;
  v7[105] = xmmword_19919AD40;
  v7[106] = xmmword_19919B8E0;
  v7[107] = xmmword_19919AD60;
  v7[108] = xmmword_199192F40;
  v7[109] = xmmword_199197C90;
  v7[110] = xmmword_19919AD70;
  v7[111] = xmmword_19919AD80;
  v7[112] = xmmword_19919AD90;
  v7[113] = xmmword_19919ADA0;
  v7[114] = xmmword_19919ADB0;
  v7[115] = xmmword_19919ADC0;
  v7[116] = xmmword_199195D30;
  v7[117] = xmmword_19919ADD0;
  v7[118] = xmmword_199197CF0;
  v7[119] = xmmword_199197D00;
  v7[120] = xmmword_199197D10;
  v7[121] = xmmword_199197D20;
  v7[122] = xmmword_199197D30;
  v7[123] = xmmword_19919ADE0;
  v7[124] = xmmword_199197D50;
  v7[125] = xmmword_199197D60;
  v7[126] = xmmword_19919ADF0;
  v7[127] = xmmword_19919AE00;
  v7[128] = xmmword_19919AE10;
  v7[129] = xmmword_19919AE20;
  v7[130] = xmmword_199197DA0;
  v7[131] = xmmword_199197DB0;
  v7[132] = xmmword_199199CA0;
  v7[133] = xmmword_19919AE30;
  v7[134] = xmmword_199197DD0;
  v7[135] = xmmword_199197DE0;
  v7[136] = xmmword_199195D60;
  v7[137] = xmmword_199197DF0;
  v7[138] = xmmword_199193090;
  v7[139] = xmmword_199197E00;
  v7[140] = xmmword_19919B8F0;
  v7[141] = xmmword_199195720;
  v7[142] = xmmword_19919B900;
  v7[143] = xmmword_199195D70;
  v7[144] = xmmword_19919B910;
  v7[145] = xmmword_199195760;
  v7[146] = xmmword_199195770;
  v7[147] = xmmword_199193130;
  v7[148] = xmmword_199193140;
  v7[149] = xmmword_199193150;
  v7[150] = xmmword_19919B920;
  v7[151] = xmmword_199193190;
  v7[152] = xmmword_19919B930;
  v7[153] = xmmword_1991957B0;
  v7[154] = xmmword_1991957C0;
  v7[155] = xmmword_19919B940;
  v7[156] = xmmword_19919B530;
  v7[157] = xmmword_199197ED0;
  v7[158] = xmmword_199197180;
  v7[159] = xmmword_199197190;
  v7[160] = xmmword_19919A8E0;
  v7[161] = xmmword_19919A8F0;
  v7[162] = xmmword_199197EE0;
  v7[163] = xmmword_19919B540;
  v7[164] = xmmword_1991982D0;
  v7[165] = xmmword_19919B550;
  v7[166] = xmmword_19919B560;
  v7[167] = xmmword_19919B570;
  v7[168] = xmmword_19919B580;
  v7[169] = xmmword_19919B590;
  v7[170] = xmmword_19919B5A0;
  v7[171] = xmmword_19919B950;
  v7[172] = xmmword_19919B960;
  v7[173] = xmmword_19919B970;
  v7[174] = xmmword_19919B980;
  v7[175] = xmmword_19919B990;
  v7[176] = xmmword_19919B9A0;
  v7[177] = xmmword_19919A2B0;
  v7[178] = xmmword_19919B9B0;
  v7[179] = xmmword_199199D30;
  v7[180] = xmmword_199199D40;
  v7[181] = xmmword_199199D50;
  v7[182] = xmmword_19919B9C0;
  v7[183] = xmmword_19919B9D0;
  v7[184] = xmmword_19919B9E0;
  v7[185] = xmmword_19919B9F0;
  v7[186] = xmmword_19919BA00;
  v7[187] = xmmword_19919BA10;
  v7[188] = xmmword_199199DD0;
  v7[189] = xmmword_19919BA20;
  v7[190] = xmmword_19919BA30;
  v7[191] = xmmword_19919BA40;
  v7[192] = xmmword_19919BA50;
  v7[193] = xmmword_19919BA60;
  v7[194] = xmmword_19919BA70;
  v7[195] = xmmword_19919BA80;
  v7[196] = xmmword_19919BA90;
  v7[197] = xmmword_19919BAA0;
  v7[198] = xmmword_19919BAB0;
  v7[199] = xmmword_19919BAC0;
  v7[200] = xmmword_199197F10;
  v7[201] = xmmword_199197F20;
  v7[202] = xmmword_199197F30;
  v7[203] = xmmword_199197F40;
  v7[204] = xmmword_199197F50;
  v7[205] = xmmword_199197F60;
  v7[206] = xmmword_1991935F0;
  v7[207] = xmmword_199197F70;
  v7[208] = xmmword_199197F80;
  v7[209] = xmmword_199197F90;
  v7[210] = xmmword_199197FA0;
  v7[211] = xmmword_199199F30;
  v7[212] = xmmword_199195A50;
  v7[213] = xmmword_199195A60;
  v7[214] = xmmword_1991936B0;
  v7[215] = xmmword_199195A70;
  v7[216] = xmmword_199195A80;
  v7[217] = xmmword_199193700;
  v7[218] = xmmword_199195A90;
  v7[219] = xmmword_199195AA0;
  v7[220] = xmmword_199193740;
  v7[221] = xmmword_199193750;
  v7[222] = xmmword_199193760;
  v7[223] = xmmword_199193770;
  v7[224] = xmmword_199193780;
  v7[225] = xmmword_199193790;
  v7[226] = xmmword_1991937A0;
  v7[227] = xmmword_199193810;
  v7[228] = xmmword_199193820;
  v7[229] = xmmword_199193830;
  v7[230] = xmmword_199193840;
  v7[231] = xmmword_199193850;
  v7[232] = xmmword_199193860;
  v7[233] = xmmword_199193870;
  v7[234] = xmmword_199193880;
  v7[235] = xmmword_199195AB0;
  v7[236] = xmmword_199195AC0;
  v7[237] = xmmword_199195AD0;
  v7[238] = xmmword_199195AE0;
  v7[239] = xmmword_199195AF0;
  v7[240] = xmmword_199195B00;
  v7[241] = xmmword_199195B10;
  v7[242] = xmmword_199195B20;
  v7[243] = xmmword_199195B30;
  v7[244] = xmmword_199195B40;
  v7[245] = xmmword_199193930;
  v7[246] = xmmword_199193940;
  v7[247] = xmmword_199195B50;
  v7[248] = xmmword_199195B60;
  v7[249] = xmmword_199195B70;
  v7[250] = xmmword_199195B80;
  v7[251] = xmmword_199195B90;
  v7[252] = xmmword_199195BA0;
  v7[253] = xmmword_199195BB0;
  v7[254] = xmmword_199195BC0;
  v7[255] = xmmword_199195BD0;
  v7[256] = xmmword_199193B30;
  v7[257] = xmmword_199193B40;
  v7[258] = xmmword_199193B50;
  v7[259] = xmmword_199193B60;
  v8 = 0x323AF00031350;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, (uint64_t *)&v10, 2uLL, v9, 0x90uLL, v5, (uint64_t *)v7, 0x209uLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass56(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  _OWORD v8[327];
  uint64_t v9;
  int v10[117];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v13 = *MEMORY[0x1E0C80C00];
  v7 = 95;
  v11 = xmmword_19919AF40;
  v12 = 0x7A00000061;
  memcpy(v10, &unk_199187D24, sizeof(v10));
  v8[0] = xmmword_199195000;
  v8[1] = xmmword_199195010;
  v8[2] = xmmword_19919AF50;
  v8[3] = xmmword_19919B8C0;
  v8[4] = xmmword_19919AF60;
  v8[5] = xmmword_199195050;
  v8[6] = xmmword_19919AF70;
  v8[7] = xmmword_199195C40;
  v8[8] = xmmword_199198320;
  v8[9] = xmmword_19919AF80;
  v8[10] = xmmword_19919AF90;
  v8[11] = xmmword_19919AFA0;
  v8[12] = xmmword_19919AFB0;
  v8[13] = xmmword_19919AFC0;
  v8[14] = xmmword_19919AFD0;
  v8[15] = xmmword_19919AFE0;
  v8[16] = xmmword_1991978D0;
  v8[17] = xmmword_19919AFF0;
  v8[18] = xmmword_19919B000;
  v8[19] = xmmword_19919B010;
  v8[20] = xmmword_199197910;
  v8[21] = xmmword_199197920;
  v8[22] = xmmword_19919B020;
  v8[23] = xmmword_19919B030;
  v8[24] = xmmword_19919B040;
  v8[25] = xmmword_19919B050;
  v8[26] = xmmword_199197950;
  v8[27] = xmmword_199197960;
  v8[28] = xmmword_199197970;
  v8[29] = xmmword_199198410;
  v8[30] = xmmword_19919B060;
  v8[31] = xmmword_19919B070;
  v8[32] = xmmword_199197990;
  v8[33] = xmmword_1991979A0;
  v8[34] = xmmword_1991979B0;
  v8[35] = xmmword_19919B080;
  v8[36] = xmmword_19919B090;
  v8[37] = xmmword_19919B0A0;
  v8[38] = xmmword_1991998F0;
  v8[39] = xmmword_1991979D0;
  v8[40] = xmmword_1991979E0;
  v8[41] = xmmword_19919B0B0;
  v8[42] = xmmword_199198460;
  v8[43] = xmmword_19919B0C0;
  v8[44] = xmmword_19919B0D0;
  v8[45] = xmmword_19919B0E0;
  v8[46] = xmmword_199197A10;
  v8[47] = xmmword_199197A20;
  v8[48] = xmmword_199197A30;
  v8[49] = xmmword_19919B0F0;
  v8[50] = xmmword_19919B100;
  v8[51] = xmmword_19919B110;
  v8[52] = xmmword_199197A50;
  v8[53] = xmmword_19919B120;
  v8[54] = xmmword_19919B130;
  v8[55] = xmmword_199199970;
  v8[56] = xmmword_19919B140;
  v8[57] = xmmword_19919B150;
  v8[58] = xmmword_199192AB0;
  v8[59] = xmmword_199192AC0;
  v8[60] = xmmword_199192AD0;
  v8[61] = xmmword_199192AE0;
  v8[62] = xmmword_199192AF0;
  v8[63] = xmmword_199192B00;
  v8[64] = xmmword_199192B10;
  v8[65] = xmmword_199192B20;
  v8[66] = xmmword_19919B160;
  v8[67] = xmmword_19919B170;
  v8[68] = xmmword_1991999F0;
  v8[69] = xmmword_199192B50;
  v8[70] = xmmword_199192B60;
  v8[71] = xmmword_199192B70;
  v8[72] = xmmword_19919B180;
  v8[73] = xmmword_19919B190;
  v8[74] = xmmword_19919B1A0;
  v8[75] = xmmword_199195230;
  v8[76] = xmmword_19919B1B0;
  v8[77] = xmmword_19919B1C0;
  v8[78] = xmmword_19919B1D0;
  v8[79] = xmmword_19919B1E0;
  v8[80] = xmmword_19919B1F0;
  v8[81] = xmmword_19919B200;
  v8[82] = xmmword_19919B210;
  v8[83] = xmmword_199195C50;
  v8[84] = xmmword_19919B220;
  v8[85] = xmmword_199197B80;
  v8[86] = xmmword_199197B90;
  v8[87] = xmmword_199197BA0;
  v8[88] = xmmword_199197BB0;
  v8[89] = xmmword_199197BC0;
  v8[90] = xmmword_199197BD0;
  v8[91] = xmmword_19919B230;
  v8[92] = xmmword_19919B240;
  v8[93] = xmmword_19919B250;
  v8[94] = xmmword_199197BF0;
  v8[95] = xmmword_19919B260;
  v8[96] = xmmword_19919B270;
  v8[97] = xmmword_19919B280;
  v8[98] = xmmword_19919B290;
  v8[99] = xmmword_19919B2A0;
  v8[100] = xmmword_19919B2B0;
  v8[101] = xmmword_19919B2C0;
  v8[102] = xmmword_199192D10;
  v8[103] = xmmword_199192D20;
  v8[104] = xmmword_19919B2D0;
  v8[105] = xmmword_199192D40;
  v8[106] = xmmword_199192D50;
  v8[107] = xmmword_19919B2E0;
  v8[108] = xmmword_199192D70;
  v8[109] = xmmword_19919B2F0;
  v8[110] = xmmword_19919B300;
  v8[111] = xmmword_19919B310;
  v8[112] = xmmword_19919B320;
  v8[113] = xmmword_19919B330;
  v8[114] = xmmword_1991953C0;
  v8[115] = xmmword_19919B340;
  v8[116] = xmmword_19919B350;
  v8[117] = xmmword_199195400;
  v8[118] = xmmword_199195410;
  v8[119] = xmmword_199195420;
  v8[120] = xmmword_199195430;
  v8[121] = xmmword_199195440;
  v8[122] = xmmword_199195450;
  v8[123] = xmmword_199195460;
  v8[124] = xmmword_19919B360;
  v8[125] = xmmword_19919B370;
  v8[126] = xmmword_19919B380;
  v8[127] = xmmword_19919B390;
  v8[128] = xmmword_199195CD0;
  v8[129] = xmmword_19919B3A0;
  v8[130] = xmmword_19919B3B0;
  v8[131] = xmmword_19919B3C0;
  v8[132] = xmmword_1991954E0;
  v8[133] = xmmword_1991954F0;
  v8[134] = xmmword_199195500;
  v8[135] = xmmword_199195510;
  v8[136] = xmmword_199199BB0;
  v8[137] = xmmword_19919B3D0;
  v8[138] = xmmword_199199BD0;
  v8[139] = xmmword_19919BAD0;
  v8[140] = xmmword_19919BAE0;
  v8[141] = xmmword_199195560;
  v8[142] = xmmword_199195570;
  v8[143] = xmmword_199195580;
  v8[144] = xmmword_19919BAF0;
  v8[145] = xmmword_19919BB00;
  v8[146] = xmmword_19919BB10;
  v8[147] = xmmword_19919ADC0;
  v8[148] = xmmword_199195D30;
  v8[149] = xmmword_19919BB20;
  v8[150] = xmmword_19919BB30;
  v8[151] = xmmword_19919BB40;
  v8[152] = xmmword_19919BB50;
  v8[153] = xmmword_19919BB60;
  v8[154] = xmmword_19919BB70;
  v8[155] = xmmword_199192FF0;
  v8[156] = xmmword_19919BB80;
  v8[157] = xmmword_199199C80;
  v8[158] = xmmword_19919BB90;
  v8[159] = xmmword_199197DA0;
  v8[160] = xmmword_199197DB0;
  v8[161] = xmmword_199199CA0;
  v8[162] = xmmword_19919BBA0;
  v8[163] = xmmword_19919BBB0;
  v8[164] = xmmword_199197DD0;
  v8[165] = xmmword_199197DE0;
  v8[166] = xmmword_199195D60;
  v8[167] = xmmword_199199CC0;
  v8[168] = xmmword_199193090;
  v8[169] = xmmword_199197E00;
  v8[170] = xmmword_19919B8F0;
  v8[171] = xmmword_199195720;
  v8[172] = xmmword_19919BBC0;
  v8[173] = xmmword_19919B4E0;
  v8[174] = xmmword_19919BBD0;
  v8[175] = xmmword_19919BBE0;
  v8[176] = xmmword_19919BBF0;
  v8[177] = xmmword_199195760;
  v8[178] = xmmword_199195770;
  v8[179] = xmmword_199193130;
  v8[180] = xmmword_199193140;
  v8[181] = xmmword_199193150;
  v8[182] = xmmword_19919B920;
  v8[183] = xmmword_199193190;
  v8[184] = xmmword_19919B930;
  v8[185] = xmmword_19919BC00;
  v8[186] = xmmword_1991957C0;
  v8[187] = xmmword_19919B940;
  v8[188] = xmmword_1991931E0;
  v8[189] = xmmword_1991931F0;
  v8[190] = xmmword_1991957E0;
  v8[191] = xmmword_199193210;
  v8[192] = xmmword_199193220;
  v8[193] = xmmword_199193230;
  v8[194] = xmmword_199193240;
  v8[195] = xmmword_199193250;
  v8[196] = xmmword_199193260;
  v8[197] = xmmword_199193270;
  v8[198] = xmmword_199193280;
  v8[199] = xmmword_1991957F0;
  v8[200] = xmmword_199195800;
  v8[201] = xmmword_199195810;
  v8[202] = xmmword_199195820;
  v8[203] = xmmword_199199D00;
  v8[204] = xmmword_1991932E0;
  v8[205] = xmmword_1991932F0;
  v8[206] = xmmword_19919BC10;
  v8[207] = xmmword_19919B970;
  v8[208] = xmmword_19919BC20;
  v8[209] = xmmword_19919B990;
  v8[210] = xmmword_19919B9A0;
  v8[211] = xmmword_19919A2B0;
  v8[212] = xmmword_19919BC30;
  v8[213] = xmmword_199199D20;
  v8[214] = xmmword_19919BC40;
  v8[215] = xmmword_19919BC50;
  v8[216] = xmmword_199199D50;
  v8[217] = xmmword_19919BC60;
  v8[218] = xmmword_19919BC70;
  v8[219] = xmmword_1991933F0;
  v8[220] = xmmword_19919BC80;
  v8[221] = xmmword_19919BC90;
  v8[222] = xmmword_19919BCA0;
  v8[223] = xmmword_19919BCB0;
  v8[224] = xmmword_199199DC0;
  v8[225] = xmmword_199199DD0;
  v8[226] = xmmword_19919BCC0;
  v8[227] = xmmword_19919BCD0;
  v8[228] = xmmword_19919BA30;
  v8[229] = xmmword_19919BA40;
  v8[230] = xmmword_19919BA50;
  v8[231] = xmmword_19919BCE0;
  v8[232] = xmmword_19919BCF0;
  v8[233] = xmmword_199198840;
  v8[234] = xmmword_19919BD00;
  v8[235] = xmmword_19919BD10;
  v8[236] = xmmword_1991934E0;
  v8[237] = xmmword_19919BD20;
  v8[238] = xmmword_19919BD30;
  v8[239] = xmmword_19919BD40;
  v8[240] = xmmword_199193520;
  v8[241] = xmmword_19919BD50;
  v8[242] = xmmword_19919BD60;
  v8[243] = xmmword_199197F10;
  v8[244] = xmmword_19919BD70;
  v8[245] = xmmword_19919BD80;
  v8[246] = xmmword_19919BD90;
  v8[247] = xmmword_19919BDA0;
  v8[248] = xmmword_19919BDB0;
  v8[249] = xmmword_19919BDC0;
  v8[250] = xmmword_199199ED0;
  v8[251] = xmmword_19919BDD0;
  v8[252] = xmmword_19919BDE0;
  v8[253] = xmmword_19919BDF0;
  v8[254] = xmmword_19919BE00;
  v8[255] = xmmword_19919BE10;
  v8[256] = xmmword_19919BE20;
  v8[257] = xmmword_19919BE30;
  v8[258] = xmmword_19919BE40;
  v8[259] = xmmword_19919BE50;
  v8[260] = xmmword_199199F10;
  v8[261] = xmmword_19919BE60;
  v8[262] = xmmword_19919AE50;
  v8[263] = xmmword_199197FB0;
  v8[264] = xmmword_19919BE70;
  v8[265] = xmmword_199197FD0;
  v8[266] = xmmword_19919BE80;
  v8[267] = xmmword_19919BE90;
  v8[268] = xmmword_19919BEA0;
  v8[269] = xmmword_19919BEB0;
  v8[270] = xmmword_19919BEC0;
  v8[271] = xmmword_19919AE70;
  v8[272] = xmmword_19919BED0;
  v8[273] = xmmword_19919BEE0;
  v8[274] = xmmword_19919BEF0;
  v8[275] = xmmword_199193740;
  v8[276] = xmmword_199193750;
  v8[277] = xmmword_199193760;
  v8[278] = xmmword_199193770;
  v8[279] = xmmword_199193780;
  v8[280] = xmmword_199193790;
  v8[281] = xmmword_1991937A0;
  v8[282] = xmmword_199198980;
  v8[283] = xmmword_199198990;
  v8[284] = xmmword_1991989A0;
  v8[285] = xmmword_1991989B0;
  v8[286] = xmmword_19919BF00;
  v8[287] = xmmword_199195DD0;
  v8[288] = xmmword_199195DE0;
  v8[289] = xmmword_199195DF0;
  v8[290] = xmmword_199195E00;
  v8[291] = xmmword_199195E10;
  v8[292] = xmmword_199195E20;
  v8[293] = xmmword_199195E30;
  v8[294] = xmmword_199195E40;
  v8[295] = xmmword_199195E50;
  v8[296] = xmmword_199195E60;
  v8[297] = xmmword_199195E70;
  v8[298] = xmmword_199195E80;
  v8[299] = xmmword_199195E90;
  v8[300] = xmmword_19919BF10;
  v8[301] = xmmword_1991989D0;
  v8[302] = xmmword_19919BF20;
  v8[303] = xmmword_199199F50;
  v8[304] = xmmword_1991989F0;
  v8[305] = xmmword_199198A00;
  v8[306] = xmmword_199199F60;
  v8[307] = xmmword_19919BF30;
  v8[308] = xmmword_199193910;
  v8[309] = xmmword_199193920;
  v8[310] = xmmword_199193930;
  v8[311] = xmmword_199193940;
  v8[312] = xmmword_19919BF40;
  v8[313] = xmmword_19919BF50;
  v8[314] = xmmword_199195B60;
  v8[315] = xmmword_199195B70;
  v8[316] = xmmword_199195B80;
  v8[317] = xmmword_199195B90;
  v8[318] = xmmword_199195BA0;
  v8[319] = xmmword_199195BB0;
  v8[320] = xmmword_199195BC0;
  v8[321] = xmmword_199195BD0;
  v8[322] = xmmword_19919BF60;
  v8[323] = xmmword_19919AF00;
  v8[324] = xmmword_19919AF10;
  v8[325] = xmmword_19919AF20;
  v8[326] = xmmword_19919AF30;
  v9 = 0xE01EF000E0100;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, &v7, 1uLL, (uint64_t *)&v11, 3uLL, v10, 0x75uLL, v5, (uint64_t *)v8, 0x28FuLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass57@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[5];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_199187EF8;
  v9 = 0xFFA00000FEFFLL;
  v6[0] = xmmword_19919BF70;
  v6[1] = xmmword_19919BF80;
  v6[2] = xmmword_19919BF90;
  v6[3] = xmmword_19919BFA0;
  v6[4] = xmmword_1991980A0;
  v7 = 0xE0FFF000E0000;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 6uLL, v4, (uint64_t *)v6, 0xBuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass58@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[115];
  uint64_t v7;
  int __dst[132];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_199187F10, sizeof(__dst));
  v6[0] = xmmword_199198310;
  v6[1] = xmmword_199198320;
  v6[2] = xmmword_199198330;
  v6[3] = xmmword_199198340;
  v6[4] = xmmword_199198350;
  v6[5] = xmmword_199198360;
  v6[6] = xmmword_199198370;
  v6[7] = xmmword_199198380;
  v6[8] = xmmword_199198390;
  v6[9] = xmmword_1991983A0;
  v6[10] = xmmword_199198A50;
  v6[11] = xmmword_199198A60;
  v6[12] = xmmword_199198A70;
  v6[13] = xmmword_199198A80;
  v6[14] = xmmword_199198A90;
  v6[15] = xmmword_199198420;
  v6[16] = xmmword_199198AA0;
  v6[17] = xmmword_199198AB0;
  v6[18] = xmmword_19919BFB0;
  v6[19] = xmmword_19919BFC0;
  v6[20] = xmmword_19919BFD0;
  v6[21] = xmmword_19919B130;
  v6[22] = xmmword_19919BFE0;
  v6[23] = xmmword_19919BFF0;
  v6[24] = xmmword_199198B00;
  v6[25] = xmmword_199198B10;
  v6[26] = xmmword_199198B20;
  v6[27] = xmmword_199198B30;
  v6[28] = xmmword_199198B40;
  v6[29] = xmmword_199198B50;
  v6[30] = xmmword_199198B60;
  v6[31] = xmmword_199198B70;
  v6[32] = xmmword_199198B80;
  v6[33] = xmmword_199198B90;
  v6[34] = xmmword_199198BA0;
  v6[35] = xmmword_199198BB0;
  v6[36] = xmmword_199198BC0;
  v6[37] = xmmword_199198BD0;
  v6[38] = xmmword_199198BE0;
  v6[39] = xmmword_199198BF0;
  v6[40] = xmmword_199198C00;
  v6[41] = xmmword_199198C10;
  v6[42] = xmmword_199198C20;
  v6[43] = xmmword_199198C30;
  v6[44] = xmmword_19919A3C0;
  v6[45] = xmmword_19919C000;
  v6[46] = xmmword_19919A3E0;
  v6[47] = xmmword_19919A3F0;
  v6[48] = xmmword_19919A400;
  v6[49] = xmmword_19919A410;
  v6[50] = xmmword_19919C010;
  v6[51] = xmmword_19919C020;
  v6[52] = xmmword_19919C030;
  v6[53] = xmmword_199198660;
  v6[54] = xmmword_199198670;
  v6[55] = xmmword_199198680;
  v6[56] = xmmword_199198690;
  v6[57] = xmmword_19919C040;
  v6[58] = xmmword_19919C050;
  v6[59] = xmmword_19919C060;
  v6[60] = xmmword_19919C070;
  v6[61] = xmmword_19919C080;
  v6[62] = xmmword_19919A4D0;
  v6[63] = xmmword_199198700;
  v6[64] = xmmword_19919A4E0;
  v6[65] = xmmword_19919A510;
  v6[66] = xmmword_19919C090;
  v6[67] = xmmword_199198750;
  v6[68] = xmmword_199198760;
  v6[69] = xmmword_199198770;
  v6[70] = xmmword_199198780;
  v6[71] = xmmword_199198790;
  v6[72] = xmmword_199198D90;
  v6[73] = xmmword_199198DA0;
  v6[74] = xmmword_199198DB0;
  v6[75] = xmmword_199198DC0;
  v6[76] = xmmword_199198DD0;
  v6[77] = xmmword_199198DE0;
  v6[78] = xmmword_199198DF0;
  v6[79] = xmmword_199198E00;
  v6[80] = xmmword_199198840;
  v6[81] = xmmword_199198E10;
  v6[82] = xmmword_199198E20;
  v6[83] = xmmword_199198E30;
  v6[84] = xmmword_199198E40;
  v6[85] = xmmword_199198E50;
  v6[86] = xmmword_199198E60;
  v6[87] = xmmword_199198E70;
  v6[88] = xmmword_199198E80;
  v6[89] = xmmword_199198E90;
  v6[90] = xmmword_199198EA0;
  v6[91] = xmmword_199198EB0;
  v6[92] = xmmword_199198EC0;
  v6[93] = xmmword_199198ED0;
  v6[94] = xmmword_199198EE0;
  v6[95] = xmmword_199198EF0;
  v6[96] = xmmword_199198F00;
  v6[97] = xmmword_199198F10;
  v6[98] = xmmword_199198F20;
  v6[99] = xmmword_199198F30;
  v6[100] = xmmword_199198F40;
  v6[101] = xmmword_199198950;
  v6[102] = xmmword_199198F50;
  v6[103] = xmmword_199198980;
  v6[104] = xmmword_199198F60;
  v6[105] = xmmword_19919C0A0;
  v6[106] = xmmword_1991989B0;
  v6[107] = xmmword_1991989C0;
  v6[108] = xmmword_1991989D0;
  v6[109] = xmmword_1991989E0;
  v6[110] = xmmword_1991989F0;
  v6[111] = xmmword_199198A00;
  v6[112] = xmmword_199198A10;
  v6[113] = xmmword_199198A20;
  v6[114] = xmmword_19919C0B0;
  v7 = 0xE01EF000E0100;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, __dst, 0x84uLL, v4, (uint64_t *)v6, 0xE7uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass59(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[365];
  int v8[144];
  uint64_t v9[2];

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x7E00000020;
  memcpy(v8, &unk_199188120, sizeof(v8));
  v7[0] = xmmword_19919C0C0;
  v7[1] = xmmword_19919C0D0;
  v7[2] = xmmword_1991927B0;
  v7[3] = xmmword_19919C0E0;
  v7[4] = xmmword_19919C0F0;
  v7[5] = xmmword_19919C100;
  v7[6] = xmmword_19919C110;
  v7[7] = xmmword_19919C120;
  v7[8] = xmmword_19919C130;
  v7[9] = xmmword_19919C140;
  v7[10] = xmmword_19919C150;
  v7[11] = xmmword_19919C160;
  v7[12] = xmmword_19919C170;
  v7[13] = xmmword_199192830;
  v7[14] = xmmword_19919C180;
  v7[15] = xmmword_19919C190;
  v7[16] = xmmword_19919C1A0;
  v7[17] = xmmword_19919C1B0;
  v7[18] = xmmword_199192850;
  v7[19] = xmmword_199192860;
  v7[20] = xmmword_19919C1C0;
  v7[21] = xmmword_199199880;
  v7[22] = xmmword_199197930;
  v7[23] = xmmword_19919C1D0;
  v7[24] = xmmword_199197950;
  v7[25] = xmmword_199197960;
  v7[26] = xmmword_199197970;
  v7[27] = xmmword_19919C1E0;
  v7[28] = xmmword_19919C1F0;
  v7[29] = xmmword_199197990;
  v7[30] = xmmword_1991979A0;
  v7[31] = xmmword_1991979B0;
  v7[32] = xmmword_19919C200;
  v7[33] = xmmword_19919C210;
  v7[34] = xmmword_19919C220;
  v7[35] = xmmword_1991979D0;
  v7[36] = xmmword_1991979E0;
  v7[37] = xmmword_19919C230;
  v7[38] = xmmword_19919C240;
  v7[39] = xmmword_19919C250;
  v7[40] = xmmword_1991929F0;
  v7[41] = xmmword_199192A00;
  v7[42] = xmmword_199192A10;
  v7[43] = xmmword_199192A20;
  v7[44] = xmmword_199199060;
  v7[45] = xmmword_19919C260;
  v7[46] = xmmword_19919C270;
  v7[47] = xmmword_199197A50;
  v7[48] = xmmword_19919C280;
  v7[49] = xmmword_199195190;
  v7[50] = xmmword_19919C290;
  v7[51] = xmmword_19919C2A0;
  v7[52] = xmmword_1991951B0;
  v7[53] = xmmword_19919C2B0;
  v7[54] = xmmword_19919C2C0;
  v7[55] = xmmword_19919C2D0;
  v7[56] = xmmword_199197A80;
  v7[57] = xmmword_199192B00;
  v7[58] = xmmword_19919C2E0;
  v7[59] = xmmword_19919C2F0;
  v7[60] = xmmword_1991990C0;
  v7[61] = xmmword_19919C300;
  v7[62] = xmmword_19919C310;
  v7[63] = xmmword_19919C320;
  v7[64] = xmmword_199197AD0;
  v7[65] = xmmword_19919C330;
  v7[66] = xmmword_19919C340;
  v7[67] = xmmword_19919C350;
  v7[68] = xmmword_19919C360;
  v7[69] = xmmword_19919C370;
  v7[70] = xmmword_199195230;
  v7[71] = xmmword_199195240;
  v7[72] = xmmword_19919C380;
  v7[73] = xmmword_19919C390;
  v7[74] = xmmword_19919C3A0;
  v7[75] = xmmword_199197B30;
  v7[76] = xmmword_19919C3B0;
  v7[77] = xmmword_19919C3C0;
  v7[78] = xmmword_19919C3D0;
  v7[79] = xmmword_19919C3E0;
  v7[80] = xmmword_19919C3F0;
  v7[81] = xmmword_19919C400;
  v7[82] = xmmword_19919C410;
  v7[83] = xmmword_199192C20;
  v7[84] = xmmword_199192C30;
  v7[85] = xmmword_199192C40;
  v7[86] = xmmword_199192C50;
  v7[87] = xmmword_199192C60;
  v7[88] = xmmword_199192C70;
  v7[89] = xmmword_19919C420;
  v7[90] = xmmword_199192C90;
  v7[91] = xmmword_199192CA0;
  v7[92] = xmmword_19919C430;
  v7[93] = xmmword_19919C440;
  v7[94] = xmmword_199197C20;
  v7[95] = xmmword_199197C30;
  v7[96] = xmmword_19919C450;
  v7[97] = xmmword_19919C460;
  v7[98] = xmmword_19919C470;
  v7[99] = xmmword_19919C480;
  v7[100] = xmmword_199195330;
  v7[101] = xmmword_199195340;
  v7[102] = xmmword_19919C490;
  v7[103] = xmmword_19919C4A0;
  v7[104] = xmmword_19919C4B0;
  v7[105] = xmmword_199195360;
  v7[106] = xmmword_19919C4C0;
  v7[107] = xmmword_19919C4D0;
  v7[108] = xmmword_199199160;
  v7[109] = xmmword_199196EC0;
  v7[110] = xmmword_19919C4E0;
  v7[111] = xmmword_19919C4F0;
  v7[112] = xmmword_19919C500;
  v7[113] = xmmword_19919C510;
  v7[114] = xmmword_19919C520;
  v7[115] = xmmword_19919C530;
  v7[116] = xmmword_19919C540;
  v7[117] = xmmword_199192DC0;
  v7[118] = xmmword_19919C550;
  v7[119] = xmmword_19919C560;
  v7[120] = xmmword_1991953F0;
  v7[121] = xmmword_199195400;
  v7[122] = xmmword_199195410;
  v7[123] = xmmword_199195420;
  v7[124] = xmmword_19919C570;
  v7[125] = xmmword_19919C580;
  v7[126] = xmmword_19919C590;
  v7[127] = xmmword_19919C5A0;
  v7[128] = xmmword_19919C5B0;
  v7[129] = xmmword_19919C5C0;
  v7[130] = xmmword_19919C5D0;
  v7[131] = xmmword_199192E80;
  v7[132] = xmmword_199192E90;
  v7[133] = xmmword_19919C5E0;
  v7[134] = xmmword_19919C5F0;
  v7[135] = xmmword_19919C600;
  v7[136] = xmmword_1991954E0;
  v7[137] = xmmword_1991954F0;
  v7[138] = xmmword_199195500;
  v7[139] = xmmword_199195510;
  v7[140] = xmmword_19919C610;
  v7[141] = xmmword_1991967A0;
  v7[142] = xmmword_19919C620;
  v7[143] = xmmword_19919C630;
  v7[144] = xmmword_199192F40;
  v7[145] = xmmword_199192F50;
  v7[146] = xmmword_199192F60;
  v7[147] = xmmword_19919C640;
  v7[148] = xmmword_19919C650;
  v7[149] = xmmword_19919C660;
  v7[150] = xmmword_199195D30;
  v7[151] = xmmword_19919ADD0;
  v7[152] = xmmword_19919C670;
  v7[153] = xmmword_19919C680;
  v7[154] = xmmword_19919C690;
  v7[155] = xmmword_19919C6A0;
  v7[156] = xmmword_19919C6B0;
  v7[157] = xmmword_19919C6C0;
  v7[158] = xmmword_19919C6D0;
  v7[159] = xmmword_19919C6E0;
  v7[160] = xmmword_19919C6F0;
  v7[161] = xmmword_19919C700;
  v7[162] = xmmword_19919C710;
  v7[163] = xmmword_199197D60;
  v7[164] = xmmword_19919C720;
  v7[165] = xmmword_19919C730;
  v7[166] = xmmword_19919C740;
  v7[167] = xmmword_19919C750;
  v7[168] = xmmword_199197DA0;
  v7[169] = xmmword_199197DB0;
  v7[170] = xmmword_19919C760;
  v7[171] = xmmword_19919C770;
  v7[172] = xmmword_19919BBB0;
  v7[173] = xmmword_199197DD0;
  v7[174] = xmmword_199197DE0;
  v7[175] = xmmword_199195D60;
  v7[176] = xmmword_19919C780;
  v7[177] = xmmword_199195700;
  v7[178] = xmmword_19919C790;
  v7[179] = xmmword_19919C7A0;
  v7[180] = xmmword_199196130;
  v7[181] = xmmword_1991930D0;
  v7[182] = xmmword_1991930E0;
  v7[183] = xmmword_19919C7B0;
  v7[184] = xmmword_199195760;
  v7[185] = xmmword_199195770;
  v7[186] = xmmword_19919C7C0;
  v7[187] = xmmword_19919C7D0;
  v7[188] = xmmword_199197E60;
  v7[189] = xmmword_199197E70;
  v7[190] = xmmword_199197E80;
  v7[191] = xmmword_19919C7E0;
  v7[192] = xmmword_19919C7F0;
  v7[193] = xmmword_19919C800;
  v7[194] = xmmword_19919C810;
  v7[195] = xmmword_19919C820;
  v7[196] = xmmword_1991957B0;
  v7[197] = xmmword_19919C830;
  v7[198] = xmmword_19919B520;
  v7[199] = xmmword_19919B530;
  v7[200] = xmmword_199197ED0;
  v7[201] = xmmword_19919C840;
  v7[202] = xmmword_199197190;
  v7[203] = xmmword_19919A8E0;
  v7[204] = xmmword_19919A8F0;
  v7[205] = xmmword_199197EE0;
  v7[206] = xmmword_19919B540;
  v7[207] = xmmword_1991982D0;
  v7[208] = xmmword_19919B550;
  v7[209] = xmmword_19919B560;
  v7[210] = xmmword_19919C850;
  v7[211] = xmmword_19919B580;
  v7[212] = xmmword_19919C860;
  v7[213] = xmmword_19919C870;
  v7[214] = xmmword_19919C880;
  v7[215] = xmmword_1991932F0;
  v7[216] = xmmword_19919C890;
  v7[217] = xmmword_19919C8A0;
  v7[218] = xmmword_19919C8B0;
  v7[219] = xmmword_19919C8C0;
  v7[220] = xmmword_19919C8D0;
  v7[221] = xmmword_19919C8E0;
  v7[222] = xmmword_19919A2B0;
  v7[223] = xmmword_19919C8F0;
  v7[224] = xmmword_19919C900;
  v7[225] = xmmword_19919C910;
  v7[226] = xmmword_19919C920;
  v7[227] = xmmword_19919C930;
  v7[228] = xmmword_1991933C0;
  v7[229] = xmmword_19919C940;
  v7[230] = xmmword_19919C950;
  v7[231] = xmmword_19919C960;
  v7[232] = xmmword_1991964D0;
  v7[233] = xmmword_19919B650;
  v7[234] = xmmword_19919C970;
  v7[235] = xmmword_19919C980;
  v7[236] = xmmword_19919C990;
  v7[237] = xmmword_19919C9A0;
  v7[238] = xmmword_19919C9B0;
  v7[239] = xmmword_19919C9C0;
  v7[240] = xmmword_19919C9D0;
  v7[241] = xmmword_199193430;
  v7[242] = xmmword_199193440;
  v7[243] = xmmword_19919C9E0;
  v7[244] = xmmword_19919C9F0;
  v7[245] = xmmword_19919BA30;
  v7[246] = xmmword_19919BA40;
  v7[247] = xmmword_19919BA50;
  v7[248] = xmmword_19919CA00;
  v7[249] = xmmword_19919BCF0;
  v7[250] = xmmword_19919CA10;
  v7[251] = xmmword_19919CA20;
  v7[252] = xmmword_19919CA30;
  v7[253] = xmmword_19919CA40;
  v7[254] = xmmword_19919CA50;
  v7[255] = xmmword_19919CA60;
  v7[256] = xmmword_19919CA70;
  v7[257] = xmmword_19919CA80;
  v7[258] = xmmword_199193500;
  v7[259] = xmmword_19919CA90;
  v7[260] = xmmword_19919CAA0;
  v7[261] = xmmword_19919CAB0;
  v7[262] = xmmword_19919CAC0;
  v7[263] = xmmword_199193540;
  v7[264] = xmmword_199193550;
  v7[265] = xmmword_19919CAD0;
  v7[266] = xmmword_19919CAE0;
  v7[267] = xmmword_19919CAF0;
  v7[268] = xmmword_19919CB00;
  v7[269] = xmmword_19919CB10;
  v7[270] = xmmword_19919CB20;
  v7[271] = xmmword_19919CB30;
  v7[272] = xmmword_19919CB40;
  v7[273] = xmmword_19919CB50;
  v7[274] = xmmword_19919CB60;
  v7[275] = xmmword_19919CB70;
  v7[276] = xmmword_19919CB80;
  v7[277] = xmmword_199195A10;
  v7[278] = xmmword_19919BE20;
  v7[279] = xmmword_19919BE30;
  v7[280] = xmmword_19919CB90;
  v7[281] = xmmword_19919CBA0;
  v7[282] = xmmword_19919CBB0;
  v7[283] = xmmword_19919CBC0;
  v7[284] = xmmword_199193670;
  v7[285] = xmmword_199193680;
  v7[286] = xmmword_199193690;
  v7[287] = xmmword_199197FC0;
  v7[288] = xmmword_199197FD0;
  v7[289] = xmmword_19919BE80;
  v7[290] = xmmword_19919CBD0;
  v7[291] = xmmword_199197FF0;
  v7[292] = xmmword_19919CBE0;
  v7[293] = xmmword_19919CBF0;
  v7[294] = xmmword_19919CC00;
  v7[295] = xmmword_19919CC10;
  v7[296] = xmmword_19919CC20;
  v7[297] = xmmword_19919B810;
  v7[298] = xmmword_199198010;
  v7[299] = xmmword_19919A580;
  v7[300] = xmmword_19919AEA0;
  v7[301] = xmmword_19919AEB0;
  v7[302] = xmmword_19919AEC0;
  v7[303] = xmmword_19919AED0;
  v7[304] = xmmword_19919CC30;
  v7[305] = xmmword_1991937D0;
  v7[306] = xmmword_19919CC40;
  v7[307] = xmmword_19919CC50;
  v7[308] = xmmword_19919CC60;
  v7[309] = xmmword_1991937F0;
  v7[310] = xmmword_199193800;
  v7[311] = xmmword_199193810;
  v7[312] = xmmword_199193820;
  v7[313] = xmmword_199193830;
  v7[314] = xmmword_199193840;
  v7[315] = xmmword_199193850;
  v7[316] = xmmword_199193860;
  v7[317] = xmmword_199193870;
  v7[318] = xmmword_199193880;
  v7[319] = xmmword_19919CC70;
  v7[320] = xmmword_19919CC80;
  v7[321] = xmmword_19919CC90;
  v7[322] = xmmword_1991938B0;
  v7[323] = xmmword_199199F60;
  v7[324] = xmmword_19919CCA0;
  v7[325] = xmmword_19919CCB0;
  v7[326] = xmmword_19919CCC0;
  v7[327] = xmmword_19919CCD0;
  v7[328] = xmmword_199198040;
  v7[329] = xmmword_199198050;
  v7[330] = xmmword_19919CCE0;
  v7[331] = xmmword_19919CCF0;
  v7[332] = xmmword_19919CD00;
  v7[333] = xmmword_19919CD10;
  v7[334] = xmmword_199195B60;
  v7[335] = xmmword_199195B70;
  v7[336] = xmmword_199195B80;
  v7[337] = xmmword_199195B90;
  v7[338] = xmmword_199195BA0;
  v7[339] = xmmword_199195BB0;
  v7[340] = xmmword_199195BC0;
  v7[341] = xmmword_199195BD0;
  v7[342] = xmmword_19919CD20;
  v7[343] = xmmword_199197810;
  v7[344] = xmmword_199197820;
  v7[345] = xmmword_19919CD30;
  v7[346] = xmmword_199197840;
  v7[347] = xmmword_199197850;
  v7[348] = xmmword_19919CD40;
  v7[349] = xmmword_19919CD50;
  v7[350] = xmmword_19919CD60;
  v7[351] = xmmword_19919CD70;
  v7[352] = xmmword_19919CD80;
  v7[353] = xmmword_19919CD90;
  v7[354] = xmmword_19919CDA0;
  v7[355] = xmmword_19919CDB0;
  v7[356] = xmmword_19919CDC0;
  v7[357] = xmmword_19919CDD0;
  v7[358] = xmmword_19919CDE0;
  v7[359] = xmmword_19919CDF0;
  v7[360] = xmmword_19919BF60;
  v7[361] = xmmword_19919AF00;
  v7[362] = xmmword_19919AF10;
  v7[363] = xmmword_19919AF20;
  v7[364] = xmmword_19919AF30;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, v9, 1uLL, v8, 0x90uLL, v5, (uint64_t *)v7, 0x2DAuLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass60(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[111];
  int __dst[616];
  uint64_t v9[2];

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x5A00000041;
  memcpy(__dst, &unk_199188360, sizeof(__dst));
  v7[0] = xmmword_19919CE00;
  v7[1] = xmmword_19919CE10;
  v7[2] = xmmword_19919CE20;
  v7[3] = xmmword_19919CE30;
  v7[4] = xmmword_199196FC0;
  v7[5] = xmmword_199196FD0;
  v7[6] = xmmword_199196FE0;
  v7[7] = xmmword_199196FF0;
  v7[8] = xmmword_199197000;
  v7[9] = xmmword_199197010;
  v7[10] = xmmword_19919CE40;
  v7[11] = xmmword_19919CE50;
  v7[12] = xmmword_199197030;
  v7[13] = xmmword_19919CE60;
  v7[14] = xmmword_19919CE70;
  v7[15] = xmmword_19919CE80;
  v7[16] = xmmword_19919CE90;
  v7[17] = xmmword_199197050;
  v7[18] = xmmword_19919CEA0;
  v7[19] = xmmword_19919CEB0;
  v7[20] = xmmword_199197070;
  v7[21] = xmmword_199197080;
  v7[22] = xmmword_19919CEC0;
  v7[23] = xmmword_19919CED0;
  v7[24] = xmmword_19919CEE0;
  v7[25] = xmmword_19919CEF0;
  v7[26] = xmmword_19919CF00;
  v7[27] = xmmword_19919CF10;
  v7[28] = xmmword_1991953C0;
  v7[29] = xmmword_19919CF20;
  v7[30] = xmmword_19919CF30;
  v7[31] = xmmword_19919CF40;
  v7[32] = xmmword_19919CF50;
  v7[33] = xmmword_19919A680;
  v7[34] = xmmword_19919A690;
  v7[35] = xmmword_19919CF60;
  v7[36] = xmmword_19919CF70;
  v7[37] = xmmword_19919CF80;
  v7[38] = xmmword_19919CF90;
  v7[39] = xmmword_19919CFA0;
  v7[40] = xmmword_19919CFB0;
  v7[41] = xmmword_19919CFC0;
  v7[42] = xmmword_19919CFD0;
  v7[43] = xmmword_19919CFE0;
  v7[44] = xmmword_19919CFF0;
  v7[45] = xmmword_19919D000;
  v7[46] = xmmword_19919D010;
  v7[47] = xmmword_19919D020;
  v7[48] = xmmword_19919D030;
  v7[49] = xmmword_19919D040;
  v7[50] = xmmword_19919D050;
  v7[51] = xmmword_19919D060;
  v7[52] = xmmword_19919D070;
  v7[53] = xmmword_199197130;
  v7[54] = xmmword_19919D080;
  v7[55] = xmmword_19919D090;
  v7[56] = xmmword_19919D0A0;
  v7[57] = xmmword_19919D0B0;
  v7[58] = xmmword_19919D0C0;
  v7[59] = xmmword_19919D0D0;
  v7[60] = xmmword_199197150;
  v7[61] = xmmword_19919D0E0;
  v7[62] = xmmword_19919D0F0;
  v7[63] = xmmword_19919D100;
  v7[64] = xmmword_19919D110;
  v7[65] = xmmword_19919D120;
  v7[66] = xmmword_199195D60;
  v7[67] = xmmword_19919C780;
  v7[68] = xmmword_199195700;
  v7[69] = xmmword_199195710;
  v7[70] = xmmword_199195720;
  v7[71] = xmmword_19919D130;
  v7[72] = xmmword_19919D140;
  v7[73] = xmmword_1991930D0;
  v7[74] = xmmword_19919D150;
  v7[75] = xmmword_1991930F0;
  v7[76] = xmmword_199193100;
  v7[77] = xmmword_199193110;
  v7[78] = xmmword_19919D160;
  v7[79] = xmmword_199197170;
  v7[80] = xmmword_199197180;
  v7[81] = xmmword_199197190;
  v7[82] = xmmword_19919D170;
  v7[83] = xmmword_19919D180;
  v7[84] = xmmword_19919A760;
  v7[85] = xmmword_19919D190;
  v7[86] = xmmword_19919D1A0;
  v7[87] = xmmword_199193810;
  v7[88] = xmmword_199193820;
  v7[89] = xmmword_199193830;
  v7[90] = xmmword_199193840;
  v7[91] = xmmword_199193850;
  v7[92] = xmmword_199193860;
  v7[93] = xmmword_199193870;
  v7[94] = xmmword_199193880;
  v7[95] = xmmword_19919D1B0;
  v7[96] = xmmword_19919D1C0;
  v7[97] = xmmword_199193980;
  v7[98] = xmmword_199193990;
  v7[99] = xmmword_1991939A0;
  v7[100] = xmmword_1991939B0;
  v7[101] = xmmword_1991939C0;
  v7[102] = xmmword_1991939D0;
  v7[103] = xmmword_1991939E0;
  v7[104] = xmmword_1991939F0;
  v7[105] = xmmword_19919D1D0;
  v7[106] = xmmword_19919D1E0;
  v7[107] = xmmword_19919D1F0;
  v7[108] = xmmword_199193A50;
  v7[109] = xmmword_19919D200;
  v7[110] = xmmword_19919D210;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, v9, 1uLL, __dst, 0x268uLL, v5, (uint64_t *)v7, 0xDEuLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass61@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v6 = 32;
  v10[0] = 0xD00000009;
  v9 = 0x30000000205FLL;
  v7 = xmmword_199195EC0;
  v8 = xmmword_199188D00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, v10, 1uLL, (int *)&v8, 6uLL, v4, (uint64_t *)&v7, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass62@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 1564;
  v7 = xmmword_19919D220;
  v8 = 0x206900002066;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass63@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x200D0000200CLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass64@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[3];
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 45;
  v9[2] = xmmword_199188D38;
  v10[0] = unk_199188D48;
  *(_OWORD *)((char *)v10 + 12) = unk_199188D54;
  v9[0] = xmmword_199188D18;
  v9[1] = unk_199188D28;
  v7 = xmmword_199196A50;
  v8 = 0xFE320000FE31;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, 0, 0, (int *)v9, 0x13uLL, v4, (uint64_t *)&v7, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass65@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  __int128 v7;
  int v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x2700000022;
  v7 = xmmword_199188D64;
  v8 = 65287;
  v6[0] = xmmword_19919D230;
  v6[1] = xmmword_19919D240;
  v6[2] = xmmword_19919D250;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)v9, 2uLL, 0, 0, (int *)&v7, 5uLL, v4, (uint64_t *)v6, 6uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass66@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[33];
  _OWORD v7[9];
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_19919D260;
  v9 = 0x3B0000003ALL;
  v7[6] = xmmword_199188DD8;
  v7[7] = unk_199188DE8;
  v7[8] = xmmword_199188DF8;
  v7[2] = xmmword_199188D98;
  v7[3] = unk_199188DA8;
  v7[4] = xmmword_199188DB8;
  v7[5] = unk_199188DC8;
  v7[0] = xmmword_199188D78;
  v7[1] = unk_199188D88;
  v8 = 113823;
  v6[0] = xmmword_19919D270;
  v6[1] = xmmword_19919D280;
  v6[2] = xmmword_199196310;
  v6[3] = xmmword_19919D290;
  v6[4] = xmmword_19919D2A0;
  v6[5] = xmmword_199196340;
  v6[6] = xmmword_19919D2B0;
  v6[7] = xmmword_19919D2C0;
  v6[8] = xmmword_19919D2D0;
  v6[9] = xmmword_19919D2E0;
  v6[10] = xmmword_19919D2F0;
  v6[11] = xmmword_19919D300;
  v6[12] = xmmword_19919D310;
  v6[13] = xmmword_19919D320;
  v6[14] = xmmword_19919D330;
  v6[15] = xmmword_19919D340;
  v6[16] = xmmword_19919D350;
  v6[17] = xmmword_199196440;
  v6[18] = xmmword_19919D360;
  v6[19] = xmmword_19919D370;
  v6[20] = xmmword_1991964B0;
  v6[21] = xmmword_1991964C0;
  v6[22] = xmmword_19919D380;
  v6[23] = xmmword_19919D390;
  v6[24] = xmmword_19919D3A0;
  v6[25] = xmmword_19919D3B0;
  v6[26] = xmmword_19919D3C0;
  v6[27] = xmmword_19919D3D0;
  v6[28] = xmmword_19919D3E0;
  v6[29] = xmmword_19919D3F0;
  v6[30] = xmmword_19919D400;
  v6[31] = xmmword_19919D410;
  v6[32] = xmmword_19919D420;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v10, 4uLL, &v9, 1uLL, (int *)v7, 0x25uLL, v4, (uint64_t *)v6, 0x42uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass67@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_19919D430;
  v9 = 0x6600000061;
  v6 = xmmword_19919D440;
  v7 = 0xFF460000FF41;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v8, 3uLL, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass68@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919D430;
  v7 = 0x6600000061;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v6, 3uLL, 0, 0, v4, 0, 0, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass69@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[10];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 94180;
  v7[0] = xmmword_19919D450;
  v7[1] = xmmword_19919D460;
  v7[2] = xmmword_19919D470;
  v7[3] = xmmword_19919D480;
  v7[4] = xmmword_199198010;
  v7[5] = xmmword_19919D490;
  v7[6] = xmmword_19919AF00;
  v7[7] = xmmword_19919AF10;
  v7[8] = xmmword_19919AF20;
  v7[9] = xmmword_19919AF30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 0x14uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[58];
  uint64_t v7;
  int __dst[76];
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0x600000005ELL;
  memcpy(__dst, &unk_199188E0C, sizeof(__dst));
  v6[0] = xmmword_19919D4A0;
  v6[1] = xmmword_19919D4B0;
  v6[2] = xmmword_19919A310;
  v6[3] = xmmword_19919D4C0;
  v6[4] = xmmword_19919D4D0;
  v6[5] = xmmword_19919D4E0;
  v6[6] = xmmword_19919D4F0;
  v6[7] = xmmword_19919D500;
  v6[8] = xmmword_19919D510;
  v6[9] = xmmword_19919D520;
  v6[10] = xmmword_19919D530;
  v6[11] = xmmword_19919D540;
  v6[12] = xmmword_19919D550;
  v6[13] = xmmword_19919D560;
  v6[14] = xmmword_19919D570;
  v6[15] = xmmword_19919D580;
  v6[16] = xmmword_19919D590;
  v6[17] = xmmword_19919D5A0;
  v6[18] = xmmword_19919D5B0;
  v6[19] = xmmword_19919D5C0;
  v6[20] = xmmword_19919D5D0;
  v6[21] = xmmword_19919D5E0;
  v6[22] = xmmword_19919D5F0;
  v6[23] = xmmword_19919D600;
  v6[24] = xmmword_19919D610;
  v6[25] = xmmword_19919D620;
  v6[26] = xmmword_199196690;
  v6[27] = xmmword_1991966A0;
  v6[28] = xmmword_19919D630;
  v6[29] = xmmword_19919D640;
  v6[30] = xmmword_19919D650;
  v6[31] = xmmword_19919D660;
  v6[32] = xmmword_19919D670;
  v6[33] = xmmword_19919D680;
  v6[34] = xmmword_19919D690;
  v6[35] = xmmword_19919D6A0;
  v6[36] = xmmword_19919D6B0;
  v6[37] = xmmword_1991982C0;
  v6[38] = xmmword_1991982D0;
  v6[39] = xmmword_19919D6C0;
  v6[40] = xmmword_19919D6D0;
  v6[41] = xmmword_19919D6E0;
  v6[42] = xmmword_19919D6F0;
  v6[43] = xmmword_19919D700;
  v6[44] = xmmword_199198840;
  v6[45] = xmmword_19919D710;
  v6[46] = xmmword_19919D720;
  v6[47] = xmmword_19919D730;
  v6[48] = xmmword_199198950;
  v6[49] = xmmword_19919D740;
  v6[50] = xmmword_19919D750;
  v6[51] = xmmword_199193760;
  v6[52] = xmmword_19919B830;
  v6[53] = xmmword_19919D760;
  v6[54] = xmmword_199198F70;
  v6[55] = xmmword_19919D770;
  v6[56] = xmmword_199198A10;
  v6[57] = xmmword_19919D780;
  v7 = 0x1E94A0001E948;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)v9, 2uLL, 0, 0, __dst, 0x4CuLL, v4, (uint64_t *)v6, 0x75uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass71@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[5];
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[2] = xmmword_199188F5C;
  v8[3] = unk_199188F6C;
  v8[4] = xmmword_199188F7C;
  v9 = 0x16FE300011A98;
  v8[0] = xmmword_199188F3C;
  v8[1] = unk_199188F4C;
  v6[0] = xmmword_19919D790;
  v6[1] = xmmword_19919D7A0;
  v6[2] = xmmword_19919D7B0;
  v6[3] = xmmword_19919D7C0;
  v6[4] = xmmword_19919D7D0;
  v7 = 0x1E9460001E944;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 0x16uLL, v4, (uint64_t *)v6, 0xBuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass72@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[9];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919D7E0;
  v6[1] = xmmword_19919D7F0;
  v6[2] = xmmword_19919D800;
  v6[3] = xmmword_19919D810;
  v6[4] = xmmword_19919D820;
  v6[5] = xmmword_19919D830;
  v6[6] = xmmword_19919D840;
  v6[7] = xmmword_19919D850;
  v6[8] = xmmword_199194FE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 0x12uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass73@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 12783;
  v7 = xmmword_19919D860;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass74@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x2FF300002FF2;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass75@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199192F10;
  v7 = 0x2FD500002F00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass76@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[7];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0xFA1F0000FA11;
  v8 = 64033;
  v6[0] = xmmword_19919D870;
  v6[1] = xmmword_19919D880;
  v6[2] = xmmword_19919D890;
  v6[3] = xmmword_199193B30;
  v6[4] = xmmword_199193B40;
  v6[5] = xmmword_199193B50;
  v6[6] = xmmword_19919AF30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 0xEuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass77@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_199188F94;
  v9 = 917505;
  v6 = xmmword_19919D8A0;
  v7 = 0x232A00002329;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 5uLL, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass78@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[7];
  uint64_t v7;
  _OWORD v8[4];
  uint64_t v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v10[0] = 0x6A00000069;
  v8[2] = xmmword_199188FC8;
  v8[3] = unk_199188FD8;
  v9 = 0x1E0680001DF1ALL;
  v8[0] = xmmword_199188FA8;
  v8[1] = unk_199188FB8;
  v6[0] = xmmword_19919D8B0;
  v6[1] = xmmword_19919D8C0;
  v6[2] = xmmword_19919D8D0;
  v6[3] = xmmword_19919D8E0;
  v6[4] = xmmword_19919D8F0;
  v6[5] = xmmword_19919D900;
  v6[6] = xmmword_19919D910;
  v7 = 0x1E04D0001E04CLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, v10, 1uLL, (int *)v8, 0x12uLL, v4, (uint64_t *)v6, 0xFuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass79@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0xAAB9000019BALL;
  v6[0] = xmmword_19919D920;
  v6[1] = xmmword_19919D930;
  v7 = 0xAABC0000AABBLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 2uLL, v4, (uint64_t *)v6, 5uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass80@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[23];
  uint64_t v7;
  _OWORD v8[6];
  _OWORD v9[2];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = 0x2E00000021;
  v11 = 63;
  v8[4] = xmmword_199189030;
  v8[5] = unk_199189040;
  v9[0] = xmmword_199189050;
  *(_OWORD *)((char *)v9 + 12) = *(__int128 *)((char *)&xmmword_199189050 + 12);
  v8[0] = xmmword_199188FF0;
  v8[1] = unk_199189000;
  v8[2] = xmmword_199189010;
  v8[3] = unk_199189020;
  v6[0] = xmmword_19919D940;
  v6[1] = xmmword_19919D950;
  v6[2] = xmmword_19919D960;
  v6[3] = xmmword_19919D970;
  v6[4] = xmmword_19919D2C0;
  v6[5] = xmmword_19919D980;
  v6[6] = xmmword_19919D990;
  v6[7] = xmmword_19919D2F0;
  v6[8] = xmmword_19919D9A0;
  v6[9] = xmmword_19919D9B0;
  v6[10] = xmmword_19919D9C0;
  v6[11] = xmmword_19919D350;
  v6[12] = xmmword_19919D9D0;
  v6[13] = xmmword_1991961B0;
  v6[14] = xmmword_19919D9E0;
  v6[15] = xmmword_19919D9F0;
  v6[16] = xmmword_19919DA00;
  v6[17] = xmmword_19919DA10;
  v6[18] = xmmword_19919DA20;
  v6[19] = xmmword_19919DA30;
  v6[20] = xmmword_19919DA40;
  v6[21] = xmmword_19919DA50;
  v6[22] = xmmword_19919DA60;
  v7 = 0x16B3800016B37;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)&v10, 3uLL, 0, 0, (int *)v8, 0x1FuLL, v4, (uint64_t *)v6, 0x2FuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass81@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 6159;
  v7 = xmmword_19919DA70;
  v8 = 0xE01EF000E0100;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass82@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0xD00000009;
  v6 = 133;
  v7 = 32;
  v8 = xmmword_19919DA80;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v7, 1uLL, v9, 1uLL, &v6, 1uLL, v4, (uint64_t *)&v8, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass83@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[7];
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 96;
  v10[0] = xmmword_19919DA90;
  v10[1] = xmmword_19919DAA0;
  v9[0] = xmmword_19918906C;
  v9[1] = unk_19918907C;
  v7[0] = xmmword_19919DAB0;
  v7[1] = xmmword_19919DAC0;
  v7[2] = xmmword_19919DAD0;
  v7[3] = xmmword_19919DAE0;
  v7[4] = xmmword_19919DAF0;
  v7[5] = xmmword_19919DB00;
  v7[6] = xmmword_19919DB10;
  v8 = 0xFE460000FE45;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, &v6, 1uLL, (uint64_t *)v10, 4uLL, (int *)v9, 8uLL, v4, (uint64_t *)v7, 0xFuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass84@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1F1FF0001F1E6;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass85@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[40];
  int __dst[68];
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v8 = 0x3900000030;
  v9[0] = 0x2A00000023;
  memcpy(__dst, &unk_19918908C, sizeof(__dst));
  v6[0] = xmmword_19919DB20;
  v6[1] = xmmword_19919DB30;
  v6[2] = xmmword_19919DB40;
  v6[3] = xmmword_19919DB50;
  v6[4] = xmmword_19919DB60;
  v6[5] = xmmword_19919DB70;
  v6[6] = xmmword_19919DB80;
  v6[7] = xmmword_19919DB90;
  v6[8] = xmmword_19919DBA0;
  v6[9] = xmmword_19919DBB0;
  v6[10] = xmmword_19919DBC0;
  v6[11] = xmmword_19919DBD0;
  v6[12] = xmmword_19919DBE0;
  v6[13] = xmmword_19919DBF0;
  v6[14] = xmmword_19919DC00;
  v6[15] = xmmword_19919DC10;
  v6[16] = xmmword_19919DC20;
  v6[17] = xmmword_19919DC30;
  v6[18] = xmmword_19919DC40;
  v6[19] = xmmword_19919DC50;
  v6[20] = xmmword_19919DC60;
  v6[21] = xmmword_19919DC70;
  v6[22] = xmmword_19919DC80;
  v6[23] = xmmword_19919DC90;
  v6[24] = xmmword_19919DCA0;
  v6[25] = xmmword_19919DCB0;
  v6[26] = xmmword_19919DCC0;
  v6[27] = xmmword_19919DCD0;
  v6[28] = xmmword_19919DCE0;
  v6[29] = xmmword_19919DCF0;
  v6[30] = xmmword_19919DD00;
  v6[31] = xmmword_19919DD10;
  v6[32] = xmmword_19919DD20;
  v6[33] = xmmword_19919DD30;
  v6[34] = xmmword_19919DD40;
  v6[35] = xmmword_19919DD50;
  v6[36] = xmmword_19919DD60;
  v6[37] = xmmword_19919CDC0;
  v6[38] = xmmword_19919CDD0;
  v6[39] = xmmword_19919CDE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)v9, 2uLL, &v8, 1uLL, __dst, 0x44uLL, v4, (uint64_t *)v6, 0x50uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass86@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[24];
  uint64_t v7;
  _OWORD v8[8];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8[4] = xmmword_199192760;
  v8[5] = unk_199192770;
  v8[6] = xmmword_199192780;
  v8[7] = unk_199192790;
  v8[0] = xmmword_199192720;
  v8[1] = unk_199192730;
  v8[2] = xmmword_199192740;
  v8[3] = unk_199192750;
  v6[0] = xmmword_19919DD70;
  v6[1] = xmmword_19919DD80;
  v6[2] = xmmword_19919DD90;
  v6[3] = xmmword_19919DDA0;
  v6[4] = xmmword_19919DDB0;
  v6[5] = xmmword_19919DDC0;
  v6[6] = xmmword_19919DDD0;
  v6[7] = xmmword_19919DDE0;
  v6[8] = xmmword_19919DDF0;
  v6[9] = xmmword_19919DE00;
  v6[10] = xmmword_19919DE10;
  v6[11] = xmmword_19919DE20;
  v6[12] = xmmword_19919DE30;
  v6[13] = xmmword_19919DE40;
  v6[14] = xmmword_19919DE50;
  v6[15] = xmmword_19919DE60;
  v6[16] = xmmword_19919DE70;
  v6[17] = xmmword_19919DE80;
  v6[18] = xmmword_19919DE90;
  v6[19] = xmmword_19919DEA0;
  v6[20] = xmmword_19919DEB0;
  v6[21] = xmmword_199193AE0;
  v6[22] = xmmword_199193AF0;
  v6[23] = xmmword_199193B00;
  v7 = 0x1FAF80001FAF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 0x20uLL, v4, (uint64_t *)v6, 0x31uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass87@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1F3FF0001F3FBLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass88@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[11];
  _OWORD v7[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[2] = xmmword_1991891BC;
  v7[3] = unk_1991891CC;
  v8 = 0x1F9BB0001F977;
  v7[0] = xmmword_19918919C;
  v7[1] = unk_1991891AC;
  v6[0] = xmmword_19919DEC0;
  v6[1] = xmmword_19919DED0;
  v6[2] = xmmword_19919DEE0;
  v6[3] = xmmword_19919DEF0;
  v6[4] = xmmword_19919DF00;
  v6[5] = xmmword_19919DF10;
  v6[6] = xmmword_19919DF20;
  v6[7] = xmmword_19919DF30;
  v6[8] = xmmword_19919DF40;
  v6[9] = xmmword_19919DF50;
  v6[10] = xmmword_19919DF60;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 0x12uLL, v4, (uint64_t *)v6, 0x16uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass89@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v9 = 0x3900000030;
  v10[0] = 0x2A00000023;
  v7 = 0x20E30000200DLL;
  v8 = 65039;
  v6[0] = xmmword_19919DF70;
  v6[1] = xmmword_19919DF80;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, (int *)v10, 2uLL, &v9, 1uLL, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass90@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[21];
  uint64_t v7;
  _OWORD v8[7];
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[6] = xmmword_199189244;
  v9[0] = unk_199189254;
  *(_OWORD *)((char *)v9 + 12) = unk_199189260;
  v8[2] = xmmword_199189204;
  v8[3] = unk_199189214;
  v8[4] = xmmword_199189224;
  v8[5] = unk_199189234;
  v8[0] = xmmword_1991891E4;
  v8[1] = unk_1991891F4;
  v6[0] = xmmword_19919DB20;
  v6[1] = xmmword_19919DB30;
  v6[2] = xmmword_19919DB40;
  v6[3] = xmmword_19919DF90;
  v6[4] = xmmword_19919DFA0;
  v6[5] = xmmword_19919DFB0;
  v6[6] = xmmword_19919DFC0;
  v6[7] = xmmword_19919DFD0;
  v6[8] = xmmword_19919DFE0;
  v6[9] = xmmword_19919DFF0;
  v6[10] = xmmword_19919E000;
  v6[11] = xmmword_19919E010;
  v6[12] = xmmword_19919E020;
  v6[13] = xmmword_19919E030;
  v6[14] = xmmword_19919E040;
  v6[15] = xmmword_19919E050;
  v6[16] = xmmword_19919E060;
  v6[17] = xmmword_199194950;
  v6[18] = xmmword_199194960;
  v6[19] = xmmword_19919E070;
  v6[20] = xmmword_19919E080;
  v7 = 0x1FFFD0001FC00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 0x23uLL, v4, (uint64_t *)v6, 0x2BuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass91(JSC::Yarr *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[231];
  int __dst[243];
  uint64_t v9;

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v9 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_199189270, sizeof(__dst));
  v7[0] = xmmword_199194A20;
  v7[1] = xmmword_199194A30;
  v7[2] = xmmword_199194A40;
  v7[3] = xmmword_199194A50;
  v7[4] = xmmword_199193BE0;
  v7[5] = xmmword_199193BF0;
  v7[6] = xmmword_199194A60;
  v7[7] = xmmword_199193C10;
  v7[8] = xmmword_199193C20;
  v7[9] = xmmword_199193C30;
  v7[10] = xmmword_199193C40;
  v7[11] = xmmword_199193C50;
  v7[12] = xmmword_199193C60;
  v7[13] = xmmword_199193C70;
  v7[14] = xmmword_199193C80;
  v7[15] = xmmword_199193C90;
  v7[16] = xmmword_199193CA0;
  v7[17] = xmmword_199193CB0;
  v7[18] = xmmword_199193CC0;
  v7[19] = xmmword_199193CD0;
  v7[20] = xmmword_199193CE0;
  v7[21] = xmmword_199193CF0;
  v7[22] = xmmword_199193D00;
  v7[23] = xmmword_199193D10;
  v7[24] = xmmword_199193D20;
  v7[25] = xmmword_199193D30;
  v7[26] = xmmword_199193D40;
  v7[27] = xmmword_199193D50;
  v7[28] = xmmword_199193D60;
  v7[29] = xmmword_199193D70;
  v7[30] = xmmword_199193D80;
  v7[31] = xmmword_199193D90;
  v7[32] = xmmword_199193DA0;
  v7[33] = xmmword_199193DB0;
  v7[34] = xmmword_199193DC0;
  v7[35] = xmmword_199193DD0;
  v7[36] = xmmword_199193DE0;
  v7[37] = xmmword_199193DF0;
  v7[38] = xmmword_199193E00;
  v7[39] = xmmword_199193E10;
  v7[40] = xmmword_199193E20;
  v7[41] = xmmword_199193E30;
  v7[42] = xmmword_199193E40;
  v7[43] = xmmword_199193E50;
  v7[44] = xmmword_199193E60;
  v7[45] = xmmword_199193E70;
  v7[46] = xmmword_199193E80;
  v7[47] = xmmword_199193E90;
  v7[48] = xmmword_199193EA0;
  v7[49] = xmmword_199193EB0;
  v7[50] = xmmword_199193EC0;
  v7[51] = xmmword_199193ED0;
  v7[52] = xmmword_199193EE0;
  v7[53] = xmmword_199193EF0;
  v7[54] = xmmword_199193F00;
  v7[55] = xmmword_199193F10;
  v7[56] = xmmword_199193F20;
  v7[57] = xmmword_199193F30;
  v7[58] = xmmword_199193F40;
  v7[59] = xmmword_199193F50;
  v7[60] = xmmword_199193F60;
  v7[61] = xmmword_199193F70;
  v7[62] = xmmword_199193F80;
  v7[63] = xmmword_199193F90;
  v7[64] = xmmword_199193FA0;
  v7[65] = xmmword_199193FB0;
  v7[66] = xmmword_199193FC0;
  v7[67] = xmmword_199193FD0;
  v7[68] = xmmword_199193FE0;
  v7[69] = xmmword_199193FF0;
  v7[70] = xmmword_199194A70;
  v7[71] = xmmword_199194A80;
  v7[72] = xmmword_199194A90;
  v7[73] = xmmword_199194AA0;
  v7[74] = xmmword_199194AB0;
  v7[75] = xmmword_199194AC0;
  v7[76] = xmmword_199194AD0;
  v7[77] = xmmword_199194AE0;
  v7[78] = xmmword_199194AF0;
  v7[79] = xmmword_199194B00;
  v7[80] = xmmword_199194B10;
  v7[81] = xmmword_199194B20;
  v7[82] = xmmword_199194B30;
  v7[83] = xmmword_199194B40;
  v7[84] = xmmword_199194B50;
  v7[85] = xmmword_199194B60;
  v7[86] = xmmword_199194B70;
  v7[87] = xmmword_199194B80;
  v7[88] = xmmword_199194B90;
  v7[89] = xmmword_199194BA0;
  v7[90] = xmmword_199194BB0;
  v7[91] = xmmword_199194BC0;
  v7[92] = xmmword_199194BD0;
  v7[93] = xmmword_19919E090;
  v7[94] = xmmword_199194BF0;
  v7[95] = xmmword_199194C00;
  v7[96] = xmmword_199194C10;
  v7[97] = xmmword_199194C20;
  v7[98] = xmmword_199194C30;
  v7[99] = xmmword_199194C40;
  v7[100] = xmmword_199194C50;
  v7[101] = xmmword_199194C60;
  v7[102] = xmmword_199194C70;
  v7[103] = xmmword_199194C80;
  v7[104] = xmmword_199194C90;
  v7[105] = xmmword_199194CA0;
  v7[106] = xmmword_199194CB0;
  v7[107] = xmmword_199194CC0;
  v7[108] = xmmword_199194CD0;
  v7[109] = xmmword_199194CE0;
  v7[110] = xmmword_199194CF0;
  v7[111] = xmmword_199194D00;
  v7[112] = xmmword_199194D10;
  v7[113] = xmmword_199194D20;
  v7[114] = xmmword_199194D30;
  v7[115] = xmmword_199194D40;
  v7[116] = xmmword_199194D50;
  v7[117] = xmmword_199194D60;
  v7[118] = xmmword_199194D70;
  v7[119] = xmmword_199194D80;
  v7[120] = xmmword_199194D90;
  v7[121] = xmmword_199194DA0;
  v7[122] = xmmword_199194DB0;
  v7[123] = xmmword_199194DC0;
  v7[124] = xmmword_199194DD0;
  v7[125] = xmmword_199194DE0;
  v7[126] = xmmword_199194DF0;
  v7[127] = xmmword_199194E00;
  v7[128] = xmmword_199194E10;
  v7[129] = xmmword_199194E20;
  v7[130] = xmmword_199194E30;
  v7[131] = xmmword_199194E40;
  v7[132] = xmmword_199194E50;
  v7[133] = xmmword_199194E60;
  v7[134] = xmmword_199194E70;
  v7[135] = xmmword_199194E80;
  v7[136] = xmmword_199194E90;
  v7[137] = xmmword_199194440;
  v7[138] = xmmword_199194450;
  v7[139] = xmmword_199194460;
  v7[140] = xmmword_199194470;
  v7[141] = xmmword_199194480;
  v7[142] = xmmword_199194490;
  v7[143] = xmmword_1991944A0;
  v7[144] = xmmword_1991944B0;
  v7[145] = xmmword_1991944C0;
  v7[146] = xmmword_1991944D0;
  v7[147] = xmmword_1991944E0;
  v7[148] = xmmword_1991944F0;
  v7[149] = xmmword_199194500;
  v7[150] = xmmword_199194510;
  v7[151] = xmmword_199194520;
  v7[152] = xmmword_199194530;
  v7[153] = xmmword_199194540;
  v7[154] = xmmword_199194550;
  v7[155] = xmmword_199194560;
  v7[156] = xmmword_199194570;
  v7[157] = xmmword_199194580;
  v7[158] = xmmword_199194590;
  v7[159] = xmmword_1991945A0;
  v7[160] = xmmword_1991945B0;
  v7[161] = xmmword_1991945C0;
  v7[162] = xmmword_1991945D0;
  v7[163] = xmmword_1991945E0;
  v7[164] = xmmword_1991945F0;
  v7[165] = xmmword_199194600;
  v7[166] = xmmword_199194610;
  v7[167] = xmmword_199194620;
  v7[168] = xmmword_199194630;
  v7[169] = xmmword_199194EA0;
  v7[170] = xmmword_199194EB0;
  v7[171] = xmmword_199194EC0;
  v7[172] = xmmword_199194ED0;
  v7[173] = xmmword_199194EE0;
  v7[174] = xmmword_199194EF0;
  v7[175] = xmmword_199194F00;
  v7[176] = xmmword_199194F10;
  v7[177] = xmmword_199194F20;
  v7[178] = xmmword_199194F30;
  v7[179] = xmmword_199194F40;
  v7[180] = xmmword_199194F50;
  v7[181] = xmmword_199194F60;
  v7[182] = xmmword_199194F70;
  v7[183] = xmmword_199194F80;
  v7[184] = xmmword_199194F90;
  v7[185] = xmmword_199194FA0;
  v7[186] = xmmword_199194FB0;
  v7[187] = xmmword_199194770;
  v7[188] = xmmword_199194780;
  v7[189] = xmmword_199194790;
  v7[190] = xmmword_1991947A0;
  v7[191] = xmmword_1991947B0;
  v7[192] = xmmword_1991947C0;
  v7[193] = xmmword_1991947D0;
  v7[194] = xmmword_1991947E0;
  v7[195] = xmmword_1991947F0;
  v7[196] = xmmword_199194800;
  v7[197] = xmmword_199194810;
  v7[198] = xmmword_199194820;
  v7[199] = xmmword_199194830;
  v7[200] = xmmword_199194840;
  v7[201] = xmmword_199194850;
  v7[202] = xmmword_199194860;
  v7[203] = xmmword_199194870;
  v7[204] = xmmword_199194880;
  v7[205] = xmmword_199194890;
  v7[206] = xmmword_1991948A0;
  v7[207] = xmmword_1991948B0;
  v7[208] = xmmword_1991948C0;
  v7[209] = xmmword_1991948D0;
  v7[210] = xmmword_1991948E0;
  v7[211] = xmmword_1991948F0;
  v7[212] = xmmword_199194900;
  v7[213] = xmmword_199194910;
  v7[214] = xmmword_199194920;
  v7[215] = xmmword_199194930;
  v7[216] = xmmword_199194940;
  v7[217] = xmmword_199194950;
  v7[218] = xmmword_199194960;
  v7[219] = xmmword_199194970;
  v7[220] = xmmword_199194980;
  v7[221] = xmmword_199194990;
  v7[222] = xmmword_1991949A0;
  v7[223] = xmmword_1991949B0;
  v7[224] = xmmword_1991949C0;
  v7[225] = xmmword_1991949D0;
  v7[226] = xmmword_1991949E0;
  v7[227] = xmmword_1991949F0;
  v7[228] = xmmword_199194A00;
  v7[229] = xmmword_199194FC0;
  v7[230] = xmmword_19919E0A0;
  v4 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v4, 0, 0, 0, 0, __dst, 0xF3uLL, v5, (uint64_t *)v7, 0x1CEuLL, 3);
  *v3 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass92@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[69];
  _OWORD v7[8];
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_19919E0B0;
  v10 = 0x7F0000007BLL;
  v7[4] = xmmword_19918967C;
  v7[5] = unk_19918968C;
  v7[6] = xmmword_19918969C;
  v7[7] = unk_1991896AC;
  v7[0] = xmmword_19918963C;
  v7[1] = unk_19918964C;
  v7[2] = xmmword_19918965C;
  v7[3] = unk_19918966C;
  v8 = 917505;
  v6[0] = xmmword_19919E0C0;
  v6[1] = xmmword_19919E0D0;
  v6[2] = xmmword_19919E0E0;
  v6[3] = xmmword_19919E0F0;
  v6[4] = xmmword_199195FA0;
  v6[5] = xmmword_19919E100;
  v6[6] = xmmword_19919C560;
  v6[7] = xmmword_19919E110;
  v6[8] = xmmword_19919E120;
  v6[9] = xmmword_19919E130;
  v6[10] = xmmword_19919E140;
  v6[11] = xmmword_19919E150;
  v6[12] = xmmword_19919E160;
  v6[13] = xmmword_199192E80;
  v6[14] = xmmword_19919E170;
  v6[15] = xmmword_19919E180;
  v6[16] = xmmword_19919E190;
  v6[17] = xmmword_19919E1A0;
  v6[18] = xmmword_19919E1B0;
  v6[19] = xmmword_19919E1C0;
  v6[20] = xmmword_19919E1D0;
  v6[21] = xmmword_19919E1E0;
  v6[22] = xmmword_19919E1F0;
  v6[23] = xmmword_19919E200;
  v6[24] = xmmword_19919E210;
  v6[25] = xmmword_199196130;
  v6[26] = xmmword_1991930D0;
  v6[27] = xmmword_19919E220;
  v6[28] = xmmword_19919E230;
  v6[29] = xmmword_19919C7C0;
  v6[30] = xmmword_19919E240;
  v6[31] = xmmword_19919E250;
  v6[32] = xmmword_1991977D0;
  v6[33] = xmmword_19919E260;
  v6[34] = xmmword_1991968E0;
  v6[35] = xmmword_19919E270;
  v6[36] = xmmword_19919E280;
  v6[37] = xmmword_199196910;
  v6[38] = xmmword_1991937F0;
  v6[39] = xmmword_199193800;
  v6[40] = xmmword_199193810;
  v6[41] = xmmword_199193820;
  v6[42] = xmmword_199193830;
  v6[43] = xmmword_199193840;
  v6[44] = xmmword_199193850;
  v6[45] = xmmword_199193860;
  v6[46] = xmmword_199193870;
  v6[47] = xmmword_199193880;
  v6[48] = xmmword_19919D1B0;
  v6[49] = xmmword_199193970;
  v6[50] = xmmword_199193A10;
  v6[51] = xmmword_199193A20;
  v6[52] = xmmword_199193A30;
  v6[53] = xmmword_19919E290;
  v6[54] = xmmword_19919E2A0;
  v6[55] = xmmword_199197850;
  v6[56] = xmmword_19919CD40;
  v6[57] = xmmword_19919CD50;
  v6[58] = xmmword_19919CD60;
  v6[59] = xmmword_19919CD70;
  v6[60] = xmmword_19919CD80;
  v6[61] = xmmword_19919CD90;
  v6[62] = xmmword_19919CDA0;
  v6[63] = xmmword_19919CDB0;
  v6[64] = xmmword_19919CDC0;
  v6[65] = xmmword_19919CDD0;
  v6[66] = xmmword_19919CDE0;
  v6[67] = xmmword_19919CDF0;
  v6[68] = xmmword_19919E2B0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v9, 3uLL, (int *)v7, 0x21uLL, v4, (uint64_t *)v6, 0x8AuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass93@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[15];
  int v7[8];
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_199194FF0;
  *(_OWORD *)v7 = xmmword_1991896C0;
  *(_OWORD *)&v7[3] = *(__int128 *)((char *)&xmmword_1991896C0 + 12);
  v6[0] = xmmword_199195000;
  v6[1] = xmmword_19919E2C0;
  v6[2] = xmmword_19919E2D0;
  v6[3] = xmmword_19919E2E0;
  v6[4] = xmmword_19919E2F0;
  v6[5] = xmmword_19919E300;
  v6[6] = xmmword_19919E310;
  v6[7] = xmmword_19919E320;
  v6[8] = xmmword_199195D30;
  v6[9] = xmmword_19919E330;
  v6[10] = xmmword_19919E340;
  v6[11] = xmmword_19919E350;
  v6[12] = xmmword_19919E360;
  v6[13] = xmmword_1991982D0;
  v6[14] = xmmword_1991938B0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v8, 2uLL, v7, 7uLL, v4, (uint64_t *)v6, 0x1EuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass94@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[12];
  uint64_t v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1991896DC;
  v9[0] = unk_1991896EC;
  *(_OWORD *)((char *)v9 + 12) = unk_1991896F8;
  v6[0] = xmmword_19919E370;
  v6[1] = xmmword_19919A220;
  v6[2] = xmmword_19919E380;
  v6[3] = xmmword_19919E390;
  v6[4] = xmmword_19919E3A0;
  v6[5] = xmmword_19919E3B0;
  v6[6] = xmmword_199192DF0;
  v6[7] = xmmword_199192E00;
  v6[8] = xmmword_199192E10;
  v6[9] = xmmword_199192E20;
  v6[10] = xmmword_199192E30;
  v6[11] = xmmword_19919E3C0;
  v7 = 0x1D2450001D200;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 0xBuLL, v4, (uint64_t *)v6, 0x19uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass95@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0x1D7800001D2BLL;
  v9 = 123023;
  v6[0] = xmmword_19919E3D0;
  v6[1] = xmmword_19919E3E0;
  v6[2] = xmmword_19919E3F0;
  v7 = 0x1E06D0001E030;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 3uLL, v4, (uint64_t *)v6, 7uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass96@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919C0F0;
  v6[1] = xmmword_19919E400;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass97@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 64318;
  v7[0] = xmmword_1991927E0;
  v7[1] = xmmword_19919E410;
  v7[2] = xmmword_199193090;
  v7[3] = xmmword_19919E420;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 8uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass98@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[20];
  uint64_t v7;
  _OWORD v8[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = xmmword_19918981C;
  v8[1] = unk_19918982C;
  v8[2] = xmmword_19918983C;
  v8[3] = unk_19918984C;
  v9 = 126590;
  v6[0] = xmmword_19919E430;
  v6[1] = xmmword_19919E440;
  v6[2] = xmmword_19919E450;
  v6[3] = xmmword_19919E460;
  v6[4] = xmmword_19919E470;
  v6[5] = xmmword_19919E480;
  v6[6] = xmmword_19919E490;
  v6[7] = xmmword_19919E4A0;
  v6[8] = xmmword_19919E4B0;
  v6[9] = xmmword_19919E4C0;
  v6[10] = xmmword_19919E4D0;
  v6[11] = xmmword_19919E4E0;
  v6[12] = xmmword_199195B60;
  v6[13] = xmmword_199195B70;
  v6[14] = xmmword_199195B80;
  v6[15] = xmmword_199195B90;
  v6[16] = xmmword_199195BA0;
  v6[17] = xmmword_199195BB0;
  v6[18] = xmmword_199195BC0;
  v6[19] = xmmword_199195BD0;
  v7 = 0x1EEF10001EEF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 0x11uLL, v4, (uint64_t *)v6, 0x29uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass99@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E4F0;
  v6[1] = xmmword_19919E500;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass100@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x7B100000780;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass101@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E510;
  v6[1] = xmmword_19919E520;
  v7 = 0x11B0900011B00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 5uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass102@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[6];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x9D7000009B2;
  v6[0] = xmmword_19919E530;
  v6[1] = xmmword_199197910;
  v6[2] = xmmword_199197920;
  v6[3] = xmmword_19919B020;
  v6[4] = xmmword_19919B030;
  v6[5] = xmmword_19919E540;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 0xCuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass103@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[6];
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0xA5100000A3CLL;
  v9 = 2654;
  v6[0] = xmmword_19919B050;
  v6[1] = xmmword_199197950;
  v6[2] = xmmword_199197960;
  v6[3] = xmmword_199197970;
  v6[4] = xmmword_199198410;
  v6[5] = xmmword_19919B060;
  v7 = 0xA7600000A66;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 3uLL, v4, (uint64_t *)v6, 0xDuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass104@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[6];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 2768;
  v7[0] = xmmword_199192910;
  v7[1] = xmmword_199192920;
  v7[2] = xmmword_199192930;
  v7[3] = xmmword_199192940;
  v7[4] = xmmword_199192950;
  v7[5] = xmmword_199192960;
  v8 = 0xAFF00000AF9;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 0xDuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass105@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[7];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_1991998F0;
  v6[1] = xmmword_1991979D0;
  v6[2] = xmmword_1991979E0;
  v6[3] = xmmword_19919B0B0;
  v6[4] = xmmword_199198460;
  v6[5] = xmmword_19919B0C0;
  v6[6] = xmmword_19919E550;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 0xEuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass106@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[7];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_19919E560;
  v6[0] = xmmword_19919B0E0;
  v6[1] = xmmword_199197A10;
  v6[2] = xmmword_199197A20;
  v6[3] = xmmword_199197A30;
  v6[4] = xmmword_19919B0F0;
  v6[5] = xmmword_19919B100;
  v6[6] = xmmword_19919E570;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 4uLL, v4, (uint64_t *)v6, 0xEuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass107@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[6];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 3165;
  v7[0] = xmmword_199192A50;
  v7[1] = xmmword_199192A60;
  v7[2] = xmmword_199192A70;
  v7[3] = xmmword_199192A80;
  v7[4] = xmmword_199192A90;
  v7[5] = xmmword_19919E580;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 0xCuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass108@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[6];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E590;
  v6[1] = xmmword_1991951B0;
  v6[2] = xmmword_19919E5A0;
  v6[3] = xmmword_19919E5B0;
  v6[4] = xmmword_1991999B0;
  v6[5] = xmmword_19919E5C0;
  v7 = 0xCF300000CF1;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 0xDuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass109@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199192B10;
  v6[1] = xmmword_199192B20;
  v6[2] = xmmword_199192B30;
  v7 = 0xD7F00000D66;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 7uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass110@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[5];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0xDCA00000DBDLL;
  v8 = 3542;
  v6[0] = xmmword_19919E5D0;
  v6[1] = xmmword_199197AD0;
  v6[2] = xmmword_19919E5E0;
  v6[3] = xmmword_19919E5F0;
  v6[4] = xmmword_19919E600;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 0xAuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass111@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E610;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass112@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[4];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0xEA500000E84;
  v8 = 3782;
  v6[0] = xmmword_199192BA0;
  v6[1] = xmmword_199192BB0;
  v6[2] = xmmword_199192BC0;
  v6[3] = xmmword_199192BD0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 8uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass113@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199192BE0;
  v6[1] = xmmword_199192BF0;
  v6[2] = xmmword_19919E620;
  v7 = 0xFDA00000FD9;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 7uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass114@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E630;
  v7 = 0xAA7F0000AA60;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass115@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_19919E640;
  v6[0] = xmmword_199195C50;
  v6[1] = xmmword_19919E650;
  v6[2] = xmmword_19919E660;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 4uLL, v4, (uint64_t *)v6, 6uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass116@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[7];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E670;
  v6[1] = xmmword_19919E680;
  v6[2] = xmmword_19919E690;
  v6[3] = xmmword_199193050;
  v6[4] = xmmword_19919E6A0;
  v6[5] = xmmword_199195760;
  v6[6] = xmmword_199195770;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 0xEuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass117@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[17];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x12C000001258;
  v6[0] = xmmword_19919E6B0;
  v6[1] = xmmword_199197B80;
  v6[2] = xmmword_199197B90;
  v6[3] = xmmword_199197BA0;
  v6[4] = xmmword_199197BB0;
  v6[5] = xmmword_199197BC0;
  v6[6] = xmmword_199197BD0;
  v6[7] = xmmword_19919E6C0;
  v6[8] = xmmword_19919E6D0;
  v6[9] = xmmword_199192ED0;
  v6[10] = xmmword_199192EE0;
  v6[11] = xmmword_199192EF0;
  v6[12] = xmmword_19919E6E0;
  v6[13] = xmmword_199197DA0;
  v6[14] = xmmword_199197DB0;
  v6[15] = xmmword_199198040;
  v6[16] = xmmword_199198050;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 0x22uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass118@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_1991952D0;
  v7 = 0xABBF0000AB70;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass119@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E6F0;
  v7 = 0x11ABF00011AB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass120@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x169C00001680;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass121@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919B260;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass122@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E700;
  v6[1] = xmmword_19919E710;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass123@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 6148;
  v7[0] = xmmword_19919E720;
  v7[1] = xmmword_19919E730;
  v8 = 0x1166C00011660;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 5uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass124@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x1F2000001B132;
  v6[0] = xmmword_19919B8E0;
  v6[1] = xmmword_19919E740;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass125@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[6];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x1B1550001B000;
  v6[0] = xmmword_19919E750;
  v6[1] = xmmword_19919E760;
  v6[2] = xmmword_19919E770;
  v6[3] = xmmword_19919E780;
  v6[4] = xmmword_199193760;
  v6[5] = xmmword_19919E790;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 0xCuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass126@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E7A0;
  v7 = 0x31BF000031A0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass127@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[10];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x300700003005;
  v6[0] = xmmword_199192F10;
  v6[1] = xmmword_19919E7B0;
  v6[2] = xmmword_19919E7C0;
  v6[3] = xmmword_19919D470;
  v6[4] = xmmword_19919E7D0;
  v6[5] = xmmword_19919E7E0;
  v6[6] = xmmword_19919AF00;
  v6[7] = xmmword_19919AF10;
  v6[8] = xmmword_19919AF20;
  v6[9] = xmmword_19919AF30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 0x14uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass128@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E7F0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass129@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E800;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass130@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1034A00010330;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass131@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1044F00010400;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass132@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[11];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_199189708;
  v9 = 0x1133B000102E0;
  v6[0] = xmmword_19919E810;
  v6[1] = xmmword_19919E820;
  v6[2] = xmmword_19919E830;
  v6[3] = xmmword_19919C020;
  v6[4] = xmmword_19919C030;
  v6[5] = xmmword_19919E840;
  v6[6] = xmmword_19919E850;
  v6[7] = xmmword_19919E860;
  v6[8] = xmmword_19919B830;
  v6[9] = xmmword_19919E870;
  v6[10] = xmmword_1991989B0;
  v7 = 0xE01EF000E0100;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 6uLL, v4, (uint64_t *)v6, 0x17uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass133@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 5919;
  v7[0] = 0x171500001700;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass134@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x173400001720;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass135@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x175300001740;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass136@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199192CD0;
  v7 = 0x177300001772;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass137@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 6464;
  v7[0] = xmmword_199192D20;
  v7[1] = xmmword_19919E880;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass138@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199195350;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass139@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199193130;
  v6[1] = xmmword_199193140;
  v6[2] = xmmword_199193150;
  v7 = 0x100FA00010080;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 7uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass140@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 66463;
  v7[0] = 0x1039D00010380;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass141@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1047F00010450;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass142@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E890;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass143@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0x1083C00010808;
  v9 = 67647;
  v6 = xmmword_19919B550;
  v7 = 0x1083800010837;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 3uLL, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass144@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x28FF00002800;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass145@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E8A0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass146@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E8B0;
  v7 = 0x2CFF00002CF9;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass147@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199195360;
  v6[1] = xmmword_19919E8C0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass148@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E8D0;
  v6[1] = xmmword_1991989F0;
  v6[2] = xmmword_199198A00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 6uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass149@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 11647;
  v7 = xmmword_199192EB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass150@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0xA82C0000A800;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass151@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E8E0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass152@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919B5B0;
  v6[1] = xmmword_19919B5C0;
  v6[2] = xmmword_19919B5D0;
  v6[3] = xmmword_19919E8F0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 8uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass153@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass154@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919AE50;
  v6[1] = xmmword_19919E910;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass155@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 67871;
  v7[0] = 0x1091B00010900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass156@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0xA8770000A840;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass157@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E920;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass158@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E930;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass159@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E940;
  v7 = 0x1C4F00001C4DLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass160@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1C7F00001C50;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass161@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0xA62B0000A500;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass162@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199192FB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass163@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 43311;
  v7[0] = 0xA92D0000A900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass164@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 43359;
  v7[0] = 0xA9530000A930;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass165@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1029C00010280;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass166@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x102D0000102A0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass167@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 67903;
  v7[0] = 0x1093900010920;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass168@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199199C60;
  v6[1] = xmmword_19919E950;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass169@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E960;
  v6[1] = xmmword_19919E970;
  v7 = 0x1AAD00001AA0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 5uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass170@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E980;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass171@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E990;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass172@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1345500013000;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass173@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E9A0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass174@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 73648;
  v7[0] = 0xA4FF0000A4D0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass175@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E9B0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass176@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E9C0;
  v7 = 0xA9DF0000A9DELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass177@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E9D0;
  v7 = 0xABF90000ABF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass178@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E9E0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass179@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10A7F00010A60;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass180@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919E9F0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass181@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass182@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10C4800010C00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass183@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 69837;
  v7[0] = 0x110C200011080;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass184@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA10;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass185@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 69759;
  v7 = xmmword_1991933D0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass186@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 2142;
  v7[0] = 0x85B00000840;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass187@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA20;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass188@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA30;
  v7 = 0x109FF000109D2;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass189@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1099F00010980;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass190@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919BED0;
  v7 = 0x16F9F00016F8FLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass191@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x111DF00011180;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass192@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919B650;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass193@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199193510;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass194@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 66927;
  v7[0] = 0x1056300010530;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass195@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA40;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass196@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199193790;
  v6[1] = xmmword_1991937A0;
  v7 = 0x1BC9F0001BC9CLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 5uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass197@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1052700010500;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass198@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[6];
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x1135700011350;
  v6[0] = xmmword_199193460;
  v6[1] = xmmword_199193470;
  v6[2] = xmmword_199193480;
  v6[3] = xmmword_19919EA50;
  v6[4] = xmmword_1991934A0;
  v6[5] = xmmword_1991934B0;
  v7 = 0x1137400011370;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 2uLL, v4, (uint64_t *)v6, 0xDuLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass199@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919EA60;
  v6[1] = xmmword_19919CBF0;
  v7 = 0x16B8F00016B7DLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 5uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass200@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199193420;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass201@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199197EE0;
  v7 = 0x1076700010760;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass202@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1117600011150;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass203@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199193320;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass204@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA70;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass205@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA80;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass206@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919BE80;
  v7 = 0x16A6F00016A6ELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass207@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10A9F00010A80;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass208@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EA90;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass209@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1087F00010860;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass210@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x11AF800011AC0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass211@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1037A00010350;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass212@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EAA0;
  v7 = 0x10BAF00010BA9;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass213@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EAB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass214@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199193450;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass215@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EAC0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass216@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 71935;
  v7[0] = 0x118F2000118A0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass217@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199193520;
  v7 = 0x1174600011730;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass218@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1464600014400;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass219@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919B580;
  v7 = 0x108FF000108FBLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass220@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 70280;
  v7[0] = xmmword_199193430;
  v7[1] = xmmword_199193440;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 4uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass221@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919A2B0;
  v7 = 0x10CFF00010CFALL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass222@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EAD0;
  v7 = 0x1DAAF0001DAA1;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass223@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919B890;
  v7 = 0x1E95F0001E95ELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass224@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199199ED0;
  v6[1] = xmmword_19919EAE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass225@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EAF0;
  v7 = 0x11CB600011CA9;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass226@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919EB00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass227@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919B530;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass228@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 94176;
  v7 = xmmword_19919EB10;
  v8 = 0x18D0800018D00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass229@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 73018;
  v7[0] = xmmword_1991935F0;
  v7[1] = xmmword_199193600;
  v7[2] = xmmword_199193610;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 6uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass230@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 94177;
  v7[0] = 0x1B2FB0001B170;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass231@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x11AA200011A50;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass232@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x11A4700011A00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass233@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1183B00011800;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass234@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199193620;
  v6[1] = xmmword_199193630;
  v6[2] = xmmword_199193640;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 6uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass235@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x11EF800011EE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass236@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x16E9A00016E40;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass237@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919BC30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass238@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10F5900010F30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass239@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10F2700010F00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass240@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10FF600010FE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass241@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199193580;
  v7 = 0x119E4000119DALL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass242@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_1991938F0;
  v6[1] = xmmword_199193900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass243@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 123647;
  v7[0] = 0x1E2F90001E2C0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass244@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10FCB00010FB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass245@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 71945;
  v7[0] = xmmword_19919EB20;
  v7[1] = xmmword_19919BD70;
  v7[2] = xmmword_19919EB30;
  v8 = 0x1195900011950;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 7uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass246@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 94180;
  v7[0] = 0x18CD500018B00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass247@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199193390;
  v7 = 0x10EB100010EB0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass248@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x12FF200012F90;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass249@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x10F8900010F70;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass250@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919BE90;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass251@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1E2AE0001E290;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass252@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199197180;
  v6[1] = xmmword_199197190;
  v6[2] = xmmword_19919A8E0;
  v6[3] = xmmword_19919A8F0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 8uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass253@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199199F10;
  v7 = 0x11F5900011F3ELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass254@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x1E4F90001E4D0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass255@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[60];
  uint64_t v7;
  _OWORD v8[6];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0x7F0000007BLL;
  v8[2] = xmmword_199189740;
  v8[3] = unk_199189750;
  v8[4] = xmmword_199189760;
  v8[5] = unk_199189770;
  v9 = xmmword_19919E0B0;
  v8[0] = xmmword_199189720;
  v8[1] = unk_199189730;
  v6[0] = xmmword_19919E0C0;
  v6[1] = xmmword_19919E0D0;
  v6[2] = xmmword_19919E0E0;
  v6[3] = xmmword_19919EB40;
  v6[4] = xmmword_19919EB50;
  v6[5] = xmmword_19919EB60;
  v6[6] = xmmword_19919EB70;
  v6[7] = xmmword_19919EB80;
  v6[8] = xmmword_19919EB90;
  v6[9] = xmmword_19919EBA0;
  v6[10] = xmmword_19919EBB0;
  v6[11] = xmmword_19919EBC0;
  v6[12] = xmmword_19919EBD0;
  v6[13] = xmmword_19919EBE0;
  v6[14] = xmmword_19919EBF0;
  v6[15] = xmmword_19919EC00;
  v6[16] = xmmword_19919EC10;
  v6[17] = xmmword_19919EC20;
  v6[18] = xmmword_19919EC30;
  v6[19] = xmmword_19919EC40;
  v6[20] = xmmword_19919D140;
  v6[21] = xmmword_1991930D0;
  v6[22] = xmmword_19919E220;
  v6[23] = xmmword_19919EC50;
  v6[24] = xmmword_199193120;
  v6[25] = xmmword_1991977D0;
  v6[26] = xmmword_1991968E0;
  v6[27] = xmmword_19919E270;
  v6[28] = xmmword_19919E280;
  v6[29] = xmmword_199196910;
  v6[30] = xmmword_1991937F0;
  v6[31] = xmmword_19919EC60;
  v6[32] = xmmword_199193810;
  v6[33] = xmmword_199193820;
  v6[34] = xmmword_199193830;
  v6[35] = xmmword_199193840;
  v6[36] = xmmword_199193850;
  v6[37] = xmmword_199193860;
  v6[38] = xmmword_199193870;
  v6[39] = xmmword_199193880;
  v6[40] = xmmword_19919D1B0;
  v6[41] = xmmword_199193970;
  v6[42] = xmmword_199193A10;
  v6[43] = xmmword_199193A20;
  v6[44] = xmmword_199193A30;
  v6[45] = xmmword_19919E290;
  v6[46] = xmmword_19919E2A0;
  v6[47] = xmmword_19919EC70;
  v6[48] = xmmword_199193A70;
  v6[49] = xmmword_199193A80;
  v6[50] = xmmword_199193A90;
  v6[51] = xmmword_199193AA0;
  v6[52] = xmmword_199193AB0;
  v6[53] = xmmword_199193AC0;
  v6[54] = xmmword_199193AD0;
  v6[55] = xmmword_199193AE0;
  v6[56] = xmmword_199193AF0;
  v6[57] = xmmword_199193B00;
  v6[58] = xmmword_199193B10;
  v6[59] = xmmword_199193B20;
  v7 = 0xE007F000E0020;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v9, 3uLL, (int *)v8, 0x18uLL, v4, (uint64_t *)v6, 0x79uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass256@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[9];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x101FD00001DF9;
  v6[0] = xmmword_19919EC80;
  v6[1] = xmmword_19919EC90;
  v6[2] = xmmword_19919ECA0;
  v6[3] = xmmword_19919ECB0;
  v6[4] = xmmword_19919ECC0;
  v6[5] = xmmword_19919ECD0;
  v6[6] = xmmword_199198F60;
  v6[7] = xmmword_199198F70;
  v6[8] = xmmword_19919ECE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 0x12uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass257@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[8];
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = xmmword_199189780;
  v7[1] = unk_199189790;
  v8 = 0xA8F100001CF2;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_19919E530;
  v6[2] = xmmword_199197910;
  v6[3] = xmmword_199197920;
  v6[4] = xmmword_19919B020;
  v6[5] = xmmword_19919B030;
  v6[6] = xmmword_19919E540;
  v6[7] = xmmword_19919ED00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 0xAuLL, v4, (uint64_t *)v6, 0x10uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass258@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 8432;
  v7[0] = xmmword_19919ED10;
  v7[1] = xmmword_19919ED20;
  v7[2] = xmmword_19919ED30;
  v8 = 0x11B0900011B00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 7uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass259@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_199193790;
  v6[1] = xmmword_1991937A0;
  v7 = 0x1BCA30001BC9CLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 5uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass260@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[13];
  _OWORD v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7[0] = xmmword_1991897A8;
  v7[1] = unk_1991897B8;
  v7[2] = xmmword_1991897C8;
  v6[0] = xmmword_19919E370;
  v6[1] = xmmword_19919A220;
  v6[2] = xmmword_19919E380;
  v6[3] = xmmword_19919E390;
  v6[4] = xmmword_19919E3A0;
  v6[5] = xmmword_19919ED40;
  v6[6] = xmmword_199195400;
  v6[7] = xmmword_199195410;
  v6[8] = xmmword_199195420;
  v6[9] = xmmword_19919C570;
  v6[10] = xmmword_19919C580;
  v6[11] = xmmword_19919C590;
  v6[12] = xmmword_19919ED50;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 0xCuLL, v4, (uint64_t *)v6, 0x1AuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass261@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[18];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_19919ED60;
  v6[0] = xmmword_199192F10;
  v6[1] = xmmword_19919ED70;
  v6[2] = xmmword_19919ED80;
  v6[3] = xmmword_19919ED90;
  v6[4] = xmmword_19919EDA0;
  v6[5] = xmmword_19919EDB0;
  v6[6] = xmmword_19919EDC0;
  v6[7] = xmmword_19919EDD0;
  v6[8] = xmmword_19919D870;
  v6[9] = xmmword_19919EDE0;
  v6[10] = xmmword_19919EDF0;
  v6[11] = xmmword_19919EE00;
  v6[12] = xmmword_19919EE10;
  v6[13] = xmmword_19919EE20;
  v6[14] = xmmword_19919AF00;
  v6[15] = xmmword_19919AF10;
  v6[16] = xmmword_19919AF20;
  v6[17] = xmmword_19919AF30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 4uLL, v4, (uint64_t *)v6, 0x24uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass262@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[17];
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_199194FF0;
  v7 = xmmword_1991897D8;
  v8[0] = unk_1991897E8;
  *(_OWORD *)((char *)v8 + 12) = unk_1991897F4;
  v6[0] = xmmword_199195000;
  v6[1] = xmmword_19919E2C0;
  v6[2] = xmmword_19919EE30;
  v6[3] = xmmword_19919EE40;
  v6[4] = xmmword_19919EE50;
  v6[5] = xmmword_19919EE60;
  v6[6] = xmmword_19919EE70;
  v6[7] = xmmword_19919EE80;
  v6[8] = xmmword_19919EE90;
  v6[9] = xmmword_19919E320;
  v6[10] = xmmword_199195D30;
  v6[11] = xmmword_19919E330;
  v6[12] = xmmword_19919E340;
  v6[13] = xmmword_19919E350;
  v6[14] = xmmword_19919E360;
  v6[15] = xmmword_1991982D0;
  v6[16] = xmmword_1991938B0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, (uint64_t *)&v9, 2uLL, (int *)&v7, 0xBuLL, v4, (uint64_t *)v6, 0x22uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass263@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0x1CF200001CE9;
  v8 = 7418;
  v6[0] = xmmword_19919EEA0;
  v6[1] = xmmword_19919EEB0;
  v6[2] = xmmword_19919EEC0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 6uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass264@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_199189804;
  v8 = 0x1DFA00001DF8;
  v6[0] = xmmword_19919EED0;
  v6[1] = xmmword_19919E4F0;
  v6[2] = xmmword_19919E500;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 6uLL, v4, (uint64_t *)v6, 6uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass265@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[17];
  uint64_t v7;
  _OWORD v8[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = xmmword_19918981C;
  v8[1] = unk_19918982C;
  v8[2] = xmmword_19918983C;
  v8[3] = unk_19918984C;
  v9 = 126590;
  v6[0] = xmmword_19919EEE0;
  v6[1] = xmmword_19919E470;
  v6[2] = xmmword_19919E480;
  v6[3] = xmmword_19919E490;
  v6[4] = xmmword_19919EEF0;
  v6[5] = xmmword_19919C7A0;
  v6[6] = xmmword_1991930E0;
  v6[7] = xmmword_19919EF00;
  v6[8] = xmmword_19919E4E0;
  v6[9] = xmmword_199195B60;
  v6[10] = xmmword_199195B70;
  v6[11] = xmmword_199195B80;
  v6[12] = xmmword_199195B90;
  v6[13] = xmmword_199195BA0;
  v6[14] = xmmword_199195BB0;
  v6[15] = xmmword_199195BC0;
  v6[16] = xmmword_199195BD0;
  v7 = 0x1EEF10001EEF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 0x11uLL, v4, (uint64_t *)v6, 0x23uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass266@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919E8B0;
  v6[1] = xmmword_19919EF10;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass267@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0x61B0000060CLL;
  v9 = 1567;
  v6 = xmmword_19919E920;
  v7 = 0xFD3F0000FD3ELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 3uLL, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass268@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 1748;
  v6 = xmmword_19919BC30;
  v7 = xmmword_199189860;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 5uLL, v4, (uint64_t *)&v6, 2uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass269@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_19919EF20;
  v6 = xmmword_19919EF30;
  v7 = 0x7B100000780;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 4uLL, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass270@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[4];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_19919EF40;
  v6[0] = xmmword_19919EF50;
  v6[1] = xmmword_19919EF60;
  v6[2] = xmmword_19919EF70;
  v6[3] = xmmword_19919EF80;
  v7 = 0xFF650000FF61;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 4uLL, v4, (uint64_t *)v6, 9uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass271@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 43471;
  v7 = xmmword_19919E8A0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass272@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_199192FD0;
  v7 = 0xA9DF0000A9DELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass273@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_19919EF90;
  v6[0] = xmmword_19919EFA0;
  v6[1] = xmmword_19919EFB0;
  v6[2] = xmmword_199193280;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 4uLL, v4, (uint64_t *)v6, 6uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass274@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 65794;
  v7[0] = xmmword_199193130;
  v7[1] = xmmword_199193140;
  v7[2] = xmmword_199193150;
  v7[3] = xmmword_19919EFC0;
  v7[4] = xmmword_19919E250;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 0xAuLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass275@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_199189874;
  v8 = 123023;
  v6[0] = xmmword_19919EFD0;
  v6[1] = xmmword_19919EFE0;
  v6[2] = xmmword_19919EFF0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 5uLL, v4, (uint64_t *)v6, 6uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass276@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_19919F000;
  v6[0] = xmmword_19919E8D0;
  v6[1] = xmmword_1991989F0;
  v6[2] = xmmword_199198A00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 4uLL, v4, (uint64_t *)v6, 6uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass277@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 1155;
  v7[0] = 0x1037A00010350;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass278@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[10];
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_199189888;
  v8 = 73683;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_19919F010;
  v6[2] = xmmword_19919F020;
  v6[3] = xmmword_199193460;
  v6[4] = xmmword_199193470;
  v6[5] = xmmword_199193480;
  v6[6] = xmmword_199193490;
  v6[7] = xmmword_1991934A0;
  v6[8] = xmmword_1991934B0;
  v6[9] = xmmword_19919F030;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 5uLL, v4, (uint64_t *)v6, 0x14uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass279@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_19918989C;
  v9 = 43064;
  v6 = xmmword_19919F040;
  v7 = 0x111DF00011180;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 5uLL, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass280@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[8];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8[0] = xmmword_1991898B0;
  v8[1] = unk_1991898C0;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_19919B0E0;
  v6[2] = xmmword_199197A10;
  v6[3] = xmmword_199197A20;
  v6[4] = xmmword_199197A30;
  v6[5] = xmmword_19919B0F0;
  v6[6] = xmmword_19919B100;
  v6[7] = xmmword_19919F050;
  v7 = 0x11FF100011FC0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 8uLL, v4, (uint64_t *)v6, 0x11uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass281@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_19919E640;
  v6[0] = xmmword_19919F060;
  v6[1] = xmmword_199195C80;
  v7 = 0x2D2500002D00;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 4uLL, v4, (uint64_t *)v6, 5uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass282@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 2768;
  v7[0] = xmmword_19919ECF0;
  v7[1] = xmmword_199192910;
  v7[2] = xmmword_199192920;
  v7[3] = xmmword_199192930;
  v7[4] = xmmword_199192940;
  v7[5] = xmmword_199192950;
  v7[6] = xmmword_199192960;
  v7[7] = xmmword_19919F070;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 0x10uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass283@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919F080;
  v6[1] = xmmword_199193420;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass284@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[8];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0xA5100000A3CLL;
  v8 = 2654;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_19919B050;
  v6[2] = xmmword_199197950;
  v6[3] = xmmword_199197960;
  v6[4] = xmmword_199197970;
  v6[5] = xmmword_199198410;
  v6[6] = xmmword_19919B060;
  v6[7] = xmmword_19919F090;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 0x10uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass285@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 70280;
  v7[0] = xmmword_19919F0A0;
  v7[1] = xmmword_199199DD0;
  v8 = 0x112A90001129FLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 5uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass286@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[6];
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1991898D0;
  v9 = 127488;
  v6[0] = xmmword_19919F0B0;
  v6[1] = xmmword_19919F0C0;
  v6[2] = xmmword_19919F0D0;
  v6[3] = xmmword_19919F0E0;
  v6[4] = xmmword_19919F0F0;
  v6[5] = xmmword_19919F100;
  v7 = 0x1B1520001B150;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 5uLL, v4, (uint64_t *)v6, 0xDuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass287@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[8];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_19919F110;
  v6[0] = xmmword_19919F0B0;
  v6[1] = xmmword_19919F0C0;
  v6[2] = xmmword_19919F120;
  v6[3] = xmmword_19919F130;
  v6[4] = xmmword_19919F140;
  v6[5] = xmmword_19919F150;
  v6[6] = xmmword_19919A580;
  v6[7] = xmmword_19919F160;
  v7 = 0x1B1670001B164;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 4uLL, v4, (uint64_t *)v6, 0x11uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass288@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[8];
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_1991898E4;
  v8 = 7412;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_19919E590;
  v6[2] = xmmword_1991951B0;
  v6[3] = xmmword_19919E5A0;
  v6[4] = xmmword_19919E5B0;
  v6[5] = xmmword_1991999B0;
  v6[6] = xmmword_19919E5C0;
  v6[7] = xmmword_19919F170;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 5uLL, v4, (uint64_t *)v6, 0x10uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass289@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 8239;
  v7[0] = xmmword_199192D00;
  v7[1] = xmmword_19919F180;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass290@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 1600;
  v7 = xmmword_199193320;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 2uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass291@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 0x10F8900010F70;
  v7[0] = 0x10AF200000640;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, &v6, 1uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass292@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 6149;
  v7 = xmmword_19919F190;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass293@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0x61B0000060CLL;
  v8 = 1567;
  v6[0] = xmmword_19919F1A0;
  v6[1] = xmmword_19919F1B0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass294@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919F1C0;
  v6[1] = xmmword_19919EA20;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass295@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919F1D0;
  v7 = 0xA82C0000A800;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass296@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 43310;
  v7 = xmmword_19919E630;
  v8 = 0xAA7F0000AA60;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass297@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919F1E0;
  v7 = 0x197400001970;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass298@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919F1F0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass299@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919F200;
  v6[1] = xmmword_199193250;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 2);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass300@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0xA92F0000A900;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass301@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919F210;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass302@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0x173600001720;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass303@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919F220;
  v6[1] = xmmword_19919B290;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass304@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 5919;
  v7 = xmmword_19919F230;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 2uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass305@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919F240;
  v7 = 0x1183B00011800;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass306@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 69837;
  v7 = xmmword_19919F250;
  v8 = 0x110C200011080;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass307@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919F240;
  v7 = 0x1117600011150;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass308@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[9];
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0x303700003003;
  v9 = 12539;
  v6[0] = xmmword_19919F260;
  v6[1] = xmmword_19919EF60;
  v6[2] = xmmword_19919F270;
  v6[3] = xmmword_19919F280;
  v6[4] = xmmword_19919F290;
  v6[5] = xmmword_199197DD0;
  v6[6] = xmmword_19919F0F0;
  v6[7] = xmmword_199197E40;
  v6[8] = xmmword_199193100;
  v7 = 0xFFDC0000FFDALL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 3uLL, v4, (uint64_t *)v6, 0x13uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass309@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 12539;
  v7[0] = xmmword_19919F0B0;
  v7[1] = xmmword_19919F2A0;
  v7[2] = xmmword_19919F2B0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 6uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass310@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[5];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x1CF200001CDALL;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_199192B10;
  v6[2] = xmmword_199192B20;
  v6[3] = xmmword_199192B30;
  v6[4] = xmmword_19919F2C0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 0xAuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass311@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[8];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x1CF200001CDALL;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_1991998F0;
  v6[2] = xmmword_1991979D0;
  v6[3] = xmmword_1991979E0;
  v6[4] = xmmword_19919B0B0;
  v6[5] = xmmword_199198460;
  v6[6] = xmmword_19919B0C0;
  v6[7] = xmmword_19919E550;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 0x10uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass312@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[7];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0x1CDA00000C5DLL;
  v8 = 7410;
  v6[0] = xmmword_19919ECF0;
  v6[1] = xmmword_199192A50;
  v6[2] = xmmword_199192A60;
  v6[3] = xmmword_199192A70;
  v6[4] = xmmword_199192A80;
  v6[5] = xmmword_199192A90;
  v6[6] = xmmword_19919E580;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v7, 3uLL, v4, (uint64_t *)v6, 0xEuLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass313@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0x6400000061FLL;
  v6 = xmmword_19919B890;
  v7 = 0x1E95F0001E95ELL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v8, 2uLL, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass314@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 0x85B00000840;
  v7[0] = 0x85E00000640;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, &v6, 1uLL, 1);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass315@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 1600;
  v7 = xmmword_19919EAA0;
  v8 = 0x10BAF00010BA9;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)&v7, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass316@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 1600;
  v7[0] = 0x10F5900010F30;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, v7, 1uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass317@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[5];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_19919F2D0;
  v6[0] = xmmword_19919F2E0;
  v6[1] = xmmword_199192B50;
  v6[2] = xmmword_199192B60;
  v6[3] = xmmword_199192B70;
  v6[4] = xmmword_199192B80;
  v7 = 0x111F4000111E1;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)&v8, 4uLL, v4, (uint64_t *)v6, 0xBuLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass318@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 7410;
  v7[0] = xmmword_19919ECF0;
  v7[1] = xmmword_19919F2F0;
  v8 = 0x114D9000114D0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 5uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass319@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_19919F300;
  v7 = 0x1165900011650;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)&v6, 3uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass320@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919F310;
  v6[1] = xmmword_199193450;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass321@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919F310;
  v6[1] = xmmword_199193510;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 4uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass322@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = xmmword_19919F320;
  v6[1] = xmmword_19919BE30;
  v6[2] = xmmword_19919BE40;
  v7 = 0x11DA900011DA0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, 0, 0, v4, (uint64_t *)v6, 7uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass323@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _OWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 73018;
  v7[0] = xmmword_19919F330;
  v7[1] = xmmword_19919BE00;
  v7[2] = xmmword_19919BE10;
  v8 = 0x11D5900011D50;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, &v6, 1uLL, v4, (uint64_t *)v7, 7uLL, 3);
  *a1 = result;
  return result;
}

uint64_t JSC::Yarr::createCharacterClass324@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0x194000000965;
  v6[0] = xmmword_199192D20;
  v6[1] = xmmword_19919E880;
  v3 = WTF::fastMalloc((WTF *)0x60);
  result = JSC::Yarr::CharacterClass::CharacterClass(v3, 0, 0, 0, 0, (int *)v7, 2uLL, v4, (uint64_t *)v6, 4uLL, 1);
  *a1 = result;
  return result;
}

#error "198EC6C70: too big function (funcsize=0)"

void JSC::Yarr::createCharacterClass326(uint64_t *a1@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _OWORD v14[24];
  _OWORD v15[7];
  __int128 v16;
  _QWORD v17[2];
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t v430;

  v430 = *MEMORY[0x1E0C80C00];
  v17[1] = 0x200000002;
  v17[0] = WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v17[0] = 0xFE0F000000A9;
  v19 = 0x200000002;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v18 = 0xFE0F000000AELL;
  v21 = 0x200000002;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v20 = 0xFE0F0000203CLL;
  v23 = 0x200000002;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v22 = 0xFE0F00002049;
  v25 = 0x200000002;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v24 = 0xFE0F00002122;
  v27 = 0x200000002;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v26 = 0xFE0F00002139;
  v29 = 0x200000002;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v28 = 0xFE0F00002194;
  v31 = 0x200000002;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v30 = 0xFE0F00002195;
  v33 = 0x200000002;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v32 = 0xFE0F00002196;
  v35 = 0x200000002;
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v34 = 0xFE0F00002197;
  v37 = 0x200000002;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v36 = 0xFE0F00002198;
  v39 = 0x200000002;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v38 = 0xFE0F00002199;
  v41 = 0x200000002;
  v40 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v40 = 0xFE0F000021A9;
  v43 = 0x200000002;
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v42 = 0xFE0F000021AALL;
  v45 = 0x200000002;
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v44 = 0xFE0F00002328;
  v47 = 0x200000002;
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v46 = 0xFE0F000023CFLL;
  v49 = 0x200000002;
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v48 = 0xFE0F000023EDLL;
  v51 = 0x200000002;
  v50 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v50 = 0xFE0F000023EELL;
  v53 = 0x200000002;
  v52 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v52 = 0xFE0F000023EFLL;
  v55 = 0x200000002;
  v54 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v54 = 0xFE0F000023F1;
  v57 = 0x200000002;
  v56 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v56 = 0xFE0F000023F2;
  v59 = 0x200000002;
  v58 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v58 = 0xFE0F000023F8;
  v61 = 0x200000002;
  v60 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v60 = 0xFE0F000023F9;
  v63 = 0x200000002;
  v62 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v62 = 0xFE0F000023FALL;
  v65 = 0x200000002;
  v64 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v64 = 0xFE0F000024C2;
  v67 = 0x200000002;
  v66 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v66 = 0xFE0F000025AALL;
  v69 = 0x200000002;
  v68 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v68 = 0xFE0F000025ABLL;
  v71 = 0x200000002;
  v70 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v70 = 0xFE0F000025B6;
  v73 = 0x200000002;
  v72 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v72 = 0xFE0F000025C0;
  v75 = 0x200000002;
  v74 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v74 = 0xFE0F000025FBLL;
  v77 = 0x200000002;
  v76 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v76 = 0xFE0F000025FCLL;
  v79 = 0x200000002;
  v78 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v78 = 0xFE0F00002600;
  v81 = 0x200000002;
  v80 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v80 = 0xFE0F00002601;
  v83 = 0x200000002;
  v82 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v82 = 0xFE0F00002602;
  v85 = 0x200000002;
  v84 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v84 = 0xFE0F00002603;
  v87 = 0x200000002;
  v86 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v86 = 0xFE0F00002604;
  v89 = 0x200000002;
  v88 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v88 = 0xFE0F0000260ELL;
  v91 = 0x200000002;
  v90 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v90 = 0xFE0F00002611;
  v93 = 0x200000002;
  v92 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v92 = 0xFE0F00002618;
  v95 = 0x200000002;
  v94 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v94 = 0xFE0F0000261DLL;
  v97 = 0x200000002;
  v96 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v96 = 0xFE0F00002620;
  v99 = 0x200000002;
  v98 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v98 = 0xFE0F00002622;
  v101 = 0x200000002;
  v100 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v100 = 0xFE0F00002623;
  v103 = 0x200000002;
  v102 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v102 = 0xFE0F00002626;
  v105 = 0x200000002;
  v104 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v104 = 0xFE0F0000262ALL;
  v107 = 0x200000002;
  v106 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v106 = 0xFE0F0000262ELL;
  v109 = 0x200000002;
  v108 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v108 = 0xFE0F0000262FLL;
  v111 = 0x200000002;
  v110 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v110 = 0xFE0F00002638;
  v113 = 0x200000002;
  v112 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v112 = 0xFE0F00002639;
  v115 = 0x200000002;
  v114 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v114 = 0xFE0F0000263ALL;
  v117 = 0x200000002;
  v116 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v116 = 0xFE0F00002640;
  v119 = 0x200000002;
  v118 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v118 = 0xFE0F00002642;
  v121 = 0x200000002;
  v120 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v120 = 0xFE0F0000265FLL;
  v123 = 0x200000002;
  v122 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v122 = 0xFE0F00002660;
  v125 = 0x200000002;
  v124 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v124 = 0xFE0F00002663;
  v127 = 0x200000002;
  v126 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v126 = 0xFE0F00002665;
  v129 = 0x200000002;
  v128 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v128 = 0xFE0F00002666;
  v131 = 0x200000002;
  v130 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v130 = 0xFE0F00002668;
  v133 = 0x200000002;
  v132 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v132 = 0xFE0F0000267BLL;
  v135 = 0x200000002;
  v134 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v134 = 0xFE0F0000267ELL;
  v137 = 0x200000002;
  v136 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v136 = 0xFE0F00002692;
  v139 = 0x200000002;
  v138 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v138 = 0xFE0F00002694;
  v141 = 0x200000002;
  v140 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v140 = 0xFE0F00002695;
  v143 = 0x200000002;
  v142 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v142 = 0xFE0F00002696;
  v145 = 0x200000002;
  v144 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v144 = 0xFE0F00002697;
  v147 = 0x200000002;
  v146 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v146 = 0xFE0F00002699;
  v149 = 0x200000002;
  v148 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v148 = 0xFE0F0000269BLL;
  v151 = 0x200000002;
  v150 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v150 = 0xFE0F0000269CLL;
  v153 = 0x200000002;
  v152 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v152 = 0xFE0F000026A0;
  v155 = 0x200000002;
  v154 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v154 = 0xFE0F000026A7;
  v157 = 0x200000002;
  v156 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v156 = 0xFE0F000026B0;
  v159 = 0x200000002;
  v158 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v158 = 0xFE0F000026B1;
  v161 = 0x200000002;
  v160 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v160 = 0xFE0F000026C8;
  v163 = 0x200000002;
  v162 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v162 = 0xFE0F000026CFLL;
  v165 = 0x200000002;
  v164 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v164 = 0xFE0F000026D1;
  v167 = 0x200000002;
  v166 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v166 = 0xFE0F000026D3;
  v169 = 0x200000002;
  v168 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v168 = 0xFE0F000026E9;
  v171 = 0x200000002;
  v170 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v170 = 0xFE0F000026F0;
  v173 = 0x200000002;
  v172 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v172 = 0xFE0F000026F1;
  v175 = 0x200000002;
  v174 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v174 = 0xFE0F000026F4;
  v177 = 0x200000002;
  v176 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v176 = 0xFE0F000026F7;
  v179 = 0x200000002;
  v178 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v178 = 0xFE0F000026F8;
  v181 = 0x200000002;
  v180 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v180 = 0xFE0F000026F9;
  v183 = 0x200000002;
  v182 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v182 = 0xFE0F00002702;
  v185 = 0x200000002;
  v184 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v184 = 0xFE0F00002708;
  v187 = 0x200000002;
  v186 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v186 = 0xFE0F00002709;
  v189 = 0x200000002;
  v188 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v188 = 0xFE0F0000270CLL;
  v191 = 0x200000002;
  v190 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v190 = 0xFE0F0000270DLL;
  v193 = 0x200000002;
  v192 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v192 = 0xFE0F0000270FLL;
  v195 = 0x200000002;
  v194 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v194 = 0xFE0F00002712;
  v197 = 0x200000002;
  v196 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v196 = 0xFE0F00002714;
  v199 = 0x200000002;
  v198 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v198 = 0xFE0F00002716;
  v201 = 0x200000002;
  v200 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v200 = 0xFE0F0000271DLL;
  v203 = 0x200000002;
  v202 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v202 = 0xFE0F00002721;
  v205 = 0x200000002;
  v204 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v204 = 0xFE0F00002733;
  v207 = 0x200000002;
  v206 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v206 = 0xFE0F00002734;
  v209 = 0x200000002;
  v208 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v208 = 0xFE0F00002744;
  v211 = 0x200000002;
  v210 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v210 = 0xFE0F00002747;
  v213 = 0x200000002;
  v212 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v212 = 0xFE0F00002763;
  v215 = 0x200000002;
  v214 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v214 = 0xFE0F00002764;
  v217 = 0x200000002;
  v216 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v216 = 0xFE0F000027A1;
  v219 = 0x200000002;
  v218 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v218 = 0xFE0F00002934;
  v221 = 0x200000002;
  v220 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v220 = 0xFE0F00002935;
  v223 = 0x200000002;
  v222 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v222 = 0xFE0F00002B05;
  v225 = 0x200000002;
  v224 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v224 = 0xFE0F00002B06;
  v227 = 0x200000002;
  v226 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v226 = 0xFE0F00002B07;
  v229 = 0x200000002;
  v228 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v228 = 0xFE0F00003030;
  v231 = 0x200000002;
  v230 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v230 = 0xFE0F0000303DLL;
  v233 = 0x200000002;
  v232 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v232 = 0xFE0F00003297;
  v235 = 0x200000002;
  v234 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v234 = 0xFE0F00003299;
  v237 = 0x200000002;
  v236 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v236 = 0xFE0F0001F170;
  v239 = 0x200000002;
  v238 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v238 = 0xFE0F0001F171;
  v241 = 0x200000002;
  v240 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v240 = 0xFE0F0001F17ELL;
  v243 = 0x200000002;
  v242 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v242 = 0xFE0F0001F17FLL;
  v245 = 0x200000002;
  v244 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v244 = 0xFE0F0001F202;
  v247 = 0x200000002;
  v246 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v246 = 0xFE0F0001F237;
  v249 = 0x200000002;
  v248 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v248 = 0xFE0F0001F321;
  v251 = 0x200000002;
  v250 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v250 = 0xFE0F0001F324;
  v253 = 0x200000002;
  v252 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v252 = 0xFE0F0001F325;
  v255 = 0x200000002;
  v254 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v254 = 0xFE0F0001F326;
  v257 = 0x200000002;
  v256 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v256 = 0xFE0F0001F327;
  v259 = 0x200000002;
  v258 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v258 = 0xFE0F0001F328;
  v261 = 0x200000002;
  v260 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v260 = 0xFE0F0001F329;
  v263 = 0x200000002;
  v262 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v262 = 0xFE0F0001F32ALL;
  v265 = 0x200000002;
  v264 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v264 = 0xFE0F0001F32BLL;
  v267 = 0x200000002;
  v266 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v266 = 0xFE0F0001F32CLL;
  v269 = 0x200000002;
  v268 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v268 = 0xFE0F0001F336;
  v271 = 0x200000002;
  v270 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v270 = 0xFE0F0001F37DLL;
  v273 = 0x200000002;
  v272 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v272 = 0xFE0F0001F396;
  v275 = 0x200000002;
  v274 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v274 = 0xFE0F0001F397;
  v277 = 0x200000002;
  v276 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v276 = 0xFE0F0001F399;
  v279 = 0x200000002;
  v278 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v278 = 0xFE0F0001F39ALL;
  v281 = 0x200000002;
  v280 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v280 = 0xFE0F0001F39BLL;
  v283 = 0x200000002;
  v282 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v282 = 0xFE0F0001F39ELL;
  v285 = 0x200000002;
  v284 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v284 = 0xFE0F0001F39FLL;
  v287 = 0x200000002;
  v286 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v286 = 0xFE0F0001F3CBLL;
  v289 = 0x200000002;
  v288 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v288 = 0xFE0F0001F3CCLL;
  v291 = 0x200000002;
  v290 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v290 = 0xFE0F0001F3CDLL;
  v293 = 0x200000002;
  v292 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v292 = 0xFE0F0001F3CELL;
  v295 = 0x200000002;
  v294 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v294 = 0xFE0F0001F3D4;
  v297 = 0x200000002;
  v296 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v296 = 0xFE0F0001F3D5;
  v299 = 0x200000002;
  v298 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v298 = 0xFE0F0001F3D6;
  v301 = 0x200000002;
  v300 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v300 = 0xFE0F0001F3D7;
  v303 = 0x200000002;
  v302 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v302 = 0xFE0F0001F3D8;
  v305 = 0x200000002;
  v304 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v304 = 0xFE0F0001F3D9;
  v307 = 0x200000002;
  v306 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v306 = 0xFE0F0001F3DALL;
  v309 = 0x200000002;
  v308 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v308 = 0xFE0F0001F3DBLL;
  v311 = 0x200000002;
  v310 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v310 = 0xFE0F0001F3DCLL;
  v313 = 0x200000002;
  v312 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v312 = 0xFE0F0001F3DDLL;
  v315 = 0x200000002;
  v314 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v314 = 0xFE0F0001F3DELL;
  v317 = 0x200000002;
  v316 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v316 = 0xFE0F0001F3DFLL;
  v319 = 0x200000002;
  v318 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v318 = 0xFE0F0001F3F3;
  v321 = 0x200000002;
  v320 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v320 = 0xFE0F0001F3F5;
  v323 = 0x200000002;
  v322 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v322 = 0xFE0F0001F3F7;
  v325 = 0x200000002;
  v324 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v324 = 0xFE0F0001F43FLL;
  v327 = 0x200000002;
  v326 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v326 = 0xFE0F0001F441;
  v329 = 0x200000002;
  v328 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v328 = 0xFE0F0001F4FDLL;
  v331 = 0x200000002;
  v330 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v330 = 0xFE0F0001F549;
  v333 = 0x200000002;
  v332 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v332 = 0xFE0F0001F54ALL;
  v335 = 0x200000002;
  v334 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v334 = 0xFE0F0001F56FLL;
  v337 = 0x200000002;
  v336 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v336 = 0xFE0F0001F570;
  v339 = 0x200000002;
  v338 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v338 = 0xFE0F0001F573;
  v341 = 0x200000002;
  v340 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v340 = 0xFE0F0001F574;
  v343 = 0x200000002;
  v342 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v342 = 0xFE0F0001F575;
  v345 = 0x200000002;
  v344 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v344 = 0xFE0F0001F576;
  v347 = 0x200000002;
  v346 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v346 = 0xFE0F0001F577;
  v349 = 0x200000002;
  v348 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v348 = 0xFE0F0001F578;
  v351 = 0x200000002;
  v350 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v350 = 0xFE0F0001F579;
  v353 = 0x200000002;
  v352 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v352 = 0xFE0F0001F587;
  v355 = 0x200000002;
  v354 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v354 = 0xFE0F0001F58ALL;
  v357 = 0x200000002;
  v356 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v356 = 0xFE0F0001F58BLL;
  v359 = 0x200000002;
  v358 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v358 = 0xFE0F0001F58CLL;
  v361 = 0x200000002;
  v360 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v360 = 0xFE0F0001F58DLL;
  v363 = 0x200000002;
  v362 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v362 = 0xFE0F0001F590;
  v365 = 0x200000002;
  v364 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v364 = 0xFE0F0001F5A5;
  v367 = 0x200000002;
  v366 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v366 = 0xFE0F0001F5A8;
  v369 = 0x200000002;
  v368 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v368 = 0xFE0F0001F5B1;
  v371 = 0x200000002;
  v370 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v370 = 0xFE0F0001F5B2;
  v373 = 0x200000002;
  v372 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v372 = 0xFE0F0001F5BCLL;
  v375 = 0x200000002;
  v374 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v374 = 0xFE0F0001F5C2;
  v377 = 0x200000002;
  v376 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v376 = 0xFE0F0001F5C3;
  v379 = 0x200000002;
  v378 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v378 = 0xFE0F0001F5C4;
  v381 = 0x200000002;
  v380 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v380 = 0xFE0F0001F5D1;
  v383 = 0x200000002;
  v382 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v382 = 0xFE0F0001F5D2;
  v385 = 0x200000002;
  v384 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v384 = 0xFE0F0001F5D3;
  v387 = 0x200000002;
  v386 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v386 = 0xFE0F0001F5DCLL;
  v389 = 0x200000002;
  v388 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v388 = 0xFE0F0001F5DDLL;
  v391 = 0x200000002;
  v390 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v390 = 0xFE0F0001F5DELL;
  v393 = 0x200000002;
  v392 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v392 = 0xFE0F0001F5E1;
  v395 = 0x200000002;
  v394 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v394 = 0xFE0F0001F5E3;
  v397 = 0x200000002;
  v396 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v396 = 0xFE0F0001F5E8;
  v399 = 0x200000002;
  v398 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v398 = 0xFE0F0001F5EFLL;
  v401 = 0x200000002;
  v400 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v400 = 0xFE0F0001F5F3;
  v403 = 0x200000002;
  v402 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v402 = 0xFE0F0001F5FALL;
  v405 = 0x200000002;
  v404 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v404 = 0xFE0F0001F6CBLL;
  v407 = 0x200000002;
  v406 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v406 = 0xFE0F0001F6CDLL;
  v409 = 0x200000002;
  v408 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v408 = 0xFE0F0001F6CELL;
  v411 = 0x200000002;
  v410 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v410 = 0xFE0F0001F6CFLL;
  v413 = 0x200000002;
  v412 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v412 = 0xFE0F0001F6E0;
  v415 = 0x200000002;
  v414 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v414 = 0xFE0F0001F6E1;
  v417 = 0x200000002;
  v416 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v416 = 0xFE0F0001F6E2;
  v419 = 0x200000002;
  v418 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v418 = 0xFE0F0001F6E3;
  v421 = 0x200000002;
  v420 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v420 = 0xFE0F0001F6E4;
  v423 = 0x200000002;
  v422 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v422 = 0xFE0F0001F6E5;
  v425 = 0x200000002;
  v424 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v424 = 0xFE0F0001F6E9;
  v427 = 0x200000002;
  v426 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v426 = 0xFE0F0001F6F0;
  v429 = 0x200000002;
  v428 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v428 = 0xFE0F0001F6F3;
  v15[4] = xmmword_199192760;
  v15[5] = unk_199192770;
  v15[6] = xmmword_199192780;
  v16 = unk_199192790;
  v15[0] = xmmword_199192720;
  v15[1] = unk_199192730;
  v15[2] = xmmword_199192740;
  v15[3] = unk_199192750;
  v14[0] = xmmword_19919DD70;
  v14[1] = xmmword_19919DD80;
  v14[2] = xmmword_19919DD90;
  v14[3] = xmmword_19919DDA0;
  v14[4] = xmmword_19919DDB0;
  v14[5] = xmmword_19919DDC0;
  v14[6] = xmmword_19919DDD0;
  v14[7] = xmmword_19919F340;
  v14[8] = xmmword_19919F350;
  v14[9] = xmmword_19919F360;
  v14[10] = xmmword_19919F370;
  v14[11] = xmmword_19919F380;
  v14[12] = xmmword_19919F390;
  v14[13] = xmmword_19919F3A0;
  v14[14] = xmmword_19919F3B0;
  v14[15] = xmmword_19919F3C0;
  v14[16] = xmmword_19919F3D0;
  v14[17] = xmmword_19919F3E0;
  v14[18] = xmmword_19919F3F0;
  v14[19] = xmmword_19919DD50;
  v14[20] = xmmword_19919DD60;
  v14[21] = xmmword_19919CDC0;
  v14[22] = xmmword_19919CDD0;
  v14[23] = xmmword_19919CDE0;
  v3 = WTF::fastMalloc((WTF *)0x60);
  *a1 = JSC::Yarr::CharacterClass::CharacterClass(v3, (uint64_t)v17, 0xCFuLL, (WTF *)v15, 0x20uLL, (uint64_t *)v14, 0x30uLL, 3);
  v11 = 414;
  do
  {
    v12 = &v17[v11];
    v13 = v17[v11];
    if (v13)
    {
      *(v12 - 2) = 0;
      *((_DWORD *)v12 - 2) = 0;
      WTF::fastFree(v13, v4, v5, v6, v7, v8, v9, v10);
    }
    v11 -= 2;
  }
  while (v11 * 8);
}

void JSC::Yarr::createCharacterClass327(uint64_t *a1@<X8>)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WTF *v29;
  int v30;
  WTF *v31;
  int v32;
  WTF *v33;
  int v34;
  WTF *v35;
  int v36;
  WTF *v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v30 = 3;
  v3 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v29 = v3;
  *(_QWORD *)v3 = 0xFE0F00000023;
  *((_DWORD *)v3 + 2) = 8419;
  v32 = 3;
  v4 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v31 = v4;
  *(_QWORD *)v4 = 0xFE0F0000002ALL;
  *((_DWORD *)v4 + 2) = 8419;
  v34 = 3;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v33 = v5;
  *(_QWORD *)v5 = 0xFE0F00000030;
  *((_DWORD *)v5 + 2) = 8419;
  v36 = 3;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v35 = v6;
  *(_QWORD *)v6 = 0xFE0F00000031;
  *((_DWORD *)v6 + 2) = 8419;
  v38 = 3;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v37 = v7;
  *(_QWORD *)v7 = 0xFE0F00000032;
  *((_DWORD *)v7 + 2) = 8419;
  v8 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v40 = 0x300000003;
  v39 = v8;
  *(_QWORD *)v8 = 0xFE0F00000033;
  *((_DWORD *)v8 + 2) = 8419;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v42 = 0x300000003;
  v41 = v9;
  *(_QWORD *)v9 = 0xFE0F00000034;
  *((_DWORD *)v9 + 2) = 8419;
  v10 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v44 = 0x300000003;
  v43 = v10;
  *(_QWORD *)v10 = 0xFE0F00000035;
  *((_DWORD *)v10 + 2) = 8419;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v46 = 0x300000003;
  v45 = v11;
  *(_QWORD *)v11 = 0xFE0F00000036;
  *((_DWORD *)v11 + 2) = 8419;
  v12 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v48 = 0x300000003;
  v47 = v12;
  *(_QWORD *)v12 = 0xFE0F00000037;
  *((_DWORD *)v12 + 2) = 8419;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v50 = 0x300000003;
  v49 = v13;
  *(_QWORD *)v13 = 0xFE0F00000038;
  *((_DWORD *)v13 + 2) = 8419;
  v14 = (WTF *)WTF::fastMalloc((WTF *)0xC);
  v52 = 0x300000003;
  v51 = v14;
  *(_QWORD *)v14 = 0xFE0F00000039;
  *((_DWORD *)v14 + 2) = 8419;
  v15 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  v16 = WTF::fastMalloc((WTF *)0xC0);
  v24 = 0;
  *(_DWORD *)(v15 + 8) = 12;
  *(_QWORD *)v15 = v16;
  v25 = *(_DWORD *)(v15 + 12);
  do
  {
    v26 = *(unsigned int *)((char *)&v30 + v24);
    v27 = *(_QWORD *)v15 + 16 * v25;
    *(_QWORD *)v27 = 0;
    *(_QWORD *)(v27 + 8) = 0;
    *(_DWORD *)(v27 + 12) = v26;
    if ((_DWORD)v26)
    {
      if (v26 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v28 = (void *)WTF::fastMalloc((WTF *)(4 * v26));
      *(_DWORD *)(v27 + 8) = v26;
      *(_QWORD *)v27 = v28;
      memcpy(v28, *(WTF **)((char *)&v29 + v24), 4 * *(unsigned int *)((char *)&v30 + v24));
    }
    v25 = *(_DWORD *)(v15 + 12) + 1;
    *(_DWORD *)(v15 + 12) = v25;
    v24 += 16;
  }
  while (v24 != 192);
  *(_OWORD *)(v15 + 73) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_BYTE *)(v15 + 89) = *(_BYTE *)(v15 + 89) & 0xF8 | 4;
  *a1 = v15;
  if (v51)
    WTF::fastFree((unint64_t)v51, v17, v18, v19, v20, v21, v22, v23);
  if (v49)
    WTF::fastFree((unint64_t)v49, v17, v18, v19, v20, v21, v22, v23);
  if (v47)
    WTF::fastFree((unint64_t)v47, v17, v18, v19, v20, v21, v22, v23);
  if (v45)
    WTF::fastFree((unint64_t)v45, v17, v18, v19, v20, v21, v22, v23);
  if (v43)
    WTF::fastFree((unint64_t)v43, v17, v18, v19, v20, v21, v22, v23);
  if (v41)
    WTF::fastFree((unint64_t)v41, v17, v18, v19, v20, v21, v22, v23);
  if (v39)
    WTF::fastFree((unint64_t)v39, v17, v18, v19, v20, v21, v22, v23);
  if (v37)
    WTF::fastFree((unint64_t)v37, v17, v18, v19, v20, v21, v22, v23);
  if (v35)
    WTF::fastFree((unint64_t)v35, v17, v18, v19, v20, v21, v22, v23);
  if (v33)
    WTF::fastFree((unint64_t)v33, v17, v18, v19, v20, v21, v22, v23);
  if (v31)
    WTF::fastFree((unint64_t)v31, v17, v18, v19, v20, v21, v22, v23);
  if (v29)
    WTF::fastFree((unint64_t)v29, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::Yarr::createCharacterClass328(JSC::Yarr *this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD v21[2];
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  _QWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  _QWORD *v476;
  uint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  _QWORD *v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t v493;
  _QWORD *v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t v509;
  _QWORD *v510;
  uint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  _QWORD *v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  _QWORD *v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  _QWORD *v534;
  uint64_t v535;
  _QWORD v536[2];

  MEMORY[0x1E0C80A78](this, a2);
  v20 = v2;
  v536[0] = *MEMORY[0x1E0C80C00];
  v21[1] = 0x200000002;
  v21[0] = WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v21[0] = 0x1F1E80001F1E6;
  v23 = 0x200000002;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v22 = 0x1F1E90001F1E6;
  v25 = 0x200000002;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v24 = 0x1F1EA0001F1E6;
  v27 = 0x200000002;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v26 = 0x1F1EB0001F1E6;
  v29 = 0x200000002;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v28 = 0x1F1EC0001F1E6;
  v31 = 0x200000002;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v30 = 0x1F1EE0001F1E6;
  v33 = 0x200000002;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v32 = 0x1F1F10001F1E6;
  v35 = 0x200000002;
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v34 = 0x1F1F20001F1E6;
  v37 = 0x200000002;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v36 = 0x1F1F40001F1E6;
  v39 = 0x200000002;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v38 = 0x1F1F60001F1E6;
  v41 = 0x200000002;
  v40 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v40 = 0x1F1F70001F1E6;
  v43 = 0x200000002;
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v42 = 0x1F1F80001F1E6;
  v45 = 0x200000002;
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v44 = 0x1F1F90001F1E6;
  v47 = 0x200000002;
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v46 = 0x1F1FA0001F1E6;
  v49 = 0x200000002;
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v48 = 0x1F1FC0001F1E6;
  v51 = 0x200000002;
  v50 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v50 = 0x1F1FD0001F1E6;
  v53 = 0x200000002;
  v52 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v52 = 0x1F1FF0001F1E6;
  v55 = 0x200000002;
  v54 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v54 = 0x1F1E60001F1E7;
  v57 = 0x200000002;
  v56 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v56 = 0x1F1E70001F1E7;
  v59 = 0x200000002;
  v58 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v58 = 0x1F1E90001F1E7;
  v61 = 0x200000002;
  v60 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v60 = 0x1F1EA0001F1E7;
  v63 = 0x200000002;
  v62 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v62 = 0x1F1EB0001F1E7;
  v65 = 0x200000002;
  v64 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v64 = 0x1F1EC0001F1E7;
  v67 = 0x200000002;
  v66 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v66 = 0x1F1ED0001F1E7;
  v69 = 0x200000002;
  v68 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v68 = 0x1F1EE0001F1E7;
  v71 = 0x200000002;
  v70 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v70 = 0x1F1EF0001F1E7;
  v73 = 0x200000002;
  v72 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v72 = 0x1F1F10001F1E7;
  v75 = 0x200000002;
  v74 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v74 = 0x1F1F20001F1E7;
  v77 = 0x200000002;
  v76 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v76 = 0x1F1F30001F1E7;
  v79 = 0x200000002;
  v78 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v78 = 0x1F1F40001F1E7;
  v81 = 0x200000002;
  v80 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v80 = 0x1F1F60001F1E7;
  v83 = 0x200000002;
  v82 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v82 = 0x1F1F70001F1E7;
  v85 = 0x200000002;
  v84 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v84 = 0x1F1F80001F1E7;
  v87 = 0x200000002;
  v86 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v86 = 0x1F1F90001F1E7;
  v89 = 0x200000002;
  v88 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v88 = 0x1F1FB0001F1E7;
  v91 = 0x200000002;
  v90 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v90 = 0x1F1FC0001F1E7;
  v93 = 0x200000002;
  v92 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v92 = 0x1F1FE0001F1E7;
  v95 = 0x200000002;
  v94 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v94 = 0x1F1FF0001F1E7;
  v97 = 0x200000002;
  v96 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v96 = 0x1F1E60001F1E8;
  v99 = 0x200000002;
  v98 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v98 = 0x1F1E80001F1E8;
  v101 = 0x200000002;
  v100 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v100 = 0x1F1E90001F1E8;
  v103 = 0x200000002;
  v102 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v102 = 0x1F1EB0001F1E8;
  v105 = 0x200000002;
  v104 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v104 = 0x1F1EC0001F1E8;
  v107 = 0x200000002;
  v106 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v106 = 0x1F1ED0001F1E8;
  v109 = 0x200000002;
  v108 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v108 = 0x1F1EE0001F1E8;
  v111 = 0x200000002;
  v110 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v110 = 0x1F1F00001F1E8;
  v113 = 0x200000002;
  v112 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v112 = 0x1F1F10001F1E8;
  v115 = 0x200000002;
  v114 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v114 = 0x1F1F20001F1E8;
  v117 = 0x200000002;
  v116 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v116 = 0x1F1F30001F1E8;
  v119 = 0x200000002;
  v118 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v118 = 0x1F1F40001F1E8;
  v121 = 0x200000002;
  v120 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v120 = 0x1F1F50001F1E8;
  v123 = 0x200000002;
  v122 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v122 = 0x1F1F70001F1E8;
  v125 = 0x200000002;
  v124 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v124 = 0x1F1FA0001F1E8;
  v127 = 0x200000002;
  v126 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v126 = 0x1F1FB0001F1E8;
  v129 = 0x200000002;
  v128 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v128 = 0x1F1FC0001F1E8;
  v131 = 0x200000002;
  v130 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v130 = 0x1F1FD0001F1E8;
  v133 = 0x200000002;
  v132 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v132 = 0x1F1FE0001F1E8;
  v135 = 0x200000002;
  v134 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v134 = 0x1F1FF0001F1E8;
  v137 = 0x200000002;
  v136 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v136 = 0x1F1EA0001F1E9;
  v139 = 0x200000002;
  v138 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v138 = 0x1F1EC0001F1E9;
  v141 = 0x200000002;
  v140 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v140 = 0x1F1EF0001F1E9;
  v143 = 0x200000002;
  v142 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v142 = 0x1F1F00001F1E9;
  v145 = 0x200000002;
  v144 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v144 = 0x1F1F20001F1E9;
  v147 = 0x200000002;
  v146 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v146 = 0x1F1F40001F1E9;
  v149 = 0x200000002;
  v148 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v148 = 0x1F1FF0001F1E9;
  v151 = 0x200000002;
  v150 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v150 = 0x1F1E60001F1EALL;
  v153 = 0x200000002;
  v152 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v152 = 0x1F1E80001F1EALL;
  v155 = 0x200000002;
  v154 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v154 = 0x1F1EA0001F1EALL;
  v157 = 0x200000002;
  v156 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v156 = 0x1F1EC0001F1EALL;
  v159 = 0x200000002;
  v158 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v158 = 0x1F1ED0001F1EALL;
  v161 = 0x200000002;
  v160 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v160 = 0x1F1F70001F1EALL;
  v163 = 0x200000002;
  v162 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v162 = 0x1F1F80001F1EALL;
  v165 = 0x200000002;
  v164 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v164 = 0x1F1F90001F1EALL;
  v167 = 0x200000002;
  v166 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v166 = 0x1F1FA0001F1EALL;
  v169 = 0x200000002;
  v168 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v168 = 0x1F1EE0001F1EBLL;
  v171 = 0x200000002;
  v170 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v170 = 0x1F1EF0001F1EBLL;
  v173 = 0x200000002;
  v172 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v172 = 0x1F1F00001F1EBLL;
  v175 = 0x200000002;
  v174 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v174 = 0x1F1F20001F1EBLL;
  v177 = 0x200000002;
  v176 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v176 = 0x1F1F40001F1EBLL;
  v179 = 0x200000002;
  v178 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v178 = 0x1F1F70001F1EBLL;
  v181 = 0x200000002;
  v180 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v180 = 0x1F1E60001F1ECLL;
  v183 = 0x200000002;
  v182 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v182 = 0x1F1E70001F1ECLL;
  v185 = 0x200000002;
  v184 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v184 = 0x1F1E90001F1ECLL;
  v187 = 0x200000002;
  v186 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v186 = 0x1F1EA0001F1ECLL;
  v189 = 0x200000002;
  v188 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v188 = 0x1F1EB0001F1ECLL;
  v191 = 0x200000002;
  v190 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v190 = 0x1F1EC0001F1ECLL;
  v193 = 0x200000002;
  v192 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v192 = 0x1F1ED0001F1ECLL;
  v195 = 0x200000002;
  v194 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v194 = 0x1F1EE0001F1ECLL;
  v197 = 0x200000002;
  v196 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v196 = 0x1F1F10001F1ECLL;
  v199 = 0x200000002;
  v198 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v198 = 0x1F1F20001F1ECLL;
  v201 = 0x200000002;
  v200 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v200 = 0x1F1F30001F1ECLL;
  v203 = 0x200000002;
  v202 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v202 = 0x1F1F50001F1ECLL;
  v205 = 0x200000002;
  v204 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v204 = 0x1F1F60001F1ECLL;
  v207 = 0x200000002;
  v206 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v206 = 0x1F1F70001F1ECLL;
  v209 = 0x200000002;
  v208 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v208 = 0x1F1F80001F1ECLL;
  v211 = 0x200000002;
  v210 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v210 = 0x1F1F90001F1ECLL;
  v213 = 0x200000002;
  v212 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v212 = 0x1F1FA0001F1ECLL;
  v215 = 0x200000002;
  v214 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v214 = 0x1F1FC0001F1ECLL;
  v217 = 0x200000002;
  v216 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v216 = 0x1F1FE0001F1ECLL;
  v219 = 0x200000002;
  v218 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v218 = 0x1F1F00001F1EDLL;
  v221 = 0x200000002;
  v220 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v220 = 0x1F1F20001F1EDLL;
  v223 = 0x200000002;
  v222 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v222 = 0x1F1F30001F1EDLL;
  v225 = 0x200000002;
  v224 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v224 = 0x1F1F70001F1EDLL;
  v227 = 0x200000002;
  v226 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v226 = 0x1F1F90001F1EDLL;
  v229 = 0x200000002;
  v228 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v228 = 0x1F1FA0001F1EDLL;
  v231 = 0x200000002;
  v230 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v230 = 0x1F1E80001F1EELL;
  v233 = 0x200000002;
  v232 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v232 = 0x1F1E90001F1EELL;
  v235 = 0x200000002;
  v234 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v234 = 0x1F1EA0001F1EELL;
  v237 = 0x200000002;
  v236 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v236 = 0x1F1F10001F1EELL;
  v239 = 0x200000002;
  v238 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v238 = 0x1F1F20001F1EELL;
  v241 = 0x200000002;
  v240 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v240 = 0x1F1F30001F1EELL;
  v243 = 0x200000002;
  v242 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v242 = 0x1F1F40001F1EELL;
  v245 = 0x200000002;
  v244 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v244 = 0x1F1F60001F1EELL;
  v247 = 0x200000002;
  v246 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v246 = 0x1F1F70001F1EELL;
  v249 = 0x200000002;
  v248 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v248 = 0x1F1F80001F1EELL;
  v251 = 0x200000002;
  v250 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v250 = 0x1F1F90001F1EELL;
  v253 = 0x200000002;
  v252 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v252 = 0x1F1EA0001F1EFLL;
  v255 = 0x200000002;
  v254 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v254 = 0x1F1F20001F1EFLL;
  v257 = 0x200000002;
  v256 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v256 = 0x1F1F40001F1EFLL;
  v259 = 0x200000002;
  v258 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v258 = 0x1F1F50001F1EFLL;
  v261 = 0x200000002;
  v260 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v260 = 0x1F1EA0001F1F0;
  v263 = 0x200000002;
  v262 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v262 = 0x1F1EC0001F1F0;
  v265 = 0x200000002;
  v264 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v264 = 0x1F1ED0001F1F0;
  v267 = 0x200000002;
  v266 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v266 = 0x1F1EE0001F1F0;
  v269 = 0x200000002;
  v268 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v268 = 0x1F1F20001F1F0;
  v271 = 0x200000002;
  v270 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v270 = 0x1F1F30001F1F0;
  v273 = 0x200000002;
  v272 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v272 = 0x1F1F50001F1F0;
  v275 = 0x200000002;
  v274 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v274 = 0x1F1F70001F1F0;
  v277 = 0x200000002;
  v276 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v276 = 0x1F1FC0001F1F0;
  v279 = 0x200000002;
  v278 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v278 = 0x1F1FE0001F1F0;
  v281 = 0x200000002;
  v280 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v280 = 0x1F1FF0001F1F0;
  v283 = 0x200000002;
  v282 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v282 = 0x1F1E60001F1F1;
  v285 = 0x200000002;
  v284 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v284 = 0x1F1E70001F1F1;
  v287 = 0x200000002;
  v286 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v286 = 0x1F1E80001F1F1;
  v289 = 0x200000002;
  v288 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v288 = 0x1F1EE0001F1F1;
  v291 = 0x200000002;
  v290 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v290 = 0x1F1F00001F1F1;
  v293 = 0x200000002;
  v292 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v292 = 0x1F1F70001F1F1;
  v295 = 0x200000002;
  v294 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v294 = 0x1F1F80001F1F1;
  v297 = 0x200000002;
  v296 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v296 = 0x1F1F90001F1F1;
  v299 = 0x200000002;
  v298 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v298 = 0x1F1FA0001F1F1;
  v301 = 0x200000002;
  v300 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v300 = 0x1F1FB0001F1F1;
  v303 = 0x200000002;
  v302 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v302 = 0x1F1FE0001F1F1;
  v305 = 0x200000002;
  v304 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v304 = 0x1F1E60001F1F2;
  v307 = 0x200000002;
  v306 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v306 = 0x1F1E80001F1F2;
  v309 = 0x200000002;
  v308 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v308 = 0x1F1E90001F1F2;
  v311 = 0x200000002;
  v310 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v310 = 0x1F1EA0001F1F2;
  v313 = 0x200000002;
  v312 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v312 = 0x1F1EB0001F1F2;
  v315 = 0x200000002;
  v314 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v314 = 0x1F1EC0001F1F2;
  v317 = 0x200000002;
  v316 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v316 = 0x1F1ED0001F1F2;
  v319 = 0x200000002;
  v318 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v318 = 0x1F1F00001F1F2;
  v321 = 0x200000002;
  v320 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v320 = 0x1F1F10001F1F2;
  v323 = 0x200000002;
  v322 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v322 = 0x1F1F20001F1F2;
  v325 = 0x200000002;
  v324 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v324 = 0x1F1F30001F1F2;
  v327 = 0x200000002;
  v326 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v326 = 0x1F1F40001F1F2;
  v329 = 0x200000002;
  v328 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v328 = 0x1F1F50001F1F2;
  v331 = 0x200000002;
  v330 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v330 = 0x1F1F60001F1F2;
  v333 = 0x200000002;
  v332 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v332 = 0x1F1F70001F1F2;
  v335 = 0x200000002;
  v334 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v334 = 0x1F1F80001F1F2;
  v337 = 0x200000002;
  v336 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v336 = 0x1F1F90001F1F2;
  v339 = 0x200000002;
  v338 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v338 = 0x1F1FA0001F1F2;
  v341 = 0x200000002;
  v340 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v340 = 0x1F1FB0001F1F2;
  v343 = 0x200000002;
  v342 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v342 = 0x1F1FC0001F1F2;
  v345 = 0x200000002;
  v344 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v344 = 0x1F1FD0001F1F2;
  v347 = 0x200000002;
  v346 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v346 = 0x1F1FE0001F1F2;
  v349 = 0x200000002;
  v348 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v348 = 0x1F1FF0001F1F2;
  v351 = 0x200000002;
  v350 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v350 = 0x1F1E60001F1F3;
  v353 = 0x200000002;
  v352 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v352 = 0x1F1E80001F1F3;
  v355 = 0x200000002;
  v354 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v354 = 0x1F1EA0001F1F3;
  v357 = 0x200000002;
  v356 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v356 = 0x1F1EB0001F1F3;
  v359 = 0x200000002;
  v358 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v358 = 0x1F1EC0001F1F3;
  v361 = 0x200000002;
  v360 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v360 = 0x1F1EE0001F1F3;
  v363 = 0x200000002;
  v362 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v362 = 0x1F1F10001F1F3;
  v365 = 0x200000002;
  v364 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v364 = 0x1F1F40001F1F3;
  v367 = 0x200000002;
  v366 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v366 = 0x1F1F50001F1F3;
  v369 = 0x200000002;
  v368 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v368 = 0x1F1F70001F1F3;
  v371 = 0x200000002;
  v370 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v370 = 0x1F1FA0001F1F3;
  v373 = 0x200000002;
  v372 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v372 = 0x1F1FF0001F1F3;
  v375 = 0x200000002;
  v374 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v374 = 0x1F1F20001F1F4;
  v377 = 0x200000002;
  v376 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v376 = 0x1F1E60001F1F5;
  v379 = 0x200000002;
  v378 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v378 = 0x1F1EA0001F1F5;
  v381 = 0x200000002;
  v380 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v380 = 0x1F1EB0001F1F5;
  v383 = 0x200000002;
  v382 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v382 = 0x1F1EC0001F1F5;
  v385 = 0x200000002;
  v384 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v384 = 0x1F1ED0001F1F5;
  v387 = 0x200000002;
  v386 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v386 = 0x1F1F00001F1F5;
  v389 = 0x200000002;
  v388 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v388 = 0x1F1F10001F1F5;
  v391 = 0x200000002;
  v390 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v390 = 0x1F1F20001F1F5;
  v393 = 0x200000002;
  v392 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v392 = 0x1F1F30001F1F5;
  v395 = 0x200000002;
  v394 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v394 = 0x1F1F70001F1F5;
  v397 = 0x200000002;
  v396 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v396 = 0x1F1F80001F1F5;
  v399 = 0x200000002;
  v398 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v398 = 0x1F1F90001F1F5;
  v401 = 0x200000002;
  v400 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v400 = 0x1F1FC0001F1F5;
  v403 = 0x200000002;
  v402 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v402 = 0x1F1FE0001F1F5;
  v405 = 0x200000002;
  v404 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v404 = 0x1F1E60001F1F6;
  v407 = 0x200000002;
  v406 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v406 = 0x1F1EA0001F1F7;
  v409 = 0x200000002;
  v408 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v408 = 0x1F1F40001F1F7;
  v411 = 0x200000002;
  v410 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v410 = 0x1F1F80001F1F7;
  v413 = 0x200000002;
  v412 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v412 = 0x1F1FA0001F1F7;
  v415 = 0x200000002;
  v414 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v414 = 0x1F1FC0001F1F7;
  v417 = 0x200000002;
  v416 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v416 = 0x1F1E60001F1F8;
  v419 = 0x200000002;
  v418 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v418 = 0x1F1E70001F1F8;
  v421 = 0x200000002;
  v420 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v420 = 0x1F1E80001F1F8;
  v423 = 0x200000002;
  v422 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v422 = 0x1F1E90001F1F8;
  v425 = 0x200000002;
  v424 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v424 = 0x1F1EA0001F1F8;
  v427 = 0x200000002;
  v426 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v426 = 0x1F1EC0001F1F8;
  v429 = 0x200000002;
  v428 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v428 = 0x1F1ED0001F1F8;
  v431 = 0x200000002;
  v430 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v430 = 0x1F1EE0001F1F8;
  v433 = 0x200000002;
  v432 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v432 = 0x1F1EF0001F1F8;
  v435 = 0x200000002;
  v434 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v434 = 0x1F1F00001F1F8;
  v437 = 0x200000002;
  v436 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v436 = 0x1F1F10001F1F8;
  v439 = 0x200000002;
  v438 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v438 = 0x1F1F20001F1F8;
  v441 = 0x200000002;
  v440 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v440 = 0x1F1F30001F1F8;
  v443 = 0x200000002;
  v442 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v442 = 0x1F1F40001F1F8;
  v445 = 0x200000002;
  v444 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v444 = 0x1F1F70001F1F8;
  v447 = 0x200000002;
  v446 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v446 = 0x1F1F80001F1F8;
  v449 = 0x200000002;
  v448 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v448 = 0x1F1F90001F1F8;
  v451 = 0x200000002;
  v450 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v450 = 0x1F1FB0001F1F8;
  v453 = 0x200000002;
  v452 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v452 = 0x1F1FD0001F1F8;
  v455 = 0x200000002;
  v454 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v454 = 0x1F1FE0001F1F8;
  v457 = 0x200000002;
  v456 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v456 = 0x1F1FF0001F1F8;
  v459 = 0x200000002;
  v458 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v458 = 0x1F1E60001F1F9;
  v461 = 0x200000002;
  v460 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v460 = 0x1F1E80001F1F9;
  v463 = 0x200000002;
  v462 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v462 = 0x1F1E90001F1F9;
  v465 = 0x200000002;
  v464 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v464 = 0x1F1EB0001F1F9;
  v467 = 0x200000002;
  v466 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v466 = 0x1F1EC0001F1F9;
  v469 = 0x200000002;
  v468 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v468 = 0x1F1ED0001F1F9;
  v471 = 0x200000002;
  v470 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v470 = 0x1F1EF0001F1F9;
  v473 = 0x200000002;
  v472 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v472 = 0x1F1F00001F1F9;
  v475 = 0x200000002;
  v474 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v474 = 0x1F1F10001F1F9;
  v477 = 0x200000002;
  v476 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v476 = 0x1F1F20001F1F9;
  v479 = 0x200000002;
  v478 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v478 = 0x1F1F30001F1F9;
  v481 = 0x200000002;
  v480 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v480 = 0x1F1F40001F1F9;
  v483 = 0x200000002;
  v482 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v482 = 0x1F1F70001F1F9;
  v485 = 0x200000002;
  v484 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v484 = 0x1F1F90001F1F9;
  v487 = 0x200000002;
  v486 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v486 = 0x1F1FB0001F1F9;
  v489 = 0x200000002;
  v488 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v488 = 0x1F1FC0001F1F9;
  v491 = 0x200000002;
  v490 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v490 = 0x1F1FF0001F1F9;
  v493 = 0x200000002;
  v492 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v492 = 0x1F1E60001F1FALL;
  v495 = 0x200000002;
  v494 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v494 = 0x1F1EC0001F1FALL;
  v497 = 0x200000002;
  v496 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v496 = 0x1F1F20001F1FALL;
  v499 = 0x200000002;
  v498 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v498 = 0x1F1F30001F1FALL;
  v501 = 0x200000002;
  v500 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v500 = 0x1F1F80001F1FALL;
  v503 = 0x200000002;
  v502 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v502 = 0x1F1FE0001F1FALL;
  v505 = 0x200000002;
  v504 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v504 = 0x1F1FF0001F1FALL;
  v507 = 0x200000002;
  v506 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v506 = 0x1F1E60001F1FBLL;
  v509 = 0x200000002;
  v508 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v508 = 0x1F1E80001F1FBLL;
  v511 = 0x200000002;
  v510 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v510 = 0x1F1EA0001F1FBLL;
  v513 = 0x200000002;
  v512 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v512 = 0x1F1EC0001F1FBLL;
  v515 = 0x200000002;
  v514 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v514 = 0x1F1EE0001F1FBLL;
  v517 = 0x200000002;
  v516 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v516 = 0x1F1F30001F1FBLL;
  v519 = 0x200000002;
  v518 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v518 = 0x1F1FA0001F1FBLL;
  v521 = 0x200000002;
  v520 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v520 = 0x1F1EB0001F1FCLL;
  v523 = 0x200000002;
  v522 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v522 = 0x1F1F80001F1FCLL;
  v525 = 0x200000002;
  v524 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v524 = 0x1F1F00001F1FDLL;
  v527 = 0x200000002;
  v526 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v526 = 0x1F1EA0001F1FELL;
  v529 = 0x200000002;
  v528 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v528 = 0x1F1F90001F1FELL;
  v531 = 0x200000002;
  v530 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v530 = 0x1F1E60001F1FFLL;
  v533 = 0x200000002;
  v532 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v532 = 0x1F1F20001F1FFLL;
  v535 = 0x200000002;
  v534 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v534 = 0x1F1FC0001F1FFLL;
  v3 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)0x1020);
  *(_DWORD *)(v3 + 8) = 258;
  *(_QWORD *)v3 = v4;
  v12 = *(_DWORD *)(v3 + 12);
  v13 = 0x1FFFFFFFFFFFFDFCLL;
  do
  {
    v14 = HIDWORD(v536[v13 + 1]);
    v15 = *(_QWORD *)v3 + 16 * v12;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 12) = v14;
    if ((_DWORD)v14)
    {
      if (v14 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v16 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
      *(_DWORD *)(v15 + 8) = v14;
      *(_QWORD *)v15 = v16;
      memcpy(v16, (const void *)v536[v13], 4 * HIDWORD(v536[v13 + 1]));
    }
    v12 = *(_DWORD *)(v3 + 12) + 1;
    *(_DWORD *)(v3 + 12) = v12;
    v13 += 2;
  }
  while (v13 * 8);
  *(_OWORD *)(v3 + 73) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_BYTE *)(v3 + 89) = *(_BYTE *)(v3 + 89) & 0xF8 | 4;
  *v20 = v3;
  v17 = 516;
  do
  {
    v18 = &v21[v17];
    v19 = v21[v17 - 2];
    if (v19)
    {
      *(v18 - 2) = 0;
      *((_DWORD *)v18 - 2) = 0;
      WTF::fastFree(v19, v5, v6, v7, v8, v9, v10, v11);
    }
    v17 -= 2;
  }
  while (v17 * 8);
}

