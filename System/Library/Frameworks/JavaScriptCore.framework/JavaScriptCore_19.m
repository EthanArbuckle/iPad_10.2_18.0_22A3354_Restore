uint64_t JSC::putByIdSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int8x8_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  pthread_key_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char **v83;
  char *v84;
  _QWORD v85[3];
  WTF *v86;
  _BYTE v87[128];
  unsigned int v88;
  char v89;
  int v90;
  int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[32];
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _BYTE v100[128];
  unsigned int v101;
  unsigned int v102;
  int v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE *v108;
  char v109;
  uint64_t v110;
  int v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v95[0] = 0;
  v95[24] = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0x8000000080000000;
  v99 = v100;
  v101 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v84 = (char *)v85;
    v85[0] = &v83;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v84, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v101;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v101 < v17)
    {
      if (v99 && v99 != v100)
      {
        WTF::fastFree((unint64_t)v99, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v99 = (_BYTE *)v15;
      v101 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v101;
    }
  }
  v18 = 0;
  v104 = 1;
  v109 = 16;
  v111 = 0x10000;
  v113 = 17;
  v115 = 0x20000;
  v102 = 0;
  v103 = 0;
  v19 = 0;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = v95;
  v110 = 0;
  v112 = v95;
  v114 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if (v16 <= 3)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v18 = v102;
  }
  *(_DWORD *)&v99[v18] = -1447068675;
  v20 = v102;
  v21 = v102 + 4;
  v102 += 4;
  if (!v104)
  {
    __break(0xC471u);
    JUMPOUT(0x19818F054);
  }
  *((_DWORD *)v108 + 52) &= ~v111;
  v22 = v109 & 0x1F | 0xF8430040;
  if (v20 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v21 = v102;
  }
  *(_DWORD *)&v99[v21] = v22;
  v23 = v102;
  v24 = v102 + 4;
  v102 += 4;
  v103 = 0;
  if (v23 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v24 = v102;
  }
  *(_DWORD *)&v99[v24] = -700513792;
  v102 += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v95, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v11, v12, v13, (uint64_t)v85, v19);
  v30 = *((_QWORD *)this + 11305);
  v31 = *(_QWORD *)(v30 + 8);
  v32 = *(unsigned int **)(v30 + 16);
  if (v32)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
    do
    {
      v41 = __ldaxr(v32);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v32));
    if (!v42)
    {
      atomic_store(1u, v32);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v32, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
  }
  v43 = v102;
  if (v102 + 4 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v43 = v102;
  }
  *(_DWORD *)&v99[v43] = -1463714819;
  v44 = v102;
  v45 = v102 + 4;
  v102 += 4;
  if (v44 + 8 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v45 = v102;
  }
  *(_DWORD *)&v99[v45] = -698416192;
  v102 += 4;
  v85[0] = 0;
  v85[1] = 0;
  v85[2] = -1;
  v86 = (WTF *)v87;
  v88 = 128;
  v46 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v46 != -1)
  {
    v84 = &v82;
    v83 = &v84;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v47 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v55 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v55)
  {
    v55 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v55, v47);
  }
  v56 = *(WTF **)v55;
  if (*(_QWORD *)v55 != v55 + 8)
  {
    v57 = *(_DWORD *)(v55 + 136);
    if (v88 < v57)
    {
      if (v86 && v86 != (WTF *)v87)
      {
        WTF::fastFree((unint64_t)v86, v48, v49, v50, v51, v52, v53, v54);
        v56 = *(WTF **)v55;
        v57 = *(_DWORD *)(v55 + 136);
      }
      v86 = v56;
      v88 = v57;
      *(_QWORD *)v55 = v55 + 8;
      *(_DWORD *)(v55 + 136) = 128;
    }
  }
  v58 = 1;
  v89 = 1;
  v90 = 0;
  v91 = 6;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v85, (uint64_t)v95, 1, v50, v51, v52, v53, v54);
  BYTE2(v90) = 1;
  if (byte_1ECF4C288)
    goto LABEL_43;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v58 = HIBYTE(word_1ECF4C286) != 0;
LABEL_43:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, v58, "put_by_id_slow", 15, "DataIC put_by_id_slow", a2);
    goto LABEL_41;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, "put_by_id_slow", 15, a2);
LABEL_41:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v85, v59, v60, v61, v62, v63, v64, v65);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v95, v66, v67, v68, v69, v70, v71, v72);
}

uint64_t JSC::putByValSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int8x8_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  pthread_key_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char **v83;
  char *v84;
  _QWORD v85[3];
  WTF *v86;
  _BYTE v87[128];
  unsigned int v88;
  char v89;
  int v90;
  int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[32];
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _BYTE v100[128];
  unsigned int v101;
  unsigned int v102;
  int v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE *v108;
  char v109;
  uint64_t v110;
  int v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v95[0] = 0;
  v95[24] = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0x8000000080000000;
  v99 = v100;
  v101 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v84 = (char *)v85;
    v85[0] = &v83;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v84, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v101;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v101 < v17)
    {
      if (v99 && v99 != v100)
      {
        WTF::fastFree((unint64_t)v99, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v99 = (_BYTE *)v15;
      v101 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v101;
    }
  }
  v18 = 0;
  v104 = 1;
  v109 = 16;
  v111 = 0x10000;
  v113 = 17;
  v115 = 0x20000;
  v102 = 0;
  v103 = 0;
  v19 = 0;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = v95;
  v110 = 0;
  v112 = v95;
  v114 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if (v16 <= 3)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v18 = v102;
  }
  *(_DWORD *)&v99[v18] = -1447068675;
  v20 = v102;
  v21 = v102 + 4;
  v102 += 4;
  if (!v104)
  {
    __break(0xC471u);
    JUMPOUT(0x19818F57CLL);
  }
  *((_DWORD *)v108 + 52) &= ~v111;
  v22 = v109 & 0x1F | 0xF8430060;
  if (v20 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v21 = v102;
  }
  *(_DWORD *)&v99[v21] = v22;
  v23 = v102;
  v24 = v102 + 4;
  v102 += 4;
  v103 = 0;
  if (v23 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v24 = v102;
  }
  *(_DWORD *)&v99[v24] = -700513792;
  v102 += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v95, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v11, v12, v13, (uint64_t)v85, v19);
  v30 = *((_QWORD *)this + 11305);
  v31 = *(_QWORD *)(v30 + 8);
  v32 = *(unsigned int **)(v30 + 16);
  if (v32)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
    do
    {
      v41 = __ldaxr(v32);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v32));
    if (!v42)
    {
      atomic_store(1u, v32);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v32, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
  }
  v43 = v102;
  if (v102 + 4 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v43 = v102;
  }
  *(_DWORD *)&v99[v43] = -1463714819;
  v44 = v102;
  v45 = v102 + 4;
  v102 += 4;
  if (v44 + 8 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v45 = v102;
  }
  *(_DWORD *)&v99[v45] = -698416192;
  v102 += 4;
  v85[0] = 0;
  v85[1] = 0;
  v85[2] = -1;
  v86 = (WTF *)v87;
  v88 = 128;
  v46 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v46 != -1)
  {
    v84 = &v82;
    v83 = &v84;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v47 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v55 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v55)
  {
    v55 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v55, v47);
  }
  v56 = *(WTF **)v55;
  if (*(_QWORD *)v55 != v55 + 8)
  {
    v57 = *(_DWORD *)(v55 + 136);
    if (v88 < v57)
    {
      if (v86 && v86 != (WTF *)v87)
      {
        WTF::fastFree((unint64_t)v86, v48, v49, v50, v51, v52, v53, v54);
        v56 = *(WTF **)v55;
        v57 = *(_DWORD *)(v55 + 136);
      }
      v86 = v56;
      v88 = v57;
      *(_QWORD *)v55 = v55 + 8;
      *(_DWORD *)(v55 + 136) = 128;
    }
  }
  v58 = 1;
  v89 = 1;
  v90 = 0;
  v91 = 6;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v85, (uint64_t)v95, 1, v50, v51, v52, v53, v54);
  BYTE2(v90) = 1;
  if (byte_1ECF4C288)
    goto LABEL_43;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v58 = HIBYTE(word_1ECF4C286) != 0;
LABEL_43:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, v58, "put_by_val_slow", 16, "DataIC put_by_val_slow", a2);
    goto LABEL_41;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, "put_by_val_slow", 16, a2);
LABEL_41:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v85, v59, v60, v61, v62, v63, v64, v65);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v95, v66, v67, v68, v69, v70, v71, v72);
}

uint64_t JSC::instanceOfSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::CCallHelpers *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v73[3];
  _QWORD v74[21];
  char v75;
  _BYTE v76[56];
  _DWORD v77[39];
  char v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v76, 0);
  JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v76, v5, v6, v7, v8, v9, v10, v11);
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x19818F7D8);
  }
  *(_DWORD *)(v79 + 208) &= ~v81;
  JSC::MacroAssemblerARM64::load64((uint64_t)v76, 0x3000000002, v80, v12, v13, v14, v15, v16);
  v77[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3594453504, v17, v18, v19, v20, v21, v22);
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v76, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v23, v24, v25, (uint64_t)v73, v26);
  v32 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int **)(v32 + 16);
  v74[0] = v33;
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v33 = v74[0];
  }
  v74[1] = v34;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v73, v33, (uint64_t)v76, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v74, v36, v37, v38, v39, v40, v41, v42);
  JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame((JSC::AssemblyHelpers *)v76, v43, v44, v45, v46, v47, v48, v49);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3596551104, v50, v51, v52, v53, v54, v55);
  v56 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v74, (uint64_t)v76, -1, 6, 1);
  v75 = 1;
  if (byte_1ECF4C288)
    goto LABEL_13;
  if (HIBYTE(word_1ECF4C286))
    v57 = 0;
  else
    v57 = byte_1ECF4C289 == 0;
  if (!v57)
  {
    v56 = HIBYTE(word_1ECF4C286) != 0;
LABEL_13:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, v56, "instanceof_slow", 16, "DataIC instanceof_slow", a2);
    goto LABEL_12;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, "instanceof_slow", 16, a2);
LABEL_12:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v74, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v65, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::delByIdSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::CCallHelpers *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v73[3];
  _QWORD v74[21];
  char v75;
  _BYTE v76[56];
  _DWORD v77[39];
  char v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v76, 0);
  JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v76, v5, v6, v7, v8, v9, v10, v11);
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x19818F9CCLL);
  }
  *(_DWORD *)(v79 + 208) &= ~v81;
  JSC::MacroAssemblerARM64::load64((uint64_t)v76, 0x3000000001, v80, v12, v13, v14, v15, v16);
  v77[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3594453504, v17, v18, v19, v20, v21, v22);
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v76, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v23, v24, v25, (uint64_t)v73, v26);
  v32 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int **)(v32 + 16);
  v74[0] = v33;
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v33 = v74[0];
  }
  v74[1] = v34;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v73, v33, (uint64_t)v76, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v74, v36, v37, v38, v39, v40, v41, v42);
  JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame((JSC::AssemblyHelpers *)v76, v43, v44, v45, v46, v47, v48, v49);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3596551104, v50, v51, v52, v53, v54, v55);
  v56 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v74, (uint64_t)v76, -1, 6, 1);
  v75 = 1;
  if (byte_1ECF4C288)
    goto LABEL_13;
  if (HIBYTE(word_1ECF4C286))
    v57 = 0;
  else
    v57 = byte_1ECF4C289 == 0;
  if (!v57)
  {
    v56 = HIBYTE(word_1ECF4C286) != 0;
LABEL_13:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, v56, "del_by_id_slow", 15, "DataIC del_by_id_slow", a2);
    goto LABEL_12;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, "del_by_id_slow", 15, a2);
LABEL_12:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v74, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v65, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::delByValSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::CCallHelpers *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v73[3];
  _QWORD v74[21];
  char v75;
  _BYTE v76[56];
  _DWORD v77[39];
  char v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v76, 0);
  JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v76, v5, v6, v7, v8, v9, v10, v11);
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x19818FBC0);
  }
  *(_DWORD *)(v79 + 208) &= ~v81;
  JSC::MacroAssemblerARM64::load64((uint64_t)v76, 0x3000000002, v80, v12, v13, v14, v15, v16);
  v77[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3594453504, v17, v18, v19, v20, v21, v22);
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v76, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v23, v24, v25, (uint64_t)v73, v26);
  v32 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int **)(v32 + 16);
  v74[0] = v33;
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v33 = v74[0];
  }
  v74[1] = v34;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v73, v33, (uint64_t)v76, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v74, v36, v37, v38, v39, v40, v41, v42);
  JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame((JSC::AssemblyHelpers *)v76, v43, v44, v45, v46, v47, v48, v49);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3596551104, v50, v51, v52, v53, v54, v55);
  v56 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v74, (uint64_t)v76, -1, 6, 1);
  v75 = 1;
  if (byte_1ECF4C288)
    goto LABEL_13;
  if (HIBYTE(word_1ECF4C286))
    v57 = 0;
  else
    v57 = byte_1ECF4C289 == 0;
  if (!v57)
  {
    v56 = HIBYTE(word_1ECF4C286) != 0;
LABEL_13:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, v56, "del_by_val_slow", 16, "DataIC del_by_val_slow", a2);
    goto LABEL_12;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, "del_by_val_slow", 16, a2);
LABEL_12:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v74, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v65, v66, v67, v68, v69, v70, v71);
}

void JSC::InlineCacheHandler::create(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t **a5, uint64_t *a6, unsigned int a7)
{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint8x8_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::VM *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v14 = WTF::fastMalloc((WTF *)(80 * a7 + 96));
  *(_DWORD *)v14 = 1;
  *(_DWORD *)(v14 + 4) = a7;
  v22 = v14 + 96;
  if (a7)
  {
    v31 = v14 + 96;
    do
    {
      *(_QWORD *)v31 = 0;
      *(_QWORD *)(v31 + 8) = 0;
      *(_BYTE *)(v31 + 16) = 0;
      *(_WORD *)(v31 + 17) &= 0xF000u;
      *(_OWORD *)(v31 + 19) = 0uLL;
      *(_OWORD *)(v31 + 35) = 0uLL;
      *(_OWORD *)(v31 + 51) = 0uLL;
      *(_QWORD *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 72) = 2;
      v31 += 80;
    }
    while (v31 != v22 + 80 * a7);
    v23 = *(_DWORD *)(v14 + 4);
  }
  else
  {
    v23 = 0;
  }
  v24 = **a5;
  *(_QWORD *)(v14 + 8) = v24;
  *(_QWORD *)(v14 + 16) = v24 + 4;
  v25 = (uint8x8_t)0xFFFFFFFF00000000;
  *(_QWORD *)(v14 + 24) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v14 + 32) = 0;
  v26 = (uint64_t *)(v14 + 32);
  *(_QWORD *)(v14 + 40) = 0;
  *(_DWORD *)(v14 + 48) = 0;
  v27 = *a5;
  *a5 = 0;
  *(_QWORD *)(v14 + 64) = v27;
  *(_QWORD *)(v14 + 72) = 0;
  v28 = *a6;
  *a6 = 0;
  *(_QWORD *)(v14 + 80) = v28;
  v29 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 88) = v29;
  *a1 = v14;
  if (v23)
  {
    v32 = *(JSC::VM **)(a3 + 72);
    v33 = 80 * v23;
    v34 = g_config;
    do
    {
      v35 = *a4;
      if ((*a4 & 1) != 0)
      {
        v55 = v22;
        v38 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
        if ((v35 & 2) != 0
          || ((v39 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v39 != 0x3FFFFFFF)
            ? (v40 = (_DWORD)v39 == -1)
            : (v40 = 1),
              v40))
        {
          v41 = 2;
        }
        else if (v39 >> 28)
        {
          v52 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v52 = v38;
          *(_DWORD *)(v52 + 8) = v39;
          v41 = 1;
          v38 = v52;
        }
        else
        {
          v41 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
          v38 = v39 << 36;
        }
        v35 = v38 | v41;
        v22 = v55;
      }
      *(_QWORD *)(v22 + 64) = a3;
      *(_WORD *)(v22 + 17) &= ~0x100u;
      v36 = *(_QWORD *)(v22 + 72);
      if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
      {
        v42 = v22;
        v43 = v35;
        WTF::fastFree(v36 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
        v35 = v43;
        v22 = v42;
      }
      v37 = v35;
      if ((v35 & 1) != 0)
      {
        v54 = v35;
        v56 = v22;
        v44 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
        if ((v35 & 2) != 0
          || ((v45 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
            ? (v46 = (_DWORD)v45 == -1)
            : (v46 = 1),
              v46))
        {
          v47 = 2;
        }
        else if (v45 >> 28)
        {
          v53 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v53 = v44;
          *(_DWORD *)(v53 + 8) = v45;
          v47 = 1;
          v44 = v53;
        }
        else
        {
          v47 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
          v44 = v45 << 36;
        }
        v37 = v44 | v47;
        v35 = v54;
        v22 = v56;
      }
      *(_QWORD *)(v22 + 72) = v37;
      *(_WORD *)(v22 + 17) = *(_WORD *)(v22 + 17) & 0xF10F | 0x10;
      if (!*((_BYTE *)v34 + 1929))
      {
        v48 = v34;
        v49 = v35;
        v50 = v22;
        JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)v22, v32, v16, v17, v18, v19, v20, v21, v25);
        v22 = v50;
        v35 = v49;
        v34 = v48;
      }
      if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
      {
        v51 = v22;
        WTF::fastFree(v35 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
        v22 = v51;
      }
      v22 += 80;
      v33 -= 80;
    }
    while (v33);
  }
  v30 = a4[2];
  if (v30)
  {
    if ((v30 & 1) != 0)
      v30 &= ~1uLL;
    else
      v30 = *(_QWORD *)(v30 + 8);
  }
  *v26 = v30;
}

uint64_t JSC::doesJSCalls(unsigned int a1)
{
  unsigned int v1;
  uint64_t result;

  v1 = a1 - 10;
  if (a1 < 0xA)
    return 0;
  result = 1;
  switch(v1)
  {
    case 0u:
    case 1u:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x17u:
    case 0x33u:
    case 0x65u:
      return result;
    default:
      return 0;
  }
  return result;
}

double JSC::InlineCacheHandler::createNonHandlerSlowPath@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 4) = 0;
  *(_QWORD *)(v4 + 12) = 0;
  *(_QWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + 28) = -1;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *a2 = v4;
  *(_QWORD *)(v4 + 8) = a1;
  *(_QWORD *)(v4 + 16) = a1;
  return result;
}

void JSC::InlineCacheCompiler::generateSlowPathHandler(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  JSC::InlineCacheHandler *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;

  if (a2 >= 0x1F)
  {
    __break(1u);
  }
  else
  {
    v5 = a2;
    v4 = a1;
    v3 = a3;
    v7 = (uint64_t *)(a1 + 90440);
    v6 = a2;
    v8 = *(_DWORD **)(*(_QWORD *)(a1 + 90448) + 8 * a2 + 272);
    if (v8)
    {
      ++*v8;
      *v3 = (uint64_t)v8;
      return;
    }
  }
  v9 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 4) = 0;
  *(_QWORD *)(v9 + 20) = 0;
  *(_QWORD *)(v9 + 12) = 0;
  *(_DWORD *)(v9 + 28) = -1;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *v3 = v9;
  if (v5 >= 0x1F)
  {
    __break(0xC471u);
  }
  else
  {
    v15 = v9;
    JSC::JITThunks::ctiStub(*v7, v4, (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3581480[v5], v10, v11, v12, v13, v14, &v48);
    v24 = v48 + 4;
    *(_QWORD *)(v15 + 8) = v48;
    *(_QWORD *)(v15 + 16) = v24;
    v25 = (unsigned int *)v49;
    v49 = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      }
    }
    v28 = v7[1];
    v29 = (_DWORD *)*v3;
    *v29 = *(_DWORD *)*v3 + 1;
    v30 = v28 + 8 * v6;
    v31 = *(JSC::InlineCacheHandler **)(v30 + 272);
    *(_QWORD *)(v30 + 272) = v29;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v31, v16, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
  }
}

void JSC::InlineCacheCompiler::generateWithGuard(uint64_t a1, unsigned int a2, JSC::AccessCase *this, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  signed __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int *v48;
  int *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int *v75;
  int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x8_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  int *v107;
  int *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  _DWORD *v138;
  _QWORD *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int8x8_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _DWORD *v151;
  uint64_t *v152;
  int v153;
  uint64_t v154;
  JSC::AccessCase *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int *v174;
  int *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  JSC::AccessCase *v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  signed __int8 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  _DWORD *v205;
  uint64_t *v206;
  int v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int8x8_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  _DWORD *v274;
  uint64_t *v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int *v287;
  int *v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  _DWORD *v315;
  uint64_t *v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  int *v341;
  int *v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char v363;
  unsigned int v364;
  signed __int8 v365;
  int v366;
  unsigned int v367;
  _DWORD *v368;
  uint64_t *v369;
  int v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  signed __int8 v399;
  int v400;
  int v401;
  int v402;
  uint64_t v403;
  char v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  _DWORD *v426;
  uint64_t *v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  char v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int *v443;
  int *v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  const JSC::PropertyTable *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  void *v457;
  _DWORD *v458;
  uint64_t v459;
  uint64_t v460;
  char v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  uint64_t v473;
  _DWORD *v474;
  uint64_t *v475;
  int v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  int *v485;
  int *v486;
  int v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  int *v496;
  int *v497;
  int v498;
  int v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  _DWORD *v508;
  uint64_t *v509;
  int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char v519;
  unsigned int v520;
  int v521;
  uint64_t v522;
  unsigned int v523;
  unsigned int *v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  unsigned int v548;
  _DWORD *v549;
  uint64_t *v550;
  int v551;
  char *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  int v566;
  unsigned int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  unsigned int v574;
  int *v575;
  int *v576;
  int v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int8x8_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  unsigned int v589;
  _DWORD *v590;
  uint64_t *v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  char *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  unsigned int v610;
  int v611;
  unsigned int v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  uint64_t v623;
  _DWORD *v624;
  _QWORD *v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  int *v639;
  int *v640;
  int v641;
  uint64_t v642;
  unsigned __int8 v643;
  uint64_t v644;
  unsigned int v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  int v663;
  unsigned int v664;
  _DWORD *v665;
  uint64_t *v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  int v678;
  uint64_t v679;
  int *v680;
  int *v681;
  int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  int8x8_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  int8x8_t v693;
  int v694;
  uint64_t v695;
  _DWORD *v696;
  uint64_t *v697;
  int v698;
  uint64_t v699;
  WTF::StringImpl *v700;
  uint64_t v701;
  unsigned __int8 v702;
  uint64_t v703;
  unsigned int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  void *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  WTF *v723;
  unsigned int v724;
  int v725;
  unint64_t v726;
  unint64_t v727;
  unint64_t v728;
  _BYTE *v729;
  int v730;
  _BYTE *v731;
  uint64_t v732;
  int v733;
  WTF::StringImpl *v734;
  uint64_t v735;
  uint64_t v736;
  unsigned int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  void *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  WTF *v762;
  _WORD *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  unsigned __int8 v772;
  uint64_t v773;
  unsigned int v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  void *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  WTF *v793;
  unsigned int v794;
  int v795;
  unint64_t v796;
  unint64_t v797;
  unint64_t v798;
  _BYTE *v799;
  int v800;
  _BYTE *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  int v814;
  uint64_t v815;
  int *v816;
  int *v817;
  int v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unsigned __int8 v828;
  uint64_t v829;
  unsigned int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  int v848;
  unsigned int v849;
  int *v850;
  int *v851;
  int v852;
  uint64_t v853;
  int v854;
  uint64_t v855;
  unsigned int v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  unsigned int v875;
  _DWORD *v876;
  uint64_t *v877;
  int v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int v884;
  uint64_t v885;
  int *v886;
  int *v887;
  int v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  uint64_t v895;
  _DWORD *v896;
  uint64_t *v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  int v906;
  unsigned int v907;
  int v908;
  int v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  unsigned int v917;
  int v918;
  unsigned int v919;
  int v920;
  unsigned int v921;
  int v922;
  int v923;
  unsigned int v924;
  unsigned int v925;
  int v926;
  unsigned int v927;
  unint64_t v928;
  unsigned int v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  void *v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  uint64_t v946;
  int i1;
  unsigned int v948;
  char v949;
  _QWORD *v950;
  uint64_t v951;
  void *v952;
  int *v953;
  int *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  unint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  int v978;
  unsigned int v979;
  _DWORD *v980;
  uint64_t *v981;
  int v982;
  char *v983;
  int v984;
  JSC::AccessCase *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  char v995;
  uint64_t v996;
  int v997;
  unsigned int v998;
  int v999;
  unsigned int v1000;
  char v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  int v1012;
  unsigned int v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  int v1020;
  unsigned int v1021;
  int *v1022;
  int *v1023;
  int v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  char v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  unsigned int v1038;
  _DWORD *v1039;
  uint64_t *v1040;
  int v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  uint64_t v1056;
  int *v1057;
  int *v1058;
  int v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  int8x8_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  int v1073;
  uint64_t v1074;
  _DWORD *v1075;
  uint64_t *v1076;
  int v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  unsigned int v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  int v1102;
  unsigned int v1103;
  _DWORD *v1104;
  uint64_t *v1105;
  int v1106;
  _DWORD *v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  unint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  unsigned int v1130;
  int *v1131;
  int *v1132;
  int v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  char *v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  int v1177;
  unsigned int v1178;
  int *v1179;
  int *v1180;
  int v1181;
  char *v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  unsigned int mm;
  unsigned int v1196;
  char v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  int v1205;
  int v1206;
  int v1207;
  unsigned int v1208;
  int v1209;
  unsigned int v1210;
  int v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  int8x8_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  unsigned int v1227;
  _DWORD *v1228;
  uint64_t *v1229;
  int v1230;
  char *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  unsigned int v1239;
  uint64_t v1240;
  uint64_t v1241;
  unsigned int v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  int8x8_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  int v1262;
  unsigned int v1263;
  int *v1264;
  int *v1265;
  int v1266;
  char *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  int v1278;
  unsigned int v1279;
  _DWORD *v1280;
  uint64_t *v1281;
  int v1282;
  char *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  int8x8_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  unsigned int i2;
  unsigned int v1316;
  char v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  int v1337;
  unsigned int v1338;
  int *v1339;
  int *v1340;
  int v1341;
  char *v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int8x8_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  int v1357;
  unsigned int v1358;
  _DWORD *v1359;
  uint64_t *v1360;
  int v1361;
  char *v1362;
  unsigned int v1363;
  char *v1364;
  uint64_t v1365;
  uint64_t v1366;
  unsigned int v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  int8x8_t v1373;
  int v1374;
  uint64_t v1375;
  _DWORD *v1376;
  _QWORD *v1377;
  int v1378;
  uint64_t v1379;
  unsigned int v1380;
  uint64_t v1381;
  _DWORD *v1382;
  _QWORD *v1383;
  int v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  int v1406;
  unsigned int v1407;
  int *v1408;
  int *v1409;
  int v1410;
  char *v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  unint64_t v1424;
  uint64_t v1425;
  int i3;
  unsigned int v1427;
  char v1428;
  uint64_t v1429;
  _DWORD *v1430;
  uint64_t *v1431;
  int v1432;
  int *v1433;
  _QWORD *v1434;
  unsigned int v1435;
  WTF *v1436;
  unint64_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  unint64_t v1440;
  unint64_t v1441;
  unint64_t v1442;
  int v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  int8x8_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  int v1458;
  uint64_t v1459;
  _DWORD *v1460;
  uint64_t *v1461;
  int v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  int8x8_t v1469;
  int v1470;
  uint64_t v1471;
  _DWORD *v1472;
  uint64_t *v1473;
  int v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  unint64_t v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  int8x8_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  int v1495;
  unsigned int v1496;
  _DWORD *v1497;
  uint64_t *v1498;
  int v1499;
  char *v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unsigned int v1509;
  char *v1510;
  char *v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  unsigned int v1529;
  uint64_t v1530;
  unint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  unsigned int v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  unint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  int v1571;
  unsigned int v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  unsigned int v1580;
  int v1581;
  unsigned int v1582;
  char v1583;
  unsigned int *v1584;
  uint64_t v1585;
  unint64_t v1586;
  uint64_t v1587;
  unint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  int v1600;
  unsigned int v1601;
  int *v1602;
  int *v1603;
  int v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  unsigned int v1613;
  uint64_t v1614;
  uint64_t v1615;
  int v1616;
  unsigned int v1617;
  unsigned int v1618;
  char v1619;
  uint64_t v1620;
  unint64_t v1621;
  int *v1622;
  uint64_t v1623;
  int i7;
  unsigned int v1625;
  char v1626;
  _QWORD *v1627;
  uint64_t v1628;
  _DWORD *v1629;
  uint64_t v1630;
  unsigned int v1631;
  uint64_t v1632;
  unint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  unint64_t v1636;
  unint64_t v1637;
  unint64_t v1638;
  int v1639;
  uint64_t v1640;
  uint64_t v1641;
  unint64_t v1642;
  int *v1643;
  uint64_t v1644;
  int i8;
  unsigned int v1646;
  char v1647;
  _QWORD *v1648;
  uint64_t v1649;
  _DWORD *v1650;
  uint64_t v1651;
  unsigned int v1652;
  unsigned int v1653;
  int v1654;
  unint64_t v1655;
  unint64_t v1656;
  _BYTE *v1657;
  int v1658;
  _BYTE *v1659;
  unsigned int v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  WTF *v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  void *v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  int j;
  unsigned int v1687;
  char v1688;
  uint64_t v1689;
  int *v1690;
  int *v1691;
  int v1692;
  uint64_t v1693;
  unsigned int v1694;
  WTF *v1695;
  unint64_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  unint64_t v1699;
  unint64_t v1700;
  unint64_t v1701;
  int v1702;
  uint64_t v1703;
  unsigned int v1704;
  unsigned int v1705;
  int v1706;
  unint64_t v1707;
  unint64_t v1708;
  _BYTE *v1709;
  int v1710;
  _BYTE *v1711;
  unint64_t v1712;
  unint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  unsigned int v1716;
  WTF *v1717;
  unint64_t v1718;
  uint64_t v1719;
  unint64_t v1720;
  unint64_t v1721;
  unint64_t v1722;
  unint64_t v1723;
  int v1724;
  uint64_t v1725;
  unint64_t v1726;
  unint64_t v1727;
  uint64_t v1728;
  WTF *v1729;
  WTF *v1730;
  BOOL v1731;
  unint64_t v1732;
  WTF *v1734;
  BOOL v1735;
  JSC::AssemblerBuffer *v1736;
  unsigned int v1737;
  unsigned int v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  int v1743;
  unsigned int v1744;
  int v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  unsigned int v1758;
  int v1759;
  unsigned int v1760;
  int v1761;
  unsigned int v1762;
  uint64_t v1763;
  unsigned int v1764;
  int v1765;
  unsigned int v1766;
  int v1767;
  int v1768;
  unsigned int v1769;
  unsigned int v1770;
  unsigned int v1771;
  unsigned int v1772;
  int v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  BOOL v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  char *v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  int v1807;
  unsigned int v1808;
  int *v1809;
  int *v1810;
  int v1811;
  char *v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  int v1817;
  unsigned int v1818;
  _DWORD *v1819;
  uint64_t *v1820;
  int v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  int v1827;
  unsigned int v1828;
  int *v1829;
  int *v1830;
  int v1831;
  char *v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  int8x8_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  int v1843;
  unsigned int v1844;
  _DWORD *v1845;
  uint64_t *v1846;
  int v1847;
  char *v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  int8x8_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  int v1859;
  unsigned int v1860;
  int *v1861;
  int *v1862;
  int v1863;
  char *v1864;
  void *v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  WTF *v1872;
  unsigned int v1873;
  unsigned int v1874;
  unint64_t v1875;
  unint64_t v1876;
  unint64_t v1877;
  WTF *v1878;
  int v1879;
  _BYTE *v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  int v1888;
  int v1889;
  char *v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  int8x8_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  int v1901;
  unsigned int v1902;
  int *v1903;
  int *v1904;
  int v1905;
  char *v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  int8x8_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  int v1917;
  unsigned int v1918;
  _DWORD *v1919;
  uint64_t *v1920;
  int v1921;
  char *v1922;
  void *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  WTF *v1930;
  unsigned int v1931;
  unsigned int v1932;
  unint64_t v1933;
  unint64_t v1934;
  unint64_t v1935;
  WTF *v1936;
  int v1937;
  _BYTE *v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  int8x8_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  int v1950;
  unsigned int v1951;
  _DWORD *v1952;
  uint64_t *v1953;
  int v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  int8x8_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  int v1966;
  unsigned int v1967;
  int *v1968;
  int *v1969;
  int v1970;
  uint64_t v1971;
  void *v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  int v1979;
  int v1980;
  char *v1981;
  int v1982;
  unint64_t v1983;
  unint64_t v1984;
  unint64_t v1985;
  _BYTE *v1986;
  int v1987;
  _BYTE *v1988;
  WTF *v1989;
  char *v1990;
  WTF *v1991;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  unint64_t v2001;
  uint64_t v2002;
  int jj;
  unsigned int v2004;
  char v2005;
  _QWORD *v2006;
  uint64_t v2007;
  void *v2008;
  _DWORD *v2009;
  unsigned int v2010;
  WTF *v2011;
  unint64_t v2012;
  uint64_t v2013;
  unint64_t v2014;
  unint64_t v2015;
  unint64_t v2016;
  unint64_t v2017;
  int v2018;
  uint64_t v2019;
  _DWORD *v2020;
  WTF *v2021;
  char *v2022;
  WTF *v2023;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  unint64_t v2033;
  uint64_t v2034;
  unsigned int v2035;
  char v2036;
  _DWORD *v2037;
  _QWORD *v2038;
  int v2039;
  _DWORD *v2040;
  _QWORD *v2041;
  unsigned int v2042;
  WTF *v2043;
  unint64_t v2044;
  uint64_t v2045;
  unint64_t v2046;
  unint64_t v2047;
  unint64_t v2048;
  int v2049;
  uint64_t v2050;
  int *v2051;
  _BYTE *v2052;
  uint64_t v2053;
  char *v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  void *v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  unint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  int i4;
  unsigned int v2074;
  char v2075;
  uint64_t v2076;
  int *v2077;
  int *v2078;
  int v2079;
  uint64_t v2080;
  unsigned int v2081;
  uint64_t v2082;
  unint64_t v2083;
  uint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  unint64_t v2087;
  unint64_t v2088;
  int v2089;
  uint64_t v2090;
  unint64_t v2091;
  unint64_t v2092;
  uint64_t v2093;
  WTF *v2094;
  _BYTE *v2095;
  uint64_t v2096;
  WTF *v2097;
  _BYTE *v2098;
  uint64_t v2099;
  WTF *v2100;
  int v2101;
  unsigned int v2102;
  int v2103;
  unsigned int v2104;
  uint64_t v2105;
  unsigned int v2106;
  unsigned int v2107;
  unsigned int v2108;
  unsigned int v2109;
  unsigned int v2110;
  unsigned int v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  void *v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  uint8x8_t v2126;
  unsigned int v2127;
  uint64_t v2128;
  JSC::CallLinkInfo *v2129;
  unint64_t v2130;
  void *v2131;
  uint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  JSC::CodeBlock *v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  uint64_t v2144;
  uint64_t v2145;
  int v2146;
  unsigned int v2147;
  unsigned int v2148;
  unsigned int v2149;
  unsigned int v2150;
  JSC::LLInt *v2151;
  uint64_t v2152;
  int v2153;
  unsigned int v2154;
  unsigned int v2155;
  unsigned int v2156;
  BOOL v2157;
  int v2158;
  const JSC::RegisterSet *v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  uint64_t v2166;
  unsigned int v2167;
  unsigned int v2168;
  unsigned int *v2169;
  unsigned int v2170;
  unsigned int v2171;
  unsigned int v2172;
  int v2173;
  JSC::ScratchRegisterAllocator *v2174;
  uint64_t v2175;
  unint64_t v2176;
  unint64_t v2177;
  unint64_t v2178;
  uint64_t v2179;
  WTF *v2180;
  uint64_t v2181;
  unint64_t v2182;
  uint64_t v2183;
  const JSC::RegisterSet *v2184;
  uint64_t v2185;
  uint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  unint64_t v2191;
  const JSC::RegisterSet *v2192;
  unsigned int v2193;
  uint64_t v2194;
  unint64_t v2195;
  char *v2196;
  uint64_t v2197;
  uint64_t v2198;
  unsigned int v2199;
  uint8x8_t v2200;
  __int32 v2201;
  uint8x8_t v2202;
  uint64_t v2203;
  unsigned int v2204;
  uint64_t v2205;
  int v2206;
  int v2207;
  int v2208;
  unsigned int v2209;
  unsigned int v2210;
  unsigned int v2212;
  char v2213;
  char v2214;
  uint64_t v2215;
  unsigned __int8 *v2216;
  const JSC::RegisterSet *v2217;
  uint64_t v2218;
  _BYTE *v2219;
  int v2220;
  unsigned __int8 *v2221;
  char *v2222;
  unsigned __int8 *v2223;
  uint64_t v2224;
  int v2225;
  unsigned __int8 *v2226;
  void *v2227;
  uint64_t v2228;
  uint64_t v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  char v2233;
  uint64_t v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  uint64_t v2240;
  unsigned int v2241;
  JSC::ScratchRegisterAllocator *v2242;
  unint64_t k;
  uint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  unsigned int m;
  unsigned int v2252;
  char v2253;
  WTF *v2254;
  WTF *v2255;
  unint64_t v2256;
  unint64_t v2257;
  uint64_t v2258;
  WTF *v2259;
  unint64_t v2260;
  unint64_t v2261;
  uint64_t v2262;
  WTF *v2263;
  unint64_t v2264;
  BOOL v2265;
  unint64_t v2266;
  unint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  unint64_t v2271;
  uint64_t v2272;
  WTF *v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  unint64_t v2280;
  const JSC::RegisterSet *v2281;
  unsigned int v2282;
  uint64_t v2283;
  unint64_t v2284;
  WTF *v2285;
  uint64_t v2286;
  uint64_t v2287;
  unsigned int v2288;
  uint8x8_t v2289;
  __int32 v2290;
  uint8x8_t v2291;
  uint64_t v2292;
  unsigned int v2293;
  uint64_t v2294;
  int v2295;
  int v2296;
  int v2297;
  unsigned int v2298;
  unsigned int v2299;
  unsigned int v2301;
  char v2302;
  unsigned __int8 v2303;
  uint64_t v2304;
  WTF *v2305;
  WTF *v2306;
  uint64_t v2307;
  WTF *v2308;
  int v2309;
  WTF *v2310;
  WTF *v2311;
  WTF *v2312;
  uint64_t v2313;
  int v2314;
  WTF *v2315;
  WTF *v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  char v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  uint64_t v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  unsigned int v2330;
  JSC::ScratchRegisterAllocator *v2331;
  unint64_t i5;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  uint64_t v2339;
  unsigned int i6;
  unsigned int v2341;
  char v2342;
  WTF *v2343;
  void *v2344;
  WTF *v2345;
  _BYTE *v2346;
  uint64_t v2347;
  WTF *v2348;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  unint64_t v2358;
  uint64_t v2359;
  int i;
  unsigned int v2361;
  char v2362;
  _QWORD *v2363;
  uint64_t v2364;
  void *v2365;
  int *v2366;
  unsigned int v2367;
  uint64_t v2368;
  unint64_t v2369;
  uint64_t v2370;
  unint64_t v2371;
  unint64_t v2372;
  unint64_t v2373;
  unint64_t v2374;
  int v2375;
  uint64_t v2376;
  int *v2377;
  unint64_t v2378;
  unint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  _BYTE *v2382;
  uint64_t v2383;
  WTF *v2384;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  unint64_t v2394;
  uint64_t v2395;
  unsigned int v2396;
  char v2397;
  int *v2398;
  int v2399;
  _DWORD *v2400;
  _QWORD *v2401;
  unsigned int v2402;
  uint64_t v2403;
  unint64_t v2404;
  uint64_t v2405;
  unint64_t v2406;
  unint64_t v2407;
  unint64_t v2408;
  int v2409;
  uint64_t v2410;
  int *v2411;
  unint64_t v2412;
  unint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  unsigned int v2417;
  unsigned int v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  char v2430;
  unsigned int v2431;
  unsigned int v2432;
  unsigned int v2433;
  char v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  int v2442;
  unsigned int v2443;
  uint64_t v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  unint64_t v2463;
  uint64_t v2464;
  unsigned int v2465;
  char v2466;
  int *v2467;
  int v2468;
  _DWORD *v2469;
  _QWORD *v2470;
  int *v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  unsigned int v2475;
  unsigned int *v2476;
  unsigned int v2477;
  unsigned int v2478;
  unsigned int v2479;
  unsigned int *v2480;
  int n;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  uint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  char v2493;
  int v2494;
  int v2495;
  unsigned int v2496;
  unsigned int v2497;
  uint64_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  unsigned int v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  uint64_t v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  unsigned int v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t v2534;
  uint64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  uint64_t v2539;
  unint64_t v2540;
  uint64_t v2541;
  int ii;
  unsigned int v2543;
  char v2544;
  uint64_t v2545;
  int *v2546;
  int *v2547;
  int v2548;
  uint64_t v2549;
  unsigned int v2550;
  WTF *v2551;
  unint64_t v2552;
  uint64_t v2553;
  unint64_t v2554;
  unint64_t v2555;
  unint64_t v2556;
  unint64_t v2557;
  int v2558;
  uint64_t v2559;
  unint64_t v2560;
  unint64_t v2561;
  uint64_t v2562;
  WTF *v2563;
  unsigned int v2564;
  uint64_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  uint64_t v2576;
  uint64_t v2577;
  unint64_t v2578;
  uint64_t v2579;
  int nn;
  unsigned int v2581;
  char v2582;
  uint64_t v2583;
  int *v2584;
  int *v2585;
  int v2586;
  uint64_t v2587;
  unsigned int v2588;
  WTF *v2589;
  unint64_t v2590;
  uint64_t v2591;
  unint64_t v2592;
  unint64_t v2593;
  unint64_t v2594;
  unint64_t v2595;
  int v2596;
  uint64_t v2597;
  unint64_t v2598;
  unint64_t v2599;
  uint64_t v2600;
  WTF *v2601;
  unsigned int v2602;
  unsigned int *v2603;
  uint64_t v2604;
  uint64_t v2605;
  uint64_t v2606;
  uint64_t v2607;
  uint64_t v2608;
  uint64_t v2609;
  uint64_t v2610;
  unsigned int v2611;
  uint64_t v2612;
  unint64_t v2613;
  uint64_t *v2614;
  uint64_t v2615;
  int kk;
  unsigned int v2617;
  char v2618;
  _QWORD *v2619;
  uint64_t v2620;
  _DWORD *v2621;
  int *v2622;
  WTF *v2623;
  unint64_t v2624;
  uint64_t v2625;
  unint64_t v2626;
  unint64_t v2627;
  unint64_t v2628;
  unint64_t v2629;
  int v2630;
  uint64_t v2631;
  unint64_t v2632;
  unint64_t v2633;
  uint64_t v2634;
  WTF *v2635;
  int v2637;
  int v2638;
  int v2639;
  int v2640;
  JSC::AssemblerBuffer *v2641;
  int v2642;
  unsigned int v2643;
  uint64_t v2644;
  int64_t v2645;
  JSC::AssemblerBuffer *v2646;
  JSC::AssemblerBuffer *v2647;
  WTF *v2648;
  JSC::AssemblerBuffer *v2649;
  int v2650;
  int v2651;
  char *v2652;
  const JSC::RegisterSet *v2653;
  const JSC::RegisterSet *v2654;
  int v2655;
  JSC::AssemblerBuffer *v2656;
  JSC::AssemblerBuffer *v2657;
  unsigned int v2658;
  int v2659;
  unsigned int v2660;
  unint64_t v2661;
  int v2662;
  unsigned int v2663;
  JSC::AssemblerBuffer *v2664;
  unsigned int v2665;
  int v2666;
  int v2667;
  char v2668;
  __int16 v2669;
  char v2670;
  int v2671;
  int v2672;
  int v2673;
  uint64_t v2674;
  int v2675;
  int v2676;
  int v2677;
  uint64_t v2678;
  _DWORD v2679[2];
  char v2680;
  __int16 v2681;
  char v2682;
  int v2683;
  uint64_t v2684;
  int v2685;
  int v2686;
  int v2687;
  uint64_t v2688;
  int v2689;
  int v2690;
  int v2691;
  int v2692;
  char v2693;
  __int16 v2694;
  char v2695;
  unsigned int v2696;
  int v2697;
  int v2698;
  char v2699;
  __int16 v2700;
  char v2701;
  uint64_t v2702;
  WTF **v2703;
  void *__dst;
  uint64_t v2705;
  _WORD v2706[12];
  WTF *v2707;
  int v2708;
  unsigned int v2709;
  _BYTE v2710[24];
  WTF *v2711;
  uint64_t v2712;
  _WORD v2713[12];
  WTF *v2714;
  uint64_t v2715;
  _BYTE v2716[24];
  int v2717;
  int v2718;
  int v2719;
  char v2720;
  __int16 v2721;
  char v2722;
  _DWORD v2723[2];
  char v2724;
  __int16 v2725;
  char v2726;
  int v2727;
  int v2728;
  int v2729;
  uint64_t v2730;
  int v2731;
  int v2732;
  int v2733;
  uint64_t v2734;
  int v2735;
  int v2736;
  char v2737;
  __int16 v2738;
  char v2739;
  int v2740;
  int v2741;
  int v2742;
  _DWORD v2743[3];
  int v2744;
  int v2745;
  char v2746;
  __int16 v2747;
  char v2748;
  int v2749;
  uint64_t v2750;
  int v2751;
  int v2752;
  int v2753;
  uint64_t v2754;
  int v2755;
  int v2756;
  int v2757;
  uint64_t v2758;
  int v2759;
  int v2760;
  int v2761;
  int v2762;
  char v2763;
  __int16 v2764;
  char v2765;
  int v2766;
  int v2767;
  char v2768;
  __int16 v2769;
  char v2770;
  unsigned int v2771;
  int v2772;
  int v2773;
  unsigned int v2774;
  unsigned int v2775;
  int v2776;
  uint64_t v2777;
  int v2778;
  int v2779;
  int v2780;
  uint64_t v2781;
  int v2782;
  int v2783;
  int v2784;
  uint64_t v2785;
  int v2786;
  int v2787;
  int v2788;
  uint64_t v2789;
  WTF *v2790;
  uint64_t v2791;
  _BYTE v2792[24];
  __int128 v2793;
  _BYTE v2794[24];
  uint64_t v2795;
  int v2796;
  uint64_t v2797;
  int v2798;
  int v2799;
  char v2800;
  __int16 v2801;
  char v2802;
  int v2803;
  uint64_t v2804;
  int v2805;
  int v2806;
  int v2807;
  uint64_t v2808;
  int v2809;
  int v2810;
  int v2811;
  uint64_t v2812;
  int v2813;
  int v2814;
  int v2815;
  uint64_t v2816;
  int v2817;
  int v2818;
  int v2819;
  int v2820;
  char v2821;
  __int16 v2822;
  char v2823;
  int v2824;
  int v2825;
  int v2826;
  uint64_t v2827;
  int v2828;
  int v2829;
  int v2830;
  uint64_t v2831;
  int v2832;
  int v2833;
  char v2834;
  __int16 v2835;
  char v2836;
  int v2837;
  uint64_t v2838;
  int v2839;
  int v2840;
  int v2841;
  uint64_t v2842;
  int v2843;
  int v2844;
  int v2845;
  uint64_t v2846;
  int v2847;
  int v2848;
  int v2849;
  uint64_t v2850;
  int v2851;
  int v2852;
  char v2853;
  __int16 v2854;
  char v2855;
  int v2856;
  uint64_t v2857;
  int v2858;
  int v2859;
  int v2860;
  uint64_t v2861;
  int v2862;
  int v2863;
  int v2864;
  uint64_t v2865;
  int v2866;
  int v2867;
  int v2868;
  uint64_t v2869;
  int v2870;
  int v2871;
  _DWORD v2872[3];
  _DWORD v2873[3];
  int v2874;
  uint64_t v2875;
  uint64_t v2876[7];
  int v2877;
  int v2878;
  char v2879;
  signed __int8 v2880;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 32);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(*(_QWORD *)(a1 + 32), "Begin generateWithGuard");
  v9 = *(_QWORD *)v7;
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(char *)(v10 + 117);
  v2880 = *(_BYTE *)(v10 + 116);
  v12 = *(_BYTE *)(v7 + 176);
  v2879 = v12;
  if (JSC::AccessCase::requiresIdentifierNameMatch(this))
  {
    v20 = *(_QWORD *)(v7 + 16);
    v21 = *(unsigned __int8 *)(v20 + 122);
    if (v21 >= 4 && (v21 > 0x1C || ((1 << v21) & 0x118683C0) == 0))
    {
      if (!*((_QWORD *)this + 4))
      {
        __break(0xC471u);
        JUMPOUT(0x19819966CLL);
      }
      v1731 = v21 == 5;
      v97 = 118;
      if (v1731)
        v97 = 119;
      v98 = v12;
      JSC::MacroAssemblerARM64::load64(v8, *(unsigned __int8 *)(v20 + v97) | 0x800000000, v98, v15, v16, v17, v18, v19);
      v103 = *((_QWORD *)this + 4);
      if (v103)
      {
        if ((v103 & 1) != 0)
          v104 = v103 & 0xFFFFFFFFFFFFFFFELL;
        else
          v104 = *(_QWORD *)(v103 + 8);
      }
      else
      {
        v104 = 0;
      }
      JSC::MacroAssemblerARM64::branch64(v8, 1, v98, v104, v99, v100, v101, v102, (uint64_t)&v2877);
      v105 = v2877;
      if (v2877 != -1)
      {
        v106 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v106 == *(_DWORD *)(a4 + 8))
        {
          v107 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v106 + 1), (unint64_t)&v2877, v15, v16, v17, v18, v19);
          v109 = *v107;
          v108 = v107 + 1;
          v105 = v109;
          LODWORD(v106) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v108 = &v2878;
        }
        v1042 = *(_QWORD *)a4 + 12 * v106;
        *(_DWORD *)v1042 = v105;
        *(_QWORD *)(v1042 + 4) = *(_QWORD *)v108;
        ++*(_DWORD *)(a4 + 12);
      }
    }
  }
  v2876[0] = (uint64_t)this;
  v2876[1] = v7;
  v2876[2] = v8;
  v2876[3] = (uint64_t)&v2880;
  v2876[4] = v9;
  v2876[5] = a4;
  v2876[6] = (uint64_t)&v2879;
  v22 = *((unsigned __int8 *)this + 4);
  v23 = v11;
  switch(*((_BYTE *)this + 4))
  {
    case 1:
      v2714 = (WTF *)v2716;
      v2715 = 2;
      v699 = *((_QWORD *)this + 4);
      if (v699)
      {
        if ((v699 & 1) != 0)
          v700 = (WTF::StringImpl *)(v699 & 0xFFFFFFFFFFFFFFFELL);
        else
          v700 = *(WTF::StringImpl **)(v699 + 8);
      }
      else
      {
        v700 = 0;
      }
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v701 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v702 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v703 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v704, v705, v706, v707, v708);
      *(_QWORD *)&v2793 = v2794;
      *((_QWORD *)&v2793 + 1) = 2;
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 130) & 2) == 0 || !BYTE6(qword_1ECF4C780))
      {
        JSC::AssemblyHelpers::loadMegamorphicProperty(v8, v9, v2880, 0xFFFFFFFFLL, v700, (char)v11, v2879, v701, (uint64_t)&v2790, v702);
        v723 = v2790;
        v724 = HIDWORD(v2791);
        if (!HIDWORD(v2791))
          goto LABEL_1488;
        v725 = HIDWORD(v2793);
        v726 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
        if (v726 > DWORD2(v2793))
        {
          v727 = DWORD2(v2793) + ((unint64_t)DWORD2(v2793) >> 2);
          if (v727 >= 0x10)
            v728 = v727 + 1;
          else
            v728 = 16;
          if (v728 <= v726)
            v728 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
          v729 = (_BYTE *)v2793;
          if (v728 < 3)
          {
            *(_QWORD *)&v2793 = v2794;
            DWORD2(v2793) = 2;
            v731 = v2794;
          }
          else
          {
            if (v728 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A6F8);
            }
            v730 = 12 * v728;
            v731 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v728));
            DWORD2(v2793) = (v730 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)&v2793 = v731;
          }
          if (v725)
          {
            v2095 = v729;
            do
            {
              *(_DWORD *)v731 = *(_DWORD *)v2095;
              *(_QWORD *)(v731 + 4) = *(_QWORD *)(v2095 + 4);
              v2095 += 12;
              v731 += 12;
            }
            while (v2095 != &v729[12 * v725]);
          }
          if (v2794 != v729 && v729)
          {
            if ((_BYTE *)v2793 == v729)
            {
              *(_QWORD *)&v2793 = 0;
              DWORD2(v2793) = 0;
            }
            WTF::fastFree((unint64_t)v729, v716, v717, v718, v719, v720, v721, v722);
          }
        }
        if (v726 < HIDWORD(v2793))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A668);
        }
        v2096 = v2793 + 12 * HIDWORD(v2793);
        v2097 = (WTF *)((char *)v723 + 12 * v724);
        do
        {
          *(_DWORD *)v2096 = *(_DWORD *)v723;
          *(_QWORD *)(v2096 + 4) = *(_QWORD *)((char *)v723 + 4);
          v723 = (WTF *)((char *)v723 + 12);
          v2096 += 12;
        }
        while (v723 != v2097);
        goto LABEL_1487;
      }
      v1652 = *(_DWORD *)(v8 + 200);
      if (v1652 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v709, v710, v711, v712, v713, v714, v715);
        v1652 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1652) = v703 & 0x1F | 0xF8420120;
      *(_DWORD *)(v8 + 200) += 4;
      JSC::AssemblyHelpers::loadMegamorphicProperty(v8, v9, v2880, v703, 0, (char)v11, v2879, v701, (uint64_t)&v2790, v702);
      v723 = v2790;
      v1653 = HIDWORD(v2791);
      if (HIDWORD(v2791))
      {
        v1654 = HIDWORD(v2793);
        v726 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
        if (v726 > DWORD2(v2793))
        {
          v1655 = DWORD2(v2793) + ((unint64_t)DWORD2(v2793) >> 2);
          if (v1655 >= 0x10)
            v1656 = v1655 + 1;
          else
            v1656 = 16;
          if (v1656 <= v726)
            v1656 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
          v1657 = (_BYTE *)v2793;
          if (v1656 < 3)
          {
            *(_QWORD *)&v2793 = v2794;
            DWORD2(v2793) = 2;
            v1659 = v2794;
          }
          else
          {
            if (v1656 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A740);
            }
            v1658 = 12 * v1656;
            v1659 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v1656));
            DWORD2(v2793) = (v1658 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)&v2793 = v1659;
          }
          if (v1654)
          {
            v2346 = v1657;
            do
            {
              *(_DWORD *)v1659 = *(_DWORD *)v2346;
              *(_QWORD *)(v1659 + 4) = *(_QWORD *)(v2346 + 4);
              v2346 += 12;
              v1659 += 12;
            }
            while (v2346 != &v1657[12 * v1654]);
          }
          if (v2794 != v1657 && v1657)
          {
            if ((_BYTE *)v2793 == v1657)
            {
              *(_QWORD *)&v2793 = 0;
              DWORD2(v2793) = 0;
            }
            WTF::fastFree((unint64_t)v1657, v716, v717, v718, v719, v720, v721, v722);
          }
        }
        if (v726 < HIDWORD(v2793))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A6C0);
        }
        v2347 = v2793 + 12 * HIDWORD(v2793);
        v2348 = (WTF *)((char *)v723 + 12 * v1653);
        do
        {
          *(_DWORD *)v2347 = *(_DWORD *)v723;
          *(_QWORD *)(v2347 + 4) = *(_QWORD *)((char *)v723 + 4);
          v723 = (WTF *)((char *)v723 + 12);
          v2347 += 12;
        }
        while (v723 != v2348);
LABEL_1487:
        HIDWORD(v2793) = v726;
        v723 = v2790;
      }
LABEL_1488:
      if (v2792 != (_BYTE *)v723 && v723 != 0)
      {
        v2790 = 0;
        LODWORD(v2791) = 0;
        WTF::fastFree((unint64_t)v723, v716, v717, v718, v719, v720, v721, v722);
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v718, v719, v720, v721, v722);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2350, v2351, v2352, v2353, v2354, v2355, v2356);
      if ((_DWORD)v2707)
      {
        if (HIDWORD(v2793))
        {
          v2357 = 0;
          v2358 = 0;
          v2359 = 12 * HIDWORD(v2793);
          do
          {
            if (v2358 >= HIDWORD(v2793))
            {
              __break(0xC471u);
              JUMPOUT(0x19819A55CLL);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v2793 + v2357), v8, v938, v939, v940, v941, v942, v943);
            ++v2358;
            v2357 += 12;
          }
          while (v2359 != v2357);
        }
        JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
        for (i = *(_DWORD *)(v8 + 200); i < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i)
        {
          if ((i + 4) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
            i = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + i) = -721215457;
          i = *(_DWORD *)(v8 + 200) + 4;
        }
        v2361 = i;
        if ((i + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          v2361 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2361) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v2362 = 69;
        else
          v2362 = 65;
        v2718 = i;
        v2719 = 0;
        v2720 = v2362;
        v2721 = 15;
        v2722 = -1;
        if (i == -1)
          goto LABEL_1590;
        v2363 = (_QWORD *)(v7 + 88);
        v2364 = *(unsigned int *)(v7 + 100);
        if ((_DWORD)v2364 == *(_DWORD *)(v7 + 96))
        {
          v2365 = (void *)(v2364 + 1);
          v2366 = &v2718;
LABEL_1563:
          v2398 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2363, v2365, (unint64_t)v2366, v939, v940, v941, v942, v943);
          v2399 = *v2398;
          v2377 = v2398 + 1;
          v2400 = (_DWORD *)(*(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100));
          *v2400 = v2399;
          v2401 = v2400 + 1;
LABEL_1576:
          *v2401 = *(_QWORD *)v2377;
          ++*(_DWORD *)(v7 + 100);
          goto LABEL_1590;
        }
        v2377 = &v2719;
        goto LABEL_1575;
      }
      v2367 = HIDWORD(v2793);
      if (!HIDWORD(v2793))
        goto LABEL_1590;
      v2368 = v2793;
      v2369 = *(unsigned int *)(v7 + 96);
      v2370 = *(unsigned int *)(v7 + 100);
      v2371 = v2370 + HIDWORD(v2793);
      if (v2371 > v2369)
      {
        v2372 = v2369 + (v2369 >> 2);
        if (v2372 >= 0x10)
          v2373 = v2372 + 1;
        else
          v2373 = 16;
        if (v2373 <= v2371)
          v2373 = v2370 + HIDWORD(v2793);
        v2374 = *(_QWORD *)(v7 + 88);
        if (v2373 < 3)
        {
          v2376 = v7 + 104;
          *(_QWORD *)(v7 + 88) = v7 + 104;
          *(_DWORD *)(v7 + 96) = 2;
        }
        else
        {
          if (v2373 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A728);
          }
          v2375 = 12 * v2373;
          v2376 = WTF::fastMalloc((WTF *)(12 * v2373));
          *(_DWORD *)(v7 + 96) = (v2375 & 0xFFFFFFFC) / 0xC;
          *(_QWORD *)(v7 + 88) = v2376;
        }
        if ((_DWORD)v2370)
        {
          v2378 = v2374;
          do
          {
            *(_DWORD *)v2376 = *(_DWORD *)v2378;
            *(_QWORD *)(v2376 + 4) = *(_QWORD *)(v2378 + 4);
            v2378 += 12;
            v2376 += 12;
          }
          while (v2378 != v2374 + 12 * v2370);
        }
        if (v7 + 104 != v2374 && v2374)
        {
          if (*(_QWORD *)(v7 + 88) == v2374)
          {
            *(_QWORD *)(v7 + 88) = 0;
            *(_DWORD *)(v7 + 96) = 0;
          }
          WTF::fastFree(v2374, v937, v938, v939, v940, v941, v942, v943);
        }
      }
      v2379 = *(unsigned int *)(v7 + 100);
      if (v2371 < v2379)
      {
        __break(0xC471u);
        JUMPOUT(0x19819A680);
      }
      v2380 = *(_QWORD *)(v7 + 88) + 12 * v2379;
      v2381 = v2368 + 12 * v2367;
      do
      {
        *(_DWORD *)v2380 = *(_DWORD *)v2368;
        *(_QWORD *)(v2380 + 4) = *(_QWORD *)(v2368 + 4);
        v2368 += 12;
        v2380 += 12;
      }
      while (v2368 != v2381);
      goto LABEL_1589;
    case 3:
      *(_QWORD *)&v2793 = v2794;
      *((_QWORD *)&v2793 + 1) = 2;
      v732 = *((_QWORD *)this + 4);
      if (v732)
      {
        v733 = v11;
        if ((v732 & 1) != 0)
          v734 = (WTF::StringImpl *)(v732 & 0xFFFFFFFFFFFFFFFELL);
        else
          v734 = *(WTF::StringImpl **)(v732 + 8);
      }
      else
      {
        v733 = v11;
        v734 = 0;
      }
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v2714, *(_QWORD *)(v7 + 16), v2879);
      v735 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v2714);
      v2662 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v2714);
      v736 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v2714);
      v2795 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&v2714, (JSC::ScratchRegisterAllocator *)v8, 0, v737, v738, v739, v740, v741);
      v2790 = (WTF *)v2792;
      v2791 = 2;
      v2711 = (WTF *)v2713;
      v2712 = 2;
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 130) & 2) != 0 && BYTE6(qword_1ECF4C780))
      {
        v1660 = *(_DWORD *)(v8 + 200);
        if (v1660 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v742, v743, v744, v745, v746, v747, v748);
          v1660 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1660) = v736 & 0x1F | 0xF8420120;
        *(_DWORD *)(v8 + 200) += 4;
        JSC::AssemblyHelpers::storeMegamorphicProperty(v8, v9, v2880, v736, 0, (char)v733, v2879, v735, (uint64_t)&__dst, v2662);
        v2702 = (uint64_t)&v2790;
        v2703 = &v2711;
        std::__memberwise_forward_assign[abi:sn180100]<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &>,std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,0ul,1ul>((uint64_t)&v2702, (unsigned int *)&__dst, v1661, v1662, v1663, v1664, v1665, v1666);
        v1667 = v2707;
        if (v2710 != (_BYTE *)v2707 && v2707)
        {
          v2707 = 0;
          v2708 = 0;
          WTF::fastFree((unint64_t)v1667, v755, v756, v757, v758, v759, v760, v761);
        }
        v763 = __dst;
      }
      else
      {
        JSC::AssemblyHelpers::storeMegamorphicProperty(v8, v9, v2880, 0xFFFFFFFFLL, v734, (char)v733, v2879, v735, (uint64_t)&__dst, v2662);
        v2702 = (uint64_t)&v2790;
        v2703 = &v2711;
        std::__memberwise_forward_assign[abi:sn180100]<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &>,std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,0ul,1ul>((uint64_t)&v2702, (unsigned int *)&__dst, v749, v750, v751, v752, v753, v754);
        v762 = v2707;
        if (v2710 != (_BYTE *)v2707 && v2707)
        {
          v2707 = 0;
          v2708 = 0;
          WTF::fastFree((unint64_t)v762, v755, v756, v757, v758, v759, v760, v761);
        }
        v763 = __dst;
      }
      if (v2706 != v763 && v763)
      {
        __dst = 0;
        LODWORD(v2705) = 0;
        WTF::fastFree((unint64_t)v763, v755, v756, v757, v758, v759, v760, v761);
      }
      v2646 = (JSC::AssemblerBuffer *)(v8 + 56);
      v2658 = *(_DWORD *)(v8 + 200);
      if ((signed int)v2658 < *(_DWORD *)(v8 + 52))
      {
        do
        {
          if (v2658 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2646, (uint64_t)v755, v756, v757, v758, v759, v760, v761);
            v2658 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2658) = -721215457;
          v2638 = *(_DWORD *)(v8 + 200) + 4;
          *(_DWORD *)(v8 + 200) = v2638;
          v2658 = v2638;
        }
        while (v2638 < *(_DWORD *)(v8 + 52));
      }
      *(_DWORD *)(v8 + 208) = 0;
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v2714, (const char *)v8, (const char *)&v2795, v757, v758, v759, v760, v761);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v1668, v1669, v1670, v1671, v1672, v1673, v1674);
      if (v2717)
      {
        if (HIDWORD(v2791))
        {
          v1682 = 0;
          v1683 = 0;
          v1684 = 12 * HIDWORD(v2791);
          do
          {
            if (v1683 >= HIDWORD(v2791))
            {
              __break(0xC471u);
              JUMPOUT(0x19819A554);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2790 + v1682), v8, v1676, v1677, v1678, v1679, v1680, v1681);
            ++v1683;
            v1682 += 12;
          }
          while (v1684 != v1682);
        }
        JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v2714, (const char *)v8, (const char *)&v2795, v1677, v1678, v1679, v1680, v1681);
        for (j = *(_DWORD *)(v8 + 200); j < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = j)
        {
          if ((j + 4) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2646, v1685, v1676, v1677, v1678, v1679, v1680, v1681);
            j = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + j) = -721215457;
          j = *(_DWORD *)(v8 + 200) + 4;
        }
        v1687 = j;
        if ((j + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2646, v1685, v1676, v1677, v1678, v1679, v1680, v1681);
          v1687 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1687) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v1688 = 69;
        else
          v1688 = 65;
        v2697 = j;
        v2698 = 0;
        v2699 = v1688;
        v2700 = 15;
        v2701 = -1;
        if (j != -1)
        {
          v1689 = *(unsigned int *)(v7 + 100);
          if ((_DWORD)v1689 == *(_DWORD *)(v7 + 96))
          {
            v1690 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v1689 + 1), (unint64_t)&v2697, v1677, v1678, v1679, v1680, v1681);
            v1692 = *v1690;
            v1691 = v1690 + 1;
            v1693 = *(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100);
            *(_DWORD *)v1693 = v1692;
          }
          else
          {
            v1691 = &v2698;
            v1693 = *(_QWORD *)(v7 + 88) + 12 * v1689;
            *(_DWORD *)v1693 = j;
          }
          *(_QWORD *)(v1693 + 4) = *(_QWORD *)v1691;
          ++*(_DWORD *)(v7 + 100);
        }
      }
      else
      {
        v1694 = HIDWORD(v2791);
        if (HIDWORD(v2791))
        {
          v1695 = v2790;
          v1696 = *(unsigned int *)(v7 + 96);
          v1697 = *(unsigned int *)(v7 + 100);
          v1698 = v1697 + HIDWORD(v2791);
          if (v1698 > v1696)
          {
            v1699 = v1696 + (v1696 >> 2);
            if (v1699 >= 0x10)
              v1700 = v1699 + 1;
            else
              v1700 = 16;
            if (v1700 <= v1698)
              v1700 = v1697 + HIDWORD(v2791);
            v1701 = *(_QWORD *)(v7 + 88);
            if (v1700 < 3)
            {
              v1703 = v7 + 104;
              *(_QWORD *)(v7 + 88) = v7 + 104;
              *(_DWORD *)(v7 + 96) = 2;
            }
            else
            {
              if (v1700 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A708);
              }
              v1702 = 12 * v1700;
              v1703 = WTF::fastMalloc((WTF *)(12 * v1700));
              *(_DWORD *)(v7 + 96) = (v1702 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v7 + 88) = v1703;
            }
            if ((_DWORD)v1697)
            {
              v2177 = v1701;
              do
              {
                *(_DWORD *)v1703 = *(_DWORD *)v2177;
                *(_QWORD *)(v1703 + 4) = *(_QWORD *)(v2177 + 4);
                v2177 += 12;
                v1703 += 12;
              }
              while (v2177 != v1701 + 12 * v1697);
            }
            if (v7 + 104 != v1701 && v1701)
            {
              if (*(_QWORD *)(v7 + 88) == v1701)
              {
                *(_QWORD *)(v7 + 88) = 0;
                *(_DWORD *)(v7 + 96) = 0;
              }
              WTF::fastFree(v1701, v1675, v1676, v1677, v1678, v1679, v1680, v1681);
            }
          }
          v2178 = *(unsigned int *)(v7 + 100);
          if (v1698 < v2178)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A678);
          }
          v2179 = *(_QWORD *)(v7 + 88) + 12 * v2178;
          v2180 = (WTF *)((char *)v1695 + 12 * v1694);
          do
          {
            *(_DWORD *)v2179 = *(_DWORD *)v1695;
            *(_QWORD *)(v2179 + 4) = *(_QWORD *)((char *)v1695 + 4);
            v1695 = (WTF *)((char *)v1695 + 12);
            v2179 += 12;
          }
          while (v1695 != v2180);
          *(_DWORD *)(v7 + 100) = v1698;
        }
      }
      if (HIDWORD(v2712))
      {
        v2181 = 0;
        v2182 = 0;
        v2183 = 12 * HIDWORD(v2712);
        do
        {
          if (v2182 >= HIDWORD(v2712))
          {
            __break(0xC471u);
            JUMPOUT(0x19819A544);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2711 + v2181), v8, v1676, v1677, v1678, v1679, v1680, v1681);
          ++v2182;
          v2181 += 12;
        }
        while (v2183 != v2181);
      }
      __dst = 0;
      v2705 = 0;
      v2191 = JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall((JSC::ScratchRegisterAllocator **)v7, (const JSC::RegisterSet *)&__dst, v1676, v1677, v1678, v1679, v1680, v1681);
      v2192 = v2184;
      __dst = v2706;
      v2705 = 3;
      if (v2880 == 1)
      {
        v2193 = 0;
      }
      else
      {
        v2706[0] = v2880 | 0x100;
        v2193 = 1;
        HIDWORD(v2705) = 1;
      }
      if (v733 != 2)
      {
        v2706[v2193++] = v733 | 0x200;
        HIDWORD(v2705) = v2193;
      }
      if (v2662 == 3)
      {
        if (!v2193)
          goto LABEL_1328;
      }
      else
      {
        v2706[v2193++] = v2662 | 0x300;
        HIDWORD(v2705) = v2193;
      }
      do
      {
        v2194 = 0;
        v2195 = 0;
        v2196 = (char *)__dst;
        v2197 = v2193;
        do
        {
          if ((*((_BYTE *)__dst + v2194 + 1) & 0x40) != 0)
            goto LABEL_2031;
          v2195 |= 1 << *((_BYTE *)__dst + v2194 + 1);
          v2194 += 2;
        }
        while (2 * v2193 != v2194);
        v2198 = 0;
        do
        {
          v2199 = *((_BYTE *)__dst + v2198) & 0x7F;
          if (v2199 >= 0x40)
            goto LABEL_2031;
          v2195 &= ~(1 << v2199);
          v2198 += 2;
        }
        while (2 * v2193 != v2198);
        v2200 = (uint8x8_t)vcnt_s8((int8x8_t)v2195);
        v2200.i16[0] = vaddlv_u8(v2200);
        v2201 = v2200.i32[0];
        v2202 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v2195));
        v2202.i16[0] = vaddlv_u8(v2202);
        if (v2202.i32[0] + v2201)
        {
          v2203 = 0;
          if (v2193 <= 1)
            v2204 = 1;
          else
            v2204 = v2193;
          v2205 = 2 * v2204;
          while (1)
          {
            v2206 = *((unsigned __int8 *)__dst + v2203 + 1);
            if ((v2206 & 0x7Fu) >= 0x40)
              goto LABEL_2031;
            if (((v2195 >> (v2206 & 0x7F)) & 1) != 0)
              break;
            v2203 += 2;
            if (v2205 == v2203)
              goto LABEL_1323;
          }
          v2207 = *((unsigned __int8 *)__dst + v2203);
          if (v2207 == v2206)
            goto LABEL_1321;
          v2208 = (char)v2207;
          if ((char)v2207 == 63)
          {
            v2209 = *(_DWORD *)(v8 + 200);
            v2210 = *(_DWORD *)(v8 + 192);
            if (v2206 != 31)
            {
              v2212 = v2206 & 0x1F | 0xD2800000;
              if (v2209 + 4 <= v2210)
              {
LABEL_1320:
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2209) = v2212;
                *(_DWORD *)(v8 + 200) += 4;
                v2196 = (char *)__dst;
                v2197 = HIDWORD(v2705);
LABEL_1321:
                memmove(&v2196[v2203], &v2196[v2203 + 2], 2 * v2197 - v2203 - 2);
                v2193 = HIDWORD(v2705) - 1;
                goto LABEL_1322;
              }
LABEL_1316:
              JSC::AssemblerBuffer::outOfLineGrow(v2646, (uint64_t)v2184, v2185, v2186, v2187, v2188, v2189, v2190);
              v2209 = *(_DWORD *)(v8 + 200);
              goto LABEL_1320;
            }
          }
          else
          {
            v2209 = *(_DWORD *)(v8 + 200);
            v2210 = *(_DWORD *)(v8 + 192);
            if ((char)v2206 != 31 && v2208 != 31)
            {
              v2212 = v2206 & 0xFFE0FFFF | ((v2208 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_1319;
            }
          }
          v2212 = (char)v2206 | (32 * v2208) | 0x91000000;
LABEL_1319:
          if (v2209 + 4 <= v2210)
            goto LABEL_1320;
          goto LABEL_1316;
        }
        v2664 = v2192;
        v2213 = *(_BYTE *)__dst;
        v2214 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v2214, v2186, v2187, v2188, v2189, v2190);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v2705) - 2);
        v2215 = (HIDWORD(v2705) - 1);
        v1731 = HIDWORD(v2705) == 1;
        HIDWORD(v2705) = v2215;
        v2216 = (unsigned __int8 *)__dst;
        v2217 = (const JSC::RegisterSet *)((char *)__dst + 2 * v2215);
        if (v1731)
        {
          v2224 = 0;
          v2225 = 0;
          v2220 = 0;
          v2184 = v2217;
        }
        else
        {
          v2218 = 2 * v2215;
          v2219 = __dst;
          while (*v2219 != v2214)
          {
            v2219 += 2;
            v2218 -= 2;
            if (!v2218)
              goto LABEL_1302;
          }
          *v2219 = v2213;
LABEL_1302:
          v2220 = 0;
          v2221 = v2216;
          v2184 = v2217;
          v2222 = (char *)v2217;
          do
          {
            if (*v2216 == v2216[1])
            {
              v2223 = v2216;
              if (v2222 != (char *)__dst + 2 * HIDWORD(v2705))
              {
                if (v2216 == (unsigned __int8 *)v2184)
                {
                  v2223 = (unsigned __int8 *)v2222;
                }
                else
                {
                  v2645 = v2221 - (unsigned __int8 *)v2184;
                  v2652 = v2222;
                  memmove(v2222, v2184, v2221 - (unsigned __int8 *)v2184);
                  v2223 = (unsigned __int8 *)&v2652[v2645];
                }
              }
              v2184 = (const JSC::RegisterSet *)(v2216 + 2);
              ++v2220;
              v2222 = (char *)v2223;
            }
            v2216 += 2;
            v2221 += 2;
          }
          while (v2216 < (unsigned __int8 *)v2217);
          v2216 = (unsigned __int8 *)__dst;
          v2224 = HIDWORD(v2705);
          v2225 = HIDWORD(v2705);
          v2217 = (const JSC::RegisterSet *)v2222;
        }
        v2226 = &v2216[2 * v2224];
        v2192 = v2664;
        if (v2184 != (const JSC::RegisterSet *)v2226)
        {
          memmove(v2217, v2184, v2226 - (unsigned __int8 *)v2184);
          v2225 = HIDWORD(v2705);
        }
        v2193 = v2225 - v2220;
LABEL_1322:
        HIDWORD(v2705) = v2193;
LABEL_1323:
        ;
      }
      while (v2193);
      v2227 = __dst;
      if (v2706 != __dst && __dst)
      {
        __dst = 0;
        LODWORD(v2705) = 0;
        WTF::fastFree((unint64_t)v2227, v2184, v2185, v2186, v2187, v2188, v2189, v2190);
      }
LABEL_1328:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v9, 0, v2186, v2187, v2188, v2189, v2190);
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199EB0);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
      v2233 = *(_BYTE *)(v8 + 272);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, (uint64_t)operationPutByMegamorphicReallocating, v2233, v2228, v2229, v2230, v2231, v2232);
      *(_DWORD *)(v8 + 208) = 0;
      v2241 = *(_DWORD *)(v8 + 200);
      if (v2241 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v2646, v2234, v2235, v2236, v2237, v2238, v2239, v2240);
        v2241 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2241) = (32 * (v2233 & 0x1F)) | 0xD63F0000;
      *(_DWORD *)(v8 + 200) += 4;
      v2702 = 0;
      v2703 = 0;
      v2242 = *(JSC::ScratchRegisterAllocator **)(v7 + 32);
      for (k = 0; v2191; v2191 &= v2191 - 1)
        k |= v2191 & -(uint64_t)v2191;
      __dst = (void *)k;
      v2705 = 0;
      JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v2242, (JSC::AssemblyHelpers *)&__dst, (const JSC::RegisterSet *)&v2702, v2192, 0, v2238, v2239, v2240);
      for (m = *(_DWORD *)(v8 + 200); (signed int)m < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = m)
      {
        if (m + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2646, v2244, v2245, v2246, v2247, v2248, v2249, v2250);
          m = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + m) = -721215457;
        m = *(_DWORD *)(v8 + 200) + 4;
      }
      v2252 = m;
      if (m + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v2646, v2244, v2245, v2246, v2247, v2248, v2249, v2250);
        v2252 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2252) = 335544320;
      *(_DWORD *)(v8 + 200) += 4;
      if (*(_BYTE *)(v8 + 328))
        v2253 = 69;
      else
        v2253 = 65;
      __dst = (void *)m;
      LOBYTE(v2705) = v2253;
      *(_WORD *)((char *)&v2705 + 1) = 15;
      BYTE3(v2705) = -1;
      v2696 = v2658;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, &v2696, v8, v2246, v2247, v2248, v2249, v2250);
      v2254 = v2711;
      if (v2713 != (_WORD *)v2711 && v2711)
      {
        v2711 = 0;
        LODWORD(v2712) = 0;
        WTF::fastFree((unint64_t)v2254, v937, v938, v939, v940, v941, v942, v943);
      }
      v2255 = v2790;
      if (v2792 != (_BYTE *)v2790 && v2790)
      {
        v2790 = 0;
        LODWORD(v2791) = 0;
        WTF::fastFree((unint64_t)v2255, v937, v938, v939, v940, v941, v942, v943);
      }
      v1734 = (WTF *)v2793;
LABEL_1472:
      if (v2794 != (_BYTE *)v1734 && v1734)
      {
        *(_QWORD *)&v2793 = 0;
        DWORD2(v2793) = 0;
        goto LABEL_1861;
      }
      return;
    case 0x13:
      v2714 = (WTF *)v2716;
      v2715 = 2;
      v769 = *((_QWORD *)this + 4);
      if (v769)
      {
        if ((v769 & 1) != 0)
          v770 = v769 & 0xFFFFFFFFFFFFFFFELL;
        else
          v770 = *(_QWORD *)(v769 + 8);
      }
      else
      {
        v770 = 0;
      }
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v771 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v772 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v773 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v774, v775, v776, v777, v778);
      *(_QWORD *)&v2793 = v2794;
      *((_QWORD *)&v2793 + 1) = 2;
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 130) & 2) != 0 && BYTE6(qword_1ECF4C780))
      {
        v1704 = *(_DWORD *)(v8 + 200);
        if (v1704 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v779, v780, v781, v782, v783, v784, v785);
          v1704 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1704) = v773 & 0x1F | 0xF8420120;
        *(_DWORD *)(v8 + 200) += 4;
        JSC::AssemblyHelpers::hasMegamorphicProperty(v8, v9, v2880, v773, 0, (char)v11, v2879, v771, (uint64_t)&v2790, v772);
        v793 = v2790;
        v1705 = HIDWORD(v2791);
        if (!HIDWORD(v2791))
        {
LABEL_1544:
          if (v2792 != (_BYTE *)v793 && v793 != 0)
          {
            v2790 = 0;
            LODWORD(v2791) = 0;
            WTF::fastFree((unint64_t)v793, v786, v787, v788, v789, v790, v791, v792);
          }
          JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v788, v789, v790, v791, v792);
          JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2386, v2387, v2388, v2389, v2390, v2391, v2392);
          if ((_DWORD)v2707)
          {
            if (HIDWORD(v2793))
            {
              v2393 = 0;
              v2394 = 0;
              v2395 = 12 * HIDWORD(v2793);
              do
              {
                if (v2394 >= HIDWORD(v2793))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19819A564);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v2793 + v2393), v8, v938, v939, v940, v941, v942, v943);
                ++v2394;
                v2393 += 12;
              }
              while (v2395 != v2393);
            }
            JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
            for (i = *(_DWORD *)(v8 + 200); i < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i)
            {
              if ((i + 4) > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
                i = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + i) = -721215457;
              i = *(_DWORD *)(v8 + 200) + 4;
            }
            v2396 = i;
            if ((i + 4) > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
              v2396 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2396) = 335544320;
            *(_DWORD *)(v8 + 200) += 4;
            if (*(_BYTE *)(v8 + 328))
              v2397 = 69;
            else
              v2397 = 65;
            v2691 = i;
            v2692 = 0;
            v2693 = v2397;
            v2694 = 15;
            v2695 = -1;
            if (i == -1)
              goto LABEL_1590;
            v2363 = (_QWORD *)(v7 + 88);
            v2364 = *(unsigned int *)(v7 + 100);
            if ((_DWORD)v2364 == *(_DWORD *)(v7 + 96))
            {
              v2365 = (void *)(v2364 + 1);
              v2366 = &v2691;
              goto LABEL_1563;
            }
            v2377 = &v2692;
LABEL_1575:
            v2411 = (int *)(*v2363 + 12 * v2364);
            *v2411 = i;
            v2401 = v2411 + 1;
            goto LABEL_1576;
          }
          v2402 = HIDWORD(v2793);
          if (!HIDWORD(v2793))
          {
LABEL_1590:
            v2264 = v2793;
            v2265 = v2794 == (_BYTE *)v2793;
LABEL_1591:
            if (!v2265 && v2264 != 0)
            {
              *(_QWORD *)&v2793 = 0;
              DWORD2(v2793) = 0;
              WTF::fastFree(v2264, v937, v938, v939, v940, v941, v942, v943);
            }
LABEL_1802:
            v1734 = v2714;
            v1735 = v2716 == (_BYTE *)v2714;
            goto LABEL_1856;
          }
          v2403 = v2793;
          v2404 = *(unsigned int *)(v7 + 96);
          v2405 = *(unsigned int *)(v7 + 100);
          v2371 = v2405 + HIDWORD(v2793);
          if (v2371 > v2404)
          {
            v2406 = v2404 + (v2404 >> 2);
            if (v2406 >= 0x10)
              v2407 = v2406 + 1;
            else
              v2407 = 16;
            if (v2407 <= v2371)
              v2407 = v2405 + HIDWORD(v2793);
            v2408 = *(_QWORD *)(v7 + 88);
            if (v2407 < 3)
            {
              v2410 = v7 + 104;
              *(_QWORD *)(v7 + 88) = v7 + 104;
              *(_DWORD *)(v7 + 96) = 2;
            }
            else
            {
              if (v2407 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A730);
              }
              v2409 = 12 * v2407;
              v2410 = WTF::fastMalloc((WTF *)(12 * v2407));
              *(_DWORD *)(v7 + 96) = (v2409 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v7 + 88) = v2410;
            }
            if ((_DWORD)v2405)
            {
              v2412 = v2408;
              do
              {
                *(_DWORD *)v2410 = *(_DWORD *)v2412;
                *(_QWORD *)(v2410 + 4) = *(_QWORD *)(v2412 + 4);
                v2412 += 12;
                v2410 += 12;
              }
              while (v2412 != v2408 + 12 * v2405);
            }
            if (v7 + 104 != v2408 && v2408)
            {
              if (*(_QWORD *)(v7 + 88) == v2408)
              {
                *(_QWORD *)(v7 + 88) = 0;
                *(_DWORD *)(v7 + 96) = 0;
              }
              WTF::fastFree(v2408, v937, v938, v939, v940, v941, v942, v943);
            }
          }
          v2413 = *(unsigned int *)(v7 + 100);
          if (v2371 < v2413)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A688);
          }
          v2414 = *(_QWORD *)(v7 + 88) + 12 * v2413;
          v2415 = v2403 + 12 * v2402;
          do
          {
            *(_DWORD *)v2414 = *(_DWORD *)v2403;
            *(_QWORD *)(v2414 + 4) = *(_QWORD *)(v2403 + 4);
            v2403 += 12;
            v2414 += 12;
          }
          while (v2403 != v2415);
LABEL_1589:
          *(_DWORD *)(v7 + 100) = v2371;
          goto LABEL_1590;
        }
        v1706 = HIDWORD(v2793);
        v796 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
        if (v796 > DWORD2(v2793))
        {
          v1707 = DWORD2(v2793) + ((unint64_t)DWORD2(v2793) >> 2);
          if (v1707 >= 0x10)
            v1708 = v1707 + 1;
          else
            v1708 = 16;
          if (v1708 <= v796)
            v1708 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
          v1709 = (_BYTE *)v2793;
          if (v1708 < 3)
          {
            *(_QWORD *)&v2793 = v2794;
            DWORD2(v2793) = 2;
            v1711 = v2794;
          }
          else
          {
            if (v1708 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A748);
            }
            v1710 = 12 * v1708;
            v1711 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v1708));
            DWORD2(v2793) = (v1710 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)&v2793 = v1711;
          }
          if (v1706)
          {
            v2382 = v1709;
            do
            {
              *(_DWORD *)v1711 = *(_DWORD *)v2382;
              *(_QWORD *)(v1711 + 4) = *(_QWORD *)(v2382 + 4);
              v2382 += 12;
              v1711 += 12;
            }
            while (v2382 != &v1709[12 * v1706]);
          }
          if (v2794 != v1709 && v1709)
          {
            if ((_BYTE *)v2793 == v1709)
            {
              *(_QWORD *)&v2793 = 0;
              DWORD2(v2793) = 0;
            }
            WTF::fastFree((unint64_t)v1709, v786, v787, v788, v789, v790, v791, v792);
          }
        }
        if (v796 < HIDWORD(v2793))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A6C8);
        }
        v2383 = v2793 + 12 * HIDWORD(v2793);
        v2384 = (WTF *)((char *)v793 + 12 * v1705);
        do
        {
          *(_DWORD *)v2383 = *(_DWORD *)v793;
          *(_QWORD *)(v2383 + 4) = *(_QWORD *)((char *)v793 + 4);
          v793 = (WTF *)((char *)v793 + 12);
          v2383 += 12;
        }
        while (v793 != v2384);
      }
      else
      {
        JSC::AssemblyHelpers::hasMegamorphicProperty(v8, v9, v2880, 0xFFFFFFFFLL, v770, (char)v11, v2879, v771, (uint64_t)&v2790, v772);
        v793 = v2790;
        v794 = HIDWORD(v2791);
        if (!HIDWORD(v2791))
          goto LABEL_1544;
        v795 = HIDWORD(v2793);
        v796 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
        if (v796 > DWORD2(v2793))
        {
          v797 = DWORD2(v2793) + ((unint64_t)DWORD2(v2793) >> 2);
          if (v797 >= 0x10)
            v798 = v797 + 1;
          else
            v798 = 16;
          if (v798 <= v796)
            v798 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2791);
          v799 = (_BYTE *)v2793;
          if (v798 < 3)
          {
            *(_QWORD *)&v2793 = v2794;
            DWORD2(v2793) = 2;
            v801 = v2794;
          }
          else
          {
            if (v798 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A700);
            }
            v800 = 12 * v798;
            v801 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v798));
            DWORD2(v2793) = (v800 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)&v2793 = v801;
          }
          if (v795)
          {
            v2098 = v799;
            do
            {
              *(_DWORD *)v801 = *(_DWORD *)v2098;
              *(_QWORD *)(v801 + 4) = *(_QWORD *)(v2098 + 4);
              v2098 += 12;
              v801 += 12;
            }
            while (v2098 != &v799[12 * v795]);
          }
          if (v2794 != v799 && v799)
          {
            if ((_BYTE *)v2793 == v799)
            {
              *(_QWORD *)&v2793 = 0;
              DWORD2(v2793) = 0;
            }
            WTF::fastFree((unint64_t)v799, v786, v787, v788, v789, v790, v791, v792);
          }
        }
        if (v796 < HIDWORD(v2793))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A670);
        }
        v2099 = v2793 + 12 * HIDWORD(v2793);
        v2100 = (WTF *)((char *)v793 + 12 * v794);
        do
        {
          *(_DWORD *)v2099 = *(_DWORD *)v793;
          *(_QWORD *)(v2099 + 4) = *(_QWORD *)((char *)v793 + 4);
          v793 = (WTF *)((char *)v793 + 12);
          v2099 += 12;
        }
        while (v793 != v2100);
      }
      HIDWORD(v2793) = v796;
      v793 = v2790;
      goto LABEL_1544;
    case 0x14:
      JSC::MacroAssemblerARM64::load8(v8, v2880 | 0x400000000, v2879, v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, v8, 0, v2879, v683, v684, v685, v686, (uint64_t)&v2874, v687);
      v694 = v2874;
      if (v2874 != -1)
      {
        v695 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v695 == *(_DWORD *)(a4 + 8))
        {
          v696 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v695 + 1), (unint64_t)&v2874, v688, v689, v690, v691, v692);
          v698 = *v696;
          v697 = (uint64_t *)(v696 + 1);
          v694 = v698;
          LODWORD(v695) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v697 = &v2875;
        }
        v1381 = *(_QWORD *)a4 + 12 * v695;
        *(_DWORD *)v1381 = v694;
        *(_QWORD *)(v1381 + 4) = *v697;
        ++*(_DWORD *)(a4 + 12);
      }
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xE, v8, 0, v2879, v689, v690, v691, v692, (uint64_t)v2873, v693);
      v455 = v2873[0];
      if (v2873[0] == -1)
        goto LABEL_608;
      v456 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v456 == *(_DWORD *)(a4 + 8))
      {
        v457 = (void *)(v456 + 1);
        v458 = v2873;
        goto LABEL_556;
      }
      v1107 = v2873;
      goto LABEL_606;
    case 0x15:
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199C24);
      }
      v764 = v2880 | 0x500000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load8(v8, v764, *(char *)(v8 + 304), v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch32(v8, 1, 17, 2, v765, v766, v767, v768, (uint64_t)v2872);
      v455 = v2872[0];
      if (v2872[0] == -1)
        goto LABEL_608;
      v456 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v456 == *(_DWORD *)(a4 + 8))
      {
        v457 = (void *)(v456 + 1);
        v458 = v2872;
        goto LABEL_556;
      }
      v1107 = v2872;
      goto LABEL_606;
    case 0x16:
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199B88);
      }
      v627 = v2880 | 0x500000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load8(v8, v627, *(char *)(v8 + 304), v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch32(v8, 1, 17, 33, v628, v629, v630, v631, (uint64_t)&v2870);
      v637 = v2870;
      if (v2870 != -1)
      {
        v638 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v638 == *(_DWORD *)(a4 + 8))
        {
          v639 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v638 + 1), (unint64_t)&v2870, v632, v633, v634, v635, v636);
          v641 = *v639;
          v640 = v639 + 1;
          v637 = v641;
          LODWORD(v638) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v640 = &v2871;
        }
        v1446 = *(_QWORD *)a4 + 12 * v638;
        *(_DWORD *)v1446 = v637;
        *(_QWORD *)(v1446 + 4) = *(_QWORD *)v640;
        ++*(_DWORD *)(a4 + 12);
      }
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199D40);
      }
      v1447 = v2880 | 0x2800000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
      JSC::MacroAssemblerARM64::load64(v8, v1447, *(char *)(v8 + 272), v632, v633, v634, v635, v636);
      JSC::MacroAssemblerARM64::branchTest64(v8, 1, 16, 0xFFFFFFFFLL, v1448, v1449, v1450, v1451, (uint64_t)&v2868, v1452);
      v1458 = v2868;
      if (v2868 != -1)
      {
        v1459 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v1459 == *(_DWORD *)(a4 + 8))
        {
          v1460 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v1459 + 1), (unint64_t)&v2868, v1453, v1454, v1455, v1456, v1457);
          v1462 = *v1460;
          v1461 = (uint64_t *)(v1460 + 1);
          v1458 = v1462;
          LODWORD(v1459) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v1461 = &v2869;
        }
        v1506 = *(_QWORD *)a4 + 12 * v1459;
        *(_DWORD *)v1506 = v1458;
        *(_QWORD *)(v1506 + 4) = *v1461;
        ++*(_DWORD *)(a4 + 12);
      }
      v1507 = v2880 | 0x2000000000;
      goto LABEL_625;
    case 0x17:
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199BA8);
      }
      v668 = v2880 | 0x500000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load8(v8, v668, *(char *)(v8 + 304), v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch32(v8, 1, 17, 34, v669, v670, v671, v672, (uint64_t)&v2866);
      v678 = v2866;
      if (v2866 != -1)
      {
        v679 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v679 == *(_DWORD *)(a4 + 8))
        {
          v680 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v679 + 1), (unint64_t)&v2866, v673, v674, v675, v676, v677);
          v682 = *v680;
          v681 = v680 + 1;
          v678 = v682;
          LODWORD(v679) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v681 = &v2867;
        }
        v1463 = *(_QWORD *)a4 + 12 * v679;
        *(_DWORD *)v1463 = v678;
        *(_QWORD *)(v1463 + 4) = *(_QWORD *)v681;
        ++*(_DWORD *)(a4 + 12);
      }
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199D60);
      }
      v1464 = v2880 | 0x1800000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load8(v8, v1464, *(char *)(v8 + 304), v673, v674, v675, v676, v677);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v8, 1, 17, v1465, v1466, v1467, v1468, (uint64_t)&v2864, v1469);
      v1470 = v2864;
      if (v2864 != -1)
      {
        v1471 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v1471 == *(_DWORD *)(a4 + 8))
        {
          v1472 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v1471 + 1), (unint64_t)&v2864, v1453, v1454, v1455, v1456, v1457);
          v1474 = *v1472;
          v1473 = (uint64_t *)(v1472 + 1);
          v1470 = v1474;
          LODWORD(v1471) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v1473 = &v2865;
        }
        v1508 = *(_QWORD *)a4 + 12 * v1471;
        *(_DWORD *)v1508 = v1470;
        *(_QWORD *)(v1508 + 4) = *v1473;
        ++*(_DWORD *)(a4 + 12);
      }
      v1507 = v2880 | 0x1C00000000;
LABEL_625:
      JSC::MacroAssemblerARM64::load32(v8, v1507, (char)v11, v1453, v1454, v1455, v1456, v1457);
      v1509 = *(_DWORD *)(v8 + 200);
      if (v1509 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v820, v821, v822, v823, v824, v825, v826);
        v1509 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1509) = (v11 | ((v11 & 0x1F) << 16) | 0xAA0003E0) - 128;
      *(_DWORD *)(v8 + 200) += 4;
      goto LABEL_1249;
    case 0x18:
      v613 = *(_QWORD *)(v7 + 32);
      v614 = *(_QWORD *)(v7 + 16);
      v615 = *(char *)(v614 + 117);
      v616 = *(char *)(v7 + 176);
      JSC::MacroAssemblerARM64::branch64(v613, 1, *(char *)(v614 + 116), *((_QWORD *)this + 5), v16, v17, v18, v19, (uint64_t)&__dst);
      v622 = (int)__dst;
      if ((_DWORD)__dst != -1)
      {
        v623 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v623 == *(_DWORD *)(a4 + 8))
        {
          v624 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v623 + 1), (unint64_t)&__dst, v617, v618, v619, v620, v621);
          v626 = *v624;
          v625 = v624 + 1;
          v622 = v626;
          LODWORD(v623) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v625 = (void **)((char *)&__dst + 4);
        }
        v1368 = *(_QWORD *)a4 + 12 * v623;
        *(_DWORD *)v1368 = v622;
        *(_QWORD *)(v1368 + 4) = *v625;
        ++*(_DWORD *)(a4 + 12);
      }
      JSC::MacroAssemblerARM64::load64(v613, *((_QWORD *)this + 6) + 8 * *((unsigned int *)this + 14) + 32, v616, v617, v618, v619, v620, v621);
      JSC::MacroAssemblerARM64::branchTest64(v613, 0, v616, 0xFFFFFFFFLL, v1369, v1370, v1371, v1372, (uint64_t)&v2714, v1373);
      v1374 = (int)v2714;
      if ((_DWORD)v2714 != -1)
      {
        v1375 = *(unsigned int *)(v7 + 140);
        if ((_DWORD)v1375 == *(_DWORD *)(v7 + 136))
        {
          v1376 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 128, (void *)(v1375 + 1), (unint64_t)&v2714, v822, v823, v824, v825, v826);
          v1378 = *v1376;
          v1377 = v1376 + 1;
          v1374 = v1378;
          v1379 = *(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140);
        }
        else
        {
          v1377 = (WTF **)((char *)&v2714 + 4);
          v1379 = *(_QWORD *)(v7 + 128) + 12 * v1375;
        }
        *(_DWORD *)v1379 = v1374;
        *(_QWORD *)(v1379 + 4) = *v1377;
        ++*(_DWORD *)(v7 + 140);
      }
      if (v615 == v616)
        goto LABEL_1249;
      if ((_DWORD)v616 == 63)
      {
        if (v615 != 31)
        {
          v1380 = v615 & 0x1F | 0xD2800000;
          goto LABEL_1690;
        }
      }
      else if (v615 != 31 && (_DWORD)v616 != 31)
      {
        v1380 = v615 | ((v616 & 0x1F) << 16) | 0xAA0003E0;
        goto LABEL_1690;
      }
      v1380 = v615 | (32 * v616) | 0x91000000;
LABEL_1690:
      v2477 = *(_DWORD *)(v613 + 200);
      v2476 = (unsigned int *)(v613 + 200);
      v2475 = v2477;
      if (v2477 + 4 > *(v2476 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2476 - 36), v820, v821, v822, v823, v824, v825, v826);
        v2475 = *v2476;
      }
      *(_DWORD *)(*((_QWORD *)v2476 - 18) + v2475) = v1380;
      *v2476 += 4;
      goto LABEL_1249;
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x21:
    case 0x3D:
    case 0x6F:
      v121 = *(_QWORD *)(v7 + 32);
      v122 = *(unsigned __int8 **)(v7 + 16);
      v123 = v122[116];
      v2661 = *(unsigned __int8 *)(v7 + 176);
      v124 = v122[116];
      if ((v122[122] & 0xFB) == 1)
        v124 = v122[118];
      v2655 = v124;
      v2650 = *(unsigned __int8 *)(v7 + 24);
      v125 = v122[117];
      JSC::MacroAssemblerARM64::load8(v121, v123 | 0x500000000, (char)v2661, v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch32(v121, 1, (char)v2661, 61, v126, v127, v128, v129, (uint64_t)&v2790);
      v136 = (int)v2790;
      if ((_DWORD)v2790 != -1)
      {
        v137 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v137 == *(_DWORD *)(a4 + 8))
        {
          v138 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v137 + 1), (unint64_t)&v2790, v131, v132, v133, v134, v135);
          v140 = *v138;
          v139 = v138 + 1;
          v136 = v140;
          LODWORD(v137) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v139 = (WTF **)((char *)&v2790 + 4);
        }
        v511 = *(_QWORD *)a4 + 12 * v137;
        *(_DWORD *)v511 = v136;
        *(_QWORD *)(v511 + 4) = *v139;
        ++*(_DWORD *)(a4 + 12);
      }
      __dst = 0;
      v2705 = 0;
      v2714 = (WTF *)JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall((JSC::ScratchRegisterAllocator **)v7, (const JSC::RegisterSet *)&__dst, v130, v131, v132, v133, v134, v135);
      v2715 = v512;
      v2654 = (const JSC::RegisterSet *)v512;
      v519 = *(_BYTE *)(v7 + 224);
      if ((*(_WORD *)(*(_QWORD *)(v7 + 16) + 129) & 0x200) == 0)
      {
        if ((*(_BYTE *)(v7 + 224) & 1) != 0)
        {
          if ((*(_BYTE *)(v7 + 224) & 4) != 0)
          {
LABEL_215:
            v520 = *(_DWORD *)(v7 + 200);
LABEL_830:
            if (v520)
            {
              if (!*(_BYTE *)(v121 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x198199950);
              }
              v525 = -1207811152;
              JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v121, (JSC::ARM64LogicalImmediate *)v520, v121 + 264, v514, v515, v516, v517, v518);
              v524 = (unsigned int *)(v121 + 200);
              v523 = *(_DWORD *)(v121 + 200);
LABEL_833:
              v1736 = (JSC::AssemblerBuffer *)(v524 - 36);
              v1737 = v523 + 4;
              v1738 = *(v524 - 2);
              goto LABEL_834;
            }
            v524 = (unsigned int *)(v121 + 200);
            v523 = *(_DWORD *)(v121 + 200);
            v1736 = (JSC::AssemblerBuffer *)(v121 + 56);
            v1737 = v523 + 4;
            v1738 = *(_DWORD *)(v121 + 192);
            v525 = -1207811137;
LABEL_834:
            if (v1737 > v1738)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1736, v512, v513, v514, v515, v516, v517, v518);
              v523 = *v524;
            }
            *(_DWORD *)(*(_QWORD *)v1736 + v523) = v525;
            *v524 += 4;
            JSC::InlineCacheCompiler::setSpillStateForJSCall(v7, (unint64_t *)&v2714);
            v1743 = *((unsigned __int8 *)this + 4);
            v1744 = 2;
            v1745 = v125;
            switch(*((_BYTE *)this + 4))
            {
              case 0x19:
                goto LABEL_842;
              case 0x1A:
              case 0x21:
                v1744 = 3;
                goto LABEL_842;
              case 0x1B:
                goto LABEL_841;
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
                goto LABEL_840;
              default:
                v1745 = v125;
                if (v1743 == 61)
                {
LABEL_841:
                  v1744 = 4;
                }
                else if (v1743 != 111)
                {
LABEL_840:
                  __break(0xC471u);
                  JUMPOUT(0x198195108);
                }
LABEL_842:
                JSC::MacroAssemblerARM64::sub64(v121, 31, (((8 * v1744) | 8) + 39) & 0x70, 31, v1739, v1740, v1741, v1742);
                if (!*(_BYTE *)(v121 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19819876CLL);
                }
                JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v121, (JSC::ARM64LogicalImmediate *)v1744, v121 + 264, v1746, v1747, v1748, v1749, v1750);
                v1758 = *(_DWORD *)(v121 + 200);
                if (v1758 + 4 > *(_DWORD *)(v121 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1751, v1752, v1753, v1754, v1755, v1756, v1757);
                  v1758 = *(_DWORD *)(v121 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v121 + 56) + v1758) = -1207893008;
                v1759 = *(_DWORD *)(v121 + 200);
                v1760 = v1759 + 4;
                *(_DWORD *)(v121 + 200) = v1759 + 4;
                v1761 = v123 | 0xF80183E0;
                if ((v1759 + 8) > *(_DWORD *)(v121 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1751, v1752, v1753, v1754, v1755, v1756, v1757);
                  v1760 = *(_DWORD *)(v121 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v121 + 56) + v1760) = v1761;
                v1762 = *(_DWORD *)(v121 + 200) + 4;
                *(_DWORD *)(v121 + 200) = v1762;
                v1763 = *(_QWORD *)(v7 + 16);
                v1764 = *(unsigned __int8 *)(v1763 + 122);
                if (v1764 < 4 || v1764 <= 0x1C && ((1 << v1764) & 0x118683C0) != 0)
                {
                  v1751 = *((_QWORD *)this + 4);
                  if (v1751)
                  {
                    if (!*(_BYTE *)(v121 + 212))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1981994F0);
                    }
                    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)v121, v1751, v121 + 264, v1753, v1754, v1755, v1756, v1757);
                    v1762 = *(_DWORD *)(v121 + 200);
                    v1765 = 16;
                  }
                  else
                  {
                    v1765 = 63;
                  }
                }
                else
                {
                  v1731 = v1764 == 5;
                  v1777 = 118;
                  if (v1731)
                    v1777 = 119;
                  v1765 = *(unsigned __int8 *)(v1763 + v1777);
                }
                v1766 = v1765 | 0xF80203E0;
                v1767 = v2661;
                if (v1762 + 4 > *(_DWORD *)(v121 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1751, v1752, v1753, v1754, v1755, v1756, v1757);
                  v1762 = *(_DWORD *)(v121 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v121 + 56) + v1762) = v1766;
                v1768 = *(_DWORD *)(v121 + 200);
                v1769 = v1768 + 4;
                *(_DWORD *)(v121 + 200) = v1768 + 4;
                v1770 = *((unsigned __int8 *)this + 4);
                if (v1770 > 0x20)
                {
                  if (v1770 == 61)
                    goto LABEL_861;
                  if (v1770 != 33)
                    goto LABEL_867;
                }
                else if (v1770 != 26)
                {
                  if (v1770 != 27)
                    goto LABEL_867;
LABEL_861:
                  if ((v1768 + 8) > *(_DWORD *)(v121 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1751, v1752, v1753, v1754, v1755, v1756, v1757);
                    v1769 = *(_DWORD *)(v121 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v121 + 56) + v1769) = v2655 | 0xF80283E0;
                  v1773 = *(_DWORD *)(v121 + 200);
                  v1769 = v1773 + 4;
                  *(_DWORD *)(v121 + 200) = v1773 + 4;
                  v1771 = v1745 | 0xF80303E0;
                  v1772 = v1773 + 8;
LABEL_864:
                  if (v1772 > *(_DWORD *)(v121 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1751, v1752, v1753, v1754, v1755, v1756, v1757);
                    v1769 = *(_DWORD *)(v121 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v121 + 56) + v1769) = v1771;
                  *(_DWORD *)(v121 + 200) += 4;
                  v1770 = *((unsigned __int8 *)this + 4);
LABEL_867:
                  switch(v1770)
                  {
                    case 0x19u:
                      v1774 = *(_QWORD *)(v7 + 16);
                      if ((*(_WORD *)(v1774 + 129) & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
                      {
                        v1775 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 568);
                        goto LABEL_897;
                      }
                      JSC::MacroAssemblerARM64::load64(v121, *(unsigned __int8 *)(v1774 + 120) | 0x3800000000, (char)v2661, v1753, v1754, v1755, v1756, v1757);
                      v1798 = 0x23800000000;
                      goto LABEL_1175;
                    case 0x1Au:
                      v1778 = *(_QWORD *)(v7 + 16);
                      if ((*(_WORD *)(v1778 + 129) & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
                      {
                        v1775 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 584);
                        goto LABEL_897;
                      }
                      JSC::MacroAssemblerARM64::load64(v121, *(unsigned __int8 *)(v1778 + 120) | 0x3800000000, (char)v2661, v1753, v1754, v1755, v1756, v1757);
                      v1798 = 0x24800000000;
                      goto LABEL_1175;
                    case 0x1Bu:
                      v1779 = *(_QWORD *)(v7 + 16);
                      if ((*(_WORD *)(v1779 + 129) & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
                      {
                        v1780 = *(_QWORD *)(v7 + 8);
                        v1781 = v2650 == 0;
                        v1782 = 608;
                        v1783 = 600;
                        goto LABEL_894;
                      }
                      JSC::MacroAssemblerARM64::load64(v121, *(unsigned __int8 *)(v1779 + 120) | 0x3800000000, (char)v2661, v1753, v1754, v1755, v1756, v1757);
                      if (v2650)
                        v1798 = 0x26000000000;
                      else
                        v1798 = 0x25800000000;
                      goto LABEL_1175;
                    case 0x1Cu:
                    case 0x1Du:
                    case 0x1Eu:
                    case 0x1Fu:
                    case 0x20u:
                      goto LABEL_1996;
                    case 0x21u:
                      v1784 = *(_QWORD *)(v7 + 16);
                      if ((*(_WORD *)(v1784 + 129) & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
                      {
                        v1775 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 592);
                        goto LABEL_897;
                      }
                      JSC::MacroAssemblerARM64::load64(v121, *(unsigned __int8 *)(v1784 + 120) | 0x3800000000, (char)v2661, v1753, v1754, v1755, v1756, v1757);
                      v1798 = 0x25000000000;
                      goto LABEL_1175;
                    default:
                      if (v1770 == 61)
                      {
                        v1785 = *(_QWORD *)(v7 + 16);
                        if ((*(_WORD *)(v1785 + 129) & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
                        {
                          v1780 = *(_QWORD *)(v7 + 8);
                          v1781 = v2650 == 0;
                          v1782 = 624;
                          v1783 = 616;
LABEL_894:
                          if (v1781)
                            v1782 = v1783;
                          v1775 = *(_QWORD *)(v1780 + v1782);
                          goto LABEL_897;
                        }
                        JSC::MacroAssemblerARM64::load64(v121, *(unsigned __int8 *)(v1785 + 120) | 0x3800000000, (char)v2661, v1753, v1754, v1755, v1756, v1757);
                        if (v2650)
                          v1798 = 0x27000000000;
                        else
                          v1798 = 0x26800000000;
LABEL_1175:
                        v1799 = v2661 | v1798;
                        v1801 = (char)v2661;
                        v1800 = v121;
                      }
                      else
                      {
                        if (v1770 != 111)
                        {
LABEL_1996:
                          __break(0xC471u);
                          JUMPOUT(0x19819A410);
                        }
                        v1776 = *(_QWORD *)(v7 + 16);
                        if ((*(_WORD *)(v1776 + 129) & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
                        {
                          v1775 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 576);
LABEL_897:
                          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v121, v1775, (char)v2661, v1753, v1754, v1755, v1756, v1757);
                          goto LABEL_1177;
                        }
                        JSC::MacroAssemblerARM64::load64(v121, *(unsigned __int8 *)(v1776 + 120) | 0x3800000000, (char)v2661, v1753, v1754, v1755, v1756, v1757);
                        v1799 = v2661 | 0x24000000000;
                        v1800 = v121;
                        v1801 = (char)v2661;
                        v1767 = v2661;
                      }
                      JSC::MacroAssemblerARM64::load64(v1800, v1799, v1801, v1793, v1794, v1795, v1796, v1797);
LABEL_1177:
                      v2101 = v1767 & 0x1F;
                      v2102 = *(_DWORD *)(v121 + 200);
                      if (v2102 + 4 > *(_DWORD *)(v121 + 192))
                      {
                        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1786, v1787, v1788, v1789, v1790, v1791, v1792);
                        v2102 = *(_DWORD *)(v121 + 200);
                      }
                      *(_DWORD *)(*(_QWORD *)(v121 + 56) + v2102) = v1767 & 0x1F | 0xF80083E0;
                      v2103 = *(_DWORD *)(v121 + 200);
                      v2104 = v2103 + 4;
                      *(_DWORD *)(v121 + 200) = v2103 + 4;
                      v2105 = *(_QWORD *)(v7 + 16);
                      if ((*(_WORD *)(v2105 + 129) & 0x200) != 0 && BYTE6(qword_1ECF4C780))
                      {
                        if (v1767)
                        {
                          if (v1767 == 31)
                          {
                            v2110 = v2103 + 8;
                            v2111 = *(_DWORD *)(v121 + 192);
                            v2109 = -1862269984;
                          }
                          else
                          {
                            if (v1767 == 63)
                              v2109 = -763363328;
                            else
                              v2109 = (v2101 << 16) | 0xAA0003E0;
                            v2110 = v2103 + 8;
                            v2111 = *(_DWORD *)(v121 + 192);
                          }
                          if (v2110 > v2111)
                          {
                            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1786, v1787, v1788, v1789, v1790, v1791, v1792);
                            v2104 = *(_DWORD *)(v121 + 200);
                          }
                          *(_DWORD *)(*(_QWORD *)(v121 + 56) + v2104) = v2109;
                          *(_DWORD *)(v121 + 200) += 4;
                        }
                        JSC::MacroAssemblerARM64::add64(v121, 80 * a2 + 96, 9, 2, v1789, v1790, v1791, v1792);
                        __dst = 0;
                        v2705 = 0;
                        v2138 = 0;
                      }
                      else
                      {
                        if (v1767)
                        {
                          if (v1767 == 31)
                          {
                            v2107 = v2103 + 8;
                            v2108 = *(_DWORD *)(v121 + 192);
                            v2106 = -1862269984;
                          }
                          else
                          {
                            if (v1767 == 63)
                              v2106 = -763363328;
                            else
                              v2106 = (v2101 << 16) | 0xAA0003E0;
                            v2107 = v2103 + 8;
                            v2108 = *(_DWORD *)(v121 + 192);
                          }
                          if (v2107 > v2108)
                          {
                            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v1786, v1787, v1788, v1789, v1790, v1791, v1792);
                            v2104 = *(_DWORD *)(v121 + 200);
                          }
                          *(_DWORD *)(*(_QWORD *)(v121 + 56) + v2104) = v2106;
                          *(_DWORD *)(v121 + 200) += 4;
                          v2105 = *(_QWORD *)(v7 + 16);
                        }
                        v2117 = WTF::fastCompactMalloc((WTF *)0x60);
                        v2118 = *(_QWORD *)v2105;
                        if ((*(_QWORD *)v2105 & 1) != 0)
                        {
                          v2472 = *(_QWORD *)(v2118 & 0xFFFFFFFF8);
                          if ((v2118 & 2) != 0
                            || (v2473 = *(unsigned int *)((v2118 & 0xFFFFFFFF8) + 8), (_DWORD)v2473 == 0x3FFFFFFF)
                            || (_DWORD)v2473 == -1)
                          {
                            v2474 = 2;
                          }
                          else if (v2473 >> 28)
                          {
                            v2644 = WTF::fastMalloc((WTF *)0x10);
                            *(_QWORD *)v2644 = v2472;
                            *(_DWORD *)(v2644 + 8) = v2473;
                            v2474 = 1;
                            v2472 = v2644;
                          }
                          else
                          {
                            v2474 = *(_QWORD *)(v2118 & 0xFFFFFFFF8);
                            v2472 = v2473 << 36;
                          }
                          v2118 = v2472 | v2474;
                        }
                        __dst = (void *)v2118;
                        JSC::OptimizingCallLinkInfo::OptimizingCallLinkInfo(v2117, (uint64_t *)&__dst, 0, v2112, v2113, v2114, v2115, v2116);
                        if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
                          WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v2119, v2120, v2121, v2122, v2123, v2124, v2125);
                        v2127 = *(_DWORD *)(v7 + 1828);
                        if (v2127 <= a2)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19819A5D8);
                        }
                        v2128 = *(_QWORD *)(v7 + 1816);
                        v2129 = *(JSC::CallLinkInfo **)(v2128 + 8 * a2);
                        *(_QWORD *)(v2128 + 8 * a2) = v2117;
                        if (v2129)
                        {
                          JSC::CallLinkInfo::~CallLinkInfo(v2129, v2119, v2120, v2121, v2122, v2123, v2124, v2125, v2126);
                          WTF::fastFree(v2130, v2131, v2132, v2133, v2134, v2135, v2136, v2137);
                          v2127 = *(_DWORD *)(v7 + 1828);
                        }
                        if (v2127 <= a2)
                        {
                          __break(0xC471u);
LABEL_2031:
                          __break(1u);
                          goto LABEL_2032;
                        }
                        v2138 = *(_QWORD *)(*(_QWORD *)(v7 + 1816) + 8 * a2);
                        *(_WORD *)(v2138 + 17) = *(_WORD *)(v2138 + 17) & 0xFF0F | 0x10;
                        __dst = 0;
                        v2705 = 0;
                      }
                      JSC::CallLinkInfo::emitFastPathImpl((JSC::ARM64LogicalImmediate *)v2138, v121, 0, (uint64_t)&__dst, v2122, v2123, v2124, v2125);
                      v2146 = *((unsigned __int8 *)this + 4);
                      if (v2146 != 27 && v2146 != 61 && v1745)
                      {
                        if (v1745 == 31)
                        {
                          v2148 = *(_DWORD *)(v121 + 200);
                          v2149 = v2148 + 4;
                          v2150 = *(_DWORD *)(v121 + 192);
                          v2147 = -1862270945;
                        }
                        else
                        {
                          v2147 = v1745 | 0xAA0003E0;
                          v2148 = *(_DWORD *)(v121 + 200);
                          v2149 = v2148 + 4;
                          v2150 = *(_DWORD *)(v121 + 192);
                        }
                        if (v2149 > v2150)
                        {
                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), (uint64_t)v2139, v2140, v2141, v2142, v2143, v2144, v2145);
                          v2148 = *(_DWORD *)(v121 + 200);
                        }
                        *(_DWORD *)(*(_QWORD *)(v121 + 56) + v2148) = v2147;
                        *(_DWORD *)(v121 + 200) += 4;
                      }
                      if ((*(_WORD *)(*(_QWORD *)(v7 + 16) + 129) & 0x200) != 0)
                      {
                        v2155 = *(_BYTE *)(v7 + 176) & 0x1F | 0xF8410340;
                        v2156 = *(_DWORD *)(v121 + 200);
                        if (v2156 + 4 > *(_DWORD *)(v121 + 192))
                        {
                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), (uint64_t)v2139, v2140, v2141, v2142, v2143, v2144, v2145);
                          v2156 = *(_DWORD *)(v121 + 200);
                        }
                        *(_DWORD *)(*(_QWORD *)(v121 + 56) + v2156) = v2155;
                        *(_DWORD *)(v121 + 200) += 4;
                        if (BYTE6(qword_1ECF4C780))
                          v2157 = (*(_WORD *)(*(_QWORD *)(v7 + 16) + 129) & 0x200) == 0;
                        else
                          v2157 = 1;
                        if (v2157)
                          v2158 = 0;
                        else
                          v2158 = -16;
                        v2159 = v2654;
                        JSC::MacroAssemblerARM64::add64(v121, (v2158 - (*(_DWORD *)(v7 + 168) + (_DWORD)v2654)), *(char *)(v7 + 176), *(char *)(v7 + 176), v2142, v2143, v2144, v2145);
                        v2167 = (32 * *(char *)(v7 + 176)) | 0x8B3D601F;
                        v2168 = *(_DWORD *)(v121 + 200);
                        if (v2168 + 4 > *(_DWORD *)(v121 + 192))
                        {
                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 56), v2160, v2161, v2162, v2163, v2164, v2165, v2166);
                          v2168 = *(_DWORD *)(v121 + 200);
                        }
                        *(_DWORD *)(*(_QWORD *)(v121 + 56) + v2168) = v2167;
                        *(_DWORD *)(v121 + 200) += 4;
                        goto LABEL_1239;
                      }
                      v2151 = *(JSC::LLInt **)(v121 + 336);
                      v2152 = *((_QWORD *)v2151 + 15);
                      if (!v2152)
                        goto LABEL_1995;
                      v2153 = *(unsigned __int8 *)(v2152 + 12);
                      if (v2153 == 3)
                      {
                        v2154 = (((*(_DWORD *)(*((_QWORD *)v2151 + 7) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
                      }
                      else if ((v2153 - 4) >= 2)
                      {
                        if (v2153 != 2)
                        {
LABEL_1995:
                          __break(0xC471u);
                          JUMPOUT(0x19819A3F0);
                        }
                        v2154 = JSC::LLInt::frameRegisterCountFor(v2151, v2139);
                      }
                      else
                      {
                        v2169 = (unsigned int *)(v2152 + 8);
                        do
                          v2170 = __ldaxr(v2169);
                        while (__stlxr(v2170 + 1, v2169));
                        v2154 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2152 + 72))(v2152) + 200);
                        do
                        {
                          v2171 = __ldaxr(v2169);
                          v2172 = v2171 - 1;
                        }
                        while (__stlxr(v2172, v2169));
                        if (!v2172)
                        {
                          atomic_store(1u, (unsigned int *)(v2152 + 8));
                          (*(void (**)(uint64_t))(*(_QWORD *)v2152 + 32))(v2152);
                        }
                      }
                      v2159 = (const JSC::RegisterSet *)v2715;
                      JSC::MacroAssemblerARM64::add64(v121, -(*(_DWORD *)(v7 + 168) + (_DWORD)v2715 + 8 * v2154), 29, 31, v2142, v2143, v2144, v2145);
LABEL_1239:
                      v2793 = 0uLL;
                      v2173 = *((unsigned __int8 *)this + 4);
                      if (v2173 == 27 || v2173 == 61)
                        goto LABEL_1243;
                      if ((v1745 & 0x40) == 0)
                      {
                        *(_QWORD *)&v2793 = 1 << v1745;
LABEL_1243:
                        v2174 = *(JSC::ScratchRegisterAllocator **)(v7 + 32);
                        v2175 = (uint64_t)v2714;
                        if (v2714)
                        {
                          v2176 = 0;
                          do
                          {
                            v2176 |= v2175 & -v2175;
                            v2175 &= v2175 - 1;
                          }
                          while (v2175);
                        }
                        else
                        {
                          v2176 = 0;
                        }
                        __dst = (void *)v2176;
                        v2705 = 0;
                        JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v2174, (JSC::AssemblyHelpers *)&__dst, (const JSC::RegisterSet *)&v2793, v2159, 0, v2164, v2165, v2166);
LABEL_1249:
                        JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v820, v821, v822, v823, v824, v825, v826);
                        return;
                      }
                      goto LABEL_2031;
                  }
                }
                v1771 = v2655 | 0xF80283E0;
                v1772 = v1768 + 8;
                goto LABEL_864;
            }
          }
        }
        else
        {
          JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling((JSC::InlineCacheCompiler *)v7);
          v519 = *(_BYTE *)(v7 + 224);
          if ((v519 & 4) != 0)
            goto LABEL_215;
        }
        *(_BYTE *)(v7 + 224) = v519 | 4;
        if ((v519 & 2) != 0)
          v520 = JSC::CodeBlock::newExceptionHandlingCallSiteIndex(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 336), *(_DWORD *)(*(_QWORD *)(v7 + 16) + 112));
        else
          v520 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 112);
        *(_DWORD *)(v7 + 200) = v520;
        goto LABEL_830;
      }
      if ((*(_BYTE *)(v7 + 224) & 1) != 0)
      {
        if ((*(_BYTE *)(v7 + 224) & 4) == 0)
        {
LABEL_218:
          *(_BYTE *)(v7 + 224) = v519 | 4;
          if ((v519 & 2) != 0)
            v521 = JSC::CodeBlock::newExceptionHandlingCallSiteIndex(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 336), *(_DWORD *)(*(_QWORD *)(v7 + 16) + 112));
          else
            v521 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 112);
          *(_DWORD *)(v7 + 200) = v521;
        }
      }
      else
      {
        JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling((JSC::InlineCacheCompiler *)v7);
        v519 = *(_BYTE *)(v7 + 224);
        if ((v519 & 4) == 0)
          goto LABEL_218;
      }
      if (!*(_BYTE *)(v121 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199590);
      }
      v522 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 16) + 120) | 0x7000000000;
      *(_DWORD *)(*(_QWORD *)(v121 + 264) + 208) &= ~*(_DWORD *)(v121 + 288);
      JSC::MacroAssemblerARM64::load32(v121, v522, *(char *)(v121 + 272), v514, v515, v516, v517, v518);
      if (!*(_BYTE *)(v121 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1981995D0);
      }
      v524 = (unsigned int *)(v121 + 200);
      v523 = *(_DWORD *)(v121 + 200);
      *(_DWORD *)(*(_QWORD *)(v121 + 264) + 208) &= ~*(_DWORD *)(v121 + 288);
      v525 = (*(_BYTE *)(v121 + 272) & 0x1F) - 1207811168;
      goto LABEL_833;
    case 0x1C:
    case 0x1D:
      JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator()(v2876, v13, v14, v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch64(v8, 1, *(char *)(*(_QWORD *)(v7 + 16) + 118), *((_QWORD *)this + 5), v446, v447, v448, v449, (uint64_t)v2743);
      v455 = v2743[0];
      if (v2743[0] == -1)
        goto LABEL_608;
      v456 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v456 == *(_DWORD *)(a4 + 8))
      {
        v457 = (void *)(v456 + 1);
        v458 = v2743;
LABEL_556:
        v1382 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v457, (unint64_t)v458, (uint64_t)v450, v451, v452, v453, v454);
        v1384 = *v1382;
        v1383 = v1382 + 1;
        v455 = v1384;
        LODWORD(v456) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v1107 = v2743;
LABEL_606:
        v1383 = v1107 + 1;
      }
      v1475 = *(_QWORD *)a4 + 12 * v456;
      *(_DWORD *)v1475 = v455;
      *(_QWORD *)(v1475 + 4) = *v1383;
      ++*(_DWORD *)(a4 + 12);
LABEL_608:
      JSC::InlineCacheCompiler::generateWithConditionChecks((JSC::InlineCacheCompiler *)v7, a2, this, v450, v451, v452, v453, v454);
      return;
    case 0x1E:
      v802 = *(_QWORD *)(v7 + 16);
      v803 = *(unsigned __int8 *)(v802 + 118);
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, v802, v2879);
      v809 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      if ((*(_WORD *)(*(_QWORD *)(v7 + 16) + 129) & 8) == 0)
      {
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A30CLL);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load8(v8, v803 | 0x500000000, *(char *)(v8 + 304), v804, v805, v806, v807, v808);
        JSC::MacroAssemblerARM64::branch32(v8, 3, 17, 23, v810, v811, v812, v813, (uint64_t)&v2741);
        v814 = v2741;
        if (v2741 != -1)
        {
          v815 = *(unsigned int *)(v7 + 140);
          if ((_DWORD)v815 == *(_DWORD *)(v7 + 136))
          {
            v816 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 128, (void *)(v815 + 1), (unint64_t)&v2741, v804, v805, v806, v807, v808);
            v818 = *v816;
            v817 = v816 + 1;
            v814 = v818;
            v819 = *(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140);
          }
          else
          {
            v817 = &v2742;
            v819 = *(_QWORD *)(v7 + 128) + 12 * v815;
          }
          *(_DWORD *)v819 = v814;
          *(_QWORD *)(v819 + 4) = *(_QWORD *)v817;
          ++*(_DWORD *)(v7 + 140);
        }
      }
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v804, v805, v806, v807, v808);
      v2714 = (WTF *)v2716;
      v2715 = 2;
      if (v2879 == v2880)
        goto LABEL_1700;
      if (v2880 == 63)
      {
        if (v2879 != 31)
        {
          v2478 = v2879 & 0x1F | 0xD2800000;
          goto LABEL_1697;
        }
      }
      else if (v2880 != 31 && v2879 != 31)
      {
        v1888 = v2879 | ((v2880 & 0x1F) << 16);
        v1889 = -1442839584;
        goto LABEL_1696;
      }
      v1888 = v2879 | (32 * v2880);
      v1889 = -1862270976;
LABEL_1696:
      v2478 = v1888 | v1889;
LABEL_1697:
      v2480 = (unsigned int *)(v8 + 200);
      v2479 = *(_DWORD *)(v8 + 200);
      if (v2479 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1881, v1882, v1883, v1884, v1885, v1886, v1887);
        v2479 = *v2480;
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2479) = v2478;
      *v2480 += 4;
LABEL_1700:
      for (n = *(_DWORD *)(v8 + 200); n < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = n)
      {
        if ((n + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1881, v1882, v1883, v1884, v1885, v1886, v1887);
          n = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + n) = -721215457;
        n = *(_DWORD *)(v8 + 200) + 4;
      }
      *(_DWORD *)(v8 + 208) = 0;
      JSC::AssemblyHelpers::emitLoadPrototype(v8, v9, v2879, v809, (uint64_t)&v2714, v1885, v1886, v1887);
      JSC::MacroAssemblerARM64::branch64(v8, 0, v809, (char)v803, v2482, v2483, v2484, v2485, (uint64_t)&v2793);
      v2493 = v2879;
      if (v2879 == v809)
        goto LABEL_1713;
      if ((_DWORD)v809 == 63)
      {
        if (v2879 != 31)
        {
          v2496 = v2879 & 0x1F | 0xD2800000;
          goto LABEL_1710;
        }
      }
      else if ((_DWORD)v809 != 31 && v2879 != 31)
      {
        v2494 = v2879 | ((v809 & 0x1F) << 16);
        v2495 = -1442839584;
        goto LABEL_1709;
      }
      v2494 = v2879 | (32 * v809);
      v2495 = -1862270976;
LABEL_1709:
      v2496 = v2494 | v2495;
LABEL_1710:
      v2497 = *(_DWORD *)(v8 + 200);
      if (v2497 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v2486, v2487, v2488, v2489, v2490, v2491, v2492);
        v2497 = *(_DWORD *)(v8 + 200);
        v2493 = v2879;
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2497) = v2496;
      *(_DWORD *)(v8 + 200) += 4;
      LOBYTE(v809) = v2493;
LABEL_1713:
      JSC::MacroAssemblerARM64::branchTest64(v8, 0, (char)v809, 28, v2489, v2490, v2491, v2492, (uint64_t)&v2790);
      v2740 = n;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2790, (unsigned int *)&v2740, v8, v2498, v2499, v2500, v2501, v2502);
      v2510 = *(_DWORD *)(v8 + 200);
      if (v2510 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v2503, v2504, v2505, v2506, v2507, v2508, v2509);
        v2510 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2510) = v11 | 0x321F07E0;
      *(_DWORD *)(v8 + 200) += 4;
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v2505, v2506, v2507, v2508, v2509);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2511, v2512, v2513, v2514, v2515, v2516, v2517);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2793, v8, v2518, v2519, v2520, v2521, v2522, v2523);
      v2531 = *(_DWORD *)(v8 + 200);
      if (v2531 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v2524, v2525, v2526, v2527, v2528, v2529, v2530);
        v2531 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2531) = v11 | 0x32000BE0;
      *(_DWORD *)(v8 + 200) += 4;
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v2526, v2527, v2528, v2529, v2530);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2532, v2533, v2534, v2535, v2536, v2537, v2538);
      if ((_DWORD)v2707)
      {
        if (HIDWORD(v2715))
        {
          v2539 = 0;
          v2540 = 0;
          v2541 = 12 * HIDWORD(v2715);
          do
          {
            if (v2540 >= HIDWORD(v2715))
            {
              __break(0xC471u);
              JUMPOUT(0x19819A56CLL);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v2539), v8, v938, v939, v940, v941, v942, v943);
            ++v2540;
            v2539 += 12;
          }
          while (v2541 != v2539);
        }
        JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
        for (ii = *(_DWORD *)(v8 + 200); ii < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = ii)
        {
          if ((ii + 4) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
            ii = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + ii) = -721215457;
          ii = *(_DWORD *)(v8 + 200) + 4;
        }
        v2543 = ii;
        if ((ii + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          v2543 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2543) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v2544 = 69;
        else
          v2544 = 65;
        v2735 = ii;
        v2736 = 0;
        v2737 = v2544;
        v2738 = 15;
        v2739 = -1;
        if (ii != -1)
        {
          v2545 = *(unsigned int *)(v7 + 140);
          if ((_DWORD)v2545 == *(_DWORD *)(v7 + 136))
          {
            v2546 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 128, (void *)(v2545 + 1), (unint64_t)&v2735, v939, v940, v941, v942, v943);
            v2548 = *v2546;
            v2547 = v2546 + 1;
            v2549 = *(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140);
            *(_DWORD *)v2549 = v2548;
          }
          else
          {
            v2547 = &v2736;
            v2549 = *(_QWORD *)(v7 + 128) + 12 * v2545;
            *(_DWORD *)v2549 = ii;
          }
          *(_QWORD *)(v2549 + 4) = *(_QWORD *)v2547;
          ++*(_DWORD *)(v7 + 140);
        }
      }
      else
      {
        v2550 = HIDWORD(v2715);
        if (HIDWORD(v2715))
        {
          v2551 = v2714;
          v2552 = *(unsigned int *)(v7 + 136);
          v2553 = *(unsigned int *)(v7 + 140);
          v2554 = v2553 + HIDWORD(v2715);
          if (v2554 > v2552)
          {
            v2555 = v2552 + (v2552 >> 2);
            if (v2555 >= 0x10)
              v2556 = v2555 + 1;
            else
              v2556 = 16;
            if (v2556 <= v2554)
              v2556 = v2553 + HIDWORD(v2715);
            v2557 = *(_QWORD *)(v7 + 128);
            if (v2556 < 3)
            {
              v2559 = v7 + 144;
              *(_QWORD *)(v7 + 128) = v7 + 144;
              *(_DWORD *)(v7 + 136) = 2;
            }
            else
            {
              if (v2556 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A738);
              }
              v2558 = 12 * v2556;
              v2559 = WTF::fastMalloc((WTF *)(12 * v2556));
              *(_DWORD *)(v7 + 136) = (v2558 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v7 + 128) = v2559;
            }
            if ((_DWORD)v2553)
            {
              v2560 = v2557;
              do
              {
                *(_DWORD *)v2559 = *(_DWORD *)v2560;
                *(_QWORD *)(v2559 + 4) = *(_QWORD *)(v2560 + 4);
                v2560 += 12;
                v2559 += 12;
              }
              while (v2560 != v2557 + 12 * v2553);
            }
            if (v7 + 144 != v2557 && v2557)
            {
              if (*(_QWORD *)(v7 + 128) == v2557)
              {
                *(_QWORD *)(v7 + 128) = 0;
                *(_DWORD *)(v7 + 136) = 0;
              }
              WTF::fastFree(v2557, v937, v938, v939, v940, v941, v942, v943);
            }
          }
          v2561 = *(unsigned int *)(v7 + 140);
          if (v2554 < v2561)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A690);
          }
          v2562 = *(_QWORD *)(v7 + 128) + 12 * v2561;
          v2563 = (WTF *)((char *)v2551 + 12 * v2550);
          do
          {
            *(_DWORD *)v2562 = *(_DWORD *)v2551;
            *(_QWORD *)(v2562 + 4) = *(_QWORD *)((char *)v2551 + 4);
            v2551 = (WTF *)((char *)v2551 + 12);
            v2562 += 12;
          }
          while (v2551 != v2563);
          *(_DWORD *)(v7 + 140) = v2554;
        }
      }
      v1734 = v2714;
      v1735 = v2716 == (_BYTE *)v2714;
      goto LABEL_1856;
    case 0x1F:
      JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator()(v2876, v13, v14, v15, v16, v17, v18, v19);
      goto LABEL_1249;
    case 0x22:
      v2714 = (WTF *)v2716;
      v2715 = 2;
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v642 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v643 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v644 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v645, v646, v647, v648, v649);
      *(_QWORD *)&v2793 = v2794;
      *((_QWORD *)&v2793 + 1) = 2;
      v655 = *(_QWORD *)(v7 + 16);
      v656 = 118;
      if (*(_BYTE *)(v655 + 122) == 5)
        v656 = 119;
      v657 = *(unsigned __int8 *)(v655 + v656);
      if ((*(_BYTE *)(v655 + 129) & 0x20) == 0)
      {
        JSC::MacroAssemblerARM64::branchTest64(v8, 1, (char)v657, 28, v651, v652, v653, v654, (uint64_t)&v2733);
        v663 = v2733;
        if (v2733 != -1)
        {
          v664 = HIDWORD(v2715);
          if (HIDWORD(v2715) == (_DWORD)v2715)
          {
            v665 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2733, v658, v659, v660, v661, v662);
            v667 = *v665;
            v666 = (uint64_t *)(v665 + 1);
            v663 = v667;
            v664 = HIDWORD(v2715);
          }
          else
          {
            v666 = &v2734;
          }
          v1802 = (char *)v2714 + 12 * v664;
          *(_DWORD *)v1802 = v663;
          *(_QWORD *)(v1802 + 4) = *v666;
          ++HIDWORD(v2715);
        }
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A2ECLL);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load8(v8, v657 | 0x500000000, *(char *)(v8 + 304), v658, v659, v660, v661, v662);
        JSC::MacroAssemblerARM64::branch32(v8, 1, 17, 2, v1803, v1804, v1805, v1806, (uint64_t)&v2731);
        v1807 = v2731;
        if (v2731 != -1)
        {
          v1808 = HIDWORD(v2715);
          if (HIDWORD(v2715) == (_DWORD)v2715)
          {
            v1809 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2731, v650, v651, v652, v653, v654);
            v1811 = *v1809;
            v1810 = v1809 + 1;
            v1807 = v1811;
            v1808 = HIDWORD(v2715);
          }
          else
          {
            v1810 = &v2732;
          }
          v1832 = (char *)v2714 + 12 * v1808;
          *(_DWORD *)v1832 = v1807;
          *(_QWORD *)(v1832 + 4) = *(_QWORD *)v1810;
          ++HIDWORD(v2715);
        }
      }
      JSC::MacroAssemblerARM64::load64(v8, v657 | 0x800000000, v644, v650, v651, v652, v653, v654);
      JSC::MacroAssemblerARM64::branchTest64(v8, 1, v644, 1, v1833, v1834, v1835, v1836, (uint64_t)&v2729, v1837);
      v1843 = v2729;
      if (v2729 != -1)
      {
        v1844 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1845 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2729, v1838, v1839, v1840, v1841, v1842);
          v1847 = *v1845;
          v1846 = (uint64_t *)(v1845 + 1);
          v1843 = v1847;
          v1844 = HIDWORD(v2715);
        }
        else
        {
          v1846 = &v2730;
        }
        v1848 = (char *)v2714 + 12 * v1844;
        *(_DWORD *)v1848 = v1843;
        *(_QWORD *)(v1848 + 4) = *v1846;
        ++HIDWORD(v2715);
      }
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199C64);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load32(v8, v644 | 0x1000000000, *(char *)(v8 + 304), v1838, v1839, v1840, v1841, v1842);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v8, 0, 17, v1849, v1850, v1851, v1852, (uint64_t)&v2727, v1853);
      v1859 = v2727;
      if (v2727 != -1)
      {
        v1860 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1861 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2727, v1854, v1855, v1856, v1857, v1858);
          v1863 = *v1861;
          v1862 = v1861 + 1;
          v1859 = v1863;
          v1860 = HIDWORD(v2715);
        }
        else
        {
          v1862 = &v2728;
        }
        v1864 = (char *)v2714 + 12 * v1860;
        *(_DWORD *)v1864 = v1859;
        *(_QWORD *)(v1864 + 4) = *(_QWORD *)v1862;
        ++HIDWORD(v2715);
      }
      JSC::AssemblyHelpers::loadMegamorphicProperty(v8, v9, v2880, v644, 0, (char)v11, v2879, v642, (uint64_t)&v2790, v643);
      v1872 = v2790;
      v1873 = HIDWORD(v2791);
      if (HIDWORD(v2791))
      {
        v1874 = HIDWORD(v2715);
        v1875 = HIDWORD(v2715) + (unint64_t)HIDWORD(v2791);
        if (v1875 > v2715)
        {
          v1876 = v2715 + ((unint64_t)v2715 >> 2);
          if (v1876 >= 0x10)
            v1877 = v1876 + 1;
          else
            v1877 = 16;
          if (v1877 <= v1875)
            v1877 = HIDWORD(v2715) + (unint64_t)HIDWORD(v2791);
          v1878 = v2714;
          if (v1877 < 3)
          {
            v1880 = v2716;
            v2714 = (WTF *)v2716;
            LODWORD(v2715) = 2;
          }
          else
          {
            if (v1877 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A6D0);
            }
            v1879 = 12 * v1877;
            v1880 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v1877));
            LODWORD(v2715) = (v1879 & 0xFFFFFFFC) / 0xC;
            v2714 = (WTF *)v1880;
          }
          if (v1874)
          {
            v1989 = v1878;
            do
            {
              *(_DWORD *)v1880 = *(_DWORD *)v1989;
              *(_QWORD *)(v1880 + 4) = *(_QWORD *)((char *)v1989 + 4);
              v1989 = (WTF *)((char *)v1989 + 12);
              v1880 += 12;
            }
            while (v1989 != (WTF *)((char *)v1878 + 12 * v1874));
          }
          if (v2716 != (_BYTE *)v1878 && v1878)
          {
            if (v2714 == v1878)
            {
              v2714 = 0;
              LODWORD(v2715) = 0;
            }
            WTF::fastFree((unint64_t)v1878, v1865, v1866, v1867, v1868, v1869, v1870, v1871);
          }
        }
        if (v1875 < HIDWORD(v2715))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A638);
        }
        v1990 = (char *)v2714 + 12 * HIDWORD(v2715);
        v1991 = (WTF *)((char *)v1872 + 12 * v1873);
        do
        {
          *(_DWORD *)v1990 = *(_DWORD *)v1872;
          *(_QWORD *)(v1990 + 4) = *(_QWORD *)((char *)v1872 + 4);
          v1872 = (WTF *)((char *)v1872 + 12);
          v1990 += 12;
        }
        while (v1872 != v1991);
        HIDWORD(v2715) = v1875;
        v1872 = v2790;
      }
      if (v2792 != (_BYTE *)v1872 && v1872 != 0)
      {
        v2790 = 0;
        LODWORD(v2791) = 0;
        WTF::fastFree((unint64_t)v1872, v1865, v1866, v1867, v1868, v1869, v1870, v1871);
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v1867, v1868, v1869, v1870, v1871);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v1993, v1994, v1995, v1996, v1997, v1998, v1999);
      if (!(_DWORD)v2707)
      {
        v2010 = HIDWORD(v2715);
        if (!HIDWORD(v2715))
          goto LABEL_1372;
        v2011 = v2714;
        v2012 = *(unsigned int *)(v7 + 96);
        v2013 = *(unsigned int *)(v7 + 100);
        v2014 = v2013 + HIDWORD(v2715);
        if (v2014 > v2012)
        {
          v2015 = v2012 + (v2012 >> 2);
          if (v2015 >= 0x10)
            v2016 = v2015 + 1;
          else
            v2016 = 16;
          if (v2016 <= v2014)
            v2016 = v2013 + HIDWORD(v2715);
          v2017 = *(_QWORD *)(v7 + 88);
          if (v2016 < 3)
          {
            v2019 = v7 + 104;
            *(_QWORD *)(v7 + 88) = v7 + 104;
            *(_DWORD *)(v7 + 96) = 2;
          }
          else
          {
            if (v2016 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A710);
            }
            v2018 = 12 * v2016;
            v2019 = WTF::fastMalloc((WTF *)(12 * v2016));
            *(_DWORD *)(v7 + 96) = (v2018 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)(v7 + 88) = v2019;
          }
          if ((_DWORD)v2013)
          {
            v2256 = v2017;
            do
            {
              *(_DWORD *)v2019 = *(_DWORD *)v2256;
              *(_QWORD *)(v2019 + 4) = *(_QWORD *)(v2256 + 4);
              v2256 += 12;
              v2019 += 12;
            }
            while (v2256 != v2017 + 12 * v2013);
          }
          if (v7 + 104 != v2017 && v2017)
          {
            if (*(_QWORD *)(v7 + 88) == v2017)
            {
              *(_QWORD *)(v7 + 88) = 0;
              *(_DWORD *)(v7 + 96) = 0;
            }
            WTF::fastFree(v2017, v937, v938, v939, v940, v941, v942, v943);
          }
        }
        v2257 = *(unsigned int *)(v7 + 100);
        if (v2014 < v2257)
        {
          __break(0xC471u);
          JUMPOUT(0x19819A698);
        }
        v2258 = *(_QWORD *)(v7 + 88) + 12 * v2257;
        v2259 = (WTF *)((char *)v2011 + 12 * v2010);
        do
        {
          *(_DWORD *)v2258 = *(_DWORD *)v2011;
          *(_QWORD *)(v2258 + 4) = *(_QWORD *)((char *)v2011 + 4);
          v2011 = (WTF *)((char *)v2011 + 12);
          v2258 += 12;
        }
        while (v2011 != v2259);
        goto LABEL_1371;
      }
      if (HIDWORD(v2715))
      {
        v2000 = 0;
        v2001 = 0;
        v2002 = 12 * HIDWORD(v2715);
        do
        {
          if (v2001 >= HIDWORD(v2715))
          {
            __break(0xC471u);
            JUMPOUT(0x19819A574);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v2000), v8, v938, v939, v940, v941, v942, v943);
          ++v2001;
          v2000 += 12;
        }
        while (v2002 != v2000);
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
      for (jj = *(_DWORD *)(v8 + 200); jj < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = jj)
      {
        if ((jj + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          jj = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + jj) = -721215457;
        jj = *(_DWORD *)(v8 + 200) + 4;
      }
      v2004 = jj;
      if ((jj + 4) > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
        v2004 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2004) = 335544320;
      *(_DWORD *)(v8 + 200) += 4;
      if (*(_BYTE *)(v8 + 328))
        v2005 = 69;
      else
        v2005 = 65;
      v2723[0] = jj;
      v2723[1] = 0;
      v2724 = v2005;
      v2725 = 15;
      v2726 = -1;
      if (jj == -1)
        goto LABEL_1372;
      v2006 = (_QWORD *)(v7 + 88);
      v2007 = *(unsigned int *)(v7 + 100);
      if ((_DWORD)v2007 == *(_DWORD *)(v7 + 96))
      {
        v2008 = (void *)(v2007 + 1);
        v2009 = v2723;
        goto LABEL_1079;
      }
      v2020 = v2723;
      goto LABEL_1091;
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v110 = *(_QWORD *)(v7 + 16);
      v111 = 118;
      if (*(_BYTE *)(v110 + 122) == 5)
        v111 = 119;
      v112 = *(_BYTE *)(v110 + v111);
      JSC::MacroAssemblerARM64::load8(v8, v2880 | 0x400000000, v2879, v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::and32(v8, (JSC::ARM64LogicalImmediate *)0xE, v2879, v2879);
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v119 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      *(_QWORD *)&v2793 = 0xFFFFFFFFLL;
      v2714 = (WTF *)v2716;
      v2715 = 2;
      v120 = 4;
      switch(*((_BYTE *)this + 4))
      {
        case '#':
          goto LABEL_202;
        case '$':
LABEL_107:
          v120 = 6;
          goto LABEL_202;
        case '%':
LABEL_201:
          v120 = 8;
LABEL_202:
          JSC::MacroAssemblerARM64::branch32(v8, 1, v2879, v120, v115, v116, v117, v118, (uint64_t)&v2809);
          v494 = v2809;
          if (v2809 != -1)
          {
            v495 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v495 == *(_DWORD *)(a4 + 8))
            {
              v496 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v495 + 1), (unint64_t)&v2809, v489, v490, v491, v492, v493);
              v498 = *v496;
              v497 = v496 + 1;
              v494 = v498;
              LODWORD(v495) = *(_DWORD *)(a4 + 12);
            }
            else
            {
              v497 = &v2810;
            }
            v526 = *(_QWORD *)a4 + 12 * v495;
            *(_DWORD *)v526 = v494;
            *(_QWORD *)(v526 + 4) = *(_QWORD *)v497;
            ++*(_DWORD *)(a4 + 12);
          }
          *(_QWORD *)&v2793 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v489, v490, v491, v492, v493);
          JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x800000000, v2879, v527, v528, v529, v530, v531);
          if (!*(_BYTE *)(v8 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x19819874CLL);
          }
          v537 = v2879 | 0xFFFFFFF800000000;
          *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
          JSC::MacroAssemblerARM64::load32(v8, v537, *(char *)(v8 + 304), v532, v533, v534, v535, v536);
          JSC::MacroAssemblerARM64::branch32(v8, 2, v112, 17, v538, v539, v540, v541, (uint64_t)&v2807);
          v547 = v2807;
          if (v2807 != -1)
          {
            v548 = HIDWORD(v2715);
            if (HIDWORD(v2715) == (_DWORD)v2715)
            {
              v549 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2807, v542, v543, v544, v545, v546);
              v551 = *v549;
              v550 = (uint64_t *)(v549 + 1);
              v547 = v551;
              v548 = HIDWORD(v2715);
            }
            else
            {
              v550 = &v2808;
            }
            v552 = (char *)v2714 + 12 * v548;
            *(_DWORD *)v552 = v547;
            *(_QWORD *)(v552 + 4) = *v550;
            ++HIDWORD(v2715);
          }
          JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v112, v119);
          v557 = *((unsigned __int8 *)this + 4);
          if (v557 == 86 || v557 == 36)
          {
            v558 = *(unsigned __int8 *)(v7 + 177);
            if (v558 == 255)
            {
              __break(0xC471u);
              JUMPOUT(0x1981989C4);
            }
            JSC::MacroAssemblerARM64::loadDouble(v8, v2879 | ((unint64_t)v119 << 8) | 0x300000000, 0x200000000uLL, (char)v558, v553, v554, v555, v556);
            v566 = *(char *)(v7 + 177);
            v567 = *(_DWORD *)(v8 + 200);
            if (v567 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v559, v560, v561, v562, v563, v564, v565);
              v567 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v567) = (v566 << 16) | (32 * v566) | 0x1E602000;
            *(_DWORD *)(v8 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v8, 1, v560, v561, v562, v563, v564, v565, (uint64_t)&v2805);
            v573 = v2805;
            if (v2805 != -1)
            {
              v574 = HIDWORD(v2715);
              if (HIDWORD(v2715) == (_DWORD)v2715)
              {
                v575 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2805, v568, v569, v570, v571, v572);
                v577 = *v575;
                v576 = v575 + 1;
                v573 = v577;
                v574 = HIDWORD(v2715);
              }
              else
              {
                v576 = &v2806;
              }
              v601 = (char *)v2714 + 12 * v574;
              *(_DWORD *)v601 = v573;
              *(_QWORD *)(v601 + 4) = *(_QWORD *)v576;
              ++HIDWORD(v2715);
            }
            if (!JSC::forInBy(*((unsigned __int8 *)this + 4)))
            {
              v609 = *(char *)(v7 + 177);
              v610 = *(_DWORD *)(v8 + 200);
              if (v610 + 4 > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v602, v603, v604, v605, v606, v607, v608);
                v610 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v610) = v11 & 0x1F | (32 * v609) | 0x9E660000;
              v611 = *(_DWORD *)(v8 + 200);
              v612 = v611 + 4;
              *(_DWORD *)(v8 + 200) = v611 + 4;
              if (v11 == 31)
              {
                if ((v611 + 8) > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v602, v603, v604, v605, v606, v607, v608);
                  v612 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v612) = -885300225;
              }
              else
              {
                v1363 = v11 & 0x1F | (32 * (v11 & 0x1F)) | 0xCB1B0000;
                if ((v611 + 8) > *(_DWORD *)(v8 + 192))
                {
                  v2641 = (JSC::AssemblerBuffer *)(v8 + 56);
LABEL_1957:
                  JSC::AssemblerBuffer::outOfLineGrow(v2641, v602, v603, v604, v605, v606, v607, v608);
                  v612 = *(_DWORD *)(v8 + 200);
                }
LABEL_1807:
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v612) = v1363;
              }
              *(_DWORD *)(v8 + 200) += 4;
              goto LABEL_1815;
            }
LABEL_533:
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, 7, (char)v23, v604, v605, v606, v607, v608);
            goto LABEL_1815;
          }
          JSC::MacroAssemblerARM64::load64(v8, v2879 | ((unint64_t)v119 << 8) | 0x300000000, 0x200000000uLL, v2879, v553, v554, v555, v556);
          JSC::MacroAssemblerARM64::branchTest64(v8, 0, v2879, 0xFFFFFFFFLL, v578, v579, v580, v581, (uint64_t)&v2803, v582);
          v588 = v2803;
          if (v2803 != -1)
          {
            v589 = HIDWORD(v2715);
            if (HIDWORD(v2715) == (_DWORD)v2715)
            {
              v590 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2803, v583, v584, v585, v586, v587);
              v592 = *v590;
              v591 = (uint64_t *)(v590 + 1);
              v588 = v592;
              v589 = HIDWORD(v2715);
            }
            else
            {
              v591 = &v2804;
            }
            v1364 = (char *)v2714 + 12 * v589;
            *(_DWORD *)v1364 = v588;
            *(_QWORD *)(v1364 + 4) = *v591;
            ++HIDWORD(v2715);
          }
          if (JSC::forInBy(*((unsigned __int8 *)this + 4)))
            goto LABEL_533;
          if (v2879 == v11)
            goto LABEL_1815;
          if (v2879 == 63)
          {
            if (v11 != 31)
            {
              v1367 = v11 & 0x1F | 0xD2800000;
              goto LABEL_1812;
            }
          }
          else if (v11 != 31 && v2879 != 31)
          {
            v1367 = v11 | ((v2879 & 0x1F) << 16) | 0xAA0003E0;
LABEL_1812:
            v2603 = (unsigned int *)(v8 + 200);
            v2602 = *(_DWORD *)(v8 + 200);
            if (v2602 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1365, v1366, v604, v605, v606, v607, v608);
              v2602 = *v2603;
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2602) = v1367;
            *v2603 += 4;
LABEL_1815:
            JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2793, v604, v605, v606, v607, v608);
            JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2604, v2605, v2606, v2607, v2608, v2609, v2610);
            v2611 = HIDWORD(v2715);
            if ((_DWORD)v2707)
            {
              if (HIDWORD(v2715))
              {
                v2612 = 0;
                v2613 = 0;
                v2614 = (uint64_t *)&v2799;
                v2615 = 12 * HIDWORD(v2715);
                do
                {
                  if (v2613 >= HIDWORD(v2715))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19819A50CLL);
                  }
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v2612), v8, v938, v939, v940, v941, v942, v943);
                  ++v2613;
                  v2612 += 12;
                }
                while (v2615 != v2612);
                JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2793, v939, v940, v941, v942, v943);
                for (kk = *(_DWORD *)(v8 + 200); kk < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = kk)
                {
                  if ((kk + 4) > *(_DWORD *)(v8 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
                    kk = *(_DWORD *)(v8 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v8 + 56) + kk) = -721215457;
                  kk = *(_DWORD *)(v8 + 200) + 4;
                }
                v2617 = kk;
                if ((kk + 4) > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
                  v2617 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2617) = 335544320;
                *(_DWORD *)(v8 + 200) += 4;
                v2618 = *(_BYTE *)(v8 + 328) ? 69 : 65;
                v2798 = kk;
                v2799 = 0;
                v2800 = v2618;
                v2801 = 15;
                v2802 = -1;
                if (kk != -1)
                {
                  v2619 = (_QWORD *)(v7 + 128);
                  v2620 = *(unsigned int *)(v7 + 140);
                  if ((_DWORD)v2620 == *(_DWORD *)(v7 + 136))
                  {
                    v2621 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2619, (void *)(v2620 + 1), (unint64_t)&v2798, v939, v940, v941, v942, v943);
                    v2614 = (uint64_t *)(v2621 + 1);
                    v2622 = (int *)(*(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140));
                    *v2622 = *v2621;
                  }
                  else
                  {
                    v2622 = (int *)(*v2619 + 12 * v2620);
                    *v2622 = kk;
                  }
                  v1434 = v2622 + 1;
                  v1445 = *v2614;
LABEL_1841:
                  *v1434 = v1445;
                  ++*(_DWORD *)(v7 + 140);
                }
              }
            }
            else if (HIDWORD(v2715))
            {
              v2623 = v2714;
              v2624 = *(unsigned int *)(v7 + 136);
              v2625 = *(unsigned int *)(v7 + 140);
              v2626 = v2625 + HIDWORD(v2715);
              if (v2626 > v2624)
              {
                v2627 = v2624 + (v2624 >> 2);
                if (v2627 >= 0x10)
                  v2628 = v2627 + 1;
                else
                  v2628 = 16;
                if (v2628 <= v2626)
                  v2628 = v2625 + HIDWORD(v2715);
                v2629 = *(_QWORD *)(v7 + 128);
                if (v2628 < 3)
                {
                  v2631 = v7 + 144;
                  *(_QWORD *)(v7 + 128) = v7 + 144;
                  *(_DWORD *)(v7 + 136) = 2;
                }
                else
                {
                  if (v2628 >= 0x15555556)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19819A660);
                  }
                  v2630 = 12 * v2628;
                  v2631 = WTF::fastMalloc((WTF *)(12 * v2628));
                  *(_DWORD *)(v7 + 136) = (v2630 & 0xFFFFFFFC) / 0xC;
                  *(_QWORD *)(v7 + 128) = v2631;
                }
                if ((_DWORD)v2625)
                {
                  v2632 = v2629;
                  do
                  {
                    *(_DWORD *)v2631 = *(_DWORD *)v2632;
                    *(_QWORD *)(v2631 + 4) = *(_QWORD *)(v2632 + 4);
                    v2632 += 12;
                    v2631 += 12;
                  }
                  while (v2632 != v2629 + 12 * v2625);
                }
                if (v7 + 144 != v2629 && v2629)
                {
                  if (*(_QWORD *)(v7 + 128) == v2629)
                  {
                    *(_QWORD *)(v7 + 128) = 0;
                    *(_DWORD *)(v7 + 136) = 0;
                  }
                  WTF::fastFree(v2629, v937, v938, v939, v940, v941, v942, v943);
                }
              }
              v2633 = *(unsigned int *)(v7 + 140);
              if (v2626 < v2633)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A618);
              }
              v2634 = *(_QWORD *)(v7 + 128) + 12 * v2633;
              v2635 = (WTF *)((char *)v2623 + 12 * v2611);
              do
              {
                *(_DWORD *)v2634 = *(_DWORD *)v2623;
                *(_QWORD *)(v2634 + 4) = *(_QWORD *)((char *)v2623 + 4);
                v2623 = (WTF *)((char *)v2623 + 12);
                v2634 += 12;
              }
              while (v2623 != v2635);
              *(_DWORD *)(v7 + 140) = v2626;
            }
LABEL_1855:
            v1734 = v2714;
            v1735 = v2716 == (_BYTE *)v2714;
LABEL_1856:
            if (v1735 || v1734 == 0)
              return;
            goto LABEL_1860;
          }
          v1367 = v11 | (32 * v2879) | 0x91000000;
          goto LABEL_1812;
        case '&':
LABEL_205:
          v499 = v2879;
          v23 = v499 | (32 * v499) | 0x51002800;
          v500 = *(_DWORD *)(v8 + 200);
          if (v500 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v113, v114, 4, v115, v116, v117, v118);
            v500 = *(_DWORD *)(v8 + 200);
            LOBYTE(v499) = v2879;
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v500) = v23;
          *(_DWORD *)(v8 + 200) += 4;
          JSC::MacroAssemblerARM64::branch32(v8, 8, (char)v499, 2, v115, v116, v117, v118, (uint64_t)&v2815);
          v506 = v2815;
          LOBYTE(v23) = v11;
          if (v2815 != -1)
          {
            v507 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v507 == *(_DWORD *)(a4 + 8))
            {
              v508 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v507 + 1), (unint64_t)&v2815, v501, v502, v503, v504, v505);
              v510 = *v508;
              v509 = (uint64_t *)(v508 + 1);
              v506 = v510;
              LODWORD(v507) = *(_DWORD *)(a4 + 12);
            }
            else
            {
              v509 = &v2816;
            }
            v1108 = *(_QWORD *)a4 + 12 * v507;
            *(_DWORD *)v1108 = v506;
            *(_QWORD *)(v1108 + 4) = *v509;
            ++*(_DWORD *)(a4 + 12);
          }
          *(_QWORD *)&v2793 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v501, v502, v503, v504, v505);
          JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x800000000, v2879, v1109, v1110, v1111, v1112, v1113);
          if (!*(_BYTE *)(v8 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x19819970CLL);
          }
          v1119 = v2879 | 0xFFFFFFFC00000000;
          *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
          JSC::MacroAssemblerARM64::load32(v8, v1119, *(char *)(v8 + 304), v1114, v1115, v1116, v1117, v1118);
          JSC::MacroAssemblerARM64::branch32(v8, 2, v112, 17, v1120, v1121, v1122, v1123, (uint64_t)&v2813);
          v1129 = v2813;
          if (v2813 != -1)
          {
            v1130 = HIDWORD(v2715);
            if (HIDWORD(v2715) == (_DWORD)v2715)
            {
              v1131 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2813, v1124, v1125, v1126, v1127, v1128);
              v1133 = *v1131;
              v1132 = v1131 + 1;
              v1129 = v1133;
              v1130 = HIDWORD(v2715);
            }
            else
            {
              v1132 = &v2814;
            }
            v1342 = (char *)v2714 + 12 * v1130;
            *(_DWORD *)v1342 = v1129;
            *(_QWORD *)(v1342 + 4) = *(_QWORD *)v1132;
            ++HIDWORD(v2715);
          }
          JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v112, v119);
          JSC::MacroAssemblerARM64::load64(v8, v2879 | ((unint64_t)v119 << 8) | 0x300000000, 0x200000010uLL, v2879, v1343, v1344, v1345, v1346);
          JSC::MacroAssemblerARM64::branchTest64(v8, 0, v2879, 0xFFFFFFFFLL, v1347, v1348, v1349, v1350, (uint64_t)&v2811, v1351);
          v1357 = v2811;
          if (v2811 != -1)
          {
            v1358 = HIDWORD(v2715);
            if (HIDWORD(v2715) == (_DWORD)v2715)
            {
              v1359 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2811, v1352, v1353, v1354, v1355, v1356);
              v1361 = *v1359;
              v1360 = (uint64_t *)(v1359 + 1);
              v1357 = v1361;
              v1358 = HIDWORD(v2715);
            }
            else
            {
              v1360 = &v2812;
            }
            v1362 = (char *)v2714 + 12 * v1358;
            *(_DWORD *)v1362 = v1357;
            *(_QWORD *)(v1362 + 4) = *v1360;
            ++HIDWORD(v2715);
          }
          if (JSC::forInBy(*((unsigned __int8 *)this + 4)))
            goto LABEL_533;
          if (v2879 == v11)
            goto LABEL_1815;
          if (v2879 == 63)
          {
            if (v11 != 31)
            {
              v1363 = v11 & 0x1F | 0xD2800000;
              goto LABEL_1806;
            }
          }
          else if (v11 != 31 && v2879 != 31)
          {
            v1363 = v11 | ((v2879 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_1806;
          }
          v1363 = v11 | (32 * v2879) | 0x91000000;
LABEL_1806:
          v612 = *(_DWORD *)(v8 + 200);
          if (v612 + 4 <= *(_DWORD *)(v8 + 192))
            goto LABEL_1807;
          v2641 = (JSC::AssemblerBuffer *)(v8 + 56);
          goto LABEL_1957;
        default:
          switch(*((_BYTE *)this + 4))
          {
            case 'U':
              goto LABEL_202;
            case 'V':
              goto LABEL_107;
            case 'W':
              goto LABEL_201;
            case 'X':
              goto LABEL_205;
            default:
              __break(0xC471u);
              JUMPOUT(0x19819A430);
          }
      }
    case 0x27:
    case 0x59:
      v429 = *(_QWORD *)(v7 + 16);
      v430 = 118;
      if (*(_BYTE *)(v429 + 122) == 5)
        v430 = 119;
      v431 = *(_BYTE *)(v429 + v430);
      JSC::MacroAssemblerARM64::load8(v8, v2880 | 0x500000000, v2879, v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch32(v8, 1, v2879, 34, v432, v433, v434, v435, (uint64_t)&v2862);
      v441 = v2862;
      if (v2862 != -1)
      {
        v442 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v442 == *(_DWORD *)(a4 + 8))
        {
          v443 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v442 + 1), (unint64_t)&v2862, v436, v437, v438, v439, v440);
          v445 = *v443;
          v444 = v443 + 1;
          v441 = v445;
          LODWORD(v442) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v444 = &v2863;
        }
        v1079 = *(_QWORD *)a4 + 12 * v442;
        *(_DWORD *)v1079 = v441;
        *(_QWORD *)(v1079 + 4) = *(_QWORD *)v444;
        ++*(_DWORD *)(a4 + 12);
      }
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v1080 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v1081 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v1082, v1083, v1084, v1085, v1086);
      v2714 = (WTF *)v2716;
      v2715 = 2;
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1981996BCLL);
      }
      v1092 = v2880 | 0x1C00000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load32(v8, v1092, *(char *)(v8 + 304), v1087, v1088, v1089, v1090, v1091);
      JSC::MacroAssemblerARM64::branch32(v8, 2, v431, 17, v1093, v1094, v1095, v1096, (uint64_t)&v2860);
      v1102 = v2860;
      if (v2860 != -1)
      {
        v1103 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1104 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2860, v1097, v1098, v1099, v1100, v1101);
          v1106 = *v1104;
          v1105 = (uint64_t *)(v1104 + 1);
          v1102 = v1106;
          v1103 = HIDWORD(v2715);
        }
        else
        {
          v1105 = &v2861;
        }
        v1144 = (char *)v2714 + 12 * v1103;
        *(_DWORD *)v1144 = v1102;
        *(_QWORD *)(v1144 + 4) = *v1105;
        ++HIDWORD(v2715);
      }
      JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x2800000000, v2879, v1097, v1098, v1099, v1100, v1101);
      JSC::MacroAssemblerARM64::load32(v8, v2879 | 0x800000000, v1080, v1145, v1146, v1147, v1148, v1149);
      JSC::MacroAssemblerARM64::branch32(v8, 2, v431, v1080, v1150, v1151, v1152, v1153, (uint64_t)&v2793);
      JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x3000000000, v1080, v1154, v1155, v1156, v1157, v1158);
      JSC::MacroAssemblerARM64::load64(v8, v2879 | 0x1000000000, v2879, v1159, v1160, v1161, v1162, v1163);
      JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v431, v1081);
      JSC::MacroAssemblerARM64::load32(v8, v2879 | ((unint64_t)v1081 << 8) | 0x200000000, 0x200000000uLL, v2879, v1164, v1165, v1166, v1167);
      JSC::MacroAssemblerARM64::branch32(v8, 0, v2879, 0xFFFFFFFFLL, v1168, v1169, v1170, v1171, (uint64_t)&v2858);
      v1177 = v2858;
      if (v2858 != -1)
      {
        v1178 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1179 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2858, v1172, v1173, v1174, v1175, v1176);
          v1181 = *v1179;
          v1180 = v1179 + 1;
          v1177 = v1181;
          v1178 = HIDWORD(v2715);
        }
        else
        {
          v1180 = &v2859;
        }
        v1182 = (char *)v2714 + 12 * v1178;
        *(_DWORD *)v1182 = v1177;
        *(_QWORD *)(v1182 + 4) = *(_QWORD *)v1180;
        ++HIDWORD(v2715);
      }
      if (JSC::forInBy(*((unsigned __int8 *)this + 4)))
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, 7, (char)v11, v1183, v1184, v1185, v1186, v1187);
      else
        JSC::MacroAssemblerARM64::load64(v8, v1080 | ((unint64_t)v2879 << 8) | 0x300000000, 0x200000020uLL, (char)v11, v1184, v1185, v1186, v1187);
      v2657 = (JSC::AssemblerBuffer *)(v8 + 56);
      for (mm = *(_DWORD *)(v8 + 200); (signed int)mm < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = mm)
      {
        if (mm + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2657, v1188, v1189, v1190, v1191, v1192, v1193, v1194);
          mm = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + mm) = -721215457;
        mm = *(_DWORD *)(v8 + 200) + 4;
      }
      v1196 = mm;
      if (mm + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v2657, v1188, v1189, v1190, v1191, v1192, v1193, v1194);
        v1196 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1196) = 335544320;
      *(_DWORD *)(v8 + 200) += 4;
      if (*(_BYTE *)(v8 + 328))
        v1197 = 69;
      else
        v1197 = 65;
      v2790 = (WTF *)mm;
      LOBYTE(v2791) = v1197;
      *(_WORD *)((char *)&v2791 + 1) = 15;
      BYTE3(v2791) = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2793, v8, v1189, v1190, v1191, v1192, v1193, v1194);
      v1205 = (v431 & 0x1F) << 16;
      if ((_DWORD)v1080 == 31)
      {
        v2642 = v1205 | 0x4B2063FF;
        v2643 = *(_DWORD *)(v8 + 200);
        if (v2643 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2657, v1198, v1199, v1200, v1201, v1202, v1203, v1204);
          v2643 = *(_DWORD *)(v8 + 200);
        }
        v1211 = 1262446591;
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2643) = v2642;
        v1209 = *(_DWORD *)(v8 + 200);
        v1210 = v1209 + 4;
        *(_DWORD *)(v8 + 200) = v1209 + 4;
      }
      else
      {
        v1206 = v1080 & 0x1F;
        v1207 = v1205 | (32 * v1206) | v1206 | 0x4B000000;
        v1208 = *(_DWORD *)(v8 + 200);
        if (v1208 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2657, v1198, v1199, v1200, v1201, v1202, v1203, v1204);
          v1208 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1208) = v1207;
        v1209 = *(_DWORD *)(v8 + 200);
        v1210 = v1209 + 4;
        *(_DWORD *)(v8 + 200) = v1209 + 4;
        v1211 = v1206 | (v1206 << 16) | 0x4B0003E0;
      }
      if ((v1209 + 8) > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v2657, v1198, v1199, v1200, v1201, v1202, v1203, v1204);
        v1210 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1210) = v1211;
      *(_DWORD *)(v8 + 200) += 4;
      JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x3800000000, v1081, v1200, v1201, v1202, v1203, v1204);
      JSC::MacroAssemblerARM64::load64(v8, v1081 | ((unint64_t)v1080 << 8) | 0x300000000, 0x200000000uLL, v2879, v1212, v1213, v1214, v1215);
      JSC::MacroAssemblerARM64::branchTest64(v8, 0, v2879, 0xFFFFFFFFLL, v1216, v1217, v1218, v1219, (uint64_t)&v2856, v1220);
      v1226 = v2856;
      if (v2856 != -1)
      {
        v1227 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1228 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2856, v1221, v1222, v1223, v1224, v1225);
          v1230 = *v1228;
          v1229 = (uint64_t *)(v1228 + 1);
          v1226 = v1230;
          v1227 = HIDWORD(v2715);
        }
        else
        {
          v1229 = &v2857;
        }
        v1231 = (char *)v2714 + 12 * v1227;
        *(_DWORD *)v1231 = v1226;
        *(_QWORD *)(v1231 + 4) = *v1229;
        ++HIDWORD(v2715);
      }
      if (JSC::forInBy(*((unsigned __int8 *)this + 4)))
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, 7, (char)v11, v1234, v1235, v1236, v1237, v1238);
        goto LABEL_1763;
      }
      if (v2879 == v11)
        goto LABEL_1763;
      if (v2879 == 63)
      {
        if (v11 != 31)
        {
          v1239 = v11 & 0x1F | 0xD2800000;
          goto LABEL_1760;
        }
      }
      else if (v11 != 31 && v2879 != 31)
      {
        v1239 = v11 | ((v2879 & 0x1F) << 16) | 0xAA0003E0;
        goto LABEL_1760;
      }
      v1239 = v11 | (32 * v2879) | 0x91000000;
LABEL_1760:
      v2564 = *(_DWORD *)(v8 + 200);
      if (v2564 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v2657, v1232, v1233, v1234, v1235, v1236, v1237, v1238);
        v2564 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2564) = v1239;
      *(_DWORD *)(v8 + 200) += 4;
LABEL_1763:
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2790, v8, v1233, v1234, v1235, v1236, v1237, v1238);
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v2565, v2566, v2567, v2568, v2569);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2570, v2571, v2572, v2573, v2574, v2575, v2576);
      if ((_DWORD)v2707)
      {
        if (HIDWORD(v2715))
        {
          v2577 = 0;
          v2578 = 0;
          v2579 = 12 * HIDWORD(v2715);
          do
          {
            if (v2578 >= HIDWORD(v2715))
            {
              __break(0xC471u);
              JUMPOUT(0x19819A53CLL);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v2577), v8, v938, v939, v940, v941, v942, v943);
            ++v2578;
            v2577 += 12;
          }
          while (v2579 != v2577);
        }
        JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
        for (nn = *(_DWORD *)(v8 + 200); nn < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = nn)
        {
          if ((nn + 4) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2657, (uint64_t)v937, v938, v939, v940, v941, v942, v943);
            nn = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + nn) = -721215457;
          nn = *(_DWORD *)(v8 + 200) + 4;
        }
        v2581 = nn;
        if ((nn + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2657, (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          v2581 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2581) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v2582 = 69;
        else
          v2582 = 65;
        v2851 = nn;
        v2852 = 0;
        v2853 = v2582;
        v2854 = 15;
        v2855 = -1;
        if (nn != -1)
        {
          v2583 = *(unsigned int *)(v7 + 140);
          if ((_DWORD)v2583 == *(_DWORD *)(v7 + 136))
          {
            v2584 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 128, (void *)(v2583 + 1), (unint64_t)&v2851, v939, v940, v941, v942, v943);
            v2586 = *v2584;
            v2585 = v2584 + 1;
            v2587 = *(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140);
            *(_DWORD *)v2587 = v2586;
          }
          else
          {
            v2585 = &v2852;
            v2587 = *(_QWORD *)(v7 + 128) + 12 * v2583;
            *(_DWORD *)v2587 = nn;
          }
          *(_QWORD *)(v2587 + 4) = *(_QWORD *)v2585;
          ++*(_DWORD *)(v7 + 140);
        }
      }
      else
      {
        v2588 = HIDWORD(v2715);
        if (HIDWORD(v2715))
        {
          v2589 = v2714;
          v2590 = *(unsigned int *)(v7 + 136);
          v2591 = *(unsigned int *)(v7 + 140);
          v2592 = v2591 + HIDWORD(v2715);
          if (v2592 > v2590)
          {
            v2593 = v2590 + (v2590 >> 2);
            if (v2593 >= 0x10)
              v2594 = v2593 + 1;
            else
              v2594 = 16;
            if (v2594 <= v2592)
              v2594 = v2591 + HIDWORD(v2715);
            v2595 = *(_QWORD *)(v7 + 128);
            if (v2594 < 3)
            {
              v2597 = v7 + 144;
              *(_QWORD *)(v7 + 128) = v7 + 144;
              *(_DWORD *)(v7 + 136) = 2;
            }
            else
            {
              if (v2594 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A6F0);
              }
              v2596 = 12 * v2594;
              v2597 = WTF::fastMalloc((WTF *)(12 * v2594));
              *(_DWORD *)(v7 + 136) = (v2596 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v7 + 128) = v2597;
            }
            if ((_DWORD)v2591)
            {
              v2598 = v2595;
              do
              {
                *(_DWORD *)v2597 = *(_DWORD *)v2598;
                *(_QWORD *)(v2597 + 4) = *(_QWORD *)(v2598 + 4);
                v2598 += 12;
                v2597 += 12;
              }
              while (v2598 != v2595 + 12 * v2591);
            }
            if (v7 + 144 != v2595 && v2595)
            {
              if (*(_QWORD *)(v7 + 128) == v2595)
              {
                *(_QWORD *)(v7 + 128) = 0;
                *(_DWORD *)(v7 + 136) = 0;
              }
              WTF::fastFree(v2595, v937, v938, v939, v940, v941, v942, v943);
            }
          }
          v2599 = *(unsigned int *)(v7 + 140);
          if (v2592 < v2599)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A658);
          }
          v2600 = *(_QWORD *)(v7 + 128) + 12 * v2599;
          v2601 = (WTF *)((char *)v2589 + 12 * v2588);
          do
          {
            *(_DWORD *)v2600 = *(_DWORD *)v2589;
            *(_QWORD *)(v2600 + 4) = *(_QWORD *)((char *)v2589 + 4);
            v2589 = (WTF *)((char *)v2589 + 12);
            v2600 += 12;
          }
          while (v2589 != v2601);
          *(_DWORD *)(v7 + 140) = v2592;
        }
      }
      goto LABEL_1802;
    case 0x28:
    case 0x5A:
      v412 = *(_QWORD *)(v7 + 16);
      v413 = 118;
      if (*(_BYTE *)(v412 + 122) == 5)
        v413 = 119;
      v414 = *(_BYTE *)(v412 + v413);
      JSC::MacroAssemblerARM64::load8(v8, v2880 | 0x500000000, v2879, v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch32(v8, 1, v2879, 33, v415, v416, v417, v418, (uint64_t)&v2849);
      v424 = v2849;
      if (v2849 != -1)
      {
        v425 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v425 == *(_DWORD *)(a4 + 8))
        {
          v426 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v425 + 1), (unint64_t)&v2849, v419, v420, v421, v422, v423);
          v428 = *v426;
          v427 = (uint64_t *)(v426 + 1);
          v424 = v428;
          LODWORD(v425) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v427 = &v2850;
        }
        v1043 = *(_QWORD *)a4 + 12 * v425;
        *(_DWORD *)v1043 = v424;
        *(_QWORD *)(v1043 + 4) = *v427;
        ++*(_DWORD *)(a4 + 12);
      }
      JSC::MacroAssemblerARM64::load32(v8, v2880 | 0x2000000000, v2879, v419, v420, v421, v422, v423);
      v1044 = (uint64_t *)(v7 + 88);
      v1045 = v414;
      JSC::MacroAssemblerARM64::branch32(v8, 2, v1045, v2879, v1046, v1047, v1048, v1049, (uint64_t)&v2847);
      v1055 = v2847;
      if (v2847 != -1)
      {
        v1056 = *(unsigned int *)(v7 + 100);
        if ((_DWORD)v1056 == *(_DWORD *)(v7 + 96))
        {
          v1057 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v1056 + 1), (unint64_t)&v2847, v1050, v1051, v1052, v1053, v1054);
          v1059 = *v1057;
          v1058 = v1057 + 1;
          v1055 = v1059;
          LODWORD(v1056) = *(_DWORD *)(v7 + 100);
          v1060 = *(_QWORD *)(v7 + 88);
        }
        else
        {
          v1058 = &v2848;
          v1060 = *v1044;
        }
        v1061 = v1060 + 12 * v1056;
        *(_DWORD *)v1061 = v1055;
        *(_QWORD *)(v1061 + 4) = *(_QWORD *)v1058;
        ++*(_DWORD *)(v7 + 100);
      }
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19819969CLL);
      }
      v1062 = v2880 | 0x2800000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
      JSC::MacroAssemblerARM64::load64(v8, v1062, *(char *)(v8 + 272), v1050, v1051, v1052, v1053, v1054);
      JSC::MacroAssemblerARM64::branchTest64(v8, 1, 16, 0xFFFFFFFFLL, v1063, v1064, v1065, v1066, (uint64_t)&v2845, v1067);
      v1073 = v2845;
      if (v2845 != -1)
      {
        v1074 = *(unsigned int *)(v7 + 100);
        if ((_DWORD)v1074 == *(_DWORD *)(v7 + 96))
        {
          v1075 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v1074 + 1), (unint64_t)&v2845, v1068, v1069, v1070, v1071, v1072);
          v1077 = *v1075;
          v1076 = (uint64_t *)(v1075 + 1);
          v1073 = v1077;
          LODWORD(v1074) = *(_DWORD *)(v7 + 100);
          v1078 = *(_QWORD *)(v7 + 88);
        }
        else
        {
          v1076 = &v2846;
          v1078 = *v1044;
        }
        v1134 = v1078 + 12 * v1074;
        *(_DWORD *)v1134 = v1073;
        *(_QWORD *)(v1134 + 4) = *v1076;
        ++*(_DWORD *)(v7 + 100);
      }
      if (JSC::forInBy(*((unsigned __int8 *)this + 4)))
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, 7, (char)v11, v1135, v1136, v1137, v1138, v1139);
      }
      else
      {
        JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v1045, v2879);
        JSC::MacroAssemblerARM64::load64(v8, v2880 | ((unint64_t)v2879 << 8) | 0x300000000, 0x200000030uLL, (char)v11, v1140, v1141, v1142, v1143);
      }
      goto LABEL_1249;
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
      v24 = JSC::toTypedArrayType(v22);
      v30 = *(_QWORD *)(v7 + 16);
      v31 = 118;
      if (*(_BYTE *)(v30 + 122) == 5)
        v31 = 119;
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198198100);
      }
      v32 = v24;
      v33 = (*((unsigned __int8 *)this + 4) - 50 < 0x3B) & (0x7FC0007FC0001FFuLL >> (*((_BYTE *)this + 4) - 50));
      v34 = *(unsigned __int8 *)(v30 + v31);
      v35 = v2880 | 0x500000000;
      v36 = v24 + 38;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load8(v8, v35, *(char *)(v8 + 304), v25, v26, v27, v28, v29);
      JSC::MacroAssemblerARM64::branch32(v8, 1, 17, v36, v37, v38, v39, v40, (uint64_t)&v2843);
      v46 = v2843;
      if (v2843 != -1)
      {
        v47 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v47 == *(_DWORD *)(a4 + 8))
        {
          v48 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v47 + 1), (unint64_t)&v2843, v41, v42, v43, v44, v45);
          v50 = *v48;
          v49 = v48 + 1;
          v46 = v50;
          LODWORD(v47) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v49 = &v2844;
        }
        v78 = *(_QWORD *)a4 + 12 * v47;
        *(_DWORD *)v78 = v46;
        *(_QWORD *)(v78 + 4) = *(_QWORD *)v49;
        ++*(_DWORD *)(a4 + 12);
      }
      if ((v33 & 1) == 0)
      {
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819815CLL);
        }
        v79 = v2880 | 0x2800000000;
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load8(v8, v79, *(char *)(v8 + 304), v41, v42, v43, v44, v45);
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)6, v8, 1, 17, v80, v81, v82, v83, (uint64_t)&v2841, v84);
        v92 = v2841;
        if (v2841 != -1)
        {
          v93 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v93 == *(_DWORD *)(a4 + 8))
          {
            v94 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v93 + 1), (unint64_t)&v2841, v87, v88, v89, v90, v91);
            v96 = *v94;
            v95 = (uint64_t *)(v94 + 1);
            v92 = v96;
            LODWORD(v93) = *(_DWORD *)(a4 + 12);
          }
          else
          {
            v95 = &v2842;
          }
          v154 = *(_QWORD *)a4 + 12 * v93;
          *(_DWORD *)v154 = v92;
          *(_QWORD *)(v154 + 4) = *v95;
          ++*(_DWORD *)(a4 + 12);
        }
        v155 = this;
        v156 = v7;
        v157 = v23;
        v158 = v2880;
        v159 = v2879;
        v160 = *(_DWORD *)(v8 + 200);
        if (v160 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v85, v86, v87, v88, v89, v90, v91);
          v160 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v160) = v159 & 0x1F | (32 * v34) | 0x93407C00;
        *(_DWORD *)(v8 + 200) += 4;
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1981981B0);
        }
        v161 = v158 | 0x1800000000;
        v162 = v2879;
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load64(v8, v161, *(char *)(v8 + 304), v87, v88, v89, v90, v91);
        JSC::MacroAssemblerARM64::branch64(v8, 2, v162, 17, v163, v164, v165, v166, (uint64_t)&v2839);
        v172 = v2839;
        v23 = v157;
        v7 = v156;
        this = v155;
        if (v2839 != -1)
        {
          v173 = *(unsigned int *)(v7 + 100);
          if ((_DWORD)v173 == *(_DWORD *)(v7 + 96))
          {
            v174 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v173 + 1), (unint64_t)&v2839, v167, v168, v169, v170, v171);
            v176 = *v174;
            v175 = v174 + 1;
            v172 = v176;
            v177 = *(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100);
          }
          else
          {
            v175 = &v2840;
            v177 = *(_QWORD *)(v7 + 88) + 12 * v173;
          }
          *(_DWORD *)v177 = v172;
          *(_QWORD *)(v177 + 4) = *(_QWORD *)v175;
          ++*(_DWORD *)(v7 + 100);
        }
      }
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v178 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v179, v180, v181, v182, v183);
      v2714 = (WTF *)v2716;
      v2715 = 2;
      if (v33)
      {
        v185 = this;
        v186 = v7;
        v187 = v23;
        JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl(v8, v2880, v178, v2879, v178, v32 | 0x100, 0, v184);
        v195 = v2879;
        v196 = *(_DWORD *)(v8 + 200);
        if (v196 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v188, v189, v190, v191, v192, v193, v194);
          v196 = *(_DWORD *)(v8 + 200);
        }
        v197 = v2879;
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v196) = v195 & 0x1F | (32 * v34) | 0x93407C00;
        *(_DWORD *)(v8 + 200) += 4;
        JSC::MacroAssemblerARM64::branch64(v8, 2, v197, v178, v191, v192, v193, v194, (uint64_t)&v2837);
        v203 = v2837;
        v23 = v187;
        v7 = v186;
        this = v185;
        if (v2837 != -1)
        {
          v204 = HIDWORD(v2715);
          if (HIDWORD(v2715) == (_DWORD)v2715)
          {
            v205 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2837, v198, v199, v200, v201, v202);
            v207 = *v205;
            v206 = (uint64_t *)(v205 + 1);
            v203 = v207;
            v204 = HIDWORD(v2715);
          }
          else
          {
            v206 = &v2838;
          }
          v208 = (char *)v2714 + 12 * v204;
          *(_DWORD *)v208 = v203;
          *(_QWORD *)(v208 + 4) = *v206;
          ++HIDWORD(v2715);
        }
      }
      if (JSC::forInBy(*((unsigned __int8 *)this + 4)))
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, 7, (char)v23, v209, v210, v211, v212, v213);
      }
      else
      {
        v219 = v23;
        JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x1800000000, v2879, v209, v210, v211, v212, v213);
        JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x1000000000, v178, v220, v221, v222, v223, v224);
        JSC::AssemblyHelpers::cageConditionally((_DWORD *)v8, 0, v178, v2879, v2879, v225, v226, v227);
        v235 = v2879;
        v236 = *(_DWORD *)(v8 + 200);
        if (v236 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v228, v229, v230, v231, v232, v233, v234);
          v236 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v236) = v235 & 0x1F | (32 * v34) | 0x93407C00;
        *(_DWORD *)(v8 + 200) += 4;
        if (v32 > 7)
        {
          v239 = *(unsigned __int8 *)(v7 + 177);
          if (v239 == 255)
          {
            __break(0xC471u);
            JUMPOUT(0x1981985C4);
          }
          v240 = 8;
          if (v32 != 9)
            v240 = 1;
          if (v32 == 8)
            v240 = 4;
          if (v240 == 8)
          {
            JSC::MacroAssemblerARM64::loadDouble(v8, v178 | ((unint64_t)v2879 << 8) | 0x300000000, 0x200000000uLL, (char)v239, v231, v232, v233, v234);
          }
          else
          {
            if (v240 != 4)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A5B8);
            }
            JSC::MacroAssemblerARM64::loadFloat(v8, v178 | ((unint64_t)v2879 << 8) | 0x200000000, 0x200000000uLL, (char)v239, v231, v232, v233, v234);
            v251 = *(char *)(v7 + 177);
            v252 = *(_DWORD *)(v8 + 200);
            if (v252 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v250, v241, v242, v243, v244, v245, v246);
              v252 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v252) = v251 | (32 * v251) | 0x1E22C000;
            *(_DWORD *)(v8 + 200) += 4;
          }
          JSC::AssemblyHelpers::purifyNaN(v8, *(char *)(v7 + 177), v241, v242, v243, v244, v245, v246);
          v255 = *(char *)(v7 + 177);
          v256 = *(_DWORD *)(v8 + 200);
          if (v256 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v253, v254, v214, v215, v216, v217, v218);
            v256 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v256) = v219 & 0x1F | (32 * v255) | 0x9E660000;
          v257 = *(_DWORD *)(v8 + 200);
          v258 = v257 + 4;
          *(_DWORD *)(v8 + 200) = v257 + 4;
          if (v219 == 31)
          {
            if ((v257 + 8) > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v253, v254, v214, v215, v216, v217, v218);
              v258 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v258) = -885300225;
          }
          else
          {
            if ((v257 + 8) > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v253, v254, v214, v215, v216, v217, v218);
              v258 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v258) = v219 & 0x1F | (32 * (v219 & 0x1F)) | 0xCB1B0000;
          }
          *(_DWORD *)(v8 + 200) += 4;
        }
        else
        {
          v237 = v219;
          if ((v32 - 4) > 3u)
            LOBYTE(v238) = 0;
          else
            v238 = qword_1991531B8[(char)v32 - 4];
          v247 = 1 << v238;
          switch(v247)
          {
            case 4:
              JSC::MacroAssemblerARM64::load32(v8, v178 | ((unint64_t)v2879 << 8) | 0x200000000, 0x200000000uLL, (char)v219, v231, v232, v233, v234);
              break;
            case 2:
              if (v32 <= 6 && ((1 << v32) & 0x52) != 0)
                JSC::MacroAssemblerARM64::load16SignedExtendTo32(v8, v178 | ((unint64_t)v2879 << 8) | 0x100000000, 0x200000000uLL, (char)v219, v231, v232, v233, v234);
              else
                JSC::MacroAssemblerARM64::load16(v8, v178 | ((unint64_t)v2879 << 8) | 0x100000000, 0x200000000uLL, (char)v219, v231, v232, v233, v234);
              break;
            case 1:
              if (v32 <= 6 && ((1 << v32) & 0x52) != 0)
                JSC::MacroAssemblerARM64::load8SignedExtendTo32(v8, v178 | ((unint64_t)v2879 << 8), 0x200000000uLL, (char)v219, v231, v232, v233, v234);
              else
                JSC::MacroAssemblerARM64::load8(v8, v178 | ((unint64_t)v2879 << 8), 0x200000000uLL, (char)v219, v231, v232, v233, v234);
              break;
            default:
LABEL_2032:
              __break(0xC471u);
              JUMPOUT(0x19819A5E8);
          }
          *(_QWORD *)&v2793 = 0xFFFFFFFFLL;
          DWORD2(v2793) = -16773311;
          if (v32 == 7)
          {
            if (*(unsigned __int8 *)(v7 + 177) == 255)
            {
              __break(0xC471u);
              JUMPOUT(0x1981987F4);
            }
            JSC::MacroAssemblerARM64::branchTest32(v8, 5, (char)v219, (char)v219, v215, v216, v217, v218, (uint64_t)&v2790);
            v906 = *(char *)(v7 + 177);
            v907 = *(_DWORD *)(v8 + 200);
            if (v907 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v899, v900, v901, v902, v903, v904, v905);
              v907 = *(_DWORD *)(v8 + 200);
            }
            v908 = v219 & 0x1F;
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v907) = v906 | (32 * v908) | 0x1E620000;
            *(_DWORD *)(v8 + 200) += 4;
            if (!*(_BYTE *)(v8 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x1981988A8);
            }
            v909 = *(char *)(v7 + 177);
            JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)v8, (uint64_t)&JSC::MacroAssembler::twoToThe32, v8 + 296, v901, v902, v903, v904, v905);
            v917 = *(_DWORD *)(v8 + 200);
            if (v917 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v910, v911, v912, v913, v914, v915, v916);
              v917 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v917) = -58758593;
            v918 = *(_DWORD *)(v8 + 200);
            v919 = v918 + 4;
            *(_DWORD *)(v8 + 200) = v918 + 4;
            if ((v918 + 8) > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v910, v911, v912, v913, v914, v915, v916);
              v919 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v919) = v909 | (32 * v909) | 0x1E7F2800;
            v920 = *(_DWORD *)(v8 + 200);
            v921 = v920 + 4;
            *(_DWORD *)(v8 + 200) = v920 + 4;
            v922 = *(char *)(v7 + 177);
            if ((v920 + 8) > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v910, v911, v912, v913, v914, v915, v916);
              v921 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v921) = v908 | (32 * v922) | 0x9E660000;
            v923 = *(_DWORD *)(v8 + 200);
            v924 = v923 + 4;
            *(_DWORD *)(v8 + 200) = v923 + 4;
            if (v219 == 31)
              v925 = -885300225;
            else
              v925 = v908 | (32 * v908) | 0xCB1B0000;
            if ((v923 + 8) > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v910, v911, v912, v913, v914, v915, v916);
              v924 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v924) = v925;
            v926 = *(_DWORD *)(v8 + 200) + 4;
            for (*(_DWORD *)(v8 + 200) = v926; v926 < *(_DWORD *)(v8 + 52); v237 = v219)
            {
              if ((v926 + 4) > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v910, v911, v912, v913, v914, v915, v916);
                v926 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v926) = -721215457;
              v926 = *(_DWORD *)(v8 + 200) + 4;
              *(_DWORD *)(v8 + 200) = v926;
            }
            v927 = v926;
            if ((v926 + 4) > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v910, v911, v912, v913, v914, v915, v916);
              v927 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v927) = 335544320;
            *(_DWORD *)(v8 + 200) += 4;
            v928 = 0xFF000F4500000000;
            if (!*(_BYTE *)(v8 + 328))
              v928 = 0xFF000F4100000000;
            LODWORD(v2793) = v926;
            *(_QWORD *)((char *)&v2793 + 4) = v928;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2790, v8, v911, v912, v913, v914, v915, v916);
          }
          else
          {
            v926 = -1;
          }
          v929 = *(_DWORD *)(v8 + 200);
          if (v929 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v248, v249, v214, v215, v216, v217, v218);
            v929 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v929) = (v237 & 0xFFE0FFFF | ((v237 & 0x1F) << 16) | 0xAA0003E0) - 128;
          *(_DWORD *)(v8 + 200) += 4;
          if (v926 != -1)
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2793, v8, v249, v214, v215, v216, v217, v218);
        }
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v214, v215, v216, v217, v218);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v930, v931, v932, v933, v934, v935, v936);
      if (!v33)
        goto LABEL_1648;
      if (HIDWORD(v2715))
      {
        v944 = 0;
        v945 = 0;
        v946 = 12 * HIDWORD(v2715);
        do
        {
          if (v945 >= HIDWORD(v2715))
          {
            __break(0xC471u);
            JUMPOUT(0x19819A4ECLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v944), v8, v938, v939, v940, v941, v942, v943);
          ++v945;
          v944 += 12;
        }
        while (v946 != v944);
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
      for (i1 = *(_DWORD *)(v8 + 200); i1 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i1)
      {
        if ((i1 + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          i1 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + i1) = -721215457;
        i1 = *(_DWORD *)(v8 + 200) + 4;
      }
      v948 = i1;
      if ((i1 + 4) > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
        v948 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v948) = 335544320;
      *(_DWORD *)(v8 + 200) += 4;
      v949 = *(_BYTE *)(v8 + 328) ? 69 : 65;
      v2832 = i1;
      v2833 = 0;
      v2834 = v949;
      v2835 = 15;
      v2836 = -1;
      if (i1 == -1)
        goto LABEL_1648;
      v950 = (_QWORD *)(v7 + 88);
      v951 = *(unsigned int *)(v7 + 100);
      if ((_DWORD)v951 == *(_DWORD *)(v7 + 96))
      {
        v952 = (void *)(v951 + 1);
        v953 = &v2832;
LABEL_1644:
        v2467 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v950, v952, (unint64_t)v953, v939, v940, v941, v942, v943);
        v2468 = *v2467;
        v954 = v2467 + 1;
        v2469 = (_DWORD *)(*(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100));
        *v2469 = v2468;
        v2470 = v2469 + 1;
LABEL_1647:
        *v2470 = *(_QWORD *)v954;
        ++*(_DWORD *)(v7 + 100);
        goto LABEL_1648;
      }
      v954 = &v2833;
      goto LABEL_1646;
    case 0x3B:
    case 0x6D:
      v459 = *(_QWORD *)(v7 + 16);
      v460 = 118;
      if (*(_BYTE *)(v459 + 122) == 5)
        v460 = 119;
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1981996DCLL);
      }
      v461 = *(_BYTE *)(v459 + v460);
      v462 = v2880 | 0x500000000;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load8(v8, v462, *(char *)(v8 + 304), v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branch32(v8, 1, 17, 2, v463, v464, v465, v466, (uint64_t)&v2830);
      v472 = v2830;
      if (v2830 != -1)
      {
        v473 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v473 == *(_DWORD *)(a4 + 8))
        {
          v474 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v473 + 1), (unint64_t)&v2830, v467, v468, v469, v470, v471);
          v476 = *v474;
          v475 = (uint64_t *)(v474 + 1);
          v472 = v476;
          LODWORD(v473) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v475 = &v2831;
        }
        v1240 = *(_QWORD *)a4 + 12 * v473;
        *(_DWORD *)v1240 = v472;
        *(_QWORD *)(v1240 + 4) = *v475;
        ++*(_DWORD *)(a4 + 12);
      }
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v1241 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2714 = (WTF *)v2716;
      v2715 = 2;
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v1242, v1243, v1244, v1245, v1246);
      JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x800000000, v1241, v1247, v1248, v1249, v1250, v1251);
      JSC::MacroAssemblerARM64::branchTest64(v8, 1, v1241, 1, v1252, v1253, v1254, v1255, (uint64_t)&v2828, v1256);
      v1262 = v2828;
      if (v2828 != -1)
      {
        v1263 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1264 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2828, v1257, v1258, v1259, v1260, v1261);
          v1266 = *v1264;
          v1265 = v1264 + 1;
          v1262 = v1266;
          v1263 = HIDWORD(v2715);
        }
        else
        {
          v1265 = &v2829;
        }
        v1267 = (char *)v2714 + 12 * v1263;
        *(_DWORD *)v1267 = v1262;
        *(_QWORD *)(v1267 + 4) = *(_QWORD *)v1265;
        ++HIDWORD(v2715);
      }
      JSC::MacroAssemblerARM64::load32(v8, v1241 | 0x400000000, v2879, v1257, v1258, v1259, v1260, v1261);
      v1268 = v461;
      JSC::MacroAssemblerARM64::branch32(v8, 2, v1268, v2879, v1269, v1270, v1271, v1272, (uint64_t)&v2826);
      v1278 = v2826;
      if (v2826 != -1)
      {
        v1279 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1280 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2826, v1273, v1274, v1275, v1276, v1277);
          v1282 = *v1280;
          v1281 = (uint64_t *)(v1280 + 1);
          v1278 = v1282;
          v1279 = HIDWORD(v2715);
        }
        else
        {
          v1281 = &v2827;
        }
        v1283 = (char *)v2714 + 12 * v1279;
        *(_DWORD *)v1283 = v1278;
        *(_QWORD *)(v1283 + 4) = *v1281;
        ++HIDWORD(v2715);
      }
      if (JSC::forInBy(*((unsigned __int8 *)this + 4)))
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, 7, (char)v11, v1284, v1285, v1286, v1287, v1288);
      }
      else
      {
        JSC::MacroAssemblerARM64::load32(v8, v1241 | 0x1000000000, v2879, v1284, v1285, v1286, v1287, v1288);
        JSC::MacroAssemblerARM64::load64(v8, v1241 | 0x800000000, v1241, v1294, v1295, v1296, v1297, v1298);
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, v8, 0, v2879, v1299, v1300, v1301, v1302, (uint64_t)&v2793, v1303);
        JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v1268, v2879);
        JSC::MacroAssemblerARM64::load8(v8, v1241 | ((unint64_t)v2879 << 8), 0x200000000uLL, v1241, v1304, v1305, v1306, v1307);
        for (i2 = *(_DWORD *)(v8 + 200); (signed int)i2 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i2)
        {
          if (i2 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1308, v1309, v1310, v1311, v1312, v1313, v1314);
            i2 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + i2) = -721215457;
          i2 = *(_DWORD *)(v8 + 200) + 4;
        }
        v1316 = i2;
        if (i2 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1308, v1309, v1310, v1311, v1312, v1313, v1314);
          v1316 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1316) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v1317 = 69;
        else
          v1317 = 65;
        v2790 = (WTF *)i2;
        LOBYTE(v2791) = v1317;
        *(_WORD *)((char *)&v2791 + 1) = 15;
        BYTE3(v2791) = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2793, v8, v1309, v1310, v1311, v1312, v1313, v1314);
        JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v1268, v2879);
        JSC::MacroAssemblerARM64::load16(v8, v1241 | ((unint64_t)v2879 << 8) | 0x100000000, 0x200000000uLL, v1241, v1318, v1319, v1320, v1321);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2790, v8, v1322, v1323, v1324, v1325, v1326, v1327);
        JSC::MacroAssemblerARM64::branch32(v8, 8, v1241, 255, v1328, v1329, v1330, v1331, (uint64_t)&v2824);
        v1337 = v2824;
        if (v2824 != -1)
        {
          v1338 = HIDWORD(v2715);
          if (HIDWORD(v2715) == (_DWORD)v2715)
          {
            v1339 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2824, v1332, v1333, v1334, v1335, v1336);
            v1341 = *v1339;
            v1340 = v1339 + 1;
            v1337 = v1341;
            v1338 = HIDWORD(v2715);
          }
          else
          {
            v1340 = &v2825;
          }
          v1411 = (char *)v2714 + 12 * v1338;
          *(_DWORD *)v1411 = v1337;
          *(_QWORD *)(v1411 + 4) = *(_QWORD *)v1340;
          ++HIDWORD(v2715);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v9 + 42216, v2879, v1332, v1333, v1334, v1335, v1336);
        JSC::MacroAssemblerARM64::load64(v8, v2879 | ((unint64_t)v1241 << 8) | 0x300000000, 0x200000000uLL, (char)v11, v1412, v1413, v1414, v1415);
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v1289, v1290, v1291, v1292, v1293);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v1416, v1417, v1418, v1419, v1420, v1421, v1422);
      if ((_DWORD)v2707)
      {
        if (HIDWORD(v2715))
        {
          v1423 = 0;
          v1424 = 0;
          v1425 = 12 * HIDWORD(v2715);
          do
          {
            if (v1424 >= HIDWORD(v2715))
            {
              __break(0xC471u);
              JUMPOUT(0x19819A534);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v1423), v8, v938, v939, v940, v941, v942, v943);
            ++v1424;
            v1423 += 12;
          }
          while (v1425 != v1423);
        }
        JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
        for (i3 = *(_DWORD *)(v8 + 200); i3 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i3)
        {
          if ((i3 + 4) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
            i3 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + i3) = -721215457;
          i3 = *(_DWORD *)(v8 + 200) + 4;
        }
        v1427 = i3;
        if ((i3 + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          v1427 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1427) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v1428 = 69;
        else
          v1428 = 65;
        v2819 = i3;
        v2820 = 0;
        v2821 = v1428;
        v2822 = 15;
        v2823 = -1;
        if (i3 != -1)
        {
          v1429 = *(unsigned int *)(v7 + 140);
          if ((_DWORD)v1429 == *(_DWORD *)(v7 + 136))
          {
            v1430 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 128, (void *)(v1429 + 1), (unint64_t)&v2819, v939, v940, v941, v942, v943);
            v1432 = *v1430;
            v1431 = (uint64_t *)(v1430 + 1);
            v1433 = (int *)(*(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140));
            *v1433 = v1432;
          }
          else
          {
            v1431 = (uint64_t *)&v2820;
            v1433 = (int *)(*(_QWORD *)(v7 + 128) + 12 * v1429);
            *v1433 = i3;
          }
          v1434 = v1433 + 1;
          v1445 = *v1431;
          goto LABEL_1841;
        }
      }
      else
      {
        v1435 = HIDWORD(v2715);
        if (HIDWORD(v2715))
        {
          v1436 = v2714;
          v1437 = *(unsigned int *)(v7 + 136);
          v1438 = *(unsigned int *)(v7 + 140);
          v1439 = v1438 + HIDWORD(v2715);
          if (v1439 > v1437)
          {
            v1440 = v1437 + (v1437 >> 2);
            if (v1440 >= 0x10)
              v1441 = v1440 + 1;
            else
              v1441 = 16;
            if (v1441 <= v1439)
              v1441 = v1438 + HIDWORD(v2715);
            v1442 = *(_QWORD *)(v7 + 128);
            if (v1441 < 3)
            {
              v1444 = v7 + 144;
              *(_QWORD *)(v7 + 128) = v7 + 144;
              *(_DWORD *)(v7 + 136) = 2;
            }
            else
            {
              if (v1441 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A6E8);
              }
              v1443 = 12 * v1441;
              v1444 = WTF::fastMalloc((WTF *)(12 * v1441));
              *(_DWORD *)(v7 + 136) = (v1443 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v7 + 128) = v1444;
            }
            if ((_DWORD)v1438)
            {
              v2091 = v1442;
              do
              {
                *(_DWORD *)v1444 = *(_DWORD *)v2091;
                *(_QWORD *)(v1444 + 4) = *(_QWORD *)(v2091 + 4);
                v2091 += 12;
                v1444 += 12;
              }
              while (v2091 != v1442 + 12 * v1438);
            }
            if (v7 + 144 != v1442 && v1442)
            {
              if (*(_QWORD *)(v7 + 128) == v1442)
              {
                *(_QWORD *)(v7 + 128) = 0;
                *(_DWORD *)(v7 + 136) = 0;
              }
              WTF::fastFree(v1442, v937, v938, v939, v940, v941, v942, v943);
            }
          }
          v2092 = *(unsigned int *)(v7 + 140);
          if (v1439 < v2092)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A650);
          }
          v2093 = *(_QWORD *)(v7 + 128) + 12 * v2092;
          v2094 = (WTF *)((char *)v1436 + 12 * v1435);
          do
          {
            *(_DWORD *)v2093 = *(_DWORD *)v1436;
            *(_QWORD *)(v2093 + 4) = *(_QWORD *)((char *)v1436 + 4);
            v1436 = (WTF *)((char *)v1436 + 12);
            v2093 += 12;
          }
          while (v1436 != v2094);
          *(_DWORD *)(v7 + 140) = v1439;
        }
      }
      goto LABEL_1855;
    case 0x3C:
    case 0x6E:
      JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator()(v2876, v13, v14, v15, v16, v17, v18, v19);
      v481 = *(_QWORD *)(v7 + 16);
      v482 = 118;
      if (*(_BYTE *)(v481 + 122) == 5)
        v482 = 119;
      JSC::MacroAssemblerARM64::branchTest32(v8, 4, *(char *)(v481 + v482), *(char *)(v481 + v482), v477, v478, v479, v480, (uint64_t)&v2817);
      v483 = v2817;
      if (v2817 != -1)
      {
        v484 = *(unsigned int *)(v7 + 140);
        if ((_DWORD)v484 == *(_DWORD *)(v7 + 136))
        {
          v485 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 128, (void *)(v484 + 1), (unint64_t)&v2817, (uint64_t)v450, v451, v452, v453, v454);
          v487 = *v485;
          v486 = v485 + 1;
          v483 = v487;
          v488 = *(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140);
        }
        else
        {
          v486 = &v2818;
          v488 = *(_QWORD *)(v7 + 128) + 12 * v484;
        }
        *(_DWORD *)v488 = v483;
        *(_QWORD *)(v488 + 4) = *(_QWORD *)v486;
        ++*(_DWORD *)(v7 + 140);
      }
      goto LABEL_608;
    case 0x3E:
      *(_QWORD *)&v2793 = v2794;
      *((_QWORD *)&v2793 + 1) = 2;
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v2714, *(_QWORD *)(v7 + 16), v2879);
      v853 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v2714);
      v854 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v2714);
      v855 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v2714);
      v2795 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&v2714, (JSC::ScratchRegisterAllocator *)v8, 0, v856, v857, v858, v859, v860);
      v2790 = (WTF *)v2792;
      v2791 = 2;
      v866 = *(_QWORD *)(v7 + 16);
      v867 = 118;
      if (*(_BYTE *)(v866 + 122) == 5)
        v867 = 119;
      v868 = *(unsigned __int8 *)(v866 + v867);
      if ((*(_BYTE *)(v866 + 129) & 0x20) == 0)
      {
        JSC::MacroAssemblerARM64::branchTest64(v8, 1, (char)v868, 28, v862, v863, v864, v865, (uint64_t)&v2677);
        v874 = v2677;
        if (v2677 != -1)
        {
          v875 = HIDWORD(v2793);
          if (HIDWORD(v2793) == DWORD2(v2793))
          {
            v876 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2793, (void *)(HIDWORD(v2793) + 1), (unint64_t)&v2677, v869, v870, v871, v872, v873);
            v878 = *v876;
            v877 = (uint64_t *)(v876 + 1);
            v874 = v878;
            v875 = HIDWORD(v2793);
          }
          else
          {
            v877 = &v2678;
          }
          v1822 = v2793 + 12 * v875;
          *(_DWORD *)v1822 = v874;
          *(_QWORD *)(v1822 + 4) = *v877;
          ++HIDWORD(v2793);
        }
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A34CLL);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load8(v8, v868 | 0x500000000, *(char *)(v8 + 304), v869, v870, v871, v872, v873);
        JSC::MacroAssemblerARM64::branch32(v8, 1, 17, 2, v1823, v1824, v1825, v1826, (uint64_t)&v2675);
        v1827 = v2675;
        if (v2675 != -1)
        {
          v1828 = HIDWORD(v2793);
          if (HIDWORD(v2793) == DWORD2(v2793))
          {
            v1829 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2793, (void *)(HIDWORD(v2793) + 1), (unint64_t)&v2675, v861, v862, v863, v864, v865);
            v1831 = *v1829;
            v1830 = v1829 + 1;
            v1827 = v1831;
            v1828 = HIDWORD(v2793);
          }
          else
          {
            v1830 = &v2676;
          }
          v1939 = v2793 + 12 * v1828;
          *(_DWORD *)v1939 = v1827;
          *(_QWORD *)(v1939 + 4) = *(_QWORD *)v1830;
          ++HIDWORD(v2793);
        }
      }
      JSC::MacroAssemblerARM64::load64(v8, v868 | 0x800000000, v855, v861, v862, v863, v864, v865);
      JSC::MacroAssemblerARM64::branchTest64(v8, 1, v855, 1, v1940, v1941, v1942, v1943, (uint64_t)&v2673, v1944);
      v1950 = v2673;
      if (v2673 != -1)
      {
        v1951 = HIDWORD(v2793);
        if (HIDWORD(v2793) == DWORD2(v2793))
        {
          v1952 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2793, (void *)(HIDWORD(v2793) + 1), (unint64_t)&v2673, v1945, v1946, v1947, v1948, v1949);
          v1954 = *v1952;
          v1953 = (uint64_t *)(v1952 + 1);
          v1950 = v1954;
          v1951 = HIDWORD(v2793);
        }
        else
        {
          v1953 = &v2674;
        }
        v1955 = v2793 + 12 * v1951;
        *(_DWORD *)v1955 = v1950;
        *(_QWORD *)(v1955 + 4) = *v1953;
        ++HIDWORD(v2793);
      }
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199D10);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load32(v8, v855 | 0x1000000000, *(char *)(v8 + 304), v1945, v1946, v1947, v1948, v1949);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v8, 0, 17, v1956, v1957, v1958, v1959, (uint64_t)&v2671, v1960);
      v1966 = v2671;
      if (v2671 != -1)
      {
        v1967 = HIDWORD(v2793);
        if (HIDWORD(v2793) == DWORD2(v2793))
        {
          v1968 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2793, (void *)(HIDWORD(v2793) + 1), (unint64_t)&v2671, v1961, v1962, v1963, v1964, v1965);
          v1970 = *v1968;
          v1969 = v1968 + 1;
          v1966 = v1970;
          v1967 = HIDWORD(v2793);
        }
        else
        {
          v1969 = &v2672;
        }
        v1971 = v2793 + 12 * v1967;
        *(_DWORD *)v1971 = v1966;
        *(_QWORD *)(v1971 + 4) = *(_QWORD *)v1969;
        ++HIDWORD(v2793);
      }
      JSC::AssemblyHelpers::storeMegamorphicProperty(v8, v9, v2880, v855, 0, (char)v11, v2879, v853, (uint64_t)&__dst, v854);
      v1979 = HIDWORD(v2705);
      if (HIDWORD(v2705))
      {
        v2659 = v854;
        v1980 = v11;
        v1981 = (char *)__dst;
        v1982 = HIDWORD(v2793);
        v1983 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2705);
        if (v1983 > DWORD2(v2793))
        {
          v1984 = DWORD2(v2793) + ((unint64_t)DWORD2(v2793) >> 2);
          if (v1984 >= 0x10)
            v1985 = v1984 + 1;
          else
            v1985 = 16;
          if (v1985 <= v1983)
            v1985 = HIDWORD(v2793) + (unint64_t)HIDWORD(v2705);
          v1986 = (_BYTE *)v2793;
          if (v1985 < 3)
          {
            v1988 = v2794;
            *(_QWORD *)&v2793 = v2794;
            DWORD2(v2793) = 2;
          }
          else
          {
            if (v1985 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A6E0);
            }
            v1987 = 12 * v1985;
            v1988 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v1985));
            DWORD2(v2793) = (v1987 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)&v2793 = v1988;
          }
          if (v1982)
          {
            v2052 = v1986;
            do
            {
              *(_DWORD *)v1988 = *(_DWORD *)v2052;
              *(_QWORD *)(v1988 + 4) = *(_QWORD *)(v2052 + 4);
              v2052 += 12;
              v1988 += 12;
            }
            while (v2052 != &v1986[12 * v1982]);
          }
          if (v2794 != v1986 && v1986)
          {
            if ((_BYTE *)v2793 == v1986)
            {
              *(_QWORD *)&v2793 = 0;
              DWORD2(v2793) = 0;
            }
            WTF::fastFree((unint64_t)v1986, v1972, v1973, v1974, v1975, v1976, v1977, v1978);
          }
        }
        if (v1983 < HIDWORD(v2793))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A648);
        }
        v2053 = v2793 + 12 * HIDWORD(v2793);
        v2054 = &v1981[12 * v1979];
        do
        {
          *(_DWORD *)v2053 = *(_DWORD *)v1981;
          *(_QWORD *)(v2053 + 4) = *(_QWORD *)(v1981 + 4);
          v1981 += 12;
          v2053 += 12;
        }
        while (v1981 != v2054);
        HIDWORD(v2793) = v1983;
        v23 = v1980;
        v854 = v2659;
      }
      v2649 = (JSC::AssemblerBuffer *)(v8 + 56);
      v2660 = *(_DWORD *)(v8 + 200);
      if ((signed int)v2660 < *(_DWORD *)(v8 + 52))
      {
        do
        {
          if (v2660 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2649, (uint64_t)v1972, v1973, v1974, v1975, v1976, v1977, v1978);
            v2660 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2660) = -721215457;
          v2639 = *(_DWORD *)(v8 + 200) + 4;
          *(_DWORD *)(v8 + 200) = v2639;
          v2660 = v2639;
        }
        while (v2639 < *(_DWORD *)(v8 + 52));
      }
      *(_DWORD *)(v8 + 208) = 0;
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v2714, (const char *)v8, (const char *)&v2795, v1974, v1975, v1976, v1977, v1978);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2055, v2056, v2057, v2058, v2059, v2060, v2061);
      if (v2717)
      {
        if (HIDWORD(v2793))
        {
          v2069 = 0;
          v2070 = 0;
          v2071 = 12 * HIDWORD(v2793);
          do
          {
            if (v2070 >= HIDWORD(v2793))
            {
              __break(0xC471u);
              JUMPOUT(0x19819A584);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v2793 + v2069), v8, v2063, v2064, v2065, v2066, v2067, v2068);
            ++v2070;
            v2069 += 12;
          }
          while (v2071 != v2069);
        }
        JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v2714, (const char *)v8, (const char *)&v2795, v2064, v2065, v2066, v2067, v2068);
        for (i4 = *(_DWORD *)(v8 + 200); i4 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i4)
        {
          if ((i4 + 4) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2649, v2072, v2063, v2064, v2065, v2066, v2067, v2068);
            i4 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + i4) = -721215457;
          i4 = *(_DWORD *)(v8 + 200) + 4;
        }
        v2074 = i4;
        if ((i4 + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2649, v2072, v2063, v2064, v2065, v2066, v2067, v2068);
          v2074 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2074) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v2075 = 69;
        else
          v2075 = 65;
        v2666 = i4;
        v2667 = 0;
        v2668 = v2075;
        v2669 = 15;
        v2670 = -1;
        if (i4 != -1)
        {
          v2076 = *(unsigned int *)(v7 + 100);
          if ((_DWORD)v2076 == *(_DWORD *)(v7 + 96))
          {
            v2077 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v2076 + 1), (unint64_t)&v2666, v2064, v2065, v2066, v2067, v2068);
            v2079 = *v2077;
            v2078 = v2077 + 1;
            v2080 = *(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100);
            *(_DWORD *)v2080 = v2079;
          }
          else
          {
            v2078 = &v2667;
            v2080 = *(_QWORD *)(v7 + 88) + 12 * v2076;
            *(_DWORD *)v2080 = i4;
          }
          *(_QWORD *)(v2080 + 4) = *(_QWORD *)v2078;
          ++*(_DWORD *)(v7 + 100);
        }
      }
      else
      {
        v2081 = HIDWORD(v2793);
        if (HIDWORD(v2793))
        {
          v2651 = v23;
          v2082 = v2793;
          v2083 = *(unsigned int *)(v7 + 96);
          v2084 = *(unsigned int *)(v7 + 100);
          v2085 = v2084 + HIDWORD(v2793);
          if (v2085 > v2083)
          {
            v2086 = v2083 + (v2083 >> 2);
            if (v2086 >= 0x10)
              v2087 = v2086 + 1;
            else
              v2087 = 16;
            if (v2087 <= v2085)
              v2087 = v2084 + HIDWORD(v2793);
            v2088 = *(_QWORD *)(v7 + 88);
            if (v2087 < 3)
            {
              v2090 = v7 + 104;
              *(_QWORD *)(v7 + 88) = v7 + 104;
              *(_DWORD *)(v7 + 96) = 2;
            }
            else
            {
              if (v2087 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A720);
              }
              v2089 = 12 * v2087;
              v2090 = WTF::fastMalloc((WTF *)(12 * v2087));
              *(_DWORD *)(v7 + 96) = (v2089 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v7 + 88) = v2090;
            }
            if ((_DWORD)v2084)
            {
              v2266 = v2088;
              do
              {
                *(_DWORD *)v2090 = *(_DWORD *)v2266;
                *(_QWORD *)(v2090 + 4) = *(_QWORD *)(v2266 + 4);
                v2266 += 12;
                v2090 += 12;
              }
              while (v2266 != v2088 + 12 * v2084);
            }
            if (v7 + 104 != v2088 && v2088)
            {
              if (*(_QWORD *)(v7 + 88) == v2088)
              {
                *(_QWORD *)(v7 + 88) = 0;
                *(_DWORD *)(v7 + 96) = 0;
              }
              WTF::fastFree(v2088, v2062, v2063, v2064, v2065, v2066, v2067, v2068);
            }
          }
          v2267 = *(unsigned int *)(v7 + 100);
          if (v2085 < v2267)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A6A8);
          }
          v2268 = *(_QWORD *)(v7 + 88) + 12 * v2267;
          v2269 = v2082 + 12 * v2081;
          do
          {
            *(_DWORD *)v2268 = *(_DWORD *)v2082;
            *(_QWORD *)(v2268 + 4) = *(_QWORD *)(v2082 + 4);
            v2082 += 12;
            v2268 += 12;
          }
          while (v2082 != v2269);
          *(_DWORD *)(v7 + 100) = v2085;
          v23 = v2651;
        }
      }
      if (v2709)
      {
        v2270 = 0;
        v2271 = 0;
        v2272 = 12 * v2709;
        do
        {
          if (v2271 >= v2709)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A54CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2707 + v2270), v8, v2063, v2064, v2065, v2066, v2067, v2068);
          ++v2271;
          v2270 += 12;
        }
        while (v2272 != v2270);
      }
      v2711 = 0;
      v2712 = 0;
      v2280 = JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall((JSC::ScratchRegisterAllocator **)v7, (const JSC::RegisterSet *)&v2711, v2063, v2064, v2065, v2066, v2067, v2068);
      v2281 = v2273;
      v2711 = (WTF *)v2713;
      v2712 = 3;
      if (v2880 == 1)
      {
        v2282 = 0;
      }
      else
      {
        v2713[0] = v2880 | 0x100;
        v2282 = 1;
        HIDWORD(v2712) = 1;
      }
      if (v23 != 2)
      {
        v2713[v2282++] = v23 | 0x200;
        HIDWORD(v2712) = v2282;
      }
      if (v854 == 3)
      {
        if (v2282)
          goto LABEL_1397;
LABEL_1451:
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v9, 0, v2275, v2276, v2277, v2278, v2279);
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198199F44);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
        v2322 = *(_BYTE *)(v8 + 272);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, (uint64_t)operationPutByMegamorphicReallocating, v2322, v2317, v2318, v2319, v2320, v2321);
        *(_DWORD *)(v8 + 208) = 0;
        v2330 = *(_DWORD *)(v8 + 200);
        if (v2330 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2649, v2323, v2324, v2325, v2326, v2327, v2328, v2329);
          v2330 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2330) = (32 * (v2322 & 0x1F)) | 0xD63F0000;
        *(_DWORD *)(v8 + 200) += 4;
        v2702 = 0;
        v2703 = 0;
        v2331 = *(JSC::ScratchRegisterAllocator **)(v7 + 32);
        for (i5 = 0; v2280; v2280 &= v2280 - 1)
          i5 |= v2280 & -(uint64_t)v2280;
        v2711 = (WTF *)i5;
        v2712 = 0;
        JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v2331, (JSC::AssemblyHelpers *)&v2711, (const JSC::RegisterSet *)&v2702, v2281, 0, v2327, v2328, v2329);
        for (i6 = *(_DWORD *)(v8 + 200); (signed int)i6 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i6)
        {
          if (i6 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2649, v2333, v2334, v2335, v2336, v2337, v2338, v2339);
            i6 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + i6) = -721215457;
          i6 = *(_DWORD *)(v8 + 200) + 4;
        }
        v2341 = i6;
        if (i6 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2649, v2333, v2334, v2335, v2336, v2337, v2338, v2339);
          v2341 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2341) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v2342 = 69;
        else
          v2342 = 65;
        v2711 = (WTF *)i6;
        LOBYTE(v2712) = v2342;
        *(_WORD *)((char *)&v2712 + 1) = 15;
        BYTE3(v2712) = -1;
        v2665 = v2660;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2711, &v2665, v8, v2335, v2336, v2337, v2338, v2339);
        v2343 = v2707;
        if (v2710 != (_BYTE *)v2707 && v2707)
        {
          v2707 = 0;
          v2708 = 0;
          WTF::fastFree((unint64_t)v2343, v937, v938, v939, v940, v941, v942, v943);
        }
        v2344 = __dst;
        if (v2706 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v2705) = 0;
          WTF::fastFree((unint64_t)v2344, v937, v938, v939, v940, v941, v942, v943);
        }
        v2345 = v2790;
        if (v2792 != (_BYTE *)v2790 && v2790)
        {
          v2790 = 0;
          LODWORD(v2791) = 0;
          WTF::fastFree((unint64_t)v2345, v937, v938, v939, v940, v941, v942, v943);
        }
        v1734 = (WTF *)v2793;
        goto LABEL_1472;
      }
      v2713[v2282++] = v854 | 0x300;
      HIDWORD(v2712) = v2282;
      while (1)
      {
LABEL_1397:
        v2283 = 0;
        v2284 = 0;
        v2285 = v2711;
        v2286 = v2282;
        do
        {
          if ((*((_BYTE *)v2711 + v2283 + 1) & 0x40) != 0)
            goto LABEL_2031;
          v2284 |= 1 << *((_BYTE *)v2711 + v2283 + 1);
          v2283 += 2;
        }
        while (2 * v2282 != v2283);
        v2287 = 0;
        do
        {
          v2288 = *((_BYTE *)v2711 + v2287) & 0x7F;
          if (v2288 >= 0x40)
            goto LABEL_2031;
          v2284 &= ~(1 << v2288);
          v2287 += 2;
        }
        while (2 * v2282 != v2287);
        v2289 = (uint8x8_t)vcnt_s8((int8x8_t)v2284);
        v2289.i16[0] = vaddlv_u8(v2289);
        v2290 = v2289.i32[0];
        v2291 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v2284));
        v2291.i16[0] = vaddlv_u8(v2291);
        if (!(v2291.i32[0] + v2290))
        {
          v2653 = v2281;
          v2302 = *(_BYTE *)v2711;
          v2303 = *((_BYTE *)v2711 + 1);
          JSC::MacroAssemblerARM64::swap(v8, *(char *)v2711, (char)v2303, v2275, v2276, v2277, v2278, v2279);
          memmove(v2711, (char *)v2711 + 2, 2 * HIDWORD(v2712) - 2);
          v2304 = (HIDWORD(v2712) - 1);
          v1731 = HIDWORD(v2712) == 1;
          HIDWORD(v2712) = v2304;
          v2305 = v2711;
          v2306 = (WTF *)((char *)v2711 + 2 * v2304);
          if (v1731)
          {
            v2313 = 0;
            v2314 = 0;
            v2309 = 0;
            v2273 = v2306;
          }
          else
          {
            v2307 = 2 * v2304;
            v2308 = v2711;
            while (*(unsigned __int8 *)v2308 != v2303)
            {
              v2308 = (WTF *)((char *)v2308 + 2);
              v2307 -= 2;
              if (!v2307)
                goto LABEL_1425;
            }
            *(_BYTE *)v2308 = v2302;
LABEL_1425:
            v2309 = 0;
            v2310 = v2305;
            v2273 = v2306;
            v2311 = v2306;
            do
            {
              if (*(unsigned __int8 *)v2305 == *((unsigned __int8 *)v2305 + 1))
              {
                v2312 = v2305;
                if (v2311 != (WTF *)((char *)v2711 + 2 * HIDWORD(v2712)))
                {
                  if (v2305 == v2273)
                  {
                    v2312 = v2311;
                  }
                  else
                  {
                    v2647 = (JSC::AssemblerBuffer *)(v2310 - v2273);
                    v2648 = v2311;
                    memmove(v2311, v2273, v2310 - v2273);
                    v2312 = (JSC::AssemblerBuffer *)((char *)v2647 + (_QWORD)v2648);
                  }
                }
                v2273 = (WTF *)((char *)v2305 + 2);
                ++v2309;
                v2311 = v2312;
              }
              v2305 = (WTF *)((char *)v2305 + 2);
              v2310 = (WTF *)((char *)v2310 + 2);
            }
            while (v2305 < v2306);
            v2305 = v2711;
            v2313 = HIDWORD(v2712);
            v2314 = HIDWORD(v2712);
            v2306 = v2311;
          }
          v2315 = (WTF *)((char *)v2305 + 2 * v2313);
          v2281 = v2653;
          if (v2273 != v2315)
          {
            memmove(v2306, v2273, v2315 - v2273);
            v2314 = HIDWORD(v2712);
          }
          v2282 = v2314 - v2309;
          goto LABEL_1445;
        }
        v2292 = 0;
        v2293 = v2282 <= 1 ? 1 : v2282;
        v2294 = 2 * v2293;
        while (1)
        {
          v2295 = *((unsigned __int8 *)v2711 + v2292 + 1);
          if ((v2295 & 0x7Fu) >= 0x40)
            goto LABEL_2031;
          if (((v2284 >> (v2295 & 0x7F)) & 1) != 0)
            break;
          v2292 += 2;
          if (v2294 == v2292)
            goto LABEL_1446;
        }
        v2296 = *((unsigned __int8 *)v2711 + v2292);
        if (v2296 != v2295)
          break;
LABEL_1444:
        memmove((char *)v2285 + v2292, (char *)v2285 + v2292 + 2, 2 * v2286 - v2292 - 2);
        v2282 = HIDWORD(v2712) - 1;
LABEL_1445:
        HIDWORD(v2712) = v2282;
LABEL_1446:
        if (!v2282)
        {
          v2316 = v2711;
          if (v2713 != (_WORD *)v2711 && v2711)
          {
            v2711 = 0;
            LODWORD(v2712) = 0;
            WTF::fastFree((unint64_t)v2316, v2273, v2274, v2275, v2276, v2277, v2278, v2279);
          }
          goto LABEL_1451;
        }
      }
      v2297 = (char)v2296;
      if ((char)v2296 == 63)
      {
        v2298 = *(_DWORD *)(v8 + 200);
        v2299 = *(_DWORD *)(v8 + 192);
        if (v2295 != 31)
        {
          v2301 = v2295 & 0x1F | 0xD2800000;
          if (v2298 + 4 <= v2299)
          {
LABEL_1443:
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2298) = v2301;
            *(_DWORD *)(v8 + 200) += 4;
            v2285 = v2711;
            v2286 = HIDWORD(v2712);
            goto LABEL_1444;
          }
LABEL_1439:
          JSC::AssemblerBuffer::outOfLineGrow(v2649, (uint64_t)v2273, v2274, v2275, v2276, v2277, v2278, v2279);
          v2298 = *(_DWORD *)(v8 + 200);
          goto LABEL_1443;
        }
      }
      else
      {
        v2298 = *(_DWORD *)(v8 + 200);
        v2299 = *(_DWORD *)(v8 + 192);
        if ((char)v2295 != 31 && v2297 != 31)
        {
          v2301 = v2295 & 0xFFE0FFFF | ((v2297 & 0x1F) << 16) | 0xAA0003E0;
          goto LABEL_1442;
        }
      }
      v2301 = (char)v2295 | (32 * v2297) | 0x91000000;
LABEL_1442:
      if (v2298 + 4 <= v2299)
        goto LABEL_1443;
      goto LABEL_1439;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
      v259 = *(_QWORD *)(v7 + 16);
      v260 = 118;
      if (*(_BYTE *)(v259 + 122) == 5)
        v260 = 119;
      v261 = *(char *)(v259 + v260);
      JSC::MacroAssemblerARM64::load8(v8, v2880 | 0x400000000, v2879, v15, v16, v17, v18, v19);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v8, 1, v2879, v262, v263, v264, v265, (uint64_t)&v2796, v266);
      v272 = v2796;
      if (v2796 != -1)
      {
        v273 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v273 == *(_DWORD *)(a4 + 8))
        {
          v274 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v273 + 1), (unint64_t)&v2796, v267, v268, v269, v270, v271);
          v276 = *v274;
          v275 = (uint64_t *)(v274 + 1);
          v272 = v276;
          LODWORD(v273) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v275 = &v2797;
        }
        v593 = *(_QWORD *)a4 + 12 * v273;
        *(_DWORD *)v593 = v272;
        *(_QWORD *)(v593 + 4) = *v275;
        ++*(_DWORD *)(a4 + 12);
      }
      JSC::MacroAssemblerARM64::and32(v8, (JSC::ARM64LogicalImmediate *)0xE, v2879, v2879);
      v2714 = (WTF *)v2716;
      v2715 = 2;
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v594 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2795 = 0xFFFFFFFFLL;
      *(_QWORD *)&v2793 = v2794;
      *((_QWORD *)&v2793 + 1) = 2;
      v2790 = (WTF *)v2792;
      v2791 = 2;
      v599 = v594;
      v600 = 4;
      switch(*((_BYTE *)this + 4))
      {
        case '?':
          goto LABEL_343;
        case '@':
          v600 = 6;
          goto LABEL_343;
        case 'A':
          v600 = 8;
LABEL_343:
          JSC::MacroAssemblerARM64::branch32(v8, 1, v2879, v600, v595, v596, v597, v598, (uint64_t)&v2782);
          v884 = v2782;
          if (v2782 != -1)
          {
            v885 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v885 == *(_DWORD *)(a4 + 8))
            {
              v886 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v885 + 1), (unint64_t)&v2782, v879, v880, v881, v882, v883);
              v888 = *v886;
              v887 = v886 + 1;
              v884 = v888;
              LODWORD(v885) = *(_DWORD *)(a4 + 12);
            }
            else
            {
              v887 = &v2783;
            }
            v955 = *(_QWORD *)a4 + 12 * v885;
            *(_DWORD *)v955 = v884;
            *(_QWORD *)(v955 + 4) = *(_QWORD *)v887;
            ++*(_DWORD *)(a4 + 12);
          }
          v2795 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v879, v880, v881, v882, v883);
          JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x800000000, v2879, v956, v957, v958, v959, v960);
          if (!*(_BYTE *)(v8 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x1981995B0);
          }
          v966 = v2879 | 0xFFFFFFF800000000;
          *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
          JSC::MacroAssemblerARM64::load32(v8, v966, *(char *)(v8 + 304), v961, v962, v963, v964, v965);
          JSC::MacroAssemblerARM64::branch32(v8, 2, v261, 17, v967, v968, v969, v970, (uint64_t)&v2780);
          v978 = v2780;
          if (v2780 != -1)
          {
            v979 = HIDWORD(v2715);
            if (HIDWORD(v2715) == (_DWORD)v2715)
            {
              v980 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2780, v973, v974, v975, v976, v977);
              v982 = *v980;
              v981 = (uint64_t *)(v980 + 1);
              v978 = v982;
              v979 = HIDWORD(v2715);
            }
            else
            {
              v981 = &v2781;
            }
            v983 = (char *)v2714 + 12 * v979;
            *(_DWORD *)v983 = v978;
            *(_QWORD *)(v983 + 4) = *v981;
            ++HIDWORD(v2715);
          }
          v2663 = *(_DWORD *)(v8 + 200);
          if ((signed int)v2663 < *(_DWORD *)(v8 + 52))
          {
            do
            {
              if (v2663 + 4 > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v971, v972, v973, v974, v975, v976, v977);
                v2663 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2663) = -721215457;
              v2637 = *(_DWORD *)(v8 + 200) + 4;
              *(_DWORD *)(v8 + 200) = v2637;
              v2663 = v2637;
            }
            while (v2637 < *(_DWORD *)(v8 + 52));
          }
          *(_DWORD *)(v8 + 208) = 0;
          v984 = *((unsigned __int8 *)this + 4);
          switch(v984)
          {
            case '?':
              JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v261, v599);
              JSC::MacroAssemblerARM64::branch64(v8, 3, (char)v11, 27, v1032, v1033, v1034, v1035, (uint64_t)&v2776);
              v1037 = v2776;
              if (v2776 != -1)
              {
                v1038 = HIDWORD(v2791);
                if (HIDWORD(v2791) == (_DWORD)v2791)
                {
                  v1039 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2790, (void *)(HIDWORD(v2791) + 1), (unint64_t)&v2776, v1036, v1025, v1026, v1027, v1028);
                  v1041 = *v1039;
                  v1040 = (uint64_t *)(v1039 + 1);
                  v1037 = v1041;
                  v1038 = HIDWORD(v2791);
                }
                else
                {
                  v1040 = &v2777;
                }
                v1500 = (char *)v2790 + 12 * v1038;
                *(_DWORD *)v1500 = v1037;
                *(_QWORD *)(v1500 + 4) = *v1040;
                ++HIDWORD(v2791);
              }
              v1029 = v2879 | ((unint64_t)v599 << 8) | 0x300000000;
              v1031 = v8;
              v1030 = v11;
              break;
            case 'A':
              JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v261, v599);
              v1029 = v2879 | ((unint64_t)v599 << 8) | 0x300000000;
              v1030 = v11;
              v1031 = v8;
              break;
            case '@':
              if (*(unsigned __int8 *)(v7 + 177) == 255)
              {
                __break(0xC471u);
                JUMPOUT(0x198199DA0);
              }
              v985 = this;
              v986 = v7;
              v987 = (char)v11;
              JSC::MacroAssemblerARM64::branch64(v8, 3, v987, 27, v974, v975, v976, v977, (uint64_t)&v2711);
              v995 = v11;
              v996 = v986;
              v997 = *(char *)(v986 + 177);
              v998 = *(_DWORD *)(v8 + 200);
              if (v998 + 4 > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v988, v989, v990, v991, v992, v993, v994);
                v998 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v998) = v997 | (32 * (v995 & 0x1F)) | 0x1E620000;
              v999 = *(_DWORD *)(v8 + 200) + 4;
              *(_DWORD *)(v8 + 200) = v999;
              if (v999 < *(_DWORD *)(v8 + 52))
              {
                do
                {
                  if ((v999 + 4) > *(_DWORD *)(v8 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v988, v989, v990, v991, v992, v993, v994);
                    v999 = *(_DWORD *)(v8 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v999) = -721215457;
                  v999 = *(_DWORD *)(v8 + 200) + 4;
                  *(_DWORD *)(v8 + 200) = v999;
                  v7 = v996;
                  this = v985;
                }
                while (v999 < *(_DWORD *)(v8 + 52));
              }
              else
              {
                this = v985;
                v7 = v996;
              }
              v1000 = v999;
              if ((v999 + 4) > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v988, v989, v990, v991, v992, v993, v994);
                v1000 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1000) = 335544320;
              *(_DWORD *)(v8 + 200) += 4;
              if (*(_BYTE *)(v8 + 328))
                v1001 = 69;
              else
                v1001 = 65;
              v2702 = v999;
              LOBYTE(v2703) = v1001;
              *(_WORD *)((char *)&v2703 + 1) = 15;
              BYTE3(v2703) = -1;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2711, v8, v989, v990, v991, v992, v993, v994);
              JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)v8, v987, v599, *(char *)(v7 + 177), 1, v1002, v1003, v1004);
              v1012 = *(char *)(v7 + 177);
              v1013 = *(_DWORD *)(v8 + 200);
              if (v1013 + 4 > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1005, v1006, v1007, v1008, v1009, v1010, v1011);
                v1013 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1013) = (v1012 << 16) | (32 * v1012) | 0x1E602000;
              *(_DWORD *)(v8 + 200) += 4;
              JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v8, 1, v1006, v1007, v1008, v1009, v1010, v1011, (uint64_t)&v2778);
              v1020 = v2778;
              if (v2778 != -1)
              {
                v1021 = HIDWORD(v2791);
                if (HIDWORD(v2791) == (_DWORD)v2791)
                {
                  v1022 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2790, (void *)(HIDWORD(v2791) + 1), (unint64_t)&v2778, v1015, v1016, v1017, v1018, v1019);
                  v1024 = *v1022;
                  v1023 = v1022 + 1;
                  v1020 = v1024;
                  v1021 = HIDWORD(v2791);
                }
                else
                {
                  v1023 = &v2779;
                }
                v1511 = (char *)v2790 + 12 * v1021;
                *(_DWORD *)v1511 = v1020;
                *(_QWORD *)(v1511 + 4) = *(_QWORD *)v1023;
                ++HIDWORD(v2791);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2702, v8, v1014, v1015, v1016, v1017, v1018, v1019);
              JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v261, v599);
              JSC::MacroAssemblerARM64::storeDouble(v8, *(char *)(v7 + 177), v2879 | ((unint64_t)v599 << 8) | 0x300000000, 0x200000000uLL, v1512, v1513, v1514, v1515);
LABEL_635:
              JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2795, v1501, v1502, v1503, v1504, v1505);
              JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v1516, v1517, v1518, v1519, v1520, v1521, v1522);
              if (*((_BYTE *)this + 4) == 66)
              {
                v1529 = v2663;
                if (HIDWORD(v2715))
                {
                  v1530 = 0;
                  v1531 = 0;
                  v1532 = 12 * HIDWORD(v2715);
                  do
                  {
                    if (v1531 >= HIDWORD(v2715))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19819A524);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v1530), v8, v1523, v1524, v1525, v1526, v1527, v1528);
                    ++v1531;
                    v1530 += 12;
                  }
                  while (v1532 != v1530);
                }
                v1533 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 16) + 121);
                if (v1533 != 255)
                {
                  if (!*(_BYTE *)(v8 + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198199B38);
                  }
                  v1534 = v1533 | 0x400000000;
                  *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
                  JSC::MacroAssemblerARM64::load32(v8, v1533 | 0x400000000, *(char *)(v8 + 272), v1524, v1525, v1526, v1527, v1528);
                  JSC::MacroAssemblerARM64::or32(v8, (JSC::ARM64LogicalImmediate *)1, 16, 16);
                  JSC::MacroAssemblerARM64::store32(v8, 16, v1534, v1535, v1536, v1537, v1538, v1539);
                }
                if (!*(_BYTE *)(v8 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1981997F8);
                }
                v1540 = v2879 | 0xC00000000;
                *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
                JSC::MacroAssemblerARM64::load32(v8, v1540, *(char *)(v8 + 272), v1524, v1525, v1526, v1527, v1528);
                v1548 = *(_DWORD *)(v8 + 200);
                if (v1548 + 4 > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1541, v1542, v1543, v1544, v1545, v1546, v1547);
                  v1548 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1548) = 285214224;
                *(_DWORD *)(v8 + 200) += 4;
                JSC::MacroAssemblerARM64::store32(v8, 16, v1540, v1543, v1544, v1545, v1546, v1547);
                if (!*(_BYTE *)(v8 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198199828);
                }
                v1554 = v2879 | 0xFFFFFFF800000000;
                *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
                JSC::MacroAssemblerARM64::load32(v8, v1554, *(char *)(v8 + 304), v1549, v1550, v1551, v1552, v1553);
                JSC::MacroAssemblerARM64::branch32(v8, 3, v599, 17, v1555, v1556, v1557, v1558, (uint64_t)&v2711);
                v2775 = v2663;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2711, &v2775, v8, v1559, v1560, v1561, v1562, v1563);
                v1571 = v599 | (32 * v599);
                v1572 = *(_DWORD *)(v8 + 200);
                if (v1572 + 4 > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1564, v1565, v1566, v1567, v1568, v1569, v1570);
                  v1572 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1572) = v1571 | 0x11000400;
                *(_DWORD *)(v8 + 200) += 4;
                JSC::MacroAssemblerARM64::store32(v8, v599, v2879 | 0xFFFFFFF800000000, v1566, v1567, v1568, v1569, v1570);
                v1580 = *(_DWORD *)(v8 + 200);
                if (v1580 + 4 > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1573, v1574, v1575, v1576, v1577, v1578, v1579);
                  v1580 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1580) = v1571 | 0x51000400;
                v1581 = *(_DWORD *)(v8 + 200) + 4;
                *(_DWORD *)(v8 + 200) = v1581;
                if (v1581 < *(_DWORD *)(v8 + 52))
                {
                  v1529 = v2663;
                  do
                  {
                    if ((v1581 + 4) > *(_DWORD *)(v8 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1573, v1574, v1575, v1576, v1577, v1578, v1579);
                      v1581 = *(_DWORD *)(v8 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1581) = -721215457;
                    v1581 = *(_DWORD *)(v8 + 200) + 4;
                    *(_DWORD *)(v8 + 200) = v1581;
                  }
                  while (v1581 < *(_DWORD *)(v8 + 52));
                }
                v1582 = v1581;
                if ((v1581 + 4) > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1573, v1574, v1575, v1576, v1577, v1578, v1579);
                  v1582 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1582) = 335544320;
                *(_DWORD *)(v8 + 200) += 4;
                if (*(_BYTE *)(v8 + 328))
                  v1583 = 69;
                else
                  v1583 = 65;
                v2711 = (WTF *)v1581;
                LOBYTE(v2712) = v1583;
                *(_WORD *)((char *)&v2712 + 1) = 15;
                BYTE3(v2712) = -1;
                v2774 = v1529;
                v1584 = &v2774;
              }
              else
              {
                if (HIDWORD(v2715))
                {
                  v1585 = 0;
                  v1586 = 0;
                  v1587 = 12 * HIDWORD(v2715);
                  do
                  {
                    if (v1586 >= HIDWORD(v2715))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19819A52CLL);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v1585), v8, v1523, v1524, v1525, v1526, v1527, v1528);
                    ++v1586;
                    v1585 += 12;
                  }
                  while (v1587 != v1585);
                }
                if (!*(_BYTE *)(v8 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1981997A8);
                }
                v1588 = v2879 | 0xFFFFFFFC00000000;
                *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
                JSC::MacroAssemblerARM64::load32(v8, v1588, *(char *)(v8 + 304), v1524, v1525, v1526, v1527, v1528);
                JSC::MacroAssemblerARM64::branch32(v8, 2, v261, 17, v1589, v1590, v1591, v1592, (uint64_t)&v2772);
                v1600 = v2772;
                if (v2772 != -1)
                {
                  v1601 = HIDWORD(v2793);
                  if (HIDWORD(v2793) == DWORD2(v2793))
                  {
                    v1602 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2793, (void *)(HIDWORD(v2793) + 1), (unint64_t)&v2772, v1595, v1596, v1597, v1598, v1599);
                    v1604 = *v1602;
                    v1603 = v1602 + 1;
                    v1600 = v1604;
                    v1601 = HIDWORD(v2793);
                  }
                  else
                  {
                    v1603 = &v2773;
                  }
                  v1605 = v2793 + 12 * v1601;
                  *(_DWORD *)v1605 = v1600;
                  *(_QWORD *)(v1605 + 4) = *(_QWORD *)v1603;
                  ++HIDWORD(v2793);
                }
                v1606 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 16) + 121);
                if (v1606 != 255)
                {
                  if (!*(_BYTE *)(v8 + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198199B58);
                  }
                  v1607 = v1606 | 0x400000000;
                  *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
                  JSC::MacroAssemblerARM64::load32(v8, v1606 | 0x400000000, *(char *)(v8 + 272), v1595, v1596, v1597, v1598, v1599);
                  JSC::MacroAssemblerARM64::or32(v8, (JSC::ARM64LogicalImmediate *)1, 16, 16);
                  JSC::MacroAssemblerARM64::store32(v8, 16, v1607, v1608, v1609, v1610, v1611, v1612);
                }
                v1613 = *(_DWORD *)(v8 + 200);
                if (v1613 + 4 > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1593, v1594, v1595, v1596, v1597, v1598, v1599);
                  v1613 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1613) = v599 | (32 * v261) | 0x11000400;
                *(_DWORD *)(v8 + 200) += 4;
                JSC::MacroAssemblerARM64::store32(v8, v599, v2879 | 0xFFFFFFF800000000, v1595, v1596, v1597, v1598, v1599);
                v1616 = *(_DWORD *)(v8 + 200);
                v1617 = v2663;
                if (v1616 < *(_DWORD *)(v8 + 52))
                {
                  v1617 = v2663;
                  do
                  {
                    if ((v1616 + 4) > *(_DWORD *)(v8 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1614, v1615, v1575, v1576, v1577, v1578, v1579);
                      v1616 = *(_DWORD *)(v8 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1616) = -721215457;
                    v1616 = *(_DWORD *)(v8 + 200) + 4;
                    *(_DWORD *)(v8 + 200) = v1616;
                  }
                  while (v1616 < *(_DWORD *)(v8 + 52));
                }
                v1618 = v1616;
                if ((v1616 + 4) > *(_DWORD *)(v8 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1614, v1615, v1575, v1576, v1577, v1578, v1579);
                  v1618 = *(_DWORD *)(v8 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1618) = 335544320;
                *(_DWORD *)(v8 + 200) += 4;
                if (*(_BYTE *)(v8 + 328))
                  v1619 = 69;
                else
                  v1619 = 65;
                v2711 = (WTF *)v1616;
                LOBYTE(v2712) = v1619;
                *(_WORD *)((char *)&v2712 + 1) = 15;
                BYTE3(v2712) = -1;
                v2771 = v1617;
                v1584 = &v2771;
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2711, v1584, v8, v1575, v1576, v1577, v1578, v1579);
              if ((_DWORD)v2707)
              {
                if (HIDWORD(v2793))
                {
                  v1620 = 0;
                  v1621 = 0;
                  v1622 = &v2767;
                  v1623 = 12 * HIDWORD(v2793);
                  do
                  {
                    if (v1621 >= HIDWORD(v2793))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19819A514);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v2793 + v1620), v8, v938, v939, v940, v941, v942, v943);
                    ++v1621;
                    v1620 += 12;
                  }
                  while (v1623 != v1620);
                  JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2795, v939, v940, v941, v942, v943);
                  for (i7 = *(_DWORD *)(v8 + 200); i7 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i7)
                  {
                    if ((i7 + 4) > *(_DWORD *)(v8 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
                      i7 = *(_DWORD *)(v8 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v8 + 56) + i7) = -721215457;
                    i7 = *(_DWORD *)(v8 + 200) + 4;
                  }
                  v1625 = i7;
                  if ((i7 + 4) > *(_DWORD *)(v8 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
                    v1625 = *(_DWORD *)(v8 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1625) = 335544320;
                  *(_DWORD *)(v8 + 200) += 4;
                  if (*(_BYTE *)(v8 + 328))
                    v1626 = 69;
                  else
                    v1626 = 65;
                  v2766 = i7;
                  v2767 = 0;
                  v2768 = v1626;
                  v2769 = 15;
                  v2770 = -1;
                  if (i7 != -1)
                  {
                    v1627 = (_QWORD *)(v7 + 128);
                    v1628 = *(unsigned int *)(v7 + 140);
                    if ((_DWORD)v1628 == *(_DWORD *)(v7 + 136))
                    {
                      v1629 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1627, (void *)(v1628 + 1), (unint64_t)&v2766, v939, v940, v941, v942, v943);
                      v1622 = v1629 + 1;
                      v1630 = *(_QWORD *)(v7 + 128) + 12 * *(unsigned int *)(v7 + 140);
                      *(_DWORD *)v1630 = *v1629;
                    }
                    else
                    {
                      v1630 = *v1627 + 12 * v1628;
                      *(_DWORD *)v1630 = i7;
                    }
                    *(_QWORD *)(v1630 + 4) = *(_QWORD *)v1622;
                    ++*(_DWORD *)(v7 + 140);
                  }
                }
                if (HIDWORD(v2791))
                {
                  v1641 = 0;
                  v1642 = 0;
                  v1643 = &v2762;
                  v1644 = 12 * HIDWORD(v2791);
                  do
                  {
                    if (v1642 >= HIDWORD(v2791))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19819A51CLL);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2790 + v1641), v8, v938, v939, v940, v941, v942, v943);
                    ++v1642;
                    v1641 += 12;
                  }
                  while (v1644 != v1641);
                  JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2795, v939, v940, v941, v942, v943);
                  for (i8 = *(_DWORD *)(v8 + 200); i8 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i8)
                  {
                    if ((i8 + 4) > *(_DWORD *)(v8 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
                      i8 = *(_DWORD *)(v8 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v8 + 56) + i8) = -721215457;
                    i8 = *(_DWORD *)(v8 + 200) + 4;
                  }
                  v1646 = i8;
                  if ((i8 + 4) > *(_DWORD *)(v8 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
                    v1646 = *(_DWORD *)(v8 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v1646) = 335544320;
                  *(_DWORD *)(v8 + 200) += 4;
                  if (*(_BYTE *)(v8 + 328))
                    v1647 = 69;
                  else
                    v1647 = 65;
                  v2761 = i8;
                  v2762 = 0;
                  v2763 = v1647;
                  v2764 = 15;
                  v2765 = -1;
                  if (i8 != -1)
                  {
                    v1648 = (_QWORD *)(v7 + 88);
                    v1649 = *(unsigned int *)(v7 + 100);
                    if ((_DWORD)v1649 == *(_DWORD *)(v7 + 96))
                    {
                      v1650 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1648, (void *)(v1649 + 1), (unint64_t)&v2761, v939, v940, v941, v942, v943);
                      v1643 = v1650 + 1;
                      v1651 = *(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100);
                      *(_DWORD *)v1651 = *v1650;
                    }
                    else
                    {
                      v1651 = *v1648 + 12 * v1649;
                      *(_DWORD *)v1651 = i8;
                    }
                    *(_QWORD *)(v1651 + 4) = *(_QWORD *)v1643;
                    ++*(_DWORD *)(v7 + 100);
                  }
                }
              }
              else
              {
                v1631 = HIDWORD(v2793);
                if (HIDWORD(v2793))
                {
                  v1632 = v2793;
                  v1633 = *(unsigned int *)(v7 + 136);
                  v1634 = *(unsigned int *)(v7 + 140);
                  v1635 = v1634 + HIDWORD(v2793);
                  if (v1635 > v1633)
                  {
                    v1636 = v1633 + (v1633 >> 2);
                    if (v1636 >= 0x10)
                      v1637 = v1636 + 1;
                    else
                      v1637 = 16;
                    if (v1637 <= v1635)
                      v1637 = v1634 + HIDWORD(v2793);
                    v1638 = *(_QWORD *)(v7 + 128);
                    if (v1637 < 3)
                    {
                      v1640 = v7 + 144;
                      *(_QWORD *)(v7 + 128) = v7 + 144;
                      *(_DWORD *)(v7 + 136) = 2;
                    }
                    else
                    {
                      if (v1637 >= 0x15555556)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19819A6B0);
                      }
                      v1639 = 12 * v1637;
                      v1640 = WTF::fastMalloc((WTF *)(12 * v1637));
                      *(_DWORD *)(v7 + 136) = (v1639 & 0xFFFFFFFC) / 0xC;
                      *(_QWORD *)(v7 + 128) = v1640;
                    }
                    if ((_DWORD)v1634)
                    {
                      v1712 = v1638;
                      do
                      {
                        *(_DWORD *)v1640 = *(_DWORD *)v1712;
                        *(_QWORD *)(v1640 + 4) = *(_QWORD *)(v1712 + 4);
                        v1712 += 12;
                        v1640 += 12;
                      }
                      while (v1712 != v1638 + 12 * v1634);
                    }
                    if (v7 + 144 != v1638 && v1638)
                    {
                      if (*(_QWORD *)(v7 + 128) == v1638)
                      {
                        *(_QWORD *)(v7 + 128) = 0;
                        *(_DWORD *)(v7 + 136) = 0;
                      }
                      WTF::fastFree(v1638, v937, v938, v939, v940, v941, v942, v943);
                    }
                  }
                  v1713 = *(unsigned int *)(v7 + 140);
                  if (v1635 < v1713)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19819A628);
                  }
                  v1714 = *(_QWORD *)(v7 + 128) + 12 * v1713;
                  v1715 = v1632 + 12 * v1631;
                  do
                  {
                    *(_DWORD *)v1714 = *(_DWORD *)v1632;
                    *(_QWORD *)(v1714 + 4) = *(_QWORD *)(v1632 + 4);
                    v1632 += 12;
                    v1714 += 12;
                  }
                  while (v1632 != v1715);
                  *(_DWORD *)(v7 + 140) = v1635;
                }
                v1716 = HIDWORD(v2791);
                if (HIDWORD(v2791))
                {
                  v1717 = v2790;
                  v1718 = *(unsigned int *)(v7 + 96);
                  v1719 = *(unsigned int *)(v7 + 100);
                  v1720 = v1719 + HIDWORD(v2791);
                  if (v1720 > v1718)
                  {
                    v1721 = v1718 + (v1718 >> 2);
                    if (v1721 >= 0x10)
                      v1722 = v1721 + 1;
                    else
                      v1722 = 16;
                    if (v1722 <= v1720)
                      v1722 = v1719 + HIDWORD(v2791);
                    v1723 = *(_QWORD *)(v7 + 88);
                    if (v1722 < 3)
                    {
                      v1725 = v7 + 104;
                      *(_QWORD *)(v7 + 88) = v7 + 104;
                      *(_DWORD *)(v7 + 96) = 2;
                    }
                    else
                    {
                      if (v1722 >= 0x15555556)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19819A6B8);
                      }
                      v1724 = 12 * v1722;
                      v1725 = WTF::fastMalloc((WTF *)(12 * v1722));
                      *(_DWORD *)(v7 + 96) = (v1724 & 0xFFFFFFFC) / 0xC;
                      *(_QWORD *)(v7 + 88) = v1725;
                    }
                    if ((_DWORD)v1719)
                    {
                      v1726 = v1723;
                      do
                      {
                        *(_DWORD *)v1725 = *(_DWORD *)v1726;
                        *(_QWORD *)(v1725 + 4) = *(_QWORD *)(v1726 + 4);
                        v1726 += 12;
                        v1725 += 12;
                      }
                      while (v1726 != v1723 + 12 * v1719);
                    }
                    if (v7 + 104 != v1723 && v1723)
                    {
                      if (*(_QWORD *)(v7 + 88) == v1723)
                      {
                        *(_QWORD *)(v7 + 88) = 0;
                        *(_DWORD *)(v7 + 96) = 0;
                      }
                      WTF::fastFree(v1723, v937, v938, v939, v940, v941, v942, v943);
                    }
                  }
                  v1727 = *(unsigned int *)(v7 + 100);
                  if (v1720 < v1727)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19819A630);
                  }
                  v1728 = *(_QWORD *)(v7 + 88) + 12 * v1727;
                  v1729 = (WTF *)((char *)v1717 + 12 * v1716);
                  do
                  {
                    *(_DWORD *)v1728 = *(_DWORD *)v1717;
                    *(_QWORD *)(v1728 + 4) = *(_QWORD *)((char *)v1717 + 4);
                    v1717 = (WTF *)((char *)v1717 + 12);
                    v1728 += 12;
                  }
                  while (v1717 != v1729);
                  *(_DWORD *)(v7 + 100) = v1720;
                }
              }
              v1730 = v2790;
              v1731 = v2792 == (_BYTE *)v2790 || v2790 == 0;
              if (!v1731)
              {
                v2790 = 0;
                LODWORD(v2791) = 0;
                WTF::fastFree((unint64_t)v1730, v937, v938, v939, v940, v941, v942, v943);
              }
              v1732 = v2793;
              if (v2794 != (_BYTE *)v2793 && (_QWORD)v2793 != 0)
              {
                *(_QWORD *)&v2793 = 0;
                DWORD2(v2793) = 0;
                WTF::fastFree(v1732, v937, v938, v939, v940, v941, v942, v943);
              }
              v1734 = v2714;
              v1735 = v2716 == (_BYTE *)v2714;
              goto LABEL_1856;
            default:
              __break(0xC471u);
              JUMPOUT(0x19819A470);
          }
          JSC::MacroAssemblerARM64::store64(v1031, v1030, v1029, 0x200000000uLL, v1025, v1026, v1027, v1028);
          goto LABEL_635;
        case 'B':
          JSC::MacroAssemblerARM64::branch32(v8, 1, v2879, 10, v595, v596, v597, v598, (uint64_t)&v2788);
          v894 = v2788;
          if (v2788 != -1)
          {
            v895 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v895 == *(_DWORD *)(a4 + 8))
            {
              v896 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v895 + 1), (unint64_t)&v2788, v889, v890, v891, v892, v893);
              v898 = *v896;
              v897 = (uint64_t *)(v896 + 1);
              v894 = v898;
              LODWORD(v895) = *(_DWORD *)(a4 + 12);
            }
            else
            {
              v897 = &v2789;
            }
            v1385 = *(_QWORD *)a4 + 12 * v895;
            *(_DWORD *)v1385 = v894;
            *(_QWORD *)(v1385 + 4) = *v897;
            ++*(_DWORD *)(a4 + 12);
          }
          v2795 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v889, v890, v891, v892, v893);
          JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x800000000, v2879, v1386, v1387, v1388, v1389, v1390);
          if (!*(_BYTE *)(v8 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x198199C44);
          }
          v1396 = v2879 | 0xFFFFFFFC00000000;
          *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
          JSC::MacroAssemblerARM64::load32(v8, v1396, *(char *)(v8 + 304), v1391, v1392, v1393, v1394, v1395);
          JSC::MacroAssemblerARM64::branch32(v8, 2, v261, 17, v1397, v1398, v1399, v1400, (uint64_t)&v2786);
          v1406 = v2786;
          if (v2786 != -1)
          {
            v1407 = HIDWORD(v2793);
            if (HIDWORD(v2793) == DWORD2(v2793))
            {
              v1408 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2793, (void *)(HIDWORD(v2793) + 1), (unint64_t)&v2786, v1401, v1402, v1403, v1404, v1405);
              v1410 = *v1408;
              v1409 = v1408 + 1;
              v1406 = v1410;
              v1407 = HIDWORD(v2793);
            }
            else
            {
              v1409 = &v2787;
            }
            v1476 = v2793 + 12 * v1407;
            *(_DWORD *)v1476 = v1406;
            *(_QWORD *)(v1476 + 4) = *(_QWORD *)v1409;
            ++HIDWORD(v2793);
          }
          JSC::MacroAssemblerARM64::and64(v8, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v261, v599);
          if (!*(_BYTE *)(v8 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x198199D80);
          }
          v1481 = ((unint64_t)v599 << 8) | 0x300000000;
          v1482 = v1481 | v2879;
          *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
          JSC::MacroAssemblerARM64::load64(v8, v1482, 0x200000010uLL, *(char *)(v8 + 272), v1477, v1478, v1479, v1480);
          JSC::MacroAssemblerARM64::branchTest64(v8, 0, 16, 0xFFFFFFFFLL, v1483, v1484, v1485, v1486, (uint64_t)&v2784, v1487);
          v1495 = v2784;
          if (v2784 != -1)
          {
            v1496 = HIDWORD(v2715);
            if (HIDWORD(v2715) == (_DWORD)v2715)
            {
              v1497 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2784, v1490, v1491, v1492, v1493, v1494);
              v1499 = *v1497;
              v1498 = (uint64_t *)(v1497 + 1);
              v1495 = v1499;
              v1496 = HIDWORD(v2715);
            }
            else
            {
              v1498 = &v2785;
            }
            v1510 = (char *)v2714 + 12 * v1496;
            *(_DWORD *)v1510 = v1495;
            *(_QWORD *)(v1510 + 4) = *v1498;
            ++HIDWORD(v2715);
          }
          v2663 = *(_DWORD *)(v8 + 200);
          if ((signed int)v2663 < *(_DWORD *)(v8 + 52))
          {
            do
            {
              if (v2663 + 4 > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v1488, v1489, v1490, v1491, v1492, v1493, v1494);
                v2663 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2663) = -721215457;
              v2640 = *(_DWORD *)(v8 + 200) + 4;
              *(_DWORD *)(v8 + 200) = v2640;
              v2663 = v2640;
            }
            while (v2640 < *(_DWORD *)(v8 + 52));
          }
          *(_DWORD *)(v8 + 208) = 0;
          JSC::MacroAssemblerARM64::store64(v8, v11, v1481 | v2879, 0x200000010uLL, v1491, v1492, v1493, v1494);
          goto LABEL_635;
        default:
          __break(0xC471u);
          JUMPOUT(0x19819A450);
      }
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
      v51 = JSC::toTypedArrayType(v22);
      v57 = *(_QWORD *)(v7 + 16);
      v58 = 118;
      if (*(_BYTE *)(v57 + 122) == 5)
        v58 = 119;
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19819813CLL);
      }
      v59 = v51;
      v60 = (*((unsigned __int8 *)this + 4) - 50 < 0x3B) & (0x7FC0007FC0001FFuLL >> (*((_BYTE *)this + 4) - 50));
      v61 = *(unsigned __int8 *)(v57 + v58);
      v62 = v2880 | 0x500000000;
      v63 = v51 + 38;
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load8(v8, v62, *(char *)(v8 + 304), v52, v53, v54, v55, v56);
      JSC::MacroAssemblerARM64::branch32(v8, 1, 17, v63, v64, v65, v66, v67, (uint64_t)&v2759);
      v73 = v2759;
      if (v2759 != -1)
      {
        v74 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v74 == *(_DWORD *)(a4 + 8))
        {
          v75 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v74 + 1), (unint64_t)&v2759, v68, v69, v70, v71, v72);
          v77 = *v75;
          v76 = v75 + 1;
          v73 = v77;
          LODWORD(v74) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v76 = &v2760;
        }
        v141 = *(_QWORD *)a4 + 12 * v74;
        *(_DWORD *)v141 = v73;
        *(_QWORD *)(v141 + 4) = *(_QWORD *)v76;
        ++*(_DWORD *)(a4 + 12);
      }
      if ((v60 & 1) == 0)
      {
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198198584);
        }
        v142 = v2880 | 0x2800000000;
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load8(v8, v142, *(char *)(v8 + 304), v68, v69, v70, v71, v72);
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)6, v8, 1, 17, v143, v144, v145, v146, (uint64_t)&v2757, v147);
        v149 = v2757;
        if (v2757 != -1)
        {
          v150 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v150 == *(_DWORD *)(a4 + 8))
          {
            v151 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v150 + 1), (unint64_t)&v2757, v148, v69, v70, v71, v72);
            v153 = *v151;
            v152 = (uint64_t *)(v151 + 1);
            v149 = v153;
            LODWORD(v150) = *(_DWORD *)(a4 + 12);
          }
          else
          {
            v152 = &v2758;
          }
          v277 = *(_QWORD *)a4 + 12 * v150;
          *(_DWORD *)v277 = v149;
          *(_QWORD *)(v277 + 4) = *v152;
          ++*(_DWORD *)(a4 + 12);
        }
      }
      if (v59 > 7)
      {
        if (*(unsigned __int8 *)(v7 + 177) == 255)
        {
          __break(0xC471u);
          JUMPOUT(0x1981985A4);
        }
        v291 = (char)v11;
        JSC::MacroAssemblerARM64::branch64(v8, 3, v291, 27, v69, v70, v71, v72, (uint64_t)&__dst);
        v299 = *(char *)(v7 + 177);
        v300 = *(_DWORD *)(v8 + 200);
        if (v300 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v292, v293, v294, v295, v296, v297, v298);
          v300 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v300) = v299 | (32 * (v11 & 0x1F)) | 0x1E620000;
        v301 = *(_DWORD *)(v8 + 200) + 4;
        for (*(_DWORD *)(v8 + 200) = v301; (signed int)v301 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = v301)
        {
          if (v301 + 4 > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v292, v293, v294, v295, v296, v297, v298);
            v301 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v301) = -721215457;
          v301 = *(_DWORD *)(v8 + 200) + 4;
        }
        v302 = v301;
        if (v301 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v292, v293, v294, v295, v296, v297, v298);
          v302 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v302) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v303 = 69;
        else
          v303 = 65;
        v2714 = (WTF *)v301;
        LOBYTE(v2715) = v303;
        *(_WORD *)((char *)&v2715 + 1) = 15;
        BYTE3(v2715) = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, v8, v293, v294, v295, v296, v297, v298);
        JSC::MacroAssemblerARM64::branchTest64(v8, 0, v291, 27, v304, v305, v306, v307, (uint64_t)&v2753);
        v313 = v2753;
        v23 = v11;
        if (v2753 != -1)
        {
          v314 = *(unsigned int *)(v7 + 100);
          if ((_DWORD)v314 == *(_DWORD *)(v7 + 96))
          {
            v315 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v314 + 1), (unint64_t)&v2753, v308, v309, v310, v311, v312);
            v317 = *v315;
            v316 = (uint64_t *)(v315 + 1);
            v313 = v317;
            v318 = *(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100);
          }
          else
          {
            v316 = &v2754;
            v318 = *(_QWORD *)(v7 + 88) + 12 * v314;
          }
          *(_DWORD *)v318 = v313;
          *(_QWORD *)(v318 + 4) = *v316;
          ++*(_DWORD *)(v7 + 100);
        }
        JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)v8, v291, v2879, *(char *)(v7 + 177), 1, v310, v311, v312);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2714, v8, v319, v320, v321, v322, v323, v324);
      }
      else
      {
        JSC::MacroAssemblerARM64::branch64(v8, 3, (char)v11, 27, v69, v70, v71, v72, (uint64_t)&v2755);
        v285 = v2755;
        if (v2755 != -1)
        {
          v286 = *(unsigned int *)(v7 + 100);
          if ((_DWORD)v286 == *(_DWORD *)(v7 + 96))
          {
            v287 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v286 + 1), (unint64_t)&v2755, v280, v281, v282, v283, v284);
            v289 = *v287;
            v288 = v287 + 1;
            v285 = v289;
            v290 = *(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100);
          }
          else
          {
            v288 = &v2756;
            v290 = *(_QWORD *)(v7 + 88) + 12 * v286;
          }
          *(_DWORD *)v290 = v285;
          *(_QWORD *)(v290 + 4) = *(_QWORD *)v288;
          ++*(_DWORD *)(v7 + 100);
        }
      }
      if ((v60 & 1) == 0)
      {
        v325 = v2880;
        v326 = v2879;
        v327 = *(_DWORD *)(v8 + 200);
        if (v327 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v278, v279, v280, v281, v282, v283, v284);
          v327 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v327) = v326 & 0x1F | (32 * v61) | 0x93407C00;
        *(_DWORD *)(v8 + 200) += 4;
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1981985F4);
        }
        v328 = v325 | 0x1800000000;
        v329 = v2879;
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load64(v8, v328, *(char *)(v8 + 304), v280, v281, v282, v283, v284);
        JSC::MacroAssemblerARM64::branch64(v8, 2, v329, 17, v330, v331, v332, v333, (uint64_t)&v2751);
        v339 = v2751;
        if (v2751 != -1)
        {
          v340 = *(unsigned int *)(v7 + 100);
          if ((_DWORD)v340 == *(_DWORD *)(v7 + 96))
          {
            v341 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 88, (void *)(v340 + 1), (unint64_t)&v2751, v334, v335, v336, v337, v338);
            v343 = *v341;
            v342 = v341 + 1;
            v339 = v343;
            v344 = *(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100);
          }
          else
          {
            v342 = &v2752;
            v344 = *(_QWORD *)(v7 + 88) + 12 * v340;
          }
          *(_DWORD *)v344 = v339;
          *(_QWORD *)(v344 + 4) = *(_QWORD *)v342;
          ++*(_DWORD *)(v7 + 100);
        }
      }
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v345 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2702 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v346, v347, v348, v349, v350);
      v2714 = (WTF *)v2716;
      v2715 = 2;
      if (v60)
      {
        JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl(v8, v2880, v345, v2879, v345, v59 | 0x100, 0, v355);
        v363 = v2879;
        v364 = *(_DWORD *)(v8 + 200);
        if (v364 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v356, v357, v358, v359, v360, v361, v362);
          v364 = *(_DWORD *)(v8 + 200);
        }
        v365 = v2879;
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v364) = v363 & 0x1F | (32 * v61) | 0x93407C00;
        *(_DWORD *)(v8 + 200) += 4;
        JSC::MacroAssemblerARM64::branch64(v8, 2, v365, v345, v359, v360, v361, v362, (uint64_t)&v2749);
        v366 = v2749;
        if (v2749 != -1)
        {
          v367 = HIDWORD(v2715);
          if (HIDWORD(v2715) == (_DWORD)v2715)
          {
            v368 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2749, v351, v352, v353, v354, v355);
            v370 = *v368;
            v369 = (uint64_t *)(v368 + 1);
            v366 = v370;
            v367 = HIDWORD(v2715);
          }
          else
          {
            v369 = &v2750;
          }
          v371 = (char *)v2714 + 12 * v367;
          *(_DWORD *)v371 = v366;
          *(_QWORD *)(v371 + 4) = *v369;
          ++HIDWORD(v2715);
        }
      }
      JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x1800000000, v2879, v351, v352, v353, v354, v355);
      JSC::MacroAssemblerARM64::load64(v8, v2880 | 0x1000000000, v345, v372, v373, v374, v375, v376);
      JSC::AssemblyHelpers::cageConditionally((_DWORD *)v8, 0, v345, v2879, v2879, v377, v378, v379);
      v387 = v2879;
      v2656 = (JSC::AssemblerBuffer *)(v8 + 56);
      v388 = *(_DWORD *)(v8 + 200);
      if (v388 + 4 > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v2656, v380, v381, v382, v383, v384, v385, v386);
        v388 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v388) = v387 & 0x1F | (32 * v61) | 0x93407C00;
      v389 = *(_DWORD *)(v8 + 200);
      v390 = v389 + 4;
      *(_DWORD *)(v8 + 200) = v389 + 4;
      if (v59 > 7)
      {
        v402 = *(char *)(v7 + 177);
        if (v402 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x198198628);
        }
        if ((v59 - 8) > 3u)
          LOBYTE(v403) = 0;
        else
          v403 = qword_1991531D8[(char)v59 - 8];
        v411 = 1 << v403;
        if (v411 == 8)
        {
          JSC::MacroAssemblerARM64::storeDouble(v8, *(char *)(v7 + 177), v345 | ((unint64_t)v2879 << 8) | 0x300000000, 0x200000000uLL, v383, v384, v385, v386);
        }
        else
        {
          if (v411 != 4)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A5C0);
          }
          if ((v389 + 8) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2656, v380, v381, v382, v383, v384, v385, v386);
            v390 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v390) = v402 | (32 * v402) | 0x1E624000;
          *(_DWORD *)(v8 + 200) += 4;
          JSC::MacroAssemblerARM64::storeFloat(v8, *(char *)(v7 + 177), v345 | ((unint64_t)v2879 << 8) | 0x200000000, 0x200000000uLL, v383, v384, v385, v386);
        }
      }
      else
      {
        if (v59 == 3)
        {
          v391 = v345;
          JSC::MacroAssemblerARM64::getEffectiveAddress((_DWORD *)v8, v345 | ((unint64_t)v2879 << 8), 0x200000000, v345, v383, v384, v385, v386);
          if (v23 == v2879)
          {
            v399 = v23;
LABEL_1619:
            JSC::MacroAssemblerARM64::branch32(v8, 9, v399, 255, v395, v396, v397, v398, (uint64_t)&v2793);
            JSC::MacroAssemblerARM64::branch32(v8, 12, v2879, 255, v2419, v2420, v2421, v2422, (uint64_t)&v2790);
            v2430 = v2879;
            v2431 = *(_DWORD *)(v8 + 200);
            if (v2431 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2656, v2423, v2424, v2425, v2426, v2427, v2428, v2429);
              v2431 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2431) = (65569 * (v2430 & 0x1F)) | 0x4A000000;
            v2432 = *(_DWORD *)(v8 + 200) + 4;
            for (*(_DWORD *)(v8 + 200) = v2432; (signed int)v2432 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = v2432)
            {
              if (v2432 + 4 > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2656, v2423, v2424, v2425, v2426, v2427, v2428, v2429);
                v2432 = *(_DWORD *)(v8 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2432) = -721215457;
              v2432 = *(_DWORD *)(v8 + 200) + 4;
            }
            v2433 = v2432;
            if (v2432 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2656, v2423, v2424, v2425, v2426, v2427, v2428, v2429);
              v2433 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2433) = 335544320;
            *(_DWORD *)(v8 + 200) += 4;
            if (*(_BYTE *)(v8 + 328))
              v2434 = 69;
            else
              v2434 = 65;
            v2711 = (WTF *)v2432;
            LOBYTE(v2712) = v2434;
            *(_WORD *)((char *)&v2712 + 1) = 15;
            BYTE3(v2712) = -1;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2790, v8, v2424, v2425, v2426, v2427, v2428, v2429);
            v2442 = v2879 | 0x32001FE0;
            v2443 = *(_DWORD *)(v8 + 200);
            if (v2443 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2656, v2435, v2436, v2437, v2438, v2439, v2440, v2441);
              v2443 = *(_DWORD *)(v8 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2443) = v2442;
            *(_DWORD *)(v8 + 200) += 4;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2711, v8, v2436, v2437, v2438, v2439, v2440, v2441);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2793, v8, v2444, v2445, v2446, v2447, v2448, v2449);
            JSC::MacroAssemblerARM64::store8(v8, v2879, v391, v2450, v2451, v2452, v2453, v2454);
            goto LABEL_1630;
          }
          v399 = v2879;
          if (v23 == 63)
          {
            if (v2879 != 31)
            {
              v2417 = v2879 & 0x1F | 0xD2800000;
LABEL_1616:
              v2418 = *(_DWORD *)(v8 + 200);
              if (v2418 + 4 > *(_DWORD *)(v8 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2656, v392, v393, v394, v395, v396, v397, v398);
                v2418 = *(_DWORD *)(v8 + 200);
                v399 = v2879;
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2418) = v2417;
              *(_DWORD *)(v8 + 200) += 4;
              goto LABEL_1619;
            }
          }
          else if (v23 != 31 && v2879 != 31)
          {
            v400 = v2879 | ((v23 & 0x1F) << 16);
            v401 = -1442839584;
LABEL_1615:
            v2417 = v400 | v401;
            goto LABEL_1616;
          }
          v400 = v2879 | (32 * v11);
          v401 = -1862270976;
          goto LABEL_1615;
        }
        if (v59 - 6 < 2)
          v404 = 2;
        else
          v404 = v59 - 4 < 2;
        v405 = 1 << v404;
        switch(v405)
        {
          case 4:
            JSC::MacroAssemblerARM64::store32(v8, v23, v345 | ((unint64_t)v2879 << 8) | 0x200000000, 0x200000000uLL, v383, v384, v385, v386);
            break;
          case 2:
            JSC::MacroAssemblerARM64::store16(v8, v23, v345 | ((unint64_t)v2879 << 8) | 0x100000000, 0x200000000uLL, v383, v384, v385, v386);
            break;
          case 1:
            JSC::MacroAssemblerARM64::store8(v8, v23, v345 | ((unint64_t)v2879 << 8), 0x200000000uLL, v383, v384, v385, v386);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19819A620);
        }
      }
LABEL_1630:
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2702, v406, v407, v408, v409, v410);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2455, v2456, v2457, v2458, v2459, v2460, v2461);
      if (!v60)
        goto LABEL_1648;
      if (HIDWORD(v2715))
      {
        v2462 = 0;
        v2463 = 0;
        v2464 = 12 * HIDWORD(v2715);
        do
        {
          if (v2463 >= HIDWORD(v2715))
          {
            __break(0xC471u);
            JUMPOUT(0x19819A504);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v2462), v8, v938, v939, v940, v941, v942, v943);
          ++v2463;
          v2462 += 12;
        }
        while (v2464 != v2462);
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2702, v939, v940, v941, v942, v943);
      for (i1 = *(_DWORD *)(v8 + 200); i1 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i1)
      {
        if ((i1 + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v2656, (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          i1 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + i1) = -721215457;
        i1 = *(_DWORD *)(v8 + 200) + 4;
      }
      v2465 = i1;
      if ((i1 + 4) > *(_DWORD *)(v8 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v2656, (uint64_t)v937, v938, v939, v940, v941, v942, v943);
        v2465 = *(_DWORD *)(v8 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2465) = 335544320;
      *(_DWORD *)(v8 + 200) += 4;
      v2466 = *(_BYTE *)(v8 + 328) ? 69 : 65;
      v2744 = i1;
      v2745 = 0;
      v2746 = v2466;
      v2747 = 15;
      v2748 = -1;
      if (i1 == -1)
      {
LABEL_1648:
        v1734 = v2714;
        if (v2716 == (_BYTE *)v2714 || !v2714)
          return;
LABEL_1860:
        v2714 = 0;
        LODWORD(v2715) = 0;
LABEL_1861:
        WTF::fastFree((unint64_t)v1734, v937, v938, v939, v940, v941, v942, v943);
        return;
      }
      v950 = (_QWORD *)(v7 + 88);
      v951 = *(unsigned int *)(v7 + 100);
      if ((_DWORD)v951 == *(_DWORD *)(v7 + 96))
      {
        v952 = (void *)(v951 + 1);
        v953 = &v2744;
        goto LABEL_1644;
      }
      v954 = &v2745;
LABEL_1646:
      v2471 = (int *)(*v950 + 12 * v951);
      *v2471 = i1;
      v2470 = v2471 + 1;
      goto LABEL_1647;
    case 0x70:
      v2714 = (WTF *)v2716;
      v2715 = 2;
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&__dst, *(_QWORD *)(v7 + 16), v2879);
      v827 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v828 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v829 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&__dst);
      v2711 = (WTF *)JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&__dst, (JSC::ScratchRegisterAllocator *)v8, 1, v830, v831, v832, v833, v834);
      *(_QWORD *)&v2793 = v2794;
      *((_QWORD *)&v2793 + 1) = 2;
      v840 = *(_QWORD *)(v7 + 16);
      v841 = 118;
      if (*(_BYTE *)(v840 + 122) == 5)
        v841 = 119;
      v842 = *(unsigned __int8 *)(v840 + v841);
      if ((*(_BYTE *)(v840 + 129) & 0x20) == 0)
      {
        JSC::MacroAssemblerARM64::branchTest64(v8, 1, (char)v842, 28, v836, v837, v838, v839, (uint64_t)&v2689);
        v848 = v2689;
        if (v2689 != -1)
        {
          v849 = HIDWORD(v2715);
          if (HIDWORD(v2715) == (_DWORD)v2715)
          {
            v850 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2689, v843, v844, v845, v846, v847);
            v852 = *v850;
            v851 = v850 + 1;
            v848 = v852;
            v849 = HIDWORD(v2715);
          }
          else
          {
            v851 = &v2690;
          }
          v1812 = (char *)v2714 + 12 * v849;
          *(_DWORD *)v1812 = v848;
          *(_QWORD *)(v1812 + 4) = *(_QWORD *)v851;
          ++HIDWORD(v2715);
        }
        if (!*(_BYTE *)(v8 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A32CLL);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
        JSC::MacroAssemblerARM64::load8(v8, v842 | 0x500000000, *(char *)(v8 + 304), v843, v844, v845, v846, v847);
        JSC::MacroAssemblerARM64::branch32(v8, 1, 17, 2, v1813, v1814, v1815, v1816, (uint64_t)&v2687);
        v1817 = v2687;
        if (v2687 != -1)
        {
          v1818 = HIDWORD(v2715);
          if (HIDWORD(v2715) == (_DWORD)v2715)
          {
            v1819 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2687, v835, v836, v837, v838, v839);
            v1821 = *v1819;
            v1820 = (uint64_t *)(v1819 + 1);
            v1817 = v1821;
            v1818 = HIDWORD(v2715);
          }
          else
          {
            v1820 = &v2688;
          }
          v1890 = (char *)v2714 + 12 * v1818;
          *(_DWORD *)v1890 = v1817;
          *(_QWORD *)(v1890 + 4) = *v1820;
          ++HIDWORD(v2715);
        }
      }
      JSC::MacroAssemblerARM64::load64(v8, v842 | 0x800000000, v829, v835, v836, v837, v838, v839);
      JSC::MacroAssemblerARM64::branchTest64(v8, 1, v829, 1, v1891, v1892, v1893, v1894, (uint64_t)&v2685, v1895);
      v1901 = v2685;
      if (v2685 != -1)
      {
        v1902 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1903 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2685, v1896, v1897, v1898, v1899, v1900);
          v1905 = *v1903;
          v1904 = v1903 + 1;
          v1901 = v1905;
          v1902 = HIDWORD(v2715);
        }
        else
        {
          v1904 = &v2686;
        }
        v1906 = (char *)v2714 + 12 * v1902;
        *(_DWORD *)v1906 = v1901;
        *(_QWORD *)(v1906 + 4) = *(_QWORD *)v1904;
        ++HIDWORD(v2715);
      }
      if (!*(_BYTE *)(v8 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198199CF0);
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
      JSC::MacroAssemblerARM64::load32(v8, v829 | 0x1000000000, *(char *)(v8 + 304), v1896, v1897, v1898, v1899, v1900);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v8, 0, 17, v1907, v1908, v1909, v1910, (uint64_t)&v2683, v1911);
      v1917 = v2683;
      if (v2683 != -1)
      {
        v1918 = HIDWORD(v2715);
        if (HIDWORD(v2715) == (_DWORD)v2715)
        {
          v1919 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2714, (void *)(HIDWORD(v2715) + 1), (unint64_t)&v2683, v1912, v1913, v1914, v1915, v1916);
          v1921 = *v1919;
          v1920 = (uint64_t *)(v1919 + 1);
          v1917 = v1921;
          v1918 = HIDWORD(v2715);
        }
        else
        {
          v1920 = &v2684;
        }
        v1922 = (char *)v2714 + 12 * v1918;
        *(_DWORD *)v1922 = v1917;
        *(_QWORD *)(v1922 + 4) = *v1920;
        ++HIDWORD(v2715);
      }
      JSC::AssemblyHelpers::hasMegamorphicProperty(v8, v9, v2880, v829, 0, (char)v11, v2879, v827, (uint64_t)&v2790, v828);
      v1930 = v2790;
      v1931 = HIDWORD(v2791);
      if (HIDWORD(v2791))
      {
        v1932 = HIDWORD(v2715);
        v1933 = HIDWORD(v2715) + (unint64_t)HIDWORD(v2791);
        if (v1933 > v2715)
        {
          v1934 = v2715 + ((unint64_t)v2715 >> 2);
          if (v1934 >= 0x10)
            v1935 = v1934 + 1;
          else
            v1935 = 16;
          if (v1935 <= v1933)
            v1935 = HIDWORD(v2715) + (unint64_t)HIDWORD(v2791);
          v1936 = v2714;
          if (v1935 < 3)
          {
            v1938 = v2716;
            v2714 = (WTF *)v2716;
            LODWORD(v2715) = 2;
          }
          else
          {
            if (v1935 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19819A6D8);
            }
            v1937 = 12 * v1935;
            v1938 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v1935));
            LODWORD(v2715) = (v1937 & 0xFFFFFFFC) / 0xC;
            v2714 = (WTF *)v1938;
          }
          if (v1932)
          {
            v2021 = v1936;
            do
            {
              *(_DWORD *)v1938 = *(_DWORD *)v2021;
              *(_QWORD *)(v1938 + 4) = *(_QWORD *)((char *)v2021 + 4);
              v2021 = (WTF *)((char *)v2021 + 12);
              v1938 += 12;
            }
            while (v2021 != (WTF *)((char *)v1936 + 12 * v1932));
          }
          if (v2716 != (_BYTE *)v1936 && v1936)
          {
            if (v2714 == v1936)
            {
              v2714 = 0;
              LODWORD(v2715) = 0;
            }
            WTF::fastFree((unint64_t)v1936, v1923, v1924, v1925, v1926, v1927, v1928, v1929);
          }
        }
        if (v1933 < HIDWORD(v2715))
        {
          __break(0xC471u);
          JUMPOUT(0x19819A640);
        }
        v2022 = (char *)v2714 + 12 * HIDWORD(v2715);
        v2023 = (WTF *)((char *)v1930 + 12 * v1931);
        do
        {
          *(_DWORD *)v2022 = *(_DWORD *)v1930;
          *(_QWORD *)(v2022 + 4) = *(_QWORD *)((char *)v1930 + 4);
          v1930 = (WTF *)((char *)v1930 + 12);
          v2022 += 12;
        }
        while (v1930 != v2023);
        HIDWORD(v2715) = v1933;
        v1930 = v2790;
      }
      if (v2792 != (_BYTE *)v1930 && v1930 != 0)
      {
        v2790 = 0;
        LODWORD(v2791) = 0;
        WTF::fastFree((unint64_t)v1930, v1923, v1924, v1925, v1926, v1927, v1928, v1929);
      }
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v1925, v1926, v1927, v1928, v1929);
      JSC::InlineCacheCompiler::succeed((JSC::InlineCacheCompiler *)v7, v2025, v2026, v2027, v2028, v2029, v2030, v2031);
      if ((_DWORD)v2707)
      {
        if (HIDWORD(v2715))
        {
          v2032 = 0;
          v2033 = 0;
          v2034 = 12 * HIDWORD(v2715);
          do
          {
            if (v2033 >= HIDWORD(v2715))
            {
              __break(0xC471u);
              JUMPOUT(0x19819A57CLL);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v2714 + v2032), v8, v938, v939, v940, v941, v942, v943);
            ++v2033;
            v2032 += 12;
          }
          while (v2034 != v2032);
        }
        JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&__dst, (const char *)v8, (const char *)&v2711, v939, v940, v941, v942, v943);
        for (jj = *(_DWORD *)(v8 + 200); jj < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = jj)
        {
          if ((jj + 4) > *(_DWORD *)(v8 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
            jj = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + jj) = -721215457;
          jj = *(_DWORD *)(v8 + 200) + 4;
        }
        v2035 = jj;
        if ((jj + 4) > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v937, v938, v939, v940, v941, v942, v943);
          v2035 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v2035) = 335544320;
        *(_DWORD *)(v8 + 200) += 4;
        if (*(_BYTE *)(v8 + 328))
          v2036 = 69;
        else
          v2036 = 65;
        v2679[0] = jj;
        v2679[1] = 0;
        v2680 = v2036;
        v2681 = 15;
        v2682 = -1;
        if (jj != -1)
        {
          v2006 = (_QWORD *)(v7 + 88);
          v2007 = *(unsigned int *)(v7 + 100);
          if ((_DWORD)v2007 == *(_DWORD *)(v7 + 96))
          {
            v2008 = (void *)(v2007 + 1);
            v2009 = v2679;
LABEL_1079:
            v2037 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2006, v2008, (unint64_t)v2009, v939, v940, v941, v942, v943);
            v2039 = *v2037;
            v2038 = v2037 + 1;
            v2040 = (_DWORD *)(*(_QWORD *)(v7 + 88) + 12 * *(unsigned int *)(v7 + 100));
            *v2040 = v2039;
            v2041 = v2040 + 1;
          }
          else
          {
            v2020 = v2679;
LABEL_1091:
            v2038 = v2020 + 1;
            v2051 = (int *)(*v2006 + 12 * v2007);
            *v2051 = jj;
            v2041 = v2051 + 1;
          }
          *v2041 = *v2038;
          ++*(_DWORD *)(v7 + 100);
        }
      }
      else
      {
        v2042 = HIDWORD(v2715);
        if (HIDWORD(v2715))
        {
          v2043 = v2714;
          v2044 = *(unsigned int *)(v7 + 96);
          v2045 = *(unsigned int *)(v7 + 100);
          v2014 = v2045 + HIDWORD(v2715);
          if (v2014 > v2044)
          {
            v2046 = v2044 + (v2044 >> 2);
            if (v2046 >= 0x10)
              v2047 = v2046 + 1;
            else
              v2047 = 16;
            if (v2047 <= v2014)
              v2047 = v2045 + HIDWORD(v2715);
            v2048 = *(_QWORD *)(v7 + 88);
            if (v2047 < 3)
            {
              v2050 = v7 + 104;
              *(_QWORD *)(v7 + 88) = v7 + 104;
              *(_DWORD *)(v7 + 96) = 2;
            }
            else
            {
              if (v2047 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x19819A718);
              }
              v2049 = 12 * v2047;
              v2050 = WTF::fastMalloc((WTF *)(12 * v2047));
              *(_DWORD *)(v7 + 96) = (v2049 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v7 + 88) = v2050;
            }
            if ((_DWORD)v2045)
            {
              v2260 = v2048;
              do
              {
                *(_DWORD *)v2050 = *(_DWORD *)v2260;
                *(_QWORD *)(v2050 + 4) = *(_QWORD *)(v2260 + 4);
                v2260 += 12;
                v2050 += 12;
              }
              while (v2260 != v2048 + 12 * v2045);
            }
            if (v7 + 104 != v2048 && v2048)
            {
              if (*(_QWORD *)(v7 + 88) == v2048)
              {
                *(_QWORD *)(v7 + 88) = 0;
                *(_DWORD *)(v7 + 96) = 0;
              }
              WTF::fastFree(v2048, v937, v938, v939, v940, v941, v942, v943);
            }
          }
          v2261 = *(unsigned int *)(v7 + 100);
          if (v2014 < v2261)
          {
            __break(0xC471u);
            JUMPOUT(0x19819A6A0);
          }
          v2262 = *(_QWORD *)(v7 + 88) + 12 * v2261;
          v2263 = (WTF *)((char *)v2043 + 12 * v2042);
          do
          {
            *(_DWORD *)v2262 = *(_DWORD *)v2043;
            *(_QWORD *)(v2262 + 4) = *(_QWORD *)((char *)v2043 + 4);
            v2043 = (WTF *)((char *)v2043 + 12);
            v2262 += 12;
          }
          while (v2043 != v2263);
LABEL_1371:
          *(_DWORD *)(v7 + 100) = v2014;
        }
      }
LABEL_1372:
      v2264 = v2793;
      v2265 = v2794 == (_BYTE *)v2793;
      goto LABEL_1591;
    default:
      JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator()(v2876, v13, v14, v15, v16, v17, v18, v19);
      goto LABEL_608;
  }
}

uint64_t JSC::forInBy(unsigned int a1)
{
  uint64_t result;

  if (a1 - 85 < 0x1C)
    return 1;
  result = 0;
  if (a1 <= 0x19 && ((1 << a1) & 0x20E0000) != 0)
    return 1;
  return result;
}

uint64_t JSC::toTypedArrayType(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 41;
  result = 1;
  switch(v1)
  {
    case 0:
    case 9:
    case 26:
    case 35:
    case 50:
    case 59:
      return result;
    case 1:
    case 10:
    case 27:
    case 36:
    case 51:
    case 60:
      result = 2;
      break;
    case 2:
    case 11:
    case 28:
    case 37:
    case 52:
    case 61:
      result = 3;
      break;
    case 3:
    case 12:
    case 29:
    case 38:
    case 53:
    case 62:
      result = 4;
      break;
    case 4:
    case 13:
    case 30:
    case 39:
    case 54:
    case 63:
      result = 5;
      break;
    case 5:
    case 14:
    case 31:
    case 40:
    case 55:
    case 64:
      result = 6;
      break;
    case 6:
    case 15:
    case 32:
    case 41:
    case 56:
    case 65:
      result = 7;
      break;
    case 7:
    case 16:
    case 33:
    case 42:
    case 57:
    case 66:
      result = 8;
      break;
    case 8:
    case 17:
    case 34:
    case 43:
    case 58:
    case 67:
      result = 9;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19819AA54);
  }
  return result;
}

void JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t *v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int *v82;
  int *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v94;
  unint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  _BOOL4 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  _QWORD v113[5];
  unsigned __int8 v114;

  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 24);
  if (v10)
  {
    v11 = a1[1];
    v114 = *(_BYTE *)(v11 + 176);
    v12 = *(unsigned __int8 *)a1[3];
    if (v12 == v114)
      goto LABEL_57;
    v13 = a1[2];
    if ((char)v12 == 63)
    {
      if (v114 != 31)
      {
        v87 = v114 & 0x1F | 0xD2800000;
LABEL_54:
        v90 = *(_DWORD *)(v13 + 200);
        v89 = (unsigned int *)(v13 + 200);
        v88 = v90;
        if (v90 + 4 > *(v89 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 - 36), a2, a3, a4, a5, a6, a7, a8);
          v88 = *v89;
        }
        *(_DWORD *)(*((_QWORD *)v89 - 18) + v88) = v87;
        *v89 += 4;
        v9 = *a1;
        v10 = *(_QWORD *)(*a1 + 24);
LABEL_57:
        v91 = *(unsigned __int8 *)(v9 + 4);
        v35 = v91 > 0x20;
        v92 = (1 << v91) & 0x100000014;
        if (v35 || v92 == 0)
        {
          v94 = *(_DWORD *)(v9 + 12);
        }
        else
        {
          v95 = *(_QWORD *)(16 * (*(_DWORD *)(v9 + 12) & 0xFFFFFFFE) + 0x40);
          if (!v95 || *(_BYTE *)(v95 + 5) == 1)
            goto LABEL_66;
          v94 = *(_DWORD *)(v95 + 80);
        }
        if (v94)
          v95 = 16 * (v94 & 0xFFFFFFFE);
        else
          v95 = 0;
LABEL_66:
        v96 = a1[2];
        v113[0] = a1[5];
        v113[1] = v96;
        v113[2] = &v114;
        v113[3] = v9;
        v113[4] = v11;
        v97 = *(_DWORD **)(v10 + 8);
        if (v97)
          v98 = *v97 == 0;
        else
          v98 = 1;
        JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator() const(void)::{lambda(JSC::Structure *,BOOL)#1}::operator()((uint64_t)v113, v95, v98, a4, a5, a6, a7, a8);
        v104 = *(unsigned int **)(v10 + 8);
        if (v104)
        {
          v105 = 1;
          do
          {
            v106 = *v104;
            if (v105 - 1 >= v106)
              break;
            JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator() const(void)::{lambda(JSC::Structure *,BOOL)#1}::operator()((uint64_t)v113, 16 * (v104[v105] & 0xFFFFFFFE), v105 == v106, v99, v100, v101, v102, v103);
            v104 = *(unsigned int **)(v10 + 8);
            ++v105;
          }
          while (v104);
        }
        return;
      }
    }
    else if (v114 != 31 && (char)v12 != 31)
    {
      v15 = v114 | ((v12 & 0x1F) << 16);
      v16 = -1442839584;
LABEL_53:
      v87 = v15 | v16;
      goto LABEL_54;
    }
    v15 = (char)v114 | (32 * (char)v12);
    v16 = -1862270976;
    goto LABEL_53;
  }
  v17 = a1[5];
  v18 = a1[2];
  if (*(_BYTE *)(v9 + 5))
  {
    if (!*(_BYTE *)(v18 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19819B04CLL);
    }
    v19 = *(unsigned __int8 *)a1[3] | 0x500000000;
    *(_DWORD *)(*(_QWORD *)(v18 + 296) + 208) &= ~*(_DWORD *)(v18 + 320);
    JSC::MacroAssemblerARM64::load8(v18, v19, *(char *)(v18 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(v18, 1, 17, 32, v20, v21, v22, v23, (uint64_t)&v111);
    v29 = v111;
    if (v111 != -1)
    {
      v30 = *(unsigned int *)(v17 + 12);
      if ((_DWORD)v30 == *(_DWORD *)(v17 + 8))
      {
        v31 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, (void *)(v30 + 1), (unint64_t)&v111, v24, v25, v26, v27, v28);
        v33 = *v31;
        v32 = (uint64_t *)(v31 + 1);
        v29 = v33;
        LODWORD(v30) = *(_DWORD *)(v17 + 12);
      }
      else
      {
        v32 = &v112;
      }
      v56 = *(_QWORD *)v17 + 12 * v30;
      *(_DWORD *)v56 = v29;
      *(_QWORD *)(v56 + 4) = *v32;
      ++*(_DWORD *)(v17 + 12);
    }
    JSC::MacroAssemblerARM64::load64(a1[2], *(unsigned __int8 *)a1[3] | 0x1000000000, *(char *)a1[6], v24, v25, v26, v27, v28);
    v62 = a1[2];
    v63 = *a1;
    v64 = *(unsigned __int8 *)(*a1 + 4);
    if (v64 <= 0x20 && ((1 << v64) & 0x100000014) != 0)
    {
      v66 = *(_QWORD *)(16 * (*(_DWORD *)(v63 + 12) & 0xFFFFFFFE) + 0x40);
      if (!v66 || *(_BYTE *)(v66 + 5) == 1)
        goto LABEL_35;
      v65 = *(_DWORD *)(v66 + 80);
    }
    else
    {
      v65 = *(_DWORD *)(v63 + 12);
    }
    if (v65)
      v66 = 16 * (v65 & 0xFFFFFFFE);
    else
      v66 = 0;
LABEL_35:
    if (!*(_BYTE *)(v62 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19819B06CLL);
    }
    v68 = a1 + 5;
    v67 = a1[5];
    v69 = *(unsigned __int8 *)v68[1];
    v70 = (v66 >> 4);
    *(_DWORD *)(*(_QWORD *)(v62 + 296) + 208) &= ~*(_DWORD *)(v62 + 320);
    JSC::MacroAssemblerARM64::load32(v62, v69, *(char *)(v62 + 304), v57, v58, v59, v60, v61);
    JSC::MacroAssemblerARM64::branch32(v62, 1, 17, v70, v71, v72, v73, v74, (uint64_t)&v109);
    v80 = v109;
    if (v109 != -1)
    {
      v81 = *(unsigned int *)(v67 + 12);
      if ((_DWORD)v81 == *(_DWORD *)(v67 + 8))
      {
        v82 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67, (void *)(v81 + 1), (unint64_t)&v109, v75, v76, v77, v78, v79);
        v84 = *v82;
        v83 = v82 + 1;
        v80 = v84;
        LODWORD(v81) = *(_DWORD *)(v67 + 12);
      }
      else
      {
        v83 = &v110;
      }
      v85 = *(_QWORD *)v67 + 12 * v81;
      *(_DWORD *)v85 = v80;
      *(_QWORD *)(v85 + 4) = *(_QWORD *)v83;
      ++*(_DWORD *)(v67 + 12);
    }
    return;
  }
  v34 = *(unsigned __int8 *)(v9 + 4);
  v35 = v34 > 0x20;
  v36 = (1 << v34) & 0x100000014;
  if (v35 || v36 == 0)
  {
    v38 = *(_DWORD *)(v9 + 12);
  }
  else
  {
    v39 = *(_QWORD *)(16 * (*(_DWORD *)(v9 + 12) & 0xFFFFFFFE) + 0x40);
    if (!v39 || *(_BYTE *)(v39 + 5) == 1)
      goto LABEL_23;
    v38 = *(_DWORD *)(v39 + 80);
  }
  if (v38)
    v39 = 16 * (v38 & 0xFFFFFFFE);
  else
    v39 = 0;
LABEL_23:
  if (!*(_BYTE *)(v18 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19819B08CLL);
  }
  v40 = *(unsigned __int8 *)a1[3];
  v41 = (v39 >> 4);
  *(_DWORD *)(*(_QWORD *)(v18 + 296) + 208) &= ~*(_DWORD *)(v18 + 320);
  JSC::MacroAssemblerARM64::load32(v18, v40, *(char *)(v18 + 304), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch32(v18, 1, 17, v41, v42, v43, v44, v45, (uint64_t)&v107);
  v51 = v107;
  if (v107 != -1)
  {
    v52 = *(unsigned int *)(v17 + 12);
    if ((_DWORD)v52 == *(_DWORD *)(v17 + 8))
    {
      v53 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, (void *)(v52 + 1), (unint64_t)&v107, v46, v47, v48, v49, v50);
      v55 = *v53;
      v54 = (uint64_t *)(v53 + 1);
      v51 = v55;
      LODWORD(v52) = *(_DWORD *)(v17 + 12);
    }
    else
    {
      v54 = &v108;
    }
    v86 = *(_QWORD *)v17 + 12 * v52;
    *(_DWORD *)v86 = v51;
    *(_QWORD *)(v86 + 4) = *v54;
    ++*(_DWORD *)(v17 + 12);
  }
}

void JSC::InlineCacheCompiler::generateWithConditionChecks(JSC::InlineCacheCompiler *this, unsigned int a2, JSC::AccessCase *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int *v43;
  int *v44;
  int v45;
  _DWORD *v46;
  _QWORD *v47;
  _DWORD *v48;
  int v49;
  int v50;
  unsigned int v51;
  WTF *v52;
  uint64_t v53;
  _BYTE v54[1544];

  v52 = (WTF *)v54;
  v53 = 64;
  JSC::collectConditions((uint64_t)a3, (uint64_t)this + 264, (uint64_t)&v52, a4, a5, a6, a7, a8);
  if (HIDWORD(v53))
  {
    v25 = *((_QWORD *)this + 4);
    v26 = *((unsigned __int8 *)this + 176);
    v27 = v52;
    v28 = 24 * HIDWORD(v53);
    while (1)
    {
      v29 = *(_DWORD **)v27;
      v30 = **(_DWORD **)v27 & 0xFFFFFFFE;
      v51 = **(_DWORD **)v27 & 0xFFFFFFFE;
      v31 = *((unsigned int *)this + 61);
      if ((_DWORD)v31 == *((_DWORD *)this + 60))
      {
        WTF::Vector<JSC::StructureID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::StructureID>((uint64_t)this + 232, (unint64_t)&v51);
        v29 = *(_DWORD **)v27;
      }
      else
      {
        *(_DWORD *)(*((_QWORD *)this + 29) + 4 * v31) = v30;
        ++*((_DWORD *)this + 61);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v25, (uint64_t)v29, (char)v26, v11, v12, v13, v14, v15);
      if (!*(_BYTE *)(v25 + 212))
        break;
      *(_DWORD *)(*(_QWORD *)(v25 + 296) + 208) &= ~*(_DWORD *)(v25 + 320);
      JSC::MacroAssemblerARM64::load32(v25, v26, *(char *)(v25 + 304), v32, v33, v34, v35, v36);
      JSC::MacroAssemblerARM64::branch32(v25, 1, 17, v30, v37, v38, v39, v40, (uint64_t)&v49);
      if (v49 != -1)
      {
        v41 = (_QWORD *)((char *)this + 88);
        v42 = *((unsigned int *)this + 25);
        if ((_DWORD)v42 == *((_DWORD *)this + 24))
        {
          v43 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, (void *)(v42 + 1), (unint64_t)&v49, v11, v12, v13, v14, v15);
          v45 = *v43;
          v44 = v43 + 1;
          v46 = (_DWORD *)(*((_QWORD *)this + 11) + 12 * *((unsigned int *)this + 25));
          *v46 = v45;
          v47 = v46 + 1;
        }
        else
        {
          v48 = (_DWORD *)(*v41 + 12 * v42);
          *v48 = v49;
          v47 = v48 + 1;
          v44 = &v50;
        }
        *v47 = *(_QWORD *)v44;
        ++*((_DWORD *)this + 25);
      }
      v27 = (WTF *)((char *)v27 + 24);
      v28 -= 24;
      if (!v28)
        goto LABEL_2;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_2:
    JSC::InlineCacheCompiler::generateAccessCase(this, a2, a3, v11, v12, v13, v14, v15);
    v23 = v52;
    if (v54 != (_BYTE *)v52 && v52 != 0)
    {
      v52 = 0;
      LODWORD(v53) = 0;
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void JSC::collectConditions(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  JSC::Structure *v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  JSC::Structure *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;

  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
    v12 = v11 + 8;
  else
    v12 = 0;
  if (v11)
    v13 = v11 + 8 + 24 * *(unsigned int *)(v11 + 4);
  else
    v13 = 0;
  if (v12 != v13)
  {
    while (1)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x19819B6D8);
      }
      v14 = (unint64_t *)(v12 + 8);
      if ((*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFLL) == 0)
        break;
      v15 = 16 * (**(_DWORD **)v12 & 0xFFFFFFFE);
      JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)(v12 + 8), 0, v15, *(const JSC::PropertyTable **)v12, a5, a6, a7, a8);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v15 + 96);
      v18 = (v17 & 1) != 0 ? (v17 >> 1) & 3 : *(unsigned __int8 *)(v17 + 4);
      if (v18 == 2)
        break;
      v19 = *v14;
      v20 = BYTE6(*v14);
      if (v20 == 5)
      {
        if (!(v19 >> 4) || ((v19 >> 4) & ~*(_DWORD *)(v15 + 32)) != 0)
          goto LABEL_56;
        v24 = *(_QWORD *)(v15 + 88);
        if (!v24)
        {
          v33 = *(_QWORD *)(v15 + 64);
          if (!v33 || *(_BYTE *)(v33 + 5) != 1 && *(_DWORD *)(v33 + 80) < 2u)
            goto LABEL_56;
          JSC::Structure::materializePropertyTable((JSC::Structure *)v15, *(JSC::VM **)((v15 & 0xFFFFFC000) + 8), 1, a4, a5, a6, a7, a8);
          if (!v24)
            goto LABEL_56;
        }
        if (!*(_DWORD *)(v24 + 24))
          goto LABEL_56;
        v25 = v19 & 0xFFFFFFFFFFFFLL;
        v26 = *(_QWORD *)(v24 + 16);
        v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(unsigned int *)(v24 + 8);
        v29 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((v26 & 1) != 0)
        {
          if ((v29 & 0x20) != 0)
            v29 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 0x20);
          v30 = *(_DWORD *)(v24 + 12);
          v31 = (v29 >> 8) & *(_QWORD *)&v30;
          v32 = *(unsigned __int8 *)(v27 + v31);
          if (!*(_BYTE *)(v27 + v31))
            goto LABEL_56;
          v34 = v27 + v28;
          v35 = 1;
          while (1)
          {
            v36 = *(_QWORD *)(v34 + 8 * (v32 - 1));
            if (v25 == (v36 & 0xFFFFFFFFFFFFLL))
              break;
            v31 = ((_DWORD)v31 + v35) & v30;
            v32 = *(unsigned __int8 *)(v27 + v31);
            ++v35;
            if (!*(_BYTE *)(v27 + v31))
              goto LABEL_56;
          }
          v37 = (JSC::Structure *)HIBYTE(v36);
        }
        else
        {
          if ((v29 & 0x20) != 0)
            v29 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 0x20);
          v43 = *(_DWORD *)(v24 + 12);
          v44 = v43 & (v29 >> 8);
          v45 = *(_DWORD *)(v27 + 4 * v44);
          if (!v45)
            goto LABEL_56;
          v46 = v27 + 4 * v28;
          v47 = 1;
          while (1)
          {
            v48 = (v45 - 1);
            if (*(_QWORD *)(v46 + 16 * v48) == v25)
              break;
            v44 = (v44 + v47) & v43;
            v45 = *(_DWORD *)(v27 + 4 * v44);
            ++v47;
            if (!v45)
              goto LABEL_56;
          }
          v37 = (JSC::Structure *)*(unsigned int *)(v46 + 16 * v48 + 8);
          if ((_DWORD)v37 == -1)
          {
LABEL_56:
            __break(0xC471u);
            JUMPOUT(0x19819B578);
          }
        }
        v38 = JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v15, *(JSC::VM **)((v15 & 0xFFFFFC000) + 8), v37, (uint64_t)a4, a5, a6, a7, a8);
        if (!v38 || *(_BYTE *)(v38 + 4) == 2)
          break;
      }
      else if (v20 == 1)
      {
        if (!(v19 >> 4) || ((v19 >> 4) & ~*(_DWORD *)(v15 + 32)) != 0)
          goto LABEL_88;
        v49 = *(_QWORD *)(v15 + 88);
        if (!v49)
        {
          v61 = *(_QWORD *)(v15 + 64);
          if (!v61 || *(_BYTE *)(v61 + 5) != 1 && *(_DWORD *)(v61 + 80) < 2u)
            goto LABEL_88;
          JSC::Structure::materializePropertyTable((JSC::Structure *)v15, *(JSC::VM **)((v15 & 0xFFFFFC000) + 8), 1, a4, a5, a6, a7, a8);
          if (!v49)
            goto LABEL_88;
        }
        if (!*(_DWORD *)(v49 + 24))
          goto LABEL_88;
        v50 = v19 & 0xFFFFFFFFFFFFLL;
        v51 = *(_QWORD *)(v49 + 16);
        v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
        v53 = *(unsigned int *)(v49 + 8);
        v54 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((v51 & 1) != 0)
        {
          if ((v54 & 0x20) != 0)
            v54 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 0x20);
          v55 = *(_DWORD *)(v49 + 12);
          v56 = (v54 >> 8) & *(_QWORD *)&v55;
          v57 = *(unsigned __int8 *)(v52 + v56);
          if (!*(_BYTE *)(v52 + v56))
            goto LABEL_88;
          v58 = v52 + v53;
          v59 = 1;
          while (1)
          {
            v60 = *(_QWORD *)(v58 + 8 * (v57 - 1));
            if (v50 == (v60 & 0xFFFFFFFFFFFFLL))
              break;
            v56 = ((_DWORD)v56 + v59) & v55;
            v57 = *(unsigned __int8 *)(v52 + v56);
            ++v59;
            if (!*(_BYTE *)(v52 + v56))
              goto LABEL_88;
          }
          v62 = (JSC::Structure *)HIBYTE(v60);
        }
        else
        {
          if ((v54 & 0x20) != 0)
            v54 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 0x20);
          v64 = *(_DWORD *)(v49 + 12);
          v65 = v64 & (v54 >> 8);
          v66 = *(_DWORD *)(v52 + 4 * v65);
          if (!v66)
            goto LABEL_88;
          v67 = v52 + 4 * v53;
          v68 = 1;
          while (1)
          {
            v69 = (v66 - 1);
            if (*(_QWORD *)(v67 + 16 * v69) == v50)
              break;
            v65 = (v65 + v68) & v64;
            v66 = *(_DWORD *)(v52 + 4 * v65);
            ++v68;
            if (!v66)
              goto LABEL_88;
          }
          v62 = (JSC::Structure *)*(unsigned int *)(v67 + 16 * v69 + 8);
          if ((_DWORD)v62 == -1)
          {
LABEL_88:
            __break(0xC471u);
            JUMPOUT(0x19819B718);
          }
        }
        v63 = JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)v15, *(JSC::VM **)((v15 & 0xFFFFFC000) + 8), v62, "Firing replacement to ensure validity", a5, a6, a7, a8);
        if (!v63 || *(_BYTE *)(v63 + 4) != 2)
          break;
      }
      v21 = *(_DWORD *)(a2 + 12);
      if (v21 == *(_DWORD *)(a2 + 8))
      {
        v70 = a2;
LABEL_90:
        WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const&>(v70, v12);
        goto LABEL_17;
      }
      v22 = *(_QWORD *)a2 + 24 * v21;
      v23 = *(_OWORD *)v12;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v12 + 16);
      *(_OWORD *)v22 = v23;
      ++*(_DWORD *)(a2 + 12);
LABEL_17:
      v12 += 24;
      if (v12 == v13)
        return;
    }
    if ((unint64_t)*(unsigned __int8 *)(v12 + 14) << 48 == 0x5000000000000)
    {
      __break(0xC471u);
      JUMPOUT(0x19819B758);
    }
    JSC::ObjectPropertyCondition::structureEnsuresValidityAssumingImpurePropertyWatchpoint(v12, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((v39 & 1) == 0)
    {
      WTF::dataLog<char [34],JSC::ObjectPropertyCondition,char [2]>((JSC::ObjectPropertyCondition *)v12);
      __break(0xC471u);
      JUMPOUT(0x19819B780);
    }
    v40 = *(_DWORD *)(a3 + 12);
    if (v40 == *(_DWORD *)(a3 + 8))
    {
      v70 = a3;
      goto LABEL_90;
    }
    v41 = *(_QWORD *)a3 + 24 * v40;
    v42 = *(_OWORD *)v12;
    *(_QWORD *)(v41 + 16) = *(_QWORD *)(v12 + 16);
    *(_OWORD *)v41 = v42;
    ++*(_DWORD *)(a3 + 12);
    goto LABEL_17;
  }
}

void JSC::InlineCacheCompiler::generateAccessCase(JSC::InlineCacheCompiler *this, unsigned int a2, JSC::AccessCase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *AlternateBase;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::Structure *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v89;
  JSC::Structure *v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  JSC::VM *v116;
  int v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  JSC::VM *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int8x8_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int *v160;
  JSC::AssemblerBuffer *v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  JSC::Structure *v165;
  _DWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  JSC::Structure *v172;
  unsigned int v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int *v198;
  int *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  _DWORD *v212;
  uint64_t *v213;
  int v214;
  BOOL v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  uint64_t v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint8x8_t v292;
  unsigned int v293;
  uint64_t v294;
  JSC::CallLinkInfo *v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  JSC::CodeBlock *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  JSC::LLInt *v330;
  uint64_t v331;
  int v332;
  unsigned int v333;
  uint64_t v334;
  unint64_t v335;
  unsigned int v336;
  int v337;
  uint64_t v338;
  int v339;
  unsigned int v340;
  int v341;
  uint64_t v342;
  int v343;
  unsigned int v344;
  JSC::ARM64LogicalImmediate *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  int v353;
  uint64_t v354;
  _BOOL4 v355;
  int v356;
  unsigned int v357;
  unint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  unsigned int v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  JSC::InlineCacheCompiler *v369;
  int v370;
  char *v371;
  unsigned int *v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  JSC::ScratchRegisterAllocator *v379;
  unint64_t v380;
  unint64_t v381;
  const JSC::RegisterSet *p_dst;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  _DWORD *v395;
  uint64_t *v396;
  int v397;
  uint64_t v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  unsigned int v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int v425;
  JSC::VM *v426;
  uint8x8_t v427;
  __int32 v428;
  uint8x8_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  int v434;
  int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unsigned int v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  JSC::VM *v488;
  uint8x8_t v489;
  __int32 v490;
  uint8x8_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  int v496;
  unsigned int v498;
  unsigned int v499;
  unint64_t v500;
  uint64_t v501;
  unsigned int *v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  int v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  unsigned int v511;
  unsigned int v512;
  unsigned int *v513;
  unsigned int v514;
  int v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int8x8_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int j;
  unsigned int v544;
  char v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unsigned int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  uint64_t v562;
  unint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  JSC::InlineCacheCompiler *v571;
  unint64_t v572;
  uint64_t v573;
  unint64_t v574;
  int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  char v601;
  char v602;
  int v603;
  uint64_t v604;
  unsigned __int8 *v605;
  unsigned __int8 *v606;
  uint64_t v607;
  _BYTE *v608;
  unsigned __int8 *v609;
  char *v610;
  char *v611;
  uint64_t v612;
  int v613;
  unsigned __int8 *v614;
  int v615;
  int v616;
  uint64_t v617;
  JSC::VM *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  unsigned int v634;
  int *v635;
  int *v636;
  int v637;
  uint64_t v638;
  unsigned int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  char v646;
  JSC::ScratchRegisterAllocator *v647;
  unint64_t v648;
  uint64_t v649;
  void *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  const JSC::RegisterSet *v657;
  uint8x8_t v658;
  __int32 v659;
  uint8x8_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  char v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unsigned int v675;
  JSC::ScratchRegisterAllocator *v676;
  unint64_t i;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  unint64_t v681;
  unsigned int v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unsigned int v689;
  uint8x8_t v690;
  __int32 v691;
  uint8x8_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  int v697;
  int v698;
  unsigned int v699;
  unsigned int v700;
  unsigned int v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  BOOL v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  __int16 v726;
  unsigned int v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  void *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  char v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  int8x8_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  unsigned int v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unsigned int v791;
  uint8x8_t v792;
  __int32 v793;
  uint8x8_t v794;
  uint64_t v795;
  uint64_t v796;
  char v797;
  unint64_t v798;
  unint64_t v799;
  unsigned int v800;
  uint64_t v801;
  JSType v802;
  char v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unsigned int v827;
  uint8x8_t v828;
  __int32 v829;
  uint8x8_t v830;
  uint64_t v831;
  uint64_t v832;
  char v833;
  unint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  char v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  _DWORD *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  char v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  unsigned int v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  JSType v884;
  unsigned int v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  char v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  unsigned int v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  JSType v958;
  unsigned int v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  _DWORD *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  char v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  unsigned int v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  JSType v1009;
  unsigned int v1010;
  uint64_t v1011;
  uint64_t v1012;
  unsigned int v1013;
  uint64_t v1014;
  unint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  unsigned int v1018;
  uint8x8_t v1019;
  __int32 v1020;
  uint8x8_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  char v1024;
  unint64_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  char v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  char v1049;
  char v1050;
  int v1051;
  uint64_t v1052;
  _BYTE *v1053;
  uint64_t v1054;
  unsigned int v1055;
  uint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  unsigned int v1060;
  uint8x8_t v1061;
  __int32 v1062;
  uint8x8_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  char v1066;
  unint64_t v1067;
  uint64_t v1068;
  char v1069;
  int v1070;
  uint64_t v1071;
  int v1072;
  char v1073;
  char v1074;
  int v1075;
  uint64_t v1076;
  _BYTE *v1077;
  uint64_t v1078;
  _BYTE *v1079;
  uint64_t v1080;
  char v1081;
  char v1082;
  uint64_t v1083;
  uint64_t v1084;
  _BYTE *v1085;
  uint64_t v1086;
  char v1087;
  uint64_t v1088;
  char v1089;
  char v1090;
  int v1091;
  uint64_t v1092;
  _BYTE *v1093;
  uint64_t v1094;
  _BYTE *v1095;
  uint64_t v1096;
  int v1097;
  unsigned int v1098;
  unsigned __int8 *v1099;
  _BOOL4 v1100;
  uint64_t v1101;
  int v1102;
  int v1103;
  char v1104;
  char v1105;
  char v1106;
  JSC::ARM64LogicalImmediate *v1107;
  JSC::ARM64LogicalImmediate *v1108;
  int v1109;
  int v1110;
  JSC::AssemblerBuffer *v1111;
  int v1112;
  int v1113;
  char v1114;
  int v1115;
  uint64_t v1116;
  _DWORD v1117[2];
  char v1118;
  __int16 v1119;
  char v1120;
  unsigned int v1121[3];
  uint64_t v1122[2];
  uint64_t v1123;
  int v1124;
  int v1125;
  int v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  int v1131;
  _DWORD v1132[2];
  char v1133;
  __int16 v1134;
  char v1135;
  __int128 __dst;
  __int16 v1137;
  unint64_t v1138;
  uint64_t v1139;
  _WORD v1140[12];
  __int128 v1141;
  _WORD v1142[12];
  int v1143;

  v11 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v12 = v11[116];
  v13 = v11[116];
  if ((v11[122] & 0xFB) == 1)
    v13 = v11[118];
  v14 = *((unsigned __int8 *)a3 + 4);
  v15 = v11[117];
  v16 = *((_QWORD *)this + 4);
  v17 = *(JSC::VM **)this;
  v18 = *((unsigned __int8 *)this + 176);
  switch(*((_BYTE *)a3 + 4))
  {
    case 0:
    case 9:
      if (v14 != 2 && v14 != 4)
      {
        v19 = *((_DWORD *)a3 + 3);
        goto LABEL_7;
      }
      v20 = *(_QWORD *)(16 * (*((_DWORD *)a3 + 3) & 0xFFFFFFFE) + 0x40);
      if (v20 && *(_BYTE *)(v20 + 5) != 1)
      {
        v19 = *(_DWORD *)(v20 + 80);
LABEL_7:
        if (v19)
          v20 = 16 * (v19 & 0xFFFFFFFE);
        else
          v20 = 0;
      }
      AlternateBase = (_DWORD *)JSC::AccessCase::tryGetAlternateBase(a3);
      if (AlternateBase)
        v20 = 16 * (*AlternateBase & 0xFFFFFFFE);
      v27 = (JSC::Structure *)*((unsigned int *)a3 + 2);
      if ((_DWORD)v27 != -1)
        JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v20, v17, v27, v22, v23, v24, v25, v26);
      v28 = v18;
      if (*((_QWORD *)a3 + 3))
        goto LABEL_17;
      v29 = JSC::AccessCase::tryGetAlternateBase(a3);
      if (v29)
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v29, (char)v18, v22, v23, v24, v25, v26);
      }
      else
      {
        v28 = v12;
        if (!*((_BYTE *)a3 + 5))
          goto LABEL_17;
        JSC::MacroAssemblerARM64::load64(v16, v12 | 0x1000000000, (char)v18, v22, v23, v24, v25, v26);
      }
      v28 = v18;
LABEL_17:
      v30 = *((_DWORD *)a3 + 2);
      if (v30 < 64)
      {
        LODWORD(v18) = v28;
      }
      else
      {
        JSC::MacroAssemblerARM64::load64(v16, v28 | 0x800000000, (char)v18, v22, v23, v24, v25, v26);
        v30 = *((_DWORD *)a3 + 2);
      }
      if (v30 <= 63)
        v31 = (8 * v30 + 16);
      else
        v31 = (496 - 8 * v30);
      JSC::MacroAssemblerARM64::load64(v16, v18 | ((unint64_t)(v31 >> 3) << 35), (char)v15, v22, v23, v24, v25, v26);
LABEL_23:
      JSC::InlineCacheCompiler::succeed(this, (uint64_t)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 1:
    case 3:
    case 0x13:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1E:
    case 0x1F:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6F:
    case 0x70:
      __break(0xC471u);
      JUMPOUT(0x19819DDBCLL);
    case 2:
      v35 = *((_DWORD *)a3 + 3);
      v36 = 16 * (v35 & 0xFFFFFFFE);
      if (v35)
        v37 = 16 * (v35 & 0xFFFFFFFE);
      else
        v37 = 0;
      v38 = *(unsigned __int16 *)(v37 + 24);
      if (v38 == 65534)
        goto LABEL_36;
      if (v38 == 0xFFFF)
        v38 = *(_DWORD *)(*(_QWORD *)(v37 + 64) + 84);
      if (v38 < 64)
      {
LABEL_36:
        v39 = 0;
      }
      else if ((v38 - 63) >= 5)
      {
        v399 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
        v400 = v399 | (v399 >> 4) | ((v399 | (v399 >> 4)) >> 8);
        v39 = (v400 | HIWORD(v400)) + 1;
      }
      else
      {
        v39 = 4;
      }
      v40 = *(_QWORD *)(v36 + 64);
      if (v40)
      {
        v41 = v40;
        if (*(_BYTE *)(v40 + 5) != 1)
        {
          v337 = *(_DWORD *)(v40 + 80);
          v41 = 16 * (v337 & 0xFFFFFFFE);
          if (!v337)
            v41 = 0;
        }
      }
      else
      {
        v41 = 0;
      }
      v42 = *(unsigned __int16 *)(v41 + 24);
      v1108 = *(JSC::ARM64LogicalImmediate **)this;
      if (v42 == 65534)
        goto LABEL_43;
      if (v42 == 0xFFFF)
        v42 = *(_DWORD *)(*(_QWORD *)(v41 + 64) + 84);
      if (v42 < 64)
      {
LABEL_43:
        v43 = 0;
      }
      else if ((v42 - 63) >= 5)
      {
        v401 = (v42 - 64) | ((v42 - 64) >> 1) | (((v42 - 64) | ((v42 - 64) >> 1)) >> 2);
        v402 = v401 | (v401 >> 4) | ((v401 | (v401 >> 4)) >> 8);
        v43 = (v402 | HIWORD(v402)) + 1;
      }
      else
      {
        v43 = 4;
      }
      if (v39 == v43)
      {
        JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v1141, (uint64_t)v11, v18);
        v1109 = 0;
        v1100 = 0;
LABEL_46:
        v49 = -1;
        v1104 = -1;
        goto LABEL_47;
      }
      if (v40)
      {
        v338 = v40;
        if (*(_BYTE *)(v40 + 5) != 1)
        {
          v560 = *(_DWORD *)(v40 + 80);
          if (v560)
            v338 = 16 * (v560 & 0xFFFFFFFE);
          else
            v338 = 0;
        }
      }
      else
      {
        v338 = 0;
      }
      v339 = *(unsigned __int16 *)(v338 + 24);
      if (v339 == 65534)
      {
        v1100 = 0;
      }
      else
      {
        if (v339 == 0xFFFF)
          v339 = *(_DWORD *)(*(_QWORD *)(v338 + 64) + 84);
        v1100 = v339 > 63;
      }
      if (v40 && *(_BYTE *)(v40 + 5) != 1)
      {
        v561 = *(_DWORD *)(v40 + 80);
        if (v561)
          v40 = 16 * (v561 & 0xFFFFFFFE);
        else
          v40 = 0;
      }
      if ((*(_BYTE *)(v40 + 8) & 0xE) != 0)
      {
        JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v1141, (uint64_t)v11, v18);
        v1109 = 0;
        goto LABEL_46;
      }
      v340 = *(unsigned __int8 *)(v40 + 9) - 50;
      JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v1141, (uint64_t)v11, v18);
      if (v340 > 0xFFFFFFF4)
      {
        v1109 = 0;
        v49 = -1;
        v1104 = -1;
      }
      else
      {
        v49 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v1141);
        v1104 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v1141);
        v1109 = 1;
      }
LABEL_47:
      v1123 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&v1141, (JSC::ScratchRegisterAllocator *)v16, 0, v44, v45, v46, v47, v48);
      v1138 = (unint64_t)v1140;
      v1139 = 2;
      if (v39 == v43)
      {
        v56 = *((_DWORD *)a3 + 2);
        v57 = v1109;
        if (v56 <= 63)
        {
LABEL_49:
          v58 = (8 * v56 + 16);
          v59 = v12;
          goto LABEL_50;
        }
        JSC::MacroAssemblerARM64::load64(v16, v12 | 0x800000000, (char)v18, v51, v52, v53, v54, v55);
        v56 = *((_DWORD *)a3 + 2);
      }
      else
      {
        v341 = *((_DWORD *)a3 + 3);
        v342 = 16 * (v341 & 0xFFFFFFFE);
        if (!v341)
          v342 = 0;
        v343 = *(unsigned __int16 *)(v342 + 24);
        if (v343 == 65534)
          goto LABEL_246;
        if (v343 == 0xFFFF)
          v343 = *(_DWORD *)(*(_QWORD *)(v342 + 64) + 84);
        if (v343 < 64)
        {
LABEL_246:
          v344 = 0;
        }
        else if ((v343 - 63) >= 5)
        {
          v576 = (v343 - 64) | ((v343 - 64) >> 1) | (((v343 - 64) | ((v343 - 64) >> 1)) >> 2);
          v577 = v576 | (v576 >> 4) | ((v576 | (v576 >> 4)) >> 8);
          v344 = (v577 | HIWORD(v577)) + 1;
        }
        else
        {
          v344 = 4;
        }
        v345 = (JSC::ARM64LogicalImmediate *)v344;
        v1114 = v15;
        if (v1109)
        {
          v346 = 8 * v344;
          if (v344 > 0x3EC)
            v347 = 0;
          else
            v347 = *(_QWORD *)((char *)v1108 + (((v346 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
          *(_QWORD *)&__dst = 0;
          *((_QWORD *)&__dst + 1) = v347;
          v1098 = v49;
          JSC::AssemblyHelpers::emitAllocate(v16, (char)v18, (uint64_t)&__dst, v49, v1104, (uint64_t)&v1138, 0, v55, (int8x8_t)2);
          JSC::MacroAssemblerARM64::add64(v16, ((_DWORD)v346 + 8) & 0xFFFFFFF8, (char)v18, (char)v18, v348, v349, v350, v351);
          v352 = *((unsigned __int8 *)a3 + 4);
          if (v352 <= 0x20 && ((1 << v352) & 0x100000014) != 0)
          {
            v354 = *(_QWORD *)(16 * (*((_DWORD *)a3 + 3) & 0xFFFFFFFE) + 0x40);
            v355 = v1100;
            if (v354 && *(_BYTE *)(v354 + 5) != 1)
            {
              v575 = *(_DWORD *)(v354 + 80);
              if (v575)
                v354 = 16 * (v575 & 0xFFFFFFFE);
              else
                v354 = 0;
            }
          }
          else
          {
            v353 = *((_DWORD *)a3 + 3);
            if (v353)
              v354 = 16 * (v353 & 0xFFFFFFFE);
            else
              v354 = 0;
            v355 = v1100;
          }
          v356 = *(unsigned __int16 *)(v354 + 24);
          if (v356 == 65534)
            goto LABEL_260;
          if (v356 == 0xFFFF)
            v356 = *(_DWORD *)(*(_QWORD *)(v354 + 64) + 84);
          if (v356 < 64)
          {
LABEL_260:
            v357 = 0;
          }
          else if ((v356 - 63) >= 5)
          {
            v578 = (v356 - 64) | ((v356 - 64) >> 1) | (((v356 - 64) | ((v356 - 64) >> 1)) >> 2);
            v579 = v578 | (v578 >> 4) | ((v578 | (v578 >> 4)) >> 8);
            v357 = (v579 | HIWORD(v579)) + 1;
          }
          else
          {
            v357 = 4;
          }
          v358 = 8 * v357;
          v1101 = v357;
          if (v355)
          {
            JSC::MacroAssemblerARM64::load64(v16, v12 | 0x800000000, v1104, v51, v52, v53, v54, v55);
            if ((_DWORD)v1101)
            {
              v563 = 0;
              v564 = v18 | 0xFFFFFFF000000000;
              v565 = v1104 | 0xFFFFFFF000000000;
              do
              {
                v563 += 8;
                JSC::MacroAssemblerARM64::load64(v16, v565, v1098, v51, v52, v53, v54, v55);
                JSC::MacroAssemblerARM64::store64(v16, v1098, v564, v566, v567, v568, v569, v570);
                v564 -= 0x800000000;
                v565 -= 0x800000000;
              }
              while (v563 < v358);
            }
          }
          if (v358 < v346)
          {
            v359 = v18 - (v1101 << 35) - 0x1000000000;
            do
            {
              v358 += 8;
              JSC::MacroAssemblerARM64::store64(v16, 63, v359, v51, v52, v53, v54, v55);
              v359 -= 0x800000000;
            }
            while (v358 < v346);
          }
        }
        else
        {
          v1129 = 0;
          if ((v12 & 0x40) != 0 || (v15 & 0x40) != 0)
            goto LABEL_698;
          v1128 = (1 << v12) | (1 << v15);
          v1122[0] = JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall((JSC::ScratchRegisterAllocator **)this, (const JSC::RegisterSet *)&v1128, v50, v51, v52, v53, v54, v55);
          v1122[1] = v725;
          v726 = *(_WORD *)(*((_QWORD *)this + 2) + 129);
          v727 = JSC::InlineCacheCompiler::callSiteIndexForExceptionHandlingOrOriginal(this);
          if ((v726 & 0x200) != 0)
            JSC::MacroAssemblerARM64::transfer32(v16, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 120) | 0x7000000000, 0x240000001DLL, v728, v729, v730, v731, v732);
          else
            JSC::MacroAssemblerARM64::store32(v16, v727, 0x240000001DLL, v728, v729, v730, v731, v732);
          if (v1100)
          {
            *(_QWORD *)&__dst = &v1137;
            DWORD2(__dst) = 1;
            if ((_DWORD)v12 != 1)
            {
              v1137 = v12 | 0x100;
              HIDWORD(__dst) = 1;
              v1013 = 1;
              do
              {
                v1014 = 0;
                v1015 = 0;
                v1016 = v1013;
                do
                {
                  if ((*(_BYTE *)(__dst + v1014 + 1) & 0x40) != 0)
                    goto LABEL_698;
                  v1015 |= 1 << *(_BYTE *)(__dst + v1014 + 1);
                  v1014 += 2;
                }
                while (2 * v1013 != v1014);
                v1017 = 0;
                do
                {
                  v1018 = *(_BYTE *)(__dst + v1017) & 0x7F;
                  if (v1018 >= 0x40)
                    goto LABEL_698;
                  v1015 &= ~(1 << v1018);
                  v1017 += 2;
                }
                while (2 * v1013 != v1017);
                v1019 = (uint8x8_t)vcnt_s8((int8x8_t)v1015);
                v1019.i16[0] = vaddlv_u8(v1019);
                v1020 = v1019.i32[0];
                v1021 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v1015));
                v1021.i16[0] = vaddlv_u8(v1021);
                if (v1021.i32[0] + v1020)
                {
                  v1022 = 0;
                  if (v1013 <= 1uLL)
                    v1016 = 1;
                  v1023 = 2 * v1016;
                  while (1)
                  {
                    v1024 = *(_BYTE *)(__dst + v1022 + 1);
                    if ((v1024 & 0x7Fu) >= 0x40)
                      goto LABEL_698;
                    if (((v1015 >> (v1024 & 0x7F)) & 1) != 0)
                      break;
                    v1022 += 2;
                    if (v1023 == v1022)
                      goto LABEL_774;
                  }
                  JSC::MacroAssemblerARM64::move((_DWORD *)v16, *(char *)(__dst + v1022), v1024, v735, v736, v737, v738, v739);
                  memmove((void *)(__dst + v1022), (const void *)(__dst + v1022 + 2), 2 * HIDWORD(__dst) - v1022 - 2);
                  v1013 = --HIDWORD(__dst);
                }
                else
                {
                  v1087 = *(_BYTE *)__dst;
                  v1106 = *(_BYTE *)(__dst + 1);
                  JSC::MacroAssemblerARM64::swap(v16, *(char *)__dst, v1106, v735, v736, v737, v738, v739);
                  memmove((void *)__dst, (const void *)(__dst + 2), 2 * HIDWORD(__dst) - 2);
                  v1088 = --HIDWORD(__dst);
                  if (HIDWORD(__dst))
                  {
                    v1093 = (_BYTE *)__dst;
                    v1094 = 2 * v1088;
                    while (*v1093 != v1106)
                    {
                      v1093 += 2;
                      v1094 -= 2;
                      if (!v1094)
                        goto LABEL_870;
                    }
                    *v1093 = v1087;
                  }
LABEL_870:
                  WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)v1121, 0);
                  v1013 = HIDWORD(__dst);
                }
LABEL_774:
                ;
              }
              while (v1013);
              v1025 = __dst;
              if (&v1137 != (__int16 *)__dst && (_QWORD)__dst)
              {
                *(_QWORD *)&__dst = 0;
                DWORD2(__dst) = 0;
                WTF::fastFree(v1025, v733, v734, v735, v736, v737, v738, v739);
              }
            }
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v16, v345, 2, v735, v736, v737, v738, v739);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)v1108, 0, v813, v814, v815, v816, v817);
            if (!*(_BYTE *)(v16 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x19819F46CLL);
            }
            *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
            v746 = *(_BYTE *)(v16 + 272);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)operationReallocateButterflyToGrowPropertyStorage, v746, v818, v819, v820, v821, v822);
            v740 = (uint64_t)v1108;
          }
          else
          {
            *(_QWORD *)&__dst = &v1137;
            DWORD2(__dst) = 1;
            if ((_DWORD)v12 != 1)
            {
              v1137 = v12 | 0x100;
              HIDWORD(__dst) = 1;
              v786 = 1;
              do
              {
                v787 = 0;
                v788 = 0;
                v789 = v786;
                do
                {
                  if ((*(_BYTE *)(__dst + v787 + 1) & 0x40) != 0)
                    goto LABEL_698;
                  v788 |= 1 << *(_BYTE *)(__dst + v787 + 1);
                  v787 += 2;
                }
                while (2 * v786 != v787);
                v790 = 0;
                do
                {
                  v791 = *(_BYTE *)(__dst + v790) & 0x7F;
                  if (v791 >= 0x40)
                    goto LABEL_698;
                  v788 &= ~(1 << v791);
                  v790 += 2;
                }
                while (2 * v786 != v790);
                v792 = (uint8x8_t)vcnt_s8((int8x8_t)v788);
                v792.i16[0] = vaddlv_u8(v792);
                v793 = v792.i32[0];
                v794 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v788));
                v794.i16[0] = vaddlv_u8(v794);
                if (v794.i32[0] + v793)
                {
                  v795 = 0;
                  if (v786 <= 1uLL)
                    v789 = 1;
                  v796 = 2 * v789;
                  while (1)
                  {
                    v797 = *(_BYTE *)(__dst + v795 + 1);
                    if ((v797 & 0x7Fu) >= 0x40)
                      goto LABEL_698;
                    if (((v788 >> (v797 & 0x7F)) & 1) != 0)
                      break;
                    v795 += 2;
                    if (v796 == v795)
                      goto LABEL_660;
                  }
                  JSC::MacroAssemblerARM64::move((_DWORD *)v16, *(char *)(__dst + v795), v797, v735, v736, v737, v738, v739);
                  memmove((void *)(__dst + v795), (const void *)(__dst + v795 + 2), 2 * HIDWORD(__dst) - v795 - 2);
                  v786 = --HIDWORD(__dst);
                }
                else
                {
                  v1081 = *(_BYTE *)__dst;
                  v1082 = *(_BYTE *)(__dst + 1);
                  JSC::MacroAssemblerARM64::swap(v16, *(char *)__dst, v1082, v735, v736, v737, v738, v739);
                  memmove((void *)__dst, (const void *)(__dst + 2), 2 * HIDWORD(__dst) - 2);
                  v1083 = --HIDWORD(__dst);
                  if (HIDWORD(__dst))
                  {
                    v1085 = (_BYTE *)__dst;
                    v1086 = 2 * v1083;
                    while (*v1085 != v1082)
                    {
                      v1085 += 2;
                      v1086 -= 2;
                      if (!v1086)
                        goto LABEL_855;
                    }
                    *v1085 = v1081;
                  }
LABEL_855:
                  WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)v1121, 0);
                  v786 = HIDWORD(__dst);
                }
LABEL_660:
                ;
              }
              while (v786);
              v798 = __dst;
              if (&v1137 != (__int16 *)__dst && (_QWORD)__dst)
              {
                *(_QWORD *)&__dst = 0;
                DWORD2(__dst) = 0;
                WTF::fastFree(v798, v733, v734, v735, v736, v737, v738, v739);
              }
            }
            v740 = (uint64_t)v1108;
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)v1108, 0, v735, v736, v737, v738, v739);
            if (!*(_BYTE *)(v16 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x19819F354);
            }
            *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
            v746 = *(_BYTE *)(v16 + 272);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)operationReallocateButterflyToHavePropertyStorageWithInitialCapacity, v746, v741, v742, v743, v744, v745);
          }
          *(_DWORD *)(v16 + 208) = 0;
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v16 + 56), (32 * (v746 & 0x1F)) | 0xD63F0000, v747, v748, v749, v750, v751, v752);
          JSC::MacroAssemblerARM64::move((_DWORD *)v16, 0, (char)v18, v753, v754, v755, v756, v757);
          JSC::AssemblyHelpers::emitExceptionCheck(v16, v740, 1, 0, 0xFFFFFFFFLL, v758, v759, v760, (uint64_t)v1121, v761);
          JSC::InlineCacheCompiler::restoreLiveRegistersFromStackForCallWithThrownException((uint64_t)this, v1122, v762, v763, v764, v765, v766, v767);
          JSC::InlineCacheCompiler::emitExplicitExceptionHandler(this, v768, v769, v770, v771, v772, v773, v774);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v1121, v16, v775, v776, v777, v778, v779, v780);
          __dst = 0uLL;
          if ((v18 & 0x40) != 0)
            goto LABEL_698;
          *(_QWORD *)&__dst = 1 << v18;
          JSC::InlineCacheCompiler::restoreLiveRegistersFromStackForCall((uint64_t)this, v1122, (const JSC::RegisterSet *)&__dst, v781, v782, v783, v784, v785);
        }
        v56 = *((_DWORD *)a3 + 2);
        LOBYTE(v15) = v1114;
        v57 = v1109;
        if (v56 < 64)
          goto LABEL_49;
      }
      v58 = (496 - 8 * v56);
      v59 = v18;
LABEL_50:
      JSC::MacroAssemblerARM64::store64(v16, (char)v15, v59 | (unint64_t)(v58 << 32), v51, v52, v53, v54, v55);
      if (v57)
      {
        v360 = *((_DWORD *)a3 + 3);
        if (v360)
          v361 = 16 * (v360 & 0xFFFFFFFE);
        else
          v361 = 0;
        if ((*(_BYTE *)(v361 + 8) & 0xE) != 0 || *(unsigned __int8 *)(v361 + 9) - 39 <= 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x19819DDF0);
        }
        JSC::AssemblyHelpers::nukeStructureAndStoreButterfly(v16, v1108, (char)v18, (char)v12, v61, v62, v63, v64);
      }
      v65 = *((_DWORD *)a3 + 3);
      if ((v65 & 0xFFFFFFFE) != 0)
      {
        if (!*(_BYTE *)(v16 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819E204);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v16, (JSC::ARM64LogicalImmediate *)(v65 & 0xFFFFFFFE), v16 + 264, v60, v61, v62, v63, v64);
        v66 = v16;
        v67 = 16;
      }
      else
      {
        v66 = v16;
        v67 = 63;
      }
      JSC::MacroAssemblerARM64::store32(v66, v67, v12, v60, v61, v62, v63, v64);
      JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v1141, (const char *)v16, (const char *)&v1123, v68, v69, v70, v71, v72);
      JSC::InlineCacheCompiler::succeed(this, v73, v74, v75, v76, v77, v78, v79);
      if (v57)
      {
        if (v1143)
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v1138, v16, v81, v82, v83, v84, v85, v86);
          JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v1141, (const char *)v16, (const char *)&v1123, v970, v971, v972, v973, v974);
          v975 = (_DWORD *)((char *)this + 128);
          JSC::ARM64Assembler::label((_DWORD *)(v16 + 32), v976, v977, v978, v979, v980, v981, v982, (int *)&__dst);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v16 + 56), 335544320, v983, v984, v985, v986, v987, v988);
          if (*(_BYTE *)(v16 + 328))
            v995 = 69;
          else
            v995 = 65;
          v1117[0] = __dst;
          v1117[1] = 0;
          v1118 = v995;
          v1119 = 15;
          v1120 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v975, v1117, v989, v990, v991, v992, v993, v994);
        }
        else
        {
          v362 = HIDWORD(v1139);
          if (HIDWORD(v1139))
          {
            v363 = v1138;
            v364 = *((unsigned int *)this + 34);
            v365 = *((unsigned int *)this + 35);
            v366 = v365 + HIDWORD(v1139);
            if (v366 > v364)
            {
              v367 = v364 + (v364 >> 2);
              if (v367 >= 0x10)
                v368 = v367 + 1;
              else
                v368 = 16;
              if (v368 <= v366)
                v368 = v365 + HIDWORD(v1139);
              v369 = (JSC::InlineCacheCompiler *)*((_QWORD *)this + 16);
              if (v368 < 3)
              {
                v371 = (char *)this + 144;
                *((_QWORD *)this + 16) = (char *)this + 144;
                *((_DWORD *)this + 34) = 2;
              }
              else
              {
                if (v368 >= 0x15555556)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19819F728);
                }
                v370 = 12 * v368;
                v371 = (char *)WTF::fastMalloc((WTF *)(12 * v368));
                *((_DWORD *)this + 34) = (v370 & 0xFFFFFFFC) / 0xC;
                *((_QWORD *)this + 16) = v371;
              }
              if ((_DWORD)v365)
              {
                v571 = v369;
                do
                {
                  *(_DWORD *)v371 = *(_DWORD *)v571;
                  *(_QWORD *)(v371 + 4) = *(_QWORD *)((char *)v571 + 4);
                  v571 = (JSC::InlineCacheCompiler *)((char *)v571 + 12);
                  v371 += 12;
                }
                while (v571 != (JSC::InlineCacheCompiler *)((char *)v369 + 12 * v365));
              }
              if ((JSC::InlineCacheCompiler *)((char *)this + 144) != v369 && v369)
              {
                if (*((JSC::InlineCacheCompiler **)this + 16) == v369)
                {
                  *((_QWORD *)this + 16) = 0;
                  *((_DWORD *)this + 34) = 0;
                }
                WTF::fastFree((unint64_t)v369, v80, v81, v82, v83, v84, v85, v86);
              }
            }
            v572 = *((unsigned int *)this + 35);
            if (v366 < v572)
            {
              __break(0xC471u);
              JUMPOUT(0x19819F6F0);
            }
            v573 = *((_QWORD *)this + 16) + 12 * v572;
            v574 = v363 + 12 * v362;
            do
            {
              *(_DWORD *)v573 = *(_DWORD *)v363;
              *(_QWORD *)(v573 + 4) = *(_QWORD *)(v363 + 4);
              v363 += 12;
              v573 += 12;
            }
            while (v363 != v574);
            *((_DWORD *)this + 35) = v366;
          }
        }
      }
      else if (HIDWORD(v1139))
      {
        __break(0xC471u);
        JUMPOUT(0x19819E1E4);
      }
      v87 = v1138;
      if (v1140 != (_WORD *)v1138 && v1138 != 0)
      {
        v1138 = 0;
LABEL_61:
        LODWORD(v1139) = 0;
        WTF::fastFree(v87, v80, v81, v82, v83, v84, v85, v86);
      }
      return;
    case 4:
      v515 = *((_DWORD *)a3 + 2);
      if (v515 > 63)
      {
        JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 4), v12 | 0x800000000, (char)v18, a4, a5, a6, a7, a8);
        v516 = (unint64_t)(496 - 8 * *((_DWORD *)a3 + 2)) >> 3;
      }
      else
      {
        v516 = (unint64_t)(8 * v515 + 16) >> 3;
        v18 = v11[116];
      }
      JSC::MacroAssemblerARM64::store64(v16, 63, v18 & 0x7FFFFFFFFLL | ((unint64_t)v516 << 35), a4, a5, a6, a7, a8);
      v522 = *((_DWORD *)a3 + 3);
      if ((v522 & 0xFFFFFFFE) != 0)
      {
        if (!*(_BYTE *)(v16 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819EF88);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v16, (JSC::ARM64LogicalImmediate *)(v522 & 0xFFFFFFFE), v16 + 264, v517, v518, v519, v520, v521);
        v523 = v16;
        v524 = 16;
      }
      else
      {
        v523 = v16;
        v524 = 63;
      }
      JSC::MacroAssemblerARM64::store32(v523, v524, v12, v517, v518, v519, v520, v521);
      goto LABEL_461;
    case 5:
      v217 = (char)v15;
      v218 = (unsigned int *)*((_QWORD *)this + 4);
      v216 = 0;
      goto LABEL_149;
    case 6:
LABEL_461:
      v525 = *(_DWORD *)(v16 + 200);
      if (v525 + 4 > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), (uint64_t)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
        v525 = *(_DWORD *)(v16 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 56) + v525) = (char)v15 | 0x320003E0;
      *(_DWORD *)(v16 + 200) += 4;
      goto LABEL_23;
    case 7:
      if (*((_BYTE *)a3 + 5))
        v202 = *((unsigned __int8 *)this + 176);
      else
        v202 = v11[116];
      v203 = *((_DWORD *)a3 + 2);
      if (v203 <= 63)
      {
        v204 = (8 * v203 + 16);
      }
      else
      {
        JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 4), v202 | 0x800000000, (char)v18, a4, a5, a6, a7, a8);
        v204 = (496 - 8 * *((_DWORD *)a3 + 2));
        LODWORD(v202) = v18;
      }
      JSC::MacroAssemblerARM64::store64(v16, (char)v15, v202 | (unint64_t)(v204 << 32), a4, a5, a6, a7, a8);
      if (!*((_BYTE *)a3 + 5))
        goto LABEL_378;
      *(_QWORD *)&v1141 = v1142;
      *((_QWORD *)&v1141 + 1) = 2;
      JSC::AssemblyHelpers::branchIfNotCell(v16, v15, 1, v191, v192, v193, v194, v195, (uint64_t)&v1126);
      v210 = v1126;
      if (v1126 != -1)
      {
        v211 = HIDWORD(v1141);
        if (HIDWORD(v1141) == DWORD2(v1141))
        {
          v212 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1141, (void *)(HIDWORD(v1141) + 1), (unint64_t)&v1126, v205, v206, v207, v208, v209);
          v214 = *v212;
          v213 = (uint64_t *)(v212 + 1);
          v210 = v214;
          v211 = HIDWORD(v1141);
        }
        else
        {
          v213 = &v1127;
        }
        v617 = v1141 + 12 * v211;
        *(_DWORD *)v617 = v210;
        *(_QWORD *)(v617 + 4) = *v213;
        ++HIDWORD(v1141);
      }
      v618 = v17;
      if (*((int *)a3 + 2) >= 64)
        JSC::MacroAssemblerARM64::load64(v16, v12 | 0x1000000000, (char)v18, v205, v206, v207, v208, v209);
      JSC::MacroAssemblerARM64::load8(v16, v18 | 0x700000000, (char)v18, v205, v206, v207, v208, v209);
      if (!*(_BYTE *)(v16 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19819F038);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
      JSC::MacroAssemblerARM64::load32(v16, (uint64_t)v17 + 760, *(char *)(v16 + 272), v619, v620, v621, v622, v623);
      JSC::MacroAssemblerARM64::branch32(v16, 3, 16, (char)v18, v624, v625, v626, v627, (uint64_t)&v1124);
      v633 = v1124;
      if (v1124 != -1)
      {
        v634 = HIDWORD(v1141);
        if (HIDWORD(v1141) == DWORD2(v1141))
        {
          v635 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1141, (void *)(HIDWORD(v1141) + 1), (unint64_t)&v1124, v628, v629, v630, v631, v632);
          v637 = *v635;
          v636 = v635 + 1;
          v633 = v637;
          v634 = HIDWORD(v1141);
        }
        else
        {
          v636 = &v1125;
        }
        v638 = v1141 + 12 * v634;
        *(_DWORD *)v638 = v633;
        *(_QWORD *)(v638 + 4) = *(_QWORD *)v636;
        ++HIDWORD(v1141);
      }
      JSC::MacroAssemblerARM64::load64(v16, v12 | 0x1000000000, (char)v18, v628, v629, v630, v631, v632);
      v644 = **((_QWORD **)this + 5);
      v645 = *((_QWORD *)this + 2);
      if ((*(_WORD *)(v645 + 129) & 0x200) == 0)
        goto LABEL_566;
      v646 = *(_BYTE *)(v645 + 120);
      if ((v646 & 0x40) != 0)
        goto LABEL_698;
      v644 |= 1 << v646;
LABEL_566:
      v647 = (JSC::ScratchRegisterAllocator *)*((_QWORD *)this + 4);
      v648 = v644 & 0xFFFF00FF0003FFFFLL;
      v1138 = v644 & 0xFFFF00FF0003FFFFLL;
      v1139 = 0;
      v649 = JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall(v647, (JSC::AssemblyHelpers *)&v1138, 0, v639, v640, v641, v642, v643);
      v657 = (const JSC::RegisterSet *)v649;
      v658 = (uint8x8_t)vcnt_s8((int8x8_t)(v644 & 0x3FFFF));
      v658.i16[0] = vaddlv_u8(v658);
      v659 = v658.i32[0];
      v660 = (uint8x8_t)vcnt_s8((int8x8_t)((v644 & 0xFFFF00FF0003FFFFLL) >> 32));
      v660.i16[0] = vaddlv_u8(v660);
      if (!(v660.i32[0] + v659) && (_DWORD)v649)
        WTFCrashWithInfoImpl(1043, "./bytecode/InlineCacheCompiler.cpp", "SpillState JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCallWithoutExceptions()");
      v1138 = (unint64_t)v1140;
      LODWORD(v1139) = 1;
      v661 = (uint64_t)v618;
      if ((_DWORD)v18 == 1)
        goto LABEL_569;
      v1140[0] = v18 | 0x100;
      HIDWORD(v1139) = 1;
      v683 = 1;
      do
      {
        v684 = 0;
        v685 = 0;
        v686 = v1138;
        v687 = v683;
        do
        {
          if ((*(_BYTE *)(v1138 + v684 + 1) & 0x40) != 0)
            goto LABEL_698;
          v685 |= 1 << *(_BYTE *)(v1138 + v684 + 1);
          v684 += 2;
        }
        while (2 * v683 != v684);
        v688 = 0;
        do
        {
          v689 = *(_BYTE *)(v1138 + v688) & 0x7F;
          if (v689 >= 0x40)
            goto LABEL_698;
          v685 &= ~(1 << v689);
          v688 += 2;
        }
        while (2 * v683 != v688);
        v690 = (uint8x8_t)vcnt_s8((int8x8_t)v685);
        v690.i16[0] = vaddlv_u8(v690);
        v691 = v690.i32[0];
        v692 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v685));
        v692.i16[0] = vaddlv_u8(v692);
        if (v692.i32[0] + v691)
        {
          v693 = 0;
          if (v683 <= 1uLL)
            v694 = 1;
          else
            v694 = v683;
          v695 = 2 * v694;
          while (1)
          {
            v696 = *(unsigned __int8 *)(v1138 + v693 + 1);
            if ((v696 & 0x7Fu) >= 0x40)
              goto LABEL_698;
            if (((v685 >> (v696 & 0x7F)) & 1) != 0)
              break;
            v693 += 2;
            if (v695 == v693)
              goto LABEL_608;
          }
          v697 = *(unsigned __int8 *)(v1138 + v693);
          if (v697 == v696)
            goto LABEL_607;
          v698 = (char)v697;
          if ((char)v697 == 63)
          {
            v699 = *(_DWORD *)(v16 + 200);
            v700 = *(_DWORD *)(v16 + 192);
            if (v696 != 31)
            {
              v702 = v696 & 0x1F | 0xD2800000;
              goto LABEL_604;
            }
          }
          else
          {
            v699 = *(_DWORD *)(v16 + 200);
            v700 = *(_DWORD *)(v16 + 192);
            if ((char)v696 != 31 && v698 != 31)
            {
              v702 = v696 & 0xFFE0FFFF | ((v698 & 0x1F) << 16) | 0xAA0003E0;
LABEL_604:
              if (v699 + 4 > v700)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), (uint64_t)v650, v651, v652, v653, v654, v655, v656);
                v699 = *(_DWORD *)(v16 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v16 + 56) + v699) = v702;
              *(_DWORD *)(v16 + 200) += 4;
              v686 = v1138;
              v687 = HIDWORD(v1139);
LABEL_607:
              memmove((void *)(v686 + v693), (const void *)(v686 + v693 + 2), 2 * v687 - v693 - 2);
              v683 = --HIDWORD(v1139);
              continue;
            }
          }
          v702 = (char)v696 | (32 * v698) | 0x91000000;
          goto LABEL_604;
        }
        v1073 = *(_BYTE *)v1138;
        v1074 = *(_BYTE *)(v1138 + 1);
        JSC::MacroAssemblerARM64::swap(v16, *(char *)v1138, v1074, v652, v653, v654, v655, v656);
        memmove((void *)v1138, (const void *)(v1138 + 2), 2 * HIDWORD(v1139) - 2);
        v1075 = HIDWORD(v1139);
        v1076 = --HIDWORD(v1139);
        if (v1075 != 1)
        {
          v1079 = (_BYTE *)v1138;
          v1080 = 2 * v1076;
          while (*v1079 != v1074)
          {
            v1079 += 2;
            v1080 -= 2;
            if (!v1080)
              goto LABEL_838;
          }
          *v1079 = v1073;
        }
LABEL_838:
        WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v1138, (uint64_t)&__dst, 0);
        v683 = HIDWORD(v1139);
LABEL_608:
        ;
      }
      while (v683);
      v661 = (uint64_t)v618;
      v703 = v1138;
      if (v1140 != (_WORD *)v1138 && v1138)
      {
        v1138 = 0;
        LODWORD(v1139) = 0;
        WTF::fastFree(v703, v650, v651, v652, v653, v654, v655, v656);
      }
LABEL_569:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v661, 0, v652, v653, v654, v655, v656);
      if (!*(_BYTE *)(v16 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19819F07CLL);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
      v667 = *(_BYTE *)(v16 + 272);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)operationWriteBarrierSlowPath, v667, v662, v663, v664, v665, v666);
      *(_DWORD *)(v16 + 208) = 0;
      v675 = *(_DWORD *)(v16 + 200);
      if (v675 + 4 > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), v668, v669, v670, v671, v672, v673, v674);
        v675 = *(_DWORD *)(v16 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 56) + v675) = (32 * (v667 & 0x1F)) | 0xD63F0000;
      *(_DWORD *)(v16 + 200) += 4;
      __dst = 0uLL;
      v676 = (JSC::ScratchRegisterAllocator *)*((_QWORD *)this + 4);
      for (i = 0; v648; v648 &= v648 - 1)
        i |= v648 & -(uint64_t)v648;
      v1138 = i;
      v1139 = 0;
      JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v676, (JSC::AssemblyHelpers *)&v1138, (const JSC::RegisterSet *)&__dst, v657, 0, v672, v673, v674);
      if (HIDWORD(v1141))
      {
        v678 = 0;
        v679 = 0;
        v680 = 12 * HIDWORD(v1141);
        do
        {
          if (v679 >= HIDWORD(v1141))
          {
            __break(0xC471u);
            JUMPOUT(0x19819F68CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v1141 + v678), v16, v190, v191, v192, v193, v194, v195);
          ++v679;
          v678 += 12;
        }
        while (v680 != v678);
      }
      v681 = v1141;
      if (v1142 != (_WORD *)v1141 && (_QWORD)v1141 != 0)
      {
        *(_QWORD *)&v1141 = 0;
        DWORD2(v1141) = 0;
        WTF::fastFree(v681, v189, v190, v191, v192, v193, v194, v195);
      }
LABEL_378:
      JSC::InlineCacheCompiler::succeed(this, (uint64_t)v189, v190, v191, v192, v193, v194, v195);
      return;
    case 8:
    case 0x3C:
      v32 = (char)v15;
      v33 = (_DWORD *)*((_QWORD *)this + 4);
      v34 = 10;
      goto LABEL_26;
    case 0xA:
    case 0xB:
    case 0x10:
      v1113 = v11[117];
      v1110 = *((unsigned __int8 *)this + 24);
      v164 = *((_DWORD *)a3 + 3);
      if (v164)
        v165 = (JSC::Structure *)(16 * (v164 & 0xFFFFFFFE));
      else
        v165 = 0;
      v166 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase(a3);
      if (v166)
        v165 = (JSC::Structure *)(16 * (*v166 & 0xFFFFFFFE));
      v172 = (JSC::Structure *)*((unsigned int *)a3 + 2);
      if ((_DWORD)v172 != -1)
        JSC::Structure::ensurePropertyReplacementWatchpointSet(v165, v17, v172, v167, v168, v169, v170, v171);
      v173 = v18;
      if (*((_QWORD *)a3 + 3))
        goto LABEL_123;
      v174 = JSC::AccessCase::tryGetAlternateBase(a3);
      if (v174)
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v174, (char)v18, v167, v168, v169, v170, v171);
LABEL_122:
        v173 = v18;
        goto LABEL_123;
      }
      v173 = v12;
      if (*((_BYTE *)a3 + 5))
      {
        JSC::MacroAssemblerARM64::load64(v16, v12 | 0x1000000000, (char)v18, v167, v168, v169, v170, v171);
        goto LABEL_122;
      }
LABEL_123:
      v175 = *((_DWORD *)a3 + 2);
      if (v175 >= 64)
      {
        JSC::MacroAssemblerARM64::load64(v16, v173 | 0x800000000, (char)v18, v167, v168, v169, v170, v171);
        v175 = *((_DWORD *)a3 + 2);
        v173 = v18;
      }
      if (v175 <= 63)
        v176 = (8 * v175 + 16);
      else
        v176 = (496 - 8 * v175);
      v177 = (char)v18;
      JSC::MacroAssemblerARM64::load64(v16, v173 | ((unint64_t)(v176 >> 3) << 35), v177, v167, v168, v169, v170, v171);
      v184 = *((unsigned __int8 *)a3 + 4);
      if (v184 == 16)
      {
        JSC::MacroAssemblerARM64::load64(v16, v18 | 0x800000000, (char)v18, v179, v180, v181, v182, v183);
        JSC::MacroAssemblerARM64::branch64(v16, 1, (char)v18, *((_QWORD *)a3 + 5), v185, v186, v187, v188, (uint64_t)&v1130);
        v196 = v1130;
        if (v1130 != -1)
        {
          v197 = *((unsigned int *)this + 35);
          if ((_DWORD)v197 == *((_DWORD *)this + 34))
          {
            v198 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 128, (void *)(v197 + 1), (unint64_t)&v1130, v191, v192, v193, v194, v195);
            v200 = *v198;
            v199 = v198 + 1;
            v196 = v200;
            v201 = *((_QWORD *)this + 16) + 12 * *((unsigned int *)this + 35);
          }
          else
          {
            v199 = &v1131;
            v201 = *((_QWORD *)this + 16) + 12 * v197;
          }
          *(_DWORD *)v201 = v196;
          *(_QWORD *)(v201 + 4) = *(_QWORD *)v199;
          ++*((_DWORD *)this + 35);
        }
        v403 = *((_QWORD *)this + 2);
        v404 = *(_QWORD *)(*((_QWORD *)a3 + 5) + 24);
        if ((v404 & 1) != 0)
          v404 = *(_QWORD *)((v404 & 0xFFFFFFFFFFFFFFFELL) + 48);
        v405 = *(char *)(v403 + 117);
        v406 = *(unsigned __int8 *)(v403 + 116);
        v407 = *((_QWORD *)this + 4);
        if (*(_BYTE *)(v404 + 5) == 8)
        {
          v501 = *(_QWORD *)(v404 + 8);
          v502 = (unsigned int *)(v501 + 8);
          do
            v503 = __ldaxr(v502);
          while (__stlxr(v503 + 1, v502));
          v408 = *(unsigned __int8 *)(v501 + 14);
          do
          {
            v504 = __ldaxr(v502);
            v505 = v504 - 1;
          }
          while (__stlxr(v505, v502));
          if (!v505)
          {
            atomic_store(1u, (unsigned int *)(v501 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v501 + 32))(v501);
          }
        }
        else
        {
          v408 = *(unsigned __int8 *)(v404 + 64);
        }
        switch(v408)
        {
          case 151:
            v409 = *((unsigned __int8 *)a3 + 4);
            if (v409 <= 0x20 && ((1 << v409) & 0x100000014) != 0)
            {
              v411 = *(_QWORD *)(16 * (*((_DWORD *)a3 + 3) & 0xFFFFFFFE) + 0x40);
              if (*(_BYTE *)(v411 + 5) == 1)
                goto LABEL_329;
              v410 = *(_DWORD *)(v411 + 80);
            }
            else
            {
              v410 = *((_DWORD *)a3 + 3);
            }
            if (v410)
              v411 = 16 * (v410 & 0xFFFFFFFE);
            else
              v411 = 0;
LABEL_329:
            if (!*(_BYTE *)(16 * *(unsigned int *)(v411 + 76) + 0xF4))
            {
              JSC::MacroAssemblerARM64::load64(v407, v406 | 0x1800000000, (char)v405, v191, v192, v193, v194, v195);
              v415 = *((char *)this + 176);
              v416 = *((char *)this + 177);
              v417 = (char)v405;
              v418 = v407;
              v419 = v417;
              goto LABEL_331;
            }
            JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v1141, *((_QWORD *)this + 2), *((_BYTE *)this + 176));
            v950 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v1141);
            v1138 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&v1141, (JSC::ScratchRegisterAllocator *)v407, 1, v951, v952, v953, v954, v955);
            v956 = *((char *)this + 176);
            v957 = JSC::AccessCase::structure(a3);
            v959 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v957 + 9), v958);
            v960 = (char)v405;
            JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl(v407, v406, v960, v956, v950, v959 | 0x100, 0, v961);
            goto LABEL_745;
          case 152:
            v801 = JSC::AccessCase::structure(a3);
            v803 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v801 + 9), v802);
            if (!*(_BYTE *)(16 * *(unsigned int *)(JSC::AccessCase::structure(a3) + 76) + 0xF4))
            {
              JSC::MacroAssemblerARM64::load64(v407, v406 | 0x1800000000, (char)v405, v804, v805, v806, v807, v808);
              if ((v803 - 4) <= 7u)
                JSC::MacroAssemblerARM64::lshift64((_DWORD *)v407, (char)v405, qword_1991531F8[(char)(v803 - 4)], (char)v405, v809, v412, v413, v414);
              v415 = *((char *)this + 176);
              v416 = *((char *)this + 177);
              v419 = (char)v405;
              v418 = v407;
              v417 = v405;
              goto LABEL_331;
            }
            JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v1141, *((_QWORD *)this + 2), *((_BYTE *)this + 176));
            v1001 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v1141);
            v1138 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&v1141, (JSC::ScratchRegisterAllocator *)v407, 1, v1002, v1003, v1004, v1005, v1006);
            v1007 = *((char *)this + 176);
            v1008 = JSC::AccessCase::structure(a3);
            v1010 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v1008 + 9), v1009);
            v960 = (char)v405;
            JSC::AssemblyHelpers::loadTypedArrayByteLength(v407, v406, v960, v1007, v1001, v1010, v1011, v1012);
LABEL_745:
            JSC::AssemblyHelpers::boxInt52(v407, v405, v960, *((char *)this + 176), *((char *)this + 177), v962, v963, v964);
            JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v1141, (const char *)v407, (const char *)&v1138, v965, v966, v967, v968, v969);
            goto LABEL_378;
          case 153:
            if (!*(_BYTE *)(16 * *(unsigned int *)(JSC::AccessCase::structure(a3) + 76) + 0xF4))
            {
              JSC::MacroAssemblerARM64::load64(v407, v406 | 0x2000000000, v405, v871, v872, v873, v874, v875);
              v415 = *((char *)this + 176);
              v416 = *((char *)this + 177);
              v419 = (char)v405;
              v417 = v419;
              v418 = v407;
LABEL_331:
              JSC::AssemblyHelpers::boxInt52(v418, v419, v417, v415, v416, v412, v413, v414);
              goto LABEL_378;
            }
            JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v1141, *((_QWORD *)this + 2), *((_BYTE *)this + 176));
            v876 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v1141);
            v1128 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&v1141, (JSC::ScratchRegisterAllocator *)v407, 1, v877, v878, v879, v880, v881);
            v882 = *((char *)this + 176);
            v883 = JSC::AccessCase::structure(a3);
            v885 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v883 + 9), v884);
            JSC::AssemblyHelpers::branchIfResizableOrGrowableSharedTypedArrayIsOutOfBounds(v407, v406, v882, v876, v885 | 0x100, v886, v887, v888, (uint64_t)&v1138);
            JSC::MacroAssemblerARM64::load64(v407, v406 | 0x2000000000, v405, v889, v890, v891, v892, v893);
            JSC::ARM64Assembler::label((_DWORD *)(v407 + 32), v894, v895, v896, v897, v898, v899, v900, (int *)v1122);
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v407 + 56), 335544320, v901, v902, v903, v904, v905, v906);
            if (*(_BYTE *)(v407 + 328))
              v913 = 69;
            else
              v913 = 65;
            *(_QWORD *)&__dst = LODWORD(v1122[0]);
            BYTE8(__dst) = v913;
            *(_WORD *)((char *)&__dst + 9) = 15;
            BYTE11(__dst) = -1;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v1138, v407, v907, v908, v909, v910, v911, v912);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v407, 0, (char)v405, v914, v915, v916, v917, v918);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, v407, v919, v920, v921, v922, v923, v924);
            JSC::AssemblyHelpers::boxInt52(v407, (char)v405, (char)v405, *((char *)this + 176), *((char *)this + 177), v925, v926, v927);
            JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)&v1141, (const char *)v407, (const char *)&v1128, v928, v929, v930, v931, v932);
            JSC::InlineCacheCompiler::succeed(this, v933, v934, v935, v936, v937, v938, v939);
            v87 = v1138;
            if (v1140 != (_WORD *)v1138 && v1138)
            {
              v1138 = 0;
              goto LABEL_61;
            }
            return;
          case 154:
            v506 = *((unsigned __int8 *)a3 + 4);
            if (v506 <= 0x20 && ((1 << v506) & 0x100000014) != 0)
            {
              v507 = *((_DWORD *)a3 + 3);
              v508 = *(_QWORD *)(16 * (v507 & 0xFFFFFFFE) + 0x40);
              if (*(_BYTE *)(v508 + 5) != 1)
              {
                v615 = *(_DWORD *)(v508 + 80);
                if (v615)
                  v508 = 16 * (v615 & 0xFFFFFFFE);
                else
                  v508 = 0;
              }
            }
            else
            {
              v507 = *((_DWORD *)a3 + 3);
              v508 = 16 * (v507 & 0xFFFFFFFE);
              if (!v507)
                v508 = 0;
            }
            if (*(_QWORD *)(v508 + 48))
            {
              if (v506 <= 0x20 && ((1 << v506) & 0x100000014) != 0)
              {
                v509 = *(_QWORD *)(16 * (v507 & 0xFFFFFFFE) + 0x40);
                if (*(_BYTE *)(v509 + 5) != 1)
                {
                  v616 = *(_DWORD *)(v509 + 80);
                  if (v616)
                    v509 = 16 * (v616 & 0xFFFFFFFE);
                  else
                    v509 = 0;
                }
              }
              else
              {
                v509 = 16 * (v507 & 0xFFFFFFFE);
                if (!v507)
                  v509 = 0;
              }
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v407, *(_QWORD *)(v509 + 48), (char)v405, v191, v192, v193, v194, v195);
            }
            else
            {
              JSC::MacroAssemblerARM64::load64(v407, v406 | 0x1000000000, (char)v405, v191, v192, v193, v194, v195);
            }
            goto LABEL_378;
          case 155:
            v510 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 116);
            if (v510 == v405)
              goto LABEL_378;
            if ((char)v510 == 63)
            {
              if ((_DWORD)v405 != 31)
              {
                v511 = v405 & 0x1F | 0xD2800000;
                goto LABEL_447;
              }
            }
            else if (v405 != 31 && (char)v510 != 31)
            {
              v511 = v405 | ((v510 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_447;
            }
            v511 = v405 | (32 * (char)v510) | 0x91000000;
LABEL_447:
            v514 = *(_DWORD *)(v407 + 200);
            v513 = (unsigned int *)(v407 + 200);
            v512 = v514;
            if (v514 + 4 > *(v513 - 2))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v513 - 36), (uint64_t)v189, v190, v191, v192, v193, v194, v195);
              v512 = *v513;
            }
            *(_DWORD *)(*((_QWORD *)v513 - 18) + v512) = v511;
            *v513 += 4;
            break;
          case 156:
            JSC::MacroAssemblerARM64::load64(v407, v406 | 0x3000000000, (char)v405, v191, v192, v193, v194, v195);
            JSC::MacroAssemblerARM64::load64(v407, v405 | 0x9000000000, (char)v405, v940, v941, v942, v943, v944);
            JSC::AssemblyHelpers::boxCell((_DWORD *)v407, v405, v405, v945, v946, v947, v948, v949);
            goto LABEL_378;
          default:
            __break(0xC471u);
            JUMPOUT(0x19819EA0CLL);
        }
        goto LABEL_378;
      }
      v1141 = 0uLL;
      v219 = JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall((JSC::ScratchRegisterAllocator **)this, (const JSC::RegisterSet *)&v1141, v178, v179, v180, v181, v182, v183);
      v227 = v220;
      v1138 = v219;
      v1139 = v220;
      if ((*(_WORD *)(*((_QWORD *)this + 2) + 129) & 0x200) != 0)
      {
        JSC::InlineCacheCompiler::callSiteIndexForExceptionHandlingOrOriginal(this);
        JSC::MacroAssemblerARM64::transfer32(v16, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 120) | 0x7000000000, 0x240000001DLL, v704, v705, v706, v707, v708);
      }
      else
      {
        v228 = *((_BYTE *)this + 224);
        if ((v228 & 1) == 0)
        {
          JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling(this);
          v228 = *((_BYTE *)this + 224);
        }
        if ((v228 & 4) != 0)
        {
          v229 = *((_DWORD *)this + 50);
        }
        else
        {
          *((_BYTE *)this + 224) = v228 | 4;
          if ((v228 & 2) != 0)
            v229 = JSC::CodeBlock::newExceptionHandlingCallSiteIndex(*(_QWORD *)(*((_QWORD *)this + 4) + 336), *(_DWORD *)(*((_QWORD *)this + 2) + 112));
          else
            v229 = *(_DWORD *)(*((_QWORD *)this + 2) + 112);
          *((_DWORD *)this + 50) = v229;
        }
        if (v229)
        {
          if (!*(_BYTE *)(v16 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x19819E778);
          }
          JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v16, (JSC::ARM64LogicalImmediate *)v229, v16 + 264, v222, v223, v224, v225, v226);
          v237 = *(_DWORD *)(v16 + 200);
          if (v237 + 4 > *(_DWORD *)(v16 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), v230, v231, v232, v233, v234, v235, v236);
            v237 = *(_DWORD *)(v16 + 200);
          }
          v238 = *(_QWORD *)(v16 + 56);
          v239 = -1207811152;
        }
        else
        {
          v237 = *(_DWORD *)(v16 + 200);
          if (v237 + 4 > *(_DWORD *)(v16 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), v220, v221, v222, v223, v224, v225, v226);
            v237 = *(_DWORD *)(v16 + 200);
          }
          v238 = *(_QWORD *)(v16 + 56);
          v239 = -1207811137;
        }
        *(_DWORD *)(v238 + v237) = v239;
        *(_DWORD *)(v16 + 200) += 4;
      }
      JSC::InlineCacheCompiler::setSpillStateForJSCall((uint64_t)this, &v1138);
      LOBYTE(__dst) = 0;
      BYTE12(__dst) = 0;
      if (v184 == 10)
        v245 = 1;
      else
        v245 = 2;
      if (v184 == 10)
      {
        JSC::MacroAssemblerARM64::load64(v16, v18 | 0x800000000, (char)v18, v240, v241, v242, v243, v244);
        if (!*(_BYTE *)(v16 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819E3ACLL);
        }
        *(_DWORD *)(*(_QWORD *)(v16 + 296) + 208) &= ~*(_DWORD *)(v16 + 320);
        JSC::MacroAssemblerARM64::load8(v16, v18 | 0x500000000, *(char *)(v16 + 304), v246, v247, v248, v249, v250);
        JSC::MacroAssemblerARM64::branch32(v16, 0, 17, 28, v251, v252, v253, v254, (uint64_t)&v1141);
        LODWORD(__dst) = v1141;
        BYTE12(__dst) = 1;
        *(_QWORD *)((char *)&__dst + 4) = *(_QWORD *)((char *)&v1141 + 4);
      }
      else
      {
        JSC::MacroAssemblerARM64::load64(v16, v18 | 0x1000000000, (char)v18, v240, v241, v242, v243, v244);
        if (!v1110)
        {
          if (!*(_BYTE *)(v16 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x19819F1F8);
          }
          *(_DWORD *)(*(_QWORD *)(v16 + 296) + 208) &= ~*(_DWORD *)(v16 + 320);
          JSC::MacroAssemblerARM64::load8(v16, v18 | 0x500000000, *(char *)(v16 + 304), v580, v581, v582, v583, v584);
          JSC::MacroAssemblerARM64::branch32(v16, 1, 17, 28, v585, v586, v587, v588, (uint64_t)&v1141);
          v594 = *((_QWORD *)this + 2);
          if ((*(_WORD *)(v594 + 129) & 0x200) != 0 && BYTE6(qword_1ECF4C780))
          {
            JSC::MacroAssemblerARM64::load64(v16, *(unsigned __int8 *)(v594 + 120) | 0x3800000000, (char)v18, v589, v590, v591, v592, v593);
            JSC::MacroAssemblerARM64::load64(v16, v18 | 0x1E800000000, (char)v18, v996, v997, v998, v999, v1000);
          }
          else
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, *(_QWORD *)(*((_QWORD *)this + 1) + 488), (char)v18, v589, v590, v591, v592, v593);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1141, v16, v595, v596, v597, v598, v599, v600);
        }
      }
      JSC::MacroAssemblerARM64::sub64(v16, 31, (16 * ((v245 >> 1) & 1)) | 0x20, 31, v581, v582, v583, v584);
      if (!*(_BYTE *)(v16 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19819E304);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v16, (JSC::ARM64LogicalImmediate *)v245, v16 + 264, v255, v256, v257, v258, v259);
      v1111 = (JSC::AssemblerBuffer *)(v16 + 56);
      v267 = *(_DWORD *)(v16 + 200);
      if (v267 + 4 > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1111, v260, v261, v262, v263, v264, v265, v266);
        v267 = *(_DWORD *)(v16 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 56) + v267) = -1207893008;
      v268 = *(_DWORD *)(v16 + 200);
      v269 = v268 + 4;
      *(_DWORD *)(v16 + 200) = v268 + 4;
      if ((v268 + 8) > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1111, v260, v261, v262, v263, v264, v265, v266);
        v269 = *(_DWORD *)(v16 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 56) + v269) = v18 & 0x1F | 0xF80083E0;
      v270 = *(_DWORD *)(v16 + 200);
      v271 = v270 + 4;
      *(_DWORD *)(v16 + 200) = v270 + 4;
      if ((v270 + 8) > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1111, v260, v261, v262, v263, v264, v265, v266);
        v271 = *(_DWORD *)(v16 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 56) + v271) = v13 | 0xF80183E0;
      v272 = *(_DWORD *)(v16 + 200);
      v273 = v272 + 4;
      *(_DWORD *)(v16 + 200) = v272 + 4;
      if (v184 != 10)
      {
        if ((v272 + 8) > *(_DWORD *)(v16 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v1111, v260, v261, v262, v263, v264, v265, v266);
          v273 = *(_DWORD *)(v16 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v16 + 56) + v273) = v1113 | 0xF80203E0;
        v273 = *(_DWORD *)(v16 + 200) + 4;
        *(_DWORD *)(v16 + 200) = v273;
      }
      v274 = *((_QWORD *)this + 2);
      if ((*(_WORD *)(v274 + 129) & 0x200) != 0 && BYTE6(qword_1ECF4C780))
      {
        JSC::MacroAssemblerARM64::move((_DWORD *)v16, (char)v18, 0, v262, v263, v264, v265, v266);
        JSC::MacroAssemblerARM64::add64(v16, 80 * a2 + 96, 9, 2, v721, v722, v723, v724);
        v1141 = 0uLL;
        v304 = 0;
      }
      else
      {
        if ((_DWORD)v18)
        {
          if ((_DWORD)v18 == 31)
          {
            v276 = v273 + 4;
            v277 = *(_DWORD *)(v16 + 192);
            v275 = -1862269984;
          }
          else
          {
            if ((_DWORD)v18 == 63)
              v275 = -763363328;
            else
              v275 = ((v18 & 0x1F) << 16) | 0xAA0003E0;
            v276 = v273 + 4;
            v277 = *(_DWORD *)(v16 + 192);
          }
          if (v276 > v277)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v1111, v260, v261, v262, v263, v264, v265, v266);
            v273 = *(_DWORD *)(v16 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v16 + 56) + v273) = v275;
          *(_DWORD *)(v16 + 200) += 4;
          v274 = *((_QWORD *)this + 2);
        }
        v283 = WTF::fastCompactMalloc((WTF *)0x60);
        v284 = *(_QWORD *)v274;
        if ((*(_QWORD *)v274 & 1) != 0)
        {
          v810 = *(_QWORD *)(v284 & 0xFFFFFFFF8);
          if ((v284 & 2) != 0
            || (v811 = *(unsigned int *)((v284 & 0xFFFFFFFF8) + 8), (_DWORD)v811 == 0x3FFFFFFF)
            || (_DWORD)v811 == -1)
          {
            v812 = 2;
          }
          else if (v811 >> 28)
          {
            v1084 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1084 = v810;
            *(_DWORD *)(v1084 + 8) = v811;
            v812 = 1;
            v810 = v1084;
          }
          else
          {
            v812 = *(_QWORD *)(v284 & 0xFFFFFFFF8);
            v810 = v811 << 36;
          }
          v284 = v810 | v812;
        }
        *(_QWORD *)&v1141 = v284;
        JSC::OptimizingCallLinkInfo::OptimizingCallLinkInfo(v283, (uint64_t *)&v1141, 0, v278, v279, v280, v281, v282);
        if ((v1141 & 1) != 0 && (v1141 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v1141 & 0xFFFFFFFF8, v285, v286, v287, v288, v289, v290, v291);
        v293 = *((_DWORD *)this + 457);
        if (v293 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19819F6C4);
        }
        v294 = *((_QWORD *)this + 227);
        v295 = *(JSC::CallLinkInfo **)(v294 + 8 * a2);
        *(_QWORD *)(v294 + 8 * a2) = v283;
        if (v295)
        {
          JSC::CallLinkInfo::~CallLinkInfo(v295, v285, v286, v287, v288, v289, v290, v291, v292);
          WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
          v293 = *((_DWORD *)this + 457);
        }
        if (v293 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19819F6CCLL);
        }
        v304 = *(_QWORD *)(*((_QWORD *)this + 227) + 8 * a2);
        *(_WORD *)(v304 + 17) = *(_WORD *)(v304 + 17) & 0xFF0F | 0x10;
        v1141 = 0uLL;
      }
      JSC::CallLinkInfo::emitFastPathImpl((JSC::ARM64LogicalImmediate *)v304, v16, 0, (uint64_t)&v1141, v288, v289, v290, v291);
      if (v184 == 10)
      {
        if (v1113)
        {
          if (v1113 == 31)
          {
            v313 = *(_DWORD *)(v16 + 200);
            v314 = v313 + 4;
            v315 = *(_DWORD *)(v16 + 192);
            v312 = -1862270945;
          }
          else
          {
            v312 = v1113 | 0xAA0003E0;
            v313 = *(_DWORD *)(v16 + 200);
            v314 = v313 + 4;
            v315 = *(_DWORD *)(v16 + 192);
          }
          if (v314 > v315)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v1111, (uint64_t)v305, v306, v307, v308, v309, v310, v311);
            v313 = *(_DWORD *)(v16 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v16 + 56) + v313) = v312;
          v316 = *(_DWORD *)(v16 + 200) + 4;
          *(_DWORD *)(v16 + 200) = v316;
        }
        else
        {
          v316 = *(_DWORD *)(v16 + 200);
        }
        for (; (signed int)v316 < *(_DWORD *)(v16 + 52); *(_DWORD *)(v16 + 200) = v316)
        {
          if (v316 + 4 > *(_DWORD *)(v16 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v1111, (uint64_t)v305, v306, v307, v308, v309, v310, v311);
            v316 = *(_DWORD *)(v16 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v16 + 56) + v316) = -721215457;
          v316 = *(_DWORD *)(v16 + 200) + 4;
        }
        v317 = v316;
        if (v316 + 4 > *(_DWORD *)(v16 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v1111, (uint64_t)v305, v306, v307, v308, v309, v310, v311);
          v317 = *(_DWORD *)(v16 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v16 + 56) + v317) = 335544320;
        *(_DWORD *)(v16 + 200) += 4;
        if (*(_BYTE *)(v16 + 328))
          v318 = 69;
        else
          v318 = 65;
        *(_QWORD *)&v1141 = v316;
        BYTE8(v1141) = v318;
        *(_WORD *)((char *)&v1141 + 9) = 15;
        BYTE11(v1141) = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, v16, v306, v307, v308, v309, v310, v311);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, 10, (char)v1113, v319, v320, v321, v322, v323);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1141, v16, v324, v325, v326, v327, v328, v329);
      }
      if ((*(_WORD *)(*((_QWORD *)this + 2) + 129) & 0x200) != 0)
      {
        JSC::MacroAssemblerARM64::load64(v16, 0x100000001ALL, v177, v307, v308, v309, v310, v311);
        if (BYTE6(qword_1ECF4C780))
          v713 = (*(_WORD *)(*((_QWORD *)this + 2) + 129) & 0x200) == 0;
        else
          v713 = 1;
        if (v713)
          v714 = 0;
        else
          v714 = -16;
        JSC::MacroAssemblerARM64::add64(v16, (v714 - (*((_DWORD *)this + 42) + v227)), v177, v177, v709, v710, v711, v712);
        JSC::MacroAssembler::addPtr((_DWORD *)v16, v177, v715, v716, v717, v718, v719, v720);
        goto LABEL_301;
      }
      v330 = *(JSC::LLInt **)(v16 + 336);
      v331 = *((_QWORD *)v330 + 15);
      if (!v331)
        goto LABEL_841;
      v332 = *(unsigned __int8 *)(v331 + 12);
      if (v332 == 3)
      {
        v333 = (((*(_DWORD *)(*((_QWORD *)v330 + 7) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
      }
      else if ((v332 - 4) >= 2)
      {
        if (v332 != 2)
        {
LABEL_841:
          __break(0xC471u);
          JUMPOUT(0x19819F3E8);
        }
        v333 = JSC::LLInt::frameRegisterCountFor(v330, v305);
      }
      else
      {
        v372 = (unsigned int *)(v331 + 8);
        do
          v373 = __ldaxr(v372);
        while (__stlxr(v373 + 1, v372));
        v333 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v331 + 72))(v331) + 200);
        do
        {
          v374 = __ldaxr(v372);
          v375 = v374 - 1;
        }
        while (__stlxr(v375, v372));
        if (!v375)
        {
          atomic_store(1u, (unsigned int *)(v331 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v331 + 32))(v331);
        }
      }
      v227 = v1139;
      JSC::MacroAssemblerARM64::add64(v16, -(*((_DWORD *)this + 42) + (_DWORD)v1139 + 8 * v333), 29, 31, v308, v309, v310, v311);
LABEL_301:
      v1128 = 0;
      v1129 = 0;
      if (v184 == 10)
      {
        if ((v1113 & 0x40) != 0)
          goto LABEL_698;
        v1128 = 1 << v1113;
      }
      v379 = (JSC::ScratchRegisterAllocator *)*((_QWORD *)this + 4);
      v380 = v1138;
      if (v1138)
      {
        v381 = 0;
        do
        {
          v381 |= v380 & -(uint64_t)v380;
          v380 &= v380 - 1;
        }
        while (v380);
      }
      else
      {
        v381 = 0;
      }
      v1141 = v381;
      p_dst = (const JSC::RegisterSet *)&v1128;
      v383 = v227;
      goto LABEL_377;
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
      v89 = *((_DWORD *)a3 + 3);
      if (v89)
        v90 = (JSC::Structure *)(16 * (v89 & 0xFFFFFFFE));
      else
        v90 = 0;
      v91 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase(a3);
      if (v91)
        v90 = (JSC::Structure *)(16 * (*v91 & 0xFFFFFFFE));
      v98 = *((unsigned int *)a3 + 2);
      if ((_DWORD)v98 != -1)
        JSC::Structure::ensurePropertyReplacementWatchpointSet(v90, v17, (JSC::Structure *)v98, v93, v94, v95, v96, v97);
      v99 = *((unsigned __int8 *)a3 + 4);
      if ((v99 | 2) != 0xE)
        goto LABEL_70;
      if (*((_QWORD *)a3 + 3))
        goto LABEL_487;
      v562 = JSC::AccessCase::tryGetAlternateBase(a3);
      if (v562)
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v562, (char)v18, v93, v94, v95, v96, v97);
      }
      else
      {
        v13 = v12;
        if (!*((_BYTE *)a3 + 5))
          goto LABEL_488;
        JSC::MacroAssemblerARM64::load64(v16, v12 | 0x1000000000, (char)v18, v93, v94, v95, v96, v97);
      }
LABEL_487:
      v13 = v18;
LABEL_488:
      v99 = *((unsigned __int8 *)a3 + 4);
LABEL_70:
      if (v99 != 13 || !*((_BYTE *)a3 + 80))
        goto LABEL_85;
      v100 = *((_DWORD *)a3 + 3);
      if (v100)
        v101 = 16 * (v100 & 0xFFFFFFFE);
      else
        v101 = 0;
      v102 = *(unsigned int *)(v101 + 76);
      v103 = *(_DWORD *)(v101 + 76) != 0;
      if ((_DWORD)v102)
      {
        v104 = 16 * v102;
        v105 = *((_QWORD *)a3 + 8);
        if (v105 != v104)
        {
          do
          {
            v104 = *(_QWORD *)(v104 + 16);
            v103 = v104 != 0;
          }
          while (v104 != v105 && v104 != 0);
        }
      }
      if (!v103)
      {
        v857 = (_DWORD *)((char *)this + 128);
        JSC::ARM64Assembler::label((_DWORD *)(v16 + 32), v92, v98, v93, v94, v95, v96, v97, (int *)&v1141);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v16 + 56), 335544320, v858, v859, v860, v861, v862, v863);
        if (*(_BYTE *)(v16 + 328))
          v870 = 69;
        else
          v870 = 65;
        v1132[0] = v1141;
        v1132[1] = 0;
        v1133 = v870;
        v1134 = 15;
        v1135 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v857, v1132, v864, v865, v866, v867, v868, v869);
        return;
      }
      if (byte_1ECF4C245)
      {
        v98 = *((_QWORD *)a3 + 9);
        if (v98)
        {
          JSC::InlineCacheCompiler::emitDOMJITGetter(this, *(_QWORD *)(v101 + 40), v98, (char)v12, v94, v95, v96, v97);
          return;
        }
      }
LABEL_85:
      v1141 = 0uLL;
      v1138 = JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall((JSC::ScratchRegisterAllocator **)this, (const JSC::RegisterSet *)&v1141, v98, v93, v94, v95, v96, v97);
      v1139 = v107;
      v114 = *((_BYTE *)this + 224);
      v1112 = v15;
      if ((*(_WORD *)(*((_QWORD *)this + 2) + 129) & 0x200) != 0)
      {
        if ((*((_BYTE *)this + 224) & 1) == 0)
        {
          JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling(this);
          v114 = *((_BYTE *)this + 224);
        }
        if ((v114 & 4) == 0)
        {
          *((_BYTE *)this + 224) = v114 | 4;
          if ((v114 & 2) != 0)
            v559 = JSC::CodeBlock::newExceptionHandlingCallSiteIndex(*(_QWORD *)(*((_QWORD *)this + 4) + 336), *(_DWORD *)(*((_QWORD *)this + 2) + 112));
          else
            v559 = *(_DWORD *)(*((_QWORD *)this + 2) + 112);
          *((_DWORD *)this + 50) = v559;
        }
        if (!*(_BYTE *)(v16 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819EBE0);
        }
        v116 = v17;
        v479 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 120) | 0x7000000000;
        *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
        JSC::MacroAssemblerARM64::load32(v16, v479, *(char *)(v16 + 272), v109, v110, v111, v112, v113);
        if (!*(_BYTE *)(v16 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819EC00);
        }
        v119 = (unsigned int *)(v16 + 200);
        v118 = *(_DWORD *)(v16 + 200);
        *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
        v117 = (*(_BYTE *)(v16 + 272) & 0x1F) - 1207811168;
      }
      else
      {
        if ((*((_BYTE *)this + 224) & 1) == 0)
        {
          JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling(this);
          v114 = *((_BYTE *)this + 224);
        }
        if ((v114 & 4) != 0)
        {
          v115 = *((_DWORD *)this + 50);
        }
        else
        {
          *((_BYTE *)this + 224) = v114 | 4;
          if ((v114 & 2) != 0)
            v115 = JSC::CodeBlock::newExceptionHandlingCallSiteIndex(*(_QWORD *)(*((_QWORD *)this + 4) + 336), *(_DWORD *)(*((_QWORD *)this + 2) + 112));
          else
            v115 = *(_DWORD *)(*((_QWORD *)this + 2) + 112);
          *((_DWORD *)this + 50) = v115;
        }
        if (!v115)
        {
          v116 = v17;
          v119 = (unsigned int *)(v16 + 200);
          v118 = *(_DWORD *)(v16 + 200);
          v120 = v118 + 4;
          v121 = *(_DWORD *)(v16 + 192);
          v117 = -1207811137;
LABEL_94:
          if (v120 > v121)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v119 - 36), v107, v108, v109, v110, v111, v112, v113);
            v118 = *v119;
          }
          *(_DWORD *)(*(_QWORD *)(v16 + 56) + v118) = v117;
          *(_DWORD *)(v16 + 200) += 4;
          v122 = *((_QWORD *)v90 + 5);
          v123 = v116;
          JSC::MacroAssemblerARM64::store64(v16, 29, (uint64_t)v116 + 40, v109, v110, v111, v112, v113);
          v131 = *((_QWORD *)a3 + 7);
          if ((*((_BYTE *)a3 + 4) & 0xFE) == 0xC)
          {
            v132 = *((_QWORD *)a3 + 4);
            if (!v132)
            {
              __break(0xC471u);
              goto LABEL_698;
            }
            if (BYTE1(qword_1ECF4C780))
            {
              v133 = 12;
              if ((v132 & 1) != 0)
                v1026 = v132 & 0xFFFFFFFFFFFFFFFELL;
              else
                v1026 = *(_QWORD *)(v132 + 8);
              *(_QWORD *)&v1141 = v1142;
              DWORD2(v1141) = 1;
              if (v13 != 1)
              {
                v1142[0] = v13 | 0x100;
                HIDWORD(v1141) = 1;
                v1055 = 1;
                do
                {
                  v1056 = 0;
                  v1057 = 0;
                  v1058 = v1055;
                  do
                  {
                    if ((*(_BYTE *)(v1141 + v1056 + 1) & 0x40) != 0)
                      goto LABEL_698;
                    v1057 |= 1 << *(_BYTE *)(v1141 + v1056 + 1);
                    v1056 += 2;
                  }
                  while (2 * v1055 != v1056);
                  v1059 = 0;
                  do
                  {
                    v1060 = *(_BYTE *)(v1141 + v1059) & 0x7F;
                    if (v1060 >= 0x40)
                      goto LABEL_698;
                    v1057 &= ~(1 << v1060);
                    v1059 += 2;
                  }
                  while (2 * v1055 != v1059);
                  v1061 = (uint8x8_t)vcnt_s8((int8x8_t)v1057);
                  v1061.i16[0] = vaddlv_u8(v1061);
                  v1062 = v1061.i32[0];
                  v1063 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v1057));
                  v1063.i16[0] = vaddlv_u8(v1063);
                  if (v1063.i32[0] + v1062)
                  {
                    v1064 = 0;
                    if (v1055 <= 1uLL)
                      v1058 = 1;
                    v1065 = 2 * v1058;
                    while (1)
                    {
                      v1066 = *(_BYTE *)(v1141 + v1064 + 1);
                      if ((v1066 & 0x7Fu) >= 0x40)
                        goto LABEL_698;
                      if (((v1057 >> (v1066 & 0x7F)) & 1) != 0)
                        break;
                      v1064 += 2;
                      if (v1065 == v1064)
                        goto LABEL_813;
                    }
                    JSC::MacroAssemblerARM64::move((_DWORD *)v16, *(char *)(v1141 + v1064), v1066, v126, v127, v128, v129, v130);
                    memmove((void *)(v1141 + v1064), (const void *)(v1141 + v1064 + 2), 2 * HIDWORD(v1141) - v1064 - 2);
                    v1055 = --HIDWORD(v1141);
                  }
                  else
                  {
                    v1089 = *(_BYTE *)v1141;
                    v1090 = *(_BYTE *)(v1141 + 1);
                    JSC::MacroAssemblerARM64::swap(v16, *(char *)v1141, v1090, v126, v127, v128, v129, v130);
                    memmove((void *)v1141, (const void *)(v1141 + 2), 2 * HIDWORD(v1141) - 2);
                    v1091 = HIDWORD(v1141);
                    v1092 = --HIDWORD(v1141);
                    if (v1091 != 1)
                    {
                      v1095 = (_BYTE *)v1141;
                      v1096 = 2 * v1092;
                      while (*v1095 != v1090)
                      {
                        v1095 += 2;
                        v1096 -= 2;
                        if (!v1096)
                          goto LABEL_875;
                      }
                      *v1095 = v1089;
                    }
LABEL_875:
                    WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v1141, (uint64_t)&__dst, 0);
                    v1055 = HIDWORD(v1141);
                  }
LABEL_813:
                  ;
                }
                while (v1055);
                v1067 = v1141;
                if (v1142 != (_WORD *)v1141 && (_QWORD)v1141)
                {
                  *(_QWORD *)&v1141 = 0;
                  DWORD2(v1141) = 0;
                  WTF::fastFree(v1067, v124, v125, v126, v127, v128, v129, v130);
                }
              }
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v131, 3, v126, v127, v128, v129, v130);
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v1026, 2, v1027, v1028, v1029, v1030, v1031);
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v122, 0, v1032, v1033, v1034, v1035, v1036);
              if (!*(_BYTE *)(v16 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x19819F540);
              }
              *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
              v1042 = *(_BYTE *)(v16 + 272);
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)vmEntryCustomGetter, v1042, v1037, v1038, v1039, v1040, v1041);
              *(_DWORD *)(v16 + 208) = 0;
              JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v16 + 56), (32 * (v1042 & 0x1F)) | 0xD63F0000, v1043, v1044, v1045, v1046, v1047, v1048);
              v156 = (uint64_t)v116;
LABEL_106:
              if (v1112)
              {
                v157 = v156;
                if (v1112 == 31)
                {
                  v160 = (unsigned int *)(v16 + 200);
                  v159 = *(_DWORD *)(v16 + 200);
                  v161 = (JSC::AssemblerBuffer *)(v16 + 56);
                  v162 = v159 + 4;
                  v163 = *(_DWORD *)(v16 + 192);
                  v158 = -1862270945;
                }
                else
                {
                  v158 = v1112 | 0xAA0003E0;
                  v160 = (unsigned int *)(v16 + 200);
                  v159 = *(_DWORD *)(v16 + 200);
                  v161 = (JSC::AssemblerBuffer *)(v16 + 56);
                  v162 = v159 + 4;
                  v163 = *(_DWORD *)(v16 + 192);
                }
                if (v162 > v163)
                {
                  v154 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v161, v156, v148, v149, v150, v151, v152, v153).n128_u64[0];
                  v159 = *v160;
                }
                *(_DWORD *)(*(_QWORD *)v161 + v159) = v158;
                *v160 += 4;
                v156 = v157;
              }
              goto LABEL_370;
            }
            v133 = 12;
            if ((v132 & 1) != 0)
              v134 = v132 & 0xFFFFFFFFFFFFFFFELL;
            else
              v134 = *(_QWORD *)(v132 + 8);
            *(_QWORD *)&v1141 = v1142;
            DWORD2(v1141) = 1;
            if (v13 == 1)
              goto LABEL_102;
            v1142[0] = v13 | 0x100;
            HIDWORD(v1141) = 1;
            v480 = 1;
            while (1)
            {
              v481 = 0;
              v482 = 0;
              v483 = v1141;
              v484 = v480;
              do
              {
                if ((*(_BYTE *)(v1141 + v481 + 1) & 0x40) != 0)
                  goto LABEL_698;
                v482 |= 1 << *(_BYTE *)(v1141 + v481 + 1);
                v481 += 2;
              }
              while (2 * v480 != v481);
              v485 = 0;
              do
              {
                v486 = *(_BYTE *)(v1141 + v485) & 0x7F;
                if (v486 >= 0x40)
                  goto LABEL_698;
                v482 &= ~(1 << v486);
                v485 += 2;
              }
              while (2 * v480 != v485);
              v487 = v122;
              v488 = v123;
              v489 = (uint8x8_t)vcnt_s8((int8x8_t)v482);
              v489.i16[0] = vaddlv_u8(v489);
              v490 = v489.i32[0];
              v491 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v482));
              v491.i16[0] = vaddlv_u8(v491);
              if (!(v491.i32[0] + v490))
              {
                v1069 = *(_BYTE *)v1141;
                v1105 = *(_BYTE *)(v1141 + 1);
                JSC::MacroAssemblerARM64::swap(v16, *(char *)v1141, v1105, v126, v127, v128, v129, v130);
                memmove((void *)v1141, (const void *)(v1141 + 2), 2 * HIDWORD(v1141) - 2);
                v1070 = HIDWORD(v1141);
                v1071 = --HIDWORD(v1141);
                if (v1070 != 1)
                {
                  v1077 = (_BYTE *)v1141;
                  v1078 = 2 * v1071;
                  while (*v1077 != v1105)
                  {
                    v1077 += 2;
                    v1078 -= 2;
                    if (!v1078)
                      goto LABEL_827;
                  }
                  *v1077 = v1069;
                }
LABEL_827:
                WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v1141, (uint64_t)&__dst, 0);
                v480 = HIDWORD(v1141);
                goto LABEL_414;
              }
              v492 = 0;
              v493 = v480 <= 1uLL ? 1 : v480;
              v494 = 2 * v493;
              while (1)
              {
                v495 = *(unsigned __int8 *)(v1141 + v492 + 1);
                if ((v495 & 0x7Fu) >= 0x40)
                  goto LABEL_698;
                if (((v482 >> (v495 & 0x7F)) & 1) != 0)
                  break;
                v492 += 2;
                if (v494 == v492)
                  goto LABEL_414;
              }
              v496 = *(unsigned __int8 *)(v1141 + v492);
              if (v496 != v495)
                break;
LABEL_413:
              memmove((void *)(v483 + v492), (const void *)(v483 + v492 + 2), 2 * v484 - v492 - 2);
              v480 = --HIDWORD(v1141);
LABEL_414:
              v123 = v488;
              v122 = v487;
              if (!v480)
              {
                v500 = v1141;
                if (v1142 != (_WORD *)v1141 && (_QWORD)v1141)
                {
                  *(_QWORD *)&v1141 = 0;
                  DWORD2(v1141) = 0;
                  WTF::fastFree(v500, v124, v125, v126, v127, v128, v129, v130);
                }
LABEL_102:
                v135 = (uint64_t)v123;
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v134, 2, v126, v127, v128, v129, v130);
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v122, 0, v136, v137, v138, v139, v140);
                if (*(_BYTE *)(v16 + 212))
                {
                  *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
                  v146 = *(_BYTE *)(v16 + 272);
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v131, v146, v141, v142, v143, v144, v145);
                  *(_DWORD *)(v16 + 208) = 0;
                  v155 = *(_DWORD *)(v16 + 200);
                  if (v155 + 4 > *(_DWORD *)(v16 + 192))
                  {
                    v154 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), v147, v148, v149, v150, v151, v152, v153).n128_u64[0];
                    v155 = *(_DWORD *)(v16 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v16 + 56) + v155) = (32 * (v146 & 0x1F)) | 0xD63F0000;
                  *(_DWORD *)(v16 + 200) += 4;
                  v156 = v135;
                  goto LABEL_106;
                }
LABEL_699:
                __break(0xC471u);
                JUMPOUT(0x19819E48CLL);
              }
            }
            if ((char)v496 == 63)
            {
              if (v495 != 31)
              {
                v498 = v495 & 0x1F | 0xD2800000;
                goto LABEL_410;
              }
            }
            else if ((char)v495 != 31 && (char)v496 != 31)
            {
              v498 = v495 & 0xFFE0FFFF | ((v496 & 0x1F) << 16) | 0xAA0003E0;
LABEL_410:
              v499 = *(_DWORD *)(v16 + 200);
              if (v499 + 4 > *(_DWORD *)(v16 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), (uint64_t)v124, v125, v126, v127, v128, v129, v130);
                v499 = *(_DWORD *)(v16 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v16 + 56) + v499) = v498;
              *(_DWORD *)(v16 + 200) += 4;
              v483 = v1141;
              v484 = HIDWORD(v1141);
              goto LABEL_413;
            }
            v498 = (char)v495 | (32 * (char)v496) | 0x91000000;
            goto LABEL_410;
          }
          v334 = *((_QWORD *)a3 + 4);
          if (!BYTE1(qword_1ECF4C780))
          {
            v133 = *((_BYTE *)a3 + 4) & 0xFE;
            v1107 = (JSC::ARM64LogicalImmediate *)v122;
            if (v334)
            {
              if ((v334 & 1) != 0)
                v335 = v334 & 0xFFFFFFFFFFFFFFFELL;
              else
                v335 = *(_QWORD *)(v334 + 8);
            }
            else
            {
              v335 = 0;
            }
            *(_QWORD *)&v1141 = v1142;
            DWORD2(v1141) = 2;
            if (v13 == 1)
            {
              if (v1112 == 2)
                goto LABEL_366;
              v336 = 0;
            }
            else
            {
              v1142[0] = v13 | 0x100;
              v336 = 1;
              HIDWORD(v1141) = 1;
              if (v1112 == 2)
                goto LABEL_335;
            }
            v1142[v336++] = v1112 | 0x200;
            HIDWORD(v1141) = v336;
LABEL_335:
            v420 = 0;
            v421 = 0;
            v422 = v1141;
            v423 = v336;
            do
            {
              if ((*(_BYTE *)(v1141 + v420 + 1) & 0x40) != 0)
                goto LABEL_698;
              v421 |= 1 << *(_BYTE *)(v1141 + v420 + 1);
              v420 += 2;
            }
            while (2 * v336 != v420);
            v424 = 0;
            do
            {
              v425 = *(_BYTE *)(v1141 + v424) & 0x7F;
              if (v425 >= 0x40)
                goto LABEL_698;
              v421 &= ~(1 << v425);
              v424 += 2;
            }
            while (2 * v336 != v424);
            v426 = v123;
            v427 = (uint8x8_t)vcnt_s8((int8x8_t)v421);
            v427.i16[0] = vaddlv_u8(v427);
            v428 = v427.i32[0];
            v429 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v421));
            v429.i16[0] = vaddlv_u8(v429);
            if (!(v429.i32[0] + v428))
            {
              v1102 = v133;
              v601 = *(_BYTE *)v1141;
              v602 = *(_BYTE *)(v1141 + 1);
              JSC::MacroAssemblerARM64::swap(v16, *(char *)v1141, v602, v126, v127, v128, v129, v130);
              memmove((void *)v1141, (const void *)(v1141 + 2), 2 * HIDWORD(v1141) - 2);
              v603 = HIDWORD(v1141);
              v604 = (HIDWORD(v1141) - 1);
              HIDWORD(v1141) = v604;
              v605 = (unsigned __int8 *)v1141;
              v606 = (unsigned __int8 *)(v1141 + 2 * v604);
              if (v603 == 1)
              {
                v612 = 0;
                v613 = 0;
                v124 = (unsigned __int8 *)(v1141 + 2 * v604);
              }
              else
              {
                v607 = 2 * v604;
                v608 = (_BYTE *)v1141;
                while (*v608 != v602)
                {
                  v608 += 2;
                  v607 -= 2;
                  if (!v607)
                    goto LABEL_536;
                }
                *v608 = v601;
LABEL_536:
                LODWORD(v604) = 0;
                v609 = v605;
                v124 = v606;
                v610 = (char *)v606;
                do
                {
                  if (*v605 == v605[1])
                  {
                    v611 = (char *)v605;
                    if (v610 != (char *)(v1141 + 2 * HIDWORD(v1141)))
                    {
                      v1097 = v604;
                      v1099 = v606;
                      if (v605 == v124)
                      {
                        v611 = v610;
                      }
                      else
                      {
                        v1068 = v609 - v124;
                        memmove(v610, v124, v609 - v124);
                        v611 = &v610[v1068];
                      }
                      v606 = v1099;
                      LODWORD(v604) = v1097;
                    }
                    v124 = v605 + 2;
                    LODWORD(v604) = v604 + 1;
                    v610 = v611;
                  }
                  v605 += 2;
                  v609 += 2;
                }
                while (v605 < v606);
                v605 = (unsigned __int8 *)v1141;
                v612 = HIDWORD(v1141);
                v613 = HIDWORD(v1141);
                v606 = (unsigned __int8 *)v610;
              }
              v614 = &v605[2 * v612];
              v133 = v1102;
              if (v124 != v614)
              {
                v1072 = v604;
                memmove(v606, v124, v614 - v124);
                LODWORD(v604) = v1072;
                v613 = HIDWORD(v1141);
              }
              v336 = v613 - v604;
LABEL_359:
              v123 = v426;
              HIDWORD(v1141) = v336;
              goto LABEL_360;
            }
            v430 = 0;
            if (v336 <= 1uLL)
              v431 = 1;
            else
              v431 = v336;
            v432 = 2 * v431;
            while (1)
            {
              v433 = *(unsigned __int8 *)(v1141 + v430 + 1);
              if ((v433 & 0x7Fu) >= 0x40)
                goto LABEL_698;
              if (((v421 >> (v433 & 0x7F)) & 1) != 0)
                break;
              v430 += 2;
              if (v432 == v430)
              {
                v123 = v426;
LABEL_360:
                if (!v336)
                {
                  v440 = v1141;
                  if (v1142 != (_WORD *)v1141 && (_QWORD)v1141)
                  {
                    *(_QWORD *)&v1141 = 0;
                    DWORD2(v1141) = 0;
                    WTF::fastFree(v440, v124, v125, v126, v127, v128, v129, v130);
                  }
LABEL_366:
                  v441 = (uint64_t)v123;
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v335, 3, v126, v127, v128, v129, v130);
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)v1107, 0, v442, v443, v444, v445, v446);
                  if (!*(_BYTE *)(v16 + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19819E4BCLL);
                  }
                  *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
                  v452 = *(_BYTE *)(v16 + 272);
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v131, v452, v447, v448, v449, v450, v451);
                  *(_DWORD *)(v16 + 208) = 0;
                  v457 = *(_DWORD *)(v16 + 200);
                  if (v457 + 4 > *(_DWORD *)(v16 + 192))
                  {
                    v154 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), v453, v454, v455, v456, v151, v152, v153).n128_u64[0];
                    v457 = *(_DWORD *)(v16 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(v16 + 56) + v457) = (32 * (v452 & 0x1F)) | 0xD63F0000;
                  *(_DWORD *)(v16 + 200) += 4;
                  v156 = v441;
LABEL_370:
                  JSC::AssemblyHelpers::emitExceptionCheck(v16, v156, 1, 0, 0xFFFFFFFFLL, v151, v152, v153, (uint64_t)&v1128, v154);
                  JSC::InlineCacheCompiler::restoreLiveRegistersFromStackForCallWithThrownException((uint64_t)this, (uint64_t *)&v1138, v458, v459, v460, v461, v462, v463);
                  JSC::InlineCacheCompiler::emitExplicitExceptionHandler(this, v464, v465, v466, v467, v468, v469, v470);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1128, v16, v471, v472, v473, v474, v475, v476);
                  __dst = 0uLL;
                  if (v133 == 12)
                  {
                    if ((v1112 & 0x40) == 0)
                    {
                      *(_QWORD *)&__dst = 1 << v1112;
                      goto LABEL_373;
                    }
LABEL_698:
                    __break(1u);
                    goto LABEL_699;
                  }
LABEL_373:
                  v379 = (JSC::ScratchRegisterAllocator *)*((_QWORD *)this + 4);
                  v477 = v1138;
                  if (v1138)
                  {
                    v478 = 0;
                    do
                    {
                      v478 |= v477 & -(uint64_t)v477;
                      v477 &= v477 - 1;
                    }
                    while (v477);
                  }
                  else
                  {
                    v478 = 0;
                  }
                  v1141 = v478;
                  v383 = v1139;
                  p_dst = (const JSC::RegisterSet *)&__dst;
LABEL_377:
                  JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v379, (JSC::AssemblyHelpers *)&v1141, p_dst, (const JSC::RegisterSet *)v383, 0, v376, v377, v378);
                  goto LABEL_378;
                }
                goto LABEL_335;
              }
            }
            v434 = *(unsigned __int8 *)(v1141 + v430);
            if (v434 == v433)
            {
LABEL_358:
              memmove((void *)(v422 + v430), (const void *)(v422 + v430 + 2), 2 * v423 - v430 - 2);
              v336 = HIDWORD(v1141) - 1;
              goto LABEL_359;
            }
            v435 = (char)v434;
            if ((char)v434 == 63)
            {
              v436 = *(_DWORD *)(v16 + 200);
              v437 = *(_DWORD *)(v16 + 192);
              if (v433 != 31)
              {
                v439 = v433 & 0x1F | 0xD2800000;
                goto LABEL_355;
              }
            }
            else
            {
              v436 = *(_DWORD *)(v16 + 200);
              v437 = *(_DWORD *)(v16 + 192);
              if ((char)v433 != 31 && v435 != 31)
              {
                v439 = v433 & 0xFFE0FFFF | ((v435 & 0x1F) << 16) | 0xAA0003E0;
LABEL_355:
                if (v436 + 4 > v437)
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), (uint64_t)v124, v125, v126, v127, v128, v129, v130);
                  v436 = *(_DWORD *)(v16 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v16 + 56) + v436) = v439;
                *(_DWORD *)(v16 + 200) += 4;
                v422 = v1141;
                v423 = HIDWORD(v1141);
                goto LABEL_358;
              }
            }
            v439 = (char)v433 | (32 * v435) | 0x91000000;
            goto LABEL_355;
          }
          v1103 = *((_BYTE *)a3 + 4) & 0xFE;
          if (v334)
          {
            if ((v334 & 1) != 0)
              v799 = v334 & 0xFFFFFFFFFFFFFFFELL;
            else
              v799 = *(_QWORD *)(v334 + 8);
          }
          else
          {
            v799 = 0;
          }
          *(_QWORD *)&v1141 = v1142;
          DWORD2(v1141) = 2;
          if (v13 == 1)
          {
            if (v1112 == 2)
              goto LABEL_726;
            v800 = 0;
          }
          else
          {
            v1142[0] = v13 | 0x100;
            v800 = 1;
            HIDWORD(v1141) = 1;
            if (v1112 == 2)
            {
              do
              {
LABEL_708:
                v823 = 0;
                v824 = 0;
                v825 = v800;
                do
                {
                  if ((*(_BYTE *)(v1141 + v823 + 1) & 0x40) != 0)
                    goto LABEL_698;
                  v824 |= 1 << *(_BYTE *)(v1141 + v823 + 1);
                  v823 += 2;
                }
                while (2 * v800 != v823);
                v826 = 0;
                do
                {
                  v827 = *(_BYTE *)(v1141 + v826) & 0x7F;
                  if (v827 >= 0x40)
                    goto LABEL_698;
                  v824 &= ~(1 << v827);
                  v826 += 2;
                }
                while (2 * v800 != v826);
                v828 = (uint8x8_t)vcnt_s8((int8x8_t)v824);
                v828.i16[0] = vaddlv_u8(v828);
                v829 = v828.i32[0];
                v830 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v824));
                v830.i16[0] = vaddlv_u8(v830);
                if (v830.i32[0] + v829)
                {
                  v831 = 0;
                  if (v800 <= 1uLL)
                    v825 = 1;
                  v832 = 2 * v825;
                  while (1)
                  {
                    v833 = *(_BYTE *)(v1141 + v831 + 1);
                    if ((v833 & 0x7Fu) >= 0x40)
                      goto LABEL_698;
                    if (((v824 >> (v833 & 0x7F)) & 1) != 0)
                      break;
                    v831 += 2;
                    if (v832 == v831)
                      goto LABEL_721;
                  }
                  JSC::MacroAssemblerARM64::move((_DWORD *)v16, *(char *)(v1141 + v831), v833, v126, v127, v128, v129, v130);
                  memmove((void *)(v1141 + v831), (const void *)(v1141 + v831 + 2), 2 * HIDWORD(v1141) - v831 - 2);
                  v800 = --HIDWORD(v1141);
                }
                else
                {
                  v1049 = *(_BYTE *)v1141;
                  v1050 = *(_BYTE *)(v1141 + 1);
                  JSC::MacroAssemblerARM64::swap(v16, *(char *)v1141, v1050, v126, v127, v128, v129, v130);
                  memmove((void *)v1141, (const void *)(v1141 + 2), 2 * HIDWORD(v1141) - 2);
                  v1051 = HIDWORD(v1141);
                  v1052 = --HIDWORD(v1141);
                  if (v1051 != 1)
                  {
                    v1053 = (_BYTE *)v1141;
                    v1054 = 2 * v1052;
                    while (*v1053 != v1050)
                    {
                      v1053 += 2;
                      v1054 -= 2;
                      if (!v1054)
                        goto LABEL_795;
                    }
                    *v1053 = v1049;
                  }
LABEL_795:
                  WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v1141, (uint64_t)&__dst, 0);
                  v800 = HIDWORD(v1141);
                }
LABEL_721:
                ;
              }
              while (v800);
              v834 = v1141;
              if (v1142 != (_WORD *)v1141 && (_QWORD)v1141)
              {
                *(_QWORD *)&v1141 = 0;
                DWORD2(v1141) = 0;
                WTF::fastFree(v834, v124, v125, v126, v127, v128, v129, v130);
              }
LABEL_726:
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v131, 4, v126, v127, v128, v129, v130);
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v799, 3, v835, v836, v837, v838, v839);
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v122, 0, v840, v841, v842, v843, v844);
              if (!*(_BYTE *)(v16 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x19819F43CLL);
              }
              *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
              v850 = *(_BYTE *)(v16 + 272);
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, (uint64_t)vmEntryCustomSetter, v850, v845, v846, v847, v848, v849);
              *(_DWORD *)(v16 + 208) = 0;
              JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v16 + 56), (32 * (v850 & 0x1F)) | 0xD63F0000, v851, v852, v853, v854, v855, v856);
              v156 = (uint64_t)v116;
              v133 = v1103;
              goto LABEL_370;
            }
          }
          v1142[v800++] = v1112 | 0x200;
          HIDWORD(v1141) = v800;
          goto LABEL_708;
        }
        if (!*(_BYTE *)(v16 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19819E44CLL);
        }
        v116 = v17;
        v117 = -1207811152;
        JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v16, (JSC::ARM64LogicalImmediate *)v115, v16 + 264, v109, v110, v111, v112, v113);
        v119 = (unsigned int *)(v16 + 200);
        v118 = *(_DWORD *)(v16 + 200);
      }
      v120 = v118 + 4;
      v121 = *(v119 - 2);
      goto LABEL_94;
    case 0x11:
    case 0x12:
      v215 = v14 == 17;
      goto LABEL_145;
    case 0x14:
      JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 4), v12 | 0x800000000, (char)v18, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load32(v16, v18 | 0xFFFFFFF800000000, (char)v18, v384, v385, v386, v387, v388);
      JSC::MacroAssemblerARM64::branchTest32(v16, 4, (char)v18, (char)v18, v389, v390, v391, v392, (uint64_t)&v1115);
      v393 = v1115;
      if (v1115 != -1)
      {
        v394 = *((unsigned int *)this + 35);
        if ((_DWORD)v394 == *((_DWORD *)this + 34))
        {
          v395 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 128, (void *)(v394 + 1), (unint64_t)&v1115, v191, v192, v193, v194, v195);
          v397 = *v395;
          v396 = (uint64_t *)(v395 + 1);
          v393 = v397;
          v398 = *((_QWORD *)this + 16) + 12 * *((unsigned int *)this + 35);
        }
        else
        {
          v396 = &v1116;
          v398 = *((_QWORD *)this + 16) + 12 * v394;
        }
        *(_DWORD *)v398 = v393;
        *(_QWORD *)(v398 + 4) = *v396;
        ++*((_DWORD *)this + 35);
      }
      v557 = *(_DWORD *)(v16 + 200);
      if (v557 + 4 > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), (uint64_t)v189, v190, v191, v192, v193, v194, v195);
        v557 = *(_DWORD *)(v16 + 200);
      }
      v558 = v15 & 0xFFE0FFFF | ((v18 & 0x1F) << 16);
      goto LABEL_498;
    case 0x15:
      JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 4), v12 | 0x800000000, (char)v18, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branchTest64(v16, 1, (char)v18, 1, v526, v527, v528, v529, (uint64_t)&v1141, v530);
      JSC::MacroAssemblerARM64::load32(v16, v18 | 0x400000000, (char)v15, v531, v532, v533, v534, v535);
      for (j = *(_DWORD *)(v16 + 200); (signed int)j < *(_DWORD *)(v16 + 52); *(_DWORD *)(v16 + 200) = j)
      {
        if (j + 4 > *(_DWORD *)(v16 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), v536, v537, v538, v539, v540, v541, v542);
          j = *(_DWORD *)(v16 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v16 + 56) + j) = -721215457;
        j = *(_DWORD *)(v16 + 200) + 4;
      }
      v544 = j;
      if (j + 4 > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), v536, v537, v538, v539, v540, v541, v542);
        v544 = *(_DWORD *)(v16 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 56) + v544) = 335544320;
      *(_DWORD *)(v16 + 200) += 4;
      if (*(_BYTE *)(v16 + 328))
        v545 = 69;
      else
        v545 = 65;
      v1138 = j;
      LOBYTE(v1139) = v545;
      *(_WORD *)((char *)&v1139 + 1) = 15;
      BYTE3(v1139) = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1141, v16, v537, v538, v539, v540, v541, v542);
      JSC::MacroAssemblerARM64::load32(v16, v12 | 0x1000000000, (char)v15, v546, v547, v548, v549, v550);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1138, v16, v551, v552, v553, v554, v555, v556);
      v557 = *(_DWORD *)(v16 + 200);
      if (v557 + 4 > *(_DWORD *)(v16 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), (uint64_t)v189, v190, v191, v192, v193, v194, v195);
        v557 = *(_DWORD *)(v16 + 200);
      }
      v558 = v15 & 0xFFE0FFFF | ((v15 & 0x1F) << 16);
LABEL_498:
      *(_DWORD *)(*(_QWORD *)(v16 + 56) + v557) = (v558 | 0xAA0003E0) - 128;
      *(_DWORD *)(v16 + 200) += 4;
      goto LABEL_378;
    case 0x1C:
    case 0x1D:
      v215 = v14 == 28;
LABEL_145:
      if (v215)
        v216 = 7;
      else
        v216 = 6;
      v217 = (char)v15;
      v218 = (unsigned int *)*((_QWORD *)this + 4);
LABEL_149:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v218, (JSC::ARM64LogicalImmediate *)v216, v217, a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 0x20:
      JSC::MacroAssemblerARM64::store32(*((_QWORD *)this + 4), *((_DWORD *)a3 + 3) & 0xFFFFFFFE, v12, a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 0x6E:
      v32 = (char)v15;
      v33 = (_DWORD *)*((_QWORD *)this + 4);
      v34 = 6;
LABEL_26:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v33, v34, v32, a4, a5, a6, a7, a8);
      goto LABEL_23;
    default:
      __break(0xC471u);
      JUMPOUT(0x19819EAD8);
  }
}

void JSC::InlineCacheCompiler::emitDOMJITGetter(JSC::InlineCacheCompiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  _QWORD *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  unsigned int v67;
  char v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  char ScratchFPR;
  int v143;
  int v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  __int128 *v148;
  __int128 v149;
  WTF *v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  WTF *v154;
  int v155;
  uint64_t v156;
  __int128 v157;
  WTF *v158;
  int v159;
  int v160;
  WTF *v161;
  int v162;
  int v163;
  WTF *v164;
  int v165;
  int v166;
  WTF *v167;
  uint64_t v168;
  _QWORD v169[2];
  uint64_t v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  _QWORD v173[6];
  _OWORD *v174;
  uint64_t v175;
  WTF *v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  unint64_t v180;

  v8 = a4;
  v12 = *((_QWORD *)this + 4);
  v13 = *((_QWORD *)this + 2);
  v14 = *(unsigned __int8 *)(v13 + 117);
  v15 = *((char *)this + 176);
  if ((*(_WORD *)(v13 + 129) & 0x200) != 0)
  {
    JSC::InlineCacheCompiler::callSiteIndexForExceptionHandlingOrOriginal(this);
    JSC::MacroAssemblerARM64::transfer32(v12, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 120) | 0x7000000000, 0x240000001DLL, v131, v132, v133, v134, v135);
  }
  else
  {
    v16 = *((_BYTE *)this + 224);
    if ((v16 & 1) == 0)
    {
      JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling(this);
      v16 = *((_BYTE *)this + 224);
    }
    if ((v16 & 4) != 0)
    {
      v17 = *((_DWORD *)this + 50);
    }
    else
    {
      *((_BYTE *)this + 224) = v16 | 4;
      if ((v16 & 2) != 0)
        v17 = JSC::CodeBlock::newExceptionHandlingCallSiteIndex(*(_QWORD *)(*((_QWORD *)this + 4) + 336), *(_DWORD *)(*((_QWORD *)this + 2) + 112));
      else
        v17 = *(_DWORD *)(*((_QWORD *)this + 2) + 112);
      *((_DWORD *)this + 50) = v17;
    }
    if (v17)
    {
      if (!*(_BYTE *)(v12 + 212))
      {
        __break(0xC471u);
        goto LABEL_171;
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v12, (JSC::ARM64LogicalImmediate *)v17, v12 + 264, a4, a5, a6, a7, a8);
      v25 = *(_DWORD *)(v12 + 200);
      if (v25 + 4 > *(_DWORD *)(v12 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v18, v19, v20, v21, v22, v23, v24);
        v25 = *(_DWORD *)(v12 + 200);
      }
      v26 = *(_QWORD *)(v12 + 56);
      v27 = -1207811152;
    }
    else
    {
      v25 = *(_DWORD *)(v12 + 200);
      if (v25 + 4 > *(_DWORD *)(v12 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), a2, a3, a4, a5, a6, a7, a8);
        v25 = *(_DWORD *)(v12 + 200);
      }
      v26 = *(_QWORD *)(v12 + 56);
      v27 = -1207811137;
    }
    *(_DWORD *)(v26 + v25) = v27;
    *(_DWORD *)(v12 + 200) += 4;
  }
  v28 = v15;
  (*(void (**)(unint64_t *__return_ptr))(a3 + 8))(&v180);
  v178 = 0;
  v179 = 0;
  v176 = 0;
  v177 = 0;
  v174 = 0;
  v175 = 0;
  JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)v173, *((_QWORD *)this + 2), v15);
  v171 = -1;
  if ((_DWORD)v14 == v8)
  {
    if (v15 == v8)
    {
LABEL_22:
      v172 = v28;
      if (*(_BYTE *)(v180 + 16))
      {
        LOBYTE(v8) = v28;
        v28 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)v173);
        goto LABEL_32;
      }
      LOBYTE(v8) = v28;
      goto LABEL_31;
    }
    if (v8 == 63)
    {
      if (v15 != 31)
      {
        v38 = v15 & 0x1F | 0xD2800000;
        goto LABEL_19;
      }
    }
    else if (v8 != 31 && v15 != 31)
    {
      v36 = v15 | ((v8 & 0x1F) << 16);
      v37 = -1442839584;
LABEL_18:
      v38 = v36 | v37;
LABEL_19:
      v40 = (unsigned int *)(v12 + 200);
      v39 = *(_DWORD *)(v12 + 200);
      if (v39 + 4 > *(_DWORD *)(v12 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v29, v30, v31, v32, v33, v34, v35);
        v39 = *v40;
      }
      *(_DWORD *)(*(_QWORD *)(v12 + 56) + v39) = v38;
      *v40 += 4;
      goto LABEL_22;
    }
    v36 = v15 | (32 * v8);
    v37 = -1862270976;
    goto LABEL_18;
  }
  v172 = v8;
  if (!*(_BYTE *)(v180 + 16))
  {
    v171 = v15;
LABEL_31:
    v28 = -1;
  }
LABEL_32:
  v41 = HIDWORD(v175);
  if (HIDWORD(v175) != (_DWORD)v175)
  {
    v49 = (uint64_t *)&v174[HIDWORD(v175)];
    goto LABEL_43;
  }
  v42 = HIDWORD(v175) + ((unint64_t)HIDWORD(v175) >> 2);
  if (v42 >= 0x10)
    v43 = v42 + 1;
  else
    v43 = 16;
  if (v43 <= (unint64_t)HIDWORD(v175) + 1)
    v44 = HIDWORD(v175) + 1;
  else
    v44 = v43;
  if (v44 >> 28)
  {
    __break(0xC471u);
LABEL_171:
    JUMPOUT(0x1981A00D8);
  }
  v45 = (unint64_t)v174;
  v46 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v44));
  LODWORD(v175) = v44;
  v174 = v46;
  if ((_DWORD)v41)
  {
    v147 = 16 * v41;
    v148 = (__int128 *)v45;
    do
    {
      v149 = *v148++;
      *v46++ = v149;
      v147 -= 16;
    }
    while (v147);
    v46 = v174;
  }
  if (v45)
  {
    if (v46 == (_OWORD *)v45)
    {
      v174 = 0;
      LODWORD(v175) = 0;
    }
    WTF::fastFree(v45, v47, v48, v31, v32, v33, v34, v35);
    v46 = v174;
  }
  v49 = (uint64_t *)&v46[HIDWORD(v175)];
LABEL_43:
  *v49 = v14 | 0x200000000;
  v49[1] = 0;
  v50 = HIDWORD(v175) + 1;
  HIDWORD(v175) = v50;
  if (v50 == (_DWORD)v175)
  {
    WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID &>((uint64_t)&v174, &v172);
  }
  else
  {
    v51 = &v174[v50];
    *v51 = v8;
    v51[1] = 0;
    ++HIDWORD(v175);
  }
  if (*(_BYTE *)(v180 + 16))
  {
    if (a2)
    {
      *(_QWORD *)&v157 = v28;
      *((_QWORD *)&v157 + 1) = a2;
    }
    else
    {
      v157 = v28;
    }
    if (HIDWORD(v175) == (_DWORD)v175)
    {
LABEL_168:
      WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SnippetParams::Value>((uint64_t)&v174, (unint64_t)&v157);
    }
    else
    {
      v174[HIDWORD(v175)] = v157;
      ++HIDWORD(v175);
    }
  }
  v52 = v180;
  v53 = *(unsigned __int8 *)(v180 + 4);
  if (*(_BYTE *)(v180 + 4))
  {
    if (v171 == 255)
    {
      v67 = 0;
    }
    else
    {
      v144 = HIDWORD(v179);
      if (HIDWORD(v179) == (_DWORD)v179)
      {
        WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID&>((uint64_t)&v178, (unint64_t)&v171);
        v52 = v180;
        v53 = *(unsigned __int8 *)(v180 + 4);
      }
      else
      {
        v178[HIDWORD(v179)] = v171;
        HIDWORD(v179) = v144 + 1;
      }
      v67 = 1;
    }
    while (v67 < v53)
    {
      v68 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)v173);
      LOBYTE(v157) = v68;
      v69 = HIDWORD(v179);
      if (HIDWORD(v179) == (_DWORD)v179)
      {
        v70 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v178, (WTF *)(HIDWORD(v179) + 1), (unint64_t)&v157);
        v69 = HIDWORD(v179);
        v178[HIDWORD(v179)] = *v70;
      }
      else
      {
        v178[HIDWORD(v179)] = v68;
      }
      HIDWORD(v179) = v69 + 1;
      ++v67;
      v52 = v180;
      v53 = *(unsigned __int8 *)(v180 + 4);
    }
  }
  if (*(_BYTE *)(v52 + 5))
  {
    v141 = 0;
    do
    {
      ScratchFPR = JSC::ScratchRegisterAllocator::allocateScratchFPR((JSC::ScratchRegisterAllocator *)v173);
      LOBYTE(v157) = ScratchFPR;
      v143 = HIDWORD(v177);
      if (HIDWORD(v177) == (_DWORD)v177)
      {
        WTF::Vector<JSC::ARM64Registers::FPRegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::FPRegisterID>((uint64_t)&v176, (unint64_t)&v157);
      }
      else
      {
        *((_BYTE *)v176 + HIDWORD(v177)) = ScratchFPR;
        HIDWORD(v177) = v143 + 1;
      }
      ++v141;
    }
    while (v141 < *(unsigned __int8 *)(v180 + 5));
  }
  v170 = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(v173, (JSC::ScratchRegisterAllocator *)v12, 0, v31, v32, v33, v34, v35);
  if (*(_BYTE *)(v180 + 16))
  {
    v71 = (char)v28;
    if (a2)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a2, v71, v54, v55, v56, v57, v58);
    else
      JSC::MacroAssemblerARM64::load64(v12, 0x3000000009, v71, v54, v55, v56, v57, v58);
  }
  v59 = (WTF *)v174;
  v60 = HIDWORD(v175);
  if (HIDWORD(v175))
  {
    v61 = 0;
    v62 = 16 * HIDWORD(v175);
    v63 = 1;
    v64 = (uint64_t)v174;
    while (1)
    {
      v65 = *(WTF **)v64;
      v66 = HIDWORD(*(_QWORD *)v64);
      if (!(_DWORD)v66)
        break;
      if ((_DWORD)v66 != 2)
      {
        if ((_DWORD)v66 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_168;
        }
        v65 = (WTF *)((char *)v65 + 32);
        if ((v65 & 0x40) != 0)
          goto LABEL_157;
        goto LABEL_53;
      }
      if ((v65 & 0x40) != 0)
        goto LABEL_157;
LABEL_54:
      v61 |= 1 << (char)v65;
      v64 += 16;
      v62 -= 16;
      if (!v62)
        goto LABEL_76;
    }
    if ((v65 & 0x40) != 0)
      goto LABEL_157;
LABEL_53:
    LOBYTE(v65) = v65 & 0x7F;
    goto LABEL_54;
  }
  v61 = 0;
LABEL_76:
  v63 = (uint64_t)v178;
  LODWORD(v62) = HIDWORD(v179);
  if (HIDWORD(v179))
  {
    v64 = 1;
    v65 = (WTF *)HIDWORD(v179);
    v130 = v178;
    while ((*v130 & 0x40) == 0)
    {
      v61 |= 1 << *v130++;
      v65 = (WTF *)((char *)v65 - 1);
      if (!v65)
        goto LABEL_77;
    }
    goto LABEL_157;
  }
LABEL_77:
  v65 = v176;
  v64 = HIDWORD(v177);
  if (HIDWORD(v177))
    goto LABEL_158;
LABEL_78:
  v72 = *((_QWORD *)this + 2);
  if ((*(_WORD *)(v72 + 129) & 0x200) != 0)
  {
    v136 = *(_BYTE *)(v72 + 120);
    if ((v136 & 0x40) == 0)
    {
      v61 |= 1 << v136;
      goto LABEL_79;
    }
    while (1)
    {
LABEL_157:
      __break(1u);
LABEL_158:
      v145 = v64;
      v146 = v65;
      while (((*v146 + 32) & 0x40) == 0)
      {
        v61 |= 1 << (*v146++ + 32);
        if (!--v145)
          goto LABEL_78;
      }
    }
  }
LABEL_79:
  v169[0] = v61 & 0xFFFF00FF0003FFFFLL;
  v169[1] = 0;
  v73 = *(_QWORD *)this;
  v174 = 0;
  *((_QWORD *)&v157 + 1) = v73;
  v158 = v59;
  v74 = v175;
  v175 = 0;
  v159 = v74;
  v160 = v60;
  v178 = 0;
  v161 = (WTF *)v63;
  v75 = v179;
  v179 = 0;
  v162 = v75;
  v163 = v62;
  v176 = 0;
  v164 = v65;
  v76 = v177;
  v177 = 0;
  v165 = v76;
  v166 = v64;
  *(_QWORD *)&v157 = &off_1E3580B38;
  v167 = 0;
  v168 = 0;
  v77 = *(unsigned int **)(v180 + 8);
  if (v77)
  {
    v78 = v77 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  (*(void (**)(WTF **__return_ptr, unsigned int *, uint64_t, __int128 *))(*(_QWORD *)v77 + 16))(&v154, v77, v12, &v157);
  v87 = v154;
  if (&v156 != (uint64_t *)v154 && v154 != 0)
  {
    v154 = 0;
    v155 = 0;
    WTF::fastFree((unint64_t)v87, v80, v81, v82, v83, v84, v85, v86);
  }
  v89 = v77 + 2;
  do
  {
    v90 = __ldaxr(v89);
    v91 = v90 - 1;
  }
  while (__stlxr(v91, v89));
  if (!v91)
  {
    atomic_store(1u, v77 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
  }
  JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)v173, (const char *)v12, (const char *)&v170, v82, v83, v84, v85, v86);
  JSC::InlineCacheCompiler::succeed(this, v92, v93, v94, v95, v96, v97, v98);
  JSC::AccessCaseSnippetParams::emitSlowPathCalls((JSC::AccessCaseSnippetParams *)&v157, this, (const JSC::RegisterSetBuilder *)v169, (JSC::CCallHelpers *)v12, (uint64_t)&v150);
  if (v152)
  {
    v117 = 0;
    v118 = 0;
    v119 = 12 * v152;
    do
    {
      if (v118 >= v152)
      {
        __break(0xC471u);
        JUMPOUT(0x1981A0288);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v150 + v117), v12, v100, v101, v102, v103, v104, v105);
      ++v118;
      v117 += 12;
    }
    while (v119 != v117);
    JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping((uint64_t)v173, (const char *)v12, (const char *)&v170, v101, v102, v103, v104, v105);
    JSC::InlineCacheCompiler::emitExplicitExceptionHandler(this, v120, v121, v122, v123, v124, v125, v126);
  }
  v106 = v150;
  if (&v153 != (uint64_t *)v150 && v150)
  {
    v150 = 0;
    v151 = 0;
    WTF::fastFree((unint64_t)v106, v99, v100, v101, v102, v103, v104, v105);
  }
  if (HIDWORD(v168))
  {
    v127 = v167;
    v128 = 8 * HIDWORD(v168);
    do
    {
      v129 = *(_QWORD *)v127;
      *(_QWORD *)v127 = 0;
      if (v129)
        (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
      v127 = (WTF *)((char *)v127 + 8);
      v128 -= 8;
    }
    while (v128);
  }
  v107 = v167;
  if (v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v107, v99, v100, v101, v102, v103, v104, v105);
  }
  *(_QWORD *)&v157 = off_1E35747E0;
  v108 = v164;
  if (v164)
  {
    v164 = 0;
    v165 = 0;
    WTF::fastFree((unint64_t)v108, v99, v100, v101, v102, v103, v104, v105);
  }
  v109 = v161;
  if (v161)
  {
    v161 = 0;
    v162 = 0;
    WTF::fastFree((unint64_t)v109, v99, v100, v101, v102, v103, v104, v105);
  }
  v110 = v158;
  if (v158)
  {
    v158 = 0;
    v159 = 0;
    WTF::fastFree((unint64_t)v110, v99, v100, v101, v102, v103, v104, v105);
  }
  v111 = (unint64_t)v174;
  if (v174)
  {
    v174 = 0;
    LODWORD(v175) = 0;
    WTF::fastFree(v111, v99, v100, v101, v102, v103, v104, v105);
  }
  v112 = (unint64_t)v176;
  if (v176)
  {
    v176 = 0;
    LODWORD(v177) = 0;
    WTF::fastFree(v112, v99, v100, v101, v102, v103, v104, v105);
  }
  v113 = (unint64_t)v178;
  if (v178)
  {
    v178 = 0;
    LODWORD(v179) = 0;
    WTF::fastFree(v113, v99, v100, v101, v102, v103, v104, v105);
  }
  v114 = v180;
  v180 = 0;
  if (v114)
  {
    do
    {
      v115 = __ldaxr((unsigned int *)v114);
      v116 = v115 - 1;
    }
    while (__stlxr(v116, (unsigned int *)v114));
    if (!v116)
    {
      atomic_store(1u, (unsigned int *)v114);
      v137 = *(unsigned int **)(v114 + 8);
      *(_QWORD *)(v114 + 8) = 0;
      if (v137)
      {
        v138 = v137 + 2;
        do
        {
          v139 = __ldaxr(v138);
          v140 = v139 - 1;
        }
        while (__stlxr(v140, v138));
        if (!v140)
        {
          atomic_store(1u, v137 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v137 + 8))(v137);
        }
      }
      WTF::fastFree(v114, v99, v100, v101, v102, v103, v104, v105);
    }
  }
}

void JSC::MacroAssemblerARM64::transfer32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*(_BYTE *)(a1 + 212)
    || (*(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288),
        JSC::MacroAssemblerARM64::load32(a1, a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8),
        !*(_BYTE *)(a1 + 212)))
  {
    __break(0xC471u);
    JUMPOUT(0x1981A031CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::store32(a1, *(char *)(a1 + 272), a3, v10, v11, v12, v13, v14);
}

uint64_t JSC::InlineCacheCompiler::setSpillStateForJSCall(uint64_t result, unint64_t *a2)
{
  unint64_t *v2;
  int v3;
  unint64_t v4;
  uint8x8_t v5;
  __int32 v6;
  uint8x8_t v7;
  BOOL v8;
  unint64_t v9;

  v2 = (unint64_t *)(result + 208);
  v3 = *(_DWORD *)(result + 216);
  if (v3 == -1)
  {
    v4 = *a2;
    v3 = *((_DWORD *)a2 + 2);
  }
  else
  {
    if (v3 != *((_DWORD *)a2 + 2))
      WTFCrashWithInfoImpl(337, "./bytecode/InlineCacheCompiler.h", "void JSC::InlineCacheCompiler::setSpillStateForJSCall(SpillState &)");
    v4 = *v2;
    if (*v2 != *a2)
      WTFCrashWithInfoImpl(340, "./bytecode/InlineCacheCompiler.h", "void JSC::InlineCacheCompiler::setSpillStateForJSCall(SpillState &)");
  }
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.i32[0];
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v4));
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.i32[0] + v6)
    v8 = 1;
  else
    v8 = v3 == 0;
  if (!v8)
    WTFCrashWithInfoImpl(344, "./bytecode/InlineCacheCompiler.h", "void JSC::InlineCacheCompiler::setSpillStateForJSCall(SpillState &)");
  v9 = *a2;
  *(_DWORD *)(result + 216) = *((_DWORD *)a2 + 2);
  *v2 = v9;
  return result;
}

void JSC::MacroAssembler::addPtr(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = (32 * v8) | 0x8B3D601F;
  a1[50] += 4;
}

uint64_t JSC::InlineCacheCompiler::canEmitIntrinsicGetter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  BOOL v15;
  int v16;
  uint64_t v17;

  if ((*(_BYTE *)(a1 + 122) & 0xFB) == 1)
    return 0;
  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 1) != 0)
    v3 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v3 + 5) == 8)
  {
    v6 = *(_QWORD *)(v3 + 8);
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v4 = *(unsigned __int8 *)(v6 + 14);
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)(v6 + 8));
      v17 = a3;
      v16 = v4;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v4 = v16;
      a3 = v17;
    }
  }
  else
  {
    v4 = *(unsigned __int8 *)(v3 + 64);
  }
  switch(v4)
  {
    case 151:
    case 152:
    case 153:
      return *(unsigned __int8 *)(a3 + 9) - 39 < 0xB;
    case 154:
      if (*(unsigned __int8 *)(a3 + 9) < 0x17u)
        return 0;
      v15 = (*(_WORD *)(a3 + 12) & 0x800) == 0;
      goto LABEL_27;
    case 155:
      v11 = *(unsigned int *)(a3 + 76);
      v12 = *(_DWORD *)(a3 + 76) != 0;
      if ((_DWORD)v11)
      {
        v13 = 16 * v11;
        if ((char **)v13 != &JSC::JSScope::s_info)
        {
          do
          {
            v13 = *(_QWORD *)(v13 + 16);
            v12 = v13 != 0;
          }
          while ((char **)v13 != &JSC::JSScope::s_info && v13 != 0);
        }
      }
      return !v12;
    case 156:
      v15 = *(_BYTE *)(a3 + 9) == 74;
LABEL_27:
      result = v15;
      break;
    default:
      return 0;
  }
  return result;
}

unint64_t JSC::InlineCacheCompiler::tryFoldToMegamorphic(unint64_t *a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t result;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  char v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  __int16 v35;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  int v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  int v58;
  uint64_t v59;
  _DWORD *v60;
  char v61;
  unint64_t v62;
  _WORD *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  unsigned int v83;
  _QWORD *v84;
  char v85;
  int v86;
  BOOL v87;
  unsigned __int16 *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;

  v9 = a3;
  v12 = (unint64_t *)(a3 + 8 * a4);
  if (a4)
  {
    v13 = (unint64_t *)a3;
    do
    {
      result = *v13;
      do
        v15 = __ldaxr((unsigned int *)result);
      while (__stlxr(v15 + 1, (unsigned int *)result));
      v16 = *(unsigned __int8 *)(result + 4);
      v17 = v16 > 0x3E || ((1 << v16) & 0x400000044008000ALL) == 0;
      if (!v17 || v16 == 112)
        goto LABEL_18;
      do
      {
        v18 = __ldaxr((unsigned int *)result);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)result));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)result);
        JSC::AccessCase::operator delete(result, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v13;
    }
    while (v13 != v12);
  }
  v20 = a2[2];
  if (a4 < dword_1ECF4C42C && (*(_WORD *)(v20 + 129) & 0x100) == 0)
    goto LABEL_17;
  result = 0;
  switch(*(_BYTE *)(v20 + 122))
  {
    case 0:
    case 1:
      v21 = *(_QWORD *)(v20 + 16);
      if (!a4)
        goto LABEL_30;
      v22 = 8 * a4;
      while (1)
      {
        v23 = *(_QWORD *)v9;
        v24 = !*(_BYTE *)(*(_QWORD *)v9 + 4) || *(_BYTE *)(*(_QWORD *)v9 + 4) == 8;
        if (!v24 || *(_QWORD *)(v23 + 24) || *(_BYTE *)(v23 + 5))
          break;
        v9 += 8;
        v22 -= 8;
        if (!v22)
        {
LABEL_30:
          v25 = 1;
          goto LABEL_31;
        }
      }
      v25 = 0;
LABEL_31:
      if (v21)
      {
        if ((v21 & 1) != 0)
          v26 = v21 & 0xFFFFFFFFFFFFFFFELL;
        else
          v26 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v26 = 0;
      }
      v27 = *(_BYTE **)(v26 + 8);
      v28 = *(unsigned int *)(v26 + 4);
      if ((*(_BYTE *)(v26 + 16) & 4) != 0)
      {
        if (!(_DWORD)v28)
          goto LABEL_37;
        v29 = *v27 - 48;
        if (v29 > 9 || v28 >= 2 && *v27 == 48)
          goto LABEL_37;
        v92 = v28 - 1;
        v93 = v27 + 1;
        while (v92)
        {
          if (v29 <= 0x19999999)
          {
            v94 = *v93 - 48;
            if (v94 <= 9)
            {
              v40 = __CFADD__(v94, 10 * v29);
              v29 = v94 + 10 * v29;
              --v92;
              ++v93;
              if (!v40)
                continue;
            }
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!(_DWORD)v28)
          goto LABEL_37;
        v29 = *(unsigned __int16 *)v27 - 48;
        if (v29 > 9)
          goto LABEL_37;
        if (*(_WORD *)v27 == 48 && v28 > 1)
          goto LABEL_37;
        v37 = (unsigned __int16 *)(v27 + 2);
        v38 = v28 - 1;
        while (v38)
        {
          if (v29 <= 0x19999999)
          {
            v39 = *v37 - 48;
            if (v39 <= 9)
            {
              v40 = __CFADD__(v39, 10 * v29);
              v29 = v39 + 10 * v29;
              ++v37;
              --v38;
              if (!v40)
                continue;
            }
          }
          goto LABEL_37;
        }
      }
      if (v29 != -1)
        goto LABEL_17;
LABEL_37:
      v30 = *(_QWORD **)(*a2 + 41952);
      if (v30[221] != v26 && v30[246] != v26 && v30[270] != v26)
      {
        v31 = v25 ^ 1;
        if (v30[2] == v26)
          v31 = 1;
        if ((v31 & 1) == 0)
        {
          v32 = *(_WORD *)(v20 + 129) & 0x200;
          if (BYTE6(qword_1ECF4C780))
            v33 = v32 == 0;
          else
            v33 = 1;
          if (v33)
            v34 = v21;
          else
            v34 = 0;
          result = WTF::fastMalloc((WTF *)0x28);
          v35 = 1;
          *(_DWORD *)result = 1;
          goto LABEL_50;
        }
      }
      goto LABEL_17;
    case 4:
    case 5:
      if (!a4)
        goto LABEL_73;
      v41 = 8 * a4 - 8;
      while (1)
      {
        v42 = *(_QWORD *)v9;
        if ((*(unsigned __int8 *)(*(_QWORD *)v9 + 4) | 8) != 8 || *(_QWORD *)(v42 + 24))
          goto LABEL_17;
        v43 = *(unsigned __int8 *)(v42 + 5);
        v9 += 8;
        if (v43)
          v44 = 1;
        else
          v44 = v41 == 0;
        v41 -= 8;
        if (v44)
        {
          if (v43)
            goto LABEL_17;
LABEL_73:
          result = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)result = 1;
          v45 = 34;
          goto LABEL_74;
        }
      }
    case 6:
    case 7:
      v53 = *(_QWORD *)(v20 + 16);
      if (!a4)
        goto LABEL_148;
      while (1)
      {
        v54 = *(_QWORD *)v9;
        v55 = *(unsigned __int8 *)(*(_QWORD *)v9 + 4);
        v56 = v55 == 2 || v55 == 7;
        if (!v56 || *(_QWORD *)(v54 + 24) || *(_BYTE *)(v54 + 5))
        {
LABEL_130:
          v61 = 1;
          goto LABEL_131;
        }
        if (v55 != 2 && v55 != 4)
          break;
        v59 = *(_QWORD *)(16 * (*(_DWORD *)(v54 + 12) & 0xFFFFFFFE) + 0x40);
        if (v59 && *(_BYTE *)(v59 + 5) != 1)
        {
          v58 = *(_DWORD *)(v59 + 80);
LABEL_115:
          if (v58)
            v59 = 16 * (v58 & 0xFFFFFFFE);
          else
            v59 = 0;
          goto LABEL_118;
        }
        while (1)
        {
LABEL_118:
          if ((*(_BYTE *)(v59 + 16) & 0x10) != 0 || (*(_WORD *)(v59 + 12) & 0xC00) != 0)
            goto LABEL_130;
          v60 = *(_DWORD **)(v59 + 48);
          if (v60 == (_DWORD *)2)
            break;
          if (!v60)
            goto LABEL_130;
          v59 = 16 * (*v60 & 0xFFFFFFFE);
        }
        v9 += 8;
        if ((unint64_t *)v9 == v12)
        {
LABEL_148:
          v61 = 0;
LABEL_131:
          if (v53)
          {
            if ((v53 & 1) != 0)
              v62 = v53 & 0xFFFFFFFFFFFFFFFELL;
            else
              v62 = *(_QWORD *)(v53 + 8);
          }
          else
          {
            v62 = 0;
          }
          v63 = *(_WORD **)(v62 + 8);
          v64 = *(unsigned int *)(v62 + 4);
          if ((*(_BYTE *)(v62 + 16) & 4) == 0)
          {
            if ((_DWORD)v64)
            {
              v65 = (unsigned __int16)*v63 - 48;
              if (v65 <= 9 && (*v63 != 48 || v64 <= 1))
              {
                v73 = v63 + 1;
                v74 = v64 - 1;
                while (v74)
                {
                  if (v65 <= 0x19999999)
                  {
                    v75 = *v73 - 48;
                    if (v75 <= 9)
                    {
                      v40 = __CFADD__(v75, 10 * v65);
                      v65 = v75 + 10 * v65;
                      ++v73;
                      --v74;
                      if (!v40)
                        continue;
                    }
                  }
                  goto LABEL_137;
                }
                goto LABEL_238;
              }
            }
            goto LABEL_137;
          }
          if ((_DWORD)v64)
          {
            v65 = *(unsigned __int8 *)v63 - 48;
            if (v65 <= 9 && (v64 < 2 || *(_BYTE *)v63 != 48))
            {
              v95 = v64 - 1;
              v96 = (unsigned __int8 *)v63 + 1;
              while (v95)
              {
                if (v65 <= 0x19999999)
                {
                  v97 = *v96 - 48;
                  if (v97 <= 9)
                  {
                    v40 = __CFADD__(v97, 10 * v65);
                    v65 = v97 + 10 * v65;
                    --v95;
                    ++v96;
                    if (!v40)
                      continue;
                  }
                }
                goto LABEL_137;
              }
LABEL_238:
              if (v65 != -1)
              {
LABEL_17:
                result = 0;
                goto LABEL_18;
              }
            }
          }
LABEL_137:
          if (*(_QWORD *)(*(_QWORD *)(*a2 + 41952) + 16) == v62)
            v61 = 1;
          if ((v61 & 1) != 0)
            goto LABEL_17;
          v66 = *(_WORD *)(v20 + 129) & 0x200;
          if (BYTE6(qword_1ECF4C780))
            v67 = v66 == 0;
          else
            v67 = 1;
          if (v67)
            v34 = v53;
          else
            v34 = 0;
          result = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)result = 1;
          v35 = 3;
LABEL_50:
          *(_WORD *)(result + 4) = v35;
          *(_QWORD *)(result + 24) = 0;
          *(_QWORD *)(result + 32) = v34;
          *(_QWORD *)(result + 8) = 0xFFFFFFFFLL;
          *(_QWORD *)(result + 16) = 0;
          goto LABEL_18;
        }
      }
      v58 = *(_DWORD *)(v54 + 12);
      goto LABEL_115;
    case 0xA:
    case 0xB:
      if (!a4)
        goto LABEL_128;
      do
      {
        v46 = *(_QWORD *)v9;
        v47 = *(unsigned __int8 *)(*(_QWORD *)v9 + 4);
        v48 = v47 == 2 || v47 == 7;
        if (!v48 || *(_QWORD *)(v46 + 24) || *(_BYTE *)(v46 + 5))
          goto LABEL_17;
        if (v47 != 2 && v47 != 4)
        {
          v50 = *(_DWORD *)(v46 + 12);
          goto LABEL_88;
        }
        v51 = *(_QWORD *)(16 * (*(_DWORD *)(v46 + 12) & 0xFFFFFFFE) + 0x40);
        if (v51 && *(_BYTE *)(v51 + 5) != 1)
        {
          v50 = *(_DWORD *)(v51 + 80);
LABEL_88:
          if (v50)
            v51 = 16 * (v50 & 0xFFFFFFFE);
          else
            v51 = 0;
        }
        if ((*(_BYTE *)(v51 + 16) & 0x10) != 0)
          goto LABEL_17;
        while (1)
        {
          if ((*(_WORD *)(v51 + 12) & 0xC00) != 0)
            goto LABEL_17;
          v52 = *(_DWORD **)(v51 + 48);
          if (v52 == (_DWORD *)2)
            break;
          if (!v52)
            goto LABEL_17;
          result = 0;
          v51 = 16 * (*v52 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v51 + 16) & 0x10) != 0)
            goto LABEL_18;
        }
        v9 += 8;
      }
      while ((unint64_t *)v9 != v12);
LABEL_128:
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)result = 1;
      v45 = 62;
LABEL_74:
      *(_WORD *)(result + 4) = v45;
      *(_DWORD *)(result + 8) = -1;
      *(_QWORD *)(result + 12) = 0;
      *(_QWORD *)(result + 28) = 0;
      *(_QWORD *)(result + 20) = 0;
      *(_DWORD *)(result + 36) = 0;
LABEL_18:
      *a1 = result;
      return result;
    case 0x12:
      v76 = *(_QWORD *)(v20 + 16);
      if (!a4)
        goto LABEL_178;
      v77 = 8 * a4;
      while (1)
      {
        v78 = *(_QWORD *)v9;
        if (*(unsigned __int8 *)(*(_QWORD *)v9 + 4) - 17 > 1
          || *(_QWORD *)(v78 + 24)
          || *(_BYTE *)(v78 + 5))
        {
          break;
        }
        v9 += 8;
        v77 -= 8;
        if (!v77)
        {
LABEL_178:
          v79 = 1;
          goto LABEL_179;
        }
      }
      v79 = 0;
LABEL_179:
      if (v76)
      {
        if ((v76 & 1) != 0)
          v80 = v76 & 0xFFFFFFFFFFFFFFFELL;
        else
          v80 = *(_QWORD *)(v76 + 8);
      }
      else
      {
        v80 = 0;
      }
      v81 = *(_BYTE **)(v80 + 8);
      v82 = *(unsigned int *)(v80 + 4);
      if ((*(_BYTE *)(v80 + 16) & 4) != 0)
      {
        if ((_DWORD)v82)
        {
          v83 = *v81 - 48;
          if (v83 <= 9 && (v82 < 2 || *v81 != 48))
          {
            v98 = v82 - 1;
            v99 = v81 + 1;
            while (v98)
            {
              if (v83 <= 0x19999999)
              {
                v100 = *v99 - 48;
                if (v100 <= 9)
                {
                  v40 = __CFADD__(v100, 10 * v83);
                  v83 = v100 + 10 * v83;
                  --v98;
                  ++v99;
                  if (!v40)
                    continue;
                }
              }
              goto LABEL_185;
            }
            goto LABEL_251;
          }
        }
      }
      else if ((_DWORD)v82)
      {
        v83 = *(unsigned __int16 *)v81 - 48;
        if (v83 <= 9 && (*(_WORD *)v81 != 48 || v82 <= 1))
        {
          v89 = (unsigned __int16 *)(v81 + 2);
          v90 = v82 - 1;
          while (v90)
          {
            if (v83 <= 0x19999999)
            {
              v91 = *v89 - 48;
              if (v91 <= 9)
              {
                v40 = __CFADD__(v91, 10 * v83);
                v83 = v91 + 10 * v83;
                ++v89;
                --v90;
                if (!v40)
                  continue;
              }
            }
            goto LABEL_185;
          }
LABEL_251:
          if (v83 != -1)
            goto LABEL_17;
        }
      }
LABEL_185:
      v84 = *(_QWORD **)(*a2 + 41952);
      if (v84[221] == v80 || v84[246] == v80 || v84[270] == v80)
        goto LABEL_17;
      v85 = v79 ^ 1;
      if (v84[2] == v80)
        v85 = 1;
      if ((v85 & 1) != 0)
        goto LABEL_17;
      v86 = *(_WORD *)(v20 + 129) & 0x200;
      if (BYTE6(qword_1ECF4C780))
        v87 = v86 == 0;
      else
        v87 = 1;
      if (v87)
        v34 = v76;
      else
        v34 = 0;
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)result = 1;
      v35 = 19;
      goto LABEL_50;
    case 0x13:
      if (!a4)
        goto LABEL_159;
      v68 = 8 * a4 - 8;
      do
      {
        v69 = *(_QWORD *)v9;
        if (*(unsigned __int8 *)(*(_QWORD *)v9 + 4) - 17 > 1 || *(_QWORD *)(v69 + 24))
          goto LABEL_17;
        v70 = *(unsigned __int8 *)(v69 + 5);
        v9 += 8;
        if (v70)
          v71 = 1;
        else
          v71 = v68 == 0;
        v68 -= 8;
      }
      while (!v71);
      if (v70)
        goto LABEL_17;
LABEL_159:
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)result = 1;
      v45 = 112;
      goto LABEL_74;
    case 0x16:
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)result = 1;
      v45 = 30;
      goto LABEL_74;
    default:
      goto LABEL_18;
  }
}

uint64_t JSC::isMegamorphic(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 1:
    case 3:
    case 19:
    case 30:
    case 34:
    case 62:
    case 112:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL JSC::canUseMegamorphicInById(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;

  v2 = *(_BYTE **)(a2 + 8);
  v3 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if ((_DWORD)v3)
    {
      v4 = *v2 - 48;
      if (v4 <= 9 && (v3 < 2 || *v2 != 48))
      {
        v13 = v3 - 1;
        v14 = v2 + 1;
        while (v13)
        {
          if (v4 <= 0x19999999)
          {
            v15 = *v14 - 48;
            if (v15 <= 9)
            {
              v11 = __CFADD__(v15, 10 * v4);
              v4 = v15 + 10 * v4;
              --v13;
              ++v14;
              if (!v11)
                continue;
            }
          }
          goto LABEL_4;
        }
LABEL_32:
        if (v4 != -1)
          return 0;
      }
    }
  }
  else if ((_DWORD)v3)
  {
    v4 = *(unsigned __int16 *)v2 - 48;
    if (v4 <= 9 && (*(_WORD *)v2 != 48 || v3 <= 1))
    {
      v8 = (unsigned __int16 *)(v2 + 2);
      v9 = v3 - 1;
      while (v9)
      {
        if (v4 <= 0x19999999)
        {
          v10 = *v8 - 48;
          if (v10 <= 9)
          {
            v11 = __CFADD__(v10, 10 * v4);
            v4 = v10 + 10 * v4;
            ++v8;
            --v9;
            if (!v11)
              continue;
          }
        }
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
LABEL_4:
  v5 = *(_QWORD **)(a1 + 41952);
  if (v5[221] != a2 && v5[246] != a2 && v5[270] != a2)
    return v5[2] != a2;
  return 0;
}

void JSC::InlineCacheCompiler::compile(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, JSC::CodeBlock *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const JSC::AccessCase ***v12;
  uint64_t v13;
  WTF *v14;
  const JSC::AccessCase **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const JSC::AccessCase *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  int v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char canReplace;
  uint64_t *v51;
  uint64_t v53;
  WTF *v54;
  const JSC::AccessCase *v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8x8_t v78;
  unint64_t v79;
  WTF *v80;
  unsigned int v81;
  int v82;
  size_t v83;
  _DWORD *v84;
  JSC::CodeBlock **v85;
  uint64_t v86;
  JSC::CodeBlock **v87;
  uint64_t v88;
  JSC::CodeBlock *v89;
  unsigned int **v90;
  unsigned int **v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  WTF *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  _QWORD *v110;
  uint64_t v111;
  _DWORD *v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  unsigned int v116;
  char v117;
  char v118;
  int v119;
  JSC::AccessCase *v120;
  char doesJSCalls;
  unsigned int v122;
  uint64_t v123;
  uint64_t i;
  int v125;
  JSC::AccessCase *v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  JSC::AccessCase *v139;
  const JSC::PropertyTable *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unsigned int v146;
  JSC::CodeBlock *v147;
  uint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  WTF *v151;
  unint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  BOOL v157;
  uint64_t v158;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  __int16 v168;
  unsigned __int8 *v169;
  WTF *v170;
  unsigned int v171;
  _BYTE *v172;
  char v173;
  __int16 v174;
  char v175;
  __int16 v176;
  WTF *v177;
  unsigned int v178;
  uint64_t v179;
  char v180;
  __int16 v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  WTF *v185;
  unsigned int v186;
  char v187;
  uint64_t v188;
  int v189;
  JSC::CodeBlock **v190;
  unsigned int v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  JSC::CodeBlock **v204;
  WTF *v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int8x8_t v216;
  int v217;
  uint64_t v218;
  _DWORD *v219;
  uint64_t *v220;
  int v221;
  unint64_t v222;
  WTF *v223;
  WTF *v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  WTF *v228;
  uint64_t v229;
  int v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  unint64_t v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unsigned int v244;
  char v245;
  WTF *v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  unsigned int v261;
  _DWORD *v262;
  uint64_t *v263;
  int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  WTF *v268;
  WTF *v269;
  unsigned int v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unsigned int v279;
  char v280;
  WTF *v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  unsigned int *v292;
  _DWORD *v293;
  __int16 v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  unsigned int v301;
  int *v302;
  int *v303;
  int v304;
  char *v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unsigned int v313;
  WTF *v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  unsigned int v325;
  int *v326;
  int *v327;
  int v328;
  WTF::StringImpl *v329;
  WTF *v330;
  int v331;
  JSC::AssemblerBuffer *v332;
  JSC::AssemblerBuffer *v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  WTF *v337;
  WTF *v338;
  char *v340;
  JSC::AssemblerBuffer *v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  WTF *v345;
  WTF *v346;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  WTF *v351;
  WTF *v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  const JSC::AccessCase **v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  WTF *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  int v431;
  uint64_t v432;
  unsigned int v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  WTF *v437;
  WTF *v439;
  WTF *v441;
  WTF *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int j;
  unsigned int v452;
  char v453;
  int *v454;
  int *v455;
  int v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  const void *v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  __int16 v464;
  char v465;
  int v466;
  char v467;
  __int16 v468;
  char v469;
  __int16 v470;
  uint64_t v471;
  __int128 v472;
  JSC::CodeBlock *v473;
  uint64_t v474;
  char v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  __int16 v481;
  char v482;
  int v483;
  char v484;
  __int16 v485;
  char v486;
  __int16 v487;
  uint64_t v488;
  __int128 v489;
  JSC::CodeBlock *v490;
  uint64_t v491;
  char v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  WTF *v500;
  WTF *v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  JSC::CodeBlock *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v550;
  pthread_key_t *v551;
  void *v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  WTF *v560;
  uint64_t v561;
  unsigned int v562;
  char v563;
  void *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  _BOOL4 v572;
  uint64_t v573;
  char *v574;
  uint64_t v575;
  __int128 *p_start;
  uint64_t v577;
  size_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unsigned int *v586;
  WTF **v587;
  uint64_t v588;
  int v589;
  unsigned int v590;
  unsigned int *v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int *v594;
  unsigned int v595;
  unsigned int v596;
  void *v597;
  uint64_t v598;
  const JSC::PropertyTable *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int v604;
  uint64_t v605;
  unsigned int v606;
  __int128 v607;
  uint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  JSC::JITStubRoutine *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t v615;
  unsigned int **v616;
  unint64_t v617;
  unsigned int v618;
  uint64_t v619;
  unsigned int **v620;
  uint64_t v621;
  unsigned int *v622;
  unsigned int v623;
  unsigned int v624;
  unint64_t v625;
  unsigned int **v626;
  unsigned int **v627;
  unsigned int *v628;
  unsigned int v629;
  char v630;
  uint64_t v631;
  char v632;
  uint8x8_t v633;
  int v634;
  WTF **v635;
  WTF *v636;
  _QWORD *v637;
  uint64_t v638;
  JSC::JITStubRoutine *v639;
  WTF *v640;
  unsigned int *v641;
  unsigned int v642;
  unsigned int v643;
  void *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  WTF *v651;
  void *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  WTF *v660;
  unsigned int *v661;
  void *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  WTF *v669;
  WTF *v670;
  unsigned int *v671;
  unsigned int v672;
  unsigned int v673;
  WTF *v674;
  WTF *v676;
  uint64_t *v678;
  uint64_t v679;
  uint64_t v680;
  WTF *v681;
  WTF *v682;
  uint64_t v683;
  unsigned int *v684;
  uint64_t v685;
  unsigned int v686;
  uint64_t *v687;
  uint64_t v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  unsigned int v693;
  uint64_t v694;
  int v695;
  int v696;
  BOOL v697;
  unint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  char *v714;
  uint64_t v715;
  uint64_t v716;
  const void **v717;
  WTF **v718;
  uint64_t v719;
  void *v720;
  unint64_t v721;
  void *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unsigned int v729;
  unint64_t v730;
  void *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  JSC::AdaptiveInferredPropertyValueWatchpointBase *v748;
  int v749;
  int v750;
  int v752;
  JSC::AssemblerBuffer *v753;
  JSC::AssemblerBuffer *v754;
  JSC::AssemblerBuffer *v755;
  _QWORD *v756;
  unsigned int v757;
  int v758;
  const char *v759;
  int v760;
  int v761;
  int v762;
  char v763;
  JSC::JITStubRoutine *v767;
  WTF *v768;
  WTF **v769;
  JSC::ExecutableMemoryHandle *v770;
  const void *v771;
  unsigned int v772;
  int v773;
  char v774;
  __int16 v775;
  char v776;
  WTF *v777;
  uint64_t v778;
  _BYTE v779[24];
  WTF *v780[2];
  _QWORD v781[3];
  char v782;
  _DWORD v783[3];
  _DWORD v784[3];
  int v785;
  uint64_t v786;
  int v787;
  int v788;
  int v789;
  uint64_t v790;
  int v791;
  int v792;
  _DWORD v793[2];
  char v794;
  __int16 v795;
  char v796;
  WTF *v797;
  uint64_t v798;
  unsigned int *v799;
  _QWORD v800[2];
  uint64_t v801;
  uint64_t v802;
  int v803;
  WTF *v804;
  uint64_t v805;
  _BYTE v806[128];
  WTF *v807;
  uint64_t v808;
  _BYTE v809[64];
  WTF **v810;
  JSC::ExecutableMemoryHandle *v811;
  JSC::InlineCacheHandler *v812;
  __int128 v813;
  JSC::CodeBlock *v814;
  WTF *v815;
  JSC::CodeBlock *v816;
  uint64_t v817;
  unsigned int v818;
  char v819;
  int v820;
  unsigned int v821;
  __int128 start;
  __int128 v823;
  uint64_t v824;
  WTF *v825;
  int v826;
  uint64_t v827;
  WTF *v828;
  int v829;
  uint64_t v830;
  WTF *v831;
  int v832;
  unsigned int v833;
  uint64_t v834;
  unsigned int v835;
  WTF *v836;
  int v837;
  unsigned int v838;
  _BYTE v839[16];
  uint64_t v840;
  int v841;
  unsigned int v842;
  int v843;
  _QWORD v844[17];
  unsigned int v845;
  int v846;
  int v847;
  char v848;
  uint64_t v849;
  char v850;
  int v851;
  char v852;
  uint64_t v853;

  v853 = *MEMORY[0x1E0C80C00];
  v807 = (WTF *)v809;
  v808 = 8;
  v804 = (WTF *)v806;
  v10 = 16;
  v805 = 16;
  v11 = *(unsigned int *)(a3 + 12);
  if (v11 >= 0x11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1981A4740);
    }
    v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * v11));
    LODWORD(v805) = v11;
    v804 = v14;
    v12 = (const JSC::AccessCase ***)a3;
    v13 = a1;
    v11 = *(unsigned int *)(a3 + 12);
  }
  else
  {
    v12 = (const JSC::AccessCase ***)a3;
    v13 = a1;
    v14 = (WTF *)v806;
  }
  if ((_DWORD)v11)
  {
    v15 = *v12;
    v16 = (uint64_t)&(*v12)[v11];
    v17 = (uint64_t)&v814;
    v18 = 1;
    v9 = 3;
    v19 = 24;
    v20 = 1;
    v21 = a3;
    while (1)
    {
      v22 = *v15;
      v23 = *((_QWORD *)*v15 + 2);
      if (v23)
        v24 = v23 + 8;
      else
        v24 = 0;
      if (v23)
        v25 = v23 + 8 + *(unsigned int *)(v23 + 4) * (unint64_t)v19;
      else
        v25 = 0;
      if (v24 != v25)
      {
        v26 = (unint64_t *)(v24 + 8);
        do
        {
          if ((*v26 & 0xFF000000000000) == 0x5000000000000)
          {
            JSC::ObjectPropertyCondition::isWatchableAssumingImpurePropertyWatchpoint((uint64_t)(v26 - 1), 1, 0, (uint64_t)a4, a5, a6, a7, a8);
            if ((v62 & 1) == 0)
              goto LABEL_69;
          }
          else
          {
            if ((*v26 & 0xFFFFFFFFFFFFFFLL) == 0)
              goto LABEL_69;
            JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(v26, 0, 16 * (*(_DWORD *)*(v26 - 1) & 0xFFFFFFFE), 0, a5, a6, a7, a8);
            if (!v27)
              goto LABEL_69;
          }
          v28 = v26 + 2;
          v26 += 3;
        }
        while (v28 != (unint64_t *)v25);
        v22 = *v15;
      }
      v29 = *(_QWORD *)a1;
      *(_QWORD *)&v813 = v17;
      *((_QWORD *)&v813 + 1) = v9;
      v30 = *((unsigned __int8 *)v22 + 4);
      if (v30 > 0x20 || ((v18 << v30) & 0x100000014) == 0)
        break;
      v33 = *(_QWORD *)(16 * (*((_DWORD *)v22 + 3) & 0xFFFFFFFE) + 0x40);
      if (v33)
      {
        if (*(_BYTE *)(v33 + 5) != 1)
        {
          v32 = *(_DWORD *)(v33 + 80);
          goto LABEL_23;
        }
        goto LABEL_26;
      }
      v34 = *((_QWORD *)v22 + 4);
      if (!v34)
        goto LABEL_46;
LABEL_30:
      v36 = *((_QWORD *)v22 + 2);
      if (v36)
        v37 = v36 + 8;
      else
        v37 = 0;
      if (v36)
        v38 = v36 + 8 + *(unsigned int *)(v36 + 4) * (unint64_t)v19;
      else
        v38 = 0;
      while (v37 != v38)
      {
        v39 = *(_QWORD *)(v37 + 8);
        if ((v39 & 0xFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_40;
        if (BYTE6(v39) >= 3u)
        {
          if (BYTE6(v39) > 7u)
            goto LABEL_847;
          LODWORD(v39) = (_DWORD)v18 << SBYTE6(v39);
          if ((((_DWORD)v18 << SBYTE6(v39)) & 0x98) != 0)
            goto LABEL_40;
          if ((v39 & 0x60) == 0)
          {
LABEL_847:
            __break(0xC471u);
            JUMPOUT(0x1981A4508);
          }
        }
        if ((*(_DWORD *)(16 * (**(_DWORD **)v37 & 0xFFFFFFFE) + 0x10) & 3) != 2)
        {
          v40 = *(_WORD *)(16 * (**(_DWORD **)v37 & 0xFFFFFFFE) + 0xC);
          if ((v40 & 0x18) == 0x10 && (v40 & 0x20) != 0)
            goto LABEL_417;
        }
LABEL_40:
        v37 += 24;
      }
      v41 = *((_QWORD *)v22 + 3);
      if (v41)
      {
        v291 = 0;
        v292 = *(unsigned int **)(v41 + 8);
        if (v292)
          v293 = v292 + 1;
        else
          v293 = 0;
        if (v292)
          v291 = (uint64_t)&v292[*v292 + 1];
        while (v293 != (_DWORD *)v291)
        {
          if ((*(_DWORD *)(16 * (*v293 & 0xFFFFFFFE) + 0x10) & 3) != 2)
          {
            v294 = *(_WORD *)(16 * (*v293 & 0xFFFFFFFE) + 0xC);
            if ((v294 & 0x18) == 0x10 && (v294 & 0x20) != 0)
              goto LABEL_417;
          }
          ++v293;
        }
      }
LABEL_46:
      if (v30 - 8 < 8 || !v30)
      {
        v42 = (WTF *)*((_QWORD *)v22 + 5);
        v836 = v42;
        if (v42)
        {
          v290 = HIDWORD(v813);
          if (HIDWORD(v813) == DWORD2(v813))
          {
            WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v813, (unint64_t)&v836);
          }
          else
          {
            *(_QWORD *)(v813 + 8 * HIDWORD(v813)) = v42;
            HIDWORD(v813) = v290 + 1;
          }
        }
      }
      if (v33)
      {
        v43 = *(_QWORD *)(v33 + 64);
        if (v43)
        {
          if (*(_BYTE *)(v43 + 5) != 1)
          {
            v44 = *(_QWORD *)(v43 + 72);
            if (v44)
            {
              v45 = *(_QWORD *)(v44 + 8);
              if ((v45 & 1) != 0)
              {
                if ((*(_QWORD *)(v44 + 8) & 6) != 4)
                {
                  v63 = (v45 >> 1) & 3;
                  v45 = WTF::fastMalloc((WTF *)0x18);
                  *(_DWORD *)v45 = v18;
                  *(_BYTE *)(v45 + 4) = v63;
                  *(_BYTE *)(v45 + 5) = 0;
                  *(_QWORD *)(v45 + 8) = v45 + 8;
                  *(_QWORD *)(v45 + 16) = v45 + 8;
                  __dmb(0xAu);
                  *(_QWORD *)(v44 + 8) = v45;
                  goto LABEL_54;
                }
              }
              else if (*(_BYTE *)(v45 + 4) != 2)
              {
LABEL_54:
                v836 = (WTF *)v45;
                v46 = HIDWORD(v813);
                if (HIDWORD(v813) == DWORD2(v813))
                {
                  WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v813, (unint64_t)&v836);
                }
                else
                {
                  *(_QWORD *)(v813 + 8 * HIDWORD(v813)) = v45;
                  HIDWORD(v813) = v46 + 1;
                }
              }
            }
          }
        }
      }
      v47 = v20;
      if (!HIDWORD(v813))
        goto LABEL_61;
      v48 = v813;
      v49 = 8 * HIDWORD(v813);
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v48 + 4) == 2)
          goto LABEL_63;
        v48 += 8;
        v49 -= 8;
      }
      while (v49);
      v47 = v20;
LABEL_61:
      while (v47 < *(unsigned int *)(v21 + 12))
      {
        canReplace = JSC::AccessCase::canReplace(*(JSC::AccessCase **)(*(_QWORD *)v21 + 8 * v47++), *v15);
        if ((canReplace & 1) != 0)
          goto LABEL_63;
      }
      v53 = HIDWORD(v805);
      if (HIDWORD(v805) == (_DWORD)v805)
      {
        v405 = (const JSC::AccessCase **)WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v804, HIDWORD(v805) + 1, (unint64_t)v15);
        v53 = HIDWORD(v805);
        v54 = v804;
        v55 = *v405;
        do
          v406 = __ldaxr((unsigned int *)v55);
        while (__stlxr(v406 + 1, (unsigned int *)v55));
      }
      else
      {
        v54 = v804;
        v55 = *v15;
        do
          v56 = __ldaxr((unsigned int *)v55);
        while (__stlxr(v56 + 1, (unsigned int *)v55));
      }
      *((_QWORD *)v54 + v53) = v55;
      ++HIDWORD(v805);
      v57 = HIDWORD(v808);
      v58 = HIDWORD(v813) + (unint64_t)HIDWORD(v808);
      if (v58 > v808)
      {
        v348 = v808 + ((unint64_t)v808 >> 2);
        if (v348 >= 0x10)
          v349 = v348 + 1;
        else
          v349 = 16;
        if (v349 <= v58)
          v350 = HIDWORD(v813) + (unint64_t)HIDWORD(v808);
        else
          v350 = v349;
        v351 = v807;
        if (v350 < 9)
        {
LABEL_852:
          v352 = (WTF *)v809;
          v807 = (WTF *)v809;
          LODWORD(v808) = 8;
          goto LABEL_486;
        }
        if (!(v350 >> 29))
        {
          v352 = (WTF *)WTF::fastMalloc((WTF *)(8 * v350));
          LODWORD(v808) = v350;
          v807 = v352;
LABEL_486:
          memcpy(v352, v351, 8 * v57);
          if (v809 != (_BYTE *)v351 && v351)
          {
            if (v807 == v351)
            {
              v807 = 0;
              LODWORD(v808) = 0;
            }
            WTF::fastFree((unint64_t)v351, a2, (uint64_t)v14, (uint64_t)a4, a5, a6, a7, a8);
          }
          goto LABEL_75;
        }
        __break(0xC471u);
LABEL_871:
        __break(1u);
LABEL_872:
        __break(0xC471u);
        JUMPOUT(0x1981A46E0);
      }
LABEL_75:
      v51 = (uint64_t *)v813;
      if (HIDWORD(v813))
      {
        v59 = HIDWORD(v808);
        v60 = 8 * HIDWORD(v813);
        do
        {
          v61 = *v51++;
          *((_QWORD *)v807 + v59++) = v61;
          v60 -= 8;
        }
        while (v60);
        HIDWORD(v808) = v59;
LABEL_63:
        v51 = (uint64_t *)v813;
      }
      if ((uint64_t *)v17 != v51 && v51 != 0)
      {
        *(_QWORD *)&v813 = 0;
        DWORD2(v813) = 0;
        WTF::fastFree((unint64_t)v51, a2, (uint64_t)v14, (uint64_t)a4, a5, a6, a7, a8);
      }
LABEL_69:
      ++v15;
      ++v20;
      if (v15 == (const JSC::AccessCase **)v16)
      {
        v14 = v804;
        v13 = a1;
        goto LABEL_90;
      }
    }
    v32 = *((_DWORD *)v22 + 3);
LABEL_23:
    if (v32)
      v33 = 16 * (v32 & 0xFFFFFFFE);
    else
      v33 = 0;
LABEL_26:
    v34 = *((_QWORD *)v22 + 4);
    if (!v34)
      goto LABEL_46;
    if (v33)
    {
      if ((*(_DWORD *)(v33 + 16) & 3) != 2)
      {
        v35 = *(_WORD *)(v33 + 12);
        if ((v35 & 0x18) == 0x10 && (v35 & 0x20) != 0)
        {
LABEL_417:
          if ((v34 & 1) != 0)
            v329 = (WTF::StringImpl *)(v34 & 0xFFFFFFFFFFFFFFFELL);
          else
            v329 = *(WTF::StringImpl **)(v34 + 8);
          v330 = (WTF *)JSC::VM::ensureWatchpointSetForImpureProperty(v29, v329, (uint64_t)v14, (uint64_t)a4, a5, a6, a7, a8);
          v836 = v330;
          v331 = HIDWORD(v813);
          if (HIDWORD(v813) == DWORD2(v813))
          {
            WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v813, (unint64_t)&v836);
          }
          else
          {
            *(_QWORD *)(v813 + 8 * HIDWORD(v813)) = v330;
            HIDWORD(v813) = v331 + 1;
          }
          v30 = *((unsigned __int8 *)v22 + 4);
          goto LABEL_46;
        }
      }
    }
    goto LABEL_30;
  }
LABEL_90:
  JSC::InlineCacheCompiler::tryFoldToMegamorphic((unint64_t *)&v813, (_QWORD *)v13, (uint64_t)v14, HIDWORD(v805), a5, a6, a7, a8);
  if ((_QWORD)v813)
  {
    if (HIDWORD(v805))
    {
      v223 = v804;
      v224 = (WTF *)((char *)v804 + 8 * HIDWORD(v805));
      do
      {
        v225 = *(unsigned int **)v223;
        *(_QWORD *)v223 = 0;
        if (v225)
        {
          do
          {
            v226 = __ldaxr(v225);
            v227 = v226 - 1;
          }
          while (__stlxr(v227, v225));
          if (!v227)
          {
            atomic_store(1u, v225);
            JSC::AccessCase::operator delete((unint64_t)v225, v64, v65, v66, v67, v68, v69, v70);
          }
        }
        v223 = (WTF *)((char *)v223 + 8);
      }
      while (v223 != v224);
    }
    HIDWORD(v805) = 0;
    if ((_DWORD)v808)
    {
      if (HIDWORD(v808))
        HIDWORD(v808) = 0;
      v228 = v807;
      if (v809 != (_BYTE *)v807)
      {
        if (!v807
          || (v807 = 0,
              LODWORD(v808) = 0,
              WTF::fastFree((unint64_t)v228, v64, v65, v66, v67, v68, v69, v70),
              !v807))
        {
          v807 = (WTF *)v809;
          LODWORD(v808) = 8;
        }
      }
    }
    v229 = v813;
    v836 = (WTF *)v813;
    *(_QWORD *)&v813 = 0;
    v230 = HIDWORD(v805);
    if (HIDWORD(v805) == (_DWORD)v805)
    {
      WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>((uint64_t)&v804, (unint64_t)&v836);
    }
    else
    {
      v836 = 0;
      *((_QWORD *)v804 + HIDWORD(v805)) = v229;
      HIDWORD(v805) = v230 + 1;
    }
    v231 = (unsigned int *)v836;
    v836 = 0;
    if (v231)
    {
      do
      {
        v232 = __ldaxr(v231);
        v233 = v232 - 1;
      }
      while (__stlxr(v233, v231));
      if (!v233)
      {
        atomic_store(1u, v231);
        JSC::AccessCase::operator delete((unint64_t)v231, v64, v65, v66, v67, v68, v69, v70);
      }
    }
    v234 = (unsigned int *)v813;
    *(_QWORD *)&v813 = 0;
    if (v234)
    {
      do
      {
        v235 = __ldaxr(v234);
        v236 = v235 - 1;
      }
      while (__stlxr(v236, v234));
      if (!v236)
      {
        atomic_store(1u, v234);
        JSC::AccessCase::operator delete((unint64_t)v234, v64, v65, v66, v67, v68, v69, v70);
      }
    }
  }
  JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)v800, *(_QWORD *)(v13 + 16), 0xFFu);
  *(_QWORD *)(v13 + 40) = v800;
  *(_BYTE *)(v13 + 176) = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)v800);
  v79 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 16) + 122);
  v799 = 0;
  v836 = (WTF *)v839;
  v837 = 16;
  v80 = v804;
  if (v804 == (WTF *)v806)
  {
    v81 = HIDWORD(v805);
    memcpy(v839, v806, 8 * HIDWORD(v805));
    v82 = 16;
    v80 = (WTF *)v839;
  }
  else
  {
    v804 = (WTF *)v806;
    v836 = v80;
    v82 = v805;
    v81 = HIDWORD(v805);
    LODWORD(v805) = 16;
    v837 = v82;
  }
  HIDWORD(v805) = 0;
  v838 = v81;
  if (!v81)
  {
    v799 = 0;
LABEL_120:
    v104 = v836;
    goto LABEL_121;
  }
  *(_QWORD *)&v813 = &v814;
  DWORD2(v813) = 16;
  if (v80 == (WTF *)v839)
  {
    v83 = 8 * v81;
    memcpy(&v814, v839, v83);
  }
  else
  {
    v836 = (WTF *)v839;
    *(_QWORD *)&v813 = v80;
    v837 = 16;
    DWORD2(v813) = v82;
    v83 = 8 * v81;
  }
  v838 = 0;
  HIDWORD(v813) = v81;
  v84 = (_DWORD *)WTF::fastMalloc((WTF *)(v83 + 8));
  v85 = (JSC::CodeBlock **)v813;
  v86 = HIDWORD(v813);
  *v84 = v81;
  if ((_DWORD)v86)
  {
    v87 = (JSC::CodeBlock **)(v84 + 2);
    v88 = 8 * v86;
    do
    {
      v89 = *v85;
      *v85++ = 0;
      *v87++ = v89;
      v88 -= 8;
    }
    while (v88);
    v90 = (unsigned int **)v813;
    v91 = (unsigned int **)(v813 + 8 * v86);
    do
    {
      v92 = *v90;
      *v90 = 0;
      if (v92)
      {
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v92);
          JSC::AccessCase::operator delete((unint64_t)v92, v71, v72, v73, v74, v75, v76, v77);
        }
      }
      ++v90;
    }
    while (v90 != v91);
    v85 = (JSC::CodeBlock **)v813;
  }
  if (&v814 != v85 && v85 != 0)
  {
    *(_QWORD *)&v813 = 0;
    DWORD2(v813) = 0;
    WTF::fastFree((unint64_t)v85, v71, v72, v73, v74, v75, v76, v77);
  }
  v96 = v799;
  v799 = v84;
  if (v96)
  {
    WTF::VectorTypeOperations<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>::destruct((unsigned int **)v96 + 1, (unsigned int **)&v96[2 * *v96 + 2], v72, v73, v74, v75, v76, v77);
    WTF::fastFree((unint64_t)v96, v97, v98, v99, v100, v101, v102, v103);
  }
  v104 = v836;
  if (v838)
  {
    v105 = (WTF *)((char *)v836 + 8 * v838);
    do
    {
      v106 = *(unsigned int **)v104;
      *(_QWORD *)v104 = 0;
      if (v106)
      {
        do
        {
          v107 = __ldaxr(v106);
          v108 = v107 - 1;
        }
        while (__stlxr(v108, v106));
        if (!v108)
        {
          atomic_store(1u, v106);
          JSC::AccessCase::operator delete((unint64_t)v106, v71, v72, v73, v74, v75, v76, v77);
        }
      }
      v104 = (WTF *)((char *)v104 + 8);
    }
    while (v104 != v105);
    goto LABEL_120;
  }
LABEL_121:
  if (v839 != (_BYTE *)v104 && v104 != 0)
  {
    v836 = 0;
    v837 = 0;
    WTF::fastFree((unint64_t)v104, v71, v72, v73, v74, v75, v76, v77);
  }
  v110 = (_QWORD *)(v13 + 1816);
  v756 = (_QWORD *)(v13 + 1816);
  if (!v799)
  {
    v111 = 0;
    v112 = (_DWORD *)(v13 + 1828);
    v113 = *(_DWORD *)(v13 + 1828);
    goto LABEL_537;
  }
  v111 = *v799;
  v112 = (_DWORD *)(v13 + 1828);
  v113 = *(_DWORD *)(v13 + 1828);
  if (v113 >= v111)
  {
LABEL_537:
    WTF::VectorTypeOperations<std::unique_ptr<JSC::OptimizingCallLinkInfo>>::destruct((JSC::CallLinkInfo **)(*v756 + 8 * v111), (JSC::CallLinkInfo **)(*v756 + 8 * v113), v72, v73, v74, v75, v76, v77, v78);
    goto LABEL_132;
  }
  if (*(_DWORD *)(v13 + 1824) < v111)
    WTF::Vector<std::unique_ptr<JSC::OptimizingCallLinkInfo>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 1816, *v799);
  if (*v110)
    bzero((void *)(*v110 + 8 * *v112), 8 * v111 - 8 * *v112);
LABEL_132:
  *v112 = v111;
  v797 = 0;
  v798 = 0;
  if (v799)
    v114 = (uint64_t *)(v799 + 2);
  else
    v114 = 0;
  if (v799)
    v115 = (uint64_t)&v799[2 * *v799 + 2];
  else
    v115 = 0;
  v116 = (v79 < 0x1D) & (0x118683CFu >> v79);
  if (v114 == (uint64_t *)v115)
  {
    v757 = 0;
    v763 = 0;
    v752 = 0;
    v132 = 0;
    v131 = 0;
    v750 = 0;
LABEL_160:
    v118 = -1;
    goto LABEL_161;
  }
  v757 = 0;
  v758 = 0;
  v117 = 0;
  v752 = 0;
  v760 = 0;
  v750 = 0;
  v118 = 0;
  v119 = 0;
  do
  {
    if (v119)
    {
      v761 = 0;
      v119 = 1;
    }
    else if (JSC::needsScratchFPR(*(unsigned __int8 *)(*v114 + 4)))
    {
      for (i = 0; i != 23; ++i)
      {
        v118 = JSC::FPRInfo::toRegister::registerForIndex[i];
        v122 = (v118 + 32) & 0x7F;
        if (v122 >= 0x40)
          goto LABEL_871;
        v123 = 1 << v122;
        if ((v802 & v123) == 0 && ((v800[0] | v801) & v123) == 0)
        {
          v761 = 0;
          v119 = 1;
          v801 |= 1 << (v118 + 32);
          goto LABEL_142;
        }
      }
      v353 = 0;
      while (1)
      {
        v118 = JSC::FPRInfo::toRegister::registerForIndex[v353];
        v354 = (v118 + 32) & 0x7F;
        if (v354 >= 0x40)
          goto LABEL_871;
        if (!((1 << v354) & v802 | v801 & (1 << v354)))
          break;
        if (++v353 == 23)
        {
          __break(0xC471u);
          JUMPOUT(0x1981A2AC8);
        }
      }
      v761 = 0;
      v119 = 1;
      v801 |= 1 << (v118 + 32);
      ++v803;
    }
    else
    {
      v119 = 0;
      v761 = 1;
    }
LABEL_142:
    if (JSC::AccessCase::doesCalls(*v114))
    {
      JSC::AccessCase::collectDependentCells((_QWORD *)*v114, *(_QWORD *)a1, (uint64_t)&v797);
      v757 = 1;
    }
    v120 = (JSC::AccessCase *)*v114;
    doesJSCalls = JSC::doesJSCalls(*(unsigned __int8 *)(*v114 + 4));
    if (((v79 < 0x1D) & (0x118683CFu >> v79)) != 0)
    {
      v116 &= JSC::AccessCase::guardedByStructureCheckSkippingConstantIdentifierCheck(v120);
    }
    else
    {
      v125 = JSC::AccessCase::requiresIdentifierNameMatch(v120);
      v126 = (JSC::AccessCase *)*v114;
      if (v125)
      {
        v127 = *((_QWORD *)v126 + 4);
        if ((v127 & 1) != 0)
          v128 = v127 & 0xFFFFFFFFFFFFFFFELL;
        else
          v128 = *(_QWORD *)(v127 + 8);
        v129 = *(_DWORD *)(v128 + 16) & 0x20;
        v760 |= v129 >> 5;
        v758 |= v129 == 0;
      }
      else
      {
        v130 = JSC::AccessCase::requiresInt32PropertyCheck(v126);
        v750 |= v130 ^ 1;
        v752 |= v130;
      }
    }
    v117 |= doesJSCalls;
    ++v114;
  }
  while (v114 != (uint64_t *)v115);
  v763 = v117;
  v131 = v760;
  v132 = v758;
  if (v761)
    goto LABEL_160;
LABEL_161:
  *(_BYTE *)(a1 + 177) = v118;
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)&v836, a4);
  *(_QWORD *)(a1 + 32) = &v836;
  *(_QWORD *)(a1 + 168) = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(v800, (JSC::ScratchRegisterAllocator *)&v836, 1, v133, v134, v135, v136, v137);
  v759 = (const char *)(a1 + 168);
  v145 = &qword_199123000;
  if (!v799 || (v146 = *v799) == 0)
  {
    v148 = a1;
    JSC::ARM64Assembler::label(&v840, (uint64_t)v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144, (int *)&v813);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v844, 335544320, v386, v387, v388, v389, v390, v391);
    if (v852)
      v398 = 69;
    else
      v398 = 65;
    v793[0] = v813;
    v793[1] = 0;
    v794 = v398;
    v795 = 15;
    v796 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)(a1 + 88), v793, v392, v393, v394, v395, v396, v397);
    v147 = a4;
    goto LABEL_588;
  }
  if ((v116 & (v146 != 1)) != 0)
  {
    v147 = a4;
    v148 = a1;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "Cases start (allGuardedByStructureCheck)");
    JSC::MacroAssemblerARM64::load32((uint64_t)&v836, *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 116), *(char *)(a1 + 176), (uint64_t)v140, v141, v142, v143, v144);
    v149 = v799;
    if (!v799)
    {
      v780[0] = (WTF *)v781;
      v780[1] = (WTF *)v10;
      v151 = (WTF *)v781;
      goto LABEL_539;
    }
    v150 = *v799;
    v780[0] = (WTF *)v781;
    LODWORD(v780[1]) = 16;
    HIDWORD(v780[1]) = v150;
    if (v150 >= 0x11)
    {
      if (v150 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1981A4748);
      }
      v151 = (WTF *)WTF::fastMalloc((WTF *)(8 * v150));
      LODWORD(v780[1]) = v150;
      v780[0] = v151;
      v149 = v799;
      if (!v799)
      {
        v147 = a4;
        v148 = a1;
        goto LABEL_539;
      }
      LODWORD(v150) = *v799;
      v147 = a4;
      v148 = a1;
    }
    else
    {
      v151 = (WTF *)v781;
    }
    if ((_DWORD)v150)
    {
      v152 = 0;
      v153 = v149 + 2;
      v154 = 8 * HIDWORD(v780[1]);
      do
      {
        v155 = *(_QWORD *)&v153[v152 / 4];
        v156 = *(unsigned __int8 *)(v155 + 4);
        v157 = v156 > 0x20;
        v158 = (1 << v156) & 0x100000014;
        if (v157 || v158 == 0)
        {
          v160 = *(_DWORD *)(v155 + 12);
        }
        else
        {
          v161 = *(_QWORD *)(16 * (*(_DWORD *)(v155 + 12) & 0xFFFFFFFE) + 0x40);
          if (!v161 || *(_BYTE *)(v161 + 5) == 1)
            goto LABEL_180;
          v160 = *(_DWORD *)(v161 + 80);
        }
        if (v160)
          v161 = 16 * (v160 & 0xFFFFFFFE);
        else
          v161 = 0;
LABEL_180:
        if (v154 == v152)
        {
          __break(0xC471u);
          JUMPOUT(0x1981A46C0);
        }
        *(_QWORD *)((char *)v151 + v152) = (int)(v161 >> 4);
        v152 += 8;
      }
      while (8 * v150 != v152);
    }
LABEL_539:
    JSC::BinarySwitch::BinarySwitch((uint64_t)&v813, *(_BYTE *)(v148 + 176), (uint64_t)v151, HIDWORD(v780[1]), 0);
    if (JSC::BinarySwitch::advance((JSC::BinarySwitch *)&v813, (JSC::MacroAssembler *)&v836, v407, v408, v409, v410, v411, v412))
    {
      do
      {
        if (HIDWORD(v816) <= v835)
        {
          __break(0xC471u);
          JUMPOUT(0x1981A46D0);
        }
        v413 = *((unsigned int *)v815 + 4 * v835 + 2);
        if (*v799 <= v413)
        {
          __break(0xC471u);
          JUMPOUT(0x1981A36E8);
        }
        v414 = *(unsigned __int8 *)(*(_QWORD *)(v148 + 16) + 122);
        if (v414 >= 4)
        {
          v157 = v414 > 0x1C;
          v421 = (1 << v414) & 0x118683C0;
          if (v157 || v421 == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A302CLL);
          }
        }
        JSC::InlineCacheCompiler::generateWithConditionChecks((JSC::InlineCacheCompiler *)v148, v413, *(JSC::AccessCase **)&v799[2 * v413 + 2], v140, v141, v142, v143, v144);
      }
      while ((JSC::BinarySwitch::advance((JSC::BinarySwitch *)&v813, (JSC::MacroAssembler *)&v836, v415, v416, v417, v418, v419, v420) & 1) != 0);
    }
    v423 = v831;
    v424 = v833;
    if (v833)
    {
      v425 = *(unsigned int *)(v148 + 96);
      v426 = *(unsigned int *)(v148 + 100);
      v427 = v426 + v833;
      if (v427 > v425)
      {
        v428 = v425 + (v425 >> 2);
        if (v428 >= 0x10)
          v429 = v428 + 1;
        else
          v429 = 16;
        if (v429 <= v427)
          v429 = v426 + v833;
        v430 = *(_QWORD *)(v148 + 88);
        if (v429 < 3)
        {
          v432 = v148 + 104;
          *(_QWORD *)(v148 + 88) = v148 + 104;
          *(_DWORD *)(v148 + 96) = 2;
        }
        else
        {
          if (v429 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A4710);
          }
          v431 = 12 * v429;
          v432 = WTF::fastMalloc((WTF *)(12 * v429));
          v433 = (v431 & 0xFFFFFFFC) / 0xC;
          v148 = a1;
          *(_DWORD *)(a1 + 96) = v433;
          *(_QWORD *)(a1 + 88) = v432;
          v147 = a4;
        }
        if ((_DWORD)v426)
        {
          v434 = v430;
          do
          {
            *(_DWORD *)v432 = *(_DWORD *)v434;
            *(_QWORD *)(v432 + 4) = *(_QWORD *)(v434 + 4);
            v434 += 12;
            v432 += 12;
          }
          while (v434 != v430 + 12 * v426);
        }
        if (v148 + 104 != v430 && v430)
        {
          if (*(_QWORD *)(v148 + 88) == v430)
          {
            *(_QWORD *)(v148 + 88) = 0;
            *(_DWORD *)(v148 + 96) = 0;
          }
          WTF::fastFree(v430, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
        }
      }
      v435 = *(unsigned int *)(v148 + 100);
      if (v427 < v435)
      {
        __break(0xC471u);
        JUMPOUT(0x1981A46F8);
      }
      v436 = *(_QWORD *)(v148 + 88) + 12 * v435;
      v437 = (WTF *)((char *)v423 + 12 * v424);
      do
      {
        *(_DWORD *)v436 = *(_DWORD *)v423;
        *(_QWORD *)(v436 + 4) = *(_QWORD *)((char *)v423 + 4);
        v423 = (WTF *)((char *)v423 + 12);
        v436 += 12;
      }
      while (v423 != v437);
      *(_DWORD *)(v148 + 100) = v427;
      v423 = v831;
    }
    if (&v834 != (uint64_t *)v423 && v423 != 0)
    {
      v831 = 0;
      v832 = 0;
      WTF::fastFree((unint64_t)v423, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
    }
    v439 = v828;
    if (&v830 != (uint64_t *)v828 && v828 != 0)
    {
      v828 = 0;
      v829 = 0;
      WTF::fastFree((unint64_t)v439, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
    }
    v441 = v825;
    if (&v827 != (uint64_t *)v825 && v825)
    {
      v825 = 0;
      v826 = 0;
      WTF::fastFree((unint64_t)v441, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
    }
    v442 = v815;
    if (&v817 != (uint64_t *)v815 && v815)
    {
      v815 = 0;
      LODWORD(v816) = 0;
      WTF::fastFree((unint64_t)v442, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
    }
    v206 = v780[0];
    if (v781 != (_QWORD *)v780[0] && v780[0])
    {
      v780[0] = 0;
      LODWORD(v780[1]) = 0;
      goto LABEL_234;
    }
    goto LABEL_588;
  }
  *(_QWORD *)&v813 = &v814;
  v10 = 2;
  *((_QWORD *)&v813 + 1) = 2;
  v162 = a1;
  if (((v752 | v132 | v131) & 1) != 0)
  {
    v207 = v750;
    if ((v752 & 1) != 0)
    {
      v780[0] = (WTF *)v781;
      v780[1] = (WTF *)2;
      v274 = *(_QWORD *)(a1 + 16);
      if ((*(_BYTE *)(v274 + 129) & 0x40) == 0)
      {
        v323 = 118;
        if (*(_BYTE *)(v274 + 122) == 5)
          v323 = 119;
        JSC::MacroAssemblerARM64::branch64((uint64_t)&v836, 3, *(char *)(v274 + v323), 27, v141, v142, v143, v144, (uint64_t)&v791);
        v324 = v791;
        if (v791 != -1)
        {
          v325 = HIDWORD(v780[1]);
          if (HIDWORD(v780[1]) == LODWORD(v780[1]))
          {
            v326 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v780, (void *)(HIDWORD(v780[1]) + 1), (unint64_t)&v791, (uint64_t)v140, v141, v142, v143, v144);
            v328 = *v326;
            v327 = v326 + 1;
            v324 = v328;
            v325 = HIDWORD(v780[1]);
          }
          else
          {
            v327 = &v792;
          }
          v340 = (char *)v780[0] + 12 * v325;
          *(_DWORD *)v340 = v324;
          *(_QWORD *)(v340 + 4) = *(_QWORD *)v327;
          ++HIDWORD(v780[1]);
        }
      }
      if ((_BYTE)word_1ECF4C286)
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [38]>((uint64_t)&v836);
      if (v799)
      {
        v275 = *v799;
        while (1)
        {
          if (!v275)
            goto LABEL_351;
          if (HIDWORD(v813))
            break;
LABEL_347:
          --v275;
          HIDWORD(v813) = 0;
          if (*v799 <= v275)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A2E08);
          }
          if (JSC::AccessCase::requiresInt32PropertyCheck(*(JSC::AccessCase **)&v799[2 * v275 + 2]))
          {
            if (*v799 <= v275)
            {
              __break(0xC471u);
              JUMPOUT(0x1981A2E28);
            }
            JSC::InlineCacheCompiler::generateWithGuard(a1, v275, *(JSC::AccessCase **)&v799[2 * v275 + 2], (uint64_t)&v813);
          }
        }
        v276 = 0;
        v277 = 0;
        v278 = 12 * HIDWORD(v813);
        while (v277 < HIDWORD(v813))
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v813 + v276), (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
          ++v277;
          v276 += 12;
          if (v278 == v276)
            goto LABEL_347;
        }
        goto LABEL_872;
      }
LABEL_351:
      if (((v132 | v131 | v750) & 1) != 0)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v780, (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v813, (uint64_t)&v836, v380, v381, v382, v383, v384, v385);
        HIDWORD(v813) = 0;
      }
      else
      {
        v279 = HIDWORD(v780[1]);
        if (HIDWORD(v780[1]))
        {
          v280 = v132;
          v281 = v780[0];
          v282 = *(unsigned int *)(a1 + 96);
          v283 = *(unsigned int *)(a1 + 100);
          v284 = v283 + HIDWORD(v780[1]);
          if (v284 > v282)
          {
            v285 = v282 + (v282 >> 2);
            if (v285 >= 0x10)
              v286 = v285 + 1;
            else
              v286 = 16;
            if (v286 <= v284)
              v286 = v283 + HIDWORD(v780[1]);
            v287 = *(_QWORD *)(a1 + 88);
            if (v286 < 3)
            {
              v289 = a1 + 104;
              *(_QWORD *)(a1 + 88) = a1 + 104;
              *(_DWORD *)(a1 + 96) = 2;
            }
            else
            {
              if (v286 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x1981A4730);
              }
              v288 = 12 * v286;
              v289 = WTF::fastMalloc((WTF *)(12 * v286));
              *(_DWORD *)(a1 + 96) = (v288 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(a1 + 88) = v289;
            }
            if ((_DWORD)v283)
            {
              v334 = v287;
              do
              {
                *(_DWORD *)v289 = *(_DWORD *)v334;
                *(_QWORD *)(v289 + 4) = *(_QWORD *)(v334 + 4);
                v334 += 12;
                v289 += 12;
              }
              while (v334 != v287 + 12 * v283);
            }
            if (a1 + 104 != v287 && v287)
            {
              if (*(_QWORD *)(a1 + 88) == v287)
              {
                *(_QWORD *)(a1 + 88) = 0;
                *(_DWORD *)(a1 + 96) = 0;
              }
              WTF::fastFree(v287, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
            }
          }
          v335 = *(unsigned int *)(a1 + 100);
          if (v284 < v335)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A4720);
          }
          v336 = *(_QWORD *)(a1 + 88) + 12 * v335;
          v337 = (WTF *)((char *)v281 + 12 * v279);
          LOBYTE(v132) = v280;
          do
          {
            *(_DWORD *)v336 = *(_DWORD *)v281;
            *(_QWORD *)(v336 + 4) = *(_QWORD *)((char *)v281 + 4);
            v281 = (WTF *)((char *)v281 + 12);
            v336 += 12;
          }
          while (v281 != v337);
          *(_DWORD *)(a1 + 100) = v284;
        }
      }
      v338 = v780[0];
      if (v781 != (_QWORD *)v780[0] && v780[0] != 0)
      {
        v780[0] = 0;
        LODWORD(v780[1]) = 0;
        WTF::fastFree((unint64_t)v338, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
      }
    }
    if ((v132 & 1) != 0)
    {
      v780[0] = (WTF *)v781;
      v780[1] = (WTF *)2;
      v208 = *(_QWORD *)(a1 + 16);
      v209 = 118;
      if (*(_BYTE *)(v208 + 122) == 5)
        v209 = 119;
      v210 = *(unsigned __int8 *)(v208 + v209);
      if ((*(_BYTE *)(v208 + 129) & 0x20) == 0)
      {
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)&v836, 1, (char)v210, 28, v141, v142, v143, v144, (uint64_t)&v789);
        v260 = v789;
        if (v789 != -1)
        {
          v261 = HIDWORD(v780[1]);
          if (HIDWORD(v780[1]) == LODWORD(v780[1]))
          {
            v262 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v780, (void *)(HIDWORD(v780[1]) + 1), (unint64_t)&v789, v255, v256, v257, v258, v259);
            v264 = *v262;
            v263 = (uint64_t *)(v262 + 1);
            v260 = v264;
            v261 = HIDWORD(v780[1]);
          }
          else
          {
            v263 = &v790;
          }
          v295 = (char *)v780[0] + 12 * v261;
          *(_DWORD *)v295 = v260;
          *(_QWORD *)(v295 + 4) = *v263;
          ++HIDWORD(v780[1]);
        }
        if (!v848)
        {
          __break(0xC471u);
          JUMPOUT(0x1981A2DD8);
        }
        *(_DWORD *)(v849 + 208) &= ~v851;
        JSC::MacroAssemblerARM64::load8((uint64_t)&v836, v210 | 0x500000000, v850, v255, v256, v257, v258, v259);
        JSC::MacroAssemblerARM64::branch32((uint64_t)&v836, 1, 17, 2, v296, v297, v298, v299, (uint64_t)&v787);
        v300 = v787;
        if (v787 != -1)
        {
          v301 = HIDWORD(v780[1]);
          if (HIDWORD(v780[1]) == LODWORD(v780[1]))
          {
            v302 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v780, (void *)(HIDWORD(v780[1]) + 1), (unint64_t)&v787, (uint64_t)v140, v141, v142, v143, v144);
            v304 = *v302;
            v303 = v302 + 1;
            v300 = v304;
            v301 = HIDWORD(v780[1]);
          }
          else
          {
            v303 = &v788;
          }
          v305 = (char *)v780[0] + 12 * v301;
          *(_DWORD *)v305 = v300;
          *(_QWORD *)(v305 + 4) = *(_QWORD *)v303;
          ++HIDWORD(v780[1]);
        }
      }
      JSC::MacroAssemblerARM64::load64((uint64_t)&v836, v210 | 0x800000000, *(char *)(a1 + 176), (uint64_t)v140, v141, v142, v143, v144);
      v211 = (unint64_t *)(a1 + 88);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)&v836, 1, *(char *)(a1 + 176), 1, v212, v213, v214, v215, (uint64_t)&v785, v216);
      v217 = v785;
      if (v785 != -1)
      {
        v218 = *(unsigned int *)(a1 + 100);
        if ((_DWORD)v218 == *(_DWORD *)(a1 + 96))
        {
          v219 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, (void *)(v218 + 1), (unint64_t)&v785, (uint64_t)v140, v141, v142, v143, v144);
          v221 = *v219;
          v220 = (uint64_t *)(v219 + 1);
          v217 = v221;
          LODWORD(v218) = *(_DWORD *)(a1 + 100);
          v222 = *(_QWORD *)(a1 + 88);
        }
        else
        {
          v220 = &v786;
          v222 = *v211;
        }
        v237 = v222 + 12 * v218;
        *(_DWORD *)v237 = v217;
        *(_QWORD *)(v237 + 4) = *v220;
        ++*(_DWORD *)(a1 + 100);
      }
      if ((_BYTE)word_1ECF4C286)
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "Cases start (needsStringPropertyCheck)");
      if (v799)
      {
        v238 = *v799;
        while (v238)
        {
          if (HIDWORD(v813))
          {
            v239 = 0;
            v240 = 0;
            v241 = 12 * HIDWORD(v813);
            do
            {
              if (v240 >= HIDWORD(v813))
              {
                __break(0xC471u);
                JUMPOUT(0x1981A46B8);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v813 + v239), (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
              ++v240;
              v239 += 12;
            }
            while (v241 != v239);
          }
          --v238;
          HIDWORD(v813) = 0;
          if (*v799 <= v238)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A2BA8);
          }
          if (JSC::AccessCase::requiresIdentifierNameMatch(*(JSC::AccessCase **)&v799[2 * v238 + 2]))
          {
            if (*v799 <= v238)
            {
              __break(0xC471u);
              JUMPOUT(0x1981A2BC8);
            }
            v139 = *(JSC::AccessCase **)&v799[2 * v238 + 2];
            v242 = *((_QWORD *)v139 + 4);
            if ((v242 & 1) != 0)
              v243 = v242 & 0xFFFFFFFFFFFFFFFELL;
            else
              v243 = *(_QWORD *)(v242 + 8);
            if ((*(_BYTE *)(v243 + 16) & 0x20) == 0)
              JSC::InlineCacheCompiler::generateWithGuard(a1, v238, v139, (uint64_t)&v813);
          }
        }
      }
      if (((v131 | v750) & 1) != 0)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v780, (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v813, (uint64_t)&v836, v374, v375, v376, v377, v378, v379);
        HIDWORD(v813) = 0;
      }
      else
      {
        v244 = HIDWORD(v780[1]);
        if (HIDWORD(v780[1]))
        {
          v245 = v131;
          v246 = v780[0];
          v247 = *(unsigned int *)(a1 + 96);
          v248 = *(unsigned int *)(a1 + 100);
          v249 = v248 + HIDWORD(v780[1]);
          if (v249 > v247)
          {
            v250 = v247 + (v247 >> 2);
            if (v250 >= 0x10)
              v251 = v250 + 1;
            else
              v251 = 16;
            if (v251 <= v249)
              v251 = v248 + HIDWORD(v780[1]);
            v252 = *v211;
            if (v251 < 3)
            {
              v254 = a1 + 104;
              *(_QWORD *)(a1 + 88) = a1 + 104;
              *(_DWORD *)(a1 + 96) = 2;
            }
            else
            {
              if (v251 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x1981A4718);
              }
              v253 = 12 * v251;
              v254 = WTF::fastMalloc((WTF *)(12 * v251));
              v162 = a1;
              *(_DWORD *)(a1 + 96) = (v253 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(a1 + 88) = v254;
              v207 = v750;
            }
            if ((_DWORD)v248)
            {
              v265 = v252;
              do
              {
                *(_DWORD *)v254 = *(_DWORD *)v265;
                *(_QWORD *)(v254 + 4) = *(_QWORD *)(v265 + 4);
                v265 += 12;
                v254 += 12;
              }
              while (v265 != v252 + 12 * v248);
            }
            if (v162 + 104 != v252 && v252)
            {
              if (*v211 == v252)
              {
                *(_QWORD *)(v162 + 88) = 0;
                *(_DWORD *)(v162 + 96) = 0;
              }
              WTF::fastFree(v252, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
            }
          }
          v266 = *(unsigned int *)(v162 + 100);
          if (v249 < v266)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A4700);
          }
          v267 = *v211 + 12 * v266;
          v268 = (WTF *)((char *)v246 + 12 * v244);
          LOBYTE(v131) = v245;
          do
          {
            *(_DWORD *)v267 = *(_DWORD *)v246;
            *(_QWORD *)(v267 + 4) = *(_QWORD *)((char *)v246 + 4);
            v246 = (WTF *)((char *)v246 + 12);
            v267 += 12;
          }
          while (v246 != v268);
          *(_DWORD *)(v162 + 100) = v249;
        }
      }
      v269 = v780[0];
      if (v781 != (_QWORD *)v780[0] && v780[0] != 0)
      {
        v780[0] = 0;
        LODWORD(v780[1]) = 0;
        WTF::fastFree((unint64_t)v269, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
      }
    }
    if ((v131 & 1) != 0)
    {
      v780[0] = (WTF *)v781;
      v780[1] = (WTF *)2;
      v306 = *(_QWORD *)(v162 + 16);
      if ((*(_BYTE *)(v306 + 129) & 0x80) == 0)
      {
        v355 = 118;
        if (*(_BYTE *)(v306 + 122) == 5)
          v355 = 119;
        v356 = *(char *)(v306 + v355);
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)&v836, 1, v356, 28, v141, v142, v143, v144, (uint64_t)v784);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v780, v784, v357, v358, v359, v360, v361, v362);
        JSC::AssemblyHelpers::branchIfNotSymbol((uint64_t)&v836, v356, v363, v364, v365, v366, v367, (uint64_t)v783);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v780, v783, v368, v369, v370, v371, v372, v373);
      }
      if ((_BYTE)word_1ECF4C286)
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "Cases start (needsSymbolPropertyCheck)");
      if (v799)
      {
        v307 = *v799;
        while (v307)
        {
          if (HIDWORD(v813))
          {
            v308 = 0;
            v309 = 0;
            v310 = 12 * HIDWORD(v813);
            do
            {
              if (v309 >= HIDWORD(v813))
              {
                __break(0xC471u);
                JUMPOUT(0x1981A46E8);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v813 + v308), (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
              ++v309;
              v308 += 12;
            }
            while (v310 != v308);
          }
          --v307;
          HIDWORD(v813) = 0;
          if (*v799 <= v307)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A2E48);
          }
          if (JSC::AccessCase::requiresIdentifierNameMatch(*(JSC::AccessCase **)&v799[2 * v307 + 2]))
          {
            if (*v799 <= v307)
            {
              __break(0xC471u);
              JUMPOUT(0x1981A2E68);
            }
            v139 = *(JSC::AccessCase **)&v799[2 * v307 + 2];
            v311 = *((_QWORD *)v139 + 4);
            if ((v311 & 1) != 0)
              v312 = v311 & 0xFFFFFFFFFFFFFFFELL;
            else
              v312 = *(_QWORD *)(v311 + 8);
            if ((*(_BYTE *)(v312 + 16) & 0x20) != 0)
              JSC::InlineCacheCompiler::generateWithGuard(v162, v307, v139, (uint64_t)&v813);
          }
        }
      }
      if ((v207 & 1) != 0)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v780, (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v813, (uint64_t)&v836, v399, v400, v401, v402, v403, v404);
        HIDWORD(v813) = 0;
      }
      else
      {
        v313 = HIDWORD(v780[1]);
        if (HIDWORD(v780[1]))
        {
          v314 = v780[0];
          v315 = *(unsigned int *)(v162 + 96);
          v316 = *(unsigned int *)(v162 + 100);
          v317 = v316 + HIDWORD(v780[1]);
          if (v317 > v315)
          {
            v318 = v315 + (v315 >> 2);
            if (v318 >= 0x10)
              v319 = v318 + 1;
            else
              v319 = 16;
            if (v319 <= v317)
              v319 = v316 + HIDWORD(v780[1]);
            v320 = *(_QWORD *)(v162 + 88);
            if (v319 < 3)
            {
              v322 = v162 + 104;
              *(_QWORD *)(v162 + 88) = v162 + 104;
              *(_DWORD *)(v162 + 96) = 2;
            }
            else
            {
              if (v319 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x1981A4738);
              }
              v321 = 12 * v319;
              v322 = WTF::fastMalloc((WTF *)(12 * v319));
              *(_DWORD *)(v162 + 96) = (v321 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(v162 + 88) = v322;
            }
            if ((_DWORD)v316)
            {
              v342 = v320;
              do
              {
                *(_DWORD *)v322 = *(_DWORD *)v342;
                *(_QWORD *)(v322 + 4) = *(_QWORD *)(v342 + 4);
                v342 += 12;
                v322 += 12;
              }
              while (v342 != v320 + 12 * v316);
            }
            if (v162 + 104 != v320 && v320)
            {
              if (*(_QWORD *)(v162 + 88) == v320)
              {
                *(_QWORD *)(v162 + 88) = 0;
                *(_DWORD *)(v162 + 96) = 0;
              }
              WTF::fastFree(v320, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
            }
          }
          v343 = *(unsigned int *)(v162 + 100);
          if (v317 < v343)
          {
            __break(0xC471u);
            JUMPOUT(0x1981A4728);
          }
          v344 = *(_QWORD *)(v162 + 88) + 12 * v343;
          v345 = (WTF *)((char *)v314 + 12 * v313);
          do
          {
            *(_DWORD *)v344 = *(_DWORD *)v314;
            *(_QWORD *)(v344 + 4) = *(_QWORD *)((char *)v314 + 4);
            v314 = (WTF *)((char *)v314 + 12);
            v344 += 12;
          }
          while (v314 != v345);
          *(_DWORD *)(v162 + 100) = v317;
        }
      }
      v346 = v780[0];
      if (v781 != (_QWORD *)v780[0] && v780[0] != 0)
      {
        v780[0] = 0;
        LODWORD(v780[1]) = 0;
        WTF::fastFree((unint64_t)v346, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
      }
    }
    if ((v207 & 1) != 0)
    {
      if ((_BYTE)word_1ECF4C286)
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "Cases start (remaining)");
      if (v799)
      {
        v271 = *v799;
        if (*v799)
        {
          v272 = v271 - 1;
          v273 = 8 * (v271 - 1) + 8;
          do
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v813, (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
            HIDWORD(v813) = 0;
            if (*v799 <= v272)
            {
              __break(0xC471u);
              JUMPOUT(0x1981A45F8);
            }
            if ((JSC::AccessCase::requiresIdentifierNameMatch(*(JSC::AccessCase **)((char *)v799 + v273)) & 1) == 0)
            {
              if (*v799 <= v272)
              {
                __break(0xC471u);
                JUMPOUT(0x1981A4618);
              }
              if ((JSC::AccessCase::requiresInt32PropertyCheck(*(JSC::AccessCase **)((char *)v799 + v273)) & 1) == 0)
              {
                if (*v799 <= v272)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1981A4674);
                }
                JSC::InlineCacheCompiler::generateWithGuard(a1, v272, *(JSC::AccessCase **)((char *)v799 + v273), (uint64_t)&v813);
              }
            }
            v273 -= 8;
            --v272;
          }
          while (v272 != -1);
        }
      }
    }
  }
  else if (!(_BYTE)word_1ECF4C286
         || (JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "Cases start !(needsInt32PropertyCheck || needsStringPropertyCheck || needsSymbolPropertyCheck)"), v799)&& (v146 = *v799) != 0)
  {
    v163 = v146;
    do
    {
      v164 = HIDWORD(v813);
      if (HIDWORD(v813))
      {
        v165 = 0;
        do
        {
          if (v165 >= HIDWORD(v813))
          {
            __break(0xC471u);
            JUMPOUT(0x1981A469CLL);
          }
          v166 = v813;
          v167 = (unsigned int *)(v813 + 12 * v165);
          v847 = 0;
          v169 = (unsigned __int8 *)(v167 + 2);
          v168 = *((unsigned __int8 *)v167 + 8);
          switch(*((_BYTE *)v167 + 8))
          {
            case 0x83:
            case 0x87:
              v170 = (WTF *)*v167;
              v171 = v846;
              if (v846 < v843)
              {
                v332 = (JSC::AssemblerBuffer *)v844;
                do
                {
                  if (v171 + 4 > v845)
                  {
                    v753 = v332;
                    JSC::AssemblerBuffer::outOfLineGrow(v332, (uint64_t)v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
                    v332 = v753;
                    v171 = v846;
                  }
                  *(_DWORD *)(v844[0] + v171) = -721215457;
                  v171 = v846 + 4;
                  v846 = v171;
                }
                while ((int)v171 < v843);
                v168 = *v169;
              }
              v172 = (_BYTE *)(v166 + 12 * v165);
              v173 = v172[9];
              v174 = v172[10];
              v175 = v172[11];
              v780[0] = v170;
              v780[1] = (WTF *)v171;
              BYTE3(v781[0]) = v173 & 0xF;
              *(_WORD *)((char *)v781 + 1) = v168;
              v176 = v174 << 6;
              goto LABEL_197;
            case 0x84:
            case 0x88:
              v177 = (WTF *)*v167;
              v178 = v846;
              if (v846 < v843)
              {
                v333 = (JSC::AssemblerBuffer *)v844;
                do
                {
                  if (v178 + 4 > v845)
                  {
                    v754 = v333;
                    JSC::AssemblerBuffer::outOfLineGrow(v333, (uint64_t)v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
                    v333 = v754;
                    v178 = v846;
                  }
                  *(_DWORD *)(v844[0] + v178) = -721215457;
                  v178 = v846 + 4;
                  v846 = v178;
                }
                while ((int)v178 < v843);
                v168 = *v169;
              }
              v179 = v166 + 12 * v165;
              v180 = *(_BYTE *)(v179 + 9);
              v181 = *(_WORD *)(v179 + 4);
              v175 = *(_BYTE *)(v179 + 11);
              v780[0] = v177;
              v780[1] = (WTF *)v178;
              BYTE3(v781[0]) = v180 & 0xF;
              *(_WORD *)((char *)v781 + 1) = v168;
              v176 = v181 & 0x3F;
LABEL_197:
              WORD2(v781[0]) = v176;
              LOBYTE(v781[0]) = v175;
              break;
            default:
              v185 = (WTF *)*v167;
              v186 = v846;
              if (v846 < v843)
              {
                v341 = (JSC::AssemblerBuffer *)v844;
                do
                {
                  if (v186 + 4 > v845)
                  {
                    v755 = v341;
                    JSC::AssemblerBuffer::outOfLineGrow(v341, (uint64_t)v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
                    v341 = v755;
                    v186 = v846;
                  }
                  *(_DWORD *)(v844[0] + v186) = -721215457;
                  v186 = v846 + 4;
                  v846 = v186;
                }
                while ((int)v186 < v843);
                v168 = *v169;
              }
              v187 = *(_BYTE *)(v166 + 12 * v165 + 9);
              LOBYTE(v781[0]) = -1;
              v780[0] = v185;
              v780[1] = (WTF *)v186;
              BYTE3(v781[0]) = v187 & 0xF;
              *(_WORD *)((char *)v781 + 1) = v168;
              WORD2(v781[0]) = 0;
              break;
          }
          if (v842 == v841)
          {
            v188 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v840, v842 + 1, (unint64_t)v780, (uint64_t)v140, v141, v142, v143, v144);
            v182 = v840 + 24 * v842;
            *(_QWORD *)v182 = 0;
            *(_QWORD *)(v182 + 8) = 0;
            *(_BYTE *)(v182 + 16) = -1;
            v189 = (((*(unsigned __int8 *)(v182 + 19) >> 4) & 0xF) << 20) | 0xF0041;
            *(_WORD *)(v182 + 17) = 65;
            *(_BYTE *)(v182 + 19) = BYTE2(v189);
            *(_WORD *)(v182 + 20) &= 0xFC00u;
            v183 = *(_OWORD *)v188;
            v184 = *(_QWORD *)(v188 + 16);
          }
          else
          {
            v182 = v840 + 24 * v842;
            v183 = *(_OWORD *)v780;
            v184 = v781[0];
          }
          *(_QWORD *)(v182 + 16) = v184;
          *(_OWORD *)v182 = v183;
          ++v842;
          ++v165;
        }
        while (v165 != v164);
      }
      --v163;
      HIDWORD(v813) = 0;
      if (*v799 <= v163)
      {
        __break(0xC471u);
        JUMPOUT(0x1981A2B1CLL);
      }
      JSC::InlineCacheCompiler::generateWithGuard(a1, v163, *(JSC::AccessCase **)&v799[2 * v163 + 2], (uint64_t)&v813);
    }
    while (v163);
  }
  v190 = (JSC::CodeBlock **)v813;
  v191 = HIDWORD(v813);
  if (HIDWORD(v813))
  {
    v148 = a1;
    v192 = *(unsigned int *)(a1 + 96);
    v193 = *(unsigned int *)(a1 + 100);
    v194 = v193 + HIDWORD(v813);
    v147 = a4;
    v145 = &qword_199123000;
    if (v194 > v192)
    {
      v195 = v192 + (v192 >> 2);
      if (v195 >= 0x10)
        v196 = v195 + 1;
      else
        v196 = 16;
      if (v196 <= v194)
        v196 = v193 + HIDWORD(v813);
      v197 = *(_QWORD *)(a1 + 88);
      if (v196 < 3)
      {
        v199 = a1 + 104;
        *(_QWORD *)(a1 + 88) = a1 + 104;
        *(_DWORD *)(a1 + 96) = 2;
      }
      else
      {
        if (v196 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981A4708);
        }
        v198 = 12 * v196;
        v199 = WTF::fastMalloc((WTF *)(12 * v196));
        v200 = (v198 & 0xFFFFFFFC) / 0xC;
        v148 = a1;
        *(_DWORD *)(a1 + 96) = v200;
        *(_QWORD *)(a1 + 88) = v199;
        v147 = a4;
      }
      if ((_DWORD)v193)
      {
        v201 = v197;
        do
        {
          *(_DWORD *)v199 = *(_DWORD *)v201;
          *(_QWORD *)(v199 + 4) = *(_QWORD *)(v201 + 4);
          v201 += 12;
          v199 += 12;
        }
        while (v201 != v197 + 12 * v193);
      }
      if (v148 + 104 != v197 && v197)
      {
        if (*(_QWORD *)(v148 + 88) == v197)
        {
          *(_QWORD *)(v148 + 88) = 0;
          *(_DWORD *)(v148 + 96) = 0;
        }
        WTF::fastFree(v197, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
      }
    }
    v202 = *(unsigned int *)(v148 + 100);
    if (v194 < v202)
    {
      __break(0xC471u);
      JUMPOUT(0x1981A46F0);
    }
    v203 = *(_QWORD *)(v148 + 88) + 12 * v202;
    v204 = (JSC::CodeBlock **)((char *)v190 + 12 * v191);
    do
    {
      *(_DWORD *)v203 = *(_DWORD *)v190;
      *(_QWORD *)(v203 + 4) = *(JSC::CodeBlock **)((char *)v190 + 4);
      v190 = (JSC::CodeBlock **)((char *)v190 + 12);
      v203 += 12;
    }
    while (v190 != v204);
    *(_DWORD *)(v148 + 100) = v194;
    v190 = (JSC::CodeBlock **)v813;
  }
  else
  {
    v147 = a4;
    v148 = a1;
    v145 = &qword_199123000;
  }
  if (&v814 != v190 && v190 != 0)
  {
    *(_QWORD *)&v813 = 0;
    DWORD2(v813) = 0;
    v206 = (WTF *)v190;
LABEL_234:
    WTF::fastFree((unint64_t)v206, v138, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
  }
LABEL_588:
  v443 = *(unsigned int *)(v148 + 140);
  if ((_DWORD)v443)
  {
    v495 = 0;
    v496 = 0;
    v497 = 12 * v443;
    do
    {
      if (v496 >= *(unsigned int *)(v148 + 140))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A46C8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v148 + 128) + v495), (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
      ++v496;
      v495 += 12;
    }
    while (v497 != v495);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "failAndIgnore");
    v498 = *(_QWORD *)(v148 + 16);
    if ((*(_WORD *)(v498 + 129) & 0x200) != 0)
    {
      v499 = *(unsigned __int8 *)(v498 + 120) | 0x7C00000000;
    }
    else
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(&v836, v498 + 124, *(char *)(v148 + 176), (uint64_t)v140, v141, v142, v143, v144);
      v499 = *(unsigned __int8 *)(v148 + 176);
    }
    JSC::MacroAssemblerARM64::add8((uint64_t)&v836, v499, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
  }
  v777 = (WTF *)v779;
  v778 = v145[138];
  if (v803)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v148 + 88), (uint64_t)&v836, (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
    JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(*(_QWORD *)(v148 + 40), *(const char **)(v148 + 32), v759, v539, v540, v541, v542, v543);
  }
  else
  {
    WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v777, (unsigned int *)(v148 + 88), (uint64_t)v139, (uint64_t)v140, v141, v142, v143, v144);
  }
  for (j = v846; (int)j < v843; v846 = j)
  {
    if (j + 4 > v845)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v844, v444, v445, v446, v447, v448, v449, v450);
      j = v846;
    }
    *(_DWORD *)(v844[0] + j) = -721215457;
    j = v846 + 4;
  }
  v452 = j;
  if (j + 4 > v845)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v844, v444, v445, v446, v447, v448, v449, v450);
    v452 = v846;
  }
  *(_DWORD *)(v844[0] + v452) = 335544320;
  v846 += 4;
  if (v852)
    v453 = 69;
  else
    v453 = 65;
  v772 = j;
  v773 = 0;
  v774 = v453;
  v775 = 15;
  v776 = -1;
  if (j != -1)
  {
    if (HIDWORD(v778) == (_DWORD)v778)
    {
      v454 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v777, (void *)(HIDWORD(v778) + 1), (unint64_t)&v772, v446, v447, v448, v449, v450);
      v456 = *v454;
      v455 = v454 + 1;
      v457 = (char *)v777 + 12 * HIDWORD(v778);
      *(_DWORD *)v457 = v456;
    }
    else
    {
      v455 = &v773;
      v457 = (char *)v777 + 12 * HIDWORD(v778);
      *(_DWORD *)v457 = j;
    }
    *(_QWORD *)(v457 + 4) = *(_QWORD *)v455;
    ++HIDWORD(v778);
  }
  if ((*(_DWORD *)&v763 & ((*(_BYTE *)(v148 + 224) & 2) >> 1)) == 1)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(&v836, v444, v445, v446, v447, v448, v449, v450, (int *)&v810);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "exception handler");
    v500 = (WTF *)JSC::InlineCacheCompiler::spillStateForJSCall((JSC::InlineCacheCompiler *)v148);
    v502 = (int)v501;
    v780[0] = v500;
    v780[1] = v501;
    JSC::MacroAssemblerARM64::load64((uint64_t)&v836, *(_QWORD *)v148 + 90480, 29, v503, v504, v505, v506, v507);
    if ((*(_WORD *)(*(_QWORD *)(v148 + 16) + 129) & 0x200) != 0)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)&v836, 0x100000001ALL, *(char *)(v148 + 176), v509, v510, v511, v512, v513);
      JSC::MacroAssemblerARM64::add64((uint64_t)&v836, (-v502 - *(_DWORD *)(v148 + 168)), *(char *)(v148 + 176), *(char *)(v148 + 176), v738, v739, v740, v741);
      JSC::MacroAssembler::addPtr(&v836, *(char *)(v148 + 176), v742, v743, v744, v745, v746, v747);
    }
    else
    {
      v514 = JSC::CodeBlock::stackPointerOffset(v147, v508);
      JSC::MacroAssemblerARM64::add64((uint64_t)&v836, (8 * v514 - v502 - *(_DWORD *)v759), 29, 31, v515, v516, v517, v518);
    }
    JSC::InlineCacheCompiler::restoreLiveRegistersFromStackForCallWithThrownException(v148, (uint64_t *)v780, v519, v520, v521, v522, v523, v524);
    JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(*(_QWORD *)(v148 + 40), *(const char **)(v148 + 32), v759, v525, v526, v527, v528, v529);
    v530 = JSC::InlineCacheCompiler::originalExceptionHandler((JSC::InlineCacheCompiler *)v148);
    v813 = *(_OWORD *)v530;
    v531 = *(_QWORD *)(v530 + 16);
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)10924>((uint64_t)&v836, v531, v532, v533, v534, v535, v536, v537);
    v538 = JSC::InlineCacheCompiler::callSiteIndexForExceptionHandling((JSC::InlineCacheCompiler *)v148);
    v814 = (JSC::CodeBlock *)v531;
    v815 = (WTF *)__PAIR64__(v538, v810);
    v816 = v147;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::InlineCacheCompiler::compile(JSC::GCSafeConcurrentJSLocker const&,JSC::PolymorphicAccess &,JSC::CodeBlock *)::$_2>((uint64_t)&v836, &v813);
    v762 = JSC::InlineCacheCompiler::callSiteIndexForExceptionHandling((JSC::InlineCacheCompiler *)v148);
    v458 = (uint64_t)v147;
  }
  else
  {
    v458 = 0;
    v762 = -1;
  }
  v459 = *(_QWORD *)(v148 + 16);
  v460 = *(const void **)(v459 + 32);
  v771 = v460;
  if ((*(_BYTE *)(v459 + 130) & 2) != 0)
  {
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v836, "failure far jump");
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v777, (uint64_t)&v836, v445, v446, v447, v448, v449, v450);
    JSC::MacroAssemblerARM64::farJump((uint64_t)&v836, *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 120) | 0x2800000000, 49594, v544, v545, v546, v547, v548);
  }
  else
  {
    v461 = *(unsigned int *)(v148 + 60);
    if ((_DWORD)v461)
    {
      v462 = 12 * v461;
      v463 = (char *)(*(_QWORD *)(v148 + 48) + 11);
      do
      {
        v464 = *(v463 - 3);
        switch(*(v463 - 3))
        {
          case -125:
          case -121:
            v465 = *(v463 - 2);
            v466 = *(v463 - 1);
            v467 = *v463;
            *(_QWORD *)&v813 = *(unsigned int *)(v463 - 11);
            *((_QWORD *)&v813 + 1) = v460;
            BYTE3(v814) = v465 & 0xF;
            *(_WORD *)((char *)&v814 + 1) = v464;
            if (v466)
              v468 = 192;
            else
              v468 = 128;
            goto LABEL_612;
          case -124:
          case -120:
            v469 = *(v463 - 2);
            v470 = *(_WORD *)(v463 - 7);
            v467 = *v463;
            *(_QWORD *)&v813 = *(unsigned int *)(v463 - 11);
            *((_QWORD *)&v813 + 1) = v460;
            BYTE3(v814) = v469 & 0xF;
            *(_WORD *)((char *)&v814 + 1) = v464;
            v468 = v470 & 0x3F | 0x80;
LABEL_612:
            WORD2(v814) = v468;
            LOBYTE(v814) = v467;
            break;
          default:
            v474 = *(unsigned int *)(v463 - 11);
            v475 = *(v463 - 2);
            LOBYTE(v814) = -1;
            *(_QWORD *)&v813 = v474;
            *((_QWORD *)&v813 + 1) = v460;
            BYTE3(v814) = v475 & 0xF;
            *(_WORD *)((char *)&v814 + 1) = v464;
            WORD2(v814) = 128;
            break;
        }
        if (v842 == v841)
        {
          v476 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v840, v842 + 1, (unint64_t)&v813, v446, v447, v448, v449, v450);
          v471 = v840 + 24 * v842;
          *(_QWORD *)v471 = 0;
          *(_QWORD *)(v471 + 8) = 0;
          *(_BYTE *)(v471 + 16) = -1;
          v477 = (((*(unsigned __int8 *)(v471 + 19) >> 4) & 0xF) << 20) | 0xF0041;
          *(_WORD *)(v471 + 17) = 65;
          *(_BYTE *)(v471 + 19) = BYTE2(v477);
          *(_WORD *)(v471 + 20) &= 0xFC00u;
          v472 = *(_OWORD *)v476;
          v473 = *(JSC::CodeBlock **)(v476 + 16);
        }
        else
        {
          v471 = v840 + 24 * v842;
          v472 = v813;
          v473 = v814;
        }
        *(_QWORD *)(v471 + 16) = v473;
        *(_OWORD *)v471 = v472;
        ++v842;
        v463 += 12;
        v462 -= 12;
      }
      while (v462);
      v459 = *(_QWORD *)(a1 + 16);
    }
    if (HIDWORD(v778))
    {
      v478 = *(_QWORD *)(v459 + 40);
      v479 = 12 * HIDWORD(v778);
      v480 = (char *)v777 + 11;
      do
      {
        v481 = *(v480 - 3);
        switch(*(v480 - 3))
        {
          case -125:
          case -121:
            v482 = *(v480 - 2);
            v483 = *(v480 - 1);
            v484 = *v480;
            *(_QWORD *)&v813 = *(unsigned int *)(v480 - 11);
            *((_QWORD *)&v813 + 1) = v478;
            BYTE3(v814) = v482 & 0xF;
            *(_WORD *)((char *)&v814 + 1) = v481;
            if (v483)
              v485 = 192;
            else
              v485 = 128;
            goto LABEL_626;
          case -124:
          case -120:
            v486 = *(v480 - 2);
            v487 = *(_WORD *)(v480 - 7);
            v484 = *v480;
            *(_QWORD *)&v813 = *(unsigned int *)(v480 - 11);
            *((_QWORD *)&v813 + 1) = v478;
            BYTE3(v814) = v486 & 0xF;
            *(_WORD *)((char *)&v814 + 1) = v481;
            v485 = v487 & 0x3F | 0x80;
LABEL_626:
            WORD2(v814) = v485;
            LOBYTE(v814) = v484;
            break;
          default:
            v491 = *(unsigned int *)(v480 - 11);
            v492 = *(v480 - 2);
            LOBYTE(v814) = -1;
            *(_QWORD *)&v813 = v491;
            *((_QWORD *)&v813 + 1) = v478;
            BYTE3(v814) = v492 & 0xF;
            *(_WORD *)((char *)&v814 + 1) = v481;
            WORD2(v814) = 128;
            break;
        }
        if (v842 == v841)
        {
          v493 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v840, v842 + 1, (unint64_t)&v813, v446, v447, v448, v449, v450);
          v488 = v840 + 24 * v842;
          *(_QWORD *)v488 = 0;
          *(_QWORD *)(v488 + 8) = 0;
          *(_BYTE *)(v488 + 16) = -1;
          v494 = (((*(unsigned __int8 *)(v488 + 19) >> 4) & 0xF) << 20) | 0xF0041;
          *(_WORD *)(v488 + 17) = 65;
          *(_BYTE *)(v488 + 19) = BYTE2(v494);
          *(_WORD *)(v488 + 20) &= 0xFC00u;
          v489 = *(_OWORD *)v493;
          v490 = *(JSC::CodeBlock **)(v493 + 16);
        }
        else
        {
          v488 = v840 + 24 * v842;
          v489 = v813;
          v490 = v814;
        }
        *(_QWORD *)(v488 + 16) = v490;
        *(_OWORD *)v488 = v489;
        ++v842;
        v480 += 12;
        v479 -= 12;
      }
      while (v479);
    }
  }
  v813 = 0uLL;
  v549 = (unint64_t)a4;
  v814 = a4;
  v815 = (WTF *)&v816;
  v818 = 128;
  v550 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v550 != -1)
  {
    v780[0] = (WTF *)&v769;
    v810 = v780;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v810, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v551 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v559 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v559)
  {
    v559 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v559, v551);
  }
  v560 = *(WTF **)v559;
  v561 = a1;
  if (*(_QWORD *)v559 != v559 + 8)
  {
    v562 = *(_DWORD *)(v559 + 136);
    if (v818 < v562)
    {
      if (v815 && v815 != (WTF *)&v816)
      {
        WTF::fastFree((unint64_t)v815, v552, v553, v554, v555, v556, v557, v558);
        v560 = *(WTF **)v559;
        v562 = *(_DWORD *)(v559 + 136);
      }
      v815 = v560;
      v818 = v562;
      *(_QWORD *)v559 = v559 + 8;
      *(_DWORD *)(v559 + 136) = 128;
    }
  }
  v563 = 1;
  v819 = 1;
  v820 = 0;
  v821 = 6;
  start = 0u;
  v823 = 0u;
  v824 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v813, (uint64_t)&v836, 0, v554, v555, v556, v557, v558);
  if (!(_BYTE)v820)
  {
    *(_DWORD *)a9 = 1;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 8) = 0;
    goto LABEL_746;
  }
  v572 = a4 && (v571 = *((_QWORD *)a4 + 15)) != 0 && (*(_BYTE *)(v571 + 12) & 0xFE) == 4 && BYTE1(dword_1ECF4C28A)
      || HIBYTE(word_1ECF4C286) != 0;
  if (v572 || byte_1ECF4C288 || byte_1ECF4C289)
  {
    if (a4)
    {
      v694 = *((_QWORD *)a4 + 15);
      v695 = HIBYTE(word_1ECF4C286);
      if (v694)
      {
        v696 = *(_BYTE *)(v694 + 12) & 0xFE;
        if (BYTE1(dword_1ECF4C28A))
          v697 = v696 == 4;
        else
          v697 = 0;
        if (v697)
        {
          v589 = v762;
LABEL_810:
          v714 = (char *)JSC::categoryName();
          v716 = v715;
          v717 = *(const void ***)(v561 + 16);
          v780[0] = (WTF *)&v799;
          v780[1] = (WTF *)", ";
          v781[0] = 3;
          v781[1] = &str_56_1;
          v781[2] = 1;
          v782 = 0;
          WTF::toCString<char [17],JSC::CodeBlock,char [2],JSC::CodeOrigin,char [13],JSC::CodeLocationLabel<(WTF::PtrTag)49594>,char [20],JSC::CodeLocationLabel<(WTF::PtrTag)26432>,char [3],WTF::ListDump<WTF::FixedVector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>>>((uint64_t *)&v810, v549, (JSC::CodeOrigin *)v717, v717 + 3, &v771, (unsigned int ***)v780);
          v718 = v810;
          if (v810)
            v719 = (uint64_t)(v810 + 2);
          else
            v719 = 0;
          JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)49594,char const*>(&v769, (uint64_t)&v813, v563, v714, v716, v719);
          v17 = v757;
          if (v718)
          {
            if (*(_DWORD *)v718 == 1)
              WTF::fastFree((unint64_t)v718, v720, v580, v581, v582, v583, v584, v585);
            else
              --*(_DWORD *)v718;
          }
          v588 = (uint64_t)v756;
          goto LABEL_696;
        }
LABEL_804:
        v589 = v762;
        if (!v695)
          v563 = byte_1ECF4C288 != 0;
        goto LABEL_810;
      }
    }
    else
    {
      v695 = HIBYTE(word_1ECF4C286);
    }
    v549 = (unint64_t)a4;
    v561 = a1;
    goto LABEL_804;
  }
  v573 = v458;
  v574 = "GetById";
  v575 = 8;
  switch(*(_BYTE *)(*(_QWORD *)(a1 + 16) + 122))
  {
    case 0:
      goto LABEL_680;
    case 1:
      v574 = "GetByIdWithThis";
      goto LABEL_808;
    case 2:
      v574 = "GetByIdDirect";
      v575 = 14;
      goto LABEL_680;
    case 3:
      v574 = "TryGetById";
      v575 = 11;
      goto LABEL_680;
    case 4:
      v574 = "GetByVal";
      v575 = 9;
      goto LABEL_680;
    case 5:
      v574 = "GetByValWithThis";
      v575 = 17;
      goto LABEL_680;
    case 6:
      v574 = "PutByIdStrict";
      v575 = 14;
      goto LABEL_680;
    case 7:
      v574 = "PutByIdSloppy";
      v575 = 14;
      goto LABEL_680;
    case 8:
      v574 = "PutByIdDirectStrict";
      v575 = 20;
      goto LABEL_680;
    case 9:
      v574 = "PutByIdDirectSloppy";
      v575 = 20;
      goto LABEL_680;
    case 0xA:
      v574 = "PutByValStrict";
      v575 = 15;
      goto LABEL_680;
    case 0xB:
      v574 = "PutByValSloppy";
      v575 = 15;
      goto LABEL_680;
    case 0xC:
      v574 = "PutByValDirectStrict";
      v575 = 21;
      goto LABEL_680;
    case 0xD:
      v574 = "PutByValDirectSloppy";
      v575 = 21;
      goto LABEL_680;
    case 0xE:
      v574 = "DefinePrivateNameByVal";
      v575 = 23;
      goto LABEL_680;
    case 0xF:
      v574 = "DefinePrivateNameById";
      v575 = 22;
      goto LABEL_680;
    case 0x10:
      v574 = "SetPrivateNameByVal";
      v575 = 20;
      goto LABEL_680;
    case 0x11:
      v574 = "SetPrivateNameById";
      v575 = 19;
      goto LABEL_680;
    case 0x12:
      v574 = "InById";
      v575 = 7;
      goto LABEL_680;
    case 0x13:
      v574 = "InByVal";
      v575 = 8;
      goto LABEL_680;
    case 0x14:
      v574 = "HasPrivateName";
      v575 = 15;
      goto LABEL_680;
    case 0x15:
      v574 = "HasPrivateBrand";
      goto LABEL_808;
    case 0x16:
      v574 = "InstanceOf";
      v575 = 11;
      goto LABEL_680;
    case 0x17:
      v574 = "DeleteByIdStrict";
      v575 = 17;
      goto LABEL_680;
    case 0x18:
      v574 = "DeleteByIdSloppy";
      v575 = 17;
      goto LABEL_680;
    case 0x19:
      v574 = "DeleteByValStrict";
      v575 = 18;
      goto LABEL_680;
    case 0x1A:
      v574 = "DeleteByValSloppy";
      v575 = 18;
      goto LABEL_680;
    case 0x1B:
      v574 = "GetPrivateName";
      v575 = 15;
      goto LABEL_680;
    case 0x1C:
      v574 = "GetPrivateNameById";
      v575 = 19;
      goto LABEL_680;
    case 0x1D:
      v574 = "CheckPrivateBrand";
      v575 = 18;
      goto LABEL_680;
    case 0x1E:
      v574 = "SetPrivateBrand";
LABEL_808:
      v575 = 16;
LABEL_680:
      if (DWORD1(v823))
      {
        v678 = (uint64_t *)*((_QWORD *)&start + 1);
        v679 = 8 * DWORD1(v823);
        do
        {
          v680 = *v678++;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v680 + 16))(v680, &v813);
          v679 -= 8;
        }
        while (v679);
      }
      p_start = &start;
      if (HIDWORD(v824))
      {
        v689 = (uint64_t *)*((_QWORD *)&v823 + 1);
        v690 = 8 * HIDWORD(v824);
        do
        {
          v691 = *v689++;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v691 + 16))(v691, &v813);
          v690 -= 8;
        }
        while (v690);
      }
      v577 = v821;
      v578 = *((_QWORD *)&v813 + 1);
      *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v821 / 2] += *((_QWORD *)&v813 + 1);
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v577);
      sys_icache_invalidate((void *)start, v578);
      v586 = (unsigned int *)v813;
      if ((_QWORD)v813)
      {
        do
          v729 = __ldaxr(v586);
        while (__stlxr(v729 + 1, v586));
        p_start = (__int128 *)(v586 + 2);
        v549 = (unint64_t)a4;
        v561 = a1;
      }
      v587 = *(WTF ***)p_start;
      v810 = v587;
      v811 = (JSC::ExecutableMemoryHandle *)v586;
      v458 = v573;
      if (byte_1ECF4C2A2)
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v813, (uint64_t)&v810, v574, v575);
      v769 = v587;
      v770 = 0;
      v588 = (uint64_t)v756;
      v589 = v762;
      if (v586)
      {
        do
          v590 = __ldaxr(v586);
        while (__stlxr(v590 + 1, v586));
        v591 = (unsigned int *)v770;
        v770 = (JSC::ExecutableMemoryHandle *)v586;
        if (v591)
        {
          do
          {
            v592 = __ldaxr(v591);
            v593 = v592 - 1;
          }
          while (__stlxr(v593, v591));
          if (!v593)
          {
            atomic_store(1u, v591);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v591, v579, v580, v581, v582, v583, v584, v585);
            WTF::fastFree(v698, v699, v700, v701, v702, v703, v704, v705);
          }
        }
        v594 = (unsigned int *)v811;
        v811 = 0;
        if (v594)
        {
          do
          {
            v595 = __ldaxr(v594);
            v596 = v595 - 1;
          }
          while (__stlxr(v596, v594));
          if (!v596)
          {
            atomic_store(1u, v594);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v594, v579, v580, v581, v582, v583, v584, v585);
            WTF::fastFree(v706, v707, v708, v709, v710, v711, v712, v713);
          }
        }
      }
      v17 = v757;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1981A4430);
  }
LABEL_696:
  WTF::FixedVector<JSC::StructureID>::FixedVector<4ul,WTF::CrashOnOverflow>((unint64_t *)&v768, (WTF **)(v561 + 232), v580, v581, v582, v583, v584, v585);
  JSC::createICJITStubRoutine(&v769, (uint64_t *)&v799, (uint64_t *)&v768, *(_QWORD *)v561, v549, v17 & 1, (uint64_t)&v797, v588, (uint64_t *)&v767, v458, v589);
  v15 = (const JSC::AccessCase **)((char *)v767 + 88);
  v604 = *(_DWORD *)(v561 + 276);
  if (v604)
  {
    v351 = *(WTF **)(a1 + 264);
    v16 = (uint64_t)v351 + 24 * v604;
    v57 = 0x5000000000000;
    v21 = 1;
    v19 = 9;
    while (1)
    {
      v20 = *((_QWORD *)v767 + 9);
      if ((unint64_t)*((unsigned __int8 *)v351 + 14) << 48 != 0x5000000000000)
        break;
      v17 = *(_QWORD *)a1;
      v748 = (JSC::AdaptiveInferredPropertyValueWatchpointBase *)WTF::Bag<std::variant<JSC::StructureTransitionStructureStubClearingWatchpoint,JSC::AdaptiveValueStructureStubClearingWatchpoint>,WTF::RawPtrTraits<std::variant<JSC::StructureTransitionStructureStubClearingWatchpoint,JSC::AdaptiveValueStructureStubClearingWatchpoint>>,WTF::FastMalloc>::add<std::in_place_type_t<JSC::AdaptiveValueStructureStubClearingWatchpoint> const&,JSC::ObjectPropertyCondition const&,JSC::WatchpointSet &>((uint64_t *)v15, (uint64_t)v351, *((unsigned int **)v767 + 9));
      v18 = (uint64_t)v748;
      v749 = *((_DWORD *)v748 + 22);
      if ((unint64_t)*((unsigned __int8 *)v351 + 14) << 48 != 0x5000000000000)
      {
        if (v749)
          goto LABEL_851;
LABEL_702:
        v17 = 16 * (**(_DWORD **)v351 & 0xFFFFFFFE);
        v608 = *(_QWORD *)(v17 + 0x60);
        if ((v608 & 1) != 0)
        {
          v693 = (v608 >> 1) & 3;
          v608 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v608 = 1;
          *(_BYTE *)(v608 + 4) = v693;
          *(_BYTE *)(v608 + 5) = 0;
          *(_QWORD *)(v608 + 8) = v608 + 8;
          *(_QWORD *)(v608 + 16) = v608 + 8;
          __dmb(0xAu);
          *(_QWORD *)(v17 + 96) = v608;
        }
        v610 = *(_QWORD *)(v608 + 8);
        v609 = (uint64_t *)(v608 + 8);
        *(_QWORD *)v18 = v610;
        *(_QWORD *)(v18 + 8) = v609;
        *v609 = v18;
        *(_QWORD *)(v610 + 8) = v18;
        *((_WORD *)v609 - 2) = 257;
        goto LABEL_705;
      }
      if (v749 != 1)
        goto LABEL_851;
      JSC::AdaptiveInferredPropertyValueWatchpointBase::install(v748, (JSC::VM *)v17, v598, v599, v600, v601, v602, v603);
LABEL_705:
      v351 = (WTF *)((char *)v351 + 24);
      if (v351 == (WTF *)v16)
        goto LABEL_706;
    }
    v605 = WTF::fastMalloc((WTF *)0x68);
    v18 = v605;
    *(_QWORD *)v605 = 0;
    *(_QWORD *)(v605 + 8) = 0;
    *(_BYTE *)(v605 + 16) = 9;
    do
      v606 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v606 + 1, (unsigned int *)v20));
    *(_QWORD *)(v605 + 24) = v20;
    v607 = *(_OWORD *)v351;
    *(_QWORD *)(v605 + 48) = *((_QWORD *)v351 + 2);
    *(_OWORD *)(v605 + 32) = v607;
    *(_DWORD *)(v605 + 88) = 0;
    *(_QWORD *)(v605 + 96) = 0;
    *(_QWORD *)(v605 + 96) = *v15;
    *v15 = (const JSC::AccessCase *)v605;
    if ((unint64_t)*((unsigned __int8 *)v351 + 14) << 48 == 0x5000000000000)
    {
LABEL_851:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_852;
    }
    goto LABEL_702;
  }
LABEL_706:
  if (HIDWORD(v808))
  {
    v681 = v807;
    v682 = (WTF *)((char *)v807 + 8 * HIDWORD(v808));
    do
    {
      v683 = *(_QWORD *)v681;
      v684 = (unsigned int *)*((_QWORD *)v767 + 9);
      v780[0] = 0;
      v780[1] = 0;
      v781[0] = 0;
      v685 = WTF::fastMalloc((WTF *)0x68);
      *(_QWORD *)v685 = 0;
      *(_QWORD *)(v685 + 8) = 0;
      *(_BYTE *)(v685 + 16) = 9;
      do
        v686 = __ldaxr(v684);
      while (__stlxr(v686 + 1, v684));
      *(_QWORD *)(v685 + 24) = v684;
      *(_OWORD *)(v685 + 32) = *(_OWORD *)v780;
      *(_QWORD *)(v685 + 48) = v781[0];
      *(_DWORD *)(v685 + 88) = 0;
      *(_QWORD *)(v685 + 96) = 0;
      *(_QWORD *)(v685 + 96) = *v15;
      *v15 = (const JSC::AccessCase *)v685;
      v688 = *(_QWORD *)(v683 + 8);
      v687 = (uint64_t *)(v683 + 8);
      *(_QWORD *)v685 = v688;
      *(_QWORD *)(v685 + 8) = v687;
      *v687 = v685;
      *(_QWORD *)(v688 + 8) = v685;
      *((_WORD *)v687 - 2) = 257;
      v681 = (WTF *)((char *)v681 + 8);
    }
    while (v681 != v682);
  }
  v780[0] = 0;
  v611 = v767;
  if (*((_QWORD *)v767 + 11))
  {
    v612 = *(_QWORD *)(a1 + 16);
    v613 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v613 = 0;
    *(_QWORD *)(v613 + 8) = 0;
    *(_BYTE *)(v613 + 16) = 10;
    *(_BYTE *)(v613 + 21) = BYTE4(a4);
    *(_DWORD *)(v613 + 17) = (_DWORD)a4;
    *(_QWORD *)(v613 + 24) = v612;
    v780[0] = (WTF *)v613;
    v614 = (uint64_t *)*((_QWORD *)v767 + 9);
    v615 = v614[1];
    ++v614;
    *(_QWORD *)v613 = v615;
    *(_QWORD *)(v613 + 8) = v614;
    *v614 = v613;
    *(_QWORD *)(v615 + 8) = v613;
    *((_WORD *)v614 - 2) = 257;
    v611 = v767;
  }
  v616 = (unsigned int **)*((_QWORD *)v611 + 7);
  if (v616)
  {
    v618 = *(_DWORD *)v616++;
    v617 = v618;
  }
  else
  {
    v617 = 0;
  }
  v619 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v619)
  {
    v620 = *(unsigned int ***)a3;
    v621 = *(_QWORD *)a3 + 8 * v619;
    do
    {
      v622 = *v620;
      *v620 = 0;
      if (v622)
      {
        do
        {
          v623 = __ldaxr(v622);
          v624 = v623 - 1;
        }
        while (__stlxr(v624, v622));
        if (!v624)
        {
          atomic_store(1u, v622);
          JSC::AccessCase::operator delete((unint64_t)v622, v597, v598, (uint64_t)v599, v600, v601, v602, v603);
        }
      }
      ++v620;
    }
    while (v620 != (unsigned int **)v621);
  }
  *(_DWORD *)(a3 + 12) = 0;
  if (v617)
  {
    if (v617 > *(unsigned int *)(a3 + 8))
    {
      WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v617);
      v625 = *(unsigned int *)(a3 + 12);
      if (v617 < v625)
      {
        __break(0xC471u);
        JUMPOUT(0x1981A44E0);
      }
    }
    else
    {
      v625 = 0;
    }
    v626 = (unsigned int **)(*(_QWORD *)a3 + 8 * v625);
    v627 = v616;
    do
    {
      v628 = *v627;
      do
        v629 = __ldaxr(v628);
      while (__stlxr(v629 + 1, v628));
      *v626++ = v628;
      ++v627;
    }
    while (v627 != &v616[v617]);
    v630 = 0;
    *(_DWORD *)(a3 + 12) = v617;
    v631 = 8 * v617;
    do
    {
      v632 = 1;
      switch(*((_BYTE *)*v616 + 4))
      {
        case 1:
        case 3:
        case 0x13:
        case 0x1E:
        case 0x22:
        case 0x3E:
        case 0x70:
          break;
        default:
          v632 = 0;
          break;
      }
      v630 |= v632;
      ++v616;
      v631 -= 8;
    }
    while (v631);
  }
  else
  {
    v630 = 0;
  }
  JSC::InlineCacheCompiler::generateSlowPathHandler(*(_QWORD *)a1, *(char *)(*(_QWORD *)(a1 + 16) + 122), (uint64_t *)&v812);
  JSC::InlineCacheHandler::create((uint64_t *)&v810, (uint64_t *)&v812, (uint64_t)a4, *(uint64_t **)(a1 + 16), (uint64_t **)&v767, (uint64_t *)v780, 0);
  if (v812)
  {
    if (*(_DWORD *)v812 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v812, v564, v565, v566, v567, v568, v569, v570, v633);
      WTF::fastFree(v730, v731, v732, v733, v734, v735, v736, v737);
    }
    else
    {
      --*(_DWORD *)v812;
    }
  }
  if (*(_DWORD *)(a3 + 12) < dword_1ECF4C42C)
    v634 = 3;
  else
    v634 = 4;
  if ((v630 & 1) != 0)
    v634 = 5;
  *(_DWORD *)a9 = v634;
  v635 = v810;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 24) = 0;
  *(_QWORD *)(a9 + 8) = v635;
  v636 = v780[0];
  if (v780[0])
  {
    v637 = (_QWORD *)*((_QWORD *)v780[0] + 1);
    if (v637)
    {
      v638 = *(_QWORD *)v780[0];
      *v637 = *(_QWORD *)v780[0];
      *(_QWORD *)(v638 + 8) = v637;
      *(_QWORD *)v636 = 0;
      *((_QWORD *)v636 + 1) = 0;
    }
    WTF::fastFree((unint64_t)v636, v564, v565, v566, v567, v568, v569, v570);
  }
  v639 = v767;
  v767 = 0;
  if (v639)
  {
    v692 = *((_DWORD *)v639 + 4) - 1;
    *((_DWORD *)v639 + 4) = v692;
    if (!v692)
      JSC::JITStubRoutine::observeZeroRefCount(v639, v564, v565, v566, v567, v568, v569, v570, v633);
  }
  v640 = v768;
  v768 = 0;
  if (v640)
    WTF::fastFree((unint64_t)v640, v564, v565, v566, v567, v568, v569, v570);
  v641 = (unsigned int *)v770;
  v770 = 0;
  if (v641)
  {
    do
    {
      v642 = __ldaxr(v641);
      v643 = v642 - 1;
    }
    while (__stlxr(v643, v641));
    if (!v643)
    {
      atomic_store(1u, v641);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v641, (uint64_t)v564, v565, v566, v567, v568, v569, v570);
      WTF::fastFree(v721, v722, v723, v724, v725, v726, v727, v728);
    }
  }
LABEL_746:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v813, v564, v565, v566, v567, v568, v569, v570);
  v651 = v777;
  if (v779 != (_BYTE *)v777 && v777 != 0)
  {
    v777 = 0;
    LODWORD(v778) = 0;
    WTF::fastFree((unint64_t)v651, v644, v645, v646, v647, v648, v649, v650);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)&v836, v644, v645, v646, v647, v648, v649, v650);
  v660 = v797;
  if (v797)
  {
    v797 = 0;
    LODWORD(v798) = 0;
    WTF::fastFree((unint64_t)v660, v653, v654, v655, v656, v657, v658, v659);
  }
  v661 = v799;
  v799 = 0;
  if (v661)
  {
    WTF::VectorTypeOperations<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>::destruct((unsigned int **)v661 + 1, (unsigned int **)&v661[2 * *v661 + 2], v654, v655, v656, v657, v658, v659);
    WTF::fastFree((unint64_t)v661, v662, v663, v664, v665, v666, v667, v668);
  }
  if (HIDWORD(v805))
  {
    v669 = v804;
    v670 = (WTF *)((char *)v804 + 8 * HIDWORD(v805));
    do
    {
      v671 = *(unsigned int **)v669;
      *(_QWORD *)v669 = 0;
      if (v671)
      {
        do
        {
          v672 = __ldaxr(v671);
          v673 = v672 - 1;
        }
        while (__stlxr(v673, v671));
        if (!v673)
        {
          atomic_store(1u, v671);
          JSC::AccessCase::operator delete((unint64_t)v671, v653, v654, v655, v656, v657, v658, v659);
        }
      }
      v669 = (WTF *)((char *)v669 + 8);
    }
    while (v669 != v670);
  }
  v674 = v804;
  if (v806 != (_BYTE *)v804 && v804 != 0)
  {
    v804 = 0;
    LODWORD(v805) = 0;
    WTF::fastFree((unint64_t)v674, v653, v654, v655, v656, v657, v658, v659);
  }
  v676 = v807;
  if (v809 != (_BYTE *)v807 && v807 != 0)
  {
    v807 = 0;
    LODWORD(v808) = 0;
    WTF::fastFree((unint64_t)v676, v653, v654, v655, v656, v657, v658, v659);
  }
}

uint64_t JSC::needsScratchFPR(unsigned int a1)
{
  uint64_t result;
  BOOL v3;
  unsigned int v4;

  result = 0;
  v3 = a1 >= 0x10;
  v4 = a1 - 16;
  if (v3)
  {
    switch(v4)
    {
      case 0u:
      case 0x14u:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x30u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x46u:
        result = 1;
        break;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x45u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x1981A4A38);
    }
  }
  return result;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [38]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cases start (needsInt32PropertyCheck)");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::MacroAssemblerARM64::add8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981A4E2CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, a2, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981A4E4CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v17 = *(char *)(a1 + 272);
  v18 = *(_DWORD *)(a1 + 200);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17 | 0x11000620;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store8(a1, 16, a2, v12, v13, v14, v15, v16);
}

uint64_t JSC::InlineCacheCompiler::spillStateForJSCall(JSC::InlineCacheCompiler *this)
{
  uint8x8_t v1;
  __int32 v2;
  uint8x8_t v3;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)*((_QWORD *)this + 26));
  v1.i16[0] = vaddlv_u8(v1);
  v2 = v1.i32[0];
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*((_QWORD *)this + 26)));
  v3.i16[0] = vaddlv_u8(v3);
  if (!(v3.i32[0] + v2) && *((_DWORD *)this + 54))
    WTFCrashWithInfoImpl(351, "./bytecode/InlineCacheCompiler.h", "SpillState JSC::InlineCacheCompiler::spillStateForJSCall() const");
  return *((_QWORD *)this + 26);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::InlineCacheCompiler::compile(JSC::GCSafeConcurrentJSLocker const&,JSC::PolymorphicAccess &,JSC::CodeBlock *)::$_2>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3581448;
  v5 = *a2;
  *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 40) = *((_DWORD *)a2 + 6);
  v6 = *(_QWORD *)((char *)a2 + 28);
  *(_DWORD *)(v4 + 52) = *((_DWORD *)a2 + 9);
  *(_QWORD *)(v4 + 44) = v6;
  v7 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v7 != *(_DWORD *)(a1 + 240))
  {
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v7);
LABEL_12:
    *v8 = v4;
    *(_DWORD *)(a1 + 244) = v7 + 1;
    return;
  }
  v9 = v7 + (v7 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v7 + 1)
    v11 = v7 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = *(const void **)(a1 + 232);
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a1 + 240) = v11;
    *(_QWORD *)(a1 + 232) = v13;
    memcpy(v13, v12, 8 * v7);
    if (v12)
    {
      if (*(const void **)(a1 + 232) == v12)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    v7 = *(unsigned int *)(a1 + 244);
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v7);
    goto LABEL_12;
  }
  __break(0xC471u);
}

uint64_t JSC::LinkBuffer::LinkBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::AssemblerDataImpl(a1 + 24);
  *(_BYTE *)(a1 + 168) = 1;
  *(_DWORD *)(a1 + 169) = 0;
  *(_DWORD *)(a1 + 176) = a4;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  JSC::LinkBuffer::linkCode(a1, a2, a5, v9, v10, v11, v12, v13);
  return a1;
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)49594,char const*>(_QWORD *a1, uint64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  JSC::ExecutableMemoryHandle *v39;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, a4, a5, "%s", &v38, a6);
  v14 = (unsigned int *)v39;
  *a1 = v38;
  a1[1] = 0;
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = (unsigned int *)a1[1];
    a1[1] = v14;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
    }
    v19 = (unsigned int *)v39;
    v39 = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
  }
}

const char *JSC::categoryName()
{
  const char *result;

  result = "GetById";
  switch("GetById")
  {
    case 0u:
      return result;
    case 1u:
      result = "GetByIdWithThis";
      break;
    case 2u:
      result = "GetByIdDirect";
      break;
    case 3u:
      result = "TryGetById";
      break;
    case 4u:
      result = "GetByVal";
      break;
    case 5u:
      result = "GetByValWithThis";
      break;
    case 6u:
      result = "PutByIdStrict";
      break;
    case 7u:
      result = "PutByIdSloppy";
      break;
    case 8u:
      result = "PutByIdDirectStrict";
      break;
    case 9u:
      result = "PutByIdDirectSloppy";
      break;
    case 0xAu:
      result = "PutByValStrict";
      break;
    case 0xBu:
      result = "PutByValSloppy";
      break;
    case 0xCu:
      result = "PutByValDirectStrict";
      break;
    case 0xDu:
      result = "PutByValDirectSloppy";
      break;
    case 0xEu:
      result = "DefinePrivateNameByVal";
      break;
    case 0xFu:
      result = "DefinePrivateNameById";
      break;
    case 0x10u:
      result = "SetPrivateNameByVal";
      break;
    case 0x11u:
      result = "SetPrivateNameById";
      break;
    case 0x12u:
      result = "InById";
      break;
    case 0x13u:
      result = "InByVal";
      break;
    case 0x14u:
      result = "HasPrivateName";
      break;
    case 0x15u:
      result = "HasPrivateBrand";
      break;
    case 0x16u:
      result = "InstanceOf";
      break;
    case 0x17u:
      result = "DeleteByIdStrict";
      break;
    case 0x18u:
      result = "DeleteByIdSloppy";
      break;
    case 0x19u:
      result = "DeleteByValStrict";
      break;
    case 0x1Au:
      result = "DeleteByValSloppy";
      break;
    case 0x1Bu:
      result = "GetPrivateName";
      break;
    case 0x1Cu:
      result = "GetPrivateNameById";
      break;
    case 0x1Du:
      result = "CheckPrivateBrand";
      break;
    case 0x1Eu:
      result = "SetPrivateBrand";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1981A52DCLL);
  }
  return result;
}

void WTF::toCString<char [17],JSC::CodeBlock,char [2],JSC::CodeOrigin,char [13],JSC::CodeLocationLabel<(WTF::PtrTag)49594>,char [20],JSC::CodeLocationLabel<(WTF::PtrTag)26432>,char [3],WTF::ListDump<WTF::FixedVector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>>>(uint64_t *a1, uint64_t a2, JSC::CodeOrigin *a3, const void **a4, const void **a5, unsigned int ***a6)
{
  const void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  _BYTE *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = off_1E3572250;
  v27 = v29;
  v28 = xmmword_199122F80;
  v29[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", "Access stub for ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", " ");
  JSC::CodeOrigin::dump(a3, (WTF::PrintStream *)&v26);
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", "with start: ");
  if (*a4)
    v12 = *a4;
  else
    v12 = 0;
  WTF::CodePtrBase::dumpWithName(*a4, v12, "CodePtr", 8, (uint64_t)&v26);
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", " with return point ");
  if (*a5)
    v13 = *a5;
  else
    v13 = 0;
  WTF::CodePtrBase::dumpWithName(*a5, v13, "CodePtr", 8, (uint64_t)&v26);
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", ": ");
  WTF::ListDump<WTF::FixedVector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>>::dump(a6, (uint64_t)&v26);
  v26[5]((WTF::StringPrintStream *)&v26);
  v22 = v27;
  v21 = v28;
  *a1 = 0;
  if (!v22)
  {
    v25 = 0;
LABEL_12:
    WTF::fastFree(v25, v14, v15, v16, v17, v18, v19, v20);
    return;
  }
  if (v21 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A5614);
  }
  v23 = WTF::fastMalloc((WTF *)(v21 + 17));
  *(_DWORD *)v23 = 1;
  *(_QWORD *)(v23 + 8) = v21;
  *a1 = v23;
  v24 = v23 + 16;
  memcpy((void *)(v23 + 16), v22, v21);
  *(_BYTE *)(v24 + v21) = 0;
  v25 = (unint64_t)v27;
  if (v27 != v29)
    goto LABEL_12;
}

void JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)49594>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::ExecutableMemoryHandle *v37;

  JSC::LinkBuffer::finalizeCodeWithoutDisassemblyImpl(a1, a2, a3, &v36);
  v12 = (unsigned int *)v37;
  *a4 = v36;
  a4[1] = 0;
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = (unsigned int *)a4[1];
    a4[1] = v12;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    v17 = (unsigned int *)v37;
    v37 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
  }
}

uint64_t JSC::getByIdLoadOwnPropertyHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  pthread_key_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  int v83;
  int v84;
  int v85;
  char v86;
  __int16 v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[31];
  char v92;
  char **v93;
  char *v94;
  _QWORD v95[3];
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE v110[128];
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  int v121;
  _BYTE *v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v105[0] = 0;
  v105[24] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0x8000000080000000;
  v109 = v110;
  v111 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v95[0] = &v94;
    v89 = (WTF *)v95;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v111;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v111 < v16)
    {
      if (v109 && v109 != v110)
      {
        WTF::fastFree((unint64_t)v109, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v109 = (_BYTE *)v14;
      v111 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v111;
    }
  }
  v17 = 0;
  v114 = 1;
  v119 = 16;
  v121 = 0x10000;
  v123 = 17;
  v125 = 0x20000;
  v112 = 0;
  v113 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = v105;
  v120 = 0;
  v122 = v105;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v112;
  }
  *(_DWORD *)&v109[v17] = -1447068675;
  v18 = v112 + 4;
  v112 += 4;
  v89 = (WTF *)v91;
  v90 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v105, "check structure");
    v18 = v112;
  }
  if (v18 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v112;
  }
  *(_DWORD *)&v109[v18] = -1203765246;
  v19 = v112;
  v20 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A5E00);
  }
  *((_DWORD *)v122 + 52) &= ~v125;
  v21 = v123 & 0x1F | 0xB8418120;
  if (v19 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v112;
  }
  *(_DWORD *)&v109[v20] = v21;
  v22 = v112;
  v23 = v112 + 4;
  v112 += 4;
  if (v22 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v112;
  }
  *(_DWORD *)&v109[v23] = 1796276319;
  v24 = v112 + 4;
  v112 += 4;
  if (v126)
  {
    v83 = HIDWORD(v108);
    while (v24 < v83)
    {
      if (v24 + 4 > v111)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v112;
      }
      *(_DWORD *)&v109[v24] = -721215457;
      v83 = HIDWORD(v108);
      v24 = v112 + 4;
      v112 += 4;
    }
    v113 = 0;
  }
  if (v24 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v112;
  }
  *(_DWORD *)&v109[v24] = 1409286145;
  v25 = v112;
  v112 += 4;
  v26 = v112;
  v27 = v25 + 8;
  v28 = v112;
  if (v27 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v112;
  }
  *(_DWORD *)&v109[v28] = -721215457;
  v29 = v112 + 4;
  v112 += 4;
  if (v126)
    v30 = -122;
  else
    v30 = -126;
  v84 = v26;
  v85 = 0;
  v86 = v30;
  v87 = 1;
  v88 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v90) == (_DWORD)v90)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, (void *)(HIDWORD(v90) + 1), (unint64_t)&v84, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v85;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v90);
    v29 = v112;
  }
  if (v29 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v112;
  }
  *(_DWORD *)&v109[v29] = -1203650269;
  v112 += 4;
  JSC::AssemblyHelpers::loadProperty((uint64_t)v105, 0, 3, 0, v9, v10, v11, v12);
  v42 = v112;
  if (v112 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v42 = v112;
  }
  *(_DWORD *)&v109[v42] = -1463714819;
  v43 = v112;
  v44 = v112 + 4;
  v112 += 4;
  if (v43 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v44 = v112;
  }
  *(_DWORD *)&v109[v44] = -698416192;
  v45 = v112 + 4;
  v112 += 4;
  if (HIDWORD(v90))
  {
    v46 = 0;
    v47 = 0;
    v48 = 12 * HIDWORD(v90);
    do
    {
      if (v47 >= HIDWORD(v90))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A5EF8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v89 + v46), (uint64_t)v105, v36, v37, v38, v39, v40, v41);
      ++v47;
      v46 += 12;
    }
    while (v48 != v46);
    v45 = v112;
  }
  if (v45 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v45 = v112;
  }
  *(_DWORD *)&v109[v45] = -129662679;
  v49 = v112;
  v50 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A5EA0);
  }
  *((_DWORD *)v118 + 52) &= ~v121;
  v51 = v119 & 0x1F | 0xF8410120;
  if (v49 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v50 = v112;
  }
  *(_DWORD *)&v109[v50] = v51;
  v52 = v112;
  v53 = v112 + 4;
  v112 += 4;
  if (v52 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v53 = v112;
  }
  *(_DWORD *)&v109[v53] = -702610944;
  v112 += 4;
  v95[0] = 0;
  v95[1] = 0;
  v95[2] = -1;
  v96 = (WTF *)v97;
  v98 = 128;
  v54 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v54 != -1)
  {
    v94 = &v92;
    v93 = &v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v55 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v63 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v63)
  {
    v63 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v63, v55);
  }
  v64 = *(WTF **)v63;
  if (*(_QWORD *)v63 != v63 + 8)
  {
    v65 = *(_DWORD *)(v63 + 136);
    if (v98 < v65)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v56, v57, v58, v59, v60, v61, v62);
        v64 = *(WTF **)v63;
        v65 = *(_DWORD *)(v63 + 136);
      }
      v96 = v64;
      v98 = v65;
      *(_QWORD *)v63 = v63 + 8;
      *(_DWORD *)(v63 + 136) = 128;
    }
  }
  v66 = 1;
  v99 = 1;
  v100 = 0;
  v101 = 6;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v95, (uint64_t)v105, 1, v58, v59, v60, v61, v62);
  BYTE2(v100) = 1;
  if (byte_1ECF4C288)
    goto LABEL_74;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v66 = HIBYTE(word_1ECF4C286) != 0;
LABEL_74:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, v66, "GetById Load handler", 21, "GetById Load handler", a1);
    goto LABEL_66;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, "GetById Load handler", 21, a1);
LABEL_66:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v95, v67, v68, v69, v70, v71, v72, v73);
  v81 = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v105, v74, v75, v76, v77, v78, v79, v80);
}

uint64_t JSC::getByIdLoadPrototypePropertyHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unint64_t v56;
  pthread_key_t *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  unsigned int v67;
  char v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  int v85;
  int v86;
  int v87;
  char v88;
  __int16 v89;
  char v90;
  WTF *v91;
  uint64_t v92;
  _BYTE v93[31];
  char v94;
  char **v95;
  char *v96;
  _QWORD v97[3];
  WTF *v98;
  _BYTE v99[128];
  unsigned int v100;
  char v101;
  int v102;
  int v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _BYTE v107[32];
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  _BYTE v112[128];
  unsigned int v113;
  int v114;
  int v115;
  char v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _BYTE *v120;
  char v121;
  uint64_t v122;
  int v123;
  _BYTE *v124;
  char v125;
  uint64_t v126;
  int v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v107[0] = 0;
  v107[24] = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0x8000000080000000;
  v111 = v112;
  v113 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v97[0] = &v96;
    v91 = (WTF *)v97;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v113;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v113 < v16)
    {
      if (v111 && v111 != v112)
      {
        WTF::fastFree((unint64_t)v111, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v111 = (_BYTE *)v14;
      v113 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v113;
    }
  }
  v17 = 0;
  v116 = 1;
  v121 = 16;
  v123 = 0x10000;
  v125 = 17;
  v127 = 0x20000;
  v114 = 0;
  v115 = 0;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = v107;
  v122 = 0;
  v124 = v107;
  v126 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v114;
  }
  *(_DWORD *)&v111[v17] = -1447068675;
  v18 = v114 + 4;
  v114 += 4;
  v91 = (WTF *)v93;
  v92 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v107, "check structure");
    v18 = v114;
  }
  if (v18 + 4 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v114;
  }
  *(_DWORD *)&v111[v18] = -1203765246;
  v19 = v114;
  v20 = v114 + 4;
  v114 += 4;
  if (!v116)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A6660);
  }
  *((_DWORD *)v124 + 52) &= ~v127;
  v21 = v125 & 0x1F | 0xB8418120;
  if (v19 + 8 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v114;
  }
  *(_DWORD *)&v111[v20] = v21;
  v22 = v114;
  v23 = v114 + 4;
  v114 += 4;
  if (v22 + 8 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v114;
  }
  *(_DWORD *)&v111[v23] = 1796276319;
  v24 = v114 + 4;
  v114 += 4;
  if (v128)
  {
    v85 = HIDWORD(v110);
    while (v24 < v85)
    {
      if (v24 + 4 > v113)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v114;
      }
      *(_DWORD *)&v111[v24] = -721215457;
      v85 = HIDWORD(v110);
      v24 = v114 + 4;
      v114 += 4;
    }
    v115 = 0;
  }
  if (v24 + 4 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v114;
  }
  *(_DWORD *)&v111[v24] = 1409286145;
  v25 = v114;
  v114 += 4;
  v26 = v114;
  v27 = v25 + 8;
  v28 = v114;
  if (v27 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v114;
  }
  *(_DWORD *)&v111[v28] = -721215457;
  v29 = v114 + 4;
  v114 += 4;
  if (v128)
    v30 = -122;
  else
    v30 = -126;
  v86 = v26;
  v87 = 0;
  v88 = v30;
  v89 = 1;
  v90 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v92) == (_DWORD)v92)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, (void *)(HIDWORD(v92) + 1), (unint64_t)&v86, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v91 + 12 * HIDWORD(v92);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v87;
      v34 = (char *)v91 + 12 * HIDWORD(v92);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v92);
    v29 = v114;
  }
  if (v29 + 4 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v114;
  }
  *(_DWORD *)&v111[v29] = -1203650269;
  v35 = v114;
  v36 = v114 + 4;
  v114 += 4;
  if (v35 + 8 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v36 = v114;
  }
  *(_DWORD *)&v111[v36] = -129859294;
  v114 += 4;
  JSC::AssemblyHelpers::loadProperty((uint64_t)v107, 2, 3, 0, v9, v10, v11, v12);
  v44 = v114;
  if (v114 + 4 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, v37, v38, v39, v40, v41, v42, v43);
    v44 = v114;
  }
  *(_DWORD *)&v111[v44] = -1463714819;
  v45 = v114;
  v46 = v114 + 4;
  v114 += 4;
  if (v45 + 8 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, v37, v38, v39, v40, v41, v42, v43);
    v46 = v114;
  }
  *(_DWORD *)&v111[v46] = -698416192;
  v47 = v114 + 4;
  v114 += 4;
  if (HIDWORD(v92))
  {
    v48 = 0;
    v49 = 0;
    v50 = 12 * HIDWORD(v92);
    do
    {
      if (v49 >= HIDWORD(v92))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A6768);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v91 + v48), (uint64_t)v107, v38, v39, v40, v41, v42, v43);
      ++v49;
      v48 += 12;
    }
    while (v50 != v48);
    v47 = v114;
  }
  if (v47 + 4 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, v37, v38, v39, v40, v41, v42, v43);
    v47 = v114;
  }
  *(_DWORD *)&v111[v47] = -129662679;
  v51 = v114;
  v52 = v114 + 4;
  v114 += 4;
  if (!v116)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A6710);
  }
  *((_DWORD *)v120 + 52) &= ~v123;
  v53 = v121 & 0x1F | 0xF8410120;
  if (v51 + 8 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, v37, v38, v39, v40, v41, v42, v43);
    v52 = v114;
  }
  *(_DWORD *)&v111[v52] = v53;
  v54 = v114;
  v55 = v114 + 4;
  v114 += 4;
  if (v54 + 8 > v113)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v111, v37, v38, v39, v40, v41, v42, v43);
    v55 = v114;
  }
  *(_DWORD *)&v111[v55] = -702610944;
  v114 += 4;
  v97[0] = 0;
  v97[1] = 0;
  v97[2] = -1;
  v98 = (WTF *)v99;
  v100 = 128;
  v56 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v56 != -1)
  {
    v96 = &v94;
    v95 = &v96;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v95, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v57 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v65 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v65)
  {
    v65 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v65, v57);
  }
  v66 = *(WTF **)v65;
  if (*(_QWORD *)v65 != v65 + 8)
  {
    v67 = *(_DWORD *)(v65 + 136);
    if (v100 < v67)
    {
      if (v98 && v98 != (WTF *)v99)
      {
        WTF::fastFree((unint64_t)v98, v58, v59, v60, v61, v62, v63, v64);
        v66 = *(WTF **)v65;
        v67 = *(_DWORD *)(v65 + 136);
      }
      v98 = v66;
      v100 = v67;
      *(_QWORD *)v65 = v65 + 8;
      *(_DWORD *)(v65 + 136) = 128;
    }
  }
  v68 = 1;
  v101 = 1;
  v102 = 0;
  v103 = 6;
  v104 = 0u;
  v105 = 0u;
  v106 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v97, (uint64_t)v107, 1, v60, v61, v62, v63, v64);
  BYTE2(v102) = 1;
  if (byte_1ECF4C288)
    goto LABEL_76;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v68 = HIBYTE(word_1ECF4C286) != 0;
LABEL_76:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v97, v68, "GetById Load handler", 21, "GetById Load handler", a1);
    goto LABEL_68;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v97, "GetById Load handler", 21, a1);
LABEL_68:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v97, v69, v70, v71, v72, v73, v74, v75);
  v83 = v91;
  if (v93 != (_BYTE *)v91 && v91)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v83, v76, v77, v78, v79, v80, v81, v82);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v107, v76, v77, v78, v79, v80, v81, v82);
}

uint64_t JSC::getByIdMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  int v82;
  int v83;
  int v84;
  char v85;
  __int16 v86;
  char v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[31];
  char v91;
  char **v92;
  char *v93;
  _QWORD v94[3];
  WTF *v95;
  _BYTE v96[128];
  unsigned int v97;
  char v98;
  int v99;
  int v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _DWORD v104[6];
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE v110[128];
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _DWORD *v118;
  char v119;
  uint64_t v120;
  int v121;
  _DWORD *v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  LOBYTE(v104[0]) = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0x8000000080000000;
  v109 = v110;
  v111 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v94[0] = &v93;
    v88 = (WTF *)v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v88, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v111;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v111 < v16)
    {
      if (v109 && v109 != v110)
      {
        WTF::fastFree((unint64_t)v109, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v109 = (_BYTE *)v14;
      v111 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v111;
    }
  }
  v17 = 0;
  v114 = 1;
  v119 = 16;
  v121 = 0x10000;
  v123 = 17;
  v125 = 0x20000;
  v112 = 0;
  v113 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = v104;
  v120 = 0;
  v122 = v104;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v112;
  }
  *(_DWORD *)&v109[v17] = -1447068675;
  v18 = v112 + 4;
  v112 += 4;
  v88 = (WTF *)v90;
  v89 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v104, "check structure");
    v18 = v112;
  }
  if (v18 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v112;
  }
  *(_DWORD *)&v109[v18] = -1203765246;
  v19 = v112;
  v20 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A6E70);
  }
  v122[52] &= ~v125;
  v21 = v123 & 0x1F | 0xB8418120;
  if (v19 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v112;
  }
  *(_DWORD *)&v109[v20] = v21;
  v22 = v112;
  v23 = v112 + 4;
  v112 += 4;
  if (v22 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v112;
  }
  *(_DWORD *)&v109[v23] = 1796276319;
  v24 = v112 + 4;
  v112 += 4;
  if (v126)
  {
    v82 = HIDWORD(v108);
    while (v24 < v82)
    {
      if (v24 + 4 > v111)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v112;
      }
      *(_DWORD *)&v109[v24] = -721215457;
      v82 = HIDWORD(v108);
      v24 = v112 + 4;
      v112 += 4;
    }
    v113 = 0;
  }
  if (v24 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v112;
  }
  *(_DWORD *)&v109[v24] = 1409286145;
  v25 = v112;
  v112 += 4;
  v26 = v112;
  v27 = v25 + 8;
  v28 = v112;
  if (v27 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v112;
  }
  *(_DWORD *)&v109[v28] = -721215457;
  v112 += 4;
  if (v126)
    v29 = -122;
  else
    v29 = -126;
  v83 = v26;
  v84 = 0;
  v85 = v29;
  v86 = 1;
  v87 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, (void *)(HIDWORD(v89) + 1), (unint64_t)&v83, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v84;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v89);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v104, 10, 0, v8, v9, v10, v11, v12);
  v41 = v112;
  if (v112 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v34, v35, v36, v37, v38, v39, v40);
    v41 = v112;
  }
  *(_DWORD *)&v109[v41] = -1463714819;
  v42 = v112;
  v43 = v112 + 4;
  v112 += 4;
  if (v42 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v34, v35, v36, v37, v38, v39, v40);
    v43 = v112;
  }
  *(_DWORD *)&v109[v43] = -698416192;
  v44 = v112 + 4;
  v112 += 4;
  if (HIDWORD(v89))
  {
    v45 = 0;
    v46 = 0;
    v47 = 12 * HIDWORD(v89);
    do
    {
      if (v46 >= HIDWORD(v89))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A6F58);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v88 + v45), (uint64_t)v104, v35, v36, v37, v38, v39, v40);
      ++v46;
      v45 += 12;
    }
    while (v47 != v45);
    v44 = v112;
  }
  if (v44 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v34, v35, v36, v37, v38, v39, v40);
    v44 = v112;
  }
  *(_DWORD *)&v109[v44] = -129662679;
  v48 = v112;
  v49 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A6F00);
  }
  v118[52] &= ~v121;
  v50 = v119 & 0x1F | 0xF8410120;
  if (v48 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v34, v35, v36, v37, v38, v39, v40);
    v49 = v112;
  }
  *(_DWORD *)&v109[v49] = v50;
  v51 = v112;
  v52 = v112 + 4;
  v112 += 4;
  if (v51 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v34, v35, v36, v37, v38, v39, v40);
    v52 = v112;
  }
  *(_DWORD *)&v109[v52] = -702610944;
  v112 += 4;
  v94[0] = 0;
  v94[1] = 0;
  v94[2] = -1;
  v95 = (WTF *)v96;
  v97 = 128;
  v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v53 != -1)
  {
    v93 = &v91;
    v92 = &v93;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v62)
  {
    v62 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
  }
  v63 = *(WTF **)v62;
  if (*(_QWORD *)v62 != v62 + 8)
  {
    v64 = *(_DWORD *)(v62 + 136);
    if (v97 < v64)
    {
      if (v95 && v95 != (WTF *)v96)
      {
        WTF::fastFree((unint64_t)v95, v55, v56, v57, v58, v59, v60, v61);
        v63 = *(WTF **)v62;
        v64 = *(_DWORD *)(v62 + 136);
      }
      v95 = v63;
      v97 = v64;
      *(_QWORD *)v62 = v62 + 8;
      *(_DWORD *)(v62 + 136) = 128;
    }
  }
  v65 = 1;
  v98 = 1;
  v99 = 0;
  v100 = 6;
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v94, (uint64_t)v104, 1, v57, v58, v59, v60, v61);
  BYTE2(v99) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v65 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, v65, "GetById Miss handler", 21, "GetById Miss handler", a1);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, "GetById Miss handler", 21, a1);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v94, v66, v67, v68, v69, v70, v71, v72);
  v80 = v88;
  if (v90 != (_BYTE *)v88 && v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree((unint64_t)v80, v73, v74, v75, v76, v77, v78, v79);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v104, v73, v74, v75, v76, v77, v78, v79);
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  JSC::ExecutableMemoryHandle *v39;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a1, a2, a3, a4, a5, &v38, (uint64_t)v38);
  v14 = (unsigned int *)v39;
  *a6 = v38;
  a6[1] = 0;
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = (unsigned int *)a6[1];
    a6[1] = v14;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
    }
    v19 = (unsigned int *)v39;
    v39 = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
  }
}

void JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  JSC::ExecutableMemoryHandle *v52;

  v8 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a1 + 192);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a1);
      v10 -= 8;
    }
    while (v10);
  }
  v12 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v12)
  {
    v31 = *(uint64_t **)(a1 + 208);
    v32 = 8 * v12;
    do
    {
      v33 = *v31++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, a1);
      v32 -= 8;
    }
    while (v32);
  }
  v13 = *(unsigned int *)(a1 + 176);
  *((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v13) += *(_QWORD *)(a1 + 8);
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v13);
  v14 = (uint64_t *)(a1 + 184);
  sys_icache_invalidate(*(void **)(a1 + 184), *(_QWORD *)(a1 + 8));
  v22 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v50 = __ldaxr(v22);
    while (__stlxr(v50 + 1, v22));
    v14 = (uint64_t *)(v22 + 2);
  }
  v23 = *v14;
  v51 = v23;
  v52 = (JSC::ExecutableMemoryHandle *)v22;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf(a1, (uint64_t)&v51, a2, a3);
  *a4 = v23;
  a4[1] = 0;
  if (v22)
  {
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 + 1, v22));
    v25 = (unsigned int *)a4[1];
    a4[1] = v22;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    v28 = (unsigned int *)v52;
    v52 = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v28, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
    }
  }
}

uint64_t JSC::getByIdCustomAccessorHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  pthread_key_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  int v83;
  int v84;
  int v85;
  char v86;
  __int16 v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[31];
  char v92;
  char **v93;
  char *v94;
  _QWORD v95[3];
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE v110[128];
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  int v121;
  _BYTE *v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v105[0] = 0;
  v105[24] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0x8000000080000000;
  v109 = v110;
  v111 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v95[0] = &v94;
    v89 = (WTF *)v95;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v111;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v111 < v17)
    {
      if (v109 && v109 != v110)
      {
        WTF::fastFree((unint64_t)v109, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v109 = (_BYTE *)v15;
      v111 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v111;
    }
  }
  v18 = 0;
  v114 = 1;
  v119 = 16;
  v121 = 0x10000;
  v123 = 17;
  v125 = 0x20000;
  v112 = 0;
  v113 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = v105;
  v120 = 0;
  v122 = v105;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v112;
  }
  *(_DWORD *)&v109[v18] = -1447068675;
  v19 = v112 + 4;
  v112 += 4;
  v89 = (WTF *)v91;
  v90 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v105, "check structure");
    v19 = v112;
  }
  if (v19 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v112;
  }
  *(_DWORD *)&v109[v19] = -1203765246;
  v20 = v112;
  v21 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A78E4);
  }
  *((_DWORD *)v122 + 52) &= ~v125;
  v22 = v123 & 0x1F | 0xB8418120;
  if (v20 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v112;
  }
  *(_DWORD *)&v109[v21] = v22;
  v23 = v112;
  v24 = v112 + 4;
  v112 += 4;
  if (v23 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v112;
  }
  *(_DWORD *)&v109[v24] = 1796276319;
  v25 = v112 + 4;
  v112 += 4;
  if (v126)
  {
    v83 = HIDWORD(v108);
    while (v25 < v83)
    {
      if (v25 + 4 > v111)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v112;
      }
      *(_DWORD *)&v109[v25] = -721215457;
      v83 = HIDWORD(v108);
      v25 = v112 + 4;
      v112 += 4;
    }
    v113 = 0;
  }
  if (v25 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v112;
  }
  *(_DWORD *)&v109[v25] = 1409286145;
  v26 = v112;
  v112 += 4;
  v27 = v112;
  v28 = v26 + 8;
  v29 = v112;
  if (v28 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v112;
  }
  *(_DWORD *)&v109[v29] = -721215457;
  v112 += 4;
  if (v126)
    v30 = -122;
  else
    v30 = -126;
  v84 = v27;
  v85 = 0;
  v86 = v30;
  v87 = 1;
  v88 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v90) == (_DWORD)v90)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, (void *)(HIDWORD(v90) + 1), (unint64_t)&v84, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v85;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v90);
  }
  JSC::customGetterHandlerImpl<true>((uint64_t)this, (uint64_t)v105, 1u, 2, 3, 4, v12, v13);
  v42 = v112;
  if (v112 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v42 = v112;
  }
  *(_DWORD *)&v109[v42] = -1463714819;
  v43 = v112;
  v44 = v112 + 4;
  v112 += 4;
  if (v43 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v44 = v112;
  }
  *(_DWORD *)&v109[v44] = -698416192;
  v45 = v112 + 4;
  v112 += 4;
  if (HIDWORD(v90))
  {
    v46 = 0;
    v47 = 0;
    v48 = 12 * HIDWORD(v90);
    do
    {
      if (v47 >= HIDWORD(v90))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A79CCLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v89 + v46), (uint64_t)v105, v36, v37, v38, v39, v40, v41);
      ++v47;
      v46 += 12;
    }
    while (v48 != v46);
    v45 = v112;
  }
  if (v45 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v45 = v112;
  }
  *(_DWORD *)&v109[v45] = -129662679;
  v49 = v112;
  v50 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A7974);
  }
  *((_DWORD *)v118 + 52) &= ~v121;
  v51 = v119 & 0x1F | 0xF8410120;
  if (v49 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v50 = v112;
  }
  *(_DWORD *)&v109[v50] = v51;
  v52 = v112;
  v53 = v112 + 4;
  v112 += 4;
  if (v52 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v53 = v112;
  }
  *(_DWORD *)&v109[v53] = -702610944;
  v112 += 4;
  v95[0] = 0;
  v95[1] = 0;
  v95[2] = -1;
  v96 = (WTF *)v97;
  v98 = 128;
  v54 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v54 != -1)
  {
    v94 = &v92;
    v93 = &v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v55 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v63 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v63)
  {
    v63 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v63, v55);
  }
  v64 = *(WTF **)v63;
  if (*(_QWORD *)v63 != v63 + 8)
  {
    v65 = *(_DWORD *)(v63 + 136);
    if (v98 < v65)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v56, v57, v58, v59, v60, v61, v62);
        v64 = *(WTF **)v63;
        v65 = *(_DWORD *)(v63 + 136);
      }
      v96 = v64;
      v98 = v65;
      *(_QWORD *)v63 = v63 + 8;
      *(_DWORD *)(v63 + 136) = 128;
    }
  }
  v66 = 1;
  v99 = 1;
  v100 = 0;
  v101 = 6;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v95, (uint64_t)v105, 1, v58, v59, v60, v61, v62);
  BYTE2(v100) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v66 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, v66, "GetById Custom handler", 23, "GetById Custom handler", a2);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, "GetById Custom handler", 23, a2);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v95, v67, v68, v69, v70, v71, v72, v73);
  v81 = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v105, v74, v75, v76, v77, v78, v79, v80);
}

uint64_t JSC::getByIdCustomValueHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  pthread_key_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  int v83;
  int v84;
  int v85;
  char v86;
  __int16 v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[31];
  char v92;
  char **v93;
  char *v94;
  _QWORD v95[3];
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE v110[128];
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  int v121;
  _BYTE *v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v105[0] = 0;
  v105[24] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0x8000000080000000;
  v109 = v110;
  v111 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v95[0] = &v94;
    v89 = (WTF *)v95;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v111;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v111 < v17)
    {
      if (v109 && v109 != v110)
      {
        WTF::fastFree((unint64_t)v109, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v109 = (_BYTE *)v15;
      v111 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v111;
    }
  }
  v18 = 0;
  v114 = 1;
  v119 = 16;
  v121 = 0x10000;
  v123 = 17;
  v125 = 0x20000;
  v112 = 0;
  v113 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = v105;
  v120 = 0;
  v122 = v105;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v112;
  }
  *(_DWORD *)&v109[v18] = -1447068675;
  v19 = v112 + 4;
  v112 += 4;
  v89 = (WTF *)v91;
  v90 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v105, "check structure");
    v19 = v112;
  }
  if (v19 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v112;
  }
  *(_DWORD *)&v109[v19] = -1203765246;
  v20 = v112;
  v21 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A80ECLL);
  }
  *((_DWORD *)v122 + 52) &= ~v125;
  v22 = v123 & 0x1F | 0xB8418120;
  if (v20 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v112;
  }
  *(_DWORD *)&v109[v21] = v22;
  v23 = v112;
  v24 = v112 + 4;
  v112 += 4;
  if (v23 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v112;
  }
  *(_DWORD *)&v109[v24] = 1796276319;
  v25 = v112 + 4;
  v112 += 4;
  if (v126)
  {
    v83 = HIDWORD(v108);
    while (v25 < v83)
    {
      if (v25 + 4 > v111)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v112;
      }
      *(_DWORD *)&v109[v25] = -721215457;
      v83 = HIDWORD(v108);
      v25 = v112 + 4;
      v112 += 4;
    }
    v113 = 0;
  }
  if (v25 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v112;
  }
  *(_DWORD *)&v109[v25] = 1409286145;
  v26 = v112;
  v112 += 4;
  v27 = v112;
  v28 = v26 + 8;
  v29 = v112;
  if (v28 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v112;
  }
  *(_DWORD *)&v109[v29] = -721215457;
  v112 += 4;
  if (v126)
    v30 = -122;
  else
    v30 = -126;
  v84 = v27;
  v85 = 0;
  v86 = v30;
  v87 = 1;
  v88 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v90) == (_DWORD)v90)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, (void *)(HIDWORD(v90) + 1), (unint64_t)&v84, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v85;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v90);
  }
  JSC::customGetterHandlerImpl<false>((uint64_t)this, (uint64_t)v105, 1, 2, 3, 4, v12, v13);
  v42 = v112;
  if (v112 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v42 = v112;
  }
  *(_DWORD *)&v109[v42] = -1463714819;
  v43 = v112;
  v44 = v112 + 4;
  v112 += 4;
  if (v43 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v44 = v112;
  }
  *(_DWORD *)&v109[v44] = -698416192;
  v45 = v112 + 4;
  v112 += 4;
  if (HIDWORD(v90))
  {
    v46 = 0;
    v47 = 0;
    v48 = 12 * HIDWORD(v90);
    do
    {
      if (v47 >= HIDWORD(v90))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A81D4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v89 + v46), (uint64_t)v105, v36, v37, v38, v39, v40, v41);
      ++v47;
      v46 += 12;
    }
    while (v48 != v46);
    v45 = v112;
  }
  if (v45 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v45 = v112;
  }
  *(_DWORD *)&v109[v45] = -129662679;
  v49 = v112;
  v50 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A817CLL);
  }
  *((_DWORD *)v118 + 52) &= ~v121;
  v51 = v119 & 0x1F | 0xF8410120;
  if (v49 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v50 = v112;
  }
  *(_DWORD *)&v109[v50] = v51;
  v52 = v112;
  v53 = v112 + 4;
  v112 += 4;
  if (v52 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v53 = v112;
  }
  *(_DWORD *)&v109[v53] = -702610944;
  v112 += 4;
  v95[0] = 0;
  v95[1] = 0;
  v95[2] = -1;
  v96 = (WTF *)v97;
  v98 = 128;
  v54 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v54 != -1)
  {
    v94 = &v92;
    v93 = &v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v55 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v63 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v63)
  {
    v63 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v63, v55);
  }
  v64 = *(WTF **)v63;
  if (*(_QWORD *)v63 != v63 + 8)
  {
    v65 = *(_DWORD *)(v63 + 136);
    if (v98 < v65)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v56, v57, v58, v59, v60, v61, v62);
        v64 = *(WTF **)v63;
        v65 = *(_DWORD *)(v63 + 136);
      }
      v96 = v64;
      v98 = v65;
      *(_QWORD *)v63 = v63 + 8;
      *(_DWORD *)(v63 + 136) = 128;
    }
  }
  v66 = 1;
  v99 = 1;
  v100 = 0;
  v101 = 6;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v95, (uint64_t)v105, 1, v58, v59, v60, v61, v62);
  BYTE2(v100) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v66 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, v66, "GetById Custom handler", 23, "GetById Custom handler", a2);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, "GetById Custom handler", 23, a2);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v95, v67, v68, v69, v70, v71, v72, v73);
  v81 = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v105, v74, v75, v76, v77, v78, v79, v80);
}

uint64_t JSC::getByIdGetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  int v82;
  int v83;
  int v84;
  char v85;
  __int16 v86;
  char v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[31];
  char v91;
  char **v92;
  char *v93;
  _QWORD v94[3];
  WTF *v95;
  _BYTE v96[128];
  unsigned int v97;
  char v98;
  int v99;
  int v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _BYTE v109[128];
  unsigned int v110;
  int v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE *v117;
  char v118;
  uint64_t v119;
  int v120;
  _BYTE *v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v104[0] = 0;
  v104[24] = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0x8000000080000000;
  v108 = v109;
  v110 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v94[0] = &v93;
    v88 = (WTF *)v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v88, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v110;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v110 < v16)
    {
      if (v108 && v108 != v109)
      {
        WTF::fastFree((unint64_t)v108, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v108 = (_BYTE *)v14;
      v110 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v110;
    }
  }
  v17 = 0;
  v113 = 1;
  v118 = 16;
  v120 = 0x10000;
  v122 = 17;
  v124 = 0x20000;
  v111 = 0;
  v112 = 0;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = v104;
  v119 = 0;
  v121 = v104;
  v123 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v111;
  }
  *(_DWORD *)&v108[v17] = -1447068675;
  v18 = v111 + 4;
  v111 += 4;
  v88 = (WTF *)v90;
  v89 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v104, "check structure");
    v18 = v111;
  }
  if (v18 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v111;
  }
  *(_DWORD *)&v108[v18] = -1203765246;
  v19 = v111;
  v20 = v111 + 4;
  v111 += 4;
  if (!v113)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A88E0);
  }
  *((_DWORD *)v121 + 52) &= ~v124;
  v21 = v122 & 0x1F | 0xB8418120;
  if (v19 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v111;
  }
  *(_DWORD *)&v108[v20] = v21;
  v22 = v111;
  v23 = v111 + 4;
  v111 += 4;
  if (v22 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v111;
  }
  *(_DWORD *)&v108[v23] = 1796276319;
  v24 = v111 + 4;
  v111 += 4;
  if (v125)
  {
    v82 = HIDWORD(v107);
    while (v24 < v82)
    {
      if (v24 + 4 > v110)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v111;
      }
      *(_DWORD *)&v108[v24] = -721215457;
      v82 = HIDWORD(v107);
      v24 = v111 + 4;
      v111 += 4;
    }
    v112 = 0;
  }
  if (v24 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v111;
  }
  *(_DWORD *)&v108[v24] = 1409286145;
  v25 = v111;
  v111 += 4;
  v26 = v111;
  v27 = v25 + 8;
  v28 = v111;
  if (v27 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v111;
  }
  *(_DWORD *)&v108[v28] = -721215457;
  v111 += 4;
  if (v125)
    v29 = -122;
  else
    v29 = -126;
  v83 = v26;
  v84 = 0;
  v85 = v29;
  v86 = 1;
  v87 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, (void *)(HIDWORD(v89) + 1), (unint64_t)&v83, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v84;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v89);
  }
  JSC::getterHandlerImpl((uint64_t)v104, 1, 2, 3, v9, v10, v11, v12);
  v41 = v111;
  if (v111 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v41 = v111;
  }
  *(_DWORD *)&v108[v41] = -1463714819;
  v42 = v111;
  v43 = v111 + 4;
  v111 += 4;
  if (v42 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v43 = v111;
  }
  *(_DWORD *)&v108[v43] = -698416192;
  v44 = v111 + 4;
  v111 += 4;
  if (HIDWORD(v89))
  {
    v45 = 0;
    v46 = 0;
    v47 = 12 * HIDWORD(v89);
    do
    {
      if (v46 >= HIDWORD(v89))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A89C8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v88 + v45), (uint64_t)v104, v35, v36, v37, v38, v39, v40);
      ++v46;
      v45 += 12;
    }
    while (v47 != v45);
    v44 = v111;
  }
  if (v44 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v44 = v111;
  }
  *(_DWORD *)&v108[v44] = -129662679;
  v48 = v111;
  v49 = v111 + 4;
  v111 += 4;
  if (!v113)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A8970);
  }
  *((_DWORD *)v117 + 52) &= ~v120;
  v50 = v118 & 0x1F | 0xF8410120;
  if (v48 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v49 = v111;
  }
  *(_DWORD *)&v108[v49] = v50;
  v51 = v111;
  v52 = v111 + 4;
  v111 += 4;
  if (v51 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v52 = v111;
  }
  *(_DWORD *)&v108[v52] = -702610944;
  v111 += 4;
  v94[0] = 0;
  v94[1] = 0;
  v94[2] = -1;
  v95 = (WTF *)v96;
  v97 = 128;
  v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v53 != -1)
  {
    v93 = &v91;
    v92 = &v93;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v62)
  {
    v62 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
  }
  v63 = *(WTF **)v62;
  if (*(_QWORD *)v62 != v62 + 8)
  {
    v64 = *(_DWORD *)(v62 + 136);
    if (v97 < v64)
    {
      if (v95 && v95 != (WTF *)v96)
      {
        WTF::fastFree((unint64_t)v95, v55, v56, v57, v58, v59, v60, v61);
        v63 = *(WTF **)v62;
        v64 = *(_DWORD *)(v62 + 136);
      }
      v95 = v63;
      v97 = v64;
      *(_QWORD *)v62 = v62 + 8;
      *(_DWORD *)(v62 + 136) = 128;
    }
  }
  v65 = 1;
  v98 = 1;
  v99 = 0;
  v100 = 6;
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v94, (uint64_t)v104, 1, v57, v58, v59, v60, v61);
  BYTE2(v99) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v65 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, v65, "GetById Getter handler", 23, "GetById Getter handler", a1);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, "GetById Getter handler", 23, a1);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v94, v66, v67, v68, v69, v70, v71, v72);
  v80 = v88;
  if (v90 != (_BYTE *)v88 && v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree((unint64_t)v80, v73, v74, v75, v76, v77, v78, v79);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v104, v73, v74, v75, v76, v77, v78, v79);
}

unsigned int *JSC::getterHandlerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v10;
  int v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int i;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v96[2];
  char v97;
  __int16 v98;
  char v99;
  unsigned int v100[3];
  _QWORD v101[2];

  v10 = a2;
  v12 = a3 & 0x1F;
  v13 = (JSC::AssemblerBuffer *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v12 | 0xF8428120;
  v15 = *(_DWORD *)(a1 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a1 + 200) = v15 + 4;
  if ((v15 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = (32 * v12) | (v12 << 16) | 0xEA00001F;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v12 & 0xFFE0FFFF | ((v12 & 0x1F) << 16) | 0x9A800000;
  v19 = *(_DWORD *)(a1 + 200);
  v20 = v19 + 4;
  *(_DWORD *)(a1 + 200) = v19 + 4;
  if ((v19 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = a4 & 0x1F | 0xB841C120;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::loadProperty(a1, a3, a4, a3, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981A8EBCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, v10 | 0x7000000000, *(char *)(a1 + 272), v21, v22, v23, v24, v25);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981A8EDCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v33 = *(_BYTE *)(a1 + 272) & 0x1F | 0xB80243A0;
  v34 = *(_DWORD *)(a1 + 200);
  if (v34 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v26, v27, v28, v29, v30, v31, v32);
    v34 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = v33;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, a3 | 0x800000000, a3, v28, v29, v30, v31, v32);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981A8F0CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, a3 | 0x500000000, *(char *)(a1 + 304), v35, v36, v37, v38, v39);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 28, v40, v41, v42, v43, (uint64_t)v100);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, 0, v44, v45, v46, v47, v48);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, v49, v50, v51, v52, v53, v54, v55);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v57 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v49, v50, v51, v52, v53, v54, v55);
    v57 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v58 = 69;
  else
    v58 = 65;
  v96[0] = i;
  v96[1] = 0;
  v97 = v58;
  v98 = 15;
  v99 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v100, a1, v50, v51, v52, v53, v54, v55);
  v66 = *(_DWORD *)(a1 + 200);
  if (v66 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v59, v60, v61, v62, v63, v64, v65);
    v66 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v66) = -788495361;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981A8F88);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)1, a1 + 264, v61, v62, v63, v64, v65);
  v74 = *(_DWORD *)(a1 + 200);
  if (v74 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v67, v68, v69, v70, v71, v72, v73);
    v74 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = -1207893008;
  v75 = *(_DWORD *)(a1 + 200);
  v76 = v75 + 4;
  *(_DWORD *)(a1 + 200) = v75 + 4;
  if ((v75 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v67, v68, v69, v70, v71, v72, v73);
    v76 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v76) = v12 | 0xF80083E0;
  v77 = *(_DWORD *)(a1 + 200);
  v78 = v77 + 4;
  *(_DWORD *)(a1 + 200) = v77 + 4;
  if ((v77 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v67, v68, v69, v70, v71, v72, v73);
    v78 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = -134118432;
  v79 = *(_DWORD *)(a1 + 200);
  v80 = v79 + 4;
  *(_DWORD *)(a1 + 200) = v79 + 4;
  if ((v79 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v67, v68, v69, v70, v71, v72, v73);
    v80 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v80) = (v12 << 16) | 0xAA0003E0;
  v81 = *(_DWORD *)(a1 + 200);
  v82 = v81 + 4;
  *(_DWORD *)(a1 + 200) = v81 + 4;
  if ((v81 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v67, v68, v69, v70, v71, v72, v73);
    v82 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v82) = -1862172382;
  *(_DWORD *)(a1 + 200) += 4;
  v101[0] = 0;
  v101[1] = 0;
  JSC::CallLinkInfo::emitFastPathImpl(0, a1, 0, (uint64_t)v101, v70, v71, v72, v73);
  v90 = *(_DWORD *)(a1 + 200);
  if (v90 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v83, v84, v85, v86, v87, v88, v89);
    v90 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v90) = v12 | 0xF8410340;
  v91 = *(_DWORD *)(a1 + 200);
  v92 = v91 + 4;
  *(_DWORD *)(a1 + 200) = v91 + 4;
  if ((v91 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v83, v84, v85, v86, v87, v88, v89);
    v92 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v92) = a3 | (32 * a3) | 0xD1004000;
  v93 = *(_DWORD *)(a1 + 200);
  v94 = v93 + 4;
  *(_DWORD *)(a1 + 200) = v93 + 4;
  if ((v93 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v83, v84, v85, v86, v87, v88, v89);
    v94 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v94) = (32 * a3) | 0x8B3D601F;
  *(_DWORD *)(a1 + 200) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v96, a1, v84, v85, v86, v87, v88, v89);
}

uint64_t JSC::getByIdProxyObjectLoadHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  unint64_t v94;
  pthread_key_t *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  unsigned int v105;
  char v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  int v123;
  int v124;
  int v125;
  char v126;
  __int16 v127;
  char v128;
  WTF *v129;
  uint64_t v130;
  _BYTE v131[31];
  char v132;
  char **v133;
  char *v134;
  char **v135;
  uint64_t v136;
  uint64_t v137;
  WTF *v138;
  _BYTE v139[128];
  unsigned int v140;
  char v141;
  int v142;
  int v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unsigned int v147[6];
  char v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  _BYTE v153[128];
  unsigned int v154;
  int v155;
  int v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  unsigned int *v161;
  unsigned __int8 v162;
  uint64_t v163;
  int v164;
  unsigned int *v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  LOBYTE(v147[0]) = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0x8000000080000000;
  v152 = v153;
  v154 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v135 = &v134;
    v129 = (WTF *)&v135;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v129, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v154;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v154 < v16)
    {
      if (v152 && v152 != v153)
      {
        WTF::fastFree((unint64_t)v152, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v152 = (_BYTE *)v14;
      v154 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v154;
    }
  }
  v17 = 0;
  v157 = 1;
  v155 = 0;
  v156 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v162 = 16;
  v164 = 0x10000;
  v166 = 17;
  v168 = 0x20000;
  v161 = v147;
  v163 = 0;
  v165 = v147;
  v167 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v155;
  }
  *(_DWORD *)&v152[v17] = -1447068675;
  v18 = v155 + 4;
  v155 += 4;
  v129 = (WTF *)v131;
  v130 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v147, "check structure");
    v18 = v155;
  }
  if (v18 + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v155;
  }
  *(_DWORD *)&v152[v18] = -1203765246;
  v19 = v155;
  v20 = v155 + 4;
  v155 += 4;
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A9A90);
  }
  v165[52] &= ~v168;
  v21 = v166 & 0x1F | 0xB8418120;
  if (v19 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v155;
  }
  *(_DWORD *)&v152[v20] = v21;
  v22 = v155;
  v23 = v155 + 4;
  v155 += 4;
  if (v22 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v155;
  }
  *(_DWORD *)&v152[v23] = 1796276319;
  v24 = v155 + 4;
  v155 += 4;
  if (v169)
  {
    v123 = HIDWORD(v151);
    while (v24 < v123)
    {
      if (v24 + 4 > v154)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v155;
      }
      *(_DWORD *)&v152[v24] = -721215457;
      v123 = HIDWORD(v151);
      v24 = v155 + 4;
      v155 += 4;
    }
    v156 = 0;
  }
  if (v24 + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v155;
  }
  *(_DWORD *)&v152[v24] = 1409286145;
  v25 = v155;
  v155 += 4;
  v26 = v155;
  v27 = v25 + 8;
  v28 = v155;
  if (v27 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v155;
  }
  *(_DWORD *)&v152[v28] = -721215457;
  v155 += 4;
  if (v169)
    v29 = -122;
  else
    v29 = -126;
  v124 = v26;
  v125 = 0;
  v126 = v29;
  v127 = 1;
  v128 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v130) == (_DWORD)v130)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v129, (void *)(HIDWORD(v130) + 1), (unint64_t)&v124, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v129 + 12 * HIDWORD(v130);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v125;
      v33 = (char *)v129 + 12 * HIDWORD(v130);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v130);
  }
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A9AF0);
  }
  v161[52] &= ~v164;
  v34 = v162 & 0x1F | 0xB8470020;
  v35 = v155;
  if (v155 + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v35 = v155;
  }
  *(_DWORD *)&v152[v35] = v34;
  v36 = v155;
  v37 = v155 + 4;
  v155 += 4;
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A9B20);
  }
  v161[52] &= ~v164;
  v38 = v162 & 0x1F | 0xB80243A0;
  if (v36 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v37 = v155;
  }
  *(_DWORD *)&v152[v37] = v38;
  v39 = v155;
  v40 = v155 + 4;
  v155 += 4;
  if (v39 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v40 = v155;
  }
  *(_DWORD *)&v152[v40] = -788478977;
  v155 += 4;
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A9B60);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(v147, (JSC::ARM64LogicalImmediate *)3, (uint64_t)&v161, v8, v9, v10, v11, v12);
  v48 = v155;
  if (v155 + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v48 = v155;
  }
  *(_DWORD *)&v152[v48] = -1207893008;
  v49 = v155;
  v50 = v155 + 4;
  v155 += 4;
  if (v49 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v50 = v155;
  }
  *(_DWORD *)&v152[v50] = -134118432;
  v51 = v155;
  v52 = v155 + 4;
  v155 += 4;
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A9BA0);
  }
  v161[52] &= ~v164;
  v53 = (v162 & 0x1F | 0xF8410120) + 98304;
  if (v51 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v52 = v155;
  }
  *(_DWORD *)&v152[v52] = v53;
  v54 = v155;
  v55 = v155 + 4;
  v155 += 4;
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A9BD0);
  }
  v161[52] &= ~v164;
  v56 = v162 | 0xF80203E0;
  if (v54 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v55 = v155;
  }
  *(_DWORD *)&v152[v55] = v56;
  v57 = v155;
  v58 = v155 + 4;
  v155 += 4;
  if (v57 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v58 = v155;
  }
  *(_DWORD *)&v152[v58] = -134052896;
  v59 = v155;
  v60 = v155 + 4;
  v155 += 4;
  if (v59 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v60 = v155;
  }
  *(_DWORD *)&v152[v60] = -129794014;
  v61 = v155;
  v62 = v155 + 4;
  v155 += 4;
  if (v61 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v62 = v155;
  }
  *(_DWORD *)&v152[v62] = -113171390;
  v63 = v155;
  v64 = v155 + 4;
  v155 += 4;
  if (v63 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v64 = v155;
  }
  *(_DWORD *)&v152[v64] = -134183966;
  v65 = v155;
  v66 = v155 + 4;
  v155 += 4;
  if (v65 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v66 = v155;
  }
  *(_DWORD *)&v152[v66] = -1442708512;
  v67 = v155;
  v68 = v155 + 4;
  v155 += 4;
  if (v67 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v41, v42, v43, v44, v45, v46, v47);
    v68 = v155;
  }
  *(_DWORD *)&v152[v68] = -1862172382;
  v155 += 4;
  v135 = 0;
  v136 = 0;
  JSC::CallLinkInfo::emitFastPathImpl(0, (uint64_t)v147, 0, (uint64_t)&v135, v44, v45, v46, v47);
  v76 = v155;
  if (v155 + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v76 = v155;
  }
  *(_DWORD *)&v152[v76] = -129957054;
  v77 = v155;
  v78 = v155 + 4;
  v155 += 4;
  if (v77 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v78 = v155;
  }
  *(_DWORD *)&v152[v78] = -788512702;
  v79 = v155;
  v80 = v155 + 4;
  v155 += 4;
  if (v79 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v80 = v155;
  }
  *(_DWORD *)&v152[v80] = -1958911905;
  v81 = v155;
  v82 = v155 + 4;
  v155 += 4;
  if (v81 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v82 = v155;
  }
  *(_DWORD *)&v152[v82] = -1463714819;
  v83 = v155;
  v84 = v155 + 4;
  v155 += 4;
  if (v83 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v84 = v155;
  }
  *(_DWORD *)&v152[v84] = -698416192;
  v85 = v155 + 4;
  v155 += 4;
  if (HIDWORD(v130))
  {
    v86 = 0;
    v87 = 0;
    v88 = 12 * HIDWORD(v130);
    do
    {
      if (v87 >= HIDWORD(v130))
      {
        __break(0xC471u);
        JUMPOUT(0x1981A9D18);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v129 + v86), (uint64_t)v147, v70, v71, v72, v73, v74, v75);
      ++v87;
      v86 += 12;
    }
    while (v88 != v86);
    v85 = v155;
  }
  if (v85 + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v85 = v155;
  }
  *(_DWORD *)&v152[v85] = -129662679;
  v89 = v155;
  v90 = v155 + 4;
  v155 += 4;
  if (!v157)
  {
    __break(0xC471u);
    JUMPOUT(0x1981A9CC0);
  }
  v161[52] &= ~v164;
  v91 = v162 & 0x1F | 0xF8410120;
  if (v89 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v90 = v155;
  }
  *(_DWORD *)&v152[v90] = v91;
  v92 = v155;
  v93 = v155 + 4;
  v155 += 4;
  if (v92 + 8 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, v69, v70, v71, v72, v73, v74, v75);
    v93 = v155;
  }
  *(_DWORD *)&v152[v93] = -702610944;
  v155 += 4;
  v135 = 0;
  v136 = 0;
  v137 = -1;
  v138 = (WTF *)v139;
  v140 = 128;
  v94 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v94 != -1)
  {
    v134 = &v132;
    v133 = &v134;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v133, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v95 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v103 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v103)
  {
    v103 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v103, v95);
  }
  v104 = *(WTF **)v103;
  if (*(_QWORD *)v103 != v103 + 8)
  {
    v105 = *(_DWORD *)(v103 + 136);
    if (v140 < v105)
    {
      if (v138 && v138 != (WTF *)v139)
      {
        WTF::fastFree((unint64_t)v138, v96, v97, v98, v99, v100, v101, v102);
        v104 = *(WTF **)v103;
        v105 = *(_DWORD *)(v103 + 136);
      }
      v138 = v104;
      v140 = v105;
      *(_QWORD *)v103 = v103 + 8;
      *(_DWORD *)(v103 + 136) = 128;
    }
  }
  v106 = 1;
  v141 = 1;
  v142 = 0;
  v143 = 6;
  v144 = 0u;
  v145 = 0u;
  v146 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v135, (uint64_t)v147, 1, v98, v99, v100, v101, v102);
  BYTE2(v142) = 1;
  if (byte_1ECF4C288)
    goto LABEL_109;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v106 = HIBYTE(word_1ECF4C286) != 0;
LABEL_109:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v135, v106, "GetById ProxyObjectLoad handler", 32, "GetById ProxyObjectLoad handler", a1);
    goto LABEL_101;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v135, "GetById ProxyObjectLoad handler", 32, a1);
LABEL_101:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v135, v107, v108, v109, v110, v111, v112, v113);
  v121 = v129;
  if (v131 != (_BYTE *)v129 && v129)
  {
    v129 = 0;
    LODWORD(v130) = 0;
    WTF::fastFree((unint64_t)v121, v114, v115, v116, v117, v118, v119, v120);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v147, v114, v115, v116, v117, v118, v119, v120);
}

uint64_t JSC::getByIdModuleNamespaceLoadHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t *v32;
  int v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int *v47;
  int *v48;
  int v49;
  char *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  pthread_key_t *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unsigned int v86;
  char v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  WTF *v103;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  _BYTE v111[24];
  WTF *v112;
  uint64_t v113;
  _BYTE v114[31];
  char v115;
  char **v116;
  char *v117;
  _QWORD v118[3];
  WTF *v119;
  _BYTE v120[128];
  unsigned int v121;
  char v122;
  int v123;
  int v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  _BYTE v128[32];
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  WTF *v132;
  _BYTE v133[128];
  unsigned int v134;
  unsigned int v135;
  int v136;
  char v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _BYTE *v141;
  char v142;
  uint64_t v143;
  int v144;
  _BYTE *v145;
  char v146;
  uint64_t v147;
  int v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v128[0] = 0;
  v128[24] = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0x8000000080000000;
  v132 = (WTF *)v133;
  v134 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v118[0] = &v109;
    v112 = (WTF *)v118;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(WTF **)v13;
  v15 = v134;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v134 < v16)
    {
      if (v132 && v132 != (WTF *)v133)
      {
        WTF::fastFree((unint64_t)v132, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(WTF **)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v132 = v14;
      v134 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v134;
    }
  }
  v17 = 0;
  v137 = 1;
  v135 = 0;
  v136 = 0;
  v138 = 0u;
  v139 = 0u;
  v140 = 0u;
  v142 = 16;
  v144 = 0x10000;
  v141 = v128;
  v143 = 0;
  v145 = v128;
  v146 = 17;
  v147 = 0;
  v148 = 0x20000;
  v149 = 0;
  v151 = 0;
  v150 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v135;
  }
  *(_DWORD *)((char *)v132 + v17) = -1447068675;
  v18 = v135;
  v19 = v135 + 4;
  v135 += 4;
  v112 = (WTF *)v114;
  v113 = 2;
  v109 = (WTF *)v111;
  v110 = 2;
  if (!v137)
  {
    __break(0xC471u);
    goto LABEL_77;
  }
  *((_DWORD *)v145 + 52) &= ~v148;
  v20 = (v146 & 0x1F | 0xF8410120) + 98304;
  if (v18 + 8 > v134)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v19 = v135;
  }
  *(_DWORD *)((char *)v132 + v19) = v20;
  v135 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v128, 1, 0, 17, v9, v10, v11, v12, (uint64_t)&v107);
  v29 = v107;
  if (v107 != -1)
  {
    v30 = HIDWORD(v113);
    if (HIDWORD(v113) == (_DWORD)v113)
    {
      v31 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v112, (void *)(HIDWORD(v113) + 1), (unint64_t)&v107, v23, v24, v25, v26, v27);
      v33 = *v31;
      v32 = (uint64_t *)(v31 + 1);
      v29 = v33;
      v30 = HIDWORD(v113);
    }
    else
    {
      v32 = &v108;
    }
    v34 = (char *)v112 + 12 * v30;
    *(_DWORD *)v34 = v29;
    *(_QWORD *)(v34 + 4) = *v32;
    ++HIDWORD(v113);
  }
  v35 = v135;
  if (v135 + 4 > v134)
  {
    v28 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v21, v22, v23, v24, v25, v26, v27).n128_u64[0];
    v35 = v135;
  }
  *(_DWORD *)((char *)v132 + v35) = -129826526;
  v36 = v135;
  v37 = v135 + 4;
  v135 += 4;
  if (v36 + 8 > v134)
  {
    v28 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v21, v22, v23, v24, v25, v26, v27).n128_u64[0];
    v37 = v135;
  }
  *(_DWORD *)((char *)v132 + v37) = -130023358;
  v135 += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v128, 0, 2, 0xFFFFFFFFLL, v24, v25, v26, v27, (uint64_t)&v105, v28);
  v45 = v105;
  if (v105 != -1)
  {
    v46 = HIDWORD(v110);
    if (HIDWORD(v110) == (_DWORD)v110)
    {
      v47 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, (void *)(HIDWORD(v110) + 1), (unint64_t)&v105, v40, v41, v42, v43, v44);
      v49 = *v47;
      v48 = v47 + 1;
      v45 = v49;
      v46 = HIDWORD(v110);
    }
    else
    {
      v48 = &v106;
    }
    v50 = (char *)v109 + 12 * v46;
    *(_DWORD *)v50 = v45;
    *(_QWORD *)(v50 + 4) = *(_QWORD *)v48;
    ++HIDWORD(v110);
  }
  v51 = v135;
  if (v135 + 4 > v134)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v38, v39, v40, v41, v42, v43, v44);
    v51 = v135;
  }
  *(_DWORD *)((char *)v132 + v51) = -1442708512;
  v52 = v135;
  v53 = v135 + 4;
  v135 += 4;
  if (v52 + 8 > v134)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v38, v39, v40, v41, v42, v43, v44);
    v53 = v135;
  }
  *(_DWORD *)((char *)v132 + v53) = -1463714819;
  v54 = v135;
  v55 = v135 + 4;
  v135 += 4;
  if (v54 + 8 > v134)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v38, v39, v40, v41, v42, v43, v44);
    v55 = v135;
  }
  *(_DWORD *)((char *)v132 + v55) = -698416192;
  v135 += 4;
  if (HIDWORD(v110))
  {
    v56 = 0;
    v57 = 0;
    v58 = 12 * HIDWORD(v110);
    do
    {
      if (v57 >= HIDWORD(v110))
      {
        __break(0xC471u);
        JUMPOUT(0x1981AA53CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v109 + v56), (uint64_t)v128, v39, v40, v41, v42, v43, v44);
      ++v57;
      v56 += 12;
    }
    while (v58 != v56);
  }
  JSC::MacroAssemblerARM64::add8((uint64_t)v128, 0x7C00000001, v39, v40, v41, v42, v43, v44);
  if (HIDWORD(v113))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v113);
    while (v67 < HIDWORD(v113))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v112 + v66), (uint64_t)v128, v60, v61, v62, v63, v64, v65);
      ++v67;
      v66 += 12;
      if (v68 == v66)
        goto LABEL_44;
    }
    __break(0xC471u);
LABEL_77:
    JUMPOUT(0x1981AA480);
  }
LABEL_44:
  v69 = v135;
  if (v135 + 4 > v134)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v59, v60, v61, v62, v63, v64, v65);
    v69 = v135;
  }
  *(_DWORD *)((char *)v132 + v69) = -129662679;
  v70 = v135;
  v71 = v135 + 4;
  v135 += 4;
  if (!v137)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AA510);
  }
  *((_DWORD *)v141 + 52) &= ~v144;
  v72 = v142 & 0x1F | 0xF8410120;
  if (v70 + 8 > v134)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v59, v60, v61, v62, v63, v64, v65);
    v71 = v135;
  }
  *(_DWORD *)((char *)v132 + v71) = v72;
  v73 = v135;
  v74 = v135 + 4;
  v135 += 4;
  if (v73 + 8 > v134)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v132, v59, v60, v61, v62, v63, v64, v65);
    v74 = v135;
  }
  *(_DWORD *)((char *)v132 + v74) = -702610944;
  v135 += 4;
  v118[0] = 0;
  v118[1] = 0;
  v118[2] = -1;
  v119 = (WTF *)v120;
  v121 = 128;
  v75 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v75 != -1)
  {
    v117 = &v115;
    v116 = &v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v116, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v76 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v84 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v84)
  {
    v84 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v84, v76);
  }
  v85 = *(WTF **)v84;
  if (*(_QWORD *)v84 != v84 + 8)
  {
    v86 = *(_DWORD *)(v84 + 136);
    if (v121 < v86)
    {
      if (v119 && v119 != (WTF *)v120)
      {
        WTF::fastFree((unint64_t)v119, v77, v78, v79, v80, v81, v82, v83);
        v85 = *(WTF **)v84;
        v86 = *(_DWORD *)(v84 + 136);
      }
      v119 = v85;
      v121 = v86;
      *(_QWORD *)v84 = v84 + 8;
      *(_DWORD *)(v84 + 136) = 128;
    }
  }
  v87 = 1;
  v122 = 1;
  v123 = 0;
  v124 = 6;
  v125 = 0u;
  v126 = 0u;
  v127 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v118, (uint64_t)v128, 1, v79, v80, v81, v82, v83);
  BYTE2(v123) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v87 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v118, v87, "GetById ModuleNamespaceLoad handler", 36, "GetById ModuleNamespaceLoad handler", a1);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v118, "GetById ModuleNamespaceLoad handler", 36, a1);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v118, v88, v89, v90, v91, v92, v93, v94);
  v102 = v109;
  if (v111 != (_BYTE *)v109 && v109)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v102, v95, v96, v97, v98, v99, v100, v101);
  }
  v103 = v112;
  if (v114 != (_BYTE *)v112 && v112)
  {
    v112 = 0;
    LODWORD(v113) = 0;
    WTF::fastFree((unint64_t)v103, v95, v96, v97, v98, v99, v100, v101);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v128, v95, v96, v97, v98, v99, v100, v101);
}

uint64_t JSC::putByIdReplaceHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  pthread_key_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  int v83;
  int v84;
  int v85;
  char v86;
  __int16 v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[31];
  char v92;
  char **v93;
  char *v94;
  _QWORD v95[3];
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE v110[128];
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  int v121;
  _BYTE *v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v105[0] = 0;
  v105[24] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0x8000000080000000;
  v109 = v110;
  v111 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v95[0] = &v94;
    v89 = (WTF *)v95;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v111;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v111 < v16)
    {
      if (v109 && v109 != v110)
      {
        WTF::fastFree((unint64_t)v109, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v109 = (_BYTE *)v14;
      v111 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v111;
    }
  }
  v17 = 0;
  v114 = 1;
  v119 = 16;
  v121 = 0x10000;
  v123 = 17;
  v125 = 0x20000;
  v112 = 0;
  v113 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = v105;
  v120 = 0;
  v122 = v105;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v112;
  }
  *(_DWORD *)&v109[v17] = -1447068675;
  v18 = v112 + 4;
  v112 += 4;
  v89 = (WTF *)v91;
  v90 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v105, "check structure");
    v18 = v112;
  }
  if (v18 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v112;
  }
  *(_DWORD *)&v109[v18] = -1203765213;
  v19 = v112;
  v20 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AAC74);
  }
  *((_DWORD *)v122 + 52) &= ~v125;
  v21 = v123 & 0x1F | 0xB8418120;
  if (v19 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v112;
  }
  *(_DWORD *)&v109[v20] = v21;
  v22 = v112;
  v23 = v112 + 4;
  v112 += 4;
  if (v22 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v112;
  }
  *(_DWORD *)&v109[v23] = 1796276351;
  v24 = v112 + 4;
  v112 += 4;
  if (v126)
  {
    v83 = HIDWORD(v108);
    while (v24 < v83)
    {
      if (v24 + 4 > v111)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v112;
      }
      *(_DWORD *)&v109[v24] = -721215457;
      v83 = HIDWORD(v108);
      v24 = v112 + 4;
      v112 += 4;
    }
    v113 = 0;
  }
  if (v24 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v112;
  }
  *(_DWORD *)&v109[v24] = 1409286145;
  v25 = v112;
  v112 += 4;
  v26 = v112;
  v27 = v25 + 8;
  v28 = v112;
  if (v27 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v112;
  }
  *(_DWORD *)&v109[v28] = -721215457;
  v29 = v112 + 4;
  v112 += 4;
  if (v126)
    v30 = -122;
  else
    v30 = -126;
  v84 = v26;
  v85 = 0;
  v86 = v30;
  v87 = 1;
  v88 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v90) == (_DWORD)v90)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, (void *)(HIDWORD(v90) + 1), (unint64_t)&v84, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v85;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v90);
    v29 = v112;
  }
  if (v29 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v112;
  }
  *(_DWORD *)&v109[v29] = -1203650269;
  v112 += 4;
  JSC::AssemblyHelpers::storeProperty((uint64_t)v105, 0, 1, 3, 4, v10, v11, v12);
  v42 = v112;
  if (v112 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v42 = v112;
  }
  *(_DWORD *)&v109[v42] = -1463714819;
  v43 = v112;
  v44 = v112 + 4;
  v112 += 4;
  if (v43 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v44 = v112;
  }
  *(_DWORD *)&v109[v44] = -698416192;
  v45 = v112 + 4;
  v112 += 4;
  if (HIDWORD(v90))
  {
    v46 = 0;
    v47 = 0;
    v48 = 12 * HIDWORD(v90);
    do
    {
      if (v47 >= HIDWORD(v90))
      {
        __break(0xC471u);
        JUMPOUT(0x1981AAD6CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v89 + v46), (uint64_t)v105, v36, v37, v38, v39, v40, v41);
      ++v47;
      v46 += 12;
    }
    while (v48 != v46);
    v45 = v112;
  }
  if (v45 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v45 = v112;
  }
  *(_DWORD *)&v109[v45] = -129662679;
  v49 = v112;
  v50 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AAD14);
  }
  *((_DWORD *)v118 + 52) &= ~v121;
  v51 = v119 & 0x1F | 0xF8410120;
  if (v49 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v50 = v112;
  }
  *(_DWORD *)&v109[v50] = v51;
  v52 = v112;
  v53 = v112 + 4;
  v112 += 4;
  if (v52 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v53 = v112;
  }
  *(_DWORD *)&v109[v53] = -702610944;
  v112 += 4;
  v95[0] = 0;
  v95[1] = 0;
  v95[2] = -1;
  v96 = (WTF *)v97;
  v98 = 128;
  v54 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v54 != -1)
  {
    v94 = &v92;
    v93 = &v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v55 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v63 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v63)
  {
    v63 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v63, v55);
  }
  v64 = *(WTF **)v63;
  if (*(_QWORD *)v63 != v63 + 8)
  {
    v65 = *(_DWORD *)(v63 + 136);
    if (v98 < v65)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v56, v57, v58, v59, v60, v61, v62);
        v64 = *(WTF **)v63;
        v65 = *(_DWORD *)(v63 + 136);
      }
      v96 = v64;
      v98 = v65;
      *(_QWORD *)v63 = v63 + 8;
      *(_DWORD *)(v63 + 136) = 128;
    }
  }
  v66 = 1;
  v99 = 1;
  v100 = 0;
  v101 = 6;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v95, (uint64_t)v105, 1, v58, v59, v60, v61, v62);
  BYTE2(v100) = 1;
  if (byte_1ECF4C288)
    goto LABEL_74;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v66 = HIBYTE(word_1ECF4C286) != 0;
LABEL_74:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, v66, "PutById Replace handler", 24, "PutById Replace handler", a1);
    goto LABEL_66;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, "PutById Replace handler", 24, a1);
LABEL_66:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v95, v67, v68, v69, v70, v71, v72, v73);
  v81 = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v105, v74, v75, v76, v77, v78, v79, v80);
}

uint64_t JSC::putByIdTransitionNonAllocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint8x8_t v57;
  __int32 v58;
  uint8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  BOOL v68;
  unsigned int v69;
  _QWORD *v70;
  char v71;
  char v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  unsigned __int8 *v79;
  char *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int v83;
  unsigned __int8 *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  unint64_t v105;
  pthread_key_t *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  char v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  WTF *v133;
  int v135;
  int64_t v136;
  char *v137;
  char *v138;
  int v139;
  int v140;
  char v141;
  __int16 v142;
  char v143;
  WTF *v144;
  uint64_t v145;
  _BYTE v146[24];
  WTF *p_dst;
  uint64_t v148;
  _BYTE v149[31];
  char v150;
  char **v151;
  char *v152;
  void *__dst;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE v157[128];
  unsigned int v158;
  char v159;
  int v160;
  int v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _DWORD v165[6];
  char v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  _BYTE v171[128];
  unsigned int v172;
  int v173;
  int v174;
  char v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _DWORD *v179;
  char v180;
  uint64_t v181;
  int v182;
  _DWORD *v183;
  char v184;
  uint64_t v185;
  int v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  LOBYTE(v165[0]) = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0x8000000080000000;
  v170 = v171;
  v172 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    __dst = &v144;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v172;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v172 < v17)
    {
      if (v170 && v170 != v171)
      {
        WTF::fastFree((unint64_t)v170, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v170 = (_BYTE *)v15;
      v172 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v172;
    }
  }
  v18 = 0;
  v175 = 1;
  v180 = 16;
  v182 = 0x10000;
  v184 = 17;
  v186 = 0x20000;
  v173 = 0;
  v174 = 0;
  v176 = 0u;
  v177 = 0u;
  v178 = 0u;
  v179 = v165;
  v181 = 0;
  v183 = v165;
  v185 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v173;
  }
  *(_DWORD *)&v170[v18] = -1447068675;
  v19 = v173 + 4;
  v173 += 4;
  p_dst = (WTF *)v149;
  v148 = 2;
  v144 = (WTF *)v146;
  v145 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v165, "check structure");
    v19 = v173;
  }
  if (v19 + 4 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v173;
  }
  *(_DWORD *)&v170[v19] = -1203765213;
  v20 = v173;
  v21 = v173 + 4;
  v173 += 4;
  if (!v175)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AB8A4);
  }
  v183[52] &= ~v186;
  v22 = v184 & 0x1F | 0xB8418120;
  if (v20 + 8 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v173;
  }
  *(_DWORD *)&v170[v21] = v22;
  v23 = v173;
  v24 = v173 + 4;
  v173 += 4;
  if (v23 + 8 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v173;
  }
  *(_DWORD *)&v170[v24] = 1796276351;
  v25 = v173 + 4;
  v173 += 4;
  if (v187)
  {
    v135 = HIDWORD(v169);
    while (v25 < v135)
    {
      if (v25 + 4 > v172)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v173;
      }
      *(_DWORD *)&v170[v25] = -721215457;
      v135 = HIDWORD(v169);
      v25 = v173 + 4;
      v173 += 4;
    }
    v174 = 0;
  }
  if (v25 + 4 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v173;
  }
  *(_DWORD *)&v170[v25] = 1409286145;
  v26 = v173;
  v173 += 4;
  v27 = v173;
  v28 = v26 + 8;
  v29 = v173;
  if (v28 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v173;
  }
  *(_DWORD *)&v170[v29] = -721215457;
  v173 += 4;
  if (v187)
    v30 = -122;
  else
    v30 = -126;
  v139 = v27;
  v140 = 0;
  v141 = v30;
  v142 = 1;
  v143 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v148) == (_DWORD)v148)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v148) + 1), (unint64_t)&v139, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)p_dst + 12 * HIDWORD(v148);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v140;
      v34 = (char *)p_dst + 12 * HIDWORD(v148);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v148);
  }
  JSC::transitionHandlerImpl<false,false>((uint64_t)v165, 1, 0, 3, 4, v11, v12, v13);
  v42 = v173;
  if (v173 + 4 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
    v42 = v173;
  }
  *(_DWORD *)&v170[v42] = -1463714819;
  v43 = v173;
  v44 = v173 + 4;
  v173 += 4;
  if (v43 + 8 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
    v44 = v173;
  }
  *(_DWORD *)&v170[v44] = -698416192;
  v45 = v173 + 4;
  v173 += 4;
  if (HIDWORD(v145))
  {
    v46 = 0;
    v47 = 0;
    v48 = 12 * HIDWORD(v145);
    do
    {
      if (v47 >= HIDWORD(v145))
      {
        __break(0xC471u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(0xC471u);
        JUMPOUT(0x1981ABA60);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v144 + v46), (uint64_t)v165, v36, v37, v38, v39, v40, v41);
      ++v47;
      v46 += 12;
    }
    while (v48 != v46);
    __dst = &v155;
    LODWORD(v155) = 50332169;
    v154 = 0x200000003;
    v50 = 2;
    while (1)
    {
      v51 = 0;
      v52 = 0;
      v53 = (char *)__dst;
      v54 = v50;
      do
      {
        if ((*((_BYTE *)__dst + v51 + 1) & 0x40) != 0)
          goto LABEL_151;
        v52 |= 1 << *((_BYTE *)__dst + v51 + 1);
        v51 += 2;
      }
      while (2 * v50 != v51);
      v55 = 0;
      do
      {
        v56 = *((_BYTE *)__dst + v55) & 0x7F;
        if (v56 >= 0x40)
          goto LABEL_151;
        v52 &= ~(1 << v56);
        v55 += 2;
      }
      while (2 * v50 != v55);
      v57 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
      v57.i16[0] = vaddlv_u8(v57);
      v58 = v57.i32[0];
      v59 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v52));
      v59.i16[0] = vaddlv_u8(v59);
      if (!(v59.i32[0] + v58))
      {
        v70 = a2;
        v71 = *(_BYTE *)__dst;
        v72 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v165, *(char *)__dst, v72, v37, v38, v39, v40, v41);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v154) - 2);
        v73 = (HIDWORD(v154) - 1);
        v68 = HIDWORD(v154) == 1;
        HIDWORD(v154) = v73;
        v74 = (unsigned __int8 *)__dst;
        v75 = (unsigned __int8 *)__dst + 2 * v73;
        if (v68)
        {
          v82 = 0;
          v83 = 0;
          v78 = 0;
          v49 = v75;
        }
        else
        {
          v76 = 2 * v73;
          v77 = __dst;
          while (*v77 != v72)
          {
            v77 += 2;
            v76 -= 2;
            if (!v76)
              goto LABEL_77;
          }
          *v77 = v71;
LABEL_77:
          v78 = 0;
          v79 = v74;
          v49 = v75;
          v80 = (char *)v75;
          do
          {
            if (*v74 == v74[1])
            {
              v81 = v74;
              if (v80 != (char *)__dst + 2 * HIDWORD(v154))
              {
                v138 = (char *)v75;
                if (v74 == v49)
                {
                  v81 = (unsigned __int8 *)v80;
                }
                else
                {
                  v136 = v79 - v49;
                  v137 = v80;
                  memmove(v80, v49, v79 - v49);
                  v81 = (unsigned __int8 *)&v137[v136];
                }
                v75 = (unsigned __int8 *)v138;
              }
              v49 = v74 + 2;
              ++v78;
              v80 = (char *)v81;
            }
            v74 += 2;
            v79 += 2;
          }
          while (v74 < v75);
          v74 = (unsigned __int8 *)__dst;
          v82 = HIDWORD(v154);
          v83 = HIDWORD(v154);
          v75 = (unsigned __int8 *)v80;
        }
        v84 = &v74[2 * v82];
        if (v49 != v84)
        {
          memmove(v75, v49, v84 - v49);
          v83 = HIDWORD(v154);
        }
        v50 = v83 - v78;
        a2 = v70;
        goto LABEL_70;
      }
      v60 = 0;
      v61 = v50 <= 1uLL ? 1 : v50;
      v62 = 2 * v61;
      while (1)
      {
        v63 = *((unsigned __int8 *)__dst + v60 + 1);
        if ((v63 & 0x7Fu) >= 0x40)
          goto LABEL_151;
        if (((v52 >> (v63 & 0x7F)) & 1) != 0)
          break;
        v60 += 2;
        if (v62 == v60)
          goto LABEL_71;
      }
      v64 = *((unsigned __int8 *)__dst + v60);
      if (v64 != v63)
        break;
LABEL_69:
      memmove(&v53[v60], &v53[v60 + 2], 2 * v54 - v60 - 2);
      v50 = HIDWORD(v154) - 1;
LABEL_70:
      HIDWORD(v154) = v50;
LABEL_71:
      if (!v50)
      {
        v85 = __dst;
        if (&v155 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v154) = 0;
          WTF::fastFree((unint64_t)v85, v49, v36, v37, v38, v39, v40, v41);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v165, (uint64_t)this, 0, v37, v38, v39, v40, v41);
        if (!v175)
        {
          __break(0xC471u);
          JUMPOUT(0x1981AB984);
        }
        v179[52] &= ~v182;
        v91 = v180;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v165, (uint64_t)operationReallocateButterflyAndTransition, v180, v86, v87, v88, v89, v90);
        v174 = 0;
        v92 = v173;
        if (v173 + 4 > v172)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
          v92 = v173;
        }
        *(_DWORD *)&v170[v92] = (32 * (v91 & 0x1F)) | 0xD63F0000;
        v93 = v173;
        v94 = v173 + 4;
        v173 += 4;
        if (v93 + 8 > v172)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
          v94 = v173;
        }
        *(_DWORD *)&v170[v94] = -1463714819;
        v95 = v173;
        v96 = v173 + 4;
        v173 += 4;
        if (v95 + 8 > v172)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
          v96 = v173;
        }
        *(_DWORD *)&v170[v96] = -698416192;
        v45 = v173 + 4;
        v173 += 4;
        goto LABEL_96;
      }
    }
    v65 = (char)v64;
    if ((char)v64 == 63)
    {
      v66 = v173;
      v67 = v172;
      if (v63 != 31)
      {
        v69 = v63 & 0x1F | 0xD2800000;
        goto LABEL_66;
      }
    }
    else
    {
      v66 = v173;
      v67 = v172;
      v68 = (char)v63 == 31 || v65 == 31;
      if (!v68)
      {
        v69 = v63 & 0xFFE0FFFF | ((v65 & 0x1F) << 16) | 0xAA0003E0;
LABEL_66:
        if (v66 + 4 > v67)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, (uint64_t)v49, v36, v37, v38, v39, v40, v41);
          v66 = v173;
        }
        *(_DWORD *)&v170[v66] = v69;
        v173 += 4;
        v53 = (char *)__dst;
        v54 = HIDWORD(v154);
        goto LABEL_69;
      }
    }
    v69 = (char)v63 | (32 * v65) | 0x91000000;
    goto LABEL_66;
  }
LABEL_96:
  if (HIDWORD(v148))
  {
    v97 = 0;
    v98 = 0;
    v99 = 12 * HIDWORD(v148);
    do
    {
      if (v98 >= HIDWORD(v148))
        goto LABEL_152;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v97), (uint64_t)v165, v36, v37, v38, v39, v40, v41);
      ++v98;
      v97 += 12;
    }
    while (v99 != v97);
    v45 = v173;
  }
  if (v45 + 4 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
    v45 = v173;
  }
  *(_DWORD *)&v170[v45] = -129662679;
  v100 = v173;
  v101 = v173 + 4;
  v173 += 4;
  if (!v175)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AB934);
  }
  v179[52] &= ~v182;
  v102 = v180 & 0x1F | 0xF8410120;
  if (v100 + 8 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
    v101 = v173;
  }
  *(_DWORD *)&v170[v101] = v102;
  v103 = v173;
  v104 = v173 + 4;
  v173 += 4;
  if (v103 + 8 > v172)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v170, v35, v36, v37, v38, v39, v40, v41);
    v104 = v173;
  }
  *(_DWORD *)&v170[v104] = -702610944;
  v173 += 4;
  __dst = 0;
  v154 = 0;
  v155 = -1;
  v156 = v157;
  v158 = 128;
  v105 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v105 != -1)
  {
    v152 = &v150;
    v151 = &v152;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v151, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v106 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v114 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v114)
  {
    v114 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v114, v106);
  }
  v115 = *(_QWORD *)v114;
  if (*(_QWORD *)v114 != v114 + 8)
  {
    v116 = *(_DWORD *)(v114 + 136);
    if (v158 < v116)
    {
      if (v156 && v156 != v157)
      {
        WTF::fastFree((unint64_t)v156, v107, v108, v109, v110, v111, v112, v113);
        v115 = *(_QWORD *)v114;
        v116 = *(_DWORD *)(v114 + 136);
      }
      v156 = (_BYTE *)v115;
      v158 = v116;
      *(_QWORD *)v114 = v114 + 8;
      *(_DWORD *)(v114 + 136) = 128;
    }
  }
  v117 = 1;
  v159 = 1;
  v160 = 0;
  v161 = 6;
  v162 = 0u;
  v163 = 0u;
  v164 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v165, 1, v109, v110, v111, v112, v113);
  BYTE2(v160) = 1;
  if (byte_1ECF4C288)
    goto LABEL_136;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v117 = HIBYTE(word_1ECF4C286) != 0;
LABEL_136:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v117, "PutById Transition handler", 27, "PutById Transition handler", a2);
    goto LABEL_121;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutById Transition handler", 27, a2);
LABEL_121:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v118, v119, v120, v121, v122, v123, v124);
  v132 = v144;
  if (v146 != (_BYTE *)v144 && v144)
  {
    v144 = 0;
    LODWORD(v145) = 0;
    WTF::fastFree((unint64_t)v132, v125, v126, v127, v128, v129, v130, v131);
  }
  v133 = p_dst;
  if (v149 != (_BYTE *)p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v133, v125, v126, v127, v128, v129, v130, v131);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v165, v125, v126, v127, v128, v129, v130, v131);
}

uint64_t JSC::putByIdTransitionNewlyAllocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  WTF *v20;
  WTF *v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  int *v33;
  int *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint8x8_t v59;
  __int32 v60;
  uint8x8_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  WTF *v72;
  WTF *v73;
  _QWORD *v74;
  char v75;
  char v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  unsigned __int8 *v83;
  char *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  unsigned __int8 *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  unint64_t v110;
  pthread_key_t *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int v121;
  char v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  WTF *v138;
  int v140;
  int64_t v141;
  char *v142;
  char *v143;
  int v145;
  int v146;
  char v147;
  __int16 v148;
  char v149;
  WTF *v150;
  uint64_t v151;
  _BYTE v152[24];
  WTF *p_dst;
  uint64_t v154;
  _BYTE v155[31];
  char v156;
  char **v157;
  char *v158;
  void *__dst;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  _BYTE v163[128];
  unsigned int v164;
  char v165;
  int v166;
  int v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _DWORD v171[6];
  char v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  _BYTE v177[128];
  unsigned int v178;
  int v179;
  int v180;
  char v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _DWORD *v185;
  char v186;
  uint64_t v187;
  int v188;
  _DWORD *v189;
  char v190;
  uint64_t v191;
  int v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  LOBYTE(v171[0]) = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0x8000000080000000;
  v176 = v177;
  v178 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v150;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = 0x1EE342000uLL;
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v178;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v178 < v17)
    {
      if (v176 && v176 != v177)
      {
        WTF::fastFree((unint64_t)v176, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v176 = (_BYTE *)v15;
      v178 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v178;
    }
  }
  v18 = 0;
  v181 = 1;
  v186 = 16;
  v188 = 0x10000;
  v190 = 17;
  v192 = 0x20000;
  v179 = 0;
  v180 = 0;
  v182 = 0u;
  v183 = 0u;
  v184 = 0u;
  v185 = v171;
  v187 = 0;
  v189 = v171;
  v191 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v179;
  }
  *(_DWORD *)&v176[v18] = -1447068675;
  v19 = v179 + 4;
  v179 += 4;
  v20 = (WTF *)v155;
  p_dst = (WTF *)v155;
  v154 = 2;
  v21 = (WTF *)v152;
  v150 = (WTF *)v152;
  v151 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v171, "check structure");
    v19 = v179;
  }
  if (v19 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v179;
  }
  *(_DWORD *)&v176[v19] = -1203765213;
  v22 = v179;
  v23 = v179 + 4;
  v179 += 4;
  if (!v181)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AC5C0);
  }
  v189[52] &= ~v192;
  v24 = v190 & 0x1F | 0xB8418120;
  if (v22 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v23 = v179;
  }
  *(_DWORD *)&v176[v23] = v24;
  v25 = v179;
  v26 = v179 + 4;
  v179 += 4;
  if (v25 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v26 = v179;
  }
  *(_DWORD *)&v176[v26] = 1796276351;
  v27 = v179 + 4;
  v179 += 4;
  if (v193)
  {
    v140 = HIDWORD(v175);
    while (v27 < v140)
    {
      if (v27 + 4 > v178)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v27 = v179;
      }
      *(_DWORD *)&v176[v27] = -721215457;
      v140 = HIDWORD(v175);
      v27 = v179 + 4;
      v179 += 4;
    }
    v180 = 0;
  }
  if (v27 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v27 = v179;
  }
  *(_DWORD *)&v176[v27] = 1409286145;
  v28 = v179;
  v179 += 4;
  v29 = v179;
  v30 = v28 + 8;
  v31 = v179;
  if (v30 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v31 = v179;
  }
  *(_DWORD *)&v176[v31] = -721215457;
  v179 += 4;
  if (v193)
    v32 = -122;
  else
    v32 = -126;
  v145 = v29;
  v146 = 0;
  v147 = v32;
  v148 = 1;
  v149 = -1;
  if (v29 != -1)
  {
    if (HIDWORD(v154) == (_DWORD)v154)
    {
      v33 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v154) + 1), (unint64_t)&v145, v9, v10, v11, v12, v13);
      v35 = *v33;
      v34 = v33 + 1;
      v36 = (char *)p_dst + 12 * HIDWORD(v154);
      *(_DWORD *)v36 = v35;
    }
    else
    {
      v34 = &v146;
      v36 = (char *)p_dst + 12 * HIDWORD(v154);
      *(_DWORD *)v36 = v29;
    }
    *(_QWORD *)(v36 + 4) = *(_QWORD *)v34;
    ++HIDWORD(v154);
  }
  JSC::transitionHandlerImpl<true,false>(this, (uint64_t)v171, (uint64_t)&v150, 1, 0, 3, 4, 5, 6);
  v44 = v179;
  if (v179 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v44 = v179;
  }
  *(_DWORD *)&v176[v44] = -1463714819;
  v45 = v179;
  v46 = v179 + 4;
  v179 += 4;
  if (v45 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v46 = v179;
  }
  *(_DWORD *)&v176[v46] = -698416192;
  v47 = v179 + 4;
  v179 += 4;
  if (HIDWORD(v151))
  {
    v48 = 0;
    v49 = 0;
    v50 = 12 * HIDWORD(v151);
    do
    {
      if (v49 >= HIDWORD(v151))
      {
        __break(0xC471u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(0xC471u);
        JUMPOUT(0x1981AC77CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v150 + v48), (uint64_t)v171, v38, v39, v40, v41, v42, v43);
      ++v49;
      v48 += 12;
    }
    while (v50 != v48);
    __dst = &v161;
    LODWORD(v161) = 50332169;
    v160 = 0x200000003;
    v52 = 2;
    while (1)
    {
      v53 = 0;
      v54 = 0;
      v55 = (char *)__dst;
      v56 = v52;
      do
      {
        if ((*((_BYTE *)__dst + v53 + 1) & 0x40) != 0)
          goto LABEL_151;
        v54 |= 1 << *((_BYTE *)__dst + v53 + 1);
        v53 += 2;
      }
      while (2 * v52 != v53);
      v57 = 0;
      do
      {
        v58 = *((_BYTE *)__dst + v57) & 0x7F;
        if (v58 >= 0x40)
          goto LABEL_151;
        v54 &= ~(1 << v58);
        v57 += 2;
      }
      while (2 * v52 != v57);
      v59 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
      v59.i16[0] = vaddlv_u8(v59);
      v60 = v59.i32[0];
      v61 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v54));
      v61.i16[0] = vaddlv_u8(v61);
      if (!(v61.i32[0] + v60))
      {
        v72 = v21;
        v73 = v20;
        v74 = a2;
        v75 = *(_BYTE *)__dst;
        v76 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v171, *(char *)__dst, v76, v39, v40, v41, v42, v43);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v160) - 2);
        v77 = (HIDWORD(v160) - 1);
        v70 = HIDWORD(v160) == 1;
        HIDWORD(v160) = v77;
        v78 = (unsigned __int8 *)__dst;
        v79 = (unsigned __int8 *)__dst + 2 * v77;
        if (v70)
        {
          v86 = 0;
          v87 = 0;
          v82 = 0;
          v51 = v79;
        }
        else
        {
          v80 = 2 * v77;
          v81 = __dst;
          while (*v81 != v76)
          {
            v81 += 2;
            v80 -= 2;
            if (!v80)
              goto LABEL_77;
          }
          *v81 = v75;
LABEL_77:
          v82 = 0;
          v83 = v78;
          v51 = v79;
          v84 = (char *)v79;
          do
          {
            if (*v78 == v78[1])
            {
              v85 = v78;
              if (v84 != (char *)__dst + 2 * HIDWORD(v160))
              {
                v143 = (char *)v79;
                if (v78 == v51)
                {
                  v85 = (unsigned __int8 *)v84;
                }
                else
                {
                  v141 = v83 - v51;
                  v142 = v84;
                  memmove(v84, v51, v83 - v51);
                  v85 = (unsigned __int8 *)&v142[v141];
                }
                v79 = (unsigned __int8 *)v143;
              }
              v51 = v78 + 2;
              ++v82;
              v84 = (char *)v85;
            }
            v78 += 2;
            v83 += 2;
          }
          while (v78 < v79);
          v78 = (unsigned __int8 *)__dst;
          v86 = HIDWORD(v160);
          v87 = HIDWORD(v160);
          v79 = (unsigned __int8 *)v84;
        }
        v88 = &v78[2 * v86];
        a2 = v74;
        if (v51 != v88)
        {
          memmove(v79, v51, v88 - v51);
          v87 = HIDWORD(v160);
        }
        v52 = v87 - v82;
        v20 = v73;
        v21 = v72;
        v5 = 0x1EE342000;
        goto LABEL_70;
      }
      v62 = 0;
      v63 = v52 <= 1uLL ? 1 : v52;
      v64 = 2 * v63;
      while (1)
      {
        v65 = *((unsigned __int8 *)__dst + v62 + 1);
        if ((v65 & 0x7Fu) >= 0x40)
          goto LABEL_151;
        if (((v54 >> (v65 & 0x7F)) & 1) != 0)
          break;
        v62 += 2;
        if (v64 == v62)
          goto LABEL_71;
      }
      v66 = *((unsigned __int8 *)__dst + v62);
      if (v66 != v65)
        break;
LABEL_69:
      memmove(&v55[v62], &v55[v62 + 2], 2 * v56 - v62 - 2);
      v52 = HIDWORD(v160) - 1;
LABEL_70:
      HIDWORD(v160) = v52;
LABEL_71:
      if (!v52)
      {
        v89 = __dst;
        if (&v161 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v160) = 0;
          WTF::fastFree((unint64_t)v89, v51, v38, v39, v40, v41, v42, v43);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v171, (uint64_t)this, 0, v39, v40, v41, v42, v43);
        if (!v181)
        {
          __break(0xC471u);
          JUMPOUT(0x1981AC6A0);
        }
        v185[52] &= ~v188;
        v95 = v186;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v171, (uint64_t)operationReallocateButterflyAndTransition, v186, v90, v91, v92, v93, v94);
        v180 = 0;
        v96 = v179;
        if (v179 + 4 > v178)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
          v96 = v179;
        }
        *(_DWORD *)&v176[v96] = (32 * (v95 & 0x1F)) | 0xD63F0000;
        v97 = v179;
        v98 = v179 + 4;
        v179 += 4;
        if (v97 + 8 > v178)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
          v98 = v179;
        }
        *(_DWORD *)&v176[v98] = -1463714819;
        v99 = v179;
        v100 = v179 + 4;
        v179 += 4;
        if (v99 + 8 > v178)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
          v100 = v179;
        }
        *(_DWORD *)&v176[v100] = -698416192;
        v47 = v179 + 4;
        v179 += 4;
        goto LABEL_96;
      }
    }
    v67 = (char)v66;
    if ((char)v66 == 63)
    {
      v68 = v179;
      v69 = v178;
      if (v65 != 31)
      {
        v71 = v65 & 0x1F | 0xD2800000;
        goto LABEL_66;
      }
    }
    else
    {
      v68 = v179;
      v69 = v178;
      v70 = (char)v65 == 31 || v67 == 31;
      if (!v70)
      {
        v71 = v65 & 0xFFE0FFFF | ((v67 & 0x1F) << 16) | 0xAA0003E0;
LABEL_66:
        if (v68 + 4 > v69)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v51, v38, v39, v40, v41, v42, v43);
          v68 = v179;
        }
        *(_DWORD *)&v176[v68] = v71;
        v179 += 4;
        v55 = (char *)__dst;
        v56 = HIDWORD(v160);
        goto LABEL_69;
      }
    }
    v71 = (char)v65 | (32 * v67) | 0x91000000;
    goto LABEL_66;
  }
LABEL_96:
  if (HIDWORD(v154))
  {
    v101 = v5;
    v102 = 0;
    v103 = 0;
    v104 = 12 * HIDWORD(v154);
    do
    {
      if (v103 >= HIDWORD(v154))
        goto LABEL_152;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v102), (uint64_t)v171, v38, v39, v40, v41, v42, v43);
      ++v103;
      v102 += 12;
    }
    while (v104 != v102);
    v47 = v179;
    v5 = v101;
  }
  if (v47 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v47 = v179;
  }
  *(_DWORD *)&v176[v47] = -129662679;
  v105 = v179;
  v106 = v179 + 4;
  v179 += 4;
  if (!v181)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AC650);
  }
  v185[52] &= ~v188;
  v107 = v186 & 0x1F | 0xF8410120;
  if (v105 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v106 = v179;
  }
  *(_DWORD *)&v176[v106] = v107;
  v108 = v179;
  v109 = v179 + 4;
  v179 += 4;
  if (v108 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v109 = v179;
  }
  *(_DWORD *)&v176[v109] = -702610944;
  v179 += 4;
  __dst = 0;
  v160 = 0;
  v161 = -1;
  v162 = v163;
  v164 = 128;
  v110 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v110 != -1)
  {
    v158 = &v156;
    v157 = &v158;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v157, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v111 = *(pthread_key_t **)(v5 + 3160);
  v119 = (uint64_t)pthread_getspecific(*v111);
  if (!v119)
  {
    v119 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v119, v111);
  }
  v120 = *(_QWORD *)v119;
  if (*(_QWORD *)v119 != v119 + 8)
  {
    v121 = *(_DWORD *)(v119 + 136);
    if (v164 < v121)
    {
      if (v162 && v162 != v163)
      {
        WTF::fastFree((unint64_t)v162, v112, v113, v114, v115, v116, v117, v118);
        v120 = *(_QWORD *)v119;
        v121 = *(_DWORD *)(v119 + 136);
      }
      v162 = (_BYTE *)v120;
      v164 = v121;
      *(_QWORD *)v119 = v119 + 8;
      *(_DWORD *)(v119 + 136) = 128;
    }
  }
  v122 = 1;
  v165 = 1;
  v166 = 0;
  v167 = 6;
  v168 = 0u;
  v169 = 0u;
  v170 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v171, 1, v114, v115, v116, v117, v118);
  BYTE2(v166) = 1;
  if (byte_1ECF4C288)
    goto LABEL_136;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v122 = HIBYTE(word_1ECF4C286) != 0;
LABEL_136:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v122, "PutById Transition handler", 27, "PutById Transition handler", a2);
    goto LABEL_121;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutById Transition handler", 27, a2);
LABEL_121:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v123, v124, v125, v126, v127, v128, v129);
  v137 = v150;
  if (v21 != v150 && v150)
  {
    v150 = 0;
    LODWORD(v151) = 0;
    WTF::fastFree((unint64_t)v137, v130, v131, v132, v133, v134, v135, v136);
  }
  v138 = p_dst;
  if (v20 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v138, v130, v131, v132, v133, v134, v135, v136);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v171, v130, v131, v132, v133, v134, v135, v136);
}

uint64_t JSC::putByIdTransitionReallocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  WTF *v20;
  WTF *v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  int *v33;
  int *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint8x8_t v59;
  __int32 v60;
  uint8x8_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  WTF *v72;
  WTF *v73;
  _QWORD *v74;
  char v75;
  char v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  unsigned __int8 *v83;
  char *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  unsigned __int8 *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  unint64_t v110;
  pthread_key_t *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int v121;
  char v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  WTF *v138;
  int v140;
  int64_t v141;
  char *v142;
  char *v143;
  int v145;
  int v146;
  char v147;
  __int16 v148;
  char v149;
  WTF *v150;
  uint64_t v151;
  _BYTE v152[24];
  WTF *p_dst;
  uint64_t v154;
  _BYTE v155[31];
  char v156;
  char **v157;
  char *v158;
  void *__dst;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  _BYTE v163[128];
  unsigned int v164;
  char v165;
  int v166;
  int v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _DWORD v171[6];
  char v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  _BYTE v177[128];
  unsigned int v178;
  int v179;
  int v180;
  char v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _DWORD *v185;
  char v186;
  uint64_t v187;
  int v188;
  _DWORD *v189;
  char v190;
  uint64_t v191;
  int v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  LOBYTE(v171[0]) = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0x8000000080000000;
  v176 = v177;
  v178 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v150;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = 0x1EE342000uLL;
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v178;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v178 < v17)
    {
      if (v176 && v176 != v177)
      {
        WTF::fastFree((unint64_t)v176, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v176 = (_BYTE *)v15;
      v178 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v178;
    }
  }
  v18 = 0;
  v181 = 1;
  v186 = 16;
  v188 = 0x10000;
  v190 = 17;
  v192 = 0x20000;
  v179 = 0;
  v180 = 0;
  v182 = 0u;
  v183 = 0u;
  v184 = 0u;
  v185 = v171;
  v187 = 0;
  v189 = v171;
  v191 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v179;
  }
  *(_DWORD *)&v176[v18] = -1447068675;
  v19 = v179 + 4;
  v179 += 4;
  v20 = (WTF *)v155;
  p_dst = (WTF *)v155;
  v154 = 2;
  v21 = (WTF *)v152;
  v150 = (WTF *)v152;
  v151 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v171, "check structure");
    v19 = v179;
  }
  if (v19 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v179;
  }
  *(_DWORD *)&v176[v19] = -1203765213;
  v22 = v179;
  v23 = v179 + 4;
  v179 += 4;
  if (!v181)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AD2DCLL);
  }
  v189[52] &= ~v192;
  v24 = v190 & 0x1F | 0xB8418120;
  if (v22 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v23 = v179;
  }
  *(_DWORD *)&v176[v23] = v24;
  v25 = v179;
  v26 = v179 + 4;
  v179 += 4;
  if (v25 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v26 = v179;
  }
  *(_DWORD *)&v176[v26] = 1796276351;
  v27 = v179 + 4;
  v179 += 4;
  if (v193)
  {
    v140 = HIDWORD(v175);
    while (v27 < v140)
    {
      if (v27 + 4 > v178)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v27 = v179;
      }
      *(_DWORD *)&v176[v27] = -721215457;
      v140 = HIDWORD(v175);
      v27 = v179 + 4;
      v179 += 4;
    }
    v180 = 0;
  }
  if (v27 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v27 = v179;
  }
  *(_DWORD *)&v176[v27] = 1409286145;
  v28 = v179;
  v179 += 4;
  v29 = v179;
  v30 = v28 + 8;
  v31 = v179;
  if (v30 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v31 = v179;
  }
  *(_DWORD *)&v176[v31] = -721215457;
  v179 += 4;
  if (v193)
    v32 = -122;
  else
    v32 = -126;
  v145 = v29;
  v146 = 0;
  v147 = v32;
  v148 = 1;
  v149 = -1;
  if (v29 != -1)
  {
    if (HIDWORD(v154) == (_DWORD)v154)
    {
      v33 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v154) + 1), (unint64_t)&v145, v9, v10, v11, v12, v13);
      v35 = *v33;
      v34 = v33 + 1;
      v36 = (char *)p_dst + 12 * HIDWORD(v154);
      *(_DWORD *)v36 = v35;
    }
    else
    {
      v34 = &v146;
      v36 = (char *)p_dst + 12 * HIDWORD(v154);
      *(_DWORD *)v36 = v29;
    }
    *(_QWORD *)(v36 + 4) = *(_QWORD *)v34;
    ++HIDWORD(v154);
  }
  JSC::transitionHandlerImpl<true,true>(this, (uint64_t)v171, (uint64_t)&v150, 1, 0, 3, 4, 5, 6);
  v44 = v179;
  if (v179 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v44 = v179;
  }
  *(_DWORD *)&v176[v44] = -1463714819;
  v45 = v179;
  v46 = v179 + 4;
  v179 += 4;
  if (v45 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v46 = v179;
  }
  *(_DWORD *)&v176[v46] = -698416192;
  v47 = v179 + 4;
  v179 += 4;
  if (HIDWORD(v151))
  {
    v48 = 0;
    v49 = 0;
    v50 = 12 * HIDWORD(v151);
    do
    {
      if (v49 >= HIDWORD(v151))
      {
        __break(0xC471u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(0xC471u);
        JUMPOUT(0x1981AD498);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v150 + v48), (uint64_t)v171, v38, v39, v40, v41, v42, v43);
      ++v49;
      v48 += 12;
    }
    while (v50 != v48);
    __dst = &v161;
    LODWORD(v161) = 50332169;
    v160 = 0x200000003;
    v52 = 2;
    while (1)
    {
      v53 = 0;
      v54 = 0;
      v55 = (char *)__dst;
      v56 = v52;
      do
      {
        if ((*((_BYTE *)__dst + v53 + 1) & 0x40) != 0)
          goto LABEL_151;
        v54 |= 1 << *((_BYTE *)__dst + v53 + 1);
        v53 += 2;
      }
      while (2 * v52 != v53);
      v57 = 0;
      do
      {
        v58 = *((_BYTE *)__dst + v57) & 0x7F;
        if (v58 >= 0x40)
          goto LABEL_151;
        v54 &= ~(1 << v58);
        v57 += 2;
      }
      while (2 * v52 != v57);
      v59 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
      v59.i16[0] = vaddlv_u8(v59);
      v60 = v59.i32[0];
      v61 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v54));
      v61.i16[0] = vaddlv_u8(v61);
      if (!(v61.i32[0] + v60))
      {
        v72 = v21;
        v73 = v20;
        v74 = a2;
        v75 = *(_BYTE *)__dst;
        v76 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v171, *(char *)__dst, v76, v39, v40, v41, v42, v43);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v160) - 2);
        v77 = (HIDWORD(v160) - 1);
        v70 = HIDWORD(v160) == 1;
        HIDWORD(v160) = v77;
        v78 = (unsigned __int8 *)__dst;
        v79 = (unsigned __int8 *)__dst + 2 * v77;
        if (v70)
        {
          v86 = 0;
          v87 = 0;
          v82 = 0;
          v51 = v79;
        }
        else
        {
          v80 = 2 * v77;
          v81 = __dst;
          while (*v81 != v76)
          {
            v81 += 2;
            v80 -= 2;
            if (!v80)
              goto LABEL_77;
          }
          *v81 = v75;
LABEL_77:
          v82 = 0;
          v83 = v78;
          v51 = v79;
          v84 = (char *)v79;
          do
          {
            if (*v78 == v78[1])
            {
              v85 = v78;
              if (v84 != (char *)__dst + 2 * HIDWORD(v160))
              {
                v143 = (char *)v79;
                if (v78 == v51)
                {
                  v85 = (unsigned __int8 *)v84;
                }
                else
                {
                  v141 = v83 - v51;
                  v142 = v84;
                  memmove(v84, v51, v83 - v51);
                  v85 = (unsigned __int8 *)&v142[v141];
                }
                v79 = (unsigned __int8 *)v143;
              }
              v51 = v78 + 2;
              ++v82;
              v84 = (char *)v85;
            }
            v78 += 2;
            v83 += 2;
          }
          while (v78 < v79);
          v78 = (unsigned __int8 *)__dst;
          v86 = HIDWORD(v160);
          v87 = HIDWORD(v160);
          v79 = (unsigned __int8 *)v84;
        }
        v88 = &v78[2 * v86];
        a2 = v74;
        if (v51 != v88)
        {
          memmove(v79, v51, v88 - v51);
          v87 = HIDWORD(v160);
        }
        v52 = v87 - v82;
        v20 = v73;
        v21 = v72;
        v5 = 0x1EE342000;
        goto LABEL_70;
      }
      v62 = 0;
      v63 = v52 <= 1uLL ? 1 : v52;
      v64 = 2 * v63;
      while (1)
      {
        v65 = *((unsigned __int8 *)__dst + v62 + 1);
        if ((v65 & 0x7Fu) >= 0x40)
          goto LABEL_151;
        if (((v54 >> (v65 & 0x7F)) & 1) != 0)
          break;
        v62 += 2;
        if (v64 == v62)
          goto LABEL_71;
      }
      v66 = *((unsigned __int8 *)__dst + v62);
      if (v66 != v65)
        break;
LABEL_69:
      memmove(&v55[v62], &v55[v62 + 2], 2 * v56 - v62 - 2);
      v52 = HIDWORD(v160) - 1;
LABEL_70:
      HIDWORD(v160) = v52;
LABEL_71:
      if (!v52)
      {
        v89 = __dst;
        if (&v161 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v160) = 0;
          WTF::fastFree((unint64_t)v89, v51, v38, v39, v40, v41, v42, v43);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v171, (uint64_t)this, 0, v39, v40, v41, v42, v43);
        if (!v181)
        {
          __break(0xC471u);
          JUMPOUT(0x1981AD3BCLL);
        }
        v185[52] &= ~v188;
        v95 = v186;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v171, (uint64_t)operationReallocateButterflyAndTransition, v186, v90, v91, v92, v93, v94);
        v180 = 0;
        v96 = v179;
        if (v179 + 4 > v178)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
          v96 = v179;
        }
        *(_DWORD *)&v176[v96] = (32 * (v95 & 0x1F)) | 0xD63F0000;
        v97 = v179;
        v98 = v179 + 4;
        v179 += 4;
        if (v97 + 8 > v178)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
          v98 = v179;
        }
        *(_DWORD *)&v176[v98] = -1463714819;
        v99 = v179;
        v100 = v179 + 4;
        v179 += 4;
        if (v99 + 8 > v178)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
          v100 = v179;
        }
        *(_DWORD *)&v176[v100] = -698416192;
        v47 = v179 + 4;
        v179 += 4;
        goto LABEL_96;
      }
    }
    v67 = (char)v66;
    if ((char)v66 == 63)
    {
      v68 = v179;
      v69 = v178;
      if (v65 != 31)
      {
        v71 = v65 & 0x1F | 0xD2800000;
        goto LABEL_66;
      }
    }
    else
    {
      v68 = v179;
      v69 = v178;
      v70 = (char)v65 == 31 || v67 == 31;
      if (!v70)
      {
        v71 = v65 & 0xFFE0FFFF | ((v67 & 0x1F) << 16) | 0xAA0003E0;
LABEL_66:
        if (v68 + 4 > v69)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, (uint64_t)v51, v38, v39, v40, v41, v42, v43);
          v68 = v179;
        }
        *(_DWORD *)&v176[v68] = v71;
        v179 += 4;
        v55 = (char *)__dst;
        v56 = HIDWORD(v160);
        goto LABEL_69;
      }
    }
    v71 = (char)v65 | (32 * v67) | 0x91000000;
    goto LABEL_66;
  }
LABEL_96:
  if (HIDWORD(v154))
  {
    v101 = v5;
    v102 = 0;
    v103 = 0;
    v104 = 12 * HIDWORD(v154);
    do
    {
      if (v103 >= HIDWORD(v154))
        goto LABEL_152;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v102), (uint64_t)v171, v38, v39, v40, v41, v42, v43);
      ++v103;
      v102 += 12;
    }
    while (v104 != v102);
    v47 = v179;
    v5 = v101;
  }
  if (v47 + 4 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v47 = v179;
  }
  *(_DWORD *)&v176[v47] = -129662679;
  v105 = v179;
  v106 = v179 + 4;
  v179 += 4;
  if (!v181)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AD36CLL);
  }
  v185[52] &= ~v188;
  v107 = v186 & 0x1F | 0xF8410120;
  if (v105 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v106 = v179;
  }
  *(_DWORD *)&v176[v106] = v107;
  v108 = v179;
  v109 = v179 + 4;
  v179 += 4;
  if (v108 + 8 > v178)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v176, v37, v38, v39, v40, v41, v42, v43);
    v109 = v179;
  }
  *(_DWORD *)&v176[v109] = -702610944;
  v179 += 4;
  __dst = 0;
  v160 = 0;
  v161 = -1;
  v162 = v163;
  v164 = 128;
  v110 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v110 != -1)
  {
    v158 = &v156;
    v157 = &v158;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v157, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v111 = *(pthread_key_t **)(v5 + 3160);
  v119 = (uint64_t)pthread_getspecific(*v111);
  if (!v119)
  {
    v119 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v119, v111);
  }
  v120 = *(_QWORD *)v119;
  if (*(_QWORD *)v119 != v119 + 8)
  {
    v121 = *(_DWORD *)(v119 + 136);
    if (v164 < v121)
    {
      if (v162 && v162 != v163)
      {
        WTF::fastFree((unint64_t)v162, v112, v113, v114, v115, v116, v117, v118);
        v120 = *(_QWORD *)v119;
        v121 = *(_DWORD *)(v119 + 136);
      }
      v162 = (_BYTE *)v120;
      v164 = v121;
      *(_QWORD *)v119 = v119 + 8;
      *(_DWORD *)(v119 + 136) = 128;
    }
  }
  v122 = 1;
  v165 = 1;
  v166 = 0;
  v167 = 6;
  v168 = 0u;
  v169 = 0u;
  v170 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v171, 1, v114, v115, v116, v117, v118);
  BYTE2(v166) = 1;
  if (byte_1ECF4C288)
    goto LABEL_136;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v122 = HIBYTE(word_1ECF4C286) != 0;
LABEL_136:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v122, "PutById Transition handler", 27, "PutById Transition handler", a2);
    goto LABEL_121;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutById Transition handler", 27, a2);
LABEL_121:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v123, v124, v125, v126, v127, v128, v129);
  v137 = v150;
  if (v21 != v150 && v150)
  {
    v150 = 0;
    LODWORD(v151) = 0;
    WTF::fastFree((unint64_t)v137, v130, v131, v132, v133, v134, v135, v136);
  }
  v138 = p_dst;
  if (v20 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v138, v130, v131, v132, v133, v134, v135, v136);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v171, v130, v131, v132, v133, v134, v135, v136);
}

uint64_t JSC::putByIdTransitionReallocatingOutOfLineHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v5;
  unint64_t v6;
  pthread_key_t *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint8x8_t v42;
  __int32 v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  _QWORD *v55;
  char v56;
  char v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _BYTE *v62;
  int v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  char *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  unint64_t v98;
  pthread_key_t *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  unsigned int v109;
  char v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  int v127;
  int64_t v128;
  char *v129;
  char *v130;
  int v131;
  int v132;
  char v133;
  __int16 v134;
  char v135;
  WTF *p_dst;
  uint64_t v137;
  _BYTE v138[31];
  char v139;
  char **v140;
  char *v141;
  void *__dst;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  _BYTE v146[128];
  unsigned int v147;
  char v148;
  int v149;
  int v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  _DWORD v154[6];
  char v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  _BYTE v160[128];
  unsigned int v161;
  int v162;
  int v163;
  char v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _DWORD *v168;
  char v169;
  uint64_t v170;
  int v171;
  _DWORD *v172;
  char v173;
  uint64_t v174;
  int v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  LOBYTE(v154[0]) = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0x8000000080000000;
  v5 = v160;
  v159 = v160;
  v161 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    __dst = &v141;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v16 = *(_QWORD *)v15;
  v17 = v161;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v18 = *(_DWORD *)(v15 + 136);
    if (v161 < v18)
    {
      if (v159 && v159 != v160)
      {
        WTF::fastFree((unint64_t)v159, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
        v16 = *(_QWORD *)v15;
        v18 = *(_DWORD *)(v15 + 136);
      }
      v159 = (_BYTE *)v16;
      v161 = v18;
      *(_QWORD *)v15 = v15 + 8;
      *(_DWORD *)(v15 + 136) = 128;
      v17 = v161;
    }
  }
  v19 = 0;
  v164 = 1;
  v169 = 16;
  v171 = 0x10000;
  v173 = 17;
  v175 = 0x20000;
  v162 = 0;
  v163 = 0;
  v165 = 0u;
  v166 = 0u;
  v167 = 0u;
  v168 = v154;
  v170 = 0;
  v172 = v154;
  v174 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  if (v17 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    v19 = v162;
  }
  *(_DWORD *)&v159[v19] = -1447068675;
  v20 = v162 + 4;
  v162 += 4;
  p_dst = (WTF *)v138;
  v137 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v154, "check structure");
    v20 = v162;
  }
  if (v20 + 4 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    v20 = v162;
  }
  *(_DWORD *)&v159[v20] = -1203765213;
  v21 = v162;
  v22 = v162 + 4;
  v162 += 4;
  if (!v164)
  {
    v8 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v9 = "RegisterID JSC::MacroAssemblerARM64::getCachedMemoryTempRegisterIDAndInvalidate()";
    v10 = 164;
    __break(0xC471u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  v172[52] &= ~v175;
  LODWORD(v5) = v173 & 0x1F | 0xB8418120;
  if (v21 + 8 > v161)
  {
LABEL_126:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    v22 = v162;
  }
  *(_DWORD *)&v159[v22] = (_DWORD)v5;
  v23 = v162;
  v24 = v162 + 4;
  v162 += 4;
  if (v23 + 8 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    v24 = v162;
  }
  *(_DWORD *)&v159[v24] = 1796276351;
  v25 = v162 + 4;
  v162 += 4;
  if (v176)
  {
    v127 = HIDWORD(v158);
    while (v25 < v127)
    {
      if (v25 + 4 > v161)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
        v25 = v162;
      }
      *(_DWORD *)&v159[v25] = -721215457;
      v127 = HIDWORD(v158);
      v25 = v162 + 4;
      v162 += 4;
    }
    v163 = 0;
  }
  if (v25 + 4 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    v25 = v162;
  }
  *(_DWORD *)&v159[v25] = 1409286145;
  v26 = v162;
  v162 += 4;
  v27 = v162;
  v28 = v26 + 8;
  v29 = v162;
  if (v28 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    v29 = v162;
  }
  *(_DWORD *)&v159[v29] = -721215457;
  v162 += 4;
  if (v176)
    v30 = -122;
  else
    v30 = -126;
  v131 = v27;
  v132 = 0;
  v133 = v30;
  v134 = 1;
  v135 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v137) == (_DWORD)v137)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v137) + 1), (unint64_t)&v131, v10, v11, v12, v13, v14);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)p_dst + 12 * HIDWORD(v137);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v132;
      v34 = (char *)p_dst + 12 * HIDWORD(v137);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v137);
  }
  __dst = &v144;
  LODWORD(v144) = 50332169;
  v143 = 0x200000003;
  v35 = 2;
  LODWORD(v5) = 1;
  do
  {
    v36 = 0;
    v37 = 0;
    v38 = (char *)__dst;
    v39 = v35;
    do
    {
      if ((*((_BYTE *)__dst + v36 + 1) & 0x40) != 0)
        goto LABEL_125;
      v37 |= 1 << *((_BYTE *)__dst + v36 + 1);
      v36 += 2;
    }
    while (2 * v35 != v36);
    v40 = 0;
    do
    {
      v41 = *((_BYTE *)__dst + v40) & 0x7F;
      if (v41 >= 0x40)
        goto LABEL_125;
      v37 &= ~(1 << v41);
      v40 += 2;
    }
    while (2 * v35 != v40);
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
    v42.i16[0] = vaddlv_u8(v42);
    v43 = v42.i32[0];
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v37));
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.i32[0] + v43)
    {
      v45 = 0;
      if (v35 <= 1uLL)
        v46 = 1;
      else
        v46 = v35;
      v47 = 2 * v46;
      while (1)
      {
        v48 = *((unsigned __int8 *)__dst + v45 + 1);
        if ((v48 & 0x7Fu) >= 0x40)
          goto LABEL_125;
        if (((v37 >> (v48 & 0x7F)) & 1) != 0)
          break;
        v45 += 2;
        if (v47 == v45)
          goto LABEL_62;
      }
      v49 = *((unsigned __int8 *)__dst + v45);
      if (v49 == v48)
      {
LABEL_60:
        memmove(&v38[v45], &v38[v45 + 2], 2 * v39 - v45 - 2);
        v35 = HIDWORD(v143) - 1;
        goto LABEL_61;
      }
      v50 = (char)v49;
      if ((char)v49 == 63)
      {
        v51 = v162;
        v52 = v161;
        if (v48 != 31)
        {
          v54 = v48 & 0x1F | 0xD2800000;
          goto LABEL_57;
        }
      }
      else
      {
        v51 = v162;
        v52 = v161;
        v53 = (char)v48 == 31 || v50 == 31;
        if (!v53)
        {
          v54 = v48 & 0xFFE0FFFF | ((v50 & 0x1F) << 16) | 0xAA0003E0;
LABEL_57:
          if (v51 + 4 > v52)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14);
            v51 = v162;
          }
          *(_DWORD *)&v159[v51] = v54;
          v162 += 4;
          v38 = (char *)__dst;
          v39 = HIDWORD(v143);
          goto LABEL_60;
        }
      }
      v54 = (char)v48 | (32 * v50) | 0x91000000;
      goto LABEL_57;
    }
    v55 = a2;
    v56 = *(_BYTE *)__dst;
    v57 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v154, *(char *)__dst, v57, v10, v11, v12, v13, v14);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v143) - 2);
    v58 = (HIDWORD(v143) - 1);
    v53 = HIDWORD(v143) == 1;
    HIDWORD(v143) = v58;
    v59 = (char *)__dst;
    v60 = (char *)__dst + 2 * v58;
    if (v53)
    {
      v67 = 0;
      v68 = 0;
      v63 = 0;
      v8 = v60;
    }
    else
    {
      v61 = 2 * v58;
      v62 = __dst;
      while (*v62 != v57)
      {
        v62 += 2;
        v61 -= 2;
        if (!v61)
          goto LABEL_68;
      }
      *v62 = v56;
LABEL_68:
      v63 = 0;
      v64 = v59;
      v8 = v60;
      v65 = v60;
      do
      {
        if (*v59 == v59[1])
        {
          v66 = v59;
          if (v65 != (char *)__dst + 2 * HIDWORD(v143))
          {
            v130 = v60;
            if (v59 == v8)
            {
              v66 = v65;
            }
            else
            {
              v128 = v64 - v8;
              v129 = v65;
              memmove(v65, v8, v64 - v8);
              v66 = &v129[v128];
            }
            v60 = v130;
          }
          v8 = v59 + 2;
          ++v63;
          v65 = v66;
        }
        v59 += 2;
        v64 += 2;
      }
      while (v59 < v60);
      v59 = (char *)__dst;
      v67 = HIDWORD(v143);
      v68 = HIDWORD(v143);
      v60 = v65;
    }
    v69 = &v59[2 * v67];
    a2 = v55;
    if (v8 != v69)
    {
      memmove(v60, v8, v69 - v8);
      v68 = HIDWORD(v143);
    }
    v35 = v68 - v63;
LABEL_61:
    HIDWORD(v143) = v35;
LABEL_62:
    ;
  }
  while (v35);
  v70 = __dst;
  if (&v144 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v143) = 0;
    WTF::fastFree((unint64_t)v70, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v154, (uint64_t)this, 0, v10, v11, v12, v13, v14);
  if (!v164)
  {
    __break(0xC471u);
    JUMPOUT(0x1981ADF5CLL);
  }
  v168[52] &= ~v171;
  v76 = v169;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v154, (uint64_t)operationReallocateButterflyAndTransition, v169, v71, v72, v73, v74, v75);
  v163 = 0;
  v84 = v162;
  if (v162 + 4 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, v77, v78, v79, v80, v81, v82, v83);
    v84 = v162;
  }
  *(_DWORD *)&v159[v84] = (32 * (v76 & 0x1F)) | 0xD63F0000;
  v85 = v162;
  v86 = v162 + 4;
  v162 += 4;
  if (v85 + 8 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, v77, v78, v79, v80, v81, v82, v83);
    v86 = v162;
  }
  *(_DWORD *)&v159[v86] = -1463714819;
  v87 = v162;
  v88 = v162 + 4;
  v162 += 4;
  if (v87 + 8 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, v77, v78, v79, v80, v81, v82, v83);
    v88 = v162;
  }
  *(_DWORD *)&v159[v88] = -698416192;
  v89 = v162 + 4;
  v162 += 4;
  if (HIDWORD(v137))
  {
    v90 = 0;
    v91 = 0;
    v92 = 12 * HIDWORD(v137);
    do
    {
      if (v91 >= HIDWORD(v137))
      {
        __break(0xC471u);
        JUMPOUT(0x1981AE080);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v90), (uint64_t)v154, v78, v79, v80, v81, v82, v83);
      ++v91;
      v90 += 12;
    }
    while (v92 != v90);
    v89 = v162;
  }
  if (v89 + 4 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, v77, v78, v79, v80, v81, v82, v83);
    v89 = v162;
  }
  *(_DWORD *)&v159[v89] = -129662679;
  v93 = v162;
  v94 = v162 + 4;
  v162 += 4;
  if (!v164)
  {
    __break(0xC471u);
    JUMPOUT(0x1981ADFBCLL);
  }
  v168[52] &= ~v171;
  v95 = v169 & 0x1F | 0xF8410120;
  if (v93 + 8 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, v77, v78, v79, v80, v81, v82, v83);
    v94 = v162;
  }
  *(_DWORD *)&v159[v94] = v95;
  v96 = v162;
  v97 = v162 + 4;
  v162 += 4;
  if (v96 + 8 > v161)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v159, v77, v78, v79, v80, v81, v82, v83);
    v97 = v162;
  }
  *(_DWORD *)&v159[v97] = -702610944;
  v162 += 4;
  __dst = 0;
  v143 = 0;
  v144 = -1;
  v145 = (WTF *)v146;
  v147 = 128;
  v98 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v98 != -1)
  {
    v141 = &v139;
    v140 = &v141;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v99 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v107 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v107)
  {
    v107 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v107, v99);
  }
  v108 = *(WTF **)v107;
  if (*(_QWORD *)v107 != v107 + 8)
  {
    v109 = *(_DWORD *)(v107 + 136);
    if (v147 < v109)
    {
      if (v145 && v145 != (WTF *)v146)
      {
        WTF::fastFree((unint64_t)v145, v100, v101, v102, v103, v104, v105, v106);
        v108 = *(WTF **)v107;
        v109 = *(_DWORD *)(v107 + 136);
      }
      v145 = v108;
      v147 = v109;
      *(_QWORD *)v107 = v107 + 8;
      *(_DWORD *)(v107 + 136) = 128;
    }
  }
  v110 = 1;
  v148 = 1;
  v149 = 0;
  v150 = 6;
  v151 = 0u;
  v152 = 0u;
  v153 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v154, 1, v102, v103, v104, v105, v106);
  BYTE2(v149) = 1;
  if (byte_1ECF4C288)
  {
LABEL_123:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v110, "PutById Transition handler", 27, "PutById Transition handler", a2);
    goto LABEL_111;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v110 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_123;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutById Transition handler", 27, a2);
LABEL_111:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v111, v112, v113, v114, v115, v116, v117);
  v125 = p_dst;
  if (v138 != (_BYTE *)p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v137) = 0;
    WTF::fastFree((unint64_t)v125, v118, v119, v120, v121, v122, v123, v124);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v154, v118, v119, v120, v121, v122, v123, v124);
}

uint64_t JSC::putByIdCustomAccessorHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  pthread_key_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  int v83;
  int v84;
  int v85;
  char v86;
  __int16 v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[31];
  char v92;
  char **v93;
  char *v94;
  _QWORD v95[3];
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE v110[128];
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  int v121;
  _BYTE *v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v105[0] = 0;
  v105[24] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0x8000000080000000;
  v109 = v110;
  v111 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v95[0] = &v94;
    v89 = (WTF *)v95;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v111;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v111 < v17)
    {
      if (v109 && v109 != v110)
      {
        WTF::fastFree((unint64_t)v109, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v109 = (_BYTE *)v15;
      v111 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v111;
    }
  }
  v18 = 0;
  v114 = 1;
  v119 = 16;
  v121 = 0x10000;
  v123 = 17;
  v125 = 0x20000;
  v112 = 0;
  v113 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = v105;
  v120 = 0;
  v122 = v105;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v112;
  }
  *(_DWORD *)&v109[v18] = -1447068675;
  v19 = v112 + 4;
  v112 += 4;
  v89 = (WTF *)v91;
  v90 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v105, "check structure");
    v19 = v112;
  }
  if (v19 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v112;
  }
  *(_DWORD *)&v109[v19] = -1203765213;
  v20 = v112;
  v21 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AE7A8);
  }
  *((_DWORD *)v122 + 52) &= ~v125;
  v22 = v123 & 0x1F | 0xB8418120;
  if (v20 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v112;
  }
  *(_DWORD *)&v109[v21] = v22;
  v23 = v112;
  v24 = v112 + 4;
  v112 += 4;
  if (v23 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v112;
  }
  *(_DWORD *)&v109[v24] = 1796276351;
  v25 = v112 + 4;
  v112 += 4;
  if (v126)
  {
    v83 = HIDWORD(v108);
    while (v25 < v83)
    {
      if (v25 + 4 > v111)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v112;
      }
      *(_DWORD *)&v109[v25] = -721215457;
      v83 = HIDWORD(v108);
      v25 = v112 + 4;
      v112 += 4;
    }
    v113 = 0;
  }
  if (v25 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v112;
  }
  *(_DWORD *)&v109[v25] = 1409286145;
  v26 = v112;
  v112 += 4;
  v27 = v112;
  v28 = v26 + 8;
  v29 = v112;
  if (v28 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v112;
  }
  *(_DWORD *)&v109[v29] = -721215457;
  v112 += 4;
  if (v126)
    v30 = -122;
  else
    v30 = -126;
  v84 = v27;
  v85 = 0;
  v86 = v30;
  v87 = 1;
  v88 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v90) == (_DWORD)v90)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, (void *)(HIDWORD(v90) + 1), (unint64_t)&v84, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v85;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v90);
  }
  JSC::customSetterHandlerImpl<true>((uint64_t)this, (uint64_t)v105, 1u, 0, 2, 3, 4, 5);
  v42 = v112;
  if (v112 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v42 = v112;
  }
  *(_DWORD *)&v109[v42] = -1463714819;
  v43 = v112;
  v44 = v112 + 4;
  v112 += 4;
  if (v43 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v44 = v112;
  }
  *(_DWORD *)&v109[v44] = -698416192;
  v45 = v112 + 4;
  v112 += 4;
  if (HIDWORD(v90))
  {
    v46 = 0;
    v47 = 0;
    v48 = 12 * HIDWORD(v90);
    do
    {
      if (v47 >= HIDWORD(v90))
      {
        __break(0xC471u);
        JUMPOUT(0x1981AE890);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v89 + v46), (uint64_t)v105, v36, v37, v38, v39, v40, v41);
      ++v47;
      v46 += 12;
    }
    while (v48 != v46);
    v45 = v112;
  }
  if (v45 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v45 = v112;
  }
  *(_DWORD *)&v109[v45] = -129662679;
  v49 = v112;
  v50 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AE838);
  }
  *((_DWORD *)v118 + 52) &= ~v121;
  v51 = v119 & 0x1F | 0xF8410120;
  if (v49 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v50 = v112;
  }
  *(_DWORD *)&v109[v50] = v51;
  v52 = v112;
  v53 = v112 + 4;
  v112 += 4;
  if (v52 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v53 = v112;
  }
  *(_DWORD *)&v109[v53] = -702610944;
  v112 += 4;
  v95[0] = 0;
  v95[1] = 0;
  v95[2] = -1;
  v96 = (WTF *)v97;
  v98 = 128;
  v54 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v54 != -1)
  {
    v94 = &v92;
    v93 = &v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v55 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v63 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v63)
  {
    v63 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v63, v55);
  }
  v64 = *(WTF **)v63;
  if (*(_QWORD *)v63 != v63 + 8)
  {
    v65 = *(_DWORD *)(v63 + 136);
    if (v98 < v65)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v56, v57, v58, v59, v60, v61, v62);
        v64 = *(WTF **)v63;
        v65 = *(_DWORD *)(v63 + 136);
      }
      v96 = v64;
      v98 = v65;
      *(_QWORD *)v63 = v63 + 8;
      *(_DWORD *)(v63 + 136) = 128;
    }
  }
  v66 = 1;
  v99 = 1;
  v100 = 0;
  v101 = 6;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v95, (uint64_t)v105, 1, v58, v59, v60, v61, v62);
  BYTE2(v100) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v66 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, v66, "PutById Custom handler", 23, "PutById Custom handler", a2);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, "PutById Custom handler", 23, a2);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v95, v67, v68, v69, v70, v71, v72, v73);
  v81 = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v105, v74, v75, v76, v77, v78, v79, v80);
}

uint64_t JSC::putByIdCustomValueHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  pthread_key_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  int v83;
  int v84;
  int v85;
  char v86;
  __int16 v87;
  char v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[31];
  char v92;
  char **v93;
  char *v94;
  _QWORD v95[3];
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE v110[128];
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  int v121;
  _BYTE *v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v105[0] = 0;
  v105[24] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0x8000000080000000;
  v109 = v110;
  v111 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v95[0] = &v94;
    v89 = (WTF *)v95;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v111;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v111 < v17)
    {
      if (v109 && v109 != v110)
      {
        WTF::fastFree((unint64_t)v109, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v109 = (_BYTE *)v15;
      v111 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v111;
    }
  }
  v18 = 0;
  v114 = 1;
  v119 = 16;
  v121 = 0x10000;
  v123 = 17;
  v125 = 0x20000;
  v112 = 0;
  v113 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = v105;
  v120 = 0;
  v122 = v105;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v112;
  }
  *(_DWORD *)&v109[v18] = -1447068675;
  v19 = v112 + 4;
  v112 += 4;
  v89 = (WTF *)v91;
  v90 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v105, "check structure");
    v19 = v112;
  }
  if (v19 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v112;
  }
  *(_DWORD *)&v109[v19] = -1203765213;
  v20 = v112;
  v21 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AEFB8);
  }
  *((_DWORD *)v122 + 52) &= ~v125;
  v22 = v123 & 0x1F | 0xB8418120;
  if (v20 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v112;
  }
  *(_DWORD *)&v109[v21] = v22;
  v23 = v112;
  v24 = v112 + 4;
  v112 += 4;
  if (v23 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v112;
  }
  *(_DWORD *)&v109[v24] = 1796276351;
  v25 = v112 + 4;
  v112 += 4;
  if (v126)
  {
    v83 = HIDWORD(v108);
    while (v25 < v83)
    {
      if (v25 + 4 > v111)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v112;
      }
      *(_DWORD *)&v109[v25] = -721215457;
      v83 = HIDWORD(v108);
      v25 = v112 + 4;
      v112 += 4;
    }
    v113 = 0;
  }
  if (v25 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v112;
  }
  *(_DWORD *)&v109[v25] = 1409286145;
  v26 = v112;
  v112 += 4;
  v27 = v112;
  v28 = v26 + 8;
  v29 = v112;
  if (v28 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v112;
  }
  *(_DWORD *)&v109[v29] = -721215457;
  v112 += 4;
  if (v126)
    v30 = -122;
  else
    v30 = -126;
  v84 = v27;
  v85 = 0;
  v86 = v30;
  v87 = 1;
  v88 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v90) == (_DWORD)v90)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, (void *)(HIDWORD(v90) + 1), (unint64_t)&v84, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v85;
      v34 = (char *)v89 + 12 * HIDWORD(v90);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v90);
  }
  JSC::customSetterHandlerImpl<false>((uint64_t)this, (uint64_t)v105, 1, 0, 2, 3, 4, 5);
  v42 = v112;
  if (v112 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v42 = v112;
  }
  *(_DWORD *)&v109[v42] = -1463714819;
  v43 = v112;
  v44 = v112 + 4;
  v112 += 4;
  if (v43 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v44 = v112;
  }
  *(_DWORD *)&v109[v44] = -698416192;
  v45 = v112 + 4;
  v112 += 4;
  if (HIDWORD(v90))
  {
    v46 = 0;
    v47 = 0;
    v48 = 12 * HIDWORD(v90);
    do
    {
      if (v47 >= HIDWORD(v90))
      {
        __break(0xC471u);
        JUMPOUT(0x1981AF0A0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v89 + v46), (uint64_t)v105, v36, v37, v38, v39, v40, v41);
      ++v47;
      v46 += 12;
    }
    while (v48 != v46);
    v45 = v112;
  }
  if (v45 + 4 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v45 = v112;
  }
  *(_DWORD *)&v109[v45] = -129662679;
  v49 = v112;
  v50 = v112 + 4;
  v112 += 4;
  if (!v114)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AF048);
  }
  *((_DWORD *)v118 + 52) &= ~v121;
  v51 = v119 & 0x1F | 0xF8410120;
  if (v49 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v50 = v112;
  }
  *(_DWORD *)&v109[v50] = v51;
  v52 = v112;
  v53 = v112 + 4;
  v112 += 4;
  if (v52 + 8 > v111)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v109, v35, v36, v37, v38, v39, v40, v41);
    v53 = v112;
  }
  *(_DWORD *)&v109[v53] = -702610944;
  v112 += 4;
  v95[0] = 0;
  v95[1] = 0;
  v95[2] = -1;
  v96 = (WTF *)v97;
  v98 = 128;
  v54 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v54 != -1)
  {
    v94 = &v92;
    v93 = &v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v55 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v63 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v63)
  {
    v63 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v63, v55);
  }
  v64 = *(WTF **)v63;
  if (*(_QWORD *)v63 != v63 + 8)
  {
    v65 = *(_DWORD *)(v63 + 136);
    if (v98 < v65)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v56, v57, v58, v59, v60, v61, v62);
        v64 = *(WTF **)v63;
        v65 = *(_DWORD *)(v63 + 136);
      }
      v96 = v64;
      v98 = v65;
      *(_QWORD *)v63 = v63 + 8;
      *(_DWORD *)(v63 + 136) = 128;
    }
  }
  v66 = 1;
  v99 = 1;
  v100 = 0;
  v101 = 6;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v95, (uint64_t)v105, 1, v58, v59, v60, v61, v62);
  BYTE2(v100) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v66 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, v66, "PutById Custom handler", 23, "PutById Custom handler", a2);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v95, "PutById Custom handler", 23, a2);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v95, v67, v68, v69, v70, v71, v72, v73);
  v81 = v89;
  if (v91 != (_BYTE *)v89 && v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v105, v74, v75, v76, v77, v78, v79, v80);
}

uint64_t JSC::putByIdStrictSetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  int v82;
  int v83;
  int v84;
  char v85;
  __int16 v86;
  char v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[31];
  char v91;
  char **v92;
  char *v93;
  _QWORD v94[3];
  WTF *v95;
  _BYTE v96[128];
  unsigned int v97;
  char v98;
  int v99;
  int v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _BYTE v109[128];
  unsigned int v110;
  int v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE *v117;
  char v118;
  uint64_t v119;
  int v120;
  _BYTE *v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v104[0] = 0;
  v104[24] = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0x8000000080000000;
  v108 = v109;
  v110 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v94[0] = &v93;
    v88 = (WTF *)v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v88, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v110;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v110 < v16)
    {
      if (v108 && v108 != v109)
      {
        WTF::fastFree((unint64_t)v108, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v108 = (_BYTE *)v14;
      v110 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v110;
    }
  }
  v17 = 0;
  v113 = 1;
  v118 = 16;
  v120 = 0x10000;
  v122 = 17;
  v124 = 0x20000;
  v111 = 0;
  v112 = 0;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = v104;
  v119 = 0;
  v121 = v104;
  v123 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v111;
  }
  *(_DWORD *)&v108[v17] = -1447068675;
  v18 = v111 + 4;
  v111 += 4;
  v88 = (WTF *)v90;
  v89 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v104, "check structure");
    v18 = v111;
  }
  if (v18 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v111;
  }
  *(_DWORD *)&v108[v18] = -1203765213;
  v19 = v111;
  v20 = v111 + 4;
  v111 += 4;
  if (!v113)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AF7B4);
  }
  *((_DWORD *)v121 + 52) &= ~v124;
  v21 = v122 & 0x1F | 0xB8418120;
  if (v19 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v111;
  }
  *(_DWORD *)&v108[v20] = v21;
  v22 = v111;
  v23 = v111 + 4;
  v111 += 4;
  if (v22 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v111;
  }
  *(_DWORD *)&v108[v23] = 1796276351;
  v24 = v111 + 4;
  v111 += 4;
  if (v125)
  {
    v82 = HIDWORD(v107);
    while (v24 < v82)
    {
      if (v24 + 4 > v110)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v111;
      }
      *(_DWORD *)&v108[v24] = -721215457;
      v82 = HIDWORD(v107);
      v24 = v111 + 4;
      v111 += 4;
    }
    v112 = 0;
  }
  if (v24 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v111;
  }
  *(_DWORD *)&v108[v24] = 1409286145;
  v25 = v111;
  v111 += 4;
  v26 = v111;
  v27 = v25 + 8;
  v28 = v111;
  if (v27 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v111;
  }
  *(_DWORD *)&v108[v28] = -721215457;
  v111 += 4;
  if (v125)
    v29 = -122;
  else
    v29 = -126;
  v83 = v26;
  v84 = 0;
  v85 = v29;
  v86 = 1;
  v87 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, (void *)(HIDWORD(v89) + 1), (unint64_t)&v83, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v84;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v89);
  }
  JSC::setterHandlerImpl<true>((uint64_t)v104, 1, 0, 2, 3, 4, v11, v12);
  v41 = v111;
  if (v111 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v41 = v111;
  }
  *(_DWORD *)&v108[v41] = -1463714819;
  v42 = v111;
  v43 = v111 + 4;
  v111 += 4;
  if (v42 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v43 = v111;
  }
  *(_DWORD *)&v108[v43] = -698416192;
  v44 = v111 + 4;
  v111 += 4;
  if (HIDWORD(v89))
  {
    v45 = 0;
    v46 = 0;
    v47 = 12 * HIDWORD(v89);
    do
    {
      if (v46 >= HIDWORD(v89))
      {
        __break(0xC471u);
        JUMPOUT(0x1981AF89CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v88 + v45), (uint64_t)v104, v35, v36, v37, v38, v39, v40);
      ++v46;
      v45 += 12;
    }
    while (v47 != v45);
    v44 = v111;
  }
  if (v44 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v44 = v111;
  }
  *(_DWORD *)&v108[v44] = -129662679;
  v48 = v111;
  v49 = v111 + 4;
  v111 += 4;
  if (!v113)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AF844);
  }
  *((_DWORD *)v117 + 52) &= ~v120;
  v50 = v118 & 0x1F | 0xF8410120;
  if (v48 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v49 = v111;
  }
  *(_DWORD *)&v108[v49] = v50;
  v51 = v111;
  v52 = v111 + 4;
  v111 += 4;
  if (v51 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v52 = v111;
  }
  *(_DWORD *)&v108[v52] = -702610944;
  v111 += 4;
  v94[0] = 0;
  v94[1] = 0;
  v94[2] = -1;
  v95 = (WTF *)v96;
  v97 = 128;
  v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v53 != -1)
  {
    v93 = &v91;
    v92 = &v93;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v62)
  {
    v62 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
  }
  v63 = *(WTF **)v62;
  if (*(_QWORD *)v62 != v62 + 8)
  {
    v64 = *(_DWORD *)(v62 + 136);
    if (v97 < v64)
    {
      if (v95 && v95 != (WTF *)v96)
      {
        WTF::fastFree((unint64_t)v95, v55, v56, v57, v58, v59, v60, v61);
        v63 = *(WTF **)v62;
        v64 = *(_DWORD *)(v62 + 136);
      }
      v95 = v63;
      v97 = v64;
      *(_QWORD *)v62 = v62 + 8;
      *(_DWORD *)(v62 + 136) = 128;
    }
  }
  v65 = 1;
  v98 = 1;
  v99 = 0;
  v100 = 6;
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v94, (uint64_t)v104, 1, v57, v58, v59, v60, v61);
  BYTE2(v99) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v65 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, v65, "PutById Setter handler", 23, "PutById Setter handler", a1);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, "PutById Setter handler", 23, a1);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v94, v66, v67, v68, v69, v70, v71, v72);
  v80 = v88;
  if (v90 != (_BYTE *)v88 && v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree((unint64_t)v80, v73, v74, v75, v76, v77, v78, v79);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v104, v73, v74, v75, v76, v77, v78, v79);
}

uint64_t JSC::putByIdSloppySetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  int v82;
  int v83;
  int v84;
  char v85;
  __int16 v86;
  char v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[31];
  char v91;
  char **v92;
  char *v93;
  _QWORD v94[3];
  WTF *v95;
  _BYTE v96[128];
  unsigned int v97;
  char v98;
  int v99;
  int v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _BYTE v109[128];
  unsigned int v110;
  int v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE *v117;
  char v118;
  uint64_t v119;
  int v120;
  _BYTE *v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v104[0] = 0;
  v104[24] = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0x8000000080000000;
  v108 = v109;
  v110 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v94[0] = &v93;
    v88 = (WTF *)v94;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v88, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v110;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v110 < v16)
    {
      if (v108 && v108 != v109)
      {
        WTF::fastFree((unint64_t)v108, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v108 = (_BYTE *)v14;
      v110 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v110;
    }
  }
  v17 = 0;
  v113 = 1;
  v118 = 16;
  v120 = 0x10000;
  v122 = 17;
  v124 = 0x20000;
  v111 = 0;
  v112 = 0;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = v104;
  v119 = 0;
  v121 = v104;
  v123 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v111;
  }
  *(_DWORD *)&v108[v17] = -1447068675;
  v18 = v111 + 4;
  v111 += 4;
  v88 = (WTF *)v90;
  v89 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v104, "check structure");
    v18 = v111;
  }
  if (v18 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v111;
  }
  *(_DWORD *)&v108[v18] = -1203765213;
  v19 = v111;
  v20 = v111 + 4;
  v111 += 4;
  if (!v113)
  {
    __break(0xC471u);
    JUMPOUT(0x1981AFFB0);
  }
  *((_DWORD *)v121 + 52) &= ~v124;
  v21 = v122 & 0x1F | 0xB8418120;
  if (v19 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v111;
  }
  *(_DWORD *)&v108[v20] = v21;
  v22 = v111;
  v23 = v111 + 4;
  v111 += 4;
  if (v22 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v111;
  }
  *(_DWORD *)&v108[v23] = 1796276351;
  v24 = v111 + 4;
  v111 += 4;
  if (v125)
  {
    v82 = HIDWORD(v107);
    while (v24 < v82)
    {
      if (v24 + 4 > v110)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v111;
      }
      *(_DWORD *)&v108[v24] = -721215457;
      v82 = HIDWORD(v107);
      v24 = v111 + 4;
      v111 += 4;
    }
    v112 = 0;
  }
  if (v24 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v111;
  }
  *(_DWORD *)&v108[v24] = 1409286145;
  v25 = v111;
  v111 += 4;
  v26 = v111;
  v27 = v25 + 8;
  v28 = v111;
  if (v27 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v111;
  }
  *(_DWORD *)&v108[v28] = -721215457;
  v111 += 4;
  if (v125)
    v29 = -122;
  else
    v29 = -126;
  v83 = v26;
  v84 = 0;
  v85 = v29;
  v86 = 1;
  v87 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, (void *)(HIDWORD(v89) + 1), (unint64_t)&v83, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v84;
      v33 = (char *)v88 + 12 * HIDWORD(v89);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v89);
  }
  JSC::setterHandlerImpl<false>((uint64_t)v104, 1, 0, 2, 3, 4, v11, v12);
  v41 = v111;
  if (v111 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v41 = v111;
  }
  *(_DWORD *)&v108[v41] = -1463714819;
  v42 = v111;
  v43 = v111 + 4;
  v111 += 4;
  if (v42 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v43 = v111;
  }
  *(_DWORD *)&v108[v43] = -698416192;
  v44 = v111 + 4;
  v111 += 4;
  if (HIDWORD(v89))
  {
    v45 = 0;
    v46 = 0;
    v47 = 12 * HIDWORD(v89);
    do
    {
      if (v46 >= HIDWORD(v89))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B0098);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v88 + v45), (uint64_t)v104, v35, v36, v37, v38, v39, v40);
      ++v46;
      v45 += 12;
    }
    while (v47 != v45);
    v44 = v111;
  }
  if (v44 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v44 = v111;
  }
  *(_DWORD *)&v108[v44] = -129662679;
  v48 = v111;
  v49 = v111 + 4;
  v111 += 4;
  if (!v113)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B0040);
  }
  *((_DWORD *)v117 + 52) &= ~v120;
  v50 = v118 & 0x1F | 0xF8410120;
  if (v48 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v49 = v111;
  }
  *(_DWORD *)&v108[v49] = v50;
  v51 = v111;
  v52 = v111 + 4;
  v111 += 4;
  if (v51 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v34, v35, v36, v37, v38, v39, v40);
    v52 = v111;
  }
  *(_DWORD *)&v108[v52] = -702610944;
  v111 += 4;
  v94[0] = 0;
  v94[1] = 0;
  v94[2] = -1;
  v95 = (WTF *)v96;
  v97 = 128;
  v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v53 != -1)
  {
    v93 = &v91;
    v92 = &v93;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v62)
  {
    v62 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
  }
  v63 = *(WTF **)v62;
  if (*(_QWORD *)v62 != v62 + 8)
  {
    v64 = *(_DWORD *)(v62 + 136);
    if (v97 < v64)
    {
      if (v95 && v95 != (WTF *)v96)
      {
        WTF::fastFree((unint64_t)v95, v55, v56, v57, v58, v59, v60, v61);
        v63 = *(WTF **)v62;
        v64 = *(_DWORD *)(v62 + 136);
      }
      v95 = v63;
      v97 = v64;
      *(_QWORD *)v62 = v62 + 8;
      *(_DWORD *)(v62 + 136) = 128;
    }
  }
  v65 = 1;
  v98 = 1;
  v99 = 0;
  v100 = 6;
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v94, (uint64_t)v104, 1, v57, v58, v59, v60, v61);
  BYTE2(v99) = 1;
  if (byte_1ECF4C288)
    goto LABEL_72;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v65 = HIBYTE(word_1ECF4C286) != 0;
LABEL_72:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, v65, "PutById Setter handler", 23, "PutById Setter handler", a1);
    goto LABEL_64;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v94, "PutById Setter handler", 23, a1);
LABEL_64:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v94, v66, v67, v68, v69, v70, v71, v72);
  v80 = v88;
  if (v90 != (_BYTE *)v88 && v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree((unint64_t)v80, v73, v74, v75, v76, v77, v78, v79);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v104, v73, v74, v75, v76, v77, v78, v79);
}

uint64_t JSC::inByIdHitHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  pthread_key_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unsigned int v59;
  char v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  int v77;
  int v78;
  int v79;
  char v80;
  __int16 v81;
  char v82;
  WTF *v83;
  uint64_t v84;
  _BYTE v85[31];
  char v86;
  char **v87;
  char *v88;
  _QWORD v89[3];
  WTF *v90;
  _BYTE v91[128];
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _BYTE v104[128];
  unsigned int v105;
  int v106;
  int v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v99[0] = 0;
  v99[24] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0x8000000080000000;
  v103 = v104;
  v105 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v89[0] = &v88;
    v83 = (WTF *)v89;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v105;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v105 < v16)
    {
      if (v103 && v103 != v104)
      {
        WTF::fastFree((unint64_t)v103, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v103 = (_BYTE *)v14;
      v105 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v105;
    }
  }
  v17 = 0;
  v108 = 1;
  v113 = 16;
  v115 = 0x10000;
  v117 = 17;
  v119 = 0x20000;
  v106 = 0;
  v107 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = v99;
  v114 = 0;
  v116 = v99;
  v118 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v106;
  }
  *(_DWORD *)&v103[v17] = -1447068675;
  v18 = v106 + 4;
  v106 += 4;
  v83 = (WTF *)v85;
  v84 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v99, "check structure");
    v18 = v106;
  }
  if (v18 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v106;
  }
  *(_DWORD *)&v103[v18] = -1203765246;
  v19 = v106;
  v20 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B07BCLL);
  }
  *((_DWORD *)v116 + 52) &= ~v119;
  v21 = v117 & 0x1F | 0xB8418120;
  if (v19 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v106;
  }
  *(_DWORD *)&v103[v20] = v21;
  v22 = v106;
  v23 = v106 + 4;
  v106 += 4;
  if (v22 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v106;
  }
  *(_DWORD *)&v103[v23] = 1796276319;
  v24 = v106 + 4;
  v106 += 4;
  if (v120)
  {
    v77 = HIDWORD(v102);
    while (v24 < v77)
    {
      if (v24 + 4 > v105)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v106;
      }
      *(_DWORD *)&v103[v24] = -721215457;
      v77 = HIDWORD(v102);
      v24 = v106 + 4;
      v106 += 4;
    }
    v107 = 0;
  }
  if (v24 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v106;
  }
  *(_DWORD *)&v103[v24] = 1409286145;
  v25 = v106;
  v106 += 4;
  v26 = v106;
  v27 = v25 + 8;
  v28 = v106;
  if (v27 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v106;
  }
  *(_DWORD *)&v103[v28] = -721215457;
  v29 = v106 + 4;
  v106 += 4;
  if (v120)
    v30 = -122;
  else
    v30 = -126;
  v78 = v26;
  v79 = 0;
  v80 = v30;
  v81 = 1;
  v82 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v84) == (_DWORD)v84)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, (void *)(HIDWORD(v84) + 1), (unint64_t)&v78, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v79;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v84);
    v29 = v106;
  }
  if (v29 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v106;
  }
  *(_DWORD *)&v103[v29] = 838863840;
  v35 = v106;
  v36 = v106 + 4;
  v106 += 4;
  if (v35 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v36 = v106;
  }
  *(_DWORD *)&v103[v36] = -1463714819;
  v37 = v106;
  v38 = v106 + 4;
  v106 += 4;
  if (v37 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v38 = v106;
  }
  *(_DWORD *)&v103[v38] = -698416192;
  v39 = v106 + 4;
  v106 += 4;
  if (HIDWORD(v84))
  {
    v40 = 0;
    v41 = 0;
    v42 = 12 * HIDWORD(v84);
    do
    {
      if (v41 >= HIDWORD(v84))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B08B4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v83 + v40), (uint64_t)v99, v7, v8, v9, v10, v11, v12);
      ++v41;
      v40 += 12;
    }
    while (v42 != v40);
    v39 = v106;
  }
  if (v39 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v39 = v106;
  }
  *(_DWORD *)&v103[v39] = -129662679;
  v43 = v106;
  v44 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B085CLL);
  }
  *((_DWORD *)v112 + 52) &= ~v115;
  v45 = v113 & 0x1F | 0xF8410120;
  if (v43 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v44 = v106;
  }
  *(_DWORD *)&v103[v44] = v45;
  v46 = v106;
  v47 = v106 + 4;
  v106 += 4;
  if (v46 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v47 = v106;
  }
  *(_DWORD *)&v103[v47] = -702610944;
  v106 += 4;
  v89[0] = 0;
  v89[1] = 0;
  v89[2] = -1;
  v90 = (WTF *)v91;
  v92 = 128;
  v48 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v48 != -1)
  {
    v88 = &v86;
    v87 = &v88;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v87, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v49 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v57 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v57)
  {
    v57 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v57, v49);
  }
  v58 = *(WTF **)v57;
  if (*(_QWORD *)v57 != v57 + 8)
  {
    v59 = *(_DWORD *)(v57 + 136);
    if (v92 < v59)
    {
      if (v90 && v90 != (WTF *)v91)
      {
        WTF::fastFree((unint64_t)v90, v50, v51, v52, v53, v54, v55, v56);
        v58 = *(WTF **)v57;
        v59 = *(_DWORD *)(v57 + 136);
      }
      v90 = v58;
      v92 = v59;
      *(_QWORD *)v57 = v57 + 8;
      *(_DWORD *)(v57 + 136) = 128;
    }
  }
  v60 = 1;
  v93 = 1;
  v94 = 0;
  v95 = 6;
  v96 = 0u;
  v97 = 0u;
  v98 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v89, (uint64_t)v99, 1, v52, v53, v54, v55, v56);
  BYTE2(v94) = 1;
  if (byte_1ECF4C288)
    goto LABEL_74;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v60 = HIBYTE(word_1ECF4C286) != 0;
LABEL_74:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, v60, "InById handler", 15, "InById handler", a1);
    goto LABEL_66;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, "InById handler", 15, a1);
LABEL_66:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v89, v61, v62, v63, v64, v65, v66, v67);
  v75 = v83;
  if (v85 != (_BYTE *)v83 && v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v99, v68, v69, v70, v71, v72, v73, v74);
}

uint64_t JSC::inByIdMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  pthread_key_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unsigned int v59;
  char v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  int v77;
  int v78;
  int v79;
  char v80;
  __int16 v81;
  char v82;
  WTF *v83;
  uint64_t v84;
  _BYTE v85[31];
  char v86;
  char **v87;
  char *v88;
  _QWORD v89[3];
  WTF *v90;
  _BYTE v91[128];
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _BYTE v104[128];
  unsigned int v105;
  int v106;
  int v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v99[0] = 0;
  v99[24] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0x8000000080000000;
  v103 = v104;
  v105 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v89[0] = &v88;
    v83 = (WTF *)v89;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v105;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v105 < v16)
    {
      if (v103 && v103 != v104)
      {
        WTF::fastFree((unint64_t)v103, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v103 = (_BYTE *)v14;
      v105 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v105;
    }
  }
  v17 = 0;
  v108 = 1;
  v113 = 16;
  v115 = 0x10000;
  v117 = 17;
  v119 = 0x20000;
  v106 = 0;
  v107 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = v99;
  v114 = 0;
  v116 = v99;
  v118 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v106;
  }
  *(_DWORD *)&v103[v17] = -1447068675;
  v18 = v106 + 4;
  v106 += 4;
  v83 = (WTF *)v85;
  v84 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v99, "check structure");
    v18 = v106;
  }
  if (v18 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v106;
  }
  *(_DWORD *)&v103[v18] = -1203765246;
  v19 = v106;
  v20 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B0FD8);
  }
  *((_DWORD *)v116 + 52) &= ~v119;
  v21 = v117 & 0x1F | 0xB8418120;
  if (v19 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v106;
  }
  *(_DWORD *)&v103[v20] = v21;
  v22 = v106;
  v23 = v106 + 4;
  v106 += 4;
  if (v22 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v106;
  }
  *(_DWORD *)&v103[v23] = 1796276319;
  v24 = v106 + 4;
  v106 += 4;
  if (v120)
  {
    v77 = HIDWORD(v102);
    while (v24 < v77)
    {
      if (v24 + 4 > v105)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v106;
      }
      *(_DWORD *)&v103[v24] = -721215457;
      v77 = HIDWORD(v102);
      v24 = v106 + 4;
      v106 += 4;
    }
    v107 = 0;
  }
  if (v24 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v106;
  }
  *(_DWORD *)&v103[v24] = 1409286145;
  v25 = v106;
  v106 += 4;
  v26 = v106;
  v27 = v25 + 8;
  v28 = v106;
  if (v27 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v106;
  }
  *(_DWORD *)&v103[v28] = -721215457;
  v29 = v106 + 4;
  v106 += 4;
  if (v120)
    v30 = -122;
  else
    v30 = -126;
  v78 = v26;
  v79 = 0;
  v80 = v30;
  v81 = 1;
  v82 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v84) == (_DWORD)v84)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, (void *)(HIDWORD(v84) + 1), (unint64_t)&v78, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v79;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v84);
    v29 = v106;
  }
  if (v29 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v106;
  }
  *(_DWORD *)&v103[v29] = 840894432;
  v35 = v106;
  v36 = v106 + 4;
  v106 += 4;
  if (v35 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v36 = v106;
  }
  *(_DWORD *)&v103[v36] = -1463714819;
  v37 = v106;
  v38 = v106 + 4;
  v106 += 4;
  if (v37 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v38 = v106;
  }
  *(_DWORD *)&v103[v38] = -698416192;
  v39 = v106 + 4;
  v106 += 4;
  if (HIDWORD(v84))
  {
    v40 = 0;
    v41 = 0;
    v42 = 12 * HIDWORD(v84);
    do
    {
      if (v41 >= HIDWORD(v84))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B10D0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v83 + v40), (uint64_t)v99, v7, v8, v9, v10, v11, v12);
      ++v41;
      v40 += 12;
    }
    while (v42 != v40);
    v39 = v106;
  }
  if (v39 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v39 = v106;
  }
  *(_DWORD *)&v103[v39] = -129662679;
  v43 = v106;
  v44 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B1078);
  }
  *((_DWORD *)v112 + 52) &= ~v115;
  v45 = v113 & 0x1F | 0xF8410120;
  if (v43 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v44 = v106;
  }
  *(_DWORD *)&v103[v44] = v45;
  v46 = v106;
  v47 = v106 + 4;
  v106 += 4;
  if (v46 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v47 = v106;
  }
  *(_DWORD *)&v103[v47] = -702610944;
  v106 += 4;
  v89[0] = 0;
  v89[1] = 0;
  v89[2] = -1;
  v90 = (WTF *)v91;
  v92 = 128;
  v48 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v48 != -1)
  {
    v88 = &v86;
    v87 = &v88;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v87, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v49 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v57 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v57)
  {
    v57 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v57, v49);
  }
  v58 = *(WTF **)v57;
  if (*(_QWORD *)v57 != v57 + 8)
  {
    v59 = *(_DWORD *)(v57 + 136);
    if (v92 < v59)
    {
      if (v90 && v90 != (WTF *)v91)
      {
        WTF::fastFree((unint64_t)v90, v50, v51, v52, v53, v54, v55, v56);
        v58 = *(WTF **)v57;
        v59 = *(_DWORD *)(v57 + 136);
      }
      v90 = v58;
      v92 = v59;
      *(_QWORD *)v57 = v57 + 8;
      *(_DWORD *)(v57 + 136) = 128;
    }
  }
  v60 = 1;
  v93 = 1;
  v94 = 0;
  v95 = 6;
  v96 = 0u;
  v97 = 0u;
  v98 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v89, (uint64_t)v99, 1, v52, v53, v54, v55, v56);
  BYTE2(v94) = 1;
  if (byte_1ECF4C288)
    goto LABEL_74;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v60 = HIBYTE(word_1ECF4C286) != 0;
LABEL_74:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, v60, "InById handler", 15, "InById handler", a1);
    goto LABEL_66;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, "InById handler", 15, a1);
LABEL_66:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v89, v61, v62, v63, v64, v65, v66, v67);
  v75 = v83;
  if (v85 != (_BYTE *)v83 && v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v99, v68, v69, v70, v71, v72, v73, v74);
}

uint64_t JSC::deleteByIdDeleteHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  unint64_t v64;
  pthread_key_t *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  unsigned int v75;
  char v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  int v93;
  int v94;
  int v95;
  char v96;
  __int16 v97;
  char v98;
  WTF *v99;
  uint64_t v100;
  _BYTE v101[31];
  char v102;
  char **v103;
  char *v104;
  _QWORD v105[3];
  WTF *v106;
  _BYTE v107[128];
  unsigned int v108;
  char v109;
  int v110;
  int v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _BYTE v115[32];
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _BYTE v120[128];
  unsigned int v121;
  int v122;
  int v123;
  char v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE *v128;
  char v129;
  uint64_t v130;
  int v131;
  _BYTE *v132;
  char v133;
  uint64_t v134;
  int v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v115[0] = 0;
  v115[24] = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0x8000000080000000;
  v119 = v120;
  v121 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v105[0] = &v104;
    v99 = (WTF *)v105;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v121;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v121 < v16)
    {
      if (v119 && v119 != v120)
      {
        WTF::fastFree((unint64_t)v119, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v119 = (_BYTE *)v14;
      v121 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v121;
    }
  }
  v17 = 0;
  v124 = 1;
  v129 = 16;
  v131 = 0x10000;
  v133 = 17;
  v135 = 0x20000;
  v122 = 0;
  v123 = 0;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = v115;
  v130 = 0;
  v132 = v115;
  v134 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v122;
  }
  *(_DWORD *)&v119[v17] = -1447068675;
  v18 = v122 + 4;
  v122 += 4;
  v99 = (WTF *)v101;
  v100 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v115, "check structure");
    v18 = v122;
  }
  if (v18 + 4 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v122;
  }
  *(_DWORD *)&v119[v18] = -1203765246;
  v19 = v122;
  v20 = v122 + 4;
  v122 += 4;
  if (!v124)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B1904);
  }
  *((_DWORD *)v132 + 52) &= ~v135;
  v21 = v133 & 0x1F | 0xB8418120;
  if (v19 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v122;
  }
  *(_DWORD *)&v119[v20] = v21;
  v22 = v122;
  v23 = v122 + 4;
  v122 += 4;
  if (v22 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v122;
  }
  *(_DWORD *)&v119[v23] = 1796276319;
  v24 = v122 + 4;
  v122 += 4;
  if (v136)
  {
    v93 = HIDWORD(v118);
    while (v24 < v93)
    {
      if (v24 + 4 > v121)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v122;
      }
      *(_DWORD *)&v119[v24] = -721215457;
      v93 = HIDWORD(v118);
      v24 = v122 + 4;
      v122 += 4;
    }
    v123 = 0;
  }
  if (v24 + 4 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v122;
  }
  *(_DWORD *)&v119[v24] = 1409286145;
  v25 = v122;
  v122 += 4;
  v26 = v122;
  v27 = v25 + 8;
  v28 = v122;
  if (v27 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v122;
  }
  *(_DWORD *)&v119[v28] = -721215457;
  v29 = v122 + 4;
  v122 += 4;
  if (v136)
    v30 = -122;
  else
    v30 = -126;
  v94 = v26;
  v95 = 0;
  v96 = v30;
  v97 = 1;
  v98 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v100) == (_DWORD)v100)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v99, (void *)(HIDWORD(v100) + 1), (unint64_t)&v94, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v99 + 12 * HIDWORD(v100);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v95;
      v34 = (char *)v99 + 12 * HIDWORD(v100);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v100);
    v29 = v122;
  }
  if (v29 + 4 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v122;
  }
  *(_DWORD *)&v119[v29] = -1203650270;
  v35 = v122;
  v36 = v122 + 4;
  v122 += 4;
  if (v35 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v36 = v122;
  }
  *(_DWORD *)&v119[v36] = -763363324;
  v122 += 4;
  JSC::AssemblyHelpers::storeProperty((uint64_t)v115, 4, 0, 2, 3, v10, v11, v12);
  if (!v124)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B1984);
  }
  *((_DWORD *)v128 + 52) &= ~v131;
  v44 = v129 & 0x1F | 0xB8428120;
  v45 = v122;
  if (v122 + 4 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v45 = v122;
  }
  *(_DWORD *)&v119[v45] = v44;
  v46 = v122;
  v47 = v122 + 4;
  v122 += 4;
  if (!v124)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B19B4);
  }
  *((_DWORD *)v128 + 52) &= ~v131;
  v48 = v129 & 0x1F | 0xB8000000;
  if (v46 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v47 = v122;
  }
  *(_DWORD *)&v119[v47] = v48;
  v49 = v122;
  v50 = v122 + 4;
  v122 += 4;
  if (v49 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v50 = v122;
  }
  *(_DWORD *)&v119[v50] = 838861792;
  v51 = v122;
  v52 = v122 + 4;
  v122 += 4;
  if (v51 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v52 = v122;
  }
  *(_DWORD *)&v119[v52] = -1463714819;
  v53 = v122;
  v54 = v122 + 4;
  v122 += 4;
  if (v53 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v54 = v122;
  }
  *(_DWORD *)&v119[v54] = -698416192;
  v55 = v122 + 4;
  v122 += 4;
  if (HIDWORD(v100))
  {
    v56 = 0;
    v57 = 0;
    v58 = 12 * HIDWORD(v100);
    do
    {
      if (v57 >= HIDWORD(v100))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B1A7CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v99 + v56), (uint64_t)v115, v38, v39, v40, v41, v42, v43);
      ++v57;
      v56 += 12;
    }
    while (v58 != v56);
    v55 = v122;
  }
  if (v55 + 4 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v55 = v122;
  }
  *(_DWORD *)&v119[v55] = -129662679;
  v59 = v122;
  v60 = v122 + 4;
  v122 += 4;
  if (!v124)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B1A24);
  }
  *((_DWORD *)v128 + 52) &= ~v131;
  v61 = v129 & 0x1F | 0xF8410120;
  if (v59 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v60 = v122;
  }
  *(_DWORD *)&v119[v60] = v61;
  v62 = v122;
  v63 = v122 + 4;
  v122 += 4;
  if (v62 + 8 > v121)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v119, v37, v38, v39, v40, v41, v42, v43);
    v63 = v122;
  }
  *(_DWORD *)&v119[v63] = -702610944;
  v122 += 4;
  v105[0] = 0;
  v105[1] = 0;
  v105[2] = -1;
  v106 = (WTF *)v107;
  v108 = 128;
  v64 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v64 != -1)
  {
    v104 = &v102;
    v103 = &v104;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v65 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v73 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v73)
  {
    v73 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v73, v65);
  }
  v74 = *(WTF **)v73;
  if (*(_QWORD *)v73 != v73 + 8)
  {
    v75 = *(_DWORD *)(v73 + 136);
    if (v108 < v75)
    {
      if (v106 && v106 != (WTF *)v107)
      {
        WTF::fastFree((unint64_t)v106, v66, v67, v68, v69, v70, v71, v72);
        v74 = *(WTF **)v73;
        v75 = *(_DWORD *)(v73 + 136);
      }
      v106 = v74;
      v108 = v75;
      *(_QWORD *)v73 = v73 + 8;
      *(_DWORD *)(v73 + 136) = 128;
    }
  }
  v76 = 1;
  v109 = 1;
  v110 = 0;
  v111 = 6;
  v112 = 0u;
  v113 = 0u;
  v114 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v105, (uint64_t)v115, 1, v68, v69, v70, v71, v72);
  BYTE2(v110) = 1;
  if (byte_1ECF4C288)
    goto LABEL_84;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v76 = HIBYTE(word_1ECF4C286) != 0;
LABEL_84:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v105, v76, "DeleteById handler", 19, "DeleteById handler", a1);
    goto LABEL_76;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v105, "DeleteById handler", 19, a1);
LABEL_76:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v105, v77, v78, v79, v80, v81, v82, v83);
  v91 = v99;
  if (v101 != (_BYTE *)v99 && v99)
  {
    v99 = 0;
    LODWORD(v100) = 0;
    WTF::fastFree((unint64_t)v91, v84, v85, v86, v87, v88, v89, v90);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v115, v84, v85, v86, v87, v88, v89, v90);
}

uint64_t JSC::deleteByIdDeleteNonConfigurableHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  pthread_key_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unsigned int v59;
  char v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  int v77;
  int v78;
  int v79;
  char v80;
  __int16 v81;
  char v82;
  WTF *v83;
  uint64_t v84;
  _BYTE v85[31];
  char v86;
  char **v87;
  char *v88;
  _QWORD v89[3];
  WTF *v90;
  _BYTE v91[128];
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _BYTE v104[128];
  unsigned int v105;
  int v106;
  int v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v99[0] = 0;
  v99[24] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0x8000000080000000;
  v103 = v104;
  v105 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v89[0] = &v88;
    v83 = (WTF *)v89;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v105;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v105 < v16)
    {
      if (v103 && v103 != v104)
      {
        WTF::fastFree((unint64_t)v103, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v103 = (_BYTE *)v14;
      v105 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v105;
    }
  }
  v17 = 0;
  v108 = 1;
  v113 = 16;
  v115 = 0x10000;
  v117 = 17;
  v119 = 0x20000;
  v106 = 0;
  v107 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = v99;
  v114 = 0;
  v116 = v99;
  v118 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v106;
  }
  *(_DWORD *)&v103[v17] = -1447068675;
  v18 = v106 + 4;
  v106 += 4;
  v83 = (WTF *)v85;
  v84 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v99, "check structure");
    v18 = v106;
  }
  if (v18 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v106;
  }
  *(_DWORD *)&v103[v18] = -1203765246;
  v19 = v106;
  v20 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B219CLL);
  }
  *((_DWORD *)v116 + 52) &= ~v119;
  v21 = v117 & 0x1F | 0xB8418120;
  if (v19 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v106;
  }
  *(_DWORD *)&v103[v20] = v21;
  v22 = v106;
  v23 = v106 + 4;
  v106 += 4;
  if (v22 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v106;
  }
  *(_DWORD *)&v103[v23] = 1796276319;
  v24 = v106 + 4;
  v106 += 4;
  if (v120)
  {
    v77 = HIDWORD(v102);
    while (v24 < v77)
    {
      if (v24 + 4 > v105)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v106;
      }
      *(_DWORD *)&v103[v24] = -721215457;
      v77 = HIDWORD(v102);
      v24 = v106 + 4;
      v106 += 4;
    }
    v107 = 0;
  }
  if (v24 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v106;
  }
  *(_DWORD *)&v103[v24] = 1409286145;
  v25 = v106;
  v106 += 4;
  v26 = v106;
  v27 = v25 + 8;
  v28 = v106;
  if (v27 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v106;
  }
  *(_DWORD *)&v103[v28] = -721215457;
  v29 = v106 + 4;
  v106 += 4;
  if (v120)
    v30 = -122;
  else
    v30 = -126;
  v78 = v26;
  v79 = 0;
  v80 = v30;
  v81 = 1;
  v82 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v84) == (_DWORD)v84)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, (void *)(HIDWORD(v84) + 1), (unint64_t)&v78, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v79;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v84);
    v29 = v106;
  }
  if (v29 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v106;
  }
  *(_DWORD *)&v103[v29] = 1384120320;
  v35 = v106;
  v36 = v106 + 4;
  v106 += 4;
  if (v35 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v36 = v106;
  }
  *(_DWORD *)&v103[v36] = -1463714819;
  v37 = v106;
  v38 = v106 + 4;
  v106 += 4;
  if (v37 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v38 = v106;
  }
  *(_DWORD *)&v103[v38] = -698416192;
  v39 = v106 + 4;
  v106 += 4;
  if (HIDWORD(v84))
  {
    v40 = 0;
    v41 = 0;
    v42 = 12 * HIDWORD(v84);
    do
    {
      if (v41 >= HIDWORD(v84))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B2294);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v83 + v40), (uint64_t)v99, v7, v8, v9, v10, v11, v12);
      ++v41;
      v40 += 12;
    }
    while (v42 != v40);
    v39 = v106;
  }
  if (v39 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v39 = v106;
  }
  *(_DWORD *)&v103[v39] = -129662679;
  v43 = v106;
  v44 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B223CLL);
  }
  *((_DWORD *)v112 + 52) &= ~v115;
  v45 = v113 & 0x1F | 0xF8410120;
  if (v43 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v44 = v106;
  }
  *(_DWORD *)&v103[v44] = v45;
  v46 = v106;
  v47 = v106 + 4;
  v106 += 4;
  if (v46 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v47 = v106;
  }
  *(_DWORD *)&v103[v47] = -702610944;
  v106 += 4;
  v89[0] = 0;
  v89[1] = 0;
  v89[2] = -1;
  v90 = (WTF *)v91;
  v92 = 128;
  v48 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v48 != -1)
  {
    v88 = &v86;
    v87 = &v88;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v87, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v49 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v57 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v57)
  {
    v57 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v57, v49);
  }
  v58 = *(WTF **)v57;
  if (*(_QWORD *)v57 != v57 + 8)
  {
    v59 = *(_DWORD *)(v57 + 136);
    if (v92 < v59)
    {
      if (v90 && v90 != (WTF *)v91)
      {
        WTF::fastFree((unint64_t)v90, v50, v51, v52, v53, v54, v55, v56);
        v58 = *(WTF **)v57;
        v59 = *(_DWORD *)(v57 + 136);
      }
      v90 = v58;
      v92 = v59;
      *(_QWORD *)v57 = v57 + 8;
      *(_DWORD *)(v57 + 136) = 128;
    }
  }
  v60 = 1;
  v93 = 1;
  v94 = 0;
  v95 = 6;
  v96 = 0u;
  v97 = 0u;
  v98 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v89, (uint64_t)v99, 1, v52, v53, v54, v55, v56);
  BYTE2(v94) = 1;
  if (byte_1ECF4C288)
    goto LABEL_74;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v60 = HIBYTE(word_1ECF4C286) != 0;
LABEL_74:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, v60, "DeleteById handler", 19, "DeleteById handler", a1);
    goto LABEL_66;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, "DeleteById handler", 19, a1);
LABEL_66:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v89, v61, v62, v63, v64, v65, v66, v67);
  v75 = v83;
  if (v85 != (_BYTE *)v83 && v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v99, v68, v69, v70, v71, v72, v73, v74);
}

uint64_t JSC::deleteByIdDeleteMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  pthread_key_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unsigned int v59;
  char v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  int v77;
  int v78;
  int v79;
  char v80;
  __int16 v81;
  char v82;
  WTF *v83;
  uint64_t v84;
  _BYTE v85[31];
  char v86;
  char **v87;
  char *v88;
  _QWORD v89[3];
  WTF *v90;
  _BYTE v91[128];
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _BYTE v104[128];
  unsigned int v105;
  int v106;
  int v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v99[0] = 0;
  v99[24] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0x8000000080000000;
  v103 = v104;
  v105 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v89[0] = &v88;
    v83 = (WTF *)v89;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v105;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v105 < v16)
    {
      if (v103 && v103 != v104)
      {
        WTF::fastFree((unint64_t)v103, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v103 = (_BYTE *)v14;
      v105 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v105;
    }
  }
  v17 = 0;
  v108 = 1;
  v113 = 16;
  v115 = 0x10000;
  v117 = 17;
  v119 = 0x20000;
  v106 = 0;
  v107 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = v99;
  v114 = 0;
  v116 = v99;
  v118 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v106;
  }
  *(_DWORD *)&v103[v17] = -1447068675;
  v18 = v106 + 4;
  v106 += 4;
  v83 = (WTF *)v85;
  v84 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v99, "check structure");
    v18 = v106;
  }
  if (v18 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v106;
  }
  *(_DWORD *)&v103[v18] = -1203765246;
  v19 = v106;
  v20 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B29B8);
  }
  *((_DWORD *)v116 + 52) &= ~v119;
  v21 = v117 & 0x1F | 0xB8418120;
  if (v19 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v106;
  }
  *(_DWORD *)&v103[v20] = v21;
  v22 = v106;
  v23 = v106 + 4;
  v106 += 4;
  if (v22 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v106;
  }
  *(_DWORD *)&v103[v23] = 1796276319;
  v24 = v106 + 4;
  v106 += 4;
  if (v120)
  {
    v77 = HIDWORD(v102);
    while (v24 < v77)
    {
      if (v24 + 4 > v105)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v106;
      }
      *(_DWORD *)&v103[v24] = -721215457;
      v77 = HIDWORD(v102);
      v24 = v106 + 4;
      v106 += 4;
    }
    v107 = 0;
  }
  if (v24 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v106;
  }
  *(_DWORD *)&v103[v24] = 1409286145;
  v25 = v106;
  v106 += 4;
  v26 = v106;
  v27 = v25 + 8;
  v28 = v106;
  if (v27 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v106;
  }
  *(_DWORD *)&v103[v28] = -721215457;
  v29 = v106 + 4;
  v106 += 4;
  if (v120)
    v30 = -122;
  else
    v30 = -126;
  v78 = v26;
  v79 = 0;
  v80 = v30;
  v81 = 1;
  v82 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v84) == (_DWORD)v84)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, (void *)(HIDWORD(v84) + 1), (unint64_t)&v78, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v79;
      v34 = (char *)v83 + 12 * HIDWORD(v84);
      *(_DWORD *)v34 = v26;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v84);
    v29 = v106;
  }
  if (v29 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v106;
  }
  *(_DWORD *)&v103[v29] = 838861792;
  v35 = v106;
  v36 = v106 + 4;
  v106 += 4;
  if (v35 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v36 = v106;
  }
  *(_DWORD *)&v103[v36] = -1463714819;
  v37 = v106;
  v38 = v106 + 4;
  v106 += 4;
  if (v37 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v38 = v106;
  }
  *(_DWORD *)&v103[v38] = -698416192;
  v39 = v106 + 4;
  v106 += 4;
  if (HIDWORD(v84))
  {
    v40 = 0;
    v41 = 0;
    v42 = 12 * HIDWORD(v84);
    do
    {
      if (v41 >= HIDWORD(v84))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B2AB0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v83 + v40), (uint64_t)v99, v7, v8, v9, v10, v11, v12);
      ++v41;
      v40 += 12;
    }
    while (v42 != v40);
    v39 = v106;
  }
  if (v39 + 4 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v39 = v106;
  }
  *(_DWORD *)&v103[v39] = -129662679;
  v43 = v106;
  v44 = v106 + 4;
  v106 += 4;
  if (!v108)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B2A58);
  }
  *((_DWORD *)v112 + 52) &= ~v115;
  v45 = v113 & 0x1F | 0xF8410120;
  if (v43 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v44 = v106;
  }
  *(_DWORD *)&v103[v44] = v45;
  v46 = v106;
  v47 = v106 + 4;
  v106 += 4;
  if (v46 + 8 > v105)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v103, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v47 = v106;
  }
  *(_DWORD *)&v103[v47] = -702610944;
  v106 += 4;
  v89[0] = 0;
  v89[1] = 0;
  v89[2] = -1;
  v90 = (WTF *)v91;
  v92 = 128;
  v48 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v48 != -1)
  {
    v88 = &v86;
    v87 = &v88;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v87, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v49 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v57 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v57)
  {
    v57 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v57, v49);
  }
  v58 = *(WTF **)v57;
  if (*(_QWORD *)v57 != v57 + 8)
  {
    v59 = *(_DWORD *)(v57 + 136);
    if (v92 < v59)
    {
      if (v90 && v90 != (WTF *)v91)
      {
        WTF::fastFree((unint64_t)v90, v50, v51, v52, v53, v54, v55, v56);
        v58 = *(WTF **)v57;
        v59 = *(_DWORD *)(v57 + 136);
      }
      v90 = v58;
      v92 = v59;
      *(_QWORD *)v57 = v57 + 8;
      *(_DWORD *)(v57 + 136) = 128;
    }
  }
  v60 = 1;
  v93 = 1;
  v94 = 0;
  v95 = 6;
  v96 = 0u;
  v97 = 0u;
  v98 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v89, (uint64_t)v99, 1, v52, v53, v54, v55, v56);
  BYTE2(v94) = 1;
  if (byte_1ECF4C288)
    goto LABEL_74;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v60 = HIBYTE(word_1ECF4C286) != 0;
LABEL_74:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, v60, "DeleteById handler", 19, "DeleteById handler", a1);
    goto LABEL_66;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v89, "DeleteById handler", 19, a1);
LABEL_66:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v89, v61, v62, v63, v64, v65, v66, v67);
  v75 = v83;
  if (v85 != (_BYTE *)v83 && v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v99, v68, v69, v70, v71, v72, v73, v74);
}

uint64_t JSC::instanceOfHitHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int *v45;
  int *v46;
  int v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  pthread_key_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  unsigned int v74;
  char v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  char v97;
  __int16 v98;
  char v99;
  WTF *v100;
  uint64_t v101;
  _BYTE v102[31];
  char v103;
  char **v104;
  char *v105;
  _QWORD v106[3];
  WTF *v107;
  _BYTE v108[128];
  unsigned int v109;
  char v110;
  int v111;
  int v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _BYTE v116[32];
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  unsigned int v123;
  int v124;
  char v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE *v129;
  char v130;
  uint64_t v131;
  int v132;
  _BYTE *v133;
  char v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v116[0] = 0;
  v116[24] = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0x8000000080000000;
  v120 = (WTF *)v121;
  v122 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v106[0] = &v105;
    v100 = (WTF *)v106;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v100, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(WTF **)v13;
  v15 = v122;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v122 < v16)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(WTF **)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v120 = v14;
      v122 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v122;
    }
  }
  v17 = 0;
  v125 = 1;
  v123 = 0;
  v124 = 0;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v130 = 16;
  v132 = 0x10000;
  v129 = v116;
  v131 = 0;
  v133 = v116;
  v134 = 17;
  v135 = 0;
  v136 = 0x20000;
  v137 = 0;
  v139 = 0;
  v138 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v123;
  }
  *(_DWORD *)((char *)v120 + v17) = -1447068675;
  v18 = v123 + 4;
  v123 += 4;
  v100 = (WTF *)v102;
  v101 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v116, "check structure");
    v18 = v123;
  }
  if (v18 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v123;
  }
  *(_DWORD *)((char *)v120 + v18) = -1203765245;
  v19 = v123;
  v20 = v123 + 4;
  v123 += 4;
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B32B0);
  }
  *((_DWORD *)v133 + 52) &= ~v136;
  v21 = v134 & 0x1F | 0xB8418120;
  if (v19 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v123;
  }
  *(_DWORD *)((char *)v120 + v20) = v21;
  v22 = v123;
  v23 = v123 + 4;
  v123 += 4;
  if (v22 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v123;
  }
  *(_DWORD *)((char *)v120 + v23) = 1796276351;
  v24 = v123 + 4;
  v123 += 4;
  if (v137)
  {
    v92 = HIDWORD(v119);
    while ((int)v24 < v92)
    {
      if (v24 + 4 > v122)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v123;
      }
      *(_DWORD *)((char *)v120 + v24) = -721215457;
      v92 = HIDWORD(v119);
      v24 = v123 + 4;
      v123 += 4;
    }
    v124 = 0;
  }
  if (v24 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v123;
  }
  *(_DWORD *)((char *)v120 + v24) = 1409286145;
  v25 = v123;
  v123 += 4;
  v26 = v123;
  v27 = v25 + 8;
  v28 = v123;
  if (v27 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v123;
  }
  *(_DWORD *)((char *)v120 + v28) = -721215457;
  v123 += 4;
  if (v137)
    v29 = -122;
  else
    v29 = -126;
  v95 = v26;
  v96 = 0;
  v97 = v29;
  v98 = 1;
  v99 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v101) == (_DWORD)v101)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(HIDWORD(v101) + 1), (unint64_t)&v95, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v100 + 12 * HIDWORD(v101);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v96;
      v33 = (char *)v100 + 12 * HIDWORD(v101);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v101);
  }
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B3310);
  }
  *((_DWORD *)v133 + 52) &= ~v136;
  v34 = (v134 & 0x1F | 0xF8410120) + 98304;
  v35 = v123;
  if (v123 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v35 = v123;
  }
  *(_DWORD *)((char *)v120 + v35) = v34;
  v123 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v116, 1, 1, 17, v9, v10, v11, v12, (uint64_t)&v93);
  v43 = v93;
  if (v93 != -1)
  {
    v44 = HIDWORD(v101);
    if (HIDWORD(v101) == (_DWORD)v101)
    {
      v45 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(HIDWORD(v101) + 1), (unint64_t)&v93, v38, v39, v40, v41, v42);
      v47 = *v45;
      v46 = v45 + 1;
      v43 = v47;
      v44 = HIDWORD(v101);
    }
    else
    {
      v46 = &v94;
    }
    v48 = (char *)v100 + 12 * v44;
    *(_DWORD *)v48 = v43;
    *(_QWORD *)(v48 + 4) = *(_QWORD *)v46;
    ++HIDWORD(v101);
  }
  v49 = v123;
  if (v123 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v49 = v123;
  }
  *(_DWORD *)((char *)v120 + v49) = 838863840;
  v50 = v123;
  v51 = v123 + 4;
  v123 += 4;
  if (v50 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v51 = v123;
  }
  *(_DWORD *)((char *)v120 + v51) = -1463714819;
  v52 = v123;
  v53 = v123 + 4;
  v123 += 4;
  if (v52 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v53 = v123;
  }
  *(_DWORD *)((char *)v120 + v53) = -698416192;
  v54 = v123 + 4;
  v123 += 4;
  if (HIDWORD(v101))
  {
    v55 = 0;
    v56 = 0;
    v57 = 12 * HIDWORD(v101);
    do
    {
      if (v56 >= HIDWORD(v101))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B33D8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v100 + v55), (uint64_t)v116, v37, v38, v39, v40, v41, v42);
      ++v56;
      v55 += 12;
    }
    while (v57 != v55);
    v54 = v123;
  }
  if (v54 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v54 = v123;
  }
  *(_DWORD *)((char *)v120 + v54) = -129662679;
  v58 = v123;
  v59 = v123 + 4;
  v123 += 4;
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B3380);
  }
  *((_DWORD *)v129 + 52) &= ~v132;
  v60 = v130 & 0x1F | 0xF8410120;
  if (v58 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v59 = v123;
  }
  *(_DWORD *)((char *)v120 + v59) = v60;
  v61 = v123;
  v62 = v123 + 4;
  v123 += 4;
  if (v61 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v62 = v123;
  }
  *(_DWORD *)((char *)v120 + v62) = -702610944;
  v123 += 4;
  v106[0] = 0;
  v106[1] = 0;
  v106[2] = -1;
  v107 = (WTF *)v108;
  v109 = 128;
  v63 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v63 != -1)
  {
    v105 = &v103;
    v104 = &v105;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v104, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v64 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v72 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v72)
  {
    v72 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v72, v64);
  }
  v73 = *(WTF **)v72;
  if (*(_QWORD *)v72 != v72 + 8)
  {
    v74 = *(_DWORD *)(v72 + 136);
    if (v109 < v74)
    {
      if (v107 && v107 != (WTF *)v108)
      {
        WTF::fastFree((unint64_t)v107, v65, v66, v67, v68, v69, v70, v71);
        v73 = *(WTF **)v72;
        v74 = *(_DWORD *)(v72 + 136);
      }
      v107 = v73;
      v109 = v74;
      *(_QWORD *)v72 = v72 + 8;
      *(_DWORD *)(v72 + 136) = 128;
    }
  }
  v75 = 1;
  v110 = 1;
  v111 = 0;
  v112 = 6;
  v113 = 0u;
  v114 = 0u;
  v115 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v106, (uint64_t)v116, 1, v67, v68, v69, v70, v71);
  BYTE2(v111) = 1;
  if (byte_1ECF4C288)
    goto LABEL_82;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v75 = HIBYTE(word_1ECF4C286) != 0;
LABEL_82:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v106, v75, "InstanceOf handler", 19, "InstanceOf handler", a1);
    goto LABEL_74;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v106, "InstanceOf handler", 19, a1);
LABEL_74:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v106, v76, v77, v78, v79, v80, v81, v82);
  v90 = v100;
  if (v102 != (_BYTE *)v100 && v100)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    WTF::fastFree((unint64_t)v90, v83, v84, v85, v86, v87, v88, v89);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v116, v83, v84, v85, v86, v87, v88, v89);
}

uint64_t JSC::instanceOfMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int *v45;
  int *v46;
  int v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  pthread_key_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  unsigned int v74;
  char v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  char v97;
  __int16 v98;
  char v99;
  WTF *v100;
  uint64_t v101;
  _BYTE v102[31];
  char v103;
  char **v104;
  char *v105;
  _QWORD v106[3];
  WTF *v107;
  _BYTE v108[128];
  unsigned int v109;
  char v110;
  int v111;
  int v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _BYTE v116[32];
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  unsigned int v123;
  int v124;
  char v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE *v129;
  char v130;
  uint64_t v131;
  int v132;
  _BYTE *v133;
  char v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v116[0] = 0;
  v116[24] = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0x8000000080000000;
  v120 = (WTF *)v121;
  v122 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v106[0] = &v105;
    v100 = (WTF *)v106;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v100, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(WTF **)v13;
  v15 = v122;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v122 < v16)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(WTF **)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v120 = v14;
      v122 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v122;
    }
  }
  v17 = 0;
  v125 = 1;
  v123 = 0;
  v124 = 0;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v130 = 16;
  v132 = 0x10000;
  v129 = v116;
  v131 = 0;
  v133 = v116;
  v134 = 17;
  v135 = 0;
  v136 = 0x20000;
  v137 = 0;
  v139 = 0;
  v138 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v123;
  }
  *(_DWORD *)((char *)v120 + v17) = -1447068675;
  v18 = v123 + 4;
  v123 += 4;
  v100 = (WTF *)v102;
  v101 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v116, "check structure");
    v18 = v123;
  }
  if (v18 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v123;
  }
  *(_DWORD *)((char *)v120 + v18) = -1203765245;
  v19 = v123;
  v20 = v123 + 4;
  v123 += 4;
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B3BD8);
  }
  *((_DWORD *)v133 + 52) &= ~v136;
  v21 = v134 & 0x1F | 0xB8418120;
  if (v19 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v123;
  }
  *(_DWORD *)((char *)v120 + v20) = v21;
  v22 = v123;
  v23 = v123 + 4;
  v123 += 4;
  if (v22 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v123;
  }
  *(_DWORD *)((char *)v120 + v23) = 1796276351;
  v24 = v123 + 4;
  v123 += 4;
  if (v137)
  {
    v92 = HIDWORD(v119);
    while ((int)v24 < v92)
    {
      if (v24 + 4 > v122)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v123;
      }
      *(_DWORD *)((char *)v120 + v24) = -721215457;
      v92 = HIDWORD(v119);
      v24 = v123 + 4;
      v123 += 4;
    }
    v124 = 0;
  }
  if (v24 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v123;
  }
  *(_DWORD *)((char *)v120 + v24) = 1409286145;
  v25 = v123;
  v123 += 4;
  v26 = v123;
  v27 = v25 + 8;
  v28 = v123;
  if (v27 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v123;
  }
  *(_DWORD *)((char *)v120 + v28) = -721215457;
  v123 += 4;
  if (v137)
    v29 = -122;
  else
    v29 = -126;
  v95 = v26;
  v96 = 0;
  v97 = v29;
  v98 = 1;
  v99 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v101) == (_DWORD)v101)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(HIDWORD(v101) + 1), (unint64_t)&v95, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v100 + 12 * HIDWORD(v101);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v96;
      v33 = (char *)v100 + 12 * HIDWORD(v101);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v101);
  }
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B3C38);
  }
  *((_DWORD *)v133 + 52) &= ~v136;
  v34 = (v134 & 0x1F | 0xF8410120) + 98304;
  v35 = v123;
  if (v123 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v35 = v123;
  }
  *(_DWORD *)((char *)v120 + v35) = v34;
  v123 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v116, 1, 1, 17, v9, v10, v11, v12, (uint64_t)&v93);
  v43 = v93;
  if (v93 != -1)
  {
    v44 = HIDWORD(v101);
    if (HIDWORD(v101) == (_DWORD)v101)
    {
      v45 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(HIDWORD(v101) + 1), (unint64_t)&v93, v38, v39, v40, v41, v42);
      v47 = *v45;
      v46 = v45 + 1;
      v43 = v47;
      v44 = HIDWORD(v101);
    }
    else
    {
      v46 = &v94;
    }
    v48 = (char *)v100 + 12 * v44;
    *(_DWORD *)v48 = v43;
    *(_QWORD *)(v48 + 4) = *(_QWORD *)v46;
    ++HIDWORD(v101);
  }
  v49 = v123;
  if (v123 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v49 = v123;
  }
  *(_DWORD *)((char *)v120 + v49) = 840894432;
  v50 = v123;
  v51 = v123 + 4;
  v123 += 4;
  if (v50 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v51 = v123;
  }
  *(_DWORD *)((char *)v120 + v51) = -1463714819;
  v52 = v123;
  v53 = v123 + 4;
  v123 += 4;
  if (v52 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v53 = v123;
  }
  *(_DWORD *)((char *)v120 + v53) = -698416192;
  v54 = v123 + 4;
  v123 += 4;
  if (HIDWORD(v101))
  {
    v55 = 0;
    v56 = 0;
    v57 = 12 * HIDWORD(v101);
    do
    {
      if (v56 >= HIDWORD(v101))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B3D00);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v100 + v55), (uint64_t)v116, v37, v38, v39, v40, v41, v42);
      ++v56;
      v55 += 12;
    }
    while (v57 != v55);
    v54 = v123;
  }
  if (v54 + 4 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v54 = v123;
  }
  *(_DWORD *)((char *)v120 + v54) = -129662679;
  v58 = v123;
  v59 = v123 + 4;
  v123 += 4;
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B3CA8);
  }
  *((_DWORD *)v129 + 52) &= ~v132;
  v60 = v130 & 0x1F | 0xF8410120;
  if (v58 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v59 = v123;
  }
  *(_DWORD *)((char *)v120 + v59) = v60;
  v61 = v123;
  v62 = v123 + 4;
  v123 += 4;
  if (v61 + 8 > v122)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v120, v36, v37, v38, v39, v40, v41, v42);
    v62 = v123;
  }
  *(_DWORD *)((char *)v120 + v62) = -702610944;
  v123 += 4;
  v106[0] = 0;
  v106[1] = 0;
  v106[2] = -1;
  v107 = (WTF *)v108;
  v109 = 128;
  v63 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v63 != -1)
  {
    v105 = &v103;
    v104 = &v105;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v104, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v64 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v72 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v72)
  {
    v72 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v72, v64);
  }
  v73 = *(WTF **)v72;
  if (*(_QWORD *)v72 != v72 + 8)
  {
    v74 = *(_DWORD *)(v72 + 136);
    if (v109 < v74)
    {
      if (v107 && v107 != (WTF *)v108)
      {
        WTF::fastFree((unint64_t)v107, v65, v66, v67, v68, v69, v70, v71);
        v73 = *(WTF **)v72;
        v74 = *(_DWORD *)(v72 + 136);
      }
      v107 = v73;
      v109 = v74;
      *(_QWORD *)v72 = v72 + 8;
      *(_DWORD *)(v72 + 136) = 128;
    }
  }
  v75 = 1;
  v110 = 1;
  v111 = 0;
  v112 = 6;
  v113 = 0u;
  v114 = 0u;
  v115 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v106, (uint64_t)v116, 1, v67, v68, v69, v70, v71);
  BYTE2(v111) = 1;
  if (byte_1ECF4C288)
    goto LABEL_82;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v75 = HIBYTE(word_1ECF4C286) != 0;
LABEL_82:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v106, v75, "InstanceOf handler", 19, "InstanceOf handler", a1);
    goto LABEL_74;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v106, "InstanceOf handler", 19, a1);
LABEL_74:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v106, v76, v77, v78, v79, v80, v81, v82);
  v90 = v100;
  if (v102 != (_BYTE *)v100 && v100)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    WTF::fastFree((unint64_t)v90, v83, v84, v85, v86, v87, v88, v89);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v116, v83, v84, v85, v86, v87, v88, v89);
}

uint64_t JSC::getByValWithStringLoadOwnPropertyHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  pthread_key_t *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unsigned int v86;
  char v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  unsigned int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  WTF *v109;
  uint64_t v110;
  _BYTE v111[31];
  char v112;
  char **v113;
  char *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  _BYTE v119[128];
  unsigned int v120;
  char v121;
  int v122;
  int v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _BYTE v127[32];
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _BYTE v132[128];
  unsigned int v133;
  unsigned int v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE *v140;
  char v141;
  uint64_t v142;
  int v143;
  _BYTE *v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v127[0] = 0;
  v127[24] = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x8000000080000000;
  v131 = v132;
  v133 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v115 = (WTF *)&v114;
    v109 = (WTF *)&v115;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v133;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v133 < v16)
    {
      if (v131 && v131 != v132)
      {
        WTF::fastFree((unint64_t)v131, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v131 = (_BYTE *)v14;
      v133 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v133;
    }
  }
  v17 = 0;
  v136 = 1;
  v141 = 16;
  v143 = 0x10000;
  v145 = 17;
  v147 = 0x20000;
  v134 = 0;
  v135 = 0;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = v127;
  v142 = 0;
  v144 = v127;
  v146 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v134;
  }
  *(_DWORD *)&v131[v17] = -1447068675;
  v18 = v134 + 4;
  v134 += 4;
  v109 = (WTF *)v111;
  v110 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v127, "check structure");
    v18 = v134;
  }
  if (v18 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v134;
  }
  *(_DWORD *)&v131[v18] = -1203765244;
  v19 = v134;
  v20 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B45C8);
  }
  *((_DWORD *)v144 + 52) &= ~v147;
  v21 = v145 & 0x1F | 0xB8418120;
  if (v19 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v134;
  }
  *(_DWORD *)&v131[v20] = v21;
  v22 = v134;
  v23 = v134 + 4;
  v134 += 4;
  if (v22 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v134;
  }
  *(_DWORD *)&v131[v23] = 1796276383;
  v24 = v134 + 4;
  v134 += 4;
  if (v148)
  {
    for (; (int)v24 < SHIDWORD(v130); v134 = v24)
    {
      if (v24 + 4 > v133)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v134;
      }
      *(_DWORD *)&v131[v24] = -721215457;
      v24 = v134 + 4;
    }
    v135 = 0;
  }
  if (v24 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v134;
  }
  *(_DWORD *)&v131[v24] = 1409286145;
  v25 = v134;
  v134 += 4;
  v26 = v134;
  v27 = v25 + 8;
  v28 = v134;
  if (v27 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v134;
  }
  *(_DWORD *)&v131[v28] = -721215457;
  v134 += 4;
  if (v148)
    v29 = -122;
  else
    v29 = -126;
  v104 = v26;
  v105 = 0;
  v106 = v29;
  v107 = 1;
  v108 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v110) == (_DWORD)v110)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, (void *)(HIDWORD(v110) + 1), (unint64_t)&v104, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v105;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v110);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v115, (uint64_t)v127, 0, 4, v9, v10, v11, v12);
  v41 = v115;
  v42 = HIDWORD(v116);
  if (HIDWORD(v116))
  {
    v43 = a1;
    v44 = HIDWORD(v110);
    v45 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
    if (v45 > v110)
    {
      v46 = v110 + ((unint64_t)v110 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
      v48 = v109;
      if (v47 < 3)
      {
        v50 = (WTF *)v111;
        v109 = (WTF *)v111;
        LODWORD(v110) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B46A4);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v110) = (v49 & 0xFFFFFFFC) / 0xC;
        v109 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v111 != (_BYTE *)v48 && v48)
      {
        if (v109 == v48)
        {
          v109 = 0;
          LODWORD(v110) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v110))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B469CLL);
    }
    v52 = (char *)v109 + 12 * HIDWORD(v110);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v110) = v45;
    v41 = v115;
  }
  if (&v117 != (uint64_t *)v41 && v41 != 0)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v134;
  }
  *(_DWORD *)&v131[v55] = -1203650267;
  v134 += 4;
  JSC::AssemblyHelpers::loadProperty((uint64_t)v127, 0, 5, 0, v37, v38, v39, v40);
  v63 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v63 = v134;
  }
  *(_DWORD *)&v131[v63] = -1463714819;
  v64 = v134;
  v65 = v134 + 4;
  v134 += 4;
  if (v64 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v65 = v134;
  }
  *(_DWORD *)&v131[v65] = -698416192;
  v66 = v134 + 4;
  v134 += 4;
  if (HIDWORD(v110))
  {
    v67 = 0;
    v68 = 0;
    v69 = 12 * HIDWORD(v110);
    do
    {
      if (v68 >= HIDWORD(v110))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B4694);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v109 + v67), (uint64_t)v127, v57, v58, v59, v60, v61, v62);
      ++v68;
      v67 += 12;
    }
    while (v69 != v67);
    v66 = v134;
  }
  if (v66 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v66 = v134;
  }
  *(_DWORD *)&v131[v66] = -129662679;
  v70 = v134;
  v71 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B4668);
  }
  *((_DWORD *)v140 + 52) &= ~v143;
  v72 = v141 & 0x1F | 0xF8410120;
  if (v70 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v71 = v134;
  }
  *(_DWORD *)&v131[v71] = v72;
  v73 = v134;
  v74 = v134 + 4;
  v134 += 4;
  if (v73 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v74 = v134;
  }
  *(_DWORD *)&v131[v74] = -702610944;
  v134 += 4;
  v115 = 0;
  v116 = 0;
  v117 = -1;
  v118 = (WTF *)v119;
  v120 = 128;
  v75 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v75 != -1)
  {
    v114 = &v112;
    v113 = &v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v113, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v76 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v84 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v84)
  {
    v84 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v84, v76);
  }
  v85 = *(WTF **)v84;
  if (*(_QWORD *)v84 != v84 + 8)
  {
    v86 = *(_DWORD *)(v84 + 136);
    if (v120 < v86)
    {
      if (v118 && v118 != (WTF *)v119)
      {
        WTF::fastFree((unint64_t)v118, v77, v78, v79, v80, v81, v82, v83);
        v85 = *(WTF **)v84;
        v86 = *(_DWORD *)(v84 + 136);
      }
      v118 = v85;
      v120 = v86;
      *(_QWORD *)v84 = v84 + 8;
      *(_DWORD *)(v84 + 136) = 128;
    }
  }
  v87 = 1;
  v121 = 1;
  v122 = 0;
  v123 = 6;
  v124 = 0u;
  v125 = 0u;
  v126 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v115, (uint64_t)v127, 1, v79, v80, v81, v82, v83);
  BYTE2(v122) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v87 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, v87, "GetByVal Load handler", 22, "GetByVal Load handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, "GetByVal Load handler", 22, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v115, v88, v89, v90, v91, v92, v93, v94);
  v102 = v109;
  if (v111 != (_BYTE *)v109 && v109)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v102, v95, v96, v97, v98, v99, v100, v101);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v127, v95, v96, v97, v98, v99, v100, v101);
}

uint64_t JSC::getByValWithStringLoadPrototypePropertyHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  pthread_key_t *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  unsigned int v88;
  char v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v135;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v135 < v16)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v133 = (_BYTE *)v14;
      v135 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v135;
    }
  }
  v17 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v136;
  }
  *(_DWORD *)&v133[v17] = -1447068675;
  v18 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v18 = v136;
  }
  if (v18 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1203765244;
  v19 = v136;
  v20 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B4FE0);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v21 = v147 & 0x1F | 0xB8418120;
  if (v19 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v136;
  }
  *(_DWORD *)&v133[v20] = v21;
  v22 = v136;
  v23 = v136 + 4;
  v136 += 4;
  if (v22 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v136;
  }
  *(_DWORD *)&v133[v23] = 1796276383;
  v24 = v136 + 4;
  v136 += 4;
  if (v150)
  {
    for (; (int)v24 < SHIDWORD(v132); v136 = v24)
    {
      if (v24 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v136;
      }
      *(_DWORD *)&v133[v24] = -721215457;
      v24 = v136 + 4;
    }
    v137 = 0;
  }
  if (v24 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1409286145;
  v25 = v136;
  v136 += 4;
  v26 = v136;
  v27 = v25 + 8;
  v28 = v136;
  if (v27 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v136;
  }
  *(_DWORD *)&v133[v28] = -721215457;
  v136 += 4;
  if (v150)
    v29 = -122;
  else
    v29 = -126;
  v106 = v26;
  v107 = 0;
  v108 = v29;
  v109 = 1;
  v110 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v107;
      v33 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 0, 4, v9, v10, v11, v12);
  v41 = v117;
  v42 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v43 = a1;
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v50 = (WTF *)v113;
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B50CCLL);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v49 & 0xFFFFFFFC) / 0xC;
        v111 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B50C4);
    }
    v52 = (char *)v111 + 12 * HIDWORD(v112);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v112) = v45;
    v41 = v117;
  }
  if (&v119 != (uint64_t *)v41 && v41 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v136;
  }
  *(_DWORD *)&v133[v55] = -1203650267;
  v56 = v136;
  v57 = v136 + 4;
  v136 += 4;
  if (v56 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v136;
  }
  *(_DWORD *)&v133[v57] = -129859292;
  v136 += 4;
  JSC::AssemblyHelpers::loadProperty((uint64_t)v129, 4, 5, 0, v37, v38, v39, v40);
  v65 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v65 = v136;
  }
  *(_DWORD *)&v133[v65] = -1463714819;
  v66 = v136;
  v67 = v136 + 4;
  v136 += 4;
  if (v66 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -698416192;
  v68 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v69 = 0;
    v70 = 0;
    v71 = 12 * HIDWORD(v112);
    do
    {
      if (v70 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B50BCLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v69), (uint64_t)v129, v59, v60, v61, v62, v63, v64);
      ++v70;
      v69 += 12;
    }
    while (v71 != v69);
    v68 = v136;
  }
  if (v68 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v68 = v136;
  }
  *(_DWORD *)&v133[v68] = -129662679;
  v72 = v136;
  v73 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B5090);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v74 = v143 & 0x1F | 0xF8410120;
  if (v72 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v73 = v136;
  }
  *(_DWORD *)&v133[v73] = v74;
  v75 = v136;
  v76 = v136 + 4;
  v136 += 4;
  if (v75 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v76 = v136;
  }
  *(_DWORD *)&v133[v76] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v77 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v77 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v78 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v86 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v86)
  {
    v86 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v86, v78);
  }
  v87 = *(WTF **)v86;
  if (*(_QWORD *)v86 != v86 + 8)
  {
    v88 = *(_DWORD *)(v86 + 136);
    if (v122 < v88)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v79, v80, v81, v82, v83, v84, v85);
        v87 = *(WTF **)v86;
        v88 = *(_DWORD *)(v86 + 136);
      }
      v120 = v87;
      v122 = v88;
      *(_QWORD *)v86 = v86 + 8;
      *(_DWORD *)(v86 + 136) = 128;
    }
  }
  v89 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v81, v82, v83, v84, v85);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_103;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v89 = HIBYTE(word_1ECF4C286) != 0;
LABEL_103:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v89, "GetByVal Load handler", 22, "GetByVal Load handler", a1);
    goto LABEL_95;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "GetByVal Load handler", 22, a1);
LABEL_95:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v90, v91, v92, v93, v94, v95, v96);
  v104 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v104, v97, v98, v99, v100, v101, v102, v103);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v97, v98, v99, v100, v101, v102, v103);
}

uint64_t JSC::getByValWithSymbolLoadOwnPropertyHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  pthread_key_t *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unsigned int v86;
  char v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  unsigned int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  WTF *v109;
  uint64_t v110;
  _BYTE v111[31];
  char v112;
  char **v113;
  char *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  _BYTE v119[128];
  unsigned int v120;
  char v121;
  int v122;
  int v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _BYTE v127[32];
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _BYTE v132[128];
  unsigned int v133;
  unsigned int v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE *v140;
  char v141;
  uint64_t v142;
  int v143;
  _BYTE *v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v127[0] = 0;
  v127[24] = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x8000000080000000;
  v131 = v132;
  v133 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v115 = (WTF *)&v114;
    v109 = (WTF *)&v115;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v133;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v133 < v16)
    {
      if (v131 && v131 != v132)
      {
        WTF::fastFree((unint64_t)v131, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v131 = (_BYTE *)v14;
      v133 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v133;
    }
  }
  v17 = 0;
  v136 = 1;
  v141 = 16;
  v143 = 0x10000;
  v145 = 17;
  v147 = 0x20000;
  v134 = 0;
  v135 = 0;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = v127;
  v142 = 0;
  v144 = v127;
  v146 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v134;
  }
  *(_DWORD *)&v131[v17] = -1447068675;
  v18 = v134 + 4;
  v134 += 4;
  v109 = (WTF *)v111;
  v110 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v127, "check structure");
    v18 = v134;
  }
  if (v18 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v134;
  }
  *(_DWORD *)&v131[v18] = -1203765244;
  v19 = v134;
  v20 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B59DCLL);
  }
  *((_DWORD *)v144 + 52) &= ~v147;
  v21 = v145 & 0x1F | 0xB8418120;
  if (v19 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v134;
  }
  *(_DWORD *)&v131[v20] = v21;
  v22 = v134;
  v23 = v134 + 4;
  v134 += 4;
  if (v22 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v134;
  }
  *(_DWORD *)&v131[v23] = 1796276383;
  v24 = v134 + 4;
  v134 += 4;
  if (v148)
  {
    for (; (int)v24 < SHIDWORD(v130); v134 = v24)
    {
      if (v24 + 4 > v133)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v134;
      }
      *(_DWORD *)&v131[v24] = -721215457;
      v24 = v134 + 4;
    }
    v135 = 0;
  }
  if (v24 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v134;
  }
  *(_DWORD *)&v131[v24] = 1409286145;
  v25 = v134;
  v134 += 4;
  v26 = v134;
  v27 = v25 + 8;
  v28 = v134;
  if (v27 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v134;
  }
  *(_DWORD *)&v131[v28] = -721215457;
  v134 += 4;
  if (v148)
    v29 = -122;
  else
    v29 = -126;
  v104 = v26;
  v105 = 0;
  v106 = v29;
  v107 = 1;
  v108 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v110) == (_DWORD)v110)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, (void *)(HIDWORD(v110) + 1), (unint64_t)&v104, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v105;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v110);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v115, (uint64_t)v127, 1, 4, v9, v10, v11, v12);
  v41 = v115;
  v42 = HIDWORD(v116);
  if (HIDWORD(v116))
  {
    v43 = a1;
    v44 = HIDWORD(v110);
    v45 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
    if (v45 > v110)
    {
      v46 = v110 + ((unint64_t)v110 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
      v48 = v109;
      if (v47 < 3)
      {
        v50 = (WTF *)v111;
        v109 = (WTF *)v111;
        LODWORD(v110) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B5AB8);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v110) = (v49 & 0xFFFFFFFC) / 0xC;
        v109 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v111 != (_BYTE *)v48 && v48)
      {
        if (v109 == v48)
        {
          v109 = 0;
          LODWORD(v110) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v110))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B5AB0);
    }
    v52 = (char *)v109 + 12 * HIDWORD(v110);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v110) = v45;
    v41 = v115;
  }
  if (&v117 != (uint64_t *)v41 && v41 != 0)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v134;
  }
  *(_DWORD *)&v131[v55] = -1203650267;
  v134 += 4;
  JSC::AssemblyHelpers::loadProperty((uint64_t)v127, 0, 5, 0, v37, v38, v39, v40);
  v63 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v63 = v134;
  }
  *(_DWORD *)&v131[v63] = -1463714819;
  v64 = v134;
  v65 = v134 + 4;
  v134 += 4;
  if (v64 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v65 = v134;
  }
  *(_DWORD *)&v131[v65] = -698416192;
  v66 = v134 + 4;
  v134 += 4;
  if (HIDWORD(v110))
  {
    v67 = 0;
    v68 = 0;
    v69 = 12 * HIDWORD(v110);
    do
    {
      if (v68 >= HIDWORD(v110))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B5AA8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v109 + v67), (uint64_t)v127, v57, v58, v59, v60, v61, v62);
      ++v68;
      v67 += 12;
    }
    while (v69 != v67);
    v66 = v134;
  }
  if (v66 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v66 = v134;
  }
  *(_DWORD *)&v131[v66] = -129662679;
  v70 = v134;
  v71 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B5A7CLL);
  }
  *((_DWORD *)v140 + 52) &= ~v143;
  v72 = v141 & 0x1F | 0xF8410120;
  if (v70 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v71 = v134;
  }
  *(_DWORD *)&v131[v71] = v72;
  v73 = v134;
  v74 = v134 + 4;
  v134 += 4;
  if (v73 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v74 = v134;
  }
  *(_DWORD *)&v131[v74] = -702610944;
  v134 += 4;
  v115 = 0;
  v116 = 0;
  v117 = -1;
  v118 = (WTF *)v119;
  v120 = 128;
  v75 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v75 != -1)
  {
    v114 = &v112;
    v113 = &v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v113, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v76 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v84 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v84)
  {
    v84 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v84, v76);
  }
  v85 = *(WTF **)v84;
  if (*(_QWORD *)v84 != v84 + 8)
  {
    v86 = *(_DWORD *)(v84 + 136);
    if (v120 < v86)
    {
      if (v118 && v118 != (WTF *)v119)
      {
        WTF::fastFree((unint64_t)v118, v77, v78, v79, v80, v81, v82, v83);
        v85 = *(WTF **)v84;
        v86 = *(_DWORD *)(v84 + 136);
      }
      v118 = v85;
      v120 = v86;
      *(_QWORD *)v84 = v84 + 8;
      *(_DWORD *)(v84 + 136) = 128;
    }
  }
  v87 = 1;
  v121 = 1;
  v122 = 0;
  v123 = 6;
  v124 = 0u;
  v125 = 0u;
  v126 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v115, (uint64_t)v127, 1, v79, v80, v81, v82, v83);
  BYTE2(v122) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v87 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, v87, "GetByVal Load handler", 22, "GetByVal Load handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, "GetByVal Load handler", 22, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v115, v88, v89, v90, v91, v92, v93, v94);
  v102 = v109;
  if (v111 != (_BYTE *)v109 && v109)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v102, v95, v96, v97, v98, v99, v100, v101);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v127, v95, v96, v97, v98, v99, v100, v101);
}

uint64_t JSC::getByValWithSymbolLoadPrototypePropertyHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  pthread_key_t *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  unsigned int v88;
  char v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v135;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v135 < v16)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v133 = (_BYTE *)v14;
      v135 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v135;
    }
  }
  v17 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v136;
  }
  *(_DWORD *)&v133[v17] = -1447068675;
  v18 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v18 = v136;
  }
  if (v18 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1203765244;
  v19 = v136;
  v20 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B63F4);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v21 = v147 & 0x1F | 0xB8418120;
  if (v19 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v136;
  }
  *(_DWORD *)&v133[v20] = v21;
  v22 = v136;
  v23 = v136 + 4;
  v136 += 4;
  if (v22 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v136;
  }
  *(_DWORD *)&v133[v23] = 1796276383;
  v24 = v136 + 4;
  v136 += 4;
  if (v150)
  {
    for (; (int)v24 < SHIDWORD(v132); v136 = v24)
    {
      if (v24 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v136;
      }
      *(_DWORD *)&v133[v24] = -721215457;
      v24 = v136 + 4;
    }
    v137 = 0;
  }
  if (v24 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1409286145;
  v25 = v136;
  v136 += 4;
  v26 = v136;
  v27 = v25 + 8;
  v28 = v136;
  if (v27 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v136;
  }
  *(_DWORD *)&v133[v28] = -721215457;
  v136 += 4;
  if (v150)
    v29 = -122;
  else
    v29 = -126;
  v106 = v26;
  v107 = 0;
  v108 = v29;
  v109 = 1;
  v110 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v107;
      v33 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 1, 4, v9, v10, v11, v12);
  v41 = v117;
  v42 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v43 = a1;
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v50 = (WTF *)v113;
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B64E0);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v49 & 0xFFFFFFFC) / 0xC;
        v111 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B64D8);
    }
    v52 = (char *)v111 + 12 * HIDWORD(v112);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v112) = v45;
    v41 = v117;
  }
  if (&v119 != (uint64_t *)v41 && v41 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v136;
  }
  *(_DWORD *)&v133[v55] = -1203650267;
  v56 = v136;
  v57 = v136 + 4;
  v136 += 4;
  if (v56 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v136;
  }
  *(_DWORD *)&v133[v57] = -129859292;
  v136 += 4;
  JSC::AssemblyHelpers::loadProperty((uint64_t)v129, 4, 5, 0, v37, v38, v39, v40);
  v65 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v65 = v136;
  }
  *(_DWORD *)&v133[v65] = -1463714819;
  v66 = v136;
  v67 = v136 + 4;
  v136 += 4;
  if (v66 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -698416192;
  v68 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v69 = 0;
    v70 = 0;
    v71 = 12 * HIDWORD(v112);
    do
    {
      if (v70 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B64D0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v69), (uint64_t)v129, v59, v60, v61, v62, v63, v64);
      ++v70;
      v69 += 12;
    }
    while (v71 != v69);
    v68 = v136;
  }
  if (v68 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v68 = v136;
  }
  *(_DWORD *)&v133[v68] = -129662679;
  v72 = v136;
  v73 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B64A4);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v74 = v143 & 0x1F | 0xF8410120;
  if (v72 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v73 = v136;
  }
  *(_DWORD *)&v133[v73] = v74;
  v75 = v136;
  v76 = v136 + 4;
  v136 += 4;
  if (v75 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v58, v59, v60, v61, v62, v63, v64);
    v76 = v136;
  }
  *(_DWORD *)&v133[v76] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v77 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v77 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v78 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v86 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v86)
  {
    v86 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v86, v78);
  }
  v87 = *(WTF **)v86;
  if (*(_QWORD *)v86 != v86 + 8)
  {
    v88 = *(_DWORD *)(v86 + 136);
    if (v122 < v88)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v79, v80, v81, v82, v83, v84, v85);
        v87 = *(WTF **)v86;
        v88 = *(_DWORD *)(v86 + 136);
      }
      v120 = v87;
      v122 = v88;
      *(_QWORD *)v86 = v86 + 8;
      *(_DWORD *)(v86 + 136) = 128;
    }
  }
  v89 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v81, v82, v83, v84, v85);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_103;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v89 = HIBYTE(word_1ECF4C286) != 0;
LABEL_103:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v89, "GetByVal Load handler", 22, "GetByVal Load handler", a1);
    goto LABEL_95;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "GetByVal Load handler", 22, a1);
LABEL_95:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v90, v91, v92, v93, v94, v95, v96);
  v104 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v104, v97, v98, v99, v100, v101, v102, v103);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v97, v98, v99, v100, v101, v102, v103);
}

uint64_t JSC::getByValWithStringMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _DWORD v126[6];
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _BYTE v132[128];
  unsigned int v133;
  unsigned int v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _DWORD *v140;
  char v141;
  uint64_t v142;
  int v143;
  _DWORD *v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  LOBYTE(v126[0]) = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x8000000080000000;
  v131 = v132;
  v133 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v133;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v133 < v16)
    {
      if (v131 && v131 != v132)
      {
        WTF::fastFree((unint64_t)v131, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v131 = (_BYTE *)v14;
      v133 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v133;
    }
  }
  v17 = 0;
  v136 = 1;
  v141 = 16;
  v143 = 0x10000;
  v145 = 17;
  v147 = 0x20000;
  v134 = 0;
  v135 = 0;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = v126;
  v142 = 0;
  v144 = v126;
  v146 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v134;
  }
  *(_DWORD *)&v131[v17] = -1447068675;
  v18 = v134 + 4;
  v134 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v134;
  }
  if (v18 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v134;
  }
  *(_DWORD *)&v131[v18] = -1203765244;
  v19 = v134;
  v20 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B6DBCLL);
  }
  v144[52] &= ~v147;
  v21 = v145 & 0x1F | 0xB8418120;
  if (v19 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v134;
  }
  *(_DWORD *)&v131[v20] = v21;
  v22 = v134;
  v23 = v134 + 4;
  v134 += 4;
  if (v22 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v134;
  }
  *(_DWORD *)&v131[v23] = 1796276383;
  v24 = v134 + 4;
  v134 += 4;
  if (v148)
  {
    for (; (int)v24 < SHIDWORD(v130); v134 = v24)
    {
      if (v24 + 4 > v133)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v134;
      }
      *(_DWORD *)&v131[v24] = -721215457;
      v24 = v134 + 4;
    }
    v135 = 0;
  }
  if (v24 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v134;
  }
  *(_DWORD *)&v131[v24] = 1409286145;
  v25 = v134;
  v134 += 4;
  v26 = v134;
  v27 = v25 + 8;
  v28 = v134;
  if (v27 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v134;
  }
  *(_DWORD *)&v131[v28] = -721215457;
  v134 += 4;
  if (v148)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 0, 4, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B6E88);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B6E80);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v126, 10, 0, v36, v37, v38, v39, v40);
  v62 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v62 = v134;
  }
  *(_DWORD *)&v131[v62] = -1463714819;
  v63 = v134;
  v64 = v134 + 4;
  v134 += 4;
  if (v63 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v64 = v134;
  }
  *(_DWORD *)&v131[v64] = -698416192;
  v65 = v134 + 4;
  v134 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B6E78);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v134;
  }
  if (v65 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v65 = v134;
  }
  *(_DWORD *)&v131[v65] = -129662679;
  v69 = v134;
  v70 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B6E4CLL);
  }
  v140[52] &= ~v143;
  v71 = v141 & 0x1F | 0xF8410120;
  if (v69 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v70 = v134;
  }
  *(_DWORD *)&v131[v70] = v71;
  v72 = v134;
  v73 = v134 + 4;
  v134 += 4;
  if (v72 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v73 = v134;
  }
  *(_DWORD *)&v131[v73] = -702610944;
  v134 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "GetByVal Miss handler", 22, "GetByVal Miss handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "GetByVal Miss handler", 22, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::getByValWithSymbolMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _DWORD v126[6];
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _BYTE v132[128];
  unsigned int v133;
  unsigned int v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _DWORD *v140;
  char v141;
  uint64_t v142;
  int v143;
  _DWORD *v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  LOBYTE(v126[0]) = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x8000000080000000;
  v131 = v132;
  v133 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v133;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v133 < v16)
    {
      if (v131 && v131 != v132)
      {
        WTF::fastFree((unint64_t)v131, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v131 = (_BYTE *)v14;
      v133 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v133;
    }
  }
  v17 = 0;
  v136 = 1;
  v141 = 16;
  v143 = 0x10000;
  v145 = 17;
  v147 = 0x20000;
  v134 = 0;
  v135 = 0;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = v126;
  v142 = 0;
  v144 = v126;
  v146 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v134;
  }
  *(_DWORD *)&v131[v17] = -1447068675;
  v18 = v134 + 4;
  v134 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v134;
  }
  if (v18 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v134;
  }
  *(_DWORD *)&v131[v18] = -1203765244;
  v19 = v134;
  v20 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B7764);
  }
  v144[52] &= ~v147;
  v21 = v145 & 0x1F | 0xB8418120;
  if (v19 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v134;
  }
  *(_DWORD *)&v131[v20] = v21;
  v22 = v134;
  v23 = v134 + 4;
  v134 += 4;
  if (v22 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v134;
  }
  *(_DWORD *)&v131[v23] = 1796276383;
  v24 = v134 + 4;
  v134 += 4;
  if (v148)
  {
    for (; (int)v24 < SHIDWORD(v130); v134 = v24)
    {
      if (v24 + 4 > v133)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v134;
      }
      *(_DWORD *)&v131[v24] = -721215457;
      v24 = v134 + 4;
    }
    v135 = 0;
  }
  if (v24 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v134;
  }
  *(_DWORD *)&v131[v24] = 1409286145;
  v25 = v134;
  v134 += 4;
  v26 = v134;
  v27 = v25 + 8;
  v28 = v134;
  if (v27 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v134;
  }
  *(_DWORD *)&v131[v28] = -721215457;
  v134 += 4;
  if (v148)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 1, 4, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B7830);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B7828);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v126, 10, 0, v36, v37, v38, v39, v40);
  v62 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v62 = v134;
  }
  *(_DWORD *)&v131[v62] = -1463714819;
  v63 = v134;
  v64 = v134 + 4;
  v134 += 4;
  if (v63 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v64 = v134;
  }
  *(_DWORD *)&v131[v64] = -698416192;
  v65 = v134 + 4;
  v134 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B7820);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v134;
  }
  if (v65 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v65 = v134;
  }
  *(_DWORD *)&v131[v65] = -129662679;
  v69 = v134;
  v70 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B77F4);
  }
  v140[52] &= ~v143;
  v71 = v141 & 0x1F | 0xF8410120;
  if (v69 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v70 = v134;
  }
  *(_DWORD *)&v131[v70] = v71;
  v72 = v134;
  v73 = v134 + 4;
  v134 += 4;
  if (v72 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v55, v56, v57, v58, v59, v60, v61);
    v73 = v134;
  }
  *(_DWORD *)&v131[v73] = -702610944;
  v134 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "GetByVal Miss handler", 22, "GetByVal Miss handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "GetByVal Miss handler", 22, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::getByValWithStringCustomAccessorHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765244;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B813CLL);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276383;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 0, 4, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B8208);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B8200);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customGetterHandlerImpl<true>(v55, (uint64_t)v129, 2u, 4, 5, 6, v40, v41);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B81F8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B81CCLL);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "GetByVal Custom handler", 24, "GetByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "GetByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::getByValWithStringCustomValueHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765244;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B8B04);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276383;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 0, 4, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B8BD0);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B8BC8);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customGetterHandlerImpl<false>(v55, (uint64_t)v129, 2, 4, 5, 6, v40, v41);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B8BC0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B8B94);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "GetByVal Custom handler", 24, "GetByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "GetByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::getByValWithSymbolCustomAccessorHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765244;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B94CCLL);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276383;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 1, 4, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B9598);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B9590);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customGetterHandlerImpl<true>(v55, (uint64_t)v129, 2u, 4, 5, 6, v40, v41);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B9588);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B955CLL);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "GetByVal Custom handler", 24, "GetByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "GetByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::getByValWithSymbolCustomValueHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765244;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B9E94);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276383;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 1, 4, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981B9F60);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981B9F58);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customGetterHandlerImpl<false>(v55, (uint64_t)v129, 2, 4, 5, 6, v40, v41);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981B9F50);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981B9F24);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "GetByVal Custom handler", 24, "GetByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "GetByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::getByValWithStringGetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[32];
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  _BYTE v131[128];
  unsigned int v132;
  unsigned int v133;
  int v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  int v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v126[0] = 0;
  v126[24] = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0x8000000080000000;
  v130 = v131;
  v132 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v132;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v132 < v16)
    {
      if (v130 && v130 != v131)
      {
        WTF::fastFree((unint64_t)v130, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v130 = (_BYTE *)v14;
      v132 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v132;
    }
  }
  v17 = 0;
  v135 = 1;
  v140 = 16;
  v142 = 0x10000;
  v144 = 17;
  v146 = 0x20000;
  v133 = 0;
  v134 = 0;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = v126;
  v141 = 0;
  v143 = v126;
  v145 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v133;
  }
  *(_DWORD *)&v130[v17] = -1447068675;
  v18 = v133 + 4;
  v133 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v133;
  }
  if (v18 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v133;
  }
  *(_DWORD *)&v130[v18] = -1203765244;
  v19 = v133;
  v20 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BA830);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v21 = v144 & 0x1F | 0xB8418120;
  if (v19 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v133;
  }
  *(_DWORD *)&v130[v20] = v21;
  v22 = v133;
  v23 = v133 + 4;
  v133 += 4;
  if (v22 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v133;
  }
  *(_DWORD *)&v130[v23] = 1796276383;
  v24 = v133 + 4;
  v133 += 4;
  if (v147)
  {
    for (; (int)v24 < SHIDWORD(v129); v133 = v24)
    {
      if (v24 + 4 > v132)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v133;
      }
      *(_DWORD *)&v130[v24] = -721215457;
      v24 = v133 + 4;
    }
    v134 = 0;
  }
  if (v24 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v133;
  }
  *(_DWORD *)&v130[v24] = 1409286145;
  v25 = v133;
  v133 += 4;
  v26 = v133;
  v27 = v25 + 8;
  v28 = v133;
  if (v27 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v133;
  }
  *(_DWORD *)&v130[v28] = -721215457;
  v133 += 4;
  if (v147)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 0, 4, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BA8FCLL);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981BA8F4);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::getterHandlerImpl((uint64_t)v126, 2, 4, 5, v37, v38, v39, v40);
  v62 = v133;
  if (v133 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v62 = v133;
  }
  *(_DWORD *)&v130[v62] = -1463714819;
  v63 = v133;
  v64 = v133 + 4;
  v133 += 4;
  if (v63 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v64 = v133;
  }
  *(_DWORD *)&v130[v64] = -698416192;
  v65 = v133 + 4;
  v133 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981BA8ECLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v133;
  }
  if (v65 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v65 = v133;
  }
  *(_DWORD *)&v130[v65] = -129662679;
  v69 = v133;
  v70 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BA8C0);
  }
  *((_DWORD *)v139 + 52) &= ~v142;
  v71 = v140 & 0x1F | 0xF8410120;
  if (v69 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v70 = v133;
  }
  *(_DWORD *)&v130[v70] = v71;
  v72 = v133;
  v73 = v133 + 4;
  v133 += 4;
  if (v72 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v73 = v133;
  }
  *(_DWORD *)&v130[v73] = -702610944;
  v133 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "GetByVal Getter handler", 24, "GetByVal Getter handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "GetByVal Getter handler", 24, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::getByValWithSymbolGetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[32];
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  _BYTE v131[128];
  unsigned int v132;
  unsigned int v133;
  int v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  int v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v126[0] = 0;
  v126[24] = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0x8000000080000000;
  v130 = v131;
  v132 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v132;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v132 < v16)
    {
      if (v130 && v130 != v131)
      {
        WTF::fastFree((unint64_t)v130, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v130 = (_BYTE *)v14;
      v132 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v132;
    }
  }
  v17 = 0;
  v135 = 1;
  v140 = 16;
  v142 = 0x10000;
  v144 = 17;
  v146 = 0x20000;
  v133 = 0;
  v134 = 0;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = v126;
  v141 = 0;
  v143 = v126;
  v145 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v133;
  }
  *(_DWORD *)&v130[v17] = -1447068675;
  v18 = v133 + 4;
  v133 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v133;
  }
  if (v18 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v133;
  }
  *(_DWORD *)&v130[v18] = -1203765244;
  v19 = v133;
  v20 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BB1DCLL);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v21 = v144 & 0x1F | 0xB8418120;
  if (v19 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v133;
  }
  *(_DWORD *)&v130[v20] = v21;
  v22 = v133;
  v23 = v133 + 4;
  v133 += 4;
  if (v22 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v133;
  }
  *(_DWORD *)&v130[v23] = 1796276383;
  v24 = v133 + 4;
  v133 += 4;
  if (v147)
  {
    for (; (int)v24 < SHIDWORD(v129); v133 = v24)
    {
      if (v24 + 4 > v132)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v133;
      }
      *(_DWORD *)&v130[v24] = -721215457;
      v24 = v133 + 4;
    }
    v134 = 0;
  }
  if (v24 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v133;
  }
  *(_DWORD *)&v130[v24] = 1409286145;
  v25 = v133;
  v133 += 4;
  v26 = v133;
  v27 = v25 + 8;
  v28 = v133;
  if (v27 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v133;
  }
  *(_DWORD *)&v130[v28] = -721215457;
  v133 += 4;
  if (v147)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 1, 4, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BB2A8);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981BB2A0);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::getterHandlerImpl((uint64_t)v126, 2, 4, 5, v37, v38, v39, v40);
  v62 = v133;
  if (v133 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v62 = v133;
  }
  *(_DWORD *)&v130[v62] = -1463714819;
  v63 = v133;
  v64 = v133 + 4;
  v133 += 4;
  if (v63 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v64 = v133;
  }
  *(_DWORD *)&v130[v64] = -698416192;
  v65 = v133 + 4;
  v133 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981BB298);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v133;
  }
  if (v65 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v65 = v133;
  }
  *(_DWORD *)&v130[v65] = -129662679;
  v69 = v133;
  v70 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BB26CLL);
  }
  *((_DWORD *)v139 + 52) &= ~v142;
  v71 = v140 & 0x1F | 0xF8410120;
  if (v69 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v70 = v133;
  }
  *(_DWORD *)&v130[v70] = v71;
  v72 = v133;
  v73 = v133 + 4;
  v133 += 4;
  if (v72 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v73 = v133;
  }
  *(_DWORD *)&v130[v73] = -702610944;
  v133 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "GetByVal Getter handler", 24, "GetByVal Getter handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "GetByVal Getter handler", 24, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::putByValWithStringReplaceHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  pthread_key_t *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unsigned int v86;
  char v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  unsigned int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  WTF *v109;
  uint64_t v110;
  _BYTE v111[31];
  char v112;
  char **v113;
  char *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  _BYTE v119[128];
  unsigned int v120;
  char v121;
  int v122;
  int v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _BYTE v127[32];
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _BYTE v132[128];
  unsigned int v133;
  unsigned int v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE *v140;
  char v141;
  uint64_t v142;
  int v143;
  _BYTE *v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v127[0] = 0;
  v127[24] = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x8000000080000000;
  v131 = v132;
  v133 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v115 = (WTF *)&v114;
    v109 = (WTF *)&v115;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v133;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v133 < v16)
    {
      if (v131 && v131 != v132)
      {
        WTF::fastFree((unint64_t)v131, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v131 = (_BYTE *)v14;
      v133 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v133;
    }
  }
  v17 = 0;
  v136 = 1;
  v141 = 16;
  v143 = 0x10000;
  v145 = 17;
  v147 = 0x20000;
  v134 = 0;
  v135 = 0;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = v127;
  v142 = 0;
  v144 = v127;
  v146 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v134;
  }
  *(_DWORD *)&v131[v17] = -1447068675;
  v18 = v134 + 4;
  v134 += 4;
  v109 = (WTF *)v111;
  v110 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v127, "check structure");
    v18 = v134;
  }
  if (v18 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v134;
  }
  *(_DWORD *)&v131[v18] = -1203765243;
  v19 = v134;
  v20 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BBBBCLL);
  }
  *((_DWORD *)v144 + 52) &= ~v147;
  v21 = v145 & 0x1F | 0xB8418120;
  if (v19 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v134;
  }
  *(_DWORD *)&v131[v20] = v21;
  v22 = v134;
  v23 = v134 + 4;
  v134 += 4;
  if (v22 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v134;
  }
  *(_DWORD *)&v131[v23] = 1796276415;
  v24 = v134 + 4;
  v134 += 4;
  if (v148)
  {
    for (; (int)v24 < SHIDWORD(v130); v134 = v24)
    {
      if (v24 + 4 > v133)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v134;
      }
      *(_DWORD *)&v131[v24] = -721215457;
      v24 = v134 + 4;
    }
    v135 = 0;
  }
  if (v24 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v134;
  }
  *(_DWORD *)&v131[v24] = 1409286145;
  v25 = v134;
  v134 += 4;
  v26 = v134;
  v27 = v25 + 8;
  v28 = v134;
  if (v27 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v134;
  }
  *(_DWORD *)&v131[v28] = -721215457;
  v134 += 4;
  if (v148)
    v29 = -122;
  else
    v29 = -126;
  v104 = v26;
  v105 = 0;
  v106 = v29;
  v107 = 1;
  v108 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v110) == (_DWORD)v110)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, (void *)(HIDWORD(v110) + 1), (unint64_t)&v104, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v105;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v110);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v115, (uint64_t)v127, 0, 5, v9, v10, v11, v12);
  v41 = v115;
  v42 = HIDWORD(v116);
  if (HIDWORD(v116))
  {
    v43 = a1;
    v44 = HIDWORD(v110);
    v45 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
    if (v45 > v110)
    {
      v46 = v110 + ((unint64_t)v110 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
      v48 = v109;
      if (v47 < 3)
      {
        v50 = (WTF *)v111;
        v109 = (WTF *)v111;
        LODWORD(v110) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BBC98);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v110) = (v49 & 0xFFFFFFFC) / 0xC;
        v109 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v111 != (_BYTE *)v48 && v48)
      {
        if (v109 == v48)
        {
          v109 = 0;
          LODWORD(v110) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v110))
    {
      __break(0xC471u);
      JUMPOUT(0x1981BBC90);
    }
    v52 = (char *)v109 + 12 * HIDWORD(v110);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v110) = v45;
    v41 = v115;
  }
  if (&v117 != (uint64_t *)v41 && v41 != 0)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v134;
  }
  *(_DWORD *)&v131[v55] = -1203650267;
  v134 += 4;
  JSC::AssemblyHelpers::storeProperty((uint64_t)v127, 2, 0, 5, 6, v38, v39, v40);
  v63 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v63 = v134;
  }
  *(_DWORD *)&v131[v63] = -1463714819;
  v64 = v134;
  v65 = v134 + 4;
  v134 += 4;
  if (v64 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v65 = v134;
  }
  *(_DWORD *)&v131[v65] = -698416192;
  v66 = v134 + 4;
  v134 += 4;
  if (HIDWORD(v110))
  {
    v67 = 0;
    v68 = 0;
    v69 = 12 * HIDWORD(v110);
    do
    {
      if (v68 >= HIDWORD(v110))
      {
        __break(0xC471u);
        JUMPOUT(0x1981BBC88);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v109 + v67), (uint64_t)v127, v57, v58, v59, v60, v61, v62);
      ++v68;
      v67 += 12;
    }
    while (v69 != v67);
    v66 = v134;
  }
  if (v66 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v66 = v134;
  }
  *(_DWORD *)&v131[v66] = -129662679;
  v70 = v134;
  v71 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BBC5CLL);
  }
  *((_DWORD *)v140 + 52) &= ~v143;
  v72 = v141 & 0x1F | 0xF8410120;
  if (v70 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v71 = v134;
  }
  *(_DWORD *)&v131[v71] = v72;
  v73 = v134;
  v74 = v134 + 4;
  v134 += 4;
  if (v73 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v74 = v134;
  }
  *(_DWORD *)&v131[v74] = -702610944;
  v134 += 4;
  v115 = 0;
  v116 = 0;
  v117 = -1;
  v118 = (WTF *)v119;
  v120 = 128;
  v75 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v75 != -1)
  {
    v114 = &v112;
    v113 = &v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v113, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v76 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v84 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v84)
  {
    v84 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v84, v76);
  }
  v85 = *(WTF **)v84;
  if (*(_QWORD *)v84 != v84 + 8)
  {
    v86 = *(_DWORD *)(v84 + 136);
    if (v120 < v86)
    {
      if (v118 && v118 != (WTF *)v119)
      {
        WTF::fastFree((unint64_t)v118, v77, v78, v79, v80, v81, v82, v83);
        v85 = *(WTF **)v84;
        v86 = *(_DWORD *)(v84 + 136);
      }
      v118 = v85;
      v120 = v86;
      *(_QWORD *)v84 = v84 + 8;
      *(_DWORD *)(v84 + 136) = 128;
    }
  }
  v87 = 1;
  v121 = 1;
  v122 = 0;
  v123 = 6;
  v124 = 0u;
  v125 = 0u;
  v126 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v115, (uint64_t)v127, 1, v79, v80, v81, v82, v83);
  BYTE2(v122) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v87 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, v87, "PutByVal Replace handler", 25, "PutByVal Replace handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, "PutByVal Replace handler", 25, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v115, v88, v89, v90, v91, v92, v93, v94);
  v102 = v109;
  if (v111 != (_BYTE *)v109 && v109)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v102, v95, v96, v97, v98, v99, v100, v101);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v127, v95, v96, v97, v98, v99, v100, v101);
}

uint64_t JSC::putByValWithSymbolReplaceHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  pthread_key_t *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unsigned int v86;
  char v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  unsigned int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  WTF *v109;
  uint64_t v110;
  _BYTE v111[31];
  char v112;
  char **v113;
  char *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  _BYTE v119[128];
  unsigned int v120;
  char v121;
  int v122;
  int v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _BYTE v127[32];
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _BYTE v132[128];
  unsigned int v133;
  unsigned int v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE *v140;
  char v141;
  uint64_t v142;
  int v143;
  _BYTE *v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v127[0] = 0;
  v127[24] = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x8000000080000000;
  v131 = v132;
  v133 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v115 = (WTF *)&v114;
    v109 = (WTF *)&v115;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v133;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v133 < v16)
    {
      if (v131 && v131 != v132)
      {
        WTF::fastFree((unint64_t)v131, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v131 = (_BYTE *)v14;
      v133 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v133;
    }
  }
  v17 = 0;
  v136 = 1;
  v141 = 16;
  v143 = 0x10000;
  v145 = 17;
  v147 = 0x20000;
  v134 = 0;
  v135 = 0;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = v127;
  v142 = 0;
  v144 = v127;
  v146 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v134;
  }
  *(_DWORD *)&v131[v17] = -1447068675;
  v18 = v134 + 4;
  v134 += 4;
  v109 = (WTF *)v111;
  v110 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v127, "check structure");
    v18 = v134;
  }
  if (v18 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v134;
  }
  *(_DWORD *)&v131[v18] = -1203765243;
  v19 = v134;
  v20 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BC5ACLL);
  }
  *((_DWORD *)v144 + 52) &= ~v147;
  v21 = v145 & 0x1F | 0xB8418120;
  if (v19 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v134;
  }
  *(_DWORD *)&v131[v20] = v21;
  v22 = v134;
  v23 = v134 + 4;
  v134 += 4;
  if (v22 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v134;
  }
  *(_DWORD *)&v131[v23] = 1796276415;
  v24 = v134 + 4;
  v134 += 4;
  if (v148)
  {
    for (; (int)v24 < SHIDWORD(v130); v134 = v24)
    {
      if (v24 + 4 > v133)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v134;
      }
      *(_DWORD *)&v131[v24] = -721215457;
      v24 = v134 + 4;
    }
    v135 = 0;
  }
  if (v24 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v134;
  }
  *(_DWORD *)&v131[v24] = 1409286145;
  v25 = v134;
  v134 += 4;
  v26 = v134;
  v27 = v25 + 8;
  v28 = v134;
  if (v27 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v134;
  }
  *(_DWORD *)&v131[v28] = -721215457;
  v134 += 4;
  if (v148)
    v29 = -122;
  else
    v29 = -126;
  v104 = v26;
  v105 = 0;
  v106 = v29;
  v107 = 1;
  v108 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v110) == (_DWORD)v110)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, (void *)(HIDWORD(v110) + 1), (unint64_t)&v104, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v105;
      v33 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v110);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v115, (uint64_t)v127, 1, 5, v9, v10, v11, v12);
  v41 = v115;
  v42 = HIDWORD(v116);
  if (HIDWORD(v116))
  {
    v43 = a1;
    v44 = HIDWORD(v110);
    v45 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
    if (v45 > v110)
    {
      v46 = v110 + ((unint64_t)v110 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v110) + (unint64_t)HIDWORD(v116);
      v48 = v109;
      if (v47 < 3)
      {
        v50 = (WTF *)v111;
        v109 = (WTF *)v111;
        LODWORD(v110) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BC688);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v110) = (v49 & 0xFFFFFFFC) / 0xC;
        v109 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v111 != (_BYTE *)v48 && v48)
      {
        if (v109 == v48)
        {
          v109 = 0;
          LODWORD(v110) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v110))
    {
      __break(0xC471u);
      JUMPOUT(0x1981BC680);
    }
    v52 = (char *)v109 + 12 * HIDWORD(v110);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v110) = v45;
    v41 = v115;
  }
  if (&v117 != (uint64_t *)v41 && v41 != 0)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v134;
  }
  *(_DWORD *)&v131[v55] = -1203650267;
  v134 += 4;
  JSC::AssemblyHelpers::storeProperty((uint64_t)v127, 2, 0, 5, 6, v38, v39, v40);
  v63 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v63 = v134;
  }
  *(_DWORD *)&v131[v63] = -1463714819;
  v64 = v134;
  v65 = v134 + 4;
  v134 += 4;
  if (v64 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v65 = v134;
  }
  *(_DWORD *)&v131[v65] = -698416192;
  v66 = v134 + 4;
  v134 += 4;
  if (HIDWORD(v110))
  {
    v67 = 0;
    v68 = 0;
    v69 = 12 * HIDWORD(v110);
    do
    {
      if (v68 >= HIDWORD(v110))
      {
        __break(0xC471u);
        JUMPOUT(0x1981BC678);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v109 + v67), (uint64_t)v127, v57, v58, v59, v60, v61, v62);
      ++v68;
      v67 += 12;
    }
    while (v69 != v67);
    v66 = v134;
  }
  if (v66 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v66 = v134;
  }
  *(_DWORD *)&v131[v66] = -129662679;
  v70 = v134;
  v71 = v134 + 4;
  v134 += 4;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BC64CLL);
  }
  *((_DWORD *)v140 + 52) &= ~v143;
  v72 = v141 & 0x1F | 0xF8410120;
  if (v70 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v71 = v134;
  }
  *(_DWORD *)&v131[v71] = v72;
  v73 = v134;
  v74 = v134 + 4;
  v134 += 4;
  if (v73 + 8 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v56, v57, v58, v59, v60, v61, v62);
    v74 = v134;
  }
  *(_DWORD *)&v131[v74] = -702610944;
  v134 += 4;
  v115 = 0;
  v116 = 0;
  v117 = -1;
  v118 = (WTF *)v119;
  v120 = 128;
  v75 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v75 != -1)
  {
    v114 = &v112;
    v113 = &v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v113, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v76 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v84 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v84)
  {
    v84 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v84, v76);
  }
  v85 = *(WTF **)v84;
  if (*(_QWORD *)v84 != v84 + 8)
  {
    v86 = *(_DWORD *)(v84 + 136);
    if (v120 < v86)
    {
      if (v118 && v118 != (WTF *)v119)
      {
        WTF::fastFree((unint64_t)v118, v77, v78, v79, v80, v81, v82, v83);
        v85 = *(WTF **)v84;
        v86 = *(_DWORD *)(v84 + 136);
      }
      v118 = v85;
      v120 = v86;
      *(_QWORD *)v84 = v84 + 8;
      *(_DWORD *)(v84 + 136) = 128;
    }
  }
  v87 = 1;
  v121 = 1;
  v122 = 0;
  v123 = 6;
  v124 = 0u;
  v125 = 0u;
  v126 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v115, (uint64_t)v127, 1, v79, v80, v81, v82, v83);
  BYTE2(v122) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v87 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, v87, "PutByVal Replace handler", 25, "PutByVal Replace handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v115, "PutByVal Replace handler", 25, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v115, v88, v89, v90, v91, v92, v93, v94);
  v102 = v109;
  if (v111 != (_BYTE *)v109 && v109)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v102, v95, v96, v97, v98, v99, v100, v101);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v127, v95, v96, v97, v98, v99, v100, v101);
}

uint64_t JSC::putByValWithStringTransitionNonAllocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  char *v52;
  uint64_t *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint8x8_t v77;
  __int32 v78;
  uint8x8_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v89;
  char v90;
  char v91;
  uint64_t v92;
  unsigned __int8 *v93;
  char *v94;
  uint64_t v95;
  _BYTE *v96;
  int v97;
  unsigned __int8 *v98;
  char *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  int v102;
  char *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  pthread_key_t *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  WTF *v152;
  int64_t v154;
  _QWORD *v155;
  WTF *v156;
  _QWORD *v157;
  _QWORD *v158;
  WTF *v159;
  WTF *v160;
  unsigned int v162;
  int v163;
  char v164;
  __int16 v165;
  char v166;
  WTF *v167;
  uint64_t v168;
  _BYTE v169[24];
  WTF *p_dst;
  uint64_t v171;
  _BYTE v172[31];
  char v173;
  char **v174;
  char *v175;
  void *__dst;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  char v182;
  int v183;
  int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _DWORD v188[6];
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  _BYTE v194[128];
  unsigned int v195;
  unsigned int v196;
  int v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _DWORD *v202;
  char v203;
  uint64_t v204;
  int v205;
  _DWORD *v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  LOBYTE(v188[0]) = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0x8000000080000000;
  v193 = v194;
  v195 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v167;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v195;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v195 < v16)
    {
      if (v193 && v193 != v194)
      {
        WTF::fastFree((unint64_t)v193, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v193 = (_BYTE *)v14;
      v195 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v195;
    }
  }
  v17 = 0;
  v198 = 1;
  v203 = 16;
  v205 = 0x10000;
  v207 = 17;
  v209 = 0x20000;
  v196 = 0;
  v197 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = v188;
  v204 = 0;
  v206 = v188;
  v208 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v196;
  }
  *(_DWORD *)&v193[v17] = -1447068675;
  v18 = v196 + 4;
  v196 += 4;
  v19 = (WTF *)v172;
  p_dst = (WTF *)v172;
  v171 = 2;
  v167 = (WTF *)v169;
  v168 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v188, "check structure");
    v18 = v196;
  }
  if (v18 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v196;
  }
  *(_DWORD *)&v193[v18] = -1203765243;
  v20 = v196;
  v21 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BD390);
  }
  v206[52] &= ~v209;
  v22 = v207 & 0x1F | 0xB8418120;
  if (v20 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v21 = v196;
  }
  *(_DWORD *)&v193[v21] = v22;
  v23 = v196;
  v24 = v196 + 4;
  v196 += 4;
  if (v23 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v196;
  }
  *(_DWORD *)&v193[v24] = 1796276415;
  v25 = v196 + 4;
  v196 += 4;
  if (v210)
  {
    for (; (int)v25 < SHIDWORD(v192); a2 = v158)
    {
      v155 = a2;
      v156 = v19;
      v157 = v155;
      if (v25 + 4 > v195)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v25 = v196;
      }
      *(_DWORD *)&v193[v25] = -721215457;
      v25 = v196 + 4;
      v196 = v25;
      v158 = v157;
      v19 = v156;
    }
    v197 = 0;
  }
  if (v25 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v196;
  }
  *(_DWORD *)&v193[v25] = 1409286145;
  v26 = v196;
  v196 += 4;
  v27 = v196;
  v28 = v26 + 8;
  v29 = v196;
  if (v28 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v196;
  }
  *(_DWORD *)&v193[v29] = -721215457;
  v196 += 4;
  if (v210)
    v30 = -122;
  else
    v30 = -126;
  v162 = v27;
  v163 = 0;
  v164 = v30;
  v165 = 1;
  v166 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v171) == (_DWORD)v171)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v171) + 1), (unint64_t)&v162, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v163;
      v34 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v171);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v188, 0, 5, v9, v10, v11, v12);
  v42 = (uint64_t *)__dst;
  v43 = HIDWORD(v177);
  if (HIDWORD(v177))
  {
    v44 = HIDWORD(v171);
    v45 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
    if (v45 > v171)
    {
      v46 = v171 + ((unint64_t)v171 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
      v48 = p_dst;
      if (v47 < 3)
      {
        p_dst = v19;
        LODWORD(v171) = 2;
        v50 = (uint64_t)v19;
      }
      else
      {
        v159 = v19;
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BD52CLL);
        }
        v49 = 12 * v47;
        v50 = WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v171) = (v49 & 0xFFFFFFFC) / 0xC;
        p_dst = (WTF *)v50;
        v19 = v159;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)(v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 += 12;
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v19 != v48 && v48)
      {
        if (p_dst == v48)
        {
          p_dst = 0;
          LODWORD(v171) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v171))
    {
      __break(0xC471u);
      JUMPOUT(0x1981BD524);
    }
    v52 = (char *)p_dst + 12 * HIDWORD(v171);
    v53 = (uint64_t *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v42;
      *(_QWORD *)(v52 + 4) = *(uint64_t *)((char *)v42 + 4);
      v42 = (uint64_t *)((char *)v42 + 12);
      v52 += 12;
    }
    while (v42 != v53);
    HIDWORD(v171) = v45;
    v42 = (uint64_t *)__dst;
  }
  v54 = &v178 == v42 || v42 == 0;
  if (!v54)
  {
    __dst = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::transitionHandlerImpl<false,false>((uint64_t)v188, 0, 2, 5, 6, v39, v40, v41);
  v62 = v196;
  if (v196 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v62 = v196;
  }
  *(_DWORD *)&v193[v62] = -1463714819;
  v63 = v196;
  v64 = v196 + 4;
  v196 += 4;
  if (v63 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v64 = v196;
  }
  *(_DWORD *)&v193[v64] = -698416192;
  v65 = v196 + 4;
  v196 += 4;
  if (HIDWORD(v168))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v168);
    do
    {
      if (v67 >= HIDWORD(v168))
      {
        __break(0xC471u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1981BD51CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v167 + v66), (uint64_t)v188, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    __dst = &v178;
    LODWORD(v178) = 34144512;
    WORD2(v178) = 770;
    v177 = 0x300000003;
    v70 = 3;
    while (1)
    {
      v71 = 0;
      v72 = 0;
      v73 = (char *)__dst;
      v74 = v70;
      do
      {
        if ((*((_BYTE *)__dst + v71 + 1) & 0x40) != 0)
          goto LABEL_174;
        v72 |= 1 << *((_BYTE *)__dst + v71 + 1);
        v71 += 2;
      }
      while (2 * v70 != v71);
      v75 = 0;
      do
      {
        v76 = *((_BYTE *)__dst + v75) & 0x7F;
        if (v76 >= 0x40)
          goto LABEL_174;
        v72 &= ~(1 << v76);
        v75 += 2;
      }
      while (2 * v70 != v75);
      v77 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
      v77.i16[0] = vaddlv_u8(v77);
      v78 = v77.i32[0];
      v79 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v72));
      v79.i16[0] = vaddlv_u8(v79);
      if (!(v79.i32[0] + v78))
      {
        v160 = v19;
        v90 = *(_BYTE *)__dst;
        v91 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v188, *(char *)__dst, v91, v57, v58, v59, v60, v61);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v177) - 2);
        v92 = (HIDWORD(v177) - 1);
        v54 = HIDWORD(v177) == 1;
        HIDWORD(v177) = v92;
        v93 = (unsigned __int8 *)__dst;
        v94 = (char *)__dst + 2 * v92;
        if (v54)
        {
          v101 = 0;
          v102 = 0;
          v97 = 0;
          v69 = (char *)__dst + 2 * v92;
        }
        else
        {
          v95 = 2 * v92;
          v96 = __dst;
          while (*v96 != v91)
          {
            v96 += 2;
            v95 -= 2;
            if (!v95)
              goto LABEL_104;
          }
          *v96 = v90;
LABEL_104:
          v97 = 0;
          v98 = v93;
          v69 = v94;
          v99 = v94;
          do
          {
            if (*v93 == v93[1])
            {
              v100 = v93;
              if (v99 != (char *)__dst + 2 * HIDWORD(v177))
              {
                if (v93 == (unsigned __int8 *)v69)
                {
                  v100 = (unsigned __int8 *)v99;
                }
                else
                {
                  v154 = v98 - (unsigned __int8 *)v69;
                  memmove(v99, v69, v98 - (unsigned __int8 *)v69);
                  v100 = (unsigned __int8 *)&v99[v154];
                }
              }
              v69 = (char *)(v93 + 2);
              ++v97;
              v99 = (char *)v100;
            }
            v93 += 2;
            v98 += 2;
          }
          while (v93 < (unsigned __int8 *)v94);
          v93 = (unsigned __int8 *)__dst;
          v101 = HIDWORD(v177);
          v102 = HIDWORD(v177);
          v94 = v99;
        }
        v103 = (char *)&v93[2 * v101];
        if (v69 != v103)
        {
          memmove(v94, v69, v103 - v69);
          v102 = HIDWORD(v177);
        }
        v70 = v102 - v97;
        v19 = v160;
        goto LABEL_97;
      }
      v80 = 0;
      v81 = v70 <= 1uLL ? 1 : v70;
      v82 = 2 * v81;
      while (1)
      {
        v83 = *((unsigned __int8 *)__dst + v80 + 1);
        if ((v83 & 0x7Fu) >= 0x40)
          goto LABEL_174;
        if (((v72 >> (v83 & 0x7F)) & 1) != 0)
          break;
        v80 += 2;
        if (v82 == v80)
          goto LABEL_98;
      }
      v84 = *((unsigned __int8 *)__dst + v80);
      if (v84 != v83)
        break;
LABEL_96:
      memmove(&v73[v80], &v73[v80 + 2], 2 * v74 - v80 - 2);
      v70 = HIDWORD(v177) - 1;
LABEL_97:
      HIDWORD(v177) = v70;
LABEL_98:
      if (!v70)
      {
        v104 = __dst;
        if (&v178 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v177) = 0;
          WTF::fastFree((unint64_t)v104, v69, v56, v57, v58, v59, v60, v61);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)this, 0, v57, v58, v59, v60, v61);
        if (!v198)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BD470);
        }
        v202[52] &= ~v205;
        v110 = v203;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)operationReallocateButterflyAndTransition, v203, v105, v106, v107, v108, v109);
        v197 = 0;
        v111 = v196;
        if (v196 + 4 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
          v111 = v196;
        }
        *(_DWORD *)&v193[v111] = (32 * (v110 & 0x1F)) | 0xD63F0000;
        v112 = v196;
        v113 = v196 + 4;
        v196 += 4;
        if (v112 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
          v113 = v196;
        }
        *(_DWORD *)&v193[v113] = -1463714819;
        v114 = v196;
        v115 = v196 + 4;
        v196 += 4;
        if (v114 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
          v115 = v196;
        }
        *(_DWORD *)&v193[v115] = -698416192;
        v65 = v196 + 4;
        v196 += 4;
        goto LABEL_123;
      }
    }
    v85 = (char)v84;
    if ((char)v84 == 63)
    {
      v86 = v196;
      v87 = v195;
      if (v83 != 31)
      {
        v89 = v83 & 0x1F | 0xD2800000;
        goto LABEL_93;
      }
    }
    else
    {
      v86 = v196;
      v87 = v195;
      if ((char)v83 != 31 && v85 != 31)
      {
        v89 = v83 & 0xFFE0FFFF | ((v85 & 0x1F) << 16) | 0xAA0003E0;
LABEL_93:
        if (v86 + 4 > v87)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v69, v56, v57, v58, v59, v60, v61);
          v86 = v196;
        }
        *(_DWORD *)&v193[v86] = v89;
        v196 += 4;
        v73 = (char *)__dst;
        v74 = HIDWORD(v177);
        goto LABEL_96;
      }
    }
    v89 = (char)v83 | (32 * v85) | 0x91000000;
    goto LABEL_93;
  }
LABEL_123:
  if (HIDWORD(v171))
  {
    v116 = 0;
    v117 = 0;
    v118 = 12 * HIDWORD(v171);
    do
    {
      if (v117 >= HIDWORD(v171))
        goto LABEL_175;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v116), (uint64_t)v188, v56, v57, v58, v59, v60, v61);
      ++v117;
      v116 += 12;
    }
    while (v118 != v116);
    v65 = v196;
  }
  if (v65 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v65 = v196;
  }
  *(_DWORD *)&v193[v65] = -129662679;
  v119 = v196;
  v120 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BD420);
  }
  v202[52] &= ~v205;
  v121 = v203 & 0x1F | 0xF8410120;
  if (v119 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v120 = v196;
  }
  *(_DWORD *)&v193[v120] = v121;
  v122 = v196;
  v123 = v196 + 4;
  v196 += 4;
  if (v122 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v123 = v196;
  }
  *(_DWORD *)&v193[v123] = -702610944;
  v196 += 4;
  __dst = 0;
  v177 = 0;
  v178 = -1;
  v179 = v180;
  v181 = 128;
  v124 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v124 != -1)
  {
    v175 = &v173;
    v174 = &v175;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v125 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v133 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v133)
  {
    v133 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v133, v125);
  }
  v134 = *(_QWORD *)v133;
  if (*(_QWORD *)v133 != v133 + 8)
  {
    v135 = *(_DWORD *)(v133 + 136);
    if (v181 < v135)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v126, v127, v128, v129, v130, v131, v132);
        v134 = *(_QWORD *)v133;
        v135 = *(_DWORD *)(v133 + 136);
      }
      v179 = (_BYTE *)v134;
      v181 = v135;
      *(_QWORD *)v133 = v133 + 8;
      *(_DWORD *)(v133 + 136) = 128;
    }
  }
  v136 = 1;
  v182 = 1;
  v183 = 0;
  v184 = 6;
  v185 = 0u;
  v186 = 0u;
  v187 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v188, 1, v128, v129, v130, v131, v132);
  BYTE2(v183) = 1;
  if (byte_1ECF4C288)
    goto LABEL_163;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v136 = HIBYTE(word_1ECF4C286) != 0;
LABEL_163:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v136, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_148;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_148:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v137, v138, v139, v140, v141, v142, v143);
  v151 = v167;
  if (v169 != (_BYTE *)v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v151, v144, v145, v146, v147, v148, v149, v150);
  }
  v152 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v152, v144, v145, v146, v147, v148, v149, v150);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v188, v144, v145, v146, v147, v148, v149, v150);
}

uint64_t JSC::putByValWithSymbolTransitionNonAllocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  char *v52;
  uint64_t *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint8x8_t v77;
  __int32 v78;
  uint8x8_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v89;
  char v90;
  char v91;
  uint64_t v92;
  unsigned __int8 *v93;
  char *v94;
  uint64_t v95;
  _BYTE *v96;
  int v97;
  unsigned __int8 *v98;
  char *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  int v102;
  char *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  pthread_key_t *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  WTF *v152;
  int64_t v154;
  _QWORD *v155;
  WTF *v156;
  _QWORD *v157;
  _QWORD *v158;
  WTF *v159;
  WTF *v160;
  unsigned int v162;
  int v163;
  char v164;
  __int16 v165;
  char v166;
  WTF *v167;
  uint64_t v168;
  _BYTE v169[24];
  WTF *p_dst;
  uint64_t v171;
  _BYTE v172[31];
  char v173;
  char **v174;
  char *v175;
  void *__dst;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  char v182;
  int v183;
  int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _DWORD v188[6];
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  _BYTE v194[128];
  unsigned int v195;
  unsigned int v196;
  int v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _DWORD *v202;
  char v203;
  uint64_t v204;
  int v205;
  _DWORD *v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  LOBYTE(v188[0]) = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0x8000000080000000;
  v193 = v194;
  v195 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v167;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v195;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v195 < v16)
    {
      if (v193 && v193 != v194)
      {
        WTF::fastFree((unint64_t)v193, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v193 = (_BYTE *)v14;
      v195 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v195;
    }
  }
  v17 = 0;
  v198 = 1;
  v203 = 16;
  v205 = 0x10000;
  v207 = 17;
  v209 = 0x20000;
  v196 = 0;
  v197 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = v188;
  v204 = 0;
  v206 = v188;
  v208 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v196;
  }
  *(_DWORD *)&v193[v17] = -1447068675;
  v18 = v196 + 4;
  v196 += 4;
  v19 = (WTF *)v172;
  p_dst = (WTF *)v172;
  v171 = 2;
  v167 = (WTF *)v169;
  v168 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v188, "check structure");
    v18 = v196;
  }
  if (v18 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v196;
  }
  *(_DWORD *)&v193[v18] = -1203765243;
  v20 = v196;
  v21 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BE23CLL);
  }
  v206[52] &= ~v209;
  v22 = v207 & 0x1F | 0xB8418120;
  if (v20 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v21 = v196;
  }
  *(_DWORD *)&v193[v21] = v22;
  v23 = v196;
  v24 = v196 + 4;
  v196 += 4;
  if (v23 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v196;
  }
  *(_DWORD *)&v193[v24] = 1796276415;
  v25 = v196 + 4;
  v196 += 4;
  if (v210)
  {
    for (; (int)v25 < SHIDWORD(v192); a2 = v158)
    {
      v155 = a2;
      v156 = v19;
      v157 = v155;
      if (v25 + 4 > v195)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v25 = v196;
      }
      *(_DWORD *)&v193[v25] = -721215457;
      v25 = v196 + 4;
      v196 = v25;
      v158 = v157;
      v19 = v156;
    }
    v197 = 0;
  }
  if (v25 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v196;
  }
  *(_DWORD *)&v193[v25] = 1409286145;
  v26 = v196;
  v196 += 4;
  v27 = v196;
  v28 = v26 + 8;
  v29 = v196;
  if (v28 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v196;
  }
  *(_DWORD *)&v193[v29] = -721215457;
  v196 += 4;
  if (v210)
    v30 = -122;
  else
    v30 = -126;
  v162 = v27;
  v163 = 0;
  v164 = v30;
  v165 = 1;
  v166 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v171) == (_DWORD)v171)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v171) + 1), (unint64_t)&v162, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v163;
      v34 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v171);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v188, 1, 5, v9, v10, v11, v12);
  v42 = (uint64_t *)__dst;
  v43 = HIDWORD(v177);
  if (HIDWORD(v177))
  {
    v44 = HIDWORD(v171);
    v45 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
    if (v45 > v171)
    {
      v46 = v171 + ((unint64_t)v171 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
      v48 = p_dst;
      if (v47 < 3)
      {
        p_dst = v19;
        LODWORD(v171) = 2;
        v50 = (uint64_t)v19;
      }
      else
      {
        v159 = v19;
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BE3D8);
        }
        v49 = 12 * v47;
        v50 = WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v171) = (v49 & 0xFFFFFFFC) / 0xC;
        p_dst = (WTF *)v50;
        v19 = v159;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)(v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 += 12;
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v19 != v48 && v48)
      {
        if (p_dst == v48)
        {
          p_dst = 0;
          LODWORD(v171) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v171))
    {
      __break(0xC471u);
      JUMPOUT(0x1981BE3D0);
    }
    v52 = (char *)p_dst + 12 * HIDWORD(v171);
    v53 = (uint64_t *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v42;
      *(_QWORD *)(v52 + 4) = *(uint64_t *)((char *)v42 + 4);
      v42 = (uint64_t *)((char *)v42 + 12);
      v52 += 12;
    }
    while (v42 != v53);
    HIDWORD(v171) = v45;
    v42 = (uint64_t *)__dst;
  }
  v54 = &v178 == v42 || v42 == 0;
  if (!v54)
  {
    __dst = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::transitionHandlerImpl<false,false>((uint64_t)v188, 0, 2, 5, 6, v39, v40, v41);
  v62 = v196;
  if (v196 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v62 = v196;
  }
  *(_DWORD *)&v193[v62] = -1463714819;
  v63 = v196;
  v64 = v196 + 4;
  v196 += 4;
  if (v63 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v64 = v196;
  }
  *(_DWORD *)&v193[v64] = -698416192;
  v65 = v196 + 4;
  v196 += 4;
  if (HIDWORD(v168))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v168);
    do
    {
      if (v67 >= HIDWORD(v168))
      {
        __break(0xC471u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1981BE3C8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v167 + v66), (uint64_t)v188, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    __dst = &v178;
    LODWORD(v178) = 34144512;
    WORD2(v178) = 770;
    v177 = 0x300000003;
    v70 = 3;
    while (1)
    {
      v71 = 0;
      v72 = 0;
      v73 = (char *)__dst;
      v74 = v70;
      do
      {
        if ((*((_BYTE *)__dst + v71 + 1) & 0x40) != 0)
          goto LABEL_174;
        v72 |= 1 << *((_BYTE *)__dst + v71 + 1);
        v71 += 2;
      }
      while (2 * v70 != v71);
      v75 = 0;
      do
      {
        v76 = *((_BYTE *)__dst + v75) & 0x7F;
        if (v76 >= 0x40)
          goto LABEL_174;
        v72 &= ~(1 << v76);
        v75 += 2;
      }
      while (2 * v70 != v75);
      v77 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
      v77.i16[0] = vaddlv_u8(v77);
      v78 = v77.i32[0];
      v79 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v72));
      v79.i16[0] = vaddlv_u8(v79);
      if (!(v79.i32[0] + v78))
      {
        v160 = v19;
        v90 = *(_BYTE *)__dst;
        v91 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v188, *(char *)__dst, v91, v57, v58, v59, v60, v61);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v177) - 2);
        v92 = (HIDWORD(v177) - 1);
        v54 = HIDWORD(v177) == 1;
        HIDWORD(v177) = v92;
        v93 = (unsigned __int8 *)__dst;
        v94 = (char *)__dst + 2 * v92;
        if (v54)
        {
          v101 = 0;
          v102 = 0;
          v97 = 0;
          v69 = (char *)__dst + 2 * v92;
        }
        else
        {
          v95 = 2 * v92;
          v96 = __dst;
          while (*v96 != v91)
          {
            v96 += 2;
            v95 -= 2;
            if (!v95)
              goto LABEL_104;
          }
          *v96 = v90;
LABEL_104:
          v97 = 0;
          v98 = v93;
          v69 = v94;
          v99 = v94;
          do
          {
            if (*v93 == v93[1])
            {
              v100 = v93;
              if (v99 != (char *)__dst + 2 * HIDWORD(v177))
              {
                if (v93 == (unsigned __int8 *)v69)
                {
                  v100 = (unsigned __int8 *)v99;
                }
                else
                {
                  v154 = v98 - (unsigned __int8 *)v69;
                  memmove(v99, v69, v98 - (unsigned __int8 *)v69);
                  v100 = (unsigned __int8 *)&v99[v154];
                }
              }
              v69 = (char *)(v93 + 2);
              ++v97;
              v99 = (char *)v100;
            }
            v93 += 2;
            v98 += 2;
          }
          while (v93 < (unsigned __int8 *)v94);
          v93 = (unsigned __int8 *)__dst;
          v101 = HIDWORD(v177);
          v102 = HIDWORD(v177);
          v94 = v99;
        }
        v103 = (char *)&v93[2 * v101];
        if (v69 != v103)
        {
          memmove(v94, v69, v103 - v69);
          v102 = HIDWORD(v177);
        }
        v70 = v102 - v97;
        v19 = v160;
        goto LABEL_97;
      }
      v80 = 0;
      v81 = v70 <= 1uLL ? 1 : v70;
      v82 = 2 * v81;
      while (1)
      {
        v83 = *((unsigned __int8 *)__dst + v80 + 1);
        if ((v83 & 0x7Fu) >= 0x40)
          goto LABEL_174;
        if (((v72 >> (v83 & 0x7F)) & 1) != 0)
          break;
        v80 += 2;
        if (v82 == v80)
          goto LABEL_98;
      }
      v84 = *((unsigned __int8 *)__dst + v80);
      if (v84 != v83)
        break;
LABEL_96:
      memmove(&v73[v80], &v73[v80 + 2], 2 * v74 - v80 - 2);
      v70 = HIDWORD(v177) - 1;
LABEL_97:
      HIDWORD(v177) = v70;
LABEL_98:
      if (!v70)
      {
        v104 = __dst;
        if (&v178 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v177) = 0;
          WTF::fastFree((unint64_t)v104, v69, v56, v57, v58, v59, v60, v61);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)this, 0, v57, v58, v59, v60, v61);
        if (!v198)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BE31CLL);
        }
        v202[52] &= ~v205;
        v110 = v203;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)operationReallocateButterflyAndTransition, v203, v105, v106, v107, v108, v109);
        v197 = 0;
        v111 = v196;
        if (v196 + 4 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
          v111 = v196;
        }
        *(_DWORD *)&v193[v111] = (32 * (v110 & 0x1F)) | 0xD63F0000;
        v112 = v196;
        v113 = v196 + 4;
        v196 += 4;
        if (v112 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
          v113 = v196;
        }
        *(_DWORD *)&v193[v113] = -1463714819;
        v114 = v196;
        v115 = v196 + 4;
        v196 += 4;
        if (v114 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
          v115 = v196;
        }
        *(_DWORD *)&v193[v115] = -698416192;
        v65 = v196 + 4;
        v196 += 4;
        goto LABEL_123;
      }
    }
    v85 = (char)v84;
    if ((char)v84 == 63)
    {
      v86 = v196;
      v87 = v195;
      if (v83 != 31)
      {
        v89 = v83 & 0x1F | 0xD2800000;
        goto LABEL_93;
      }
    }
    else
    {
      v86 = v196;
      v87 = v195;
      if ((char)v83 != 31 && v85 != 31)
      {
        v89 = v83 & 0xFFE0FFFF | ((v85 & 0x1F) << 16) | 0xAA0003E0;
LABEL_93:
        if (v86 + 4 > v87)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v69, v56, v57, v58, v59, v60, v61);
          v86 = v196;
        }
        *(_DWORD *)&v193[v86] = v89;
        v196 += 4;
        v73 = (char *)__dst;
        v74 = HIDWORD(v177);
        goto LABEL_96;
      }
    }
    v89 = (char)v83 | (32 * v85) | 0x91000000;
    goto LABEL_93;
  }
LABEL_123:
  if (HIDWORD(v171))
  {
    v116 = 0;
    v117 = 0;
    v118 = 12 * HIDWORD(v171);
    do
    {
      if (v117 >= HIDWORD(v171))
        goto LABEL_175;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v116), (uint64_t)v188, v56, v57, v58, v59, v60, v61);
      ++v117;
      v116 += 12;
    }
    while (v118 != v116);
    v65 = v196;
  }
  if (v65 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v65 = v196;
  }
  *(_DWORD *)&v193[v65] = -129662679;
  v119 = v196;
  v120 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BE2CCLL);
  }
  v202[52] &= ~v205;
  v121 = v203 & 0x1F | 0xF8410120;
  if (v119 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v120 = v196;
  }
  *(_DWORD *)&v193[v120] = v121;
  v122 = v196;
  v123 = v196 + 4;
  v196 += 4;
  if (v122 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v55, v56, v57, v58, v59, v60, v61);
    v123 = v196;
  }
  *(_DWORD *)&v193[v123] = -702610944;
  v196 += 4;
  __dst = 0;
  v177 = 0;
  v178 = -1;
  v179 = v180;
  v181 = 128;
  v124 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v124 != -1)
  {
    v175 = &v173;
    v174 = &v175;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v125 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v133 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v133)
  {
    v133 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v133, v125);
  }
  v134 = *(_QWORD *)v133;
  if (*(_QWORD *)v133 != v133 + 8)
  {
    v135 = *(_DWORD *)(v133 + 136);
    if (v181 < v135)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v126, v127, v128, v129, v130, v131, v132);
        v134 = *(_QWORD *)v133;
        v135 = *(_DWORD *)(v133 + 136);
      }
      v179 = (_BYTE *)v134;
      v181 = v135;
      *(_QWORD *)v133 = v133 + 8;
      *(_DWORD *)(v133 + 136) = 128;
    }
  }
  v136 = 1;
  v182 = 1;
  v183 = 0;
  v184 = 6;
  v185 = 0u;
  v186 = 0u;
  v187 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v188, 1, v128, v129, v130, v131, v132);
  BYTE2(v183) = 1;
  if (byte_1ECF4C288)
    goto LABEL_163;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v136 = HIBYTE(word_1ECF4C286) != 0;
LABEL_163:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v136, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_148;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_148:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v137, v138, v139, v140, v141, v142, v143);
  v151 = v167;
  if (v169 != (_BYTE *)v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v151, v144, v145, v146, v147, v148, v149, v150);
  }
  v152 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v152, v144, v145, v146, v147, v148, v149, v150);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v188, v144, v145, v146, v147, v148, v149, v150);
}

uint64_t JSC::putByValWithStringTransitionNewlyAllocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  int *v32;
  int *v33;
  int v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  _QWORD *v50;
  int v51;
  _BYTE *v52;
  WTF *v53;
  char *v54;
  uint64_t *v55;
  BOOL v56;
  JSC *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint8x8_t v80;
  __int32 v81;
  uint8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v92;
  _QWORD *v93;
  char v94;
  char v95;
  uint64_t v96;
  unsigned __int8 *v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  unsigned __int8 *v102;
  char *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  int v106;
  char *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  pthread_key_t *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  char v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  int64_t v158;
  WTF *v159;
  WTF *v160;
  unsigned int v162;
  int v163;
  char v164;
  __int16 v165;
  char v166;
  WTF *v167;
  uint64_t v168;
  _BYTE v169[24];
  WTF *p_dst;
  uint64_t v171;
  _BYTE v172[31];
  char v173;
  char **v174;
  char *v175;
  void *__dst;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  char v182;
  int v183;
  int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _DWORD v188[6];
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  _BYTE v194[128];
  unsigned int v195;
  unsigned int v196;
  int v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _DWORD *v202;
  char v203;
  uint64_t v204;
  int v205;
  _DWORD *v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  LOBYTE(v188[0]) = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0x8000000080000000;
  v193 = v194;
  v195 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v167;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v195;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v195 < v16)
    {
      if (v193 && v193 != v194)
      {
        WTF::fastFree((unint64_t)v193, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v193 = (_BYTE *)v14;
      v195 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v195;
    }
  }
  v17 = 0;
  v198 = 1;
  v203 = 16;
  v205 = 0x10000;
  v207 = 17;
  v209 = 0x20000;
  v196 = 0;
  v197 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = v188;
  v204 = 0;
  v206 = v188;
  v208 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v196;
  }
  *(_DWORD *)&v193[v17] = -1447068675;
  v18 = v196 + 4;
  v196 += 4;
  v19 = (WTF *)v172;
  p_dst = (WTF *)v172;
  v171 = 2;
  v20 = (WTF *)v169;
  v167 = (WTF *)v169;
  v168 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v188, "check structure");
    v18 = v196;
  }
  if (v18 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v196;
  }
  *(_DWORD *)&v193[v18] = -1203765243;
  v21 = v196;
  v22 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BF10CLL);
  }
  v206[52] &= ~v209;
  v23 = v207 & 0x1F | 0xB8418120;
  if (v21 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v22 = v196;
  }
  *(_DWORD *)&v193[v22] = v23;
  v24 = v196;
  v25 = v196 + 4;
  v196 += 4;
  if (v24 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v196;
  }
  *(_DWORD *)&v193[v25] = 1796276415;
  v26 = v196 + 4;
  v196 += 4;
  if (v210)
  {
    for (; (int)v26 < SHIDWORD(v192); v196 = v26)
    {
      if (v26 + 4 > v195)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v26 = v196;
      }
      *(_DWORD *)&v193[v26] = -721215457;
      v26 = v196 + 4;
    }
    v197 = 0;
  }
  if (v26 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v26 = v196;
  }
  *(_DWORD *)&v193[v26] = 1409286145;
  v27 = v196;
  v196 += 4;
  v28 = v196;
  v29 = v27 + 8;
  v30 = v196;
  if (v29 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v30 = v196;
  }
  *(_DWORD *)&v193[v30] = -721215457;
  v196 += 4;
  if (v210)
    v31 = -122;
  else
    v31 = -126;
  v162 = v28;
  v163 = 0;
  v164 = v31;
  v165 = 1;
  v166 = -1;
  if (v28 != -1)
  {
    if (HIDWORD(v171) == (_DWORD)v171)
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v171) + 1), (unint64_t)&v162, v8, v9, v10, v11, v12);
      v34 = *v32;
      v33 = v32 + 1;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v34;
    }
    else
    {
      v33 = &v163;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v28;
    }
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++HIDWORD(v171);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v188, 0, 5, v9, v10, v11, v12);
  v43 = (uint64_t *)__dst;
  v44 = HIDWORD(v177);
  if (HIDWORD(v177))
  {
    v45 = HIDWORD(v171);
    v46 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
    if (v46 > v171)
    {
      v47 = v171 + ((unint64_t)v171 >> 2);
      if (v47 >= 0x10)
        v48 = v47 + 1;
      else
        v48 = 16;
      if (v48 <= v46)
        v48 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
      v49 = p_dst;
      if (v48 < 3)
      {
        p_dst = (WTF *)v172;
        LODWORD(v171) = 2;
        v52 = v172;
      }
      else
      {
        if (v48 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BF2A8);
        }
        v50 = a2;
        v51 = 12 * v48;
        v52 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
        LODWORD(v171) = (v51 & 0xFFFFFFFC) / 0xC;
        p_dst = (WTF *)v52;
        a2 = v50;
        v19 = (WTF *)v172;
      }
      if (v45)
      {
        v53 = v49;
        do
        {
          *(_DWORD *)v52 = *(_DWORD *)v53;
          *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v53 + 4);
          v53 = (WTF *)((char *)v53 + 12);
          v52 += 12;
        }
        while (v53 != (WTF *)((char *)v49 + 12 * v45));
      }
      if (v172 != (_BYTE *)v49 && v49)
      {
        if (p_dst == v49)
        {
          p_dst = 0;
          LODWORD(v171) = 0;
        }
        WTF::fastFree((unint64_t)v49, v36, v37, v38, v39, v40, v41, v42);
      }
    }
    if (v46 < HIDWORD(v171))
    {
      __break(0xC471u);
      JUMPOUT(0x1981BF2A0);
    }
    v54 = (char *)p_dst + 12 * HIDWORD(v171);
    v55 = (uint64_t *)((char *)v43 + 12 * v44);
    do
    {
      *(_DWORD *)v54 = *(_DWORD *)v43;
      *(_QWORD *)(v54 + 4) = *(uint64_t *)((char *)v43 + 4);
      v43 = (uint64_t *)((char *)v43 + 12);
      v54 += 12;
    }
    while (v43 != v55);
    HIDWORD(v171) = v46;
    v43 = (uint64_t *)__dst;
    v20 = (WTF *)v169;
  }
  v56 = &v178 == v43 || v43 == 0;
  if (!v56)
  {
    __dst = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  }
  v57 = this;
  JSC::transitionHandlerImpl<true,false>(this, (uint64_t)v188, (uint64_t)&v167, 0, 2, 5, 6, 1, 4);
  v65 = v196;
  if (v196 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v65 = v196;
  }
  *(_DWORD *)&v193[v65] = -1463714819;
  v66 = v196;
  v67 = v196 + 4;
  v196 += 4;
  if (v66 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v67 = v196;
  }
  *(_DWORD *)&v193[v67] = -698416192;
  v68 = v196 + 4;
  v196 += 4;
  if (HIDWORD(v168))
  {
    v69 = 0;
    v70 = 0;
    v71 = 12 * HIDWORD(v168);
    do
    {
      if (v70 >= HIDWORD(v168))
      {
        __break(0xC471u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1981BF298);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v167 + v69), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v70;
      v69 += 12;
    }
    while (v71 != v69);
    __dst = &v178;
    LODWORD(v178) = 34144512;
    WORD2(v178) = 770;
    v177 = 0x300000003;
    v73 = 3;
    while (1)
    {
      v74 = 0;
      v75 = 0;
      v76 = (char *)__dst;
      v77 = v73;
      do
      {
        if ((*((_BYTE *)__dst + v74 + 1) & 0x40) != 0)
          goto LABEL_174;
        v75 |= 1 << *((_BYTE *)__dst + v74 + 1);
        v74 += 2;
      }
      while (2 * v73 != v74);
      v78 = 0;
      do
      {
        v79 = *((_BYTE *)__dst + v78) & 0x7F;
        if (v79 >= 0x40)
          goto LABEL_174;
        v75 &= ~(1 << v79);
        v78 += 2;
      }
      while (2 * v73 != v78);
      v80 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v80.i16[0] = vaddlv_u8(v80);
      v81 = v80.i32[0];
      v82 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v75));
      v82.i16[0] = vaddlv_u8(v82);
      if (!(v82.i32[0] + v81))
      {
        v159 = v20;
        v160 = v19;
        v93 = a2;
        v94 = *(_BYTE *)__dst;
        v95 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v188, *(char *)__dst, v95, v60, v61, v62, v63, v64);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v177) - 2);
        v96 = (HIDWORD(v177) - 1);
        v56 = HIDWORD(v177) == 1;
        HIDWORD(v177) = v96;
        v97 = (unsigned __int8 *)__dst;
        v98 = (char *)__dst + 2 * v96;
        if (v56)
        {
          v105 = 0;
          v106 = 0;
          v101 = 0;
          v72 = (char *)__dst + 2 * v96;
        }
        else
        {
          v99 = 2 * v96;
          v100 = __dst;
          while (*v100 != v95)
          {
            v100 += 2;
            v99 -= 2;
            if (!v99)
              goto LABEL_104;
          }
          *v100 = v94;
LABEL_104:
          v101 = 0;
          v102 = v97;
          v72 = v98;
          v103 = v98;
          do
          {
            if (*v97 == v97[1])
            {
              v104 = v97;
              if (v103 != (char *)__dst + 2 * HIDWORD(v177))
              {
                if (v97 == (unsigned __int8 *)v72)
                {
                  v104 = (unsigned __int8 *)v103;
                }
                else
                {
                  v158 = v102 - (unsigned __int8 *)v72;
                  memmove(v103, v72, v102 - (unsigned __int8 *)v72);
                  v104 = (unsigned __int8 *)&v103[v158];
                }
              }
              v72 = (char *)(v97 + 2);
              ++v101;
              v103 = (char *)v104;
            }
            v97 += 2;
            v102 += 2;
          }
          while (v97 < (unsigned __int8 *)v98);
          v97 = (unsigned __int8 *)__dst;
          v105 = HIDWORD(v177);
          v106 = HIDWORD(v177);
          v98 = v103;
        }
        v107 = (char *)&v97[2 * v105];
        v20 = v159;
        if (v72 != v107)
        {
          memmove(v98, v72, v107 - v72);
          v106 = HIDWORD(v177);
        }
        v73 = v106 - v101;
        a2 = v93;
        v19 = v160;
        v57 = this;
        goto LABEL_97;
      }
      v83 = 0;
      v84 = v73 <= 1uLL ? 1 : v73;
      v85 = 2 * v84;
      while (1)
      {
        v86 = *((unsigned __int8 *)__dst + v83 + 1);
        if ((v86 & 0x7Fu) >= 0x40)
          goto LABEL_174;
        if (((v75 >> (v86 & 0x7F)) & 1) != 0)
          break;
        v83 += 2;
        if (v85 == v83)
          goto LABEL_98;
      }
      v87 = *((unsigned __int8 *)__dst + v83);
      if (v87 != v86)
        break;
LABEL_96:
      memmove(&v76[v83], &v76[v83 + 2], 2 * v77 - v83 - 2);
      v73 = HIDWORD(v177) - 1;
LABEL_97:
      HIDWORD(v177) = v73;
LABEL_98:
      if (!v73)
      {
        v108 = __dst;
        if (&v178 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v177) = 0;
          WTF::fastFree((unint64_t)v108, v72, v59, v60, v61, v62, v63, v64);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)v57, 0, v60, v61, v62, v63, v64);
        if (!v198)
        {
          __break(0xC471u);
          JUMPOUT(0x1981BF1ECLL);
        }
        v202[52] &= ~v205;
        v114 = v203;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)operationReallocateButterflyAndTransition, v203, v109, v110, v111, v112, v113);
        v197 = 0;
        v115 = v196;
        if (v196 + 4 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v115 = v196;
        }
        *(_DWORD *)&v193[v115] = (32 * (v114 & 0x1F)) | 0xD63F0000;
        v116 = v196;
        v117 = v196 + 4;
        v196 += 4;
        if (v116 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v117 = v196;
        }
        *(_DWORD *)&v193[v117] = -1463714819;
        v118 = v196;
        v119 = v196 + 4;
        v196 += 4;
        if (v118 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v119 = v196;
        }
        *(_DWORD *)&v193[v119] = -698416192;
        v68 = v196 + 4;
        v196 += 4;
        goto LABEL_123;
      }
    }
    v88 = (char)v87;
    if ((char)v87 == 63)
    {
      v89 = v196;
      v90 = v195;
      if (v86 != 31)
      {
        v92 = v86 & 0x1F | 0xD2800000;
        goto LABEL_93;
      }
    }
    else
    {
      v89 = v196;
      v90 = v195;
      if ((char)v86 != 31 && v88 != 31)
      {
        v92 = v86 & 0xFFE0FFFF | ((v88 & 0x1F) << 16) | 0xAA0003E0;
LABEL_93:
        if (v89 + 4 > v90)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v72, v59, v60, v61, v62, v63, v64);
          v89 = v196;
        }
        *(_DWORD *)&v193[v89] = v92;
        v196 += 4;
        v76 = (char *)__dst;
        v77 = HIDWORD(v177);
        goto LABEL_96;
      }
    }
    v92 = (char)v86 | (32 * v88) | 0x91000000;
    goto LABEL_93;
  }
LABEL_123:
  if (HIDWORD(v171))
  {
    v120 = 0;
    v121 = 0;
    v122 = 12 * HIDWORD(v171);
    do
    {
      if (v121 >= HIDWORD(v171))
        goto LABEL_175;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v120), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v121;
      v120 += 12;
    }
    while (v122 != v120);
    v68 = v196;
  }
  if (v68 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v68 = v196;
  }
  *(_DWORD *)&v193[v68] = -129662679;
  v123 = v196;
  v124 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BF19CLL);
  }
  v202[52] &= ~v205;
  v125 = v203 & 0x1F | 0xF8410120;
  if (v123 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v124 = v196;
  }
  *(_DWORD *)&v193[v124] = v125;
  v126 = v196;
  v127 = v196 + 4;
  v196 += 4;
  if (v126 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v127 = v196;
  }
  *(_DWORD *)&v193[v127] = -702610944;
  v196 += 4;
  __dst = 0;
  v177 = 0;
  v178 = -1;
  v179 = v180;
  v181 = 128;
  v128 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v128 != -1)
  {
    v175 = &v173;
    v174 = &v175;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v129 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v137 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v137)
  {
    v137 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v137, v129);
  }
  v138 = *(_QWORD *)v137;
  if (*(_QWORD *)v137 != v137 + 8)
  {
    v139 = *(_DWORD *)(v137 + 136);
    if (v181 < v139)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v130, v131, v132, v133, v134, v135, v136);
        v138 = *(_QWORD *)v137;
        v139 = *(_DWORD *)(v137 + 136);
      }
      v179 = (_BYTE *)v138;
      v181 = v139;
      *(_QWORD *)v137 = v137 + 8;
      *(_DWORD *)(v137 + 136) = 128;
    }
  }
  v140 = 1;
  v182 = 1;
  v183 = 0;
  v184 = 6;
  v185 = 0u;
  v186 = 0u;
  v187 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v188, 1, v132, v133, v134, v135, v136);
  BYTE2(v183) = 1;
  if (byte_1ECF4C288)
    goto LABEL_163;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v140 = HIBYTE(word_1ECF4C286) != 0;
LABEL_163:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v140, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_148;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_148:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v141, v142, v143, v144, v145, v146, v147);
  v155 = v167;
  if (v20 != v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
  }
  v156 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v156, v148, v149, v150, v151, v152, v153, v154);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v188, v148, v149, v150, v151, v152, v153, v154);
}

uint64_t JSC::putByValWithSymbolTransitionNewlyAllocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  int *v32;
  int *v33;
  int v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  _QWORD *v50;
  int v51;
  _BYTE *v52;
  WTF *v53;
  char *v54;
  uint64_t *v55;
  BOOL v56;
  JSC *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint8x8_t v80;
  __int32 v81;
  uint8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v92;
  _QWORD *v93;
  char v94;
  char v95;
  uint64_t v96;
  unsigned __int8 *v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  unsigned __int8 *v102;
  char *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  int v106;
  char *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  pthread_key_t *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  char v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  int64_t v158;
  WTF *v159;
  WTF *v160;
  unsigned int v162;
  int v163;
  char v164;
  __int16 v165;
  char v166;
  WTF *v167;
  uint64_t v168;
  _BYTE v169[24];
  WTF *p_dst;
  uint64_t v171;
  _BYTE v172[31];
  char v173;
  char **v174;
  char *v175;
  void *__dst;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  char v182;
  int v183;
  int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _DWORD v188[6];
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  _BYTE v194[128];
  unsigned int v195;
  unsigned int v196;
  int v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _DWORD *v202;
  char v203;
  uint64_t v204;
  int v205;
  _DWORD *v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  LOBYTE(v188[0]) = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0x8000000080000000;
  v193 = v194;
  v195 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v167;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v195;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v195 < v16)
    {
      if (v193 && v193 != v194)
      {
        WTF::fastFree((unint64_t)v193, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v193 = (_BYTE *)v14;
      v195 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v195;
    }
  }
  v17 = 0;
  v198 = 1;
  v203 = 16;
  v205 = 0x10000;
  v207 = 17;
  v209 = 0x20000;
  v196 = 0;
  v197 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = v188;
  v204 = 0;
  v206 = v188;
  v208 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v196;
  }
  *(_DWORD *)&v193[v17] = -1447068675;
  v18 = v196 + 4;
  v196 += 4;
  v19 = (WTF *)v172;
  p_dst = (WTF *)v172;
  v171 = 2;
  v20 = (WTF *)v169;
  v167 = (WTF *)v169;
  v168 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v188, "check structure");
    v18 = v196;
  }
  if (v18 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v196;
  }
  *(_DWORD *)&v193[v18] = -1203765243;
  v21 = v196;
  v22 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981BFFC4);
  }
  v206[52] &= ~v209;
  v23 = v207 & 0x1F | 0xB8418120;
  if (v21 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v22 = v196;
  }
  *(_DWORD *)&v193[v22] = v23;
  v24 = v196;
  v25 = v196 + 4;
  v196 += 4;
  if (v24 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v196;
  }
  *(_DWORD *)&v193[v25] = 1796276415;
  v26 = v196 + 4;
  v196 += 4;
  if (v210)
  {
    for (; (int)v26 < SHIDWORD(v192); v196 = v26)
    {
      if (v26 + 4 > v195)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v26 = v196;
      }
      *(_DWORD *)&v193[v26] = -721215457;
      v26 = v196 + 4;
    }
    v197 = 0;
  }
  if (v26 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v26 = v196;
  }
  *(_DWORD *)&v193[v26] = 1409286145;
  v27 = v196;
  v196 += 4;
  v28 = v196;
  v29 = v27 + 8;
  v30 = v196;
  if (v29 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v30 = v196;
  }
  *(_DWORD *)&v193[v30] = -721215457;
  v196 += 4;
  if (v210)
    v31 = -122;
  else
    v31 = -126;
  v162 = v28;
  v163 = 0;
  v164 = v31;
  v165 = 1;
  v166 = -1;
  if (v28 != -1)
  {
    if (HIDWORD(v171) == (_DWORD)v171)
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v171) + 1), (unint64_t)&v162, v8, v9, v10, v11, v12);
      v34 = *v32;
      v33 = v32 + 1;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v34;
    }
    else
    {
      v33 = &v163;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v28;
    }
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++HIDWORD(v171);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v188, 1, 5, v9, v10, v11, v12);
  v43 = (uint64_t *)__dst;
  v44 = HIDWORD(v177);
  if (HIDWORD(v177))
  {
    v45 = HIDWORD(v171);
    v46 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
    if (v46 > v171)
    {
      v47 = v171 + ((unint64_t)v171 >> 2);
      if (v47 >= 0x10)
        v48 = v47 + 1;
      else
        v48 = 16;
      if (v48 <= v46)
        v48 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
      v49 = p_dst;
      if (v48 < 3)
      {
        p_dst = (WTF *)v172;
        LODWORD(v171) = 2;
        v52 = v172;
      }
      else
      {
        if (v48 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C0160);
        }
        v50 = a2;
        v51 = 12 * v48;
        v52 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
        LODWORD(v171) = (v51 & 0xFFFFFFFC) / 0xC;
        p_dst = (WTF *)v52;
        a2 = v50;
        v19 = (WTF *)v172;
      }
      if (v45)
      {
        v53 = v49;
        do
        {
          *(_DWORD *)v52 = *(_DWORD *)v53;
          *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v53 + 4);
          v53 = (WTF *)((char *)v53 + 12);
          v52 += 12;
        }
        while (v53 != (WTF *)((char *)v49 + 12 * v45));
      }
      if (v172 != (_BYTE *)v49 && v49)
      {
        if (p_dst == v49)
        {
          p_dst = 0;
          LODWORD(v171) = 0;
        }
        WTF::fastFree((unint64_t)v49, v36, v37, v38, v39, v40, v41, v42);
      }
    }
    if (v46 < HIDWORD(v171))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C0158);
    }
    v54 = (char *)p_dst + 12 * HIDWORD(v171);
    v55 = (uint64_t *)((char *)v43 + 12 * v44);
    do
    {
      *(_DWORD *)v54 = *(_DWORD *)v43;
      *(_QWORD *)(v54 + 4) = *(uint64_t *)((char *)v43 + 4);
      v43 = (uint64_t *)((char *)v43 + 12);
      v54 += 12;
    }
    while (v43 != v55);
    HIDWORD(v171) = v46;
    v43 = (uint64_t *)__dst;
    v20 = (WTF *)v169;
  }
  v56 = &v178 == v43 || v43 == 0;
  if (!v56)
  {
    __dst = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  }
  v57 = this;
  JSC::transitionHandlerImpl<true,false>(this, (uint64_t)v188, (uint64_t)&v167, 0, 2, 5, 6, 1, 4);
  v65 = v196;
  if (v196 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v65 = v196;
  }
  *(_DWORD *)&v193[v65] = -1463714819;
  v66 = v196;
  v67 = v196 + 4;
  v196 += 4;
  if (v66 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v67 = v196;
  }
  *(_DWORD *)&v193[v67] = -698416192;
  v68 = v196 + 4;
  v196 += 4;
  if (HIDWORD(v168))
  {
    v69 = 0;
    v70 = 0;
    v71 = 12 * HIDWORD(v168);
    do
    {
      if (v70 >= HIDWORD(v168))
      {
        __break(0xC471u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1981C0150);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v167 + v69), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v70;
      v69 += 12;
    }
    while (v71 != v69);
    __dst = &v178;
    LODWORD(v178) = 34144512;
    WORD2(v178) = 770;
    v177 = 0x300000003;
    v73 = 3;
    while (1)
    {
      v74 = 0;
      v75 = 0;
      v76 = (char *)__dst;
      v77 = v73;
      do
      {
        if ((*((_BYTE *)__dst + v74 + 1) & 0x40) != 0)
          goto LABEL_174;
        v75 |= 1 << *((_BYTE *)__dst + v74 + 1);
        v74 += 2;
      }
      while (2 * v73 != v74);
      v78 = 0;
      do
      {
        v79 = *((_BYTE *)__dst + v78) & 0x7F;
        if (v79 >= 0x40)
          goto LABEL_174;
        v75 &= ~(1 << v79);
        v78 += 2;
      }
      while (2 * v73 != v78);
      v80 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v80.i16[0] = vaddlv_u8(v80);
      v81 = v80.i32[0];
      v82 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v75));
      v82.i16[0] = vaddlv_u8(v82);
      if (!(v82.i32[0] + v81))
      {
        v159 = v20;
        v160 = v19;
        v93 = a2;
        v94 = *(_BYTE *)__dst;
        v95 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v188, *(char *)__dst, v95, v60, v61, v62, v63, v64);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v177) - 2);
        v96 = (HIDWORD(v177) - 1);
        v56 = HIDWORD(v177) == 1;
        HIDWORD(v177) = v96;
        v97 = (unsigned __int8 *)__dst;
        v98 = (char *)__dst + 2 * v96;
        if (v56)
        {
          v105 = 0;
          v106 = 0;
          v101 = 0;
          v72 = (char *)__dst + 2 * v96;
        }
        else
        {
          v99 = 2 * v96;
          v100 = __dst;
          while (*v100 != v95)
          {
            v100 += 2;
            v99 -= 2;
            if (!v99)
              goto LABEL_104;
          }
          *v100 = v94;
LABEL_104:
          v101 = 0;
          v102 = v97;
          v72 = v98;
          v103 = v98;
          do
          {
            if (*v97 == v97[1])
            {
              v104 = v97;
              if (v103 != (char *)__dst + 2 * HIDWORD(v177))
              {
                if (v97 == (unsigned __int8 *)v72)
                {
                  v104 = (unsigned __int8 *)v103;
                }
                else
                {
                  v158 = v102 - (unsigned __int8 *)v72;
                  memmove(v103, v72, v102 - (unsigned __int8 *)v72);
                  v104 = (unsigned __int8 *)&v103[v158];
                }
              }
              v72 = (char *)(v97 + 2);
              ++v101;
              v103 = (char *)v104;
            }
            v97 += 2;
            v102 += 2;
          }
          while (v97 < (unsigned __int8 *)v98);
          v97 = (unsigned __int8 *)__dst;
          v105 = HIDWORD(v177);
          v106 = HIDWORD(v177);
          v98 = v103;
        }
        v107 = (char *)&v97[2 * v105];
        v20 = v159;
        if (v72 != v107)
        {
          memmove(v98, v72, v107 - v72);
          v106 = HIDWORD(v177);
        }
        v73 = v106 - v101;
        a2 = v93;
        v19 = v160;
        v57 = this;
        goto LABEL_97;
      }
      v83 = 0;
      v84 = v73 <= 1uLL ? 1 : v73;
      v85 = 2 * v84;
      while (1)
      {
        v86 = *((unsigned __int8 *)__dst + v83 + 1);
        if ((v86 & 0x7Fu) >= 0x40)
          goto LABEL_174;
        if (((v75 >> (v86 & 0x7F)) & 1) != 0)
          break;
        v83 += 2;
        if (v85 == v83)
          goto LABEL_98;
      }
      v87 = *((unsigned __int8 *)__dst + v83);
      if (v87 != v86)
        break;
LABEL_96:
      memmove(&v76[v83], &v76[v83 + 2], 2 * v77 - v83 - 2);
      v73 = HIDWORD(v177) - 1;
LABEL_97:
      HIDWORD(v177) = v73;
LABEL_98:
      if (!v73)
      {
        v108 = __dst;
        if (&v178 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v177) = 0;
          WTF::fastFree((unint64_t)v108, v72, v59, v60, v61, v62, v63, v64);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)v57, 0, v60, v61, v62, v63, v64);
        if (!v198)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C00A4);
        }
        v202[52] &= ~v205;
        v114 = v203;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)operationReallocateButterflyAndTransition, v203, v109, v110, v111, v112, v113);
        v197 = 0;
        v115 = v196;
        if (v196 + 4 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v115 = v196;
        }
        *(_DWORD *)&v193[v115] = (32 * (v114 & 0x1F)) | 0xD63F0000;
        v116 = v196;
        v117 = v196 + 4;
        v196 += 4;
        if (v116 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v117 = v196;
        }
        *(_DWORD *)&v193[v117] = -1463714819;
        v118 = v196;
        v119 = v196 + 4;
        v196 += 4;
        if (v118 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v119 = v196;
        }
        *(_DWORD *)&v193[v119] = -698416192;
        v68 = v196 + 4;
        v196 += 4;
        goto LABEL_123;
      }
    }
    v88 = (char)v87;
    if ((char)v87 == 63)
    {
      v89 = v196;
      v90 = v195;
      if (v86 != 31)
      {
        v92 = v86 & 0x1F | 0xD2800000;
        goto LABEL_93;
      }
    }
    else
    {
      v89 = v196;
      v90 = v195;
      if ((char)v86 != 31 && v88 != 31)
      {
        v92 = v86 & 0xFFE0FFFF | ((v88 & 0x1F) << 16) | 0xAA0003E0;
LABEL_93:
        if (v89 + 4 > v90)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v72, v59, v60, v61, v62, v63, v64);
          v89 = v196;
        }
        *(_DWORD *)&v193[v89] = v92;
        v196 += 4;
        v76 = (char *)__dst;
        v77 = HIDWORD(v177);
        goto LABEL_96;
      }
    }
    v92 = (char)v86 | (32 * v88) | 0x91000000;
    goto LABEL_93;
  }
LABEL_123:
  if (HIDWORD(v171))
  {
    v120 = 0;
    v121 = 0;
    v122 = 12 * HIDWORD(v171);
    do
    {
      if (v121 >= HIDWORD(v171))
        goto LABEL_175;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v120), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v121;
      v120 += 12;
    }
    while (v122 != v120);
    v68 = v196;
  }
  if (v68 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v68 = v196;
  }
  *(_DWORD *)&v193[v68] = -129662679;
  v123 = v196;
  v124 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C0054);
  }
  v202[52] &= ~v205;
  v125 = v203 & 0x1F | 0xF8410120;
  if (v123 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v124 = v196;
  }
  *(_DWORD *)&v193[v124] = v125;
  v126 = v196;
  v127 = v196 + 4;
  v196 += 4;
  if (v126 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v127 = v196;
  }
  *(_DWORD *)&v193[v127] = -702610944;
  v196 += 4;
  __dst = 0;
  v177 = 0;
  v178 = -1;
  v179 = v180;
  v181 = 128;
  v128 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v128 != -1)
  {
    v175 = &v173;
    v174 = &v175;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v129 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v137 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v137)
  {
    v137 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v137, v129);
  }
  v138 = *(_QWORD *)v137;
  if (*(_QWORD *)v137 != v137 + 8)
  {
    v139 = *(_DWORD *)(v137 + 136);
    if (v181 < v139)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v130, v131, v132, v133, v134, v135, v136);
        v138 = *(_QWORD *)v137;
        v139 = *(_DWORD *)(v137 + 136);
      }
      v179 = (_BYTE *)v138;
      v181 = v139;
      *(_QWORD *)v137 = v137 + 8;
      *(_DWORD *)(v137 + 136) = 128;
    }
  }
  v140 = 1;
  v182 = 1;
  v183 = 0;
  v184 = 6;
  v185 = 0u;
  v186 = 0u;
  v187 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v188, 1, v132, v133, v134, v135, v136);
  BYTE2(v183) = 1;
  if (byte_1ECF4C288)
    goto LABEL_163;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v140 = HIBYTE(word_1ECF4C286) != 0;
LABEL_163:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v140, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_148;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_148:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v141, v142, v143, v144, v145, v146, v147);
  v155 = v167;
  if (v20 != v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
  }
  v156 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v156, v148, v149, v150, v151, v152, v153, v154);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v188, v148, v149, v150, v151, v152, v153, v154);
}

uint64_t JSC::putByValWithStringTransitionReallocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  int *v32;
  int *v33;
  int v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  _QWORD *v50;
  int v51;
  _BYTE *v52;
  WTF *v53;
  char *v54;
  uint64_t *v55;
  BOOL v56;
  JSC *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint8x8_t v80;
  __int32 v81;
  uint8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v92;
  _QWORD *v93;
  char v94;
  char v95;
  uint64_t v96;
  unsigned __int8 *v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  unsigned __int8 *v102;
  char *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  int v106;
  char *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  pthread_key_t *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  char v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  int64_t v158;
  WTF *v159;
  WTF *v160;
  unsigned int v162;
  int v163;
  char v164;
  __int16 v165;
  char v166;
  WTF *v167;
  uint64_t v168;
  _BYTE v169[24];
  WTF *p_dst;
  uint64_t v171;
  _BYTE v172[31];
  char v173;
  char **v174;
  char *v175;
  void *__dst;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  char v182;
  int v183;
  int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _DWORD v188[6];
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  _BYTE v194[128];
  unsigned int v195;
  unsigned int v196;
  int v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _DWORD *v202;
  char v203;
  uint64_t v204;
  int v205;
  _DWORD *v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  LOBYTE(v188[0]) = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0x8000000080000000;
  v193 = v194;
  v195 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v167;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v195;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v195 < v16)
    {
      if (v193 && v193 != v194)
      {
        WTF::fastFree((unint64_t)v193, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v193 = (_BYTE *)v14;
      v195 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v195;
    }
  }
  v17 = 0;
  v198 = 1;
  v203 = 16;
  v205 = 0x10000;
  v207 = 17;
  v209 = 0x20000;
  v196 = 0;
  v197 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = v188;
  v204 = 0;
  v206 = v188;
  v208 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v196;
  }
  *(_DWORD *)&v193[v17] = -1447068675;
  v18 = v196 + 4;
  v196 += 4;
  v19 = (WTF *)v172;
  p_dst = (WTF *)v172;
  v171 = 2;
  v20 = (WTF *)v169;
  v167 = (WTF *)v169;
  v168 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v188, "check structure");
    v18 = v196;
  }
  if (v18 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v196;
  }
  *(_DWORD *)&v193[v18] = -1203765243;
  v21 = v196;
  v22 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C0E7CLL);
  }
  v206[52] &= ~v209;
  v23 = v207 & 0x1F | 0xB8418120;
  if (v21 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v22 = v196;
  }
  *(_DWORD *)&v193[v22] = v23;
  v24 = v196;
  v25 = v196 + 4;
  v196 += 4;
  if (v24 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v196;
  }
  *(_DWORD *)&v193[v25] = 1796276415;
  v26 = v196 + 4;
  v196 += 4;
  if (v210)
  {
    for (; (int)v26 < SHIDWORD(v192); v196 = v26)
    {
      if (v26 + 4 > v195)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v26 = v196;
      }
      *(_DWORD *)&v193[v26] = -721215457;
      v26 = v196 + 4;
    }
    v197 = 0;
  }
  if (v26 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v26 = v196;
  }
  *(_DWORD *)&v193[v26] = 1409286145;
  v27 = v196;
  v196 += 4;
  v28 = v196;
  v29 = v27 + 8;
  v30 = v196;
  if (v29 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v30 = v196;
  }
  *(_DWORD *)&v193[v30] = -721215457;
  v196 += 4;
  if (v210)
    v31 = -122;
  else
    v31 = -126;
  v162 = v28;
  v163 = 0;
  v164 = v31;
  v165 = 1;
  v166 = -1;
  if (v28 != -1)
  {
    if (HIDWORD(v171) == (_DWORD)v171)
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v171) + 1), (unint64_t)&v162, v8, v9, v10, v11, v12);
      v34 = *v32;
      v33 = v32 + 1;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v34;
    }
    else
    {
      v33 = &v163;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v28;
    }
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++HIDWORD(v171);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v188, 0, 5, v9, v10, v11, v12);
  v43 = (uint64_t *)__dst;
  v44 = HIDWORD(v177);
  if (HIDWORD(v177))
  {
    v45 = HIDWORD(v171);
    v46 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
    if (v46 > v171)
    {
      v47 = v171 + ((unint64_t)v171 >> 2);
      if (v47 >= 0x10)
        v48 = v47 + 1;
      else
        v48 = 16;
      if (v48 <= v46)
        v48 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
      v49 = p_dst;
      if (v48 < 3)
      {
        p_dst = (WTF *)v172;
        LODWORD(v171) = 2;
        v52 = v172;
      }
      else
      {
        if (v48 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C1018);
        }
        v50 = a2;
        v51 = 12 * v48;
        v52 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
        LODWORD(v171) = (v51 & 0xFFFFFFFC) / 0xC;
        p_dst = (WTF *)v52;
        a2 = v50;
        v19 = (WTF *)v172;
      }
      if (v45)
      {
        v53 = v49;
        do
        {
          *(_DWORD *)v52 = *(_DWORD *)v53;
          *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v53 + 4);
          v53 = (WTF *)((char *)v53 + 12);
          v52 += 12;
        }
        while (v53 != (WTF *)((char *)v49 + 12 * v45));
      }
      if (v172 != (_BYTE *)v49 && v49)
      {
        if (p_dst == v49)
        {
          p_dst = 0;
          LODWORD(v171) = 0;
        }
        WTF::fastFree((unint64_t)v49, v36, v37, v38, v39, v40, v41, v42);
      }
    }
    if (v46 < HIDWORD(v171))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C1010);
    }
    v54 = (char *)p_dst + 12 * HIDWORD(v171);
    v55 = (uint64_t *)((char *)v43 + 12 * v44);
    do
    {
      *(_DWORD *)v54 = *(_DWORD *)v43;
      *(_QWORD *)(v54 + 4) = *(uint64_t *)((char *)v43 + 4);
      v43 = (uint64_t *)((char *)v43 + 12);
      v54 += 12;
    }
    while (v43 != v55);
    HIDWORD(v171) = v46;
    v43 = (uint64_t *)__dst;
    v20 = (WTF *)v169;
  }
  v56 = &v178 == v43 || v43 == 0;
  if (!v56)
  {
    __dst = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  }
  v57 = this;
  JSC::transitionHandlerImpl<true,true>(this, (uint64_t)v188, (uint64_t)&v167, 0, 2, 5, 6, 1, 4);
  v65 = v196;
  if (v196 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v65 = v196;
  }
  *(_DWORD *)&v193[v65] = -1463714819;
  v66 = v196;
  v67 = v196 + 4;
  v196 += 4;
  if (v66 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v67 = v196;
  }
  *(_DWORD *)&v193[v67] = -698416192;
  v68 = v196 + 4;
  v196 += 4;
  if (HIDWORD(v168))
  {
    v69 = 0;
    v70 = 0;
    v71 = 12 * HIDWORD(v168);
    do
    {
      if (v70 >= HIDWORD(v168))
      {
        __break(0xC471u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1981C1008);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v167 + v69), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v70;
      v69 += 12;
    }
    while (v71 != v69);
    __dst = &v178;
    LODWORD(v178) = 34144512;
    WORD2(v178) = 770;
    v177 = 0x300000003;
    v73 = 3;
    while (1)
    {
      v74 = 0;
      v75 = 0;
      v76 = (char *)__dst;
      v77 = v73;
      do
      {
        if ((*((_BYTE *)__dst + v74 + 1) & 0x40) != 0)
          goto LABEL_174;
        v75 |= 1 << *((_BYTE *)__dst + v74 + 1);
        v74 += 2;
      }
      while (2 * v73 != v74);
      v78 = 0;
      do
      {
        v79 = *((_BYTE *)__dst + v78) & 0x7F;
        if (v79 >= 0x40)
          goto LABEL_174;
        v75 &= ~(1 << v79);
        v78 += 2;
      }
      while (2 * v73 != v78);
      v80 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v80.i16[0] = vaddlv_u8(v80);
      v81 = v80.i32[0];
      v82 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v75));
      v82.i16[0] = vaddlv_u8(v82);
      if (!(v82.i32[0] + v81))
      {
        v159 = v20;
        v160 = v19;
        v93 = a2;
        v94 = *(_BYTE *)__dst;
        v95 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v188, *(char *)__dst, v95, v60, v61, v62, v63, v64);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v177) - 2);
        v96 = (HIDWORD(v177) - 1);
        v56 = HIDWORD(v177) == 1;
        HIDWORD(v177) = v96;
        v97 = (unsigned __int8 *)__dst;
        v98 = (char *)__dst + 2 * v96;
        if (v56)
        {
          v105 = 0;
          v106 = 0;
          v101 = 0;
          v72 = (char *)__dst + 2 * v96;
        }
        else
        {
          v99 = 2 * v96;
          v100 = __dst;
          while (*v100 != v95)
          {
            v100 += 2;
            v99 -= 2;
            if (!v99)
              goto LABEL_104;
          }
          *v100 = v94;
LABEL_104:
          v101 = 0;
          v102 = v97;
          v72 = v98;
          v103 = v98;
          do
          {
            if (*v97 == v97[1])
            {
              v104 = v97;
              if (v103 != (char *)__dst + 2 * HIDWORD(v177))
              {
                if (v97 == (unsigned __int8 *)v72)
                {
                  v104 = (unsigned __int8 *)v103;
                }
                else
                {
                  v158 = v102 - (unsigned __int8 *)v72;
                  memmove(v103, v72, v102 - (unsigned __int8 *)v72);
                  v104 = (unsigned __int8 *)&v103[v158];
                }
              }
              v72 = (char *)(v97 + 2);
              ++v101;
              v103 = (char *)v104;
            }
            v97 += 2;
            v102 += 2;
          }
          while (v97 < (unsigned __int8 *)v98);
          v97 = (unsigned __int8 *)__dst;
          v105 = HIDWORD(v177);
          v106 = HIDWORD(v177);
          v98 = v103;
        }
        v107 = (char *)&v97[2 * v105];
        v20 = v159;
        if (v72 != v107)
        {
          memmove(v98, v72, v107 - v72);
          v106 = HIDWORD(v177);
        }
        v73 = v106 - v101;
        a2 = v93;
        v19 = v160;
        v57 = this;
        goto LABEL_97;
      }
      v83 = 0;
      v84 = v73 <= 1uLL ? 1 : v73;
      v85 = 2 * v84;
      while (1)
      {
        v86 = *((unsigned __int8 *)__dst + v83 + 1);
        if ((v86 & 0x7Fu) >= 0x40)
          goto LABEL_174;
        if (((v75 >> (v86 & 0x7F)) & 1) != 0)
          break;
        v83 += 2;
        if (v85 == v83)
          goto LABEL_98;
      }
      v87 = *((unsigned __int8 *)__dst + v83);
      if (v87 != v86)
        break;
LABEL_96:
      memmove(&v76[v83], &v76[v83 + 2], 2 * v77 - v83 - 2);
      v73 = HIDWORD(v177) - 1;
LABEL_97:
      HIDWORD(v177) = v73;
LABEL_98:
      if (!v73)
      {
        v108 = __dst;
        if (&v178 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v177) = 0;
          WTF::fastFree((unint64_t)v108, v72, v59, v60, v61, v62, v63, v64);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)v57, 0, v60, v61, v62, v63, v64);
        if (!v198)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C0F5CLL);
        }
        v202[52] &= ~v205;
        v114 = v203;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)operationReallocateButterflyAndTransition, v203, v109, v110, v111, v112, v113);
        v197 = 0;
        v115 = v196;
        if (v196 + 4 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v115 = v196;
        }
        *(_DWORD *)&v193[v115] = (32 * (v114 & 0x1F)) | 0xD63F0000;
        v116 = v196;
        v117 = v196 + 4;
        v196 += 4;
        if (v116 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v117 = v196;
        }
        *(_DWORD *)&v193[v117] = -1463714819;
        v118 = v196;
        v119 = v196 + 4;
        v196 += 4;
        if (v118 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v119 = v196;
        }
        *(_DWORD *)&v193[v119] = -698416192;
        v68 = v196 + 4;
        v196 += 4;
        goto LABEL_123;
      }
    }
    v88 = (char)v87;
    if ((char)v87 == 63)
    {
      v89 = v196;
      v90 = v195;
      if (v86 != 31)
      {
        v92 = v86 & 0x1F | 0xD2800000;
        goto LABEL_93;
      }
    }
    else
    {
      v89 = v196;
      v90 = v195;
      if ((char)v86 != 31 && v88 != 31)
      {
        v92 = v86 & 0xFFE0FFFF | ((v88 & 0x1F) << 16) | 0xAA0003E0;
LABEL_93:
        if (v89 + 4 > v90)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v72, v59, v60, v61, v62, v63, v64);
          v89 = v196;
        }
        *(_DWORD *)&v193[v89] = v92;
        v196 += 4;
        v76 = (char *)__dst;
        v77 = HIDWORD(v177);
        goto LABEL_96;
      }
    }
    v92 = (char)v86 | (32 * v88) | 0x91000000;
    goto LABEL_93;
  }
LABEL_123:
  if (HIDWORD(v171))
  {
    v120 = 0;
    v121 = 0;
    v122 = 12 * HIDWORD(v171);
    do
    {
      if (v121 >= HIDWORD(v171))
        goto LABEL_175;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v120), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v121;
      v120 += 12;
    }
    while (v122 != v120);
    v68 = v196;
  }
  if (v68 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v68 = v196;
  }
  *(_DWORD *)&v193[v68] = -129662679;
  v123 = v196;
  v124 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C0F0CLL);
  }
  v202[52] &= ~v205;
  v125 = v203 & 0x1F | 0xF8410120;
  if (v123 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v124 = v196;
  }
  *(_DWORD *)&v193[v124] = v125;
  v126 = v196;
  v127 = v196 + 4;
  v196 += 4;
  if (v126 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v127 = v196;
  }
  *(_DWORD *)&v193[v127] = -702610944;
  v196 += 4;
  __dst = 0;
  v177 = 0;
  v178 = -1;
  v179 = v180;
  v181 = 128;
  v128 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v128 != -1)
  {
    v175 = &v173;
    v174 = &v175;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v129 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v137 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v137)
  {
    v137 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v137, v129);
  }
  v138 = *(_QWORD *)v137;
  if (*(_QWORD *)v137 != v137 + 8)
  {
    v139 = *(_DWORD *)(v137 + 136);
    if (v181 < v139)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v130, v131, v132, v133, v134, v135, v136);
        v138 = *(_QWORD *)v137;
        v139 = *(_DWORD *)(v137 + 136);
      }
      v179 = (_BYTE *)v138;
      v181 = v139;
      *(_QWORD *)v137 = v137 + 8;
      *(_DWORD *)(v137 + 136) = 128;
    }
  }
  v140 = 1;
  v182 = 1;
  v183 = 0;
  v184 = 6;
  v185 = 0u;
  v186 = 0u;
  v187 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v188, 1, v132, v133, v134, v135, v136);
  BYTE2(v183) = 1;
  if (byte_1ECF4C288)
    goto LABEL_163;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v140 = HIBYTE(word_1ECF4C286) != 0;
LABEL_163:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v140, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_148;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_148:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v141, v142, v143, v144, v145, v146, v147);
  v155 = v167;
  if (v20 != v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
  }
  v156 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v156, v148, v149, v150, v151, v152, v153, v154);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v188, v148, v149, v150, v151, v152, v153, v154);
}

uint64_t JSC::putByValWithSymbolTransitionReallocatingHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  int *v32;
  int *v33;
  int v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  _QWORD *v50;
  int v51;
  _BYTE *v52;
  WTF *v53;
  char *v54;
  uint64_t *v55;
  BOOL v56;
  JSC *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint8x8_t v80;
  __int32 v81;
  uint8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v92;
  _QWORD *v93;
  char v94;
  char v95;
  uint64_t v96;
  unsigned __int8 *v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  unsigned __int8 *v102;
  char *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  int v106;
  char *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  pthread_key_t *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  char v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  int64_t v158;
  WTF *v159;
  WTF *v160;
  unsigned int v162;
  int v163;
  char v164;
  __int16 v165;
  char v166;
  WTF *v167;
  uint64_t v168;
  _BYTE v169[24];
  WTF *p_dst;
  uint64_t v171;
  _BYTE v172[31];
  char v173;
  char **v174;
  char *v175;
  void *__dst;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  char v182;
  int v183;
  int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _DWORD v188[6];
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  _BYTE v194[128];
  unsigned int v195;
  unsigned int v196;
  int v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _DWORD *v202;
  char v203;
  uint64_t v204;
  int v205;
  _DWORD *v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  LOBYTE(v188[0]) = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0x8000000080000000;
  v193 = v194;
  v195 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v167;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v195;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v195 < v16)
    {
      if (v193 && v193 != v194)
      {
        WTF::fastFree((unint64_t)v193, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v193 = (_BYTE *)v14;
      v195 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v195;
    }
  }
  v17 = 0;
  v198 = 1;
  v203 = 16;
  v205 = 0x10000;
  v207 = 17;
  v209 = 0x20000;
  v196 = 0;
  v197 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = v188;
  v204 = 0;
  v206 = v188;
  v208 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v196;
  }
  *(_DWORD *)&v193[v17] = -1447068675;
  v18 = v196 + 4;
  v196 += 4;
  v19 = (WTF *)v172;
  p_dst = (WTF *)v172;
  v171 = 2;
  v20 = (WTF *)v169;
  v167 = (WTF *)v169;
  v168 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v188, "check structure");
    v18 = v196;
  }
  if (v18 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v196;
  }
  *(_DWORD *)&v193[v18] = -1203765243;
  v21 = v196;
  v22 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C1D34);
  }
  v206[52] &= ~v209;
  v23 = v207 & 0x1F | 0xB8418120;
  if (v21 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v22 = v196;
  }
  *(_DWORD *)&v193[v22] = v23;
  v24 = v196;
  v25 = v196 + 4;
  v196 += 4;
  if (v24 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v196;
  }
  *(_DWORD *)&v193[v25] = 1796276415;
  v26 = v196 + 4;
  v196 += 4;
  if (v210)
  {
    for (; (int)v26 < SHIDWORD(v192); v196 = v26)
    {
      if (v26 + 4 > v195)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v26 = v196;
      }
      *(_DWORD *)&v193[v26] = -721215457;
      v26 = v196 + 4;
    }
    v197 = 0;
  }
  if (v26 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v26 = v196;
  }
  *(_DWORD *)&v193[v26] = 1409286145;
  v27 = v196;
  v196 += 4;
  v28 = v196;
  v29 = v27 + 8;
  v30 = v196;
  if (v29 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v30 = v196;
  }
  *(_DWORD *)&v193[v30] = -721215457;
  v196 += 4;
  if (v210)
    v31 = -122;
  else
    v31 = -126;
  v162 = v28;
  v163 = 0;
  v164 = v31;
  v165 = 1;
  v166 = -1;
  if (v28 != -1)
  {
    if (HIDWORD(v171) == (_DWORD)v171)
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v171) + 1), (unint64_t)&v162, v8, v9, v10, v11, v12);
      v34 = *v32;
      v33 = v32 + 1;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v34;
    }
    else
    {
      v33 = &v163;
      v35 = (char *)p_dst + 12 * HIDWORD(v171);
      *(_DWORD *)v35 = v28;
    }
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++HIDWORD(v171);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v188, 1, 5, v9, v10, v11, v12);
  v43 = (uint64_t *)__dst;
  v44 = HIDWORD(v177);
  if (HIDWORD(v177))
  {
    v45 = HIDWORD(v171);
    v46 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
    if (v46 > v171)
    {
      v47 = v171 + ((unint64_t)v171 >> 2);
      if (v47 >= 0x10)
        v48 = v47 + 1;
      else
        v48 = 16;
      if (v48 <= v46)
        v48 = HIDWORD(v171) + (unint64_t)HIDWORD(v177);
      v49 = p_dst;
      if (v48 < 3)
      {
        p_dst = (WTF *)v172;
        LODWORD(v171) = 2;
        v52 = v172;
      }
      else
      {
        if (v48 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C1ED0);
        }
        v50 = a2;
        v51 = 12 * v48;
        v52 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
        LODWORD(v171) = (v51 & 0xFFFFFFFC) / 0xC;
        p_dst = (WTF *)v52;
        a2 = v50;
        v19 = (WTF *)v172;
      }
      if (v45)
      {
        v53 = v49;
        do
        {
          *(_DWORD *)v52 = *(_DWORD *)v53;
          *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v53 + 4);
          v53 = (WTF *)((char *)v53 + 12);
          v52 += 12;
        }
        while (v53 != (WTF *)((char *)v49 + 12 * v45));
      }
      if (v172 != (_BYTE *)v49 && v49)
      {
        if (p_dst == v49)
        {
          p_dst = 0;
          LODWORD(v171) = 0;
        }
        WTF::fastFree((unint64_t)v49, v36, v37, v38, v39, v40, v41, v42);
      }
    }
    if (v46 < HIDWORD(v171))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C1EC8);
    }
    v54 = (char *)p_dst + 12 * HIDWORD(v171);
    v55 = (uint64_t *)((char *)v43 + 12 * v44);
    do
    {
      *(_DWORD *)v54 = *(_DWORD *)v43;
      *(_QWORD *)(v54 + 4) = *(uint64_t *)((char *)v43 + 4);
      v43 = (uint64_t *)((char *)v43 + 12);
      v54 += 12;
    }
    while (v43 != v55);
    HIDWORD(v171) = v46;
    v43 = (uint64_t *)__dst;
    v20 = (WTF *)v169;
  }
  v56 = &v178 == v43 || v43 == 0;
  if (!v56)
  {
    __dst = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  }
  v57 = this;
  JSC::transitionHandlerImpl<true,true>(this, (uint64_t)v188, (uint64_t)&v167, 0, 2, 5, 6, 1, 4);
  v65 = v196;
  if (v196 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v65 = v196;
  }
  *(_DWORD *)&v193[v65] = -1463714819;
  v66 = v196;
  v67 = v196 + 4;
  v196 += 4;
  if (v66 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v67 = v196;
  }
  *(_DWORD *)&v193[v67] = -698416192;
  v68 = v196 + 4;
  v196 += 4;
  if (HIDWORD(v168))
  {
    v69 = 0;
    v70 = 0;
    v71 = 12 * HIDWORD(v168);
    do
    {
      if (v70 >= HIDWORD(v168))
      {
        __break(0xC471u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1981C1EC0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v167 + v69), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v70;
      v69 += 12;
    }
    while (v71 != v69);
    __dst = &v178;
    LODWORD(v178) = 34144512;
    WORD2(v178) = 770;
    v177 = 0x300000003;
    v73 = 3;
    while (1)
    {
      v74 = 0;
      v75 = 0;
      v76 = (char *)__dst;
      v77 = v73;
      do
      {
        if ((*((_BYTE *)__dst + v74 + 1) & 0x40) != 0)
          goto LABEL_174;
        v75 |= 1 << *((_BYTE *)__dst + v74 + 1);
        v74 += 2;
      }
      while (2 * v73 != v74);
      v78 = 0;
      do
      {
        v79 = *((_BYTE *)__dst + v78) & 0x7F;
        if (v79 >= 0x40)
          goto LABEL_174;
        v75 &= ~(1 << v79);
        v78 += 2;
      }
      while (2 * v73 != v78);
      v80 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v80.i16[0] = vaddlv_u8(v80);
      v81 = v80.i32[0];
      v82 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v75));
      v82.i16[0] = vaddlv_u8(v82);
      if (!(v82.i32[0] + v81))
      {
        v159 = v20;
        v160 = v19;
        v93 = a2;
        v94 = *(_BYTE *)__dst;
        v95 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v188, *(char *)__dst, v95, v60, v61, v62, v63, v64);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v177) - 2);
        v96 = (HIDWORD(v177) - 1);
        v56 = HIDWORD(v177) == 1;
        HIDWORD(v177) = v96;
        v97 = (unsigned __int8 *)__dst;
        v98 = (char *)__dst + 2 * v96;
        if (v56)
        {
          v105 = 0;
          v106 = 0;
          v101 = 0;
          v72 = (char *)__dst + 2 * v96;
        }
        else
        {
          v99 = 2 * v96;
          v100 = __dst;
          while (*v100 != v95)
          {
            v100 += 2;
            v99 -= 2;
            if (!v99)
              goto LABEL_104;
          }
          *v100 = v94;
LABEL_104:
          v101 = 0;
          v102 = v97;
          v72 = v98;
          v103 = v98;
          do
          {
            if (*v97 == v97[1])
            {
              v104 = v97;
              if (v103 != (char *)__dst + 2 * HIDWORD(v177))
              {
                if (v97 == (unsigned __int8 *)v72)
                {
                  v104 = (unsigned __int8 *)v103;
                }
                else
                {
                  v158 = v102 - (unsigned __int8 *)v72;
                  memmove(v103, v72, v102 - (unsigned __int8 *)v72);
                  v104 = (unsigned __int8 *)&v103[v158];
                }
              }
              v72 = (char *)(v97 + 2);
              ++v101;
              v103 = (char *)v104;
            }
            v97 += 2;
            v102 += 2;
          }
          while (v97 < (unsigned __int8 *)v98);
          v97 = (unsigned __int8 *)__dst;
          v105 = HIDWORD(v177);
          v106 = HIDWORD(v177);
          v98 = v103;
        }
        v107 = (char *)&v97[2 * v105];
        v20 = v159;
        if (v72 != v107)
        {
          memmove(v98, v72, v107 - v72);
          v106 = HIDWORD(v177);
        }
        v73 = v106 - v101;
        a2 = v93;
        v19 = v160;
        v57 = this;
        goto LABEL_97;
      }
      v83 = 0;
      v84 = v73 <= 1uLL ? 1 : v73;
      v85 = 2 * v84;
      while (1)
      {
        v86 = *((unsigned __int8 *)__dst + v83 + 1);
        if ((v86 & 0x7Fu) >= 0x40)
          goto LABEL_174;
        if (((v75 >> (v86 & 0x7F)) & 1) != 0)
          break;
        v83 += 2;
        if (v85 == v83)
          goto LABEL_98;
      }
      v87 = *((unsigned __int8 *)__dst + v83);
      if (v87 != v86)
        break;
LABEL_96:
      memmove(&v76[v83], &v76[v83 + 2], 2 * v77 - v83 - 2);
      v73 = HIDWORD(v177) - 1;
LABEL_97:
      HIDWORD(v177) = v73;
LABEL_98:
      if (!v73)
      {
        v108 = __dst;
        if (&v178 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v177) = 0;
          WTF::fastFree((unint64_t)v108, v72, v59, v60, v61, v62, v63, v64);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)v57, 0, v60, v61, v62, v63, v64);
        if (!v198)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C1E14);
        }
        v202[52] &= ~v205;
        v114 = v203;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v188, (uint64_t)operationReallocateButterflyAndTransition, v203, v109, v110, v111, v112, v113);
        v197 = 0;
        v115 = v196;
        if (v196 + 4 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v115 = v196;
        }
        *(_DWORD *)&v193[v115] = (32 * (v114 & 0x1F)) | 0xD63F0000;
        v116 = v196;
        v117 = v196 + 4;
        v196 += 4;
        if (v116 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v117 = v196;
        }
        *(_DWORD *)&v193[v117] = -1463714819;
        v118 = v196;
        v119 = v196 + 4;
        v196 += 4;
        if (v118 + 8 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
          v119 = v196;
        }
        *(_DWORD *)&v193[v119] = -698416192;
        v68 = v196 + 4;
        v196 += 4;
        goto LABEL_123;
      }
    }
    v88 = (char)v87;
    if ((char)v87 == 63)
    {
      v89 = v196;
      v90 = v195;
      if (v86 != 31)
      {
        v92 = v86 & 0x1F | 0xD2800000;
        goto LABEL_93;
      }
    }
    else
    {
      v89 = v196;
      v90 = v195;
      if ((char)v86 != 31 && v88 != 31)
      {
        v92 = v86 & 0xFFE0FFFF | ((v88 & 0x1F) << 16) | 0xAA0003E0;
LABEL_93:
        if (v89 + 4 > v90)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, (uint64_t)v72, v59, v60, v61, v62, v63, v64);
          v89 = v196;
        }
        *(_DWORD *)&v193[v89] = v92;
        v196 += 4;
        v76 = (char *)__dst;
        v77 = HIDWORD(v177);
        goto LABEL_96;
      }
    }
    v92 = (char)v86 | (32 * v88) | 0x91000000;
    goto LABEL_93;
  }
LABEL_123:
  if (HIDWORD(v171))
  {
    v120 = 0;
    v121 = 0;
    v122 = 12 * HIDWORD(v171);
    do
    {
      if (v121 >= HIDWORD(v171))
        goto LABEL_175;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v120), (uint64_t)v188, v59, v60, v61, v62, v63, v64);
      ++v121;
      v120 += 12;
    }
    while (v122 != v120);
    v68 = v196;
  }
  if (v68 + 4 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v68 = v196;
  }
  *(_DWORD *)&v193[v68] = -129662679;
  v123 = v196;
  v124 = v196 + 4;
  v196 += 4;
  if (!v198)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C1DC4);
  }
  v202[52] &= ~v205;
  v125 = v203 & 0x1F | 0xF8410120;
  if (v123 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v124 = v196;
  }
  *(_DWORD *)&v193[v124] = v125;
  v126 = v196;
  v127 = v196 + 4;
  v196 += 4;
  if (v126 + 8 > v195)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v193, v58, v59, v60, v61, v62, v63, v64);
    v127 = v196;
  }
  *(_DWORD *)&v193[v127] = -702610944;
  v196 += 4;
  __dst = 0;
  v177 = 0;
  v178 = -1;
  v179 = v180;
  v181 = 128;
  v128 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v128 != -1)
  {
    v175 = &v173;
    v174 = &v175;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v129 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v137 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v137)
  {
    v137 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v137, v129);
  }
  v138 = *(_QWORD *)v137;
  if (*(_QWORD *)v137 != v137 + 8)
  {
    v139 = *(_DWORD *)(v137 + 136);
    if (v181 < v139)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v130, v131, v132, v133, v134, v135, v136);
        v138 = *(_QWORD *)v137;
        v139 = *(_DWORD *)(v137 + 136);
      }
      v179 = (_BYTE *)v138;
      v181 = v139;
      *(_QWORD *)v137 = v137 + 8;
      *(_DWORD *)(v137 + 136) = 128;
    }
  }
  v140 = 1;
  v182 = 1;
  v183 = 0;
  v184 = 6;
  v185 = 0u;
  v186 = 0u;
  v187 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v188, 1, v132, v133, v134, v135, v136);
  BYTE2(v183) = 1;
  if (byte_1ECF4C288)
    goto LABEL_163;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v140 = HIBYTE(word_1ECF4C286) != 0;
LABEL_163:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v140, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_148;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_148:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v141, v142, v143, v144, v145, v146, v147);
  v155 = v167;
  if (v20 != v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
  }
  v156 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v156, v148, v149, v150, v151, v152, v153, v154);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v188, v148, v149, v150, v151, v152, v153, v154);
}

uint64_t JSC::putByValWithStringTransitionReallocatingOutOfLineHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  _BYTE *v51;
  WTF *v52;
  char *v53;
  uint64_t *v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint8x8_t v63;
  __int32 v64;
  uint8x8_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v75;
  WTF *v76;
  _QWORD *v77;
  char v78;
  char v79;
  uint64_t v80;
  unsigned __int8 *v81;
  char *v82;
  uint64_t v83;
  _BYTE *v84;
  int v85;
  unsigned __int8 *v86;
  char *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  int v90;
  char *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  pthread_key_t *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  unsigned int v131;
  char v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF *v147;
  int64_t v149;
  unsigned int v151;
  int v152;
  char v153;
  __int16 v154;
  char v155;
  WTF *p_dst;
  uint64_t v157;
  _BYTE v158[31];
  char v159;
  char **v160;
  char *v161;
  void *__dst;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  _BYTE v166[128];
  unsigned int v167;
  char v168;
  int v169;
  int v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _DWORD v174[6];
  char v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  unsigned int v182;
  int v183;
  char v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _DWORD *v188;
  char v189;
  uint64_t v190;
  int v191;
  _DWORD *v192;
  char v193;
  uint64_t v194;
  int v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  LOBYTE(v174[0]) = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0x8000000080000000;
  v179 = v180;
  v181 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v161;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v181;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v181 < v16)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v179 = (_BYTE *)v14;
      v181 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v181;
    }
  }
  v17 = 0;
  v184 = 1;
  v189 = 16;
  v191 = 0x10000;
  v193 = 17;
  v195 = 0x20000;
  v182 = 0;
  v183 = 0;
  v185 = 0u;
  v186 = 0u;
  v187 = 0u;
  v188 = v174;
  v190 = 0;
  v192 = v174;
  v194 = 0;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v182;
  }
  *(_DWORD *)&v179[v17] = -1447068675;
  v18 = v182 + 4;
  v182 += 4;
  v19 = (WTF *)v158;
  p_dst = (WTF *)v158;
  v157 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v174, "check structure");
    v18 = v182;
  }
  if (v18 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v182;
  }
  *(_DWORD *)&v179[v18] = -1203765243;
  v20 = v182;
  v21 = v182 + 4;
  v182 += 4;
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C2AFCLL);
  }
  v192[52] &= ~v195;
  v22 = v193 & 0x1F | 0xB8418120;
  if (v20 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v21 = v182;
  }
  *(_DWORD *)&v179[v21] = v22;
  v23 = v182;
  v24 = v182 + 4;
  v182 += 4;
  if (v23 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v182;
  }
  *(_DWORD *)&v179[v24] = 1796276415;
  v25 = v182 + 4;
  v182 += 4;
  if (v196)
  {
    for (; (int)v25 < SHIDWORD(v178); v182 = v25)
    {
      if (v25 + 4 > v181)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v25 = v182;
      }
      *(_DWORD *)&v179[v25] = -721215457;
      v25 = v182 + 4;
    }
    v183 = 0;
  }
  if (v25 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v182;
  }
  *(_DWORD *)&v179[v25] = 1409286145;
  v26 = v182;
  v182 += 4;
  v27 = v182;
  v28 = v26 + 8;
  v29 = v182;
  if (v28 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v182;
  }
  *(_DWORD *)&v179[v29] = -721215457;
  v182 += 4;
  if (v196)
    v30 = -122;
  else
    v30 = -126;
  v151 = v27;
  v152 = 0;
  v153 = v30;
  v154 = 1;
  v155 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v157) == (_DWORD)v157)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v157) + 1), (unint64_t)&v151, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)p_dst + 12 * HIDWORD(v157);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v152;
      v34 = (char *)p_dst + 12 * HIDWORD(v157);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v157);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v174, 0, 5, v9, v10, v11, v12);
  v42 = (uint64_t *)__dst;
  v43 = HIDWORD(v163);
  if (!HIDWORD(v163))
    goto LABEL_57;
  v44 = HIDWORD(v157);
  v45 = HIDWORD(v157) + (unint64_t)HIDWORD(v163);
  if (v45 > v157)
  {
    v46 = v157 + ((unint64_t)v157 >> 2);
    if (v46 >= 0x10)
      v47 = v46 + 1;
    else
      v47 = 16;
    if (v47 <= v45)
      v47 = HIDWORD(v157) + (unint64_t)HIDWORD(v163);
    v48 = p_dst;
    if (v47 < 3)
    {
      p_dst = (WTF *)v158;
      LODWORD(v157) = 2;
      v51 = v158;
    }
    else
    {
      if (v47 >= 0x15555556)
        goto LABEL_164;
      v49 = a2;
      v50 = 12 * v47;
      v51 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
      LODWORD(v157) = (v50 & 0xFFFFFFFC) / 0xC;
      p_dst = (WTF *)v51;
      a2 = v49;
      v19 = (WTF *)v158;
    }
    if (v44)
    {
      v52 = v48;
      do
      {
        *(_DWORD *)v51 = *(_DWORD *)v52;
        *(_QWORD *)(v51 + 4) = *(_QWORD *)((char *)v52 + 4);
        v52 = (WTF *)((char *)v52 + 12);
        v51 += 12;
      }
      while (v52 != (WTF *)((char *)v48 + 12 * v44));
    }
    if (v158 != (_BYTE *)v48 && v48)
    {
      if (p_dst == v48)
      {
        p_dst = 0;
        LODWORD(v157) = 0;
      }
      WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  if (v45 < HIDWORD(v157))
  {
    __break(0xC471u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(0xC471u);
    JUMPOUT(0x1981C2C60);
  }
  v53 = (char *)p_dst + 12 * HIDWORD(v157);
  v54 = (uint64_t *)((char *)v42 + 12 * v43);
  do
  {
    *(_DWORD *)v53 = *(_DWORD *)v42;
    *(_QWORD *)(v53 + 4) = *(uint64_t *)((char *)v42 + 4);
    v42 = (uint64_t *)((char *)v42 + 12);
    v53 += 12;
  }
  while (v42 != v54);
  HIDWORD(v157) = v45;
  v42 = (uint64_t *)__dst;
LABEL_57:
  v55 = &v164 == v42 || v42 == 0;
  if (!v55)
  {
    __dst = 0;
    LODWORD(v163) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  __dst = &v164;
  LODWORD(v164) = 34144512;
  WORD2(v164) = 770;
  v163 = 0x300000003;
  v56 = 3;
  do
  {
    v57 = 0;
    v58 = 0;
    v59 = (char *)__dst;
    v60 = v56;
    do
    {
      if ((*((_BYTE *)__dst + v57 + 1) & 0x40) != 0)
        goto LABEL_163;
      v58 |= 1 << *((_BYTE *)__dst + v57 + 1);
      v57 += 2;
    }
    while (2 * v56 != v57);
    v61 = 0;
    do
    {
      v62 = *((_BYTE *)__dst + v61) & 0x7F;
      if (v62 >= 0x40)
        goto LABEL_163;
      v58 &= ~(1 << v62);
      v61 += 2;
    }
    while (2 * v56 != v61);
    v63 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
    v63.i16[0] = vaddlv_u8(v63);
    v64 = v63.i32[0];
    v65 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v58));
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.i32[0] + v64)
    {
      v66 = 0;
      if (v56 <= 1uLL)
        v67 = 1;
      else
        v67 = v56;
      v68 = 2 * v67;
      while (1)
      {
        v69 = *((unsigned __int8 *)__dst + v66 + 1);
        if ((v69 & 0x7Fu) >= 0x40)
          goto LABEL_163;
        if (((v58 >> (v69 & 0x7F)) & 1) != 0)
          break;
        v66 += 2;
        if (v68 == v66)
          goto LABEL_90;
      }
      v70 = *((unsigned __int8 *)__dst + v66);
      if (v70 == v69)
        goto LABEL_88;
      v71 = (char)v70;
      if ((char)v70 == 63)
      {
        v72 = v182;
        v73 = v181;
        if (v69 != 31)
        {
          v75 = v69 & 0x1F | 0xD2800000;
          goto LABEL_85;
        }
      }
      else
      {
        v72 = v182;
        v73 = v181;
        if ((char)v69 != 31 && v71 != 31)
        {
          v75 = v69 & 0xFFE0FFFF | ((v71 & 0x1F) << 16) | 0xAA0003E0;
LABEL_85:
          if (v72 + 4 > v73)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
            v72 = v182;
          }
          *(_DWORD *)&v179[v72] = v75;
          v182 += 4;
          v59 = (char *)__dst;
          v60 = HIDWORD(v163);
LABEL_88:
          memmove(&v59[v66], &v59[v66 + 2], 2 * v60 - v66 - 2);
          v56 = HIDWORD(v163) - 1;
          goto LABEL_89;
        }
      }
      v75 = (char)v69 | (32 * v71) | 0x91000000;
      goto LABEL_85;
    }
    v76 = v19;
    v77 = a2;
    v78 = *(_BYTE *)__dst;
    v79 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v174, *(char *)__dst, v79, v37, v38, v39, v40, v41);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v163) - 2);
    v80 = (HIDWORD(v163) - 1);
    v55 = HIDWORD(v163) == 1;
    HIDWORD(v163) = v80;
    v81 = (unsigned __int8 *)__dst;
    v82 = (char *)__dst + 2 * v80;
    if (v55)
    {
      v89 = 0;
      v90 = 0;
      v85 = 0;
      v35 = (char *)__dst + 2 * v80;
    }
    else
    {
      v83 = 2 * v80;
      v84 = __dst;
      while (*v84 != v79)
      {
        v84 += 2;
        v83 -= 2;
        if (!v83)
          goto LABEL_96;
      }
      *v84 = v78;
LABEL_96:
      v85 = 0;
      v86 = v81;
      v35 = v82;
      v87 = v82;
      do
      {
        if (*v81 == v81[1])
        {
          v88 = v81;
          if (v87 != (char *)__dst + 2 * HIDWORD(v163))
          {
            if (v81 == (unsigned __int8 *)v35)
            {
              v88 = (unsigned __int8 *)v87;
            }
            else
            {
              v149 = v86 - (unsigned __int8 *)v35;
              memmove(v87, v35, v86 - (unsigned __int8 *)v35);
              v88 = (unsigned __int8 *)&v87[v149];
            }
          }
          v35 = (char *)(v81 + 2);
          ++v85;
          v87 = (char *)v88;
        }
        v81 += 2;
        v86 += 2;
      }
      while (v81 < (unsigned __int8 *)v82);
      v81 = (unsigned __int8 *)__dst;
      v89 = HIDWORD(v163);
      v90 = HIDWORD(v163);
      v82 = v87;
    }
    v91 = (char *)&v81[2 * v89];
    if (v35 != v91)
    {
      memmove(v82, v35, v91 - v35);
      v90 = HIDWORD(v163);
    }
    v56 = v90 - v85;
    a2 = v77;
    v19 = v76;
LABEL_89:
    HIDWORD(v163) = v56;
LABEL_90:
    ;
  }
  while (v56);
  v92 = __dst;
  if (&v164 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v163) = 0;
    WTF::fastFree((unint64_t)v92, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v174, (uint64_t)this, 0, v37, v38, v39, v40, v41);
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C2B5CLL);
  }
  v188[52] &= ~v191;
  v98 = v189;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v174, (uint64_t)operationReallocateButterflyAndTransition, v189, v93, v94, v95, v96, v97);
  v183 = 0;
  v106 = v182;
  if (v182 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v106 = v182;
  }
  *(_DWORD *)&v179[v106] = (32 * (v98 & 0x1F)) | 0xD63F0000;
  v107 = v182;
  v108 = v182 + 4;
  v182 += 4;
  if (v107 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v108 = v182;
  }
  *(_DWORD *)&v179[v108] = -1463714819;
  v109 = v182;
  v110 = v182 + 4;
  v182 += 4;
  if (v109 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v110 = v182;
  }
  *(_DWORD *)&v179[v110] = -698416192;
  v111 = v182 + 4;
  v182 += 4;
  if (HIDWORD(v157))
  {
    v112 = 0;
    v113 = 0;
    v114 = 12 * HIDWORD(v157);
    do
    {
      if (v113 >= HIDWORD(v157))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C2C50);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v112), (uint64_t)v174, v100, v101, v102, v103, v104, v105);
      ++v113;
      v112 += 12;
    }
    while (v114 != v112);
    v111 = v182;
  }
  if (v111 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v111 = v182;
  }
  *(_DWORD *)&v179[v111] = -129662679;
  v115 = v182;
  v116 = v182 + 4;
  v182 += 4;
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C2BBCLL);
  }
  v188[52] &= ~v191;
  v117 = v189 & 0x1F | 0xF8410120;
  if (v115 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v116 = v182;
  }
  *(_DWORD *)&v179[v116] = v117;
  v118 = v182;
  v119 = v182 + 4;
  v182 += 4;
  if (v118 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v119 = v182;
  }
  *(_DWORD *)&v179[v119] = -702610944;
  v182 += 4;
  __dst = 0;
  v163 = 0;
  v164 = -1;
  v165 = (WTF *)v166;
  v167 = 128;
  v120 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v120 != -1)
  {
    v161 = &v159;
    v160 = &v161;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v160, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v121 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v129 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v129)
  {
    v129 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v129, v121);
  }
  v130 = *(WTF **)v129;
  if (*(_QWORD *)v129 != v129 + 8)
  {
    v131 = *(_DWORD *)(v129 + 136);
    if (v167 < v131)
    {
      if (v165 && v165 != (WTF *)v166)
      {
        WTF::fastFree((unint64_t)v165, v122, v123, v124, v125, v126, v127, v128);
        v130 = *(WTF **)v129;
        v131 = *(_DWORD *)(v129 + 136);
      }
      v165 = v130;
      v167 = v131;
      *(_QWORD *)v129 = v129 + 8;
      *(_DWORD *)(v129 + 136) = 128;
    }
  }
  v132 = 1;
  v168 = 1;
  v169 = 0;
  v170 = 6;
  v171 = 0u;
  v172 = 0u;
  v173 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v174, 1, v124, v125, v126, v127, v128);
  BYTE2(v169) = 1;
  if (byte_1ECF4C288)
    goto LABEL_151;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v132 = HIBYTE(word_1ECF4C286) != 0;
LABEL_151:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v132, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_139;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_139:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v133, v134, v135, v136, v137, v138, v139);
  v147 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v157) = 0;
    WTF::fastFree((unint64_t)v147, v140, v141, v142, v143, v144, v145, v146);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v174, v140, v141, v142, v143, v144, v145, v146);
}

uint64_t JSC::putByValWithSymbolTransitionReallocatingOutOfLineHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  _BYTE *v51;
  WTF *v52;
  char *v53;
  uint64_t *v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint8x8_t v63;
  __int32 v64;
  uint8x8_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v75;
  WTF *v76;
  _QWORD *v77;
  char v78;
  char v79;
  uint64_t v80;
  unsigned __int8 *v81;
  char *v82;
  uint64_t v83;
  _BYTE *v84;
  int v85;
  unsigned __int8 *v86;
  char *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  int v90;
  char *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  pthread_key_t *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  unsigned int v131;
  char v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF *v147;
  int64_t v149;
  unsigned int v151;
  int v152;
  char v153;
  __int16 v154;
  char v155;
  WTF *p_dst;
  uint64_t v157;
  _BYTE v158[31];
  char v159;
  char **v160;
  char *v161;
  void *__dst;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  _BYTE v166[128];
  unsigned int v167;
  char v168;
  int v169;
  int v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _DWORD v174[6];
  char v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  _BYTE v180[128];
  unsigned int v181;
  unsigned int v182;
  int v183;
  char v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _DWORD *v188;
  char v189;
  uint64_t v190;
  int v191;
  _DWORD *v192;
  char v193;
  uint64_t v194;
  int v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  LOBYTE(v174[0]) = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0x8000000080000000;
  v179 = v180;
  v181 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    __dst = &v161;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v181;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v181 < v16)
    {
      if (v179 && v179 != v180)
      {
        WTF::fastFree((unint64_t)v179, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v179 = (_BYTE *)v14;
      v181 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v181;
    }
  }
  v17 = 0;
  v184 = 1;
  v189 = 16;
  v191 = 0x10000;
  v193 = 17;
  v195 = 0x20000;
  v182 = 0;
  v183 = 0;
  v185 = 0u;
  v186 = 0u;
  v187 = 0u;
  v188 = v174;
  v190 = 0;
  v192 = v174;
  v194 = 0;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v182;
  }
  *(_DWORD *)&v179[v17] = -1447068675;
  v18 = v182 + 4;
  v182 += 4;
  v19 = (WTF *)v158;
  p_dst = (WTF *)v158;
  v157 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v174, "check structure");
    v18 = v182;
  }
  if (v18 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v182;
  }
  *(_DWORD *)&v179[v18] = -1203765243;
  v20 = v182;
  v21 = v182 + 4;
  v182 += 4;
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C388CLL);
  }
  v192[52] &= ~v195;
  v22 = v193 & 0x1F | 0xB8418120;
  if (v20 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v21 = v182;
  }
  *(_DWORD *)&v179[v21] = v22;
  v23 = v182;
  v24 = v182 + 4;
  v182 += 4;
  if (v23 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v182;
  }
  *(_DWORD *)&v179[v24] = 1796276415;
  v25 = v182 + 4;
  v182 += 4;
  if (v196)
  {
    for (; (int)v25 < SHIDWORD(v178); v182 = v25)
    {
      if (v25 + 4 > v181)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v25 = v182;
      }
      *(_DWORD *)&v179[v25] = -721215457;
      v25 = v182 + 4;
    }
    v183 = 0;
  }
  if (v25 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v182;
  }
  *(_DWORD *)&v179[v25] = 1409286145;
  v26 = v182;
  v182 += 4;
  v27 = v182;
  v28 = v26 + 8;
  v29 = v182;
  if (v28 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v182;
  }
  *(_DWORD *)&v179[v29] = -721215457;
  v182 += 4;
  if (v196)
    v30 = -122;
  else
    v30 = -126;
  v151 = v27;
  v152 = 0;
  v153 = v30;
  v154 = 1;
  v155 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v157) == (_DWORD)v157)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v157) + 1), (unint64_t)&v151, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)p_dst + 12 * HIDWORD(v157);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v152;
      v34 = (char *)p_dst + 12 * HIDWORD(v157);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v157);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&__dst, (uint64_t)v174, 1, 5, v9, v10, v11, v12);
  v42 = (uint64_t *)__dst;
  v43 = HIDWORD(v163);
  if (!HIDWORD(v163))
    goto LABEL_57;
  v44 = HIDWORD(v157);
  v45 = HIDWORD(v157) + (unint64_t)HIDWORD(v163);
  if (v45 > v157)
  {
    v46 = v157 + ((unint64_t)v157 >> 2);
    if (v46 >= 0x10)
      v47 = v46 + 1;
    else
      v47 = 16;
    if (v47 <= v45)
      v47 = HIDWORD(v157) + (unint64_t)HIDWORD(v163);
    v48 = p_dst;
    if (v47 < 3)
    {
      p_dst = (WTF *)v158;
      LODWORD(v157) = 2;
      v51 = v158;
    }
    else
    {
      if (v47 >= 0x15555556)
        goto LABEL_164;
      v49 = a2;
      v50 = 12 * v47;
      v51 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
      LODWORD(v157) = (v50 & 0xFFFFFFFC) / 0xC;
      p_dst = (WTF *)v51;
      a2 = v49;
      v19 = (WTF *)v158;
    }
    if (v44)
    {
      v52 = v48;
      do
      {
        *(_DWORD *)v51 = *(_DWORD *)v52;
        *(_QWORD *)(v51 + 4) = *(_QWORD *)((char *)v52 + 4);
        v52 = (WTF *)((char *)v52 + 12);
        v51 += 12;
      }
      while (v52 != (WTF *)((char *)v48 + 12 * v44));
    }
    if (v158 != (_BYTE *)v48 && v48)
    {
      if (p_dst == v48)
      {
        p_dst = 0;
        LODWORD(v157) = 0;
      }
      WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  if (v45 < HIDWORD(v157))
  {
    __break(0xC471u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(0xC471u);
    JUMPOUT(0x1981C39F0);
  }
  v53 = (char *)p_dst + 12 * HIDWORD(v157);
  v54 = (uint64_t *)((char *)v42 + 12 * v43);
  do
  {
    *(_DWORD *)v53 = *(_DWORD *)v42;
    *(_QWORD *)(v53 + 4) = *(uint64_t *)((char *)v42 + 4);
    v42 = (uint64_t *)((char *)v42 + 12);
    v53 += 12;
  }
  while (v42 != v54);
  HIDWORD(v157) = v45;
  v42 = (uint64_t *)__dst;
LABEL_57:
  v55 = &v164 == v42 || v42 == 0;
  if (!v55)
  {
    __dst = 0;
    LODWORD(v163) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  __dst = &v164;
  LODWORD(v164) = 34144512;
  WORD2(v164) = 770;
  v163 = 0x300000003;
  v56 = 3;
  do
  {
    v57 = 0;
    v58 = 0;
    v59 = (char *)__dst;
    v60 = v56;
    do
    {
      if ((*((_BYTE *)__dst + v57 + 1) & 0x40) != 0)
        goto LABEL_163;
      v58 |= 1 << *((_BYTE *)__dst + v57 + 1);
      v57 += 2;
    }
    while (2 * v56 != v57);
    v61 = 0;
    do
    {
      v62 = *((_BYTE *)__dst + v61) & 0x7F;
      if (v62 >= 0x40)
        goto LABEL_163;
      v58 &= ~(1 << v62);
      v61 += 2;
    }
    while (2 * v56 != v61);
    v63 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
    v63.i16[0] = vaddlv_u8(v63);
    v64 = v63.i32[0];
    v65 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v58));
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.i32[0] + v64)
    {
      v66 = 0;
      if (v56 <= 1uLL)
        v67 = 1;
      else
        v67 = v56;
      v68 = 2 * v67;
      while (1)
      {
        v69 = *((unsigned __int8 *)__dst + v66 + 1);
        if ((v69 & 0x7Fu) >= 0x40)
          goto LABEL_163;
        if (((v58 >> (v69 & 0x7F)) & 1) != 0)
          break;
        v66 += 2;
        if (v68 == v66)
          goto LABEL_90;
      }
      v70 = *((unsigned __int8 *)__dst + v66);
      if (v70 == v69)
        goto LABEL_88;
      v71 = (char)v70;
      if ((char)v70 == 63)
      {
        v72 = v182;
        v73 = v181;
        if (v69 != 31)
        {
          v75 = v69 & 0x1F | 0xD2800000;
          goto LABEL_85;
        }
      }
      else
      {
        v72 = v182;
        v73 = v181;
        if ((char)v69 != 31 && v71 != 31)
        {
          v75 = v69 & 0xFFE0FFFF | ((v71 & 0x1F) << 16) | 0xAA0003E0;
LABEL_85:
          if (v72 + 4 > v73)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
            v72 = v182;
          }
          *(_DWORD *)&v179[v72] = v75;
          v182 += 4;
          v59 = (char *)__dst;
          v60 = HIDWORD(v163);
LABEL_88:
          memmove(&v59[v66], &v59[v66 + 2], 2 * v60 - v66 - 2);
          v56 = HIDWORD(v163) - 1;
          goto LABEL_89;
        }
      }
      v75 = (char)v69 | (32 * v71) | 0x91000000;
      goto LABEL_85;
    }
    v76 = v19;
    v77 = a2;
    v78 = *(_BYTE *)__dst;
    v79 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v174, *(char *)__dst, v79, v37, v38, v39, v40, v41);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v163) - 2);
    v80 = (HIDWORD(v163) - 1);
    v55 = HIDWORD(v163) == 1;
    HIDWORD(v163) = v80;
    v81 = (unsigned __int8 *)__dst;
    v82 = (char *)__dst + 2 * v80;
    if (v55)
    {
      v89 = 0;
      v90 = 0;
      v85 = 0;
      v35 = (char *)__dst + 2 * v80;
    }
    else
    {
      v83 = 2 * v80;
      v84 = __dst;
      while (*v84 != v79)
      {
        v84 += 2;
        v83 -= 2;
        if (!v83)
          goto LABEL_96;
      }
      *v84 = v78;
LABEL_96:
      v85 = 0;
      v86 = v81;
      v35 = v82;
      v87 = v82;
      do
      {
        if (*v81 == v81[1])
        {
          v88 = v81;
          if (v87 != (char *)__dst + 2 * HIDWORD(v163))
          {
            if (v81 == (unsigned __int8 *)v35)
            {
              v88 = (unsigned __int8 *)v87;
            }
            else
            {
              v149 = v86 - (unsigned __int8 *)v35;
              memmove(v87, v35, v86 - (unsigned __int8 *)v35);
              v88 = (unsigned __int8 *)&v87[v149];
            }
          }
          v35 = (char *)(v81 + 2);
          ++v85;
          v87 = (char *)v88;
        }
        v81 += 2;
        v86 += 2;
      }
      while (v81 < (unsigned __int8 *)v82);
      v81 = (unsigned __int8 *)__dst;
      v89 = HIDWORD(v163);
      v90 = HIDWORD(v163);
      v82 = v87;
    }
    v91 = (char *)&v81[2 * v89];
    if (v35 != v91)
    {
      memmove(v82, v35, v91 - v35);
      v90 = HIDWORD(v163);
    }
    v56 = v90 - v85;
    a2 = v77;
    v19 = v76;
LABEL_89:
    HIDWORD(v163) = v56;
LABEL_90:
    ;
  }
  while (v56);
  v92 = __dst;
  if (&v164 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v163) = 0;
    WTF::fastFree((unint64_t)v92, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v174, (uint64_t)this, 0, v37, v38, v39, v40, v41);
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C38ECLL);
  }
  v188[52] &= ~v191;
  v98 = v189;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v174, (uint64_t)operationReallocateButterflyAndTransition, v189, v93, v94, v95, v96, v97);
  v183 = 0;
  v106 = v182;
  if (v182 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v106 = v182;
  }
  *(_DWORD *)&v179[v106] = (32 * (v98 & 0x1F)) | 0xD63F0000;
  v107 = v182;
  v108 = v182 + 4;
  v182 += 4;
  if (v107 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v108 = v182;
  }
  *(_DWORD *)&v179[v108] = -1463714819;
  v109 = v182;
  v110 = v182 + 4;
  v182 += 4;
  if (v109 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v110 = v182;
  }
  *(_DWORD *)&v179[v110] = -698416192;
  v111 = v182 + 4;
  v182 += 4;
  if (HIDWORD(v157))
  {
    v112 = 0;
    v113 = 0;
    v114 = 12 * HIDWORD(v157);
    do
    {
      if (v113 >= HIDWORD(v157))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C39E0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v112), (uint64_t)v174, v100, v101, v102, v103, v104, v105);
      ++v113;
      v112 += 12;
    }
    while (v114 != v112);
    v111 = v182;
  }
  if (v111 + 4 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v111 = v182;
  }
  *(_DWORD *)&v179[v111] = -129662679;
  v115 = v182;
  v116 = v182 + 4;
  v182 += 4;
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C394CLL);
  }
  v188[52] &= ~v191;
  v117 = v189 & 0x1F | 0xF8410120;
  if (v115 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v116 = v182;
  }
  *(_DWORD *)&v179[v116] = v117;
  v118 = v182;
  v119 = v182 + 4;
  v182 += 4;
  if (v118 + 8 > v181)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v179, v99, v100, v101, v102, v103, v104, v105);
    v119 = v182;
  }
  *(_DWORD *)&v179[v119] = -702610944;
  v182 += 4;
  __dst = 0;
  v163 = 0;
  v164 = -1;
  v165 = (WTF *)v166;
  v167 = 128;
  v120 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v120 != -1)
  {
    v161 = &v159;
    v160 = &v161;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v160, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v121 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v129 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v129)
  {
    v129 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v129, v121);
  }
  v130 = *(WTF **)v129;
  if (*(_QWORD *)v129 != v129 + 8)
  {
    v131 = *(_DWORD *)(v129 + 136);
    if (v167 < v131)
    {
      if (v165 && v165 != (WTF *)v166)
      {
        WTF::fastFree((unint64_t)v165, v122, v123, v124, v125, v126, v127, v128);
        v130 = *(WTF **)v129;
        v131 = *(_DWORD *)(v129 + 136);
      }
      v165 = v130;
      v167 = v131;
      *(_QWORD *)v129 = v129 + 8;
      *(_DWORD *)(v129 + 136) = 128;
    }
  }
  v132 = 1;
  v168 = 1;
  v169 = 0;
  v170 = 6;
  v171 = 0u;
  v172 = 0u;
  v173 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v174, 1, v124, v125, v126, v127, v128);
  BYTE2(v169) = 1;
  if (byte_1ECF4C288)
    goto LABEL_151;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v132 = HIBYTE(word_1ECF4C286) != 0;
LABEL_151:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v132, "PutByVal Transition handler", 28, "PutByVal Transition handler", a2);
    goto LABEL_139;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PutByVal Transition handler", 28, a2);
LABEL_139:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v133, v134, v135, v136, v137, v138, v139);
  v147 = p_dst;
  if (v19 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v157) = 0;
    WTF::fastFree((unint64_t)v147, v140, v141, v142, v143, v144, v145, v146);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v174, v140, v141, v142, v143, v144, v145, v146);
}

uint64_t JSC::putByValWithStringCustomAccessorHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765243;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C42F4);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276415;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 0, 5, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C43C0);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C43B8);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customSetterHandlerImpl<true>(v55, (uint64_t)v129, 0, 2, 3, 5, 6, 1);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C43B0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C4384);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "PutByVal Custom handler", 24, "PutByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "PutByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::putByValWithStringCustomValueHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765243;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C4CC4);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276415;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 0, 5, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C4D90);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C4D88);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customSetterHandlerImpl<false>(v55, (uint64_t)v129, 0, 2, 3, 5, 6, 1);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C4D80);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C4D54);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "PutByVal Custom handler", 24, "PutByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "PutByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::putByValWithSymbolCustomAccessorHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765243;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C5694);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276415;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 1, 5, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C5760);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C5758);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customSetterHandlerImpl<true>(v55, (uint64_t)v129, 0, 2, 3, 5, 6, 1);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C5750);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C5724);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "PutByVal Custom handler", 24, "PutByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "PutByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::putByValWithSymbolCustomValueHandler@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  _QWORD *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  pthread_key_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  unsigned int v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC *v105;
  unsigned int v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[31];
  char v114;
  char **v115;
  char *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _BYTE v134[128];
  unsigned int v135;
  unsigned int v136;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE *v142;
  char v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v117 = (WTF *)&v116;
    v111 = (WTF *)&v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v111, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = (_BYTE *)v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  v143 = 16;
  v145 = 0x10000;
  v147 = 17;
  v149 = 0x20000;
  v136 = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v136;
  }
  *(_DWORD *)&v133[v18] = -1447068675;
  v19 = v136 + 4;
  v136 += 4;
  v111 = (WTF *)v113;
  v112 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v129, "check structure");
    v19 = v136;
  }
  if (v19 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v19 = v136;
  }
  *(_DWORD *)&v133[v19] = -1203765243;
  v20 = v136;
  v21 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C6064);
  }
  *((_DWORD *)v146 + 52) &= ~v149;
  v22 = v147 & 0x1F | 0xB8418120;
  if (v20 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v21 = v136;
  }
  *(_DWORD *)&v133[v21] = v22;
  v23 = v136;
  v24 = v136 + 4;
  v136 += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v136;
  }
  *(_DWORD *)&v133[v24] = 1796276415;
  v25 = v136 + 4;
  v136 += 4;
  v105 = this;
  if (v150)
  {
    for (; (int)v25 < SHIDWORD(v132); v136 = v25)
    {
      if (v25 + 4 > v135)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
        v25 = v136;
      }
      *(_DWORD *)&v133[v25] = -721215457;
      v25 = v136 + 4;
    }
    v137 = 0;
  }
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v25 = v136;
  }
  *(_DWORD *)&v133[v25] = 1409286145;
  v26 = v136;
  v136 += 4;
  v27 = v136;
  v28 = v26 + 8;
  v29 = v136;
  if (v28 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v29 = v136;
  }
  *(_DWORD *)&v133[v29] = -721215457;
  v136 += 4;
  if (v150)
    v30 = -122;
  else
    v30 = -126;
  v106 = v27;
  v107 = 0;
  v108 = v30;
  v109 = 1;
  v110 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v112) == (_DWORD)v112)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v106, v9, v10, v11, v12, v13);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v107;
      v34 = (char *)v111 + 12 * HIDWORD(v112);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v112);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v117, (uint64_t)v129, 1, 5, v10, v11, v12, v13);
  v42 = v117;
  v43 = HIDWORD(v118);
  if (HIDWORD(v118))
  {
    v44 = HIDWORD(v112);
    v45 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
    if (v45 > v112)
    {
      v46 = v112 + ((unint64_t)v112 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v112) + (unint64_t)HIDWORD(v118);
      v48 = v111;
      if (v47 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
        v51 = (WTF *)v113;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C6130);
        }
        v49 = a2;
        v50 = 12 * v47;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v112) = (v50 & 0xFFFFFFFC) / 0xC;
        v111 = v51;
        a2 = v49;
      }
      if (v44)
      {
        v52 = v48;
        do
        {
          *(_DWORD *)v51 = *(_DWORD *)v52;
          *(_QWORD *)((char *)v51 + 4) = *(_QWORD *)((char *)v52 + 4);
          v52 = (WTF *)((char *)v52 + 12);
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v52 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v113 != (_BYTE *)v48 && v48)
      {
        if (v111 == v48)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C6128);
    }
    v53 = (char *)v111 + 12 * HIDWORD(v112);
    v54 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v42;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v53 += 12;
    }
    while (v42 != v54);
    HIDWORD(v112) = v45;
    v42 = v117;
    v55 = (uint64_t)v105;
  }
  else
  {
    v55 = (uint64_t)v105;
  }
  if (&v119 != (uint64_t *)v42 && v42 != 0)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  JSC::customSetterHandlerImpl<false>(v55, (uint64_t)v129, 0, 2, 3, 5, 6, 1);
  v64 = v136;
  if (v136 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v64 = v136;
  }
  *(_DWORD *)&v133[v64] = -1463714819;
  v65 = v136;
  v66 = v136 + 4;
  v136 += 4;
  if (v65 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v66 = v136;
  }
  *(_DWORD *)&v133[v66] = -698416192;
  v67 = v136 + 4;
  v136 += 4;
  if (HIDWORD(v112))
  {
    v68 = 0;
    v69 = 0;
    v70 = 12 * HIDWORD(v112);
    do
    {
      if (v69 >= HIDWORD(v112))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C6120);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v111 + v68), (uint64_t)v129, v58, v59, v60, v61, v62, v63);
      ++v69;
      v68 += 12;
    }
    while (v70 != v68);
    v67 = v136;
  }
  if (v67 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v67 = v136;
  }
  *(_DWORD *)&v133[v67] = -129662679;
  v71 = v136;
  v72 = v136 + 4;
  v136 += 4;
  if (!v138)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C60F4);
  }
  *((_DWORD *)v142 + 52) &= ~v145;
  v73 = v143 & 0x1F | 0xF8410120;
  if (v71 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v72 = v136;
  }
  *(_DWORD *)&v133[v72] = v73;
  v74 = v136;
  v75 = v136 + 4;
  v136 += 4;
  if (v74 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v57, v58, v59, v60, v61, v62, v63);
    v75 = v136;
  }
  *(_DWORD *)&v133[v75] = -702610944;
  v136 += 4;
  v117 = 0;
  v118 = 0;
  v119 = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v76 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v76 != -1)
  {
    v116 = &v114;
    v115 = &v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v77 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v85 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v85)
  {
    v85 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v85, v77);
  }
  v86 = *(WTF **)v85;
  if (*(_QWORD *)v85 != v85 + 8)
  {
    v87 = *(_DWORD *)(v85 + 136);
    if (v122 < v87)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v78, v79, v80, v81, v82, v83, v84);
        v86 = *(WTF **)v85;
        v87 = *(_DWORD *)(v85 + 136);
      }
      v120 = v86;
      v122 = v87;
      *(_QWORD *)v85 = v85 + 8;
      *(_DWORD *)(v85 + 136) = 128;
    }
  }
  v88 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 6;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v117, (uint64_t)v129, 1, v80, v81, v82, v83, v84);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_100;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v88 = HIBYTE(word_1ECF4C286) != 0;
LABEL_100:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, v88, "PutByVal Custom handler", 24, "PutByVal Custom handler", a2);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v117, "PutByVal Custom handler", 24, a2);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v117, v89, v90, v91, v92, v93, v94, v95);
  v103 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t JSC::putByValWithStringStrictSetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[32];
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  _BYTE v131[128];
  unsigned int v132;
  unsigned int v133;
  int v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  int v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v126[0] = 0;
  v126[24] = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0x8000000080000000;
  v130 = v131;
  v132 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v132;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v132 < v16)
    {
      if (v130 && v130 != v131)
      {
        WTF::fastFree((unint64_t)v130, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v130 = (_BYTE *)v14;
      v132 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v132;
    }
  }
  v17 = 0;
  v135 = 1;
  v140 = 16;
  v142 = 0x10000;
  v144 = 17;
  v146 = 0x20000;
  v133 = 0;
  v134 = 0;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = v126;
  v141 = 0;
  v143 = v126;
  v145 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v133;
  }
  *(_DWORD *)&v130[v17] = -1447068675;
  v18 = v133 + 4;
  v133 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v133;
  }
  if (v18 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v133;
  }
  *(_DWORD *)&v130[v18] = -1203765243;
  v19 = v133;
  v20 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C6A08);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v21 = v144 & 0x1F | 0xB8418120;
  if (v19 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v133;
  }
  *(_DWORD *)&v130[v20] = v21;
  v22 = v133;
  v23 = v133 + 4;
  v133 += 4;
  if (v22 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v133;
  }
  *(_DWORD *)&v130[v23] = 1796276415;
  v24 = v133 + 4;
  v133 += 4;
  if (v147)
  {
    for (; (int)v24 < SHIDWORD(v129); v133 = v24)
    {
      if (v24 + 4 > v132)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v133;
      }
      *(_DWORD *)&v130[v24] = -721215457;
      v24 = v133 + 4;
    }
    v134 = 0;
  }
  if (v24 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v133;
  }
  *(_DWORD *)&v130[v24] = 1409286145;
  v25 = v133;
  v133 += 4;
  v26 = v133;
  v27 = v25 + 8;
  v28 = v133;
  if (v27 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v133;
  }
  *(_DWORD *)&v130[v28] = -721215457;
  v133 += 4;
  if (v147)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 0, 5, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C6AD4);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C6ACCLL);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::setterHandlerImpl<true>((uint64_t)v126, 0, 2, 3, 5, 6, v39, v40);
  v62 = v133;
  if (v133 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v62 = v133;
  }
  *(_DWORD *)&v130[v62] = -1463714819;
  v63 = v133;
  v64 = v133 + 4;
  v133 += 4;
  if (v63 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v64 = v133;
  }
  *(_DWORD *)&v130[v64] = -698416192;
  v65 = v133 + 4;
  v133 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C6AC4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v133;
  }
  if (v65 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v65 = v133;
  }
  *(_DWORD *)&v130[v65] = -129662679;
  v69 = v133;
  v70 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C6A98);
  }
  *((_DWORD *)v139 + 52) &= ~v142;
  v71 = v140 & 0x1F | 0xF8410120;
  if (v69 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v70 = v133;
  }
  *(_DWORD *)&v130[v70] = v71;
  v72 = v133;
  v73 = v133 + 4;
  v133 += 4;
  if (v72 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v73 = v133;
  }
  *(_DWORD *)&v130[v73] = -702610944;
  v133 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "PutByVal Setter handler", 24, "PutByVal Setter handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "PutByVal Setter handler", 24, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::putByValWithSymbolStrictSetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[32];
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  _BYTE v131[128];
  unsigned int v132;
  unsigned int v133;
  int v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  int v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v126[0] = 0;
  v126[24] = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0x8000000080000000;
  v130 = v131;
  v132 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v132;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v132 < v16)
    {
      if (v130 && v130 != v131)
      {
        WTF::fastFree((unint64_t)v130, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v130 = (_BYTE *)v14;
      v132 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v132;
    }
  }
  v17 = 0;
  v135 = 1;
  v140 = 16;
  v142 = 0x10000;
  v144 = 17;
  v146 = 0x20000;
  v133 = 0;
  v134 = 0;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = v126;
  v141 = 0;
  v143 = v126;
  v145 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v133;
  }
  *(_DWORD *)&v130[v17] = -1447068675;
  v18 = v133 + 4;
  v133 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v133;
  }
  if (v18 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v133;
  }
  *(_DWORD *)&v130[v18] = -1203765243;
  v19 = v133;
  v20 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C73BCLL);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v21 = v144 & 0x1F | 0xB8418120;
  if (v19 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v133;
  }
  *(_DWORD *)&v130[v20] = v21;
  v22 = v133;
  v23 = v133 + 4;
  v133 += 4;
  if (v22 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v133;
  }
  *(_DWORD *)&v130[v23] = 1796276415;
  v24 = v133 + 4;
  v133 += 4;
  if (v147)
  {
    for (; (int)v24 < SHIDWORD(v129); v133 = v24)
    {
      if (v24 + 4 > v132)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v133;
      }
      *(_DWORD *)&v130[v24] = -721215457;
      v24 = v133 + 4;
    }
    v134 = 0;
  }
  if (v24 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v133;
  }
  *(_DWORD *)&v130[v24] = 1409286145;
  v25 = v133;
  v133 += 4;
  v26 = v133;
  v27 = v25 + 8;
  v28 = v133;
  if (v27 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v133;
  }
  *(_DWORD *)&v130[v28] = -721215457;
  v133 += 4;
  if (v147)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 1, 5, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C7488);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C7480);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::setterHandlerImpl<true>((uint64_t)v126, 0, 2, 3, 5, 6, v39, v40);
  v62 = v133;
  if (v133 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v62 = v133;
  }
  *(_DWORD *)&v130[v62] = -1463714819;
  v63 = v133;
  v64 = v133 + 4;
  v133 += 4;
  if (v63 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v64 = v133;
  }
  *(_DWORD *)&v130[v64] = -698416192;
  v65 = v133 + 4;
  v133 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C7478);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v133;
  }
  if (v65 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v65 = v133;
  }
  *(_DWORD *)&v130[v65] = -129662679;
  v69 = v133;
  v70 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C744CLL);
  }
  *((_DWORD *)v139 + 52) &= ~v142;
  v71 = v140 & 0x1F | 0xF8410120;
  if (v69 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v70 = v133;
  }
  *(_DWORD *)&v130[v70] = v71;
  v72 = v133;
  v73 = v133 + 4;
  v133 += 4;
  if (v72 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v73 = v133;
  }
  *(_DWORD *)&v130[v73] = -702610944;
  v133 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "PutByVal Setter handler", 24, "PutByVal Setter handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "PutByVal Setter handler", 24, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::putByValWithStringSloppySetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[32];
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  _BYTE v131[128];
  unsigned int v132;
  unsigned int v133;
  int v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  int v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v126[0] = 0;
  v126[24] = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0x8000000080000000;
  v130 = v131;
  v132 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v132;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v132 < v16)
    {
      if (v130 && v130 != v131)
      {
        WTF::fastFree((unint64_t)v130, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v130 = (_BYTE *)v14;
      v132 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v132;
    }
  }
  v17 = 0;
  v135 = 1;
  v140 = 16;
  v142 = 0x10000;
  v144 = 17;
  v146 = 0x20000;
  v133 = 0;
  v134 = 0;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = v126;
  v141 = 0;
  v143 = v126;
  v145 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v133;
  }
  *(_DWORD *)&v130[v17] = -1447068675;
  v18 = v133 + 4;
  v133 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v133;
  }
  if (v18 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v133;
  }
  *(_DWORD *)&v130[v18] = -1203765243;
  v19 = v133;
  v20 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C7D70);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v21 = v144 & 0x1F | 0xB8418120;
  if (v19 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v133;
  }
  *(_DWORD *)&v130[v20] = v21;
  v22 = v133;
  v23 = v133 + 4;
  v133 += 4;
  if (v22 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v133;
  }
  *(_DWORD *)&v130[v23] = 1796276415;
  v24 = v133 + 4;
  v133 += 4;
  if (v147)
  {
    for (; (int)v24 < SHIDWORD(v129); v133 = v24)
    {
      if (v24 + 4 > v132)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v133;
      }
      *(_DWORD *)&v130[v24] = -721215457;
      v24 = v133 + 4;
    }
    v134 = 0;
  }
  if (v24 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v133;
  }
  *(_DWORD *)&v130[v24] = 1409286145;
  v25 = v133;
  v133 += 4;
  v26 = v133;
  v27 = v25 + 8;
  v28 = v133;
  if (v27 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v133;
  }
  *(_DWORD *)&v130[v28] = -721215457;
  v133 += 4;
  if (v147)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 0, 5, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C7E3CLL);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C7E34);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::setterHandlerImpl<false>((uint64_t)v126, 0, 2, 3, 5, 6, v39, v40);
  v62 = v133;
  if (v133 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v62 = v133;
  }
  *(_DWORD *)&v130[v62] = -1463714819;
  v63 = v133;
  v64 = v133 + 4;
  v133 += 4;
  if (v63 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v64 = v133;
  }
  *(_DWORD *)&v130[v64] = -698416192;
  v65 = v133 + 4;
  v133 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C7E2CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v133;
  }
  if (v65 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v65 = v133;
  }
  *(_DWORD *)&v130[v65] = -129662679;
  v69 = v133;
  v70 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C7E00);
  }
  *((_DWORD *)v139 + 52) &= ~v142;
  v71 = v140 & 0x1F | 0xF8410120;
  if (v69 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v70 = v133;
  }
  *(_DWORD *)&v130[v70] = v71;
  v72 = v133;
  v73 = v133 + 4;
  v133 += 4;
  if (v72 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v73 = v133;
  }
  *(_DWORD *)&v130[v73] = -702610944;
  v133 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "PutByVal Setter handler", 24, "PutByVal Setter handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "PutByVal Setter handler", 24, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::putByValWithSymbolSloppySetterHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  pthread_key_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  char v107;
  WTF *v108;
  uint64_t v109;
  _BYTE v110[31];
  char v111;
  char **v112;
  char *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[32];
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  _BYTE v131[128];
  unsigned int v132;
  unsigned int v133;
  int v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  int v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v126[0] = 0;
  v126[24] = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0x8000000080000000;
  v130 = v131;
  v132 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v114 = (WTF *)&v113;
    v108 = (WTF *)&v114;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v132;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v132 < v16)
    {
      if (v130 && v130 != v131)
      {
        WTF::fastFree((unint64_t)v130, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v130 = (_BYTE *)v14;
      v132 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v132;
    }
  }
  v17 = 0;
  v135 = 1;
  v140 = 16;
  v142 = 0x10000;
  v144 = 17;
  v146 = 0x20000;
  v133 = 0;
  v134 = 0;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = v126;
  v141 = 0;
  v143 = v126;
  v145 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v133;
  }
  *(_DWORD *)&v130[v17] = -1447068675;
  v18 = v133 + 4;
  v133 += 4;
  v108 = (WTF *)v110;
  v109 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v126, "check structure");
    v18 = v133;
  }
  if (v18 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v133;
  }
  *(_DWORD *)&v130[v18] = -1203765243;
  v19 = v133;
  v20 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C8724);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v21 = v144 & 0x1F | 0xB8418120;
  if (v19 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v133;
  }
  *(_DWORD *)&v130[v20] = v21;
  v22 = v133;
  v23 = v133 + 4;
  v133 += 4;
  if (v22 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v133;
  }
  *(_DWORD *)&v130[v23] = 1796276415;
  v24 = v133 + 4;
  v133 += 4;
  if (v147)
  {
    for (; (int)v24 < SHIDWORD(v129); v133 = v24)
    {
      if (v24 + 4 > v132)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v133;
      }
      *(_DWORD *)&v130[v24] = -721215457;
      v24 = v133 + 4;
    }
    v134 = 0;
  }
  if (v24 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v133;
  }
  *(_DWORD *)&v130[v24] = 1409286145;
  v25 = v133;
  v133 += 4;
  v26 = v133;
  v27 = v25 + 8;
  v28 = v133;
  if (v27 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v133;
  }
  *(_DWORD *)&v130[v28] = -721215457;
  v133 += 4;
  if (v147)
    v29 = -122;
  else
    v29 = -126;
  v103 = v26;
  v104 = 0;
  v105 = v29;
  v106 = 1;
  v107 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v109) == (_DWORD)v109)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, (void *)(HIDWORD(v109) + 1), (unint64_t)&v103, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v104;
      v33 = (char *)v108 + 12 * HIDWORD(v109);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v109);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v114, (uint64_t)v126, 1, 5, v9, v10, v11, v12);
  v41 = v114;
  v42 = HIDWORD(v115);
  if (HIDWORD(v115))
  {
    v43 = a1;
    v44 = HIDWORD(v109);
    v45 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
    if (v45 > v109)
    {
      v46 = v109 + ((unint64_t)v109 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v109) + (unint64_t)HIDWORD(v115);
      v48 = v108;
      if (v47 < 3)
      {
        v50 = (WTF *)v110;
        v108 = (WTF *)v110;
        LODWORD(v109) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C87F0);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v109) = (v49 & 0xFFFFFFFC) / 0xC;
        v108 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v110 != (_BYTE *)v48 && v48)
      {
        if (v108 == v48)
        {
          v108 = 0;
          LODWORD(v109) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v109))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C87E8);
    }
    v52 = (char *)v108 + 12 * HIDWORD(v109);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v109) = v45;
    v41 = v114;
  }
  if (&v116 != (uint64_t *)v41 && v41 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::setterHandlerImpl<false>((uint64_t)v126, 0, 2, 3, 5, 6, v39, v40);
  v62 = v133;
  if (v133 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v62 = v133;
  }
  *(_DWORD *)&v130[v62] = -1463714819;
  v63 = v133;
  v64 = v133 + 4;
  v133 += 4;
  if (v63 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v64 = v133;
  }
  *(_DWORD *)&v130[v64] = -698416192;
  v65 = v133 + 4;
  v133 += 4;
  if (HIDWORD(v109))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v109);
    do
    {
      if (v67 >= HIDWORD(v109))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C87E0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v108 + v66), (uint64_t)v126, v56, v57, v58, v59, v60, v61);
      ++v67;
      v66 += 12;
    }
    while (v68 != v66);
    v65 = v133;
  }
  if (v65 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v65 = v133;
  }
  *(_DWORD *)&v130[v65] = -129662679;
  v69 = v133;
  v70 = v133 + 4;
  v133 += 4;
  if (!v135)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C87B4);
  }
  *((_DWORD *)v139 + 52) &= ~v142;
  v71 = v140 & 0x1F | 0xF8410120;
  if (v69 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v70 = v133;
  }
  *(_DWORD *)&v130[v70] = v71;
  v72 = v133;
  v73 = v133 + 4;
  v133 += 4;
  if (v72 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v130, v55, v56, v57, v58, v59, v60, v61);
    v73 = v133;
  }
  *(_DWORD *)&v130[v73] = -702610944;
  v133 += 4;
  v114 = 0;
  v115 = 0;
  v116 = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v74 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v74 != -1)
  {
    v113 = &v111;
    v112 = &v113;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v75 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v83 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v83)
  {
    v83 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v83, v75);
  }
  v84 = *(WTF **)v83;
  if (*(_QWORD *)v83 != v83 + 8)
  {
    v85 = *(_DWORD *)(v83 + 136);
    if (v119 < v85)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v76, v77, v78, v79, v80, v81, v82);
        v84 = *(WTF **)v83;
        v85 = *(_DWORD *)(v83 + 136);
      }
      v117 = v84;
      v119 = v85;
      *(_QWORD *)v83 = v83 + 8;
      *(_DWORD *)(v83 + 136) = 128;
    }
  }
  v86 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 6;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v114, (uint64_t)v126, 1, v78, v79, v80, v81, v82);
  BYTE2(v121) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v86 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, v86, "PutByVal Setter handler", 24, "PutByVal Setter handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v114, "PutByVal Setter handler", 24, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v114, v87, v88, v89, v90, v91, v92, v93);
  v101 = v108;
  if (v110 != (_BYTE *)v108 && v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v94, v95, v96, v97, v98, v99, v100);
}

uint64_t JSC::inByValWithStringHitHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765244;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C90E8);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276383;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 0, 4, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C91C4);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C91BCLL);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 838863840;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C91B4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C9188);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "InByVal handler", 16, "InByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "InByVal handler", 16, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::inByValWithStringMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765244;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C9ABCLL);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276383;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 0, 4, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981C9B98);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981C9B90);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 840894432;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981C9B88);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981C9B5CLL);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "InByVal handler", 16, "InByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "InByVal handler", 16, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::inByValWithSymbolHitHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765244;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CA490);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276383;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 1, 4, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CA56CLL);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CA564);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 838863840;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CA55CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CA530);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "InByVal handler", 16, "InByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "InByVal handler", 16, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::inByValWithSymbolMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765244;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CAE64);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276383;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 1, 4, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CAF40);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CAF38);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 840894432;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CAF30);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CAF04);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "InByVal handler", 16, "InByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "InByVal handler", 16, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::deleteByValWithStringDeleteHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  int v48;
  WTF *v49;
  WTF *v50;
  char *v51;
  WTF *v52;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  pthread_key_t *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  unsigned int v95;
  char v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  unsigned int v113;
  int v114;
  char v115;
  __int16 v116;
  char v117;
  WTF *v118;
  uint64_t v119;
  _BYTE v120[31];
  char v121;
  char **v122;
  char *v123;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  _BYTE v128[128];
  unsigned int v129;
  char v130;
  int v131;
  int v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _BYTE v136[32];
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  _BYTE v141[128];
  unsigned int v142;
  unsigned int v143;
  int v144;
  char v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _BYTE *v149;
  char v150;
  uint64_t v151;
  int v152;
  _BYTE *v153;
  char v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v136[0] = 0;
  v136[24] = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0x8000000080000000;
  v140 = v141;
  v142 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v124 = (WTF *)&v123;
    v118 = (WTF *)&v124;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v118, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v142;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v142 < v16)
    {
      if (v140 && v140 != v141)
      {
        WTF::fastFree((unint64_t)v140, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v140 = (_BYTE *)v14;
      v142 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v142;
    }
  }
  v17 = 0;
  v145 = 1;
  v150 = 16;
  v152 = 0x10000;
  v154 = 17;
  v156 = 0x20000;
  v143 = 0;
  v144 = 0;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = v136;
  v151 = 0;
  v153 = v136;
  v155 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v143;
  }
  *(_DWORD *)&v140[v17] = -1447068675;
  v18 = v143 + 4;
  v143 += 4;
  v118 = (WTF *)v120;
  v119 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v136, "check structure");
    v18 = v143;
  }
  if (v18 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v143;
  }
  *(_DWORD *)&v140[v18] = -1203765245;
  v19 = v143;
  v20 = v143 + 4;
  v143 += 4;
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CB950);
  }
  *((_DWORD *)v153 + 52) &= ~v156;
  v21 = v154 & 0x1F | 0xB8418120;
  if (v19 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v143;
  }
  *(_DWORD *)&v140[v20] = v21;
  v22 = v143;
  v23 = v143 + 4;
  v143 += 4;
  if (v22 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v143;
  }
  *(_DWORD *)&v140[v23] = 1796276351;
  v24 = v143 + 4;
  v143 += 4;
  if (v157)
  {
    for (; (int)v24 < SHIDWORD(v139); v143 = v24)
    {
      if (v24 + 4 > v142)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v143;
      }
      *(_DWORD *)&v140[v24] = -721215457;
      v24 = v143 + 4;
    }
    v144 = 0;
  }
  if (v24 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v143;
  }
  *(_DWORD *)&v140[v24] = 1409286145;
  v25 = v143;
  v143 += 4;
  v26 = v143;
  v27 = v25 + 8;
  v28 = v143;
  if (v27 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v143;
  }
  *(_DWORD *)&v140[v28] = -721215457;
  v143 += 4;
  if (v157)
    v29 = -122;
  else
    v29 = -126;
  v113 = v26;
  v114 = 0;
  v115 = v29;
  v116 = 1;
  v117 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v119) == (_DWORD)v119)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v118, (void *)(HIDWORD(v119) + 1), (unint64_t)&v113, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v118 + 12 * HIDWORD(v119);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v114;
      v33 = (char *)v118 + 12 * HIDWORD(v119);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v119);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v124, (uint64_t)v136, 0, 3, v9, v10, v11, v12);
  v41 = v124;
  v42 = HIDWORD(v125);
  if (HIDWORD(v125))
  {
    v43 = HIDWORD(v119);
    v44 = HIDWORD(v119) + (unint64_t)HIDWORD(v125);
    if (v44 > v119)
    {
      v45 = v119 + ((unint64_t)v119 >> 2);
      if (v45 >= 0x10)
        v46 = v45 + 1;
      else
        v46 = 16;
      if (v46 <= v44)
        v46 = HIDWORD(v119) + (unint64_t)HIDWORD(v125);
      v47 = v118;
      if (v46 < 3)
      {
        v118 = (WTF *)v120;
        LODWORD(v119) = 2;
        v49 = (WTF *)v120;
      }
      else
      {
        if (v46 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CBAACLL);
        }
        v48 = 12 * v46;
        v49 = (WTF *)WTF::fastMalloc((WTF *)(12 * v46));
        LODWORD(v119) = (v48 & 0xFFFFFFFC) / 0xC;
        v118 = v49;
      }
      if (v43)
      {
        v50 = v47;
        do
        {
          *(_DWORD *)v49 = *(_DWORD *)v50;
          *(_QWORD *)((char *)v49 + 4) = *(_QWORD *)((char *)v50 + 4);
          v50 = (WTF *)((char *)v50 + 12);
          v49 = (WTF *)((char *)v49 + 12);
        }
        while (v50 != (WTF *)((char *)v47 + 12 * v43));
      }
      if (v120 != (_BYTE *)v47 && v47)
      {
        if (v118 == v47)
        {
          v118 = 0;
          LODWORD(v119) = 0;
        }
        WTF::fastFree((unint64_t)v47, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v44 < HIDWORD(v119))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CBAA4);
    }
    v51 = (char *)v118 + 12 * HIDWORD(v119);
    v52 = (WTF *)((char *)v41 + 12 * v42);
    do
    {
      *(_DWORD *)v51 = *(_DWORD *)v41;
      *(_QWORD *)(v51 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v51 += 12;
    }
    while (v41 != v52);
    HIDWORD(v119) = v44;
    v41 = v124;
  }
  if (&v126 != (uint64_t *)v41 && v41 != 0)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v54 = v143;
  if (v143 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v54 = v143;
  }
  *(_DWORD *)&v140[v54] = -1203650269;
  v55 = v143;
  v56 = v143 + 4;
  v143 += 4;
  if (v55 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v56 = v143;
  }
  *(_DWORD *)&v140[v56] = -763363323;
  v143 += 4;
  JSC::AssemblyHelpers::storeProperty((uint64_t)v136, 5, 0, 3, 4, v38, v39, v40);
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CB9D0);
  }
  *((_DWORD *)v149 + 52) &= ~v152;
  v64 = v150 & 0x1F | 0xB8428120;
  v65 = v143;
  if (v143 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v65 = v143;
  }
  *(_DWORD *)&v140[v65] = v64;
  v66 = v143;
  v67 = v143 + 4;
  v143 += 4;
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CBA00);
  }
  *((_DWORD *)v149 + 52) &= ~v152;
  v68 = v150 & 0x1F | 0xB8000000;
  if (v66 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v67 = v143;
  }
  *(_DWORD *)&v140[v67] = v68;
  v69 = v143;
  v70 = v143 + 4;
  v143 += 4;
  if (v69 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v70 = v143;
  }
  *(_DWORD *)&v140[v70] = 838861792;
  v71 = v143;
  v72 = v143 + 4;
  v143 += 4;
  if (v71 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v72 = v143;
  }
  *(_DWORD *)&v140[v72] = -1463714819;
  v73 = v143;
  v74 = v143 + 4;
  v143 += 4;
  if (v73 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v74 = v143;
  }
  *(_DWORD *)&v140[v74] = -698416192;
  v75 = v143 + 4;
  v143 += 4;
  if (HIDWORD(v119))
  {
    v76 = 0;
    v77 = 0;
    v78 = 12 * HIDWORD(v119);
    do
    {
      if (v77 >= HIDWORD(v119))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CBA9CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v118 + v76), (uint64_t)v136, v58, v59, v60, v61, v62, v63);
      ++v77;
      v76 += 12;
    }
    while (v78 != v76);
    v75 = v143;
  }
  if (v75 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v75 = v143;
  }
  *(_DWORD *)&v140[v75] = -129662679;
  v79 = v143;
  v80 = v143 + 4;
  v143 += 4;
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CBA70);
  }
  *((_DWORD *)v149 + 52) &= ~v152;
  v81 = v150 & 0x1F | 0xF8410120;
  if (v79 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v80 = v143;
  }
  *(_DWORD *)&v140[v80] = v81;
  v82 = v143;
  v83 = v143 + 4;
  v143 += 4;
  if (v82 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v83 = v143;
  }
  *(_DWORD *)&v140[v83] = -702610944;
  v143 += 4;
  v124 = 0;
  v125 = 0;
  v126 = -1;
  v127 = (WTF *)v128;
  v129 = 128;
  v84 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v84 != -1)
  {
    v123 = &v121;
    v122 = &v123;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v122, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v85 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v93 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v93)
  {
    v93 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v93, v85);
  }
  v94 = *(WTF **)v93;
  if (*(_QWORD *)v93 != v93 + 8)
  {
    v95 = *(_DWORD *)(v93 + 136);
    if (v129 < v95)
    {
      if (v127 && v127 != (WTF *)v128)
      {
        WTF::fastFree((unint64_t)v127, v86, v87, v88, v89, v90, v91, v92);
        v94 = *(WTF **)v93;
        v95 = *(_DWORD *)(v93 + 136);
      }
      v127 = v94;
      v129 = v95;
      *(_QWORD *)v93 = v93 + 8;
      *(_DWORD *)(v93 + 136) = 128;
    }
  }
  v96 = 1;
  v130 = 1;
  v131 = 0;
  v132 = 6;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v124, (uint64_t)v136, 1, v88, v89, v90, v91, v92);
  BYTE2(v131) = 1;
  if (byte_1ECF4C288)
    goto LABEL_111;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v96 = HIBYTE(word_1ECF4C286) != 0;
LABEL_111:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v124, v96, "DeleteByVal handler", 20, "DeleteByVal handler", a1);
    goto LABEL_103;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v124, "DeleteByVal handler", 20, a1);
LABEL_103:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v124, v97, v98, v99, v100, v101, v102, v103);
  v111 = v118;
  if (v120 != (_BYTE *)v118 && v118)
  {
    v118 = 0;
    LODWORD(v119) = 0;
    WTF::fastFree((unint64_t)v111, v104, v105, v106, v107, v108, v109, v110);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v136, v104, v105, v106, v107, v108, v109, v110);
}

uint64_t JSC::deleteByValWithStringDeleteNonConfigurableHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765245;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CC3A0);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276351;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 0, 3, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CC47CLL);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CC474);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 1384120320;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CC46CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CC440);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "DeleteByVal handler", 20, "DeleteByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "DeleteByVal handler", 20, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::deleteByValWithStringDeleteMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765245;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CCD74);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276351;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 0, 3, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CCE50);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CCE48);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 838861792;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CCE40);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CCE14);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "DeleteByVal handler", 20, "DeleteByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "DeleteByVal handler", 20, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::deleteByValWithSymbolDeleteHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  int v48;
  WTF *v49;
  WTF *v50;
  char *v51;
  WTF *v52;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  pthread_key_t *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  unsigned int v95;
  char v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  unsigned int v113;
  int v114;
  char v115;
  __int16 v116;
  char v117;
  WTF *v118;
  uint64_t v119;
  _BYTE v120[31];
  char v121;
  char **v122;
  char *v123;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  _BYTE v128[128];
  unsigned int v129;
  char v130;
  int v131;
  int v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _BYTE v136[32];
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  _BYTE v141[128];
  unsigned int v142;
  unsigned int v143;
  int v144;
  char v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _BYTE *v149;
  char v150;
  uint64_t v151;
  int v152;
  _BYTE *v153;
  char v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v136[0] = 0;
  v136[24] = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0x8000000080000000;
  v140 = v141;
  v142 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v124 = (WTF *)&v123;
    v118 = (WTF *)&v124;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v118, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v142;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v142 < v16)
    {
      if (v140 && v140 != v141)
      {
        WTF::fastFree((unint64_t)v140, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v140 = (_BYTE *)v14;
      v142 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v142;
    }
  }
  v17 = 0;
  v145 = 1;
  v150 = 16;
  v152 = 0x10000;
  v154 = 17;
  v156 = 0x20000;
  v143 = 0;
  v144 = 0;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = v136;
  v151 = 0;
  v153 = v136;
  v155 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v143;
  }
  *(_DWORD *)&v140[v17] = -1447068675;
  v18 = v143 + 4;
  v143 += 4;
  v118 = (WTF *)v120;
  v119 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v136, "check structure");
    v18 = v143;
  }
  if (v18 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v143;
  }
  *(_DWORD *)&v140[v18] = -1203765245;
  v19 = v143;
  v20 = v143 + 4;
  v143 += 4;
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CD860);
  }
  *((_DWORD *)v153 + 52) &= ~v156;
  v21 = v154 & 0x1F | 0xB8418120;
  if (v19 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v143;
  }
  *(_DWORD *)&v140[v20] = v21;
  v22 = v143;
  v23 = v143 + 4;
  v143 += 4;
  if (v22 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v143;
  }
  *(_DWORD *)&v140[v23] = 1796276351;
  v24 = v143 + 4;
  v143 += 4;
  if (v157)
  {
    for (; (int)v24 < SHIDWORD(v139); v143 = v24)
    {
      if (v24 + 4 > v142)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v143;
      }
      *(_DWORD *)&v140[v24] = -721215457;
      v24 = v143 + 4;
    }
    v144 = 0;
  }
  if (v24 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v143;
  }
  *(_DWORD *)&v140[v24] = 1409286145;
  v25 = v143;
  v143 += 4;
  v26 = v143;
  v27 = v25 + 8;
  v28 = v143;
  if (v27 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v143;
  }
  *(_DWORD *)&v140[v28] = -721215457;
  v143 += 4;
  if (v157)
    v29 = -122;
  else
    v29 = -126;
  v113 = v26;
  v114 = 0;
  v115 = v29;
  v116 = 1;
  v117 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v119) == (_DWORD)v119)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v118, (void *)(HIDWORD(v119) + 1), (unint64_t)&v113, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v118 + 12 * HIDWORD(v119);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v114;
      v33 = (char *)v118 + 12 * HIDWORD(v119);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v119);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v124, (uint64_t)v136, 1, 3, v9, v10, v11, v12);
  v41 = v124;
  v42 = HIDWORD(v125);
  if (HIDWORD(v125))
  {
    v43 = HIDWORD(v119);
    v44 = HIDWORD(v119) + (unint64_t)HIDWORD(v125);
    if (v44 > v119)
    {
      v45 = v119 + ((unint64_t)v119 >> 2);
      if (v45 >= 0x10)
        v46 = v45 + 1;
      else
        v46 = 16;
      if (v46 <= v44)
        v46 = HIDWORD(v119) + (unint64_t)HIDWORD(v125);
      v47 = v118;
      if (v46 < 3)
      {
        v118 = (WTF *)v120;
        LODWORD(v119) = 2;
        v49 = (WTF *)v120;
      }
      else
      {
        if (v46 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CD9BCLL);
        }
        v48 = 12 * v46;
        v49 = (WTF *)WTF::fastMalloc((WTF *)(12 * v46));
        LODWORD(v119) = (v48 & 0xFFFFFFFC) / 0xC;
        v118 = v49;
      }
      if (v43)
      {
        v50 = v47;
        do
        {
          *(_DWORD *)v49 = *(_DWORD *)v50;
          *(_QWORD *)((char *)v49 + 4) = *(_QWORD *)((char *)v50 + 4);
          v50 = (WTF *)((char *)v50 + 12);
          v49 = (WTF *)((char *)v49 + 12);
        }
        while (v50 != (WTF *)((char *)v47 + 12 * v43));
      }
      if (v120 != (_BYTE *)v47 && v47)
      {
        if (v118 == v47)
        {
          v118 = 0;
          LODWORD(v119) = 0;
        }
        WTF::fastFree((unint64_t)v47, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v44 < HIDWORD(v119))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CD9B4);
    }
    v51 = (char *)v118 + 12 * HIDWORD(v119);
    v52 = (WTF *)((char *)v41 + 12 * v42);
    do
    {
      *(_DWORD *)v51 = *(_DWORD *)v41;
      *(_QWORD *)(v51 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v51 += 12;
    }
    while (v41 != v52);
    HIDWORD(v119) = v44;
    v41 = v124;
  }
  if (&v126 != (uint64_t *)v41 && v41 != 0)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v54 = v143;
  if (v143 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v54 = v143;
  }
  *(_DWORD *)&v140[v54] = -1203650269;
  v55 = v143;
  v56 = v143 + 4;
  v143 += 4;
  if (v55 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v56 = v143;
  }
  *(_DWORD *)&v140[v56] = -763363323;
  v143 += 4;
  JSC::AssemblyHelpers::storeProperty((uint64_t)v136, 5, 0, 3, 4, v38, v39, v40);
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CD8E0);
  }
  *((_DWORD *)v149 + 52) &= ~v152;
  v64 = v150 & 0x1F | 0xB8428120;
  v65 = v143;
  if (v143 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v65 = v143;
  }
  *(_DWORD *)&v140[v65] = v64;
  v66 = v143;
  v67 = v143 + 4;
  v143 += 4;
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CD910);
  }
  *((_DWORD *)v149 + 52) &= ~v152;
  v68 = v150 & 0x1F | 0xB8000000;
  if (v66 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v67 = v143;
  }
  *(_DWORD *)&v140[v67] = v68;
  v69 = v143;
  v70 = v143 + 4;
  v143 += 4;
  if (v69 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v70 = v143;
  }
  *(_DWORD *)&v140[v70] = 838861792;
  v71 = v143;
  v72 = v143 + 4;
  v143 += 4;
  if (v71 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v72 = v143;
  }
  *(_DWORD *)&v140[v72] = -1463714819;
  v73 = v143;
  v74 = v143 + 4;
  v143 += 4;
  if (v73 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v74 = v143;
  }
  *(_DWORD *)&v140[v74] = -698416192;
  v75 = v143 + 4;
  v143 += 4;
  if (HIDWORD(v119))
  {
    v76 = 0;
    v77 = 0;
    v78 = 12 * HIDWORD(v119);
    do
    {
      if (v77 >= HIDWORD(v119))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CD9ACLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v118 + v76), (uint64_t)v136, v58, v59, v60, v61, v62, v63);
      ++v77;
      v76 += 12;
    }
    while (v78 != v76);
    v75 = v143;
  }
  if (v75 + 4 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v75 = v143;
  }
  *(_DWORD *)&v140[v75] = -129662679;
  v79 = v143;
  v80 = v143 + 4;
  v143 += 4;
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CD980);
  }
  *((_DWORD *)v149 + 52) &= ~v152;
  v81 = v150 & 0x1F | 0xF8410120;
  if (v79 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v80 = v143;
  }
  *(_DWORD *)&v140[v80] = v81;
  v82 = v143;
  v83 = v143 + 4;
  v143 += 4;
  if (v82 + 8 > v142)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v140, v57, v58, v59, v60, v61, v62, v63);
    v83 = v143;
  }
  *(_DWORD *)&v140[v83] = -702610944;
  v143 += 4;
  v124 = 0;
  v125 = 0;
  v126 = -1;
  v127 = (WTF *)v128;
  v129 = 128;
  v84 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v84 != -1)
  {
    v123 = &v121;
    v122 = &v123;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v122, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v85 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v93 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v93)
  {
    v93 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v93, v85);
  }
  v94 = *(WTF **)v93;
  if (*(_QWORD *)v93 != v93 + 8)
  {
    v95 = *(_DWORD *)(v93 + 136);
    if (v129 < v95)
    {
      if (v127 && v127 != (WTF *)v128)
      {
        WTF::fastFree((unint64_t)v127, v86, v87, v88, v89, v90, v91, v92);
        v94 = *(WTF **)v93;
        v95 = *(_DWORD *)(v93 + 136);
      }
      v127 = v94;
      v129 = v95;
      *(_QWORD *)v93 = v93 + 8;
      *(_DWORD *)(v93 + 136) = 128;
    }
  }
  v96 = 1;
  v130 = 1;
  v131 = 0;
  v132 = 6;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v124, (uint64_t)v136, 1, v88, v89, v90, v91, v92);
  BYTE2(v131) = 1;
  if (byte_1ECF4C288)
    goto LABEL_111;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v96 = HIBYTE(word_1ECF4C286) != 0;
LABEL_111:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v124, v96, "DeleteByVal handler", 20, "DeleteByVal handler", a1);
    goto LABEL_103;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v124, "DeleteByVal handler", 20, a1);
LABEL_103:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v124, v97, v98, v99, v100, v101, v102, v103);
  v111 = v118;
  if (v120 != (_BYTE *)v118 && v118)
  {
    v118 = 0;
    LODWORD(v119) = 0;
    WTF::fastFree((unint64_t)v111, v104, v105, v106, v107, v108, v109, v110);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v136, v104, v105, v106, v107, v108, v109, v110);
}

uint64_t JSC::deleteByValWithSymbolDeleteNonConfigurableHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765245;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CE2B0);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276351;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 1, 3, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CE38CLL);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CE384);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 1384120320;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CE37CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CE350);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "DeleteByVal handler", 20, "DeleteByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "DeleteByVal handler", 20, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::deleteByValWithSymbolDeleteMissHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  pthread_key_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unsigned int v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[31];
  char v106;
  char **v107;
  char *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _BYTE v113[128];
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _BYTE v121[32];
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  unsigned int v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v121[0] = 0;
  v121[24] = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0x8000000080000000;
  v125 = v126;
  v127 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v109 = (WTF *)&v108;
    v103 = (WTF *)&v109;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v127;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v127 < v16)
    {
      if (v125 && v125 != v126)
      {
        WTF::fastFree((unint64_t)v125, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v125 = (_BYTE *)v14;
      v127 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v127;
    }
  }
  v17 = 0;
  v130 = 1;
  v135 = 16;
  v137 = 0x10000;
  v139 = 17;
  v141 = 0x20000;
  v128 = 0;
  v129 = 0;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = v121;
  v136 = 0;
  v138 = v121;
  v140 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v128;
  }
  *(_DWORD *)&v125[v17] = -1447068675;
  v18 = v128 + 4;
  v128 += 4;
  v103 = (WTF *)v105;
  v104 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v121, "check structure");
    v18 = v128;
  }
  if (v18 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v128;
  }
  *(_DWORD *)&v125[v18] = -1203765245;
  v19 = v128;
  v20 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CEC84);
  }
  *((_DWORD *)v138 + 52) &= ~v141;
  v21 = v139 & 0x1F | 0xB8418120;
  if (v19 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v128;
  }
  *(_DWORD *)&v125[v20] = v21;
  v22 = v128;
  v23 = v128 + 4;
  v128 += 4;
  if (v22 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v128;
  }
  *(_DWORD *)&v125[v23] = 1796276351;
  v24 = v128 + 4;
  v128 += 4;
  if (v142)
  {
    for (; (int)v24 < SHIDWORD(v124); v128 = v24)
    {
      if (v24 + 4 > v127)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v128;
      }
      *(_DWORD *)&v125[v24] = -721215457;
      v24 = v128 + 4;
    }
    v129 = 0;
  }
  if (v24 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v128;
  }
  *(_DWORD *)&v125[v24] = 1409286145;
  v25 = v128;
  v128 += 4;
  v26 = v128;
  v27 = v25 + 8;
  v28 = v128;
  if (v27 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v128;
  }
  *(_DWORD *)&v125[v28] = -721215457;
  v128 += 4;
  if (v142)
    v29 = -122;
  else
    v29 = -126;
  v98 = v26;
  v99 = 0;
  v100 = v29;
  v101 = 1;
  v102 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v104) == (_DWORD)v104)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, (void *)(HIDWORD(v104) + 1), (unint64_t)&v98, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v99;
      v33 = (char *)v103 + 12 * HIDWORD(v104);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v104);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v109, (uint64_t)v121, 1, 3, v9, v10, v11, v12);
  v41 = v109;
  v42 = HIDWORD(v110);
  if (HIDWORD(v110))
  {
    v43 = a1;
    v44 = HIDWORD(v104);
    v45 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
    if (v45 > v104)
    {
      v46 = v104 + ((unint64_t)v104 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v104) + (unint64_t)HIDWORD(v110);
      v48 = v103;
      if (v47 < 3)
      {
        v50 = (WTF *)v105;
        v103 = (WTF *)v105;
        LODWORD(v104) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CED60);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v104) = (v49 & 0xFFFFFFFC) / 0xC;
        v103 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v105 != (_BYTE *)v48 && v48)
      {
        if (v103 == v48)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v104))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CED58);
    }
    v52 = (char *)v103 + 12 * HIDWORD(v104);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v104) = v45;
    v41 = v109;
  }
  if (&v111 != (uint64_t *)v41 && v41 != 0)
  {
    v109 = 0;
    LODWORD(v110) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v128;
  if (v128 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v128;
  }
  *(_DWORD *)&v125[v55] = 838861792;
  v56 = v128;
  v57 = v128 + 4;
  v128 += 4;
  if (v56 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v128;
  }
  *(_DWORD *)&v125[v57] = -1463714819;
  v58 = v128;
  v59 = v128 + 4;
  v128 += 4;
  if (v58 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v59 = v128;
  }
  *(_DWORD *)&v125[v59] = -698416192;
  v60 = v128 + 4;
  v128 += 4;
  if (HIDWORD(v104))
  {
    v61 = 0;
    v62 = 0;
    v63 = 12 * HIDWORD(v104);
    do
    {
      if (v62 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CED50);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v103 + v61), (uint64_t)v121, v35, v36, v37, v38, v39, v40);
      ++v62;
      v61 += 12;
    }
    while (v63 != v61);
    v60 = v128;
  }
  if (v60 + 4 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v60 = v128;
  }
  *(_DWORD *)&v125[v60] = -129662679;
  v64 = v128;
  v65 = v128 + 4;
  v128 += 4;
  if (!v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CED24);
  }
  *((_DWORD *)v134 + 52) &= ~v137;
  v66 = v135 & 0x1F | 0xF8410120;
  if (v64 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v65 = v128;
  }
  *(_DWORD *)&v125[v65] = v66;
  v67 = v128;
  v68 = v128 + 4;
  v128 += 4;
  if (v67 + 8 > v127)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v125, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v68 = v128;
  }
  *(_DWORD *)&v125[v68] = -702610944;
  v128 += 4;
  v109 = 0;
  v110 = 0;
  v111 = -1;
  v112 = (WTF *)v113;
  v114 = 128;
  v69 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v69 != -1)
  {
    v108 = &v106;
    v107 = &v108;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v70 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v78 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v78)
  {
    v78 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v78, v70);
  }
  v79 = *(WTF **)v78;
  if (*(_QWORD *)v78 != v78 + 8)
  {
    v80 = *(_DWORD *)(v78 + 136);
    if (v114 < v80)
    {
      if (v112 && v112 != (WTF *)v113)
      {
        WTF::fastFree((unint64_t)v112, v71, v72, v73, v74, v75, v76, v77);
        v79 = *(WTF **)v78;
        v80 = *(_DWORD *)(v78 + 136);
      }
      v112 = v79;
      v114 = v80;
      *(_QWORD *)v78 = v78 + 8;
      *(_DWORD *)(v78 + 136) = 128;
    }
  }
  v81 = 1;
  v115 = 1;
  v116 = 0;
  v117 = 6;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v109, (uint64_t)v121, 1, v73, v74, v75, v76, v77);
  BYTE2(v116) = 1;
  if (byte_1ECF4C288)
    goto LABEL_101;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v81 = HIBYTE(word_1ECF4C286) != 0;
LABEL_101:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, v81, "DeleteByVal handler", 20, "DeleteByVal handler", a1);
    goto LABEL_93;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v109, "DeleteByVal handler", 20, a1);
LABEL_93:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v109, v82, v83, v84, v85, v86, v87, v88);
  v96 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v121, v89, v90, v91, v92, v93, v94, v95);
}

uint64_t JSC::checkPrivateBrandHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  pthread_key_t *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  unsigned int v78;
  char v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  unsigned int v96;
  int v97;
  char v98;
  __int16 v99;
  char v100;
  WTF *v101;
  uint64_t v102;
  _BYTE v103[31];
  char v104;
  char **v105;
  char *v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  _BYTE v111[128];
  unsigned int v112;
  char v113;
  int v114;
  int v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _BYTE v119[32];
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  _BYTE v124[128];
  unsigned int v125;
  unsigned int v126;
  int v127;
  char v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE *v132;
  char v133;
  uint64_t v134;
  int v135;
  _BYTE *v136;
  char v137;
  uint64_t v138;
  int v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v119[0] = 0;
  v119[24] = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0x8000000080000000;
  v123 = v124;
  v125 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v107 = (WTF *)&v106;
    v101 = (WTF *)&v107;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v101, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v125;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v125 < v16)
    {
      if (v123 && v123 != v124)
      {
        WTF::fastFree((unint64_t)v123, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v123 = (_BYTE *)v14;
      v125 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v125;
    }
  }
  v17 = 0;
  v128 = 1;
  v133 = 16;
  v135 = 0x10000;
  v137 = 17;
  v139 = 0x20000;
  v126 = 0;
  v127 = 0;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = v119;
  v134 = 0;
  v136 = v119;
  v138 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v126;
  }
  *(_DWORD *)&v123[v17] = -1447068675;
  v18 = v126 + 4;
  v126 += 4;
  v101 = (WTF *)v103;
  v102 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v119, "check structure");
    v18 = v126;
  }
  if (v18 + 4 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v126;
  }
  *(_DWORD *)&v123[v18] = -1203765244;
  v19 = v126;
  v20 = v126 + 4;
  v126 += 4;
  if (!v128)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CF62CLL);
  }
  *((_DWORD *)v136 + 52) &= ~v139;
  v21 = v137 & 0x1F | 0xB8418120;
  if (v19 + 8 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v20 = v126;
  }
  *(_DWORD *)&v123[v20] = v21;
  v22 = v126;
  v23 = v126 + 4;
  v126 += 4;
  if (v22 + 8 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v23 = v126;
  }
  *(_DWORD *)&v123[v23] = 1796276383;
  v24 = v126 + 4;
  v126 += 4;
  if (v140)
  {
    for (; (int)v24 < SHIDWORD(v122); v126 = v24)
    {
      if (v24 + 4 > v125)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v24 = v126;
      }
      *(_DWORD *)&v123[v24] = -721215457;
      v24 = v126 + 4;
    }
    v127 = 0;
  }
  if (v24 + 4 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v126;
  }
  *(_DWORD *)&v123[v24] = 1409286145;
  v25 = v126;
  v126 += 4;
  v26 = v126;
  v27 = v25 + 8;
  v28 = v126;
  if (v27 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v28 = v126;
  }
  *(_DWORD *)&v123[v28] = -721215457;
  v126 += 4;
  if (v140)
    v29 = -122;
  else
    v29 = -126;
  v96 = v26;
  v97 = 0;
  v98 = v29;
  v99 = 1;
  v100 = -1;
  if (v26 != -1)
  {
    if (HIDWORD(v102) == (_DWORD)v102)
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v101, (void *)(HIDWORD(v102) + 1), (unint64_t)&v96, v8, v9, v10, v11, v12);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = (char *)v101 + 12 * HIDWORD(v102);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v97;
      v33 = (char *)v101 + 12 * HIDWORD(v102);
      *(_DWORD *)v33 = v26;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++HIDWORD(v102);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v107, (uint64_t)v119, 1, 4, v9, v10, v11, v12);
  v41 = v107;
  v42 = HIDWORD(v108);
  if (HIDWORD(v108))
  {
    v43 = a1;
    v44 = HIDWORD(v102);
    v45 = HIDWORD(v102) + (unint64_t)HIDWORD(v108);
    if (v45 > v102)
    {
      v46 = v102 + ((unint64_t)v102 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v102) + (unint64_t)HIDWORD(v108);
      v48 = v101;
      if (v47 < 3)
      {
        v50 = (WTF *)v103;
        v101 = (WTF *)v103;
        LODWORD(v102) = 2;
      }
      else
      {
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981CF6F8);
        }
        v49 = 12 * v47;
        v50 = (WTF *)WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v102) = (v49 & 0xFFFFFFFC) / 0xC;
        v101 = v50;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)((char *)v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 = (WTF *)((char *)v50 + 12);
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v103 != (_BYTE *)v48 && v48)
      {
        if (v101 == v48)
        {
          v101 = 0;
          LODWORD(v102) = 0;
        }
        WTF::fastFree((unint64_t)v48, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    if (v45 < HIDWORD(v102))
    {
      __break(0xC471u);
      JUMPOUT(0x1981CF6F0);
    }
    v52 = (char *)v101 + 12 * HIDWORD(v102);
    v53 = (WTF *)((char *)v41 + 12 * v42);
    a1 = v43;
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v41;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v52 += 12;
    }
    while (v41 != v53);
    HIDWORD(v102) = v45;
    v41 = v107;
  }
  if (&v109 != (uint64_t *)v41 && v41 != 0)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  v55 = v126;
  if (v126 + 4 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v55 = v126;
  }
  *(_DWORD *)&v123[v55] = -1463714819;
  v56 = v126;
  v57 = v126 + 4;
  v126 += 4;
  if (v56 + 8 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v57 = v126;
  }
  *(_DWORD *)&v123[v57] = -698416192;
  v58 = v126 + 4;
  v126 += 4;
  if (HIDWORD(v102))
  {
    v59 = 0;
    v60 = 0;
    v61 = 12 * HIDWORD(v102);
    do
    {
      if (v60 >= HIDWORD(v102))
      {
        __break(0xC471u);
        JUMPOUT(0x1981CF6E8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v101 + v59), (uint64_t)v119, v35, v36, v37, v38, v39, v40);
      ++v60;
      v59 += 12;
    }
    while (v61 != v59);
    v58 = v126;
  }
  if (v58 + 4 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v58 = v126;
  }
  *(_DWORD *)&v123[v58] = -129662679;
  v62 = v126;
  v63 = v126 + 4;
  v126 += 4;
  if (!v128)
  {
    __break(0xC471u);
    JUMPOUT(0x1981CF6BCLL);
  }
  *((_DWORD *)v132 + 52) &= ~v135;
  v64 = v133 & 0x1F | 0xF8410120;
  if (v62 + 8 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v63 = v126;
  }
  *(_DWORD *)&v123[v63] = v64;
  v65 = v126;
  v66 = v126 + 4;
  v126 += 4;
  if (v65 + 8 > v125)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v123, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v66 = v126;
  }
  *(_DWORD *)&v123[v66] = -702610944;
  v126 += 4;
  v107 = 0;
  v108 = 0;
  v109 = -1;
  v110 = (WTF *)v111;
  v112 = 128;
  v67 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v67 != -1)
  {
    v106 = &v104;
    v105 = &v106;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v105, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v68 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v76 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v76)
  {
    v76 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v76, v68);
  }
  v77 = *(WTF **)v76;
  if (*(_QWORD *)v76 != v76 + 8)
  {
    v78 = *(_DWORD *)(v76 + 136);
    if (v112 < v78)
    {
      if (v110 && v110 != (WTF *)v111)
      {
        WTF::fastFree((unint64_t)v110, v69, v70, v71, v72, v73, v74, v75);
        v77 = *(WTF **)v76;
        v78 = *(_DWORD *)(v76 + 136);
      }
      v110 = v77;
      v112 = v78;
      *(_QWORD *)v76 = v76 + 8;
      *(_DWORD *)(v76 + 136) = 128;
    }
  }
  v79 = 1;
  v113 = 1;
  v114 = 0;
  v115 = 6;
  v116 = 0u;
  v117 = 0u;
  v118 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v107, (uint64_t)v119, 1, v71, v72, v73, v74, v75);
  BYTE2(v114) = 1;
  if (byte_1ECF4C288)
    goto LABEL_99;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v79 = HIBYTE(word_1ECF4C286) != 0;
LABEL_99:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v107, v79, "CheckPrivateBrand handler", 26, "CheckPrivateBrand handler", a1);
    goto LABEL_91;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v107, "CheckPrivateBrand handler", 26, a1);
LABEL_91:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v107, v80, v81, v82, v83, v84, v85, v86);
  v94 = v101;
  if (v103 != (_BYTE *)v101 && v101)
  {
    v101 = 0;
    LODWORD(v102) = 0;
    WTF::fastFree((unint64_t)v94, v87, v88, v89, v90, v91, v92, v93);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v119, v87, v88, v89, v90, v91, v92, v93);
}

uint64_t JSC::setPrivateBrandHandler@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  char *v52;
  WTF *v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  pthread_key_t *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  unsigned int v84;
  char v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  _QWORD *v102;
  WTF *v103;
  _QWORD *v104;
  _QWORD *v105;
  WTF *v106;
  unsigned int v107;
  int v108;
  char v109;
  __int16 v110;
  char v111;
  WTF *v112;
  uint64_t v113;
  _BYTE v114[31];
  char v115;
  char **v116;
  char *v117;
  WTF *v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  _BYTE v122[128];
  unsigned int v123;
  char v124;
  int v125;
  int v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _BYTE v130[32];
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  _BYTE v135[128];
  unsigned int v136;
  unsigned int v137;
  int v138;
  char v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  int v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;
  int v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v130[0] = 0;
  v130[24] = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0x8000000080000000;
  v134 = v135;
  v136 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v118 = (WTF *)&v117;
    v112 = (WTF *)&v118;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v136;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v136 < v16)
    {
      if (v134 && v134 != v135)
      {
        WTF::fastFree((unint64_t)v134, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v134 = (_BYTE *)v14;
      v136 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v136;
    }
  }
  v17 = 0;
  v139 = 1;
  v144 = 16;
  v146 = 0x10000;
  v148 = 17;
  v150 = 0x20000;
  v137 = 0;
  v138 = 0;
  v140 = 0u;
  v141 = 0u;
  v142 = 0u;
  v143 = v130;
  v145 = 0;
  v147 = v130;
  v149 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v137;
  }
  *(_DWORD *)&v134[v17] = -1447068675;
  v18 = v137 + 4;
  v137 += 4;
  v19 = (WTF *)v114;
  v112 = (WTF *)v114;
  v113 = 2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v130, "check structure");
    v18 = v137;
  }
  if (v18 + 4 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v18 = v137;
  }
  *(_DWORD *)&v134[v18] = -1203765244;
  v20 = v137;
  v21 = v137 + 4;
  v137 += 4;
  if (!v139)
  {
    __break(0xC471u);
    JUMPOUT(0x1981D0070);
  }
  *((_DWORD *)v147 + 52) &= ~v150;
  v22 = v148 & 0x1F | 0xB8418120;
  if (v20 + 8 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v21 = v137;
  }
  *(_DWORD *)&v134[v21] = v22;
  v23 = v137;
  v24 = v137 + 4;
  v137 += 4;
  if (v23 + 8 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v24 = v137;
  }
  *(_DWORD *)&v134[v24] = 1796276383;
  v25 = v137 + 4;
  v137 += 4;
  if (v151)
  {
    for (; (int)v25 < SHIDWORD(v133); a1 = v105)
    {
      v102 = a1;
      v103 = v19;
      v104 = v102;
      if (v25 + 4 > v136)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
        v25 = v137;
      }
      *(_DWORD *)&v134[v25] = -721215457;
      v25 = v137 + 4;
      v137 = v25;
      v105 = v104;
      v19 = v103;
    }
    v138 = 0;
  }
  if (v25 + 4 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v25 = v137;
  }
  *(_DWORD *)&v134[v25] = 1409286145;
  v26 = v137;
  v137 += 4;
  v27 = v137;
  v28 = v26 + 8;
  v29 = v137;
  if (v28 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v29 = v137;
  }
  *(_DWORD *)&v134[v29] = -721215457;
  v137 += 4;
  if (v151)
    v30 = -122;
  else
    v30 = -126;
  v107 = v27;
  v108 = 0;
  v109 = v30;
  v110 = 1;
  v111 = -1;
  if (v27 != -1)
  {
    if (HIDWORD(v113) == (_DWORD)v113)
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v112, (void *)(HIDWORD(v113) + 1), (unint64_t)&v107, v8, v9, v10, v11, v12);
      v33 = *v31;
      v32 = v31 + 1;
      v34 = (char *)v112 + 12 * HIDWORD(v113);
      *(_DWORD *)v34 = v33;
    }
    else
    {
      v32 = &v108;
      v34 = (char *)v112 + 12 * HIDWORD(v113);
      *(_DWORD *)v34 = v27;
    }
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++HIDWORD(v113);
  }
  JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v118, (uint64_t)v130, 1, 4, v9, v10, v11, v12);
  v42 = v118;
  v43 = HIDWORD(v119);
  if (HIDWORD(v119))
  {
    v44 = HIDWORD(v113);
    v45 = HIDWORD(v113) + (unint64_t)HIDWORD(v119);
    if (v45 > v113)
    {
      v46 = v113 + ((unint64_t)v113 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45)
        v47 = HIDWORD(v113) + (unint64_t)HIDWORD(v119);
      v48 = v112;
      if (v47 < 3)
      {
        v112 = v19;
        LODWORD(v113) = 2;
        v50 = (uint64_t)v19;
      }
      else
      {
        v106 = v19;
        if (v47 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1981D019CLL);
        }
        v49 = 12 * v47;
        v50 = WTF::fastMalloc((WTF *)(12 * v47));
        LODWORD(v113) = (v49 & 0xFFFFFFFC) / 0xC;
        v112 = (WTF *)v50;
        v19 = v106;
      }
      if (v44)
      {
        v51 = v48;
        do
        {
          *(_DWORD *)v50 = *(_DWORD *)v51;
          *(_QWORD *)(v50 + 4) = *(_QWORD *)((char *)v51 + 4);
          v51 = (WTF *)((char *)v51 + 12);
          v50 += 12;
        }
        while (v51 != (WTF *)((char *)v48 + 12 * v44));
      }
      if (v19 != v48 && v48)
      {
        if (v112 == v48)
        {
          v112 = 0;
          LODWORD(v113) = 0;
        }
        WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    if (v45 < HIDWORD(v113))
    {
      __break(0xC471u);
      JUMPOUT(0x1981D0194);
    }
    v52 = (char *)v112 + 12 * HIDWORD(v113);
    v53 = (WTF *)((char *)v42 + 12 * v43);
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v42;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v52 += 12;
    }
    while (v42 != v53);
    HIDWORD(v113) = v45;
    v42 = v118;
  }
  if (&v120 != (uint64_t *)v42 && v42 != 0)
  {
    v118 = 0;
    LODWORD(v119) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  if (!v139)
  {
    __break(0xC471u);
    JUMPOUT(0x1981D00D0);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v55 = v144 & 0x1F | 0xB8428120;
  v56 = v137;
  if (v137 + 4 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v56 = v137;
  }
  *(_DWORD *)&v134[v56] = v55;
  v57 = v137;
  v58 = v137 + 4;
  v137 += 4;
  if (!v139)
  {
    __break(0xC471u);
    JUMPOUT(0x1981D0100);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v59 = v144 & 0x1F | 0xB8000000;
  if (v57 + 8 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v58 = v137;
  }
  *(_DWORD *)&v134[v58] = v59;
  v60 = v137;
  v61 = v137 + 4;
  v137 += 4;
  if (v60 + 8 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v61 = v137;
  }
  *(_DWORD *)&v134[v61] = -1463714819;
  v62 = v137;
  v63 = v137 + 4;
  v137 += 4;
  if (v62 + 8 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v63 = v137;
  }
  *(_DWORD *)&v134[v63] = -698416192;
  v64 = v137 + 4;
  v137 += 4;
  if (HIDWORD(v113))
  {
    v65 = 0;
    v66 = 0;
    v67 = 12 * HIDWORD(v113);
    do
    {
      if (v66 >= HIDWORD(v113))
      {
        __break(0xC471u);
        JUMPOUT(0x1981D018CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v112 + v65), (uint64_t)v130, v36, v37, v38, v39, v40, v41);
      ++v66;
      v65 += 12;
    }
    while (v67 != v65);
    v64 = v137;
  }
  if (v64 + 4 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v64 = v137;
  }
  *(_DWORD *)&v134[v64] = -129662679;
  v68 = v137;
  v69 = v137 + 4;
  v137 += 4;
  if (!v139)
  {
    __break(0xC471u);
    JUMPOUT(0x1981D0160);
  }
  *((_DWORD *)v143 + 52) &= ~v146;
  v70 = v144 & 0x1F | 0xF8410120;
  if (v68 + 8 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v69 = v137;
  }
  *(_DWORD *)&v134[v69] = v70;
  v71 = v137;
  v72 = v137 + 4;
  v137 += 4;
  if (v71 + 8 > v136)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v134, (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v72 = v137;
  }
  *(_DWORD *)&v134[v72] = -702610944;
  v137 += 4;
  v118 = 0;
  v119 = 0;
  v120 = -1;
  v121 = (WTF *)v122;
  v123 = 128;
  v73 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v73 != -1)
  {
    v117 = &v115;
    v116 = &v117;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v116, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v74 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v82 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v82)
  {
    v82 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v82, v74);
  }
  v83 = *(WTF **)v82;
  if (*(_QWORD *)v82 != v82 + 8)
  {
    v84 = *(_DWORD *)(v82 + 136);
    if (v123 < v84)
    {
      if (v121 && v121 != (WTF *)v122)
      {
        WTF::fastFree((unint64_t)v121, v75, v76, v77, v78, v79, v80, v81);
        v83 = *(WTF **)v82;
        v84 = *(_DWORD *)(v82 + 136);
      }
      v121 = v83;
      v123 = v84;
      *(_QWORD *)v82 = v82 + 8;
      *(_DWORD *)(v82 + 136) = 128;
    }
  }
  v85 = 1;
  v124 = 1;
  v125 = 0;
  v126 = 6;
  v127 = 0u;
  v128 = 0u;
  v129 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v118, (uint64_t)v130, 1, v77, v78, v79, v80, v81);
  BYTE2(v125) = 1;
  if (byte_1ECF4C288)
    goto LABEL_105;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v85 = HIBYTE(word_1ECF4C286) != 0;
LABEL_105:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v118, v85, "SetPrivateBrand handler", 24, "SetPrivateBrand handler", a1);
    goto LABEL_97;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v118, "SetPrivateBrand handler", 24, a1);
LABEL_97:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v118, v86, v87, v88, v89, v90, v91, v92);
  v100 = v112;
  if (v19 != v112 && v112)
  {
    v112 = 0;
    LODWORD(v113) = 0;
    WTF::fastFree((unint64_t)v100, v93, v94, v95, v96, v97, v98, v99);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v130, v93, v94, v95, v96, v97, v98, v99);
}

void JSC::InlineCacheCompiler::compileHandler(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const JSC::AccessCase **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  const JSC::AccessCase *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  JSC::AccessCase **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const JSC::AccessCase *v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  const JSC::AccessCase *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  WTF *v63;
  WTF *v64;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  const JSC::AccessCase *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int **v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  JSC::AccessCase **v83;
  JSC::AccessCase *v84;
  int v85;
  uint64_t v86;
  unsigned int *v87;
  _DWORD *v88;
  __int16 v89;
  uint64_t v90;
  const JSC::AccessCase **v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  WTF::StringImpl *v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  WTF *v100;
  WTF *v101;
  void *v102;
  WTF *v103;
  uint64_t v104;
  _BYTE v105[64];
  WTF *v106;
  uint64_t v107;
  _BYTE v108[24];

  v13 = *a5;
  v14 = *((_QWORD *)*a5 + 2);
  if (v14)
    v15 = v14 + 8;
  else
    v15 = 0;
  if (v14)
    v16 = v14 + 8 + 24 * *(unsigned int *)(v14 + 4);
  else
    v16 = 0;
  if (v15 != v16)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
    {
      if ((*v17 & 0xFF000000000000) == 0x5000000000000)
      {
        JSC::ObjectPropertyCondition::isWatchableAssumingImpurePropertyWatchpoint((uint64_t)(v17 - 1), 1, 0, a4, (uint64_t)a5, a6, a7, a8);
        if ((v72 & 1) == 0)
          goto LABEL_104;
      }
      else if ((*v17 & 0xFFFFFFFFFFFFFFLL) == 0
             || (JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(v17, 0, 16 * (*(_DWORD *)*(v17 - 1) & 0xFFFFFFFE), 0, (uint64_t)a5, a6, a7, a8), !v18))
      {
LABEL_104:
        *(_DWORD *)a9 = 0;
        *(_QWORD *)(a9 + 16) = 0;
        *(_QWORD *)(a9 + 24) = 0;
        *(_QWORD *)(a9 + 8) = 0;
        return;
      }
      v19 = v17 + 2;
      v17 += 3;
    }
    while (v19 != (unint64_t *)v16);
    v13 = *a5;
  }
  v20 = *a1;
  v106 = (WTF *)v108;
  v107 = 3;
  v21 = *((unsigned __int8 *)v13 + 4);
  if (v21 > 0x20 || ((1 << v21) & 0x100000014) == 0)
  {
    v23 = *((_DWORD *)v13 + 3);
    goto LABEL_19;
  }
  v24 = *(_QWORD *)(16 * (*((_DWORD *)v13 + 3) & 0xFFFFFFFE) + 0x40);
  if (!v24)
  {
    v25 = *((_QWORD *)v13 + 4);
    if (!v25)
      goto LABEL_43;
    goto LABEL_26;
  }
  if (*(_BYTE *)(v24 + 5) != 1)
  {
    v23 = *(_DWORD *)(v24 + 80);
LABEL_19:
    if (v23)
      v24 = 16 * (v23 & 0xFFFFFFFE);
    else
      v24 = 0;
  }
  v25 = *((_QWORD *)v13 + 4);
  if (!v25)
    goto LABEL_43;
  if (v24)
  {
    if ((*(_DWORD *)(v24 + 16) & 3) != 2)
    {
      v26 = *(_WORD *)(v24 + 12);
      if ((v26 & 0x18) == 0x10 && (v26 & 0x20) != 0)
      {
LABEL_146:
        if ((v25 & 1) != 0)
          v95 = (WTF::StringImpl *)(v25 & 0xFFFFFFFFFFFFFFFELL);
        else
          v95 = *(WTF::StringImpl **)(v25 + 8);
        v103 = (WTF *)JSC::VM::ensureWatchpointSetForImpureProperty(v20, v95, a3, a4, (uint64_t)a5, a6, a7, a8);
        v96 = HIDWORD(v107);
        *((_QWORD *)v106 + HIDWORD(v107)) = v103;
        HIDWORD(v107) = v96 + 1;
        v21 = *((unsigned __int8 *)v13 + 4);
        goto LABEL_43;
      }
    }
  }
LABEL_26:
  v27 = *((_QWORD *)v13 + 2);
  if (v27)
    v28 = v27 + 8;
  else
    v28 = 0;
  if (v27)
    v29 = v27 + 8 + 24 * *(unsigned int *)(v27 + 4);
  else
    v29 = 0;
  for (; v28 != v29; v28 += 24)
  {
    v30 = *(_QWORD *)(v28 + 8);
    if ((v30 & 0xFFFFFFFFFFFFFFLL) == 0)
      continue;
    if (BYTE6(v30) >= 3u)
    {
      if (BYTE6(v30) > 7u)
        goto LABEL_41;
      LODWORD(v30) = 1 << SBYTE6(v30);
      if (((1 << SBYTE6(v30)) & 0x98) != 0)
        continue;
      if ((v30 & 0x60) == 0)
      {
LABEL_41:
        __break(0xC471u);
        goto LABEL_173;
      }
    }
    if ((*(_DWORD *)(16 * (**(_DWORD **)v28 & 0xFFFFFFFE) + 0x10) & 3) != 2)
    {
      v31 = *(_WORD *)(16 * (**(_DWORD **)v28 & 0xFFFFFFFE) + 0xC);
      if ((v31 & 0x18) == 0x10 && (v31 & 0x20) != 0)
        goto LABEL_146;
    }
  }
  v32 = *((_QWORD *)v13 + 3);
  if (v32)
  {
    v86 = 0;
    v87 = *(unsigned int **)(v32 + 8);
    if (v87)
      v88 = v87 + 1;
    else
      v88 = 0;
    if (v87)
      v86 = (uint64_t)&v87[*v87 + 1];
    while (v88 != (_DWORD *)v86)
    {
      if ((*(_DWORD *)(16 * (*v88 & 0xFFFFFFFE) + 0x10) & 3) != 2)
      {
        v89 = *(_WORD *)(16 * (*v88 & 0xFFFFFFFE) + 0xC);
        if ((v89 & 0x18) == 0x10 && (v89 & 0x20) != 0)
          goto LABEL_146;
      }
      ++v88;
    }
  }
LABEL_43:
  if (v21 - 8 < 8 || !v21)
  {
    v33 = (WTF *)*((_QWORD *)v13 + 5);
    v103 = v33;
    if (v33)
    {
      v85 = HIDWORD(v107);
      if (HIDWORD(v107) == (_DWORD)v107)
      {
        WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v106, (unint64_t)&v103);
      }
      else
      {
        *((_QWORD *)v106 + HIDWORD(v107)) = v33;
        HIDWORD(v107) = v85 + 1;
      }
    }
  }
  if (v24)
  {
    v34 = *(_QWORD *)(v24 + 64);
    if (v34)
    {
      if (*(_BYTE *)(v34 + 5) != 1)
      {
        v35 = *(_QWORD *)(v34 + 72);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 8);
          if ((v36 & 1) != 0)
          {
            if ((*(_QWORD *)(v35 + 8) & 6) == 4)
              goto LABEL_53;
            v73 = (v36 >> 1) & 3;
            v36 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v36 = 1;
            *(_BYTE *)(v36 + 4) = v73;
            *(_BYTE *)(v36 + 5) = 0;
            *(_QWORD *)(v36 + 8) = v36 + 8;
            *(_QWORD *)(v36 + 16) = v36 + 8;
            __dmb(0xAu);
            *(_QWORD *)(v35 + 8) = v36;
          }
          else if (*(_BYTE *)(v36 + 4) == 2)
          {
            goto LABEL_53;
          }
          v103 = (WTF *)v36;
          v37 = HIDWORD(v107);
          if (HIDWORD(v107) == (_DWORD)v107)
          {
            WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v106, (unint64_t)&v103);
          }
          else
          {
            *((_QWORD *)v106 + HIDWORD(v107)) = v36;
            HIDWORD(v107) = v37 + 1;
          }
        }
      }
    }
  }
LABEL_53:
  if (HIDWORD(v107))
  {
    v66 = v106;
    v67 = 8 * HIDWORD(v107);
    while (*(_BYTE *)(*(_QWORD *)v66 + 4) != 2)
    {
      v66 = (WTF *)((char *)v66 + 8);
      v67 -= 8;
      if (!v67)
        goto LABEL_54;
    }
LABEL_105:
    *(_DWORD *)a9 = 0;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 8) = 0;
    goto LABEL_83;
  }
LABEL_54:
  v38 = *(JSC::AccessCase ***)a3;
  v39 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v39)
  {
    v40 = 8 * v39;
    do
    {
      if (*v38 != *a5 && JSC::AccessCase::canReplace(*v38, *a5))
        goto LABEL_105;
      ++v38;
      v40 -= 8;
    }
    while (v40);
    v38 = *(JSC::AccessCase ***)a3;
    LODWORD(v39) = *(_DWORD *)(a3 + 12);
  }
  v103 = (WTF *)v105;
  v104 = 8;
  JSC::InlineCacheCompiler::tryFoldToMegamorphic((unint64_t *)&v102, a1, (uint64_t)v38, v39, (uint64_t)a5, a6, a7, a8);
  v48 = (const JSC::AccessCase *)v102;
  if (!v102)
  {
    v49 = HIDWORD(v104);
    v50 = HIDWORD(v107) + (unint64_t)HIDWORD(v104);
    if (v50 > v104)
    {
      v97 = v104 + ((unint64_t)v104 >> 2);
      if (v97 >= 0x10)
        v98 = v97 + 1;
      else
        v98 = 16;
      if (v98 <= v50)
        v99 = HIDWORD(v107) + (unint64_t)HIDWORD(v104);
      else
        v99 = v98;
      v100 = v103;
      if (v99 < 9)
      {
        v103 = (WTF *)v105;
        LODWORD(v104) = 8;
        v101 = (WTF *)v105;
      }
      else
      {
        if (v99 >> 29)
        {
          __break(0xC471u);
LABEL_173:
          JUMPOUT(0x1981D03FCLL);
        }
        v101 = (WTF *)WTF::fastMalloc((WTF *)(8 * v99));
        LODWORD(v104) = v99;
        v103 = v101;
      }
      memcpy(v101, v100, 8 * v49);
      if (v105 != (_BYTE *)v100 && v100)
      {
        if (v103 == v100)
        {
          v103 = 0;
          LODWORD(v104) = 0;
        }
        WTF::fastFree((unint64_t)v100, v41, v42, v43, v44, v45, v46, v47);
      }
    }
    if (HIDWORD(v107))
    {
      v68 = v106;
      v69 = HIDWORD(v104);
      v70 = 8 * HIDWORD(v107);
      do
      {
        v71 = *(_QWORD *)v68;
        v68 = (WTF *)((char *)v68 + 8);
        *((_QWORD *)v103 + v69++) = v71;
        v70 -= 8;
      }
      while (v70);
      HIDWORD(v104) = v69;
    }
    goto LABEL_63;
  }
  v102 = 0;
  v74 = *a5;
  *a5 = v48;
  if (v74)
  {
    do
    {
      v75 = __ldaxr((unsigned int *)v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, (unsigned int *)v74));
    if (!v76)
    {
      atomic_store(1u, (unsigned int *)v74);
      JSC::AccessCase::operator delete((unint64_t)v74, v41, v42, v43, v44, v45, v46, v47);
    }
LABEL_63:
    v51 = (unsigned int *)v102;
    v102 = 0;
    if (v51)
    {
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        JSC::AccessCase::operator delete((unint64_t)v51, v41, v42, v43, v44, v45, v46, v47);
      }
    }
  }
  JSC::InlineCacheCompiler::compileOneAccessCaseHandler(a9, (uint64_t)a1);
  if ((*(_DWORD *)a9 - 3) <= 2)
  {
    v54 = *(_QWORD *)(a9 + 8);
    if (v54)
    {
      v55 = *(_QWORD *)(v54 + 72);
      do
        v56 = __ldaxr((unsigned int *)v55);
      while (__stlxr(v56 + 1, (unsigned int *)v55));
      v102 = (void *)v55;
      v57 = *(unsigned __int8 *)(v55 + 4);
      v58 = v57 > 0x3E || ((1 << v57) & 0x400000044008000ALL) == 0;
      if (!v58 || v57 == 112)
      {
        v77 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v77)
        {
          v78 = *(unsigned int ***)a3;
          v79 = *(_QWORD *)a3 + 8 * v77;
          do
          {
            v80 = *v78;
            *v78 = 0;
            if (v80)
            {
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                atomic_store(1u, v80);
                JSC::AccessCase::operator delete((unint64_t)v80, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              }
            }
            ++v78;
          }
          while (v78 != (unsigned int **)v79);
        }
        *(_DWORD *)(a3 + 12) = 0;
        if (*(_DWORD *)(a3 + 8))
        {
          v83 = *(JSC::AccessCase ***)a3;
          v84 = (JSC::AccessCase *)v102;
          v102 = 0;
          *v83 = v84;
          *(_DWORD *)(a3 + 12) = 1;
        }
        else
        {
          WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>(a3, (unint64_t)&v102);
        }
      }
      else
      {
        v59 = *a5;
        if ((const JSC::AccessCase *)v55 != *a5)
        {
          v90 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v90)
          {
            v91 = *(const JSC::AccessCase ***)a3;
            v92 = 8 * v90;
            while (*v91 != v59)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_78;
            }
            v102 = 0;
            *v91 = (const JSC::AccessCase *)v55;
            if (v59)
            {
              do
              {
                v93 = __ldaxr((unsigned int *)v59);
                v94 = v93 - 1;
              }
              while (__stlxr(v94, (unsigned int *)v59));
              if (!v94)
              {
                atomic_store(1u, (unsigned int *)v59);
                JSC::AccessCase::operator delete((unint64_t)v59, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              }
            }
          }
        }
      }
LABEL_78:
      v60 = (unsigned int *)v102;
      v102 = 0;
      if (v60)
      {
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, v60);
          JSC::AccessCase::operator delete((unint64_t)v60, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        }
      }
    }
  }
  v63 = v103;
  if (v105 != (_BYTE *)v103 && v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v63, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
LABEL_83:
  v64 = v106;
  if (v108 != (_BYTE *)v106 && v106 != 0)
  {
    v106 = 0;
    LODWORD(v107) = 0;
    WTF::fastFree((unint64_t)v64, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
}

void JSC::InlineCacheCompiler::compileOneAccessCaseHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  JSC::CodeBlock *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  void *v64;
  uint8x8_t v65;
  JSC::JITStubRoutine *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint8x8_t v81;
  JSC::JITStubRoutine *v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  __int128 *v93;
  uint64_t v94;
  int v95;
  _BYTE **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  void *v114;
  uint8x8_t v115;
  JSC::JITStubRoutine *v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t *v120;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  const JSC::AccessCase *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint8x8_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  int v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL4 canBeShared;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  int v184;
  _BYTE *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v201;
  int v202;
  uint64_t v203;
  _DWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int *v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  _QWORD *v222;
  unsigned int *v223;
  unsigned int v224;
  uint64_t v225;
  void *v226;
  uint8x8_t v227;
  JSC::JITStubRoutine *v228;
  unsigned int *v229;
  unsigned int v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  JSC::VM *v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t i;
  char v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  JSC::AccessCase **v259;
  uint64_t v260;
  unsigned int v261;
  BOOL v262;
  int v263;
  BOOL v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  _DWORD *v280;
  uint64_t *v281;
  int v282;
  unsigned int v283;
  int v284;
  uint64_t v285;
  _DWORD *AlternateBase;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  JSC::Structure *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  BOOL v308;
  uint64_t v309;
  unsigned int v310;
  char v311;
  uint64_t v312;
  void *v313;
  uint8x8_t v314;
  JSC::JITStubRoutine *v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  _BOOL4 v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t *v330;
  uint64_t *v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  BOOL v339;
  uint64_t v340;
  _QWORD *v341;
  unsigned int *v342;
  unsigned int v343;
  uint64_t v344;
  void *v345;
  uint8x8_t v346;
  JSC::JITStubRoutine *v347;
  unsigned int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int *v355;
  unsigned int v356;
  unsigned int v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  _BYTE *v361;
  uint64_t v362;
  unint64_t j;
  uint64_t v364;
  unsigned int *v365;
  __int16 v366;
  unsigned __int8 *v367;
  uint64_t v368;
  unsigned int v369;
  _BYTE *v370;
  char v371;
  __int16 v372;
  char v373;
  __int16 v374;
  uint64_t v375;
  unsigned int v376;
  unint64_t v377;
  char v378;
  __int16 v379;
  uint64_t v380;
  __int128 v381;
  JSC::CodeBlock *v382;
  uint64_t v383;
  unsigned int v384;
  char v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  unint64_t k;
  uint64_t v390;
  unsigned int *v391;
  __int16 v392;
  unsigned __int8 *v393;
  uint64_t v394;
  unsigned int v395;
  _BYTE *v396;
  char v397;
  __int16 v398;
  char v399;
  __int16 v400;
  uint64_t v401;
  unsigned int v402;
  unint64_t v403;
  char v404;
  __int16 v405;
  uint64_t v406;
  __int128 v407;
  JSC::CodeBlock *v408;
  uint64_t v409;
  unsigned int v410;
  char v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  uint64_t v415;
  int v416;
  unsigned int v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  unsigned int v422;
  unint64_t v423;
  pthread_key_t *v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unsigned int v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _DWORD *v448;
  unint64_t v449;
  unsigned int **v450;
  int v451;
  unsigned int v452;
  unint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  JSC::CodeBlock *v462;
  uint64_t v463;
  BOOL v464;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unsigned int *v476;
  uint64_t *v477;
  unsigned int v478;
  unsigned int *v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int *v482;
  unsigned int v483;
  unsigned int v484;
  void *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint8x8_t v492;
  uint64_t *v493;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint8x8_t v502;
  uint64_t *v503;
  uint64_t v504;
  unsigned int v505;
  JSC::JITStubRoutine *v506;
  uint64_t v507;
  unsigned int v508;
  int v509;
  int v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint8x8_t v519;
  _QWORD *v520;
  int v521;
  _QWORD *v522;
  unsigned __int8 *v523;
  BOOL v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  unint64_t v531;
  unsigned int v532;
  uint8x8_t v533;
  JSC::JITStubRoutine *v534;
  WTF *v535;
  uint64_t v536;
  uint64_t v537;
  unsigned int *v538;
  unsigned int v539;
  uint64_t v540;
  uint64_t *v541;
  void *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint8x8_t v549;
  JSC::JITStubRoutine *v550;
  uint8x8_t v551;
  WTF *v552;
  unsigned int *v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int *v556;
  void *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  void *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unsigned int v581;
  int v582;
  uint64_t v583;
  _DWORD *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  uint64_t v597;
  unsigned int v598;
  uint64_t v599;
  void *v600;
  uint8x8_t v601;
  JSC::JITStubRoutine *v602;
  uint64_t v603;
  int v604;
  unint64_t v605;
  JSC::Structure *v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  __int128 v610;
  int v611;
  unsigned int v612;
  int v613;
  unint64_t v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  unsigned int v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  uint64_t v622;
  unsigned int v623;
  uint64_t v624;
  void *v625;
  uint8x8_t v626;
  JSC::JITStubRoutine *v627;
  JSC::AccessCase **v628;
  uint64_t v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int v639;
  unsigned int v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  void *v644;
  uint8x8_t v645;
  JSC::JITStubRoutine *v646;
  uint64_t v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  unsigned int v651;
  uint64_t v652;
  unsigned int v653;
  uint64_t v654;
  uint64_t v655;
  unsigned int *v656;
  uint64_t *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  void *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unsigned int v668;
  uint64_t *v669;
  uint64_t v670;
  uint64_t *v671;
  void *v672;
  uint8x8_t v673;
  WTF *v674;
  unsigned int v675;
  uint64_t v676;
  int v677;
  _BOOL4 v678;
  int v679;
  uint64_t *v680;
  unsigned int v681;
  unsigned int v682;
  unsigned int v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t *v687;
  uint64_t v688;
  unsigned int v689;
  unsigned int v690;
  unsigned int v691;
  BOOL v692;
  uint64_t v693;
  unsigned int v694;
  char v695;
  uint64_t v696;
  void *v697;
  uint8x8_t v698;
  JSC::JITStubRoutine *v699;
  unsigned int v700;
  unsigned int v701;
  unsigned int v702;
  unint64_t StatusReg;
  uint64_t v704;
  _BYTE *v705;
  uint64_t v706;
  unsigned int v707;
  uint64_t v708;
  _BYTE *v709;
  uint64_t v710;
  __int128 *v711;
  void (**v712)(JSC::AdaptiveInferredPropertyValueWatchpointBase *__hidden);
  void (**v713)(JSC::AdaptiveValueStructureStubClearingWatchpoint *__hidden);
  uint64_t v714;
  uint64_t v715;
  _BYTE *v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v719;
  __int128 v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t *v724;
  uint64_t v725;
  unint64_t v726;
  uint64_t v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  _BYTE *v734;
  uint64_t v735;
  uint64_t v736;
  unsigned int v737;
  uint64_t *v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unint64_t v743;
  uint64_t v744;
  unint64_t v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t v748;
  _BYTE *v749;
  uint64_t *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  _BYTE *v760;
  unsigned int v761;
  BOOL v762;
  unsigned int v763;
  unsigned int v764;
  char v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  _QWORD *v769;
  uint64_t v770;
  uint64_t *v771;
  unint64_t *v772;
  uint8x8_t v773;
  uint64_t *v774;
  unsigned int v775;
  unint64_t v776;
  uint64_t v777;
  unint64_t v778;
  _QWORD *v779;
  uint64_t v780;
  unsigned int v781;
  unsigned int *v782;
  unsigned int v783;
  unsigned int v784;
  unsigned int v785;
  int v786;
  BOOL v787;
  unsigned int v788;
  int v789;
  uint64_t v790;
  int v791;
  int v792;
  unsigned int v793;
  int v794;
  uint64_t v795;
  int v796;
  int v797;
  unsigned int v798;
  _QWORD *v799;
  int v800;
  uint64_t v801;
  _DWORD *v802;
  int v803;
  unint64_t v804;
  unsigned int v805;
  int v806;
  uint64_t v807;
  _DWORD *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t *v816;
  unsigned int *v817;
  unsigned int v818;
  unsigned int v819;
  unsigned int *v820;
  unsigned int v821;
  unsigned int v822;
  unsigned int v823;
  unsigned int v824;
  uint64_t v825;
  _QWORD *v826;
  unsigned int *v827;
  unsigned int v828;
  uint64_t v829;
  void *v830;
  uint8x8_t v831;
  JSC::JITStubRoutine *v832;
  unsigned int v833;
  int v834;
  uint64_t v835;
  uint64_t v836;
  BOOL v837;
  uint64_t v838;
  uint64_t v839;
  unsigned int v841;
  int v842;
  uint64_t v843;
  _DWORD *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unint64_t v853;
  uint64_t *v854;
  unsigned int *v855;
  unsigned int v856;
  unsigned int v857;
  unsigned int *v858;
  unsigned int v859;
  unsigned int v860;
  unsigned int v861;
  unsigned int v862;
  uint64_t v863;
  _QWORD *v864;
  unsigned int *v865;
  unsigned int v866;
  uint64_t v867;
  void *v868;
  uint8x8_t v869;
  JSC::JITStubRoutine *v870;
  unsigned int v871;
  uint64_t v872;
  uint64_t v873;
  unint64_t v874;
  int v875;
  uint64_t *v876;
  uint64_t v877;
  uint64_t *v878;
  uint64_t v879;
  unsigned int v880;
  unsigned int v881;
  unsigned int v882;
  BOOL v883;
  uint64_t v884;
  unsigned int v885;
  char v886;
  uint64_t v887;
  void *v888;
  uint8x8_t v889;
  JSC::JITStubRoutine *v890;
  uint64_t v891;
  unint64_t v892;
  uint64_t *v893;
  uint64_t v894;
  unsigned int v895;
  unsigned int v896;
  unsigned int v897;
  BOOL v898;
  uint64_t v899;
  unsigned int v900;
  char v901;
  uint64_t v902;
  uint64_t v903;
  unsigned int *v904;
  uint64_t *v905;
  uint64_t *v906;
  uint64_t v907;
  uint64_t v908;
  void *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  unsigned int v916;
  uint64_t *v917;
  uint64_t v918;
  uint64_t *v919;
  void *v920;
  uint8x8_t v921;
  WTF *v922;
  uint64_t v923;
  int v924;
  _BOOL4 v925;
  unint64_t v926;
  unsigned int v927;
  unsigned int v928;
  unsigned int *v929;
  unsigned int v930;
  unsigned int v931;
  unsigned int v932;
  JSC::CallLinkInfo **v933;
  uint64_t v934;
  JSC::CallLinkInfo *v935;
  unint64_t v936;
  void *v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unsigned int v944;
  unsigned int v945;
  unsigned int v946;
  unsigned int v947;
  JSC::VM *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  int v969;
  unsigned int v970;
  int *v971;
  int *v972;
  int v973;
  uint64_t *v974;
  unsigned int *v975;
  unsigned int v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int *v984;
  void *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t *v992;
  void *v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint8x8_t v1000;
  WTF *v1001;
  unsigned int v1002;
  unsigned int v1003;
  unsigned int v1004;
  uint64_t v1005;
  unint64_t v1006;
  BOOL v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  unsigned int v1012;
  unsigned int v1013;
  unsigned int v1014;
  unsigned int v1015;
  uint64_t v1016;
  unsigned int v1017;
  uint64_t v1018;
  uint64_t v1019;
  unsigned int *v1020;
  uint64_t *v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  void *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  unsigned int v1032;
  uint64_t *v1033;
  uint64_t v1034;
  uint64_t *v1035;
  void *v1036;
  uint8x8_t v1037;
  WTF *v1038;
  uint64_t v1039;
  JSC::CodeBlock **v1040;
  uint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  unint64_t v1046;
  unint64_t v1047;
  int v1048;
  uint64_t v1049;
  int v1050;
  int v1051;
  unsigned int v1052;
  unsigned int v1053;
  unsigned int v1054;
  unsigned int v1055;
  int v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  unsigned int v1062;
  unsigned int v1063;
  uint64_t v1064;
  int v1065;
  uint64_t v1066;
  int v1067;
  unint64_t v1068;
  unint64_t v1069;
  unsigned int v1070;
  unsigned int v1071;
  unsigned int *v1072;
  unsigned int v1073;
  unsigned int v1074;
  unsigned int v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t *v1078;
  uint64_t v1079;
  unsigned int v1080;
  unsigned int v1081;
  unsigned int v1082;
  unsigned int v1083;
  uint64_t v1084;
  unsigned int v1085;
  uint64_t v1086;
  void *v1087;
  uint8x8_t v1088;
  JSC::JITStubRoutine *v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t *v1092;
  uint64_t v1093;
  unsigned int v1094;
  unsigned int v1095;
  unsigned int v1096;
  unsigned int v1097;
  uint64_t v1098;
  unsigned int v1099;
  uint64_t v1100;
  uint64_t v1101;
  unsigned int *v1102;
  uint64_t *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  void *v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unsigned int v1114;
  uint64_t *v1115;
  uint64_t v1116;
  uint64_t *v1117;
  void *v1118;
  uint8x8_t v1119;
  WTF *v1120;
  unsigned int v1121;
  int v1122;
  uint64_t v1123;
  _DWORD *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t *v1132;
  unsigned int *v1133;
  unsigned int v1134;
  unsigned int v1135;
  unsigned int *v1136;
  unsigned int v1137;
  unsigned int v1138;
  unsigned int v1139;
  unsigned int v1140;
  uint64_t v1141;
  _QWORD *v1142;
  unsigned int *v1143;
  unsigned int v1144;
  uint64_t v1145;
  void *v1146;
  uint8x8_t v1147;
  JSC::JITStubRoutine *v1148;
  unsigned int v1149;
  int v1150;
  int v1151;
  int v1152;
  unint64_t v1153;
  unint64_t v1154;
  uint64_t v1155;
  JSC::CodeBlock **v1156;
  unint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  unint64_t v1162;
  uint64_t *v1163;
  unsigned int v1164;
  unsigned int v1165;
  unsigned int v1166;
  unsigned int v1167;
  unsigned int v1168;
  unsigned int v1169;
  unsigned int v1170;
  int v1171;
  uint64_t v1172;
  _DWORD *v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  unint64_t v1182;
  uint64_t *v1183;
  unsigned int *v1184;
  unsigned int v1185;
  unsigned int v1186;
  unsigned int *v1187;
  unsigned int v1188;
  unsigned int v1189;
  unsigned int v1190;
  unsigned int v1191;
  uint64_t v1192;
  _QWORD *v1193;
  unsigned int *v1194;
  unsigned int v1195;
  uint64_t v1196;
  void *v1197;
  uint8x8_t v1198;
  JSC::JITStubRoutine *v1199;
  unsigned int v1200;
  int v1201;
  int v1202;
  int v1203;
  int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int v1210;
  uint64_t *v1211;
  unsigned int v1212;
  _DWORD *v1213;
  uint64_t *v1214;
  int v1215;
  uint64_t v1216;
  unint64_t *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  int8x8_t v1222;
  int v1223;
  uint64_t v1224;
  int *v1225;
  int *v1226;
  int v1227;
  unint64_t v1228;
  unint64_t v1229;
  JSC::CodeBlock **v1230;
  unsigned int v1231;
  unint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  unint64_t v1235;
  unint64_t v1236;
  unint64_t v1237;
  int v1238;
  uint64_t v1239;
  unint64_t v1240;
  uint64_t v1241;
  int v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  int v1257;
  unsigned int v1258;
  _DWORD *v1259;
  uint64_t *v1260;
  int v1261;
  unsigned int v1262;
  int v1263;
  uint64_t v1264;
  _DWORD *v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  unint64_t v1274;
  uint64_t v1275;
  uint64_t *v1276;
  uint64_t v1277;
  unsigned int v1278;
  unsigned int v1279;
  unsigned int v1280;
  unsigned int v1281;
  uint64_t v1282;
  unsigned int v1283;
  uint64_t v1284;
  void *v1285;
  uint8x8_t v1286;
  JSC::JITStubRoutine *v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  unsigned int v1292;
  unsigned int v1293;
  unsigned int v1294;
  unsigned int v1295;
  uint64_t v1296;
  unsigned int v1297;
  uint64_t v1298;
  uint64_t v1299;
  unsigned int *v1300;
  uint64_t *v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  void *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  unsigned int v1312;
  uint64_t *v1313;
  uint64_t v1314;
  uint64_t *v1315;
  void *v1316;
  uint8x8_t v1317;
  WTF *v1318;
  unsigned int v1319;
  uint64_t v1320;
  unint64_t *v1321;
  uint64_t v1322;
  unint64_t v1323;
  unint64_t v1324;
  int v1325;
  unint64_t v1326;
  unint64_t v1327;
  uint64_t v1328;
  JSC::CodeBlock **v1329;
  JSC::Structure *v1331;
  uint64_t v1332;
  unsigned int v1333;
  int v1334;
  uint64_t v1335;
  _DWORD *v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  uint64_t *v1347;
  uint64_t *v1348;
  unsigned int *v1349;
  unsigned int v1350;
  unsigned int v1351;
  unsigned int *v1352;
  unsigned int v1353;
  unsigned int v1354;
  unsigned int v1355;
  unsigned int v1356;
  uint64_t v1357;
  _QWORD *v1358;
  unsigned int *v1359;
  unsigned int v1360;
  uint64_t v1361;
  void *v1362;
  uint8x8_t v1363;
  JSC::JITStubRoutine *v1364;
  unsigned int v1365;
  int v1366;
  unsigned int v1367;
  int v1368;
  unint64_t v1369;
  int v1370;
  uint64_t v1371;
  unsigned int v1372;
  unsigned int v1373;
  unsigned int *v1374;
  unsigned int v1375;
  unsigned int v1376;
  unsigned int v1377;
  int v1378;
  int v1379;
  unsigned int v1380;
  unsigned int v1381;
  unsigned int v1382;
  uint64_t v1383;
  uint64_t *v1384;
  unsigned int v1385;
  unsigned int v1386;
  unsigned int v1387;
  unsigned int v1388;
  unsigned int v1389;
  unsigned int v1390;
  unsigned int v1391;
  uint64_t v1392;
  void (**v1393)(JSC::AdaptiveInferredPropertyValueWatchpointBase *__hidden);
  unint64_t *v1394;
  uint64_t v1395;
  unint64_t v1396;
  unint64_t v1397;
  uint64_t v1398;
  unint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  unsigned int *v1402;
  unsigned int v1403;
  unsigned int v1404;
  unsigned int *v1405;
  unsigned int v1406;
  unsigned int v1407;
  uint64_t v1408;
  int v1409;
  int v1410;
  BOOL v1411;
  BOOL v1413;
  uint64_t v1414;
  char *v1415;
  uint64_t v1416;
  const void *v1417;
  const void *v1418;
  void *v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  const void *v1426;
  size_t v1427;
  uint64_t v1428;
  unint64_t v1429;
  int v1430;
  unsigned int v1431;
  unsigned int v1432;
  unsigned int v1433;
  int v1434;
  unsigned int v1435;
  unsigned int v1436;
  unsigned int v1437;
  int v1438;
  unint64_t v1439;
  void *v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  unint64_t v1447;
  void *v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  unint64_t v1455;
  void *v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  void *v1464;
  unint64_t v1465;
  void *v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  unint64_t v1473;
  void *v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  unint64_t v1482;
  void *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  unsigned int *v1491;
  unsigned int v1492;
  unsigned int *v1493;
  unsigned int v1494;
  unsigned int v1495;
  unsigned int *v1496;
  unsigned int v1497;
  unsigned int v1498;
  uint64_t *v1499;
  WTF *v1500;
  unsigned int *v1501;
  unsigned int v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  WTF *v1523;
  unsigned int *v1524;
  unsigned int v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  int v1546;
  int v1547;
  unint64_t v1548;
  void *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  void *v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint8x8_t v1569;
  uint64_t *v1570;
  unsigned int *v1571;
  unsigned int v1572;
  unsigned int v1573;
  uint64_t v1574;
  uint64_t v1575;
  JSC::InlineCacheHandler *v1576;
  _QWORD *v1577;
  unint64_t v1578;
  void *v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  int v1586;
  uint64_t *v1587;
  WTF *v1588;
  unsigned int *v1589;
  unsigned int v1590;
  int v1591;
  unsigned int v1592;
  uint64_t v1593;
  unint64_t *v1594;
  uint64_t v1595;
  unint64_t v1596;
  unint64_t v1597;
  unsigned int v1598;
  uint64_t v1599;
  unint64_t *v1600;
  uint64_t v1601;
  unint64_t v1602;
  unint64_t v1603;
  unint64_t v1604;
  void *v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  unint64_t v1612;
  void *v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  int v1625;
  unsigned int v1626;
  int *v1627;
  int *v1628;
  int v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t *v1632;
  unint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  unint64_t v1636;
  unint64_t v1637;
  unint64_t v1638;
  int v1639;
  uint64_t v1640;
  unint64_t v1641;
  uint64_t v1642;
  int v1643;
  unint64_t v1644;
  uint64_t *v1645;
  unsigned int v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  int v1667;
  unint64_t v1668;
  void *v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  unint64_t v1676;
  void *v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  unint64_t v1684;
  void *v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  int v1692;
  unint64_t v1693;
  void *v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  unint64_t v1701;
  unint64_t v1702;
  uint64_t v1703;
  JSC::CodeBlock **v1704;
  unint64_t v1706;
  void *v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  unint64_t v1714;
  void *v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  int v1722;
  unint64_t v1723;
  void *v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t *v1731;
  WTF *v1732;
  unsigned int *v1733;
  unsigned int v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  unint64_t v1755;
  void *v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  unint64_t v1763;
  void *v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  int v1771;
  int v1772;
  unint64_t v1773;
  uint64_t v1774;
  unint64_t v1775;
  uint64_t casual;
  int v1777;
  unint64_t v1778;
  void *v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  int v1786;
  unint64_t v1787;
  void *v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  unint64_t v1795;
  void *v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  unint64_t v1803;
  void *v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unint64_t v1811;
  void *v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  unint64_t v1819;
  void *v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  unint64_t v1827;
  void *v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  unint64_t v1835;
  void *v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  BOOL v1845;
  uint64_t v1846;
  _QWORD *v1847;
  unsigned int v1848;
  BOOL v1849;
  uint64_t v1850;
  _QWORD *v1851;
  unint64_t v1852;
  _QWORD *v1853;
  uint64_t v1854;
  uint64_t v1855;
  unint64_t v1856;
  unint64_t v1857;
  void *v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  unint64_t v1865;
  void *v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  unint64_t v1873;
  void *v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  unint64_t v1881;
  void *v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  unint64_t v1890;
  uint64_t *v1891;
  WTF *v1892;
  unsigned int *v1893;
  unsigned int v1894;
  uint64_t *v1895;
  unsigned int v1896;
  uint64_t *v1897;
  unsigned int v1898;
  unint64_t v1899;
  uint64_t *v1900;
  WTF *v1901;
  unsigned int *v1902;
  unsigned int v1903;
  uint64_t *v1904;
  unsigned int v1905;
  uint64_t v1906;
  unint64_t v1907;
  uint64_t v1908;
  uint64_t *v1909;
  WTF *v1910;
  unsigned int *v1911;
  unsigned int v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t *v1933;
  unsigned int v1934;
  unint64_t v1935;
  void *v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  unint64_t v1943;
  void *v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  unint64_t v1951;
  void *v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  void (**v1961)(JSC::AdaptiveValueStructureStubClearingWatchpoint *__hidden);
  unsigned int v1962;
  uint64_t *v1963;
  unsigned int v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t *v1985;
  unsigned int v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  unint64_t v2007;
  void *v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  unint64_t v2015;
  void *v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  unint64_t v2023;
  void *v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  unint64_t v2031;
  void *v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  int v2039;
  unint64_t v2040;
  void *v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  unint64_t v2048;
  void *v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  unint64_t v2056;
  void *v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  unint64_t v2065;
  void *v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  unint64_t v2073;
  void *v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  unint64_t v2081;
  void *v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  unint64_t v2089;
  void *v2090;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  unint64_t v2097;
  void *v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  unsigned int doesJSCalls;
  void *v2110;
  uint64_t v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  uint8x8_t v2117;
  int v2118;
  unsigned int v2119;
  unsigned int v2120;
  uint8x8_t v2121;
  int v2122;
  _BOOL4 doesCalls;
  uint64_t v2124;
  int v2125;
  uint64_t v2126;
  _QWORD *v2127;
  _QWORD *v2128;
  int v2129;
  unsigned int v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t *v2135;
  uint64_t v2136;
  char v2137;
  unsigned int v2138;
  int v2139;
  uint64_t *v2140;
  char v2141;
  unsigned int v2142;
  unint64_t v2143;
  unint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  JSC::CodeBlock **v2150;
  int v2151;
  uint64_t *v2152;
  int v2153;
  uint64_t v2154;
  uint64_t v2155;
  uint64_t *v2156;
  unsigned int *v2157;
  unsigned __int8 v2158;
  int v2159;
  unsigned int *v2160;
  unsigned int *v2161;
  unsigned int *v2162;
  unsigned int *v2163;
  uint64_t **v2164;
  unsigned int v2165;
  uint64_t *v2166;
  int v2167;
  JSC::JITStubRoutine *v2168;
  JSC::JITStubRoutine *v2169;
  WTF *v2170;
  const char *v2171;
  uint64_t v2172;
  void *v2173;
  uint64_t v2174;
  char v2175;
  uint64_t *v2176;
  JSC::ExecutableMemoryHandle *v2177;
  unsigned int *v2178;
  int v2179;
  int v2180;
  int v2181;
  uint64_t v2182;
  int v2183;
  int v2184;
  int v2185;
  uint64_t v2186;
  int v2187;
  int v2188;
  int v2189;
  uint64_t v2190;
  _BYTE *v2191;
  uint64_t v2192;
  _BYTE v2193[24];
  unint64_t v2194;
  uint64_t v2195;
  __int128 v2196;
  uint64_t v2197;
  uint64_t v2198;
  int v2199;
  _QWORD v2200[5];
  uint64_t *v2201[3];
  uint64_t v2202;
  uint64_t v2203;
  JSC::VM *v2204;
  JSC::CodeBlock *v2205;
  __int128 *v2206;
  uint64_t v2207;
  __int128 v2208;
  _BYTE v2209[1520];
  __int128 v2210;
  JSC::CodeBlock *v2211;
  _BYTE *v2212;
  _BYTE v2213[128];
  unsigned int v2214;
  char v2215;
  int v2216;
  int v2217;
  __int128 v2218;
  __int128 v2219;
  uint64_t v2220;
  uint64_t *v2221;
  uint64_t v2222;
  _BYTE v2223[16];
  uint64_t v2224;
  int v2225;
  unsigned int v2226;
  int v2227;
  _QWORD v2228[17];
  unsigned int v2229;
  int v2230;
  int v2231;
  char v2232;
  uint64_t v2233;
  char v2234;
  int v2235;
  uint64_t v2236;
  char v2237;
  int v2238;
  uint64_t v2239;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = v7;
  v11 = v6;
  v12 = v2;
  v2239 = *MEMORY[0x1E0C80C00];
  v13 = *v3;
  v2164 = (uint64_t **)(*v3 + 90440);
  v2166 = v3;
  v2204 = (JSC::VM *)v13;
  v2205 = v5;
  v2201[1] = v3;
  v2201[2] = (uint64_t *)v13;
  v2202 = v6;
  v2203 = v4;
  v2200[0] = &v2205;
  v2200[1] = v3;
  v2200[2] = v13;
  v2200[3] = v6;
  v2200[4] = v4;
  v2201[0] = (uint64_t *)&v2205;
  v14 = (unsigned int *)*(unsigned __int8 *)(v6 + 4);
  switch(*(_BYTE *)(v6 + 4))
  {
    case 1:
    case 3:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x1E:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6F:
    case 0x70:
      v68 = v3[2];
      v69 = *(unsigned __int8 *)(v68 + 129);
      v70 = *(unsigned __int8 *)(v68 + 122);
      v71 = v2164[1];
      LODWORD(v2152) = (v69 >> 5) & 1;
      LODWORD(v2150) = v69 >> 7;
      WORD2(v2221) = (((unint64_t)*(unsigned __int8 *)(v6 + 4) << 40) | ((unint64_t)((v69 >> 3) & 1) << 32)) >> 32;
      LODWORD(v2221) = ((_DWORD)v2152 << 16) | (v69 >> 7 << 24) | (((v69 >> 6) & 1) << 8) | v70;
      v72 = WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>>,std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>(v71 + 1, (unsigned __int8 *)&v2221);
      if (v72)
      {
        v73 = *((_QWORD *)v72 + 1);
        if (v73)
        {
          ++*(_DWORD *)(v73 + 16);
          v2221 = (uint64_t *)v73;
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, &v2221);
          v82 = (JSC::JITStubRoutine *)v2221;
          if (v2221)
          {
            v83 = *((_DWORD *)v2221 + 4) - 1;
            *((_DWORD *)v2221 + 4) = v83;
            if (!v83)
              JSC::JITStubRoutine::observeZeroRefCount(v82, v74, v75, v76, v77, v78, v79, v80, v81);
          }
          return;
        }
      }
      v2139 = 0;
      v2125 = (v69 >> 6) & 1;
      v2124 = (v69 >> 3) & 1;
      v164 = v2166;
      goto LABEL_175;
    default:
      if (*(_QWORD *)(v6 + 24))
        goto LABEL_138;
      v2152 = (uint64_t *)v2223;
      v2221 = (uint64_t *)v2223;
      v2222 = 64;
      v2150 = &v2211;
      *(_QWORD *)&v2210 = &v2211;
      *((_QWORD *)&v2210 + 1) = 64;
      v15 = v3[2];
      v16 = *(_BYTE *)(v15 + 122);
      if (v16)
      {
        LODWORD(v17) = 1;
        switch(*(_BYTE *)(v15 + 122))
        {
          case 2:
          case 3:
          case 0x1C:
            break;
          case 4:
          case 0x1B:
            switch((char)v14)
            {
              case 0:
              case 9:
                if (*(_BYTE *)(v6 + 5))
                  goto LABEL_127;
                JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
                if (HIDWORD(v2210))
                  goto LABEL_1578;
                v283 = *(unsigned __int8 *)(v11 + 4);
                if (v283 <= 0x20 && ((1 << v283) & 0x100000014) != 0)
                {
                  v285 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
                  if (!v285 || *(_BYTE *)(v285 + 5) == 1)
                  {
LABEL_310:
                    AlternateBase = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
                    if (AlternateBase)
                      v285 = 16 * (*AlternateBase & 0xFFFFFFFE);
                    v292 = (JSC::Structure *)*(unsigned int *)(v11 + 8);
                    if ((_DWORD)v292 != -1)
                      JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v285, (JSC::VM *)v13, v292, v287, v288, v289, v290, v291);
                    v293 = JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
                    v301 = *(_QWORD *)(v11 + 32);
                    if (v293)
                    {
                      if ((v301 & 1) != 0)
                        v1162 = v301 & 0xFFFFFFFFFFFFFFFELL;
                      else
                        v1162 = *(_QWORD *)(v301 + 8);
                      v53 = v14;
                      v1163 = *v2164;
                      if ((*(_BYTE *)(v1162 + 16) & 0x20) != 0)
                      {
                        v304 = v1163[103];
                        v55 = (unsigned int *)v1163[104];
                        if (v55)
                        {
                          do
                            v1431 = __ldaxr(v55);
                          while (__stlxr(v1431 + 1, v55));
                          do
                            v1432 = __ldaxr(v55);
                          while (__stlxr(v1432 + 1, v55));
                          do
                          {
                            v1433 = __ldaxr(v55);
                            v308 = --v1433 == 0;
                          }
                          while (__stlxr(v1433, v55));
                          goto LABEL_322;
                        }
                      }
                      else
                      {
                        v304 = v1163[91];
                        v55 = (unsigned int *)v1163[92];
                        if (v55)
                        {
                          do
                            v1164 = __ldaxr(v55);
                          while (__stlxr(v1164 + 1, v55));
                          do
                            v1165 = __ldaxr(v55);
                          while (__stlxr(v1165 + 1, v55));
                          do
                          {
                            v1166 = __ldaxr(v55);
                            v308 = --v1166 == 0;
                          }
                          while (__stlxr(v1166, v55));
                          goto LABEL_322;
                        }
                      }
                    }
                    else
                    {
                      if ((v301 & 1) != 0)
                        v302 = v301 & 0xFFFFFFFFFFFFFFFELL;
                      else
                        v302 = *(_QWORD *)(v301 + 8);
                      v53 = v14;
                      v303 = *v2164;
                      if ((*(_BYTE *)(v302 + 16) & 0x20) != 0)
                      {
                        v304 = v303[101];
                        v55 = (unsigned int *)v303[102];
                        if (v55)
                        {
                          do
                            v1167 = __ldaxr(v55);
                          while (__stlxr(v1167 + 1, v55));
                          do
                            v1168 = __ldaxr(v55);
                          while (__stlxr(v1168 + 1, v55));
                          do
                          {
                            v1169 = __ldaxr(v55);
                            v308 = --v1169 == 0;
                          }
                          while (__stlxr(v1169, v55));
                          goto LABEL_322;
                        }
                      }
                      else
                      {
                        v304 = v303[89];
                        v55 = (unsigned int *)v303[90];
                        if (v55)
                        {
                          do
                            v305 = __ldaxr(v55);
                          while (__stlxr(v305 + 1, v55));
                          do
                            v306 = __ldaxr(v55);
                          while (__stlxr(v306 + 1, v55));
                          do
                          {
                            v307 = __ldaxr(v55);
                            v308 = --v307 == 0;
                          }
                          while (__stlxr(v307, v55));
LABEL_322:
                          if (v308)
                          {
                            atomic_store(1u, v55);
                            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v55, v294, v295, v296, v297, v298, v299, v300);
                            WTF::fastFree(v1706, v1707, v1708, v1709, v1710, v1711, v1712, v1713);
                          }
                          v309 = WTF::fastMalloc((WTF *)0x60);
                          *(_QWORD *)v309 = v304;
                          do
                            v310 = __ldaxr(v55);
                          while (__stlxr(v310 + 1, v55));
                          v311 = 0;
LABEL_327:
                          *(_QWORD *)(v309 + 8) = v55;
                          *(_QWORD *)(v309 + 16) = 1;
                          *(_BYTE *)(v309 + 24) = 3;
                          *(_QWORD *)(v309 + 32) = 0;
                          *(_BYTE *)(v309 + 40) &= 0xC0u;
                          *(_QWORD *)(v309 + 56) = 0;
                          *(_QWORD *)(v309 + 64) = 0;
                          *(_QWORD *)(v309 + 48) = v13;
                          v312 = WTF::fastMalloc((WTF *)0x18);
                          *(_DWORD *)v312 = 1;
                          *(_WORD *)(v312 + 4) = 1;
                          *(_QWORD *)(v312 + 8) = v312 + 8;
                          *(_QWORD *)(v312 + 16) = v312 + 8;
                          *(_QWORD *)(v309 + 72) = v312;
                          *(_QWORD *)(v309 + 80) = 0;
                          *(_QWORD *)(v309 + 88) = 0;
                          v2206 = (__int128 *)v309;
                          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v309 + 88), (unsigned int *)v312, (uint64_t)v2221, HIDWORD(v2222), v10);
                          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
                          v315 = (JSC::JITStubRoutine *)v2206;
                          if (v2206)
                          {
                            v1378 = *((_DWORD *)v2206 + 4) - 1;
                            *((_DWORD *)v2206 + 4) = v1378;
                            if (!v1378)
                              JSC::JITStubRoutine::observeZeroRefCount(v315, v313, v4, (uint64_t)v5, v6, v7, v8, v9, v314);
                          }
                          if ((v311 & 1) == 0)
                          {
                            v3 = v2166;
                            do
                              v67 = __ldaxr(v55);
                            while (__stlxr(v67 - 1, v55));
                            goto LABEL_67;
                          }
                          goto LABEL_1590;
                        }
                      }
                    }
                    v309 = WTF::fastMalloc((WTF *)0x60);
                    v55 = 0;
                    *(_QWORD *)v309 = v304;
                    v311 = 1;
                    goto LABEL_327;
                  }
                  v284 = *(_DWORD *)(v285 + 80);
                }
                else
                {
                  v284 = *(_DWORD *)(v11 + 12);
                }
                if (v284)
                  v285 = 16 * (v284 & 0xFFFFFFFE);
                else
                  v285 = 0;
                goto LABEL_310;
              case 8:
                if (*(_BYTE *)(v6 + 5))
                  goto LABEL_1578;
                JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
                if (HIDWORD(v2210))
                  goto LABEL_1578;
                v685 = *(_QWORD *)(v11 + 32);
                if ((v685 & 1) != 0)
                  v686 = v685 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v686 = *(_QWORD *)(v685 + 8);
                v687 = *v2164;
                if ((*(_BYTE *)(v686 + 16) & 0x20) != 0)
                {
                  v688 = v687[105];
                  v105 = (unsigned int *)v687[106];
                  if (v105)
                  {
                    do
                      v1380 = __ldaxr(v105);
                    while (__stlxr(v1380 + 1, v105));
                    do
                      v1381 = __ldaxr(v105);
                    while (__stlxr(v1381 + 1, v105));
                    do
                    {
                      v1382 = __ldaxr(v105);
                      v692 = --v1382 == 0;
                    }
                    while (__stlxr(v1382, v105));
                    goto LABEL_677;
                  }
                }
                else
                {
                  v688 = v687[93];
                  v105 = (unsigned int *)v687[94];
                  if (v105)
                  {
                    do
                      v689 = __ldaxr(v105);
                    while (__stlxr(v689 + 1, v105));
                    do
                      v690 = __ldaxr(v105);
                    while (__stlxr(v690 + 1, v105));
                    do
                    {
                      v691 = __ldaxr(v105);
                      v692 = --v691 == 0;
                    }
                    while (__stlxr(v691, v105));
LABEL_677:
                    if (v692)
                    {
                      atomic_store(1u, v105);
                      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v684, v4, (uint64_t)v5, v6, v7, v8, v9);
                      WTF::fastFree(v1778, v1779, v1780, v1781, v1782, v1783, v1784, v1785);
                    }
                    v693 = WTF::fastMalloc((WTF *)0x60);
                    *(_QWORD *)v693 = v688;
                    do
                      v694 = __ldaxr(v105);
                    while (__stlxr(v694 + 1, v105));
                    v695 = 0;
LABEL_682:
                    *(_QWORD *)(v693 + 8) = v105;
                    *(_QWORD *)(v693 + 16) = 1;
                    *(_BYTE *)(v693 + 24) = 3;
                    *(_QWORD *)(v693 + 32) = 0;
                    *(_BYTE *)(v693 + 40) &= 0xC0u;
                    *(_QWORD *)(v693 + 56) = 0;
                    *(_QWORD *)(v693 + 64) = 0;
                    *(_QWORD *)(v693 + 48) = v13;
                    v696 = WTF::fastMalloc((WTF *)0x18);
                    *(_DWORD *)v696 = 1;
                    *(_WORD *)(v696 + 4) = 1;
                    *(_QWORD *)(v696 + 8) = v696 + 8;
                    *(_QWORD *)(v696 + 16) = v696 + 8;
                    *(_QWORD *)(v693 + 72) = v696;
                    *(_QWORD *)(v693 + 80) = 0;
                    *(_QWORD *)(v693 + 88) = 0;
                    v2206 = (__int128 *)v693;
                    JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v693 + 88), (unsigned int *)v696, (uint64_t)v2221, HIDWORD(v2222), v10);
                    JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
                    v699 = (JSC::JITStubRoutine *)v2206;
                    if (v2206)
                    {
                      v1438 = *((_DWORD *)v2206 + 4) - 1;
                      *((_DWORD *)v2206 + 4) = v1438;
                      if (!v1438)
                        JSC::JITStubRoutine::observeZeroRefCount(v699, v697, v4, (uint64_t)v5, v6, v7, v8, v9, v698);
                    }
                    if ((v695 & 1) == 0)
                    {
                      v3 = v2166;
                      do
                        v117 = __ldaxr(v105);
                      while (__stlxr(v117 - 1, v105));
                      goto LABEL_125;
                    }
                    goto LABEL_1593;
                  }
                }
                v693 = WTF::fastMalloc((WTF *)0x60);
                v105 = 0;
                *(_QWORD *)v693 = v688;
                v695 = 1;
                goto LABEL_682;
              case 10:
                if (*(_BYTE *)(v6 + 5))
                  goto LABEL_1578;
                JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
                if (HIDWORD(v2210))
                  goto LABEL_1578;
                v1262 = *(unsigned __int8 *)(v11 + 4);
                if (v1262 > 0x20 || ((1 << v1262) & 0x100000014) == 0)
                {
                  v1263 = *(_DWORD *)(v11 + 12);
                  goto LABEL_1354;
                }
                v1264 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
                if (v1264 && *(_BYTE *)(v1264 + 5) != 1)
                {
                  v1263 = *(_DWORD *)(v1264 + 80);
LABEL_1354:
                  if (v1263)
                    v1264 = 16 * (v1263 & 0xFFFFFFFE);
                  else
                    v1264 = 0;
                }
                v1265 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
                if (v1265)
                  v1264 = 16 * (*v1265 & 0xFFFFFFFE);
                v1272 = *(unsigned int *)(v11 + 8);
                if ((_DWORD)v1272 != -1)
                  JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v1264, (JSC::VM *)v13, (JSC::Structure *)v1272, v1267, v1268, v1269, v1270, v1271);
                v1273 = *(_QWORD *)(v11 + 32);
                if ((v1273 & 1) != 0)
                  v1274 = v1273 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v1274 = *(_QWORD *)(v1273 + 8);
                v59 = (*(_BYTE *)(v1274 + 16) & 0x20) == 0;
                v1275 = 110;
                if (v59)
                  v1275 = 98;
                v1276 = &(*v2164)[v1275];
                v1277 = v1276[1];
                v105 = (unsigned int *)v1276[2];
                if (v105)
                {
                  do
                    v1278 = __ldaxr(v105);
                  while (__stlxr(v1278 + 1, v105));
                  do
                    v1279 = __ldaxr(v105);
                  while (__stlxr(v1279 + 1, v105));
                  do
                  {
                    v1280 = __ldaxr(v105);
                    v1281 = v1280 - 1;
                  }
                  while (__stlxr(v1281, v105));
                  if (!v1281)
                  {
                    atomic_store(1u, v105);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v1266, v1272, v1267, v1268, v1269, v1270, v1271);
                    WTF::fastFree(v2023, v2024, v2025, v2026, v2027, v2028, v2029, v2030);
                  }
                  v1282 = WTF::fastMalloc((WTF *)0x60);
                  *(_QWORD *)v1282 = v1277;
                  do
                    v1283 = __ldaxr(v105);
                  while (__stlxr(v1283 + 1, v105));
                }
                else
                {
                  v1282 = WTF::fastMalloc((WTF *)0x60);
                  *(_QWORD *)v1282 = v1277;
                }
                *(_QWORD *)(v1282 + 8) = v105;
                *(_QWORD *)(v1282 + 16) = 1;
                *(_BYTE *)(v1282 + 24) = 3;
                *(_QWORD *)(v1282 + 32) = 0;
                *(_BYTE *)(v1282 + 40) &= 0xC0u;
                *(_QWORD *)(v1282 + 56) = 0;
                *(_QWORD *)(v1282 + 64) = 0;
                *(_QWORD *)(v1282 + 48) = v13;
                v1284 = WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)v1284 = 1;
                *(_WORD *)(v1284 + 4) = 1;
                *(_QWORD *)(v1284 + 8) = v1284 + 8;
                *(_QWORD *)(v1284 + 16) = v1284 + 8;
                *(_QWORD *)(v1282 + 72) = v1284;
                *(_QWORD *)(v1282 + 80) = 0;
                *(_QWORD *)(v1282 + 88) = 0;
                v2206 = (__int128 *)v1282;
                JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v1282 + 88), (unsigned int *)v1284, (uint64_t)v2221, HIDWORD(v2222), v10);
                JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
                v1287 = (JSC::JITStubRoutine *)v2206;
                if (v2206)
                {
                  v1772 = *((_DWORD *)v2206 + 4) - 1;
                  *((_DWORD *)v2206 + 4) = v1772;
                  if (!v1772)
                    JSC::JITStubRoutine::observeZeroRefCount(v1287, v1285, v4, (uint64_t)v5, v6, v7, v8, v9, v1286);
                }
                v3 = v2166;
                if (!v105)
                  goto LABEL_1779;
                do
                  v117 = __ldaxr(v105);
                while (__stlxr(v117 - 1, v105));
                goto LABEL_125;
              case 12:
              case 13:
                if (*(_BYTE *)(v6 + 5))
                  goto LABEL_127;
                if (v14 == 13 && *(_BYTE *)(v6 + 80))
                {
                  v834 = *(_DWORD *)(v6 + 12);
                  if (v834)
                    v835 = 16 * (v834 & 0xFFFFFFFE);
                  else
                    v835 = 0;
                  v836 = *(unsigned int *)(v835 + 76);
                  v837 = *(_DWORD *)(v835 + 76) != 0;
                  if ((_DWORD)v836)
                  {
                    v838 = 16 * v836;
                    v839 = *(_QWORD *)(v6 + 64);
                    if (v839 != v838)
                    {
                      do
                      {
                        v838 = *(_QWORD *)(v838 + 16);
                        v837 = v838 != 0;
                      }
                      while (v838 != v839 && v838 != 0);
                    }
                  }
                  if (!v837)
                    goto LABEL_1559;
                }
                JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
                if (HIDWORD(v2210))
                  goto LABEL_1577;
                v841 = *(unsigned __int8 *)(v11 + 4);
                if (v841 > 0x20 || ((1 << v841) & 0x100000014) == 0)
                {
                  v842 = *(_DWORD *)(v11 + 12);
                  goto LABEL_868;
                }
                v843 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
                if (v843 && *(_BYTE *)(v843 + 5) != 1)
                {
                  v842 = *(_DWORD *)(v843 + 80);
LABEL_868:
                  if (v842)
                    v843 = 16 * (v842 & 0xFFFFFFFE);
                  else
                    v843 = 0;
                }
                v844 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
                if (v844)
                  v843 = 16 * (*v844 & 0xFFFFFFFE);
                v850 = *(unsigned int *)(v11 + 8);
                v851 = (uint64_t)v2166;
                if ((_DWORD)v850 != -1)
                {
                  JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v843, (JSC::VM *)v13, (JSC::Structure *)v850, v845, v846, v847, v848, v849);
                  v851 = (uint64_t)v2166;
                }
                v2206 = 0;
                v2207 = 0;
                if (*(_BYTE *)(v11 + 4) == 13)
                {
                  if (byte_1ECF4C245)
                  {
                    if (*(_BYTE *)(v11 + 80))
                    {
                      v845 = *(_QWORD *)(v11 + 72);
                      if (v845)
                      {
                        v1398 = *(_QWORD *)(v11 + 32);
                        if ((v1398 & 1) != 0)
                        {
                          v1399 = v1398 & 0xFFFFFFFFFFFFFFFELL;
                        }
                        else
                        {
                          v1399 = *(_QWORD *)(v1398 + 8);
                          v851 = (uint64_t)v2166;
                        }
                        JSC::InlineCacheCompiler::compileGetByDOMJITHandler((uint64_t *)&v2196, v851, v2205, v845, ((unint64_t)*(unsigned int *)(v1399 + 16) >> 5) & 1 | 0x100);
                        v1401 = *((_QWORD *)&v2196 + 1);
                        *((_QWORD *)&v2196 + 1) = 0;
                        v1402 = (unsigned int *)v2207;
                        v2206 = (__int128 *)v2196;
                        v2207 = v1401;
                        if (v1402)
                        {
                          do
                          {
                            v1403 = __ldaxr(v1402);
                            v1404 = v1403 - 1;
                          }
                          while (__stlxr(v1404, v1402));
                          if (!v1404)
                          {
                            atomic_store(1u, v1402);
                            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1402, v1400, v4, (uint64_t)v5, v6, v7, v8, v9);
                            WTF::fastFree(v2065, v2066, v2067, v2068, v2069, v2070, v2071, v2072);
                          }
                          v1405 = (unsigned int *)*((_QWORD *)&v2196 + 1);
                          *((_QWORD *)&v2196 + 1) = 0;
                          if (v1405)
                          {
                            do
                            {
                              v1406 = __ldaxr(v1405);
                              v1407 = v1406 - 1;
                            }
                            while (__stlxr(v1407, v1405));
                            if (!v1407)
                            {
                              atomic_store(1u, v1405);
                              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1405, v1400, v4, (uint64_t)v5, v6, v7, v8, v9);
                              WTF::fastFree(v2073, v2074, v2075, v2076, v2077, v2078, v2079, v2080);
                            }
                          }
                        }
                        if (!v2206)
                        {
                          *(_DWORD *)v12 = 1;
                          *(_QWORD *)(v12 + 16) = 0;
                          *(_QWORD *)(v12 + 24) = 0;
                          *(_QWORD *)(v12 + 8) = 0;
                          goto LABEL_895;
                        }
LABEL_892:
                        v863 = WTF::fastMalloc((WTF *)0x60);
                        v864 = (_QWORD *)v863;
                        *(_QWORD *)v863 = v2206;
                        v865 = (unsigned int *)v2207;
                        if (v2207)
                        {
                          do
                            v866 = __ldaxr(v865);
                          while (__stlxr(v866 + 1, v865));
                        }
                        *(_QWORD *)(v863 + 8) = v865;
                        *(_QWORD *)(v863 + 16) = 1;
                        *(_BYTE *)(v863 + 24) = 3;
                        *(_QWORD *)(v863 + 32) = 0;
                        *(_BYTE *)(v863 + 40) &= 0xC0u;
                        *(_QWORD *)(v863 + 56) = 0;
                        *(_QWORD *)(v863 + 64) = 0;
                        *(_QWORD *)(v863 + 48) = v13;
                        v867 = WTF::fastMalloc((WTF *)0x18);
                        *(_DWORD *)v867 = 1;
                        *(_WORD *)(v867 + 4) = 1;
                        *(_QWORD *)(v867 + 8) = v867 + 8;
                        *(_QWORD *)(v867 + 16) = v867 + 8;
                        v864[9] = v867;
                        v864[10] = 0;
                        v864[11] = 0;
                        *(_QWORD *)&v2196 = v864;
                        JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, v864 + 11, (unsigned int *)v867, (uint64_t)v2221, HIDWORD(v2222), v10);
                        JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2196);
                        v870 = (JSC::JITStubRoutine *)v2196;
                        if ((_QWORD)v2196)
                        {
                          v1546 = *(_DWORD *)(v2196 + 16) - 1;
                          *(_DWORD *)(v2196 + 16) = v1546;
                          if (!v1546)
                            JSC::JITStubRoutine::observeZeroRefCount(v870, v868, v4, (uint64_t)v5, v6, v7, v8, v9, v869);
                        }
LABEL_895:
                        v3 = v2166;
                        v229 = (unsigned int *)v2207;
                        v2207 = 0;
                        if (v229)
                        {
                          do
                          {
                            v871 = __ldaxr(v229);
                            v231 = --v871 == 0;
                          }
                          while (__stlxr(v871, v229));
                          goto LABEL_235;
                        }
LABEL_126:
                        LODWORD(v17) = 0;
                        goto LABEL_127;
                      }
                    }
                  }
                  v852 = *(_QWORD *)(v11 + 32);
                  if ((v852 & 1) != 0)
                    v853 = v852 & 0xFFFFFFFFFFFFFFFELL;
                  else
                    v853 = *(_QWORD *)(v852 + 8);
                  if ((*(_BYTE *)(v853 + 16) & 0x20) == 0)
                  {
                    v854 = (uint64_t *)(*v2164)[95];
                    v855 = (unsigned int *)(*v2164)[96];
                    if (v855)
                    {
                      do
                        v856 = __ldaxr(v855);
                      while (__stlxr(v856 + 1, v855));
                      do
                        v857 = __ldaxr(v855);
                      while (__stlxr(v857 + 1, v855));
                      v858 = (unsigned int *)v2207;
                      v2206 = (__int128 *)v854;
                      v2207 = (uint64_t)v855;
                      if (v858)
                      {
                        do
                        {
                          v859 = __ldaxr(v858);
                          v860 = v859 - 1;
                        }
                        while (__stlxr(v860, v858));
                        if (!v860)
                        {
                          atomic_store(1u, v858);
                          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v858, v851, v850, v845, v846, v847, v848, v849);
                          WTF::fastFree(v1803, v1804, v1805, v1806, v1807, v1808, v1809, v1810);
                        }
                      }
                      do
                      {
                        v861 = __ldaxr(v855);
                        v862 = v861 - 1;
                      }
                      while (__stlxr(v862, v855));
                      if (!v862)
                      {
                        atomic_store(1u, v855);
                        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v855, v851, v850, v845, v846, v847, v848, v849);
                        WTF::fastFree(v1795, v1796, v1797, v1798, v1799, v1800, v1801, v1802);
                      }
                    }
                    else
                    {
                      v2206 = (__int128 *)(*v2164)[95];
                      v2207 = 0;
                    }
                    goto LABEL_892;
                  }
                  v1897 = *v2164;
                  v1892 = (WTF *)(*v2164)[107];
                  v2170 = v1892;
                  v1893 = (unsigned int *)v1897[108];
                  if (v1893)
                  {
                    do
                      v1898 = __ldaxr(v1893);
                    while (__stlxr(v1898 + 1, v1893));
LABEL_1882:
                    v1892 = v2170;
                  }
                }
                else
                {
                  v1889 = *(_QWORD *)(v11 + 32);
                  if ((v1889 & 1) != 0)
                    v1890 = v1889 & 0xFFFFFFFFFFFFFFFELL;
                  else
                    v1890 = *(_QWORD *)(v1889 + 8);
                  if ((*(_BYTE *)(v1890 + 16) & 0x20) != 0)
                  {
                    v1963 = *v2164;
                    v1892 = (WTF *)(*v2164)[109];
                    v2170 = v1892;
                    v1893 = (unsigned int *)v1963[110];
                    if (v1893)
                    {
                      do
                        v1964 = __ldaxr(v1893);
                      while (__stlxr(v1964 + 1, v1893));
                      goto LABEL_1882;
                    }
                  }
                  else
                  {
                    v1891 = *v2164;
                    v1892 = (WTF *)(*v2164)[97];
                    v2170 = v1892;
                    v1893 = (unsigned int *)v1891[98];
                    if (v1893)
                    {
                      do
                        v1894 = __ldaxr(v1893);
                      while (__stlxr(v1894 + 1, v1893));
                      goto LABEL_1882;
                    }
                  }
                }
                v2171 = (const char *)v1893;
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v1892, v1893, v845, v846, v847, v848, v849);
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(&v2206, &v2196, v1965, v1966, v1967, v1968, v1969, v1970);
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, v1971, v1972, v1973, v1974, v1975, v1976, v1977);
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2170, v1978, v1979, v1980, v1981, v1982, v1983, v1984);
                goto LABEL_892;
              default:
                goto LABEL_127;
            }
          case 6:
          case 8:
          case 0xF:
          case 0x11:
            goto LABEL_36;
          case 7:
          case 9:
            LODWORD(v17) = 0;
LABEL_36:
            if (v14 == 2)
            {
              v42 = *(_DWORD *)(v6 + 12);
              v43 = 16 * (v42 & 0xFFFFFFFE);
              if (v42)
                v44 = 16 * (v42 & 0xFFFFFFFE);
              else
                v44 = 0;
              v45 = *(unsigned __int16 *)(v44 + 24);
              if (v45 == 65534)
                goto LABEL_44;
              if (v45 == 0xFFFF)
                v45 = *(_DWORD *)(*(_QWORD *)(v44 + 64) + 84);
              if (v45 <= 63)
              {
LABEL_44:
                v46 = 0;
              }
              else if ((v45 - 63) >= 5)
              {
                v631 = (v45 - 64) | ((v45 - 64) >> 1) | (((v45 - 64) | ((v45 - 64) >> 1)) >> 2);
                v632 = v631 | (v631 >> 4) | ((v631 | (v631 >> 4)) >> 8);
                v46 = (v632 | HIWORD(v632)) + 1;
              }
              else
              {
                v46 = 4;
              }
              v47 = *(_QWORD *)(v43 + 64);
              if (v47)
              {
                v48 = v47;
                if (*(_BYTE *)(v47 + 5) != 1)
                {
                  v349 = *(_DWORD *)(v47 + 80);
                  v48 = 16 * (v349 & 0xFFFFFFFE);
                  if (!v349)
                    v48 = 0;
                }
              }
              else
              {
                v48 = 0;
              }
              v49 = *(unsigned __int16 *)(v48 + 24);
              if (v49 == 65534)
                goto LABEL_51;
              if (v49 == 0xFFFF)
                v49 = *(_DWORD *)(*(_QWORD *)(v48 + 64) + 84);
              v50 = v49 - 63;
              if (v49 <= 63)
              {
LABEL_51:
                v51 = 0;
              }
              else
              {
                v256 = (v49 - 64) | ((v49 - 64) >> 1) | (((v49 - 64) | ((v49 - 64) >> 1)) >> 2);
                v257 = v256 | (v256 >> 4) | ((v256 | (v256 >> 4)) >> 8);
                v258 = v257 | HIWORD(v257);
                if (v50 >= 5)
                  v51 = v258 + 1;
                else
                  v51 = 4;
              }
              if (v46 == v51)
              {
                JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
                if (HIDWORD(v2210))
                  goto LABEL_1577;
                v53 = v14;
                v54 = (*v2164)[59];
                v55 = (unsigned int *)(*v2164)[60];
                if (v55)
                {
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 + 1, v55));
                  do
                    v57 = __ldaxr(v55);
                  while (__stlxr(v57 + 1, v55));
                  do
                  {
                    v58 = __ldaxr(v55);
                    v59 = --v58 == 0;
                  }
                  while (__stlxr(v58, v55));
LABEL_58:
                  if (v59)
                  {
                    atomic_store(1u, v55);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v55, v52, v4, (uint64_t)v5, v6, v7, v8, v9);
                    WTF::fastFree(v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489);
                  }
                  v60 = WTF::fastMalloc((WTF *)0x60);
                  *(_QWORD *)v60 = v54;
                  do
                    v61 = __ldaxr(v55);
                  while (__stlxr(v61 + 1, v55));
                  v62 = 0;
                  goto LABEL_63;
                }
                goto LABEL_1597;
              }
              if (v47)
              {
                v676 = v47;
                if (*(_BYTE *)(v47 + 5) != 1)
                {
                  v1050 = *(_DWORD *)(v47 + 80);
                  if (v1050)
                    v676 = 16 * (v1050 & 0xFFFFFFFE);
                  else
                    v676 = 0;
                }
              }
              else
              {
                v676 = 0;
              }
              v677 = *(unsigned __int16 *)(v676 + 24);
              if (v677 == 65534)
              {
                v678 = 0;
              }
              else
              {
                if (v677 == 0xFFFF)
                  v677 = *(_DWORD *)(*(_QWORD *)(v676 + 64) + 84);
                v678 = v677 > 63;
              }
              if (v47 && *(_BYTE *)(v47 + 5) != 1)
              {
                v1051 = *(_DWORD *)(v47 + 80);
                if (v1051)
                  v47 = 16 * (v1051 & 0xFFFFFFFE);
                else
                  v47 = 0;
              }
              if ((*(_BYTE *)(v47 + 8) & 0xE) == 0)
              {
                v679 = *(unsigned __int8 *)(v47 + 9);
                JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
                if (HIDWORD(v2210))
                  goto LABEL_1577;
                if ((v679 - 39) > 0xA)
                {
                  v53 = v14;
                  v680 = *v2164;
                  if (v678)
                  {
                    v54 = v680[63];
                    v55 = (unsigned int *)v680[64];
                    if (v55)
                    {
                      do
                        v1002 = __ldaxr(v55);
                      while (__stlxr(v1002 + 1, v55));
                      do
                        v1003 = __ldaxr(v55);
                      while (__stlxr(v1003 + 1, v55));
                      do
                      {
                        v1004 = __ldaxr(v55);
                        v59 = --v1004 == 0;
                      }
                      while (__stlxr(v1004, v55));
                      goto LABEL_58;
                    }
                  }
                  else
                  {
                    v54 = v680[61];
                    v55 = (unsigned int *)v680[62];
                    if (v55)
                    {
                      do
                        v681 = __ldaxr(v55);
                      while (__stlxr(v681 + 1, v55));
                      do
                        v682 = __ldaxr(v55);
                      while (__stlxr(v682 + 1, v55));
                      do
                      {
                        v683 = __ldaxr(v55);
                        v59 = --v683 == 0;
                      }
                      while (__stlxr(v683, v55));
                      goto LABEL_58;
                    }
                  }
LABEL_1597:
                  v60 = WTF::fastMalloc((WTF *)0x60);
                  v55 = 0;
                  *(_QWORD *)v60 = v54;
                  v62 = 1;
LABEL_63:
                  *(_QWORD *)(v60 + 8) = v55;
                  *(_QWORD *)(v60 + 16) = 1;
                  *(_BYTE *)(v60 + 24) = 3;
                  *(_QWORD *)(v60 + 32) = 0;
                  *(_BYTE *)(v60 + 40) &= 0xC0u;
                  *(_QWORD *)(v60 + 56) = 0;
                  *(_QWORD *)(v60 + 64) = 0;
                  *(_QWORD *)(v60 + 48) = v13;
                  v63 = WTF::fastMalloc((WTF *)0x18);
                  *(_DWORD *)v63 = 1;
                  *(_WORD *)(v63 + 4) = 1;
                  *(_QWORD *)(v63 + 8) = v63 + 8;
                  *(_QWORD *)(v63 + 16) = v63 + 8;
                  *(_QWORD *)(v60 + 72) = v63;
                  *(_QWORD *)(v60 + 80) = 0;
                  *(_QWORD *)(v60 + 88) = 0;
                  v2206 = (__int128 *)v60;
                  JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v60 + 88), (unsigned int *)v63, (uint64_t)v2221, HIDWORD(v2222), v10);
                  JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
                  v66 = (JSC::JITStubRoutine *)v2206;
                  if (v2206)
                  {
                    v1056 = *((_DWORD *)v2206 + 4) - 1;
                    *((_DWORD *)v2206 + 4) = v1056;
                    if (!v1056)
                      JSC::JITStubRoutine::observeZeroRefCount(v66, v64, v4, (uint64_t)v5, v6, v7, v8, v9, v65);
                  }
                  if ((v62 & 1) != 0)
                  {
LABEL_1590:
                    LODWORD(v17) = 0;
                    v3 = v2166;
                    v14 = v53;
                  }
                  else
                  {
                    v3 = v2166;
                    do
                      v67 = __ldaxr(v55);
                    while (__stlxr(v67 - 1, v55));
LABEL_67:
                    if (v67 == 1)
                    {
                      atomic_store(1u, v55);
                      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v55, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                      WTF::fastFree(v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472);
                      v3 = v2166;
                    }
                    LODWORD(v17) = 0;
                    v14 = v53;
                  }
                  goto LABEL_127;
                }
LABEL_1572:
                v53 = v14;
                v54 = (*v2164)[65];
                v55 = (unsigned int *)(*v2164)[66];
                if (v55)
                {
                  do
                    v1435 = __ldaxr(v55);
                  while (__stlxr(v1435 + 1, v55));
                  do
                    v1436 = __ldaxr(v55);
                  while (__stlxr(v1436 + 1, v55));
                  do
                  {
                    v1437 = __ldaxr(v55);
                    v59 = --v1437 == 0;
                  }
                  while (__stlxr(v1437, v55));
                  goto LABEL_58;
                }
                goto LABEL_1597;
              }
              JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
              if (!HIDWORD(v2210))
                goto LABEL_1572;
LABEL_1577:
              LODWORD(v17) = 1;
LABEL_1578:
              v3 = v2166;
              goto LABEL_127;
            }
            if (v14 == 7)
            {
              if (!*(_BYTE *)(v6 + 5))
              {
                v617 = (*v2164)[57];
                v105 = (unsigned int *)(*v2164)[58];
                if (v105)
                {
                  do
                    v618 = __ldaxr(v105);
                  while (__stlxr(v618 + 1, v105));
                  do
                    v619 = __ldaxr(v105);
                  while (__stlxr(v619 + 1, v105));
                  do
                  {
                    v620 = __ldaxr(v105);
                    v621 = v620 - 1;
                  }
                  while (__stlxr(v621, v105));
                  if (!v621)
                  {
                    atomic_store(1u, v105);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                    WTF::fastFree(v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1770);
                  }
                  v622 = WTF::fastMalloc((WTF *)0x60);
                  *(_QWORD *)v622 = v617;
                  do
                    v623 = __ldaxr(v105);
                  while (__stlxr(v623 + 1, v105));
                }
                else
                {
                  v622 = WTF::fastMalloc((WTF *)0x60);
                  *(_QWORD *)v622 = v617;
                }
                *(_QWORD *)(v622 + 8) = v105;
                *(_QWORD *)(v622 + 16) = 1;
                *(_BYTE *)(v622 + 24) = 3;
                *(_QWORD *)(v622 + 32) = 0;
                *(_BYTE *)(v622 + 40) &= 0xC0u;
                *(_QWORD *)(v622 + 56) = 0;
                *(_QWORD *)(v622 + 64) = 0;
                *(_QWORD *)(v622 + 48) = v13;
                v624 = WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)v624 = 1;
                *(_WORD *)(v624 + 4) = 1;
                *(_QWORD *)(v624 + 8) = v624 + 8;
                *(_QWORD *)(v624 + 16) = v624 + 8;
                *(_QWORD *)(v622 + 80) = 0;
                *(_QWORD *)(v622 + 88) = 0;
                *(_QWORD *)(v622 + 72) = v624;
                v2206 = (__int128 *)v622;
                JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
                v627 = (JSC::JITStubRoutine *)v2206;
                if (v2206)
                {
                  v1434 = *((_DWORD *)v2206 + 4) - 1;
                  *((_DWORD *)v2206 + 4) = v1434;
                  if (!v1434)
                    JSC::JITStubRoutine::observeZeroRefCount(v627, v625, v4, (uint64_t)v5, v6, v7, v8, v9, v626);
                }
                if (!v105)
                {
LABEL_1593:
                  LODWORD(v17) = 0;
                  goto LABEL_1578;
                }
                v3 = v2166;
                do
                  v117 = __ldaxr(v105);
                while (__stlxr(v117 - 1, v105));
                goto LABEL_125;
              }
LABEL_1559:
              LODWORD(v17) = 1;
              goto LABEL_127;
            }
            if (v14 - 14 < 2)
            {
              if (*(_BYTE *)(v6 + 5))
                goto LABEL_1577;
              JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
              if (HIDWORD(v2210))
                goto LABEL_1577;
              v805 = *(unsigned __int8 *)(v11 + 4);
              if (v805 <= 0x20 && ((1 << v805) & 0x100000014) != 0)
              {
                v807 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
                if (!v807 || *(_BYTE *)(v807 + 5) == 1)
                  goto LABEL_829;
                v806 = *(_DWORD *)(v807 + 80);
              }
              else
              {
                v806 = *(_DWORD *)(v11 + 12);
              }
              if (v806)
                v807 = 16 * (v806 & 0xFFFFFFFE);
              else
                v807 = 0;
LABEL_829:
              v808 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
              if (v808)
                v807 = 16 * (*v808 & 0xFFFFFFFE);
              v815 = *(unsigned int *)(v11 + 8);
              if ((_DWORD)v815 != -1)
                JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v807, (JSC::VM *)v13, (JSC::Structure *)v815, v810, v811, v812, v813, v814);
              v2206 = 0;
              v2207 = 0;
              if (*(_BYTE *)(v11 + 4) == 15)
              {
                v816 = (uint64_t *)(*v2164)[67];
                v817 = (unsigned int *)(*v2164)[68];
                if (v817)
                {
                  do
                    v818 = __ldaxr(v817);
                  while (__stlxr(v818 + 1, v817));
                  do
                    v819 = __ldaxr(v817);
                  while (__stlxr(v819 + 1, v817));
                  v820 = (unsigned int *)v2207;
                  v2206 = (__int128 *)v816;
                  v2207 = (uint64_t)v817;
                  if (v820)
                  {
                    do
                    {
                      v821 = __ldaxr(v820);
                      v822 = v821 - 1;
                    }
                    while (__stlxr(v822, v820));
                    if (!v822)
                    {
                      atomic_store(1u, v820);
                      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v820, v809, v815, v810, v811, v812, v813, v814);
                      WTF::fastFree(v1827, v1828, v1829, v1830, v1831, v1832, v1833, v1834);
                    }
                  }
                  do
                  {
                    v823 = __ldaxr(v817);
                    v824 = v823 - 1;
                  }
                  while (__stlxr(v824, v817));
                  if (!v824)
                  {
                    atomic_store(1u, v817);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v817, v809, v815, v810, v811, v812, v813, v814);
                    WTF::fastFree(v1819, v1820, v1821, v1822, v1823, v1824, v1825, v1826);
                  }
                }
                else
                {
                  v2206 = (__int128 *)(*v2164)[67];
                  v2207 = 0;
                }
              }
              else
              {
                v1499 = *v2164;
                v1500 = (WTF *)(*v2164)[69];
                v2170 = v1500;
                v1501 = (unsigned int *)v1499[70];
                if (v1501)
                {
                  do
                    v1502 = __ldaxr(v1501);
                  while (__stlxr(v1502 + 1, v1501));
                  v1500 = v2170;
                }
                v2171 = (const char *)v1501;
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v1500, v1501, v810, v811, v812, v813, v814);
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(&v2206, &v2196, v1503, v1504, v1505, v1506, v1507, v1508);
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, v1509, v1510, v1511, v1512, v1513, v1514, v1515);
                JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2170, v1516, v1517, v1518, v1519, v1520, v1521, v1522);
              }
              v825 = WTF::fastMalloc((WTF *)0x60);
              v826 = (_QWORD *)v825;
              *(_QWORD *)v825 = v2206;
              v827 = (unsigned int *)v2207;
              if (v2207)
              {
                do
                  v828 = __ldaxr(v827);
                while (__stlxr(v828 + 1, v827));
              }
              *(_QWORD *)(v825 + 8) = v827;
              *(_QWORD *)(v825 + 16) = 1;
              *(_BYTE *)(v825 + 24) = 3;
              *(_QWORD *)(v825 + 32) = 0;
              *(_BYTE *)(v825 + 40) &= 0xC0u;
              *(_QWORD *)(v825 + 56) = 0;
              *(_QWORD *)(v825 + 64) = 0;
              *(_QWORD *)(v825 + 48) = v13;
              v829 = WTF::fastMalloc((WTF *)0x18);
              *(_DWORD *)v829 = 1;
              *(_WORD *)(v829 + 4) = 1;
              *(_QWORD *)(v829 + 8) = v829 + 8;
              *(_QWORD *)(v829 + 16) = v829 + 8;
              v826[9] = v829;
              v826[10] = 0;
              v826[11] = 0;
              *(_QWORD *)&v2196 = v826;
              JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, v826 + 11, (unsigned int *)v829, (uint64_t)v2221, HIDWORD(v2222), v10);
              JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2196);
              v832 = (JSC::JITStubRoutine *)v2196;
              if ((_QWORD)v2196)
              {
                v1586 = *(_DWORD *)(v2196 + 16) - 1;
                *(_DWORD *)(v2196 + 16) = v1586;
                if (!v1586)
                  JSC::JITStubRoutine::observeZeroRefCount(v832, v830, v4, (uint64_t)v5, v6, v7, v8, v9, v831);
              }
              v229 = (unsigned int *)v2207;
              v2207 = 0;
              v3 = v2166;
              if (!v229)
                goto LABEL_126;
              do
              {
                v833 = __ldaxr(v229);
                v231 = --v833 == 0;
              }
              while (__stlxr(v833, v229));
              goto LABEL_235;
            }
            if (v14 != 11)
              goto LABEL_1559;
            if (*(_BYTE *)(v6 + 5))
              goto LABEL_1577;
            JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
            if (HIDWORD(v2210))
              goto LABEL_1577;
            v1121 = *(unsigned __int8 *)(v11 + 4);
            if (v1121 <= 0x20 && ((1 << v1121) & 0x100000014) != 0)
            {
              v1123 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
              if (!v1123 || *(_BYTE *)(v1123 + 5) == 1)
                goto LABEL_1169;
              v1122 = *(_DWORD *)(v1123 + 80);
            }
            else
            {
              v1122 = *(_DWORD *)(v11 + 12);
            }
            if (v1122)
              v1123 = 16 * (v1122 & 0xFFFFFFFE);
            else
              v1123 = 0;
LABEL_1169:
            v1124 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
            if (v1124)
              v1123 = 16 * (*v1124 & 0xFFFFFFFE);
            v1131 = *(unsigned int *)(v11 + 8);
            if ((_DWORD)v1131 != -1)
              JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v1123, (JSC::VM *)v13, (JSC::Structure *)v1131, v1126, v1127, v1128, v1129, v1130);
            v2206 = 0;
            v2207 = 0;
            if ((_DWORD)v17)
            {
              v1132 = (uint64_t *)(*v2164)[71];
              v1133 = (unsigned int *)(*v2164)[72];
              if (v1133)
              {
                do
                  v1134 = __ldaxr(v1133);
                while (__stlxr(v1134 + 1, v1133));
                do
                  v1135 = __ldaxr(v1133);
                while (__stlxr(v1135 + 1, v1133));
                v1136 = (unsigned int *)v2207;
                v2206 = (__int128 *)v1132;
                v2207 = (uint64_t)v1133;
                if (v1136)
                {
                  do
                  {
                    v1137 = __ldaxr(v1136);
                    v1138 = v1137 - 1;
                  }
                  while (__stlxr(v1138, v1136));
                  if (!v1138)
                  {
                    atomic_store(1u, v1136);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1136, v1125, v1131, v1126, v1127, v1128, v1129, v1130);
                    WTF::fastFree(v1943, v1944, v1945, v1946, v1947, v1948, v1949, v1950);
                  }
                }
                do
                {
                  v1139 = __ldaxr(v1133);
                  v1140 = v1139 - 1;
                }
                while (__stlxr(v1140, v1133));
                if (!v1140)
                {
                  atomic_store(1u, v1133);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1133, v1125, v1131, v1126, v1127, v1128, v1129, v1130);
                  WTF::fastFree(v1951, v1952, v1953, v1954, v1955, v1956, v1957, v1958);
                }
              }
              else
              {
                v2206 = (__int128 *)(*v2164)[71];
                v2207 = 0;
              }
            }
            else
            {
              v1731 = *v2164;
              v1732 = (WTF *)(*v2164)[73];
              v2170 = v1732;
              v1733 = (unsigned int *)v1731[74];
              if (v1733)
              {
                do
                  v1734 = __ldaxr(v1733);
                while (__stlxr(v1734 + 1, v1733));
                v1732 = v2170;
              }
              v2171 = (const char *)v1733;
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v1732, v1733, v1126, v1127, v1128, v1129, v1130);
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(&v2206, &v2196, v1735, v1736, v1737, v1738, v1739, v1740);
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, v1741, v1742, v1743, v1744, v1745, v1746, v1747);
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2170, v1748, v1749, v1750, v1751, v1752, v1753, v1754);
            }
            v1141 = WTF::fastMalloc((WTF *)0x60);
            v1142 = (_QWORD *)v1141;
            *(_QWORD *)v1141 = v2206;
            v1143 = (unsigned int *)v2207;
            if (v2207)
            {
              do
                v1144 = __ldaxr(v1143);
              while (__stlxr(v1144 + 1, v1143));
            }
            *(_QWORD *)(v1141 + 8) = v1143;
            *(_QWORD *)(v1141 + 16) = 1;
            *(_BYTE *)(v1141 + 24) = 3;
            *(_QWORD *)(v1141 + 32) = 0;
            *(_BYTE *)(v1141 + 40) &= 0xC0u;
            *(_QWORD *)(v1141 + 56) = 0;
            *(_QWORD *)(v1141 + 64) = 0;
            *(_QWORD *)(v1141 + 48) = v13;
            v1145 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v1145 = 1;
            *(_WORD *)(v1145 + 4) = 1;
            *(_QWORD *)(v1145 + 8) = v1145 + 8;
            *(_QWORD *)(v1145 + 16) = v1145 + 8;
            v1142[9] = v1145;
            v1142[10] = 0;
            v1142[11] = 0;
            *(_QWORD *)&v2196 = v1142;
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, v1142 + 11, (unsigned int *)v1145, (uint64_t)v2221, HIDWORD(v2222), v10);
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2196);
            v1148 = (JSC::JITStubRoutine *)v2196;
            if ((_QWORD)v2196)
            {
              v1722 = *(_DWORD *)(v2196 + 16) - 1;
              *(_DWORD *)(v2196 + 16) = v1722;
              if (!v1722)
                JSC::JITStubRoutine::observeZeroRefCount(v1148, v1146, v4, (uint64_t)v5, v6, v7, v8, v9, v1147);
            }
            v229 = (unsigned int *)v2207;
            v2207 = 0;
            v3 = v2166;
            if (!v229)
              goto LABEL_126;
            do
            {
              v1149 = __ldaxr(v229);
              v231 = --v1149 == 0;
            }
            while (__stlxr(v1149, v229));
            goto LABEL_235;
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0x10:
            if (v14 == 2)
            {
              v316 = *(_DWORD *)(v6 + 12);
              v317 = 16 * (v316 & 0xFFFFFFFE);
              if (v316)
                v318 = 16 * (v316 & 0xFFFFFFFE);
              else
                v318 = 0;
              v319 = *(unsigned __int16 *)(v318 + 24);
              if (v319 == 65534)
                goto LABEL_340;
              if (v319 == 0xFFFF)
                v319 = *(_DWORD *)(*(_QWORD *)(v318 + 64) + 84);
              if (v319 <= 63)
              {
LABEL_340:
                v320 = 0;
              }
              else if ((v319 - 63) >= 5)
              {
                v944 = (v319 - 64) | ((v319 - 64) >> 1) | (((v319 - 64) | ((v319 - 64) >> 1)) >> 2);
                v945 = v944 | (v944 >> 4) | ((v944 | (v944 >> 4)) >> 8);
                v320 = (v945 | HIWORD(v945)) + 1;
              }
              else
              {
                v320 = 4;
              }
              v321 = *(_QWORD *)(v317 + 64);
              if (v321)
              {
                v322 = v321;
                if (*(_BYTE *)(v321 + 5) != 1)
                {
                  v803 = *(_DWORD *)(v321 + 80);
                  v322 = 16 * (v803 & 0xFFFFFFFE);
                  if (!v803)
                    v322 = 0;
                }
              }
              else
              {
                v322 = 0;
              }
              v323 = *(unsigned __int16 *)(v322 + 24);
              if (v323 == 65534)
                goto LABEL_347;
              if (v323 == 0xFFFF)
                v323 = *(_DWORD *)(*(_QWORD *)(v322 + 64) + 84);
              if (v323 <= 63)
              {
LABEL_347:
                v324 = 0;
              }
              else if ((v323 - 63) >= 5)
              {
                v946 = (v323 - 64) | ((v323 - 64) >> 1) | (((v323 - 64) | ((v323 - 64) >> 1)) >> 2);
                v947 = v946 | (v946 >> 4) | ((v946 | (v946 >> 4)) >> 8);
                v324 = (v947 | HIWORD(v947)) + 1;
              }
              else
              {
                v324 = 4;
              }
              if (v320 == v324)
              {
                v325 = 0;
                v326 = 0;
              }
              else
              {
                if (v321)
                {
                  v923 = v321;
                  if (*(_BYTE *)(v321 + 5) != 1)
                  {
                    v1203 = *(_DWORD *)(v321 + 80);
                    if (v1203)
                      v923 = 16 * (v1203 & 0xFFFFFFFE);
                    else
                      v923 = 0;
                  }
                }
                else
                {
                  v923 = 0;
                }
                v924 = *(unsigned __int16 *)(v923 + 24);
                if (v924 == 65534)
                {
                  v325 = 0;
                }
                else
                {
                  if (v924 == 0xFFFF)
                    v924 = *(_DWORD *)(*(_QWORD *)(v923 + 64) + 84);
                  v325 = v924 > 63;
                }
                if (v321 && *(_BYTE *)(v321 + 5) != 1)
                {
                  v1204 = *(_DWORD *)(v321 + 80);
                  if (v1204)
                    v321 = 16 * (v1204 & 0xFFFFFFFE);
                  else
                    v321 = 0;
                }
                v925 = (*(_BYTE *)(v321 + 8) & 0xE) != 0 || *(unsigned __int8 *)(v321 + 9) - 39 < 0xB;
                v326 = !v925;
              }
              JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
              if (HIDWORD(v2210))
                goto LABEL_1577;
              v2206 = 0;
              v2207 = 0;
              v328 = *(_QWORD *)(v11 + 32);
              if (v320 == v324)
              {
                if ((v328 & 1) != 0)
                  v329 = v328 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v329 = *(_QWORD *)(v328 + 8);
                v330 = *v2164;
                if ((*(_BYTE *)(v329 + 16) & 0x20) != 0)
                {
                  v331 = (uint64_t *)v330[133];
                  v332 = (unsigned int *)v330[134];
                  if (v332)
                  {
                    do
                      v1372 = __ldaxr(v332);
                    while (__stlxr(v1372 + 1, v332));
                    do
                      v1373 = __ldaxr(v332);
                    while (__stlxr(v1373 + 1, v332));
                    v1374 = (unsigned int *)v2207;
                    v2206 = (__int128 *)v331;
                    v2207 = (uint64_t)v332;
                    if (v1374)
                    {
                      do
                      {
                        v1375 = __ldaxr(v1374);
                        v1376 = v1375 - 1;
                      }
                      while (__stlxr(v1376, v1374));
                      if (!v1376)
                      {
                        atomic_store(1u, v1374);
                        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1374, v327, v4, (uint64_t)v5, v6, v7, v8, v9);
                        WTF::fastFree(v2056, v2057, v2058, v2059, v2060, v2061, v2062, v2063);
                      }
                    }
                    do
                    {
                      v1377 = __ldaxr(v332);
                      v339 = --v1377 == 0;
                    }
                    while (__stlxr(v1377, v332));
                    goto LABEL_363;
                  }
                }
                else
                {
                  v331 = (uint64_t *)v330[115];
                  v332 = (unsigned int *)v330[116];
                  if (v332)
                  {
                    do
                      v333 = __ldaxr(v332);
                    while (__stlxr(v333 + 1, v332));
                    do
                      v334 = __ldaxr(v332);
                    while (__stlxr(v334 + 1, v332));
                    v335 = (unsigned int *)v2207;
                    v2206 = (__int128 *)v331;
                    v2207 = (uint64_t)v332;
                    if (v335)
                    {
                      do
                      {
                        v336 = __ldaxr(v335);
                        v337 = v336 - 1;
                      }
                      while (__stlxr(v337, v335));
                      if (!v337)
                      {
                        atomic_store(1u, v335);
                        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v335, v327, v4, (uint64_t)v5, v6, v7, v8, v9);
                        WTF::fastFree(v1693, v1694, v1695, v1696, v1697, v1698, v1699, v1700);
                      }
                    }
                    do
                    {
                      v338 = __ldaxr(v332);
                      v339 = --v338 == 0;
                    }
                    while (__stlxr(v338, v332));
LABEL_363:
                    if (v339)
                    {
                      atomic_store(1u, v332);
                      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v332, v327, v4, (uint64_t)v5, v6, v7, v8, v9);
                      WTF::fastFree(v1668, v1669, v1670, v1671, v1672, v1673, v1674, v1675);
                    }
LABEL_365:
                    v340 = WTF::fastMalloc((WTF *)0x60);
                    v341 = (_QWORD *)v340;
                    *(_QWORD *)v340 = v2206;
                    v342 = (unsigned int *)v2207;
                    if (v2207)
                    {
                      do
                        v343 = __ldaxr(v342);
                      while (__stlxr(v343 + 1, v342));
                    }
                    *(_QWORD *)(v340 + 8) = v342;
                    *(_QWORD *)(v340 + 16) = 1;
                    *(_BYTE *)(v340 + 24) = 3;
                    *(_QWORD *)(v340 + 32) = 0;
                    *(_BYTE *)(v340 + 40) &= 0xC0u;
                    *(_QWORD *)(v340 + 56) = 0;
                    *(_QWORD *)(v340 + 64) = 0;
                    *(_QWORD *)(v340 + 48) = v13;
                    v344 = WTF::fastMalloc((WTF *)0x18);
                    *(_DWORD *)v344 = 1;
                    *(_WORD *)(v344 + 4) = 1;
                    *(_QWORD *)(v344 + 8) = v344 + 8;
                    *(_QWORD *)(v344 + 16) = v344 + 8;
                    v341[9] = v344;
                    v341[10] = 0;
                    v341[11] = 0;
                    *(_QWORD *)&v2196 = v341;
                    JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, v341 + 11, (unsigned int *)v344, (uint64_t)v2221, HIDWORD(v2222), v10);
                    JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2196);
                    v347 = (JSC::JITStubRoutine *)v2196;
                    if ((_QWORD)v2196)
                    {
                      v1325 = *(_DWORD *)(v2196 + 16) - 1;
                      *(_DWORD *)(v2196 + 16) = v1325;
                      if (!v1325)
                        JSC::JITStubRoutine::observeZeroRefCount(v347, v345, v4, (uint64_t)v5, v6, v7, v8, v9, v346);
                    }
                    v229 = (unsigned int *)v2207;
                    v2207 = 0;
                    v3 = v2166;
                    if (v229)
                    {
                      do
                      {
                        v348 = __ldaxr(v229);
                        v231 = --v348 == 0;
                      }
                      while (__stlxr(v348, v229));
                      goto LABEL_235;
                    }
                    goto LABEL_126;
                  }
                }
LABEL_1717:
                v2206 = (__int128 *)v331;
                v2207 = (uint64_t)v332;
                goto LABEL_365;
              }
              if (v326)
              {
                if (v325)
                {
                  if ((v328 & 1) != 0)
                    v1069 = v328 & 0xFFFFFFFFFFFFFFFELL;
                  else
                    v1069 = *(_QWORD *)(v328 + 8);
                  if ((*(_BYTE *)(v1069 + 16) & 0x20) == 0)
                  {
                    v331 = (uint64_t *)(*v2164)[119];
                    v332 = (unsigned int *)(*v2164)[120];
                    if (v332)
                    {
                      do
                        v1070 = __ldaxr(v332);
                      while (__stlxr(v1070 + 1, v332));
                      do
                        v1071 = __ldaxr(v332);
                      while (__stlxr(v1071 + 1, v332));
                      v1072 = (unsigned int *)v2207;
                      v2206 = (__int128 *)v331;
                      v2207 = (uint64_t)v332;
                      if (v1072)
                      {
                        do
                        {
                          v1073 = __ldaxr(v1072);
                          v1074 = v1073 - 1;
                        }
                        while (__stlxr(v1074, v1072));
                        if (!v1074)
                        {
                          atomic_store(1u, v1072);
                          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1072, v327, v4, (uint64_t)v5, v6, v7, v8, v9);
                          WTF::fastFree(v1881, v1882, v1883, v1884, v1885, v1886, v1887, v1888);
                        }
                      }
                      do
                      {
                        v1075 = __ldaxr(v332);
                        v339 = --v1075 == 0;
                      }
                      while (__stlxr(v1075, v332));
                      goto LABEL_363;
                    }
                    goto LABEL_1717;
                  }
                  v1587 = *v2164;
                  v1588 = (WTF *)(*v2164)[137];
                  v2170 = v1588;
                  v1589 = (unsigned int *)v1587[138];
                  if (v1589)
                  {
                    do
                      v1590 = __ldaxr(v1589);
                    while (__stlxr(v1590 + 1, v1589));
                    goto LABEL_1711;
                  }
                }
                else
                {
                  if ((v328 & 1) != 0)
                    v926 = v328 & 0xFFFFFFFFFFFFFFFELL;
                  else
                    v926 = *(_QWORD *)(v328 + 8);
                  if ((*(_BYTE *)(v926 + 16) & 0x20) == 0)
                  {
                    v331 = (uint64_t *)(*v2164)[117];
                    v332 = (unsigned int *)(*v2164)[118];
                    if (v332)
                    {
                      do
                        v927 = __ldaxr(v332);
                      while (__stlxr(v927 + 1, v332));
                      do
                        v928 = __ldaxr(v332);
                      while (__stlxr(v928 + 1, v332));
                      v929 = (unsigned int *)v2207;
                      v2206 = (__int128 *)v331;
                      v2207 = (uint64_t)v332;
                      if (v929)
                      {
                        do
                        {
                          v930 = __ldaxr(v929);
                          v931 = v930 - 1;
                        }
                        while (__stlxr(v931, v929));
                        if (!v931)
                        {
                          atomic_store(1u, v929);
                          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v929, v327, v4, (uint64_t)v5, v6, v7, v8, v9);
                          WTF::fastFree(v1857, v1858, v1859, v1860, v1861, v1862, v1863, v1864);
                        }
                      }
                      do
                      {
                        v932 = __ldaxr(v332);
                        v339 = --v932 == 0;
                      }
                      while (__stlxr(v932, v332));
                      goto LABEL_363;
                    }
                    goto LABEL_1717;
                  }
                  v1895 = *v2164;
                  v1588 = (WTF *)(*v2164)[135];
                  v2170 = v1588;
                  v1589 = (unsigned int *)v1895[136];
                  if (v1589)
                  {
                    do
                      v1896 = __ldaxr(v1589);
                    while (__stlxr(v1896 + 1, v1589));
LABEL_1711:
                    v1588 = v2170;
                  }
                }
              }
              else
              {
                if ((v328 & 1) != 0)
                  v1644 = v328 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v1644 = *(_QWORD *)(v328 + 8);
                if ((*(_BYTE *)(v1644 + 16) & 0x20) != 0)
                {
                  v1933 = *v2164;
                  v1588 = (WTF *)(*v2164)[139];
                  v2170 = v1588;
                  v1589 = (unsigned int *)v1933[140];
                  if (!v1589)
                    goto LABEL_1712;
                  do
                    v1934 = __ldaxr(v1589);
                  while (__stlxr(v1934 + 1, v1589));
                  goto LABEL_1711;
                }
                v1645 = *v2164;
                v1588 = (WTF *)(*v2164)[121];
                v2170 = v1588;
                v1589 = (unsigned int *)v1645[122];
                if (v1589)
                {
                  do
                    v1646 = __ldaxr(v1589);
                  while (__stlxr(v1646 + 1, v1589));
                  goto LABEL_1711;
                }
              }
LABEL_1712:
              v2171 = (const char *)v1589;
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v1588, v1589, (uint64_t)v5, v6, v7, v8, v9);
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(&v2206, &v2196, v1647, v1648, v1649, v1650, v1651, v1652);
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, v1653, v1654, v1655, v1656, v1657, v1658, v1659);
              JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2170, v1660, v1661, v1662, v1663, v1664, v1665, v1666);
              goto LABEL_365;
            }
            if (v14 == 7)
            {
              if (*(_BYTE *)(v6 + 5))
                goto LABEL_127;
              v891 = *(_QWORD *)(v6 + 32);
              if ((v891 & 1) != 0)
                v892 = v891 & 0xFFFFFFFFFFFFFFFELL;
              else
                v892 = *(_QWORD *)(v891 + 8);
              v2157 = v14;
              v893 = *v2164;
              if ((*(_BYTE *)(v892 + 16) & 0x20) != 0)
              {
                v894 = v893[131];
                v14 = (unsigned int *)v893[132];
                if (v14)
                {
                  do
                    v1388 = __ldaxr(v14);
                  while (__stlxr(v1388 + 1, v14));
                  do
                    v1389 = __ldaxr(v14);
                  while (__stlxr(v1389 + 1, v14));
                  do
                  {
                    v1390 = __ldaxr(v14);
                    v898 = --v1390 == 0;
                  }
                  while (__stlxr(v1390, v14));
                  goto LABEL_934;
                }
              }
              else
              {
                v894 = v893[113];
                v14 = (unsigned int *)v893[114];
                if (v14)
                {
                  do
                    v895 = __ldaxr(v14);
                  while (__stlxr(v895 + 1, v14));
                  do
                    v896 = __ldaxr(v14);
                  while (__stlxr(v896 + 1, v14));
                  do
                  {
                    v897 = __ldaxr(v14);
                    v898 = --v897 == 0;
                  }
                  while (__stlxr(v897, v14));
LABEL_934:
                  if (v898)
                  {
                    atomic_store(1u, v14);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                    WTF::fastFree(v1835, v1836, v1837, v1838, v1839, v1840, v1841, v1842);
                  }
                  v899 = WTF::fastMalloc((WTF *)0x60);
                  *(_QWORD *)v899 = v894;
                  do
                    v900 = __ldaxr(v14);
                  while (__stlxr(v900 + 1, v14));
                  v901 = 0;
                  goto LABEL_939;
                }
              }
              v899 = WTF::fastMalloc((WTF *)0x60);
              v14 = 0;
              *(_QWORD *)v899 = v894;
              v901 = 1;
LABEL_939:
              *(_QWORD *)(v899 + 8) = v14;
              *(_QWORD *)(v899 + 16) = 1;
              *(_BYTE *)(v899 + 24) = 3;
              *(_QWORD *)(v899 + 32) = 0;
              *(_BYTE *)(v899 + 40) &= 0xC0u;
              *(_QWORD *)(v899 + 56) = 0;
              *(_QWORD *)(v899 + 64) = 0;
              *(_QWORD *)(v899 + 48) = v13;
              v902 = WTF::fastMalloc((WTF *)0x18);
              *(_DWORD *)v902 = 1;
              *(_WORD *)(v902 + 4) = 1;
              *(_QWORD *)(v902 + 8) = v902 + 8;
              *(_QWORD *)(v902 + 16) = v902 + 8;
              *(_QWORD *)(v899 + 80) = 0;
              *(_QWORD *)(v899 + 88) = 0;
              *(_QWORD *)(v899 + 72) = v902;
              v2170 = (WTF *)v899;
              v2206 = &v2208;
              v2207 = 64;
              v903 = *(unsigned int *)(v10 + 12);
              if ((_DWORD)v903)
              {
                v904 = (unsigned int *)v902;
                v2141 = v901;
                v2145 = v13;
                v2149 = v12;
                v2154 = v10;
                v905 = *(uint64_t **)v10;
                v906 = &v905[v903];
                do
                {
                  v907 = *v905;
                  v2196 = 0uLL;
                  v2197 = 0;
                  v908 = WTF::fastMalloc((WTF *)0x68);
                  *(_QWORD *)v908 = 0;
                  *(_QWORD *)(v908 + 8) = 0;
                  *(_BYTE *)(v908 + 16) = 9;
                  do
                    v916 = __ldaxr(v904);
                  while (__stlxr(v916 + 1, v904));
                  *(_QWORD *)(v908 + 24) = v904;
                  *(_OWORD *)(v908 + 32) = v2196;
                  *(_QWORD *)(v908 + 48) = v2197;
                  *(_DWORD *)(v908 + 88) = 0;
                  *(_QWORD *)(v908 + 96) = 0;
                  *(_QWORD *)(v908 + 96) = *(_QWORD *)(v899 + 88);
                  *(_QWORD *)(v899 + 88) = v908;
                  v918 = *(_QWORD *)(v907 + 8);
                  v917 = (uint64_t *)(v907 + 8);
                  *(_QWORD *)v908 = v918;
                  *(_QWORD *)(v908 + 8) = v917;
                  *v917 = v908;
                  *(_QWORD *)(v918 + 8) = v908;
                  *((_WORD *)v917 - 2) = 257;
                  ++v905;
                }
                while (v905 != v906);
                v919 = (uint64_t *)v2206;
                v12 = v2149;
                v10 = v2154;
                v901 = v2141;
                if (&v2208 != v2206)
                {
                  if (v2206)
                  {
                    v2206 = 0;
                    LODWORD(v2207) = 0;
                    WTF::fastFree((unint64_t)v919, v909, v910, v911, v912, v913, v914, v915);
                  }
                }
              }
              JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2170);
              v922 = v2170;
              if (v2170)
              {
                v1591 = *((_DWORD *)v2170 + 4) - 1;
                *((_DWORD *)v2170 + 4) = v1591;
                if (!v1591)
                  JSC::JITStubRoutine::observeZeroRefCount(v922, v920, v4, (uint64_t)v5, v6, v7, v8, v9, v921);
              }
              v3 = v2166;
              if ((v901 & 1) != 0)
              {
                LODWORD(v17) = 0;
                v14 = v2157;
                goto LABEL_127;
              }
              do
                v788 = __ldaxr(v14);
              while (__stlxr(v788 - 1, v14));
              goto LABEL_776;
            }
            if (v14 - 14 < 2)
            {
              if (*(_BYTE *)(v6 + 5))
                goto LABEL_1577;
              JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
              if (HIDWORD(v2210))
                goto LABEL_1577;
              v1170 = *(unsigned __int8 *)(v11 + 4);
              if (v1170 <= 0x20 && ((1 << v1170) & 0x100000014) != 0)
              {
                v1172 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
                if (!v1172 || *(_BYTE *)(v1172 + 5) == 1)
                {
LABEL_1252:
                  v1173 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
                  if (v1173)
                    v1172 = 16 * (*v1173 & 0xFFFFFFFE);
                  v1180 = *(unsigned int *)(v11 + 8);
                  if ((_DWORD)v1180 != -1)
                    JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v1172, (JSC::VM *)v13, (JSC::Structure *)v1180, v1175, v1176, v1177, v1178, v1179);
                  v2206 = 0;
                  v2207 = 0;
                  v1181 = *(_QWORD *)(v11 + 32);
                  if (*(_BYTE *)(v11 + 4) == 15)
                  {
                    if ((v1181 & 1) != 0)
                      v1182 = v1181 & 0xFFFFFFFFFFFFFFFELL;
                    else
                      v1182 = *(_QWORD *)(v1181 + 8);
                    if ((*(_BYTE *)(v1182 + 16) & 0x20) == 0)
                    {
                      v1183 = (uint64_t *)(*v2164)[123];
                      v1184 = (unsigned int *)(*v2164)[124];
                      if (v1184)
                      {
                        do
                          v1185 = __ldaxr(v1184);
                        while (__stlxr(v1185 + 1, v1184));
                        do
                          v1186 = __ldaxr(v1184);
                        while (__stlxr(v1186 + 1, v1184));
                        v1187 = (unsigned int *)v2207;
                        v2206 = (__int128 *)v1183;
                        v2207 = (uint64_t)v1184;
                        if (v1187)
                        {
                          do
                          {
                            v1188 = __ldaxr(v1187);
                            v1189 = v1188 - 1;
                          }
                          while (__stlxr(v1189, v1187));
                          if (!v1189)
                          {
                            atomic_store(1u, v1187);
                            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1187, v1174, v1180, v1175, v1176, v1177, v1178, v1179);
                            WTF::fastFree(v2007, v2008, v2009, v2010, v2011, v2012, v2013, v2014);
                          }
                        }
                        do
                        {
                          v1190 = __ldaxr(v1184);
                          v1191 = v1190 - 1;
                        }
                        while (__stlxr(v1191, v1184));
                        if (!v1191)
                        {
                          atomic_store(1u, v1184);
                          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1184, v1174, v1180, v1175, v1176, v1177, v1178, v1179);
                          WTF::fastFree(v2015, v2016, v2017, v2018, v2019, v2020, v2021, v2022);
                        }
                      }
                      else
                      {
                        v2206 = (__int128 *)(*v2164)[123];
                        v2207 = 0;
                      }
LABEL_1270:
                      v1192 = WTF::fastMalloc((WTF *)0x60);
                      v1193 = (_QWORD *)v1192;
                      *(_QWORD *)v1192 = v2206;
                      v1194 = (unsigned int *)v2207;
                      if (v2207)
                      {
                        do
                          v1195 = __ldaxr(v1194);
                        while (__stlxr(v1195 + 1, v1194));
                      }
                      *(_QWORD *)(v1192 + 8) = v1194;
                      *(_QWORD *)(v1192 + 16) = 1;
                      *(_BYTE *)(v1192 + 24) = 3;
                      *(_QWORD *)(v1192 + 32) = 0;
                      *(_BYTE *)(v1192 + 40) &= 0xC0u;
                      *(_QWORD *)(v1192 + 56) = 0;
                      *(_QWORD *)(v1192 + 64) = 0;
                      *(_QWORD *)(v1192 + 48) = v13;
                      v1196 = WTF::fastMalloc((WTF *)0x18);
                      *(_DWORD *)v1196 = 1;
                      *(_WORD *)(v1196 + 4) = 1;
                      *(_QWORD *)(v1196 + 8) = v1196 + 8;
                      *(_QWORD *)(v1196 + 16) = v1196 + 8;
                      v1193[9] = v1196;
                      v1193[10] = 0;
                      v1193[11] = 0;
                      *(_QWORD *)&v2196 = v1193;
                      JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, v1193 + 11, (unsigned int *)v1196, (uint64_t)v2221, HIDWORD(v2222), v10);
                      JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2196);
                      v1199 = (JSC::JITStubRoutine *)v2196;
                      if ((_QWORD)v2196)
                      {
                        v1771 = *(_DWORD *)(v2196 + 16) - 1;
                        *(_DWORD *)(v2196 + 16) = v1771;
                        if (!v1771)
                          JSC::JITStubRoutine::observeZeroRefCount(v1199, v1197, v4, (uint64_t)v5, v6, v7, v8, v9, v1198);
                      }
                      v229 = (unsigned int *)v2207;
                      v2207 = 0;
                      v3 = v2166;
                      if (v229)
                      {
                        do
                        {
                          v1200 = __ldaxr(v229);
                          v231 = --v1200 == 0;
                        }
                        while (__stlxr(v1200, v229));
                        goto LABEL_235;
                      }
                      goto LABEL_126;
                    }
                    v1904 = *v2164;
                    v1901 = (WTF *)(*v2164)[141];
                    v2170 = v1901;
                    v1902 = (unsigned int *)v1904[142];
                    if (v1902)
                    {
                      do
                        v1905 = __ldaxr(v1902);
                      while (__stlxr(v1905 + 1, v1902));
LABEL_1886:
                      v1901 = v2170;
                    }
                  }
                  else
                  {
                    if ((v1181 & 1) != 0)
                      v1899 = v1181 & 0xFFFFFFFFFFFFFFFELL;
                    else
                      v1899 = *(_QWORD *)(v1181 + 8);
                    if ((*(_BYTE *)(v1899 + 16) & 0x20) != 0)
                    {
                      v1985 = *v2164;
                      v1901 = (WTF *)(*v2164)[143];
                      v2170 = v1901;
                      v1902 = (unsigned int *)v1985[144];
                      if (v1902)
                      {
                        do
                          v1986 = __ldaxr(v1902);
                        while (__stlxr(v1986 + 1, v1902));
                        goto LABEL_1886;
                      }
                    }
                    else
                    {
                      v1900 = *v2164;
                      v1901 = (WTF *)(*v2164)[125];
                      v2170 = v1901;
                      v1902 = (unsigned int *)v1900[126];
                      if (v1902)
                      {
                        do
                          v1903 = __ldaxr(v1902);
                        while (__stlxr(v1903 + 1, v1902));
                        goto LABEL_1886;
                      }
                    }
                  }
                  v2171 = (const char *)v1902;
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v1901, v1902, v1175, v1176, v1177, v1178, v1179);
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(&v2206, &v2196, v1987, v1988, v1989, v1990, v1991, v1992);
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, v1993, v1994, v1995, v1996, v1997, v1998, v1999);
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2170, v2000, v2001, v2002, v2003, v2004, v2005, v2006);
                  goto LABEL_1270;
                }
                v1171 = *(_DWORD *)(v1172 + 80);
              }
              else
              {
                v1171 = *(_DWORD *)(v11 + 12);
              }
              if (v1171)
                v1172 = 16 * (v1171 & 0xFFFFFFFE);
              else
                v1172 = 0;
              goto LABEL_1252;
            }
            if (v14 != 11)
              goto LABEL_127;
            if (*(_BYTE *)(v6 + 5))
              goto LABEL_1578;
            JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
            if (HIDWORD(v2210))
              goto LABEL_1578;
            v1333 = *(unsigned __int8 *)(v11 + 4);
            if (v1333 <= 0x20 && ((1 << v1333) & 0x100000014) != 0)
            {
              v1335 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
              if (!v1335 || *(_BYTE *)(v1335 + 5) == 1)
              {
LABEL_1443:
                v1336 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
                if (v1336)
                  v1335 = 16 * (*v1336 & 0xFFFFFFFE);
                v1343 = *(unsigned int *)(v11 + 8);
                if ((_DWORD)v1343 != -1)
                  JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v1335, (JSC::VM *)v13, (JSC::Structure *)v1343, v1338, v1339, v1340, v1341, v1342);
                v2206 = 0;
                v2207 = 0;
                if (((v16 - 10) & 0xF9) != 0)
                {
                  v1906 = *(_QWORD *)(v11 + 32);
                  if ((v1906 & 1) != 0)
                    v1907 = v1906 & 0xFFFFFFFFFFFFFFFELL;
                  else
                    v1907 = *(_QWORD *)(v1906 + 8);
                  v59 = (*(_DWORD *)(v1907 + 16) & 0x20) == 0;
                  v1908 = 146;
                  if (v59)
                    v1908 = 128;
                  v1909 = &(*v2164)[v1908];
                  v1910 = (WTF *)v1909[1];
                  v2170 = v1910;
                  v1911 = (unsigned int *)v1909[2];
                  if (v1911)
                  {
                    do
                      v1912 = __ldaxr(v1911);
                    while (__stlxr(v1912 + 1, v1911));
                    v1910 = v2170;
                  }
                  v2171 = (const char *)v1911;
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v1910, v1911, v1338, v1339, v1340, v1341, v1342);
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(&v2206, &v2196, v1913, v1914, v1915, v1916, v1917, v1918);
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, v1919, v1920, v1921, v1922, v1923, v1924, v1925);
                  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2170, v1926, v1927, v1928, v1929, v1930, v1931, v1932);
                }
                else
                {
                  v1344 = *(_QWORD *)(v11 + 32);
                  if ((v1344 & 1) != 0)
                    v1345 = v1344 & 0xFFFFFFFFFFFFFFFELL;
                  else
                    v1345 = *(_QWORD *)(v1344 + 8);
                  v59 = (*(_BYTE *)(v1345 + 16) & 0x20) == 0;
                  v1346 = 144;
                  if (v59)
                    v1346 = 126;
                  v1347 = &(*v2164)[v1346];
                  v1348 = (uint64_t *)v1347[1];
                  v1349 = (unsigned int *)v1347[2];
                  if (v1349)
                  {
                    do
                      v1350 = __ldaxr(v1349);
                    while (__stlxr(v1350 + 1, v1349));
                    do
                      v1351 = __ldaxr(v1349);
                    while (__stlxr(v1351 + 1, v1349));
                    v1352 = (unsigned int *)v2207;
                    v2206 = (__int128 *)v1348;
                    v2207 = (uint64_t)v1349;
                    if (v1352)
                    {
                      do
                      {
                        v1353 = __ldaxr(v1352);
                        v1354 = v1353 - 1;
                      }
                      while (__stlxr(v1354, v1352));
                      if (!v1354)
                      {
                        atomic_store(1u, v1352);
                        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1352, v1337, v1343, v1338, v1339, v1340, v1341, v1342);
                        WTF::fastFree(v2040, v2041, v2042, v2043, v2044, v2045, v2046, v2047);
                      }
                    }
                    do
                    {
                      v1355 = __ldaxr(v1349);
                      v1356 = v1355 - 1;
                    }
                    while (__stlxr(v1356, v1349));
                    if (!v1356)
                    {
                      atomic_store(1u, v1349);
                      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1349, v1337, v1343, v1338, v1339, v1340, v1341, v1342);
                      WTF::fastFree(v2048, v2049, v2050, v2051, v2052, v2053, v2054, v2055);
                    }
                  }
                  else
                  {
                    v2206 = (__int128 *)v1347[1];
                    v2207 = 0;
                  }
                }
                v1357 = WTF::fastMalloc((WTF *)0x60);
                v1358 = (_QWORD *)v1357;
                *(_QWORD *)v1357 = v2206;
                v1359 = (unsigned int *)v2207;
                if (v2207)
                {
                  do
                    v1360 = __ldaxr(v1359);
                  while (__stlxr(v1360 + 1, v1359));
                }
                *(_QWORD *)(v1357 + 8) = v1359;
                *(_QWORD *)(v1357 + 16) = 1;
                *(_BYTE *)(v1357 + 24) = 3;
                *(_QWORD *)(v1357 + 32) = 0;
                *(_BYTE *)(v1357 + 40) &= 0xC0u;
                *(_QWORD *)(v1357 + 56) = 0;
                *(_QWORD *)(v1357 + 64) = 0;
                *(_QWORD *)(v1357 + 48) = v13;
                v1361 = WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)v1361 = 1;
                *(_WORD *)(v1361 + 4) = 1;
                *(_QWORD *)(v1361 + 8) = v1361 + 8;
                *(_QWORD *)(v1361 + 16) = v1361 + 8;
                v1358[9] = v1361;
                v1358[10] = 0;
                v1358[11] = 0;
                *(_QWORD *)&v2196 = v1358;
                JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, v1358 + 11, (unsigned int *)v1361, (uint64_t)v2221, HIDWORD(v2222), v10);
                JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2196);
                v1364 = (JSC::JITStubRoutine *)v2196;
                if ((_QWORD)v2196)
                {
                  v1786 = *(_DWORD *)(v2196 + 16) - 1;
                  *(_DWORD *)(v2196 + 16) = v1786;
                  if (!v1786)
                    JSC::JITStubRoutine::observeZeroRefCount(v1364, v1362, v4, (uint64_t)v5, v6, v7, v8, v9, v1363);
                }
                v229 = (unsigned int *)v2207;
                v2207 = 0;
                v3 = v2166;
                if (v229)
                {
                  do
                  {
                    v1365 = __ldaxr(v229);
                    v231 = --v1365 == 0;
                  }
                  while (__stlxr(v1365, v229));
                  goto LABEL_235;
                }
                goto LABEL_126;
              }
              v1334 = *(_DWORD *)(v1335 + 80);
            }
            else
            {
              v1334 = *(_DWORD *)(v11 + 12);
            }
            if (v1334)
              v1335 = 16 * (v1334 & 0xFFFFFFFE);
            else
              v1335 = 0;
            goto LABEL_1443;
          case 0x12:
            if (((_BYTE)v14 - 17) > 1u)
              goto LABEL_1578;
            JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
            if (HIDWORD(v2210))
              goto LABEL_1578;
            v1077 = 76;
            if (*(_BYTE *)(v11 + 4) == 17)
              v1077 = 74;
            v1078 = &(*v2164)[v1077];
            v1079 = v1078[1];
            v105 = (unsigned int *)v1078[2];
            if (v105)
            {
              do
                v1080 = __ldaxr(v105);
              while (__stlxr(v1080 + 1, v105));
              do
                v1081 = __ldaxr(v105);
              while (__stlxr(v1081 + 1, v105));
              do
              {
                v1082 = __ldaxr(v105);
                v1083 = v1082 - 1;
              }
              while (__stlxr(v1083, v105));
              if (!v1083)
              {
                atomic_store(1u, v105);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v1076, v4, (uint64_t)v5, v6, v7, v8, v9);
                WTF::fastFree(v1873, v1874, v1875, v1876, v1877, v1878, v1879, v1880);
              }
              v1084 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1084 = v1079;
              do
                v1085 = __ldaxr(v105);
              while (__stlxr(v1085 + 1, v105));
            }
            else
            {
              v1084 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1084 = v1079;
            }
            *(_QWORD *)(v1084 + 8) = v105;
            *(_QWORD *)(v1084 + 16) = 1;
            *(_BYTE *)(v1084 + 24) = 3;
            *(_QWORD *)(v1084 + 32) = 0;
            *(_BYTE *)(v1084 + 40) &= 0xC0u;
            *(_QWORD *)(v1084 + 56) = 0;
            *(_QWORD *)(v1084 + 64) = 0;
            *(_QWORD *)(v1084 + 48) = v13;
            v1086 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v1086 = 1;
            *(_WORD *)(v1086 + 4) = 1;
            *(_QWORD *)(v1086 + 8) = v1086 + 8;
            *(_QWORD *)(v1086 + 16) = v1086 + 8;
            *(_QWORD *)(v1084 + 72) = v1086;
            *(_QWORD *)(v1084 + 80) = 0;
            *(_QWORD *)(v1084 + 88) = 0;
            v2206 = (__int128 *)v1084;
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v1084 + 88), (unsigned int *)v1086, (uint64_t)v2221, HIDWORD(v2222), v10);
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
            v1089 = (JSC::JITStubRoutine *)v2206;
            if (v2206)
            {
              v1667 = *((_DWORD *)v2206 + 4) - 1;
              *((_DWORD *)v2206 + 4) = v1667;
              if (!v1667)
                JSC::JITStubRoutine::observeZeroRefCount(v1089, v1087, v4, (uint64_t)v5, v6, v7, v8, v9, v1088);
            }
            v3 = v2166;
            if (!v105)
              goto LABEL_1779;
            do
              v117 = __ldaxr(v105);
            while (__stlxr(v117 - 1, v105));
            goto LABEL_125;
          case 0x13:
          case 0x14:
          case 0x15:
            if (((_BYTE)v14 - 17) > 1u)
              goto LABEL_1578;
            JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
            if (HIDWORD(v2210))
              goto LABEL_1578;
            v873 = *(_QWORD *)(v11 + 32);
            if ((v873 & 1) != 0)
              v874 = v873 & 0xFFFFFFFFFFFFFFFELL;
            else
              v874 = *(_QWORD *)(v873 + 8);
            v875 = *(unsigned __int8 *)(v11 + 4);
            v876 = *v2164;
            if ((*(_BYTE *)(v874 + 16) & 0x20) != 0)
            {
              v1383 = 154;
              if (v875 == 17)
                v1383 = 152;
              v1384 = &v876[v1383];
              v879 = v1384[1];
              v105 = (unsigned int *)v1384[2];
              if (v105)
              {
                do
                  v1385 = __ldaxr(v105);
                while (__stlxr(v1385 + 1, v105));
                do
                  v1386 = __ldaxr(v105);
                while (__stlxr(v1386 + 1, v105));
                do
                {
                  v1387 = __ldaxr(v105);
                  v883 = --v1387 == 0;
                }
                while (__stlxr(v1387, v105));
LABEL_916:
                if (v883)
                {
                  atomic_store(1u, v105);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v872, v4, (uint64_t)v5, v6, v7, v8, v9);
                  WTF::fastFree(v1811, v1812, v1813, v1814, v1815, v1816, v1817, v1818);
                }
                v884 = WTF::fastMalloc((WTF *)0x60);
                *(_QWORD *)v884 = v879;
                do
                  v885 = __ldaxr(v105);
                while (__stlxr(v885 + 1, v105));
                v886 = 0;
LABEL_921:
                *(_QWORD *)(v884 + 8) = v105;
                *(_QWORD *)(v884 + 16) = 1;
                *(_BYTE *)(v884 + 24) = 3;
                *(_QWORD *)(v884 + 32) = 0;
                *(_BYTE *)(v884 + 40) &= 0xC0u;
                *(_QWORD *)(v884 + 56) = 0;
                *(_QWORD *)(v884 + 64) = 0;
                *(_QWORD *)(v884 + 48) = v13;
                v887 = WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)v887 = 1;
                *(_WORD *)(v887 + 4) = 1;
                *(_QWORD *)(v887 + 8) = v887 + 8;
                *(_QWORD *)(v887 + 16) = v887 + 8;
                *(_QWORD *)(v884 + 72) = v887;
                *(_QWORD *)(v884 + 80) = 0;
                *(_QWORD *)(v884 + 88) = 0;
                v2206 = (__int128 *)v884;
                JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v884 + 88), (unsigned int *)v887, (uint64_t)v2221, HIDWORD(v2222), v10);
                JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
                v890 = (JSC::JITStubRoutine *)v2206;
                if (v2206)
                {
                  v1547 = *((_DWORD *)v2206 + 4) - 1;
                  *((_DWORD *)v2206 + 4) = v1547;
                  if (!v1547)
                    JSC::JITStubRoutine::observeZeroRefCount(v890, v888, v4, (uint64_t)v5, v6, v7, v8, v9, v889);
                }
                v3 = v2166;
                if ((v886 & 1) != 0)
                {
LABEL_1779:
                  LODWORD(v17) = 0;
                  goto LABEL_127;
                }
                do
                  v117 = __ldaxr(v105);
                while (__stlxr(v117 - 1, v105));
LABEL_125:
                if (v117 == 1)
                {
                  atomic_store(1u, v105);
                  v229 = v105;
LABEL_1592:
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v229, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                  WTF::fastFree(v1473, v1474, v1475, v1476, v1477, v1478, v1479, v1480);
                  v3 = v2166;
                  goto LABEL_126;
                }
                goto LABEL_126;
              }
            }
            else
            {
              v877 = 150;
              if (v875 == 17)
                v877 = 148;
              v878 = &v876[v877];
              v879 = v878[1];
              v105 = (unsigned int *)v878[2];
              if (v105)
              {
                do
                  v880 = __ldaxr(v105);
                while (__stlxr(v880 + 1, v105));
                do
                  v881 = __ldaxr(v105);
                while (__stlxr(v881 + 1, v105));
                do
                {
                  v882 = __ldaxr(v105);
                  v883 = --v882 == 0;
                }
                while (__stlxr(v882, v105));
                goto LABEL_916;
              }
            }
            v884 = WTF::fastMalloc((WTF *)0x60);
            v105 = 0;
            *(_QWORD *)v884 = v879;
            v886 = 1;
            goto LABEL_921;
          case 0x16:
            if ((v14 & 0xFE) != 0x1C)
              goto LABEL_1578;
            JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
            if (HIDWORD(v2210))
              goto LABEL_1578;
            v634 = 86;
            if (*(_BYTE *)(v11 + 4) == 28)
              v634 = 84;
            v635 = &(*v2164)[v634];
            v636 = v635[1];
            v105 = (unsigned int *)v635[2];
            if (v105)
            {
              do
                v637 = __ldaxr(v105);
              while (__stlxr(v637 + 1, v105));
              do
                v638 = __ldaxr(v105);
              while (__stlxr(v638 + 1, v105));
              do
              {
                v639 = __ldaxr(v105);
                v640 = v639 - 1;
              }
              while (__stlxr(v640, v105));
              if (!v640)
              {
                atomic_store(1u, v105);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v633, v4, (uint64_t)v5, v6, v7, v8, v9);
                WTF::fastFree(v1755, v1756, v1757, v1758, v1759, v1760, v1761, v1762);
              }
              v641 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v641 = v636;
              do
                v642 = __ldaxr(v105);
              while (__stlxr(v642 + 1, v105));
            }
            else
            {
              v641 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v641 = v636;
            }
            *(_QWORD *)(v641 + 8) = v105;
            *(_QWORD *)(v641 + 16) = 1;
            *(_BYTE *)(v641 + 24) = 3;
            *(_QWORD *)(v641 + 32) = 0;
            *(_BYTE *)(v641 + 40) &= 0xC0u;
            *(_QWORD *)(v641 + 56) = 0;
            *(_QWORD *)(v641 + 64) = 0;
            *(_QWORD *)(v641 + 48) = v13;
            v643 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v643 = 1;
            *(_WORD *)(v643 + 4) = 1;
            *(_QWORD *)(v643 + 8) = v643 + 8;
            *(_QWORD *)(v643 + 16) = v643 + 8;
            *(_QWORD *)(v641 + 72) = v643;
            *(_QWORD *)(v641 + 80) = 0;
            *(_QWORD *)(v641 + 88) = 0;
            v2206 = (__int128 *)v641;
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v641 + 88), (unsigned int *)v643, (uint64_t)v2221, HIDWORD(v2222), v10);
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
            v646 = (JSC::JITStubRoutine *)v2206;
            if (v2206)
            {
              v1430 = *((_DWORD *)v2206 + 4) - 1;
              *((_DWORD *)v2206 + 4) = v1430;
              if (!v1430)
                JSC::JITStubRoutine::observeZeroRefCount(v646, v644, v4, (uint64_t)v5, v6, v7, v8, v9, v645);
            }
            if (!v105)
              goto LABEL_1593;
            v3 = v2166;
            do
              v117 = __ldaxr(v105);
            while (__stlxr(v117 - 1, v105));
            goto LABEL_125;
          case 0x17:
          case 0x18:
            if (((_BYTE)v14 - 4) > 2u)
              goto LABEL_127;
            v1288 = 39;
            if (v14 == 5)
              v1288 = 40;
            v1289 = 41;
            if (v14 != 6)
              v1289 = v1288;
            v1290 = (uint64_t)&(*v2164)[2 * v1289];
            v1291 = *(_QWORD *)(v1290 + 8);
            v17 = *(unsigned int **)(v1290 + 16);
            v2163 = v14;
            if (v17)
            {
              do
                v1292 = __ldaxr(v17);
              while (__stlxr(v1292 + 1, v17));
              do
                v1293 = __ldaxr(v17);
              while (__stlxr(v1293 + 1, v17));
              do
              {
                v1294 = __ldaxr(v17);
                v1295 = v1294 - 1;
              }
              while (__stlxr(v1295, v17));
              if (!v1295)
              {
                atomic_store(1u, v17);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                WTF::fastFree(v2031, v2032, v2033, v2034, v2035, v2036, v2037, v2038);
              }
              v1296 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1296 = v1291;
              do
                v1297 = __ldaxr(v17);
              while (__stlxr(v1297 + 1, v17));
            }
            else
            {
              v1296 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1296 = v1291;
            }
            *(_QWORD *)(v1296 + 8) = v17;
            *(_QWORD *)(v1296 + 16) = 1;
            *(_BYTE *)(v1296 + 24) = 3;
            *(_QWORD *)(v1296 + 32) = 0;
            *(_BYTE *)(v1296 + 40) &= 0xC0u;
            *(_QWORD *)(v1296 + 56) = 0;
            *(_QWORD *)(v1296 + 64) = 0;
            *(_QWORD *)(v1296 + 48) = v13;
            v1298 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v1298 = 1;
            *(_WORD *)(v1298 + 4) = 1;
            *(_QWORD *)(v1298 + 8) = v1298 + 8;
            *(_QWORD *)(v1298 + 16) = v1298 + 8;
            *(_QWORD *)(v1296 + 80) = 0;
            *(_QWORD *)(v1296 + 88) = 0;
            *(_QWORD *)(v1296 + 72) = v1298;
            v2170 = (WTF *)v1296;
            v2206 = &v2208;
            v2207 = 64;
            v1299 = *(unsigned int *)(v10 + 12);
            if ((_DWORD)v1299)
            {
              v1300 = (unsigned int *)v1298;
              v2145 = v13;
              v2154 = v10;
              v1301 = *(uint64_t **)v10;
              v1302 = *(_QWORD *)v10 + 8 * v1299;
              do
              {
                v1303 = *v1301;
                v2196 = 0uLL;
                v2197 = 0;
                v1304 = WTF::fastMalloc((WTF *)0x68);
                *(_QWORD *)v1304 = 0;
                *(_QWORD *)(v1304 + 8) = 0;
                *(_BYTE *)(v1304 + 16) = 9;
                do
                  v1312 = __ldaxr(v1300);
                while (__stlxr(v1312 + 1, v1300));
                *(_QWORD *)(v1304 + 24) = v1300;
                *(_OWORD *)(v1304 + 32) = v2196;
                *(_QWORD *)(v1304 + 48) = v2197;
                *(_DWORD *)(v1304 + 88) = 0;
                *(_QWORD *)(v1304 + 96) = 0;
                *(_QWORD *)(v1304 + 96) = *(_QWORD *)(v1296 + 88);
                *(_QWORD *)(v1296 + 88) = v1304;
                v1314 = *(_QWORD *)(v1303 + 8);
                v1313 = (uint64_t *)(v1303 + 8);
                *(_QWORD *)v1304 = v1314;
                *(_QWORD *)(v1304 + 8) = v1313;
                *v1313 = v1304;
                *(_QWORD *)(v1314 + 8) = v1304;
                *((_WORD *)v1313 - 2) = 257;
                ++v1301;
              }
              while (v1301 != (uint64_t *)v1302);
              v1315 = (uint64_t *)v2206;
              v13 = v2145;
              v10 = v2154;
              if (&v2208 != v2206)
              {
                if (v2206)
                {
                  v2206 = 0;
                  LODWORD(v2207) = 0;
                  WTF::fastFree((unint64_t)v1315, v1305, v1306, v1307, v1308, v1309, v1310, v1311);
                }
              }
            }
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2170);
            v1318 = v2170;
            if (v2170)
            {
              v1777 = *((_DWORD *)v2170 + 4) - 1;
              *((_DWORD *)v2170 + 4) = v1777;
              if (!v1777)
                JSC::JITStubRoutine::observeZeroRefCount(v1318, v1316, v4, (uint64_t)v5, v6, v7, v8, v9, v1317);
            }
            v3 = v2166;
            v14 = v2163;
            if (!v17)
              goto LABEL_127;
            do
              v675 = __ldaxr(v17);
            while (__stlxr(v675 - 1, v17));
            goto LABEL_649;
          case 0x19:
          case 0x1A:
            if (((_BYTE)v14 - 4) > 2u)
              goto LABEL_127;
            switch(v14)
            {
              case 4u:
                v1005 = *(_QWORD *)(v6 + 32);
                if ((v1005 & 1) != 0)
                  v1006 = v1005 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v1006 = *(_QWORD *)(v1005 + 8);
                v1007 = (*(_BYTE *)(v1006 + 16) & 0x20) == 0;
                v1008 = 81;
                v1009 = 78;
                break;
              case 6u:
                v1160 = *(_QWORD *)(v6 + 32);
                if ((v1160 & 1) != 0)
                  v1161 = v1160 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v1161 = *(_QWORD *)(v1160 + 8);
                v1007 = (*(_BYTE *)(v1161 + 16) & 0x20) == 0;
                v1008 = 83;
                v1009 = 80;
                break;
              case 5u:
                v1855 = *(_QWORD *)(v6 + 32);
                if ((v1855 & 1) != 0)
                  v1856 = v1855 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v1856 = *(_QWORD *)(v1855 + 8);
                v1007 = (*(_BYTE *)(v1856 + 16) & 0x20) == 0;
                v1008 = 82;
                v1009 = 79;
                break;
              default:
                v1008 = 78;
                goto LABEL_1045;
            }
            if (v1007)
              v1008 = v1009;
LABEL_1045:
            v1010 = (uint64_t)&(*v2164)[2 * v1008];
            v1011 = *(_QWORD *)(v1010 + 8);
            v17 = *(unsigned int **)(v1010 + 16);
            v2161 = v14;
            if (v17)
            {
              do
                v1012 = __ldaxr(v17);
              while (__stlxr(v1012 + 1, v17));
              do
                v1013 = __ldaxr(v17);
              while (__stlxr(v1013 + 1, v17));
              do
              {
                v1014 = __ldaxr(v17);
                v1015 = v1014 - 1;
              }
              while (__stlxr(v1015, v17));
              if (!v1015)
              {
                atomic_store(1u, v17);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                WTF::fastFree(v1865, v1866, v1867, v1868, v1869, v1870, v1871, v1872);
              }
              v1016 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1016 = v1011;
              do
                v1017 = __ldaxr(v17);
              while (__stlxr(v1017 + 1, v17));
            }
            else
            {
              v1016 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1016 = v1011;
            }
            *(_QWORD *)(v1016 + 8) = v17;
            *(_QWORD *)(v1016 + 16) = 1;
            *(_BYTE *)(v1016 + 24) = 3;
            *(_QWORD *)(v1016 + 32) = 0;
            *(_BYTE *)(v1016 + 40) &= 0xC0u;
            *(_QWORD *)(v1016 + 56) = 0;
            *(_QWORD *)(v1016 + 64) = 0;
            *(_QWORD *)(v1016 + 48) = v13;
            v1018 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v1018 = 1;
            *(_WORD *)(v1018 + 4) = 1;
            *(_QWORD *)(v1018 + 8) = v1018 + 8;
            *(_QWORD *)(v1018 + 16) = v1018 + 8;
            *(_QWORD *)(v1016 + 80) = 0;
            *(_QWORD *)(v1016 + 88) = 0;
            *(_QWORD *)(v1016 + 72) = v1018;
            v2170 = (WTF *)v1016;
            v2206 = &v2208;
            v2207 = 64;
            v1019 = *(unsigned int *)(v10 + 12);
            if ((_DWORD)v1019)
            {
              v1020 = (unsigned int *)v1018;
              v2145 = v13;
              v2154 = v10;
              v1021 = *(uint64_t **)v10;
              v1022 = *(_QWORD *)v10 + 8 * v1019;
              do
              {
                v1023 = *v1021;
                v2196 = 0uLL;
                v2197 = 0;
                v1024 = WTF::fastMalloc((WTF *)0x68);
                *(_QWORD *)v1024 = 0;
                *(_QWORD *)(v1024 + 8) = 0;
                *(_BYTE *)(v1024 + 16) = 9;
                do
                  v1032 = __ldaxr(v1020);
                while (__stlxr(v1032 + 1, v1020));
                *(_QWORD *)(v1024 + 24) = v1020;
                *(_OWORD *)(v1024 + 32) = v2196;
                *(_QWORD *)(v1024 + 48) = v2197;
                *(_DWORD *)(v1024 + 88) = 0;
                *(_QWORD *)(v1024 + 96) = 0;
                *(_QWORD *)(v1024 + 96) = *(_QWORD *)(v1016 + 88);
                *(_QWORD *)(v1016 + 88) = v1024;
                v1034 = *(_QWORD *)(v1023 + 8);
                v1033 = (uint64_t *)(v1023 + 8);
                *(_QWORD *)v1024 = v1034;
                *(_QWORD *)(v1024 + 8) = v1033;
                *v1033 = v1024;
                *(_QWORD *)(v1034 + 8) = v1024;
                *((_WORD *)v1033 - 2) = 257;
                ++v1021;
              }
              while (v1021 != (uint64_t *)v1022);
              v1035 = (uint64_t *)v2206;
              v13 = v2145;
              v10 = v2154;
              if (&v2208 != v2206)
              {
                if (v2206)
                {
                  v2206 = 0;
                  LODWORD(v2207) = 0;
                  WTF::fastFree((unint64_t)v1035, v1025, v1026, v1027, v1028, v1029, v1030, v1031);
                }
              }
            }
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2170);
            v1038 = v2170;
            if (v2170)
            {
              v1643 = *((_DWORD *)v2170 + 4) - 1;
              *((_DWORD *)v2170 + 4) = v1643;
              if (!v1643)
                JSC::JITStubRoutine::observeZeroRefCount(v1038, v1036, v4, (uint64_t)v5, v6, v7, v8, v9, v1037);
            }
            v3 = v2166;
            v14 = v2161;
            if (!v17)
              goto LABEL_127;
            do
              v675 = __ldaxr(v17);
            while (__stlxr(v675 - 1, v17));
LABEL_649:
            if (v675 != 1)
              goto LABEL_126;
            atomic_store(1u, v17);
            v229 = v17;
            goto LABEL_1592;
          case 0x1D:
          case 0x1E:
            if (((_BYTE)v14 - 31) > 1u)
              goto LABEL_127;
            v1091 = 168;
            if (v14 == 32)
              v1091 = 170;
            v1092 = &(*v2164)[v1091];
            v1093 = v1092[1];
            v17 = (unsigned int *)v1092[2];
            v2162 = v14;
            if (v17)
            {
              do
                v1094 = __ldaxr(v17);
              while (__stlxr(v1094 + 1, v17));
              do
                v1095 = __ldaxr(v17);
              while (__stlxr(v1095 + 1, v17));
              do
              {
                v1096 = __ldaxr(v17);
                v1097 = v1096 - 1;
              }
              while (__stlxr(v1097, v17));
              if (!v1097)
              {
                atomic_store(1u, v17);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                WTF::fastFree(v1935, v1936, v1937, v1938, v1939, v1940, v1941, v1942);
              }
              v1098 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1098 = v1093;
              do
                v1099 = __ldaxr(v17);
              while (__stlxr(v1099 + 1, v17));
            }
            else
            {
              v1098 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v1098 = v1093;
            }
            *(_QWORD *)(v1098 + 8) = v17;
            *(_QWORD *)(v1098 + 16) = 1;
            *(_BYTE *)(v1098 + 24) = 3;
            *(_QWORD *)(v1098 + 32) = 0;
            *(_BYTE *)(v1098 + 40) &= 0xC0u;
            *(_QWORD *)(v1098 + 56) = 0;
            *(_QWORD *)(v1098 + 64) = 0;
            *(_QWORD *)(v1098 + 48) = v13;
            v1100 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v1100 = 1;
            *(_WORD *)(v1100 + 4) = 1;
            *(_QWORD *)(v1100 + 8) = v1100 + 8;
            *(_QWORD *)(v1100 + 16) = v1100 + 8;
            *(_QWORD *)(v1098 + 80) = 0;
            *(_QWORD *)(v1098 + 88) = 0;
            *(_QWORD *)(v1098 + 72) = v1100;
            v2170 = (WTF *)v1098;
            v2206 = &v2208;
            v2207 = 64;
            v1101 = *(unsigned int *)(v10 + 12);
            if ((_DWORD)v1101)
            {
              v1102 = (unsigned int *)v1100;
              v2145 = v13;
              v2154 = v10;
              v1103 = *(uint64_t **)v10;
              v1104 = *(_QWORD *)v10 + 8 * v1101;
              do
              {
                v1105 = *v1103;
                v2196 = 0uLL;
                v2197 = 0;
                v1106 = WTF::fastMalloc((WTF *)0x68);
                *(_QWORD *)v1106 = 0;
                *(_QWORD *)(v1106 + 8) = 0;
                *(_BYTE *)(v1106 + 16) = 9;
                do
                  v1114 = __ldaxr(v1102);
                while (__stlxr(v1114 + 1, v1102));
                *(_QWORD *)(v1106 + 24) = v1102;
                *(_OWORD *)(v1106 + 32) = v2196;
                *(_QWORD *)(v1106 + 48) = v2197;
                *(_DWORD *)(v1106 + 88) = 0;
                *(_QWORD *)(v1106 + 96) = 0;
                *(_QWORD *)(v1106 + 96) = *(_QWORD *)(v1098 + 88);
                *(_QWORD *)(v1098 + 88) = v1106;
                v1116 = *(_QWORD *)(v1105 + 8);
                v1115 = (uint64_t *)(v1105 + 8);
                *(_QWORD *)v1106 = v1116;
                *(_QWORD *)(v1106 + 8) = v1115;
                *v1115 = v1106;
                *(_QWORD *)(v1116 + 8) = v1106;
                *((_WORD *)v1115 - 2) = 257;
                ++v1103;
              }
              while (v1103 != (uint64_t *)v1104);
              v1117 = (uint64_t *)v2206;
              v13 = v2145;
              v10 = v2154;
              if (&v2208 != v2206)
              {
                if (v2206)
                {
                  v2206 = 0;
                  LODWORD(v2207) = 0;
                  WTF::fastFree((unint64_t)v1117, v1107, v1108, v1109, v1110, v1111, v1112, v1113);
                }
              }
            }
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2170);
            v1120 = v2170;
            if (v2170)
            {
              v1692 = *((_DWORD *)v2170 + 4) - 1;
              *((_DWORD *)v2170 + 4) = v1692;
              if (!v1692)
                JSC::JITStubRoutine::observeZeroRefCount(v1120, v1118, v4, (uint64_t)v5, v6, v7, v8, v9, v1119);
            }
            v3 = v2166;
            v14 = v2162;
            if (!v17)
              goto LABEL_127;
            do
              v675 = __ldaxr(v17);
            while (__stlxr(v675 - 1, v17));
            goto LABEL_649;
          default:
            goto LABEL_127;
        }
      }
      LODWORD(v17) = 1;
      switch((char)v14)
      {
        case 0:
        case 9:
          if (*(_BYTE *)(v6 + 5))
            goto LABEL_127;
          v2154 = v7;
          v2157 = v14;
          v19 = (uint64_t *)(v6 + 16);
          v18 = *(_QWORD *)(v6 + 16);
          if (v18)
            v20 = v18 + 8;
          else
            v20 = 0;
          if (v18)
            v21 = v18 + 8 + 24 * *(unsigned int *)(v18 + 4);
          else
            v21 = 0;
          v22 = v2157;
          if (v20 == v21)
            goto LABEL_77;
          do
          {
            if (*(_QWORD *)(v11 + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x1981D6968);
            }
            v23 = v13;
            v24 = (unint64_t *)(v20 + 8);
            if ((*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFLL) != 0)
            {
              v25 = 16 * (**(_DWORD **)v20 & 0xFFFFFFFE);
              JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)(v20 + 8), 0, v25, *(const JSC::PropertyTable **)v20, v6, v7, v8, v9);
              v3 = v2166;
              if (v26)
              {
                v27 = *(_QWORD *)(v25 + 96);
                v28 = (v27 & 1) != 0 ? (v27 >> 1) & 3 : *(unsigned __int8 *)(v27 + 4);
                if (v28 != 2)
                {
                  v29 = *v24;
                  v30 = BYTE6(*v24);
                  if (v30 == 5)
                  {
                    if (!(v29 >> 4) || ((v29 >> 4) & ~*(_DWORD *)(v25 + 32)) != 0)
                      goto LABEL_903;
                    v33 = *(_QWORD *)(v25 + 88);
                    if (!v33)
                    {
                      v580 = *(_QWORD *)(v25 + 64);
                      if (!v580 || *(_BYTE *)(v580 + 5) != 1 && *(_DWORD *)(v580 + 80) < 2u)
                        goto LABEL_903;
                      JSC::Structure::materializePropertyTable((JSC::Structure *)v25, *(JSC::VM **)((v25 & 0xFFFFFC000) + 8), 1, v5, v6, v7, v8, v9);
                      if (!v33)
                        goto LABEL_903;
                    }
                    if (!*(_DWORD *)(v33 + 24))
                      goto LABEL_903;
                    v34 = v29 & 0xFFFFFFFFFFFFLL;
                    v35 = *(_QWORD *)(v33 + 16);
                    v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
                    v37 = *(unsigned int *)(v33 + 8);
                    v38 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 0x10);
                    if ((v35 & 1) != 0)
                    {
                      if ((v38 & 0x20) != 0)
                        v38 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 0x20);
                      v39 = *(_DWORD *)(v33 + 12);
                      v40 = (v38 >> 8) & *(_QWORD *)&v39;
                      v41 = *(unsigned __int8 *)(v36 + v40);
                      if (!*(_BYTE *)(v36 + v40))
                        goto LABEL_903;
                      v603 = v36 + v37;
                      v604 = 1;
                      while (1)
                      {
                        v605 = *(_QWORD *)(v603 + 8 * (v41 - 1));
                        if (v34 == (v605 & 0xFFFFFFFFFFFFLL))
                          break;
                        v40 = ((_DWORD)v40 + v604) & v39;
                        v41 = *(unsigned __int8 *)(v36 + v40);
                        ++v604;
                        if (!*(_BYTE *)(v36 + v40))
                          goto LABEL_903;
                      }
                      v606 = (JSC::Structure *)HIBYTE(v605);
                    }
                    else
                    {
                      if ((v38 & 0x20) != 0)
                        v38 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 0x20);
                      v611 = *(_DWORD *)(v33 + 12);
                      v612 = v611 & (v38 >> 8);
                      v613 = *(_DWORD *)(v36 + 4 * v612);
                      if (!v613)
                        goto LABEL_903;
                      v614 = v36 + 4 * v37;
                      v615 = 1;
                      while (1)
                      {
                        v616 = (v613 - 1);
                        if (*(_QWORD *)(v614 + 16 * v616) == v34)
                          break;
                        v612 = (v612 + v615) & v611;
                        v613 = *(_DWORD *)(v36 + 4 * v612);
                        ++v615;
                        if (!v613)
                          goto LABEL_903;
                      }
                      v606 = (JSC::Structure *)*(unsigned int *)(v614 + 16 * v616 + 8);
                      if ((_DWORD)v606 == -1)
                      {
LABEL_903:
                        __break(0xC471u);
                        JUMPOUT(0x1981D4374);
                      }
                    }
                    v607 = JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v25, *(JSC::VM **)((v25 & 0xFFFFFC000) + 8), v606, (uint64_t)v5, v6, v7, v8, v9);
                    v3 = v2166;
                    if (v607 && *(_BYTE *)(v607 + 4) != 2)
                    {
LABEL_20:
                      if (HIDWORD(v2222) == (_DWORD)v2222)
                      {
                        WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const&>((uint64_t)&v2221, v20);
                        v3 = v2166;
                      }
                      else
                      {
                        v31 = &v2221[3 * HIDWORD(v2222)];
                        v32 = *(_OWORD *)v20;
                        v31[2] = *(_QWORD *)(v20 + 16);
                        *(_OWORD *)v31 = v32;
                        ++HIDWORD(v2222);
                      }
                      v13 = v23;
                      goto LABEL_23;
                    }
                  }
                  else
                  {
                    if (v30 != 1)
                      goto LABEL_20;
                    if (!(v29 >> 4) || ((v29 >> 4) & ~*(_DWORD *)(v25 + 32)) != 0)
                      goto LABEL_1589;
                    v1057 = *(_QWORD *)(v25 + 88);
                    if (!v1057)
                    {
                      v1241 = *(_QWORD *)(v25 + 64);
                      if (!v1241 || *(_BYTE *)(v1241 + 5) != 1 && *(_DWORD *)(v1241 + 80) < 2u)
                        goto LABEL_1589;
                      JSC::Structure::materializePropertyTable((JSC::Structure *)v25, *(JSC::VM **)((v25 & 0xFFFFFC000) + 8), 1, v5, v6, v7, v8, v9);
                      if (!v1057)
                        goto LABEL_1589;
                    }
                    if (!*(_DWORD *)(v1057 + 24))
                      goto LABEL_1589;
                    v1058 = v29 & 0xFFFFFFFFFFFFLL;
                    v1059 = *(_QWORD *)(v1057 + 16);
                    v1060 = v1059 & 0xFFFFFFFFFFFFFFFELL;
                    v1061 = *(unsigned int *)(v1057 + 8);
                    v1062 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 0x10);
                    if ((v1059 & 1) != 0)
                    {
                      if ((v1062 & 0x20) != 0)
                        v1062 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 0x20);
                      v1063 = *(_DWORD *)(v1057 + 12);
                      v1064 = (v1062 >> 8) & *(_QWORD *)&v1063;
                      v1065 = *(unsigned __int8 *)(v1060 + v1064);
                      if (!*(_BYTE *)(v1060 + v1064))
                        goto LABEL_1589;
                      v1066 = v1060 + v1061;
                      v1067 = 1;
                      while (1)
                      {
                        v1068 = *(_QWORD *)(v1066 + 8 * (v1065 - 1));
                        if (v1058 == (v1068 & 0xFFFFFFFFFFFFLL))
                          break;
                        v1064 = ((_DWORD)v1064 + v1067) & v1063;
                        v1065 = *(unsigned __int8 *)(v1060 + v1064);
                        ++v1067;
                        if (!*(_BYTE *)(v1060 + v1064))
                          goto LABEL_1589;
                      }
                      v1331 = (JSC::Structure *)HIBYTE(v1068);
                    }
                    else
                    {
                      if ((v1062 & 0x20) != 0)
                        v1062 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 0x20);
                      v1366 = *(_DWORD *)(v1057 + 12);
                      v1367 = v1366 & (v1062 >> 8);
                      v1368 = *(_DWORD *)(v1060 + 4 * v1367);
                      if (!v1368)
                        goto LABEL_1589;
                      v1369 = v1060 + 4 * v1061;
                      v1370 = 1;
                      while (1)
                      {
                        v1371 = (v1368 - 1);
                        if (*(_QWORD *)(v1369 + 16 * v1371) == v1058)
                          break;
                        v1367 = (v1367 + v1370) & v1366;
                        v1368 = *(_DWORD *)(v1060 + 4 * v1367);
                        ++v1370;
                        if (!v1368)
                          goto LABEL_1589;
                      }
                      v1331 = (JSC::Structure *)*(unsigned int *)(v1369 + 16 * v1371 + 8);
                      if ((_DWORD)v1331 == -1)
                      {
LABEL_1589:
                        __break(0xC471u);
                        JUMPOUT(0x1981D6FF4);
                      }
                    }
                    v1332 = JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)v25, *(JSC::VM **)((v25 & 0xFFFFFC000) + 8), v1331, "Firing replacement to ensure validity", v6, v7, v8, v9);
                    v3 = v2166;
                    if (v1332)
                    {
                      if (*(_BYTE *)(v1332 + 4) == 2)
                        goto LABEL_20;
                    }
                  }
                }
              }
            }
            if ((unint64_t)*(unsigned __int8 *)(v20 + 14) << 48 == 0x5000000000000)
            {
              __break(0xC471u);
              JUMPOUT(0x1981D7B98);
            }
            JSC::ObjectPropertyCondition::structureEnsuresValidityAssumingImpurePropertyWatchpoint(v20, 0, v4, (uint64_t)v5, v6, v7, v8, v9);
            if (!v608)
            {
              WTF::dataLog<char [34],JSC::ObjectPropertyCondition,char [2]>((JSC::ObjectPropertyCondition *)v20);
              __break(0xC471u);
              JUMPOUT(0x1981D7BC0);
            }
            v3 = v2166;
            v13 = v23;
            if (HIDWORD(v2210) == DWORD2(v2210))
            {
              WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const&>((uint64_t)&v2210, v20);
              v3 = v2166;
            }
            else
            {
              v609 = v2210 + 24 * HIDWORD(v2210);
              v610 = *(_OWORD *)v20;
              *(_QWORD *)(v609 + 16) = *(_QWORD *)(v20 + 16);
              *(_OWORD *)v609 = v610;
              ++HIDWORD(v2210);
            }
LABEL_23:
            v20 += 24;
          }
          while (v20 != v21);
          if (HIDWORD(v2210))
          {
            LODWORD(v17) = 1;
            v10 = v2154;
            v14 = v2157;
            goto LABEL_127;
          }
          v22 = *(_BYTE *)(v11 + 4);
LABEL_77:
          if (v22 <= 0x20u && ((1 << v22) & 0x100000014) != 0)
          {
            v85 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
            if (v85 && *(_BYTE *)(v85 + 5) != 1)
            {
              v84 = *(_DWORD *)(v85 + 80);
              goto LABEL_80;
            }
          }
          else
          {
            v84 = *(_DWORD *)(v11 + 12);
LABEL_80:
            if (v84)
              v85 = 16 * (v84 & 0xFFFFFFFE);
            else
              v85 = 0;
          }
          if (v22 - 30 >= 0x53)
          {
            switch(v22)
            {
              case 0u:
              case 9u:
              case 0x10u:
                if (!*v19)
                  goto LABEL_98;
                JSC::ObjectPropertyConditionSet::slotBaseCondition((uint64_t *)(v11 + 16), &v2206);
                v88 = (uint64_t *)v2206;
                break;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 7u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
                goto LABEL_84;
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0xDu:
              case 0xEu:
              case 0xFu:
                v88 = *(uint64_t **)(v11 + 48);
                if (v88)
                  goto LABEL_97;
                v232 = *v19;
                if (!*v19)
                  goto LABEL_98;
                v233 = *(unsigned int *)(v232 + 4);
                if (!(_DWORD)v233)
                  goto LABEL_1020;
                v88 = 0;
                v234 = 0;
                v235 = v232 + 16;
                v236 = 24 * v233;
                do
                {
                  v237 = *(unsigned __int8 *)(v235 + 6);
                  if (v237 < 2 || v237 - 5 < 2)
                  {
                    v88 = *(uint64_t **)(v235 - 8);
                    ++v234;
                  }
                  v235 += 24;
                  v236 -= 24;
                }
                while (v236);
                if (v234 != 1)
                {
LABEL_1020:
                  __break(0xC471u);
                  JUMPOUT(0x1981D4AA4);
                }
                return;
              default:
                goto LABEL_98;
            }
LABEL_96:
            if (v88)
LABEL_97:
              v85 = 16 * (*(_DWORD *)v88 & 0xFFFFFFFE);
          }
          else
          {
LABEL_84:
            if ((v22 - 9) <= 7u)
            {
              v86 = *v19;
              if (*v19)
              {
                v87 = *(unsigned int *)(v86 + 4);
                if (!(_DWORD)v87)
                  goto LABEL_256;
                v88 = 0;
                v89 = 0;
                v90 = v86 + 16;
                v91 = 24 * v87;
                do
                {
                  v92 = *(unsigned __int8 *)(v90 + 6);
                  if (v92 < 2 || v92 - 5 < 2)
                  {
                    v88 = *(uint64_t **)(v90 - 8);
                    ++v89;
                  }
                  v90 += 24;
                  v91 -= 24;
                }
                while (v91);
                if (v89 != 1)
                {
LABEL_256:
                  __break(0xC471u);
                  JUMPOUT(0x1981D1920);
                }
                goto LABEL_96;
              }
            }
          }
LABEL_98:
          v93 = &v2210;
          v94 = *(unsigned int *)(v11 + 8);
          if ((_DWORD)v94 != -1)
            JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v85, (JSC::VM *)v13, (JSC::Structure *)v94, (uint64_t)v5, v6, v7, v8, v9);
          v95 = *(unsigned __int8 *)(v11 + 4);
          v96 = &v2191;
          if ((v95 - 30) < 0x53)
          {
LABEL_101:
            if ((v95 - 9) <= 7)
            {
              v97 = *v19;
              if (*v19)
              {
                v98 = *(unsigned int *)(v97 + 4);
                if (!(_DWORD)v98)
                  goto LABEL_277;
                v99 = 0;
                v100 = 0;
                v101 = v97 + 16;
                v102 = 24 * v98;
                do
                {
                  v103 = *(unsigned __int8 *)(v101 + 6);
                  if (v103 < 2 || v103 - 5 < 2)
                  {
                    v99 = *(uint64_t **)(v101 - 8);
                    ++v100;
                  }
                  v101 += 24;
                  v102 -= 24;
                }
                while (v102);
                v96 = &v2191;
                if (v100 != 1)
                {
LABEL_277:
                  __break(0xC471u);
                  JUMPOUT(0x1981D1A4CLL);
                }
                goto LABEL_250;
              }
            }
            goto LABEL_691;
          }
          switch(*(_BYTE *)(v11 + 4))
          {
            case 0:
            case 9:
            case 0x10:
              if (!*v19)
                goto LABEL_691;
              JSC::ObjectPropertyConditionSet::slotBaseCondition((uint64_t *)(v11 + 16), &v2206);
              v96 = &v2191;
              v99 = (uint64_t *)v2206;
              break;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x19:
            case 0x1A:
            case 0x1B:
              goto LABEL_101;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0xE:
            case 0xF:
              if (*(_QWORD *)(v11 + 48))
                goto LABEL_251;
              v243 = *v19;
              if (!*v19)
                goto LABEL_691;
              v244 = *(unsigned int *)(v243 + 4);
              if (!(_DWORD)v244)
                goto LABEL_1077;
              v99 = 0;
              v245 = 0;
              v246 = v243 + 16;
              v247 = 24 * v244;
              do
              {
                v248 = *(unsigned __int8 *)(v246 + 6);
                if (v248 < 2 || v248 - 5 < 2)
                {
                  v99 = *(uint64_t **)(v246 - 8);
                  ++v245;
                }
                v246 += 24;
                v247 -= 24;
              }
              while (v247);
              v96 = &v2191;
              if (v245 != 1)
              {
LABEL_1077:
                __break(0xC471u);
                JUMPOUT(0x1981D4EE4);
              }
              return;
            default:
              goto LABEL_691;
          }
LABEL_250:
          if (v99)
          {
LABEL_251:
            v238 = (JSC::VM *)(*v2164)[43];
            v14 = (unsigned int *)(*v2164)[44];
            if (v14)
            {
              do
                v239 = __ldaxr(v14);
              while (__stlxr(v239 + 1, v14));
              do
                v240 = __ldaxr(v14);
              while (__stlxr(v240 + 1, v14));
              do
              {
                v241 = __ldaxr(v14);
                v242 = --v241 == 0;
              }
              while (__stlxr(v241, v14));
LABEL_695:
              if (v242)
              {
                atomic_store(1u, v14);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, (uint64_t)v3, v94, (uint64_t)v5, v6, v7, v8, v9);
                WTF::fastFree(v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446);
                v96 = &v2191;
              }
            }
          }
          else
          {
LABEL_691:
            v238 = (JSC::VM *)(*v2164)[41];
            v14 = (unsigned int *)(*v2164)[42];
            if (v14)
            {
              do
                v700 = __ldaxr(v14);
              while (__stlxr(v700 + 1, v14));
              do
                v701 = __ldaxr(v14);
              while (__stlxr(v701 + 1, v14));
              do
              {
                v702 = __ldaxr(v14);
                v242 = --v702 == 0;
              }
              while (__stlxr(v702, v14));
              goto LABEL_695;
            }
          }
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v704 = *(_QWORD *)(StatusReg + 752);
          if (!v704)
            goto LABEL_1766;
          v705 = (_BYTE *)(v704 + 9224);
          *(_BYTE *)(v704 + 9224) = 1;
          v706 = *(unsigned int *)(v704 + 9240);
          if (!(_DWORD)v706)
            goto LABEL_737;
          *(_DWORD *)(v704 + 9240) = v706 - *(_DWORD *)(v704 + 9244);
          v10 = *(_QWORD *)(v704 + 9232) - v706;
LABEL_700:
          *v705 = 0;
LABEL_701:
          *(_QWORD *)v10 = v238;
          if (v14)
          {
            do
              v707 = __ldaxr(v14);
            while (__stlxr(v707 + 1, v14));
          }
          *(_QWORD *)(v10 + 8) = v14;
          *(_QWORD *)(v10 + 16) = 1;
          *(_BYTE *)(v10 + 24) = 3;
          *(_QWORD *)(v10 + 32) = 0;
          *(_BYTE *)(v10 + 40) &= 0xC0u;
          *(_QWORD *)(v10 + 56) = 0;
          *(_QWORD *)(v10 + 64) = 0;
          *(_QWORD *)(v10 + 48) = v13;
          v708 = *(_QWORD *)(StatusReg + 752);
          v2145 = v13;
          v2147 = v12;
          if (!v708)
          {
LABEL_1769:
            v1775 = StatusReg;
            casual = bmalloc_allocate_casual(24, 1);
            StatusReg = v1775;
            v96 = &v2191;
            v12 = casual;
            goto LABEL_707;
          }
          v709 = (_BYTE *)(v708 + 8488);
          *(_BYTE *)(v708 + 8488) = 1;
          v710 = *(unsigned int *)(v708 + 8504);
          if ((_DWORD)v710)
          {
            *(_DWORD *)(v708 + 8504) = v710 - *(_DWORD *)(v708 + 8508);
            v12 = *(_QWORD *)(v708 + 8496) - v710;
            goto LABEL_706;
          }
          v746 = *(_QWORD *)(v708 + 8528);
          v747 = *(_QWORD *)(v708 + 8512);
          if (!v746)
          {
            if (*(_BYTE *)(v708 + 8493) == 6)
            {
              v1598 = *(_DWORD *)(v708 + 8524);
              v1599 = *(unsigned int *)(v708 + 8520);
              if (v1599 < v1598)
              {
                *(_QWORD *)&v709[8 * v1599 + 56] = 0;
                v1600 = (unint64_t *)(v708 + 8 * v1599 + 8552);
                v1601 = v1598 - 1 - v1599;
                while (v1601)
                {
                  v747 += 1024;
                  v1603 = *v1600++;
                  v1602 = v1603;
                  LODWORD(v1599) = v1599 + 1;
                  --v1601;
                  if (v1603)
                  {
                    v746 = __rbit64(v1602);
                    *(_DWORD *)(v708 + 8520) = v1599;
                    *(_QWORD *)(v708 + 8512) = v747;
                    v96 = &v2191;
                    goto LABEL_740;
                  }
                }
                *(_DWORD *)(v708 + 8520) = v1598;
              }
            }
            *v709 = 0;
            goto LABEL_1769;
          }
LABEL_740:
          v748 = __clz(v746);
          *(_QWORD *)(v708 + 8528) = v746 & ~(0x8000000000000000 >> v748);
          v12 = v747 + 16 * v748;
LABEL_706:
          *v709 = 0;
LABEL_707:
          *(_DWORD *)v12 = 1;
          *(_WORD *)(v12 + 4) = 1;
          *(_QWORD *)(v12 + 8) = v12 + 8;
          *(_QWORD *)(v12 + 16) = v12 + 8;
          *(_QWORD *)(v10 + 80) = 0;
          *(_QWORD *)(v10 + 88) = 0;
          *(_QWORD *)(v10 + 72) = v12;
          if (HIDWORD(v2222))
          {
            v93 = (__int128 *)*((_QWORD *)v93 + 194);
            v711 = (__int128 *)((char *)v93 + 24 * HIDWORD(v2222));
            v13 = 0x5000000000000;
            v712 = off_1E3580B60;
            v713 = off_1E3583610;
            do
            {
              v238 = (JSC::VM *)v96[23];
              v714 = *((unsigned __int8 *)v93 + 14);
              v715 = *(_QWORD *)(StatusReg + 752);
              if (v715)
              {
                v716 = (_BYTE *)(v715 + 9408);
                *(_BYTE *)(v715 + 9408) = 1;
                v717 = *(unsigned int *)(v715 + 9424);
                if ((_DWORD)v717)
                {
                  *(_DWORD *)(v715 + 9424) = v717 - *(_DWORD *)(v715 + 9428);
                  v718 = *(_QWORD *)(v715 + 9416) - v717;
LABEL_712:
                  *v716 = 0;
                  goto LABEL_713;
                }
                v726 = *(_QWORD *)(v715 + 9448);
                v727 = *(_QWORD *)(v715 + 9432);
                if (v726)
                {
LABEL_723:
                  v728 = __clz(v726);
                  *(_QWORD *)(v715 + 9448) = v726 & ~(0x8000000000000000 >> v728);
                  v718 = v727 + 16 * v728;
                  goto LABEL_712;
                }
                if (*(_BYTE *)(v715 + 9413) == 6)
                {
                  v1391 = *(_DWORD *)(v715 + 9444);
                  v1392 = *(unsigned int *)(v715 + 9440);
                  if (v1392 < v1391)
                  {
                    v1393 = v712;
                    *(_QWORD *)&v716[8 * v1392 + 56] = 0;
                    v1394 = (unint64_t *)(v715 + 8 * v1392 + 9472);
                    v1395 = v1391 - 1 - v1392;
                    while (v1395)
                    {
                      v727 += 1024;
                      v1397 = *v1394++;
                      v1396 = v1397;
                      LODWORD(v1392) = v1392 + 1;
                      --v1395;
                      if (v1397)
                      {
                        v726 = __rbit64(v1396);
                        *(_DWORD *)(v715 + 9440) = v1392;
                        *(_QWORD *)(v715 + 9432) = v727;
                        v96 = &v2191;
                        v712 = v1393;
                        goto LABEL_723;
                      }
                    }
                    *(_DWORD *)(v715 + 9440) = v1391;
                  }
                }
                *v716 = 0;
              }
              v1641 = StatusReg;
              v1642 = bmalloc_allocate_casual(104, 1);
              v713 = off_1E3583610;
              v712 = off_1E3580B60;
              StatusReg = v1641;
              v96 = &v2191;
              v718 = v1642;
LABEL_713:
              if (v714 << 48 == 0x5000000000000)
              {
                v2144 = StatusReg;
                *(_QWORD *)v718 = v712;
                v1960 = *((_QWORD *)v93 + 2);
                *(_OWORD *)(v718 + 8) = *v93;
                *(_QWORD *)(v718 + 32) = 0;
                *(_QWORD *)(v718 + 40) = 0;
                *(_QWORD *)(v718 + 24) = v1960;
                *(_BYTE *)(v718 + 48) = 0;
                *(_QWORD *)(v718 + 56) = 0;
                *(_QWORD *)(v718 + 64) = 0;
                *(_BYTE *)(v718 + 72) = 1;
                if ((unint64_t)*((unsigned __int8 *)v93 + 14) << 48 != 0x5000000000000)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1981D8C08);
                }
                v1961 = v713;
                *(_QWORD *)v718 = v713;
                do
                  v1962 = __ldaxr((unsigned int *)v12);
                while (__stlxr(v1962 + 1, (unsigned int *)v12));
                *(_QWORD *)(v718 + 80) = v12;
                if ((unint64_t)*((unsigned __int8 *)v93 + 14) << 48 != 0x5000000000000)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1981D8C28);
                }
                *(_DWORD *)(v718 + 88) = 1;
                *(_QWORD *)(v718 + 96) = 0;
                *(_QWORD *)(v718 + 96) = *(_QWORD *)(v10 + 88);
                *(_QWORD *)(v10 + 88) = v718;
                JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v718, v238, 9, (const JSC::PropertyTable *)0x101, 9472, 0x8000000000000000, v8, v9);
                v96 = &v2191;
                StatusReg = v2144;
                v712 = off_1E3580B60;
                v713 = v1961;
              }
              else
              {
                *(_QWORD *)v718 = 0;
                *(_QWORD *)(v718 + 8) = 0;
                *(_BYTE *)(v718 + 16) = 9;
                do
                  v719 = __ldaxr((unsigned int *)v12);
                while (__stlxr(v719 + 1, (unsigned int *)v12));
                *(_QWORD *)(v718 + 24) = v12;
                v720 = *v93;
                *(_QWORD *)(v718 + 48) = *((_QWORD *)v93 + 2);
                *(_OWORD *)(v718 + 32) = v720;
                *(_DWORD *)(v718 + 88) = 0;
                *(_QWORD *)(v718 + 96) = 0;
                *(_QWORD *)(v718 + 96) = *(_QWORD *)(v10 + 88);
                v721 = *((unsigned __int8 *)v93 + 14);
                *(_QWORD *)(v10 + 88) = v718;
                if (v721 << 48 == 0x5000000000000)
                {
                  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_737:
                  v743 = *(_QWORD *)(v704 + 9264);
                  v744 = *(_QWORD *)(v704 + 9248);
                  if (v743)
                  {
LABEL_738:
                    v745 = __clz(v743);
                    *(_QWORD *)(v704 + 9264) = v743 & ~(0x8000000000000000 >> v745);
                    v10 = v744 + 16 * v745;
                    goto LABEL_700;
                  }
                  if (v705[5] == 6)
                  {
                    v1592 = *(_DWORD *)(v704 + 9260);
                    v1593 = *(unsigned int *)(v704 + 9256);
                    if (v1593 < v1592)
                    {
                      *(_QWORD *)&v705[8 * v1593 + 56] = 0;
                      v1594 = (unint64_t *)(v704 + 8 * v1593 + 9288);
                      v1595 = v1592 - 1 - v1593;
                      while (v1595)
                      {
                        v744 += 1024;
                        v1597 = *v1594++;
                        v1596 = v1597;
                        LODWORD(v1593) = v1593 + 1;
                        --v1595;
                        if (v1597)
                        {
                          v743 = __rbit64(v1596);
                          *(_DWORD *)(v704 + 9256) = v1593;
                          *(_QWORD *)(v704 + 9248) = v744;
                          v96 = &v2191;
                          goto LABEL_738;
                        }
                      }
                      *(_DWORD *)(v704 + 9256) = v1592;
                    }
                  }
                  *v705 = 0;
LABEL_1766:
                  v1773 = StatusReg;
                  v1774 = bmalloc_allocate_casual(96, 1);
                  StatusReg = v1773;
                  v96 = &v2191;
                  v10 = v1774;
                  goto LABEL_701;
                }
                v722 = 16 * (**(_DWORD **)v93 & 0xFFFFFFFE);
                v723 = *(_QWORD *)(v722 + 0x60);
                if ((v723 & 1) != 0)
                {
                  v2142 = (v723 >> 1) & 3;
                  v1240 = StatusReg;
                  v723 = WTF::fastMalloc((WTF *)0x18);
                  v713 = off_1E3583610;
                  v712 = off_1E3580B60;
                  StatusReg = v1240;
                  v96 = &v2191;
                  *(_DWORD *)v723 = 1;
                  *(_BYTE *)(v723 + 4) = v2142;
                  *(_BYTE *)(v723 + 5) = 0;
                  *(_QWORD *)(v723 + 8) = v723 + 8;
                  *(_QWORD *)(v723 + 16) = v723 + 8;
                  __dmb(0xAu);
                  *(_QWORD *)(v722 + 96) = v723;
                }
                v725 = *(_QWORD *)(v723 + 8);
                v724 = (uint64_t *)(v723 + 8);
                *(_QWORD *)v718 = v725;
                *(_QWORD *)(v718 + 8) = v724;
                *v724 = v718;
                *(_QWORD *)(v725 + 8) = v718;
                *((_WORD *)v724 - 2) = 257;
              }
              v93 = (__int128 *)((char *)v93 + 24);
            }
            while (v93 != v711);
          }
          v729 = *(unsigned int *)(v2154 + 12);
          if (!(_DWORD)v729)
            goto LABEL_780;
          v730 = *(uint64_t **)v2154;
          v731 = *(_QWORD *)v2154 + 8 * v729;
          while (2)
          {
            v732 = *v730;
            v96[25] = 0;
            v96[26] = 0;
            v96[27] = 0;
            v733 = *(_QWORD *)(StatusReg + 752);
            if (!v733)
              goto LABEL_1653;
            v734 = (_BYTE *)(v733 + 9408);
            *(_BYTE *)(v733 + 9408) = 1;
            v735 = *(unsigned int *)(v733 + 9424);
            if ((_DWORD)v735)
            {
              *(_DWORD *)(v733 + 9424) = v735 - *(_DWORD *)(v733 + 9428);
              v736 = *(_QWORD *)(v733 + 9416) - v735;
              goto LABEL_729;
            }
            v740 = *(_QWORD *)(v733 + 9448);
            v741 = *(_QWORD *)(v733 + 9432);
            if (!v740)
            {
              if (*(_BYTE *)(v733 + 9413) == 6)
              {
                v1319 = *(_DWORD *)(v733 + 9444);
                v1320 = *(unsigned int *)(v733 + 9440);
                if (v1320 < v1319)
                {
                  *(_QWORD *)&v734[8 * v1320 + 56] = 0;
                  v1321 = (unint64_t *)(v733 + 8 * v1320 + 9472);
                  v1322 = v1319 - 1 - v1320;
                  while (v1322)
                  {
                    v741 += 1024;
                    v1324 = *v1321++;
                    v1323 = v1324;
                    LODWORD(v1320) = v1320 + 1;
                    --v1322;
                    if (v1324)
                    {
                      v740 = __rbit64(v1323);
                      *(_DWORD *)(v733 + 9440) = v1320;
                      *(_QWORD *)(v733 + 9432) = v741;
                      goto LABEL_735;
                    }
                  }
                  *(_DWORD *)(v733 + 9440) = v1319;
                }
              }
              *v734 = 0;
LABEL_1653:
              v2143 = StatusReg;
              v736 = bmalloc_allocate_casual(104, 1);
              StatusReg = v2143;
              v96 = &v2191;
              goto LABEL_730;
            }
LABEL_735:
            v742 = __clz(v740);
            *(_QWORD *)(v733 + 9448) = v740 & ~(0x8000000000000000 >> v742);
            v736 = v741 + 16 * v742;
LABEL_729:
            *v734 = 0;
LABEL_730:
            *(_QWORD *)v736 = 0;
            *(_QWORD *)(v736 + 8) = 0;
            *(_BYTE *)(v736 + 16) = 9;
            do
              v737 = __ldaxr((unsigned int *)v12);
            while (__stlxr(v737 + 1, (unsigned int *)v12));
            *(_QWORD *)(v736 + 24) = v12;
            *(_OWORD *)(v736 + 32) = *(_OWORD *)(v96 + 25);
            *(_QWORD *)(v736 + 48) = v96[27];
            *(_DWORD *)(v736 + 88) = 0;
            *(_QWORD *)(v736 + 96) = 0;
            *(_QWORD *)(v736 + 96) = *(_QWORD *)(v10 + 88);
            *(_QWORD *)(v10 + 88) = v736;
            v739 = *(_QWORD *)(v732 + 8);
            v738 = (uint64_t *)(v732 + 8);
            *(_QWORD *)v736 = v739;
            *(_QWORD *)(v736 + 8) = v738;
            *v738 = v736;
            *(_QWORD *)(v739 + 8) = v736;
            *((_WORD *)v738 - 2) = 257;
            if (++v730 != (uint64_t *)v731)
              continue;
            break;
          }
          v749 = v96[19];
LABEL_741:
          v750 = (uint64_t *)v96[18];
          v751 = *((_QWORD *)v749 + 2);
          v752 = WTF::fastMalloc((WTF *)0x20);
          v96 = &v2191;
          v753 = v752;
          v754 = *v750;
          *(_QWORD *)v752 = 0;
          *(_QWORD *)(v752 + 8) = 0;
          *(_BYTE *)(v752 + 16) = 10;
          *(_DWORD *)(v752 + 17) = v754;
          *(_BYTE *)(v752 + 21) = BYTE4(v754);
          *(_QWORD *)(v752 + 24) = v751;
          v755 = *(uint64_t **)(v10 + 72);
          v756 = v755[1];
          ++v755;
          *(_QWORD *)v752 = v756;
          *(_QWORD *)(v752 + 8) = v755;
          *v755 = v752;
          *(_QWORD *)(v756 + 8) = v752;
          *((_WORD *)v755 - 2) = 257;
          while (1)
          {
            v757 = *(char *)(*((_QWORD *)v749 + 2) + 122);
            if (v757 <= 0x1EuLL)
              break;
LABEL_779:
            __break(1u);
LABEL_780:
            v749 = v96[19];
            if (*(_QWORD *)(v10 + 88))
              goto LABEL_741;
            v753 = 0;
          }
          v758 = (uint64_t)v96[20];
          v759 = *(_QWORD *)(*(_QWORD *)(v758 + 90448) + 8 * v757 + 272);
          if (v759)
          {
            ++*(_DWORD *)v759;
          }
          else
          {
            v1556 = WTF::fastMalloc((WTF *)0x60);
            *(_DWORD *)v1556 = 1;
            *(_QWORD *)(v1556 + 4) = 0;
            *(_QWORD *)(v1556 + 20) = 0;
            *(_QWORD *)(v1556 + 12) = 0;
            *(_DWORD *)(v1556 + 28) = -1;
            *(_QWORD *)(v1556 + 32) = 0;
            *(_QWORD *)(v1556 + 40) = 0;
            *(_DWORD *)(v1556 + 48) = 0;
            *(_OWORD *)(v1556 + 64) = 0u;
            *(_OWORD *)(v1556 + 80) = 0u;
            if (v757 >= 0x1F)
            {
              __break(0xC471u);
              JUMPOUT(0x1981D8C50);
            }
            v759 = v1556;
            JSC::JITThunks::ctiStub(*(_QWORD *)(v758 + 90440), v758, (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3581480[v757], v1557, v1558, v1559, v1560, v1561, &v2206);
            v1570 = (uint64_t *)v2206;
            *(_QWORD *)(v759 + 8) = v2206;
            *(_QWORD *)(v759 + 16) = (char *)v1570 + 4;
            v1571 = (unsigned int *)v2207;
            v2207 = 0;
            if (v1571)
            {
              do
              {
                v1572 = __ldaxr(v1571);
                v1573 = v1572 - 1;
              }
              while (__stlxr(v1573, v1571));
              if (!v1573)
              {
                atomic_store(1u, v1571);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1571, (uint64_t)v1562, v1563, v1564, v1565, v1566, v1567, v1568);
                WTF::fastFree(v2097, v2098, v2099, v2100, v2101, v2102, v2103, v2104);
              }
            }
            v1574 = *(_QWORD *)(v758 + 90448);
            ++*(_DWORD *)v759;
            v1575 = v1574 + 8 * v757;
            v1576 = *(JSC::InlineCacheHandler **)(v1575 + 272);
            *(_QWORD *)(v1575 + 272) = v759;
            if (v1576)
            {
              if (*(_DWORD *)v1576 == 1)
              {
                JSC::InlineCacheHandler::~InlineCacheHandler(v1576, v1562, v1563, v1564, v1565, v1566, v1567, v1568, v1569);
                WTF::fastFree(v1723, v1724, v1725, v1726, v1727, v1728, v1729, v1730);
              }
              else
              {
                --*(_DWORD *)v1576;
              }
            }
            v96 = &v2191;
          }
          v2136 = *(_QWORD *)v96[18];
          v2140 = (uint64_t *)*((_QWORD *)v749 + 2);
          v760 = v96[21];
          v761 = v760[4];
          v762 = v761 >= 0xA;
          v763 = v761 - 10;
          if (v762)
          {
            v765 = 0;
            v764 = 1;
            switch(v763)
            {
              case 0u:
              case 1u:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x17u:
              case 0x33u:
              case 0x65u:
                break;
              default:
                goto LABEL_746;
            }
          }
          else
          {
LABEL_746:
            v764 = 0;
            v765 = 1;
          }
          v766 = v764;
          v767 = (16 * v764) | ((unint64_t)v764 << 6);
          v768 = WTF::fastMalloc((WTF *)(v767 + 96));
          v769 = (_QWORD *)v768;
          *(_DWORD *)v768 = 1;
          *(_DWORD *)(v768 + 4) = v764;
          v770 = v768 + 96;
          v3 = v2166;
          if ((v765 & 1) == 0)
          {
            v953 = v768 + 96;
            do
            {
              *(_QWORD *)v953 = 0;
              *(_QWORD *)(v953 + 8) = 0;
              *(_BYTE *)(v953 + 16) = 0;
              *(_WORD *)(v953 + 17) &= 0xF000u;
              *(_OWORD *)(v953 + 19) = 0uLL;
              *(_OWORD *)(v953 + 35) = 0uLL;
              *(_OWORD *)(v953 + 51) = 0uLL;
              *(_QWORD *)(v953 + 64) = 0;
              *(_QWORD *)(v953 + 72) = 2;
              v953 += 80;
            }
            while (v953 != v770 + v767);
            v766 = *(unsigned int *)(v768 + 4);
            v764 = *(_DWORD *)(v768 + 4);
          }
          v771 = *(uint64_t **)v10;
          *(_QWORD *)(v768 + 32) = 0;
          v772 = (unint64_t *)(v768 + 32);
          *(_QWORD *)(v768 + 8) = v771;
          *(_QWORD *)(v768 + 16) = (char *)v771 + 4;
          v773 = (uint8x8_t)0xFFFFFFFF00000000;
          *(_QWORD *)(v768 + 24) = 0xFFFFFFFF00000000;
          *(_QWORD *)(v768 + 40) = 0;
          *(_DWORD *)(v768 + 48) = 0;
          *(_QWORD *)(v768 + 64) = v10;
          *(_QWORD *)(v768 + 72) = 0;
          *(_QWORD *)(v768 + 80) = v753;
          *(_QWORD *)(v768 + 88) = v759;
          v774 = v2140;
          if (v764)
          {
            v948 = *(JSC::VM **)(v2136 + 72);
            v949 = 80 * v766;
            do
            {
              v950 = *v774;
              if ((*v774 & 1) != 0)
              {
                v1843 = v770;
                v2127 = v769;
                v2131 = *(_QWORD *)(v950 & 0xFFFFFFFF8);
                if ((v950 & 2) != 0
                  || ((v1844 = *(unsigned int *)((v950 & 0xFFFFFFFF8) + 8), (_DWORD)v1844 != -1)
                    ? (v1845 = (_DWORD)v1844 == 0x3FFFFFFF)
                    : (v1845 = 1),
                      v1845))
                {
                  v1846 = 2;
                }
                else if (v1844 >> 28)
                {
                  v2105 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v2105 = v2131;
                  *(_DWORD *)(v2105 + 8) = v1844;
                  v1846 = 1;
                  v2131 = v2105;
                }
                else
                {
                  v1846 = v2131;
                  v2131 = v1844 << 36;
                }
                v769 = v2127;
                v950 = v2131 | v1846;
                v3 = v2166;
                v774 = v2140;
                v770 = v1843;
              }
              *(_QWORD *)(v770 + 64) = v2136;
              *(_WORD *)(v770 + 17) &= ~0x100u;
              v951 = *(_QWORD *)(v770 + 72);
              if ((v951 & 1) != 0 && (v951 & 0xFFFFFFFF8) != 0)
              {
                v1847 = v769;
                v2132 = v770;
                WTF::fastFree(v951 & 0xFFFFFFFF8, v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                v770 = v2132;
                v774 = v2140;
                v769 = v1847;
                v3 = v2166;
              }
              v952 = v950;
              if ((v950 & 1) != 0)
              {
                v2128 = v769;
                v2133 = v770;
                v2126 = *(_QWORD *)(v950 & 0xFFFFFFFF8);
                if ((v950 & 2) != 0
                  || ((v1848 = *(_DWORD *)((v950 & 0xFFFFFFFF8) + 8), v1848 != -1)
                    ? (v1849 = v1848 == 0x3FFFFFFF)
                    : (v1849 = 1),
                      v1849))
                {
                  v1850 = 2;
                }
                else
                {
                  v1959 = *(unsigned int *)((v950 & 0xFFFFFFFF8) + 8);
                  if (v1848 >> 28)
                  {
                    v2106 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v2106 = v2126;
                    *(_DWORD *)(v2106 + 8) = v1959;
                    v1850 = 1;
                    v2126 = v2106;
                  }
                  else
                  {
                    v1850 = *(_QWORD *)(v950 & 0xFFFFFFFF8);
                    v2126 = v1959 << 36;
                  }
                }
                v769 = v2128;
                v952 = v2126 | v1850;
                v3 = v2166;
                v774 = v2140;
                v770 = v2133;
              }
              *(_QWORD *)(v770 + 72) = v952;
              *(_WORD *)(v770 + 17) = *(_WORD *)(v770 + 17) & 0xF10F | 0x10;
              if (!(_BYTE)qword_1ECF4C789)
              {
                v1851 = v769;
                v2134 = v770;
                JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)v770, v948, v4, (uint64_t)v5, v6, v7, v8, v9, v773);
                v770 = v2134;
                v774 = v2140;
                v769 = v1851;
                v3 = v2166;
              }
              if ((v950 & 1) != 0)
              {
                v1852 = v950 & 0xFFFFFFFF8;
                if ((v950 & 0xFFFFFFFF8) != 0)
                {
                  v1853 = v769;
                  v1854 = v770;
                  WTF::fastFree(v1852, v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                  v770 = v1854;
                  v774 = v2140;
                  v769 = v1853;
                  v3 = v2166;
                }
              }
              v770 += 80;
              v949 -= 80;
            }
            while (v949);
          }
          v775 = v760[4];
          v13 = v2145;
          if (v775 <= 0x20 && ((1 << v775) & 0x100000014) != 0)
          {
            v776 = *(_QWORD *)(16 * (*((_DWORD *)v760 + 3) & 0xFFFFFFFE) + 0x40);
            v10 = v2154;
            if (v776)
            {
              if (*(_BYTE *)(v776 + 5) == 1)
              {
                v776 >>= 4;
              }
              else
              {
                LODWORD(v776) = *(_DWORD *)(v776 + 80);
                if ((_DWORD)v776)
LABEL_752:
                  LODWORD(v776) = v776 & 0xFFFFFFFE;
              }
            }
          }
          else
          {
            LODWORD(v776) = *((_DWORD *)v760 + 3);
            v10 = v2154;
            if ((_DWORD)v776)
              goto LABEL_752;
          }
          *((_DWORD *)v769 + 6) = v776;
          *((_DWORD *)v769 + 7) = *((_DWORD *)v760 + 2);
          v777 = v774[2];
          if (v777)
          {
            if ((v777 & 1) != 0)
              v778 = v777 & 0xFFFFFFFFFFFFFFFELL;
            else
              v778 = *(_QWORD *)(v777 + 8);
            *v772 = v778;
            if (v778)
              goto LABEL_757;
          }
          else
          {
            *v772 = 0;
          }
          v1159 = *((_QWORD *)v760 + 4);
          if (v1159)
          {
            if ((v1159 & 1) != 0)
              v1159 &= ~1uLL;
            else
              v1159 = *(_QWORD *)(v1159 + 8);
          }
          *v772 = v1159;
LABEL_757:
          v12 = v2147;
          switch(v775)
          {
            case 0u:
            case 9u:
            case 0xAu:
            case 0xBu:
              v769[5] = 0;
              v779 = v769;
              v780 = JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v760);
              v769 = v779;
              v3 = v2166;
              if (v780)
                v779[5] = v780;
              goto LABEL_760;
            case 2u:
              *((_DWORD *)v769 + 10) = *((_DWORD *)v760 + 3);
              v789 = *((_DWORD *)v760 + 3);
              v790 = 16 * (v789 & 0xFFFFFFFE);
              if (!v789)
                v790 = 0;
              v791 = *(unsigned __int16 *)(v790 + 24);
              if (v791 == 65534)
                goto LABEL_789;
              if (v791 == 0xFFFF)
                v791 = *(_DWORD *)(*(_QWORD *)(v790 + 64) + 84);
              if (v791 <= 63)
              {
LABEL_789:
                v792 = 0;
              }
              else if ((v791 - 63) >= 5)
              {
                v1052 = (v791 - 64) | ((v791 - 64) >> 1) | (((v791 - 64) | ((v791 - 64) >> 1)) >> 2);
                v1053 = v1052 | (v1052 >> 4) | ((v1052 | (v1052 >> 4)) >> 8);
                v792 = 8 * (v1053 | HIWORD(v1053)) + 8;
              }
              else
              {
                v792 = 32;
              }
              *((_DWORD *)v769 + 11) = v792;
              v793 = v760[4];
              if (v793 > 0x20 || ((1 << v793) & 0x100000014) == 0)
              {
                v794 = *((_DWORD *)v760 + 3);
                goto LABEL_793;
              }
              v795 = *(_QWORD *)(16 * (*((_DWORD *)v760 + 3) & 0xFFFFFFFE) + 0x40);
              if (v795 && *(_BYTE *)(v795 + 5) != 1)
              {
                v794 = *(_DWORD *)(v795 + 80);
LABEL_793:
                if (v794)
                  v795 = 16 * (v794 & 0xFFFFFFFE);
                else
                  v795 = 0;
              }
              v796 = *(unsigned __int16 *)(v795 + 24);
              if (v796 == 65534)
                goto LABEL_800;
              if (v796 == 0xFFFF)
                v796 = *(_DWORD *)(*(_QWORD *)(v795 + 64) + 84);
              if (v796 <= 63)
              {
LABEL_800:
                v797 = 0;
              }
              else if ((v796 - 63) >= 5)
              {
                v1054 = (v796 - 64) | ((v796 - 64) >> 1) | (((v796 - 64) | ((v796 - 64) >> 1)) >> 2);
                v1055 = v1054 | (v1054 >> 4) | ((v1054 | (v1054 >> 4)) >> 8);
                v797 = 8 * (v1055 | HIWORD(v1055)) + 8;
              }
              else
              {
                v797 = 32;
              }
              *((_DWORD *)v769 + 12) = v797;
              do
LABEL_760:
                v781 = __ldaxr((unsigned int *)v760);
              while (__stlxr(v781 + 1, (unsigned int *)v760));
              v782 = (unsigned int *)v769[9];
              v769[9] = v760;
              if (v782)
              {
                do
                {
                  v783 = __ldaxr(v782);
                  v784 = v783 - 1;
                }
                while (__stlxr(v784, v782));
                if (!v784)
                {
                  atomic_store(1u, v782);
                  v1577 = v769;
                  JSC::AccessCase::operator delete((unint64_t)v782, v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                  v769 = v1577;
                  v3 = v2166;
                }
              }
              v785 = *(unsigned __int8 *)(v2202 + 4);
              v786 = 5;
              v787 = v785 > 0x3E || ((1 << v785) & 0x400000044008000ALL) == 0;
              if (v787 && v785 != 112)
              {
                if (*(_DWORD *)(v2203 + 12) < dword_1ECF4C42C)
                  v786 = 3;
                else
                  v786 = 4;
              }
              *(_DWORD *)v2147 = v786;
              *(_QWORD *)(v2147 + 16) = 0;
              *(_QWORD *)(v2147 + 24) = 0;
              *(_QWORD *)(v2147 + 8) = v769;
              if (v14)
              {
                do
                  v788 = __ldaxr(v14);
                while (__stlxr(v788 - 1, v14));
LABEL_776:
                if (v788 == 1)
                {
                  atomic_store(1u, v14);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
                  WTF::fastFree(v1548, v1549, v1550, v1551, v1552, v1553, v1554, v1555);
                  v3 = v2166;
                }
              }
              LODWORD(v17) = 0;
              v14 = v2157;
              break;
            case 4u:
            case 0x20u:
              *((_DWORD *)v769 + 10) = *((_DWORD *)v760 + 3);
              goto LABEL_760;
            case 0xCu:
            case 0xDu:
            case 0xEu:
            case 0xFu:
              v769[5] = 0;
              v798 = v760[4];
              if (v798 <= 0x20 && ((1 << v798) & 0x100000014) != 0)
              {
                v801 = *(_QWORD *)(16 * (*((_DWORD *)v760 + 3) & 0xFFFFFFFE) + 0x40);
                if (!v801 || *(_BYTE *)(v801 + 5) == 1)
                {
                  v799 = v769;
                  goto LABEL_811;
                }
                v799 = v769;
                v800 = *(_DWORD *)(v801 + 80);
              }
              else
              {
                v799 = v769;
                v800 = *((_DWORD *)v760 + 3);
              }
              if (v800)
                v801 = 16 * (v800 & 0xFFFFFFFE);
              else
                v801 = 0;
LABEL_811:
              v802 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v760);
              v769 = v799;
              if (v802)
              {
                v801 = 16 * (*v802 & 0xFFFFFFFE);
                v799[5] = v802;
              }
              v799[6] = *(_QWORD *)(v801 + 40);
              v799[7] = *((_QWORD *)v760 + 7);
              v3 = v2166;
              goto LABEL_760;
            case 0x18u:
              v769[5] = *((_QWORD *)v760 + 5);
              v769[6] = *((_QWORD *)v760 + 6) + 8 * *((unsigned int *)v760 + 14) + 32;
              goto LABEL_760;
            case 0x1Au:
              v1090 = *((_QWORD *)v760 + 4);
              goto LABEL_1133;
            case 0x1Cu:
            case 0x1Du:
              v1090 = *((_QWORD *)v760 + 5);
LABEL_1133:
              v769[5] = v1090;
              goto LABEL_760;
            default:
              goto LABEL_760;
          }
LABEL_127:
          v118 = v2210;
          if (v2150 != (JSC::CodeBlock **)v2210 && (_QWORD)v2210 != 0)
          {
            *(_QWORD *)&v2210 = 0;
            DWORD2(v2210) = 0;
            WTF::fastFree(v118, v3, v4, (uint64_t)v5, v6, v7, v8, v9);
            v3 = v2166;
          }
          v120 = v2221;
          if (v2152 != v2221 && v2221 != 0)
          {
            v2221 = 0;
            LODWORD(v2222) = 0;
            WTF::fastFree((unint64_t)v120, v3, v4, (uint64_t)v5, v6, v7, v8, v9);
            v3 = v2166;
          }
          if ((_DWORD)v17)
          {
LABEL_138:
            v2157 = v14;
            v2147 = v12;
            v122 = v3[2];
            v123 = *(unsigned __int8 *)(v122 + 129);
            v2153 = (v123 >> 6) & 1;
            v2151 = (v123 >> 5) & 1;
            v124 = (v123 >> 3) & 1;
            v125 = *(unsigned __int8 *)(v122 + 122);
            do
              v126 = __ldaxr((unsigned int *)v11);
            while (__stlxr(v126 + 1, (unsigned int *)v11));
            v127 = JSC::AccessCase::hash((JSC::AccessCase *)v11);
            v136 = v2164[1];
            v137 = *v136;
            if (!*v136)
              goto LABEL_171;
            v138 = v127;
            v2145 = v13;
            v2154 = v10;
            v139 = 0;
            v140 = *(_DWORD *)(v137 - 8);
            v141 = v123 >> 7;
            v142 = v127;
            v143 = (v123 >> 6) & 1;
            v144 = (v123 >> 5) & 1;
            while (2)
            {
              v145 = v142 & v140;
              v146 = v137 + 16 * v145;
              v147 = *(_QWORD *)v146;
              if (*(_QWORD *)v146)
              {
                if (v147 != 1)
                  goto LABEL_144;
              }
              else
              {
                v148 = v137 + 16 * v145;
                v135.i32[0] = *(_DWORD *)(v148 + 8);
                v135 = (uint8x8_t)vmovn_s16((int16x8_t)vmovl_u8(v135));
                if (!v135.i32[0] && !*(_BYTE *)(v148 + 12))
                {
                  v161 = *v136;
                  v10 = v2154;
                  v13 = v2145;
                  if (*v136)
                  {
                    v162 = *(unsigned int *)(v161 - 4);
                    v146 = v161 + 16 * v162;
LABEL_170:
                    if (v146 != v161 + 16 * v162)
                      goto LABEL_1948;
                  }
                  goto LABEL_171;
                }
LABEL_144:
                v149 = *(_DWORD *)(v146 + 8);
                if ((_DWORD)v125 == v149
                  && v143 == BYTE1(v149)
                  && v144 == BYTE2(v149)
                  && v141 == HIBYTE(v149)
                  && (_DWORD)v124 == *(unsigned __int8 *)(v146 + 12))
                {
                  if (v147)
                  {
                    v154 = *(_DWORD *)(v147 + 20);
                    if (!v154)
                    {
                      v259 = *(JSC::AccessCase ***)(v147 + 56);
                      v2135 = v136;
                      v2130 = v138;
                      if (v259)
                      {
                        v261 = *(_DWORD *)v259++;
                        v260 = v261;
                      }
                      else
                      {
                        v260 = 0;
                      }
                      v154 = JSC::PolymorphicAccessJITStubRoutine::computeHash(v259, v260);
                      *(_DWORD *)(v147 + 20) = v154;
                      v143 = v2153;
                      v144 = v2151;
                      v136 = v2135;
                      v138 = v2130;
                    }
                  }
                  else
                  {
                    v154 = 1;
                  }
                  if (v154 == (_DWORD)v138)
                  {
                    v155 = *(_QWORD *)(v147 + 56);
                    if (v155)
                    {
                      if (*(_DWORD *)v155 == 1)
                      {
                        v156 = v136;
                        v2138 = v141;
                        v157 = v125;
                        v158 = v124;
                        v159 = v138;
                        canBeShared = JSC::AccessCase::canBeShared(*(JSC::AccessCase **)(v155 + 8), (const JSC::AccessCase *)v11, v129);
                        v138 = v159;
                        v124 = v158;
                        v125 = v157;
                        v141 = v2138;
                        v136 = v156;
                        v144 = v2151;
                        v143 = v2153;
                        if (canBeShared)
                        {
                          v161 = *v156;
                          if (*v156)
                          {
                            v162 = *(unsigned int *)(v161 - 4);
                            v10 = v2154;
                            v13 = v2145;
                            goto LABEL_170;
                          }
                          v10 = v2154;
                          v13 = v2145;
LABEL_1948:
                          v2107 = *(_QWORD *)v146;
                          if (*(_QWORD *)v146)
                          {
                            ++*(_DWORD *)(v2107 + 16);
                            v2108 = *(_QWORD *)(v2107 + 72);
                            if (v2108 && *(_BYTE *)(v2108 + 4) != 2 && (*(_BYTE *)(v2107 + 40) & 4) == 0)
                            {
                              v2221 = (uint64_t *)v2107;
                              doesJSCalls = JSC::doesJSCalls(*(unsigned __int8 *)(v11 + 4));
                              JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_3::operator()(v2147, (uint64_t)v2200, (JSC::JITStubRoutine **)&v2221, doesJSCalls);
                              v2118 = *(_DWORD *)(v2107 + 16) - 1;
                              *(_DWORD *)(v2107 + 16) = v2118;
                              if (!v2118)
                                JSC::JITStubRoutine::observeZeroRefCount((JSC::JITStubRoutine *)v2107, v2110, v2111, v2112, v2113, v2114, v2115, v2116, v2117);
                              do
                              {
                                v2119 = __ldaxr((unsigned int *)v11);
                                v2120 = v2119 - 1;
                              }
                              while (__stlxr(v2120, (unsigned int *)v11));
                              if (!v2120)
                              {
                                atomic_store(1u, (unsigned int *)v11);
                                JSC::AccessCase::operator delete(v11, v2110, v2111, v2112, v2113, v2114, v2115, v2116);
                              }
                              return;
                            }
                            JSC::SharedJITStubSet::remove(v2164[1], v2107, v135);
                            v2122 = *(_DWORD *)(v2107 + 16) - 1;
                            *(_DWORD *)(v2107 + 16) = v2122;
                            if (!v2122)
                              JSC::JITStubRoutine::observeZeroRefCount((JSC::JITStubRoutine *)v2107, v128, (uint64_t)v129, v130, v131, v132, v133, v134, v2121);
                          }
                          do
LABEL_171:
                            v163 = __ldaxr((unsigned int *)v11);
                          while (__stlxr(v163 - 1, (unsigned int *)v11));
                          v59 = v163 == 1;
                          v164 = v2166;
                          v14 = v2157;
                          v2139 = 1;
                          if (v59)
                          {
                            atomic_store(1u, (unsigned int *)v11);
                            JSC::AccessCase::operator delete(v11, v128, (uint64_t)v129, v130, v131, v132, v133, v134);
                            v164 = v2166;
                          }
                          v70 = 0;
                          v2125 = 0;
                          LODWORD(v2152) = 0;
                          LODWORD(v2150) = 0;
                          v2124 = 0;
                          v12 = v2147;
LABEL_175:
                          v165 = v164;
                          JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)&v2196, v164[2], 0xFFu);
                          v165[5] = (uint64_t)&v2196;
                          *((_BYTE *)v165 + 176) = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v2196);
                          if (JSC::needsScratchFPR(*(unsigned __int8 *)(v11 + 4)))
                          {
                            for (i = 0; i != 23; ++i)
                            {
                              v250 = JSC::FPRInfo::toRegister::registerForIndex[i];
                              v251 = (v250 + 32) & 0x7F;
                              if (v251 > 0x3F)
                                goto LABEL_779;
                              v252 = 1 << v251;
                              if ((v2198 & v252) == 0)
                              {
                                v96 = (_BYTE **)(v2196 | v2197);
                                if ((((unint64_t)v2196 | v2197) & v252) == 0)
                                {
                                  v2197 |= 1 << (v250 + 32);
                                  goto LABEL_1089;
                                }
                              }
                            }
                            v253 = 0;
                            while (1)
                            {
                              v250 = JSC::FPRInfo::toRegister::registerForIndex[v253];
                              v254 = (v250 + 32) & 0x7F;
                              if (v254 > 0x3F)
                                goto LABEL_779;
                              v255 = 1 << v254;
                              v96 = (_BYTE **)(v255 & v2198);
                              if (!(v255 & v2198 | v2197 & v255))
                                break;
                              if (++v253 == 23)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1981D1A2CLL);
                              }
                            }
                            v2197 |= 1 << (v250 + 32);
                            ++v2199;
LABEL_1089:
                            *((_BYTE *)v2166 + 177) = v250;
                          }
                          v2129 = v70;
                          v2194 = 0;
                          v2195 = 0;
                          doesCalls = JSC::AccessCase::doesCalls(v11);
                          if (doesCalls)
                            JSC::AccessCase::collectDependentCells((_QWORD *)v11, v13, (uint64_t)&v2194);
                          v2146 = v13;
                          JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)&v2221, v2205);
                          v2166[4] = (uint64_t)&v2221;
                          v173 = v2230;
                          if (v2230 + 4 > v2229)
                          {
                            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, v166, v167, v168, v169, v170, v171, v172);
                            v173 = v2230;
                          }
                          *(_DWORD *)(v2228[0] + v173) = -1447068675;
                          v2230 += 4;
                          v2166[21] = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(&v2196, (JSC::ScratchRegisterAllocator *)&v2221, 1, v168, v169, v170, v171, v172);
                          v2191 = v2193;
                          v2192 = 2;
                          v174 = *(unsigned __int8 *)(v2166[2] + 122);
                          v175 = (uint64_t)v2166;
                          v2155 = v10;
                          v2158 = v14;
                          if (v174 < 4
                            || ((v262 = v174 > 0x1C, v263 = (1 << v174) & 0x118683C0, !v262)
                              ? (v264 = v263 == 0)
                              : (v264 = 1),
                                !v264))
                          {
LABEL_181:
                            JSC::InlineCacheCompiler::generateWithGuard(v175, 0, (JSC::AccessCase *)v11, (uint64_t)&v2191);
                            v183 = v2166;
                            v184 = HIDWORD(v2192);
                            if (HIDWORD(v2192))
                            {
                              v185 = v2191;
                              v186 = *((unsigned int *)v2166 + 24);
                              v187 = *((unsigned int *)v2166 + 25);
                              v188 = v187 + HIDWORD(v2192);
                              if (v188 > v186)
                              {
                                v189 = v186 + (v186 >> 2);
                                if (v189 >= 0x10)
                                  v190 = v189 + 1;
                                else
                                  v190 = 16;
                                if (v190 <= v188)
                                  v190 = v187 + HIDWORD(v2192);
                                v191 = v2166[11];
                                if (v190 < 3)
                                {
                                  v193 = (uint64_t)(v2166 + 13);
                                  v2166[11] = (uint64_t)(v2166 + 13);
                                  *((_DWORD *)v2166 + 24) = 2;
                                }
                                else
                                {
                                  if (v190 >= 0x15555556)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1981D8D60);
                                  }
                                  v192 = 12 * v190;
                                  v193 = WTF::fastMalloc((WTF *)(12 * v190));
                                  v183 = v2166;
                                  *((_DWORD *)v2166 + 24) = (v192 & 0xFFFFFFFC) / 0xC;
                                  v2166[11] = v193;
                                }
                                if ((_DWORD)v187)
                                {
                                  v358 = v191;
                                  do
                                  {
                                    *(_DWORD *)v193 = *(_DWORD *)v358;
                                    *(_QWORD *)(v193 + 4) = *(_QWORD *)(v358 + 4);
                                    v358 += 12;
                                    v193 += 12;
                                  }
                                  while (v358 != v191 + 12 * v187);
                                }
                                if (v183 + 13 != (uint64_t *)v191 && v191)
                                {
                                  if (v183[11] == v191)
                                  {
                                    v183[11] = 0;
                                    *((_DWORD *)v183 + 24) = 0;
                                  }
                                  WTF::fastFree(v191, v176, v177, v178, v179, v180, v181, v182);
                                  v183 = v2166;
                                }
                              }
                              v359 = *((unsigned int *)v183 + 25);
                              if (v188 < v359)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1981D8C30);
                              }
                              v360 = v183[11] + 12 * v359;
                              v361 = &v185[12 * v184];
                              do
                              {
                                *(_DWORD *)v360 = *(_DWORD *)v185;
                                *(_QWORD *)(v360 + 4) = *(_QWORD *)(v185 + 4);
                                v185 += 12;
                                v360 += 12;
                              }
                              while (v185 != v361);
                              *((_DWORD *)v183 + 25) = v188;
                            }
                            v2148 = v12;
                            v362 = *((unsigned int *)v183 + 35);
                            if ((_DWORD)v362)
                            {
                              for (j = 0; j != v362; ++j)
                              {
                                if (j >= *((unsigned int *)v183 + 35))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1981D8B94);
                                }
                                v364 = v183[16];
                                v365 = (unsigned int *)(v364 + 12 * j);
                                v2231 = 0;
                                v367 = (unsigned __int8 *)(v365 + 2);
                                v366 = *((unsigned __int8 *)v365 + 8);
                                switch(*((_BYTE *)v365 + 8))
                                {
                                  case 0x83:
                                  case 0x87:
                                    v368 = *v365;
                                    v369 = v2230;
                                    if (v2230 < v2227)
                                    {
                                      do
                                      {
                                        if (v369 + 4 > v2229)
                                        {
                                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                                          v183 = v2166;
                                          v369 = v2230;
                                        }
                                        *(_DWORD *)(v2228[0] + v369) = -721215457;
                                        v369 = v2230 + 4;
                                        v2230 = v369;
                                      }
                                      while ((int)v369 < v2227);
                                      v366 = *v367;
                                    }
                                    v370 = (_BYTE *)(v364 + 12 * j);
                                    v371 = v370[9];
                                    v372 = v370[10];
                                    v373 = v370[11];
                                    *(_QWORD *)&v2210 = v368;
                                    *((_QWORD *)&v2210 + 1) = v369;
                                    BYTE3(v2211) = v371 & 0xF;
                                    *(_WORD *)((char *)&v2211 + 1) = v366;
                                    v374 = v372 << 6;
                                    goto LABEL_405;
                                  case 0x84:
                                  case 0x88:
                                    v375 = *v365;
                                    v376 = v2230;
                                    if (v2230 < v2227)
                                    {
                                      do
                                      {
                                        if (v376 + 4 > v2229)
                                        {
                                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                                          v183 = v2166;
                                          v376 = v2230;
                                        }
                                        *(_DWORD *)(v2228[0] + v376) = -721215457;
                                        v376 = v2230 + 4;
                                        v2230 = v376;
                                      }
                                      while ((int)v376 < v2227);
                                      v366 = *v367;
                                    }
                                    v377 = v364 + 12 * j;
                                    v378 = *(_BYTE *)(v377 + 9);
                                    v379 = *(_WORD *)(v377 + 4);
                                    v373 = *(_BYTE *)(v377 + 11);
                                    *(_QWORD *)&v2210 = v375;
                                    *((_QWORD *)&v2210 + 1) = v376;
                                    BYTE3(v2211) = v378 & 0xF;
                                    *(_WORD *)((char *)&v2211 + 1) = v366;
                                    v374 = v379 & 0x3F;
LABEL_405:
                                    WORD2(v2211) = v374;
                                    LOBYTE(v2211) = v373;
                                    break;
                                  default:
                                    v383 = *v365;
                                    v384 = v2230;
                                    if (v2230 < v2227)
                                    {
                                      do
                                      {
                                        if (v384 + 4 > v2229)
                                        {
                                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                                          v183 = v2166;
                                          v384 = v2230;
                                        }
                                        *(_DWORD *)(v2228[0] + v384) = -721215457;
                                        v384 = v2230 + 4;
                                        v2230 = v384;
                                      }
                                      while ((int)v384 < v2227);
                                      v366 = *v367;
                                    }
                                    v385 = *(_BYTE *)(v364 + 12 * j + 9);
                                    LOBYTE(v2211) = -1;
                                    *(_QWORD *)&v2210 = v383;
                                    *((_QWORD *)&v2210 + 1) = v384;
                                    BYTE3(v2211) = v385 & 0xF;
                                    *(_WORD *)((char *)&v2211 + 1) = v366;
                                    WORD2(v2211) = 0;
                                    break;
                                }
                                if (v2226 == v2225)
                                {
                                  v386 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2224, v2226 + 1, (unint64_t)&v2210, v178, v179, v180, v181, v182);
                                  v183 = v2166;
                                  v380 = v2224 + 24 * v2226;
                                  *(_QWORD *)v380 = 0;
                                  *(_QWORD *)(v380 + 8) = 0;
                                  *(_BYTE *)(v380 + 16) = -1;
                                  v387 = (((*(unsigned __int8 *)(v380 + 19) >> 4) & 0xF) << 20) | 0xF0041;
                                  *(_WORD *)(v380 + 17) = 65;
                                  *(_BYTE *)(v380 + 19) = BYTE2(v387);
                                  *(_WORD *)(v380 + 20) &= 0xFC00u;
                                  v381 = *(_OWORD *)v386;
                                  v382 = *(JSC::CodeBlock **)(v386 + 16);
                                }
                                else
                                {
                                  v380 = v2224 + 24 * v2226;
                                  v381 = v2210;
                                  v382 = v2211;
                                }
                                *(_QWORD *)(v380 + 16) = v382;
                                *(_OWORD *)v380 = v381;
                                ++v2226;
                              }
                              if ((_BYTE)word_1ECF4C286)
                              {
                                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)&v2221, "failAndIgnore");
                                v183 = v2166;
                              }
                              JSC::MacroAssemblerARM64::add8((uint64_t)&v2221, *(unsigned __int8 *)(v183[2] + 120) | 0x7C00000000, v177, v178, v179, v180, v181, v182);
                              v183 = v2166;
                            }
                            v388 = *((unsigned int *)v183 + 25);
                            if ((_DWORD)v388)
                            {
                              for (k = 0; k != v388; ++k)
                              {
                                if (k >= *((unsigned int *)v183 + 25))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1981D8B8CLL);
                                }
                                v390 = v183[11];
                                v391 = (unsigned int *)(v390 + 12 * k);
                                v2231 = 0;
                                v393 = (unsigned __int8 *)(v391 + 2);
                                v392 = *((unsigned __int8 *)v391 + 8);
                                switch(*((_BYTE *)v391 + 8))
                                {
                                  case 0x83:
                                  case 0x87:
                                    v394 = *v391;
                                    v395 = v2230;
                                    if (v2230 < v2227)
                                    {
                                      do
                                      {
                                        if (v395 + 4 > v2229)
                                        {
                                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                                          v183 = v2166;
                                          v395 = v2230;
                                        }
                                        *(_DWORD *)(v2228[0] + v395) = -721215457;
                                        v395 = v2230 + 4;
                                        v2230 = v395;
                                      }
                                      while ((int)v395 < v2227);
                                      v392 = *v393;
                                    }
                                    v396 = (_BYTE *)(v390 + 12 * k);
                                    v397 = v396[9];
                                    v398 = v396[10];
                                    v399 = v396[11];
                                    *(_QWORD *)&v2210 = v394;
                                    *((_QWORD *)&v2210 + 1) = v395;
                                    BYTE3(v2211) = v397 & 0xF;
                                    *(_WORD *)((char *)&v2211 + 1) = v392;
                                    v400 = v398 << 6;
                                    goto LABEL_424;
                                  case 0x84:
                                  case 0x88:
                                    v401 = *v391;
                                    v402 = v2230;
                                    if (v2230 < v2227)
                                    {
                                      do
                                      {
                                        if (v402 + 4 > v2229)
                                        {
                                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                                          v183 = v2166;
                                          v402 = v2230;
                                        }
                                        *(_DWORD *)(v2228[0] + v402) = -721215457;
                                        v402 = v2230 + 4;
                                        v2230 = v402;
                                      }
                                      while ((int)v402 < v2227);
                                      v392 = *v393;
                                    }
                                    v403 = v390 + 12 * k;
                                    v404 = *(_BYTE *)(v403 + 9);
                                    v405 = *(_WORD *)(v403 + 4);
                                    v399 = *(_BYTE *)(v403 + 11);
                                    *(_QWORD *)&v2210 = v401;
                                    *((_QWORD *)&v2210 + 1) = v402;
                                    BYTE3(v2211) = v404 & 0xF;
                                    *(_WORD *)((char *)&v2211 + 1) = v392;
                                    v400 = v405 & 0x3F;
LABEL_424:
                                    WORD2(v2211) = v400;
                                    LOBYTE(v2211) = v399;
                                    break;
                                  default:
                                    v409 = *v391;
                                    v410 = v2230;
                                    if (v2230 < v2227)
                                    {
                                      do
                                      {
                                        if (v410 + 4 > v2229)
                                        {
                                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                                          v183 = v2166;
                                          v410 = v2230;
                                        }
                                        *(_DWORD *)(v2228[0] + v410) = -721215457;
                                        v410 = v2230 + 4;
                                        v2230 = v410;
                                      }
                                      while ((int)v410 < v2227);
                                      v392 = *v393;
                                    }
                                    v411 = *(_BYTE *)(v390 + 12 * k + 9);
                                    LOBYTE(v2211) = -1;
                                    *(_QWORD *)&v2210 = v409;
                                    *((_QWORD *)&v2210 + 1) = v410;
                                    BYTE3(v2211) = v411 & 0xF;
                                    *(_WORD *)((char *)&v2211 + 1) = v392;
                                    WORD2(v2211) = 0;
                                    break;
                                }
                                if (v2226 == v2225)
                                {
                                  v412 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2224, v2226 + 1, (unint64_t)&v2210, v178, v179, v180, v181, v182);
                                  v183 = v2166;
                                  v406 = v2224 + 24 * v2226;
                                  *(_QWORD *)v406 = 0;
                                  *(_QWORD *)(v406 + 8) = 0;
                                  *(_BYTE *)(v406 + 16) = -1;
                                  v413 = (((*(unsigned __int8 *)(v406 + 19) >> 4) & 0xF) << 20) | 0xF0041;
                                  *(_WORD *)(v406 + 17) = 65;
                                  *(_BYTE *)(v406 + 19) = BYTE2(v413);
                                  *(_WORD *)(v406 + 20) &= 0xFC00u;
                                  v407 = *(_OWORD *)v412;
                                  v408 = *(JSC::CodeBlock **)(v412 + 16);
                                }
                                else
                                {
                                  v406 = v2224 + 24 * v2226;
                                  v407 = v2210;
                                  v408 = v2211;
                                }
                                *(_QWORD *)(v406 + 16) = v408;
                                *(_OWORD *)v406 = v407;
                                ++v2226;
                              }
                            }
                            if (v2199)
                              JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(v183[5], (const char *)v2166[4], (const char *)v2166 + 168, v178, v179, v180, v181, v182);
                            v414 = v2230;
                            v415 = v2146;
                            if (v2230 + 4 > v2229)
                            {
                              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                              v414 = v2230;
                            }
                            *(_DWORD *)(v2228[0] + v414) = -129662679;
                            v416 = v2230;
                            v417 = v2230 + 4;
                            v2230 += 4;
                            if (!v2232)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1981D6F40);
                            }
                            *(_DWORD *)(v2233 + 208) &= ~v2235;
                            v418 = v2234 & 0x1F | 0xF8410120;
                            v419 = v12;
                            v420 = v2155;
                            if (v416 + 8 > v2229)
                            {
                              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                              v417 = v2230;
                            }
                            *(_DWORD *)(v2228[0] + v417) = v418;
                            v421 = v2230;
                            v422 = v2230 + 4;
                            v2230 += 4;
                            if (v421 + 8 > v2229)
                            {
                              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v2228, (uint64_t)v176, v177, v178, v179, v180, v181, v182);
                              v422 = v2230;
                            }
                            *(_DWORD *)(v2228[0] + v422) = -702610944;
                            v2230 += 4;
                            v2210 = 0uLL;
                            v2211 = v2205;
                            v2212 = v2213;
                            v2214 = 128;
                            v423 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
                            if (v423 != -1)
                            {
                              v2206 = (__int128 *)&v2176;
                              v2170 = (WTF *)&v2206;
                              std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v2170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
                            }
                            v424 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
                            v432 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
                            if (!v432)
                            {
                              v432 = WTF::fastMalloc((WTF *)0x98);
                              WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v432, v424);
                            }
                            v433 = *(_QWORD *)v432;
                            if (*(_QWORD *)v432 != v432 + 8)
                            {
                              v434 = *(_DWORD *)(v432 + 136);
                              if (v2214 < v434)
                              {
                                if (v2212 && v2212 != v2213)
                                {
                                  WTF::fastFree((unint64_t)v2212, v425, v426, v427, v428, v429, v430, v431);
                                  v433 = *(_QWORD *)v432;
                                  v434 = *(_DWORD *)(v432 + 136);
                                }
                                v2212 = (_BYTE *)v433;
                                v2214 = v434;
                                *(_QWORD *)v432 = v432 + 8;
                                *(_DWORD *)(v432 + 136) = 128;
                              }
                            }
                            v2215 = 1;
                            v2216 = 0;
                            v2217 = 6;
                            v2218 = 0u;
                            v2219 = 0u;
                            v2220 = 0;
                            JSC::LinkBuffer::linkCode((uint64_t)&v2210, (uint64_t)&v2221, 0, v427, v428, v429, v430, v431);
                            if (!(_BYTE)v2216)
                            {
                              *(_DWORD *)v12 = 1;
                              *(_QWORD *)(v12 + 16) = 0;
                              *(_QWORD *)(v12 + 24) = 0;
                              *(_QWORD *)(v12 + 8) = 0;
LABEL_530:
                              JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v2210, v435, v436, v437, v438, v439, v440, v441);
                              v571 = (unint64_t)v2191;
                              if (v2193 != v2191 && v2191)
                              {
                                v2191 = 0;
                                LODWORD(v2192) = 0;
                                WTF::fastFree(v571, v564, v565, v566, v567, v568, v569, v570);
                              }
                              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)&v2221, v564, v565, v566, v567, v568, v569, v570);
                              v579 = v2194;
                              if (v2194)
                              {
                                v2194 = 0;
                                LODWORD(v2195) = 0;
                                WTF::fastFree(v579, v572, v573, v574, v575, v576, v577, v578);
                              }
                              return;
                            }
                            v448 = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
                            v449 = 0;
                            *v448 = 1;
                            v450 = (unsigned int **)(v448 + 2);
                            v451 = v2129;
                            do
                            {
                              do
                                v452 = __ldaxr((unsigned int *)v11);
                              while (__stlxr(v452 + 1, (unsigned int *)v11));
                              v450[v449++] = (unsigned int *)v11;
                              v453 = *v448;
                            }
                            while (v449 < v453);
                            if ((_DWORD)v453 != 1)
                            {
                              WTF::VectorTypeOperations<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>::destruct(v450, &v450[v453], v442, v443, v444, v445, v446, v447);
                              WTF::fastFree((unint64_t)v448, v454, v455, v456, v457, v458, v459, v460);
                              v448 = 0;
                            }
                            v461 = v2166;
                            v2178 = v448;
                            v462 = v2205;
                            if (!(!(v2205
                                  && (v463 = *((_QWORD *)v2205 + 15)) != 0
                                  && ((*(_BYTE *)(v463 + 12) & 0xFE) == 4
                                    ? (v464 = BYTE1(dword_1ECF4C28A) == 0)
                                    : (v464 = 1),
                                      !v464)
                                  || HIBYTE(word_1ECF4C286) != 0)
                                && byte_1ECF4C288 == 0
                                && byte_1ECF4C289 == 0))
                            {
                              if (v2205)
                              {
                                v1408 = *((_QWORD *)v2205 + 15);
                                v1409 = HIBYTE(word_1ECF4C286);
                                if (v1408)
                                {
                                  v1410 = *(_BYTE *)(v1408 + 12) & 0xFE;
                                  if (BYTE1(dword_1ECF4C28A))
                                    v1411 = v1410 == 4;
                                  else
                                    v1411 = 0;
                                  if (v1411 || HIBYTE(word_1ECF4C286) != 0)
                                  {
LABEL_1545:
                                    v1413 = 1;
                                    goto LABEL_1546;
                                  }
LABEL_1936:
                                  v1413 = byte_1ECF4C288 != 0;
LABEL_1546:
                                  v1414 = v461[2];
                                  v2137 = v1413;
                                  v1415 = "GetById";
                                  v1416 = 8;
                                  switch(*(_BYTE *)(v1414 + 122))
                                  {
                                    case 0:
                                      goto LABEL_1547;
                                    case 1:
                                      v1415 = "GetByIdWithThis";
                                      goto LABEL_1899;
                                    case 2:
                                      v1415 = "GetByIdDirect";
                                      v1416 = 14;
                                      goto LABEL_1547;
                                    case 3:
                                      v1415 = "TryGetById";
                                      v1416 = 11;
                                      goto LABEL_1547;
                                    case 4:
                                      v1415 = "GetByVal";
                                      v1416 = 9;
                                      goto LABEL_1547;
                                    case 5:
                                      v1415 = "GetByValWithThis";
                                      v1416 = 17;
                                      goto LABEL_1547;
                                    case 6:
                                      v1415 = "PutByIdStrict";
                                      v1416 = 14;
                                      goto LABEL_1547;
                                    case 7:
                                      v1415 = "PutByIdSloppy";
                                      v1416 = 14;
                                      goto LABEL_1547;
                                    case 8:
                                      v1415 = "PutByIdDirectStrict";
                                      v1416 = 20;
                                      goto LABEL_1547;
                                    case 9:
                                      v1415 = "PutByIdDirectSloppy";
                                      v1416 = 20;
                                      goto LABEL_1547;
                                    case 0xA:
                                      v1415 = "PutByValStrict";
                                      v1416 = 15;
                                      goto LABEL_1547;
                                    case 0xB:
                                      v1415 = "PutByValSloppy";
                                      v1416 = 15;
                                      goto LABEL_1547;
                                    case 0xC:
                                      v1415 = "PutByValDirectStrict";
                                      v1416 = 21;
                                      goto LABEL_1547;
                                    case 0xD:
                                      v1415 = "PutByValDirectSloppy";
                                      v1416 = 21;
                                      goto LABEL_1547;
                                    case 0xE:
                                      v1415 = "DefinePrivateNameByVal";
                                      v1416 = 23;
                                      goto LABEL_1547;
                                    case 0xF:
                                      v1415 = "DefinePrivateNameById";
                                      v1416 = 22;
                                      goto LABEL_1547;
                                    case 0x10:
                                      v1415 = "SetPrivateNameByVal";
                                      v1416 = 20;
                                      goto LABEL_1547;
                                    case 0x11:
                                      v1415 = "SetPrivateNameById";
                                      v1416 = 19;
                                      goto LABEL_1547;
                                    case 0x12:
                                      v1415 = "InById";
                                      v1416 = 7;
                                      goto LABEL_1547;
                                    case 0x13:
                                      v1415 = "InByVal";
                                      v1416 = 8;
                                      goto LABEL_1547;
                                    case 0x14:
                                      v1415 = "HasPrivateName";
                                      v1416 = 15;
                                      goto LABEL_1547;
                                    case 0x15:
                                      v1415 = "HasPrivateBrand";
                                      goto LABEL_1899;
                                    case 0x16:
                                      v1415 = "InstanceOf";
                                      v1416 = 11;
                                      goto LABEL_1547;
                                    case 0x17:
                                      v1415 = "DeleteByIdStrict";
                                      v1416 = 17;
                                      goto LABEL_1547;
                                    case 0x18:
                                      v1415 = "DeleteByIdSloppy";
                                      v1416 = 17;
                                      goto LABEL_1547;
                                    case 0x19:
                                      v1415 = "DeleteByValStrict";
                                      v1416 = 18;
                                      goto LABEL_1547;
                                    case 0x1A:
                                      v1415 = "DeleteByValSloppy";
                                      v1416 = 18;
                                      goto LABEL_1547;
                                    case 0x1B:
                                      v1415 = "GetPrivateName";
                                      v1416 = 15;
                                      goto LABEL_1547;
                                    case 0x1C:
                                      v1415 = "GetPrivateNameById";
                                      v1416 = 19;
                                      goto LABEL_1547;
                                    case 0x1D:
                                      v1415 = "CheckPrivateBrand";
                                      v1416 = 18;
                                      goto LABEL_1547;
                                    case 0x1E:
                                      v1415 = "SetPrivateBrand";
LABEL_1899:
                                      v1416 = 16;
LABEL_1547:
                                      v2170 = (WTF *)&v2178;
                                      v2171 = ", ";
                                      v2172 = 3;
                                      v2173 = &str_56_1;
                                      v2174 = 1;
                                      v2175 = 0;
                                      v2206 = (__int128 *)off_1E3572250;
                                      v2207 = (uint64_t)v2209;
                                      v2208 = xmmword_199122F80;
                                      v2209[0] = 0;
                                      WTF::PrintStream::printf((WTF::PrintStream *)&v2206, "%s", "Access stub for ");
                                      JSC::CodeBlock::dumpAssumingJITType((uint64_t)v462);
                                      WTF::PrintStream::printf((WTF::PrintStream *)&v2206, "%s", " ");
                                      JSC::CodeOrigin::dump((JSC::CodeOrigin *)v1414, (WTF::PrintStream *)&v2206);
                                      WTF::PrintStream::printf((WTF::PrintStream *)&v2206, "%s", "with start: ");
                                      v1417 = *(const void **)(v1414 + 24);
                                      if (v1417)
                                        v1418 = *(const void **)(v1414 + 24);
                                      else
                                        v1418 = 0;
                                      WTF::CodePtrBase::dumpWithName(v1417, v1418, "CodePtr", 8, (uint64_t)&v2206);
                                      WTF::PrintStream::printf((WTF::PrintStream *)&v2206, "%s", ": ");
                                      WTF::ListDump<WTF::FixedVector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>>::dump((unsigned int ***)&v2170, (uint64_t)&v2206);
                                      (*((void (**)(__int128 **))v2206 + 5))(&v2206);
                                      v1426 = (const void *)v2207;
                                      if (v2207)
                                      {
                                        v1427 = v2208;
                                        if ((unint64_t)v2208 >= 0xFFFFFFFFFFFFFFF0)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x1981D8D88);
                                        }
                                        if ((_QWORD)v2208 == -17)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x1981D8D90);
                                        }
                                        v1428 = WTF::fastMalloc((WTF *)(v2208 + 17));
                                        *(_DWORD *)v1428 = 1;
                                        *(_QWORD *)(v1428 + 8) = v1427;
                                        memcpy((void *)(v1428 + 16), v1426, v1427);
                                        *(_BYTE *)(v1428 + 16 + v1427) = 0;
                                        v1429 = v2207;
                                        v420 = v2155;
                                        v415 = v2146;
                                        if ((_BYTE *)v2207 == v2209)
                                        {
LABEL_1605:
                                          v1490 = v1428 + 16;
                                          if (!v1428)
                                            v1490 = 0;
                                          JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v2210, v2137, v1415, v1416, "%s", (WTF **)&v2206, v1490);
                                          v1491 = (unsigned int *)v2207;
                                          v2176 = (uint64_t *)v2206;
                                          v2177 = 0;
                                          v419 = v2148;
                                          v477 = v2166;
                                          v451 = v2129;
                                          if (v2207)
                                          {
                                            do
                                              v1492 = __ldaxr(v1491);
                                            while (__stlxr(v1492 + 1, v1491));
                                            v1493 = (unsigned int *)v2177;
                                            v2177 = (JSC::ExecutableMemoryHandle *)v1491;
                                            if (v1493)
                                            {
                                              do
                                              {
                                                v1494 = __ldaxr(v1493);
                                                v1495 = v1494 - 1;
                                              }
                                              while (__stlxr(v1495, v1493));
                                              if (!v1495)
                                              {
                                                atomic_store(1u, v1493);
                                                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1493, (uint64_t)v1464, v470, v471, v472, v473, v474, v475);
                                                WTF::fastFree(v2081, v2082, v2083, v2084, v2085, v2086, v2087, v2088);
                                                v477 = v2166;
                                              }
                                            }
                                            v1496 = (unsigned int *)v2207;
                                            v2207 = 0;
                                            if (v1496)
                                            {
                                              do
                                              {
                                                v1497 = __ldaxr(v1496);
                                                v1498 = v1497 - 1;
                                              }
                                              while (__stlxr(v1498, v1496));
                                              if (!v1498)
                                              {
                                                atomic_store(1u, v1496);
                                                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1496, (uint64_t)v1464, v470, v471, v472, v473, v474, v475);
                                                WTF::fastFree(v2089, v2090, v2091, v2092, v2093, v2094, v2095, v2096);
                                                v477 = v2166;
                                              }
                                            }
                                          }
                                          if (!v1428)
                                          {
LABEL_483:
                                            if (!v2139)
                                            {
                                              v536 = WTF::fastMalloc((WTF *)0x60);
                                              v537 = v536;
                                              *(_QWORD *)v536 = v2176;
                                              v538 = (unsigned int *)v2177;
                                              if (v2177)
                                              {
                                                do
                                                  v539 = __ldaxr(v538);
                                                while (__stlxr(v539 + 1, v538));
                                              }
                                              *(_QWORD *)(v536 + 8) = v538;
                                              *(_QWORD *)(v536 + 16) = 1;
                                              *(_BYTE *)(v536 + 24) = 3;
                                              *(_QWORD *)(v536 + 32) = 0;
                                              *(_BYTE *)(v536 + 40) &= 0xC0u;
                                              *(_QWORD *)(v536 + 56) = 0;
                                              *(_QWORD *)(v536 + 64) = 0;
                                              *(_QWORD *)(v536 + 48) = v415;
                                              v540 = WTF::fastMalloc((WTF *)0x18);
                                              *(_DWORD *)v540 = 1;
                                              *(_WORD *)(v540 + 4) = 1;
                                              *(_QWORD *)(v540 + 8) = v540 + 8;
                                              *(_QWORD *)(v540 + 16) = v540 + 8;
                                              *(_QWORD *)(v537 + 72) = v540;
                                              *(_QWORD *)(v537 + 80) = 0;
                                              *(_QWORD *)(v537 + 88) = 0;
                                              v2170 = (WTF *)v537;
                                              JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v537 + 88), (unsigned int *)v540, v2166[33], *((_DWORD *)v2166 + 69), v420);
                                              v541 = v2164[1];
                                              ++*(_DWORD *)(v537 + 16);
                                              v2169 = (JSC::JITStubRoutine *)v537;
                                              WORD2(v2168) = (((unint64_t)v2158 << 40) | (v2124 << 32)) >> 32;
                                              LODWORD(v2168) = ((_DWORD)v2152 << 16) | ((_DWORD)v2150 << 24) | (v2125 << 8) | v451;
                                              WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>(v541 + 1, (unsigned __int8 *)&v2168, (uint64_t *)&v2169, (uint64_t)&v2206);
                                              v550 = v2169;
                                              v2169 = 0;
                                              if (v550)
                                              {
                                                v1201 = *((_DWORD *)v550 + 4) - 1;
                                                *((_DWORD *)v550 + 4) = v1201;
                                                if (!v1201)
                                                  JSC::JITStubRoutine::observeZeroRefCount(v550, v542, v543, v544, v545, v546, v547, v548, v549);
                                              }
                                              JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v419, v2201, (uint64_t **)&v2170);
                                              v552 = v2170;
                                              if (v2170)
                                              {
                                                v1202 = *((_DWORD *)v2170 + 4) - 1;
                                                *((_DWORD *)v2170 + 4) = v1202;
                                                if (!v1202)
                                                  JSC::JITStubRoutine::observeZeroRefCount(v552, v435, v436, v437, v438, v439, v440, v441, v551);
                                              }
                                              goto LABEL_524;
                                            }
                                            WTF::FixedVector<JSC::StructureID>::FixedVector<4ul,WTF::CrashOnOverflow>((unint64_t *)&v2170, (WTF **)v477 + 29, v470, v471, v472, v473, v474, v475);
                                            v2206 = &v2208;
                                            v2207 = 16;
                                            JSC::createICJITStubRoutine(&v2176, (uint64_t *)&v2178, (uint64_t *)&v2170, v415, 0, doesCalls, (uint64_t)&v2194, (uint64_t)&v2206, (uint64_t *)&v2168, 0, -1);
                                            if (HIDWORD(v2207))
                                            {
                                              v933 = (JSC::CallLinkInfo **)v2206;
                                              v934 = 8 * HIDWORD(v2207);
                                              do
                                              {
                                                v935 = *v933;
                                                *v933 = 0;
                                                if (v935)
                                                {
                                                  JSC::CallLinkInfo::~CallLinkInfo(v935, v485, v486, v487, v488, v489, v490, v491, v492);
                                                  WTF::fastFree(v936, v937, v938, v939, v940, v941, v942, v943);
                                                }
                                                ++v933;
                                                v934 -= 8;
                                              }
                                              while (v934);
                                            }
                                            v493 = (uint64_t *)v2206;
                                            if (&v2208 != v2206 && v2206 != 0)
                                            {
                                              v2206 = 0;
                                              LODWORD(v2207) = 0;
                                              WTF::fastFree((unint64_t)v493, v485, v486, v487, v488, v489, v490, v491);
                                            }
                                            v502 = (uint8x8_t)JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)v2168 + 11, (unsigned int *)*((_QWORD *)v2168 + 9), v2166[33], *((_DWORD *)v2166 + 69), v420).n128_u64[0];
                                            v503 = v2164[1];
                                            v504 = v2166[2];
                                            v2167 = *(unsigned __int8 *)(v504 + 122);
                                            v505 = *(unsigned __int8 *)(v504 + 129);
                                            v506 = v2168;
                                            v507 = *v503;
                                            if (*v503
                                              || (WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::expand(v503, v495, v496, v497, v498, v499, v500, v501), (v507 = *v503) != 0))
                                            {
                                              v508 = *(_DWORD *)(v507 - 8);
                                            }
                                            else
                                            {
                                              v508 = 0;
                                            }
                                            if (v506)
                                            {
                                              v509 = *((_DWORD *)v506 + 5);
                                              if (!v509)
                                              {
                                                v628 = (JSC::AccessCase **)*((_QWORD *)v506 + 7);
                                                if (v628)
                                                {
                                                  v630 = *(_DWORD *)v628++;
                                                  v629 = v630;
                                                }
                                                else
                                                {
                                                  v629 = 0;
                                                }
                                                v509 = JSC::PolymorphicAccessJITStubRoutine::computeHash(v628, v629);
                                                *((_DWORD *)v506 + 5) = v509;
                                              }
                                            }
                                            else
                                            {
                                              v509 = 1;
                                            }
                                            v510 = (v505 >> 6) & 1;
                                            v511 = (v505 >> 5) & 1;
                                            v2159 = (v505 >> 3) & 1;
                                            v2165 = v505 >> 7;
                                            v512 = v509 & v508;
                                            v513 = v507 + 16 * v512;
                                            if (!WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::isEmptyBucket(v513, v502))
                                            {
                                              v2156 = v503;
                                              v520 = 0;
                                              v521 = 1;
                                              do
                                              {
                                                v522 = v520;
                                                v520 = (_QWORD *)v513;
                                                if (*(_QWORD *)v513 != 1)
                                                {
                                                  if (*(JSC::JITStubRoutine **)v513 == v506
                                                    && ((v523 = (unsigned __int8 *)(v507 + 16 * v512), v523[8] == v2167)
                                                      ? (v524 = v523[9] == v510)
                                                      : (v524 = 0),
                                                        v524
                                                     && v523[10] == v511
                                                     && (v525 = v507 + 16 * v512,
                                                         *(unsigned __int8 *)(v525 + 11) == v2165)))
                                                  {
                                                    v520 = v522;
                                                    if (*(unsigned __int8 *)(v525 + 12) == v2159)
                                                      goto LABEL_517;
                                                  }
                                                  else
                                                  {
                                                    v520 = v522;
                                                  }
                                                }
                                                v512 = ((_DWORD)v512 + v521) & v508;
                                                v513 = v507 + 16 * v512;
                                                ++v521;
                                              }
                                              while (!WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::isEmptyBucket(v513, v519));
                                              v503 = v2156;
                                              if (v520)
                                              {
                                                *v520 = 0;
                                                v520[1] = 0;
                                                --*(_DWORD *)(*v2156 - 16);
                                                v513 = (uint64_t)v520;
                                              }
                                            }
                                            *(_QWORD *)v513 = v506;
                                            *(_BYTE *)(v513 + 8) = v2167;
                                            *(_BYTE *)(v513 + 9) = v510;
                                            *(_BYTE *)(v513 + 10) = v511;
                                            *(_BYTE *)(v513 + 11) = v2165;
                                            *(_BYTE *)(v513 + 12) = v2159;
                                            v526 = *v503;
                                            if (*v503)
                                              v527 = *(_DWORD *)(v526 - 12) + 1;
                                            else
                                              v527 = 1;
                                            *(_DWORD *)(v526 - 12) = v527;
                                            v528 = *v503;
                                            if (*v503)
                                              v529 = *(_DWORD *)(v528 - 12);
                                            else
                                              v529 = 0;
                                            v530 = (*(_DWORD *)(v528 - 16) + v529);
                                            v531 = *(unsigned int *)(v528 - 4);
                                            if (v531 > 0x400)
                                            {
                                              if (v531 > 2 * v530)
                                                goto LABEL_517;
                                            }
                                            else
                                            {
                                              if (3 * v531 > 4 * v530)
                                                goto LABEL_517;
                                              if (!(_DWORD)v531)
                                              {
                                                v804 = 8;
                                                goto LABEL_1006;
                                              }
                                            }
                                            v804 = ((_DWORD)v531 << (6 * *(_DWORD *)(v528 - 12) >= (2 * v531)));
LABEL_1006:
                                            WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::rehash(v503, v804, v513, v514, v515, v516, v517, v518);
LABEL_517:
                                            *((_BYTE *)v2168 + 40) |= 0x20u;
                                            v532 = JSC::doesJSCalls(*(unsigned __int8 *)(v11 + 4));
                                            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_3::operator()(v2148, (uint64_t)v2200, &v2168, v532);
                                            v534 = v2168;
                                            v2168 = 0;
                                            if (v534)
                                            {
                                              v1150 = *((_DWORD *)v534 + 4) - 1;
                                              *((_DWORD *)v534 + 4) = v1150;
                                              if (!v1150)
                                                JSC::JITStubRoutine::observeZeroRefCount(v534, v435, v436, v437, v438, v439, v440, v441, v533);
                                            }
                                            v535 = v2170;
                                            v2170 = 0;
                                            if (v535)
                                              WTF::fastFree((unint64_t)v535, v435, v436, v437, v438, v439, v440, v441);
LABEL_524:
                                            v553 = (unsigned int *)v2177;
                                            v2177 = 0;
                                            if (v553)
                                            {
                                              do
                                              {
                                                v554 = __ldaxr(v553);
                                                v555 = v554 - 1;
                                              }
                                              while (__stlxr(v555, v553));
                                              if (!v555)
                                              {
                                                atomic_store(1u, v553);
                                                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v553, (uint64_t)v435, v436, v437, v438, v439, v440, v441);
                                                WTF::fastFree(v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1454);
                                              }
                                            }
                                            v556 = v2178;
                                            v2178 = 0;
                                            if (v556)
                                            {
                                              WTF::VectorTypeOperations<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>::destruct((unsigned int **)v556 + 1, (unsigned int **)&v556[2 * *v556 + 2], v436, v437, v438, v439, v440, v441);
                                              WTF::fastFree((unint64_t)v556, v557, v558, v559, v560, v561, v562, v563);
                                            }
                                            goto LABEL_530;
                                          }
                                          if (*(_DWORD *)v1428 != 1)
                                          {
                                            --*(_DWORD *)v1428;
                                            goto LABEL_483;
                                          }
                                          v1463 = v1428;
LABEL_1586:
                                          WTF::fastFree(v1463, v1464, v470, v471, v472, v473, v474, v475);
                                          v477 = v2166;
                                          goto LABEL_483;
                                        }
                                      }
                                      else
                                      {
                                        v1428 = 0;
                                        v1429 = 0;
                                      }
                                      WTF::fastFree(v1429, v1419, v1420, v1421, v1422, v1423, v1424, v1425);
                                      goto LABEL_1605;
                                    default:
                                      __break(0xC471u);
                                      JUMPOUT(0x1981D8AD8);
                                  }
                                }
                              }
                              else
                              {
                                v1409 = HIBYTE(word_1ECF4C286);
                              }
                              v420 = v2155;
                              v461 = v2166;
                              v415 = v2146;
                              if (v1409)
                                goto LABEL_1545;
                              goto LABEL_1936;
                            }
                            v467 = "GetById";
                            v468 = 8;
                            switch(*(_BYTE *)(v2166[2] + 122))
                            {
                              case 0:
                                goto LABEL_474;
                              case 1:
                                v467 = "GetByIdWithThis";
                                goto LABEL_1581;
                              case 2:
                                v467 = "GetByIdDirect";
                                v468 = 14;
                                goto LABEL_474;
                              case 3:
                                v467 = "TryGetById";
                                v468 = 11;
                                goto LABEL_474;
                              case 4:
                                v467 = "GetByVal";
                                v468 = 9;
                                goto LABEL_474;
                              case 5:
                                v467 = "GetByValWithThis";
                                v468 = 17;
                                goto LABEL_474;
                              case 6:
                                v467 = "PutByIdStrict";
                                v468 = 14;
                                goto LABEL_474;
                              case 7:
                                v467 = "PutByIdSloppy";
                                v468 = 14;
                                goto LABEL_474;
                              case 8:
                                v467 = "PutByIdDirectStrict";
                                v468 = 20;
                                goto LABEL_474;
                              case 9:
                                v467 = "PutByIdDirectSloppy";
                                v468 = 20;
                                goto LABEL_474;
                              case 0xA:
                                v467 = "PutByValStrict";
                                v468 = 15;
                                goto LABEL_474;
                              case 0xB:
                                v467 = "PutByValSloppy";
                                v468 = 15;
                                goto LABEL_474;
                              case 0xC:
                                v467 = "PutByValDirectStrict";
                                v468 = 21;
                                goto LABEL_474;
                              case 0xD:
                                v467 = "PutByValDirectSloppy";
                                v468 = 21;
                                goto LABEL_474;
                              case 0xE:
                                v467 = "DefinePrivateNameByVal";
                                v468 = 23;
                                goto LABEL_474;
                              case 0xF:
                                v467 = "DefinePrivateNameById";
                                v468 = 22;
                                goto LABEL_474;
                              case 0x10:
                                v467 = "SetPrivateNameByVal";
                                v468 = 20;
                                goto LABEL_474;
                              case 0x11:
                                v467 = "SetPrivateNameById";
                                v468 = 19;
                                goto LABEL_474;
                              case 0x12:
                                v467 = "InById";
                                v468 = 7;
                                goto LABEL_474;
                              case 0x13:
                                v467 = "InByVal";
                                v468 = 8;
                                goto LABEL_474;
                              case 0x14:
                                v467 = "HasPrivateName";
                                v468 = 15;
                                goto LABEL_474;
                              case 0x15:
                                v467 = "HasPrivateBrand";
                                goto LABEL_1581;
                              case 0x16:
                                v467 = "InstanceOf";
                                v468 = 11;
                                goto LABEL_474;
                              case 0x17:
                                v467 = "DeleteByIdStrict";
                                v468 = 17;
                                goto LABEL_474;
                              case 0x18:
                                v467 = "DeleteByIdSloppy";
                                v468 = 17;
                                goto LABEL_474;
                              case 0x19:
                                v467 = "DeleteByValStrict";
                                v468 = 18;
                                goto LABEL_474;
                              case 0x1A:
                                v467 = "DeleteByValSloppy";
                                v468 = 18;
                                goto LABEL_474;
                              case 0x1B:
                                v467 = "GetPrivateName";
                                v468 = 15;
                                goto LABEL_474;
                              case 0x1C:
                                v467 = "GetPrivateNameById";
                                v468 = 19;
                                goto LABEL_474;
                              case 0x1D:
                                v467 = "CheckPrivateBrand";
                                v468 = 18;
                                goto LABEL_474;
                              case 0x1E:
                                v467 = "SetPrivateBrand";
LABEL_1581:
                                v468 = 16;
LABEL_474:
                                JSC::LinkBuffer::finalizeCodeWithoutDisassemblyImpl((uint64_t)&v2210, v467, v468, &v2206);
                                v476 = (unsigned int *)v2207;
                                v2176 = (uint64_t *)v2206;
                                v2177 = 0;
                                v477 = v2166;
                                if (!v2207)
                                  goto LABEL_483;
                                do
                                  v478 = __ldaxr(v476);
                                while (__stlxr(v478 + 1, v476));
                                v479 = (unsigned int *)v2177;
                                v2177 = (JSC::ExecutableMemoryHandle *)v476;
                                if (v479)
                                {
                                  do
                                  {
                                    v480 = __ldaxr(v479);
                                    v481 = v480 - 1;
                                  }
                                  while (__stlxr(v481, v479));
                                  if (!v481)
                                  {
                                    atomic_store(1u, v479);
                                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v479, v469, v470, v471, v472, v473, v474, v475);
                                    WTF::fastFree(v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462);
                                    v477 = v2166;
                                  }
                                }
                                v482 = (unsigned int *)v2207;
                                v2207 = 0;
                                if (!v482)
                                  goto LABEL_483;
                                do
                                {
                                  v483 = __ldaxr(v482);
                                  v484 = v483 - 1;
                                }
                                while (__stlxr(v484, v482));
                                if (v484)
                                  goto LABEL_483;
                                atomic_store(1u, v482);
                                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v482, v469, v470, v471, v472, v473, v474, v475);
                                break;
                              default:
                                __break(0xC471u);
                                JUMPOUT(0x1981D7EF8);
                            }
                            goto LABEL_1586;
                          }
                          if (JSC::AccessCase::requiresInt32PropertyCheck((JSC::AccessCase *)v11))
                          {
                            *(_QWORD *)&v2210 = &v2211;
                            *((_QWORD *)&v2210 + 1) = 2;
                            v175 = (uint64_t)v2166;
                            v269 = v2166[2];
                            if ((*(_BYTE *)(v269 + 129) & 0x40) != 0)
                              goto LABEL_181;
                            v270 = 118;
                            if (*(_BYTE *)(v269 + 122) == 5)
                              v270 = 119;
                            JSC::MacroAssemblerARM64::branch64((uint64_t)&v2221, 3, *(char *)(v269 + v270), 27, v265, v266, v267, v268, (uint64_t)&v2189);
                            v278 = v2189;
                            v279 = HIDWORD(v2210);
                            if (v2189 == -1)
                            {
                              v175 = (uint64_t)v2166;
                            }
                            else
                            {
                              if (HIDWORD(v2210) == DWORD2(v2210))
                              {
                                v280 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2210, (void *)(HIDWORD(v2210) + 1), (unint64_t)&v2189, v273, v274, v275, v276, v277);
                                v282 = *v280;
                                v281 = (uint64_t *)(v280 + 1);
                                v278 = v282;
                                v279 = HIDWORD(v2210);
                              }
                              else
                              {
                                v281 = &v2190;
                              }
                              v1039 = v2210 + 12 * v279;
                              *(_DWORD *)v1039 = v278;
                              v175 = (uint64_t)v2166;
                              *(_QWORD *)(v1039 + 4) = *v281;
                              v279 = ++HIDWORD(v2210);
                            }
                            v1040 = (JSC::CodeBlock **)v2210;
                            if (v279)
                            {
                              v1041 = v279;
                              v1042 = *(unsigned int *)(v175 + 96);
                              v1043 = *(unsigned int *)(v175 + 100);
                              v1044 = v1043 + v1041;
                              if (v1043 + v1041 > v1042)
                              {
                                v1045 = v1042 + (v1042 >> 2);
                                if (v1045 >= 0x10)
                                  v1046 = v1045 + 1;
                                else
                                  v1046 = 16;
                                if (v1046 <= v1044)
                                  v1046 = v1043 + v1041;
                                v1047 = *(_QWORD *)(v175 + 88);
                                if (v1046 < 3)
                                {
                                  v1049 = v175 + 104;
                                  *(_QWORD *)(v175 + 88) = v175 + 104;
                                  *(_DWORD *)(v175 + 96) = 2;
                                }
                                else
                                {
                                  if (v1046 >= 0x15555556)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1981D8D78);
                                  }
                                  v1048 = 12 * v1046;
                                  v1049 = WTF::fastMalloc((WTF *)(12 * v1046));
                                  v175 = (uint64_t)v2166;
                                  *((_DWORD *)v2166 + 24) = (v1048 & 0xFFFFFFFC) / 0xC;
                                  v2166[11] = v1049;
                                }
                                if ((_DWORD)v1043)
                                {
                                  v1153 = v1047;
                                  do
                                  {
                                    *(_DWORD *)v1049 = *(_DWORD *)v1153;
                                    *(_QWORD *)(v1049 + 4) = *(_QWORD *)(v1153 + 4);
                                    v1153 += 12;
                                    v1049 += 12;
                                  }
                                  while (v1153 != v1047 + 12 * v1043);
                                }
                                if (v175 + 104 != v1047 && v1047)
                                {
                                  if (*(_QWORD *)(v175 + 88) == v1047)
                                  {
                                    *(_QWORD *)(v175 + 88) = 0;
                                    *(_DWORD *)(v175 + 96) = 0;
                                  }
                                  WTF::fastFree(v1047, v271, v272, v273, v274, v275, v276, v277);
                                  v175 = (uint64_t)v2166;
                                }
                              }
                              v1154 = *(unsigned int *)(v175 + 100);
                              if (v1044 < v1154)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1981D8D68);
                              }
                              v1155 = *(_QWORD *)(v175 + 88) + 12 * v1154;
                              v1156 = (JSC::CodeBlock **)((char *)v1040 + 12 * v1041);
                              do
                              {
                                *(_DWORD *)v1155 = *(_DWORD *)v1040;
                                *(_QWORD *)(v1155 + 4) = *(JSC::CodeBlock **)((char *)v1040 + 4);
                                v1040 = (JSC::CodeBlock **)((char *)v1040 + 12);
                                v1155 += 12;
                              }
                              while (v1040 != v1156);
                              *(_DWORD *)(v175 + 100) = v1044;
                              v1040 = (JSC::CodeBlock **)v2210;
                            }
                            if (&v2211 == v1040 || v1040 == 0)
                              goto LABEL_181;
LABEL_1216:
                            *(_QWORD *)&v2210 = 0;
                            DWORD2(v2210) = 0;
                            v1158 = (unint64_t)v1040;
LABEL_1217:
                            WTF::fastFree(v1158, v271, v272, v273, v274, v275, v276, v277);
                          }
                          else
                          {
                            if (JSC::AccessCase::requiresIdentifierNameMatch((JSC::AccessCase *)v11))
                            {
                              v959 = *(_QWORD *)(v11 + 32);
                              v960 = (v959 & 1) != 0 ? v959 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v959 + 8);
                              if ((*(_BYTE *)(v960 + 16) & 0x20) == 0)
                              {
                                *(_QWORD *)&v2210 = &v2211;
                                *((_QWORD *)&v2210 + 1) = 2;
                                v961 = v2166[2];
                                v962 = 118;
                                if (*(_BYTE *)(v961 + 122) == 5)
                                  v962 = 119;
                                v963 = *(unsigned __int8 *)(v961 + v962);
                                if ((*(_BYTE *)(v961 + 129) & 0x20) != 0)
                                {
                                  v1211 = v2166;
                                }
                                else
                                {
                                  JSC::MacroAssemblerARM64::branchTest64((uint64_t)&v2221, 1, (char)v963, 28, v955, v956, v957, v958, (uint64_t)&v2187);
                                  v969 = v2187;
                                  if (v2187 != -1)
                                  {
                                    v970 = HIDWORD(v2210);
                                    if (HIDWORD(v2210) == DWORD2(v2210))
                                    {
                                      v971 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2210, (void *)(HIDWORD(v2210) + 1), (unint64_t)&v2187, v964, v965, v966, v967, v968);
                                      v973 = *v971;
                                      v972 = v971 + 1;
                                      v969 = v973;
                                      v970 = HIDWORD(v2210);
                                    }
                                    else
                                    {
                                      v972 = &v2188;
                                    }
                                    v1205 = v2210 + 12 * v970;
                                    *(_DWORD *)v1205 = v969;
                                    *(_QWORD *)(v1205 + 4) = *(_QWORD *)v972;
                                    ++HIDWORD(v2210);
                                  }
                                  if (!v2232)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1981D8240);
                                  }
                                  *(_DWORD *)(v2236 + 208) &= ~v2238;
                                  JSC::MacroAssemblerARM64::load8((uint64_t)&v2221, v963 | 0x500000000, v2237, v964, v965, v966, v967, v968);
                                  JSC::MacroAssemblerARM64::branch32((uint64_t)&v2221, 1, 17, 2, v1206, v1207, v1208, v1209, (uint64_t)&v2185);
                                  v1210 = v2185;
                                  v1211 = v2166;
                                  if (v2185 != -1)
                                  {
                                    v1212 = HIDWORD(v2210);
                                    if (HIDWORD(v2210) == DWORD2(v2210))
                                    {
                                      v1213 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2210, (void *)(HIDWORD(v2210) + 1), (unint64_t)&v2185, v954, v955, v956, v957, v958);
                                      v1211 = v2166;
                                      v1215 = *v1213;
                                      v1214 = (uint64_t *)(v1213 + 1);
                                      v1210 = v1215;
                                      v1212 = HIDWORD(v2210);
                                    }
                                    else
                                    {
                                      v1214 = &v2186;
                                    }
                                    v1216 = v2210 + 12 * v1212;
                                    *(_DWORD *)v1216 = v1210;
                                    *(_QWORD *)(v1216 + 4) = *v1214;
                                    ++HIDWORD(v2210);
                                  }
                                }
                                JSC::MacroAssemblerARM64::load64((uint64_t)&v2221, v963 | 0x800000000, *((char *)v1211 + 176), v954, v955, v956, v957, v958);
                                v1217 = (unint64_t *)(v2166 + 11);
                                JSC::MacroAssemblerARM64::branchTest64((uint64_t)&v2221, 1, *((char *)v2166 + 176), 1, v1218, v1219, v1220, v1221, (uint64_t)&v2183, v1222);
                                v175 = (uint64_t)v2166;
                                v1223 = v2183;
                                if (v2183 != -1)
                                {
                                  v1224 = *((unsigned int *)v2166 + 25);
                                  if ((_DWORD)v1224 == *((_DWORD *)v2166 + 24))
                                  {
                                    v1225 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1217, (void *)(v1224 + 1), (unint64_t)&v2183, v273, v274, v275, v276, v277);
                                    v175 = (uint64_t)v2166;
                                    v1227 = *v1225;
                                    v1226 = v1225 + 1;
                                    v1223 = v1227;
                                    LODWORD(v1224) = *((_DWORD *)v2166 + 25);
                                    v1228 = v2166[11];
                                  }
                                  else
                                  {
                                    v1226 = &v2184;
                                    v1228 = *v1217;
                                  }
                                  v1229 = v1228 + 12 * v1224;
                                  *(_DWORD *)v1229 = v1223;
                                  *(_QWORD *)(v1229 + 4) = *(_QWORD *)v1226;
                                  ++*(_DWORD *)(v175 + 100);
                                }
                                v1230 = (JSC::CodeBlock **)v2210;
                                v1231 = HIDWORD(v2210);
                                if (HIDWORD(v2210))
                                {
                                  v1232 = *(unsigned int *)(v175 + 96);
                                  v1233 = *(unsigned int *)(v175 + 100);
                                  v1234 = v1233 + HIDWORD(v2210);
                                  if (v1234 > v1232)
                                  {
                                    v1235 = v1232 + (v1232 >> 2);
                                    if (v1235 >= 0x10)
                                      v1236 = v1235 + 1;
                                    else
                                      v1236 = 16;
                                    if (v1236 <= v1234)
                                      v1236 = v1233 + HIDWORD(v2210);
                                    v1237 = *v1217;
                                    if (v1236 < 3)
                                    {
                                      v1239 = v175 + 104;
                                      *(_QWORD *)(v175 + 88) = v175 + 104;
                                      *(_DWORD *)(v175 + 96) = 2;
                                    }
                                    else
                                    {
                                      if (v1236 >= 0x15555556)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x1981D8D80);
                                      }
                                      v1238 = 12 * v1236;
                                      v1239 = WTF::fastMalloc((WTF *)(12 * v1236));
                                      v175 = (uint64_t)v2166;
                                      *((_DWORD *)v2166 + 24) = (v1238 & 0xFFFFFFFC) / 0xC;
                                      v2166[11] = v1239;
                                      v1217 = (unint64_t *)(v2166 + 11);
                                    }
                                    if ((_DWORD)v1233)
                                    {
                                      v1326 = v1237;
                                      do
                                      {
                                        *(_DWORD *)v1239 = *(_DWORD *)v1326;
                                        *(_QWORD *)(v1239 + 4) = *(_QWORD *)(v1326 + 4);
                                        v1326 += 12;
                                        v1239 += 12;
                                      }
                                      while (v1326 != v1237 + 12 * v1233);
                                    }
                                    if (v175 + 104 != v1237 && v1237)
                                    {
                                      if (*v1217 == v1237)
                                      {
                                        *(_QWORD *)(v175 + 88) = 0;
                                        *(_DWORD *)(v175 + 96) = 0;
                                      }
                                      WTF::fastFree(v1237, v271, v272, v273, v274, v275, v276, v277);
                                      v175 = (uint64_t)v2166;
                                    }
                                  }
                                  v1327 = *(unsigned int *)(v175 + 100);
                                  if (v1234 < v1327)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1981D8D70);
                                  }
                                  v1328 = *v1217 + 12 * v1327;
                                  v1329 = (JSC::CodeBlock **)((char *)v1230 + 12 * v1231);
                                  do
                                  {
                                    *(_DWORD *)v1328 = *(_DWORD *)v1230;
                                    *(_QWORD *)(v1328 + 4) = *(JSC::CodeBlock **)((char *)v1230 + 4);
                                    v1230 = (JSC::CodeBlock **)((char *)v1230 + 12);
                                    v1328 += 12;
                                  }
                                  while (v1230 != v1329);
                                  *(_DWORD *)(v175 + 100) = v1234;
                                  v1230 = (JSC::CodeBlock **)v2210;
                                }
                                if (&v2211 == v1230 || v1230 == 0)
                                  goto LABEL_181;
                                *(_QWORD *)&v2210 = 0;
                                DWORD2(v2210) = 0;
                                v1158 = (unint64_t)v1230;
                                goto LABEL_1217;
                              }
                            }
                            v1242 = JSC::AccessCase::requiresIdentifierNameMatch((JSC::AccessCase *)v11);
                            v175 = (uint64_t)v2166;
                            if (!v1242)
                              goto LABEL_181;
                            v1247 = *(_QWORD *)(v11 + 32);
                            v1248 = (v1247 & 1) != 0 ? v1247 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v1247 + 8);
                            v175 = (uint64_t)v2166;
                            if ((*(_BYTE *)(v1248 + 16) & 0x20) == 0)
                              goto LABEL_181;
                            *(_QWORD *)&v2210 = &v2211;
                            *((_QWORD *)&v2210 + 1) = 2;
                            v1249 = v2166[2];
                            if ((*(_BYTE *)(v1249 + 129) & 0x80) == 0)
                            {
                              v1250 = 118;
                              if (*(_BYTE *)(v1249 + 122) == 5)
                                v1250 = 119;
                              v1251 = *(char *)(v1249 + v1250);
                              JSC::MacroAssemblerARM64::branchTest64((uint64_t)&v2221, 1, v1251, 28, v1243, v1244, v1245, v1246, (uint64_t)&v2181);
                              v1257 = v2181;
                              if (v2181 != -1)
                              {
                                v1258 = HIDWORD(v2210);
                                if (HIDWORD(v2210) == DWORD2(v2210))
                                {
                                  v1259 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2210, (void *)(HIDWORD(v2210) + 1), (unint64_t)&v2181, v1252, v1253, v1254, v1255, v1256);
                                  v1261 = *v1259;
                                  v1260 = (uint64_t *)(v1259 + 1);
                                  v1257 = v1261;
                                  v1258 = HIDWORD(v2210);
                                }
                                else
                                {
                                  v1260 = &v2182;
                                }
                                v1620 = v2210 + 12 * v1258;
                                *(_DWORD *)v1620 = v1257;
                                *(_QWORD *)(v1620 + 4) = *v1260;
                                ++HIDWORD(v2210);
                              }
                              if (!v2232)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1981D89D4);
                              }
                              *(_DWORD *)(v2236 + 208) &= ~v2238;
                              JSC::MacroAssemblerARM64::load8((uint64_t)&v2221, v1251 | 0x500000000, v2237, v1252, v1253, v1254, v1255, v1256);
                              JSC::MacroAssemblerARM64::branch32((uint64_t)&v2221, 1, 17, 4, v1621, v1622, v1623, v1624, (uint64_t)&v2179);
                              v1625 = v2179;
                              v1626 = HIDWORD(v2210);
                              if (v2179 != -1)
                              {
                                if (HIDWORD(v2210) == DWORD2(v2210))
                                {
                                  v1627 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2210, (void *)(HIDWORD(v2210) + 1), (unint64_t)&v2179, v273, v274, v275, v276, v277);
                                  v1629 = *v1627;
                                  v1628 = v1627 + 1;
                                  v1625 = v1629;
                                  v1626 = HIDWORD(v2210);
                                }
                                else
                                {
                                  v1628 = &v2180;
                                }
                                v1630 = v2210 + 12 * v1626;
                                *(_DWORD *)v1630 = v1625;
                                *(_QWORD *)(v1630 + 4) = *(_QWORD *)v1628;
                                v1626 = ++HIDWORD(v2210);
                              }
                              v1040 = (JSC::CodeBlock **)v2210;
                              if (v1626)
                              {
                                v1631 = v1626;
                                v1632 = v2166;
                                v1633 = *((unsigned int *)v2166 + 24);
                                v1634 = *((unsigned int *)v2166 + 25);
                                v1635 = v1634 + v1631;
                                if (v1634 + v1631 > v1633)
                                {
                                  v1636 = v1633 + (v1633 >> 2);
                                  if (v1636 >= 0x10)
                                    v1637 = v1636 + 1;
                                  else
                                    v1637 = 16;
                                  if (v1637 <= v1635)
                                    v1637 = v1634 + v1631;
                                  v1638 = v2166[11];
                                  if (v1637 < 3)
                                  {
                                    v1640 = (uint64_t)(v2166 + 13);
                                    v2166[11] = (uint64_t)(v2166 + 13);
                                    *((_DWORD *)v2166 + 24) = 2;
                                  }
                                  else
                                  {
                                    if (v1637 >= 0x15555556)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x1981D8DA0);
                                    }
                                    v1639 = 12 * v1637;
                                    v1640 = WTF::fastMalloc((WTF *)(12 * v1637));
                                    *((_DWORD *)v2166 + 24) = (v1639 & 0xFFFFFFFC) / 0xC;
                                    v2166[11] = v1640;
                                  }
                                  if ((_DWORD)v1634)
                                  {
                                    v1701 = v1638;
                                    do
                                    {
                                      *(_DWORD *)v1640 = *(_DWORD *)v1701;
                                      *(_QWORD *)(v1640 + 4) = *(_QWORD *)(v1701 + 4);
                                      v1701 += 12;
                                      v1640 += 12;
                                    }
                                    while (v1701 != v1638 + 12 * v1634);
                                  }
                                  v1632 = v2166;
                                  if (v2166 + 13 != (uint64_t *)v1638 && v1638)
                                  {
                                    if (v2166[11] == v1638)
                                    {
                                      v2166[11] = 0;
                                      *((_DWORD *)v2166 + 24) = 0;
                                    }
                                    WTF::fastFree(v1638, v271, v272, v273, v274, v275, v276, v277);
                                    v1632 = v2166;
                                  }
                                }
                                v1702 = *((unsigned int *)v1632 + 25);
                                if (v1635 < v1702)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1981D8D98);
                                }
                                v1703 = v2166[11] + 12 * v1702;
                                v1704 = (JSC::CodeBlock **)((char *)v1040 + 12 * v1631);
                                do
                                {
                                  *(_DWORD *)v1703 = *(_DWORD *)v1040;
                                  *(_QWORD *)(v1703 + 4) = *(JSC::CodeBlock **)((char *)v1040 + 4);
                                  v1040 = (JSC::CodeBlock **)((char *)v1040 + 12);
                                  v1703 += 12;
                                }
                                while (v1040 != v1704);
                                *((_DWORD *)v2166 + 25) = v1635;
                                v1040 = (JSC::CodeBlock **)v2210;
                              }
                              if (&v2211 != v1040 && v1040 != 0)
                                goto LABEL_1216;
                            }
                          }
                          v175 = (uint64_t)v2166;
                          goto LABEL_181;
                        }
                      }
                    }
                  }
                }
              }
              v142 = ++v139 + v145;
              continue;
            }
          }
          return;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 11:
          goto LABEL_127;
        case 8:
          if (*(_BYTE *)(v6 + 5))
            goto LABEL_1578;
          JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
          if (HIDWORD(v2210))
            goto LABEL_1578;
          v106 = (*v2164)[45];
          v105 = (unsigned int *)(*v2164)[46];
          if (v105)
          {
            do
              v107 = __ldaxr(v105);
            while (__stlxr(v107 + 1, v105));
            do
              v108 = __ldaxr(v105);
            while (__stlxr(v108 + 1, v105));
            do
            {
              v109 = __ldaxr(v105);
              v110 = v109 - 1;
            }
            while (__stlxr(v110, v105));
            if (!v110)
            {
              atomic_store(1u, v105);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v104, v4, (uint64_t)v5, v6, v7, v8, v9);
              WTF::fastFree(v1578, v1579, v1580, v1581, v1582, v1583, v1584, v1585);
            }
            v111 = WTF::fastMalloc((WTF *)0x60);
            *(_QWORD *)v111 = v106;
            do
              v112 = __ldaxr(v105);
            while (__stlxr(v112 + 1, v105));
          }
          else
          {
            v111 = WTF::fastMalloc((WTF *)0x60);
            *(_QWORD *)v111 = v106;
          }
          *(_QWORD *)(v111 + 8) = v105;
          *(_QWORD *)(v111 + 16) = 1;
          *(_BYTE *)(v111 + 24) = 3;
          *(_QWORD *)(v111 + 32) = 0;
          *(_BYTE *)(v111 + 40) &= 0xC0u;
          *(_QWORD *)(v111 + 56) = 0;
          *(_QWORD *)(v111 + 64) = 0;
          *(_QWORD *)(v111 + 48) = v13;
          v113 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v113 = 1;
          *(_WORD *)(v113 + 4) = 1;
          *(_QWORD *)(v113 + 8) = v113 + 8;
          *(_QWORD *)(v113 + 16) = v113 + 8;
          *(_QWORD *)(v111 + 72) = v113;
          *(_QWORD *)(v111 + 80) = 0;
          *(_QWORD *)(v111 + 88) = 0;
          v2206 = (__int128 *)v111;
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v111 + 88), (unsigned int *)v113, (uint64_t)v2221, HIDWORD(v2222), v10);
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
          v116 = (JSC::JITStubRoutine *)v2206;
          if (v2206)
          {
            v1151 = *((_DWORD *)v2206 + 4) - 1;
            *((_DWORD *)v2206 + 4) = v1151;
            if (!v1151)
              JSC::JITStubRoutine::observeZeroRefCount(v116, v114, v4, (uint64_t)v5, v6, v7, v8, v9, v115);
          }
          if (!v105)
            goto LABEL_1593;
          v3 = v2166;
          do
            v117 = __ldaxr(v105);
          while (__stlxr(v117 - 1, v105));
          goto LABEL_125;
        case 10:
          if (*(_BYTE *)(v6 + 5))
            goto LABEL_1578;
          JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
          if (HIDWORD(v2210))
            goto LABEL_1578;
          v581 = *(unsigned __int8 *)(v11 + 4);
          if (v581 > 0x20 || ((1 << v581) & 0x100000014) == 0)
          {
            v582 = *(_DWORD *)(v11 + 12);
            goto LABEL_545;
          }
          v583 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
          if (v583 && *(_BYTE *)(v583 + 5) != 1)
          {
            v582 = *(_DWORD *)(v583 + 80);
LABEL_545:
            if (v582)
              v583 = 16 * (v582 & 0xFFFFFFFE);
            else
              v583 = 0;
          }
          v584 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
          if (v584)
            v583 = 16 * (*v584 & 0xFFFFFFFE);
          v591 = *(unsigned int *)(v11 + 8);
          if ((_DWORD)v591 != -1)
            JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v583, (JSC::VM *)v13, (JSC::Structure *)v591, v586, v587, v588, v589, v590);
          v592 = (*v2164)[51];
          v105 = (unsigned int *)(*v2164)[52];
          if (v105)
          {
            do
              v593 = __ldaxr(v105);
            while (__stlxr(v593 + 1, v105));
            do
              v594 = __ldaxr(v105);
            while (__stlxr(v594 + 1, v105));
            do
            {
              v595 = __ldaxr(v105);
              v596 = v595 - 1;
            }
            while (__stlxr(v596, v105));
            if (!v596)
            {
              atomic_store(1u, v105);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v585, v591, v586, v587, v588, v589, v590);
              WTF::fastFree(v1714, v1715, v1716, v1717, v1718, v1719, v1720, v1721);
            }
            v597 = WTF::fastMalloc((WTF *)0x60);
            *(_QWORD *)v597 = v592;
            do
              v598 = __ldaxr(v105);
            while (__stlxr(v598 + 1, v105));
          }
          else
          {
            v597 = WTF::fastMalloc((WTF *)0x60);
            *(_QWORD *)v597 = v592;
          }
          *(_QWORD *)(v597 + 8) = v105;
          *(_QWORD *)(v597 + 16) = 1;
          *(_BYTE *)(v597 + 24) = 3;
          *(_QWORD *)(v597 + 32) = 0;
          *(_BYTE *)(v597 + 40) &= 0xC0u;
          *(_QWORD *)(v597 + 56) = 0;
          *(_QWORD *)(v597 + 64) = 0;
          *(_QWORD *)(v597 + 48) = v13;
          v599 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v599 = 1;
          *(_WORD *)(v599 + 4) = 1;
          *(_QWORD *)(v599 + 8) = v599 + 8;
          *(_QWORD *)(v599 + 16) = v599 + 8;
          *(_QWORD *)(v597 + 72) = v599;
          *(_QWORD *)(v597 + 80) = 0;
          *(_QWORD *)(v597 + 88) = 0;
          v2206 = (__int128 *)v597;
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)(v597 + 88), (unsigned int *)v599, (uint64_t)v2221, HIDWORD(v2222), v10);
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2206);
          v602 = (JSC::JITStubRoutine *)v2206;
          if (v2206)
          {
            v1379 = *((_DWORD *)v2206 + 4) - 1;
            *((_DWORD *)v2206 + 4) = v1379;
            if (!v1379)
              JSC::JITStubRoutine::observeZeroRefCount(v602, v600, v4, (uint64_t)v5, v6, v7, v8, v9, v601);
          }
          if (!v105)
            goto LABEL_1593;
          v3 = v2166;
          do
            v117 = __ldaxr(v105);
          while (__stlxr(v117 - 1, v105));
          goto LABEL_125;
        case 12:
        case 13:
          if (*(_BYTE *)(v6 + 5))
            goto LABEL_127;
          if (v14 == 13 && *(_BYTE *)(v6 + 80))
          {
            v194 = *(_DWORD *)(v6 + 12);
            if (v194)
              v195 = 16 * (v194 & 0xFFFFFFFE);
            else
              v195 = 0;
            v196 = *(unsigned int *)(v195 + 76);
            v197 = *(_DWORD *)(v195 + 76) != 0;
            if ((_DWORD)v196)
            {
              v198 = 16 * v196;
              v199 = *(_QWORD *)(v6 + 64);
              if (v199 != v198)
              {
                do
                {
                  v198 = *(_QWORD *)(v198 + 16);
                  v197 = v198 != 0;
                }
                while (v198 != v199 && v198 != 0);
              }
            }
            if (!v197)
              goto LABEL_1559;
          }
          JSC::collectConditions(v6, (uint64_t)&v2221, (uint64_t)&v2210, v5, v6, v7, v8, v9);
          if (HIDWORD(v2210))
            goto LABEL_1577;
          v201 = *(unsigned __int8 *)(v11 + 4);
          if (v201 > 0x20 || ((1 << v201) & 0x100000014) == 0)
          {
            v202 = *(_DWORD *)(v11 + 12);
            goto LABEL_209;
          }
          v203 = *(_QWORD *)(16 * (*(_DWORD *)(v11 + 12) & 0xFFFFFFFE) + 0x40);
          if (v203 && *(_BYTE *)(v203 + 5) != 1)
          {
            v202 = *(_DWORD *)(v203 + 80);
LABEL_209:
            if (v202)
              v203 = 16 * (v202 & 0xFFFFFFFE);
            else
              v203 = 0;
          }
          v204 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v11);
          if (v204)
            v203 = 16 * (*v204 & 0xFFFFFFFE);
          v210 = *(unsigned int *)(v11 + 8);
          v211 = (uint64_t)v2166;
          if ((_DWORD)v210 != -1)
          {
            JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v203, (JSC::VM *)v13, (JSC::Structure *)v210, v205, v206, v207, v208, v209);
            v211 = (uint64_t)v2166;
          }
          v2206 = 0;
          v2207 = 0;
          if (*(_BYTE *)(v11 + 4) == 13)
          {
            if (byte_1ECF4C245 && *(_BYTE *)(v11 + 80) && (v205 = *(_QWORD *)(v11 + 72)) != 0)
            {
              JSC::InlineCacheCompiler::compileGetByDOMJITHandler((uint64_t *)&v2196, v211, v2205, v205, 0);
              v351 = *((_QWORD *)&v2196 + 1);
              *((_QWORD *)&v2196 + 1) = 0;
              v352 = (unsigned int *)v2207;
              v2206 = (__int128 *)v2196;
              v2207 = v351;
              if (v352)
              {
                do
                {
                  v353 = __ldaxr(v352);
                  v354 = v353 - 1;
                }
                while (__stlxr(v354, v352));
                if (!v354)
                {
                  atomic_store(1u, v352);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v352, v350, v4, (uint64_t)v5, v6, v7, v8, v9);
                  WTF::fastFree(v1676, v1677, v1678, v1679, v1680, v1681, v1682, v1683);
                }
                v355 = (unsigned int *)*((_QWORD *)&v2196 + 1);
                *((_QWORD *)&v2196 + 1) = 0;
                if (v355)
                {
                  do
                  {
                    v356 = __ldaxr(v355);
                    v357 = v356 - 1;
                  }
                  while (__stlxr(v357, v355));
                  if (!v357)
                  {
                    atomic_store(1u, v355);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v355, v350, v4, (uint64_t)v5, v6, v7, v8, v9);
                    WTF::fastFree(v1684, v1685, v1686, v1687, v1688, v1689, v1690, v1691);
                  }
                }
              }
              if (!v2206)
              {
                *(_DWORD *)v12 = 1;
                *(_QWORD *)(v12 + 16) = 0;
                *(_QWORD *)(v12 + 24) = 0;
                *(_QWORD *)(v12 + 8) = 0;
                goto LABEL_233;
              }
            }
            else
            {
              v212 = (uint64_t *)(*v2164)[47];
              v213 = (unsigned int *)(*v2164)[48];
              if (v213)
              {
                do
                  v214 = __ldaxr(v213);
                while (__stlxr(v214 + 1, v213));
                do
                  v215 = __ldaxr(v213);
                while (__stlxr(v215 + 1, v213));
                v216 = (unsigned int *)v2207;
                v2206 = (__int128 *)v212;
                v2207 = (uint64_t)v213;
                if (v216)
                {
                  do
                  {
                    v217 = __ldaxr(v216);
                    v218 = v217 - 1;
                  }
                  while (__stlxr(v218, v216));
                  if (!v218)
                  {
                    atomic_store(1u, v216);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v216, v211, v210, v205, v206, v207, v208, v209);
                    WTF::fastFree(v1612, v1613, v1614, v1615, v1616, v1617, v1618, v1619);
                  }
                }
                do
                {
                  v219 = __ldaxr(v213);
                  v220 = v219 - 1;
                }
                while (__stlxr(v220, v213));
                if (!v220)
                {
                  atomic_store(1u, v213);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v213, v211, v210, v205, v206, v207, v208, v209);
                  WTF::fastFree(v1604, v1605, v1606, v1607, v1608, v1609, v1610, v1611);
                }
              }
              else
              {
                v2206 = (__int128 *)(*v2164)[47];
                v2207 = 0;
              }
            }
          }
          else
          {
            v1523 = (WTF *)(*v2164)[49];
            v1524 = (unsigned int *)(*v2164)[50];
            v2170 = v1523;
            if (v1524)
            {
              do
                v1525 = __ldaxr(v1524);
              while (__stlxr(v1525 + 1, v1524));
              v1523 = v2170;
            }
            v2171 = (const char *)v1524;
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v1523, v1524, v205, v206, v207, v208, v209);
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(&v2206, &v2196, v1526, v1527, v1528, v1529, v1530, v1531);
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, v1532, v1533, v1534, v1535, v1536, v1537, v1538);
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2170, v1539, v1540, v1541, v1542, v1543, v1544, v1545);
          }
          v221 = WTF::fastMalloc((WTF *)0x60);
          v222 = (_QWORD *)v221;
          *(_QWORD *)v221 = v2206;
          v223 = (unsigned int *)v2207;
          if (v2207)
          {
            do
              v224 = __ldaxr(v223);
            while (__stlxr(v224 + 1, v223));
          }
          *(_QWORD *)(v221 + 8) = v223;
          *(_QWORD *)(v221 + 16) = 1;
          *(_BYTE *)(v221 + 24) = 3;
          *(_QWORD *)(v221 + 32) = 0;
          *(_BYTE *)(v221 + 40) &= 0xC0u;
          *(_QWORD *)(v221 + 56) = 0;
          *(_QWORD *)(v221 + 64) = 0;
          *(_QWORD *)(v221 + 48) = v13;
          v225 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v225 = 1;
          *(_WORD *)(v225 + 4) = 1;
          *(_QWORD *)(v225 + 8) = v225 + 8;
          *(_QWORD *)(v225 + 16) = v225 + 8;
          v222[9] = v225;
          v222[10] = 0;
          v222[11] = 0;
          *(_QWORD *)&v2196 = v222;
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, v222 + 11, (unsigned int *)v225, (uint64_t)v2221, HIDWORD(v2222), v10);
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2196);
          v228 = (JSC::JITStubRoutine *)v2196;
          if ((_QWORD)v2196)
          {
            v1152 = *(_DWORD *)(v2196 + 16) - 1;
            *(_DWORD *)(v2196 + 16) = v1152;
            if (!v1152)
              JSC::JITStubRoutine::observeZeroRefCount(v228, v226, v4, (uint64_t)v5, v6, v7, v8, v9, v227);
          }
LABEL_233:
          v229 = (unsigned int *)v2207;
          v2207 = 0;
          v3 = v2166;
          if (v229)
          {
            do
            {
              v230 = __ldaxr(v229);
              v231 = --v230 == 0;
            }
            while (__stlxr(v230, v229));
LABEL_235:
            if (!v231)
              goto LABEL_126;
            atomic_store(1u, v229);
            goto LABEL_1592;
          }
          goto LABEL_126;
        default:
          if (v14 != 26)
          {
            if (v14 != 24)
              goto LABEL_127;
            v974 = (uint64_t *)(*v2164)[55];
            v975 = (unsigned int *)(*v2164)[56];
            v2206 = (__int128 *)v974;
            if (v975)
            {
              do
                v976 = __ldaxr(v975);
              while (__stlxr(v976 + 1, v975));
              v974 = (uint64_t *)v2206;
            }
            v2207 = (uint64_t)v975;
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>((uint64_t *)&v2196, (uint64_t)v974, v975, (uint64_t)v5, v6, v7, v8, v9);
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2206, v977, v978, v979, v980, v981, v982, v983);
            JSC::createPreCompiledICJITStubRoutine(&v2196, v13, &v2170);
            v984 = (unsigned int *)*((_QWORD *)v2170 + 9);
            v2206 = &v2208;
            v2207 = 64;
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(&v2204, (uint64_t *)v2170 + 11, v984, (uint64_t)&v2208, 0, v10);
            v992 = (uint64_t *)v2206;
            if (&v2208 != v2206 && v2206)
            {
              v2206 = 0;
              LODWORD(v2207) = 0;
              WTF::fastFree((unint64_t)v992, v985, v986, v987, v988, v989, v990, v991);
            }
            JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2170);
            v1001 = v2170;
            if (v2170)
            {
              v2039 = *((_DWORD *)v2170 + 4) - 1;
              *((_DWORD *)v2170 + 4) = v2039;
              if (!v2039)
                JSC::JITStubRoutine::observeZeroRefCount(v1001, v993, v994, v995, v996, v997, v998, v999, v1000);
            }
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v2196, (uint64_t)v993, v994, v995, v996, v997, v998, v999);
            LODWORD(v17) = 0;
            goto LABEL_1578;
          }
          v647 = (*v2164)[53];
          v17 = (unsigned int *)(*v2164)[54];
          v2160 = v14;
          if (v17)
          {
            do
              v648 = __ldaxr(v17);
            while (__stlxr(v648 + 1, v17));
            do
              v649 = __ldaxr(v17);
            while (__stlxr(v649 + 1, v17));
            do
            {
              v650 = __ldaxr(v17);
              v651 = v650 - 1;
            }
            while (__stlxr(v651, v17));
            if (!v651)
            {
              atomic_store(1u, v17);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, (uint64_t)v3, v4, (uint64_t)v5, v6, v7, v8, v9);
              WTF::fastFree(v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794);
            }
            v652 = WTF::fastMalloc((WTF *)0x60);
            *(_QWORD *)v652 = v647;
            do
              v653 = __ldaxr(v17);
            while (__stlxr(v653 + 1, v17));
          }
          else
          {
            v652 = WTF::fastMalloc((WTF *)0x60);
            *(_QWORD *)v652 = v647;
          }
          *(_QWORD *)(v652 + 8) = v17;
          *(_QWORD *)(v652 + 16) = 1;
          *(_BYTE *)(v652 + 24) = 3;
          *(_QWORD *)(v652 + 32) = 0;
          *(_BYTE *)(v652 + 40) &= 0xC0u;
          *(_QWORD *)(v652 + 56) = 0;
          *(_QWORD *)(v652 + 64) = 0;
          *(_QWORD *)(v652 + 48) = v13;
          v654 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v654 = 1;
          *(_WORD *)(v654 + 4) = 1;
          *(_QWORD *)(v654 + 8) = v654 + 8;
          *(_QWORD *)(v654 + 16) = v654 + 8;
          *(_QWORD *)(v652 + 80) = 0;
          *(_QWORD *)(v652 + 88) = 0;
          *(_QWORD *)(v652 + 72) = v654;
          v2170 = (WTF *)v652;
          v2206 = &v2208;
          v2207 = 64;
          v655 = *(unsigned int *)(v10 + 12);
          if ((_DWORD)v655)
          {
            v656 = (unsigned int *)v654;
            v2145 = v13;
            v2154 = v10;
            v657 = *(uint64_t **)v10;
            v658 = *(_QWORD *)v10 + 8 * v655;
            do
            {
              v659 = *v657;
              v2196 = 0uLL;
              v2197 = 0;
              v660 = WTF::fastMalloc((WTF *)0x68);
              *(_QWORD *)v660 = 0;
              *(_QWORD *)(v660 + 8) = 0;
              *(_BYTE *)(v660 + 16) = 9;
              do
                v668 = __ldaxr(v656);
              while (__stlxr(v668 + 1, v656));
              *(_QWORD *)(v660 + 24) = v656;
              *(_OWORD *)(v660 + 32) = v2196;
              *(_QWORD *)(v660 + 48) = v2197;
              *(_DWORD *)(v660 + 88) = 0;
              *(_QWORD *)(v660 + 96) = 0;
              *(_QWORD *)(v660 + 96) = *(_QWORD *)(v652 + 88);
              *(_QWORD *)(v652 + 88) = v660;
              v670 = *(_QWORD *)(v659 + 8);
              v669 = (uint64_t *)(v659 + 8);
              *(_QWORD *)v660 = v670;
              *(_QWORD *)(v660 + 8) = v669;
              *v669 = v660;
              *(_QWORD *)(v670 + 8) = v660;
              *((_WORD *)v669 - 2) = 257;
              ++v657;
            }
            while (v657 != (uint64_t *)v658);
            v671 = (uint64_t *)v2206;
            v13 = v2145;
            v10 = v2154;
            if (&v2208 != v2206)
            {
              if (v2206)
              {
                v2206 = 0;
                LODWORD(v2207) = 0;
                WTF::fastFree((unint64_t)v671, v661, v662, v663, v664, v665, v666, v667);
              }
            }
          }
          JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(v12, v2201, (uint64_t **)&v2170);
          v674 = v2170;
          if (v2170)
          {
            v1481 = *((_DWORD *)v2170 + 4) - 1;
            *((_DWORD *)v2170 + 4) = v1481;
            if (!v1481)
              JSC::JITStubRoutine::observeZeroRefCount(v674, v672, v4, (uint64_t)v5, v6, v7, v8, v9, v673);
          }
          v3 = v2166;
          v14 = v2160;
          if (v17)
          {
            do
              v675 = __ldaxr(v17);
            while (__stlxr(v675 - 1, v17));
            goto LABEL_649;
          }
          goto LABEL_127;
      }
  }
}

uint64_t JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint8x8_t v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t AlternateBase;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  _DWORD *v58;
  JSC::VM *v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  unsigned int v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t result;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t casual;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t *v106;
  unint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v6 = a2[1];
  if ((*a3)[11])
  {
    v7 = *a2;
    v8 = v6[2];
    v9 = WTF::fastMalloc((WTF *)0x20);
    v10 = *v7;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 10;
    *(_DWORD *)(v9 + 17) = v10;
    *(_BYTE *)(v9 + 21) = BYTE4(v10);
    *(_QWORD *)(v9 + 24) = v8;
    v11 = (uint64_t *)(*a3)[9];
    v12 = v11[1];
    ++v11;
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v11;
    *v11 = v9;
    *(_QWORD *)(v12 + 8) = v9;
    *((_WORD *)v11 - 2) = 257;
  }
  else
  {
    v9 = 0;
  }
  JSC::InlineCacheCompiler::generateSlowPathHandler((uint64_t)a2[2], *(char *)(v6[2] + 122), &v118);
  v20 = **a2;
  v21 = (uint64_t *)v6[2];
  v22 = a2[3];
  v23 = *((unsigned __int8 *)v22 + 4);
  v24 = v23 >= 0xA;
  v25 = v23 - 10;
  if (v24)
  {
    v26 = 0;
    v27 = 1;
    switch(v25)
    {
      case 0u:
      case 1u:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x17u:
      case 0x33u:
      case 0x65u:
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v27 = 0;
    v26 = 1;
  }
  v28 = v27;
  v29 = (16 * v27) | ((unint64_t)v27 << 6);
  v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v30)
  {
    v31 = (v29 + 111) >> 4;
    v32 = v30 + 184 * v31;
    v33 = v32 + 8120;
    *(_BYTE *)(v32 + 8120) = 1;
    v34 = *(unsigned int *)(v32 + 8136);
    if ((_DWORD)v34)
    {
      *(_DWORD *)(v33 + 16) = v34 - *(_DWORD *)(v33 + 20);
      v35 = *(_QWORD *)(v33 + 8) - v34;
LABEL_13:
      *(_BYTE *)v33 = 0;
      goto LABEL_14;
    }
    v36 = *(_QWORD *)(v33 + 40);
    v37 = *(_QWORD *)(v33 + 24);
    if (v36)
    {
LABEL_12:
      v38 = __clz(v36);
      *(_QWORD *)(v33 + 40) = v36 & ~(0x8000000000000000 >> v38);
      v35 = v37 + 16 * v38;
      goto LABEL_13;
    }
    if (*(_BYTE *)(v33 + 5) == 6)
    {
      v92 = *(unsigned int *)(v33 + 32);
      v93 = *(_DWORD *)(v33 + 36);
      if (v92 < v93)
      {
        v94 = v20;
        *(_QWORD *)(v33 + 8 * v92 + 56) = 0;
        v95 = (unint64_t *)(8 * v92 + 184 * v31 + v30 + 8184);
        v96 = v93 - 1 - v92;
        while (v96)
        {
          v37 += 1024;
          v98 = *v95++;
          v97 = v98;
          LODWORD(v92) = v92 + 1;
          --v96;
          if (v98)
          {
            v36 = __rbit64(v97);
            *(_DWORD *)(v33 + 32) = v92;
            *(_QWORD *)(v33 + 24) = v37;
            v20 = v94;
            goto LABEL_12;
          }
        }
        *(_DWORD *)(v33 + 32) = v93;
        v20 = v94;
      }
    }
    *(_BYTE *)v33 = 0;
  }
  v99 = v20;
  casual = bmalloc_allocate_casual(v29 + 96, 1);
  v20 = v99;
  v35 = casual;
LABEL_14:
  *(_DWORD *)v35 = 1;
  *(_DWORD *)(v35 + 4) = v27;
  v39 = v35 + 96;
  if ((v26 & 1) == 0)
  {
    v74 = v35 + 96;
    do
    {
      *(_QWORD *)v74 = 0;
      *(_QWORD *)(v74 + 8) = 0;
      *(_BYTE *)(v74 + 16) = 0;
      *(_WORD *)(v74 + 17) &= 0xF000u;
      *(_OWORD *)(v74 + 19) = 0uLL;
      *(_OWORD *)(v74 + 35) = 0uLL;
      *(_OWORD *)(v74 + 51) = 0uLL;
      *(_QWORD *)(v74 + 64) = 0;
      *(_QWORD *)(v74 + 72) = 2;
      v74 += 80;
    }
    while (v74 != v39 + 80 * v27);
    v28 = *(unsigned int *)(v35 + 4);
    v27 = *(_DWORD *)(v35 + 4);
  }
  v40 = **a3;
  *(_QWORD *)(v35 + 32) = 0;
  v41 = (unint64_t *)(v35 + 32);
  *(_QWORD *)(v35 + 8) = v40;
  *(_QWORD *)(v35 + 16) = v40 + 4;
  v42 = (uint8x8_t)0xFFFFFFFF00000000;
  *(_QWORD *)(v35 + 24) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v35 + 40) = 0;
  *(_DWORD *)(v35 + 48) = 0;
  v43 = *a3;
  *a3 = 0;
  *(_QWORD *)(v35 + 64) = v43;
  *(_QWORD *)(v35 + 72) = 0;
  v44 = v118;
  v118 = 0;
  *(_QWORD *)(v35 + 80) = v9;
  *(_QWORD *)(v35 + 88) = v44;
  if (v27)
  {
    v59 = *(JSC::VM **)(v20 + 72);
    for (i = 80 * v28; i; i -= 80)
    {
      v61 = *v21;
      if ((*v21 & 1) != 0)
      {
        v104 = v41;
        v108 = v20;
        v113 = v39;
        v102 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
        if ((v61 & 2) != 0
          || ((v64 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v64 != 0x3FFFFFFF)
            ? (v65 = (_DWORD)v64 == -1)
            : (v65 = 1),
              v65))
        {
          v66 = 2;
        }
        else if (v64 >> 28)
        {
          v72 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v72 = v102;
          *(_DWORD *)(v72 + 8) = v64;
          v66 = 1;
          v102 = v72;
        }
        else
        {
          v66 = v102;
          v102 = v64 << 36;
        }
        v61 = v102 | v66;
        v20 = v108;
        v39 = v113;
        v41 = v104;
      }
      *(_QWORD *)(v39 + 64) = v20;
      *(_WORD *)(v39 + 17) &= ~0x100u;
      v62 = *(_QWORD *)(v39 + 72);
      if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
      {
        v109 = v20;
        v114 = v39;
        v105 = v41;
        WTF::fastFree(v62 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
        v41 = v105;
        v20 = v109;
        v39 = v114;
      }
      v63 = v61;
      if ((v61 & 1) != 0)
      {
        v106 = v41;
        v110 = v20;
        v115 = v39;
        v103 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
        if ((v61 & 2) != 0
          || ((v67 = *(_DWORD *)((v61 & 0xFFFFFFFF8) + 8), v101 = v67, v67 != 0x3FFFFFFF)
            ? (v68 = v67 == -1)
            : (v68 = 1),
              v68))
        {
          v69 = 2;
        }
        else if (v67 >> 28)
        {
          v73 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v73 = v103;
          *(_DWORD *)(v73 + 8) = v101;
          v69 = 1;
          v103 = v73;
        }
        else
        {
          v69 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
          v103 = v101 << 36;
        }
        v63 = v103 | v69;
        v20 = v110;
        v39 = v115;
        v41 = v106;
      }
      *(_QWORD *)(v39 + 72) = v63;
      *(_WORD *)(v39 + 17) = *(_WORD *)(v39 + 17) & 0xF10F | 0x10;
      if ((_BYTE)qword_1ECF4C789)
      {
        if ((v61 & 1) != 0)
          goto LABEL_78;
      }
      else
      {
        v111 = v20;
        v116 = v39;
        v107 = v41;
        JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)v39, v59, v14, v15, v16, v17, v18, v19, v42);
        v41 = v107;
        v20 = v111;
        v39 = v116;
        if ((v61 & 1) != 0)
        {
LABEL_78:
          v70 = v61 & 0xFFFFFFFF8;
          if ((v61 & 0xFFFFFFFF8) != 0)
          {
            v112 = v20;
            v117 = v39;
            v71 = v41;
            WTF::fastFree(v70, v13, v14, v15, v16, v17, v18, v19);
            v20 = v112;
            v39 = v117;
            v41 = v71;
          }
        }
      }
      v39 += 80;
    }
  }
  v45 = *((unsigned __int8 *)v22 + 4);
  if (v45 > 0x20 || ((1 << v45) & 0x100000014) == 0)
  {
    LODWORD(v46) = *((_DWORD *)v22 + 3);
    if (!(_DWORD)v46)
      goto LABEL_20;
    goto LABEL_19;
  }
  v46 = *(_QWORD *)(16 * (*((_DWORD *)v22 + 3) & 0xFFFFFFFE) + 0x40);
  if (v46)
  {
    if (*(_BYTE *)(v46 + 5) == 1)
    {
      v46 >>= 4;
    }
    else
    {
      LODWORD(v46) = *(_DWORD *)(v46 + 80);
      if ((_DWORD)v46)
LABEL_19:
        LODWORD(v46) = v46 & 0xFFFFFFFE;
    }
  }
LABEL_20:
  *(_DWORD *)(v35 + 24) = v46;
  *(_DWORD *)(v35 + 28) = *((_DWORD *)v22 + 2);
  v47 = v21[2];
  if (!v47)
  {
    *v41 = 0;
LABEL_24:
    v49 = v22[4];
    if (v49)
    {
      if ((v49 & 1) != 0)
        v49 &= ~1uLL;
      else
        v49 = *(_QWORD *)(v49 + 8);
    }
    *v41 = v49;
    goto LABEL_28;
  }
  if ((v47 & 1) != 0)
    v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
  else
    v48 = *(_QWORD *)(v47 + 8);
  *v41 = v48;
  if (!v48)
    goto LABEL_24;
LABEL_28:
  switch(v45)
  {
    case 0u:
    case 9u:
    case 0xAu:
    case 0xBu:
      *(_QWORD *)(v35 + 40) = 0;
      AlternateBase = JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v22);
      if (AlternateBase)
        *(_QWORD *)(v35 + 40) = AlternateBase;
      goto LABEL_112;
    case 2u:
      *(_DWORD *)(v35 + 40) = *((_DWORD *)v22 + 3);
      v51 = *((_DWORD *)v22 + 3);
      v52 = 16 * (v51 & 0xFFFFFFFE);
      if (!v51)
        v52 = 0;
      v53 = *(unsigned __int16 *)(v52 + 24);
      if (v53 == 65534)
        goto LABEL_37;
      if (v53 == 0xFFFF)
        v53 = *(_DWORD *)(*(_QWORD *)(v52 + 64) + 84);
      if (v53 < 64)
      {
LABEL_37:
        v54 = 0;
      }
      else if ((v53 - 63) >= 5)
      {
        v75 = (v53 - 64) | ((v53 - 64) >> 1) | (((v53 - 64) | ((v53 - 64) >> 1)) >> 2);
        v76 = v75 | (v75 >> 4) | ((v75 | (v75 >> 4)) >> 8);
        v54 = 8 * (v76 | HIWORD(v76)) + 8;
      }
      else
      {
        v54 = 32;
      }
      *(_DWORD *)(v35 + 44) = v54;
      v77 = *((unsigned __int8 *)v22 + 4);
      if (v77 > 0x20 || ((1 << v77) & 0x100000014) == 0)
      {
        v78 = *((_DWORD *)v22 + 3);
        goto LABEL_97;
      }
      v79 = *(_QWORD *)(16 * (*((_DWORD *)v22 + 3) & 0xFFFFFFFE) + 0x40);
      if (v79 && *(_BYTE *)(v79 + 5) != 1)
      {
        v78 = *(_DWORD *)(v79 + 80);
LABEL_97:
        if (v78)
          v79 = 16 * (v78 & 0xFFFFFFFE);
        else
          v79 = 0;
      }
      v80 = *(unsigned __int16 *)(v79 + 24);
      if (v80 == 65534)
        goto LABEL_104;
      if (v80 == 0xFFFF)
        v80 = *(_DWORD *)(*(_QWORD *)(v79 + 64) + 84);
      if (v80 < 64)
      {
LABEL_104:
        v81 = 0;
      }
      else if ((v80 - 63) >= 5)
      {
        v82 = (v80 - 64) | ((v80 - 64) >> 1) | (((v80 - 64) | ((v80 - 64) >> 1)) >> 2);
        v83 = v82 | (v82 >> 4) | ((v82 | (v82 >> 4)) >> 8);
        v81 = 8 * (v83 | HIWORD(v83)) + 8;
      }
      else
      {
        v81 = 32;
      }
      *(_DWORD *)(v35 + 48) = v81;
      goto LABEL_112;
    case 4u:
    case 0x20u:
      *(_DWORD *)(v35 + 40) = *((_DWORD *)v22 + 3);
      goto LABEL_112;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      *(_QWORD *)(v35 + 40) = 0;
      v55 = *((unsigned __int8 *)v22 + 4);
      if (v55 > 0x20 || ((1 << v55) & 0x100000014) == 0)
      {
        v56 = *((_DWORD *)v22 + 3);
        goto LABEL_44;
      }
      v57 = *(_QWORD *)(16 * (*((_DWORD *)v22 + 3) & 0xFFFFFFFE) + 0x40);
      if (v57 && *(_BYTE *)(v57 + 5) != 1)
      {
        v56 = *(_DWORD *)(v57 + 80);
LABEL_44:
        if (v56)
          v57 = 16 * (v56 & 0xFFFFFFFE);
        else
          v57 = 0;
      }
      v58 = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v22);
      if (v58)
      {
        v57 = 16 * (*v58 & 0xFFFFFFFE);
        *(_QWORD *)(v35 + 40) = v58;
      }
      *(_QWORD *)(v35 + 48) = *(_QWORD *)(v57 + 40);
      *(_QWORD *)(v35 + 56) = v22[7];
LABEL_112:
      v84 = (unsigned int *)a2[3];
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 + 1, v84));
      v86 = *(unsigned int **)(v35 + 72);
      *(_QWORD *)(v35 + 72) = v84;
      if (v86)
      {
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          atomic_store(1u, v86);
          JSC::AccessCase::operator delete((unint64_t)v86, v13, v14, v15, v16, v17, v18, v19);
        }
      }
      result = JSC::isMegamorphic(*((unsigned __int8 *)a2[3] + 4));
      if ((result & 1) != 0)
      {
        v90 = 5;
      }
      else if (*((_DWORD *)a2[4] + 3) < dword_1ECF4C42C)
      {
        v90 = 3;
      }
      else
      {
        v90 = 4;
      }
      *(_DWORD *)a1 = v90;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = v35;
      return result;
    case 0x18u:
      *(_QWORD *)(v35 + 40) = v22[5];
      *(_QWORD *)(v35 + 48) = v22[6] + 8 * *((unsigned int *)v22 + 14) + 32;
      goto LABEL_112;
    case 0x1Au:
      v91 = v22[4];
      goto LABEL_130;
    case 0x1Cu:
    case 0x1Du:
      v91 = v22[5];
LABEL_130:
      *(_QWORD *)(v35 + 40) = v91;
      goto LABEL_112;
    default:
      goto LABEL_112;
  }
}

void JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>(uint64_t *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = a2;
  a1[1] = 0;
  if (a3)
  {
    do
      v9 = __ldaxr(a3);
    while (__stlxr(v9 + 1, a3));
    v10 = (unsigned int *)a1[1];
    a1[1] = (uint64_t)a3;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
}

_QWORD *JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v9 = a2[1];
  a2[1] = 0;
  v10 = (unsigned int *)a1[1];
  a1[1] = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return a1;
}

__n128 JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(JSC::VM **a1, uint64_t *a2, unsigned int *a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const JSC::PropertyTable *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  __n128 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;

  if (a5)
  {
    v8 = a4;
    v10 = a4 + 24 * a5;
    do
    {
      v11 = *a1;
      v12 = *(unsigned __int8 *)(v8 + 14);
      v13 = WTF::fastMalloc((WTF *)0x68);
      v20 = (_QWORD *)v13;
      if (v12 << 48 == 0x5000000000000)
      {
        *(_QWORD *)v13 = off_1E3580B60;
        v29 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)(v13 + 8) = *(_OWORD *)v8;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 24) = v29;
        *(_BYTE *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = 0;
        *(_BYTE *)(v13 + 72) = 1;
        if ((unint64_t)*(unsigned __int8 *)(v8 + 14) << 48 != 0x5000000000000)
          goto LABEL_24;
        *(_QWORD *)v13 = off_1E3583610;
        do
          v30 = __ldaxr(a3);
        while (__stlxr(v30 + 1, a3));
        *(_QWORD *)(v13 + 80) = a3;
        if ((unint64_t)*(unsigned __int8 *)(v8 + 14) << 48 != 0x5000000000000)
          goto LABEL_24;
        *(_DWORD *)(v13 + 88) = 1;
        *(_QWORD *)(v13 + 96) = 0;
        *(_QWORD *)(v13 + 96) = *a2;
        *a2 = v13;
        JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v13, v11, v14, v15, v16, v17, v18, v19);
      }
      else
      {
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        *(_BYTE *)(v13 + 16) = 9;
        do
          v21 = __ldaxr(a3);
        while (__stlxr(v21 + 1, a3));
        *(_QWORD *)(v13 + 24) = a3;
        result = *(__n128 *)v8;
        *(_QWORD *)(v13 + 48) = *(_QWORD *)(v8 + 16);
        *(__n128 *)(v13 + 32) = result;
        *(_DWORD *)(v13 + 88) = 0;
        *(_QWORD *)(v13 + 96) = 0;
        *(_QWORD *)(v13 + 96) = *a2;
        v23 = *(unsigned __int8 *)(v8 + 14);
        *a2 = v13;
        if (v23 << 48 == 0x5000000000000)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
          __break(0xC471u);
          JUMPOUT(0x1981DA22CLL);
        }
        v24 = 16 * (**(_DWORD **)v8 & 0xFFFFFFFE);
        v25 = *(_QWORD *)(v24 + 0x60);
        if ((v25 & 1) != 0)
        {
          v28 = (v25 >> 1) & 3;
          v25 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v25 = 1;
          *(_BYTE *)(v25 + 4) = v28;
          *(_BYTE *)(v25 + 5) = 0;
          *(_QWORD *)(v25 + 8) = v25 + 8;
          *(_QWORD *)(v25 + 16) = v25 + 8;
          __dmb(0xAu);
          *(_QWORD *)(v24 + 96) = v25;
        }
        v27 = *(_QWORD *)(v25 + 8);
        v26 = (_QWORD *)(v25 + 8);
        *v20 = v27;
        v20[1] = v26;
        *v26 = v20;
        *(_QWORD *)(v27 + 8) = v20;
        *((_WORD *)v26 - 2) = 257;
      }
      v8 += 24;
    }
    while (v8 != v10);
  }
  v31 = *(unsigned int *)(a6 + 12);
  if ((_DWORD)v31)
  {
    v32 = *(uint64_t **)a6;
    v33 = *(_QWORD *)a6 + 8 * v31;
    do
    {
      v34 = *v32;
      v35 = WTF::fastMalloc((WTF *)0x68);
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v35 + 8) = 0;
      *(_BYTE *)(v35 + 16) = 9;
      do
        v36 = __ldaxr(a3);
      while (__stlxr(v36 + 1, a3));
      *(_QWORD *)(v35 + 24) = a3;
      result = 0uLL;
      *(_OWORD *)(v35 + 32) = 0uLL;
      *(_QWORD *)(v35 + 48) = 0;
      *(_DWORD *)(v35 + 88) = 0;
      *(_QWORD *)(v35 + 96) = 0;
      *(_QWORD *)(v35 + 96) = *a2;
      *a2 = v35;
      v38 = *(_QWORD *)(v34 + 8);
      v37 = (uint64_t *)(v34 + 8);
      *(_QWORD *)v35 = v38;
      *(_QWORD *)(v35 + 8) = v37;
      *v37 = v35;
      *(_QWORD *)(v38 + 8) = v35;
      *((_WORD *)v37 - 2) = 257;
      ++v32;
    }
    while (v32 != (uint64_t *)v33);
  }
  return result;
}

unsigned int *JSC::InlineCacheCompiler::compileGetByDOMJITHandler(uint64_t *a1, uint64_t a2, JSC::CodeBlock *a3, uint64_t a4, __int16 a5)
{
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t *v64;
  int v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  _QWORD *v75;
  unint64_t v76;
  WTF *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  pthread_key_t *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  unsigned int v112;
  char v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  unsigned int v140;
  _QWORD *v141;
  unint64_t v142;
  unsigned int v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  WTF *v147;
  int v148;
  _BYTE *v149;
  WTF *v150;
  char *v151;
  WTF *v152;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  JSC::ExecutableMemoryHandle *v168;
  int v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  _BYTE v173[24];
  _QWORD v174[5];
  int v175;
  char v176;
  _QWORD v177[3];
  _QWORD v178[2];
  WTF *v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  _BYTE v183[128];
  unsigned int v184;
  char v185;
  int v186;
  int v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  _QWORD v191[7];
  _QWORD v192[17];
  unsigned int v193;
  unsigned int v194;
  char v195;
  uint64_t v196;
  char v197;
  int v198;
  uint64_t v199;
  char v200;
  int v201;
  uint64_t v202;

  v6 = a4;
  v202 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(unsigned __int16 *)(v10 + 129);
  v12 = (_QWORD *)(*((_QWORD *)a3 + 9) + 90448);
  v13 = *v12;
  v14 = (((v11 >> 7) & 1) << 24) | ((unint64_t)((v11 >> 3) & 1) << 32) | ((unint64_t)((v11 >> 5) & 1) << 16) | ((unint64_t)((v11 >> 6) & 1) << 8) | *(unsigned __int8 *)(v10 + 122);
  v191[0] = v14;
  v191[1] = a4;
  v15 = WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>>>,std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>((uint64_t *)(v13 + 16), (unsigned __int8 *)v191);
  if (!v15)
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_11;
  }
  v23 = *((_QWORD *)v15 + 2);
  *a1 = v23;
  result = (unsigned int *)*((_QWORD *)v15 + 3);
  if (result)
  {
    do
      v25 = __ldaxr(result);
    while (__stlxr(v25 + 1, result));
    v23 = *a1;
  }
  a1[1] = (uint64_t)result;
  if (!v23)
  {
    a1[1] = 0;
    if (result)
    {
      do
      {
        v26 = __ldaxr(result);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, result));
      if (!v27)
      {
        atomic_store(1u, result);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)result, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
LABEL_11:
    JSC::InlineCacheCompiler::makeDefaultScratchAllocator((uint64_t)v174, *(_QWORD *)(a2 + 16), 0xFFu);
    *(_QWORD *)(a2 + 40) = v174;
    *(_BYTE *)(a2 + 176) = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)v174);
    JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v191, a3);
    *(_QWORD *)(a2 + 32) = v191;
    v43 = v194;
    if (v194 + 4 > v193)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v192, v36, v37, v38, v39, v40, v41, v42);
      v43 = v194;
    }
    *(_DWORD *)(v192[0] + v43) = -1447068675;
    v194 += 4;
    v171 = (WTF *)v173;
    v172 = 2;
    *(_QWORD *)(a2 + 168) = JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(v174, (JSC::ScratchRegisterAllocator *)v191, 1, v38, v39, v40, v41, v42);
    v51 = *(_BYTE *)(a2 + 176);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v191, "check structure");
    v52 = v194;
    if (v194 + 4 > v193)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v192, v44, v45, v46, v47, v48, v49, v50);
      v52 = v194;
    }
    *(_DWORD *)(v192[0] + v52) = v51 & 0x1F | 0xB8400000;
    v53 = v194;
    v54 = v194 + 4;
    v194 += 4;
    if (v195)
    {
      *(_DWORD *)(v199 + 208) &= ~v201;
      v55 = v200 & 0x1F | 0xB8418120;
      if (v53 + 8 > v193)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v192, v44, v45, v46, v47, v48, v49, v50);
        v54 = v194;
      }
      *(_DWORD *)(v192[0] + v54) = v55;
      v194 += 4;
      JSC::MacroAssemblerARM64::branch32((uint64_t)v191, 1, v51, 17, v47, v48, v49, v50, (uint64_t)&v169);
      v61 = v169;
      if (v169 != -1)
      {
        v62 = HIDWORD(v172);
        if (HIDWORD(v172) == (_DWORD)v172)
        {
          v63 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v171, (void *)(HIDWORD(v172) + 1), (unint64_t)&v169, v56, v57, v58, v59, v60);
          v65 = *v63;
          v64 = (uint64_t *)(v63 + 1);
          v61 = v65;
          v62 = HIDWORD(v172);
        }
        else
        {
          v64 = &v170;
        }
        v66 = (char *)v171 + 12 * v62;
        *(_DWORD *)v66 = v61;
        *(_QWORD *)(v66 + 4) = *v64;
        ++HIDWORD(v172);
      }
      if ((a5 & 0xFF00) == 0)
      {
LABEL_26:
        JSC::InlineCacheCompiler::emitDOMJITGetter((JSC::InlineCacheCompiler *)a2, 0, v6, 0, v57, v58, v59, v60);
        v74 = HIDWORD(v172);
        if (HIDWORD(v172))
        {
          v75 = v12;
          v165 = v6;
          v76 = v14;
          v77 = v171;
          v78 = *(unsigned int *)(a2 + 96);
          v79 = *(unsigned int *)(a2 + 100);
          v80 = v79 + HIDWORD(v172);
          if (v80 > v78)
          {
            v81 = v78 + (v78 >> 2);
            if (v81 >= 0x10)
              v82 = v81 + 1;
            else
              v82 = 16;
            if (v82 <= v80)
              v82 = v79 + HIDWORD(v172);
            v83 = *(_QWORD *)(a2 + 88);
            if (v82 < 3)
            {
              v85 = a2 + 104;
              *(_QWORD *)(a2 + 88) = a2 + 104;
              *(_DWORD *)(a2 + 96) = 2;
            }
            else
            {
              if (v82 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x1981DAC98);
              }
              v84 = 12 * v82;
              v85 = WTF::fastMalloc((WTF *)(12 * v82));
              *(_DWORD *)(a2 + 96) = (v84 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)(a2 + 88) = v85;
            }
            if ((_DWORD)v79)
            {
              v86 = v83;
              do
              {
                *(_DWORD *)v85 = *(_DWORD *)v86;
                *(_QWORD *)(v85 + 4) = *(_QWORD *)(v86 + 4);
                v86 += 12;
                v85 += 12;
              }
              while (v86 != v83 + 12 * v79);
            }
            if (a2 + 104 != v83 && v83)
            {
              if (*(_QWORD *)(a2 + 88) == v83)
              {
                *(_QWORD *)(a2 + 88) = 0;
                *(_DWORD *)(a2 + 96) = 0;
              }
              WTF::fastFree(v83, v67, v68, v69, v70, v71, v72, v73);
            }
          }
          v87 = *(unsigned int *)(a2 + 100);
          if (v80 < v87)
          {
            __break(0xC471u);
            JUMPOUT(0x1981DAC90);
          }
          v88 = *(_QWORD *)(a2 + 88) + 12 * v87;
          v89 = (WTF *)((char *)v77 + 12 * v74);
          v12 = v75;
          do
          {
            *(_DWORD *)v88 = *(_DWORD *)v77;
            *(_QWORD *)(v88 + 4) = *(_QWORD *)((char *)v77 + 4);
            v77 = (WTF *)((char *)v77 + 12);
            v88 += 12;
          }
          while (v77 != v89);
          *(_DWORD *)(a2 + 100) = v80;
          v14 = v76;
          v6 = v165;
        }
        v90 = *(unsigned int *)(a2 + 140);
        if ((_DWORD)v90)
        {
          v154 = 0;
          v155 = 0;
          v156 = 12 * v90;
          do
          {
            if (v155 >= *(unsigned int *)(a2 + 140))
            {
              __break(0xC471u);
              JUMPOUT(0x1981DAC88);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a2 + 128) + v154), (uint64_t)v191, v68, v69, v70, v71, v72, v73);
            ++v155;
            v154 += 12;
          }
          while (v156 != v154);
          if ((_BYTE)word_1ECF4C286)
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v191, "failAndIgnore");
          JSC::MacroAssemblerARM64::add8((uint64_t)v191, *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 120) | 0x7C00000000, v68, v69, v70, v71, v72, v73);
        }
        v91 = *(unsigned int *)(a2 + 100);
        if ((_DWORD)v91)
        {
          v92 = 0;
          v93 = 0;
          v94 = 12 * v91;
          do
          {
            if (v93 >= *(unsigned int *)(a2 + 100))
            {
              __break(0xC471u);
              JUMPOUT(0x1981DAC80);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a2 + 88) + v92), (uint64_t)v191, v68, v69, v70, v71, v72, v73);
            ++v93;
            v92 += 12;
          }
          while (v94 != v92);
        }
        if (v175)
          JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(*(_QWORD *)(a2 + 40), *(const char **)(a2 + 32), (const char *)(a2 + 168), v69, v70, v71, v72, v73);
        v95 = v194;
        if (v194 + 4 > v193)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v192, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
          v95 = v194;
        }
        *(_DWORD *)(v192[0] + v95) = -129662679;
        v96 = v194;
        v97 = v194 + 4;
        v194 += 4;
        if (!v195)
        {
          __break(0xC471u);
          JUMPOUT(0x1981DAC2CLL);
        }
        *(_DWORD *)(v196 + 208) &= ~v198;
        v98 = v197 & 0x1F | 0xF8410120;
        if (v96 + 8 > v193)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v192, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
          v97 = v194;
        }
        *(_DWORD *)(v192[0] + v97) = v98;
        v99 = v194;
        v100 = v194 + 4;
        v194 += 4;
        if (v99 + 8 > v193)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v192, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
          v100 = v194;
        }
        *(_DWORD *)(v192[0] + v100) = -702610944;
        v194 += 4;
        v179 = 0;
        v180 = 0;
        v181 = -1;
        v182 = (WTF *)v183;
        v184 = 128;
        v101 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
        if (v101 != -1)
        {
          v177[0] = &v176;
          v178[0] = v177;
          std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v178, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
        }
        v102 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
        v110 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
        if (!v110)
        {
          v110 = WTF::fastMalloc((WTF *)0x98);
          WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v110, v102);
        }
        v111 = *(WTF **)v110;
        if (*(_QWORD *)v110 != v110 + 8)
        {
          v112 = *(_DWORD *)(v110 + 136);
          if (v184 < v112)
          {
            if (v182 && v182 != (WTF *)v183)
            {
              WTF::fastFree((unint64_t)v182, v103, v104, v105, v106, v107, v108, v109);
              v111 = *(WTF **)v110;
              v112 = *(_DWORD *)(v110 + 136);
            }
            v182 = v111;
            v184 = v112;
            *(_QWORD *)v110 = v110 + 8;
            *(_DWORD *)(v110 + 136) = 128;
          }
        }
        v113 = 1;
        v185 = 1;
        v186 = 0;
        v187 = 6;
        v188 = 0u;
        v189 = 0u;
        v190 = 0;
        JSC::LinkBuffer::linkCode((uint64_t)&v179, (uint64_t)v191, 0, v105, v106, v107, v108, v109);
        if (!(_BYTE)v186)
        {
          *a1 = 0;
          a1[1] = 0;
LABEL_82:
          JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v179, v114, v115, v116, v117, v118, v119, v120);
          v134 = v171;
          if (v173 != (_BYTE *)v171 && v171 != 0)
          {
            v171 = 0;
            LODWORD(v172) = 0;
            WTF::fastFree((unint64_t)v134, v127, v128, v129, v130, v131, v132, v133);
          }
          return (unsigned int *)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v191, v127, v128, v129, v130, v131, v132, v133);
        }
        BYTE2(v186) = 1;
        if (!byte_1ECF4C288)
        {
          if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
          {
            JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)49594>((uint64_t)&v179, "GetById DOMJIT handler", 23, a1);
LABEL_76:
            v121 = *v12;
            v122 = (unsigned int *)a1[1];
            v167 = *a1;
            if (v122)
            {
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 + 1, v122));
            }
            v168 = (JSC::ExecutableMemoryHandle *)v122;
            v178[0] = v14;
            v178[1] = v6;
            WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::add<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>((uint64_t *)(v121 + 16), (unsigned __int8 *)v178, &v167, (uint64_t)v177);
            v124 = (unsigned int *)v168;
            v168 = 0;
            if (v124)
            {
              do
              {
                v125 = __ldaxr(v124);
                v126 = v125 - 1;
              }
              while (__stlxr(v126, v124));
              if (!v126)
              {
                atomic_store(1u, v124);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v124, (uint64_t)v114, v115, v116, v117, v118, v119, v120);
                WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
              }
            }
            goto LABEL_82;
          }
          v113 = HIBYTE(word_1ECF4C286) != 0;
        }
        JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v179, v113, "GetById DOMJIT handler", 23, "GetById DOMJIT handler", a1);
        goto LABEL_76;
      }
      JSC::InlineCacheCompiler::emitDataICCheckUid((uint64_t)&v179, (uint64_t)v191, a5 != 0, *(char *)(a2 + 176), v57, v58, v59, v60);
      v139 = v179;
      v140 = HIDWORD(v180);
      if (!HIDWORD(v180))
      {
LABEL_113:
        if (&v181 != (uint64_t *)v139 && v139 != 0)
        {
          v179 = 0;
          LODWORD(v180) = 0;
          WTF::fastFree((unint64_t)v139, v136, v137, v138, v57, v58, v59, v60);
        }
        goto LABEL_26;
      }
      v141 = v12;
      v166 = v6;
      v142 = v14;
      v143 = HIDWORD(v172);
      v144 = HIDWORD(v172) + (unint64_t)HIDWORD(v180);
      if (v144 <= v172)
      {
LABEL_109:
        if (v144 < HIDWORD(v172))
        {
          __break(0xC471u);
          JUMPOUT(0x1981DACA0);
        }
        v151 = (char *)v171 + 12 * HIDWORD(v172);
        v152 = (WTF *)((char *)v139 + 12 * v140);
        v12 = v141;
        do
        {
          *(_DWORD *)v151 = *(_DWORD *)v139;
          *(_QWORD *)(v151 + 4) = *(_QWORD *)((char *)v139 + 4);
          v139 = (WTF *)((char *)v139 + 12);
          v151 += 12;
        }
        while (v139 != v152);
        HIDWORD(v172) = v144;
        v139 = v179;
        v14 = v142;
        v6 = v166;
        goto LABEL_113;
      }
      v145 = v172 + ((unint64_t)v172 >> 2);
      if (v145 >= 0x10)
        v146 = v145 + 1;
      else
        v146 = 16;
      if (v146 <= v144)
        v146 = HIDWORD(v172) + (unint64_t)HIDWORD(v180);
      v147 = v171;
      if (v146 < 3)
      {
        v149 = v173;
        v171 = (WTF *)v173;
        LODWORD(v172) = 2;
        goto LABEL_101;
      }
      if (v146 < 0x15555556)
      {
        v148 = 12 * v146;
        v149 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v146));
        LODWORD(v172) = (v148 & 0xFFFFFFFC) / 0xC;
        v171 = (WTF *)v149;
LABEL_101:
        if (v143)
        {
          v150 = v147;
          do
          {
            *(_DWORD *)v149 = *(_DWORD *)v150;
            *(_QWORD *)(v149 + 4) = *(_QWORD *)((char *)v150 + 4);
            v150 = (WTF *)((char *)v150 + 12);
            v149 += 12;
          }
          while (v150 != (WTF *)((char *)v147 + 12 * v143));
        }
        if (v173 != (_BYTE *)v147 && v147)
        {
          if (v171 == v147)
          {
            v171 = 0;
            LODWORD(v172) = 0;
          }
          WTF::fastFree((unint64_t)v147, v136, v137, v138, v57, v58, v59, v60);
        }
        goto LABEL_109;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1981DABECLL);
  }
  return result;
}

void JSC::InlineCacheCompiler::compileOneAccessCaseHandler(JSC::PolymorphicAccess &,JSC::CodeBlock *,JSC::AccessCase &,WTF::Vector<JSC::WatchpointSet *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_3::operator()(uint64_t a1, uint64_t a2, JSC::JITStubRoutine **a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  JSC::JITStubRoutine *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8x8_t v25;
  JSC::JITStubRoutine *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::JITStubRoutine *v55;
  JSC::InlineCacheHandler *v56;
  uint64_t v57;
  uint64_t *v58;

  v8 = *(_QWORD *)(a2 + 8);
  v58 = 0;
  if (*((_QWORD *)*a3 + 11))
  {
    v9 = *(uint64_t **)a2;
    v10 = *(_QWORD *)(v8 + 16);
    v11 = WTF::fastMalloc((WTF *)0x20);
    v12 = *v9;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_BYTE *)(v11 + 16) = 10;
    *(_DWORD *)(v11 + 17) = v12;
    *(_BYTE *)(v11 + 21) = BYTE4(v12);
    *(_QWORD *)(v11 + 24) = v10;
    v58 = (uint64_t *)v11;
    v13 = (uint64_t *)*((_QWORD *)*a3 + 9);
    v14 = v13[1];
    ++v13;
    *(_QWORD *)v11 = v14;
    *(_QWORD *)(v11 + 8) = v13;
    *v13 = v11;
    *(_QWORD *)(v14 + 8) = v11;
    *((_WORD *)v13 - 2) = 257;
  }
  JSC::InlineCacheCompiler::generateSlowPathHandler(*(_QWORD *)(a2 + 16), *(char *)(*(_QWORD *)(v8 + 16) + 122), (uint64_t *)&v56);
  v15 = **(_QWORD **)a2;
  v16 = *(uint64_t **)(v8 + 16);
  v17 = *a3;
  *((_DWORD *)v17 + 4) = *((_DWORD *)*a3 + 4) + 1;
  v55 = v17;
  JSC::InlineCacheHandler::create(&v57, (uint64_t *)&v56, v15, v16, (uint64_t **)&v55, (uint64_t *)&v58, a4);
  v26 = v55;
  if (v55)
  {
    v46 = *((_DWORD *)v55 + 4) - 1;
    *((_DWORD *)v55 + 4) = v46;
    if (!v46)
      JSC::JITStubRoutine::observeZeroRefCount(v26, v18, v19, v20, v21, v22, v23, v24, v25);
  }
  if (v56)
  {
    if (*(_DWORD *)v56 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v56, v18, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      --*(_DWORD *)v56;
    }
  }
  v27 = *((_QWORD *)*a3 + 7);
  if (!*(_DWORD *)v27)
  {
    __break(0xC471u);
    JUMPOUT(0x1981DAEB4);
  }
  v28 = v57;
  v29 = *(unsigned int **)(v27 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  v31 = *(unsigned int **)(v28 + 72);
  *(_QWORD *)(v28 + 72) = v29;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      JSC::AccessCase::operator delete((unint64_t)v31, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  if ((JSC::isMegamorphic(*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 4)) & 1) != 0)
  {
    v41 = 5;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 12) < dword_1ECF4C42C)
  {
    v41 = 3;
  }
  else
  {
    v41 = 4;
  }
  *(_DWORD *)a1 = v41;
  v43 = v57;
  v42 = v58;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v43;
  if (v42)
  {
    v44 = (uint64_t *)v42[1];
    if (v44)
    {
      v45 = *v42;
      *v44 = *v42;
      *(_QWORD *)(v45 + 8) = v44;
      *v42 = 0;
      v42[1] = 0;
    }
    WTF::fastFree((unint64_t)v42, v34, v35, v36, v37, v38, v39, v40);
  }
}

void JSC::SharedJITStubSet::remove(uint64_t *a1, uint64_t a2, uint8x8_t a3)
{
  uint64_t v3;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  JSC::AccessCase **v26;
  uint64_t v27;
  unsigned int v28;

  v3 = *a1;
  if (!*a1)
    return;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *(_DWORD *)(a2 + 20);
  if (!v7)
  {
    v26 = *(JSC::AccessCase ***)(a2 + 56);
    if (v26)
    {
      v28 = *(_DWORD *)v26++;
      v27 = v28;
    }
    else
    {
      v27 = 0;
    }
    v7 = JSC::PolymorphicAccessJITStubRoutine::computeHash(v26, v27);
    *(_DWORD *)(a2 + 20) = v7;
  }
  v8 = v7 & v6;
  v9 = v3 + 16 * (v7 & v6);
  if (WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::isEmptyBucket(v9, a3))
  {
LABEL_10:
    v18 = *a1;
    if (!*a1)
      return;
    v19 = *(unsigned int *)(v18 - 4);
    v9 = v18 + 16 * v19;
LABEL_14:
    v18 += 16 * v19;
    if (v18 == v9)
      return;
    goto LABEL_15;
  }
  v16 = 1;
  while (*(_QWORD *)v9 == 1 || *(_QWORD *)v9 != a2)
  {
    v8 = (v8 + v16) & v6;
    v9 = v3 + 16 * v8;
    ++v16;
    if (WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::isEmptyBucket(v9, v15))
    {
      goto LABEL_10;
    }
  }
  v18 = *a1;
  if (*a1)
  {
    v19 = *(unsigned int *)(v18 - 4);
    goto LABEL_14;
  }
LABEL_15:
  if (v18 != v9)
  {
    *(_QWORD *)v9 = 1;
    *(_DWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 12) = 0;
    ++*(_DWORD *)(*a1 - 16);
    v20 = *a1;
    v21 = *a1 ? *(_DWORD *)(v20 - 12) - 1 : -1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a1;
    if (*a1)
    {
      v23 = 6 * *(_DWORD *)(v22 - 12);
      v24 = *(_DWORD *)(v22 - 4);
      if (v23 < v24 && v24 >= 9)
        WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::rehash(a1, v24 >> 1, 0, v10, v11, v12, v13, v14);
    }
  }
}

void JSC::PolymorphicAccess::addCases(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, JSC::AccessCase **a6@<X5>, const JSC::AccessCase **a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint8x8_t v13;
  JSC::AccessCase *v14;
  const JSC::AccessCase *v15;
  unint64_t v16;
  JSC::InlineCacheHandler **v17;
  unint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  WTF *v22;
  WTF *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  WTF *v61;
  WTF *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v67;
  JSC::InlineCacheHandler *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  unsigned int v72;
  int v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  WTF *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int canReplace;
  uint64_t v105;
  int v106;
  unsigned int *v107;
  uint64_t v108;
  WTF *v109;
  const JSC::AccessCase *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int v125;
  uint64_t v126;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  BOOL v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int v146;
  _QWORD *v147;
  _QWORD *v148;
  int v149;
  uint64_t v150;
  unsigned int *v151;
  _DWORD *v152;
  __int16 v153;
  uint64_t v154;
  unsigned int *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  int v158;
  uint64_t *v159;
  WTF *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int **v169;
  uint64_t v170;
  unsigned int **v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  WTF *v177;
  uint64_t v178;
  _BYTE v179[24];
  WTF *v180;
  uint64_t v181;
  _QWORD v182[16];
  unsigned int *v183;
  void (**v184)(JSC::StringFireDetail *__hidden);
  const char *v185;

  v180 = (WTF *)v182;
  v13 = (uint8x8_t)16;
  v181 = 16;
  v14 = *a6;
  if (*a6)
  {
    v103 = a3;
    v183 = (unsigned int *)*a6;
    *a6 = 0;
    canReplace = JSC::AccessCase::canReplace(v14, *a7);
    LODWORD(v105) = HIDWORD(v181);
    if (canReplace)
    {
      if (HIDWORD(v181) == (_DWORD)v181)
      {
        WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>((uint64_t)&v180, (unint64_t)&v183);
      }
      else
      {
        v155 = v183;
        v183 = 0;
        *((_QWORD *)v180 + HIDWORD(v181)) = v155;
        HIDWORD(v181) = v105 + 1;
      }
      a3 = v103;
    }
    else
    {
      v106 = v181;
      if (HIDWORD(v181) == (_DWORD)v181)
      {
        v159 = (uint64_t *)WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v180, HIDWORD(v181) + 1, (unint64_t)&v183);
        v105 = HIDWORD(v181);
        v160 = v180;
        v161 = *v159;
        *v159 = 0;
        *((_QWORD *)v160 + v105) = v161;
        v106 = v181;
      }
      else
      {
        v107 = v183;
        v183 = 0;
        *((_QWORD *)v180 + HIDWORD(v181)) = v107;
      }
      v108 = (v105 + 1);
      HIDWORD(v181) = v108;
      if ((_DWORD)v108 == v106)
      {
        v162 = (uint64_t *)WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v180, v108 + 1, (unint64_t)a7);
        a3 = v103;
        v163 = HIDWORD(v181);
        v164 = HIDWORD(v181) + 1;
        v165 = v180;
        v166 = *v162;
        *v162 = 0;
        *((_QWORD *)v165 + v163) = v166;
        HIDWORD(v181) = v164;
      }
      else
      {
        a3 = v103;
        v109 = v180;
        v110 = *a7;
        *a7 = 0;
        *((_QWORD *)v109 + v108) = v110;
        HIDWORD(v181) = v105 + 2;
      }
    }
    v111 = v183;
    v183 = 0;
    if (v111)
    {
      do
      {
        v112 = __ldaxr(v111);
        v113 = v112 - 1;
      }
      while (__stlxr(v113, v111));
      if (!v113)
      {
        atomic_store(1u, v111);
        JSC::AccessCase::operator delete((unint64_t)v111, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
        a3 = v103;
      }
    }
    v16 = HIDWORD(v181);
    if (!HIDWORD(v181))
    {
      *(_DWORD *)a9 = 0;
      *(_QWORD *)(a9 + 16) = 0;
      *(_QWORD *)(a9 + 24) = 0;
      *(_QWORD *)(a9 + 8) = 0;
      goto LABEL_89;
    }
  }
  else
  {
    v15 = *a7;
    *a7 = 0;
    v182[0] = v15;
    v16 = 1;
    HIDWORD(v181) = 1;
  }
  if (*(_BYTE *)(a5 + 122) == 22)
  {
LABEL_101:
    if (!HIDWORD(v181))
    {
      v16 = 0;
LABEL_153:
      *(_DWORD *)a9 = 2;
      *(_QWORD *)(a9 + 16) = 0;
      *(_QWORD *)(a9 + 24) = 0;
      *(_QWORD *)(a9 + 8) = 0;
      goto LABEL_82;
    }
    v69 = v180;
    v70 = (WTF *)((char *)v180 + 8 * HIDWORD(v181));
LABEL_103:
    v71 = *(_QWORD *)v69;
    v177 = (WTF *)v179;
    v178 = 3;
    v72 = *(unsigned __int8 *)(v71 + 4);
    if (v72 > 0x20 || ((1 << v72) & 0x100000014) == 0)
    {
      v74 = *(_DWORD *)(v71 + 12);
    }
    else
    {
      v75 = *(_QWORD *)(16 * (*(_DWORD *)(v71 + 12) & 0xFFFFFFFE) + 0x40);
      if (!v75)
      {
        v76 = *(_QWORD *)(v71 + 32);
        if (!v76)
          goto LABEL_132;
LABEL_116:
        v78 = *(_QWORD *)(v71 + 16);
        if (v78)
          v79 = v78 + 8;
        else
          v79 = 0;
        if (v78)
          v80 = v78 + 8 + 24 * *(unsigned int *)(v78 + 4);
        else
          v80 = 0;
        while (1)
        {
          if (v79 == v80)
          {
            v83 = *(_QWORD *)(v71 + 24);
            if (v83)
            {
              v150 = 0;
              v151 = *(unsigned int **)(v83 + 8);
              if (v151)
                v152 = v151 + 1;
              else
                v152 = 0;
              if (v151)
                v150 = (uint64_t)&v151[*v151 + 1];
              while (v152 != (_DWORD *)v150)
              {
                if ((*(_DWORD *)(16 * (*v152 & 0xFFFFFFFE) + 0x10) & 3) != 2)
                {
                  v153 = *(_WORD *)(16 * (*v152 & 0xFFFFFFFE) + 0xC);
                  if ((v153 & 0x18) == 0x10 && (v153 & 0x20) != 0)
                    goto LABEL_256;
                }
                ++v152;
              }
            }
LABEL_132:
            if (v72 - 8 < 8 || !v72)
            {
              v84 = *(unsigned int **)(v71 + 40);
              v183 = v84;
              if (v84)
              {
                v149 = HIDWORD(v178);
                if (HIDWORD(v178) == (_DWORD)v178)
                {
                  v172 = a3;
                  WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v177, (unint64_t)&v183);
                  a3 = v172;
                }
                else
                {
                  *((_QWORD *)v177 + HIDWORD(v178)) = v84;
                  HIDWORD(v178) = v149 + 1;
                }
              }
            }
            if (v75)
            {
              v85 = *(_QWORD *)(v75 + 64);
              if (v85)
              {
                if (*(_BYTE *)(v85 + 5) != 1)
                {
                  v86 = *(_QWORD *)(v85 + 72);
                  if (v86)
                  {
                    v87 = *(_QWORD *)(v86 + 8);
                    if ((v87 & 1) != 0)
                    {
                      if ((*(_QWORD *)(v86 + 8) & 6) != 4)
                      {
                        v129 = (v87 >> 1) & 3;
                        v130 = a3;
                        v87 = WTF::fastMalloc((WTF *)0x18);
                        a3 = v130;
                        *(_DWORD *)v87 = 1;
                        *(_BYTE *)(v87 + 4) = v129;
                        *(_BYTE *)(v87 + 5) = 0;
                        *(_QWORD *)(v87 + 8) = v87 + 8;
                        *(_QWORD *)(v87 + 16) = v87 + 8;
                        __dmb(0xAu);
                        *(_QWORD *)(v86 + 8) = v87;
                        goto LABEL_140;
                      }
                    }
                    else if (*(_BYTE *)(v87 + 4) != 2)
                    {
LABEL_140:
                      v183 = (unsigned int *)v87;
                      v88 = HIDWORD(v178);
                      if (HIDWORD(v178) == (_DWORD)v178)
                      {
                        v170 = a3;
                        WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v177, (unint64_t)&v183);
                        a3 = v170;
                      }
                      else
                      {
                        *((_QWORD *)v177 + HIDWORD(v178)) = v87;
                        HIDWORD(v178) = v88 + 1;
                      }
                    }
                  }
                }
              }
            }
            v89 = v177;
            if (v179 != (_BYTE *)v177 && v177)
            {
              v177 = 0;
              LODWORD(v178) = 0;
              v168 = a3;
              WTF::fastFree((unint64_t)v89, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
              a3 = v168;
            }
            v90 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v90 == *(_DWORD *)(a1 + 8))
            {
              v154 = a3;
              v92 = (uint64_t *)WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v90 + 1, (unint64_t)v69);
              a3 = v154;
              v90 = *(unsigned int *)(a1 + 12);
              v91 = (_QWORD *)(*(_QWORD *)a1 + 8 * v90);
            }
            else
            {
              v91 = (_QWORD *)(*(_QWORD *)a1 + 8 * v90);
              v92 = (uint64_t *)v69;
            }
            v93 = *v92;
            *v92 = 0;
            *v91 = v93;
            *(_DWORD *)(a1 + 12) = v90 + 1;
            v69 = (WTF *)((char *)v69 + 8);
            if (v69 == v70)
            {
              v16 = HIDWORD(v181);
              goto LABEL_153;
            }
            goto LABEL_103;
          }
          v81 = *(_QWORD *)(v79 + 8);
          if ((v81 & 0xFFFFFFFFFFFFFFLL) != 0)
          {
            if (BYTE6(v81) >= 3u)
            {
              if (BYTE6(v81) > 7u)
                goto LABEL_272;
              LODWORD(v81) = 1 << SBYTE6(v81);
              if (((1 << SBYTE6(v81)) & 0x98) != 0)
                goto LABEL_126;
              if ((v81 & 0x60) == 0)
              {
LABEL_272:
                __break(0xC471u);
                JUMPOUT(0x1981DBC8CLL);
              }
            }
            if ((*(_DWORD *)(16 * (**(_DWORD **)v79 & 0xFFFFFFFE) + 0x10) & 3) != 2)
            {
              v82 = *(_WORD *)(16 * (**(_DWORD **)v79 & 0xFFFFFFFE) + 0xC);
              if ((v82 & 0x18) == 0x10 && (v82 & 0x20) != 0)
                goto LABEL_256;
            }
          }
LABEL_126:
          v79 += 24;
        }
      }
      if (*(_BYTE *)(v75 + 5) == 1)
      {
LABEL_112:
        v76 = *(_QWORD *)(v71 + 32);
        if (!v76)
          goto LABEL_132;
        if (v75)
        {
          if ((*(_DWORD *)(v75 + 16) & 3) != 2)
          {
            v77 = *(_WORD *)(v75 + 12);
            if ((v77 & 0x18) == 0x10 && (v77 & 0x20) != 0)
            {
LABEL_256:
              if ((v76 & 1) != 0)
                v156 = (WTF::StringImpl *)(v76 & 0xFFFFFFFFFFFFFFFELL);
              else
                v156 = *(WTF::StringImpl **)(v76 + 8);
              v176 = a3;
              v157 = JSC::VM::ensureWatchpointSetForImpureProperty(a3, v156, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
              v183 = (unsigned int *)v157;
              v158 = HIDWORD(v178);
              if (HIDWORD(v178) == (_DWORD)v178)
              {
                WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>((uint64_t)&v177, (unint64_t)&v183);
              }
              else
              {
                *((_QWORD *)v177 + HIDWORD(v178)) = v157;
                HIDWORD(v178) = v158 + 1;
              }
              v72 = *(unsigned __int8 *)(v71 + 4);
              a3 = v176;
              goto LABEL_132;
            }
          }
        }
        goto LABEL_116;
      }
      v74 = *(_DWORD *)(v75 + 80);
    }
    if (v74)
      v75 = 16 * (v74 & 0xFFFFFFFE);
    else
      v75 = 0;
    goto LABEL_112;
  }
  *(_QWORD *)(a9 + 8) = 0;
  v17 = (JSC::InlineCacheHandler **)(a9 + 8);
  *(_DWORD *)a9 = 6;
  *(_QWORD *)(a9 + 24) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  v18 = (unint64_t *)(a9 + 16);
  v19 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v19)
  {
    v20 = 0;
    v21 = 0;
LABEL_78:
    v58 = 0;
    v59 = 1;
    while (1)
    {
      v60 = v58 + 1;
      if (v58 + 1 < v16)
        break;
LABEL_80:
      ++v59;
      ++v58;
      if (v16 <= v60)
        goto LABEL_81;
    }
    v114 = v59;
    while (1)
    {
      if (v58 >= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1981DBD18);
      }
      v115 = *((_QWORD *)v180 + v58);
      v116 = *(unsigned __int8 *)(v115 + 4);
      v28 = v116 > 0x20;
      v117 = (1 << v116) & 0x100000014;
      if (v28 || v117 == 0)
      {
        v119 = *(_DWORD *)(v115 + 12);
      }
      else
      {
        v120 = *(_QWORD *)(16 * (*(_DWORD *)(v115 + 12) & 0xFFFFFFFE) + 0x40);
        if (!v120 || *(_BYTE *)(v120 + 5) == 1)
          goto LABEL_178;
        v119 = *(_DWORD *)(v120 + 80);
      }
      if (v119)
        v120 = 16 * (v119 & 0xFFFFFFFE);
      else
        v120 = 0;
LABEL_178:
      v121 = *((_QWORD *)v180 + v114);
      v122 = *(unsigned __int8 *)(v121 + 4);
      v28 = v122 > 0x20;
      v123 = (1 << v122) & 0x100000014;
      if (v28 || v123 == 0)
      {
        v125 = *(_DWORD *)(v121 + 12);
LABEL_184:
        v126 = 16 * (v125 & 0xFFFFFFFE);
        if (!v125)
          v126 = 0;
LABEL_186:
        if (v120 != v126 && v120 != 0 && v126 != 0 && *(_DWORD *)(v120 + 28) == *(_DWORD *)(v126 + 28))
        {
          v131 = *(_QWORD *)(v120 + 64);
          if (v131)
          {
            if (*(_BYTE *)(v131 + 5) != 1)
            {
              v132 = *(_QWORD *)(v126 + 64);
              if (v132)
              {
                if (*(_BYTE *)(v132 + 5) != 1)
                {
                  v133 = *(_QWORD *)(v131 + 72);
                  if (v133)
                  {
                    if (v133 == *(_QWORD *)(v132 + 72))
                    {
                      v134 = *(_QWORD *)(v120 + 48);
                      if (v134)
                      {
                        v135 = *(_QWORD *)(v126 + 48);
                        if (v135 && v134 != v135)
                        {
                          v137 = a3;
                          v174 = v18;
                          v138 = v135 != 2;
                          v139 = v134 != 2;
                          if (v134 == 2 || v135 == 2)
                          {
LABEL_223:
                            if (!v139 && !v138)
                            {
                              v145 = *(_QWORD *)(v133 + 8);
                              v144 = (unsigned int *)(v133 + 8);
                              v143 = v145;
                              v146 = (v145 & 1) != 0 ? (v143 >> 1) & 3 : *(unsigned __int8 *)(v143 + 4);
                              if (v146 != 2)
                              {
                                v183 = v144;
                                v184 = &off_1E3583C90;
                                v185 = "Detected poly proto optimization opportunity.";
                                if (v20 == *(_DWORD *)(a9 + 24))
                                {
                                  v147 = (_QWORD *)WTF::Vector<std::pair<JSC::InlineWatchpointSet &,JSC::StringFireDetail>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v174, v20 + 1, (unint64_t)&v183);
                                  v20 = *(_DWORD *)(a9 + 28);
                                  v148 = (_QWORD *)(*(_QWORD *)(a9 + 16) + 24 * v20);
                                  *v148 = *v147;
                                  v148[1] = &off_1E3583C90;
                                  v148[2] = v147[2];
                                  v16 = HIDWORD(v181);
                                }
                                else
                                {
                                  v171 = (unsigned int **)(*v174 + 24 * v20);
                                  *v171 = v144;
                                  v171[1] = (unsigned int *)&off_1E3583C90;
                                  v171[2] = (unsigned int *)"Detected poly proto optimization opportunity.";
                                }
                                *(_DWORD *)(a9 + 28) = ++v20;
                                v21 = 1;
                              }
                            }
                          }
                          else
                          {
                            while (*(_DWORD *)(16 * (*(_DWORD *)v134 & 0xFFFFFFFE) + 0x1C) == *(_DWORD *)(16 * (*(_DWORD *)v135 & 0xFFFFFFFE) + 0x1C))
                            {
                              v140 = *(_QWORD *)(16 * (*(_DWORD *)v134 & 0xFFFFFFFE) + 0x30);
                              if (!v140)
                                v140 = *(_QWORD *)(v134 + 16);
                              v141 = *(_QWORD *)(16 * (*(_DWORD *)v135 & 0xFFFFFFFE) + 0x30);
                              if (!v141)
                                v141 = *(_QWORD *)(v135 + 16);
                              v139 = (v140 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                              v138 = (v141 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                              v142 = (v140 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v141 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                              v135 = v141;
                              v134 = v140;
                              if (v142)
                                goto LABEL_223;
                            }
                          }
                          v18 = v174;
                          a3 = v137;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_194;
      }
      v126 = *(_QWORD *)(16 * (*(_DWORD *)(v121 + 12) & 0xFFFFFFFE) + 0x40);
      if (v126)
      {
        if (*(_BYTE *)(v126 + 5) != 1)
        {
          v125 = *(_DWORD *)(v126 + 80);
          goto LABEL_184;
        }
        goto LABEL_186;
      }
LABEL_194:
      if (v16 <= ++v114)
        goto LABEL_80;
    }
  }
  v20 = 0;
  v21 = 0;
  v22 = v180;
  v23 = (WTF *)((char *)v180 + 8 * v16);
LABEL_6:
  v24 = *(uint64_t **)a1;
  v25 = *(_QWORD *)a1 + 8 * v19;
  do
  {
    v26 = *(_QWORD *)v22;
    v27 = *(unsigned __int8 *)(*(_QWORD *)v22 + 4);
    v28 = v27 > 0x20;
    v29 = (1 << v27) & 0x100000014;
    if (v28 || v29 == 0)
    {
      v31 = *(_DWORD *)(v26 + 12);
    }
    else
    {
      v32 = *(_QWORD *)(16 * (*(_DWORD *)(v26 + 12) & 0xFFFFFFFE) + 0x40);
      if (!v32 || *(_BYTE *)(v32 + 5) == 1)
        goto LABEL_15;
      v31 = *(_DWORD *)(v32 + 80);
    }
    v32 = 16 * (v31 & 0xFFFFFFFE);
    if (!v31)
      v32 = 0;
LABEL_15:
    v33 = *v24;
    v34 = *(unsigned __int8 *)(*v24 + 4);
    v28 = v34 > 0x20;
    v35 = (1 << v34) & 0x100000014;
    if (v28 || v35 == 0)
    {
      v37 = *(_DWORD *)(v33 + 12);
      goto LABEL_21;
    }
    v38 = *(_QWORD *)(16 * (*(_DWORD *)(v33 + 12) & 0xFFFFFFFE) + 0x40);
    if (!v38)
      goto LABEL_31;
    if (*(_BYTE *)(v38 + 5) != 1)
    {
      v37 = *(_DWORD *)(v38 + 80);
LABEL_21:
      v38 = 16 * (v37 & 0xFFFFFFFE);
      if (!v37)
        v38 = 0;
    }
    if (v32 != v38 && v32 != 0 && v38 != 0 && *(_DWORD *)(v32 + 28) == *(_DWORD *)(v38 + 28))
    {
      v41 = *(_QWORD *)(v32 + 64);
      if (v41)
      {
        if (*(_BYTE *)(v41 + 5) != 1)
        {
          v42 = *(_QWORD *)(v38 + 64);
          if (v42)
          {
            if (*(_BYTE *)(v42 + 5) != 1)
            {
              v43 = *(_QWORD *)(v41 + 72);
              if (v43)
              {
                if (v43 == *(_QWORD *)(v42 + 72))
                {
                  v44 = *(_QWORD *)(v32 + 48);
                  if (v44)
                  {
                    v45 = *(_QWORD *)(v38 + 48);
                    if (v45 && v44 != v45)
                    {
                      v47 = v45 != 2;
                      v48 = v44 != 2;
                      if (v44 == 2 || v45 == 2)
                      {
LABEL_66:
                        if (!v48)
                        {
                          v173 = v18;
                          v175 = a3;
                          if (!v47)
                          {
                            v54 = *(_QWORD *)(v43 + 8);
                            v53 = (unsigned int *)(v43 + 8);
                            v52 = v54;
                            v55 = (v54 & 1) != 0 ? (v52 >> 1) & 3 : *(unsigned __int8 *)(v52 + 4);
                            if (v55 != 2)
                            {
                              v183 = v53;
                              v184 = &off_1E3583C90;
                              v185 = "Detected poly proto optimization opportunity.";
                              if (v20 == *(_DWORD *)(a9 + 24))
                              {
                                v56 = (_QWORD *)WTF::Vector<std::pair<JSC::InlineWatchpointSet &,JSC::StringFireDetail>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v173, v20 + 1, (unint64_t)&v183);
                                v20 = *(_DWORD *)(a9 + 28);
                                v57 = (_QWORD *)(*(_QWORD *)(a9 + 16) + 24 * v20);
                                *v57 = *v56;
                                v57[1] = &off_1E3583C90;
                                v57[2] = v56[2];
                              }
                              else
                              {
                                v169 = (unsigned int **)(*v173 + 24 * v20);
                                *v169 = v53;
                                v169[1] = (unsigned int *)&off_1E3583C90;
                                v169[2] = (unsigned int *)"Detected poly proto optimization opportunity.";
                              }
                              *(_DWORD *)(a9 + 28) = ++v20;
                              v21 = 1;
                            }
                          }
                          v18 = v173;
                          a3 = v175;
                        }
                      }
                      else
                      {
                        while (*(_DWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x1C) == *(_DWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x1C))
                        {
                          v49 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
                          if (!v49)
                            v49 = *(_QWORD *)(v44 + 16);
                          v50 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x30);
                          if (!v50)
                            v50 = *(_QWORD *)(v45 + 16);
                          v48 = (v49 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                          v47 = (v50 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                          v51 = (v49 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v50 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                          v45 = v50;
                          v44 = v49;
                          if (v51)
                            goto LABEL_66;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_31:
    ++v24;
  }
  while (v24 != (uint64_t *)v25);
  while (1)
  {
    v22 = (WTF *)((char *)v22 + 8);
    if (v22 == v23)
      break;
    v19 = *(unsigned int *)(a1 + 12);
    if (*(_DWORD *)(a1 + 12))
      goto LABEL_6;
  }
  v16 = HIDWORD(v181);
  if (HIDWORD(v181))
    goto LABEL_78;
  v16 = 0;
LABEL_81:
  if (!v21)
  {
    v67 = *v18;
    if (*v18)
    {
      *(_QWORD *)(a9 + 16) = 0;
      *(_DWORD *)(a9 + 24) = 0;
      v167 = a3;
      WTF::fastFree(v67, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
      a3 = v167;
    }
    v68 = *v17;
    *v17 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
      {
        v94 = a3;
        JSC::InlineCacheHandler::~InlineCacheHandler(v68, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, v13);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        a3 = v94;
      }
      else
      {
        --*(_DWORD *)v68;
      }
    }
    goto LABEL_101;
  }
LABEL_82:
  v61 = v180;
  if (v16)
  {
    v62 = (WTF *)((char *)v180 + 8 * v16);
    do
    {
      v63 = *(unsigned int **)v61;
      *(_QWORD *)v61 = 0;
      if (v63)
      {
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, v63);
          JSC::AccessCase::operator delete((unint64_t)v63, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
        }
      }
      v61 = (WTF *)((char *)v61 + 8);
    }
    while (v61 != v62);
LABEL_89:
    v61 = v180;
  }
  if (v182 != (_QWORD *)v61 && v61 != 0)
  {
    v180 = 0;
    LODWORD(v181) = 0;
    WTF::fastFree((unint64_t)v61, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
  }
}

uint64_t *JSC::InlineCacheHandler::addOwner(uint64_t *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD v9[3];
  JSC::CodeBlock *v10;
  int v11;

  v8 = this[8];
  if (v8)
  {
    v10 = a2;
    if ((*(_BYTE *)(v8 + 40) & 0x20) != 0)
    {
      v11 = 0;
      this = WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v8 + 80), (uint64_t *)&v10, &v11, a4, a5, a6, a7, a8, (uint64_t)v9);
      ++*(_DWORD *)(v9[0] + 8);
    }
  }
  return this;
}

uint64_t JSC::InlineCacheHandler::removeOwner(uint64_t this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CodeBlock *v9;

  v8 = *(_QWORD *)(this + 64);
  if (v8)
  {
    v9 = a2;
    if ((*(_BYTE *)(v8 + 40) & 0x20) != 0)
      return WTF::HashCountedSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::remove((uint64_t *)(v8 + 80), &v9, a3, a4, a5, a6, a7, a8);
  }
  return this;
}

uint64_t JSC::InlineCallFrame::calleeConstant(JSC::InlineCallFrame *this)
{
  if (*((_BYTE *)this + 40) == 17)
    return *(_QWORD *)((char *)this + 41);
  else
    return 0;
}

void JSC::InlineCallFrame::dumpBriefFunctionInformation(JSC::InlineCallFrame *this, WTF::PrintStream *a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  _DWORD *v14;
  const char *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;

  WTF::String::utf8((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 64) + 88) + 80), 0, a6, a7, a8, a9, a10, &v26, a4);
  JSC::CodeBlock::hashAsStringIfPossible(*((JSC::CodeBlock **)this + 1), (uint64_t *)&v25);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v13 = v12;
  v14 = (_DWORD *)v26;
  v15 = (const char *)(v26 + 16);
  if (!v26)
    v15 = 0;
  WTF::PrintStream::printf(v12, "%s", v15);
  WTF::PrintStream::printf(v13, "%s", "#");
  if (v25)
    v16 = (char *)v25 + 16;
  else
    v16 = 0;
  WTF::PrintStream::printf(v13, "%s", v16);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v24 = v25;
  v25 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
      if (!v14)
        return;
      goto LABEL_10;
    }
    --*(_DWORD *)v24;
  }
  if (!v14)
    return;
LABEL_10:
  if (*v14 == 1)
    WTF::fastFree((unint64_t)v14, v17, v18, v19, v20, v21, v22, v23);
  else
    --*v14;
}

uint64_t JSC::InlineCallFrame::dumpInContext(JSC::InlineCallFrame *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  const void *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  WTF::PrintStream *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v22;
  const char *v23;
  WTF::PrintStream *v24;
  WTF::PrintStream *v25;
  JSC::Structure *v26;
  WTF::PrintStream *v27;
  int v28;
  WTF::PrintStream *v29;
  unsigned int *v30;
  char *v31;
  WTF::PrintStream *v32;
  uint64_t v33;
  __int128 v34;
  WTF::PrintStream *v35;
  WTF::PrintStream *v36;
  uint64_t result;
  unsigned int v38;
  unint64_t v39;

  v6 = (const void *)*((_QWORD *)this + 1);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::InlineCallFrame::dumpBriefFunctionInformation(this, v7, v14, v15, v8, v9, v10, v11, v12, v13);
  WTF::PrintStream::printf(v7, "%s", ":<");
  WTF::PrintStream::printf(v7, "%p", v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 64) + 68) & 1) != 0)
  {
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v16, "%s", " (StrictMode)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v17 = *((_QWORD *)this + 2);
  if ((v17 & 2) != 0)
  {
    LODWORD(v18) = -1;
  }
  else if ((v17 & 1) != 0)
  {
    LODWORD(v18) = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v18 = v17 >> 36;
  }
  v19 = *((_QWORD *)this + 3) >> 60;
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v20, "%s", ", ");
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
  WTF::PrintStream::printf(v21, "%s", "bc#");
  WTF::PrintStream::printf(v21, "%u", v18 >> 2);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
  if ((v18 & 3) != 0)
  {
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
    WTF::PrintStream::printf(v22, "%s", "cp#");
    WTF::PrintStream::printf(v22, "%u", v18 & 3);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
  }
  WTF::PrintStream::printf(v20, "%s", ", ");
  if (v19 >= 0xC)
  {
    result = 133;
    __break(0xC471u);
  }
  else
  {
    v23 = off_1E3581900[v19];
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
    WTF::PrintStream::printf(v24, "%s", v23);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
      v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v27, "%s", ", closure call");
    }
    else
    {
      v39 = *(_QWORD *)((char *)this + 41);
      v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v25, "%s", ", known callee: ");
      v26 = 0;
      if (v39 && (v39 & 0xFFFE000000000002) == 0)
        v26 = (JSC::Structure *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE));
      JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v39, v25, a3, v26);
    }
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v28 = *((_DWORD *)this + 6) & 0x3FFFFF;
    v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v29, "%s", ", numArgs+this = ");
    WTF::PrintStream::printf(v29, "%u", v28);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v30 = *(unsigned int **)this;
    if (*(_QWORD *)this)
      v30 = (unsigned int *)*v30;
    v31 = (char *)v30 - (*((_QWORD *)this + 3) & 0x3FFFFFLL);
    v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v32, "%s", ", numFixup = ");
    WTF::PrintStream::printf(v32, "%lu", v31);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v33 = *((_QWORD *)this + 3);
    *((_QWORD *)&v34 + 1) = (16 * v33) >> 56;
    *(_QWORD *)&v34 = v33 << 12;
    v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v35, "%s", ", stackOffset = ");
    WTF::PrintStream::printf(v35, "%d", (v34 >> 44));
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v38 = (HIDWORD(*((_QWORD *)this + 3)) & 0xFFFFF | ((int)(*((_QWORD *)this + 3) >> 28) >> 24 << 20)) - 1;
    LODWORD(v39) = -1;
    v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v36, "%s", " (");
    JSC::VirtualRegister::dump((unsigned int *)&v39, v36);
    WTF::PrintStream::printf(v36, "%s", " maps to ");
    JSC::VirtualRegister::dump(&v38, v36);
    WTF::PrintStream::printf(v36, "%s", ")>");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::InstanceOfAccessCase::create(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, unsigned int **a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v14 = WTF::fastMalloc((WTF *)0x30);
  v22 = v14;
  *(_DWORD *)v14 = 1;
  *(_BYTE *)(v14 + 4) = a3;
  *(_BYTE *)(v14 + 5) = 0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_QWORD *)(v14 + 16) = 0;
  v23 = (unsigned int **)(v14 + 16);
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  if (a4)
  {
    *(_DWORD *)(v14 + 12) = a4 >> 4;
    if (a2 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  }
  else
  {
    *(_DWORD *)(v14 + 12) = 0;
  }
  v24 = *a5;
  if (*a5)
  {
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = *v23;
  *v23 = v24;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((unint64_t)v26, v15, v16, v17, v18, v19, v20, v21);
    }
    v24 = *v23;
  }
  if (v24 && !v24[1])
  {
    __break(0xC471u);
    JUMPOUT(0x1981DC588);
  }
  *(_QWORD *)(v22 + 40) = a6;
  if (a2 && a6 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  *a7 = v22;
}

void WTF::VectorTypeOperations<JSC::InByVariant>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = (unsigned int *)v9[1];
      v9[1] = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*v9 & 1) != 0)
        WTF::fastFree(*v9 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v9 += 4;
    }
    while (v9 != a2);
  }
}

void WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v11 = a1 + 16;
  v10 = *(_QWORD *)a1;
  if (v10 != v11)
  {
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v11;
  }
  v12 = *(_QWORD *)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v13 = a2[3];
    if ((_DWORD)v13)
    {
      v16 = v12 + 32 * v13;
      do
      {
        *(_QWORD *)v11 = 0;
        if ((*(_QWORD *)v12 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v11, (_QWORD *)v12);
        else
          *(_QWORD *)v11 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFDLL;
        v17 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v11 + 8) = v17;
        *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
        v18 = *(unsigned int **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*(_QWORD *)v12 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v11 += 32;
        v12 += 32;
      }
      while (v12 != v16);
    }
    v14 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v12;
    v14 = a2[2];
    a2[2] = 1;
  }
  *(_DWORD *)(a1 + 8) = v14;
  v15 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v15;
}

void WTF::VectorMover<false,JSC::InByVariant>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      *(_QWORD *)v8 = 0;
      if ((*(_QWORD *)v10 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v8, v10);
      else
        *(_QWORD *)v8 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFDLL;
      v11 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v8 + 8) = v11;
      *(_OWORD *)(v8 + 16) = *((_OWORD *)v10 + 1);
      v12 = (unsigned int *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*(_QWORD *)v10 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v8 += 32;
      v10 += 32;
    }
    while (v10 != a2);
  }
}

uint64_t WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v10 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v11 = *(_QWORD *)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v12 = a2[3];
    if ((_DWORD)v12)
    {
      v15 = v11 + 32 * v12;
      do
      {
        *(_QWORD *)v10 = 0;
        if ((*(_QWORD *)v11 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v10, (_QWORD *)v11);
        else
          *(_QWORD *)v10 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFDLL;
        v16 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v10 + 8) = v16;
        *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
        v17 = *(unsigned int **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v17)
        {
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*(_QWORD *)v11 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v10 += 32;
        v11 += 32;
      }
      while (v11 != v15);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v11;
    v20 = a2[2];
    a2[2] = 1;
    *(_DWORD *)(a1 + 8) = v20;
  }
  v13 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v13;
  return a1;
}

uint64_t WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v37;
  _QWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;

  if (a2 == (unsigned int *)a1)
    return a1;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = a2[3];
  if (v10 > v11)
  {
    v12 = *(_QWORD *)a1 + 32 * v10;
    v13 = (_QWORD *)(*(_QWORD *)a1 + 32 * v11);
    do
    {
      v14 = (unsigned int *)v13[1];
      v13[1] = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*v13 & 1) != 0)
        WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v13 += 4;
    }
    while (v13 != (_QWORD *)v12);
    *(_DWORD *)(a1 + 12) = v11;
    v10 = v11;
    goto LABEL_16;
  }
  v17 = *(_DWORD *)(a1 + 8);
  if (v11 > v17)
  {
    if (!v17)
    {
LABEL_14:
      WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3], a3, a4, a5, a6, a7, a8);
      v10 = *(unsigned int *)(a1 + 12);
      goto LABEL_15;
    }
    if ((_DWORD)v10)
    {
      v39 = *(_QWORD **)a1;
      v40 = *(_QWORD *)a1 + 32 * v10;
      do
      {
        v41 = (unsigned int *)v39[1];
        v39[1] = 0;
        if (v41)
        {
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            WTF::fastFree((unint64_t)v41, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*v39 & 1) != 0)
          WTF::fastFree(*v39 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v39 += 4;
      }
      while (v39 != (_QWORD *)v40);
      *(_DWORD *)(a1 + 12) = 0;
    }
    v37 = *(_QWORD *)a1;
    if (a1 + 16 == *(_QWORD *)a1 || v37 == 0)
    {
      if (v37)
        goto LABEL_14;
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)a1)
        goto LABEL_14;
    }
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 1;
    goto LABEL_14;
  }
LABEL_15:
  LODWORD(v11) = v10;
LABEL_16:
  v18 = *(uint64_t **)a2;
  if (v10)
  {
    v19 = &v18[4 * v10];
    v20 = *(_QWORD *)a1;
    do
    {
      if ((uint64_t *)v20 != v18)
      {
        if ((*(_QWORD *)v20 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v21 = *v18;
        if ((*v18 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v20, v18);
        }
        else
        {
          v22 = v21 & 0xFFFFFFFFFFFFFFFDLL;
          v23 = v21 | 2;
          if ((*(_BYTE *)v20 & 2) == 0)
            v23 = v22;
          *(_QWORD *)v20 = v23;
        }
      }
      v24 = (unsigned int *)v18[1];
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v26 = *(unsigned int **)(v20 + 8);
      *(_QWORD *)(v20 + 8) = v24;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      *(_OWORD *)(v20 + 16) = *((_OWORD *)v18 + 1);
      v18 += 4;
      v20 += 32;
    }
    while (v18 != v19);
    v18 = *(uint64_t **)a2;
    LODWORD(v11) = *(_DWORD *)(a1 + 12);
  }
  v29 = a2[3];
  if ((_DWORD)v11 != (_DWORD)v29)
  {
    v30 = &v18[4 * v29];
    v31 = v11;
    v32 = *(_QWORD *)a1 + 32 * v11;
    v33 = &v18[4 * v31];
    do
    {
      *(_QWORD *)v32 = 0;
      if ((*v33 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v32, v33);
      else
        *(_QWORD *)v32 = *v33 & 0xFFFFFFFFFFFFFFFDLL;
      v34 = (unsigned int *)v33[1];
      if (v34)
      {
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      *(_QWORD *)(v32 + 8) = v34;
      *(_OWORD *)(v32 + 16) = *((_OWORD *)v33 + 1);
      v32 += 32;
      v33 += 4;
    }
    while (v33 != v30);
    LODWORD(v11) = a2[3];
  }
  *(_DWORD *)(a1 + 12) = v11;
  return a1;
}

void WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = *(_QWORD *)a1 + 32 * v10;
    v12 = (_QWORD *)(*(_QWORD *)a1 + 32 * (_QWORD)a2);
    do
    {
      v13 = (unsigned int *)v12[1];
      v12[1] = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*v12 & 1) != 0)
        WTF::fastFree(*v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v12 += 4;
    }
    while (v12 != (_QWORD *)v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)a1;
    if (a2)
    {
      v12 = *(unsigned int *)(a1 + 12);
      if (a2 == 1)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
      }
      else
      {
        if (a2 >> 27)
        {
          __break(0xC471u);
          return;
        }
        v11 = WTF::fastMalloc((WTF *)(32 * a2));
        *(_DWORD *)(a1 + 8) = a2;
        *(_QWORD *)a1 = v11;
      }
      if (v11 != v10 && (_DWORD)v12)
      {
        v14 = v10 + 32 * v12;
        v15 = v10;
        do
        {
          *(_QWORD *)v11 = 0;
          if ((*(_QWORD *)v15 & 1) != 0)
            WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v11, (_QWORD *)v15);
          else
            *(_QWORD *)v11 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFDLL;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v11 + 8) = v16;
          *(_OWORD *)(v11 + 16) = *(_OWORD *)(v15 + 16);
          v17 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((unint64_t)v17, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
          }
          if ((*(_QWORD *)v15 & 1) != 0)
            WTF::fastFree(*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
          v11 += 32;
          v15 += 32;
        }
        while (v15 != v14);
        v11 = *(_QWORD *)a1;
      }
    }
    if (a1 + 16 != v10 && v10 != 0)
    {
      if (v11 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
      v11 = *(_QWORD *)a1;
    }
    if (!v11)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
  }
}

void WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 2)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return;
      }
      v12 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    if ((_DWORD)v11)
    {
      v13 = v10 + 32 * v11;
      v14 = v10;
      do
      {
        *(_QWORD *)v12 = 0;
        if ((*(_QWORD *)v14 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v12, (_QWORD *)v14);
        else
          *(_QWORD *)v12 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFDLL;
        v15 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v12 + 8) = v15;
        *(_OWORD *)(v12 + 16) = *(_OWORD *)(v14 + 16);
        v16 = *(unsigned int **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (v16)
        {
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v16);
            WTF::fastFree((unint64_t)v16, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*(_QWORD *)v14 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
        v12 += 32;
        v14 += 32;
      }
      while (v14 != v13);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

JSC::CCallHelpers *JSC::CCallHelpers::CCallHelpers(JSC::CCallHelpers *this, JSC::CodeBlock *a2)
{
  char *v4;
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  char **v21;
  char *v22;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0x8000000080000000;
  v4 = (char *)this + 64;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_DWORD *)this + 48) = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v16 = *(_DWORD *)(v14 + 136);
    if (*((_DWORD *)this + 48) < v16)
    {
      v17 = *((_QWORD *)this + 7);
      if (v17 && (char *)v17 != v4)
      {
        WTF::fastFree(v17, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v16 = *(_DWORD *)(v14 + 136);
      }
      *((_QWORD *)this + 7) = v15;
      *((_DWORD *)this + 48) = v16;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
    }
  }
  v18 = 0;
  *((_BYTE *)this + 212) = 1;
  *((_BYTE *)this + 272) = 16;
  *((_DWORD *)this + 72) = 0x10000;
  *((_BYTE *)this + 304) = 17;
  *((_DWORD *)this + 80) = 0x20000;
  *((_DWORD *)this + 50) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = this;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 37) = this;
  *((_QWORD *)this + 39) = 0;
  *((_BYTE *)this + 328) = 0;
  *((_QWORD *)this + 42) = a2;
  if (a2)
    v18 = JSC::CodeBlock::baselineAlternative((uint64_t)a2);
  *((_QWORD *)this + 43) = v18;
  return this;
}

uint64_t JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::AssemblerDataImpl(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  pthread_key_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char v17;
  char **v18;
  char *v19;

  v2 = a1 + 8;
  *(_QWORD *)a1 = a1 + 8;
  *(_DWORD *)(a1 + 136) = 128;
  v3 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v3 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v4 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v12 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v12, v4);
  }
  v13 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 != v12 + 8)
  {
    v14 = *(_DWORD *)(v12 + 136);
    if (*(_DWORD *)(a1 + 136) < v14)
    {
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1 && v15 != v2)
      {
        WTF::fastFree(v15, v5, v6, v7, v8, v9, v10, v11);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 136);
      }
      *(_QWORD *)a1 = v13;
      *(_DWORD *)(a1 + 136) = v14;
      *(_QWORD *)v12 = v12 + 8;
      *(_DWORD *)(v12 + 136) = 128;
    }
  }
  return a1;
}

uint64_t JSC::LinkBuffer::LinkBuffer<(WTF::PtrTag)49594>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::AssemblerDataImpl(a1 + 24);
  *(_BYTE *)(a1 + 172) = 1;
  *(_DWORD *)(a1 + 176) = 6;
  *(_QWORD *)(a1 + 184) = a3;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 168) = 1;
  JSC::LinkBuffer::linkCode(a1, a2, 1, v7, v8, v9, v10, v11);
  return a1;
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0,char const*>(_QWORD *a1, uint64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  JSC::ExecutableMemoryHandle *v39;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, a4, a5, "InlineAccessType: '%s'", &v38, a6);
  v14 = (unsigned int *)v39;
  *a1 = v38;
  a1[1] = 0;
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = (unsigned int *)a1[1];
    a1[1] = v14;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
    }
    v19 = (unsigned int *)v39;
    v39 = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
  }
}

void JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  JSC::ExecutableMemoryHandle *v52;

  v8 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v8)
  {
    v28 = *(uint64_t **)(a1 + 192);
    v29 = 8 * v8;
    do
    {
      v30 = *v28++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, a1);
      v29 -= 8;
    }
    while (v29);
  }
  v9 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v9)
  {
    v31 = *(uint64_t **)(a1 + 208);
    v32 = 8 * v9;
    do
    {
      v33 = *v31++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, a1);
      v32 -= 8;
    }
    while (v32);
  }
  v10 = *(unsigned int *)(a1 + 176);
  *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v10) += *(_QWORD *)(a1 + 8);
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v10);
  v11 = (uint64_t *)(a1 + 184);
  sys_icache_invalidate(*(void **)(a1 + 184), *(_QWORD *)(a1 + 8));
  v19 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v50 = __ldaxr(v19);
    while (__stlxr(v50 + 1, v19));
    v11 = (uint64_t *)(v19 + 2);
  }
  v20 = *v11;
  v51 = v20;
  v52 = (JSC::ExecutableMemoryHandle *)v19;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf(a1, (uint64_t)&v51, a2, a3);
  *a4 = v20;
  a4[1] = 0;
  if (v19)
  {
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 + 1, v19));
    v22 = (unsigned int *)a4[1];
    a4[1] = v19;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v22, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    v25 = (unsigned int *)v52;
    v52 = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
    }
  }
}

uint64_t WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 3);
  v6 = (char *)(*a1 + 2 * v5);
  if (v5 <= a3)
  {
    v7 = 0;
    v10 = (char *)(*a1 + 2 * v5);
  }
  else
  {
    v7 = 0;
    v8 = (char *)(v4 + 2 * a3);
    v9 = v8;
    v10 = (char *)(*a1 + 2 * v5);
    v11 = v10;
    do
    {
      if (*v9 == v9[1])
      {
        v12 = v9;
        if (v11 != (char *)(*a1 + 2 * *((unsigned int *)a1 + 3)))
        {
          if (v9 == v10)
          {
            v12 = v11;
          }
          else
          {
            v13 = v8 - v10;
            memmove(v11, v10, v8 - v10);
            v12 = &v11[v13];
          }
        }
        v10 = v9 + 2;
        v7 = (v7 + 1);
        v11 = v12;
      }
      v9 += 2;
      v8 += 2;
    }
    while (v9 < v6);
    v4 = *a1;
    v5 = *((unsigned int *)a1 + 3);
    v6 = v11;
  }
  v14 = (char *)(v4 + 2 * v5);
  if (v10 != v14)
  {
    memmove(v6, v10, v14 - v10);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
  }
  *((_DWORD *)a1 + 3) = v5 - v7;
  return v7;
}

void JSC::InlineCacheCompiler::generateWithGuard(unsigned int,JSC::AccessCase &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &)::$_0::operator() const(void)::{lambda(JSC::Structure *,BOOL)#1}::operator()(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  _DWORD v74[3];
  _DWORD v75[3];
  int v76;
  uint64_t v77;

  v8 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981DD9A0);
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)a1;
  v14 = **(unsigned __int8 **)(a1 + 16);
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v14, *(char *)(v8 + 304), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch32(v8, 1, 17, (a2 >> 4), v15, v16, v17, v18, (uint64_t)&v76);
  v24 = v76;
  if (v76 != -1)
  {
    v25 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v25 == *(_DWORD *)(v13 + 8))
    {
      v26 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, (void *)(v25 + 1), (unint64_t)&v76, v19, v20, v21, v22, v23);
      v28 = *v26;
      v27 = (uint64_t *)(v26 + 1);
      v24 = v28;
      LODWORD(v25) = *(_DWORD *)(v13 + 12);
    }
    else
    {
      v27 = &v77;
    }
    v29 = *(_QWORD *)v13 + 12 * v25;
    *(_DWORD *)v29 = v24;
    *(_QWORD *)(v29 + 4) = *v27;
    ++*(_DWORD *)(v13 + 12);
  }
  if (a3)
  {
    v30 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 4);
    v31 = v30 > 0x12;
    v32 = (1 << v30) & 0x40104;
    if (!v31 && v32 != 0 && !*(_QWORD *)(a2 + 48))
    {
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), **(unsigned __int8 **)(a1 + 16) | 0x1000000000, **(char **)(a1 + 16), v19, v20, v21, v22, v23);
      v34 = *(_QWORD *)a1;
      JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 1, **(char **)(a1 + 16), 2, v35, v36, v37, v38, (uint64_t)v75);
      v44 = v75[0];
      if (v75[0] != -1)
      {
        v45 = *(unsigned int *)(v34 + 12);
        if ((_DWORD)v45 == *(_DWORD *)(v34 + 8))
        {
          v46 = (void *)(v45 + 1);
          v47 = v75;
LABEL_27:
          v55 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v46, (unint64_t)v47, v39, v40, v41, v42, v43);
          v57 = *v55;
          v56 = v55 + 1;
          v44 = v57;
          LODWORD(v45) = *(_DWORD *)(v34 + 12);
LABEL_37:
          v68 = *(_QWORD *)v34 + 12 * v45;
          *(_DWORD *)v68 = v44;
          *(_QWORD *)(v68 + 4) = *v56;
          ++*(_DWORD *)(v34 + 12);
          return;
        }
        v67 = v75;
        goto LABEL_36;
      }
    }
    return;
  }
  v48 = *(_QWORD *)(a2 + 48);
  if (v48)
  {
    v49 = *(_QWORD *)(v12 + 16);
    v50 = *(unsigned __int8 *)(a2 + 9);
    if ((*(_WORD *)(v49 + 129) & 0x200) != 0 && BYTE6(qword_1ECF4C780))
    {
      if (v50 <= 0x16)
      {
        JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(v49 + 120) | 0x3800000000, **(char **)(a1 + 16), v19, v20, v21, v22, v23);
        v63 = *(unsigned __int8 *)(a2 + 9);
        switch(v63)
        {
          case 4:
            v64 = *(_QWORD *)(a1 + 8);
            v65 = **(char **)(a1 + 16);
            v66 = 0x4C000000000;
            break;
          case 3:
            v64 = *(_QWORD *)(a1 + 8);
            v65 = **(char **)(a1 + 16);
            v66 = 0x4B800000000;
            break;
          case 2:
            v64 = *(_QWORD *)(a1 + 8);
            v65 = **(char **)(a1 + 16);
            v66 = 0x4A800000000;
            break;
          default:
            goto LABEL_50;
        }
        JSC::MacroAssemblerARM64::load64(v64, v66 & 0xFFFFFFFFFFFFFF00 | v65, v65, v58, v59, v60, v61, v62);
        return;
      }
    }
    else if (v50 <= 0x16)
    {
      v69 = *(uint64_t **)(v12 + 8);
      v70 = v69 + 149;
      v71 = v69 + 151;
      v72 = v69 + 152;
      if (v50 == 3)
        v72 = v71;
      if (v50 == 2)
        v73 = v70;
      else
        v73 = v72;
      v48 = *v73;
    }
    if ((v48 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v48 + 5) > 0x16u)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), v48, **(char **)(a1 + 16), v19, v20, v21, v22, v23);
      return;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x1981DD8E8);
  }
  if (*(unsigned __int8 *)(a2 + 9) <= 0x16u)
  {
    __break(0xC471u);
    JUMPOUT(0x1981DD9C0);
  }
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), **(unsigned __int8 **)(a1 + 16) | 0x1000000000, **(char **)(a1 + 16), v19, v20, v21, v22, v23);
  v34 = *(_QWORD *)a1;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, **(char **)(a1 + 16), 2, v51, v52, v53, v54, (uint64_t)v74);
  v44 = v74[0];
  if (v74[0] != -1)
  {
    v45 = *(unsigned int *)(v34 + 12);
    if ((_DWORD)v45 == *(_DWORD *)(v34 + 8))
    {
      v46 = (void *)(v45 + 1);
      v47 = v74;
      goto LABEL_27;
    }
    v67 = v74;
LABEL_36:
    v56 = v67 + 1;
    goto LABEL_37;
  }
}

uint64_t WTF::dataLog<char [34],JSC::ObjectPropertyCondition,char [2]>(JSC::ObjectPropertyCondition *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "This condition is no longer met: ");
  JSC::ObjectPropertyCondition::dumpInContext(a1, v4, 0);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

__n128 WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::ObjectPropertyCondition,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::ObjectPropertyCondition,64ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    if ((_DWORD)v4)
    {
      v12 = *(_QWORD *)a1;
      v13 = 24 * v4;
      v14 = v3;
      do
      {
        v15 = *(_OWORD *)v14;
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(v14 + 16);
        *(_OWORD *)v12 = v15;
        v12 += 24;
        v14 += 24;
        v13 -= 24;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::ObjectPropertyCondition,64ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x41)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 64;
  }
  else if (a2 >= 0xAAAAAAB)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = 24 * a2;
    result = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t JSC::OptimizingCallLinkInfo::OptimizingCallLinkInfo(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v9 = *a2;
  if ((*a2 & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v12 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v12 != 0x3FFFFFFF)
        ? (v13 = (_DWORD)v12 == -1)
        : (v13 = 1),
          v13))
    {
      v14 = 2;
    }
    else if (v12 >> 28)
    {
      v20 = v11;
      v25 = a3;
      v21 = v12;
      v11 = WTF::fastMalloc((WTF *)0x10);
      a3 = v25;
      *(_QWORD *)v11 = v20;
      *(_DWORD *)(v11 + 8) = v21;
      v14 = 1;
    }
    else
    {
      v14 = v11;
      v11 = v12 << 36;
    }
    v9 = v11 | v14;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 17) = *(_WORD *)(a1 + 17) & 0xF000 | 0x100;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = a3;
  if ((v9 & 1) != 0)
  {
    v15 = v9 & 0xFFFFFFFF8;
    v16 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v17 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
        ? (v18 = (_DWORD)v17 == -1)
        : (v18 = 1),
          v18))
    {
      v19 = 2;
    }
    else if (v17 >> 28)
    {
      v26 = v15;
      v22 = v16;
      v23 = v17;
      v24 = WTF::fastMalloc((WTF *)0x10);
      v15 = v26;
      *(_QWORD *)v24 = v22;
      *(_DWORD *)(v24 + 8) = v23;
      v19 = 1;
      v16 = v24;
    }
    else
    {
      v19 = v16;
      v16 = v17 << 36;
    }
    *(_QWORD *)(a1 + 72) = v16 | v19;
    if (v15)
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 0x11)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::Bag<std::variant<JSC::StructureTransitionStructureStubClearingWatchpoint,JSC::AdaptiveValueStructureStubClearingWatchpoint>,WTF::RawPtrTraits<std::variant<JSC::StructureTransitionStructureStubClearingWatchpoint,JSC::AdaptiveValueStructureStubClearingWatchpoint>>,WTF::FastMalloc>::add<std::in_place_type_t<JSC::AdaptiveValueStructureStubClearingWatchpoint> const&,JSC::ObjectPropertyCondition const&,JSC::WatchpointSet &>(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  result = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)result = off_1E3580B60;
  v7 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v7;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 1;
  if ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1981DE0D4);
  }
  *(_QWORD *)result = off_1E3583610;
  do
    v8 = __ldaxr(a3);
  while (__stlxr(v8 + 1, a3));
  *(_QWORD *)(result + 80) = a3;
  if ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1981DE0F4);
  }
  *(_DWORD *)(result + 88) = 1;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 96) = *a1;
  *a1 = result;
  return result;
}

void WTF::VectorTypeOperations<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>::destruct(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          JSC::AccessCase::operator delete((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::WatchpointSet *>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::WatchpointSet *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 4)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1981DE334);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 4)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t JSC::AccessCase::hash(JSC::AccessCase *this)
{
  uint64_t v2;
  JSC::ObjectPropertyCondition *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = (JSC::ObjectPropertyCondition *)(v2 + 8);
  else
    v3 = 0;
  if (v2)
    v4 = v2 + 8 + 24 * *(unsigned int *)(v2 + 4);
  else
    v4 = 0;
  v5 = -1640531527;
  while (v3 != (JSC::ObjectPropertyCondition *)v4)
  {
    v6 = JSC::ObjectPropertyCondition::hash(v3);
    v7 = (v6 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)v6) << 16) ^ (v5 + (unsigned __int16)v6);
    v5 = v7 + (v7 >> 11);
    v3 = (JSC::ObjectPropertyCondition *)((char *)v3 + 24);
  }
  v8 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  v9 = (v8 ^ (4 * v8)) + ((v8 ^ (4 * v8)) >> 15);
  v10 = v9 ^ (v9 << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = (v10 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v10 - 1640531527) << 16) ^ ((unsigned __int16)v10 - 1640531527);
  v13 = *((_DWORD *)this + 2);
  v12 = *((_DWORD *)this + 3);
  v14 = v11 + *((unsigned __int8 *)this + 4) + (v11 >> 11);
  v15 = (v14 ^ (v14 << 16)) + *((unsigned __int8 *)this + 5) + ((v14 ^ (v14 << 16)) >> 11);
  v16 = (v15 ^ (v15 << 16)) + ((16 * v12) & 0xFFE0) + ((v15 ^ (v15 << 16)) >> 11);
  v17 = (v12 >> 1) & 0x7FFF800 ^ (v16 << 16) ^ v16;
  v18 = (v17 + (v12 >> 28) + (v17 >> 11)) ^ ((v17 + (v12 >> 28) + (v17 >> 11)) << 16);
  v19 = v18 + (unsigned __int16)v13 + (v18 >> 11);
  v20 = (((v13 >> 5) & 0x7FFF800 ^ (v19 << 16) ^ v19) + (((v13 >> 5) & 0x7FFF800 ^ (v19 << 16) ^ v19) >> 11)) ^ (8 * (((v13 >> 5) & 0x7FFF800 ^ (v19 << 16) ^ v19) + (((v13 >> 5) & 0x7FFF800 ^ (v19 << 16) ^ v19) >> 11)));
  v21 = (v20 + (v20 >> 5)) ^ (4 * (v20 + (v20 >> 5)));
  v22 = (v21 + (v21 >> 15)) ^ ((v21 + (v21 >> 15)) << 10);
  if (v22)
    return v22;
  else
    return 0x800000;
}

uint64_t JSC::ObjectPropertyCondition::hash(JSC::ObjectPropertyCondition *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *((_QWORD *)this + 1);
  v1 = ((v4 & 0xFFFFFFFFFFFFLL) + ~(v4 << 32)) ^ (((v4 & 0xFFFFFFFFFFFFuLL) + ~(v4 << 32)) >> 22);
  v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  LODWORD(v4) = ((v3 >> 31) ^ v3) + BYTE6(v4);
  if (BYTE6(v4) <= 7u)
  {
    if (((1 << SBYTE6(v4)) & 0x9C) != 0)
    {
      v5 = ~(*((_QWORD *)this + 2) << 32) + *((_QWORD *)this + 2);
LABEL_4:
      v6 = 9
         * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      LODWORD(v4) = v4 ^ (v7 >> 31) ^ v7;
      goto LABEL_5;
    }
    if (BYTE6(v4) == 5)
    {
      v5 = *((_QWORD *)this + 2) + ~(*((_QWORD *)this + 2) << 32);
      goto LABEL_4;
    }
    if (((1 << SBYTE6(v4)) & 3) != 0)
      LODWORD(v4) = *((_DWORD *)this + 4) ^ *((_DWORD *)this + 5) ^ v4;
  }
LABEL_5:
  v8 = (~(*(_QWORD *)this << 32) + *(_QWORD *)this) ^ ((~(*(_QWORD *)this << 32) + *(_QWORD *)this) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((unint64_t)(v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  return v4 ^ v10 ^ (v10 >> 31);
}

BOOL WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::isEmptyBucket(uint64_t a1, uint8x8_t a2)
{
  unsigned __int32 v2;
  BOOL v3;

  a2.i32[0] = *(_DWORD *)(a1 + 8);
  v2 = vmovn_s16((int16x8_t)vmovl_u8(a2)).u32[0];
  if (*(_QWORD *)a1)
    v3 = 0;
  else
    v3 = v2 == 0;
  return v3 && *(_BYTE *)(a1 + 12) == 0;
}

void WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int j;
  uint64_t v29;
  uint64_t v30;
  JSC::AccessCase **v31;
  uint64_t v32;
  unsigned int v33;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v23 = (uint64_t *)(v10 + 16 * i);
      if (*v23 != 1
        && !WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::isEmptyBucket(v10 + 16 * i, *(uint8x8_t *)&v21))
      {
        v24 = *a1;
        if (*a1)
          v25 = *(_DWORD *)(v24 - 8);
        else
          v25 = 0;
        v26 = *v23;
        if (*v23)
        {
          v27 = *(_DWORD *)(v26 + 20);
          if (!v27)
          {
            v31 = *(JSC::AccessCase ***)(v26 + 56);
            if (v31)
            {
              v33 = *(_DWORD *)v31++;
              v32 = v33;
            }
            else
            {
              v32 = 0;
            }
            v27 = JSC::PolymorphicAccessJITStubRoutine::computeHash(v31, v32);
            *(_DWORD *)(v26 + 20) = v27;
          }
        }
        else
        {
          v27 = 1;
        }
        for (j = 0; ; v27 = j + v29)
        {
          v29 = v27 & v25;
          if (!*(_QWORD *)(v24 + 16 * v29))
          {
            v30 = v24 + 16 * v29;
            LODWORD(v21) = *(_DWORD *)(v30 + 8);
            *(int8x8_t *)&v21 = vmovn_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)&v21));
            if (!(_DWORD)v21 && !*(_BYTE *)(v30 + 12))
              break;
          }
          ++j;
        }
        v21 = *(_OWORD *)v23;
        *(_OWORD *)(v24 + 16 * v29) = *(_OWORD *)v23;
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = *a1;
  if (*a1 && (v9 = *(_DWORD *)(v8 - 4)) != 0)
    v10 = (v9 << (6 * *(_DWORD *)(v8 - 12) >= (2 * v9)));
  else
    v10 = 8;
  WTF::HashTable<JSC::SharedJITStubSet::Hash::Key,JSC::SharedJITStubSet::Hash::Key,WTF::IdentityExtractor,JSC::SharedJITStubSet::Hash,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>,WTF::SimpleClassHashTraits<JSC::SharedJITStubSet::Hash::Key>>::rehash(a1, v10, 0, a4, a5, a6, a7, a8);
}

uint64_t WTF::Vector<std::pair<JSC::InlineWatchpointSet &,JSC::StringFireDetail>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::pair<JSC::InlineWatchpointSet &,JSC::StringFireDetail>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 24 * v8;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v19 = (_QWORD *)v5;
      do
      {
        *v11 = *v19;
        v11[1] = &off_1E3583C90;
        v11[2] = v19[2];
        v19 += 3;
        v11 += 3;
      }
      while (v19 != (_QWORD *)(v5 + 24 * v9));
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::pair<JSC::InlineWatchpointSet &,JSC::StringFireDetail>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 24 * v4;
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = (_QWORD *)v6;
        do
        {
          *v9 = *v17;
          v9[1] = &off_1E3583C90;
          v9[2] = v17[2];
          v17 += 3;
          v9 += 3;
        }
        while (v17 != (_QWORD *)(v6 + 24 * v7));
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t *WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::expand(result, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = v13 + 16 * v20;
  v22 = *(_QWORD *)v21;
  if (*(_QWORD *)v21)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v13 - 4);
        v30 = 0;
        v29 = v13 + 16 * v33;
        goto LABEL_12;
      }
      if (v22 == -1)
        v31 = (_QWORD *)v21;
      v20 = (v20 + v32) & v15;
      v21 = v13 + 16 * v20;
      v22 = *(_QWORD *)v21;
      ++v32;
    }
    while (*(_QWORD *)v21);
    if (v31)
    {
      *v31 = 0;
      v31[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = (unint64_t)v31;
    }
  }
  *(_QWORD *)v21 = v16;
  *(_DWORD *)(v21 + 8) = *a3;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_11;
LABEL_21:
    result = (uint64_t *)WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::expand(v11, v21, (uint64_t)a3, a4, a5, a6, a7, a8);
    v21 = (unint64_t)result;
    v25 = *v11;
    if (*v11)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
    goto LABEL_11;
  }
  if (3 * v28 <= 4 * v27)
    goto LABEL_21;
LABEL_11:
  v29 = v25 + 16 * v28;
  v30 = 1;
LABEL_12:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v30;
  return result;
}

_OWORD *WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  _QWORD *v25;
  _OWORD *v26;

  v10 = *a1;
  if (!*a1)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_3;
  }
  v11 = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!v11)
  {
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v13 = v11 << (6 * v12 >= 2 * v11);
LABEL_4:
  v14 = WTF::fastZeroedMalloc(16 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  v22 = 0;
  if (v11)
  {
    v24 = v11;
    v25 = (_QWORD *)v10;
    do
    {
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v26 = (_OWORD *)WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>,JSC::CodeBlock *>(a1, v25);
        *v26 = *(_OWORD *)v25;
        if (v25 == (_QWORD *)a2)
          v22 = v26;
      }
      v25 += 2;
      --v24;
    }
    while (v24);
    goto LABEL_13;
  }
  result = 0;
  if (v10)
  {
LABEL_13:
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_OWORD *WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  _QWORD *v24;
  _OWORD *v25;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    LODWORD(v12) = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    LODWORD(v12) = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if ((_DWORD)v12)
  {
    v12 = v12;
    v24 = (_QWORD *)v11;
    do
    {
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v25 = (_OWORD *)WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>,JSC::CodeBlock *>(a1, v24);
        *v25 = *(_OWORD *)v24;
        if (v24 == (_QWORD *)a3)
          v22 = v25;
      }
      v24 += 2;
      --v12;
    }
    while (v12);
    goto LABEL_12;
  }
  result = 0;
  if (v11)
  {
LABEL_12:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>,JSC::CodeBlock *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + v6;
  }
  while (*(_QWORD *)(v2 + 16 * v6));
  return v2 + 16 * v6;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = ~(*a1 << 32) + *a1;
  v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

uint64_t WTF::HashCountedSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::remove(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  int v23;

  v8 = *a1;
  if (!*a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = ~(*a2 << 32) + *a2;
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v9 & (((v12 + ~(v12 << 27)) >> 31) ^ ((_DWORD)v12 + ~((_DWORD)v12 << 27)));
  v14 = *(_QWORD *)(v8 + 16 * v13);
  if (v14 != *a2)
  {
    v23 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v23) & v9;
      v14 = *(_QWORD *)(v8 + 16 * v13);
      ++v23;
      if (v14 == *a2)
        goto LABEL_3;
    }
    v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_3:
  if (v13 == *(_DWORD *)(v8 - 4))
    return 0;
  v15 = v8 + 16 * v13;
  if (*(_DWORD *)(v15 + 8) == 1)
  {
    *(_QWORD *)v15 = -1;
    ++*(_DWORD *)(*a1 - 16);
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) - 1;
    else
      v17 = -1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *a1;
    if (*a1)
    {
      v19 = 6 * *(_DWORD *)(v18 - 12);
      v20 = *(_DWORD *)(v18 - 4);
      if (v19 < v20 && v20 >= 9)
        WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(a1, v20 >> 1, 0, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  else
  {
    result = 0;
    --*(_DWORD *)(v15 + 8);
  }
  return result;
}

void JSC::InlineCacheHandler::~InlineCacheHandler(JSC::InlineCacheHandler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  JSC::InlineCacheHandler *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  JSC::JITStubRoutine *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::CallLinkInfo *v28;
  uint64_t v29;
  uint64_t v30;

  v10 = (JSC::InlineCacheHandler *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v10);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
  {
    v12 = (uint64_t *)v11[1];
    if (v12)
    {
      v13 = *v11;
      *v12 = *v11;
      *(_QWORD *)(v13 + 8) = v12;
      *v11 = 0;
      v11[1] = 0;
    }
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      JSC::AccessCase::operator delete((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v17 = (JSC::JITStubRoutine *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
  {
    v18 = *((_DWORD *)v17 + 4) - 1;
    *((_DWORD *)v17 + 4) = v18;
    if (!v18)
      JSC::JITStubRoutine::observeZeroRefCount(v17, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  v19 = *((unsigned int *)this + 1);
  if ((_DWORD)v19)
  {
    v28 = (JSC::InlineCacheHandler *)((char *)this + 96);
    v29 = 80 * v19;
    do
    {
      JSC::CallLinkInfo::~CallLinkInfo(v28, a2, a3, a4, a5, a6, a7, a8, a9);
      v28 = (JSC::CallLinkInfo *)(v30 + 80);
      v29 -= 80;
    }
    while (v29);
  }
}

void WTF::VectorTypeOperations<std::unique_ptr<JSC::OptimizingCallLinkInfo>>::destruct(JSC::CallLinkInfo **a1, JSC::CallLinkInfo **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  JSC::CallLinkInfo **v10;
  JSC::CallLinkInfo *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v10 = a1;
    do
    {
      v11 = *v10;
      *v10 = 0;
      if (v11)
      {
        JSC::CallLinkInfo::~CallLinkInfo(v11, a2, a3, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      ++v10;
    }
    while (v10 != a2);
  }
}

uint64_t JSC::InByVariant::overlaps(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[3];
  v3 = a2[3];
  if ((v2 != 0) != (v3 != 0))
    return 1;
  if (!v2)
    return WTF::TinyPtrSet<JSC::Structure *>::overlaps(a1, a2);
  v4 = (v2 & 1) != 0 ? v2 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v2 + 8);
  if (v3)
  {
    if ((v3 & 1) != 0)
      v3 &= ~1uLL;
    else
      v3 = *(_QWORD *)(v3 + 8);
  }
  if (v4 == v3)
    return WTF::TinyPtrSet<JSC::Structure *>::overlaps(a1, a2);
  return 0;
}

unint64_t WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

void WTF::VectorMover<false,JSC::InByVariant>::moveOverlapping(char *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  int64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v8 = a2;
  if ((unint64_t)a1 <= a3)
  {
    v10 = a2 - a1;
    if (a2 != a1)
    {
      v11 = (uint64_t *)(a3 + v10);
      v12 = (uint64_t *)(a3 + v10);
      v13 = a2;
      do
      {
        *(v12 - 4) = 0;
        v12 -= 4;
        v15 = *((_QWORD *)v13 - 4);
        v13 -= 32;
        v14 = v15;
        if ((v15 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v12, v13);
        else
          *v12 = v14 & 0xFFFFFFFFFFFFFFFDLL;
        v16 = *((_QWORD *)v8 - 3);
        *((_QWORD *)v8 - 3) = 0;
        *(v11 - 3) = v16;
        *((_OWORD *)v11 - 1) = *((_OWORD *)v8 - 1);
        v17 = (unsigned int *)*((_QWORD *)v8 - 3);
        *((_QWORD *)v8 - 3) = 0;
        if (v17)
        {
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*(_QWORD *)v13 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v11 = v12;
        v8 = v13;
      }
      while (v13 != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,JSC::InByVariant>::move(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

JSC::InByVariant ***WTF::ListDump<WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(JSC::InByVariant ***result, uint64_t a2)
{
  JSC::InByVariant ***v3;
  JSC::InByVariant *v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  JSC::InByVariant **v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  JSC::InByVariant **v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = (char *)v3[1];
        v11 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = (_DWORD)v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v22, v13);
        }
        else
        {
          v20 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v20 = 1;
          *(_QWORD *)(v20 + 8) = 0;
          *(_BYTE *)(v20 + 16) = 0;
          v22 = v20;
          v23 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v22);
        if (v23 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = (char *)v3[3];
        v16 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = (_DWORD)v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v22, v18);
        }
        else
        {
          v21 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v21 = 1;
          *(_QWORD *)(v21 + 8) = 0;
          *(_BYTE *)(v21 + 16) = 0;
          v22 = v21;
          v23 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v22);
        if (v23 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      JSC::InByVariant::dumpInContext(v4, v5, 0);
      result = (JSC::InByVariant ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = (JSC::InByVariant *)((char *)v4 + 32);
    }
    while (v4 != (JSC::InByVariant *)((char *)**v3 + 32 * *((unsigned int *)*v3 + 3)));
  }
  return result;
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)49594>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  __int128 v27;
  uint64_t v28;

  v10 = *((unsigned __int8 *)a1 + 8);
  switch(*((_BYTE *)a1 + 8))
  {
    case 0x83:
    case 0x87:
      result = a3 + 32;
      v12 = *a1;
      v13 = *((_BYTE *)a1 + 9);
      v14 = *((unsigned __int8 *)a1 + 10);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v12;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v13 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      if (v14)
        v16 = 192;
      else
        v16 = 128;
      goto LABEL_6;
    case 0x84:
    case 0x88:
      result = a3 + 32;
      v17 = *a1;
      v18 = *((_BYTE *)a1 + 9);
      v19 = *((_WORD *)a1 + 2);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v17;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v18 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      v16 = v19 & 0x3F | 0x80;
LABEL_6:
      WORD2(v28) = v16;
      LOBYTE(v28) = v15;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 != *(_DWORD *)(a3 + 40))
        goto LABEL_7;
      goto LABEL_10;
    default:
      result = a3 + 32;
      v24 = *a1;
      v25 = *((_BYTE *)a1 + 9);
      LOBYTE(v28) = -1;
      *(_QWORD *)&v27 = v24;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v25 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      WORD2(v28) = 128;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 == *(_DWORD *)(a3 + 40))
      {
LABEL_10:
        result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v20 + 1, (unint64_t)&v27, a4, a5, a6, a7, a8);
        v21 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_BYTE *)(v21 + 16) = -1;
        v26 = (*(unsigned __int8 *)(v21 + 19) << 16) | 0xF0000;
        *(_WORD *)(v21 + 17) = 65;
        *(_BYTE *)(v21 + 19) = BYTE2(v26);
        *(_WORD *)(v21 + 20) &= 0xFC00u;
        v22 = *(_OWORD *)result;
        v23 = *(_QWORD *)(result + 16);
      }
      else
      {
LABEL_7:
        v21 = *(_QWORD *)result + 24 * v20;
        v22 = v27;
        v23 = v28;
      }
      *(_QWORD *)(v21 + 16) = v23;
      *(_OWORD *)v21 = v22;
      ++*(_DWORD *)(a3 + 44);
      return result;
  }
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)10924>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  __int128 v27;
  uint64_t v28;

  v10 = *((unsigned __int8 *)a1 + 8);
  switch(*((_BYTE *)a1 + 8))
  {
    case 0x83:
    case 0x87:
      result = a3 + 32;
      v12 = *a1;
      v13 = *((_BYTE *)a1 + 9);
      v14 = *((unsigned __int8 *)a1 + 10);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v12;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v13 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      if (v14)
        v16 = 192;
      else
        v16 = 128;
      goto LABEL_6;
    case 0x84:
    case 0x88:
      result = a3 + 32;
      v17 = *a1;
      v18 = *((_BYTE *)a1 + 9);
      v19 = *((_WORD *)a1 + 2);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v17;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v18 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      v16 = v19 & 0x3F | 0x80;
LABEL_6:
      WORD2(v28) = v16;
      LOBYTE(v28) = v15;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 != *(_DWORD *)(a3 + 40))
        goto LABEL_7;
      goto LABEL_10;
    default:
      result = a3 + 32;
      v24 = *a1;
      v25 = *((_BYTE *)a1 + 9);
      LOBYTE(v28) = -1;
      *(_QWORD *)&v27 = v24;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v25 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      WORD2(v28) = 128;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 == *(_DWORD *)(a3 + 40))
      {
LABEL_10:
        result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v20 + 1, (unint64_t)&v27, a4, a5, a6, a7, a8);
        v21 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_BYTE *)(v21 + 16) = -1;
        v26 = (*(unsigned __int8 *)(v21 + 19) << 16) | 0xF0000;
        *(_WORD *)(v21 + 17) = 65;
        *(_BYTE *)(v21 + 19) = BYTE2(v26);
        *(_WORD *)(v21 + 20) &= 0xFC00u;
        v22 = *(_OWORD *)result;
        v23 = *(_QWORD *)(result + 16);
      }
      else
      {
LABEL_7:
        v21 = *(_QWORD *)result + 24 * v20;
        v22 = v27;
        v23 = v28;
      }
      *(_QWORD *)(v21 + 16) = v23;
      *(_OWORD *)v21 = v22;
      ++*(_DWORD *)(a3 + 44);
      return result;
  }
}

_DWORD *WTF::Vector<JSC::StructureID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::StructureID>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::StructureID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<JSC::StructureID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::StructureID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::StructureID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::StructureID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::StructureID,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    v12 = *(_QWORD *)a1;
    if ((_DWORD)v4)
    {
      v13 = 4 * v4;
      v14 = *(_DWORD **)a1;
      v15 = (int *)v3;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        v13 -= 4;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (v12 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::StructureID,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 5)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 4;
  }
  else
  {
    v3 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(4 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID &>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  _QWORD *v5;

  result = WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1);
  v5 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
  *v5 = *a2;
  v5[1] = 0;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID&>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;
  uint64_t v4;

  result = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

void WTF::Vector<std::unique_ptr<JSC::OptimizingCallLinkInfo>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 0x11)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::InlineCacheCompiler::compile(JSC::GCSafeConcurrentJSLocker const&,JSC::PolymorphicAccess &,JSC::CodeBlock *)::$_2>::run(uint64_t a1, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;

  v24 = *(_OWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 <= v6 && v5 + a2[1] >= v6)
  {
    v25 = v6;
    LODWORD(v24) = *(_DWORD *)(a1 + 44);
    DWORD1(v24) = v24 + 1;
    v8 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(v8 + 224);
    v10 = (unint64_t *)(v8 + 224);
    v9 = v11;
    if (!v11)
    {
      v17 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v17 = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      __dmb(0xAu);
      std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100](v10, v17, v18, v19, v20, v21, v22, v23);
      v9 = *v10;
    }
    v12 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v9 + 8))
    {
      v16 = WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v12 + 1, (unint64_t)&v24);
      v13 = *(_QWORD *)v9 + 24 * *(unsigned int *)(v9 + 12);
      v14 = *(_OWORD *)v16;
      v15 = *(_QWORD *)(v16 + 16);
    }
    else
    {
      v13 = *(_QWORD *)v9 + 24 * v12;
      v14 = v24;
      v15 = v25;
    }
    *(_QWORD *)(v13 + 16) = v15;
    *(_OWORD *)v13 = v14;
    ++*(_DWORD *)(v9 + 12);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 24 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v20 + 16);
        *(_OWORD *)v11 = v21;
        v11 += 24;
        v20 += 24;
        v19 -= 24;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

unsigned int ***WTF::ListDump<WTF::FixedVector<WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>>>::dump(unsigned int ***result, uint64_t a2)
{
  unsigned int ***v3;
  unsigned int *v4;
  JSC::AccessCase **v5;
  WTF::PrintStream *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  char *v11;
  unsigned int **v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  char *v16;
  unsigned int **v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  JSC::AccessCase *v23;
  uint64_t v24;
  int v25;
  char v26;

  v3 = result;
  v4 = **result;
  if (v4)
    v5 = (JSC::AccessCase **)(v4 + 2);
  else
    v5 = 0;
  if (v4)
LABEL_5:
    v4 += 2 * *v4 + 2;
  while (v5 != (JSC::AccessCase **)v4)
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v7 = *((unsigned __int8 *)v3 + 40);
    v8 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v9 = v8;
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32);
    if (v7)
    {
      v11 = (char *)v3[1];
      v12 = v3[2];
      v13 = (WTF::PrintStream *)v10(v8);
      if (v11)
      {
        v15 = (_DWORD)v12 - 1;
        if (!v12)
          v15 = 0;
        WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v24, v14);
      }
      else
      {
        v21 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = 0;
        *(_BYTE *)(v21 + 16) = 0;
        v24 = v21;
        v25 = 0;
      }
      WTF::printExpectedCStringHelper(v13, "StringView", &v24);
      if (v25 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    }
    else
    {
      v16 = (char *)v3[3];
      v17 = v3[4];
      v18 = (WTF::PrintStream *)v10(v8);
      if (v16)
      {
        v20 = (_DWORD)v17 - 1;
        if (!v17)
          v20 = 0;
        WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v24, v19);
      }
      else
      {
        v22 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = 0;
        *(_BYTE *)(v22 + 16) = 0;
        v24 = v22;
        v25 = 0;
      }
      WTF::printExpectedCStringHelper(v18, "StringView", &v24);
      if (v25 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      *((_BYTE *)v3 + 40) = 1;
    }
    v23 = *v5++;
    JSC::AccessCase::dump(v23, v6);
    result = (unsigned int ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v4 = **v3;
    if (v4)
      goto LABEL_5;
  }
  return result;
}

unint64_t *WTF::FixedVector<JSC::StructureID>::FixedVector<4ul,WTF::CrashOnOverflow>(unint64_t *a1, WTF **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  size_t v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  _DWORD *v25;
  int v26;
  WTF *v27;
  int v28;
  _BYTE v29[16];
  WTF *v30;
  int v31;
  unsigned int v32;
  _BYTE v33[16];

  *a1 = 0;
  v27 = (WTF *)v29;
  v28 = 4;
  v9 = *a2;
  if (*a2 == (WTF *)(a2 + 2))
  {
    v10 = *((unsigned int *)a2 + 3);
    if (!(_DWORD)v10)
    {
      v11 = 0;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_4;
    }
    v15 = 4 * v10;
    v16 = v29;
    do
    {
      v17 = *(_DWORD *)v9;
      v9 = (WTF *)((char *)v9 + 4);
      *v16++ = v17;
      v15 -= 4;
    }
    while (v15);
    v9 = (WTF *)v29;
  }
  else
  {
    *a2 = (WTF *)(a2 + 2);
    v27 = v9;
    v26 = *((_DWORD *)a2 + 2);
    LODWORD(v10) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 2) = 4;
    v28 = v26;
  }
  *((_DWORD *)a2 + 3) = 0;
  if ((_DWORD)v10)
  {
    v30 = (WTF *)v33;
    v31 = 4;
    if (v9 == (WTF *)v29)
    {
      v18 = 4 * v10;
      memcpy(v33, v29, v18);
    }
    else
    {
      v27 = (WTF *)v29;
      v30 = v9;
      v31 = v28;
      v18 = 4 * v10;
    }
    v32 = v10;
    v11 = (_DWORD *)WTF::fastMalloc((WTF *)(v18 + 4));
    v19 = v30;
    v20 = v32;
    *v11 = v10;
    if ((_DWORD)v20)
    {
      v21 = v11 + 1;
      v22 = 4 * v20;
      v23 = v19;
      do
      {
        v24 = *(_DWORD *)v23;
        v23 = (WTF *)((char *)v23 + 4);
        *v21++ = v24;
        v22 -= 4;
      }
      while (v22);
    }
    if (v33 != (_BYTE *)v19 && v19)
    {
      v30 = 0;
      v31 = 0;
      v25 = v11;
      WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
      v11 = v25;
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_4:
  v12 = *a1;
  *a1 = (unint64_t)v11;
  if (v12)
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  if (v29 != (_BYTE *)v27 && v27 != 0)
    WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::customGetterHandlerImpl<true>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  JSC::AssemblerBuffer *v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 v12;
  char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint8x8_t v33;
  __int32 v34;
  int8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  JSC::AssemblerBuffer *v44;
  char v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint8x8_t v94;
  __int32 v95;
  uint8x8_t v96;
  uint64_t v97;
  char v98;
  void *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  int64_t v110;
  char v111;
  void *__dst;
  uint64_t v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;

  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E0710);
  }
  v10 = a6;
  LOBYTE(v11) = a5;
  v12 = a4;
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load32(a2, a3 | 0x7000000000, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    LODWORD(v8) = *(_BYTE *)(a2 + 272) & 0x1F | 0xB80243A0;
    v9 = (JSC::AssemblerBuffer *)(a2 + 56);
    v22 = *(_DWORD *)(a2 + 200);
    if (v22 + 4 <= *(_DWORD *)(a2 + 192))
      goto LABEL_4;
  }
  else
  {
    v15 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v16 = "RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()";
    v17 = 163;
    __break(0xC471u);
LABEL_73:
    __break(1u);
  }
  JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  v22 = *(_DWORD *)(a2 + 200);
LABEL_4:
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v22) = (_DWORD)v8;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a2, 29, a1 + 40, v17, v18, v19, v20, v21);
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = v12 & 0x1F | 0xF8430120;
  v24 = *(_DWORD *)(a2 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a2 + 200) = v24 + 4;
  LODWORD(v8) = v11 & 0x1F | 0xF8420120;
  if ((v24 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21);
    v25 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = (_DWORD)v8;
  *(_DWORD *)(a2 + 200) += 4;
  if (!BYTE1(qword_1ECF4C780))
  {
    __dst = &v114;
    v114 = v12;
    v115 = 256;
    v116 = v11 | 0x200;
    v113 = 0x300000003;
    v26 = 3;
    v10 = 2432696320;
    v12 = -32;
    while (1)
    {
      v27 = 0;
      v28 = 0;
      v29 = __dst;
      v30 = v26;
      do
      {
        if ((*((_BYTE *)__dst + v27 + 1) & 0x40) != 0)
          goto LABEL_73;
        v28 |= 1 << *((_BYTE *)__dst + v27 + 1);
        v27 += 2;
      }
      while (2 * v26 != v27);
      v31 = 0;
      do
      {
        v32 = *((_BYTE *)__dst + v31) & 0x7F;
        if (v32 >= 0x40)
          goto LABEL_73;
        v28 &= ~(1 << v32);
        v31 += 2;
      }
      while (2 * v26 != v31);
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.i32[0];
      v35 = vcnt_s8((int8x8_t)HIDWORD(v28));
      v35.i16[0] = vaddlv_u8((uint8x8_t)v35);
      if (v35.i32[0] + v34)
        break;
      v44 = v9;
      v45 = *(_BYTE *)__dst;
      v46 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v46, v17, v18, v19, v20, v21);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v113) - 2);
      v47 = (HIDWORD(v113) - 1);
      v43 = HIDWORD(v113) == 1;
      HIDWORD(v113) = v47;
      v48 = (char *)__dst;
      v11 = (char *)__dst + 2 * v47;
      if (v43)
      {
        v54 = 0;
        v55 = 0;
        v51 = 0;
        v15 = (char *)__dst + 2 * v47;
      }
      else
      {
        v49 = 2 * v47;
        v50 = __dst;
        while (*v50 != v46)
        {
          v50 += 2;
          v49 -= 2;
          if (!v49)
            goto LABEL_43;
        }
        *v50 = v45;
LABEL_43:
        v51 = 0;
        v8 = v48;
        v15 = v11;
        v52 = v11;
        do
        {
          if (*v48 == v48[1])
          {
            v53 = v48;
            if (v52 != (char *)__dst + 2 * HIDWORD(v113))
            {
              if (v48 == v15)
              {
                v53 = v52;
              }
              else
              {
                v110 = v8 - v15;
                memmove(v52, v15, v8 - v15);
                v53 = &v52[v110];
              }
            }
            v15 = v48 + 2;
            ++v51;
            v52 = v53;
          }
          v48 += 2;
          v8 += 2;
        }
        while (v48 < v11);
        v48 = (char *)__dst;
        v54 = HIDWORD(v113);
        v55 = HIDWORD(v113);
        v11 = v52;
      }
      v56 = &v48[2 * v54];
      v10 = 2432696320;
      if (v15 != v56)
      {
        memmove(v11, v15, v56 - v15);
        v55 = HIDWORD(v113);
      }
      v26 = v55 - v51;
      v9 = v44;
      v12 = -32;
LABEL_36:
      HIDWORD(v113) = v26;
LABEL_37:
      if (!v26)
      {
        v57 = __dst;
        if (&v114 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v113) = 0;
          WTF::fastFree((unint64_t)v57, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        }
        if (!*(_BYTE *)(a2 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1981E0780);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
        v58 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8438120;
        v59 = *(_DWORD *)(a2 + 200);
        if (v59 + 4 > *(_DWORD *)(a2 + 192))
        {
          v35 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21).n128_u64[0];
          v59 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v59) = v58;
        v60 = *(_DWORD *)(a2 + 200);
        v61 = v60 + 4;
        *(_DWORD *)(a2 + 200) = v60 + 4;
        *(_DWORD *)(a2 + 208) = 0;
        if ((v60 + 8) > *(_DWORD *)(a2 + 192))
        {
          v35 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21).n128_u64[0];
          v61 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v61) = -700513792;
        *(_DWORD *)(a2 + 200) += 4;
        goto LABEL_60;
      }
    }
    v11 = 0;
    if (v26 <= 1uLL)
      v36 = 1;
    else
      v36 = v26;
    v37 = 2 * v36;
    while (1)
    {
      v38 = v11[(_QWORD)__dst + 1];
      if ((v38 & 0x7Fu) >= 0x40)
        goto LABEL_73;
      if (((v28 >> (v38 & 0x7F)) & 1) != 0)
        break;
      v11 += 2;
      if ((char *)v37 == v11)
        goto LABEL_37;
    }
    v39 = v11[(_QWORD)__dst];
    if (v39 == v38)
    {
LABEL_35:
      memmove(&v11[(_QWORD)v29], &v11[(_QWORD)v29 + 2], 2 * v30 - (_QWORD)v11 - 2);
      v26 = HIDWORD(v113) - 1;
      goto LABEL_36;
    }
    v40 = (char)v39;
    if ((char)v39 == 63)
    {
      v41 = *(_DWORD *)(a2 + 200);
      v42 = *(_DWORD *)(a2 + 192);
      if (v38 != 31)
      {
        LODWORD(v8) = v38 & 0x1F | 0xD2800000;
        goto LABEL_32;
      }
    }
    else
    {
      v41 = *(_DWORD *)(a2 + 200);
      v42 = *(_DWORD *)(a2 + 192);
      v43 = (char)v38 == 31 || v40 == 31;
      if (!v43)
      {
        LODWORD(v8) = v38 & 0xFFE0FFFF | ((v40 & 0x1F) << 16) | 0xAA0003E0;
LABEL_32:
        if (v41 + 4 > v42)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21);
          v41 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = (_DWORD)v8;
        *(_DWORD *)(a2 + 200) += 4;
        v29 = __dst;
        v30 = HIDWORD(v113);
        goto LABEL_35;
      }
    }
    LODWORD(v8) = (char)v38 | (32 * v40) | 0x91000000;
    goto LABEL_32;
  }
  JSC::MacroAssemblerARM64::load64(a2, 0x3800000009, v10, v17, v18, v19, v20, v21);
  v8 = (char *)&v114;
  __dst = &v114;
  v114 = v12;
  v115 = 256;
  v116 = v11 | 0x200;
  v117 = v10 | 0x300;
  v113 = 0x400000004;
  v88 = 4;
  v12 = 1;
  do
  {
    v89 = 0;
    v90 = 0;
    v91 = v88;
    do
    {
      if ((*((_BYTE *)__dst + v89 + 1) & 0x40) != 0)
        goto LABEL_73;
      v90 |= 1 << *((_BYTE *)__dst + v89 + 1);
      v89 += 2;
    }
    while (2 * v88 != v89);
    v92 = 0;
    do
    {
      v93 = *((_BYTE *)__dst + v92) & 0x7F;
      if (v93 >= 0x40)
        goto LABEL_73;
      v90 &= ~(1 << v93);
      v92 += 2;
    }
    while (2 * v88 != v92);
    v94 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
    v94.i16[0] = vaddlv_u8(v94);
    v95 = v94.i32[0];
    v96 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v90));
    v96.i16[0] = vaddlv_u8(v96);
    if (v96.i32[0] + v95)
    {
      v11 = 0;
      if (v88 <= 1uLL)
        v91 = 1;
      v97 = 2 * v91;
      while (1)
      {
        v98 = v11[(_QWORD)__dst + 1];
        if ((v98 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v90 >> (v98 & 0x7F)) & 1) != 0)
          break;
        v11 += 2;
        if ((char *)v97 == v11)
          goto LABEL_93;
      }
      JSC::MacroAssemblerARM64::move((_DWORD *)a2, v11[(_QWORD)__dst], v98, v17, v18, v19, v20, v21);
      memmove(&v11[(_QWORD)__dst], &v11[(_QWORD)__dst + 2], 2 * HIDWORD(v113) - (_QWORD)v11 - 2);
      v88 = --HIDWORD(v113);
    }
    else
    {
      v10 = *(char *)__dst;
      LOBYTE(v11) = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, v10, (char)v11, v17, v18, v19, v20, v21);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v113) - 2);
      v107 = --HIDWORD(v113);
      if (HIDWORD(v113))
      {
        v108 = __dst;
        v109 = 2 * v107;
        while (*v108 != v11)
        {
          v108 += 2;
          v109 -= 2;
          if (!v109)
            goto LABEL_101;
        }
        *v108 = v10;
      }
LABEL_101:
      WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,4u>(std::array<JSC::ARM64Registers::RegisterID,4u>,std::array<JSC::ARM64Registers::RegisterID,4u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v111, 0);
      v88 = HIDWORD(v113);
    }
LABEL_93:
    ;
  }
  while (v88);
  v99 = __dst;
  if (&v114 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v113) = 0;
    WTF::fastFree((unint64_t)v99, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E0A94);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v100 = *(_BYTE *)(a2 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)vmEntryCustomGetter, v100, v17, v18, v19, v20, v21);
  *(_DWORD *)(a2 + 208) = 0;
  JSC::AssemblerBuffer::putInt(v9, (32 * (v100 & 0x1F)) | 0xD63F0000, v101, v102, v103, v104, v105, v106);
LABEL_60:
  JSC::AssemblyHelpers::emitExceptionCheck(a2, a1, 0, 0, 0xFFFFFFFFLL, v19, v20, v21, (uint64_t)&__dst, v35);
  v67 = *(_QWORD *)(a1 + 90440);
  v68 = *(_QWORD *)(v67 + 8);
  v69 = *(unsigned int **)(v67 + 16);
  if (v69)
  {
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 + 1, v69));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v68, a2, v62, v63, v64, v65, v66);
    do
    {
      v78 = __ldaxr(v69);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v69));
    if (!v79)
    {
      atomic_store(1u, v69);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v69, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v68, a2, v62, v63, v64, v65, v66);
  }
}

void JSC::customGetterHandlerImpl<false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  char *v14;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint8x8_t v39;
  __int32 v40;
  int8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  JSC::AssemblerBuffer *v50;
  char v51;
  char v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  char *v62;
  void *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint8x8_t v100;
  __int32 v101;
  uint8x8_t v102;
  uint64_t v103;
  char v104;
  void *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  int64_t v116;
  char v117;
  void *__dst;
  uint64_t v119;
  __int16 v120;
  __int16 v121;
  __int16 v122;
  __int16 v123;

  v8 = a6;
  LOBYTE(v9) = a5;
  v10 = a4;
  v11 = a3;
  LODWORD(v14) = a6 & 0x1F;
  v15 = (JSC::AssemblerBuffer *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 200);
  if (v16 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v14 | 0xF8428120;
  v17 = *(_DWORD *)(a2 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a2 + 200) = v17 + 4;
  if ((v17 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = (32 * (_DWORD)v14) | ((_DWORD)v14 << 16) | 0xEA00001F;
  v19 = *(_DWORD *)(a2 + 200);
  v20 = v19 + 4;
  *(_DWORD *)(a2 + 200) = v19 + 4;
  if ((v19 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = ((_DWORD)v14 << 16) | 0x9A800000;
  *(_DWORD *)(a2 + 200) += 4;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E10D8);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load32(a2, v11 | 0x7000000000, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    LODWORD(v14) = *(_BYTE *)(a2 + 272) & 0x1F | 0xB80243A0;
    v28 = *(_DWORD *)(a2 + 200);
    if (v28 + 4 <= *(_DWORD *)(a2 + 192))
      goto LABEL_10;
  }
  else
  {
    v21 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v22 = "RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()";
    v23 = 163;
    __break(0xC471u);
LABEL_79:
    __break(1u);
  }
  JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  v28 = *(_DWORD *)(a2 + 200);
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = (_DWORD)v14;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a2, 29, a1 + 40, v23, v24, v25, v26, v27);
  v29 = *(_DWORD *)(a2 + 200);
  if (v29 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
    v29 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = v10 & 0x1F | 0xF8430120;
  v30 = *(_DWORD *)(a2 + 200);
  v31 = v30 + 4;
  *(_DWORD *)(a2 + 200) = v30 + 4;
  LODWORD(v14) = v9 & 0x1F | 0xF8420120;
  if ((v30 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = (_DWORD)v14;
  *(_DWORD *)(a2 + 200) += 4;
  if (!BYTE1(qword_1ECF4C780))
  {
    __dst = &v120;
    v120 = v10;
    v121 = 256;
    v122 = v9 | 0x200;
    v119 = 0x300000003;
    v32 = 3;
    v8 = 2432696320;
    v10 = -32;
    while (1)
    {
      v33 = 0;
      v34 = 0;
      v35 = __dst;
      v36 = v32;
      do
      {
        if ((*((_BYTE *)__dst + v33 + 1) & 0x40) != 0)
          goto LABEL_79;
        v34 |= 1 << *((_BYTE *)__dst + v33 + 1);
        v33 += 2;
      }
      while (2 * v32 != v33);
      v37 = 0;
      do
      {
        v38 = *((_BYTE *)__dst + v37) & 0x7F;
        if (v38 >= 0x40)
          goto LABEL_79;
        v34 &= ~(1 << v38);
        v37 += 2;
      }
      while (2 * v32 != v37);
      v39 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
      v39.i16[0] = vaddlv_u8(v39);
      v40 = v39.i32[0];
      v41 = vcnt_s8((int8x8_t)HIDWORD(v34));
      v41.i16[0] = vaddlv_u8((uint8x8_t)v41);
      if (v41.i32[0] + v40)
        break;
      v50 = v15;
      v51 = *(_BYTE *)__dst;
      v52 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v52, v23, v24, v25, v26, v27);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v119) - 2);
      v53 = (HIDWORD(v119) - 1);
      v49 = HIDWORD(v119) == 1;
      HIDWORD(v119) = v53;
      v54 = (char *)__dst;
      v9 = (char *)__dst + 2 * v53;
      if (v49)
      {
        v60 = 0;
        v61 = 0;
        v57 = 0;
        v21 = (char *)__dst + 2 * v53;
      }
      else
      {
        v55 = 2 * v53;
        v56 = __dst;
        while (*v56 != v52)
        {
          v56 += 2;
          v55 -= 2;
          if (!v55)
            goto LABEL_49;
        }
        *v56 = v51;
LABEL_49:
        v57 = 0;
        v14 = v54;
        v21 = v9;
        v58 = v9;
        do
        {
          if (*v54 == v54[1])
          {
            v59 = v54;
            if (v58 != (char *)__dst + 2 * HIDWORD(v119))
            {
              if (v54 == v21)
              {
                v59 = v58;
              }
              else
              {
                v116 = v14 - v21;
                memmove(v58, v21, v14 - v21);
                v59 = &v58[v116];
              }
            }
            v21 = v54 + 2;
            ++v57;
            v58 = v59;
          }
          v54 += 2;
          v14 += 2;
        }
        while (v54 < v9);
        v54 = (char *)__dst;
        v60 = HIDWORD(v119);
        v61 = HIDWORD(v119);
        v9 = v58;
      }
      v62 = &v54[2 * v60];
      v8 = 2432696320;
      if (v21 != v62)
      {
        memmove(v9, v21, v62 - v21);
        v61 = HIDWORD(v119);
      }
      v32 = v61 - v57;
      v15 = v50;
      v10 = -32;
LABEL_42:
      HIDWORD(v119) = v32;
LABEL_43:
      if (!v32)
      {
        v63 = __dst;
        if (&v120 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v119) = 0;
          WTF::fastFree((unint64_t)v63, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
        }
        if (!*(_BYTE *)(a2 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1981E1148);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
        v64 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8438120;
        v65 = *(_DWORD *)(a2 + 200);
        if (v65 + 4 > *(_DWORD *)(a2 + 192))
        {
          v41 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)v21, (uint64_t)v22, v23, v24, v25, v26, v27).n128_u64[0];
          v65 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = v64;
        v66 = *(_DWORD *)(a2 + 200);
        v67 = v66 + 4;
        *(_DWORD *)(a2 + 200) = v66 + 4;
        *(_DWORD *)(a2 + 208) = 0;
        if ((v66 + 8) > *(_DWORD *)(a2 + 192))
        {
          v41 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)v21, (uint64_t)v22, v23, v24, v25, v26, v27).n128_u64[0];
          v67 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v67) = -700513792;
        *(_DWORD *)(a2 + 200) += 4;
        goto LABEL_66;
      }
    }
    v9 = 0;
    if (v32 <= 1uLL)
      v42 = 1;
    else
      v42 = v32;
    v43 = 2 * v42;
    while (1)
    {
      v44 = v9[(_QWORD)__dst + 1];
      if ((v44 & 0x7Fu) >= 0x40)
        goto LABEL_79;
      if (((v34 >> (v44 & 0x7F)) & 1) != 0)
        break;
      v9 += 2;
      if ((char *)v43 == v9)
        goto LABEL_43;
    }
    v45 = v9[(_QWORD)__dst];
    if (v45 == v44)
    {
LABEL_41:
      memmove(&v9[(_QWORD)v35], &v9[(_QWORD)v35 + 2], 2 * v36 - (_QWORD)v9 - 2);
      v32 = HIDWORD(v119) - 1;
      goto LABEL_42;
    }
    v46 = (char)v45;
    if ((char)v45 == 63)
    {
      v47 = *(_DWORD *)(a2 + 200);
      v48 = *(_DWORD *)(a2 + 192);
      if (v44 != 31)
      {
        LODWORD(v14) = v44 & 0x1F | 0xD2800000;
        goto LABEL_38;
      }
    }
    else
    {
      v47 = *(_DWORD *)(a2 + 200);
      v48 = *(_DWORD *)(a2 + 192);
      v49 = (char)v44 == 31 || v46 == 31;
      if (!v49)
      {
        LODWORD(v14) = v44 & 0xFFE0FFFF | ((v46 & 0x1F) << 16) | 0xAA0003E0;
LABEL_38:
        if (v47 + 4 > v48)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v47 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v47) = (_DWORD)v14;
        *(_DWORD *)(a2 + 200) += 4;
        v35 = __dst;
        v36 = HIDWORD(v119);
        goto LABEL_41;
      }
    }
    LODWORD(v14) = (char)v44 | (32 * v46) | 0x91000000;
    goto LABEL_38;
  }
  JSC::MacroAssemblerARM64::load64(a2, 0x3800000009, v8, v23, v24, v25, v26, v27);
  v14 = (char *)&v120;
  __dst = &v120;
  v120 = v10;
  v121 = 256;
  v122 = v9 | 0x200;
  v123 = v8 | 0x300;
  v119 = 0x400000004;
  v94 = 4;
  v10 = 1;
  do
  {
    v95 = 0;
    v96 = 0;
    v97 = v94;
    do
    {
      if ((*((_BYTE *)__dst + v95 + 1) & 0x40) != 0)
        goto LABEL_79;
      v96 |= 1 << *((_BYTE *)__dst + v95 + 1);
      v95 += 2;
    }
    while (2 * v94 != v95);
    v98 = 0;
    do
    {
      v99 = *((_BYTE *)__dst + v98) & 0x7F;
      if (v99 >= 0x40)
        goto LABEL_79;
      v96 &= ~(1 << v99);
      v98 += 2;
    }
    while (2 * v94 != v98);
    v100 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
    v100.i16[0] = vaddlv_u8(v100);
    v101 = v100.i32[0];
    v102 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v96));
    v102.i16[0] = vaddlv_u8(v102);
    if (v102.i32[0] + v101)
    {
      v9 = 0;
      if (v94 <= 1uLL)
        v97 = 1;
      v103 = 2 * v97;
      while (1)
      {
        v104 = v9[(_QWORD)__dst + 1];
        if ((v104 & 0x7Fu) >= 0x40)
          goto LABEL_79;
        if (((v96 >> (v104 & 0x7F)) & 1) != 0)
          break;
        v9 += 2;
        if ((char *)v103 == v9)
          goto LABEL_99;
      }
      JSC::MacroAssemblerARM64::move((_DWORD *)a2, v9[(_QWORD)__dst], v104, v23, v24, v25, v26, v27);
      memmove(&v9[(_QWORD)__dst], &v9[(_QWORD)__dst + 2], 2 * HIDWORD(v119) - (_QWORD)v9 - 2);
      v94 = --HIDWORD(v119);
    }
    else
    {
      v8 = *(char *)__dst;
      LOBYTE(v9) = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, v8, (char)v9, v23, v24, v25, v26, v27);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v119) - 2);
      v113 = --HIDWORD(v119);
      if (HIDWORD(v119))
      {
        v114 = __dst;
        v115 = 2 * v113;
        while (*v114 != v9)
        {
          v114 += 2;
          v115 -= 2;
          if (!v115)
            goto LABEL_107;
        }
        *v114 = v8;
      }
LABEL_107:
      WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,4u>(std::array<JSC::ARM64Registers::RegisterID,4u>,std::array<JSC::ARM64Registers::RegisterID,4u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v117, 0);
      v94 = HIDWORD(v119);
    }
LABEL_99:
    ;
  }
  while (v94);
  v105 = __dst;
  if (&v120 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v119) = 0;
    WTF::fastFree((unint64_t)v105, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E145CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v106 = *(_BYTE *)(a2 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)vmEntryCustomGetter, v106, v23, v24, v25, v26, v27);
  *(_DWORD *)(a2 + 208) = 0;
  JSC::AssemblerBuffer::putInt(v15, (32 * (v106 & 0x1F)) | 0xD63F0000, v107, v108, v109, v110, v111, v112);
LABEL_66:
  JSC::AssemblyHelpers::emitExceptionCheck(a2, a1, 0, 0, 0xFFFFFFFFLL, v25, v26, v27, (uint64_t)&__dst, v41);
  v73 = *(_QWORD *)(a1 + 90440);
  v74 = *(_QWORD *)(v73 + 8);
  v75 = *(unsigned int **)(v73 + 16);
  if (v75)
  {
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 + 1, v75));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v74, a2, v68, v69, v70, v71, v72);
    do
    {
      v84 = __ldaxr(v75);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v75));
    if (!v85)
    {
      atomic_store(1u, v75);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v75, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v74, a2, v68, v69, v70, v71, v72);
  }
}

void JSC::transitionHandlerImpl<false,false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned __int8 v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v10 = a3;
  v11 = a2;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a1, "storeProperty");
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = a4 & 0x1F | 0xB841C120;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::storeProperty(a1, v10, (char)v11, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_10;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v21 = *(_BYTE *)(a1 + 272) & 0x1F | 0xB8428120;
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v21;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x1981E15DCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::store32(a1, *(char *)(a1 + 272), v11, v16, v17, v18, v19, v20);
}

void JSC::transitionHandlerImpl<true,false>(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned __int8 v12;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  JSC::AssemblerBuffer *v75;
  char v76;
  int v77;
  unsigned int v78[3];
  unsigned int v79[3];

  v76 = a5;
  v12 = a4;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "allocating");
  v75 = (JSC::AssemblerBuffer *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 200);
  if (v16 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v75, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = (a6 & 0x1F | 0xB841C120) + 0x10000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::emitAllocateVariableSized((_DWORD *)a2, a7, (uint64_t)a1 + 6648, a6, a9, a8, a3, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "newlyAllocating");
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, a6, v17, v18, v19, v20, (uint64_t)v79, v21);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v75, v22, v23, v24, v25, v26, v27, v28);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  JSC::MacroAssemblerARM64::store64(a2, 63, a7, v24, v25, v26, v27, v28);
  v37 = a7 | (32 * a7) | 0x91002000;
  v38 = *(_DWORD *)(a2 + 200);
  if (v38 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v75, v30, v31, v32, v33, v34, v35, v36);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v37;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchSub32(a2, 1, a6, 8, a6, v34, v35, v36, (uint64_t)v78);
  v77 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v78, (unsigned int *)&v77, a2, v39, v40, v41, v42, v43);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v79, a2, v44, v45, v46, v47, v48, v49);
  v57 = *(_DWORD *)(a2 + 200);
  if (v57 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v75, v50, v51, v52, v53, v54, v55, v56);
    v57 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v57) = v37;
  *(_DWORD *)(a2 + 200) += 4;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "updateButterfly");
  JSC::AssemblyHelpers::nukeStructureAndStoreButterfly(a2, a1, a7, (char)v12, v53, v54, v55, v56);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E199CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v65 = *(_BYTE *)(a2 + 272) & 0x1F | 0xB8428120;
  v66 = *(_DWORD *)(a2 + 200);
  if (v66 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v75, v58, v59, v60, v61, v62, v63, v64);
    v66 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v66) = v65;
  *(_DWORD *)(a2 + 200) += 4;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E19CCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::store32(a2, *(char *)(a2 + 272), v12, v60, v61, v62, v63, v64);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "storeProperty");
  v74 = *(_DWORD *)(a2 + 200);
  if (v74 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v75, v67, v68, v69, v70, v71, v72, v73);
    v74 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v74) = a6 & 0x1F | 0xB841C120;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::storeProperty(a2, v76, (char)v12, a6, a7, v71, v72, v73);
}

void JSC::transitionHandlerImpl<true,true>(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned __int8 v12;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x8_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int j;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  JSC::VM *v129;
  JSC::AssemblerBuffer *v130;
  char v131;
  JSC::VM *v132;
  int v133;
  int v134;
  unsigned int v135[3];
  unsigned int v136[3];

  v131 = a5;
  v12 = a4;
  if ((_BYTE)word_1ECF4C286)
  {
    v129 = a1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "allocating");
    a1 = v129;
  }
  v130 = (JSC::AssemblerBuffer *)(a2 + 56);
  v15 = *(_DWORD *)(a2 + 200);
  v132 = a1;
  if (v15 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v130, a2, a3, a4, a5, a6, a7, a8);
    a1 = v132;
    v15 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v15) = (a6 & 0x1F | 0xB841C120) + 0x10000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::emitAllocateVariableSized((_DWORD *)a2, a7, (uint64_t)a1 + 6648, a6, a9, a8, a3, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "reallocating");
  v24 = a6 & 0x1F;
  v25 = *(_DWORD *)(a2 + 200);
  if (v25 + 4 > *(_DWORD *)(a2 + 192))
  {
    v23 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v130, v16, v17, v18, v19, v20, v21, v22).n128_u64[0];
    v25 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = a8 & 0x1F | 0xB8430120;
  v26 = *(_DWORD *)(a2 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a2 + 200) = v26 + 4;
  if ((v26 + 8) > *(_DWORD *)(a2 + 192))
  {
    v23 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v130, v16, v17, v18, v19, v20, v21, v22).n128_u64[0];
    v27 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = a6 & 0x1F | (unsigned __int16)(32 * (a6 & 0x1F)) | ((a8 & 0x1F) << 16) | 0x4B000000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, a6, v19, v20, v21, v22, (uint64_t)v136, v23);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v130, v28, v29, v30, v31, v32, v33, v34);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  JSC::MacroAssemblerARM64::store64(a2, 63, a7, v30, v31, v32, v33, v34);
  v43 = a7 | (32 * a7) | 0x91002000;
  v44 = *(_DWORD *)(a2 + 200);
  if (v44 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v130, v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = v43;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchSub32(a2, 1, a6, 8, a6, v40, v41, v42, (uint64_t)v135);
  v134 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v135, (unsigned int *)&v134, a2, v45, v46, v47, v48, v49);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v136, a2, v50, v51, v52, v53, v54, v55);
  JSC::MacroAssemblerARM64::load64(a2, v12 | 0x800000000, a6, v56, v57, v58, v59, v60);
  v69 = *(_DWORD *)(a2 + 200);
  if (v69 + 4 > *(_DWORD *)(a2 + 192))
  {
    v68 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v130, v61, v62, v63, v64, v65, v66, v67).n128_u64[0];
    v69 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v69) = ((a8 & 0x1F) << 16) | (32 * v24) | v24 | 0xCB000000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, a8, v64, v65, v66, v67, (uint64_t)v136, v68);
  for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v130, v70, v71, v72, v73, v74, v75, v76);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E1FD0);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load64(a2, a6 | 0xFFFFFFF800000000, *(char *)(a2 + 272), v72, v73, v74, v75, v76);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E1FF0);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::store64(a2, *(char *)(a2 + 272), a7, v78, v79, v80, v81, v82);
  v90 = *(_DWORD *)(a2 + 200);
  if (v90 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v130, v83, v84, v85, v86, v87, v88, v89);
    v90 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v90) = a6 | (32 * a6) | 0x91002000;
  v91 = *(_DWORD *)(a2 + 200);
  v92 = v91 + 4;
  *(_DWORD *)(a2 + 200) = v91 + 4;
  if ((v91 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v130, v83, v84, v85, v86, v87, v88, v89);
    v92 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v92) = v43;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchSub32(a2, 1, a8, 8, a8, v87, v88, v89, (uint64_t)v135);
  v133 = j;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v135, (unsigned int *)&v133, a2, v93, v94, v95, v96, v97);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v136, a2, v98, v99, v100, v101, v102, v103);
  v111 = *(_DWORD *)(a2 + 200);
  if (v111 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v130, v104, v105, v106, v107, v108, v109, v110);
    v111 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v111) = v43;
  *(_DWORD *)(a2 + 200) += 4;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "updateButterfly");
  JSC::AssemblyHelpers::nukeStructureAndStoreButterfly(a2, v132, a7, (char)v12, v107, v108, v109, v110);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E2054);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v119 = *(_BYTE *)(a2 + 272) & 0x1F | 0xB8428120;
  v120 = *(_DWORD *)(a2 + 200);
  if (v120 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v130, v112, v113, v114, v115, v116, v117, v118);
    v120 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v120) = v119;
  *(_DWORD *)(a2 + 200) += 4;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E2084);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::store32(a2, *(char *)(a2 + 272), v12, v114, v115, v116, v117, v118);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "storeProperty");
  v128 = *(_DWORD *)(a2 + 200);
  if (v128 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v130, v121, v122, v123, v124, v125, v126, v127);
    v128 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v128) = v24 | 0xB841C120;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::storeProperty(a2, v131, (char)v12, a6, a7, v125, v126, v127);
}

void JSC::customSetterHandlerImpl<true>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 *v8;
  JSC::AssemblerBuffer *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint8x8_t v36;
  __int32 v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  char *v47;
  int v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  char *v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint8x8_t v95;
  __int32 v96;
  uint8x8_t v97;
  uint64_t v98;
  char v99;
  void *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  int64_t v111;
  JSC::AssemblerBuffer *v112;
  char v113;
  void *__dst;
  int v115;
  unsigned int v116;
  __int16 v117;
  __int16 v118;

  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_124;
  }
  v10 = a8;
  LOBYTE(v11) = a7;
  LOBYTE(v12) = a6;
  LOBYTE(v13) = a4;
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load32(a2, a5 | 0x7000000000, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    LODWORD(v8) = *(_BYTE *)(a2 + 272) & 0x1F | 0xB80243A0;
    v9 = (JSC::AssemblerBuffer *)(a2 + 56);
    v24 = *(_DWORD *)(a2 + 200);
    if (v24 + 4 <= *(_DWORD *)(a2 + 192))
      goto LABEL_4;
  }
  else
  {
    v17 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v18 = "RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()";
    v19 = 163;
    __break(0xC471u);
LABEL_77:
    __break(1u);
  }
  JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23);
  v24 = *(_DWORD *)(a2 + 200);
LABEL_4:
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = (_DWORD)v8;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a2, 29, a1 + 40, v19, v20, v21, v22, v23);
  v25 = *(_DWORD *)(a2 + 200);
  if (v25 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23);
    v25 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = v12 & 0x1F | 0xF8430120;
  v26 = *(_DWORD *)(a2 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a2 + 200) = v26 + 4;
  if ((v26 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23);
    v27 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = v11 & 0x1F | 0xF8420120;
  *(_DWORD *)(a2 + 200) += 4;
  if (BYTE1(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::load64(a2, 0x3800000009, v10, v19, v20, v21, v22, v23);
    v8 = &v117;
    __dst = &v117;
    v115 = 5;
    v117 = v12;
    if (a3 == 1)
    {
      v88 = 1;
    }
    else
    {
      v118 = a3 | 0x100;
      v88 = 2;
    }
    if (v13 != 2)
      *(&v117 + v88++) = v13 | 0x200;
    *(&v117 + v88) = v11 | 0x300;
    v89 = v88 + 1;
    v116 = v88 + 1;
    if ((_DWORD)v10 != 4)
    {
      *(&v117 + v89) = v10 | 0x400;
      v89 = v88 + 2;
      v116 = v88 + 2;
    }
    v10 = 1;
    do
    {
      v90 = 0;
      v91 = 0;
      v92 = v89;
      do
      {
        if ((*((_BYTE *)__dst + v90 + 1) & 0x40) != 0)
          goto LABEL_77;
        v91 |= 1 << *((_BYTE *)__dst + v90 + 1);
        v90 += 2;
      }
      while (2 * v89 != v90);
      v93 = 0;
      do
      {
        v94 = *((_BYTE *)__dst + v93) & 0x7F;
        if (v94 >= 0x40)
          goto LABEL_77;
        v91 &= ~(1 << v94);
        v93 += 2;
      }
      while (2 * v89 != v93);
      v95 = (uint8x8_t)vcnt_s8((int8x8_t)v91);
      v95.i16[0] = vaddlv_u8(v95);
      v96 = v95.i32[0];
      v97 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v91));
      v97.i16[0] = vaddlv_u8(v97);
      if (v97.i32[0] + v96)
      {
        v11 = 0;
        if (v89 <= 1uLL)
          v92 = 1;
        v98 = 2 * v92;
        while (1)
        {
          v99 = v11[(_QWORD)__dst + 1];
          if ((v99 & 0x7Fu) >= 0x40)
            goto LABEL_77;
          if (((v91 >> (v99 & 0x7F)) & 1) != 0)
            break;
          v11 += 2;
          if ((char *)v98 == v11)
            goto LABEL_103;
        }
        JSC::MacroAssemblerARM64::move((_DWORD *)a2, v11[(_QWORD)__dst], v99, v19, v20, v21, v22, v23);
        memmove(&v11[(_QWORD)__dst], &v11[(_QWORD)__dst + 2], 2 * v116 - (_QWORD)v11 - 2);
        v89 = --v116;
      }
      else
      {
        LOBYTE(v13) = *(_BYTE *)__dst;
        LOBYTE(v11) = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, (char)v11, v19, v20, v21, v22, v23);
        memmove(__dst, (char *)__dst + 2, 2 * v116 - 2);
        v108 = --v116;
        if (v116)
        {
          v109 = __dst;
          v110 = 2 * v108;
          while (*v109 != v11)
          {
            v109 += 2;
            v110 -= 2;
            if (!v110)
              goto LABEL_120;
          }
          *v109 = (_BYTE)v13;
        }
LABEL_120:
        WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v113, 0);
        v89 = v116;
      }
LABEL_103:
      ;
    }
    while (v89);
    v100 = __dst;
    if (&v117 != __dst && __dst)
    {
      __dst = 0;
      v115 = 0;
      WTF::fastFree((unint64_t)v100, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
    }
    if (*(_BYTE *)(a2 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
      v101 = *(_BYTE *)(a2 + 272);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)vmEntryCustomSetter, v101, v19, v20, v21, v22, v23);
      *(_DWORD *)(a2 + 208) = 0;
      JSC::AssemblerBuffer::putInt(v9, (32 * (v101 & 0x1F)) | 0xD63F0000, v102, v103, v104, v105, v106, v107);
      goto LABEL_59;
    }
    __break(0xC471u);
LABEL_124:
    JUMPOUT(0x1981E2638);
  }
  __dst = &v117;
  v115 = 4;
  v117 = v12;
  v28 = a3;
  if (a3 != 1)
  {
    v118 = a3 | 0x100;
    v28 = 2;
  }
  if (v13 != 2)
    *(&v117 + v28++) = v13 | 0x200;
  *(&v117 + v28) = v11 | 0x300;
  v29 = v28 + 1;
  v116 = v29;
  a3 = 1;
  v10 = 2432696320;
  LODWORD(v8) = -1442839584;
  do
  {
    v30 = 0;
    v31 = 0;
    v32 = __dst;
    v33 = v29;
    do
    {
      if ((*((_BYTE *)__dst + v30 + 1) & 0x40) != 0)
        goto LABEL_77;
      v31 |= 1 << *((_BYTE *)__dst + v30 + 1);
      v30 += 2;
    }
    while (2 * v29 != v30);
    v34 = 0;
    do
    {
      v35 = *((_BYTE *)__dst + v34) & 0x7F;
      if (v35 >= 0x40)
        goto LABEL_77;
      v31 &= ~(1 << v35);
      v34 += 2;
    }
    while (2 * v29 != v34);
    v36 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v36.i16[0] = vaddlv_u8(v36);
    v37 = v36.i32[0];
    v38 = vcnt_s8((int8x8_t)HIDWORD(v31));
    v38.i16[0] = vaddlv_u8((uint8x8_t)v38);
    if (v38.i32[0] + v37)
    {
      v11 = 0;
      if (v29 <= 1uLL)
        v39 = 1;
      else
        v39 = v29;
      v40 = 2 * v39;
      while (1)
      {
        v41 = v11[(_QWORD)__dst + 1];
        if ((v41 & 0x7Fu) >= 0x40)
          goto LABEL_77;
        if (((v31 >> (v41 & 0x7F)) & 1) != 0)
          break;
        v11 += 2;
        if ((char *)v40 == v11)
          goto LABEL_41;
      }
      v42 = v11[(_QWORD)__dst];
      if (v42 == v41)
        goto LABEL_39;
      v43 = (char)v42;
      if ((char)v42 == 63)
      {
        v44 = *(_DWORD *)(a2 + 200);
        v45 = *(_DWORD *)(a2 + 192);
        if (v41 != 31)
        {
          LODWORD(v13) = v41 & 0x1F | 0xD2800000;
          goto LABEL_36;
        }
      }
      else
      {
        v44 = *(_DWORD *)(a2 + 200);
        v45 = *(_DWORD *)(a2 + 192);
        v46 = (char)v41 == 31 || v43 == 31;
        if (!v46)
        {
          LODWORD(v13) = v41 & 0xFFE0FFFF | ((v43 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
          if (v44 + 4 > v45)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23);
            v44 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = (_DWORD)v13;
          *(_DWORD *)(a2 + 200) += 4;
          v32 = __dst;
          v33 = v116;
LABEL_39:
          memmove(&v11[(_QWORD)v32], &v11[(_QWORD)v32 + 2], 2 * v33 - (_QWORD)v11 - 2);
          v29 = v116 - 1;
          goto LABEL_40;
        }
      }
      LODWORD(v13) = (char)v41 | (32 * v43) | 0x91000000;
      goto LABEL_36;
    }
    v76 = *(_BYTE *)__dst;
    LOBYTE(v13) = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, (char)v13, v19, v20, v21, v22, v23);
    memmove(__dst, (char *)__dst + 2, 2 * v116 - 2);
    v77 = v116 - 1;
    v46 = v116 == 1;
    v116 = v77;
    v12 = (char *)__dst;
    v11 = (char *)__dst + 2 * v77;
    if (v46)
    {
      v50 = 0;
      v51 = 0;
      v48 = 0;
      v17 = (char *)__dst + 2 * v77;
    }
    else
    {
      v112 = v9;
      v78 = 2 * v77;
      v79 = __dst;
      while (*v79 != v13)
      {
        v79 += 2;
        v78 -= 2;
        if (!v78)
          goto LABEL_70;
      }
      *v79 = v76;
LABEL_70:
      v48 = 0;
      v49 = v12;
      v17 = v11;
      v13 = v11;
      do
      {
        if (*v12 == v12[1])
        {
          v47 = v12;
          if (v13 != (char *)__dst + 2 * v116)
          {
            if (v12 == v17)
            {
              v47 = v13;
            }
            else
            {
              v111 = v49 - v17;
              memmove(v13, v17, v49 - v17);
              v47 = &v13[v111];
            }
          }
          v17 = v12 + 2;
          ++v48;
          v13 = v47;
        }
        v12 += 2;
        v49 += 2;
      }
      while (v12 < v11);
      v12 = (char *)__dst;
      v50 = v116;
      v51 = v116;
      v11 = v13;
      v9 = v112;
    }
    v52 = &v12[2 * v50];
    if (v17 != v52)
    {
      memmove(v11, v17, v52 - v17);
      v51 = v116;
    }
    v29 = v51 - v48;
    v10 = 2432696320;
LABEL_40:
    v116 = v29;
LABEL_41:
    ;
  }
  while (v29);
  v53 = __dst;
  if (&v117 != __dst && __dst)
  {
    __dst = 0;
    v115 = 0;
    WTF::fastFree((unint64_t)v53, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E26A8);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v54 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8438120;
  v55 = *(_DWORD *)(a2 + 200);
  if (v55 + 4 > *(_DWORD *)(a2 + 192))
  {
    v38 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23).n128_u64[0];
    v55 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v55) = v54;
  v56 = *(_DWORD *)(a2 + 200);
  v57 = v56 + 4;
  *(_DWORD *)(a2 + 200) = v56 + 4;
  *(_DWORD *)(a2 + 208) = 0;
  if ((v56 + 8) > *(_DWORD *)(a2 + 192))
  {
    v38 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23).n128_u64[0];
    v57 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v57) = -700513792;
  *(_DWORD *)(a2 + 200) += 4;
LABEL_59:
  JSC::AssemblyHelpers::emitExceptionCheck(a2, a1, 0, 0, 0xFFFFFFFFLL, v21, v22, v23, (uint64_t)&__dst, v38);
  v63 = *(_QWORD *)(a1 + 90440);
  v64 = *(_QWORD *)(v63 + 8);
  v65 = *(unsigned int **)(v63 + 16);
  if (v65)
  {
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 + 1, v65));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v64, a2, v58, v59, v60, v61, v62);
    do
    {
      v74 = __ldaxr(v65);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v65));
    if (!v75)
    {
      atomic_store(1u, v65);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v65, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v64, a2, v58, v59, v60, v61, v62);
  }
}

void JSC::customSetterHandlerImpl<false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned __int8 v11;
  char *v12;
  unsigned __int8 v13;
  __int16 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint8x8_t v41;
  __int32 v42;
  int8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  void *v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint8x8_t v100;
  __int32 v101;
  uint8x8_t v102;
  uint64_t v103;
  char v104;
  void *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  int64_t v116;
  JSC::AssemblerBuffer *v117;
  char v118;
  void *__dst;
  int v120;
  unsigned int v121;
  __int16 v122;
  __int16 v123;

  v8 = a8;
  LOBYTE(v9) = a7;
  LOBYTE(v10) = a6;
  v11 = a5;
  LOBYTE(v12) = a4;
  v13 = a3;
  LODWORD(v16) = a8 & 0x1F;
  v117 = (JSC::AssemblerBuffer *)(a2 + 56);
  v17 = *(_DWORD *)(a2 + 200);
  if (v17 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v117, a2, a3, a4, a5, a6, a7, a8);
    v17 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v17) = v16 | 0xF8428120;
  v18 = *(_DWORD *)(a2 + 200);
  v19 = v18 + 4;
  *(_DWORD *)(a2 + 200) = v18 + 4;
  if ((v18 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v117, a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v19) = (32 * (_DWORD)v16) | ((_DWORD)v16 << 16) | 0xEA00001F;
  v20 = *(_DWORD *)(a2 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a2 + 200) = v20 + 4;
  if ((v20 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v117, a2, a3, a4, a5, a6, a7, a8);
    v21 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v21) = (32 * (v13 & 0x1F)) | ((_DWORD)v16 << 16) | v13 & 0x1F | 0x9A800000;
  *(_DWORD *)(a2 + 200) += 4;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_130;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load32(a2, v11 | 0x7000000000, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    LODWORD(v16) = *(_BYTE *)(a2 + 272) & 0x1F | 0xB80243A0;
    v29 = *(_DWORD *)(a2 + 200);
    if (v29 + 4 <= *(_DWORD *)(a2 + 192))
      goto LABEL_10;
  }
  else
  {
    v22 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v23 = "RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()";
    v24 = 163;
    __break(0xC471u);
LABEL_83:
    __break(1u);
  }
  JSC::AssemblerBuffer::outOfLineGrow(v117, (uint64_t)v22, (uint64_t)v23, v24, v25, v26, v27, v28);
  v29 = *(_DWORD *)(a2 + 200);
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = (_DWORD)v16;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a2, 29, a1 + 40, v24, v25, v26, v27, v28);
  v30 = *(_DWORD *)(a2 + 200);
  if (v30 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v117, (uint64_t)v22, (uint64_t)v23, v24, v25, v26, v27, v28);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = v10 & 0x1F | 0xF8430120;
  v31 = *(_DWORD *)(a2 + 200);
  v32 = v31 + 4;
  *(_DWORD *)(a2 + 200) = v31 + 4;
  if ((v31 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v117, (uint64_t)v22, (uint64_t)v23, v24, v25, v26, v27, v28);
    v32 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = v9 & 0x1F | 0xF8420120;
  *(_DWORD *)(a2 + 200) += 4;
  if (BYTE1(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::load64(a2, 0x3800000009, v8, v24, v25, v26, v27, v28);
    v16 = &v122;
    __dst = &v122;
    v120 = 5;
    v122 = v10;
    if (v13 == 1)
    {
      v93 = 1;
    }
    else
    {
      v123 = v13 | 0x100;
      v93 = 2;
    }
    if (v12 != 2)
      *(&v122 + v93++) = v12 | 0x200;
    *(&v122 + v93) = v9 | 0x300;
    v94 = v93 + 1;
    v121 = v93 + 1;
    if ((_DWORD)v8 != 4)
    {
      *(&v122 + v94) = v8 | 0x400;
      v94 = v93 + 2;
      v121 = v93 + 2;
    }
    v8 = 1;
    do
    {
      v95 = 0;
      v96 = 0;
      v97 = v94;
      do
      {
        if ((*((_BYTE *)__dst + v95 + 1) & 0x40) != 0)
          goto LABEL_83;
        v96 |= 1 << *((_BYTE *)__dst + v95 + 1);
        v95 += 2;
      }
      while (2 * v94 != v95);
      v98 = 0;
      do
      {
        v99 = *((_BYTE *)__dst + v98) & 0x7F;
        if (v99 >= 0x40)
          goto LABEL_83;
        v96 &= ~(1 << v99);
        v98 += 2;
      }
      while (2 * v94 != v98);
      v100 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
      v100.i16[0] = vaddlv_u8(v100);
      v101 = v100.i32[0];
      v102 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v96));
      v102.i16[0] = vaddlv_u8(v102);
      if (v102.i32[0] + v101)
      {
        v9 = 0;
        if (v94 <= 1uLL)
          v97 = 1;
        v103 = 2 * v97;
        while (1)
        {
          v104 = v9[(_QWORD)__dst + 1];
          if ((v104 & 0x7Fu) >= 0x40)
            goto LABEL_83;
          if (((v96 >> (v104 & 0x7F)) & 1) != 0)
            break;
          v9 += 2;
          if ((char *)v103 == v9)
            goto LABEL_109;
        }
        JSC::MacroAssemblerARM64::move((_DWORD *)a2, v9[(_QWORD)__dst], v104, v24, v25, v26, v27, v28);
        memmove(&v9[(_QWORD)__dst], &v9[(_QWORD)__dst + 2], 2 * v121 - (_QWORD)v9 - 2);
        v94 = --v121;
      }
      else
      {
        LOBYTE(v12) = *(_BYTE *)__dst;
        LOBYTE(v9) = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, (char)v9, v24, v25, v26, v27, v28);
        memmove(__dst, (char *)__dst + 2, 2 * v121 - 2);
        v113 = --v121;
        if (v121)
        {
          v114 = __dst;
          v115 = 2 * v113;
          while (*v114 != v9)
          {
            v114 += 2;
            v115 -= 2;
            if (!v115)
              goto LABEL_126;
          }
          *v114 = (_BYTE)v12;
        }
LABEL_126:
        WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v118, 0);
        v94 = v121;
      }
LABEL_109:
      ;
    }
    while (v94);
    v105 = __dst;
    if (&v122 != __dst && __dst)
    {
      __dst = 0;
      v120 = 0;
      WTF::fastFree((unint64_t)v105, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
    }
    if (*(_BYTE *)(a2 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
      v106 = *(_BYTE *)(a2 + 272);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)vmEntryCustomSetter, v106, v24, v25, v26, v27, v28);
      *(_DWORD *)(a2 + 208) = 0;
      JSC::AssemblerBuffer::putInt(v117, (32 * (v106 & 0x1F)) | 0xD63F0000, v107, v108, v109, v110, v111, v112);
      goto LABEL_65;
    }
    __break(0xC471u);
LABEL_130:
    JUMPOUT(0x1981E3090);
  }
  __dst = &v122;
  v120 = 4;
  v122 = v10;
  v33 = v13;
  if (v13 != 1)
  {
    v123 = v13 | 0x100;
    v33 = 2;
  }
  if (v12 != 2)
    *(&v122 + v33++) = v12 | 0x200;
  *(&v122 + v33) = v9 | 0x300;
  v34 = v33 + 1;
  v121 = v34;
  v13 = 1;
  v8 = 2432696320;
  LODWORD(v16) = -1442839584;
  do
  {
    v35 = 0;
    v36 = 0;
    v37 = __dst;
    v38 = v34;
    do
    {
      if ((*((_BYTE *)__dst + v35 + 1) & 0x40) != 0)
        goto LABEL_83;
      v36 |= 1 << *((_BYTE *)__dst + v35 + 1);
      v35 += 2;
    }
    while (2 * v34 != v35);
    v39 = 0;
    do
    {
      v40 = *((_BYTE *)__dst + v39) & 0x7F;
      if (v40 >= 0x40)
        goto LABEL_83;
      v36 &= ~(1 << v40);
      v39 += 2;
    }
    while (2 * v34 != v39);
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    v41.i16[0] = vaddlv_u8(v41);
    v42 = v41.i32[0];
    v43 = vcnt_s8((int8x8_t)HIDWORD(v36));
    v43.i16[0] = vaddlv_u8((uint8x8_t)v43);
    if (v43.i32[0] + v42)
    {
      v9 = 0;
      if (v34 <= 1uLL)
        v44 = 1;
      else
        v44 = v34;
      v45 = 2 * v44;
      while (1)
      {
        v46 = v9[(_QWORD)__dst + 1];
        if ((v46 & 0x7Fu) >= 0x40)
          goto LABEL_83;
        if (((v36 >> (v46 & 0x7F)) & 1) != 0)
          break;
        v9 += 2;
        if ((char *)v45 == v9)
          goto LABEL_47;
      }
      v47 = v9[(_QWORD)__dst];
      if (v47 == v46)
        goto LABEL_45;
      v48 = (char)v47;
      if ((char)v47 == 63)
      {
        v49 = *(_DWORD *)(a2 + 200);
        v50 = *(_DWORD *)(a2 + 192);
        if (v46 != 31)
        {
          LODWORD(v12) = v46 & 0x1F | 0xD2800000;
          goto LABEL_42;
        }
      }
      else
      {
        v49 = *(_DWORD *)(a2 + 200);
        v50 = *(_DWORD *)(a2 + 192);
        v51 = (char)v46 == 31 || v48 == 31;
        if (!v51)
        {
          LODWORD(v12) = v46 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
LABEL_42:
          if (v49 + 4 > v50)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v117, (uint64_t)v22, (uint64_t)v23, v24, v25, v26, v27, v28);
            v49 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v49) = (_DWORD)v12;
          *(_DWORD *)(a2 + 200) += 4;
          v37 = __dst;
          v38 = v121;
LABEL_45:
          memmove(&v9[(_QWORD)v37], &v9[(_QWORD)v37 + 2], 2 * v38 - (_QWORD)v9 - 2);
          v34 = v121 - 1;
          goto LABEL_46;
        }
      }
      LODWORD(v12) = (char)v46 | (32 * v48) | 0x91000000;
      goto LABEL_42;
    }
    v81 = *(_BYTE *)__dst;
    LOBYTE(v12) = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, (char)v12, v24, v25, v26, v27, v28);
    memmove(__dst, (char *)__dst + 2, 2 * v121 - 2);
    v82 = v121 - 1;
    v51 = v121 == 1;
    v121 = v82;
    v10 = (char *)__dst;
    v9 = (char *)__dst + 2 * v82;
    if (v51)
    {
      v55 = 0;
      v56 = 0;
      v53 = 0;
      v22 = (char *)__dst + 2 * v82;
    }
    else
    {
      v83 = 2 * v82;
      v84 = __dst;
      while (*v84 != v12)
      {
        v84 += 2;
        v83 -= 2;
        if (!v83)
          goto LABEL_76;
      }
      *v84 = v81;
LABEL_76:
      v53 = 0;
      v54 = v10;
      v22 = v9;
      v12 = v9;
      do
      {
        if (*v10 == v10[1])
        {
          v52 = v10;
          if (v12 != (char *)__dst + 2 * v121)
          {
            if (v10 == v22)
            {
              v52 = v12;
            }
            else
            {
              v116 = v54 - v22;
              memmove(v12, v22, v54 - v22);
              v52 = &v12[v116];
            }
          }
          v22 = v10 + 2;
          ++v53;
          v12 = v52;
        }
        v10 += 2;
        v54 += 2;
      }
      while (v10 < v9);
      v10 = (char *)__dst;
      v55 = v121;
      v56 = v121;
      v9 = v12;
    }
    v57 = &v10[2 * v55];
    if (v22 != v57)
    {
      memmove(v9, v22, v57 - v22);
      v56 = v121;
    }
    v34 = v56 - v53;
    v8 = 2432696320;
LABEL_46:
    v121 = v34;
LABEL_47:
    ;
  }
  while (v34);
  v58 = __dst;
  if (&v122 != __dst && __dst)
  {
    __dst = 0;
    v120 = 0;
    WTF::fastFree((unint64_t)v58, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E3100);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v59 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8438120;
  v60 = *(_DWORD *)(a2 + 200);
  if (v60 + 4 > *(_DWORD *)(a2 + 192))
  {
    v43 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v117, (uint64_t)v22, (uint64_t)v23, v24, v25, v26, v27, v28).n128_u64[0];
    v60 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v60) = v59;
  v61 = *(_DWORD *)(a2 + 200);
  v62 = v61 + 4;
  *(_DWORD *)(a2 + 200) = v61 + 4;
  *(_DWORD *)(a2 + 208) = 0;
  if ((v61 + 8) > *(_DWORD *)(a2 + 192))
  {
    v43 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v117, (uint64_t)v22, (uint64_t)v23, v24, v25, v26, v27, v28).n128_u64[0];
    v62 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v62) = -700513792;
  *(_DWORD *)(a2 + 200) += 4;
LABEL_65:
  JSC::AssemblyHelpers::emitExceptionCheck(a2, a1, 0, 0, 0xFFFFFFFFLL, v26, v27, v28, (uint64_t)&__dst, v43);
  v68 = *(_QWORD *)(a1 + 90440);
  v69 = *(_QWORD *)(v68 + 8);
  v70 = *(unsigned int **)(v68 + 16);
  if (v70)
  {
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v69, a2, v63, v64, v65, v66, v67);
    do
    {
      v79 = __ldaxr(v70);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v70));
    if (!v80)
    {
      atomic_store(1u, v70);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v70, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v69, a2, v63, v64, v65, v66, v67);
  }
}

void JSC::setterHandlerImpl<true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v10;
  char v11;
  char v12;
  int v14;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  _QWORD v101[2];

  v10 = a4;
  v11 = a3;
  v12 = a2;
  v14 = a5 & 0x1F;
  v15 = (JSC::AssemblerBuffer *)(a1 + 56);
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v14 | 0xF8428120;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = (32 * v14) | (v14 << 16) | 0xEA00001F;
  v19 = *(_DWORD *)(a1 + 200);
  v20 = v19 + 4;
  *(_DWORD *)(a1 + 200) = v19 + 4;
  if ((v19 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = (v14 << 16) | (32 * (v12 & 0x1F)) | v14 | 0x9A800000;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  if ((v21 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = a6 & 0x1F | 0xB841C120;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::loadProperty(a1, a5, a6, a5, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E394CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, v10 | 0x7000000000, *(char *)(a1 + 272), v23, v24, v25, v26, v27);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E396CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v35 = *(_BYTE *)(a1 + 272) & 0x1F | 0xB80243A0;
  v36 = *(_DWORD *)(a1 + 200);
  if (v36 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v28, v29, v30, v31, v32, v33, v34);
    v36 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = v35;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, a5 | 0x1000000000, a5, v30, v31, v32, v33, v34);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E399CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, a5 | 0x500000000, *(char *)(a1 + 304), v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 28, v42, v43, v44, v45, (uint64_t)v101);
  JSC::MacroAssemblerARM64::load64(a1, v10 | 0x3800000000, a5, v46, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::load64(a1, a5 | 0x1E800000000, a5, v51, v52, v53, v54, v55);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v101, a1, v56, v57, v58, v59, v60, v61);
  v69 = *(_DWORD *)(a1 + 200);
  if (v69 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v62, v63, v64, v65, v66, v67, v68);
    v69 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -788478977;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E39CCLL);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)2, a1 + 264, v64, v65, v66, v67, v68);
  v77 = *(_DWORD *)(a1 + 200);
  if (v77 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v70, v71, v72, v73, v74, v75, v76);
    v77 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v77) = -1207893008;
  v78 = *(_DWORD *)(a1 + 200);
  v79 = v78 + 4;
  *(_DWORD *)(a1 + 200) = v78 + 4;
  if ((v78 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v70, v71, v72, v73, v74, v75, v76);
    v79 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v79) = v14 | 0xF80083E0;
  v80 = *(_DWORD *)(a1 + 200);
  v81 = v80 + 4;
  *(_DWORD *)(a1 + 200) = v80 + 4;
  if ((v80 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v70, v71, v72, v73, v74, v75, v76);
    v81 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v81) = v12 & 0x1F | 0xF80183E0;
  v82 = *(_DWORD *)(a1 + 200);
  v83 = v82 + 4;
  *(_DWORD *)(a1 + 200) = v82 + 4;
  v84 = v11 & 0x1F | 0xF80203E0;
  if ((v82 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v70, v71, v72, v73, v74, v75, v76);
    v83 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v83) = v84;
  v85 = *(_DWORD *)(a1 + 200);
  v86 = v85 + 4;
  *(_DWORD *)(a1 + 200) = v85 + 4;
  if ((v85 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v70, v71, v72, v73, v74, v75, v76);
    v86 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v86) = (v14 << 16) | 0xAA0003E0;
  v87 = *(_DWORD *)(a1 + 200);
  v88 = v87 + 4;
  *(_DWORD *)(a1 + 200) = v87 + 4;
  if ((v87 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v70, v71, v72, v73, v74, v75, v76);
    v88 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v88) = -1862172382;
  *(_DWORD *)(a1 + 200) += 4;
  v101[0] = 0;
  v101[1] = 0;
  JSC::CallLinkInfo::emitFastPathImpl(0, a1, 0, (uint64_t)v101, v73, v74, v75, v76);
  v96 = *(_DWORD *)(a1 + 200);
  if (v96 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v89, v90, v91, v92, v93, v94, v95);
    v96 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v96) = v14 | 0xF8410340;
  v97 = *(_DWORD *)(a1 + 200);
  v98 = v97 + 4;
  *(_DWORD *)(a1 + 200) = v97 + 4;
  if ((v97 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v89, v90, v91, v92, v93, v94, v95);
    v98 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v98) = a5 | (32 * a5) | 0xD1004000;
  v99 = *(_DWORD *)(a1 + 200);
  v100 = v99 + 4;
  *(_DWORD *)(a1 + 200) = v99 + 4;
  if ((v99 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v89, v90, v91, v92, v93, v94, v95);
    v100 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v100) = (32 * a5) | 0x8B3D601F;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::setterHandlerImpl<false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v10;
  char v11;
  char v12;
  int v14;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  _QWORD v76[2];

  v10 = a4;
  v11 = a3;
  v12 = a2;
  v14 = a5 & 0x1F;
  v15 = (JSC::AssemblerBuffer *)(a1 + 56);
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v14 | 0xF8428120;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = (32 * v14) | (v14 << 16) | 0xEA00001F;
  v19 = *(_DWORD *)(a1 + 200);
  v20 = v19 + 4;
  *(_DWORD *)(a1 + 200) = v19 + 4;
  if ((v19 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = (v14 << 16) | (32 * (v12 & 0x1F)) | v14 | 0x9A800000;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  if ((v21 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = a6 & 0x1F | 0xB841C120;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::loadProperty(a1, a5, a6, a5, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E3EB4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, v10 | 0x7000000000, *(char *)(a1 + 272), v23, v24, v25, v26, v27);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E3ED4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v35 = *(_BYTE *)(a1 + 272) & 0x1F | 0xB80243A0;
  v36 = *(_DWORD *)(a1 + 200);
  if (v36 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v28, v29, v30, v31, v32, v33, v34);
    v36 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = v35;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, a5 | 0x1000000000, a5, v30, v31, v32, v33, v34);
  v44 = *(_DWORD *)(a1 + 200);
  if (v44 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v37, v38, v39, v40, v41, v42, v43);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = -788478977;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1981E3F14);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)2, a1 + 264, v39, v40, v41, v42, v43);
  v52 = *(_DWORD *)(a1 + 200);
  if (v52 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v45, v46, v47, v48, v49, v50, v51);
    v52 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = -1207893008;
  v53 = *(_DWORD *)(a1 + 200);
  v54 = v53 + 4;
  *(_DWORD *)(a1 + 200) = v53 + 4;
  if ((v53 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v45, v46, v47, v48, v49, v50, v51);
    v54 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v54) = v14 | 0xF80083E0;
  v55 = *(_DWORD *)(a1 + 200);
  v56 = v55 + 4;
  *(_DWORD *)(a1 + 200) = v55 + 4;
  if ((v55 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v45, v46, v47, v48, v49, v50, v51);
    v56 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v56) = v12 & 0x1F | 0xF80183E0;
  v57 = *(_DWORD *)(a1 + 200);
  v58 = v57 + 4;
  *(_DWORD *)(a1 + 200) = v57 + 4;
  v59 = v11 & 0x1F | 0xF80203E0;
  if ((v57 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v45, v46, v47, v48, v49, v50, v51);
    v58 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v58) = v59;
  v60 = *(_DWORD *)(a1 + 200);
  v61 = v60 + 4;
  *(_DWORD *)(a1 + 200) = v60 + 4;
  if ((v60 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v45, v46, v47, v48, v49, v50, v51);
    v61 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v61) = (v14 << 16) | 0xAA0003E0;
  v62 = *(_DWORD *)(a1 + 200);
  v63 = v62 + 4;
  *(_DWORD *)(a1 + 200) = v62 + 4;
  if ((v62 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v45, v46, v47, v48, v49, v50, v51);
    v63 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v63) = -1862172382;
  *(_DWORD *)(a1 + 200) += 4;
  v76[0] = 0;
  v76[1] = 0;
  JSC::CallLinkInfo::emitFastPathImpl(0, a1, 0, (uint64_t)v76, v48, v49, v50, v51);
  v71 = *(_DWORD *)(a1 + 200);
  if (v71 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v64, v65, v66, v67, v68, v69, v70);
    v71 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = v14 | 0xF8410340;
  v72 = *(_DWORD *)(a1 + 200);
  v73 = v72 + 4;
  *(_DWORD *)(a1 + 200) = v72 + 4;
  if ((v72 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v64, v65, v66, v67, v68, v69, v70);
    v73 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v73) = a5 | (32 * a5) | 0xD1004000;
  v74 = *(_DWORD *)(a1 + 200);
  v75 = v74 + 4;
  *(_DWORD *)(a1 + 200) = v74 + 4;
  if ((v74 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v64, v65, v66, v67, v68, v69, v70);
    v75 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v75) = (32 * a5) | 0x8B3D601F;
  *(_DWORD *)(a1 + 200) += 4;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [13],JSC::JSValue>(WTF::CommaPrinter,char [13],JSC::JSValue const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  const char *v6;
  uint64_t v7;
  JSC::JSValue *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Structure *v23;
  unint64_t v24;
  uint64_t v26;
  int v27;
  char v28;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = (const char *)a2[1];
  v8 = (JSC::JSValue *)a2[2];
  if (*(_BYTE *)(v7 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v26, v13);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v26 = v21;
      v27 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v26);
    if (v27 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v28, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v26, v19);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v26 = v22;
      v27 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v26);
    if (v27 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v28, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  WTF::PrintStream::printf(v5, "%s", v6);
  v23 = 0;
  v24 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 && (v24 & 0xFFFE000000000002) == 0)
    v23 = (JSC::Structure *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(v8, v5, 0, v23);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void JSC::InstanceOfStatus::computeFor(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  JSC::CodeOrigin *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  JSC::ObjectPropertyConditionSet *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int v92;
  unsigned __int8 *v93;
  int v95;
  WTF *v96;
  WTF *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  WTF::Lock *v101;
  void *v103;
  WTF *v104;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  WTF::Lock *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  _BYTE *v121;
  uint64_t v122;
  WTF::Lock *v123;
  int v124;
  WTF *v125;
  WTF *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned __int8 *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  int v137;
  WTF *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  WTF *v145;
  uint64_t v146;
  _BYTE v147[64];
  int v148;
  WTF *v149;
  uint64_t v150;
  _BYTE v151[64];
  uint64_t v152;
  unsigned int *v153;
  int v154;
  unsigned __int8 *v155;
  uint64_t v156;
  _BYTE v157[64];
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v13 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_4;
  }
  WTF::Lock::lockSlow((WTF::Lock *)(a1 + 16));
LABEL_4:
  v15 = 0;
  v148 = 0;
  v149 = (WTF *)v151;
  v150 = 2;
  v16 = *(_QWORD *)(a1 + 72);
  v17 = 2;
  if ((_DWORD)a3 != -1 && (_DWORD)a3 != 0x3FFFFFFF)
  {
    if (a3 >> 28)
    {
      v15 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = a3;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v15 = a3 << 36;
    }
  }
  v142 = a1;
  v143 = v15 | v17;
  v18 = *a2;
  if (!*a2)
  {
LABEL_212:
    v32 = 0;
    goto LABEL_11;
  }
  v19 = *(_DWORD *)(v18 - 8);
  v20 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)&v143, 0, a3, a4, a5, a6, a7, a8) & v19;
  v21 = (JSC::CodeOrigin *)(v18 + (v20 << 6));
  if ((JSC::CodeOrigin::isApproximatelyEqualTo(v21, (const JSC::CodeOrigin *)&v143, 0, v22, v23, v24, v25, v26) & 1) == 0)
  {
    v88 = 1;
    do
    {
      v89 = *(_QWORD *)v21;
      if (*(_QWORD *)v21 == 2)
        goto LABEL_212;
      if ((v89 & 2) != 0)
      {
        v136 = (_QWORD *)(v89 & 0xFFFFFFFF8);
        if ((v89 & 1) == 0)
          goto LABEL_211;
      }
      else
      {
        if ((v89 & 1) == 0)
          goto LABEL_103;
        v136 = (_QWORD *)(v89 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v89 & 0xFFFFFFFF8) + 8) != -1)
          goto LABEL_103;
      }
      v136 = (_QWORD *)*v136;
LABEL_211:
      if (!v136)
        goto LABEL_212;
LABEL_103:
      v20 = ((_DWORD)v20 + v88) & v19;
      v21 = (JSC::CodeOrigin *)(v18 + (v20 << 6));
      ++v88;
    }
    while (!JSC::CodeOrigin::isApproximatelyEqualTo(v21, (const JSC::CodeOrigin *)&v143, 0, v27, v28, v29, v30, v31));
  }
  v32 = *(_QWORD *)(v18 + (v20 << 6) + 8);
LABEL_11:
  v33 = JSC::StructureStubInfo::summary(v16, v32);
  if (v33 - 1 >= 3)
  {
    if (v33 > 5u || ((1 << v33) & 0x31) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1981E4EC0);
    }
    v145 = (WTF *)v147;
    v146 = 2;
    v95 = v33;
    if (v33)
    {
      if (v33 - 1 < 3)
        goto LABEL_250;
      if (v33 - 4 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1981E4D94);
      }
      v95 = 2;
    }
    LODWORD(v144) = v95;
    goto LABEL_126;
  }
  if (*(_BYTE *)(v32 + 123) != 4)
  {
    v95 = 2;
    LODWORD(v144) = 2;
    v145 = (WTF *)v147;
    v146 = 2;
    goto LABEL_126;
  }
  v41 = *(_QWORD *)(v32 + 64);
  v154 = 0;
  v155 = v157;
  v156 = 2;
  if (!*(_DWORD *)(v41 + 12))
    goto LABEL_115;
  v42 = 0;
  do
  {
    v43 = *(_QWORD *)(*(_QWORD *)v41 + 8 * v42);
    v44 = *(unsigned __int8 *)(v43 + 4);
    if (v44 == 30)
    {
LABEL_107:
      LODWORD(v144) = 2;
      v145 = (WTF *)v147;
      v146 = 2;
      goto LABEL_119;
    }
    v45 = *(_QWORD *)(v43 + 16);
    if (v45)
    {
      v46 = *(unsigned int *)(v45 + 4);
      if (!(_DWORD)v46)
        goto LABEL_107;
      v47 = 24 * v46;
      v48 = v45 + 16;
      do
      {
        if ((*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_107;
        v49 = 16 * (**(_DWORD **)(v48 - 8) & 0xFFFFFFFE);
        JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)v48, (void *)1, v49, 0, v37, v38, v39, v40);
        if (!v50)
          goto LABEL_107;
        v51 = *(unsigned __int8 *)(v48 + 6);
        if (v51 <= 6)
        {
          if (((1 << v51) & 0x63) != 0)
          {
            if ((*(_WORD *)(v49 + 12) & 0x10) != 0)
              goto LABEL_107;
          }
          else if (v51 == 2 && (*(_WORD *)(v49 + 12) & 0x90) != 0)
          {
            goto LABEL_107;
          }
        }
        v48 += 24;
        v47 -= 24;
      }
      while (v47);
      v44 = *(unsigned __int8 *)(v43 + 4);
    }
    if (v44 > 0x20 || ((1 << v44) & 0x100000014) == 0)
    {
      v53 = *(_DWORD *)(v43 + 12);
      goto LABEL_35;
    }
    v54 = *(_QWORD *)(16 * (*(_DWORD *)(v43 + 12) & 0xFFFFFFFE) + 0x40);
    if (v54 && *(_BYTE *)(v54 + 5) != 1)
    {
      v53 = *(_DWORD *)(v54 + 80);
LABEL_35:
      if (v53)
        v54 = 16 * (v53 & 0xFFFFFFFE);
      else
        v54 = 0;
    }
    v152 = v54;
    v55 = *(_QWORD *)(v43 + 40);
    v144 = 0;
    if ((v54 & 1) != 0)
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v144, &v152);
    else
      v144 = v54 & 0xFFFFFFFFFFFFFFFDLL;
    v56 = *(unsigned int **)(v43 + 16);
    if (v56)
    {
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 + 1, v56));
    }
    v145 = (WTF *)v56;
    v146 = v55;
    v147[0] = v44 == 28;
    v58 = HIDWORD(v156);
    if (!HIDWORD(v156))
    {
LABEL_72:
      v76 = 0;
LABEL_73:
      if (v76 == v156)
      {
        WTF::Vector<JSC::InstanceOfVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::InstanceOfVariant const&>((uint64_t)&v155, (unint64_t)&v144);
      }
      else
      {
        v77 = v155;
        v78 = (uint64_t *)&v155[32 * v76];
        *v78 = 0;
        if ((v144 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v78, &v144);
        else
          *v78 = v144 & 0xFFFFFFFFFFFFFFFDLL;
        v79 = (unsigned int *)v145;
        if (v145)
        {
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 + 1, v79));
        }
        v81 = &v77[32 * v76];
        *((_QWORD *)v81 + 1) = v79;
        v82 = v146;
        v81[24] = v147[0];
        *((_QWORD *)v81 + 2) = v82;
        ++HIDWORD(v156);
      }
      goto LABEL_79;
    }
    v59 = 0;
    do
    {
      v60 = &v155[32 * v59];
      if (*((_QWORD *)v60 + 2) != v146 || v60[24] != v147[0])
        goto LABEL_66;
      v61 = (JSC::ObjectPropertyConditionSet *)&v155[32 * v59 + 8];
      JSC::ObjectPropertyConditionSet::mergedWith(v61, (unint64_t)&v145, (uint64_t)v35, v36, v37, v38, v39, v40, &v153);
      v62 = v153;
      if (v153)
      {
        if (!v153[1])
        {
          v70 = 0;
          goto LABEL_61;
        }
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 + 1, v62));
      }
      v64 = *(unsigned int **)v61;
      *(_QWORD *)v61 = v62;
      if (v64)
      {
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          atomic_store(1u, v64);
          WTF::fastFree((unint64_t)v64, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        }
      }
      if ((v144 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine((uint64_t *)v60, &v144);
      }
      else
      {
        v67 = v144 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v144 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v68 = *(_QWORD *)v60;
          if ((*(_QWORD *)v60 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)v60, v144 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else if ((v68 & 0xFFFFFFFFFFFFFFFCLL) != v67)
          {
            if ((v68 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v134 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v134 = 0x400000002;
              v135 = *(_QWORD *)v60;
              *(_QWORD *)(v134 + 8) = *(_QWORD *)v60 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v134 + 16) = v67;
              v69 = v135 & 2 | v134 | 1;
            }
            else
            {
              v69 = *(_QWORD *)v60 & 2 | v67;
            }
            *(_QWORD *)v60 = v69;
          }
        }
      }
      v70 = 1;
LABEL_61:
      v71 = v153;
      v153 = 0;
      if (v71)
      {
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v71);
          WTF::fastFree((unint64_t)v71, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        }
      }
      v58 = HIDWORD(v156);
      if (v70)
      {
        if (HIDWORD(v156))
        {
          v86 = 0;
          v87 = 0;
          while (1)
          {
            if (v59 != v87)
            {
              if (WTF::TinyPtrSet<JSC::Structure *>::overlaps((uint64_t *)&v155[v86], (uint64_t *)v60))
                goto LABEL_79;
              v58 = HIDWORD(v156);
            }
            ++v87;
            v86 += 32;
            if (v87 >= v58)
              goto LABEL_79;
          }
        }
        goto LABEL_79;
      }
LABEL_66:
      ++v59;
    }
    while (v59 < v58);
    if (!v58)
      goto LABEL_72;
    v74 = 0;
    v75 = 0;
    while (!WTF::TinyPtrSet<JSC::Structure *>::overlaps((uint64_t *)&v155[v74], (uint64_t *)&v144))
    {
      ++v75;
      v76 = HIDWORD(v156);
      v74 += 32;
      if (v75 >= HIDWORD(v156))
        goto LABEL_73;
    }
LABEL_79:
    v83 = (unsigned int *)v145;
    v145 = 0;
    if (v83)
    {
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        atomic_store(1u, v83);
        WTF::fastFree((unint64_t)v83, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
      }
    }
    if ((v144 & 1) != 0)
      WTF::fastFree(v144 & 0xFFFFFFFFFFFFFFFCLL, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
    if ((v152 & 1) != 0)
      WTF::fastFree(v152 & 0xFFFFFFFFFFFFFFFCLL, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
    ++v42;
  }
  while (v42 < *(unsigned int *)(v41 + 12));
  v90 = HIDWORD(v156);
  v91 = (char *)v155;
  if (HIDWORD(v156) >= v156)
    goto LABEL_116;
  if (!HIDWORD(v156))
    goto LABEL_114;
  if (HIDWORD(v156) >= 3)
  {
    if (!(HIDWORD(v156) >> 27))
    {
      v35 = (unsigned __int8 *)WTF::fastMalloc((WTF *)(32 * HIDWORD(v156)));
      LODWORD(v156) = v90;
      v155 = v35;
      goto LABEL_112;
    }
LABEL_250:
    __break(0xC471u);
    JUMPOUT(0x1981E4CF8);
  }
  v155 = v157;
  LODWORD(v156) = 2;
  v35 = v157;
LABEL_112:
  if (v35 != (unsigned __int8 *)v91)
    WTF::VectorTypeOperations<JSC::InstanceOfVariant>::move(v91, &v91[32 * v90], (uint64_t)v35, v36, v37, v38, v39, v40);
LABEL_114:
  if (v157 != v91 && v91)
  {
    if (v155 == (unsigned __int8 *)v91)
    {
      v155 = 0;
      LODWORD(v156) = 0;
    }
    WTF::fastFree((unint64_t)v91, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
  }
LABEL_115:
  v91 = (char *)v155;
  if (!v155)
  {
    v155 = v157;
    LODWORD(v156) = 2;
    LODWORD(v144) = v154;
    v145 = (WTF *)v147;
    v146 = 2;
    goto LABEL_117;
  }
LABEL_116:
  LODWORD(v144) = v154;
  v145 = (WTF *)v147;
  v146 = 2;
  if (v91 == v157)
  {
LABEL_117:
    if (HIDWORD(v156))
    {
      v116 = 0;
      v117 = 32 * HIDWORD(v156);
      do
      {
        v118 = (uint64_t *)&v147[v116];
        v120 = &v157[v116];
        v119 = *(_QWORD *)&v157[v116];
        *(_QWORD *)&v147[v116] = 0;
        if ((v119 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v118, &v157[v116]);
        else
          *v118 = v119 & 0xFFFFFFFFFFFFFFFDLL;
        v121 = &v147[v116];
        v122 = *(_QWORD *)&v157[v116 + 16];
        *((_QWORD *)v121 + 1) = *(_QWORD *)&v157[v116 + 8];
        *((_QWORD *)v121 + 2) = v122;
        v121[24] = v157[v116 + 24];
        *(_QWORD *)&v157[v116 + 8] = 0;
        if ((*v120 & 1) != 0)
          WTF::fastFree(*v120 & 0xFFFFFFFFFFFFFFFCLL, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        v116 += 32;
      }
      while (v117 != v116);
    }
  }
  else
  {
    v155 = v157;
    v145 = (WTF *)v91;
    v137 = v156;
    LODWORD(v156) = 2;
    LODWORD(v146) = v137;
  }
  v92 = HIDWORD(v156);
  HIDWORD(v156) = 0;
  HIDWORD(v146) = v92;
LABEL_119:
  v93 = v155;
  if (HIDWORD(v156))
  {
    v130 = &v155[32 * HIDWORD(v156)];
    do
    {
      v131 = (unsigned int *)*((_QWORD *)v93 + 1);
      *((_QWORD *)v93 + 1) = 0;
      if (v131)
      {
        do
        {
          v132 = __ldaxr(v131);
          v133 = v132 - 1;
        }
        while (__stlxr(v133, v131));
        if (!v133)
        {
          atomic_store(1u, v131);
          WTF::fastFree((unint64_t)v131, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        }
      }
      if ((*(_QWORD *)v93 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v93 & 0xFFFFFFFFFFFFFFFCLL, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
      v93 += 32;
    }
    while (v93 != v130);
    v93 = v155;
  }
  if (v157 != v93 && v93 != 0)
  {
    v155 = 0;
    LODWORD(v156) = 0;
    WTF::fastFree((unint64_t)v93, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
  }
  v95 = v144;
LABEL_126:
  v148 = v95;
  v96 = v149;
  if (HIDWORD(v150))
  {
    v138 = (WTF *)((char *)v149 + 32 * HIDWORD(v150));
    do
    {
      v139 = (unsigned int *)*((_QWORD *)v96 + 1);
      *((_QWORD *)v96 + 1) = 0;
      if (v139)
      {
        do
        {
          v140 = __ldaxr(v139);
          v141 = v140 - 1;
        }
        while (__stlxr(v141, v139));
        if (!v141)
        {
          atomic_store(1u, v139);
          WTF::fastFree((unint64_t)v139, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        }
      }
      if ((*(_QWORD *)v96 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v96 & 0xFFFFFFFFFFFFFFFCLL, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
      v96 = (WTF *)((char *)v96 + 32);
    }
    while (v96 != v138);
    v96 = v149;
  }
  if (v96 != (WTF *)v151)
  {
    if (v96)
    {
      v149 = 0;
      LODWORD(v150) = 0;
      WTF::fastFree((unint64_t)v96, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
    }
    v149 = (WTF *)v151;
  }
  v97 = v145;
  if (v145 == (WTF *)v147)
  {
    if (!HIDWORD(v146))
    {
      v98 = v146;
      HIDWORD(v146) = 0;
      goto LABEL_131;
    }
    v107 = 32 * HIDWORD(v146);
    v108 = (uint64_t *)v151;
    v109 = v147;
    do
    {
      *v108 = 0;
      if ((*(_QWORD *)v109 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v108, v109);
      else
        *v108 = *(_QWORD *)v109 & 0xFFFFFFFFFFFFFFFDLL;
      v110 = *((_QWORD *)v109 + 2);
      v111 = *(_QWORD *)v109;
      v108[1] = *((_QWORD *)v109 + 1);
      v108[2] = v110;
      *((_BYTE *)v108 + 24) = v109[24];
      *((_QWORD *)v109 + 1) = 0;
      if ((v111 & 1) != 0)
        WTF::fastFree(v111 & 0xFFFFFFFFFFFFFFFCLL, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
      v108 += 4;
      v109 += 32;
      v107 -= 32;
    }
    while (v107);
    v112 = v145;
    v113 = v146;
    HIDWORD(v146) = 0;
    v150 = v113;
    if (v147 != (_BYTE *)v145 && v145)
    {
      v145 = 0;
      LODWORD(v146) = 0;
      WTF::fastFree((unint64_t)v112, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
    }
  }
  else
  {
    v145 = (WTF *)v147;
    v149 = v97;
    v98 = v146;
    v146 = 2;
LABEL_131:
    v150 = v98;
  }
  if ((v143 & 1) != 0 && (v143 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v143 & 0xFFFFFFFF8, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
  v99 = v148;
  if (v148 == 2)
  {
LABEL_142:
    *(_DWORD *)a9 = v99;
    WTF::VectorBuffer<JSC::InstanceOfVariant,2ul,WTF::FastMalloc>::VectorBuffer(a9 + 8, &v149, (uint64_t)v35, v36, v37, v38, v39, v40);
    goto LABEL_143;
  }
  v100 = *(_QWORD *)(v142 + 56);
  v101 = (WTF::Lock *)(v100 + 31);
  v157[0] = 0;
  v155 = (unsigned __int8 *)(v100 + 31);
  LOBYTE(v156) = 1;
  if (__ldaxr((unsigned __int8 *)(v100 + 31)))
  {
    __clrex();
    goto LABEL_136;
  }
  if (__stxr(1u, (unsigned __int8 *)v101))
LABEL_136:
    WTF::Lock::lockSlow(v101);
  v157[0] = 1;
  LODWORD(v144) = a3;
  WORD2(v144) = 5;
  BYTE6(v144) = 0;
  if ((JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v100 + 96), (uint64_t)&v154, (int *)&v144) & 1) == 0)
  {
    LODWORD(v153) = a3;
    WORD2(v153) = 6;
    BYTE6(v153) = 0;
    if ((JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v100 + 96), (uint64_t)&v154, (int *)&v153) & 1) == 0)
    {
      LODWORD(v152) = a3;
      WORD2(v152) = 1;
      BYTE6(v152) = 0;
      if ((JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v100 + 96), (uint64_t)&v154, (int *)&v152) & 1) == 0)
      {
        if (!(_BYTE)v156)
          goto LABEL_141;
        v114 = (WTF::Lock *)v155;
        v115 = __ldxr(v155);
        if (v115 == 1)
        {
          if (!__stlxr(0, v155))
          {
LABEL_141:
            v99 = v148;
            goto LABEL_142;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v114, (uint64_t)v103, (uint64_t)v35, v36, v37, v38, v39, v40);
        goto LABEL_141;
      }
    }
  }
  *(_DWORD *)a9 = 2;
  *(_QWORD *)(a9 + 8) = a9 + 24;
  *(_QWORD *)(a9 + 16) = 2;
  if ((_BYTE)v156)
  {
    v123 = (WTF::Lock *)v155;
    v124 = __ldxr(v155);
    if (v124 == 1)
    {
      if (!__stlxr(0, v155))
        goto LABEL_143;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v123, (uint64_t)v103, (uint64_t)v35, v36, v37, v38, v39, v40);
  }
LABEL_143:
  if (HIDWORD(v150))
  {
    v125 = v149;
    v126 = (WTF *)((char *)v149 + 32 * HIDWORD(v150));
    do
    {
      v127 = (unsigned int *)*((_QWORD *)v125 + 1);
      *((_QWORD *)v125 + 1) = 0;
      if (v127)
      {
        do
        {
          v128 = __ldaxr(v127);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v127));
        if (!v129)
        {
          atomic_store(1u, v127);
          WTF::fastFree((unint64_t)v127, v103, (uint64_t)v35, v36, v37, v38, v39, v40);
        }
      }
      if ((*(_QWORD *)v125 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v125 & 0xFFFFFFFFFFFFFFFCLL, v103, (uint64_t)v35, v36, v37, v38, v39, v40);
      v125 = (WTF *)((char *)v125 + 32);
    }
    while (v125 != v126);
  }
  v104 = v149;
  if (v151 != (_BYTE *)v149 && v149 != 0)
  {
    v149 = 0;
    LODWORD(v150) = 0;
    WTF::fastFree((unint64_t)v104, v103, (uint64_t)v35, v36, v37, v38, v39, v40);
  }
  v106 = __ldxr(v13);
  if (v106 != 1)
  {
    __clrex();
    goto LABEL_153;
  }
  if (__stlxr(0, v13))
LABEL_153:
    WTF::Lock::unlockSlow((WTF::Lock *)v13, (uint64_t)v103, (uint64_t)v35, v36, v37, v38, v39, v40);
}

void JSC::IntrinsicGetterAccessCase::create(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t a5@<X4>, unsigned int **a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  v18 = WTF::fastMalloc((WTF *)0x30);
  v26 = v18;
  *(_DWORD *)v18 = 1;
  *(_WORD *)(v18 + 4) = 16;
  *(_DWORD *)(v18 + 8) = a4;
  *(_QWORD *)(v18 + 16) = 0;
  v27 = *a8;
  *a8 = 0;
  *(_QWORD *)(v18 + 24) = v27;
  *(_QWORD *)(v18 + 32) = a3;
  if (a5)
  {
    *(_DWORD *)(v18 + 12) = a5 >> 4;
    if (a2 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  }
  else
  {
    *(_DWORD *)(v18 + 12) = 0;
  }
  v28 = *a6;
  if (*a6)
  {
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  v30 = *(unsigned int **)(v26 + 16);
  *(_QWORD *)(v26 + 16) = v28;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((unint64_t)v30, v19, v20, v21, v22, v23, v24, v25);
    }
    v28 = *(unsigned int **)(v26 + 16);
  }
  if (v28 && !v28[1])
  {
    __break(0xC471u);
    JUMPOUT(0x1981E5004);
  }
  *(_QWORD *)(v26 + 40) = a7;
  if (a2 && a7 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  *a9 = v26;
}

unint64_t JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::fireInternal(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint32x4_t v46[2];
  unsigned int v47;
  unsigned int v48;

  v8 = result;
  v9 = *(unsigned int *)(result + 17);
  v10 = v9 | ((unint64_t)*(unsigned __int8 *)(result + 21) << 32);
  if ((v9 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) == 0 && (*(_BYTE *)(v10 - 80) & 1) == 0)
      return result;
  }
  else
  {
    v11 = *(_QWORD *)(v10 & 0xFFFFFFC000);
    if (*(_BYTE *)(v11 + 10))
    {
      v24 = *(_QWORD *)(v11 + 24);
      v26 = *(_QWORD *)(v24 + 104);
      v25 = v24 + 104;
      result = v26;
      if (v26 != v25)
      {
        v27 = 0;
        do
        {
          v28 = *(_QWORD *)result;
          v27 |= JSC::FreeList::contains((unint64_t *)(result + 24), v10);
          result = v28;
        }
        while (v28 != v25);
        if ((_BYTE)v27)
          return result;
      }
    }
    else
    {
      result = JSC::MarkedBlock::Handle::isLive(v11, v10, a3, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
        return result;
    }
  }
  JSC::ObjectPropertyCondition::isWatchable(v8 + 32, 1, a3, a4, a5, a6, a7, a8);
  if (!v19)
  {
    v29 = *(unsigned int *)(v8 + 17) | ((unint64_t)*(unsigned __int8 *)(v8 + 21) << 32);
    result = **(_QWORD **)(*(_QWORD *)(v29 + 0x38) + 80) + ((unint64_t)*(unsigned int *)(v8 + 22) >> 2);
    v30 = *(unsigned __int8 *)result;
    v31 = v30;
    if ((v30 | 2) == 0x82)
      v31 = *(unsigned __int8 *)(result + 1);
    switch(v31)
    {
      case 18:
        if (v30 == 128)
        {
          v32 = *(unsigned __int16 *)(result + 10);
        }
        else if (v30 == 130)
        {
          v32 = *(_DWORD *)(result + 18);
        }
        else
        {
          v32 = *(unsigned __int8 *)(result + 5);
        }
        v33 = *(_QWORD *)((*(unsigned int *)(v8 + 17) | ((unint64_t)*(unsigned __int8 *)(v8 + 21) << 32)) + 0x88);
        v34 = *(unsigned __int16 *)(v33 + 36);
        if (!*(_WORD *)(v33 + 36))
          v34 = *(_DWORD *)(v33 + 168);
        v35 = ((v33 + v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v32;
LABEL_27:
        *(_BYTE *)(v35 + 14) = 1;
        *(_QWORD *)v35 = 0;
        return result;
      case 2:
        result = (unint64_t)JSC::OpIteratorNext::decode((_DWORD *)result, (uint64_t)v46, v18);
        v42 = *(_QWORD *)((*(unsigned int *)(v8 + 17) | ((unint64_t)*(unsigned __int8 *)(v8 + 21) << 32)) + 0x88);
        v43 = *(unsigned __int16 *)(v42 + 4);
        if (!*(_WORD *)(v42 + 4))
          v43 = *(_DWORD *)(v42 + 104);
        v44 = (v42 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(v8 + 22) & 3) == 2)
        {
          v45 = v44 + ((unint64_t)v48 << 7);
          *(_BYTE *)(v45 + 110) = 1;
          *(_QWORD *)(v45 + 96) = 0;
          return result;
        }
        if ((*(_DWORD *)(v8 + 22) & 3) != 1)
        {
          __break(0xC471u);
LABEL_49:
          JUMPOUT(0x1981E51ECLL);
        }
        v41 = v44 + ((unint64_t)v48 << 7);
        break;
      case 4:
        result = (unint64_t)JSC::OpIteratorOpen::decode((_DWORD *)result, v46, v18);
        v39 = *(_QWORD *)((*(unsigned int *)(v8 + 17) | ((unint64_t)*(unsigned __int8 *)(v8 + 21) << 32)) + 0x88);
        v40 = *(unsigned __int16 *)(v39 + 8);
        if (!*(_WORD *)(v39 + 8))
          v40 = *(_DWORD *)(v39 + 112);
        v41 = ((v39 + v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 112 * v47;
        break;
      case 19:
        result = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetLength>((unsigned __int8 *)result);
        v37 = *(_QWORD *)(v29 + 136);
        v38 = *(unsigned __int16 *)(v37 + 38);
        if (!*(_WORD *)(v37 + 38))
          v38 = *(_DWORD *)(v37 + 172);
        v35 = ((v37 + v38 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * HIDWORD(result);
        goto LABEL_27;
      default:
        __break(0xC471u);
        JUMPOUT(0x1981E5324);
    }
    *(_BYTE *)(v41 + 94) = 1;
    *(_QWORD *)(v41 + 80) = 0;
    return result;
  }
  JSC::ObjectPropertyCondition::isWatchable(v8 + 32, 0, v12, v13, v14, v15, v16, v17);
  if ((v20 & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  v21 = 16 * (**(_DWORD **)(v8 + 32) & 0xFFFFFFFE);
  v22 = *(_QWORD *)(v21 + 0x60);
  if ((v22 & 1) != 0)
  {
    v36 = (v22 >> 1) & 3;
    v22 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v22 = 1;
    *(_BYTE *)(v22 + 4) = v36;
    *(_BYTE *)(v22 + 5) = 0;
    *(_QWORD *)(v22 + 8) = v22 + 8;
    *(_QWORD *)(v22 + 16) = v22 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v21 + 96) = v22;
  }
  v23 = *(_QWORD *)(v22 + 8);
  result = v22 + 8;
  *(_QWORD *)v8 = v23;
  *(_QWORD *)(v8 + 8) = result;
  *(_QWORD *)result = v8;
  *(_QWORD *)(v23 + 8) = v8;
  *(_WORD *)(result - 4) = 257;
  return result;
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetLength>(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((unsigned __int16 *)a1 + 3);
    v3 = *((unsigned __int16 *)a1 + 4);
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 10);
    v3 = *(unsigned int *)(a1 + 14);
  }
  else
  {
    v2 = a1[3];
    v3 = a1[4];
  }
  return v2 | (unint64_t)(v3 << 32);
}

uint64_t JSC::CompressedLazyValueProfileHolder::computeUpdatedPredictions(uint64_t result, int8x8_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v35;
  BOOL v36;

  v4 = *(uint64_t **)result;
  if (*(_QWORD *)result)
  {
    v6 = *v4;
    if (!*v4)
    {
LABEL_4:
      v7 = v4[5];
      if (!v7)
        return result;
      v8 = 0;
      while (1)
      {
        v9 = *(_QWORD *)(v4[6] + (v8 & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (v8 & 7);
        result = JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(a4, *(_DWORD *)v9, a2);
        v12 = *(_QWORD *)(v9 + 8);
        v11 = (_QWORD *)(v9 + 8);
        v10 = v12;
        if (v12)
          break;
LABEL_7:
        *v11 = 0;
        if (v7 == ++v8)
          return result;
      }
      if (v10 >= 0xFFFE000000000000)
      {
        v14 = (v10 & 0xFFFFFFFE) == 0;
        v17 = 0x200000000;
        if (v14)
          v17 = 0x100000000;
        goto LABEL_9;
      }
      if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v10 & 0xFFFE000000000002) != 0)
        {
          v14 = (v10 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v17 = 0x20000000000;
          if (v14)
            v17 = 0x10000000000;
          goto LABEL_9;
        }
        v13 = v10 >> 36;
        v14 = (v10 & 0xFFFFFFFFFLL) != 0 && v13 == 0;
        v15 = v14;
        if (qword_1ECF4C080 <= v10 && (v15 & 1) != 0
          || qword_1ECF4C080 <= v10 && (!v13 ? (v36 = (v10 & 0xFFFFFFFFFLL) == 0) : (v36 = 1), !v36))
        {
          v16 = *(unsigned __int8 *)(v10 + 5);
          if (v16 != 2)
          {
            v17 = JSC::speculatedTypeMapping[v16];
LABEL_9:
            *(_QWORD *)(result + 8) |= v17;
            goto LABEL_7;
          }
          v28 = *(_QWORD *)(v10 + 8);
          if (v28)
            v29 = (v28 & 1) == 0;
          else
            v29 = 0;
          if (!v29)
          {
LABEL_67:
            v17 = 805306368;
            goto LABEL_9;
          }
          if (v28 >= qword_1ECF4C080 && !(v28 >> 36) && (v28 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v28 + 16) & 0x10) != 0)
            {
              v17 = 0x10000000;
              goto LABEL_9;
            }
            goto LABEL_67;
          }
        }
        v17 = 0;
        goto LABEL_9;
      }
      a2 = (int8x8_t)(v10 - 0x2000000000000);
      v31 = (uint64_t)COERCE_DOUBLE(v10 - 0x2000000000000);
      if ((double)*(uint64_t *)&a2 != *(double *)&a2)
      {
LABEL_60:
        v17 = 0x2000000000;
        goto LABEL_9;
      }
      if (v31)
      {
        if ((unint64_t)(v31 + 0x8000000000000) >> 52)
          goto LABEL_60;
      }
      else if ((uint64_t)v10 < 0x2000000000000)
      {
        goto LABEL_60;
      }
      v17 = 0x1000000000;
      goto LABEL_9;
    }
    v18 = 0;
    v19 = v4[1];
    v20 = qword_1ECF4C080;
    result = 0x20000000000;
    while (1)
    {
      v21 = (unint64_t *)(*(_QWORD *)(v19 + (v18 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v18 & 7));
      v22 = *v21;
      if (*v21)
        break;
LABEL_25:
      v21[1] |= v22;
      if (v6 == ++v18)
        goto LABEL_4;
    }
    if (v22 >= 0xFFFE000000000000)
    {
      if ((v22 & 0xFFFFFFFE) != 0)
        v22 = 0x200000000;
      else
        v22 = 0x100000000;
      goto LABEL_27;
    }
    if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v23 = v22 & 0xFFFE000000000002;
      v24 = v22 >> 36;
      v26 = (v22 & 0xFFFFFFFFFLL) != 0 && v24 == 0;
      if (v20 <= v22 && v26)
      {
        if (v23)
        {
          if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v22 = 0x10000000000;
          else
            v22 = 0x20000000000;
          goto LABEL_27;
        }
      }
      else
      {
        if (v23)
        {
          v14 = (v22 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v22 = 0x20000000000;
          if (v14)
            v22 = 0x10000000000;
          goto LABEL_27;
        }
        if (v20 > v22)
          goto LABEL_107;
        if (v24 || (v22 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_107;
      }
      v27 = *(unsigned __int8 *)(v22 + 5);
      if (v27 != 2)
      {
        v22 = JSC::speculatedTypeMapping[v27];
LABEL_27:
        *v21 = 0;
        goto LABEL_25;
      }
      v32 = *(_QWORD *)(v22 + 8);
      if (v32)
        v33 = (v32 & 1) == 0;
      else
        v33 = 0;
      if (!v33)
      {
LABEL_87:
        v22 = 805306368;
        goto LABEL_27;
      }
      if (v32 >= v20 && !(v32 >> 36) && (v32 & 0xFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)(v32 + 16) & 0x10) != 0)
        {
          v22 = 0x10000000;
          goto LABEL_27;
        }
        goto LABEL_87;
      }
LABEL_107:
      v22 = 0;
      goto LABEL_27;
    }
    a2 = (int8x8_t)(v22 - 0x2000000000000);
    v35 = (uint64_t)COERCE_DOUBLE(v22 - 0x2000000000000);
    if ((double)*(uint64_t *)&a2 != *(double *)&a2)
    {
LABEL_81:
      v22 = 0x2000000000;
      goto LABEL_27;
    }
    if (v35)
    {
      if ((unint64_t)(v35 + 0x8000000000000) >> 52)
        goto LABEL_81;
    }
    else if ((uint64_t)v22 < 0x2000000000000)
    {
      goto LABEL_81;
    }
    v22 = 0x1000000000;
    goto LABEL_27;
  }
  return result;
}

_DWORD *JSC::CompressedLazyValueProfileHolder::addOperandValueProfile(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *result;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  int v29;

  v4 = *a1;
  if (!*a1)
  {
    v4 = WTF::fastMalloc((WTF *)0x50);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    __dmb(0xAu);
    v12 = (JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *)*a1;
    *a1 = v4;
    if (v12)
    {
      JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder::~LazyValueProfileHolder(v12, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      v4 = *a1;
    }
  }
  v21 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
  {
    v25 = 0;
    while (1)
    {
      result = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + (v25 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v25 & 7));
      v26 = *a2 == result[5] && result[7] == a2[2];
      if (v26 && a2[1] == result[6])
        break;
      if (v21 == ++v25)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v28 = *(_QWORD *)a2;
    v29 = a2[2];
    v22 = v21 >> 3;
    if (v21 >> 3 >= *(_QWORD *)(v4 + 32))
    {
      WTF::ConcurrentVector<JSC::LazyOperandValueProfile,8ul>::allocateSegment(v4);
      v21 = *(_QWORD *)v4;
      v22 = *(_QWORD *)v4 >> 3;
    }
    v23 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v22 + 8) + 32 * (v21 & 7);
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v23 + 16) = 0x3FFFFFFF;
    *(_QWORD *)(v23 + 20) = v28;
    *(_DWORD *)(v23 + 28) = v29;
    __dmb(0xAu);
    ++*(_QWORD *)v4;
    return (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + ((*(_QWORD *)*a1 - 1) & 0xFFFFFFFFFFFFFFF8) + 8)
                    + 32 * ((*(_QWORD *)*a1 - 1) & 7));
  }
  return result;
}

uint64_t JSC::CompressedLazyValueProfileHolder::addSpeculationFailureValueProfile(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;

  v4 = *a1;
  if (!*a1)
  {
    v4 = WTF::fastMalloc((WTF *)0x50);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    __dmb(0xAu);
    v12 = (JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *)*a1;
    *a1 = v4;
    if (v12)
    {
      JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder::~LazyValueProfileHolder(v12, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      v4 = *a1;
    }
  }
  v21 = (_QWORD *)(v4 + 40);
  v22 = *(_QWORD *)(v4 + 40);
  if (v22)
  {
    v25 = 0;
    v26 = *(_QWORD *)(v4 + 48);
    while (1)
    {
      v27 = *(_QWORD *)(v26 + (v25 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (*(_DWORD *)(v27 + 16 * (v25 & 7)) == a2)
        break;
      if (v22 == ++v25)
        goto LABEL_5;
    }
    v23 = v27 + 16 * (v25 & 7);
  }
  else
  {
LABEL_5:
    v28 = (__n128)a2;
    WTF::ConcurrentVector<std::pair<JSC::BytecodeIndex,JSC::JSValue>,8ul>::appendConcurrently<std::pair<JSC::BytecodeIndex,JSC::JSValue>>(v21, &v28);
    v23 = *(_QWORD *)(*(_QWORD *)(*a1 + 48) + ((*(_QWORD *)(*a1 + 40) - 1) & 0xFFFFFFFFFFFFFFF8) + 8)
        + 16 * ((*(_QWORD *)(*a1 + 40) - 1) & 7);
  }
  return v23 + 8;
}

__n128 WTF::ConcurrentVector<std::pair<JSC::BytecodeIndex,JSC::JSValue>,8ul>::appendConcurrently<std::pair<JSC::BytecodeIndex,JSC::JSValue>>(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 result;

  v4 = a1[4];
  if (v4 <= *a1 >> 3)
  {
    v5 = a1 + 1;
    v6 = a1[1];
    if (!v6 || (v6 = *(_QWORD *)v6, v6 <= v4))
    {
      v7 = v4 + 1;
      v8 = 2 * v6;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v8;
      WTF::ConcurrentBuffer<std::unique_ptr<WTF::ConcurrentVector<std::pair<JSC::BytecodeIndex,JSC::JSValue>,8ul>::Segment,std::default_delete<WTF::ConcurrentVector<std::pair<JSC::BytecodeIndex,JSC::JSValue>,8ul>::Segment>>>::growExact(v5, v9);
    }
    v17 = WTF::fastMalloc((WTF *)0x80);
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_OWORD *)(v17 + 80) = 0u;
    *(_OWORD *)(v17 + 96) = 0u;
    *(_QWORD *)(v17 + 112) = 0;
    *(_QWORD *)(v17 + 120) = 0;
    *(_DWORD *)v17 = -1;
    *(_DWORD *)(v17 + 16) = -1;
    *(_DWORD *)(v17 + 32) = -1;
    *(_DWORD *)(v17 + 48) = -1;
    *(_DWORD *)(v17 + 64) = -1;
    *(_DWORD *)(v17 + 80) = -1;
    *(_DWORD *)(v17 + 96) = -1;
    *(_DWORD *)(v17 + 112) = -1;
    v18 = a1[4];
    a1[4] = v18 + 1;
    v19 = a1[1] + 8 * v18;
    v20 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v17;
    if (v20)
      WTF::fastFree(v20, v10, v11, v12, v13, v14, v15, v16);
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(a1[1] + (*a1 & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (*a1 & 7)) = *a2;
  __dmb(0xAu);
  ++*a1;
  return result;
}

uint64_t *WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::add<JSC::JSValue *>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v24 = 0;
        v23 = v8 + 16 * v27;
        goto LABEL_11;
      }
      if (v16 == -2)
        v25 = v15;
      v14 = (v14 + v26) & v10;
      v15 = (uint64_t *)(v8 + 16 * v14);
      v16 = *(_DWORD *)v15;
      ++v26;
    }
    while (*(_DWORD *)v15 != -1);
    if (v25)
    {
      *(_DWORD *)v25 = -1;
      v25[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v25;
    }
  }
  *(_DWORD *)v15 = v11;
  v15[1] = *a3;
  v17 = *v6;
  if (*v6)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_10;
LABEL_13:
    result = (uint64_t *)WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::expand(v6, v15);
    v15 = result;
    v19 = *v6;
    if (*v6)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_10;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_13;
LABEL_10:
  v23 = v19 + 16 * v22;
  v24 = 1;
LABEL_11:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::add<JSC::LazyOperandValueProfile *>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int i;
  uint64_t result;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v39;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::LazyOperandValueProfileKey,WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>>,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::LazyOperandValueProfileKey>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = a2[1];
  v14 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = v15 ^ HIWORD(v15);
  v17 = a2[2];
  v18 = v17 + v13 + v16;
  for (i = 1; ; ++i)
  {
    result = v18 & v10;
    v21 = v8 + 24 * result;
    v22 = *(_DWORD *)(v21 + 4);
    v23 = *(_DWORD *)(v21 + 8);
    v24 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1 && v23 == 0)
      break;
    if (v24 == v12 && v23 == v17 && v22 == v13)
      goto LABEL_48;
    if (v23 == 2)
    {
      if ((v22 & 0x80000000) == 0)
        goto LABEL_20;
    }
    else if (v22 != 0x3FFFFFFF)
    {
      goto LABEL_20;
    }
    if (v24 == -2)
      v11 = v8 + 24 * result;
LABEL_20:
    v18 = i + result;
  }
  if (v22 == 0x3FFFFFFF)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0x3FFFFFFFFFFFFFFFLL;
      *(_DWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = v11;
    }
    v28 = *(_QWORD *)a2;
    *(_DWORD *)(v21 + 8) = a2[2];
    *(_QWORD *)v21 = v28;
    *(_QWORD *)(v21 + 16) = *a3;
    v29 = *a1;
    if (*a1)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *a1;
    if (*a1)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
        goto LABEL_30;
    }
    else if (3 * v34 > 4 * v33)
    {
LABEL_30:
      v35 = v31 + 24 * v34;
      v36 = 1;
      goto LABEL_31;
    }
    result = WTF::HashTable<JSC::LazyOperandValueProfileKey,WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>>,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::LazyOperandValueProfileKey>>::expand(a1, v21);
    v21 = result;
    v31 = *a1;
    if (*a1)
      LODWORD(v34) = *(_DWORD *)(v31 - 4);
    else
      LODWORD(v34) = 0;
    goto LABEL_30;
  }
  if (v24 != v12 || v23 != v17 || v22 != v13)
    goto LABEL_20;
LABEL_48:
  if ((v9 & 1) != 0)
    v39 = 0;
  else
    v39 = *(_DWORD *)(v8 - 4);
  v36 = 0;
  v35 = v8 + 24 * v39;
LABEL_31:
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v35;
  *(_BYTE *)(a4 + 16) = v36;
  return result;
}

unint64_t JSC::LazyOperandValueProfileParser::prediction(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  unint64_t result;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int i;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *a3;
  v8 = a3[1];
  v9 = 9 * ((v7 + ~(v7 << 15)) ^ ((v7 + ~(v7 << 15)) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v10 ^ HIWORD(v10);
  v12 = a3[2];
  for (i = v12 + v8 + v11; ; i = ++v5 + v14)
  {
    v14 = i & v6;
    v15 = v3 + 24 * (i & v6);
    if (*(_DWORD *)v15 == v7)
    {
      v16 = *(_DWORD *)(v15 + 8);
      if (v16 == v12)
      {
        v16 = a3[2];
        if (*(_DWORD *)(v15 + 4) == v8)
        {
          v20 = *(_DWORD *)(v3 - 4);
          goto LABEL_15;
        }
      }
    }
    else
    {
      v16 = *(_DWORD *)(v15 + 8);
    }
    v17 = *(_DWORD *)v15 == -1 && v16 == 0;
    if (v17 && *(_DWORD *)(v15 + 4) == 0x3FFFFFFF)
      break;
  }
  v20 = *(_DWORD *)(v3 - 4);
  v15 = v3 + 24 * v20;
LABEL_15:
  if (v15 == v3 + 24 * v20)
    return 0;
  v18 = *(unint64_t **)(v15 + 16);
  if (!v18)
    return 0;
  v19 = *v18;
  if (*v18)
  {
    v19 = JSC::speculationFromValue(v19);
    *v18 = 0;
  }
  result = v18[1] | v19;
  v18[1] = result;
  return result;
}

void WTF::VectorTypeOperations<JSC::InstanceOfVariant>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      *(_QWORD *)v8 = 0;
      if ((*(_QWORD *)v10 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v8, v10);
      else
        *(_QWORD *)v8 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFDLL;
      v11 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v8 + 8) = v11;
      v12 = *((_QWORD *)v10 + 2);
      *(_BYTE *)(v8 + 24) = v10[24];
      *(_QWORD *)(v8 + 16) = v12;
      v13 = (unsigned int *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*(_QWORD *)v10 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v8 += 32;
      v10 += 32;
    }
    while (v10 != a2);
  }
}

uint64_t WTF::VectorBuffer<JSC::InstanceOfVariant,2ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;

  v10 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 2;
  v11 = *(_QWORD *)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v12 = a2[3];
    if ((_DWORD)v12)
    {
      v15 = v11 + 32 * v12;
      do
      {
        *(_QWORD *)v10 = 0;
        if ((*(_QWORD *)v11 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v10, (_QWORD *)v11);
        else
          *(_QWORD *)v10 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFDLL;
        v16 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v10 + 8) = v16;
        v17 = *(_QWORD *)(v11 + 16);
        *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
        *(_QWORD *)(v10 + 16) = v17;
        v18 = *(unsigned int **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*(_QWORD *)v11 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v10 += 32;
        v11 += 32;
      }
      while (v11 != v15);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v11;
    v21 = a2[2];
    a2[2] = 2;
    *(_DWORD *)(a1 + 8) = v21;
  }
  v13 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v13;
  return a1;
}

uint64_t JSC::InstanceOfVariant::InstanceOfVariant(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  if ((*(_QWORD *)a2 & 1) != 0)
    WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)a1, (_QWORD *)a2);
  else
    *(_QWORD *)a1 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFDLL;
  v4 = *(unsigned int **)(a2 + 8);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t WTF::Vector<JSC::InstanceOfVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::InstanceOfVariant const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<JSC::InstanceOfVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = JSC::InstanceOfVariant::InstanceOfVariant(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::InstanceOfVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::InstanceOfVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::InstanceOfVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::InstanceOfVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(char **)a1;
    v4 = (char *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    WTF::VectorBuffer<JSC::InstanceOfVariant,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorTypeOperations<JSC::InstanceOfVariant>::move(v3, v4, *(_QWORD *)a1, v5, v6, v7, v8, v9);
    if ((char *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(char **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::InstanceOfVariant,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 >= 3)
  {
    v3 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  else
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
  }
  return result;
}

void WTF::ConcurrentVector<JSC::LazyOperandValueProfile,8ul>::allocateSegment(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 + 1;
  v4 = *(unint64_t **)(a1 + 8);
  if (v4)
  {
    if (*v4 >= v3)
      goto LABEL_12;
    if (2 * *v4 > v3)
      v3 = 2 * *v4;
  }
  else if (v2 == -1)
  {
    goto LABEL_12;
  }
  if (v3 >> 61 || 8 * v3 >= 0xFFFFFFFFFFFFFFF8)
  {
    __break(0xC471u);
    JUMPOUT(0x1981E65B4);
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3 + 8));
  v6 = v5;
  *v5 = v3;
  v22 = v5;
  if (v4)
  {
    memcpy(v5 + 1, v4 + 1, 8 * *v4);
    v7 = *v4;
  }
  else
  {
    v7 = 0;
  }
  if (v7 < v3)
    bzero(&v6[v7 + 1], 8 * v3 - 8 * v7);
  __dmb(0xAu);
  *(_QWORD *)(a1 + 8) = v6;
  __dmb(0xAu);
  v8 = (_QWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
  {
    v10 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v22);
    v9 = *(unsigned int *)(a1 + 28);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) = *v10;
  }
  else
  {
    *(_QWORD *)(*v8 + 8 * v9) = v6;
  }
  *(_DWORD *)(a1 + 28) = v9 + 1;
LABEL_12:
  v18 = WTF::fastMalloc((WTF *)0x100);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0xFFFFFFFF3FFFFFFFLL;
  *(_DWORD *)(v18 + 24) = 0x3FFFFFFF;
  *(_QWORD *)(v18 + 36) = 0;
  *(_QWORD *)(v18 + 28) = 0;
  *(_DWORD *)(v18 + 44) = 0;
  *(_QWORD *)(v18 + 48) = 0xFFFFFFFF3FFFFFFFLL;
  *(_DWORD *)(v18 + 56) = 0x3FFFFFFF;
  *(_QWORD *)(v18 + 68) = 0;
  *(_QWORD *)(v18 + 60) = 0;
  *(_DWORD *)(v18 + 76) = 0;
  *(_QWORD *)(v18 + 80) = 0xFFFFFFFF3FFFFFFFLL;
  *(_DWORD *)(v18 + 88) = 0x3FFFFFFF;
  *(_QWORD *)(v18 + 100) = 0;
  *(_QWORD *)(v18 + 92) = 0;
  *(_DWORD *)(v18 + 108) = 0;
  *(_QWORD *)(v18 + 112) = 0xFFFFFFFF3FFFFFFFLL;
  *(_DWORD *)(v18 + 120) = 0x3FFFFFFF;
  *(_DWORD *)(v18 + 140) = 0;
  *(_QWORD *)(v18 + 124) = 0;
  *(_QWORD *)(v18 + 132) = 0;
  *(_QWORD *)(v18 + 144) = 0xFFFFFFFF3FFFFFFFLL;
  *(_DWORD *)(v18 + 152) = 0x3FFFFFFF;
  *(_DWORD *)(v18 + 172) = 0;
  *(_QWORD *)(v18 + 156) = 0;
  *(_QWORD *)(v18 + 164) = 0;
  *(_QWORD *)(v18 + 176) = 0xFFFFFFFF3FFFFFFFLL;
  *(_DWORD *)(v18 + 184) = 0x3FFFFFFF;
  *(_DWORD *)(v18 + 204) = 0;
  *(_QWORD *)(v18 + 188) = 0;
  *(_QWORD *)(v18 + 196) = 0;
  *(_QWORD *)(v18 + 208) = 0xFFFFFFFF3FFFFFFFLL;
  *(_DWORD *)(v18 + 216) = 0x3FFFFFFF;
  *(_QWORD *)(v18 + 228) = 0;
  *(_QWORD *)(v18 + 220) = 0;
  *(_DWORD *)(v18 + 236) = 0;
  *(_OWORD *)(v18 + 240) = xmmword_199153240;
  v19 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v19 + 1;
  v20 = *(_QWORD *)(a1 + 8) + 8 * v19;
  v21 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v18;
  if (v21)
    WTF::fastFree(v21, v11, v12, v13, v14, v15, v16, v17);
}

_QWORD *WTF::ConcurrentBuffer<std::unique_ptr<WTF::ConcurrentVector<std::pair<JSC::BytecodeIndex,JSC::JSValue>,8ul>::Segment,std::default_delete<WTF::ConcurrentVector<std::pair<JSC::BytecodeIndex,JSC::JSValue>,8ul>::Segment>>>::growExact(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = result;
  v4 = (unint64_t *)*result;
  if (!*result || *v4 < a2)
  {
    if (a2 >> 61 || 8 * a2 >= 0xFFFFFFFFFFFFFFF8)
    {
      __break(0xC471u);
      JUMPOUT(0x1981E66C0);
    }
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2 + 8));
    v6 = v5;
    *v5 = a2;
    v9 = v5;
    if (v4)
    {
      memcpy(v5 + 1, v4 + 1, 8 * *v4);
      v7 = *v4;
    }
    else
    {
      v7 = 0;
    }
    if (v7 < a2)
      bzero(&v6[v7 + 1], 8 * a2 - 8 * v7);
    __dmb(0xAu);
    *v3 = v6;
    __dmb(0xAu);
    result = v3 + 1;
    v8 = *((unsigned int *)v3 + 5);
    if ((_DWORD)v8 == *((_DWORD *)v3 + 4))
    {
      result = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v8 + 1, (unint64_t)&v9);
      v8 = *((unsigned int *)v3 + 5);
      *(_QWORD *)(v3[1] + 8 * v8) = *result;
    }
    else
    {
      *(_QWORD *)(*result + 8 * v8) = v6;
    }
    *((_DWORD *)v3 + 5) = v8 + 1;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::reserveInitialCapacity(_QWORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;

  v3 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  v5 = (v4 | HIWORD(v4)) + 1;
  if (v5 > 0x400)
  {
    if (v5 > 2 * (unint64_t)a2)
      goto LABEL_14;
  }
  else if (3 * v5 > 4 * (unint64_t)a2)
  {
LABEL_4:
    v6 = (double)a2;
    v7 = (double)v5;
    v8 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v5) = 2 * v5;
  if (v5 <= 0x400)
    goto LABEL_4;
LABEL_14:
  v6 = (double)a2;
  v7 = (double)v5;
  v8 = 0.416666667;
LABEL_5:
  if (v7 * v8 <= v6)
    LODWORD(v5) = 2 * v5;
  if (v5 <= 8)
    v9 = 8;
  else
    v9 = v5;
  result = WTF::fastMalloc((WTF *)(16 * v9 + 16));
  v11 = (_QWORD *)(result + 24);
  v12 = v9;
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *v11 = 0;
    v11 += 2;
    --v12;
  }
  while (v12);
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

uint64_t WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *((_DWORD *)v5 - 2) = -1;
      *v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

_OWORD *WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t Table;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  Table = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::allocateTable(v7);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (_DWORD *)(v4 + 16 * v16);
      if (*v18 <= 0xFFFFFFFD)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = 0;
        v22 = 9 * ((*v18 + ~(*v18 << 15)) ^ ((*v18 + ~(*v18 << 15)) >> 10));
        v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
        do
        {
          v24 = v23 & v20;
          v23 = ++v21 + v24;
        }
        while (*(_DWORD *)(v19 + 16 * v24) != -1);
        v25 = (_OWORD *)(v19 + 16 * v24);
        *v25 = *(_OWORD *)v18;
        if (v18 == a2)
          v17 = v25;
      }
      ++v16;
    }
    while (v16 != v5);
  }
  else
  {
    v17 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v17;
}

uint64_t WTF::HashTable<JSC::LazyOperandValueProfileKey,WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>>,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::LazyOperandValueProfileKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<JSC::LazyOperandValueProfileKey,WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>>,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::LazyOperandValueProfileKey>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<JSC::LazyOperandValueProfileKey,WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>>,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::LazyOperandValueProfileKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 32);
    do
    {
      *(v18 - 2) = 0x3FFFFFFFFFFFFFFFLL;
      *((_DWORD *)v18 - 2) = 0;
      *v18 = 0;
      v18 += 3;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if ((_DWORD)v7)
  {
    v21 = v6;
    v7 = v7;
    while (1)
    {
      v22 = *(_DWORD *)(v21 + 4);
      v23 = *(_DWORD *)(v21 + 8);
      if (v23 == 2)
      {
        if (v22 < 0)
        {
LABEL_12:
          if (*(_DWORD *)v21 == -2 || !v23 && *(_DWORD *)v21 == -1 && v22 == 0x3FFFFFFF)
            goto LABEL_18;
        }
      }
      else if (v22 == 0x3FFFFFFF)
      {
        goto LABEL_12;
      }
      v24 = WTF::HashTable<JSC::LazyOperandValueProfileKey,WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>>,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::LazyOperandValueProfileKey>>::reinsert(*a1, (__int128 *)v21);
      if (v21 == a3)
        v19 = v24;
LABEL_18:
      v21 += 24;
      if (!--v7)
        goto LABEL_19;
    }
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::LazyOperandValueProfileKey,WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *>>,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::LazyOperandValueProfileKey>>::reinsert(uint64_t a1, __int128 *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int i;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  __int128 v10;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9 * ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) ^ ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  for (i = *((_DWORD *)a2 + 2) + *((_DWORD *)a2 + 1) + (v5 ^ HIWORD(v5)); ; i = v3 + v7)
  {
    v7 = i & v2;
    v8 = a1 + 24 * (i & v2);
    v9 = *(_DWORD *)v8 == -1 && *(_DWORD *)(v8 + 8) == 0;
    if (v9 && *(_DWORD *)(v8 + 4) == 0x3FFFFFFF)
      break;
    ++v3;
  }
  v10 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v10;
  return a1 + 24 * v7;
}

void JSC::MetadataTable::~MetadataTable(JSC::MetadataTable *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  int i;
  unsigned int v11;
  unsigned int v12;
  JSC::CallLinkInfo *v13;
  JSC::CallLinkInfo *j;
  unsigned int v15;
  unsigned int v16;
  JSC::CallLinkInfo *v17;
  JSC::CallLinkInfo *m;
  unsigned int v19;
  unsigned int v20;
  JSC::CallLinkInfo *v21;
  JSC::CallLinkInfo *k;
  unsigned int v23;
  unsigned int v24;
  JSC::CallLinkInfo *v25;
  JSC::CallLinkInfo *kk;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  JSC::CallLinkInfo *v30;
  JSC::CallLinkInfo *n;
  unsigned int v32;
  unsigned int v33;
  JSC::CallLinkInfo *v34;
  JSC::CallLinkInfo *ii;
  unsigned int v36;
  unsigned int v37;
  JSC::CallLinkInfo *v38;
  JSC::CallLinkInfo *jj;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  char *i2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  JSC::CallLinkInfo *v55;
  JSC::CallLinkInfo *mm;
  unsigned int v57;
  unsigned int v58;
  JSC::CallLinkInfo *v59;
  JSC::CallLinkInfo *nn;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  char *i1;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;

  for (i = 0; i != 47; ++i)
  {
    switch(i)
    {
      case 0:
        v11 = *(unsigned __int16 *)this;
        if (!*(_WORD *)this)
          v11 = *((_DWORD *)this + 24);
        v12 = *((unsigned __int16 *)this + 1);
        if (!*((_WORD *)this + 1))
          v12 = *((_DWORD *)this + 25);
        v13 = (JSC::CallLinkInfo *)(((unint64_t)this + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (j = (JSC::MetadataTable *)((char *)this + v12); v13 < j; v13 = (JSC::CallLinkInfo *)(v85 + 80))
          JSC::CallLinkInfo::~CallLinkInfo(v13, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 1:
        v19 = *((unsigned __int16 *)this + 1);
        if (!*((_WORD *)this + 1))
          v19 = *((_DWORD *)this + 25);
        v20 = *((unsigned __int16 *)this + 2);
        if (!*((_WORD *)this + 2))
          v20 = *((_DWORD *)this + 26);
        v21 = (JSC::CallLinkInfo *)(((unint64_t)this + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (k = (JSC::MetadataTable *)((char *)this + v20); v21 < k; v21 = (JSC::CallLinkInfo *)(v84 + 80))
          JSC::CallLinkInfo::~CallLinkInfo(v21, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 2:
        v15 = *((unsigned __int16 *)this + 2);
        if (!*((_WORD *)this + 2))
          v15 = *((_DWORD *)this + 26);
        v16 = *((unsigned __int16 *)this + 3);
        if (!*((_WORD *)this + 3))
          v16 = *((_DWORD *)this + 27);
        v17 = (JSC::CallLinkInfo *)(((unint64_t)this + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (m = (JSC::MetadataTable *)((char *)this + v16); v17 < m; v17 = (JSC::CallLinkInfo *)(v79 + 128))
          JSC::CallLinkInfo::~CallLinkInfo(v17, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 3:
        v28 = *((unsigned __int16 *)this + 3);
        if (!*((_WORD *)this + 3))
          v28 = *((_DWORD *)this + 27);
        v29 = *((unsigned __int16 *)this + 4);
        if (!*((_WORD *)this + 4))
          v29 = *((_DWORD *)this + 28);
        v30 = (JSC::CallLinkInfo *)(((unint64_t)this + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (n = (JSC::MetadataTable *)((char *)this + v29); v30 < n; v30 = (JSC::CallLinkInfo *)(v87 + 80))
          JSC::CallLinkInfo::~CallLinkInfo(v30, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 4:
        v32 = *((unsigned __int16 *)this + 4);
        if (!*((_WORD *)this + 4))
          v32 = *((_DWORD *)this + 28);
        v33 = *((unsigned __int16 *)this + 5);
        if (!*((_WORD *)this + 5))
          v33 = *((_DWORD *)this + 29);
        v34 = (JSC::CallLinkInfo *)(((unint64_t)this + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (ii = (JSC::MetadataTable *)((char *)this + v33); v34 < ii; v34 = (JSC::CallLinkInfo *)(v83 + 112))
          JSC::CallLinkInfo::~CallLinkInfo(v34, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 8:
        v36 = *((unsigned __int16 *)this + 8);
        if (!*((_WORD *)this + 8))
          v36 = *((_DWORD *)this + 32);
        v37 = *((unsigned __int16 *)this + 9);
        if (!*((_WORD *)this + 9))
          v37 = *((_DWORD *)this + 33);
        v38 = (JSC::CallLinkInfo *)(((unint64_t)this + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (jj = (JSC::MetadataTable *)((char *)this + v37); v38 < jj; v38 = (JSC::CallLinkInfo *)(v40 + 80))
          JSC::CallLinkInfo::~CallLinkInfo(v38, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 9:
        v23 = *((unsigned __int16 *)this + 9);
        if (!*((_WORD *)this + 9))
          v23 = *((_DWORD *)this + 33);
        v24 = *((unsigned __int16 *)this + 10);
        if (!*((_WORD *)this + 10))
          v24 = *((_DWORD *)this + 34);
        v25 = (JSC::CallLinkInfo *)(((unint64_t)this + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (kk = (JSC::MetadataTable *)((char *)this + v24); v25 < kk; v25 = (JSC::CallLinkInfo *)(v27 + 96))
          JSC::CallLinkInfo::~CallLinkInfo(v25, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 10:
        v53 = *((unsigned __int16 *)this + 10);
        if (!*((_WORD *)this + 10))
          v53 = *((_DWORD *)this + 34);
        v54 = *((unsigned __int16 *)this + 11);
        if (!*((_WORD *)this + 11))
          v54 = *((_DWORD *)this + 35);
        v55 = (JSC::CallLinkInfo *)(((unint64_t)this + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (mm = (JSC::MetadataTable *)((char *)this + v54); v55 < mm; v55 = (JSC::CallLinkInfo *)(v88 + 80))
          JSC::CallLinkInfo::~CallLinkInfo(v55, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 11:
        v57 = *((unsigned __int16 *)this + 11);
        if (!*((_WORD *)this + 11))
          v57 = *((_DWORD *)this + 35);
        v58 = *((unsigned __int16 *)this + 12);
        if (!*((_WORD *)this + 12))
          v58 = *((_DWORD *)this + 36);
        v59 = (JSC::CallLinkInfo *)(((unint64_t)this + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (nn = (JSC::MetadataTable *)((char *)this + v58); v59 < nn; v59 = (JSC::CallLinkInfo *)(v86 + 80))
          JSC::CallLinkInfo::~CallLinkInfo(v59, a2, a3, a4, a5, a6, a7, a8, a9);
        break;
      case 23:
        v61 = *((unsigned __int16 *)this + 23);
        if (!*((_WORD *)this + 23))
          v61 = *((_DWORD *)this + 47);
        v62 = *((unsigned __int16 *)this + 24);
        if (!*((_WORD *)this + 24))
          v62 = *((_DWORD *)this + 48);
        v63 = (char *)(((unint64_t)this + v61 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (i1 = (char *)this + v62; v63 < i1; v63 += 96)
        {
          v65 = *((_QWORD *)v63 + 7);
          if (v65)
          {
            v76 = *(unsigned int *)(v65 + 44);
            if ((_DWORD)v76)
            {
              v72 = -24 * v76;
              do
              {
                *(_BYTE *)(v65 + 19 + v72) = 1;
                v72 += 24;
              }
              while (v72);
            }
            *((_QWORD *)v63 + 7) = 0;
            v73 = *(_DWORD *)(v65 + 16) - 1;
            *(_DWORD *)(v65 + 16) = v73;
            if (!v73)
            {
              switch(*(_BYTE *)(v65 + 24))
              {
                case 0:
                  goto LABEL_104;
                case 1:
                case 2:
                  v74 = *(_BYTE *)(v65 + 40);
                  if ((v74 & 0xA) == 8)
                    *(_BYTE *)(v65 + 40) = v74 | 2;
                  else
LABEL_104:
                    JSC::JITStubRoutine::operator delete((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v65, a2, a3, a4, a5, a6, a7, a8);
                  break;
                case 3:
                case 4:
                  JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl((JSC::PolymorphicAccessJITStubRoutine *)v65, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                case 5:
                  JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v65, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                default:
                  break;
              }
            }
          }
          v66 = *((_QWORD *)v63 + 9);
          if ((v66 & 1) != 0 && (v66 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v66 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v67 = *((_QWORD *)v63 + 7);
          *((_QWORD *)v63 + 7) = 0;
          if (v67)
          {
            v68 = *(_DWORD *)(v67 + 16) - 1;
            *(_DWORD *)(v67 + 16) = v68;
            if (!v68)
            {
              switch(*(_BYTE *)(v67 + 24))
              {
                case 0:
                  goto LABEL_94;
                case 1:
                  JSC::GCAwareJITStubRoutine::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutine *)v67, a2, a3, a4, a5, a6, a7, a8);
                  break;
                case 2:
                  v69 = *(_BYTE *)(v67 + 40);
                  if ((v69 & 0xA) == 8)
                    *(_BYTE *)(v67 + 40) = v69 | 2;
                  else
LABEL_94:
                    JSC::JITStubRoutine::operator delete((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v67, a2, a3, a4, a5, a6, a7, a8);
                  break;
                case 3:
                case 4:
                  JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl((JSC::PolymorphicAccessJITStubRoutine *)v67, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                case 5:
                  JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v67, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                default:
                  break;
              }
            }
          }
          v70 = (_QWORD *)*((_QWORD *)v63 + 1);
          if (v70)
          {
            v71 = *(_QWORD *)v63;
            *v70 = *(_QWORD *)v63;
            *(_QWORD *)(v71 + 8) = v70;
            *(_QWORD *)v63 = 0;
            *((_QWORD *)v63 + 1) = 0;
          }
        }
        break;
      case 24:
        v41 = *((unsigned __int16 *)this + 24);
        if (!*((_WORD *)this + 24))
          v41 = *((_DWORD *)this + 48);
        v42 = *((unsigned __int16 *)this + 25);
        if (!*((_WORD *)this + 25))
          v42 = *((_DWORD *)this + 49);
        v43 = (char *)(((unint64_t)this + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
        for (i2 = (char *)this + v42; v43 < i2; v43 += 96)
        {
          v45 = *((_QWORD *)v43 + 7);
          if (v45)
          {
            v80 = *(unsigned int *)(v45 + 44);
            if ((_DWORD)v80)
            {
              v52 = -24 * v80;
              do
              {
                *(_BYTE *)(v45 + 19 + v52) = 1;
                v52 += 24;
              }
              while (v52);
            }
            *((_QWORD *)v43 + 7) = 0;
            v81 = *(_DWORD *)(v45 + 16) - 1;
            *(_DWORD *)(v45 + 16) = v81;
            if (!v81)
            {
              switch(*(_BYTE *)(v45 + 24))
              {
                case 0:
                  goto LABEL_121;
                case 1:
                case 2:
                  v82 = *(_BYTE *)(v45 + 40);
                  if ((v82 & 0xA) == 8)
                    *(_BYTE *)(v45 + 40) = v82 | 2;
                  else
LABEL_121:
                    JSC::JITStubRoutine::operator delete((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v45, a2, a3, a4, a5, a6, a7, a8);
                  break;
                case 3:
                case 4:
                  JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl((JSC::PolymorphicAccessJITStubRoutine *)v45, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                case 5:
                  JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v45, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                default:
                  break;
              }
            }
          }
          v46 = *((_QWORD *)v43 + 9);
          if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v46 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v47 = *((_QWORD *)v43 + 7);
          *((_QWORD *)v43 + 7) = 0;
          if (v47)
          {
            v48 = *(_DWORD *)(v47 + 16) - 1;
            *(_DWORD *)(v47 + 16) = v48;
            if (!v48)
            {
              switch(*(_BYTE *)(v47 + 24))
              {
                case 0:
                  goto LABEL_61;
                case 1:
                  JSC::GCAwareJITStubRoutine::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutine *)v47, a2, a3, a4, a5, a6, a7, a8);
                  break;
                case 2:
                  v49 = *(_BYTE *)(v47 + 40);
                  if ((v49 & 0xA) == 8)
                    *(_BYTE *)(v47 + 40) = v49 | 2;
                  else
LABEL_61:
                    JSC::JITStubRoutine::operator delete((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v47, a2, a3, a4, a5, a6, a7, a8);
                  break;
                case 3:
                case 4:
                  JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl((JSC::PolymorphicAccessJITStubRoutine *)v47, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                case 5:
                  JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl((JSC::GCAwareJITStubRoutineWithExceptionHandler *)v47, a2, a3, a4, a5, a6, a7, a8, a9);
                  break;
                default:
                  break;
              }
            }
          }
          v50 = (_QWORD *)*((_QWORD *)v43 + 1);
          if (v50)
          {
            v51 = *(_QWORD *)v43;
            *v50 = *(_QWORD *)v43;
            *(_QWORD *)(v51 + 8) = v50;
            *(_QWORD *)v43 = 0;
            *((_QWORD *)v43 + 1) = 0;
          }
        }
        break;
      default:
        continue;
    }
  }
  v75 = *((_QWORD *)this - 2);
  *((_QWORD *)this - 2) = 0;
  if (v75)
  {
    do
    {
      v77 = __ldaxr((unsigned int *)v75);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, (unsigned int *)v75));
    if (!v78)
    {
      atomic_store(1u, (unsigned int *)v75);
      v89 = (WTF *)v75;
      if ((*(_BYTE *)(v75 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v75 + 16), a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree((unint64_t)v89, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::MetadataTable::destroy(JSC::MetadataTable *this, JSC::MetadataTable *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v10 = (char *)this - 16;
  v9 = *((_QWORD *)this - 2);
  if (v9)
  {
    *((_QWORD *)this - 2) = 0;
    JSC::MetadataTable::~MetadataTable(this, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((*(_BYTE *)(v9 + 4) & 1) != 0)
    {
      v19 = *(unsigned int *)(v9 + 8);
      if (*(_QWORD *)(v9 + 16) + 16 * v19 + 16 == v11)
        *(_BYTE *)(v9 + 4) &= ~4u;
      else
        WTF::fastFree((unint64_t)&v10[-16 * v19], v12, v13, v14, v15, v16, v17, v18);
    }
    do
    {
      v20 = __ldaxr((unsigned int *)v9);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v9));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v9);
      if ((*(_BYTE *)(v9 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v9 + 16), v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v9, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

uint64_t JSC::MetadataTable::sizeInBytesForGC(JSC::MetadataTable *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v9 = *((_QWORD *)this - 2);
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v11 = *((_QWORD *)this - 2);
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  v13 = *(unsigned int *)(v11 + 8);
  v14 = *((unsigned __int16 *)this + 47);
  if (!*((_WORD *)this + 47))
    v14 = *((_DWORD *)this + 71);
  do
  {
    v15 = __ldaxr((unsigned int *)v11);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v11));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)v11);
    if ((*(_BYTE *)(v11 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v11 + 16), a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = 16 * v13 + v14 + 16;
  if ((JSC::MetadataTable *)(*(_QWORD *)(v9 + 16) + 16 * *(unsigned int *)(v9 + 8) + 16) == this)
  {
    if ((*(_BYTE *)(v9 + 4) & 8) != 0)
      v17 = 16 * v13 + v14 - 272;
    else
      v17 = 16 * v13 + v14 - 80;
  }
  do
  {
    v18 = __ldaxr((unsigned int *)v9);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v9));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v9);
    if ((*(_BYTE *)(v9 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v9 + 16), a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return v17;
}

void JSC::MethodOfGettingAValueProfile::emitReportValue(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  signed __int8 v11;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v8 = *((unsigned int *)a1 + 2) | ((unint64_t)*((unsigned __int8 *)a1 + 12) << 32);
  if ((v8 & 0x1C00000000) != 0)
  {
    v11 = a4;
    if (a3[24])
      v14 = (_QWORD *)a3[24];
    else
      v14 = a3;
    v15 = v14[15];
    if (v15)
    {
      v16 = *(unsigned __int8 *)(v15 + 12);
      if ((v16 & 0xFE) != 2 && v16 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1981E7634);
      }
    }
    v18 = *a1;
    v19 = v18 & 0xFFFFFFFF8;
    if ((v18 & 1) != 0)
      v19 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if (v19)
      v14 = *(_QWORD **)(v19 + 8);
    switch((v8 >> 34) & 7)
    {
      case 0uLL:
        __break(0xC471u);
        JUMPOUT(0x1981E75B0);
      case 1uLL:
        if ((v18 & 2) != 0)
        {
          LODWORD(v18) = -1;
        }
        else if ((v18 & 1) != 0)
        {
          LODWORD(v18) = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v18 >>= 36;
        }
        v30 = (unsigned __int16 *)JSC::CodeBlock::unaryArithProfileForBytecodeIndex((uint64_t)v14, v18);
        if (!v30)
          return;
        goto LABEL_33;
      case 2uLL:
        if ((v18 & 2) != 0)
        {
          LODWORD(v18) = -1;
        }
        else if ((v18 & 1) != 0)
        {
          LODWORD(v18) = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v18 >>= 36;
        }
        v30 = (unsigned __int16 *)JSC::CodeBlock::binaryArithProfileForBytecodeIndex((uint64_t)v14, v18);
        if (v30)
LABEL_33:
          JSC::ArithProfile<unsigned short>::emitObserveResult(v30, a2, v11, a5, a6, v31, v32, v33);
        return;
      case 3uLL:
        v23 = v14 + 18;
        if ((v18 & 2) != 0)
        {
          LODWORD(v18) = -1;
        }
        else if ((v18 & 1) != 0)
        {
          LODWORD(v18) = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v18 >>= 36;
        }
        v22 = JSC::CompressedLazyValueProfileHolder::addSpeculationFailureValueProfile(v23, v18);
        goto LABEL_18;
      case 4uLL:
        v20 = v8 - 5;
        v21 = (unsigned int *)v14[19];
        if (*v21 <= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1981E75ECLL);
        }
        v22 = (uint64_t)&v21[6 * v20 + 4];
LABEL_18:
        JSC::MacroAssemblerARM64::store64(a2, v11, v22, a4, a5, a6, a7, a8);
        break;
      case 5uLL:
        if ((v18 & 2) != 0)
        {
          LODWORD(v18) = -1;
        }
        else if ((v18 & 1) != 0)
        {
          LODWORD(v18) = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v18 >>= 36;
        }
        v34 = v18;
        v35 = v8 & 0x3FFFFFFFFLL;
        v24 = JSC::CompressedLazyValueProfileHolder::addOperandValueProfile(v14 + 18, &v34);
        JSC::MacroAssemblerARM64::store64(a2, v11, (uint64_t)v24, v25, v26, v27, v28, v29);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1981E7590);
    }
  }
}

uint64_t JSC::ModuleNamespaceAccessCase::ModuleNamespaceAccessCase(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v25;
  WTF *v26;

  v25 = 0;
  v26 = 0;
  JSC::AccessCase::AccessCase(a1, a2, a3, 24, a4, 0xFFFFFFFFLL, 0, (unsigned int **)&v26, (uint64_t *)&v25);
  v20 = v25;
  v25 = 0;
  if (v20)
    WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v20, v13, v14, v15, v16, v17, v18, v19);
  v21 = (unsigned int *)v26;
  v26 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((unint64_t)v21, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  *(_DWORD *)(a1 + 56) = a7;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  if (a3 && a5 && a2[190] >= *(unsigned __int8 *)(a3 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), a3);
  *(_QWORD *)(a1 + 48) = a6;
  if (a3 && a6 && a2[190] >= *(unsigned __int8 *)(a3 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), a3);
  return a1;
}

uint64_t JSC::ModuleNamespaceAccessCase::create@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x40);
  result = JSC::ModuleNamespaceAccessCase::ModuleNamespaceAccessCase(v14, a1, a2, a3, a4, a5, a6);
  *a7 = result;
  return result;
}

uint64_t JSC::ObjectPropertyCondition::dumpInContext(JSC::ObjectPropertyCondition *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  JSC::PropertyCondition *v4;
  WTF::PrintStream *v6;
  BOOL v7;
  JSC::Structure *v8;
  WTF::PrintStream *v9;
  unint64_t v11;

  v4 = (JSC::ObjectPropertyCondition *)((char *)this + 8);
  if ((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    v11 = *(_QWORD *)this;
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v6, "%s", "<");
    if (v11)
      v7 = (v11 & 0xFFFE000000000002) == 0;
    else
      v7 = 0;
    if (v7)
      v8 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
    else
      v8 = 0;
    JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v11, v6, a3, v8);
    WTF::PrintStream::printf(v6, "%s", ": ");
    JSC::PropertyCondition::dumpInContext(v4, v6, a3);
    WTF::PrintStream::printf(v6, "%s");
  }
  else
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
    WTF::PrintStream::printf(v9, "%s");
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::ObjectPropertyCondition::structureEnsuresValidityAssumingImpurePropertyWatchpoint(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 8);
  v9 = (unint64_t *)(a1 + 8);
  if ((v10 & 0xFFFFFFFFFFFFFFLL) != 0)
    JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(v9, a2, 16 * (**(_DWORD **)a1 & 0xFFFFFFFE), 0, a5, a6, a7, a8);
}

void JSC::ObjectPropertyCondition::structureEnsuresValidity(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)(a1 + 8), a2, a3, 0, a5, a6, a7, a8);
}

void JSC::ObjectPropertyCondition::isWatchableAssumingImpurePropertyWatchpoint(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const JSC::PropertyTable *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  unint64_t Concurrently;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;

  v8 = (unint64_t *)(a1 + 8);
  if ((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFLL) == 0)
    return;
  v9 = (int)a3;
  v11 = 16 * (**(_DWORD **)a1 & 0xFFFFFFFE);
  JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)(a1 + 8), a3, v11, *(const JSC::PropertyTable **)a1, a5, a6, a7, a8);
  if (!v19)
    return;
  v20 = *(_QWORD *)(v11 + 96);
  v21 = (v20 & 1) != 0 ? (v20 >> 1) & 3 : *(unsigned __int8 *)(v20 + 4);
  if (v21 == 2)
    return;
  v22 = *v8;
  v23 = BYTE6(*v8);
  if (v23 == 5)
  {
    Concurrently = v22 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      if (v9 != 1)
        goto LABEL_30;
      v87 = 0;
      Concurrently = JSC::Structure::getConcurrently(v11, (_DWORD *)(v22 & 0xFFFFFFFFFFFFLL), &v87, (uint64_t)v14, v15, v16, v17, v18);
    }
    else
    {
      v25 = v22 >> 4;
      if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(v11 + 32)) != 0)
        goto LABEL_59;
      v26 = *(_QWORD *)(v11 + 88);
      if (!v26)
      {
        v37 = *(_QWORD *)(v11 + 64);
        if (!v37 || *(_BYTE *)(v37 + 5) != 1 && *(_DWORD *)(v37 + 80) < 2u)
          goto LABEL_59;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v11, *(JSC::VM **)((v11 & 0xFFFFFC000) + 8), 1, v14, v15, v16, v17, v18);
        if (!v26)
          goto LABEL_59;
      }
      if (!*(_DWORD *)(v26 + 24))
        goto LABEL_59;
      v27 = *(_QWORD *)(v26 + 16);
      v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
      v29 = *(unsigned int *)(v26 + 8);
      v30 = *(_DWORD *)(Concurrently + 16);
      if ((v27 & 1) != 0)
      {
        if ((v30 & 0x20) != 0)
          v30 = *(_DWORD *)(Concurrently + 32);
        v31 = *(_DWORD *)(v26 + 12);
        v32 = (v30 >> 8) & *(_QWORD *)&v31;
        v33 = *(unsigned __int8 *)(v28 + v32);
        if (*(_BYTE *)(v28 + v32))
        {
          v34 = v28 + v29;
          v35 = 1;
          while (1)
          {
            v36 = *(_QWORD *)(v34 + 8 * (v33 - 1));
            if (Concurrently == (v36 & 0xFFFFFFFFFFFFLL))
              break;
            v32 = ((_DWORD)v32 + v35) & v31;
            v33 = *(unsigned __int8 *)(v28 + v32);
            ++v35;
            if (!*(_BYTE *)(v28 + v32))
              goto LABEL_59;
          }
          Concurrently = HIBYTE(v36);
LABEL_30:
          if (a2 == 1)
          {
            JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v11, *(JSC::VM **)((v11 & 0xFFFFFC000) + 8), (JSC::Structure *)Concurrently, (uint64_t)v14, v15, v16, v17, v18);
            return;
          }
          if (a2)
            return;
          v38 = (unsigned __int8 *)(v11 + 15);
          if (__ldaxr((unsigned __int8 *)(v11 + 15)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v38))
          {
            goto LABEL_37;
          }
          WTF::Lock::lockSlow((WTF::Lock *)(v11 + 15));
LABEL_37:
          v40 = *(_QWORD *)(v11 + 64);
          if (v40)
          {
            if (*(_BYTE *)(v40 + 5) != 1)
            {
              v48 = *(_QWORD *)(v40 + 56);
              if (v48)
              {
                v49 = *(_DWORD *)(v48 - 8);
                v50 = 9
                    * ((Concurrently + ~((_DWORD)Concurrently << 15)) ^ ((Concurrently
                                                                                      + ~((_DWORD)Concurrently << 15)) >> 10));
                v51 = (v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11);
                v52 = v49 & (v51 ^ HIWORD(v51));
                v53 = *(_DWORD *)(v48 + 16 * v52);
                if (v53 != (_DWORD)Concurrently)
                {
                  v54 = 1;
                  do
                  {
                    if (v53 == 0x7FFFFFFF)
                      break;
                    v52 = (v52 + v54) & v49;
                    v53 = *(_DWORD *)(v48 + 16 * v52);
                    ++v54;
                  }
                  while (v53 != (_DWORD)Concurrently);
                }
              }
            }
          }
          v41 = __ldxr(v38);
          if (v41 == 1)
          {
            if (!__stlxr(0, v38))
              return;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v38, v12, v13, (uint64_t)v14, v15, v16, v17, v18);
          return;
        }
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1981E7CACLL);
      }
      if ((v30 & 0x20) != 0)
        v30 = *(_DWORD *)(Concurrently + 32);
      v42 = *(_DWORD *)(v26 + 12);
      v43 = v42 & (v30 >> 8);
      v44 = *(_DWORD *)(v28 + 4 * v43);
      if (!v44)
        goto LABEL_59;
      v45 = v28 + 4 * v29;
      v46 = 1;
      while (1)
      {
        v47 = (v44 - 1);
        if (*(_QWORD *)(v45 + 16 * v47) == Concurrently)
          break;
        v43 = (v43 + v46) & v42;
        v44 = *(_DWORD *)(v28 + 4 * v43);
        ++v46;
        if (!v44)
          goto LABEL_59;
      }
      Concurrently = *(unsigned int *)(v45 + 16 * v47 + 8);
    }
    if ((_DWORD)Concurrently != -1)
      goto LABEL_30;
    goto LABEL_59;
  }
  if (v23 != 1)
    return;
  v55 = v22 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    if (v9 != 1)
      goto LABEL_84;
    v86 = 0;
    v55 = JSC::Structure::getConcurrently(v11, (_DWORD *)(v22 & 0xFFFFFFFFFFFFLL), &v86, (uint64_t)v14, v15, v16, v17, v18);
  }
  else
  {
    v56 = v22 >> 4;
    if (!(_DWORD)v56 || (v56 & ~*(_DWORD *)(v11 + 32)) != 0)
      goto LABEL_110;
    v57 = *(_QWORD *)(v11 + 88);
    if (!v57)
    {
      v68 = *(_QWORD *)(v11 + 64);
      if (!v68 || *(_BYTE *)(v68 + 5) != 1 && *(_DWORD *)(v68 + 80) < 2u)
        goto LABEL_110;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v11, *(JSC::VM **)((v11 & 0xFFFFFC000) + 8), 1, v14, v15, v16, v17, v18);
      if (!v57)
        goto LABEL_110;
    }
    if (!*(_DWORD *)(v57 + 24))
      goto LABEL_110;
    v58 = *(_QWORD *)(v57 + 16);
    v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
    v60 = *(unsigned int *)(v57 + 8);
    v61 = *(_DWORD *)(v55 + 16);
    if ((v58 & 1) != 0)
    {
      if ((v61 & 0x20) != 0)
        v61 = *(_DWORD *)(v55 + 32);
      v62 = *(_DWORD *)(v57 + 12);
      v63 = (v61 >> 8) & *(_QWORD *)&v62;
      v64 = *(unsigned __int8 *)(v59 + v63);
      if (*(_BYTE *)(v59 + v63))
      {
        v65 = v59 + v60;
        v66 = 1;
        while (1)
        {
          v67 = *(_QWORD *)(v65 + 8 * (v64 - 1));
          if (v55 == (v67 & 0xFFFFFFFFFFFFLL))
            break;
          v63 = ((_DWORD)v63 + v66) & v62;
          v64 = *(unsigned __int8 *)(v59 + v63);
          ++v66;
          if (!*(_BYTE *)(v59 + v63))
            goto LABEL_110;
        }
        v55 = HIBYTE(v67);
        goto LABEL_84;
      }
LABEL_110:
      __break(0xC471u);
      JUMPOUT(0x1981E7F24);
    }
    if ((v61 & 0x20) != 0)
      v61 = *(_DWORD *)(v55 + 32);
    v79 = *(_DWORD *)(v57 + 12);
    v80 = v79 & (v61 >> 8);
    v81 = *(_DWORD *)(v59 + 4 * v80);
    if (!v81)
      goto LABEL_110;
    v82 = v59 + 4 * v60;
    v83 = 1;
    while (1)
    {
      v84 = (v81 - 1);
      if (*(_QWORD *)(v82 + 16 * v84) == v55)
        break;
      v80 = (v80 + v83) & v79;
      v81 = *(_DWORD *)(v59 + 4 * v80);
      ++v83;
      if (!v81)
        goto LABEL_110;
    }
    v55 = *(unsigned int *)(v82 + 16 * v84 + 8);
  }
  if ((_DWORD)v55 == -1)
    goto LABEL_110;
LABEL_84:
  if (!a2)
  {
    v69 = (unsigned __int8 *)(v11 + 15);
    if (__ldaxr((unsigned __int8 *)(v11 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v69))
    {
      goto LABEL_88;
    }
    WTF::Lock::lockSlow((WTF::Lock *)(v11 + 15));
LABEL_88:
    v71 = *(_QWORD *)(v11 + 64);
    if (v71)
    {
      if (*(_BYTE *)(v71 + 5) != 1)
      {
        v73 = *(_QWORD *)(v71 + 56);
        if (v73)
        {
          v74 = *(_DWORD *)(v73 - 8);
          v75 = 9 * ((v55 + ~((_DWORD)v55 << 15)) ^ ((v55 + ~((_DWORD)v55 << 15)) >> 10));
          v76 = (v75 ^ (v75 >> 6)) + ~((v75 ^ (v75 >> 6)) << 11);
          v77 = v74 & (v76 ^ HIWORD(v76));
          v78 = *(_DWORD *)(v73 + 16 * v77);
          if (v78 != (_DWORD)v55)
          {
            v85 = 1;
            do
            {
              if (v78 == 0x7FFFFFFF)
                break;
              v77 = (v77 + v85) & v74;
              v78 = *(_DWORD *)(v73 + 16 * v77);
              ++v85;
            }
            while (v78 != (_DWORD)v55);
          }
        }
      }
    }
    v72 = __ldxr(v69);
    if (v72 == 1)
    {
      if (!__stlxr(0, v69))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v69, v12, v13, (uint64_t)v14, v15, v16, v17, v18);
    return;
  }
  if (a2 == 1)
    JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)v11, *(JSC::VM **)((v11 & 0xFFFFFC000) + 8), (JSC::Structure *)v55, "Firing replacement to ensure validity", v15, v16, v17, v18);
}

void JSC::ObjectPropertyCondition::isWatchable(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  JSC::Structure *v37;
  unsigned __int8 *v38;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  JSC::Structure *Concurrently;
  unsigned __int8 *v70;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;

  v8 = (unint64_t *)(a1 + 8);
  if ((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    v10 = 16 * (**(_DWORD **)a1 & 0xFFFFFFFE);
    JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)(a1 + 8), (void *)(a2 != 1), v10, *(const JSC::PropertyTable **)a1, a5, a6, a7, a8);
    if (v18)
    {
      v19 = *v8;
      v20 = BYTE6(*v8);
      if (v20 <= 6)
      {
        if (((1 << v20) & 0x63) != 0)
        {
          if ((*(_WORD *)(v10 + 12) & 0x10) != 0)
            return;
        }
        else if (v20 == 2 && (*(_WORD *)(v10 + 12) & 0x90) != 0)
        {
          return;
        }
      }
      v21 = *(_QWORD *)(v10 + 96);
      v22 = (v21 & 1) != 0 ? (v21 >> 1) & 3 : *(unsigned __int8 *)(v21 + 4);
      if (v22 != 2)
      {
        if (BYTE6(v19) != 5)
        {
          if (BYTE6(v19) != 1)
            return;
          v55 = v19 & 0xFFFFFFFFFFFFLL;
          if (a2 == 1)
          {
            v56 = v19 >> 4;
            if (!(_DWORD)v56 || (v56 & ~*(_DWORD *)(v10 + 32)) != 0)
              goto LABEL_114;
            v57 = *(_QWORD *)(v10 + 88);
            if (!v57)
            {
              v68 = *(_QWORD *)(v10 + 64);
              if (!v68 || *(_BYTE *)(v68 + 5) != 1 && *(_DWORD *)(v68 + 80) < 2u)
                goto LABEL_114;
              JSC::Structure::materializePropertyTable((JSC::Structure *)v10, *(JSC::VM **)((v10 & 0xFFFFFC000) + 8), 1, v13, v14, v15, v16, v17);
              if (!v57)
                goto LABEL_114;
            }
            if (!*(_DWORD *)(v57 + 24))
              goto LABEL_114;
            v58 = *(_QWORD *)(v57 + 16);
            v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
            v60 = *(unsigned int *)(v57 + 8);
            v61 = *(_DWORD *)(v55 + 16);
            if ((v58 & 1) != 0)
            {
              if ((v61 & 0x20) != 0)
                v61 = *(_DWORD *)(v55 + 32);
              v62 = *(_DWORD *)(v57 + 12);
              v63 = (v61 >> 8) & *(_QWORD *)&v62;
              v64 = *(unsigned __int8 *)(v59 + v63);
              if (*(_BYTE *)(v59 + v63))
              {
                v65 = v59 + v60;
                v66 = 1;
                while (1)
                {
                  v67 = *(_QWORD *)(v65 + 8 * (v64 - 1));
                  if (v55 == (v67 & 0xFFFFFFFFFFFFLL))
                    break;
                  v63 = ((_DWORD)v63 + v66) & v62;
                  v64 = *(unsigned __int8 *)(v59 + v63);
                  ++v66;
                  if (!*(_BYTE *)(v59 + v63))
                    goto LABEL_114;
                }
                Concurrently = (JSC::Structure *)HIBYTE(v67);
                goto LABEL_88;
              }
              goto LABEL_114;
            }
            if ((v61 & 0x20) != 0)
              v61 = *(_DWORD *)(v55 + 32);
            v80 = *(_DWORD *)(v57 + 12);
            v81 = v80 & (v61 >> 8);
            v82 = *(_DWORD *)(v59 + 4 * v81);
            if (!v82)
              goto LABEL_114;
            v83 = v59 + 4 * v60;
            v84 = 1;
            while (1)
            {
              v85 = (v82 - 1);
              if (*(_QWORD *)(v83 + 16 * v85) == v55)
                break;
              v81 = (v81 + v84) & v80;
              v82 = *(_DWORD *)(v59 + 4 * v81);
              ++v84;
              if (!v82)
                goto LABEL_114;
            }
            Concurrently = (JSC::Structure *)*(unsigned int *)(v83 + 16 * v85 + 8);
          }
          else
          {
            v87 = 0;
            Concurrently = (JSC::Structure *)JSC::Structure::getConcurrently(v10, (_DWORD *)(v19 & 0xFFFFFFFFFFFFLL), &v87, (uint64_t)v13, v14, v15, v16, v17);
          }
          if ((_DWORD)Concurrently != -1)
          {
LABEL_88:
            if (!a2)
            {
              v70 = (unsigned __int8 *)(v10 + 15);
              if (__ldaxr((unsigned __int8 *)(v10 + 15)))
              {
                __clrex();
              }
              else if (!__stxr(1u, v70))
              {
                goto LABEL_92;
              }
              WTF::Lock::lockSlow((WTF::Lock *)(v10 + 15));
LABEL_92:
              v72 = *(_QWORD *)(v10 + 64);
              if (v72)
              {
                if (*(_BYTE *)(v72 + 5) != 1)
                {
                  v74 = *(_QWORD *)(v72 + 56);
                  if (v74)
                  {
                    v75 = *(_DWORD *)(v74 - 8);
                    v76 = 9
                        * (((_DWORD)Concurrently + ~((_DWORD)Concurrently << 15)) ^ (((_DWORD)Concurrently
                                                                                                  + ~((_DWORD)Concurrently << 15)) >> 10));
                    v77 = (v76 ^ (v76 >> 6)) + ~((v76 ^ (v76 >> 6)) << 11);
                    v78 = v75 & (v77 ^ HIWORD(v77));
                    v79 = *(_DWORD *)(v74 + 16 * v78);
                    if (v79 != (_DWORD)Concurrently)
                    {
                      v86 = 1;
                      do
                      {
                        if (v79 == 0x7FFFFFFF)
                          break;
                        v78 = (v78 + v86) & v75;
                        v79 = *(_DWORD *)(v74 + 16 * v78);
                        ++v86;
                      }
                      while (v79 != (_DWORD)Concurrently);
                    }
                  }
                }
              }
              v73 = __ldxr(v70);
              if (v73 == 1)
              {
                if (!__stlxr(0, v70))
                  return;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v70, v11, v12, (uint64_t)v13, v14, v15, v16, v17);
              return;
            }
            if (a2 == 1)
              JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)v10, *(JSC::VM **)((v10 & 0xFFFFFC000) + 8), Concurrently, "Firing replacement to ensure validity", v14, v15, v16, v17);
            return;
          }
LABEL_114:
          __break(0xC471u);
          JUMPOUT(0x1981E8544);
        }
        v23 = v19 & 0xFFFFFFFFFFFFLL;
        if (a2 == 1)
        {
          v24 = v19 >> 4;
          if (!(_DWORD)v24 || (v24 & ~*(_DWORD *)(v10 + 32)) != 0)
            goto LABEL_64;
          v25 = *(_QWORD *)(v10 + 88);
          if (!v25)
          {
            v36 = *(_QWORD *)(v10 + 64);
            if (!v36 || *(_BYTE *)(v36 + 5) != 1 && *(_DWORD *)(v36 + 80) < 2u)
              goto LABEL_64;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v10, *(JSC::VM **)((v10 & 0xFFFFFC000) + 8), 1, v13, v14, v15, v16, v17);
            if (!v25)
              goto LABEL_64;
          }
          if (!*(_DWORD *)(v25 + 24))
            goto LABEL_64;
          v26 = *(_QWORD *)(v25 + 16);
          v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
          v28 = *(unsigned int *)(v25 + 8);
          v29 = *(_DWORD *)(v23 + 16);
          if ((v26 & 1) != 0)
          {
            if ((v29 & 0x20) != 0)
              v29 = *(_DWORD *)(v23 + 32);
            v30 = *(_DWORD *)(v25 + 12);
            v31 = (v29 >> 8) & *(_QWORD *)&v30;
            v32 = *(unsigned __int8 *)(v27 + v31);
            if (*(_BYTE *)(v27 + v31))
            {
              v33 = v27 + v28;
              v34 = 1;
              while (1)
              {
                v35 = *(_QWORD *)(v33 + 8 * (v32 - 1));
                if (v23 == (v35 & 0xFFFFFFFFFFFFLL))
                  break;
                v31 = ((_DWORD)v31 + v34) & v30;
                v32 = *(unsigned __int8 *)(v27 + v31);
                ++v34;
                if (!*(_BYTE *)(v27 + v31))
                  goto LABEL_64;
              }
              v37 = (JSC::Structure *)HIBYTE(v35);
LABEL_35:
              if (a2 == 1)
              {
                JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v10, *(JSC::VM **)((v10 & 0xFFFFFC000) + 8), v37, (uint64_t)v13, v14, v15, v16, v17);
                return;
              }
              if (a2)
                return;
              v38 = (unsigned __int8 *)(v10 + 15);
              if (__ldaxr((unsigned __int8 *)(v10 + 15)))
              {
                __clrex();
              }
              else if (!__stxr(1u, v38))
              {
                goto LABEL_42;
              }
              WTF::Lock::lockSlow((WTF::Lock *)(v10 + 15));
LABEL_42:
              v40 = *(_QWORD *)(v10 + 64);
              if (v40)
              {
                if (*(_BYTE *)(v40 + 5) != 1)
                {
                  v48 = *(_QWORD *)(v40 + 56);
                  if (v48)
                  {
                    v49 = *(_DWORD *)(v48 - 8);
                    v50 = 9
                        * (((_DWORD)v37 + ~((_DWORD)v37 << 15)) ^ (((_DWORD)v37 + ~((_DWORD)v37 << 15)) >> 10));
                    v51 = (v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11);
                    v52 = v49 & (v51 ^ HIWORD(v51));
                    v53 = *(_DWORD *)(v48 + 16 * v52);
                    if (v53 != (_DWORD)v37)
                    {
                      v54 = 1;
                      do
                      {
                        if (v53 == 0x7FFFFFFF)
                          break;
                        v52 = (v52 + v54) & v49;
                        v53 = *(_DWORD *)(v48 + 16 * v52);
                        ++v54;
                      }
                      while (v53 != (_DWORD)v37);
                    }
                  }
                }
              }
              v41 = __ldxr(v38);
              if (v41 == 1)
              {
                if (!__stlxr(0, v38))
                  return;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v38, v11, v12, (uint64_t)v13, v14, v15, v16, v17);
              return;
            }
LABEL_64:
            __break(0xC471u);
            JUMPOUT(0x1981E82D0);
          }
          if ((v29 & 0x20) != 0)
            v29 = *(_DWORD *)(v23 + 32);
          v42 = *(_DWORD *)(v25 + 12);
          v43 = v42 & (v29 >> 8);
          v44 = *(_DWORD *)(v27 + 4 * v43);
          if (!v44)
            goto LABEL_64;
          v45 = v27 + 4 * v28;
          v46 = 1;
          while (1)
          {
            v47 = (v44 - 1);
            if (*(_QWORD *)(v45 + 16 * v47) == v23)
              break;
            v43 = (v43 + v46) & v42;
            v44 = *(_DWORD *)(v27 + 4 * v43);
            ++v46;
            if (!v44)
              goto LABEL_64;
          }
          v37 = (JSC::Structure *)*(unsigned int *)(v45 + 16 * v47 + 8);
        }
        else
        {
          v88 = 0;
          v37 = (JSC::Structure *)JSC::Structure::getConcurrently(v10, (_DWORD *)(v19 & 0xFFFFFFFFFFFFLL), &v88, (uint64_t)v13, v14, v15, v16, v17);
        }
        if ((_DWORD)v37 != -1)
          goto LABEL_35;
        goto LABEL_64;
      }
    }
  }
}

uint64_t JSC::ObjectPropertyCondition::isStillLive(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if ((a1[1] & 0xFFFFFFFFFFFFFFLL) == 0)
    return 0;
  v3 = *a1;
  if ((*a1 & 8) != 0)
  {
    result = *(_BYTE *)(v3 - 79) & 1;
  }
  else if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
  {
    result = (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFC000) + 8 * ((v3 >> 10) & 0xF) + 0x28) >> (v3 >> 4)) & 1;
  }
  else
  {
    result = 0;
  }
  v5 = a1[1];
  if ((v5 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v5) <= 7u && ((1 << BYTE6(a1[1])) & 0x9C) != 0)
  {
    v8 = a1[2];
    if (v8)
    {
      if ((v8 & 8) != 0)
      {
        LODWORD(v9) = *(_BYTE *)(v8 - 79) & 1;
      }
      else if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
      {
        v9 = (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFC000) + 8 * ((v8 >> 10) & 0xF) + 0x28) >> (v8 >> 4)) & 1;
      }
      else
      {
        LODWORD(v9) = 0;
      }
      result = result & v9;
      v5 = a1[1];
    }
  }
  if ((v5 & 0xFF000000000000) == 0x5000000000000)
  {
    v10 = a1[2];
    if (v10)
    {
      if ((v10 & 0xFFFE000000000002) == 0)
      {
        if ((v10 & 8) != 0)
        {
          LODWORD(v10) = *(_BYTE *)(v10 - 79) & 1;
        }
        else if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
        {
          v10 = (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1;
        }
        else
        {
          LODWORD(v10) = 0;
        }
        return result & v10;
      }
    }
  }
  return result;
}

uint64_t JSC::ObjectPropertyCondition::validateReferences(uint64_t this, const void ***a2)
{
  uint64_t v2;
  const void *v4;
  const void **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  const void *v9;
  int v10;
  const void *v11;
  const void *v12;

  v2 = this + 8;
  if ((*(_QWORD *)(this + 8) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    v4 = *(const void **)this;
    v12 = v4;
    if (v4)
    {
      v5 = *a2;
      if (!*a2)
      {
LABEL_10:
        v11 = v4;
        WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v11, "\n");
        WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", a2, "\n");
        this = 60;
        __break(0xC471u);
        return this;
      }
      v6 = *((_DWORD *)v5 - 2);
      v7 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v12);
      v4 = v12;
      v8 = v7 & v6;
      v9 = v5[v7 & v6];
      if (v9 != v12)
      {
        v10 = 1;
        while (v9)
        {
          v8 = (v8 + v10) & v6;
          v9 = v5[v8];
          ++v10;
          if (v9 == v12)
            return JSC::PropertyCondition::validateReferences(v2, a2);
        }
        goto LABEL_10;
      }
    }
    return JSC::PropertyCondition::validateReferences(v2, a2);
  }
  return this;
}

uint64_t JSC::ObjectPropertyConditionSet::hasOneSlotBaseCondition(JSC::ObjectPropertyConditionSet *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v2 = *(_QWORD *)this + 8;
  else
    v2 = 0;
  if (v1)
    v3 = *(_QWORD *)this + 8 + 24 * *(unsigned int *)(v1 + 4);
  else
    v3 = 0;
  if (v2 == v3)
  {
LABEL_17:
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(unsigned __int8 *)(v2 + 14);
      v6 = v5 > 6;
      v7 = (1 << v5) & 0x63;
      if (!v6 && v7 != 0)
      {
        if ((v4 & 1) != 0)
          goto LABEL_17;
        v4 = 1;
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
  return v4 & 1;
}

