uint64_t JSC::typedArrayViewPrivateFuncIsDetached(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)a2 + 6);
  if ((*(_BYTE *)(v3 + 40) & 8) == 0)
    return 6;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    return 6;
  }
  else
  {
    return 7;
  }
}

unint64_t JSC::typedArrayViewPrivateFuncLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  char v16;
  JSC::ArrayBuffer *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  BOOL v23;
  _BOOL4 v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  JSC::VM *v50;
  char v51;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v48, (uint64_t)"Receiver should be a typed array view", 38);
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) - 39 >= 0xB)
    return JSC::throwTypeError((unint64_t)this, &v48, (uint64_t)"Receiver should be a typed array view", 38);
  v50 = v9;
  v11 = *(unsigned __int8 *)(v10 + 40);
  if ((v11 & 8) == 0
    || (v12 = *(_QWORD *)(v10 + 16)) != 0
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    if ((v11 & 6) == 0)
      goto LABEL_10;
    if (v11 == 88)
      goto LABEL_23;
    v23 = v11 == 48 || v11 == 16;
    if (v23)
    {
      v17 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_24;
    }
    v35 = v11 - 90;
    if (v35 <= 0x33)
    {
      if (((1 << v35) & 0xF400000000000) != 0)
      {
        v17 = *(JSC::ArrayBuffer **)(v10 + 48);
LABEL_24:
        if (v17)
        {
          *(_DWORD *)v17 += 2;
          if (*((_BYTE *)v17 + 64) && (v47 = *((_QWORD *)v17 + 4)) != 0)
            v18 = atomic_load((unint64_t *)(v47 + 32));
          else
            v18 = *((_QWORD *)v17 + 6);
          v19 = *(_QWORD *)(v10 + 32);
          v20 = v18;
          if ((*(_BYTE *)(v10 + 40) & 1) == 0)
          {
            if ((*(_BYTE *)(v10 + 5) - 42) > 7u)
              LOBYTE(v21) = 0;
            else
              v21 = qword_199158A40[(char)(*(_BYTE *)(v10 + 5) - 42)];
            v20 = (*(_QWORD *)(v10 + 24) << v21) + v19;
          }
          v25 = v19 > v18 || v20 > v18;
          v23 = *(_DWORD *)v17 == 2;
          *(_DWORD *)v17 -= 2;
          if (v23)
          {
            v26 = v25;
            JSC::ArrayBuffer::~ArrayBuffer(v17, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
            if (!v26)
              goto LABEL_10;
          }
          else if (!v25)
          {
            goto LABEL_10;
          }
        }
        goto LABEL_57;
      }
      if (((1 << v35) & 0xF) != 0)
      {
LABEL_23:
        v17 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v10 + 8) - 8);
        goto LABEL_24;
      }
    }
  }
LABEL_57:
  v36 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v36 = 0x4700000002;
  *(_QWORD *)(v36 + 8) = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
  *(_DWORD *)(v36 + 16) = 4;
  v49 = (WTF::StringImpl *)v36;
  JSC::throwTypeError((unint64_t)this, &v50, &v49);
  v38 = v49;
  v49 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v37, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
LABEL_10:
  if (*((_DWORD *)v48 + 20))
  {
    v15 = *((_DWORD *)v48 + 20);
    if ((v15 & 0x27) != 0 && (v15 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v48 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v48 + 2))
      return 0;
  }
  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
  {
    LOBYTE(v50) = 0;
    v51 = 0;
    v13 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v50, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v16)
    {
      v13 = 0;
      return v13 | 0xFFFE000000000000;
    }
  }
  else
  {
    v13 = *(_QWORD *)(v10 + 24);
  }
  if (HIDWORD(v13))
  {
    v22 = (double)v13;
  }
  else
  {
    if ((v13 & 0x80000000) == 0)
      return v13 | 0xFFFE000000000000;
    v22 = (double)v13;
  }
  return *(_QWORD *)&v22 + 0x2000000000000;
}

uint64_t JSC::typedArrayViewPrivateFuncContentType(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unsigned int v4;
  JSC::VM *v6;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Receiver should be a typed array view", 38);
  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Receiver should be a typed array view", 38);
  v4 = *(unsigned __int8 *)(v3 + 5) - 39;
  if (v4 >= 0xB)
    return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Receiver should be a typed array view", 38);
  else
    return qword_1991589E8[(char)v4];
}

uint64_t JSC::typedArrayViewPrivateFuncGetOriginalConstructor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  char *v4;
  void (*v6)(_QWORD *);
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[3];

  v3 = *((_QWORD *)a2 + 6);
  if (*(unsigned __int8 *)(v3 + 5) <= 0x16u)
    v3 = 0;
  switch(*(_BYTE *)(v3 + 5))
  {
    case '\'':
      v4 = (char *)(this + 1664);
      break;
    case '(':
      v4 = (char *)(this + 1688);
      break;
    case ')':
      v4 = (char *)(this + 1712);
      break;
    case '*':
      v4 = (char *)(this + 1736);
      break;
    case '+':
      v4 = (char *)(this + 1760);
      break;
    case ',':
      v4 = (char *)(this + 1784);
      break;
    case '-':
      v4 = (char *)(this + 1808);
      break;
    case '.':
      v4 = (char *)(this + 1832);
      break;
    case '/':
      v4 = (char *)(this + 1856);
      break;
    case '0':
      v4 = (char *)(this + 1880);
      break;
    case '1':
      v4 = (char *)(this + 1904);
      break;
    case '2':
      v4 = (char *)(this + 1928);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198A765C0);
  }
  if ((*(_QWORD *)v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (this)
    {
      v7 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v7 = (uint64_t *)(this - 16);
      v8 = *v7;
    }
    else
    {
      v8 = -192;
    }
    v9[0] = v8;
    v9[1] = this;
    v9[2] = v4;
    v6(v9);
  }
  return *((_QWORD *)v4 + 1);
}

void JSC::JSTypedArrayViewPrototype::finishCreation(JSC::JSTypedArrayViewPrototype *this, JSC::VM *a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  WTF::StringImpl *v55;
  JSC::BuiltinExecutables **v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  WTF::StringImpl *v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  double v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  double v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __n128 v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::AtomStringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __n128 v147;
  WTF::StringImpl *v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::AtomStringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  WTF::StringImpl *v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  int v177;
  WTF::StringImpl *v178;
  WTF::AtomStringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __n128 v187;
  WTF::StringImpl *v188;
  WTF::AtomStringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  uint64_t CodeExecutable;
  WTF::StringImpl *v198;
  uint64_t v199;
  double v200;
  float v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __n128 v213;
  WTF::AtomStringImpl *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  uint64_t LastCodeExecutable;
  WTF::StringImpl *v223;
  uint64_t v224;
  double v225;
  float v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __n128 v238;
  WTF::AtomStringImpl *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  uint64_t IndexCodeExecutable;
  WTF::StringImpl *v248;
  uint64_t v249;
  double v250;
  float v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __n128 v263;
  WTF::AtomStringImpl *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  uint64_t LastIndexCodeExecutable;
  WTF::StringImpl *v273;
  uint64_t v274;
  double v275;
  float v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __n128 v288;
  WTF::AtomStringImpl *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  WTF::StringImpl *v296;
  uint64_t v297;
  WTF::StringImpl *v298;
  uint64_t v299;
  double v300;
  float v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  WTF::StringImpl *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __n128 v313;
  WTF::AtomStringImpl *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::AtomStringImpl *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  __n128 v331;
  WTF::StringImpl *v332;
  WTF::AtomStringImpl *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  WTF::StringImpl *v341;
  int v342;
  WTF::StringImpl *v343;
  WTF::AtomStringImpl *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  __n128 v352;
  WTF::StringImpl *v353;
  WTF::AtomStringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  WTF::StringImpl *v362;
  int v363;
  WTF::StringImpl *v364;
  WTF::AtomStringImpl *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  __n128 v373;
  WTF::StringImpl *v374;
  WTF::AtomStringImpl *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  WTF::AtomStringImpl *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  __n128 v392;
  WTF::StringImpl *v393;
  WTF::AtomStringImpl *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  WTF::AtomStringImpl *v402;
  uint64_t v403;
  uint64_t v404;
  JSC::JSObject *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  JSC::JSGlobalObject *v409;
  WTF::StringImpl *v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  __n128 v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  WTF::StringImpl *v421;
  uint64_t v422;
  WTF::StringImpl *v423;
  uint64_t v424;
  double v425;
  float v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  WTF::StringImpl *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  __n128 v438;
  WTF::AtomStringImpl *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  WTF::StringImpl *v446;
  uint64_t v447;
  WTF::StringImpl *v448;
  uint64_t v449;
  double v450;
  float v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  WTF::StringImpl *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __n128 v463;
  WTF::AtomStringImpl *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  WTF::StringImpl *v471;
  uint64_t v472;
  WTF::StringImpl *v473;
  uint64_t v474;
  double v475;
  float v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  WTF::StringImpl *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  __n128 v488;
  WTF::AtomStringImpl *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  WTF::StringImpl *v496;
  WTF::StringImpl *v497;
  WTF::AtomStringImpl *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  __n128 v506;
  WTF::StringImpl *v507;
  WTF::AtomStringImpl *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  WTF::StringImpl *v516;
  int v517;
  WTF::StringImpl *v518;
  WTF::AtomStringImpl *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  __n128 v527;
  WTF::StringImpl *v528;
  WTF::AtomStringImpl *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  WTF::StringImpl *v537;
  int v538;
  WTF::StringImpl *v539;
  WTF::AtomStringImpl *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  __n128 v548;
  WTF::StringImpl *v549;
  WTF::AtomStringImpl *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  WTF::StringImpl *v557;
  uint64_t v558;
  WTF::StringImpl *v559;
  uint64_t v560;
  double v561;
  float v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  WTF::StringImpl *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  __n128 v574;
  WTF::AtomStringImpl *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  WTF::StringImpl *v583;
  int v584;
  WTF::StringImpl *v585;
  WTF::AtomStringImpl *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  __n128 v594;
  WTF::StringImpl *v595;
  WTF::AtomStringImpl *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  WTF::StringImpl *v603;
  uint64_t v604;
  WTF::StringImpl *v605;
  uint64_t v606;
  double v607;
  float v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  WTF::StringImpl *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  __n128 v620;
  WTF::AtomStringImpl *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  WTF::StringImpl *v628;
  WTF::StringImpl *v629;
  WTF::AtomStringImpl *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  __n128 v638;
  WTF::StringImpl *v639;
  WTF::AtomStringImpl *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  WTF::StringImpl *v647;
  WTF::StringImpl *v648;
  WTF::AtomStringImpl *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  __n128 v657;
  WTF::StringImpl *v658;
  WTF::AtomStringImpl *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  WTF::StringImpl *v667;
  int v668;
  WTF::StringImpl *v669;
  WTF::AtomStringImpl *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  __n128 v678;
  WTF::StringImpl *v679;
  WTF::AtomStringImpl *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  WTF::StringImpl *v687;
  uint64_t v688;
  WTF::StringImpl *v689;
  uint64_t v690;
  double v691;
  float v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  WTF::StringImpl *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  __n128 v704;
  WTF::AtomStringImpl *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  WTF::AtomStringImpl *v713;
  uint64_t v714;
  uint64_t v715;
  JSC::JSObject *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  JSC::JSGlobalObject *v720;
  WTF::StringImpl *v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  __n128 v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  __n128 v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  __n128 v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  void *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  void *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t v758;
  void *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  void *v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unint64_t v774;
  void *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  void *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  void *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  void *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  void *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  void *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  void *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  void *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  unint64_t v838;
  void *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  void *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  void *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unint64_t v862;
  void *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  void *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  void *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  void *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  void *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  void *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  void *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  void *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  void *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t v934;
  void *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  unint64_t v950;
  void *v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  unint64_t v958;
  void *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  unint64_t v966;
  void *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  void *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  void *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  void *v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  unint64_t v998;
  void *v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  void *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  void *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  void *v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  void *v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  void *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  unint64_t v1046;
  void *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  void *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  void *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  void *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  void *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  void *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  void *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  void *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  void *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  void *v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  void *v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  unint64_t v1134;
  void *v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t (*v1142)(WTF::StringImpl **);
  WTF::StringImpl **v1143;
  uint64_t LastCodeGenerator;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  __n128 v1154;
  uint64_t LastIndexCodeGenerator;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  __n128 v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  __n128 v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  __n128 v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  __n128 v1198;
  WTF::StringImpl *v1199;
  WTF::StringImpl *v1200;
  WTF::StringImpl *v1201;
  WTF::StringImpl *v1202;
  WTF::StringImpl *v1203;
  __int128 v1204;

  v12 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v13 = *(_QWORD *)(*(_QWORD *)v12 + 2512);
  v14 = *(_QWORD *)(a3 + 520);
  if ((v14 & 1) != 0)
  {
    v1142 = *(uint64_t (**)(WTF::StringImpl **))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a3 & 8) != 0)
      v1143 = (WTF::StringImpl **)(a3 - 16);
    else
      v1143 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    v1203 = *v1143;
    *(_QWORD *)&v1204 = a3;
    *((_QWORD *)&v1204 + 1) = a3 + 520;
    v14 = v1142(&v1203);
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v13, v14, 4, a7, a8, a9, a4);
  WTF::AtomStringImpl::addLiteral((uint64_t)"buffer", 6uLL, v15, v16, v17, v18, v19, &v1203);
  v20 = v1203;
  v1202 = v1203;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, (JSC::VM *)a3, (unint64_t *)&v1202, (uint64_t)JSC::typedArrayViewProtoGetterFuncBuffer, 0, (const JSC::PropertyTable *)0x16);
  v1202 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v742, v743, v744, v745, v746, v747, v748, v749);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v28 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 920);
  if (v28)
  {
    *(_DWORD *)v28 += 2;
    v1201 = v28;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, (JSC::VM *)a3, (unint64_t *)&v1201, (uint64_t)JSC::typedArrayViewProtoGetterFuncByteLength, 152, (const JSC::PropertyTable *)0x16);
    v1201 = 0;
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v750, v751, v752, v753, v754, v755, v756, v757);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  else
  {
    v1201 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, (JSC::VM *)a3, (unint64_t *)&v1201, (uint64_t)JSC::typedArrayViewProtoGetterFuncByteLength, 152, (const JSC::PropertyTable *)0x16);
    v1201 = 0;
  }
  v36 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 928);
  if (v36)
  {
    *(_DWORD *)v36 += 2;
    v1200 = v36;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, (JSC::VM *)a3, (unint64_t *)&v1200, (uint64_t)JSC::typedArrayViewProtoGetterFuncByteOffset, 153, (const JSC::PropertyTable *)0x16);
    v1200 = 0;
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v758, v759, v760, v761, v762, v763, v764, v765);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  else
  {
    v1200 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, (JSC::VM *)a3, (unint64_t *)&v1200, (uint64_t)JSC::typedArrayViewProtoGetterFuncByteOffset, 153, (const JSC::PropertyTable *)0x16);
    v1200 = 0;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"copyWithin", 0xAuLL, v39, v40, v41, v42, v43, &v1203);
  v44 = v1203;
  if (v1203 && (*((_BYTE *)v1203 + 16) & 0x20) == 0)
  {
    v45 = v1203;
LABEL_16:
    *(_DWORD *)v45 += 2;
    goto LABEL_17;
  }
  v45 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v45)
    goto LABEL_16;
LABEL_17:
  v1203 = v45;
  v53 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncCopyWithin, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v55 = v1203;
  v1203 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v766, v767, v768, v769, v770, v771, v772, v773);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  v56 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v44, v53, 4, v50, v51, v52, v54);
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v774, v775, v776, v777, v778, v779, v780, v781);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  v64 = *(_QWORD *)v12;
  v65 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2328);
  if (!v65)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 1, (uint64_t)JSC::typedArrayViewProtoFuncSort, 0, 0, 4u);
    goto LABEL_32;
  }
  v66 = *(_DWORD *)v65 + 2;
  *(_DWORD *)v65 = v66;
  v1199 = v65;
  if ((*((_BYTE *)v65 + 16) & 0x20) != 0)
  {
    v67 = *(WTF::StringImpl **)(v64 + 872);
    if (!v67)
      goto LABEL_27;
    v66 = *(_DWORD *)v67;
  }
  else
  {
    v67 = v65;
  }
  *(_DWORD *)v67 = v66 + 2;
LABEL_27:
  v1203 = v67;
  v75 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncSort, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v77 = v1203;
  v1203 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v65, v75, 4, v72, v73, v74, v76);
  if (*(_DWORD *)v65 == 2)
  {
    WTF::StringImpl::~StringImpl(v65, v78, v79, v80, v81, v82, v83, v84);
    WTF::fastFree(v782, v783, v784, v785, v786, v787, v788, v789);
  }
  else
  {
    *(_DWORD *)v65 -= 2;
  }
LABEL_32:
  WTF::AtomStringImpl::addLiteral((uint64_t)"every", 5uLL, v80, v81, v82, v83, v84, &v1203);
  v85 = v1203;
  v86 = JSC::BuiltinExecutables::typedArrayPrototypeEveryCodeExecutable(*v56);
  v87 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v87 + 2);
  v1203 = v87;
  v1204 = xmmword_1991250D0;
  v96 = JSC::UnlinkedFunctionExecutable::link(v86, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v88, COERCE_DOUBLE(0x11BB800011A76), v89, v90);
  v97 = v1203;
  v1203 = 0;
  if (v97)
  {
    if (*((_DWORD *)v97 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v97 + 8))(v97);
    else
      --*((_DWORD *)v97 + 2);
  }
  v98 = JSC::JSFunction::create((uint64_t)a2, v96, (_DWORD *)a3, v91, v92, v93, v94, v95);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v85, v98, 4, v99, v100, v101, v102);
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v103, v104, v105, v106, v107, v108, v109);
      WTF::fastFree(v790, v791, v792, v793, v794, v795, v796, v797);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"filter", 6uLL, v105, v106, v107, v108, v109, &v1203);
  v110 = v1203;
  v111 = JSC::BuiltinExecutables::typedArrayPrototypeFilterCodeExecutable(*v56);
  v112 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v112 + 2);
  v1203 = v112;
  v1204 = xmmword_199125100;
  v121 = JSC::UnlinkedFunctionExecutable::link(v111, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v113, COERCE_DOUBLE(0x12418000120C0), v114, v115);
  v122 = v1203;
  v1203 = 0;
  if (v122)
  {
    if (*((_DWORD *)v122 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v122 + 8))(v122);
    else
      --*((_DWORD *)v122 + 2);
  }
  v123 = JSC::JSFunction::create((uint64_t)a2, v121, (_DWORD *)a3, v116, v117, v118, v119, v120);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v110, v123, 4, v124, v125, v126, v127);
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v128, v129, v130, v131, v132, v133, v134);
      WTF::fastFree(v798, v799, v800, v801, v802, v803, v804, v805);
    }
    else
    {
      *(_DWORD *)v110 -= 2;
    }
  }
  v135 = *(_QWORD *)v12;
  v136 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3952);
  if (!v136)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 0, (uint64_t)JSC::typedArrayProtoViewFuncEntries, 0, 99, 4u);
    goto LABEL_53;
  }
  v137 = *(_DWORD *)v136 + 2;
  *(_DWORD *)v136 = v137;
  v1199 = v136;
  if ((*((_BYTE *)v136 + 16) & 0x20) != 0)
  {
    v138 = *(WTF::StringImpl **)(v135 + 872);
    if (!v138)
      goto LABEL_48;
    v137 = *(_DWORD *)v138;
  }
  else
  {
    v138 = v136;
  }
  *(_DWORD *)v138 = v137 + 2;
LABEL_48:
  v1203 = v138;
  v146 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1203, (uint64_t)JSC::typedArrayProtoViewFuncEntries, 0, 99, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v148 = v1203;
  v1203 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v139, v140, v141, v142, v143, v144, v145);
      WTF::fastFree(v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1085);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v136, v146, 4, v143, v144, v145, v147);
  if (*(_DWORD *)v136 == 2)
  {
    WTF::StringImpl::~StringImpl(v136, v149, v150, v151, v152, v153, v154, v155);
    WTF::fastFree(v806, v807, v808, v809, v810, v811, v812, v813);
  }
  else
  {
    *(_DWORD *)v136 -= 2;
  }
LABEL_53:
  WTF::AtomStringImpl::addLiteral((uint64_t)"includes", 8uLL, v151, v152, v153, v154, v155, &v1203);
  v156 = v1203;
  if (v1203 && (*((_BYTE *)v1203 + 16) & 0x20) == 0)
  {
    v157 = v1203;
LABEL_56:
    *(_DWORD *)v157 += 2;
    goto LABEL_57;
  }
  v157 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v157)
    goto LABEL_56;
LABEL_57:
  v1203 = v157;
  v165 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncIncludes, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v167 = v1203;
  v1203 = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
    {
      WTF::StringImpl::~StringImpl(v167, v158, v159, v160, v161, v162, v163, v164);
      WTF::fastFree(v814, v815, v816, v817, v818, v819, v820, v821);
    }
    else
    {
      *(_DWORD *)v167 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v156, v165, 4, v162, v163, v164, v166);
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl(v156, v168, v169, v170, v171, v172, v173, v174);
      WTF::fastFree(v822, v823, v824, v825, v826, v827, v828, v829);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
  }
  v175 = *(_QWORD *)v12;
  v176 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 520);
  if (!v176)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 1, (uint64_t)JSC::typedArrayViewProtoFuncFill, 0, 0, 4u);
    goto LABEL_72;
  }
  v177 = *(_DWORD *)v176 + 2;
  *(_DWORD *)v176 = v177;
  v1199 = v176;
  if ((*((_BYTE *)v176 + 16) & 0x20) != 0)
  {
    v178 = *(WTF::StringImpl **)(v175 + 872);
    if (!v178)
      goto LABEL_67;
    v177 = *(_DWORD *)v178;
  }
  else
  {
    v178 = v176;
  }
  *(_DWORD *)v178 = v177 + 2;
LABEL_67:
  v1203 = v178;
  v186 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncFill, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v188 = v1203;
  v1203 = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
    {
      WTF::StringImpl::~StringImpl(v188, v179, v180, v181, v182, v183, v184, v185);
      WTF::fastFree(v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093);
    }
    else
    {
      *(_DWORD *)v188 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v176, v186, 4, v183, v184, v185, v187);
  if (*(_DWORD *)v176 == 2)
  {
    WTF::StringImpl::~StringImpl(v176, v189, v190, v191, v192, v193, v194, v195);
    WTF::fastFree(v830, v831, v832, v833, v834, v835, v836, v837);
  }
  else
  {
    *(_DWORD *)v176 -= 2;
  }
LABEL_72:
  WTF::AtomStringImpl::addLiteral((uint64_t)"find", 4uLL, v191, v192, v193, v194, v195, &v1203);
  v196 = v1203;
  CodeExecutable = JSC::BuiltinExecutables::typedArrayPrototypeFindCodeExecutable(*v56);
  v198 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v198 + 2);
  v1203 = v198;
  v1204 = xmmword_199125120;
  v207 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v199, COERCE_DOUBLE(0x12A630001290DLL), v200, v201);
  v208 = v1203;
  v1203 = 0;
  if (v208)
  {
    if (*((_DWORD *)v208 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v208 + 8))(v208);
    else
      --*((_DWORD *)v208 + 2);
  }
  v209 = JSC::JSFunction::create((uint64_t)a2, v207, (_DWORD *)a3, v202, v203, v204, v205, v206);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v196, v209, 4, v210, v211, v212, v213);
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, v214, v215, v216, v217, v218, v219, v220);
      WTF::fastFree(v838, v839, v840, v841, v842, v843, v844, v845);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  v221 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 560);
  if (v221)
  {
    *(_DWORD *)v221 += 2;
    LastCodeExecutable = JSC::BuiltinExecutables::typedArrayPrototypeFindLastCodeExecutable(*v56);
    v223 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
    ++*((_DWORD *)v223 + 2);
    v1203 = v223;
    v1204 = xmmword_199125160;
    v232 = JSC::UnlinkedFunctionExecutable::link(LastCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v224, COERCE_DOUBLE(0x1307A00012F12), v225, v226);
    v233 = v1203;
    v1203 = 0;
    if (v233)
    {
      if (*((_DWORD *)v233 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v233 + 8))(v233);
      else
        --*((_DWORD *)v233 + 2);
    }
    v234 = JSC::JSFunction::create((uint64_t)a2, v232, (_DWORD *)a3, v227, v228, v229, v230, v231);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v221, v234, 4, v235, v236, v237, v238);
    if (*(_DWORD *)v221 == 2)
    {
      WTF::StringImpl::~StringImpl(v221, v239, v240, v241, v242, v243, v244, v245);
      WTF::fastFree(v846, v847, v848, v849, v850, v851, v852, v853);
    }
    else
    {
      *(_DWORD *)v221 -= 2;
    }
  }
  else
  {
    LastCodeGenerator = JSC::typedArrayPrototypeFindLastCodeGenerator((JSC::BuiltinExecutables **)a2, v214);
    v1150 = JSC::JSFunction::create((uint64_t)a2, LastCodeGenerator, (_DWORD *)a3, v1145, v1146, v1147, v1148, v1149);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1150, 4, v1151, v1152, v1153, v1154);
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"findIndex", 9uLL, v241, v242, v243, v244, v245, &v1203);
  v246 = v1203;
  IndexCodeExecutable = JSC::BuiltinExecutables::typedArrayPrototypeFindIndexCodeExecutable(*v56);
  v248 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v248 + 2);
  v1203 = v248;
  v1204 = xmmword_199125140;
  v257 = JSC::UnlinkedFunctionExecutable::link(IndexCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v249, COERCE_DOUBLE(0x12D4600012C07), v250, v251);
  v258 = v1203;
  v1203 = 0;
  if (v258)
  {
    if (*((_DWORD *)v258 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v258 + 8))(v258);
    else
      --*((_DWORD *)v258 + 2);
  }
  v259 = JSC::JSFunction::create((uint64_t)a2, v257, (_DWORD *)a3, v252, v253, v254, v255, v256);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v246, v259, 4, v260, v261, v262, v263);
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
    {
      WTF::StringImpl::~StringImpl(v246, v264, v265, v266, v267, v268, v269, v270);
      WTF::fastFree(v854, v855, v856, v857, v858, v859, v860, v861);
    }
    else
    {
      *(_DWORD *)v246 -= 2;
    }
  }
  v271 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 568);
  if (v271)
  {
    *(_DWORD *)v271 += 2;
    LastIndexCodeExecutable = JSC::BuiltinExecutables::typedArrayPrototypeFindLastIndexCodeExecutable(*v56);
    v273 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
    ++*((_DWORD *)v273 + 2);
    v1203 = v273;
    v1204 = xmmword_199125180;
    v282 = JSC::UnlinkedFunctionExecutable::link(LastIndexCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v274, COERCE_DOUBLE(0x133730001322BLL), v275, v276);
    v283 = v1203;
    v1203 = 0;
    if (v283)
    {
      if (*((_DWORD *)v283 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v283 + 8))(v283);
      else
        --*((_DWORD *)v283 + 2);
    }
    v284 = JSC::JSFunction::create((uint64_t)a2, v282, (_DWORD *)a3, v277, v278, v279, v280, v281);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v271, v284, 4, v285, v286, v287, v288);
    if (*(_DWORD *)v271 == 2)
    {
      WTF::StringImpl::~StringImpl(v271, v289, v290, v291, v292, v293, v294, v295);
      WTF::fastFree(v862, v863, v864, v865, v866, v867, v868, v869);
    }
    else
    {
      *(_DWORD *)v271 -= 2;
    }
  }
  else
  {
    LastIndexCodeGenerator = JSC::typedArrayPrototypeFindLastIndexCodeGenerator((JSC::BuiltinExecutables **)a2, v264);
    v1161 = JSC::JSFunction::create((uint64_t)a2, LastIndexCodeGenerator, (_DWORD *)a3, v1156, v1157, v1158, v1159, v1160);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1161, 4, v1162, v1163, v1164, v1165);
  }
  v296 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 1312);
  if (v296)
  {
    *(_DWORD *)v296 += 2;
    v297 = JSC::BuiltinExecutables::typedArrayPrototypeForEachCodeExecutable(*v56);
    v298 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
    ++*((_DWORD *)v298 + 2);
    v1203 = v298;
    v1204 = xmmword_199125230;
    v307 = JSC::UnlinkedFunctionExecutable::link(v297, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v299, COERCE_DOUBLE(0x1432D0001420DLL), v300, v301);
    v308 = v1203;
    v1203 = 0;
    if (v308)
    {
      if (*((_DWORD *)v308 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v308 + 8))(v308);
      else
        --*((_DWORD *)v308 + 2);
    }
    v309 = JSC::JSFunction::create((uint64_t)a2, v307, (_DWORD *)a3, v302, v303, v304, v305, v306);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v296, v309, 4, v310, v311, v312, v313);
    if (*(_DWORD *)v296 == 2)
    {
      WTF::StringImpl::~StringImpl(v296, v314, v315, v316, v317, v318, v319, v320);
      WTF::fastFree(v870, v871, v872, v873, v874, v875, v876, v877);
    }
    else
    {
      *(_DWORD *)v296 -= 2;
    }
  }
  else
  {
    v1166 = JSC::typedArrayPrototypeForEachCodeGenerator((JSC::BuiltinExecutables **)a2, v289);
    v1172 = JSC::JSFunction::create((uint64_t)a2, v1166, (_DWORD *)a3, v1167, v1168, v1169, v1170, v1171);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1172, 4, v1173, v1174, v1175, v1176);
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"indexOf", 7uLL, v316, v317, v318, v319, v320, &v1203);
  v321 = v1203;
  if (v1203 && (*((_BYTE *)v1203 + 16) & 0x20) == 0)
  {
    v322 = v1203;
LABEL_105:
    *(_DWORD *)v322 += 2;
    goto LABEL_106;
  }
  v322 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v322)
    goto LABEL_105;
LABEL_106:
  v1203 = v322;
  v330 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncIndexOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v332 = v1203;
  v1203 = 0;
  if (v332)
  {
    if (*(_DWORD *)v332 == 2)
    {
      WTF::StringImpl::~StringImpl(v332, v323, v324, v325, v326, v327, v328, v329);
      WTF::fastFree(v878, v879, v880, v881, v882, v883, v884, v885);
    }
    else
    {
      *(_DWORD *)v332 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v321, v330, 4, v327, v328, v329, v331);
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
    {
      WTF::StringImpl::~StringImpl(v321, v333, v334, v335, v336, v337, v338, v339);
      WTF::fastFree(v886, v887, v888, v889, v890, v891, v892, v893);
    }
    else
    {
      *(_DWORD *)v321 -= 2;
    }
  }
  v340 = *(_QWORD *)v12;
  v341 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 1728);
  if (!v341)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 1, (uint64_t)JSC::typedArrayViewProtoFuncJoin, 0, 0, 4u);
    goto LABEL_121;
  }
  v342 = *(_DWORD *)v341 + 2;
  *(_DWORD *)v341 = v342;
  v1199 = v341;
  if ((*((_BYTE *)v341 + 16) & 0x20) != 0)
  {
    v343 = *(WTF::StringImpl **)(v340 + 872);
    if (!v343)
      goto LABEL_116;
    v342 = *(_DWORD *)v343;
  }
  else
  {
    v343 = v341;
  }
  *(_DWORD *)v343 = v342 + 2;
LABEL_116:
  v1203 = v343;
  v351 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncJoin, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v353 = v1203;
  v1203 = 0;
  if (v353)
  {
    if (*(_DWORD *)v353 == 2)
    {
      WTF::StringImpl::~StringImpl(v353, v344, v345, v346, v347, v348, v349, v350);
      WTF::fastFree(v1094, v1095, v1096, v1097, v1098, v1099, v1100, v1101);
    }
    else
    {
      *(_DWORD *)v353 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v341, v351, 4, v348, v349, v350, v352);
  if (*(_DWORD *)v341 == 2)
  {
    WTF::StringImpl::~StringImpl(v341, v354, v355, v356, v357, v358, v359, v360);
    WTF::fastFree(v894, v895, v896, v897, v898, v899, v900, v901);
  }
  else
  {
    *(_DWORD *)v341 -= 2;
  }
LABEL_121:
  v361 = *(_QWORD *)v12;
  v362 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3016);
  if (!v362)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 0, (uint64_t)JSC::typedArrayViewProtoFuncKeys, 0, 98, 4u);
    goto LABEL_130;
  }
  v363 = *(_DWORD *)v362 + 2;
  *(_DWORD *)v362 = v363;
  v1199 = v362;
  if ((*((_BYTE *)v362 + 16) & 0x20) != 0)
  {
    v364 = *(WTF::StringImpl **)(v361 + 872);
    if (!v364)
      goto LABEL_125;
    v363 = *(_DWORD *)v364;
  }
  else
  {
    v364 = v362;
  }
  *(_DWORD *)v364 = v363 + 2;
LABEL_125:
  v1203 = v364;
  v372 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncKeys, 0, 98, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v374 = v1203;
  v1203 = 0;
  if (v374)
  {
    if (*(_DWORD *)v374 == 2)
    {
      WTF::StringImpl::~StringImpl(v374, v365, v366, v367, v368, v369, v370, v371);
      WTF::fastFree(v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109);
    }
    else
    {
      *(_DWORD *)v374 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v362, v372, 4, v369, v370, v371, v373);
  if (*(_DWORD *)v362 == 2)
  {
    WTF::StringImpl::~StringImpl(v362, v375, v376, v377, v378, v379, v380, v381);
    WTF::fastFree(v902, v903, v904, v905, v906, v907, v908, v909);
  }
  else
  {
    *(_DWORD *)v362 -= 2;
  }
LABEL_130:
  WTF::AtomStringImpl::addLiteral((uint64_t)"lastIndexOf", 0xBuLL, v377, v378, v379, v380, v381, &v1203);
  v382 = v1203;
  if (v1203 && (*((_BYTE *)v1203 + 16) & 0x20) == 0)
  {
    v383 = v1203;
LABEL_133:
    *(_DWORD *)v383 += 2;
    goto LABEL_134;
  }
  v383 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v383)
    goto LABEL_133;
LABEL_134:
  v1203 = v383;
  v391 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncLastIndexOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v393 = v1203;
  v1203 = 0;
  if (v393)
  {
    if (*(_DWORD *)v393 == 2)
    {
      WTF::StringImpl::~StringImpl(v393, v384, v385, v386, v387, v388, v389, v390);
      WTF::fastFree(v910, v911, v912, v913, v914, v915, v916, v917);
    }
    else
    {
      *(_DWORD *)v393 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v382, v391, 4, v388, v389, v390, v392);
  if (v382)
  {
    if (*(_DWORD *)v382 == 2)
    {
      WTF::StringImpl::~StringImpl(v382, v394, v395, v396, v397, v398, v399, v400);
      WTF::fastFree(v918, v919, v920, v921, v922, v923, v924, v925);
    }
    else
    {
      *(_DWORD *)v382 -= 2;
    }
  }
  v401 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v401 = 0xA00000002;
  *(_QWORD *)(v401 + 8) = "get length";
  *(_DWORD *)(v401 + 16) = 4;
  v1203 = (WTF::StringImpl *)v401;
  v409 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1203, (uint64_t)JSC::typedArrayViewProtoGetterFuncLength, 0, 151, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v410 = v1203;
  v1203 = 0;
  if (v410)
  {
    if (*(_DWORD *)v410 == 2)
    {
      WTF::StringImpl::~StringImpl(v410, v402, v403, v404, (uint64_t)v405, v406, v407, v408);
      WTF::fastFree(v926, v927, v928, v929, v930, v931, v932, v933);
    }
    else
    {
      *(_DWORD *)v410 -= 2;
    }
  }
  v411 = JSC::GetterSetter::create(a2, (JSC::VM *)a3, v409, 0, v405, v406, v407, v408);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v12 + 1768), v411, (const JSC::PropertyTable *)0x16, v412, v413, v414, v415);
  WTF::AtomStringImpl::addLiteral((uint64_t)"map", 3uLL, v416, v417, v418, v419, v420, &v1203);
  v421 = v1203;
  v422 = JSC::BuiltinExecutables::typedArrayPrototypeMapCodeExecutable(*v56);
  v423 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v423 + 2);
  v1203 = v423;
  v1204 = xmmword_199125450;
  v432 = JSC::UnlinkedFunctionExecutable::link(v422, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v424, COERCE_DOUBLE(0x1A4AF0001A1C4), v425, v426);
  v433 = v1203;
  v1203 = 0;
  if (v433)
  {
    if (*((_DWORD *)v433 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v433 + 8))(v433);
    else
      --*((_DWORD *)v433 + 2);
  }
  v434 = JSC::JSFunction::create((uint64_t)a2, v432, (_DWORD *)a3, v427, v428, v429, v430, v431);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v421, v434, 4, v435, v436, v437, v438);
  if (v421)
  {
    if (*(_DWORD *)v421 == 2)
    {
      WTF::StringImpl::~StringImpl(v421, v439, v440, v441, v442, v443, v444, v445);
      WTF::fastFree(v934, v935, v936, v937, v938, v939, v940, v941);
    }
    else
    {
      *(_DWORD *)v421 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"reduce", 6uLL, v441, v442, v443, v444, v445, &v1203);
  v446 = v1203;
  v447 = JSC::BuiltinExecutables::typedArrayPrototypeReduceCodeExecutable(*v56);
  v448 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v448 + 2);
  v1203 = v448;
  v1204 = xmmword_199125760;
  v457 = JSC::UnlinkedFunctionExecutable::link(v447, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v449, COERCE_DOUBLE(0x21C27000219F0), v450, v451);
  v458 = v1203;
  v1203 = 0;
  if (v458)
  {
    if (*((_DWORD *)v458 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v458 + 8))(v458);
    else
      --*((_DWORD *)v458 + 2);
  }
  v459 = JSC::JSFunction::create((uint64_t)a2, v457, (_DWORD *)a3, v452, v453, v454, v455, v456);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v446, v459, 4, v460, v461, v462, v463);
  if (v446)
  {
    if (*(_DWORD *)v446 == 2)
    {
      WTF::StringImpl::~StringImpl(v446, v464, v465, v466, v467, v468, v469, v470);
      WTF::fastFree(v942, v943, v944, v945, v946, v947, v948, v949);
    }
    else
    {
      *(_DWORD *)v446 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"reduceRight", 0xBuLL, v466, v467, v468, v469, v470, &v1203);
  v471 = v1203;
  v472 = JSC::BuiltinExecutables::typedArrayPrototypeReduceRightCodeExecutable(*v56);
  v473 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v473 + 2);
  v1203 = v473;
  v1204 = xmmword_199125780;
  v482 = JSC::UnlinkedFunctionExecutable::link(v472, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v474, COERCE_DOUBLE(0x2219900021F53), v475, v476);
  v483 = v1203;
  v1203 = 0;
  if (v483)
  {
    if (*((_DWORD *)v483 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v483 + 8))(v483);
    else
      --*((_DWORD *)v483 + 2);
  }
  v484 = JSC::JSFunction::create((uint64_t)a2, v482, (_DWORD *)a3, v477, v478, v479, v480, v481);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v471, v484, 4, v485, v486, v487, v488);
  if (v471)
  {
    if (*(_DWORD *)v471 == 2)
    {
      WTF::StringImpl::~StringImpl(v471, v489, v490, v491, v492, v493, v494, v495);
      WTF::fastFree(v950, v951, v952, v953, v954, v955, v956, v957);
    }
    else
    {
      *(_DWORD *)v471 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"reverse", 7uLL, v491, v492, v493, v494, v495, &v1203);
  v496 = v1203;
  if (v1203 && (*((_BYTE *)v1203 + 16) & 0x20) == 0)
  {
    v497 = v1203;
LABEL_164:
    *(_DWORD *)v497 += 2;
    goto LABEL_165;
  }
  v497 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v497)
    goto LABEL_164;
LABEL_165:
  v1203 = v497;
  v505 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncReverse, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v507 = v1203;
  v1203 = 0;
  if (v507)
  {
    if (*(_DWORD *)v507 == 2)
    {
      WTF::StringImpl::~StringImpl(v507, v498, v499, v500, v501, v502, v503, v504);
      WTF::fastFree(v958, v959, v960, v961, v962, v963, v964, v965);
    }
    else
    {
      *(_DWORD *)v507 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v496, v505, 4, v502, v503, v504, v506);
  if (v496)
  {
    if (*(_DWORD *)v496 == 2)
    {
      WTF::StringImpl::~StringImpl(v496, v508, v509, v510, v511, v512, v513, v514);
      WTF::fastFree(v966, v967, v968, v969, v970, v971, v972, v973);
    }
    else
    {
      *(_DWORD *)v496 -= 2;
    }
  }
  v515 = *(_QWORD *)v12;
  v516 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2296);
  if (!v516)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 1, (uint64_t)JSC::typedArrayViewProtoFuncSet, 0, 0, 4u);
    goto LABEL_180;
  }
  v517 = *(_DWORD *)v516 + 2;
  *(_DWORD *)v516 = v517;
  v1199 = v516;
  if ((*((_BYTE *)v516 + 16) & 0x20) != 0)
  {
    v518 = *(WTF::StringImpl **)(v515 + 872);
    if (!v518)
      goto LABEL_175;
    v517 = *(_DWORD *)v518;
  }
  else
  {
    v518 = v516;
  }
  *(_DWORD *)v518 = v517 + 2;
LABEL_175:
  v1203 = v518;
  v526 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncSet, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v528 = v1203;
  v1203 = 0;
  if (v528)
  {
    if (*(_DWORD *)v528 == 2)
    {
      WTF::StringImpl::~StringImpl(v528, v519, v520, v521, v522, v523, v524, v525);
      WTF::fastFree(v1110, v1111, v1112, v1113, v1114, v1115, v1116, v1117);
    }
    else
    {
      *(_DWORD *)v528 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v516, v526, 4, v523, v524, v525, v527);
  if (*(_DWORD *)v516 == 2)
  {
    WTF::StringImpl::~StringImpl(v516, v529, v530, v531, v532, v533, v534, v535);
    WTF::fastFree(v974, v975, v976, v977, v978, v979, v980, v981);
  }
  else
  {
    *(_DWORD *)v516 -= 2;
  }
LABEL_180:
  v536 = *(_QWORD *)v12;
  v537 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2312);
  if (!v537)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 2, (uint64_t)JSC::typedArrayViewProtoFuncSlice, 0, 0, 4u);
    goto LABEL_189;
  }
  v538 = *(_DWORD *)v537 + 2;
  *(_DWORD *)v537 = v538;
  v1199 = v537;
  if ((*((_BYTE *)v537 + 16) & 0x20) != 0)
  {
    v539 = *(WTF::StringImpl **)(v536 + 872);
    if (!v539)
      goto LABEL_184;
    v538 = *(_DWORD *)v539;
  }
  else
  {
    v539 = v537;
  }
  *(_DWORD *)v539 = v538 + 2;
LABEL_184:
  v1203 = v539;
  v547 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncSlice, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v549 = v1203;
  v1203 = 0;
  if (v549)
  {
    if (*(_DWORD *)v549 == 2)
    {
      WTF::StringImpl::~StringImpl(v549, v540, v541, v542, v543, v544, v545, v546);
      WTF::fastFree(v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125);
    }
    else
    {
      *(_DWORD *)v549 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v537, v547, 4, v544, v545, v546, v548);
  if (*(_DWORD *)v537 == 2)
  {
    WTF::StringImpl::~StringImpl(v537, v550, v551, v552, v553, v554, v555, v556);
    WTF::fastFree(v982, v983, v984, v985, v986, v987, v988, v989);
  }
  else
  {
    *(_DWORD *)v537 -= 2;
  }
LABEL_189:
  WTF::AtomStringImpl::addLiteral((uint64_t)"some", 4uLL, v552, v553, v554, v555, v556, &v1203);
  v557 = v1203;
  v558 = JSC::BuiltinExecutables::typedArrayPrototypeSomeCodeExecutable(*v56);
  v559 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
  ++*((_DWORD *)v559 + 2);
  v1203 = v559;
  v1204 = xmmword_199125940;
  v568 = JSC::UnlinkedFunctionExecutable::link(v558, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v560, COERCE_DOUBLE(0x2612F00025FEFLL), v561, v562);
  v569 = v1203;
  v1203 = 0;
  if (v569)
  {
    if (*((_DWORD *)v569 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v569 + 8))(v569);
    else
      --*((_DWORD *)v569 + 2);
  }
  v570 = JSC::JSFunction::create((uint64_t)a2, v568, (_DWORD *)a3, v563, v564, v565, v566, v567);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v557, v570, 4, v571, v572, v573, v574);
  if (v557)
  {
    if (*(_DWORD *)v557 == 2)
    {
      WTF::StringImpl::~StringImpl(v557, v575, v576, v577, v578, v579, v580, v581);
      WTF::fastFree(v990, v991, v992, v993, v994, v995, v996, v997);
    }
    else
    {
      *(_DWORD *)v557 -= 2;
    }
  }
  v582 = *(_QWORD *)v12;
  v583 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2392);
  if (!v583)
  {
    v1199 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1199, 2, (uint64_t)JSC::typedArrayViewProtoFuncSubarray, 0, 0, 4u);
    goto LABEL_204;
  }
  v584 = *(_DWORD *)v583 + 2;
  *(_DWORD *)v583 = v584;
  v1199 = v583;
  if ((*((_BYTE *)v583 + 16) & 0x20) != 0)
  {
    v585 = *(WTF::StringImpl **)(v582 + 872);
    if (!v585)
      goto LABEL_199;
    v584 = *(_DWORD *)v585;
  }
  else
  {
    v585 = v583;
  }
  *(_DWORD *)v585 = v584 + 2;
LABEL_199:
  v1203 = v585;
  v593 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncSubarray, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v595 = v1203;
  v1203 = 0;
  if (v595)
  {
    if (*(_DWORD *)v595 == 2)
    {
      WTF::StringImpl::~StringImpl(v595, v586, v587, v588, v589, v590, v591, v592);
      WTF::fastFree(v1126, v1127, v1128, v1129, v1130, v1131, v1132, v1133);
    }
    else
    {
      *(_DWORD *)v595 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v583, v593, 4, v590, v591, v592, v594);
  if (*(_DWORD *)v583 == 2)
  {
    WTF::StringImpl::~StringImpl(v583, v596, v597, v598, v599, v600, v601, v602);
    WTF::fastFree(v998, v999, v1000, v1001, v1002, v1003, v1004, v1005);
  }
  else
  {
    *(_DWORD *)v583 -= 2;
  }
LABEL_204:
  v603 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2496);
  if (v603)
  {
    *(_DWORD *)v603 += 2;
    v604 = JSC::BuiltinExecutables::typedArrayPrototypeToLocaleStringCodeExecutable(*v56);
    v605 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
    ++*((_DWORD *)v605 + 2);
    v1203 = v605;
    v1204 = xmmword_199125A50;
    v614 = JSC::UnlinkedFunctionExecutable::link(v604, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v606, COERCE_DOUBLE(0x27E4D00027D0ALL), v607, v608);
    v615 = v1203;
    v1203 = 0;
    if (v615)
    {
      if (*((_DWORD *)v615 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v615 + 8))(v615);
      else
        --*((_DWORD *)v615 + 2);
    }
    v616 = JSC::JSFunction::create((uint64_t)a2, v614, (_DWORD *)a3, v609, v610, v611, v612, v613);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v603, v616, 4, v617, v618, v619, v620);
    if (*(_DWORD *)v603 == 2)
    {
      WTF::StringImpl::~StringImpl(v603, v621, v622, v623, v624, v625, v626, v627);
      WTF::fastFree(v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013);
    }
    else
    {
      *(_DWORD *)v603 -= 2;
    }
  }
  else
  {
    v1177 = JSC::typedArrayPrototypeToLocaleStringCodeGenerator((JSC::BuiltinExecutables **)a2, v596);
    v1183 = JSC::JSFunction::create((uint64_t)a2, v1177, (_DWORD *)a3, v1178, v1179, v1180, v1181, v1182);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1183, 4, v1184, v1185, v1186, v1187);
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toReversed", 0xAuLL, v623, v624, v625, v626, v627, &v1203);
  v628 = v1203;
  if (v1203 && (*((_BYTE *)v1203 + 16) & 0x20) == 0)
  {
    v629 = v1203;
LABEL_213:
    *(_DWORD *)v629 += 2;
    goto LABEL_214;
  }
  v629 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v629)
    goto LABEL_213;
LABEL_214:
  v1203 = v629;
  v637 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncToReversed, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v639 = v1203;
  v1203 = 0;
  if (v639)
  {
    if (*(_DWORD *)v639 == 2)
    {
      WTF::StringImpl::~StringImpl(v639, v630, v631, v632, v633, v634, v635, v636);
      WTF::fastFree(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021);
    }
    else
    {
      *(_DWORD *)v639 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v628, v637, 4, v634, v635, v636, v638);
  if (v628)
  {
    if (*(_DWORD *)v628 == 2)
    {
      WTF::StringImpl::~StringImpl(v628, v640, v641, v642, v643, v644, v645, v646);
      WTF::fastFree(v1022, v1023, v1024, v1025, v1026, v1027, v1028, v1029);
    }
    else
    {
      *(_DWORD *)v628 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toSorted", 8uLL, v642, v643, v644, v645, v646, &v1203);
  v647 = v1203;
  if (v1203 && (*((_BYTE *)v1203 + 16) & 0x20) == 0)
  {
    v648 = v1203;
LABEL_223:
    *(_DWORD *)v648 += 2;
    goto LABEL_224;
  }
  v648 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v648)
    goto LABEL_223;
LABEL_224:
  v1203 = v648;
  v656 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncToSorted, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v658 = v1203;
  v1203 = 0;
  if (v658)
  {
    if (*(_DWORD *)v658 == 2)
    {
      WTF::StringImpl::~StringImpl(v658, v649, v650, v651, v652, v653, v654, v655);
      WTF::fastFree(v1030, v1031, v1032, v1033, v1034, v1035, v1036, v1037);
    }
    else
    {
      *(_DWORD *)v658 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v647, v656, 4, v653, v654, v655, v657);
  if (v647)
  {
    if (*(_DWORD *)v647 == 2)
    {
      WTF::StringImpl::~StringImpl(v647, v659, v660, v661, v662, v663, v664, v665);
      WTF::fastFree(v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
    }
    else
    {
      *(_DWORD *)v647 -= 2;
    }
  }
  v666 = *(_QWORD *)v12;
  v667 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 488);
  if (!v667)
  {
    v1203 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1203, 2, (uint64_t)JSC::typedArrayViewProtoFuncWith, 0, 0, 4u);
    goto LABEL_239;
  }
  v668 = *(_DWORD *)v667 + 2;
  *(_DWORD *)v667 = v668;
  if ((*((_BYTE *)v667 + 16) & 0x20) != 0)
  {
    v669 = *(WTF::StringImpl **)(v666 + 872);
    if (!v669)
      goto LABEL_234;
    v668 = *(_DWORD *)v669;
  }
  else
  {
    v669 = v667;
  }
  *(_DWORD *)v669 = v668 + 2;
LABEL_234:
  v1203 = v669;
  v677 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1203, (uint64_t)JSC::typedArrayViewProtoFuncWith, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v679 = v1203;
  v1203 = 0;
  if (v679)
  {
    if (*(_DWORD *)v679 == 2)
    {
      WTF::StringImpl::~StringImpl(v679, v670, v671, v672, v673, v674, v675, v676);
      WTF::fastFree(v1134, v1135, v1136, v1137, v1138, v1139, v1140, v1141);
    }
    else
    {
      *(_DWORD *)v679 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v667, v677, 4, v674, v675, v676, v678);
  if (*(_DWORD *)v667 == 2)
  {
    WTF::StringImpl::~StringImpl(v667, v680, v681, v682, v683, v684, v685, v686);
    WTF::fastFree(v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053);
  }
  else
  {
    *(_DWORD *)v667 -= 2;
  }
LABEL_239:
  v687 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 248);
  if (v687)
  {
    *(_DWORD *)v687 += 2;
    v688 = JSC::BuiltinExecutables::typedArrayPrototypeAtCodeExecutable(*v56);
    v689 = (WTF::StringImpl *)*((_QWORD *)*v56 + 1);
    ++*((_DWORD *)v689 + 2);
    v1203 = v689;
    v1204 = xmmword_199124EF0;
    v698 = JSC::UnlinkedFunctionExecutable::link(v688, (uint64_t)a2, 0, (uint64_t)&v1203, 0, 0, 0, v690, COERCE_DOUBLE(0x3BCB00003B0DLL), v691, v692);
    v699 = v1203;
    v1203 = 0;
    if (v699)
    {
      if (*((_DWORD *)v699 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v699 + 8))(v699);
      else
        --*((_DWORD *)v699 + 2);
    }
    v700 = JSC::JSFunction::create((uint64_t)a2, v698, (_DWORD *)a3, v693, v694, v695, v696, v697);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v687, v700, 4, v701, v702, v703, v704);
    if (*(_DWORD *)v687 == 2)
    {
      WTF::StringImpl::~StringImpl(v687, v705, v706, v707, v708, v709, v710, v711);
      WTF::fastFree(v1054, v1055, v1056, v1057, v1058, v1059, v1060, v1061);
    }
    else
    {
      *(_DWORD *)v687 -= 2;
    }
  }
  else
  {
    v1188 = JSC::typedArrayPrototypeAtCodeGenerator((JSC::BuiltinExecutables **)a2, v680);
    v1194 = JSC::JSFunction::create((uint64_t)a2, v1188, (_DWORD *)a3, v1189, v1190, v1191, v1192, v1193);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1194, 4, v1195, v1196, v1197, v1198);
  }
  v712 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v712 = 0x1800000002;
  *(_QWORD *)(v712 + 8) = "get [Symbol.toStringTag]";
  *(_DWORD *)(v712 + 16) = 4;
  v1203 = (WTF::StringImpl *)v712;
  v720 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1203, (uint64_t)JSC::typedArrayViewProtoGetterFuncToStringTag, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v721 = v1203;
  v1203 = 0;
  if (v721)
  {
    if (*(_DWORD *)v721 == 2)
    {
      WTF::StringImpl::~StringImpl(v721, v713, v714, v715, (uint64_t)v716, v717, v718, v719);
      WTF::fastFree(v1062, v1063, v1064, v1065, v1066, v1067, v1068, v1069);
    }
    else
    {
      *(_DWORD *)v721 -= 2;
    }
  }
  v722 = JSC::GetterSetter::create(a2, (JSC::VM *)a3, v720, 0, v716, v717, v718, v719);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v12 + 2776), v722, (const JSC::PropertyTable *)0x16, v723, v724, v725, v726);
  v727 = JSC::JSFunction::create((uint64_t)a2, a3, 0, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3024), (uint64_t)JSC::typedArrayViewProtoFuncValues, 0, 97, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3024), v727, 4, v728, v729, v730, v731);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v12 + 2712), v727, 4, v732, v733, v734, v735);
  JSC::JSGlobalObject::installTypedArrayPrototypeIteratorProtocolWatchpoint((JSC::JSGlobalObject *)a3, this, v736, v737, v738, v739, v740, v741);
}

uint64_t JSC::typedArrayViewProtoGetterFuncBuffer(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSArrayBufferView *v9;
  unsigned int v10;
  const char *v12;
  JSC *v13;
  uint64_t v14;
  JSC::VM *v15;

  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (v10 = *((unsigned __int8 *)v9 + 5), v10 <= 0x16))
  {
    v12 = "Receiver should be a typed array view but was not an object";
    v13 = this;
    v14 = 60;
    return JSC::throwTypeError((unint64_t)v13, &v15, (uint64_t)v12, v14);
  }
  else
  {
    if (v10 != 40)
    {
      switch(*((_BYTE *)v9 + 5))
      {
        case '\'':
        case ')':
        case '*':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '1':
          return JSC::JSArrayBufferView::possiblySharedJSBuffer(v9, this, (uint64_t)a3, a4, a5, a6, a7, a8);
        default:
          v12 = "Receiver should be a typed array view";
          v13 = this;
          v14 = 38;
          return JSC::throwTypeError((unint64_t)v13, &v15, (uint64_t)v12, v14);
      }
    }
    return JSC::JSArrayBufferView::possiblySharedJSBuffer(v9, this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

unint64_t JSC::typedArrayViewProtoGetterFuncByteLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  const char *v13;
  JSC *v14;
  uint64_t v15;
  double v16;
  JSC::VM *v17;

  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0 || (v10 = *(unsigned __int8 *)(v9 + 5), v10 <= 0x16))
  {
    v13 = "Receiver should be a typed array view but was not an object";
    v14 = this;
    v15 = 60;
    return JSC::throwTypeError((unint64_t)v14, &v17, (uint64_t)v13, v15);
  }
  else
  {
    if (v10 != 40)
    {
      switch(*(_BYTE *)(v9 + 5))
      {
        case '\'':
        case ')':
          v11 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::byteLength(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_5;
        case '*':
        case '+':
          v11 = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::byteLength(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_5;
        case ',':
        case '-':
        case '.':
          v11 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::byteLength(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_5;
        case '/':
        case '0':
        case '1':
          v11 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::byteLength(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_5;
        default:
          v13 = "Receiver should be a typed array view";
          v14 = this;
          v15 = 38;
          return JSC::throwTypeError((unint64_t)v14, &v17, (uint64_t)v13, v15);
      }
    }
    v11 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::byteLength(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_5:
    if (HIDWORD(v11))
    {
      v16 = (double)v11;
    }
    else
    {
      if ((v11 & 0x80000000) == 0)
        return v11 | 0xFFFE000000000000;
      v16 = (double)v11;
    }
    return *(_QWORD *)&v16 + 0x2000000000000;
  }
}

unint64_t JSC::typedArrayViewProtoGetterFuncByteOffset(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  const char *v11;
  uint64_t v12;
  double v13;
  JSC::VM *v14;
  unint64_t v15;
  char v16;

  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    v11 = "Receiver should be a typed array view but was not an object";
    v12 = 60;
    return JSC::throwTypeError((unint64_t)this, &v14, (uint64_t)v11, v12);
  }
  else
  {
    switch(*(_BYTE *)(v8 + 5))
    {
      case '\'':
      case '(':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
        if ((*(_BYTE *)(v8 + 40) & 7u) > 2
          && (LOBYTE(v15) = 0,
              v16 = 0,
              JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((JSC::JSArrayBufferView *)v8, &v15, (uint64_t)a3, a4, a5, a6, a7, a8)))
        {
          v9 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v8 + 32);
        }
        if (HIDWORD(v9))
        {
          v13 = (double)v9;
        }
        else
        {
          if ((v9 & 0x80000000) == 0)
            return v9 | 0xFFFE000000000000;
          v13 = (double)v9;
        }
        result = *(_QWORD *)&v13 + 0x2000000000000;
        break;
      default:
        v11 = "Receiver should be a typed array view";
        v12 = 38;
        return JSC::throwTypeError((unint64_t)this, &v14, (uint64_t)v11, v12);
    }
  }
  return result;
}

uint64_t JSC::typedArrayViewProtoFuncCopyWithin(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  JSC::JSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int8x16_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  size_t v53;
  const char *v54;
  JSC::VM **v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  unint64_t v65;
  JSC::JSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int8x16_t v74;
  JSC::JSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int8x16_t v83;
  JSC::JSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t v103;
  unint64_t v104;
  JSC::JSObject *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int8x16_t v113;
  JSC::JSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int8x16_t v122;
  JSC::JSObject *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int8x16_t v142;
  unint64_t v143;
  JSC::JSObject *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int8x16_t v152;
  JSC::JSObject *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int8x16_t v161;
  JSC::JSObject *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  unint64_t v178;
  char v179;
  int v180;
  unint64_t v181;
  char v182;
  int v183;
  unint64_t v184;
  char v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unint64_t v194;
  char v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE v201[8];
  char v202;

  v8 = this;
  v9 = *((_QWORD *)this + 7);
  v199 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v54 = "Receiver should be a typed array view but was not an object";
    v55 = (JSC::VM **)&v199;
    v56 = 60;
  }
  else
  {
    switch(*(_BYTE *)(v10 + 5))
    {
      case '\'':
      case '(':
      case ')':
        v200 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v175 = *(_DWORD *)(v9 + 80);
          if ((v175 & 0x27) != 0 && (v175 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          v201[0] = 0;
          v202 = 0;
          v178 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v12, v13, v14, v15, v16, v17);
          v19 = v179 ? v178 : 0;
        }
        else
        {
          v19 = *(_QWORD *)(v10 + 24);
        }
        v20 = (JSC::JSObject *)(*((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6));
        v27 = JSC::argumentClampedIndexFromStartOrEnd(v8, v20, v19, 0, v14, v15, v16, v17, v18);
        if (*(_DWORD *)(v9 + 80))
        {
          v180 = *(_DWORD *)(v9 + 80);
          if ((v180 & 0x27) != 0 && (v180 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v29 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                              ? 10
                              : *((_QWORD *)a2 + 7));
        v36 = JSC::argumentClampedIndexFromStartOrEnd(v8, v29, v19, 0, v23, v24, v25, v26, v28);
        if (*(_DWORD *)(v9 + 80))
        {
          v187 = *(_DWORD *)(v9 + 80);
          if ((v187 & 0x27) != 0 && (v187 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v30, v31, v32, v33, v34, v35);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v38 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                              ? 10
                              : *((_QWORD *)a2 + 8));
        v45 = JSC::argumentClampedIndexFromStartOrEnd(v8, v38, v19, v19, v32, v33, v34, v35, v37);
        if (*(_DWORD *)(v9 + 80))
        {
          v190 = *(_DWORD *)(v9 + 80);
          if ((v190 & 0x27) != 0 && (v190 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v39, v40, v41, v42, v43, v44);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if (v45 < v36)
          return *((_QWORD *)a2 + 5);
        v46 = v27 <= v36 ? v36 : v27;
        v47 = v45 - v36 >= v19 - v46 ? v19 - v46 : v45 - v36;
        if (!v47)
          return *((_QWORD *)a2 + 5);
        v201[0] = 0;
        v202 = 0;
        v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v39, v40, v41, v42, v43, v44);
        if (!v49)
          goto LABEL_137;
        if (v48 != v19 && v47 + v46 > v48)
        {
          v47 = v48 - v46;
          if (v48 < v46)
            return *((_QWORD *)a2 + 5);
        }
        v50 = *(_QWORD *)(v10 + 16);
        if (v50 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v50 = (v50 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v51 = (void *)(v50 + v27);
        v52 = (const void *)(v50 + v36);
        v53 = v47;
        goto LABEL_122;
      case '*':
      case '+':
        v200 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v193 = *(_DWORD *)(v9 + 80);
          if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v136, v137, v138, v139, v140, v141);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          v201[0] = 0;
          v202 = 0;
          v194 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v136, v137, v138, v139, v140, v141);
          v143 = v195 ? v194 : 0;
        }
        else
        {
          v143 = *(_QWORD *)(v10 + 24);
        }
        v144 = (JSC::JSObject *)(*((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6));
        v151 = JSC::argumentClampedIndexFromStartOrEnd(v8, v144, v143, 0, v138, v139, v140, v141, v142);
        if (*(_DWORD *)(v9 + 80))
        {
          v196 = *(_DWORD *)(v9 + 80);
          if ((v196 & 0x27) != 0 && (v196 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v145, v146, v147, v148, v149, v150);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v153 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                               ? 10
                               : *((_QWORD *)a2 + 7));
        v160 = JSC::argumentClampedIndexFromStartOrEnd(v8, v153, v143, 0, v147, v148, v149, v150, v152);
        if (*(_DWORD *)(v9 + 80))
        {
          v197 = *(_DWORD *)(v9 + 80);
          if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v154, v155, v156, v157, v158, v159);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v162 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                               ? 10
                               : *((_QWORD *)a2 + 8));
        v169 = JSC::argumentClampedIndexFromStartOrEnd(v8, v162, v143, v143, v156, v157, v158, v159, v161);
        if (*(_DWORD *)(v9 + 80))
        {
          v198 = *(_DWORD *)(v9 + 80);
          if ((v198 & 0x27) != 0 && (v198 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v163, v164, v165, v166, v167, v168);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if (v169 < v160)
          return *((_QWORD *)a2 + 5);
        v170 = v151 <= v160 ? v160 : v151;
        v171 = v169 - v160 >= v143 - v170 ? v143 - v170 : v169 - v160;
        if (!v171)
          return *((_QWORD *)a2 + 5);
        v201[0] = 0;
        v202 = 0;
        v172 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v163, v164, v165, v166, v167, v168);
        if (!v173)
          goto LABEL_137;
        if (v172 != v143 && v171 + v170 > v172)
        {
          v171 = v172 - v170;
          if (v172 < v170)
            return *((_QWORD *)a2 + 5);
        }
        v174 = *(_QWORD *)(v10 + 16);
        if (v174 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v174 = (v174 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v51 = (void *)(v174 + 2 * v151);
        v53 = 2 * v171;
        v52 = (const void *)(v174 + 2 * v160);
        goto LABEL_122;
      case ',':
      case '-':
      case '.':
        v200 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v177 = *(_DWORD *)(v9 + 80);
          if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v97, v98, v99, v100, v101, v102);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          v201[0] = 0;
          v202 = 0;
          v184 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v97, v98, v99, v100, v101, v102);
          v104 = v185 ? v184 : 0;
        }
        else
        {
          v104 = *(_QWORD *)(v10 + 24);
        }
        v105 = (JSC::JSObject *)(*((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6));
        v112 = JSC::argumentClampedIndexFromStartOrEnd(v8, v105, v104, 0, v99, v100, v101, v102, v103);
        if (*(_DWORD *)(v9 + 80))
        {
          v186 = *(_DWORD *)(v9 + 80);
          if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v106, v107, v108, v109, v110, v111);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v114 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                               ? 10
                               : *((_QWORD *)a2 + 7));
        v121 = JSC::argumentClampedIndexFromStartOrEnd(v8, v114, v104, 0, v108, v109, v110, v111, v113);
        if (*(_DWORD *)(v9 + 80))
        {
          v189 = *(_DWORD *)(v9 + 80);
          if ((v189 & 0x27) != 0 && (v189 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v115, v116, v117, v118, v119, v120);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v123 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                               ? 10
                               : *((_QWORD *)a2 + 8));
        v130 = JSC::argumentClampedIndexFromStartOrEnd(v8, v123, v104, v104, v117, v118, v119, v120, v122);
        if (*(_DWORD *)(v9 + 80))
        {
          v192 = *(_DWORD *)(v9 + 80);
          if ((v192 & 0x27) != 0 && (v192 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v124, v125, v126, v127, v128, v129);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if (v130 < v121)
          return *((_QWORD *)a2 + 5);
        v131 = v112 <= v121 ? v121 : v112;
        v132 = v130 - v121 >= v104 - v131 ? v104 - v131 : v130 - v121;
        if (!v132)
          return *((_QWORD *)a2 + 5);
        v201[0] = 0;
        v202 = 0;
        v133 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v124, v125, v126, v127, v128, v129);
        if (!v134)
          goto LABEL_137;
        if (v133 != v104 && v132 + v131 > v133)
        {
          v132 = v133 - v131;
          if (v133 < v131)
            return *((_QWORD *)a2 + 5);
        }
        v135 = *(_QWORD *)(v10 + 16);
        if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v51 = (void *)(v135 + 4 * v112);
        v53 = 4 * v132;
        v52 = (const void *)(v135 + 4 * v121);
        goto LABEL_122;
      case '/':
      case '0':
      case '1':
        v200 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v176 = *(_DWORD *)(v9 + 80);
          if ((v176 & 0x27) != 0 && (v176 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v58, v59, v60, v61, v62, v63);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          v201[0] = 0;
          v202 = 0;
          v181 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v58, v59, v60, v61, v62, v63);
          v65 = v182 ? v181 : 0;
        }
        else
        {
          v65 = *(_QWORD *)(v10 + 24);
        }
        v66 = (JSC::JSObject *)(*((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6));
        v73 = JSC::argumentClampedIndexFromStartOrEnd(v8, v66, v65, 0, v60, v61, v62, v63, v64);
        if (*(_DWORD *)(v9 + 80))
        {
          v183 = *(_DWORD *)(v9 + 80);
          if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v67, v68, v69, v70, v71, v72);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v75 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                              ? 10
                              : *((_QWORD *)a2 + 7));
        v82 = JSC::argumentClampedIndexFromStartOrEnd(v8, v75, v65, 0, v69, v70, v71, v72, v74);
        if (*(_DWORD *)(v9 + 80))
        {
          v188 = *(_DWORD *)(v9 + 80);
          if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v76, v77, v78, v79, v80, v81);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v84 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                              ? 10
                              : *((_QWORD *)a2 + 8));
        v91 = JSC::argumentClampedIndexFromStartOrEnd(v8, v84, v65, v65, v78, v79, v80, v81, v83);
        if (*(_DWORD *)(v9 + 80))
        {
          v191 = *(_DWORD *)(v9 + 80);
          if ((v191 & 0x27) != 0 && (v191 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v85, v86, v87, v88, v89, v90);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if (v91 < v82)
          return *((_QWORD *)a2 + 5);
        v92 = v73 <= v82 ? v82 : v73;
        v93 = v91 - v82 >= v65 - v92 ? v65 - v92 : v91 - v82;
        if (!v93)
          return *((_QWORD *)a2 + 5);
        v201[0] = 0;
        v202 = 0;
        v94 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v201, v85, v86, v87, v88, v89, v90);
        if (v95)
        {
          if (v94 == v65 || v93 + v92 <= v94 || (v93 = v94 - v92, v94 >= v92))
          {
            v96 = *(_QWORD *)(v10 + 16);
            if (v96 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v96 = (v96 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v51 = (void *)(v96 + 8 * v73);
            v53 = 8 * v93;
            v52 = (const void *)(v96 + 8 * v82);
LABEL_122:
            memmove(v51, v52, v53);
          }
          return *((_QWORD *)a2 + 5);
        }
LABEL_137:
        v54 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v55 = (JSC::VM **)&v200;
        this = v8;
        v56 = 72;
        break;
      default:
        v54 = "Receiver should be a typed array view";
        v55 = (JSC::VM **)&v199;
        v56 = 38;
        return JSC::throwTypeError((unint64_t)this, v55, (uint64_t)v54, v56);
    }
  }
  return JSC::throwTypeError((unint64_t)this, v55, (uint64_t)v54, v56);
}

JSC::JSArrayBufferView *JSC::typedArrayViewProtoFuncSort(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::JSArrayBufferView *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  JSC::VM **v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  JSC::MarkedVectorBase *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::MarkedVectorBase *v64;
  uint64_t v65;
  JSC::MarkedVectorBase *v66;
  JSC::MarkedVectorBase *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::MarkedVectorBase *v92;
  JSC *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(void);
  unsigned int v106;
  uint64_t v107;
  uint64_t (*v108)(void);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  JSC::JSFunction *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(void);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  JSC::JSFunction *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  JSC::JSFunction *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::JSFunction *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  JSC::JSFunction *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::JSFunction *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  JSC::JSFunction *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  JSC::JSFunction *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  JSC::JSFunction *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  JSC::JSFunction *v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  _DWORD *v203;
  unint64_t v204;
  unint64_t v205;
  JSC::MarkedVectorBase *v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  _DWORD *v210;
  unint64_t v211;
  _DWORD *v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  int v217;
  JSC::JSGlobalObject *v218;
  unint64_t v219;
  int8x16_t v220;
  uint64_t v221;
  uint64_t v222;
  BOOL v223;
  uint64_t v224;
  JSC *v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  size_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  size_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int8x16_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  char *v260;
  unint64_t m;
  float v262;
  uint64_t v263;
  unint64_t v264;
  float v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _BOOL4 v270;
  unint64_t v271;
  float v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  JSC::JSBigInt *v305;
  JSC::JSGlobalObject *v306;
  uint64_t v307;
  uint64_t v308;
  JSC::JSGlobalObject *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int8x16_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int8x16_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  char *v332;
  unint64_t i;
  unsigned int v334;
  unint64_t v335;
  unsigned int v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  _BOOL4 v340;
  unint64_t v341;
  unsigned int v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int8x16_t v354;
  size_t v355;
  size_t v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int8x16_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  char *v379;
  unint64_t j;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  _BOOL4 v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int8x16_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  char *v406;
  unint64_t k;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  _BOOL4 v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int8x16_t v428;
  size_t v429;
  size_t v430;
  char *v431;
  unint64_t v432;
  char v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unsigned int v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int8x16_t v449;
  size_t v450;
  JSC::VM *v451;
  size_t v452;
  char *v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  JSC::JSBigInt *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  int8x16_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int8x16_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  char *v503;
  unint64_t n;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  _BOOL4 v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  void *v520;
  unint64_t v521;
  uint64_t v522;
  JSC::MarkedVectorBase *v523;
  JSC::MarkedVectorBase *v524;
  unint64_t v525;
  unint64_t v526;
  JSC::MarkedVectorBase *v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  _DWORD *v538;
  unint64_t v539;
  unint64_t v540;
  float *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t (*v557)(void);
  BOOL v558;
  uint64_t v559;
  JSC::MarkedVectorBase *v560;
  JSC::MarkedVectorBase *v561;
  unint64_t v562;
  JSC::VM *v563;
  unint64_t v564;
  JSC::MarkedVectorBase *v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  _WORD *v576;
  unint64_t v577;
  unint64_t v578;
  __int16 *v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t (*v595)(void);
  uint64_t v596;
  JSC::MarkedVectorBase *v597;
  JSC::MarkedVectorBase *v598;
  unint64_t v599;
  unint64_t v600;
  JSC::MarkedVectorBase *v601;
  unint64_t v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  _WORD *v612;
  unint64_t v613;
  unint64_t v614;
  _WORD *v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t (*v631)(void);
  uint64_t v632;
  JSC::MarkedVectorBase *v633;
  JSC::MarkedVectorBase *v634;
  JSC::VM *v635;
  unint64_t v636;
  unint64_t v637;
  JSC::MarkedVectorBase *v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t v642;
  unint64_t v643;
  unint64_t v644;
  uint64_t v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  _DWORD *v649;
  unint64_t v650;
  unint64_t v651;
  char *v652;
  unint64_t v653;
  unint64_t v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t (*v668)(void);
  uint64_t v669;
  JSC::MarkedVectorBase *v670;
  JSC::MarkedVectorBase *v671;
  unint64_t v672;
  unint64_t v673;
  JSC::MarkedVectorBase *v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  _QWORD *v685;
  unint64_t v686;
  unint64_t v687;
  _QWORD *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t (*v704)(void);
  uint64_t v705;
  JSC::MarkedVectorBase *v706;
  JSC::MarkedVectorBase *v707;
  size_t v708;
  size_t v709;
  JSC::MarkedVectorBase *v710;
  unint64_t v711;
  size_t v712;
  size_t v713;
  size_t v714;
  unint64_t v715;
  unint64_t v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  char *v720;
  size_t v721;
  size_t v722;
  _BYTE *v723;
  unint64_t v724;
  unint64_t v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t (*v739)(void);
  uint64_t v740;
  JSC::MarkedVectorBase *v741;
  JSC::MarkedVectorBase *v742;
  size_t v743;
  JSC::VM *v744;
  size_t v745;
  JSC::MarkedVectorBase *v746;
  unint64_t v747;
  size_t v748;
  size_t v749;
  size_t v750;
  unint64_t v751;
  unint64_t v752;
  uint64_t v753;
  unint64_t v754;
  unint64_t v755;
  char *v756;
  size_t v757;
  size_t v758;
  _BYTE *v759;
  unint64_t v760;
  unint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t (*v775)(void);
  uint64_t v776;
  JSC::MarkedVectorBase *v777;
  JSC::MarkedVectorBase *v778;
  JSC::VM *v779;
  size_t v780;
  size_t v781;
  JSC::MarkedVectorBase *v782;
  unint64_t v783;
  size_t v784;
  size_t v785;
  size_t v786;
  unint64_t v787;
  unint64_t v788;
  uint64_t v789;
  unint64_t v790;
  unint64_t v791;
  char *v792;
  size_t v793;
  size_t v794;
  char *v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t (*v811)(void);
  JSC::MarkedVectorBase *v812;
  unint64_t v813;
  JSC::VM *v814;
  JSC::MarkedVectorBase *v815;
  JSC::MarkedVectorBase *v816;
  JSC::MarkedVectorBase *v817;
  JSC::MarkedVectorBase *v818;
  unsigned int *v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  int v824;
  JSC::JSGlobalObject *v825;
  int v826;
  unint64_t v827;
  int8x16_t v828;
  uint64_t v829;
  unint64_t v830;
  JSC::MarkedVectorBase *v831;
  unint64_t v832;
  unint64_t v833;
  _DWORD *v834;
  uint64_t v835;
  uint64_t v836;
  unint64_t v837;
  uint64_t v838;
  int v839;
  int v840;
  JSC::JSGlobalObject *v841;
  unint64_t v842;
  int8x16_t v843;
  uint64_t v844;
  uint64_t v845;
  _DWORD *v846;
  uint64_t v847;
  JSC::MarkedVectorBase *v848;
  JSC::MarkedVectorBase *v849;
  void *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  unint64_t v858;
  JSC::MarkedVectorBase *v859;
  unint64_t v860;
  unint64_t v861;
  JSC::MarkedVectorBase *v862;
  JSC::MarkedVectorBase *v863;
  unint64_t v864;
  JSC::MarkedVectorBase *v865;
  unint64_t v866;
  unint64_t v867;
  JSC::MarkedVectorBase *v868;
  unint64_t v869;
  size_t v870;
  JSC::MarkedVectorBase *v871;
  unint64_t v872;
  JSC::MarkedVectorBase *v873;
  _BYTE *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t (*v884)(void);
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t (*v894)(void);
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t (*v904)(void);
  JSC::MarkedVectorBase *v905;
  unint64_t v906;
  JSC::MarkedVectorBase *v907;
  unint64_t v908;
  uint64_t v909;
  unint64_t v910;
  JSC::JSBigInt *v911;
  JSC::VM *v912;
  JSC::MarkedVectorBase *v913;
  unint64_t v914;
  unint64_t v915;
  JSC::JSGlobalObject **v916;
  JSC::JSGlobalObject *v917;
  JSC::JSBigInt *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  int8x16_t v922;
  uint64_t v923;
  uint64_t v924;
  unint64_t v925;
  unint64_t v926;
  unint64_t v927;
  _QWORD *v928;
  unint64_t v929;
  unint64_t v930;
  unint64_t v931;
  JSC::JSGlobalObject **v932;
  JSC::JSGlobalObject *v933;
  JSC::JSBigInt *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  int8x16_t v938;
  uint64_t v939;
  uint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  JSC::MarkedVectorBase *v944;
  unint64_t v945;
  JSC::MarkedVectorBase *v946;
  unint64_t v947;
  uint64_t v948;
  unint64_t v949;
  JSC::JSBigInt *v950;
  JSC::VM *v951;
  JSC::MarkedVectorBase *v952;
  unint64_t v953;
  unint64_t v954;
  uint64_t *v955;
  uint64_t v956;
  JSC::JSBigInt *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  int8x16_t v961;
  uint64_t v962;
  uint64_t v963;
  unint64_t v964;
  unint64_t v965;
  _QWORD *v966;
  unint64_t v967;
  unint64_t v968;
  unint64_t v969;
  unint64_t v970;
  uint64_t *v971;
  uint64_t v972;
  JSC::JSBigInt *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  int8x16_t v977;
  uint64_t v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t (*v992)(void);
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t (*v1002)(void);
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t (*v1012)(void);
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t (*v1022)(void);
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t (*v1032)(void);
  unsigned int *v1033;
  int v1034;
  unsigned int v1035;
  int v1036;
  unsigned int v1037;
  JSC::MarkedVectorBase *v1038;
  unint64_t v1039;
  unint64_t v1040;
  JSC::MarkedVectorBase *v1041;
  unint64_t v1042;
  double v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t (*v1053)(void);
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t (*v1063)(void);
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t (*v1073)(void);
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t (*v1083)(void);
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t (*v1093)(void);
  BOOL hasExceptionsAfterHandlingTraps;
  unsigned int *v1095;
  int v1096;
  unsigned int v1097;
  int v1098;
  unsigned int v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t (*v1109)(void);
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t (*v1119)(void);
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t (*v1129)(void);
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t (*v1139)(void);
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t (*v1149)(void);
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t (*v1159)(void);
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t (*v1169)(void);
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t (*v1179)(void);
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t (*v1189)(void);
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t (*v1199)(void);
  double v1200;
  double v1201;
  unsigned int *v1202;
  int v1203;
  unsigned int v1204;
  int v1205;
  unsigned int v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t (*v1216)(void);
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t (*v1226)(void);
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t (*v1236)(void);
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t (*v1246)(void);
  double v1247;
  double v1248;
  double v1249;
  double v1250;
  double v1251;
  double v1252;
  unint64_t v1253;
  unint64_t v1254;
  char *v1255;
  float *v1256;
  unint64_t v1257;
  float v1258;
  float *v1259;
  unint64_t v1260;
  float v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  unint64_t v1271;
  int8x16_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  unint64_t v1276;
  unint64_t v1277;
  JSC::JSGlobalObject **v1278;
  unint64_t v1279;
  JSC::JSGlobalObject *v1280;
  JSC::JSGlobalObject **v1281;
  unint64_t v1282;
  JSC::JSGlobalObject **v1283;
  JSC::JSGlobalObject *v1284;
  JSC::JSGlobalObject *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  int8x16_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  unint64_t v1305;
  _WORD *v1306;
  unint64_t v1307;
  __int16 v1308;
  _WORD *v1309;
  unint64_t v1310;
  _WORD *v1311;
  unsigned int v1312;
  unsigned int v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  int8x16_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  size_t v1328;
  size_t v1329;
  unint64_t v1330;
  char *v1331;
  JSC::MarkedVectorBase *v1332;
  unint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  int8x16_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  unint64_t v1351;
  unint64_t v1352;
  _WORD *v1353;
  unint64_t v1354;
  uint64_t v1355;
  _WORD *v1356;
  unint64_t v1357;
  _WORD *v1358;
  uint64_t v1359;
  unsigned int v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  int8x16_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  unint64_t v1375;
  unint64_t v1376;
  _DWORD *v1377;
  unint64_t v1378;
  uint64_t v1379;
  _DWORD *v1380;
  unint64_t v1381;
  _DWORD *v1382;
  uint64_t v1383;
  unsigned int v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  int8x16_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  size_t v1399;
  size_t v1400;
  unint64_t v1401;
  char *v1402;
  JSC::MarkedVectorBase *v1403;
  unint64_t v1404;
  uint64_t v1405;
  char v1406;
  unsigned int v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  int8x16_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  size_t v1422;
  size_t v1423;
  unint64_t v1424;
  char *v1425;
  JSC::MarkedVectorBase *v1426;
  unint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  int8x16_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  unint64_t v1445;
  unint64_t v1446;
  uint64_t *v1447;
  unint64_t v1448;
  uint64_t v1449;
  uint64_t *v1450;
  unint64_t v1451;
  uint64_t *v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  unint64_t v1468;
  int8x16_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  unint64_t v1473;
  unint64_t v1474;
  char *v1475;
  _QWORD *v1476;
  unint64_t v1477;
  uint64_t v1478;
  _QWORD *v1479;
  unint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  int8x16_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  unsigned int *v1496;
  int v1497;
  unsigned int v1498;
  int v1499;
  unsigned int v1500;
  unsigned int *v1501;
  int v1502;
  unsigned int v1503;
  int v1504;
  unsigned int v1505;
  unsigned int *v1506;
  int v1507;
  unsigned int v1508;
  int v1509;
  unsigned int v1510;
  JSC::MarkedVectorBase *v1511;
  unint64_t v1512;
  unint64_t v1513;
  unint64_t v1514;
  float *v1515;
  float v1516;
  float v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  unint64_t v1528;
  int8x16_t v1529;
  uint64_t v1530;
  unint64_t v1531;
  unint64_t v1532;
  unint64_t v1533;
  float *v1534;
  float v1535;
  float v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  int8x16_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  unint64_t v1551;
  _DWORD *v1552;
  JSC::MarkedVectorBase *v1553;
  unint64_t v1554;
  unint64_t v1555;
  unint64_t v1556;
  JSC::JSGlobalObject **v1557;
  JSC::JSGlobalObject *v1558;
  JSC::JSGlobalObject *v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  unint64_t v1573;
  int8x16_t v1574;
  uint64_t v1575;
  unint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  JSC::JSGlobalObject **v1579;
  JSC::JSGlobalObject *v1580;
  JSC::JSGlobalObject *v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  unint64_t v1595;
  int8x16_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  _QWORD *v1600;
  JSC::MarkedVectorBase *v1601;
  unint64_t v1602;
  unint64_t v1603;
  unint64_t v1604;
  __int16 *v1605;
  unsigned int v1606;
  unsigned int v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  unint64_t v1617;
  int8x16_t v1618;
  uint64_t v1619;
  unint64_t v1620;
  unint64_t v1621;
  unint64_t v1622;
  __int16 *v1623;
  unsigned int v1624;
  unsigned int v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  int8x16_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  unint64_t v1639;
  _WORD *v1640;
  JSC::MarkedVectorBase *v1641;
  size_t v1642;
  size_t v1643;
  size_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  unint64_t v1656;
  int8x16_t v1657;
  uint64_t v1658;
  size_t v1659;
  size_t v1660;
  size_t v1661;
  _BYTE *v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  int8x16_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  char *v1678;
  JSC::MarkedVectorBase *v1679;
  unint64_t v1680;
  unint64_t v1681;
  unint64_t v1682;
  unsigned __int16 *v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  unint64_t v1695;
  int8x16_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  unint64_t v1699;
  unint64_t v1700;
  _WORD *v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  unint64_t v1713;
  int8x16_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  unint64_t v1717;
  _WORD *v1718;
  JSC::MarkedVectorBase *v1719;
  unint64_t v1720;
  unint64_t v1721;
  unint64_t v1722;
  char *v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  unint64_t v1735;
  int8x16_t v1736;
  uint64_t v1737;
  unint64_t v1738;
  unint64_t v1739;
  unint64_t v1740;
  char *v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  unint64_t v1753;
  int8x16_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  unint64_t v1757;
  _DWORD *v1758;
  JSC::MarkedVectorBase *v1759;
  size_t v1760;
  size_t v1761;
  size_t v1762;
  unsigned int v1763;
  unsigned int v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  unint64_t v1774;
  int8x16_t v1775;
  uint64_t v1776;
  size_t v1777;
  size_t v1778;
  size_t v1779;
  _BYTE *v1780;
  unsigned int v1781;
  unsigned int v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  unint64_t v1792;
  int8x16_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  char *v1796;
  JSC::MarkedVectorBase *v1797;
  size_t v1798;
  size_t v1799;
  size_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  unint64_t v1812;
  int8x16_t v1813;
  uint64_t v1814;
  size_t v1815;
  size_t v1816;
  size_t v1817;
  char *v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  unint64_t v1830;
  int8x16_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  char *v1834;
  JSC::MarkedVectorBase *v1835;
  unint64_t v1836;
  unint64_t v1837;
  unint64_t v1838;
  uint64_t *v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  unint64_t v1855;
  int8x16_t v1856;
  uint64_t v1857;
  unint64_t v1858;
  unint64_t v1859;
  unint64_t v1860;
  uint64_t *v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  unint64_t v1877;
  int8x16_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  _QWORD *v1881;
  unint64_t v1882;
  JSC::MarkedVectorBase *v1883;
  JSC::MarkedVectorBase *v1884;
  unint64_t v1885;
  unint64_t v1886;
  unint64_t v1887;
  double *v1888;
  double v1889;
  uint64_t v1890;
  double v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  unint64_t v1901;
  int8x16_t v1902;
  uint64_t v1903;
  unint64_t v1904;
  unint64_t v1905;
  unint64_t v1906;
  double *v1907;
  double v1908;
  uint64_t v1909;
  double v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  unint64_t v1920;
  int8x16_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  unint64_t v1924;
  _QWORD *v1925;
  unsigned int *v1926;
  int v1927;
  unsigned int v1928;
  int v1929;
  unsigned int v1930;
  unsigned int *v1931;
  int v1932;
  unsigned int v1933;
  int v1934;
  unsigned int v1935;
  unsigned int *v1936;
  int v1937;
  unsigned int v1938;
  int v1939;
  unsigned int v1940;
  unsigned int *v1941;
  int v1942;
  unsigned int v1943;
  int v1944;
  unsigned int v1945;
  unsigned int *v1946;
  int v1947;
  unsigned int v1948;
  int v1949;
  unsigned int v1950;
  unsigned int *v1951;
  int v1952;
  unsigned int v1953;
  int v1954;
  unsigned int v1955;
  unsigned int *v1956;
  int v1957;
  unsigned int v1958;
  int v1959;
  unsigned int v1960;
  unsigned int *v1961;
  int v1962;
  unsigned int v1963;
  int v1964;
  unsigned int v1965;
  unsigned int *v1966;
  int v1967;
  unsigned int v1968;
  int v1969;
  unsigned int v1970;
  unsigned int *v1971;
  int v1972;
  unsigned int v1973;
  int v1974;
  unsigned int v1975;
  unsigned int *v1976;
  int v1977;
  unsigned int v1978;
  int v1979;
  unsigned int v1980;
  unsigned int *v1981;
  int v1982;
  unsigned int v1983;
  int v1984;
  unsigned int v1985;
  unsigned int *v1986;
  int v1987;
  unsigned int v1988;
  int v1989;
  unsigned int v1990;
  JSC::MarkedVectorBase *v1991;
  JSC::MarkedVectorBase *v1992;
  JSC::MarkedVectorBase *v1993;
  JSC::MarkedVectorBase *v1994;
  JSC::MarkedVectorBase *v1995;
  JSC::MarkedVectorBase *v1996;
  JSC::MarkedVectorBase *v1997;
  JSC::MarkedVectorBase *v1998;
  JSC::MarkedVectorBase *v1999;
  JSC::MarkedVectorBase *v2000;
  unsigned int *v2001;
  int v2002;
  unsigned int v2003;
  int v2004;
  unsigned int v2005;
  unsigned int *v2006;
  int v2007;
  unsigned int v2008;
  int v2009;
  unsigned int v2010;
  unsigned int *v2011;
  int v2012;
  unsigned int v2013;
  int v2014;
  unsigned int v2015;
  unsigned int *v2016;
  int v2017;
  unsigned int v2018;
  int v2019;
  unsigned int v2020;
  unsigned int *v2021;
  int v2022;
  unsigned int v2023;
  int v2024;
  unsigned int v2025;
  unsigned int *v2026;
  int v2027;
  unsigned int v2028;
  int v2029;
  unsigned int v2030;
  unsigned int *v2031;
  int v2032;
  unsigned int v2033;
  int v2034;
  unsigned int v2035;
  unsigned int *v2036;
  int v2037;
  unsigned int v2038;
  int v2039;
  unsigned int v2040;
  unsigned int *v2041;
  int v2042;
  unsigned int v2043;
  int v2044;
  unsigned int v2045;
  unsigned int *v2046;
  int v2047;
  unsigned int v2048;
  int v2049;
  unsigned int v2050;
  unsigned int *v2051;
  int v2052;
  unsigned int v2053;
  int v2054;
  unsigned int v2055;
  unsigned int *v2056;
  int v2057;
  unsigned int v2058;
  int v2059;
  unsigned int v2060;
  unsigned int *v2061;
  int v2062;
  unsigned int v2063;
  int v2064;
  unsigned int v2065;
  unsigned int *v2066;
  int v2067;
  unsigned int v2068;
  int v2069;
  unsigned int v2070;
  unsigned int *v2071;
  int v2072;
  unsigned int v2073;
  int v2074;
  unsigned int v2075;
  double v2076;
  double v2077;
  double v2078;
  double v2079;
  double v2080;
  double v2081;
  double v2082;
  double v2083;
  double v2084;
  double v2085;
  unsigned int *v2086;
  int v2087;
  unsigned int v2088;
  int v2089;
  unsigned int v2090;
  unsigned int *v2091;
  int v2092;
  unsigned int v2093;
  int v2094;
  unsigned int v2095;
  unsigned int *v2096;
  int v2097;
  unsigned int v2098;
  int v2099;
  unsigned int v2100;
  unsigned int *v2101;
  int v2102;
  unsigned int v2103;
  int v2104;
  unsigned int v2105;
  double v2106;
  double v2107;
  double v2108;
  double v2109;
  double v2110;
  double v2111;
  double v2112;
  double v2113;
  double v2114;
  double v2115;
  double v2116;
  double v2117;
  double v2118;
  double v2119;
  double v2120;
  double v2121;
  double v2122;
  double v2123;
  double v2124;
  double v2125;
  uint64_t v2126;
  uint64_t v2127;
  unint64_t v2128;
  uint64_t v2129;
  unint64_t v2130;
  uint64_t v2131;
  _DWORD *v2132;
  JSC::MarkedVectorBase *v2133;
  JSC::MarkedVectorBase *v2134;
  JSC::MarkedVectorBase *v2135;
  JSC::MarkedVectorBase *v2136;
  JSC::MarkedVectorBase *v2137;
  JSC::MarkedVectorBase *v2138;
  JSC::MarkedVectorBase *v2139;
  JSC::MarkedVectorBase *v2140;
  JSC::MarkedVectorBase *v2141;
  JSC::MarkedVectorBase *v2142;
  JSC::MarkedVectorBase *v2143;
  JSC::MarkedVectorBase *v2144;
  _DWORD *v2145;
  JSC::MarkedVectorBase *v2146;
  uint64_t __src;
  uint64_t __srca;
  JSC *v2149;
  JSC *v2150;
  JSC::JSArrayBufferView *v2151;
  JSC::MarkedVectorBase *v2152;
  JSC::MarkedVectorBase *v2153;
  JSC::MarkedVectorBase *v2154;
  unint64_t v2155;
  size_t v2156;
  JSC::MarkedVectorBase *v2157;
  JSC::MarkedVectorBase *v2158;
  JSC::MarkedVectorBase *v2159;
  JSC::MarkedVectorBase *v2160;
  JSC::MarkedVectorBase *v2161;
  JSC::MarkedVectorBase *v2162;
  uint64_t v2163;
  uint64_t v2164;
  unint64_t v2165;
  unint64_t v2166;
  JSC::MarkedVectorBase *v2167;
  unint64_t v2168;
  unint64_t v2169;
  size_t v2170;
  unint64_t v2171;
  unint64_t v2172;
  unint64_t v2173;
  unint64_t v2174;
  JSC::MarkedVectorBase *v2175;
  JSC::MarkedVectorBase *v2176;
  JSC::MarkedVectorBase *v2177;
  unint64_t v2178;
  JSC::MarkedVectorBase *v2179;
  unint64_t v2180;
  JSC::MarkedVectorBase *v2181;
  size_t v2182;
  JSC::MarkedVectorBase *v2183;
  JSC::MarkedVectorBase *v2184;
  JSC::MarkedVectorBase *v2185;
  JSC::MarkedVectorBase *v2186;
  JSC::MarkedVectorBase *v2187;
  JSC::MarkedVectorBase *v2188;
  JSC::MarkedVectorBase *v2189;
  JSC::MarkedVectorBase *v2190;
  JSC::MarkedVectorBase *v2191;
  JSC::MarkedVectorBase *v2192;
  JSC::MarkedVectorBase *v2193;
  JSC::MarkedVectorBase *v2194;
  JSC::MarkedVectorBase *v2195;
  JSC::MarkedVectorBase *v2196;
  JSC::MarkedVectorBase *v2197;
  unint64_t v2198;
  uint64_t v2199;
  unint64_t v2200;
  unint64_t v2201;
  unint64_t v2202;
  unint64_t v2203;
  unint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  unint64_t v2207;
  unint64_t v2208;
  JSC::MarkedVectorBase *v2209;
  JSC::MarkedVectorBase *v2210;
  JSC::MarkedVectorBase *v2211;
  JSC::MarkedVectorBase *v2212;
  JSC::MarkedVectorBase *v2213;
  JSC::MarkedVectorBase *v2214;
  JSC::MarkedVectorBase *v2215;
  JSC::MarkedVectorBase *v2216;
  JSC::MarkedVectorBase *v2217;
  unint64_t v2218;
  JSC::MarkedVectorBase *v2219;
  unint64_t v2220;
  JSC::JSGlobalObject **v2221;
  char *v2222;
  char *v2223;
  char *v2224;
  uint64_t *v2225;
  unint64_t v2226;
  uint64_t v2227;
  unint64_t v2228;
  uint64_t v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  unint64_t v2235;
  unint64_t v2236;
  uint64_t v2237;
  unint64_t v2238;
  JSC::MarkedVectorBase *v2239;
  uint64_t v2240;
  unint64_t v2241;
  unint64_t v2242;
  size_t v2243;
  unint64_t v2244;
  unint64_t v2245;
  size_t v2246;
  size_t v2247;
  unint64_t v2248;
  JSC::MarkedVectorBase *v2249;
  JSC::MarkedVectorBase *v2250;
  JSC::MarkedVectorBase *v2251;
  JSC::MarkedVectorBase *v2252;
  JSC::MarkedVectorBase *v2253;
  JSC::MarkedVectorBase *v2254;
  JSC::MarkedVectorBase *v2255;
  JSC::MarkedVectorBase *v2256;
  unint64_t v2257;
  JSC::MarkedVectorBase *v2258;
  unint64_t v2259;
  float *v2260;
  unint64_t v2261;
  unint64_t v2262;
  size_t v2263;
  unint64_t v2264;
  unint64_t v2265;
  size_t v2266;
  size_t v2267;
  unint64_t v2268;
  char *v2269;
  JSC::MarkedVectorBase *v2270;
  JSC::MarkedVectorBase *v2271;
  JSC::MarkedVectorBase *v2272;
  JSC::MarkedVectorBase *v2273;
  JSC::MarkedVectorBase *v2274;
  JSC::MarkedVectorBase *v2275;
  JSC::MarkedVectorBase *v2276;
  JSC::MarkedVectorBase *v2277;
  JSC::MarkedVectorBase *v2278;
  uint64_t v2279;
  unint64_t v2280;
  unint64_t v2281;
  unint64_t v2282;
  unint64_t v2283;
  unint64_t v2284;
  unint64_t v2285;
  unint64_t v2286;
  unint64_t v2287;
  unint64_t v2288;
  unint64_t v2289;
  unint64_t v2290;
  unint64_t v2291;
  unint64_t v2292;
  unint64_t v2293;
  unint64_t v2294;
  unint64_t v2295;
  unint64_t v2296;
  size_t v2297;
  size_t v2298;
  size_t v2299;
  unint64_t v2300;
  unint64_t v2301;
  unint64_t v2302;
  _QWORD *v2303;
  char *v2304;
  JSC::MarkedVectorBase *v2305;
  char *v2306;
  char *v2307;
  JSC::MarkedVectorBase *v2308;
  JSC::MarkedVectorBase *v2309;
  _QWORD *v2310;
  unint64_t v2311;
  JSC::MarkedVectorBase *v2312;
  JSC::MarkedVectorBase *v2313;
  JSC::MarkedVectorBase *v2314;
  JSC::MarkedVectorBase *v2315;
  JSC::MarkedVectorBase *v2316;
  JSC::MarkedVectorBase *v2317;
  JSC::MarkedVectorBase *v2318;
  JSC::MarkedVectorBase *v2319;
  JSC::MarkedVectorBase *v2320;
  JSC::MarkedVectorBase *v2321;
  JSC::VM *v2322;
  JSC::VM *v2323;
  uint64_t v2324;
  JSC::VM *v2325;
  JSC::MarkedVectorBase *v2326;
  uint64_t v2327;
  JSC::JSObject *v2328;
  __int128 v2329;
  __int128 v2330;
  __int128 v2331;
  __int128 v2332;
  uint64_t v2333;
  char v2334;
  unsigned int v2335;
  int v2336;
  _BYTE *v2337;
  _BYTE v2338[80];
  uint64_t (*v2339)(void);
  unsigned int v2340;
  void *__dst;
  uint64_t v2342;
  _BYTE v2343[2048];
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  JSC::VM *v2347;
  JSC::JSObject *v2348;
  int v2349;
  _QWORD v2350[2];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v2323 = v9;
  v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (v11 = *((unsigned __int8 *)v10 + 5), v11 <= 0x16))
  {
    v14 = "Receiver should be a typed array view but was not an object";
    v15 = &v2323;
    v16 = 60;
    return (JSC::JSArrayBufferView *)JSC::throwTypeError((unint64_t)this, v15, (uint64_t)v14, v16);
  }
  v2322 = v9;
  if (v11 != 45)
  {
    switch(*((_BYTE *)v10 + 5))
    {
      case '\'':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v109, v110, v111, v112, v113, v114, v115))
        {
          return 0;
        }
        v116 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::sort((uint64_t)v2151, v109, v110, v111, v112, v113, v114, v115);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2156 = JSC::JSArrayBufferView::length(v2151, v421, v422, v423, v424, v425, v426, v427);
        if (v2156 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2156 & 0x8000000000000000) != 0
          || (WTF::Vector<unsigned char,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, (WTF *)(2 * v2156)) & 1) == 0)
        {
          goto LABEL_2010;
        }
        v2142 = (JSC::MarkedVectorBase *)((char *)__dst + v2156);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, v2156);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v116, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v429 = 0;
          while (1)
          {
            v430 = v2156;
            if (v429 >= v2156)
              break;
            if (v2156 >= v429 + 4)
              v430 = v429 + 4;
            v2246 = v429 + 4;
            v2288 = v430 - v429;
            if (v430 - v429 < 2)
              goto LABEL_612;
            v431 = (char *)v2153 + v429;
            v432 = 1;
            do
            {
              v433 = v431[v432];
              v434 = v433 & 0xFFFFFFFFLL | 0xFFFE000000000000;
              v435 = v432;
              while (1)
              {
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1397;
                v436 = v435 - 1;
                v437 = v431[v435 - 1];
                v438 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v439 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v434, v437 | 0xFFFE000000000000);
                  else
                    v439 = 0;
                  *(_BYTE *)(v438 + 93120) = 1;
                  if (*(_DWORD *)(v438 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v438, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    goto LABEL_1456;
                  }
                  if (v439)
                    goto LABEL_603;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v434, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v437 | 0xFFFE000000000000, v885, v886, v887, v888, v889, v890);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1456:
                  v439 = 0;
                  goto LABEL_603;
                }
                v893 = v2329;
                v894 = v2339;
                if (v2339)
                  goto LABEL_1443;
                v1501 = (unsigned int *)(v2329 + 80);
                v1502 = *(_DWORD *)(v2329 + 80);
                if ((v1502 & 0x20) == 0)
                {
                  do
                    v1503 = __ldaxr(v1501);
                  while (__stlxr(v1503 | 0x20, v1501));
                }
                JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v891, v892, v250, v251, v252, v253, v254);
                if (*v1501
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v893, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                {
                  v1504 = 0;
                  v894 = 0;
                  v2206 = *(_QWORD *)(v893 + 16);
                }
                else
                {
                  v1504 = 1;
                  v894 = v2339;
                }
                if ((v1502 & 0x20) == 0)
                {
                  do
                    v1505 = __ldaxr(v1501);
                  while (__stlxr(v1505 & 0xFFFFFFDF, v1501));
                }
                if (v1504)
LABEL_1443:
                  v2206 = vmEntryToJavaScript((uint64_t)v894, (JSC::VM *)v893, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                *(_BYTE *)(v893 + 93120) = 1;
                v439 = v2206;
LABEL_603:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1397;
                v2348 = (JSC::JSObject *)v439;
                if (v439 < 0xFFFE000000000000)
                {
                  if ((v439 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v440 = 0;
                    LODWORD(v441) = v439 != 7;
                  }
                  else
                  {
                    if (v439 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v428);
                      v440 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v440 = 0;
                      v428.i64[0] = v439 - 0x2000000000000;
                    }
                    LODWORD(v441) = *(double *)v428.i64 < 0.0;
                  }
                }
                else
                {
                  v440 = 0;
                  v441 = (v439 >> 31) & 1;
                }
                if (v440 || !(_DWORD)v441)
                  break;
                v431[v435--] = v437;
                if (!v436)
                  goto LABEL_611;
              }
              if (v440)
                break;
LABEL_611:
              v431[v435] = v433;
              ++v432;
            }
            while (v432 < v2288);
LABEL_612:
            v429 = v2246;
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1397;
          }
          if (v2156 < 5)
          {
            v746 = v2153;
LABEL_1394:
            v871 = v2153;
            if (v746 != v2153)
              v871 = v2142;
            v2153 = v871;
            goto LABEL_1397;
          }
          v740 = 4;
          v741 = v2142;
          v742 = v2153;
          v743 = v2156;
          v744 = v2322;
LABEL_1122:
          v745 = 0;
          v746 = v741;
          v747 = 2 * v740;
          v2189 = (JSC::MarkedVectorBase *)v740;
          v2215 = v741;
          v2255 = v742;
          v2176 = (JSC::MarkedVectorBase *)(2 * v740);
          while (1)
          {
            if (v743 >= v745 + v740)
              v748 = v745 + v740;
            else
              v748 = v743;
            if (v743 >= v748 + v740)
              v749 = v748 + v740;
            else
              v749 = v743;
            if (v748 >= v749)
            {
              v249 = v749 - v745;
              if (v749 == v745)
                goto LABEL_1167;
              v756 = (char *)v746 + v745;
              goto LABEL_1143;
            }
            if (*((_QWORD *)v744 + 2))
              goto LABEL_1397;
            v750 = v748;
            v751 = *((char *)v742 + v748) | 0xFFFE000000000000;
            v2298 = v748;
            v752 = *((char *)v742 + v748 - 1) | 0xFFFE000000000000;
            v753 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            if (v2340 <= 3)
            {
              if (v2339)
                v754 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v751, v752);
              else
                v754 = 0;
              *(_BYTE *)(v753 + 93120) = 1;
              if (*(_DWORD *)(v753 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v753, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
              {
                v754 = 0;
                goto LABEL_1136;
              }
              if (v754)
                goto LABEL_1136;
            }
            v2334 = 0;
            v2335 = 0;
            *(_QWORD *)&v2332 = 10;
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v751, v249, v250, v251, v252, v253, v254);
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v752, v1110, v1111, v1112, v1113, v1114, v1115);
            if (v2334)
            {
              JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
              v754 = 0;
            }
            else
            {
              v1118 = v2329;
              v1119 = v2339;
              if (v2339)
                goto LABEL_1784;
              v2031 = (unsigned int *)(v2329 + 80);
              v2032 = *(_DWORD *)(v2329 + 80);
              if ((v2032 & 0x20) == 0)
              {
                do
                  v2033 = __ldaxr(v2031);
                while (__stlxr(v2033 | 0x20, v2031));
              }
              JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1116, v1117, v250, v251, v252, v253, v254);
              if (*v2031
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1118, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
              {
                v2034 = 0;
                v1119 = 0;
                v2127 = *(_QWORD *)(v1118 + 16);
              }
              else
              {
                v2034 = 1;
                v1119 = v2339;
              }
              if ((v2032 & 0x20) == 0)
              {
                do
                  v2035 = __ldaxr(v2031);
                while (__stlxr(v2035 & 0xFFFFFFDF, v2031));
              }
              if (v2034)
LABEL_1784:
                v2127 = vmEntryToJavaScript((uint64_t)v1119, (JSC::VM *)v1118, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
              *(_BYTE *)(v1118 + 93120) = 1;
              v754 = v2127;
            }
            v744 = v2322;
            v743 = v2156;
LABEL_1136:
            v755 = v2298;
            if (*((_QWORD *)v744 + 2))
              goto LABEL_1397;
            v2348 = (JSC::JSObject *)v754;
            if (v754 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v754 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v755 = v2298;
                v744 = v2322;
                v743 = v2156;
                if (v754 != 7)
                  goto LABEL_1146;
              }
              else
              {
                if (v754 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v428);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1397:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
                      goto LABEL_2359;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                    goto LABEL_1399;
                  }
                }
                else
                {
                  v428.i64[0] = v754 - 0x2000000000000;
                }
                v755 = v2298;
                v744 = v2322;
                v743 = v2156;
                if (*(double *)v428.i64 < 0.0)
                {
LABEL_1146:
                  v757 = v745;
                  v758 = v745;
                  v742 = v2255;
                  if (v749 <= v745)
                  {
LABEL_1166:
                    v744 = v2322;
                    v743 = v2156;
                    v747 = (unint64_t)v2176;
                    v740 = (uint64_t)v2189;
                    goto LABEL_1167;
                  }
                  while (2)
                  {
                    if (v750 >= v749)
                    {
LABEL_1161:
                      v759 = (char *)v742 + v758++;
                    }
                    else
                    {
                      if (v758 >= v755)
                      {
                        v759 = (char *)v742 + v750;
                      }
                      else
                      {
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_1397;
                        v759 = (char *)v742 + v750;
                        v760 = *((char *)v742 + v750) | 0xFFFE000000000000;
                        v761 = *((char *)v742 + v758) | 0xFFFE000000000000;
                        v762 = v2329;
                        v2348 = (JSC::JSObject *)v2329;
                        if (v2340 <= 3)
                        {
                          if (v2339)
                            v763 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v760, v761);
                          else
                            v763 = 0;
                          *(_BYTE *)(v762 + 93120) = 1;
                          if (*(_DWORD *)(v762 + 80)
                            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v762, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                          {
LABEL_2932:
                            v763 = 0;
                            goto LABEL_1155;
                          }
                          if (v763)
                            goto LABEL_1155;
                        }
                        v2334 = 0;
                        v2335 = 0;
                        *(_QWORD *)&v2332 = 10;
                        JSC::CachedCall::appendArgument((uint64_t *)&v2326, v760, v249, v250, v251, v252, v253, v254);
                        JSC::CachedCall::appendArgument((uint64_t *)&v2326, v761, v766, v767, v768, v769, v770, v771);
                        if (v2334)
                        {
                          JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                          goto LABEL_2932;
                        }
                        v774 = v2329;
                        v775 = v2339;
                        if (v2339)
                          goto LABEL_1175;
                        v1981 = (unsigned int *)(v2329 + 80);
                        v1982 = *(_DWORD *)(v2329 + 80);
                        if ((v1982 & 0x20) == 0)
                        {
                          do
                            v1983 = __ldaxr(v1981);
                          while (__stlxr(v1983 | 0x20, v1981));
                        }
                        JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v772, v773, v250, v251, v252, v253, v254);
                        if (*v1981
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v774, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
                          v1984 = 0;
                          v775 = 0;
                          v2129 = *(_QWORD *)(v774 + 16);
                        }
                        else
                        {
                          v1984 = 1;
                          v775 = v2339;
                        }
                        if ((v1982 & 0x20) == 0)
                        {
                          do
                            v1985 = __ldaxr(v1981);
                          while (__stlxr(v1985 & 0xFFFFFFDF, v1981));
                        }
                        if (v1984)
LABEL_1175:
                          v2129 = vmEntryToJavaScript((uint64_t)v775, (JSC::VM *)v774, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                        *(_BYTE *)(v774 + 93120) = 1;
                        v763 = v2129;
LABEL_1155:
                        v755 = v2298;
                        v746 = v2215;
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_1397;
                        v2348 = (JSC::JSObject *)v763;
                        if (v763 < 0xFFFE000000000000)
                        {
                          if ((v763 & 0xFFFFFFFFFFFFFFFELL) == 6)
                          {
                            v764 = 0;
                            LODWORD(v765) = v763 != 7;
                          }
                          else
                          {
                            if (v763 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            {
                              JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v428);
                              v764 = *((_QWORD *)v2322 + 2);
                            }
                            else
                            {
                              v764 = 0;
                              v428.i64[0] = v763 - 0x2000000000000;
                            }
                            LODWORD(v765) = *(double *)v428.i64 < 0.0;
                          }
                          v746 = v2215;
                          v755 = v2298;
                        }
                        else
                        {
                          v764 = 0;
                          v765 = (v763 >> 31) & 1;
                        }
                        v742 = v2255;
                        if (v764 || !(_DWORD)v765)
                        {
                          if (v764)
                            goto LABEL_1166;
                          goto LABEL_1161;
                        }
                      }
                      ++v750;
                    }
                    *((_BYTE *)v746 + v757++) = *v759;
                    if (v757 >= v749)
                      goto LABEL_1166;
                    continue;
                  }
                }
              }
            }
            else if ((v754 & 0x80000000) != 0)
            {
              goto LABEL_1146;
            }
            v249 = v749 - v745;
            v747 = (unint64_t)v2176;
            v740 = (uint64_t)v2189;
            if (v749 != v745)
            {
              v756 = (char *)v746 + v745;
              v742 = v2255;
LABEL_1143:
              v248 = (char *)v742 + v745;
              if (v249 == 1)
                *v756 = *v248;
              else
                memcpy(v756, v248, v249);
              goto LABEL_1167;
            }
            v742 = v2255;
LABEL_1167:
            if (*((_QWORD *)v744 + 2))
              goto LABEL_1397;
            v745 += v747;
            if (v745 >= v743)
            {
              v740 = v747;
              v741 = v742;
              v742 = v746;
              if (v747 >= v743)
                goto LABEL_1394;
              goto LABEL_1122;
            }
          }
        }
        v1399 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2308 = v2153;
        while (v1399 < v2156)
        {
          v1400 = v2156;
          v2266 = v1399 + 4;
          if (v2156 >= v1399 + 4)
            v1400 = v1399 + 4;
          v1401 = v1400 - v1399;
          if (v1400 - v1399 >= 2)
          {
            v1402 = (char *)v2153 + v1399;
            v1403 = v2308;
            v1404 = 1;
            while (2)
            {
              v1405 = 0;
              v1406 = v1402[v1404];
              while (1)
              {
                v1407 = *((char *)v1403 + v1405);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1406 & 0xFFFFFFFFLL | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1407 | 0xFFFE000000000000, v1408, v1409, v1410, v1411, v1412, v1413);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1417 = JSC::call((uint64_t *)v2150, (uint64_t)v116, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1414, v1415, v1416);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1417;
                if (v1417 < 0xFFFE000000000000)
                {
                  if ((v1417 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1419) = v1417 != 7;
                  }
                  else
                  {
                    if (v1417 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1418);
                    else
                      *(_QWORD *)&v2082 = v1417 - 0x2000000000000;
                    LODWORD(v1419) = v2082 < 0.0;
                  }
                }
                else
                {
                  v1419 = (v1417 >> 31) & 1;
                }
                v1420 = *((_QWORD *)v2322 + 2);
                if (v1420 || !(_DWORD)v1419)
                {
                  if (v1420)
                    goto LABEL_3001;
                  goto LABEL_2252;
                }
                *((_BYTE *)v1403 + v1405-- + 1) = v1407;
                if (!(v1404 + v1405))
                {
                  v1421 = 0;
                  goto LABEL_2253;
                }
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3001;
LABEL_2252:
              v1421 = v1404 + v1405;
LABEL_2253:
              v1402[v1421] = v1406;
              ++v1404;
              v1403 = (JSC::MarkedVectorBase *)((char *)v1403 + 1);
              if (v1404 < v1401)
                continue;
              break;
            }
          }
          v2308 = (JSC::MarkedVectorBase *)((char *)v2308 + 4);
          v1399 = v2266;
          if (*((_QWORD *)v2322 + 2))
            goto LABEL_3001;
        }
        if (v2156 >= 5)
        {
          v2233 = 4;
          v1759 = v2142;
          v2318 = v2153;
          while (1)
          {
            v1760 = 0;
            v2276 = v1759;
            v2204 = 2 * v2233;
            do
            {
              if (v2156 >= v1760 + v2233)
                v1761 = v1760 + v2233;
              else
                v1761 = v2156;
              if (v2156 >= v1761 + v2233)
                v1762 = v1761 + v2233;
              else
                v1762 = v2156;
              if (v1761 >= v1762)
                goto LABEL_2699;
              v1763 = *((char *)v2318 + v1761);
              v1764 = *((char *)v2318 + v1761 - 1);
              v2350[0] = v2322;
              LOBYTE(v2326) = 0;
              LODWORD(v2327) = 0;
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                || *((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3514;
              }
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1763 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1764 | 0xFFFE000000000000, v1765, v1766, v1767, v1768, v1769, v1770);
              if ((_BYTE)v2326)
              {
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3514:
                LODWORD(v1776) = 0;
                goto LABEL_2680;
              }
              v2348 = v2328;
              v2349 = v2327;
              v1774 = JSC::call((uint64_t *)v2150, (uint64_t)v116, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1771, v1772, v1773);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3514;
              }
              v2348 = (JSC::JSObject *)v1774;
              if (v1774 < 0xFFFE000000000000)
              {
                if ((v1774 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  LODWORD(v1776) = v1774 != 7;
                }
                else
                {
                  if (v1774 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1775);
                  else
                    *(_QWORD *)&v2122 = v1774 - 0x2000000000000;
                  LODWORD(v1776) = v2122 < 0.0;
                }
              }
              else
              {
                v1776 = (v1774 >> 31) & 1;
              }
LABEL_2680:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3001;
              if ((_DWORD)v1776)
              {
                v1777 = v1760;
                v1778 = v1761;
                v1779 = v1760;
                if (v1762 > v1760)
                {
                  while (1)
                  {
                    if (v1778 < v1762)
                    {
                      if (v1779 >= v1761)
                      {
                        v1780 = (char *)v2318 + v1778;
LABEL_2698:
                        ++v1778;
                        goto LABEL_2695;
                      }
                      v1780 = (char *)v2318 + v1778;
                      v1781 = *((char *)v2318 + v1778);
                      v1782 = *((char *)v2318 + v1779);
                      v2350[0] = v2322;
                      LOBYTE(v2326) = 0;
                      LODWORD(v2327) = 0;
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)|| *((_DWORD *)v2322 + 20)&& JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3400;
                      }
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1781 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1782 | 0xFFFE000000000000, v1783, v1784, v1785, v1786, v1787, v1788);
                      if ((_BYTE)v2326)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3400:
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_3001;
                        goto LABEL_2694;
                      }
                      v2348 = v2328;
                      v2349 = v2327;
                      v1792 = JSC::call((uint64_t *)v2150, (uint64_t)v116, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1789, v1790, v1791);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3400;
                      }
                      v2348 = (JSC::JSObject *)v1792;
                      if (v1792 < 0xFFFE000000000000)
                      {
                        if ((v1792 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          LODWORD(v1794) = v1792 != 7;
                        }
                        else
                        {
                          if (v1792 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1793);
                          else
                            *(_QWORD *)&v2112 = v1792 - 0x2000000000000;
                          LODWORD(v1794) = v2112 < 0.0;
                        }
                      }
                      else
                      {
                        v1794 = (v1792 >> 31) & 1;
                      }
                      v1795 = *((_QWORD *)v2322 + 2);
                      if (!v1795 && (_DWORD)v1794)
                        goto LABEL_2698;
                      if (v1795)
                        goto LABEL_3001;
                    }
LABEL_2694:
                    v1780 = (char *)v2318 + v1779++;
LABEL_2695:
                    *((_BYTE *)v2276 + v1777++) = *v1780;
                    if (v1777 >= v1762)
                      goto LABEL_2703;
                  }
                }
                goto LABEL_2704;
              }
LABEL_2699:
              v242 = v1762 - v1760;
              if (v1762 != v1760)
              {
                v1796 = (char *)v2276 + v1760;
                v241 = (char *)v2318 + v1760;
                if (v242 == 1)
                  *v1796 = *v241;
                else
                  memcpy(v1796, v241, v242);
              }
LABEL_2703:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3001;
LABEL_2704:
              v1760 += v2204;
            }
            while (v1760 < v2156);
            v2233 *= 2;
            v1759 = v2318;
            v2318 = v2276;
            if (v2204 >= v2156)
              goto LABEL_2998;
          }
        }
        v2276 = v2153;
LABEL_2998:
        v1997 = v2153;
        if (v2276 != v2153)
          v1997 = v2142;
        v2153 = v1997;
LABEL_3001:
        if (*((_DWORD *)v2347 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
        {
          goto LABEL_3606;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
LABEL_1399:
        if (JSC::JSArrayBufferView::isDetached(v2151))
          goto LABEL_1421;
        v872 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
        v851 = v2156 >= v872 ? v872 : v2156;
        if (!v851)
          goto LABEL_1421;
        if (v851 == 1)
          goto LABEL_1418;
        goto LABEL_1420;
      case '(':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v152, v153, v154, v155, v156, v157, v158))
        {
          return 0;
        }
        v159 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::sort((uint64_t)v2151, v152, v153, v154, v155, v156, v157, v158);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2170 = JSC::JSArrayBufferView::length(v2151, v347, v348, v349, v350, v351, v352, v353);
        if (v2170 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2170 & 0x8000000000000000) != 0
          || (WTF::Vector<unsigned char,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, (WTF *)(2 * v2170)) & 1) == 0)
        {
          goto LABEL_2010;
        }
        v2139 = (JSC::MarkedVectorBase *)((char *)__dst + v2170);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, v2170);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v159, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v355 = 0;
          while (1)
          {
            v356 = v2170;
            if (v355 >= v2170)
              break;
            if (v2170 >= v355 + 4)
              v356 = v355 + 4;
            v2243 = v355 + 4;
            v2285 = v356 - v355;
            if (v356 - v355 < 2)
              goto LABEL_489;
            v357 = (char *)v2153 + v355;
            v358 = 1;
            do
            {
              v359 = v357[v358];
              v360 = v358;
              while (1)
              {
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1389;
                v361 = v360 - 1;
                v362 = v357[v360 - 1];
                v363 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v364 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v359 | 0xFFFE000000000000, v362 | 0xFFFE000000000000);
                  else
                    v364 = 0;
                  *(_BYTE *)(v363 + 93120) = 1;
                  if (*(_DWORD *)(v363 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v363, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    goto LABEL_1451;
                  }
                  if (v364)
                    goto LABEL_480;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v359 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v362 | 0xFFFE000000000000, v875, v876, v877, v878, v879, v880);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1451:
                  v364 = 0;
                  goto LABEL_480;
                }
                v883 = v2329;
                v884 = v2339;
                if (v2339)
                  goto LABEL_1439;
                v1496 = (unsigned int *)(v2329 + 80);
                v1497 = *(_DWORD *)(v2329 + 80);
                if ((v1497 & 0x20) == 0)
                {
                  do
                    v1498 = __ldaxr(v1496);
                  while (__stlxr(v1498 | 0x20, v1496));
                }
                JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v881, v882, v250, v251, v252, v253, v254);
                if (*v1496
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v883, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                {
                  v1499 = 0;
                  v884 = 0;
                  v2206 = *(_QWORD *)(v883 + 16);
                }
                else
                {
                  v1499 = 1;
                  v884 = v2339;
                }
                if ((v1497 & 0x20) == 0)
                {
                  do
                    v1500 = __ldaxr(v1496);
                  while (__stlxr(v1500 & 0xFFFFFFDF, v1496));
                }
                if (v1499)
LABEL_1439:
                  v2206 = vmEntryToJavaScript((uint64_t)v884, (JSC::VM *)v883, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                *(_BYTE *)(v883 + 93120) = 1;
                v364 = v2206;
LABEL_480:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1389;
                v2348 = (JSC::JSObject *)v364;
                if (v364 < 0xFFFE000000000000)
                {
                  if ((v364 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v365 = 0;
                    LODWORD(v366) = v364 != 7;
                  }
                  else
                  {
                    if (v364 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v354);
                      v365 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v365 = 0;
                      v354.i64[0] = v364 - 0x2000000000000;
                    }
                    LODWORD(v366) = *(double *)v354.i64 < 0.0;
                  }
                }
                else
                {
                  v365 = 0;
                  v366 = (v364 >> 31) & 1;
                }
                if (v365 || !(_DWORD)v366)
                  break;
                v357[v360--] = v362;
                if (!v361)
                  goto LABEL_488;
              }
              if (v365)
                break;
LABEL_488:
              v357[v360] = v359;
              ++v358;
            }
            while (v358 < v2285);
LABEL_489:
            v355 = v2243;
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1389;
          }
          if (v2170 < 5)
          {
            v710 = v2153;
LABEL_1386:
            v868 = v2153;
            if (v710 != v2153)
              v868 = v2139;
            v2153 = v868;
            goto LABEL_1389;
          }
          v705 = 4;
          v706 = v2139;
          v707 = v2153;
          v708 = v2170;
LABEL_1063:
          v709 = 0;
          v710 = v706;
          v711 = 2 * v705;
          v2161 = (JSC::MarkedVectorBase *)v705;
          v2214 = v706;
          v2254 = v707;
          v2188 = (JSC::MarkedVectorBase *)(2 * v705);
          while (1)
          {
            if (v708 >= v709 + v705)
              v712 = v709 + v705;
            else
              v712 = v708;
            if (v708 >= v712 + v705)
              v713 = v712 + v705;
            else
              v713 = v708;
            if (v712 >= v713)
            {
              v720 = (char *)v710 + v709;
              v248 = (char *)v707 + v709;
              v249 = v713 - v709;
              if (v713 - v709 == 1)
              {
LABEL_1084:
                *v720 = *v248;
                goto LABEL_1085;
              }
              goto LABEL_1081;
            }
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1389;
            v714 = v712;
            v715 = *((unsigned __int8 *)v707 + v712) | 0xFFFE000000000000;
            v716 = *((unsigned __int8 *)v707 + v712 - 1) | 0xFFFE000000000000;
            v717 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            v2297 = v712;
            if (v2340 > 3)
              break;
            if (v2339)
              v718 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v715, v716);
            else
              v718 = 0;
            *(_BYTE *)(v717 + 93120) = 1;
            if (*(_DWORD *)(v717 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v717, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              v718 = 0;
LABEL_1781:
              v719 = v2297;
              goto LABEL_1077;
            }
            v719 = v2297;
            if (!v718)
              break;
LABEL_1077:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1389;
            v2348 = (JSC::JSObject *)v718;
            if (v718 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v718 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v705 = (uint64_t)v2161;
                v708 = v2170;
                v719 = v2297;
                if (v718 != 7)
                  goto LABEL_1088;
              }
              else
              {
                if (v718 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v354);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1389:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
                      goto LABEL_2359;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                    goto LABEL_1391;
                  }
                }
                else
                {
                  v354.i64[0] = v718 - 0x2000000000000;
                }
                v705 = (uint64_t)v2161;
                v708 = v2170;
                v719 = v2297;
                if (*(double *)v354.i64 < 0.0)
                {
LABEL_1088:
                  v721 = v709;
                  v722 = v709;
                  v707 = v2254;
                  if (v713 <= v709)
                  {
LABEL_1107:
                    v705 = (uint64_t)v2161;
                    v708 = v2170;
                    v711 = (unint64_t)v2188;
                    goto LABEL_1085;
                  }
                  while (2)
                  {
                    if (v714 >= v713)
                      goto LABEL_1105;
                    if (v722 >= v719)
                    {
                      v723 = (char *)v707 + v714++;
                    }
                    else
                    {
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1389;
                      v723 = (char *)v707 + v714;
                      v724 = *((unsigned __int8 *)v707 + v714) | 0xFFFE000000000000;
                      v725 = *((unsigned __int8 *)v707 + v722) | 0xFFFE000000000000;
                      v726 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v727 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v724, v725);
                        else
                          v727 = 0;
                        *(_BYTE *)(v726 + 93120) = 1;
                        if (*(_DWORD *)(v726 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v726, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
LABEL_2930:
                          v727 = 0;
                          goto LABEL_1097;
                        }
                        if (v727)
                          goto LABEL_1097;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v724, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v725, v730, v731, v732, v733, v734, v735);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        goto LABEL_2930;
                      }
                      v738 = v2329;
                      v739 = v2339;
                      if (v2339)
                        goto LABEL_1112;
                      v1976 = (unsigned int *)(v2329 + 80);
                      v1977 = *(_DWORD *)(v2329 + 80);
                      if ((v1977 & 0x20) == 0)
                      {
                        do
                          v1978 = __ldaxr(v1976);
                        while (__stlxr(v1978 | 0x20, v1976));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v736, v737, v250, v251, v252, v253, v254);
                      if (*v1976
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v738, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v1979 = 0;
                        v739 = 0;
                        v2129 = *(_QWORD *)(v738 + 16);
                      }
                      else
                      {
                        v1979 = 1;
                        v739 = v2339;
                      }
                      if ((v1977 & 0x20) == 0)
                      {
                        do
                          v1980 = __ldaxr(v1976);
                        while (__stlxr(v1980 & 0xFFFFFFDF, v1976));
                      }
                      if (v1979)
LABEL_1112:
                        v2129 = vmEntryToJavaScript((uint64_t)v739, (JSC::VM *)v738, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v738 + 93120) = 1;
                      v727 = v2129;
LABEL_1097:
                      v710 = v2214;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1389;
                      v2348 = (JSC::JSObject *)v727;
                      if (v727 < 0xFFFE000000000000)
                      {
                        if ((v727 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v728 = 0;
                          LODWORD(v729) = v727 != 7;
                        }
                        else
                        {
                          if (v727 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v354);
                            v728 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v728 = 0;
                            v354.i64[0] = v727 - 0x2000000000000;
                          }
                          LODWORD(v729) = *(double *)v354.i64 < 0.0;
                        }
                        v710 = v2214;
                      }
                      else
                      {
                        v728 = 0;
                        v729 = (v727 >> 31) & 1;
                      }
                      v707 = v2254;
                      if (!v728 && (_DWORD)v729)
                      {
                        ++v714;
                        v719 = v2297;
                        goto LABEL_1106;
                      }
                      v719 = v2297;
                      if (v728)
                        goto LABEL_1107;
LABEL_1105:
                      v723 = (char *)v707 + v722++;
                    }
LABEL_1106:
                    *((_BYTE *)v710 + v721++) = *v723;
                    if (v721 >= v713)
                      goto LABEL_1107;
                    continue;
                  }
                }
              }
            }
            else if ((v718 & 0x80000000) != 0)
            {
              goto LABEL_1088;
            }
            v720 = (char *)v710 + v709;
            v707 = v2254;
            v248 = (char *)v2254 + v709;
            v249 = v713 - v709;
            v711 = (unint64_t)v2188;
            if (v713 - v709 == 1)
              goto LABEL_1084;
LABEL_1081:
            if (v249)
              memcpy(v720, v248, v249);
LABEL_1085:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1389;
            v709 += v711;
            if (v709 >= v708)
            {
              v705 = v711;
              v706 = v707;
              v707 = v710;
              if (v711 >= v708)
                goto LABEL_1386;
              goto LABEL_1063;
            }
          }
          v2334 = 0;
          v2335 = 0;
          *(_QWORD *)&v2332 = 10;
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v715, v249, v250, v251, v252, v253, v254);
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v716, v1100, v1101, v1102, v1103, v1104, v1105);
          if (v2334)
          {
            JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
            v718 = 0;
          }
          else
          {
            v1108 = v2329;
            v1109 = v2339;
            if (v2339)
              goto LABEL_1778;
            v2026 = (unsigned int *)(v2329 + 80);
            v2027 = *(_DWORD *)(v2329 + 80);
            if ((v2027 & 0x20) == 0)
            {
              do
                v2028 = __ldaxr(v2026);
              while (__stlxr(v2028 | 0x20, v2026));
            }
            JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1106, v1107, v250, v251, v252, v253, v254);
            if (*v2026
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1108, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              v2029 = 0;
              v1109 = 0;
              v2127 = *(_QWORD *)(v1108 + 16);
            }
            else
            {
              v2029 = 1;
              v1109 = v2339;
            }
            if ((v2027 & 0x20) == 0)
            {
              do
                v2030 = __ldaxr(v2026);
              while (__stlxr(v2030 & 0xFFFFFFDF, v2026));
            }
            if (v2029)
LABEL_1778:
              v2127 = vmEntryToJavaScript((uint64_t)v1109, (JSC::VM *)v1108, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
            *(_BYTE *)(v1108 + 93120) = 1;
            v718 = v2127;
          }
          v705 = (uint64_t)v2161;
          v708 = v2170;
          goto LABEL_1781;
        }
        v1328 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2305 = v2153;
        while (v1328 < v2170)
        {
          v1329 = v2170;
          v2263 = v1328 + 4;
          if (v2170 >= v1328 + 4)
            v1329 = v1328 + 4;
          v1330 = v1329 - v1328;
          if (v1329 - v1328 >= 2)
          {
            v1331 = (char *)v2153 + v1328;
            v1332 = v2305;
            v1333 = 1;
            while (2)
            {
              v1334 = 0;
              v1335 = v1331[v1333];
              while (1)
              {
                v1336 = *((unsigned __int8 *)v1332 + v1334);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1335 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1336 | 0xFFFE000000000000, v1337, v1338, v1339, v1340, v1341, v1342);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1346 = JSC::call((uint64_t *)v2150, (uint64_t)v159, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1343, v1344, v1345);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1346;
                if (v1346 < 0xFFFE000000000000)
                {
                  if ((v1346 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1348) = v1346 != 7;
                  }
                  else
                  {
                    if (v1346 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1347);
                    else
                      *(_QWORD *)&v2079 = v1346 - 0x2000000000000;
                    LODWORD(v1348) = v2079 < 0.0;
                  }
                }
                else
                {
                  v1348 = (v1346 >> 31) & 1;
                }
                v1349 = *((_QWORD *)v2322 + 2);
                if (v1349 || !(_DWORD)v1348)
                {
                  if (v1349)
                    goto LABEL_2983;
                  goto LABEL_2184;
                }
                *((_BYTE *)v1332 + v1334-- + 1) = v1336;
                if (!(v1333 + v1334))
                {
                  v1350 = 0;
                  goto LABEL_2185;
                }
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2983;
LABEL_2184:
              v1350 = v1333 + v1334;
LABEL_2185:
              v1331[v1350] = v1335;
              ++v1333;
              v1332 = (JSC::MarkedVectorBase *)((char *)v1332 + 1);
              if (v1333 < v1330)
                continue;
              break;
            }
          }
          v2305 = (JSC::MarkedVectorBase *)((char *)v2305 + 4);
          v1328 = v2263;
          if (*((_QWORD *)v2322 + 2))
            goto LABEL_2983;
        }
        if (v2170 >= 5)
        {
          v2230 = 4;
          v1641 = v2139;
          v2315 = v2153;
          while (1)
          {
            v1642 = 0;
            v2273 = v1641;
            v2201 = 2 * v2230;
            do
            {
              if (v2170 >= v1642 + v2230)
                v1643 = v1642 + v2230;
              else
                v1643 = v2170;
              if (v2170 >= v1643 + v2230)
                v1644 = v1643 + v2230;
              else
                v1644 = v2170;
              if (v1643 >= v1644)
                goto LABEL_2569;
              v1645 = *((unsigned __int8 *)v2315 + v1643);
              v1646 = *((unsigned __int8 *)v2315 + v1643 - 1);
              v2350[0] = v2322;
              LOBYTE(v2326) = 0;
              LODWORD(v2327) = 0;
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                || *((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3508;
              }
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1645 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1646 | 0xFFFE000000000000, v1647, v1648, v1649, v1650, v1651, v1652);
              if ((_BYTE)v2326)
              {
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3508:
                LODWORD(v1658) = 0;
                goto LABEL_2550;
              }
              v2348 = v2328;
              v2349 = v2327;
              v1656 = JSC::call((uint64_t *)v2150, (uint64_t)v159, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1653, v1654, v1655);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3508;
              }
              v2348 = (JSC::JSObject *)v1656;
              if (v1656 < 0xFFFE000000000000)
              {
                if ((v1656 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  LODWORD(v1658) = v1656 != 7;
                }
                else
                {
                  if (v1656 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1657);
                  else
                    *(_QWORD *)&v2119 = v1656 - 0x2000000000000;
                  LODWORD(v1658) = v2119 < 0.0;
                }
              }
              else
              {
                v1658 = (v1656 >> 31) & 1;
              }
LABEL_2550:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2983;
              if ((_DWORD)v1658)
              {
                v1659 = v1642;
                v1660 = v1643;
                v1661 = v1642;
                if (v1644 > v1642)
                {
                  while (1)
                  {
                    if (v1660 < v1644)
                    {
                      if (v1661 >= v1643)
                      {
                        v1662 = (char *)v2315 + v1660;
LABEL_2568:
                        ++v1660;
                        goto LABEL_2565;
                      }
                      v1662 = (char *)v2315 + v1660;
                      v1663 = *((unsigned __int8 *)v2315 + v1660);
                      v1664 = *((unsigned __int8 *)v2315 + v1661);
                      v2350[0] = v2322;
                      LOBYTE(v2326) = 0;
                      LODWORD(v2327) = 0;
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)|| *((_DWORD *)v2322 + 20)&& JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3391;
                      }
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1663 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1664 | 0xFFFE000000000000, v1665, v1666, v1667, v1668, v1669, v1670);
                      if ((_BYTE)v2326)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3391:
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_2983;
                        goto LABEL_2564;
                      }
                      v2348 = v2328;
                      v2349 = v2327;
                      v1674 = JSC::call((uint64_t *)v2150, (uint64_t)v159, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1671, v1672, v1673);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3391;
                      }
                      v2348 = (JSC::JSObject *)v1674;
                      if (v1674 < 0xFFFE000000000000)
                      {
                        if ((v1674 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          LODWORD(v1676) = v1674 != 7;
                        }
                        else
                        {
                          if (v1674 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1675);
                          else
                            *(_QWORD *)&v2109 = v1674 - 0x2000000000000;
                          LODWORD(v1676) = v2109 < 0.0;
                        }
                      }
                      else
                      {
                        v1676 = (v1674 >> 31) & 1;
                      }
                      v1677 = *((_QWORD *)v2322 + 2);
                      if (!v1677 && (_DWORD)v1676)
                        goto LABEL_2568;
                      if (v1677)
                        goto LABEL_2983;
                    }
LABEL_2564:
                    v1662 = (char *)v2315 + v1661++;
LABEL_2565:
                    *((_BYTE *)v2273 + v1659++) = *v1662;
                    if (v1659 >= v1644)
                      goto LABEL_2571;
                  }
                }
                goto LABEL_2572;
              }
LABEL_2569:
              v1678 = (char *)v2273 + v1642;
              v241 = (char *)v2315 + v1642;
              v242 = v1644 - v1642;
              if (v1644 - v1642 == 1)
              {
                *v1678 = *v241;
              }
              else if (v242)
              {
                memcpy(v1678, v241, v242);
              }
LABEL_2571:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2983;
LABEL_2572:
              v1642 += v2201;
            }
            while (v1642 < v2170);
            v2230 *= 2;
            v1641 = v2315;
            v2315 = v2273;
            if (v2201 >= v2170)
              goto LABEL_2980;
          }
        }
        v2273 = v2153;
LABEL_2980:
        v1994 = v2153;
        if (v2273 != v2153)
          v1994 = v2139;
        v2153 = v1994;
LABEL_2983:
        if (*((_DWORD *)v2347 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
        {
          goto LABEL_3606;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
LABEL_1391:
        if (JSC::JSArrayBufferView::isDetached(v2151))
          goto LABEL_1421;
        v869 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
        v870 = v2170;
        goto LABEL_1414;
      case ')':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v176, v177, v178, v179, v180, v181, v182))
        {
          return 0;
        }
        v183 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::sort((uint64_t)v2151, v176, v177, v178, v179, v180, v181, v182);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2182 = JSC::JSArrayBufferView::length(v2151, v442, v443, v444, v445, v446, v447, v448);
        if (v2182 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2182 & 0x8000000000000000) != 0
          || (WTF::Vector<unsigned char,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, (WTF *)(2 * v2182)) & 1) == 0)
        {
          goto LABEL_2010;
        }
        v2143 = (JSC::MarkedVectorBase *)((char *)__dst + v2182);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, v2182);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v183, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v450 = 0;
          v451 = v9;
          while (1)
          {
            v452 = v2182;
            if (v450 >= v2182)
              break;
            if (v2182 >= v450 + 4)
              v452 = v450 + 4;
            v2247 = v450 + 4;
            v2289 = v452 - v450;
            if (v452 - v450 < 2)
              goto LABEL_645;
            v453 = (char *)v2153 + v450;
            v454 = 1;
            do
            {
              v455 = v453[v454];
              v456 = v454;
              while (1)
              {
                if (*((_QWORD *)v451 + 2))
                  goto LABEL_1410;
                v457 = v456 - 1;
                v458 = v453[v456 - 1];
                v459 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v460 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v455 | 0xFFFE000000000000, v458 | 0xFFFE000000000000);
                  else
                    v460 = 0;
                  *(_BYTE *)(v459 + 93120) = 1;
                  if (*(_DWORD *)(v459 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v459, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    goto LABEL_1461;
                  }
                  if (v460)
                    goto LABEL_636;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v455 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v458 | 0xFFFE000000000000, v895, v896, v897, v898, v899, v900);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1461:
                  v460 = 0;
                  goto LABEL_636;
                }
                v903 = v2329;
                v904 = v2339;
                if (v2339)
                  goto LABEL_1447;
                v1506 = (unsigned int *)(v2329 + 80);
                v1507 = *(_DWORD *)(v2329 + 80);
                if ((v1507 & 0x20) == 0)
                {
                  do
                    v1508 = __ldaxr(v1506);
                  while (__stlxr(v1508 | 0x20, v1506));
                }
                JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v901, v902, v250, v251, v252, v253, v254);
                if (*v1506
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v903, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                {
                  v1509 = 0;
                  v904 = 0;
                  v2206 = *(_QWORD *)(v903 + 16);
                }
                else
                {
                  v1509 = 1;
                  v904 = v2339;
                }
                if ((v1507 & 0x20) == 0)
                {
                  do
                    v1510 = __ldaxr(v1506);
                  while (__stlxr(v1510 & 0xFFFFFFDF, v1506));
                }
                if (v1509)
LABEL_1447:
                  v2206 = vmEntryToJavaScript((uint64_t)v904, (JSC::VM *)v903, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                *(_BYTE *)(v903 + 93120) = 1;
                v460 = v2206;
LABEL_636:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1410;
                v2348 = (JSC::JSObject *)v460;
                if (v460 < 0xFFFE000000000000)
                {
                  if ((v460 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v461 = 0;
                    LODWORD(v462) = v460 != 7;
                  }
                  else
                  {
                    if (v460 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v449);
                      v461 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v461 = 0;
                      v449.i64[0] = v460 - 0x2000000000000;
                    }
                    LODWORD(v462) = *(double *)v449.i64 < 0.0;
                  }
                }
                else
                {
                  v461 = 0;
                  v462 = (v460 >> 31) & 1;
                }
                if (v461 || !(_DWORD)v462)
                  break;
                v453[v456--] = v458;
                v451 = v2322;
                if (!v457)
                  goto LABEL_644;
              }
              v451 = v2322;
              if (v461)
                break;
LABEL_644:
              v453[v456] = v455;
              ++v454;
            }
            while (v454 < v2289);
LABEL_645:
            v450 = v2247;
            if (*((_QWORD *)v451 + 2))
              goto LABEL_1410;
          }
          if (v2182 < 5)
          {
            v782 = v2153;
LABEL_1407:
            v873 = v2153;
            if (v782 != v2153)
              v873 = v2143;
            v2153 = v873;
            goto LABEL_1410;
          }
          v776 = 4;
          v777 = v2153;
          v778 = v2143;
          v779 = v2322;
          v780 = v2182;
LABEL_1185:
          v781 = 0;
          v782 = v778;
          v778 = v777;
          v783 = 2 * v776;
          v2162 = (JSC::MarkedVectorBase *)v776;
          v2177 = (JSC::MarkedVectorBase *)(2 * v776);
          v2216 = v777;
          v2256 = v782;
          while (1)
          {
            if (v780 >= v781 + v776)
              v784 = v781 + v776;
            else
              v784 = v780;
            if (v780 >= v784 + v776)
              v785 = v784 + v776;
            else
              v785 = v780;
            if (v784 >= v785)
            {
              v792 = (char *)v782 + v781;
              v248 = (char *)v778 + v781;
              v249 = v785 - v781;
              if (v785 - v781 == 1)
              {
LABEL_1206:
                *v792 = *v248;
                v780 = v2182;
                goto LABEL_1207;
              }
              goto LABEL_1203;
            }
            if (*((_QWORD *)v779 + 2))
              goto LABEL_1410;
            v786 = v784;
            v787 = *((unsigned __int8 *)v778 + v784) | 0xFFFE000000000000;
            v788 = *((unsigned __int8 *)v778 + v784 - 1) | 0xFFFE000000000000;
            v789 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            v2299 = v784;
            if (v2340 > 3)
              break;
            if (v2339)
              v790 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v787, v788);
            else
              v790 = 0;
            *(_BYTE *)(v789 + 93120) = 1;
            if (*(_DWORD *)(v789 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v789, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              v790 = 0;
LABEL_1792:
              v791 = v2299;
              goto LABEL_1199;
            }
            v791 = v2299;
            if (!v790)
              break;
LABEL_1199:
            v778 = v2216;
            v782 = v2256;
            if (*((_QWORD *)v779 + 2))
              goto LABEL_1410;
            v2348 = (JSC::JSObject *)v790;
            if (v790 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v790 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v791 = v2299;
                v779 = v2322;
                v776 = (uint64_t)v2162;
                v778 = v2216;
                v782 = v2256;
                if (v790 != 7)
                  goto LABEL_1210;
              }
              else
              {
                if (v790 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v449);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1410:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
                      goto LABEL_2359;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                    goto LABEL_1412;
                  }
                }
                else
                {
                  v449.i64[0] = v790 - 0x2000000000000;
                }
                v791 = v2299;
                v779 = v2322;
                v776 = (uint64_t)v2162;
                v778 = v2216;
                v782 = v2256;
                if (*(double *)v449.i64 < 0.0)
                {
LABEL_1210:
                  v793 = v781;
                  v794 = v781;
                  if (v785 <= v781)
                  {
LABEL_1229:
                    v779 = v2322;
                    v783 = (unint64_t)v2177;
                    v780 = v2182;
                    v776 = (uint64_t)v2162;
                    goto LABEL_1207;
                  }
                  while (2)
                  {
                    if (v786 >= v785)
                      goto LABEL_1227;
                    if (v794 >= v791)
                    {
                      v795 = (char *)v778 + v786++;
                    }
                    else
                    {
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1410;
                      v795 = (char *)v778 + v786;
                      v796 = *((unsigned __int8 *)v778 + v786) | 0xFFFE000000000000;
                      v797 = *((unsigned __int8 *)v778 + v794) | 0xFFFE000000000000;
                      v798 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v799 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v796, v797);
                        else
                          v799 = 0;
                        *(_BYTE *)(v798 + 93120) = 1;
                        if (*(_DWORD *)(v798 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v798, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
LABEL_2934:
                          v799 = 0;
                          goto LABEL_1219;
                        }
                        if (v799)
                          goto LABEL_1219;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v796, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v797, v802, v803, v804, v805, v806, v807);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        goto LABEL_2934;
                      }
                      v810 = v2329;
                      v811 = v2339;
                      if (v2339)
                        goto LABEL_1234;
                      v1986 = (unsigned int *)(v2329 + 80);
                      v1987 = *(_DWORD *)(v2329 + 80);
                      if ((v1987 & 0x20) == 0)
                      {
                        do
                          v1988 = __ldaxr(v1986);
                        while (__stlxr(v1988 | 0x20, v1986));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v808, v809, v250, v251, v252, v253, v254);
                      if (*v1986
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v810, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v1989 = 0;
                        v811 = 0;
                        v2129 = *(_QWORD *)(v810 + 16);
                      }
                      else
                      {
                        v1989 = 1;
                        v811 = v2339;
                      }
                      if ((v1987 & 0x20) == 0)
                      {
                        do
                          v1990 = __ldaxr(v1986);
                        while (__stlxr(v1990 & 0xFFFFFFDF, v1986));
                      }
                      if (v1989)
LABEL_1234:
                        v2129 = vmEntryToJavaScript((uint64_t)v811, (JSC::VM *)v810, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v810 + 93120) = 1;
                      v799 = v2129;
LABEL_1219:
                      v778 = v2216;
                      v782 = v2256;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1410;
                      v2348 = (JSC::JSObject *)v799;
                      if (v799 < 0xFFFE000000000000)
                      {
                        if ((v799 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v800 = 0;
                          LODWORD(v801) = v799 != 7;
                        }
                        else
                        {
                          if (v799 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v449);
                            v800 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v800 = 0;
                            v449.i64[0] = v799 - 0x2000000000000;
                          }
                          LODWORD(v801) = *(double *)v449.i64 < 0.0;
                        }
                        v778 = v2216;
                        v782 = v2256;
                      }
                      else
                      {
                        v800 = 0;
                        v801 = (v799 >> 31) & 1;
                      }
                      if (!v800 && (_DWORD)v801)
                      {
                        ++v786;
                        v791 = v2299;
                        goto LABEL_1228;
                      }
                      v791 = v2299;
                      if (v800)
                        goto LABEL_1229;
LABEL_1227:
                      v795 = (char *)v778 + v794++;
                    }
LABEL_1228:
                    *((_BYTE *)v782 + v793++) = *v795;
                    if (v793 >= v785)
                      goto LABEL_1229;
                    continue;
                  }
                }
              }
            }
            else if ((v790 & 0x80000000) != 0)
            {
              goto LABEL_1210;
            }
            v792 = (char *)v782 + v781;
            v248 = (char *)v778 + v781;
            v249 = v785 - v781;
            v783 = (unint64_t)v2177;
            if (v785 - v781 == 1)
              goto LABEL_1206;
LABEL_1203:
            v780 = v2182;
            if (v249)
              memcpy(v792, v248, v249);
LABEL_1207:
            if (*((_QWORD *)v779 + 2))
              goto LABEL_1410;
            v781 += v783;
            if (v781 >= v780)
            {
              v776 = v783;
              v777 = v782;
              if (v783 >= v780)
                goto LABEL_1407;
              goto LABEL_1185;
            }
          }
          v2334 = 0;
          v2335 = 0;
          *(_QWORD *)&v2332 = 10;
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v787, v249, v250, v251, v252, v253, v254);
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v788, v1120, v1121, v1122, v1123, v1124, v1125);
          if (v2334)
          {
            JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
            v790 = 0;
          }
          else
          {
            v1128 = v2329;
            v1129 = v2339;
            if (v2339)
              goto LABEL_1789;
            v2036 = (unsigned int *)(v2329 + 80);
            v2037 = *(_DWORD *)(v2329 + 80);
            if ((v2037 & 0x20) == 0)
            {
              do
                v2038 = __ldaxr(v2036);
              while (__stlxr(v2038 | 0x20, v2036));
            }
            JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1126, v1127, v250, v251, v252, v253, v254);
            if (*v2036
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1128, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              v2039 = 0;
              v1129 = 0;
              v2127 = *(_QWORD *)(v1128 + 16);
            }
            else
            {
              v2039 = 1;
              v1129 = v2339;
            }
            if ((v2037 & 0x20) == 0)
            {
              do
                v2040 = __ldaxr(v2036);
              while (__stlxr(v2040 & 0xFFFFFFDF, v2036));
            }
            if (v2039)
LABEL_1789:
              v2127 = vmEntryToJavaScript((uint64_t)v1129, (JSC::VM *)v1128, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
            *(_BYTE *)(v1128 + 93120) = 1;
            v790 = v2127;
          }
          v779 = v2322;
          v776 = (uint64_t)v2162;
          goto LABEL_1792;
        }
        v1422 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2309 = v2153;
        while (v1422 < v2182)
        {
          v1423 = v2182;
          v2267 = v1422 + 4;
          if (v2182 >= v1422 + 4)
            v1423 = v1422 + 4;
          v1424 = v1423 - v1422;
          if (v1423 - v1422 >= 2)
          {
            v1425 = (char *)v2153 + v1422;
            v1426 = v2309;
            v1427 = 1;
            while (2)
            {
              v1428 = 0;
              v1429 = v1425[v1427];
              while (1)
              {
                v1430 = *((unsigned __int8 *)v1426 + v1428);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1429 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1430 | 0xFFFE000000000000, v1431, v1432, v1433, v1434, v1435, v1436);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1440 = JSC::call((uint64_t *)v2150, (uint64_t)v183, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1437, v1438, v1439);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1440;
                if (v1440 < 0xFFFE000000000000)
                {
                  if ((v1440 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1442) = v1440 != 7;
                  }
                  else
                  {
                    if (v1440 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1441);
                    else
                      *(_QWORD *)&v2083 = v1440 - 0x2000000000000;
                    LODWORD(v1442) = v2083 < 0.0;
                  }
                }
                else
                {
                  v1442 = (v1440 >> 31) & 1;
                }
                v1443 = *((_QWORD *)v2322 + 2);
                if (v1443 || !(_DWORD)v1442)
                {
                  if (v1443)
                    goto LABEL_3007;
                  goto LABEL_2274;
                }
                *((_BYTE *)v1426 + v1428-- + 1) = v1430;
                if (!(v1427 + v1428))
                {
                  v1444 = 0;
                  goto LABEL_2275;
                }
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3007;
LABEL_2274:
              v1444 = v1427 + v1428;
LABEL_2275:
              v1425[v1444] = v1429;
              ++v1427;
              v1426 = (JSC::MarkedVectorBase *)((char *)v1426 + 1);
              if (v1427 < v1424)
                continue;
              break;
            }
          }
          v2309 = (JSC::MarkedVectorBase *)((char *)v2309 + 4);
          v1422 = v2267;
          if (*((_QWORD *)v2322 + 2))
            goto LABEL_3007;
        }
        if (v2182 >= 5)
        {
          v2234 = 4;
          v1797 = v2153;
          v2319 = v2143;
          while (1)
          {
            v1798 = 0;
            v2277 = v2319;
            v2319 = v1797;
            v2178 = 2 * v2234;
            do
            {
              if (v2182 >= v1798 + v2234)
                v1799 = v1798 + v2234;
              else
                v1799 = v2182;
              if (v2182 >= v1799 + v2234)
                v1800 = v1799 + v2234;
              else
                v1800 = v2182;
              if (v1799 >= v1800)
                goto LABEL_2742;
              v1801 = *((unsigned __int8 *)v2319 + v1799);
              v1802 = *((unsigned __int8 *)v2319 + v1799 - 1);
              v2350[0] = v2322;
              LOBYTE(v2326) = 0;
              LODWORD(v2327) = 0;
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                || *((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3516;
              }
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1801 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1802 | 0xFFFE000000000000, v1803, v1804, v1805, v1806, v1807, v1808);
              if ((_BYTE)v2326)
              {
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3516:
                LODWORD(v1814) = 0;
                goto LABEL_2723;
              }
              v2348 = v2328;
              v2349 = v2327;
              v1812 = JSC::call((uint64_t *)v2150, (uint64_t)v183, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1809, v1810, v1811);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3516;
              }
              v2348 = (JSC::JSObject *)v1812;
              if (v1812 < 0xFFFE000000000000)
              {
                if ((v1812 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  LODWORD(v1814) = v1812 != 7;
                }
                else
                {
                  if (v1812 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1813);
                  else
                    *(_QWORD *)&v2123 = v1812 - 0x2000000000000;
                  LODWORD(v1814) = v2123 < 0.0;
                }
              }
              else
              {
                v1814 = (v1812 >> 31) & 1;
              }
LABEL_2723:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3007;
              if ((_DWORD)v1814)
              {
                v1815 = v1798;
                v1816 = v1799;
                v1817 = v1798;
                if (v1800 > v1798)
                {
                  while (1)
                  {
                    if (v1816 < v1800)
                    {
                      if (v1817 >= v1799)
                      {
                        v1818 = (char *)v2319 + v1816;
LABEL_2741:
                        ++v1816;
                        goto LABEL_2738;
                      }
                      v1818 = (char *)v2319 + v1816;
                      v1819 = *((unsigned __int8 *)v2319 + v1816);
                      v1820 = *((unsigned __int8 *)v2319 + v1817);
                      v2350[0] = v2322;
                      LOBYTE(v2326) = 0;
                      LODWORD(v2327) = 0;
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)|| *((_DWORD *)v2322 + 20)&& JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3403;
                      }
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1819 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1820 | 0xFFFE000000000000, v1821, v1822, v1823, v1824, v1825, v1826);
                      if ((_BYTE)v2326)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3403:
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_3007;
                        goto LABEL_2737;
                      }
                      v2348 = v2328;
                      v2349 = v2327;
                      v1830 = JSC::call((uint64_t *)v2150, (uint64_t)v183, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1827, v1828, v1829);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3403;
                      }
                      v2348 = (JSC::JSObject *)v1830;
                      if (v1830 < 0xFFFE000000000000)
                      {
                        if ((v1830 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          LODWORD(v1832) = v1830 != 7;
                        }
                        else
                        {
                          if (v1830 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1831);
                          else
                            *(_QWORD *)&v2113 = v1830 - 0x2000000000000;
                          LODWORD(v1832) = v2113 < 0.0;
                        }
                      }
                      else
                      {
                        v1832 = (v1830 >> 31) & 1;
                      }
                      v1833 = *((_QWORD *)v2322 + 2);
                      if (!v1833 && (_DWORD)v1832)
                        goto LABEL_2741;
                      if (v1833)
                        goto LABEL_3007;
                    }
LABEL_2737:
                    v1818 = (char *)v2319 + v1817++;
LABEL_2738:
                    *((_BYTE *)v2277 + v1815++) = *v1818;
                    if (v1815 >= v1800)
                      goto LABEL_2744;
                  }
                }
                goto LABEL_2745;
              }
LABEL_2742:
              v1834 = (char *)v2277 + v1798;
              v241 = (char *)v2319 + v1798;
              v242 = v1800 - v1798;
              if (v1800 - v1798 == 1)
              {
                *v1834 = *v241;
              }
              else if (v242)
              {
                memcpy(v1834, v241, v242);
              }
LABEL_2744:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3007;
LABEL_2745:
              v1798 += v2178;
            }
            while (v1798 < v2182);
            v2234 *= 2;
            v1797 = v2277;
            if (v2178 >= v2182)
              goto LABEL_3004;
          }
        }
        v2277 = v2153;
LABEL_3004:
        v1998 = v2153;
        if (v2277 != v2153)
          v1998 = v2143;
        v2153 = v1998;
LABEL_3007:
        if (*((_DWORD *)v2347 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
        {
          goto LABEL_3606;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
LABEL_1412:
        if (JSC::JSArrayBufferView::isDetached(v2151))
          goto LABEL_1421;
        v869 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
        v870 = v2182;
LABEL_1414:
        if (v870 >= v869)
          v851 = v869;
        else
          v851 = v870;
        if (v851 == 1)
        {
LABEL_1418:
          *(_BYTE *)__src = *(_BYTE *)v2153;
          goto LABEL_1421;
        }
        if (!v851)
          goto LABEL_1421;
        goto LABEL_1420;
      case '*':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v144, v145, v146, v147, v148, v149, v150))
        {
          return 0;
        }
        v151 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::sort((uint64_t)v2151, v144, v145, v146, v147, v148, v149, v150);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2155 = JSC::JSArrayBufferView::length(v2151, v320, v321, v322, v323, v324, v325, v326);
        if (v2155 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2155 & 0x8000000000000000) != 0
          || (WTF::Vector<short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, 2 * v2155) & 1) == 0)
        {
          goto LABEL_2010;
        }
        v2138 = (JSC::MarkedVectorBase *)((char *)__dst + 2 * v2155);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, 2 * v2155);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v151, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v328 = 0;
          while (1)
          {
            v329 = v2155;
            if (v328 >= v2155)
              break;
            v2242 = v328 + 4;
            if (v2155 >= v328 + 4)
              v329 = v328 + 4;
            v330 = v329 - v328;
            v331 = *((_QWORD *)v2322 + 2);
            v2284 = v330;
            if (v330 >= 2)
            {
              v332 = (char *)v2153 + 2 * v328;
              for (i = 1; i < v2284; ++i)
              {
                if (v331)
                  goto LABEL_1342;
                v334 = *(__int16 *)&v332[2 * i];
                v335 = i - 1;
                v336 = *(__int16 *)&v332[2 * i - 2];
                v337 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v338 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v334 | 0xFFFE000000000000, v336 | 0xFFFE000000000000);
                  else
                    v338 = 0;
                  *(_BYTE *)(v337 + 93120) = 1;
                  if (*(_DWORD *)(v337 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v337, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v338 = 0;
                    goto LABEL_434;
                  }
                  if (v338)
                    goto LABEL_434;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v334 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v336 | 0xFFFE000000000000, v993, v994, v995, v996, v997, v998);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                  v338 = 0;
                }
                else
                {
                  v1001 = v2329;
                  v1002 = v2339;
                  if (v2339)
                    goto LABEL_1579;
                  v1931 = (unsigned int *)(v2329 + 80);
                  v1932 = *(_DWORD *)(v2329 + 80);
                  if ((v1932 & 0x20) == 0)
                  {
                    do
                      v1933 = __ldaxr(v1931);
                    while (__stlxr(v1933 | 0x20, v1931));
                  }
                  JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v999, v1000, v250, v251, v252, v253, v254);
                  if (*v1931
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1001, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v1934 = 0;
                    v1002 = 0;
                    v2206 = *(_QWORD *)(v1001 + 16);
                  }
                  else
                  {
                    v1934 = 1;
                    v1002 = v2339;
                  }
                  if ((v1932 & 0x20) == 0)
                  {
                    do
                      v1935 = __ldaxr(v1931);
                    while (__stlxr(v1935 & 0xFFFFFFDF, v1931));
                  }
                  if (v1934)
LABEL_1579:
                    v2206 = vmEntryToJavaScript((uint64_t)v1002, (JSC::VM *)v1001, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                  *(_BYTE *)(v1001 + 93120) = 1;
                  v338 = v2206;
                }
LABEL_434:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1342;
                v2348 = (JSC::JSObject *)v338;
                if (v338 <= 0xFFFDFFFFFFFFFFFFLL)
                {
                  if ((v338 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v331 = 0;
                    LODWORD(v339) = v338 != 7;
                  }
                  else
                  {
                    if (v338 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v327);
                      v331 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v331 = 0;
                      v327.i64[0] = v338 - 0x2000000000000;
                    }
                    LODWORD(v339) = *(double *)v327.i64 < 0.0;
                  }
                }
                else
                {
                  v331 = 0;
                  v339 = (v338 >> 31) & 1;
                }
                v340 = v331 == 0;
                if (v331 || !(_DWORD)v339)
                {
                  v335 = i;
LABEL_452:
                  v346 = v335;
                  if (!v340)
                    break;
                }
                else
                {
                  *(_WORD *)&v332[2 * i] = v336;
                  if (i != 1)
                  {
                    while (1)
                    {
                      v341 = v335 - 1;
                      v342 = *(__int16 *)&v332[2 * v335 - 2];
                      v343 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v344 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v334 | 0xFFFE000000000000, v342 | 0xFFFE000000000000);
                        else
                          v344 = 0;
                        *(_BYTE *)(v343 + 93120) = 1;
                        if (*(_DWORD *)(v343 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v343, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
                          goto LABEL_1836;
                        }
                        if (v344)
                          goto LABEL_445;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v334 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v342 | 0xFFFE000000000000, v1140, v1141, v1142, v1143, v1144, v1145);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1836:
                        v344 = 0;
                        goto LABEL_445;
                      }
                      v1148 = v2329;
                      v1149 = v2339;
                      if (v2339)
                        goto LABEL_1817;
                      v2046 = (unsigned int *)(v2329 + 80);
                      v2047 = *(_DWORD *)(v2329 + 80);
                      if ((v2047 & 0x20) == 0)
                      {
                        do
                          v2048 = __ldaxr(v2046);
                        while (__stlxr(v2048 | 0x20, v2046));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1146, v1147, v250, v251, v252, v253, v254);
                      if (*v2046
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1148, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v2049 = 0;
                        v1149 = 0;
                        v2206 = *(_QWORD *)(v1148 + 16);
                      }
                      else
                      {
                        v2049 = 1;
                        v1149 = v2339;
                      }
                      if ((v2047 & 0x20) == 0)
                      {
                        do
                          v2050 = __ldaxr(v2046);
                        while (__stlxr(v2050 & 0xFFFFFFDF, v2046));
                      }
                      if (v2049)
LABEL_1817:
                        v2206 = vmEntryToJavaScript((uint64_t)v1149, (JSC::VM *)v1148, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v1148 + 93120) = 1;
                      v344 = v2206;
LABEL_445:
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1342;
                      v2348 = (JSC::JSObject *)v344;
                      if (v344 < 0xFFFE000000000000)
                      {
                        if ((v344 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v331 = 0;
                          LODWORD(v345) = v344 != 7;
                        }
                        else
                        {
                          if (v344 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v327);
                            v331 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v331 = 0;
                            v327.i64[0] = v344 - 0x2000000000000;
                          }
                          LODWORD(v345) = *(double *)v327.i64 < 0.0;
                        }
                      }
                      else
                      {
                        v331 = 0;
                        v345 = (v344 >> 31) & 1;
                      }
                      v340 = v331 == 0;
                      if (v331 || !(_DWORD)v345)
                        goto LABEL_452;
                      v331 = 0;
                      v346 = 0;
                      *(_WORD *)&v332[2 * v335--] = v342;
                      if (!v341)
                        goto LABEL_453;
                    }
                  }
                  v331 = 0;
                  v346 = 0;
                }
LABEL_453:
                *(_WORD *)&v332[2 * v346] = v334;
              }
            }
            v328 = v2242;
            if (v331)
              goto LABEL_1342;
          }
          if (v2155 < 5)
          {
            v565 = v2153;
LABEL_1339:
            v859 = v2153;
            if (v565 != v2153)
              v859 = v2138;
            v2153 = v859;
            goto LABEL_1342;
          }
          v559 = 4;
          v560 = v2138;
          v561 = v2153;
          v562 = v2155;
          v563 = v2322;
LABEL_821:
          v564 = 0;
          v565 = v560;
          v566 = 2 * v559;
          v2184 = (JSC::MarkedVectorBase *)v559;
          v2210 = v560;
          v2250 = v561;
          v2175 = (JSC::MarkedVectorBase *)(2 * v559);
          while (1)
          {
            if (v562 >= v564 + v559)
              v567 = v564 + v559;
            else
              v567 = v562;
            if (v562 >= v567 + v559)
              v568 = v567 + v559;
            else
              v568 = v562;
            if (v567 >= v568)
            {
              v575 = v568 - v564;
              if (v568 == v564)
                goto LABEL_863;
              v576 = (_WORD *)((char *)v565 + 2 * v564);
              goto LABEL_842;
            }
            if (*((_QWORD *)v563 + 2))
              goto LABEL_1342;
            v569 = v567;
            v570 = *((__int16 *)v561 + v567) | 0xFFFE000000000000;
            v2293 = v567;
            v571 = *((__int16 *)v561 + v567 - 1) | 0xFFFE000000000000;
            v572 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            if (v2340 <= 3)
            {
              if (v2339)
                v573 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v570, v571);
              else
                v573 = 0;
              *(_BYTE *)(v572 + 93120) = 1;
              if (*(_DWORD *)(v572 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v572, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
              {
                v573 = 0;
                goto LABEL_835;
              }
              if (v573)
                goto LABEL_835;
            }
            v2334 = 0;
            v2335 = 0;
            *(_QWORD *)&v2332 = 10;
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v570, v249, v250, v251, v252, v253, v254);
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v571, v1054, v1055, v1056, v1057, v1058, v1059);
            if (v2334)
            {
              JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
              v573 = 0;
            }
            else
            {
              v1062 = v2329;
              v1063 = v2339;
              if (v2339)
                goto LABEL_1705;
              v2006 = (unsigned int *)(v2329 + 80);
              v2007 = *(_DWORD *)(v2329 + 80);
              if ((v2007 & 0x20) == 0)
              {
                do
                  v2008 = __ldaxr(v2006);
                while (__stlxr(v2008 | 0x20, v2006));
              }
              JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1060, v1061, v250, v251, v252, v253, v254);
              if (*v2006
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1062, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
              {
                v2009 = 0;
                v1063 = 0;
                v2127 = *(_QWORD *)(v1062 + 16);
              }
              else
              {
                v2009 = 1;
                v1063 = v2339;
              }
              if ((v2007 & 0x20) == 0)
              {
                do
                  v2010 = __ldaxr(v2006);
                while (__stlxr(v2010 & 0xFFFFFFDF, v2006));
              }
              if (v2009)
LABEL_1705:
                v2127 = vmEntryToJavaScript((uint64_t)v1063, (JSC::VM *)v1062, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
              *(_BYTE *)(v1062 + 93120) = 1;
              v573 = v2127;
            }
            v563 = v2322;
            v562 = v2155;
LABEL_835:
            v574 = v2293;
            if (*((_QWORD *)v563 + 2))
              goto LABEL_1342;
            v2348 = (JSC::JSObject *)v573;
            if (v573 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v573 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v574 = v2293;
                v563 = v2322;
                v562 = v2155;
                if (v573 != 7)
                  goto LABEL_845;
              }
              else
              {
                if (v573 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v327);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1342:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
                      goto LABEL_2359;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                    goto LABEL_1344;
                  }
                }
                else
                {
                  v327.i64[0] = v573 - 0x2000000000000;
                }
                v574 = v2293;
                v563 = v2322;
                v562 = v2155;
                if (*(double *)v327.i64 < 0.0)
                {
LABEL_845:
                  v577 = v564;
                  v578 = v564;
                  v561 = v2250;
                  if (v568 <= v564)
                  {
LABEL_862:
                    v563 = v2322;
                    v562 = v2155;
                    v566 = (unint64_t)v2175;
                    v559 = (uint64_t)v2184;
                    goto LABEL_863;
                  }
                  while (2)
                  {
                    if (v569 < v568)
                    {
                      v579 = (__int16 *)((char *)v561 + 2 * v569);
                      if (v578 >= v574)
                        goto LABEL_858;
                      v580 = *v579 | 0xFFFE000000000000;
                      v581 = *((__int16 *)v561 + v578) | 0xFFFE000000000000;
                      v582 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v583 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v580, v581);
                        else
                          v583 = 0;
                        *(_BYTE *)(v582 + 93120) = 1;
                        if (*(_DWORD *)(v582 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v582, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
LABEL_2882:
                          v583 = 0;
                          goto LABEL_853;
                        }
                        if (v583)
                          goto LABEL_853;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v580, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v581, v586, v587, v588, v589, v590, v591);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        goto LABEL_2882;
                      }
                      v594 = v2329;
                      v595 = v2339;
                      if (v2339)
                        goto LABEL_871;
                      v1956 = (unsigned int *)(v2329 + 80);
                      v1957 = *(_DWORD *)(v2329 + 80);
                      if ((v1957 & 0x20) == 0)
                      {
                        do
                          v1958 = __ldaxr(v1956);
                        while (__stlxr(v1958 | 0x20, v1956));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v592, v593, v250, v251, v252, v253, v254);
                      if (*v1956
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v594, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v1959 = 0;
                        v595 = 0;
                        v2129 = *(_QWORD *)(v594 + 16);
                      }
                      else
                      {
                        v1959 = 1;
                        v595 = v2339;
                      }
                      if ((v1957 & 0x20) == 0)
                      {
                        do
                          v1960 = __ldaxr(v1956);
                        while (__stlxr(v1960 & 0xFFFFFFDF, v1956));
                      }
                      if (v1959)
LABEL_871:
                        v2129 = vmEntryToJavaScript((uint64_t)v595, (JSC::VM *)v594, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v594 + 93120) = 1;
                      v583 = v2129;
LABEL_853:
                      v574 = v2293;
                      v565 = v2210;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1342;
                      v2348 = (JSC::JSObject *)v583;
                      if (v583 < 0xFFFE000000000000)
                      {
                        if ((v583 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v584 = 0;
                          LODWORD(v585) = v583 != 7;
                        }
                        else
                        {
                          if (v583 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v327);
                            v584 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v584 = 0;
                            v327.i64[0] = v583 - 0x2000000000000;
                          }
                          LODWORD(v585) = *(double *)v327.i64 < 0.0;
                        }
                        v565 = v2210;
                        v574 = v2293;
                      }
                      else
                      {
                        v584 = 0;
                        v585 = (v583 >> 31) & 1;
                      }
                      v561 = v2250;
                      if (!v584)
                      {
                        if ((_DWORD)v585)
                        {
LABEL_858:
                          ++v569;
                          goto LABEL_861;
                        }
                      }
                      if (v584)
                        goto LABEL_862;
                    }
                    v579 = (__int16 *)((char *)v561 + 2 * v578++);
LABEL_861:
                    *((_WORD *)v565 + v577++) = *v579;
                    if (v577 >= v568)
                      goto LABEL_862;
                    continue;
                  }
                }
              }
            }
            else if ((v573 & 0x80000000) != 0)
            {
              goto LABEL_845;
            }
            v575 = v568 - v564;
            v566 = (unint64_t)v2175;
            v559 = (uint64_t)v2184;
            if (v568 != v564)
            {
              v576 = (_WORD *)((char *)v565 + 2 * v564);
              v561 = v2250;
LABEL_842:
              v248 = (char *)v561 + 2 * v564;
              if (v575 == 1)
                *v576 = *(_WORD *)v248;
              else
                memcpy(v576, v248, 2 * v575);
              goto LABEL_863;
            }
            v561 = v2250;
LABEL_863:
            if (*((_QWORD *)v563 + 2))
              goto LABEL_1342;
            v564 += v566;
            if (v564 >= v562)
            {
              v559 = v566;
              v560 = v561;
              v561 = v565;
              if (v566 >= v562)
                goto LABEL_1339;
              goto LABEL_821;
            }
          }
        }
        v1304 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2222 = (char *)v2153 + 2;
        while (v1304 < v2155)
        {
          v1305 = v2155;
          v2194 = (JSC::MarkedVectorBase *)(v1304 + 4);
          if (v2155 >= v1304 + 4)
            v1305 = v1304 + 4;
          v2262 = v1305 - v1304;
          if (v1305 - v1304 < 2)
          {
            v1327 = *((_QWORD *)v2322 + 2);
          }
          else
          {
            v2304 = (char *)v2153 + 2 * v1304;
            v1306 = v2222;
            v1307 = 1;
            while (2)
            {
              v1308 = *(_WORD *)&v2304[2 * v1307];
              v1309 = v1306;
              v1310 = v1307;
              v1311 = v1306;
              while (1)
              {
                v1313 = (__int16)*--v1311;
                v1312 = v1313;
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1308 & 0xFFFFFFFFLL | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1312 | 0xFFFE000000000000, v1314, v1315, v1316, v1317, v1318, v1319);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1323 = JSC::call((uint64_t *)v2150, (uint64_t)v151, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1320, v1321, v1322);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1323;
                if (v1323 < 0xFFFE000000000000)
                {
                  if ((v1323 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1325) = v1323 != 7;
                  }
                  else
                  {
                    if (v1323 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1324);
                    else
                      *(_QWORD *)&v2078 = v1323 - 0x2000000000000;
                    LODWORD(v1325) = v2078 < 0.0;
                  }
                }
                else
                {
                  v1325 = (v1323 >> 31) & 1;
                }
                v1326 = *((_QWORD *)v2322 + 2);
                if (v1326 || !(_DWORD)v1325)
                {
                  if (v1326)
                    goto LABEL_2977;
                  goto LABEL_2161;
                }
                *v1309 = v1312;
                v1309 = v1311;
                if (!--v1310)
                  goto LABEL_2161;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2977;
LABEL_2161:
              *(_WORD *)&v2304[2 * v1310] = v1308;
              ++v1307;
              ++v1306;
              if (v1307 < v2262)
                continue;
              break;
            }
            v1327 = 0;
          }
          v2222 += 8;
          v1304 = (unint64_t)v2194;
          if (v1327)
            goto LABEL_2977;
        }
        if (v2155 >= 5)
        {
          v2229 = 4;
          v1601 = v2138;
          v2314 = v2153;
          while (1)
          {
            v1602 = 0;
            v2272 = v1601;
            v2200 = 2 * v2229;
            do
            {
              if (v2155 >= v1602 + v2229)
                v1603 = v1602 + v2229;
              else
                v1603 = v2155;
              if (v2155 >= v1603 + v2229)
                v1604 = v1603 + v2229;
              else
                v1604 = v2155;
              if (v1603 >= v1604)
                goto LABEL_2526;
              v1605 = (__int16 *)((char *)v2314 + 2 * v1603);
              v1606 = *v1605;
              v1607 = *(v1605 - 1);
              v2350[0] = v2322;
              LOBYTE(v2326) = 0;
              LODWORD(v2327) = 0;
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                || *((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3506;
              }
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1606 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1607 | 0xFFFE000000000000, v1608, v1609, v1610, v1611, v1612, v1613);
              if ((_BYTE)v2326)
              {
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3506:
                LODWORD(v1619) = 0;
                goto LABEL_2507;
              }
              v2348 = v2328;
              v2349 = v2327;
              v1617 = JSC::call((uint64_t *)v2150, (uint64_t)v151, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1614, v1615, v1616);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3506;
              }
              v2348 = (JSC::JSObject *)v1617;
              if (v1617 < 0xFFFE000000000000)
              {
                if ((v1617 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  LODWORD(v1619) = v1617 != 7;
                }
                else
                {
                  if (v1617 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1618);
                  else
                    *(_QWORD *)&v2118 = v1617 - 0x2000000000000;
                  LODWORD(v1619) = v2118 < 0.0;
                }
              }
              else
              {
                v1619 = (v1617 >> 31) & 1;
              }
LABEL_2507:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2977;
              if ((_DWORD)v1619)
              {
                v1620 = v1602;
                v1621 = v1603;
                v1622 = v1602;
                if (v1604 > v1602)
                {
                  while (1)
                  {
                    if (v1621 < v1604)
                    {
                      if (v1622 >= v1603)
                      {
                        v1623 = (__int16 *)((char *)v2314 + 2 * v1621);
LABEL_2525:
                        ++v1621;
                        goto LABEL_2522;
                      }
                      v1623 = (__int16 *)((char *)v2314 + 2 * v1621);
                      v1624 = *v1623;
                      v1625 = *((__int16 *)v2314 + v1622);
                      v2350[0] = v2322;
                      LOBYTE(v2326) = 0;
                      LODWORD(v2327) = 0;
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)|| *((_DWORD *)v2322 + 20)&& JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3388;
                      }
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1624 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1625 | 0xFFFE000000000000, v1626, v1627, v1628, v1629, v1630, v1631);
                      if ((_BYTE)v2326)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3388:
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_2977;
                        goto LABEL_2521;
                      }
                      v2348 = v2328;
                      v2349 = v2327;
                      v1635 = JSC::call((uint64_t *)v2150, (uint64_t)v151, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1632, v1633, v1634);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3388;
                      }
                      v2348 = (JSC::JSObject *)v1635;
                      if (v1635 < 0xFFFE000000000000)
                      {
                        if ((v1635 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          LODWORD(v1637) = v1635 != 7;
                        }
                        else
                        {
                          if (v1635 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1636);
                          else
                            *(_QWORD *)&v2108 = v1635 - 0x2000000000000;
                          LODWORD(v1637) = v2108 < 0.0;
                        }
                      }
                      else
                      {
                        v1637 = (v1635 >> 31) & 1;
                      }
                      v1638 = *((_QWORD *)v2322 + 2);
                      if (!v1638 && (_DWORD)v1637)
                        goto LABEL_2525;
                      if (v1638)
                        goto LABEL_2977;
                    }
LABEL_2521:
                    v1623 = (__int16 *)((char *)v2314 + 2 * v1622++);
LABEL_2522:
                    *((_WORD *)v2272 + v1620++) = *v1623;
                    if (v1620 >= v1604)
                      goto LABEL_2530;
                  }
                }
                goto LABEL_2531;
              }
LABEL_2526:
              v1639 = v1604 - v1602;
              if (v1604 != v1602)
              {
                v1640 = (_WORD *)((char *)v2272 + 2 * v1602);
                v241 = (char *)v2314 + 2 * v1602;
                if (v1639 == 1)
                  *v1640 = *(_WORD *)v241;
                else
                  memcpy(v1640, v241, 2 * v1639);
              }
LABEL_2530:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2977;
LABEL_2531:
              v1602 += v2200;
            }
            while (v1602 < v2155);
            v2229 *= 2;
            v1601 = v2314;
            v2314 = v2272;
            if (v2200 >= v2155)
              goto LABEL_2974;
          }
        }
        v2272 = v2153;
LABEL_2974:
        v1993 = v2153;
        if (v2272 != v2153)
          v1993 = v2138;
        v2153 = v1993;
LABEL_2977:
        if (*((_DWORD *)v2347 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
        {
          goto LABEL_3606;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
LABEL_1344:
        if (JSC::JSArrayBufferView::isDetached(v2151))
          goto LABEL_1421;
        v860 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
        v861 = v2155;
        goto LABEL_1354;
      case '+':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v160, v161, v162, v163, v164, v165, v166))
        {
          return 0;
        }
        v167 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::sort((uint64_t)v2151, v160, v161, v162, v163, v164, v165, v166);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2171 = JSC::JSArrayBufferView::length(v2151, v367, v368, v369, v370, v371, v372, v373);
        if (v2171 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2171 & 0x8000000000000000) != 0
          || (WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, 2 * v2171) & 1) == 0)
        {
          goto LABEL_2010;
        }
        v2140 = (JSC::MarkedVectorBase *)((char *)__dst + 2 * v2171);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, 2 * v2171);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v167, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v375 = 0;
          while (1)
          {
            v376 = v2171;
            if (v375 >= v2171)
              break;
            v2244 = v375 + 4;
            if (v2171 >= v375 + 4)
              v376 = v375 + 4;
            v377 = v376 - v375;
            v378 = *((_QWORD *)v2322 + 2);
            v2286 = v377;
            if (v377 >= 2)
            {
              v379 = (char *)v2153 + 2 * v375;
              for (j = 1; j < v2286; ++j)
              {
                if (v378)
                  goto LABEL_1350;
                v381 = *(unsigned __int16 *)&v379[2 * j];
                v382 = j - 1;
                v383 = *(unsigned __int16 *)&v379[2 * j - 2];
                v384 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v385 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v381 | 0xFFFE000000000000, v383 | 0xFFFE000000000000);
                  else
                    v385 = 0;
                  *(_BYTE *)(v384 + 93120) = 1;
                  if (*(_DWORD *)(v384 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v384, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v385 = 0;
                    goto LABEL_512;
                  }
                  if (v385)
                    goto LABEL_512;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v381 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v383 | 0xFFFE000000000000, v1003, v1004, v1005, v1006, v1007, v1008);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                  v385 = 0;
                }
                else
                {
                  v1011 = v2329;
                  v1012 = v2339;
                  if (v2339)
                    goto LABEL_1583;
                  v1936 = (unsigned int *)(v2329 + 80);
                  v1937 = *(_DWORD *)(v2329 + 80);
                  if ((v1937 & 0x20) == 0)
                  {
                    do
                      v1938 = __ldaxr(v1936);
                    while (__stlxr(v1938 | 0x20, v1936));
                  }
                  JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1009, v1010, v250, v251, v252, v253, v254);
                  if (*v1936
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1011, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v1939 = 0;
                    v1012 = 0;
                    v2206 = *(_QWORD *)(v1011 + 16);
                  }
                  else
                  {
                    v1939 = 1;
                    v1012 = v2339;
                  }
                  if ((v1937 & 0x20) == 0)
                  {
                    do
                      v1940 = __ldaxr(v1936);
                    while (__stlxr(v1940 & 0xFFFFFFDF, v1936));
                  }
                  if (v1939)
LABEL_1583:
                    v2206 = vmEntryToJavaScript((uint64_t)v1012, (JSC::VM *)v1011, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                  *(_BYTE *)(v1011 + 93120) = 1;
                  v385 = v2206;
                }
LABEL_512:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1350;
                v2348 = (JSC::JSObject *)v385;
                if (v385 <= 0xFFFDFFFFFFFFFFFFLL)
                {
                  if ((v385 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v378 = 0;
                    LODWORD(v386) = v385 != 7;
                  }
                  else
                  {
                    if (v385 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v374);
                      v378 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v378 = 0;
                      v374.i64[0] = v385 - 0x2000000000000;
                    }
                    LODWORD(v386) = *(double *)v374.i64 < 0.0;
                  }
                }
                else
                {
                  v378 = 0;
                  v386 = (v385 >> 31) & 1;
                }
                v387 = v378 == 0;
                if (v378 || !(_DWORD)v386)
                {
                  v382 = j;
LABEL_530:
                  v393 = v382;
                  if (!v387)
                    break;
                }
                else
                {
                  *(_WORD *)&v379[2 * j] = v383;
                  if (j != 1)
                  {
                    while (1)
                    {
                      v388 = v382 - 1;
                      v389 = *(unsigned __int16 *)&v379[2 * v382 - 2];
                      v390 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v391 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v381 | 0xFFFE000000000000, v389 | 0xFFFE000000000000);
                        else
                          v391 = 0;
                        *(_BYTE *)(v390 + 93120) = 1;
                        if (*(_DWORD *)(v390 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v390, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
                          goto LABEL_1839;
                        }
                        if (v391)
                          goto LABEL_523;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v381 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v389 | 0xFFFE000000000000, v1150, v1151, v1152, v1153, v1154, v1155);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1839:
                        v391 = 0;
                        goto LABEL_523;
                      }
                      v1158 = v2329;
                      v1159 = v2339;
                      if (v2339)
                        goto LABEL_1821;
                      v2051 = (unsigned int *)(v2329 + 80);
                      v2052 = *(_DWORD *)(v2329 + 80);
                      if ((v2052 & 0x20) == 0)
                      {
                        do
                          v2053 = __ldaxr(v2051);
                        while (__stlxr(v2053 | 0x20, v2051));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1156, v1157, v250, v251, v252, v253, v254);
                      if (*v2051
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1158, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v2054 = 0;
                        v1159 = 0;
                        v2206 = *(_QWORD *)(v1158 + 16);
                      }
                      else
                      {
                        v2054 = 1;
                        v1159 = v2339;
                      }
                      if ((v2052 & 0x20) == 0)
                      {
                        do
                          v2055 = __ldaxr(v2051);
                        while (__stlxr(v2055 & 0xFFFFFFDF, v2051));
                      }
                      if (v2054)
LABEL_1821:
                        v2206 = vmEntryToJavaScript((uint64_t)v1159, (JSC::VM *)v1158, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v1158 + 93120) = 1;
                      v391 = v2206;
LABEL_523:
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1350;
                      v2348 = (JSC::JSObject *)v391;
                      if (v391 < 0xFFFE000000000000)
                      {
                        if ((v391 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v378 = 0;
                          LODWORD(v392) = v391 != 7;
                        }
                        else
                        {
                          if (v391 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v374);
                            v378 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v378 = 0;
                            v374.i64[0] = v391 - 0x2000000000000;
                          }
                          LODWORD(v392) = *(double *)v374.i64 < 0.0;
                        }
                      }
                      else
                      {
                        v378 = 0;
                        v392 = (v391 >> 31) & 1;
                      }
                      v387 = v378 == 0;
                      if (v378 || !(_DWORD)v392)
                        goto LABEL_530;
                      v378 = 0;
                      v393 = 0;
                      *(_WORD *)&v379[2 * v382--] = v389;
                      if (!v388)
                        goto LABEL_531;
                    }
                  }
                  v378 = 0;
                  v393 = 0;
                }
LABEL_531:
                *(_WORD *)&v379[2 * v393] = v381;
              }
            }
            v375 = v2244;
            if (v378)
              goto LABEL_1350;
          }
          if (v2171 < 5)
          {
            v601 = v2153;
LABEL_1347:
            v862 = v2153;
            if (v601 != v2153)
              v862 = v2140;
            v2153 = v862;
            goto LABEL_1350;
          }
          v596 = 4;
          v597 = v2140;
          v598 = v2153;
          v599 = v2171;
LABEL_881:
          v600 = 0;
          v601 = v597;
          v602 = 2 * v596;
          v2158 = (JSC::MarkedVectorBase *)v596;
          v2211 = v597;
          v2251 = v598;
          v2185 = (JSC::MarkedVectorBase *)(2 * v596);
          while (1)
          {
            if (v599 >= v600 + v596)
              v603 = v600 + v596;
            else
              v603 = v599;
            if (v599 >= v603 + v596)
              v604 = v603 + v596;
            else
              v604 = v599;
            if (v603 >= v604)
            {
              v611 = v604 - v600;
              if (v604 == v600)
                goto LABEL_924;
              v612 = (_WORD *)((char *)v601 + 2 * v600);
              goto LABEL_902;
            }
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1350;
            v605 = v603;
            v606 = *((unsigned __int16 *)v598 + v603) | 0xFFFE000000000000;
            v607 = *((unsigned __int16 *)v598 + v603 - 1) | 0xFFFE000000000000;
            v608 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            v2294 = v603;
            if (v2340 > 3)
              goto LABEL_1708;
            v609 = v2339
                 ? vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v606, v607)
                 : 0;
            *(_BYTE *)(v608 + 93120) = 1;
            if (!*(_DWORD *)(v608 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v608, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              break;
            }
            v609 = 0;
LABEL_940:
            v610 = v2294;
LABEL_895:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1350;
            v2348 = (JSC::JSObject *)v609;
            if (v609 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v609 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v596 = (uint64_t)v2158;
                v599 = v2171;
                v610 = v2294;
                if (v609 != 7)
                  goto LABEL_905;
              }
              else
              {
                if (v609 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v374);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1350:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
                      goto LABEL_2359;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                    goto LABEL_1352;
                  }
                }
                else
                {
                  v374.i64[0] = v609 - 0x2000000000000;
                }
                v596 = (uint64_t)v2158;
                v599 = v2171;
                v610 = v2294;
                if (*(double *)v374.i64 < 0.0)
                {
LABEL_905:
                  v613 = v600;
                  v614 = v600;
                  v598 = v2251;
                  if (v604 <= v600)
                  {
LABEL_923:
                    v596 = (uint64_t)v2158;
                    v599 = v2171;
                    v602 = (unint64_t)v2185;
                    goto LABEL_924;
                  }
                  while (2)
                  {
                    if (v605 >= v604)
                      goto LABEL_921;
                    v615 = (_WORD *)((char *)v598 + 2 * v605);
                    if (v614 >= v610)
                    {
                      ++v605;
                    }
                    else
                    {
                      v616 = (unsigned __int16)*v615 | 0xFFFE000000000000;
                      v617 = *((unsigned __int16 *)v598 + v614) | 0xFFFE000000000000;
                      v618 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v619 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v616, v617);
                        else
                          v619 = 0;
                        *(_BYTE *)(v618 + 93120) = 1;
                        if (*(_DWORD *)(v618 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v618, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
LABEL_2884:
                          v619 = 0;
                          goto LABEL_913;
                        }
                        if (v619)
                          goto LABEL_913;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v616, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v617, v622, v623, v624, v625, v626, v627);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        goto LABEL_2884;
                      }
                      v630 = v2329;
                      v631 = v2339;
                      if (v2339)
                        goto LABEL_932;
                      v1961 = (unsigned int *)(v2329 + 80);
                      v1962 = *(_DWORD *)(v2329 + 80);
                      if ((v1962 & 0x20) == 0)
                      {
                        do
                          v1963 = __ldaxr(v1961);
                        while (__stlxr(v1963 | 0x20, v1961));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v628, v629, v250, v251, v252, v253, v254);
                      if (*v1961
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v630, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v1964 = 0;
                        v631 = 0;
                        v2129 = *(_QWORD *)(v630 + 16);
                      }
                      else
                      {
                        v1964 = 1;
                        v631 = v2339;
                      }
                      if ((v1962 & 0x20) == 0)
                      {
                        do
                          v1965 = __ldaxr(v1961);
                        while (__stlxr(v1965 & 0xFFFFFFDF, v1961));
                      }
                      if (v1964)
LABEL_932:
                        v2129 = vmEntryToJavaScript((uint64_t)v631, (JSC::VM *)v630, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v630 + 93120) = 1;
                      v619 = v2129;
LABEL_913:
                      v601 = v2211;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1350;
                      v2348 = (JSC::JSObject *)v619;
                      if (v619 < 0xFFFE000000000000)
                      {
                        if ((v619 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v620 = 0;
                          LODWORD(v621) = v619 != 7;
                        }
                        else
                        {
                          if (v619 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v374);
                            v620 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v620 = 0;
                            v374.i64[0] = v619 - 0x2000000000000;
                          }
                          LODWORD(v621) = *(double *)v374.i64 < 0.0;
                        }
                        v601 = v2211;
                      }
                      else
                      {
                        v620 = 0;
                        v621 = (v619 >> 31) & 1;
                      }
                      v598 = v2251;
                      if (!v620 && (_DWORD)v621)
                      {
                        ++v605;
                        v610 = v2294;
                        goto LABEL_922;
                      }
                      v610 = v2294;
                      if (v620)
                        goto LABEL_923;
LABEL_921:
                      v615 = (_WORD *)((char *)v598 + 2 * v614++);
                    }
LABEL_922:
                    *((_WORD *)v601 + v613++) = *v615;
                    if (v613 >= v604)
                      goto LABEL_923;
                    continue;
                  }
                }
              }
            }
            else if ((v609 & 0x80000000) != 0)
            {
              goto LABEL_905;
            }
            v611 = v604 - v600;
            v602 = (unint64_t)v2185;
            if (v604 != v600)
            {
              v612 = (_WORD *)((char *)v601 + 2 * v600);
              v598 = v2251;
LABEL_902:
              v248 = (char *)v598 + 2 * v600;
              if (v611 == 1)
                *v612 = *(_WORD *)v248;
              else
                memcpy(v612, v248, 2 * v611);
              goto LABEL_924;
            }
            v598 = v2251;
LABEL_924:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1350;
            v600 += v602;
            if (v600 >= v599)
            {
              v596 = v602;
              v597 = v598;
              v598 = v601;
              if (v602 >= v599)
                goto LABEL_1347;
              goto LABEL_881;
            }
          }
          v610 = v2294;
          if (v609)
            goto LABEL_895;
LABEL_1708:
          v2334 = 0;
          v2335 = 0;
          *(_QWORD *)&v2332 = 10;
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v606, v249, v250, v251, v252, v253, v254);
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v607, v1064, v1065, v1066, v1067, v1068, v1069);
          if (v2334)
          {
            JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
            v609 = 0;
          }
          else
          {
            v1072 = v2329;
            v1073 = v2339;
            if (v2339)
              goto LABEL_1710;
            v2011 = (unsigned int *)(v2329 + 80);
            v2012 = *(_DWORD *)(v2329 + 80);
            if ((v2012 & 0x20) == 0)
            {
              do
                v2013 = __ldaxr(v2011);
              while (__stlxr(v2013 | 0x20, v2011));
            }
            JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1070, v1071, v250, v251, v252, v253, v254);
            if (*v2011
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1072, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              v2014 = 0;
              v1073 = 0;
              v2127 = *(_QWORD *)(v1072 + 16);
            }
            else
            {
              v2014 = 1;
              v1073 = v2339;
            }
            if ((v2012 & 0x20) == 0)
            {
              do
                v2015 = __ldaxr(v2011);
              while (__stlxr(v2015 & 0xFFFFFFDF, v2011));
            }
            if (v2014)
LABEL_1710:
              v2127 = vmEntryToJavaScript((uint64_t)v1073, (JSC::VM *)v1072, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
            *(_BYTE *)(v1072 + 93120) = 1;
            v609 = v2127;
          }
          v596 = (uint64_t)v2158;
          v599 = v2171;
          goto LABEL_940;
        }
        v1351 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2223 = (char *)v2153 + 2;
        while (v1351 < v2171)
        {
          v1352 = v2171;
          v2195 = (JSC::MarkedVectorBase *)(v1351 + 4);
          if (v2171 >= v1351 + 4)
            v1352 = v1351 + 4;
          v2264 = v1352 - v1351;
          if (v1352 - v1351 < 2)
          {
            v1374 = *((_QWORD *)v2322 + 2);
          }
          else
          {
            v2306 = (char *)v2153 + 2 * v1351;
            v1353 = v2223;
            v1354 = 1;
            while (2)
            {
              v1355 = *(unsigned __int16 *)&v2306[2 * v1354];
              v1356 = v1353;
              v1357 = v1354;
              v1358 = v1353;
              while (1)
              {
                v1360 = (unsigned __int16)*--v1358;
                v1359 = v1360;
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1355 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1359 | 0xFFFE000000000000, v1361, v1362, v1363, v1364, v1365, v1366);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1370 = JSC::call((uint64_t *)v2150, (uint64_t)v167, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1367, v1368, v1369);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1370;
                if (v1370 < 0xFFFE000000000000)
                {
                  if ((v1370 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1372) = v1370 != 7;
                  }
                  else
                  {
                    if (v1370 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1371);
                    else
                      *(_QWORD *)&v2080 = v1370 - 0x2000000000000;
                    LODWORD(v1372) = v2080 < 0.0;
                  }
                }
                else
                {
                  v1372 = (v1370 >> 31) & 1;
                }
                v1373 = *((_QWORD *)v2322 + 2);
                if (v1373 || !(_DWORD)v1372)
                {
                  if (v1373)
                    goto LABEL_2989;
                  goto LABEL_2206;
                }
                *v1356 = v1359;
                v1356 = v1358;
                if (!--v1357)
                  goto LABEL_2206;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2989;
LABEL_2206:
              *(_WORD *)&v2306[2 * v1357] = v1355;
              ++v1354;
              ++v1353;
              if (v1354 < v2264)
                continue;
              break;
            }
            v1374 = 0;
          }
          v2223 += 8;
          v1351 = (unint64_t)v2195;
          if (v1374)
            goto LABEL_2989;
        }
        if (v2171 >= 5)
        {
          v2231 = 4;
          v1679 = v2140;
          v2316 = v2153;
          while (1)
          {
            v1680 = 0;
            v2274 = v1679;
            v2202 = 2 * v2231;
            do
            {
              if (v2171 >= v1680 + v2231)
                v1681 = v1680 + v2231;
              else
                v1681 = v2171;
              if (v2171 >= v1681 + v2231)
                v1682 = v1681 + v2231;
              else
                v1682 = v2171;
              if (v1681 >= v1682)
                goto LABEL_2613;
              v1683 = (unsigned __int16 *)((char *)v2316 + 2 * v1681);
              v1684 = *v1683;
              v1685 = *(v1683 - 1);
              v2350[0] = v2322;
              LOBYTE(v2326) = 0;
              LODWORD(v2327) = 0;
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                || *((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3510;
              }
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1684 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1685 | 0xFFFE000000000000, v1686, v1687, v1688, v1689, v1690, v1691);
              if ((_BYTE)v2326)
              {
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3510:
                LODWORD(v1697) = 0;
                goto LABEL_2594;
              }
              v2348 = v2328;
              v2349 = v2327;
              v1695 = JSC::call((uint64_t *)v2150, (uint64_t)v167, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1692, v1693, v1694);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3510;
              }
              v2348 = (JSC::JSObject *)v1695;
              if (v1695 < 0xFFFE000000000000)
              {
                if ((v1695 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  LODWORD(v1697) = v1695 != 7;
                }
                else
                {
                  if (v1695 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1696);
                  else
                    *(_QWORD *)&v2120 = v1695 - 0x2000000000000;
                  LODWORD(v1697) = v2120 < 0.0;
                }
              }
              else
              {
                v1697 = (v1695 >> 31) & 1;
              }
LABEL_2594:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2989;
              if ((_DWORD)v1697)
              {
                v1698 = v1680;
                v1699 = v1681;
                v1700 = v1680;
                if (v1682 > v1680)
                {
                  while (1)
                  {
                    if (v1699 < v1682)
                    {
                      if (v1700 >= v1681)
                      {
                        v1701 = (_WORD *)((char *)v2316 + 2 * v1699);
LABEL_2612:
                        ++v1699;
                        goto LABEL_2609;
                      }
                      v1701 = (_WORD *)((char *)v2316 + 2 * v1699);
                      v1702 = (unsigned __int16)*v1701;
                      v1703 = *((unsigned __int16 *)v2316 + v1700);
                      v2350[0] = v2322;
                      LOBYTE(v2326) = 0;
                      LODWORD(v2327) = 0;
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)|| *((_DWORD *)v2322 + 20)&& JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3394;
                      }
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1702 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1703 | 0xFFFE000000000000, v1704, v1705, v1706, v1707, v1708, v1709);
                      if ((_BYTE)v2326)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3394:
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_2989;
                        goto LABEL_2608;
                      }
                      v2348 = v2328;
                      v2349 = v2327;
                      v1713 = JSC::call((uint64_t *)v2150, (uint64_t)v167, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1710, v1711, v1712);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3394;
                      }
                      v2348 = (JSC::JSObject *)v1713;
                      if (v1713 < 0xFFFE000000000000)
                      {
                        if ((v1713 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          LODWORD(v1715) = v1713 != 7;
                        }
                        else
                        {
                          if (v1713 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1714);
                          else
                            *(_QWORD *)&v2110 = v1713 - 0x2000000000000;
                          LODWORD(v1715) = v2110 < 0.0;
                        }
                      }
                      else
                      {
                        v1715 = (v1713 >> 31) & 1;
                      }
                      v1716 = *((_QWORD *)v2322 + 2);
                      if (!v1716 && (_DWORD)v1715)
                        goto LABEL_2612;
                      if (v1716)
                        goto LABEL_2989;
                    }
LABEL_2608:
                    v1701 = (_WORD *)((char *)v2316 + 2 * v1700++);
LABEL_2609:
                    *((_WORD *)v2274 + v1698++) = *v1701;
                    if (v1698 >= v1682)
                      goto LABEL_2617;
                  }
                }
                goto LABEL_2618;
              }
LABEL_2613:
              v1717 = v1682 - v1680;
              if (v1682 != v1680)
              {
                v1718 = (_WORD *)((char *)v2274 + 2 * v1680);
                v241 = (char *)v2316 + 2 * v1680;
                if (v1717 == 1)
                  *v1718 = *(_WORD *)v241;
                else
                  memcpy(v1718, v241, 2 * v1717);
              }
LABEL_2617:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2989;
LABEL_2618:
              v1680 += v2202;
            }
            while (v1680 < v2171);
            v2231 *= 2;
            v1679 = v2316;
            v2316 = v2274;
            if (v2202 >= v2171)
              goto LABEL_2986;
          }
        }
        v2274 = v2153;
LABEL_2986:
        v1995 = v2153;
        if (v2274 != v2153)
          v1995 = v2140;
        v2153 = v1995;
LABEL_2989:
        if (*((_DWORD *)v2347 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
        {
          goto LABEL_3606;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
LABEL_1352:
        if (JSC::JSArrayBufferView::isDetached(v2151))
          goto LABEL_1421;
        v860 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
        v861 = v2171;
LABEL_1354:
        if (v861 >= v860)
          v861 = v860;
        if (!v861)
          goto LABEL_1421;
        if (v861 == 1)
        {
          *(_WORD *)__src = *(_WORD *)v2153;
LABEL_1421:
          v874 = __dst;
LABEL_1422:
          if (v2343 != v874 && v874)
          {
            __dst = 0;
            LODWORD(v2342) = 0;
            WTF::fastFree((unint64_t)v874, v850, v851, v852, v853, v854, v855, v856);
          }
          return v2151;
        }
        v851 = 2 * v861;
        goto LABEL_1420;
      case ',':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v168, v169, v170, v171, v172, v173, v174))
        {
          return 0;
        }
        v175 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::sort((uint64_t)v2151, v168, v169, v170, v171, v172, v173, v174);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2172 = JSC::JSArrayBufferView::length(v2151, v394, v395, v396, v397, v398, v399, v400);
        if (v2172 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2172 & 0x8000000000000000) != 0
          || (WTF::Vector<int,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, 2 * v2172) & 1) == 0)
        {
          goto LABEL_2010;
        }
        v2141 = (JSC::MarkedVectorBase *)((char *)__dst + 4 * v2172);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, 4 * v2172);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v175, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v402 = 0;
          while (1)
          {
            v403 = v2172;
            if (v402 >= v2172)
              break;
            v2245 = v402 + 4;
            if (v2172 >= v402 + 4)
              v403 = v402 + 4;
            v404 = v403 - v402;
            v405 = *((_QWORD *)v2322 + 2);
            v2287 = v404;
            if (v404 >= 2)
            {
              v406 = (char *)v2153 + 4 * v402;
              for (k = 1; k < v2287; ++k)
              {
                if (v405)
                  goto LABEL_1364;
                v408 = *(unsigned int *)&v406[4 * k];
                v409 = k - 1;
                v410 = *(unsigned int *)&v406[4 * k - 4];
                v411 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v412 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v408 | 0xFFFE000000000000, v410 | 0xFFFE000000000000);
                  else
                    v412 = 0;
                  *(_BYTE *)(v411 + 93120) = 1;
                  if (*(_DWORD *)(v411 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v411, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v412 = 0;
                    goto LABEL_557;
                  }
                  if (v412)
                    goto LABEL_557;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v408 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v410 | 0xFFFE000000000000, v1013, v1014, v1015, v1016, v1017, v1018);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                  v412 = 0;
                }
                else
                {
                  v1021 = v2329;
                  v1022 = v2339;
                  if (v2339)
                    goto LABEL_1587;
                  v1941 = (unsigned int *)(v2329 + 80);
                  v1942 = *(_DWORD *)(v2329 + 80);
                  if ((v1942 & 0x20) == 0)
                  {
                    do
                      v1943 = __ldaxr(v1941);
                    while (__stlxr(v1943 | 0x20, v1941));
                  }
                  JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1019, v1020, v250, v251, v252, v253, v254);
                  if (*v1941
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1021, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v1944 = 0;
                    v1022 = 0;
                    v2206 = *(_QWORD *)(v1021 + 16);
                  }
                  else
                  {
                    v1944 = 1;
                    v1022 = v2339;
                  }
                  if ((v1942 & 0x20) == 0)
                  {
                    do
                      v1945 = __ldaxr(v1941);
                    while (__stlxr(v1945 & 0xFFFFFFDF, v1941));
                  }
                  if (v1944)
LABEL_1587:
                    v2206 = vmEntryToJavaScript((uint64_t)v1022, (JSC::VM *)v1021, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                  *(_BYTE *)(v1021 + 93120) = 1;
                  v412 = v2206;
                }
LABEL_557:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1364;
                v2348 = (JSC::JSObject *)v412;
                if (v412 <= 0xFFFDFFFFFFFFFFFFLL)
                {
                  if ((v412 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v405 = 0;
                    LODWORD(v413) = v412 != 7;
                  }
                  else
                  {
                    if (v412 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v401);
                      v405 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v405 = 0;
                      v401.i64[0] = v412 - 0x2000000000000;
                    }
                    LODWORD(v413) = *(double *)v401.i64 < 0.0;
                  }
                }
                else
                {
                  v405 = 0;
                  v413 = (v412 >> 31) & 1;
                }
                v414 = v405 == 0;
                if (v405 || !(_DWORD)v413)
                {
                  v409 = k;
LABEL_575:
                  v420 = v409;
                  if (!v414)
                    break;
                }
                else
                {
                  *(_DWORD *)&v406[4 * k] = v410;
                  if (k != 1)
                  {
                    while (1)
                    {
                      v415 = v409 - 1;
                      v416 = *(unsigned int *)&v406[4 * v409 - 4];
                      v417 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v418 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v408 | 0xFFFE000000000000, v416 | 0xFFFE000000000000);
                        else
                          v418 = 0;
                        *(_BYTE *)(v417 + 93120) = 1;
                        if (*(_DWORD *)(v417 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v417, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
                          goto LABEL_1842;
                        }
                        if (v418)
                          goto LABEL_568;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v408 | 0xFFFE000000000000, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v416 | 0xFFFE000000000000, v1160, v1161, v1162, v1163, v1164, v1165);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1842:
                        v418 = 0;
                        goto LABEL_568;
                      }
                      v1168 = v2329;
                      v1169 = v2339;
                      if (v2339)
                        goto LABEL_1825;
                      v2056 = (unsigned int *)(v2329 + 80);
                      v2057 = *(_DWORD *)(v2329 + 80);
                      if ((v2057 & 0x20) == 0)
                      {
                        do
                          v2058 = __ldaxr(v2056);
                        while (__stlxr(v2058 | 0x20, v2056));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1166, v1167, v250, v251, v252, v253, v254);
                      if (*v2056
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1168, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v2059 = 0;
                        v1169 = 0;
                        v2206 = *(_QWORD *)(v1168 + 16);
                      }
                      else
                      {
                        v2059 = 1;
                        v1169 = v2339;
                      }
                      if ((v2057 & 0x20) == 0)
                      {
                        do
                          v2060 = __ldaxr(v2056);
                        while (__stlxr(v2060 & 0xFFFFFFDF, v2056));
                      }
                      if (v2059)
LABEL_1825:
                        v2206 = vmEntryToJavaScript((uint64_t)v1169, (JSC::VM *)v1168, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v1168 + 93120) = 1;
                      v418 = v2206;
LABEL_568:
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1364;
                      v2348 = (JSC::JSObject *)v418;
                      if (v418 < 0xFFFE000000000000)
                      {
                        if ((v418 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v405 = 0;
                          LODWORD(v419) = v418 != 7;
                        }
                        else
                        {
                          if (v418 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v401);
                            v405 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v405 = 0;
                            v401.i64[0] = v418 - 0x2000000000000;
                          }
                          LODWORD(v419) = *(double *)v401.i64 < 0.0;
                        }
                      }
                      else
                      {
                        v405 = 0;
                        v419 = (v418 >> 31) & 1;
                      }
                      v414 = v405 == 0;
                      if (v405 || !(_DWORD)v419)
                        goto LABEL_575;
                      v405 = 0;
                      v420 = 0;
                      *(_DWORD *)&v406[4 * v409--] = v416;
                      if (!v415)
                        goto LABEL_576;
                    }
                  }
                  v405 = 0;
                  v420 = 0;
                }
LABEL_576:
                *(_DWORD *)&v406[4 * v420] = v408;
              }
            }
            v402 = v2245;
            if (v405)
              goto LABEL_1364;
          }
          if (v2172 < 5)
          {
            v638 = v2153;
LABEL_1361:
            v863 = v2153;
            if (v638 != v2153)
              v863 = v2141;
            v2153 = v863;
            goto LABEL_1364;
          }
          v632 = 4;
          v633 = v2153;
          v634 = v2141;
          v635 = v2322;
          v636 = v2172;
LABEL_943:
          v637 = 0;
          v638 = v634;
          v634 = v633;
          v639 = 2 * v632;
          v2159 = (JSC::MarkedVectorBase *)v632;
          v2212 = v638;
          v2252 = v633;
          v2186 = (JSC::MarkedVectorBase *)(2 * v632);
          while (1)
          {
            if (v636 >= v637 + v632)
              v640 = v637 + v632;
            else
              v640 = v636;
            if (v636 >= v640 + v632)
              v641 = v640 + v632;
            else
              v641 = v636;
            if (v640 >= v641)
            {
              v648 = v641 - v637;
              if (v641 == v637)
                goto LABEL_985;
              goto LABEL_963;
            }
            if (*((_QWORD *)v635 + 2))
              goto LABEL_1364;
            v642 = v640;
            v643 = *((unsigned int *)v634 + v640) | 0xFFFE000000000000;
            v644 = *((unsigned int *)v634 + v640 - 1) | 0xFFFE000000000000;
            v645 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            v2295 = v640;
            if (v2340 > 3)
              goto LABEL_1713;
            v646 = v2339
                 ? vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v643, v644)
                 : 0;
            *(_BYTE *)(v645 + 93120) = 1;
            if (!*(_DWORD *)(v645 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v645, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              break;
            }
            v646 = 0;
LABEL_1001:
            v647 = v2295;
LABEL_957:
            v634 = v2252;
            if (*((_QWORD *)v635 + 2))
              goto LABEL_1364;
            v2348 = (JSC::JSObject *)v646;
            if (v646 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v646 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v647 = v2295;
                v635 = v2322;
                v632 = (uint64_t)v2159;
                v636 = v2172;
                v634 = v2252;
                if (v646 != 7)
                  goto LABEL_966;
              }
              else
              {
                if (v646 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v401);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1364:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
                      goto LABEL_2359;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                    goto LABEL_1366;
                  }
                }
                else
                {
                  v401.i64[0] = v646 - 0x2000000000000;
                }
                v647 = v2295;
                v635 = v2322;
                v632 = (uint64_t)v2159;
                v636 = v2172;
                v634 = v2252;
                if (*(double *)v401.i64 < 0.0)
                {
LABEL_966:
                  v650 = v637;
                  v651 = v637;
                  v638 = v2212;
                  if (v641 <= v637)
                  {
LABEL_984:
                    v635 = v2322;
                    v632 = (uint64_t)v2159;
                    v636 = v2172;
                    v639 = (unint64_t)v2186;
                    goto LABEL_985;
                  }
                  while (2)
                  {
                    if (v642 >= v641)
                      goto LABEL_982;
                    v652 = (char *)v634 + 4 * v642;
                    if (v651 >= v647)
                    {
                      ++v642;
                    }
                    else
                    {
                      v653 = *(unsigned int *)v652 | 0xFFFE000000000000;
                      v654 = *((unsigned int *)v634 + v651) | 0xFFFE000000000000;
                      v655 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v656 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v653, v654);
                        else
                          v656 = 0;
                        *(_BYTE *)(v655 + 93120) = 1;
                        if (*(_DWORD *)(v655 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v655, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
LABEL_2886:
                          v656 = 0;
                          goto LABEL_974;
                        }
                        if (v656)
                          goto LABEL_974;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v653, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v654, v659, v660, v661, v662, v663, v664);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        goto LABEL_2886;
                      }
                      v667 = v2329;
                      v668 = v2339;
                      if (v2339)
                        goto LABEL_993;
                      v1966 = (unsigned int *)(v2329 + 80);
                      v1967 = *(_DWORD *)(v2329 + 80);
                      if ((v1967 & 0x20) == 0)
                      {
                        do
                          v1968 = __ldaxr(v1966);
                        while (__stlxr(v1968 | 0x20, v1966));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v665, v666, v250, v251, v252, v253, v254);
                      if (*v1966
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v667, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v1969 = 0;
                        v668 = 0;
                        v2129 = *(_QWORD *)(v667 + 16);
                      }
                      else
                      {
                        v1969 = 1;
                        v668 = v2339;
                      }
                      if ((v1967 & 0x20) == 0)
                      {
                        do
                          v1970 = __ldaxr(v1966);
                        while (__stlxr(v1970 & 0xFFFFFFDF, v1966));
                      }
                      if (v1969)
LABEL_993:
                        v2129 = vmEntryToJavaScript((uint64_t)v668, (JSC::VM *)v667, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v667 + 93120) = 1;
                      v656 = v2129;
LABEL_974:
                      v634 = v2252;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1364;
                      v2348 = (JSC::JSObject *)v656;
                      if (v656 < 0xFFFE000000000000)
                      {
                        if ((v656 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v657 = 0;
                          LODWORD(v658) = v656 != 7;
                        }
                        else
                        {
                          if (v656 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v401);
                            v657 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v657 = 0;
                            v401.i64[0] = v656 - 0x2000000000000;
                          }
                          LODWORD(v658) = *(double *)v401.i64 < 0.0;
                        }
                        v634 = v2252;
                      }
                      else
                      {
                        v657 = 0;
                        v658 = (v656 >> 31) & 1;
                      }
                      v638 = v2212;
                      if (!v657 && (_DWORD)v658)
                      {
                        ++v642;
                        v647 = v2295;
                        goto LABEL_983;
                      }
                      v647 = v2295;
                      if (v657)
                        goto LABEL_984;
LABEL_982:
                      v652 = (char *)v634 + 4 * v651++;
                    }
LABEL_983:
                    *((_DWORD *)v638 + v650++) = *(_DWORD *)v652;
                    if (v650 >= v641)
                      goto LABEL_984;
                    continue;
                  }
                }
              }
            }
            else if ((v646 & 0x80000000) != 0)
            {
              goto LABEL_966;
            }
            v648 = v641 - v637;
            v639 = (unint64_t)v2186;
            if (v641 != v637)
            {
              v638 = v2212;
LABEL_963:
              v649 = (_DWORD *)((char *)v638 + 4 * v637);
              v248 = (char *)v634 + 4 * v637;
              if (v648 == 1)
                *v649 = *(_DWORD *)v248;
              else
                memcpy(v649, v248, 4 * v648);
              goto LABEL_985;
            }
            v638 = v2212;
LABEL_985:
            if (*((_QWORD *)v635 + 2))
              goto LABEL_1364;
            v637 += v639;
            if (v637 >= v636)
            {
              v632 = v639;
              v633 = v638;
              if (v639 >= v636)
                goto LABEL_1361;
              goto LABEL_943;
            }
          }
          v647 = v2295;
          if (v646)
            goto LABEL_957;
LABEL_1713:
          v2334 = 0;
          v2335 = 0;
          *(_QWORD *)&v2332 = 10;
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v643, v249, v250, v251, v252, v253, v254);
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v644, v1074, v1075, v1076, v1077, v1078, v1079);
          if (v2334)
          {
            JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
            v646 = 0;
          }
          else
          {
            v1082 = v2329;
            v1083 = v2339;
            if (v2339)
              goto LABEL_1715;
            v2016 = (unsigned int *)(v2329 + 80);
            v2017 = *(_DWORD *)(v2329 + 80);
            if ((v2017 & 0x20) == 0)
            {
              do
                v2018 = __ldaxr(v2016);
              while (__stlxr(v2018 | 0x20, v2016));
            }
            JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1080, v1081, v250, v251, v252, v253, v254);
            if (*v2016
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1082, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
            {
              v2019 = 0;
              v1083 = 0;
              v2127 = *(_QWORD *)(v1082 + 16);
            }
            else
            {
              v2019 = 1;
              v1083 = v2339;
            }
            if ((v2017 & 0x20) == 0)
            {
              do
                v2020 = __ldaxr(v2016);
              while (__stlxr(v2020 & 0xFFFFFFDF, v2016));
            }
            if (v2019)
LABEL_1715:
              v2127 = vmEntryToJavaScript((uint64_t)v1083, (JSC::VM *)v1082, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
            *(_BYTE *)(v1082 + 93120) = 1;
            v646 = v2127;
          }
          v635 = v2322;
          v632 = (uint64_t)v2159;
          v636 = v2172;
          goto LABEL_1001;
        }
        v1375 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2224 = (char *)v2153 + 4;
        while (v1375 < v2172)
        {
          v1376 = v2172;
          v2196 = (JSC::MarkedVectorBase *)(v1375 + 4);
          if (v2172 >= v1375 + 4)
            v1376 = v1375 + 4;
          v2265 = v1376 - v1375;
          if (v1376 - v1375 < 2)
          {
            v1398 = *((_QWORD *)v2322 + 2);
          }
          else
          {
            v2307 = (char *)v2153 + 4 * v1375;
            v1377 = v2224;
            v1378 = 1;
            while (2)
            {
              v1379 = *(unsigned int *)&v2307[4 * v1378];
              v1380 = v1377;
              v1381 = v1378;
              v1382 = v1377;
              while (1)
              {
                v1384 = *--v1382;
                v1383 = v1384;
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1379 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1383 | 0xFFFE000000000000, v1385, v1386, v1387, v1388, v1389, v1390);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1394 = JSC::call((uint64_t *)v2150, (uint64_t)v175, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1391, v1392, v1393);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1394;
                if (v1394 < 0xFFFE000000000000)
                {
                  if ((v1394 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1396) = v1394 != 7;
                  }
                  else
                  {
                    if (v1394 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1395);
                    else
                      *(_QWORD *)&v2081 = v1394 - 0x2000000000000;
                    LODWORD(v1396) = v2081 < 0.0;
                  }
                }
                else
                {
                  v1396 = (v1394 >> 31) & 1;
                }
                v1397 = *((_QWORD *)v2322 + 2);
                if (v1397 || !(_DWORD)v1396)
                {
                  if (v1397)
                    goto LABEL_2995;
                  goto LABEL_2229;
                }
                *v1380 = v1383;
                v1380 = v1382;
                if (!--v1381)
                  goto LABEL_2229;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2995;
LABEL_2229:
              *(_DWORD *)&v2307[4 * v1381] = v1379;
              ++v1378;
              ++v1377;
              if (v1378 < v2265)
                continue;
              break;
            }
            v1398 = 0;
          }
          v2224 += 16;
          v1375 = (unint64_t)v2196;
          if (v1398)
            goto LABEL_2995;
        }
        if (v2172 < 5)
        {
          v2275 = v2153;
LABEL_2992:
          v1996 = v2153;
          if (v2275 != v2153)
            v1996 = v2141;
          v2153 = v1996;
LABEL_2995:
          if (*((_DWORD *)v2347 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
          {
            goto LABEL_3606;
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
LABEL_1366:
          if (!JSC::JSArrayBufferView::isDetached(v2151))
          {
            v864 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
            v858 = v2172;
            if (v2172 >= v864)
              v858 = v864;
            if (v858)
            {
              if (v858 != 1)
                goto LABEL_1372;
              *(_DWORD *)__src = *(_DWORD *)v2153;
            }
          }
          goto LABEL_1421;
        }
        v2232 = 4;
        v1719 = v2153;
        v2317 = v2141;
LABEL_2623:
        v1720 = 0;
        v2275 = v2317;
        v2317 = v1719;
        v2203 = 2 * v2232;
        while (1)
        {
          if (v2172 >= v1720 + v2232)
            v1721 = v1720 + v2232;
          else
            v1721 = v2172;
          if (v2172 >= v1721 + v2232)
            v1722 = v1721 + v2232;
          else
            v1722 = v2172;
          if (v1721 >= v1722)
          {
LABEL_2656:
            v1757 = v1722 - v1720;
            if (v1722 != v1720)
            {
              v1758 = (_DWORD *)((char *)v2275 + 4 * v1720);
              v241 = (char *)v2317 + 4 * v1720;
              if (v1757 == 1)
                *v1758 = *(_DWORD *)v241;
              else
                memcpy(v1758, v241, 4 * v1757);
            }
LABEL_2660:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_2995;
            goto LABEL_2661;
          }
          v1723 = (char *)v2317 + 4 * v1721;
          v1724 = *((unsigned int *)v1723 - 1);
          v1725 = *(unsigned int *)v1723;
          v2350[0] = v2322;
          LOBYTE(v2326) = 0;
          LODWORD(v2327) = 0;
          if (*((_DWORD *)v2322 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
            || *((_DWORD *)v2322 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
          {
            goto LABEL_3512;
          }
          JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1725 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
          JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1724 | 0xFFFE000000000000, v1726, v1727, v1728, v1729, v1730, v1731);
          if ((_BYTE)v2326)
            break;
          v2348 = v2328;
          v2349 = v2327;
          v1735 = JSC::call((uint64_t *)v2150, (uint64_t)v175, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1732, v1733, v1734);
          if (*((_DWORD *)v2322 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
          {
            goto LABEL_3512;
          }
          v2348 = (JSC::JSObject *)v1735;
          if (v1735 < 0xFFFE000000000000)
          {
            if ((v1735 & 0xFFFFFFFFFFFFFFFELL) == 6)
            {
              LODWORD(v1737) = v1735 != 7;
            }
            else
            {
              if (v1735 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1736);
              else
                *(_QWORD *)&v2121 = v1735 - 0x2000000000000;
              LODWORD(v1737) = v2121 < 0.0;
            }
          }
          else
          {
            v1737 = (v1735 >> 31) & 1;
          }
LABEL_2637:
          if (*((_QWORD *)v2322 + 2))
            goto LABEL_2995;
          if (!(_DWORD)v1737)
            goto LABEL_2656;
          v1738 = v1720;
          v1739 = v1721;
          v1740 = v1720;
          if (v1722 > v1720)
          {
            while (1)
            {
              if (v1739 < v1722)
              {
                if (v1740 >= v1721)
                {
                  v1741 = (char *)v2317 + 4 * v1739;
LABEL_2655:
                  ++v1739;
                  goto LABEL_2652;
                }
                v1741 = (char *)v2317 + 4 * v1739;
                v1742 = *(unsigned int *)v1741;
                v1743 = *((unsigned int *)v2317 + v1740);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                  || *((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  goto LABEL_3397;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1742 | 0xFFFE000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1743 | 0xFFFE000000000000, v1744, v1745, v1746, v1747, v1748, v1749);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3397:
                  if (*((_QWORD *)v2322 + 2))
                    goto LABEL_2995;
                  goto LABEL_2651;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1753 = JSC::call((uint64_t *)v2150, (uint64_t)v175, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1750, v1751, v1752);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  goto LABEL_3397;
                }
                v2348 = (JSC::JSObject *)v1753;
                if (v1753 < 0xFFFE000000000000)
                {
                  if ((v1753 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1755) = v1753 != 7;
                  }
                  else
                  {
                    if (v1753 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1754);
                    else
                      *(_QWORD *)&v2111 = v1753 - 0x2000000000000;
                    LODWORD(v1755) = v2111 < 0.0;
                  }
                }
                else
                {
                  v1755 = (v1753 >> 31) & 1;
                }
                v1756 = *((_QWORD *)v2322 + 2);
                if (!v1756 && (_DWORD)v1755)
                  goto LABEL_2655;
                if (v1756)
                  goto LABEL_2995;
              }
LABEL_2651:
              v1741 = (char *)v2317 + 4 * v1740++;
LABEL_2652:
              *((_DWORD *)v2275 + v1738++) = *(_DWORD *)v1741;
              if (v1738 >= v1722)
                goto LABEL_2660;
            }
          }
LABEL_2661:
          v1720 += v2203;
          if (v1720 >= v2172)
          {
            v2232 *= 2;
            v1719 = v2275;
            if (v2203 >= v2172)
              goto LABEL_2992;
            goto LABEL_2623;
          }
        }
        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3512:
        LODWORD(v1737) = 0;
        goto LABEL_2637;
      case '.':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v128, v129, v130, v131, v132, v133, v134))
        {
          return 0;
        }
        v135 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sort((uint64_t)v2151, v128, v129, v130, v131, v132, v133, v134);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2168 = JSC::JSArrayBufferView::length(v2151, v234, v235, v236, v237, v238, v239, v240);
        if (v2168 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2168 & 0x8000000000000000) != 0
          || (WTF::Vector<int,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, 2 * v2168) & 1) == 0)
        {
          goto LABEL_2010;
        }
        v2137 = (JSC::MarkedVectorBase *)((char *)__dst + 4 * v2168);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, 4 * v2168);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v135, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v256 = 0;
          while (1)
          {
            v257 = v2168;
            if (v256 >= v2168)
              break;
            v2282 = v256 + 4;
            if (v2168 >= v256 + 4)
              v257 = v256 + 4;
            v258 = v257 - v256;
            v259 = *((_QWORD *)v9 + 2);
            if (v258 >= 2)
            {
              v260 = (char *)v2153 + 4 * v256;
              for (m = 1; m < v258; ++m)
              {
                v262 = *(float *)&v260[4 * m];
                v263 = COERCE__INT64(v262) + 0x2000000000000;
                if (v259)
                  goto LABEL_1330;
                v264 = m - 1;
                v265 = *(float *)&v260[4 * m - 4];
                *(double *)v255.i64 = v265;
                v266 = COERCE__INT64(v265) + 0x2000000000000;
                v267 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v268 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v263, v266);
                  else
                    v268 = 0;
                  *(_BYTE *)(v267 + 93120) = 1;
                  if (*(_DWORD *)(v267 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v267, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v268 = 0;
                    goto LABEL_351;
                  }
                  if (v268)
                    goto LABEL_351;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v263, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v266, v983, v984, v985, v986, v987, v988);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                  v268 = 0;
                }
                else
                {
                  v991 = v2329;
                  v992 = v2339;
                  if (v2339)
                    goto LABEL_1575;
                  v1926 = (unsigned int *)(v2329 + 80);
                  v1927 = *(_DWORD *)(v2329 + 80);
                  if ((v1927 & 0x20) == 0)
                  {
                    do
                      v1928 = __ldaxr(v1926);
                    while (__stlxr(v1928 | 0x20, v1926));
                  }
                  JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v989, v990, v250, v251, v252, v253, v254);
                  if (*v1926
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v991, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v1929 = 0;
                    v992 = 0;
                    v2237 = *(_QWORD *)(v991 + 16);
                  }
                  else
                  {
                    v1929 = 1;
                    v992 = v2339;
                  }
                  if ((v1927 & 0x20) == 0)
                  {
                    do
                      v1930 = __ldaxr(v1926);
                    while (__stlxr(v1930 & 0xFFFFFFDF, v1926));
                  }
                  if (v1929)
LABEL_1575:
                    v2237 = vmEntryToJavaScript((uint64_t)v992, (JSC::VM *)v991, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                  *(_BYTE *)(v991 + 93120) = 1;
                  v268 = v2237;
                }
LABEL_351:
                if (*((_QWORD *)v9 + 2))
                  goto LABEL_1330;
                v2348 = (JSC::JSObject *)v268;
                if (v268 <= 0xFFFDFFFFFFFFFFFFLL)
                {
                  if ((v268 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v259 = 0;
                    LODWORD(v269) = v268 != 7;
                  }
                  else
                  {
                    if (v268 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v255);
                      v259 = *((_QWORD *)v9 + 2);
                    }
                    else
                    {
                      v259 = 0;
                      v255.i64[0] = v268 - 0x2000000000000;
                    }
                    LODWORD(v269) = *(double *)v255.i64 < 0.0;
                  }
                }
                else
                {
                  v259 = 0;
                  v269 = (v268 >> 31) & 1;
                }
                v270 = v259 == 0;
                if (v259 || !(_DWORD)v269)
                {
                  v264 = m;
LABEL_369:
                  v277 = v264;
                  if (!v270)
                    break;
                }
                else
                {
                  *(float *)&v260[4 * m] = v265;
                  if (m != 1)
                  {
                    while (1)
                    {
                      v271 = v264 - 1;
                      v272 = *(float *)&v260[4 * v264 - 4];
                      *(double *)v255.i64 = v272;
                      v273 = COERCE__INT64(v272) + 0x2000000000000;
                      v274 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v275 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v263, v273);
                        else
                          v275 = 0;
                        *(_BYTE *)(v274 + 93120) = 1;
                        if (*(_DWORD *)(v274 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v274, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
                          goto LABEL_1833;
                        }
                        if (v275)
                          goto LABEL_362;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v263, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v273, v1130, v1131, v1132, v1133, v1134, v1135);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1833:
                        v275 = 0;
                        goto LABEL_362;
                      }
                      v1138 = v2329;
                      v1139 = v2339;
                      if (v2339)
                        goto LABEL_1813;
                      v2041 = (unsigned int *)(v2329 + 80);
                      v2042 = *(_DWORD *)(v2329 + 80);
                      if ((v2042 & 0x20) == 0)
                      {
                        do
                          v2043 = __ldaxr(v2041);
                        while (__stlxr(v2043 | 0x20, v2041));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1136, v1137, v250, v251, v252, v253, v254);
                      if (*v2041
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1138, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v2044 = 0;
                        v1139 = 0;
                        v2237 = *(_QWORD *)(v1138 + 16);
                      }
                      else
                      {
                        v2044 = 1;
                        v1139 = v2339;
                      }
                      if ((v2042 & 0x20) == 0)
                      {
                        do
                          v2045 = __ldaxr(v2041);
                        while (__stlxr(v2045 & 0xFFFFFFDF, v2041));
                      }
                      if (v2044)
LABEL_1813:
                        v2237 = vmEntryToJavaScript((uint64_t)v1139, (JSC::VM *)v1138, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v1138 + 93120) = 1;
                      v275 = v2237;
LABEL_362:
                      if (*((_QWORD *)v9 + 2))
                        goto LABEL_1330;
                      v2348 = (JSC::JSObject *)v275;
                      if (v275 < 0xFFFE000000000000)
                      {
                        if ((v275 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v259 = 0;
                          LODWORD(v276) = v275 != 7;
                        }
                        else
                        {
                          if (v275 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v255);
                            v259 = *((_QWORD *)v9 + 2);
                          }
                          else
                          {
                            v259 = 0;
                            v255.i64[0] = v275 - 0x2000000000000;
                          }
                          LODWORD(v276) = *(double *)v255.i64 < 0.0;
                        }
                      }
                      else
                      {
                        v259 = 0;
                        v276 = (v275 >> 31) & 1;
                      }
                      v270 = v259 == 0;
                      if (v259 || !(_DWORD)v276)
                        goto LABEL_369;
                      v259 = 0;
                      v277 = 0;
                      *(float *)&v260[4 * v264--] = v272;
                      if (!v271)
                        goto LABEL_370;
                    }
                  }
                  v259 = 0;
                  v277 = 0;
                }
LABEL_370:
                *(float *)&v260[4 * v277] = v262;
              }
            }
            v256 = v2282;
            if (v259)
              goto LABEL_1330;
          }
          if (v2168 < 5)
          {
            v527 = v2153;
LABEL_1327:
            v849 = v2153;
            if (v527 != v2153)
              v849 = v2137;
            v2153 = v849;
            goto LABEL_1330;
          }
          v522 = 4;
          v523 = v2137;
          v524 = v2153;
          v525 = v2168;
LABEL_761:
          v526 = 0;
          v527 = v523;
          v528 = 2 * v522;
          v2157 = (JSC::MarkedVectorBase *)v522;
          v2209 = v523;
          v2249 = v524;
          v2183 = (JSC::MarkedVectorBase *)(2 * v522);
          while (1)
          {
            if (v525 >= v526 + v522)
              v529 = v526 + v522;
            else
              v529 = v525;
            if (v525 >= v529 + v522)
              v530 = v529 + v522;
            else
              v530 = v525;
            if (v529 >= v530)
            {
              v537 = v530 - v526;
              if (v530 == v526)
                goto LABEL_802;
              v538 = (_DWORD *)((char *)v527 + 4 * v526);
              v248 = (char *)v524 + 4 * v526;
              if (v537 != 1)
              {
LABEL_780:
                memcpy(v538, v248, 4 * v537);
                v524 = v2249;
                goto LABEL_802;
              }
              goto LABEL_783;
            }
            v531 = COERCE__INT64(*((float *)v524 + v529)) + 0x2000000000000;
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1330;
            v532 = v529;
            v2292 = v529;
            v255.i32[0] = *((_DWORD *)v524 + v529 - 1);
            v533 = COERCE__INT64(*(float *)v255.i32) + 0x2000000000000;
            v534 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            if (v2340 <= 3)
            {
              if (v2339)
                v535 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v531, v533);
              else
                v535 = 0;
              *(_BYTE *)(v534 + 93120) = 1;
              v524 = v2249;
              if (*(_DWORD *)(v534 + 80))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v534, (uint64_t)v248, v249, v250, v251, v252, v253, v254);
                v524 = v2249;
                if (hasExceptionsAfterHandlingTraps)
                {
                  v535 = 0;
                  goto LABEL_775;
                }
              }
              if (v535)
                goto LABEL_775;
            }
            v2334 = 0;
            v2335 = 0;
            *(_QWORD *)&v2332 = 10;
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v531, v249, v250, v251, v252, v253, v254);
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v533, v1044, v1045, v1046, v1047, v1048, v1049);
            if (v2334)
            {
              JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
              v535 = 0;
            }
            else
            {
              v1052 = v2329;
              v1053 = v2339;
              if (v2339)
                goto LABEL_1700;
              v2001 = (unsigned int *)(v2329 + 80);
              v2002 = *(_DWORD *)(v2329 + 80);
              if ((v2002 & 0x20) == 0)
              {
                do
                  v2003 = __ldaxr(v2001);
                while (__stlxr(v2003 | 0x20, v2001));
              }
              JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1050, v1051, v250, v251, v252, v253, v254);
              if (*v2001
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1052, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
              {
                v2004 = 0;
                v1053 = 0;
                v2127 = *(_QWORD *)(v1052 + 16);
              }
              else
              {
                v2004 = 1;
                v1053 = v2339;
              }
              if ((v2002 & 0x20) == 0)
              {
                do
                  v2005 = __ldaxr(v2001);
                while (__stlxr(v2005 & 0xFFFFFFDF, v2001));
              }
              if (v2004)
LABEL_1700:
                v2127 = vmEntryToJavaScript((uint64_t)v1053, (JSC::VM *)v1052, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
              *(_BYTE *)(v1052 + 93120) = 1;
              v535 = v2127;
            }
            v522 = (uint64_t)v2157;
            v525 = v2168;
            v524 = v2249;
LABEL_775:
            v536 = v2292;
            v527 = v2209;
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1330;
            v2348 = (JSC::JSObject *)v535;
            if (v535 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v535 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v522 = (uint64_t)v2157;
                v525 = v2168;
                v527 = v2209;
                v524 = v2249;
                v536 = v2292;
                if (v535 != 7)
                  goto LABEL_784;
              }
              else
              {
                if (v535 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v255);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1330:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
                      goto LABEL_2359;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                    goto LABEL_1332;
                  }
                }
                else
                {
                  v255.i64[0] = v535 - 0x2000000000000;
                }
                v522 = (uint64_t)v2157;
                v525 = v2168;
                v527 = v2209;
                v524 = v2249;
                v536 = v2292;
                if (*(double *)v255.i64 < 0.0)
                {
LABEL_784:
                  v539 = v526;
                  v540 = v526;
                  if (v530 <= v526)
                  {
LABEL_801:
                    v522 = (uint64_t)v2157;
                    v525 = v2168;
                    v528 = (unint64_t)v2183;
                    goto LABEL_802;
                  }
                  while (2)
                  {
                    if (v532 < v530)
                    {
                      v541 = (float *)((char *)v524 + 4 * v532);
                      if (v540 >= v536)
                        goto LABEL_797;
                      v542 = COERCE__INT64(*v541) + 0x2000000000000;
                      v255.i32[0] = *((_DWORD *)v524 + v540);
                      v543 = COERCE__INT64(*(float *)v255.i32) + 0x2000000000000;
                      v544 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v545 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v542, v543);
                        else
                          v545 = 0;
                        *(_BYTE *)(v544 + 93120) = 1;
                        v524 = v2249;
                        if (*(_DWORD *)(v544 + 80))
                        {
                          v558 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v544, (uint64_t)v248, v249, v250, v251, v252, v253, v254);
                          v524 = v2249;
                          if (v558)
                          {
                            v545 = 0;
                            goto LABEL_792;
                          }
                        }
                        if (v545)
                          goto LABEL_792;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v542, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v543, v548, v549, v550, v551, v552, v553);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        v545 = 0;
                      }
                      else
                      {
                        v556 = v2329;
                        v557 = v2339;
                        if (v2339)
                          goto LABEL_810;
                        v1951 = (unsigned int *)(v2329 + 80);
                        v1952 = *(_DWORD *)(v2329 + 80);
                        if ((v1952 & 0x20) == 0)
                        {
                          do
                            v1953 = __ldaxr(v1951);
                          while (__stlxr(v1953 | 0x20, v1951));
                        }
                        JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v554, v555, v250, v251, v252, v253, v254);
                        if (*v1951
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v556, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
                          v1954 = 0;
                          v557 = 0;
                          v2129 = *(_QWORD *)(v556 + 16);
                        }
                        else
                        {
                          v1954 = 1;
                          v557 = v2339;
                        }
                        if ((v1952 & 0x20) == 0)
                        {
                          do
                            v1955 = __ldaxr(v1951);
                          while (__stlxr(v1955 & 0xFFFFFFDF, v1951));
                        }
                        if (v1954)
LABEL_810:
                          v2129 = vmEntryToJavaScript((uint64_t)v557, (JSC::VM *)v556, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                        *(_BYTE *)(v556 + 93120) = 1;
                        v545 = v2129;
                      }
                      v524 = v2249;
LABEL_792:
                      v536 = v2292;
                      v527 = v2209;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1330;
                      v2348 = (JSC::JSObject *)v545;
                      if (v545 < 0xFFFE000000000000)
                      {
                        if ((v545 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v546 = 0;
                          LODWORD(v547) = v545 != 7;
                        }
                        else
                        {
                          if (v545 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v255);
                            v546 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v546 = 0;
                            v255.i64[0] = v545 - 0x2000000000000;
                          }
                          LODWORD(v547) = *(double *)v255.i64 < 0.0;
                        }
                        v527 = v2209;
                        v524 = v2249;
                        v536 = v2292;
                      }
                      else
                      {
                        v546 = 0;
                        v547 = (v545 >> 31) & 1;
                      }
                      if (!v546 && (_DWORD)v547)
                      {
LABEL_797:
                        ++v532;
                        goto LABEL_800;
                      }
                      if (v546)
                        goto LABEL_801;
                    }
                    v541 = (float *)((char *)v524 + 4 * v540++);
LABEL_800:
                    *((float *)v527 + v539++) = *v541;
                    if (v539 >= v530)
                      goto LABEL_801;
                    continue;
                  }
                }
              }
            }
            else if ((v535 & 0x80000000) != 0)
            {
              goto LABEL_784;
            }
            v537 = v530 - v526;
            v528 = (unint64_t)v2183;
            if (v530 != v526)
            {
              v538 = (_DWORD *)((char *)v527 + 4 * v526);
              v248 = (char *)v524 + 4 * v526;
              if (v537 != 1)
                goto LABEL_780;
LABEL_783:
              *v538 = *(_DWORD *)v248;
            }
LABEL_802:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1330;
            v526 += v528;
            if (v526 >= v525)
            {
              v522 = v528;
              v523 = v524;
              v524 = v527;
              if (v528 >= v525)
                goto LABEL_1327;
              goto LABEL_761;
            }
          }
        }
        v1253 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2260 = (float *)((char *)v2153 + 4);
        v2333 = 0;
        while (v1253 < v2168)
        {
          v1254 = v2168;
          v2220 = v1253 + 4;
          if (v2168 >= v1253 + 4)
            v1254 = v1253 + 4;
          v2302 = v1254 - v1253;
          if (v1254 - v1253 < 2)
          {
            v1275 = *((_QWORD *)v2322 + 2);
          }
          else
          {
            v1255 = (char *)v2153 + 4 * v1253;
            v1256 = v2260;
            v1257 = 1;
            while (2)
            {
              v1258 = *(float *)&v1255[4 * v1257];
              v1259 = v1256;
              v1260 = v1257;
              while (1)
              {
                v1261 = *(v1259 - 1);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, COERCE__INT64(v1258) + 0x2000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, COERCE__INT64(v1261) + 0x2000000000000, v1262, v1263, v1264, v1265, v1266, v1267);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1271 = JSC::call((uint64_t *)v2150, (uint64_t)v135, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1268, v1269, v1270);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1271;
                if (v1271 < 0xFFFE000000000000)
                {
                  if ((v1271 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1273) = v1271 != 7;
                  }
                  else
                  {
                    if (v1271 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1272);
                    else
                      *(_QWORD *)&v2076 = v1271 - 0x2000000000000;
                    LODWORD(v1273) = v2076 < 0.0;
                  }
                }
                else
                {
                  v1273 = (v1271 >> 31) & 1;
                }
                v1274 = *((_QWORD *)v2322 + 2);
                if (v1274 || !(_DWORD)v1273)
                {
                  if (v1274)
                    goto LABEL_2965;
                  goto LABEL_2115;
                }
                *v1259-- = v1261;
                if (!--v1260)
                  goto LABEL_2115;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2965;
LABEL_2115:
              *(float *)&v1255[4 * v1260] = v1258;
              ++v1257;
              ++v1256;
              if (v1257 < v2302)
                continue;
              break;
            }
            v1275 = 0;
          }
          v2260 += 4;
          v1253 = v2220;
          if (v1275)
            goto LABEL_2965;
        }
        if (v2168 >= 5)
        {
          v2227 = 4;
          v1511 = v2137;
          v2312 = v2153;
          while (1)
          {
            v1512 = 0;
            v2270 = v1511;
            v2198 = 2 * v2227;
            do
            {
              if (v2168 >= v1512 + v2227)
                v1513 = v1512 + v2227;
              else
                v1513 = v2168;
              if (v2168 >= v1513 + v2227)
                v1514 = v1513 + v2227;
              else
                v1514 = v2168;
              if (v1513 >= v1514)
                goto LABEL_2440;
              v1515 = (float *)((char *)v2312 + 4 * v1513);
              v1517 = *(v1515 - 1);
              v1516 = *v1515;
              v2350[0] = v2322;
              LOBYTE(v2326) = 0;
              LODWORD(v2327) = 0;
              v1518 = COERCE__INT64(v1516) + 0x2000000000000;
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                || *((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3502;
              }
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1518, v242, v243, v244, v245, v246, v247);
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, COERCE__INT64(v1517) + 0x2000000000000, v1519, v1520, v1521, v1522, v1523, v1524);
              if ((_BYTE)v2326)
              {
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3502:
                LODWORD(v1530) = 0;
                goto LABEL_2421;
              }
              v2348 = v2328;
              v2349 = v2327;
              v1528 = JSC::call((uint64_t *)v2150, (uint64_t)v135, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1525, v1526, v1527);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
              {
                goto LABEL_3502;
              }
              v2348 = (JSC::JSObject *)v1528;
              if (v1528 < 0xFFFE000000000000)
              {
                if ((v1528 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  LODWORD(v1530) = v1528 != 7;
                }
                else
                {
                  if (v1528 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1529);
                  else
                    *(_QWORD *)&v2116 = v1528 - 0x2000000000000;
                  LODWORD(v1530) = v2116 < 0.0;
                }
              }
              else
              {
                v1530 = (v1528 >> 31) & 1;
              }
LABEL_2421:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2965;
              if ((_DWORD)v1530)
              {
                v1531 = v1512;
                v1532 = v1513;
                v1533 = v1512;
                if (v1514 > v1512)
                {
                  while (1)
                  {
                    if (v1532 < v1514)
                    {
                      if (v1533 >= v1513)
                      {
                        v1534 = (float *)((char *)v2312 + 4 * v1532);
LABEL_2439:
                        ++v1532;
                        goto LABEL_2436;
                      }
                      v1534 = (float *)((char *)v2312 + 4 * v1532);
                      v1535 = *v1534;
                      v1536 = *((float *)v2312 + v1533);
                      v2350[0] = v2322;
                      LOBYTE(v2326) = 0;
                      LODWORD(v2327) = 0;
                      v1537 = COERCE__INT64(v1535) + 0x2000000000000;
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)|| *((_DWORD *)v2322 + 20)&& JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3382;
                      }
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1537, v242, v243, v244, v245, v246, v247);
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, COERCE__INT64(v1536) + 0x2000000000000, v1538, v1539, v1540, v1541, v1542, v1543);
                      if ((_BYTE)v2326)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3382:
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_2965;
                        goto LABEL_2435;
                      }
                      v2348 = v2328;
                      v2349 = v2327;
                      v1547 = JSC::call((uint64_t *)v2150, (uint64_t)v135, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1544, v1545, v1546);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                      {
                        goto LABEL_3382;
                      }
                      v2348 = (JSC::JSObject *)v1547;
                      if (v1547 < 0xFFFE000000000000)
                      {
                        if ((v1547 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          LODWORD(v1549) = v1547 != 7;
                        }
                        else
                        {
                          if (v1547 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1548);
                          else
                            *(_QWORD *)&v2106 = v1547 - 0x2000000000000;
                          LODWORD(v1549) = v2106 < 0.0;
                        }
                      }
                      else
                      {
                        v1549 = (v1547 >> 31) & 1;
                      }
                      v1550 = *((_QWORD *)v2322 + 2);
                      if (!v1550 && (_DWORD)v1549)
                        goto LABEL_2439;
                      if (v1550)
                        goto LABEL_2965;
                    }
LABEL_2435:
                    v1534 = (float *)((char *)v2312 + 4 * v1533++);
LABEL_2436:
                    *((float *)v2270 + v1531++) = *v1534;
                    if (v1531 >= v1514)
                      goto LABEL_2444;
                  }
                }
                goto LABEL_2445;
              }
LABEL_2440:
              v1551 = v1514 - v1512;
              if (v1514 != v1512)
              {
                v1552 = (_DWORD *)((char *)v2270 + 4 * v1512);
                v241 = (char *)v2312 + 4 * v1512;
                if (v1551 == 1)
                  *v1552 = *(_DWORD *)v241;
                else
                  memcpy(v1552, v241, 4 * v1551);
              }
LABEL_2444:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2965;
LABEL_2445:
              v1512 += v2198;
            }
            while (v1512 < v2168);
            v2227 *= 2;
            v1511 = v2312;
            v2312 = v2270;
            if (v2198 >= v2168)
              goto LABEL_2962;
          }
        }
        v2270 = v2153;
LABEL_2962:
        v1991 = v2153;
        if (v2270 != v2153)
          v1991 = v2137;
        v2153 = v1991;
LABEL_2965:
        if (*((_DWORD *)v2347 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
        {
          goto LABEL_3606;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
LABEL_1332:
        if (JSC::JSArrayBufferView::isDetached(v2151))
          goto LABEL_1421;
        v857 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
        v858 = v2168;
        if (v2168 >= v857)
          v858 = v857;
        if (!v858)
          goto LABEL_1421;
        if (v858 == 1)
        {
          *(_DWORD *)__src = *(_DWORD *)v2153;
          goto LABEL_1421;
        }
LABEL_1372:
        v851 = 4 * v858;
        goto LABEL_1420;
      case '/':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v192, v193, v194, v195, v196, v197, v198))
        {
          return 0;
        }
        v199 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sort((uint64_t)v2151, v192, v193, v194, v195, v196, v197, v198);
          if (!v117)
            return v2151;
LABEL_254:
          if (v117 == 2)
            return (JSC::JSArrayBufferView *)JSC::throwTypeError((unint64_t)v2150, &v2347, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
          JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2347);
          return 0;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2174 = JSC::JSArrayBufferView::length(v2151, v491, v492, v493, v494, v495, v496, v497);
        if (v2174 < 2)
          return v2151;
        __src = *((_QWORD *)v2151 + 2);
        if (__src)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __src = (__src & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __src = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2174 & 0x8000000000000000) != 0
          || (WTF::Vector<double,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, 2 * v2174) & 1) == 0)
        {
LABEL_2010:
          JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2347);
LABEL_2360:
          v2151 = 0;
          goto LABEL_1421;
        }
        v2144 = (JSC::MarkedVectorBase *)((char *)__dst + 8 * v2174);
        v2153 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__src, 8 * v2174);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v199, 2, v244, v245, v246, v247);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
          {
            goto LABEL_2359;
          }
          v499 = 0;
          while (1)
          {
            v500 = v2174;
            if (v499 >= v2174)
              break;
            v2291 = v499 + 4;
            if (v2174 >= v499 + 4)
              v500 = v499 + 4;
            v501 = v500 - v499;
            v502 = *((_QWORD *)v2322 + 2);
            if (v501 >= 2)
            {
              v503 = (char *)v2153 + 8 * v499;
              for (n = 1; n < v501; ++n)
              {
                v505 = *(_QWORD *)&v503[8 * n];
                if (v502)
                  goto LABEL_1377;
                v506 = n - 1;
                v507 = *(_QWORD *)&v503[8 * n - 8];
                v498.i64[0] = v507;
                v508 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v509 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v505 + 0x2000000000000, v507 + 0x2000000000000);
                  else
                    v509 = 0;
                  *(_BYTE *)(v508 + 93120) = 1;
                  if (*(_DWORD *)(v508 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v508, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v509 = 0;
                    goto LABEL_706;
                  }
                  if (v509)
                    goto LABEL_706;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v505 + 0x2000000000000, v249, v250, v251, v252, v253, v254);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v507 + 0x2000000000000, v1023, v1024, v1025, v1026, v1027, v1028);
                if (v2334)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                  v509 = 0;
                }
                else
                {
                  v1031 = v2329;
                  v1032 = v2339;
                  if (v2339)
                    goto LABEL_1591;
                  v1946 = (unsigned int *)(v2329 + 80);
                  v1947 = *(_DWORD *)(v2329 + 80);
                  if ((v1947 & 0x20) == 0)
                  {
                    do
                      v1948 = __ldaxr(v1946);
                    while (__stlxr(v1948 | 0x20, v1946));
                  }
                  JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1029, v1030, v250, v251, v252, v253, v254);
                  if (*v1946
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1031, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                  {
                    v1949 = 0;
                    v1032 = 0;
                    v2237 = *(_QWORD *)(v1031 + 16);
                  }
                  else
                  {
                    v1949 = 1;
                    v1032 = v2339;
                  }
                  if ((v1947 & 0x20) == 0)
                  {
                    do
                      v1950 = __ldaxr(v1946);
                    while (__stlxr(v1950 & 0xFFFFFFDF, v1946));
                  }
                  if (v1949)
LABEL_1591:
                    v2237 = vmEntryToJavaScript((uint64_t)v1032, (JSC::VM *)v1031, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                  *(_BYTE *)(v1031 + 93120) = 1;
                  v509 = v2237;
                }
LABEL_706:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1377;
                v2348 = (JSC::JSObject *)v509;
                if (v509 <= 0xFFFDFFFFFFFFFFFFLL)
                {
                  if ((v509 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v502 = 0;
                    LODWORD(v510) = v509 != 7;
                  }
                  else
                  {
                    if (v509 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v498);
                      v502 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v502 = 0;
                      v498.i64[0] = v509 - 0x2000000000000;
                    }
                    LODWORD(v510) = *(double *)v498.i64 < 0.0;
                  }
                }
                else
                {
                  v502 = 0;
                  v510 = (v509 >> 31) & 1;
                }
                v511 = v502 == 0;
                if (v502 || !(_DWORD)v510)
                {
                  v506 = n;
LABEL_724:
                  v517 = v506;
                  if (!v511)
                    break;
                }
                else
                {
                  *(_QWORD *)&v503[8 * n] = v507;
                  if (n != 1)
                  {
                    while (1)
                    {
                      v512 = v506 - 1;
                      v513 = *(_QWORD *)&v503[8 * v506 - 8];
                      v498.i64[0] = v513;
                      v514 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v515 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v505 + 0x2000000000000, v513 + 0x2000000000000);
                        else
                          v515 = 0;
                        *(_BYTE *)(v514 + 93120) = 1;
                        if (*(_DWORD *)(v514 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v514, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
                          goto LABEL_1845;
                        }
                        if (v515)
                          goto LABEL_717;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v505 + 0x2000000000000, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v513 + 0x2000000000000, v1170, v1171, v1172, v1173, v1174, v1175);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
LABEL_1845:
                        v515 = 0;
                        goto LABEL_717;
                      }
                      v1178 = v2329;
                      v1179 = v2339;
                      if (v2339)
                        goto LABEL_1829;
                      v2061 = (unsigned int *)(v2329 + 80);
                      v2062 = *(_DWORD *)(v2329 + 80);
                      if ((v2062 & 0x20) == 0)
                      {
                        do
                          v2063 = __ldaxr(v2061);
                        while (__stlxr(v2063 | 0x20, v2061));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1176, v1177, v250, v251, v252, v253, v254);
                      if (*v2061
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1178, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v2064 = 0;
                        v1179 = 0;
                        v2237 = *(_QWORD *)(v1178 + 16);
                      }
                      else
                      {
                        v2064 = 1;
                        v1179 = v2339;
                      }
                      if ((v2062 & 0x20) == 0)
                      {
                        do
                          v2065 = __ldaxr(v2061);
                        while (__stlxr(v2065 & 0xFFFFFFDF, v2061));
                      }
                      if (v2064)
LABEL_1829:
                        v2237 = vmEntryToJavaScript((uint64_t)v1179, (JSC::VM *)v1178, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v1178 + 93120) = 1;
                      v515 = v2237;
LABEL_717:
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1377;
                      v2348 = (JSC::JSObject *)v515;
                      if (v515 < 0xFFFE000000000000)
                      {
                        if ((v515 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v502 = 0;
                          LODWORD(v516) = v515 != 7;
                        }
                        else
                        {
                          if (v515 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v498);
                            v502 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v502 = 0;
                            v498.i64[0] = v515 - 0x2000000000000;
                          }
                          LODWORD(v516) = *(double *)v498.i64 < 0.0;
                        }
                      }
                      else
                      {
                        v502 = 0;
                        v516 = (v515 >> 31) & 1;
                      }
                      v511 = v502 == 0;
                      if (v502 || !(_DWORD)v516)
                        goto LABEL_724;
                      v502 = 0;
                      v517 = 0;
                      *(_QWORD *)&v503[8 * v506--] = v513;
                      if (!v512)
                        goto LABEL_725;
                    }
                  }
                  v502 = 0;
                  v517 = 0;
                }
LABEL_725:
                *(_QWORD *)&v503[8 * v517] = v505;
              }
            }
            v499 = v2291;
            if (v502)
              goto LABEL_1377;
          }
          if (v2174 < 5)
          {
            v674 = v2153;
LABEL_1374:
            v865 = v2153;
            if (v674 != v2153)
              v865 = v2144;
            v2153 = v865;
            goto LABEL_1377;
          }
          v669 = 4;
          v670 = v2144;
          v671 = v2153;
          v672 = v2174;
LABEL_1004:
          v673 = 0;
          v674 = v670;
          v675 = 2 * v669;
          v2160 = (JSC::MarkedVectorBase *)v669;
          v2213 = v670;
          v2253 = v671;
          v2187 = (JSC::MarkedVectorBase *)(2 * v669);
          while (1)
          {
            if (v672 >= v673 + v669)
              v676 = v673 + v669;
            else
              v676 = v672;
            if (v672 >= v676 + v669)
              v677 = v676 + v669;
            else
              v677 = v672;
            if (v676 >= v677)
            {
              v684 = v677 - v673;
              if (v677 == v673)
                goto LABEL_1045;
              goto LABEL_1024;
            }
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1377;
            v678 = v676;
            v679 = *((_QWORD *)v671 + v676) + 0x2000000000000;
            v2296 = v676;
            v498.i64[0] = *((_QWORD *)v671 + v676 - 1);
            v680 = v498.i64[0] + 0x2000000000000;
            v681 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            if (v2340 <= 3)
            {
              if (v2339)
                v682 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v679, v498.i64[0] + 0x2000000000000);
              else
                v682 = 0;
              *(_BYTE *)(v681 + 93120) = 1;
              if (*(_DWORD *)(v681 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v681, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
              {
                v682 = 0;
                goto LABEL_1018;
              }
              if (v682)
                goto LABEL_1018;
            }
            v2334 = 0;
            v2335 = 0;
            *(_QWORD *)&v2332 = 10;
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v679, v249, v250, v251, v252, v253, v254);
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v680, v1084, v1085, v1086, v1087, v1088, v1089);
            if (v2334)
            {
              JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
              v682 = 0;
            }
            else
            {
              v1092 = v2329;
              v1093 = v2339;
              if (v2339)
                goto LABEL_1720;
              v2021 = (unsigned int *)(v2329 + 80);
              v2022 = *(_DWORD *)(v2329 + 80);
              if ((v2022 & 0x20) == 0)
              {
                do
                  v2023 = __ldaxr(v2021);
                while (__stlxr(v2023 | 0x20, v2021));
              }
              JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1090, v1091, v250, v251, v252, v253, v254);
              if (*v2021
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1092, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
              {
                v2024 = 0;
                v1093 = 0;
                v2127 = *(_QWORD *)(v1092 + 16);
              }
              else
              {
                v2024 = 1;
                v1093 = v2339;
              }
              if ((v2022 & 0x20) == 0)
              {
                do
                  v2025 = __ldaxr(v2021);
                while (__stlxr(v2025 & 0xFFFFFFDF, v2021));
              }
              if (v2024)
LABEL_1720:
                v2127 = vmEntryToJavaScript((uint64_t)v1093, (JSC::VM *)v1092, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
              *(_BYTE *)(v1092 + 93120) = 1;
              v682 = v2127;
            }
            v669 = (uint64_t)v2160;
            v672 = v2174;
LABEL_1018:
            v683 = v2296;
            v671 = v2253;
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1377;
            v2348 = (JSC::JSObject *)v682;
            if (v682 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v682 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v669 = (uint64_t)v2160;
                v672 = v2174;
                v671 = v2253;
                v683 = v2296;
                if (v682 != 7)
                  goto LABEL_1027;
              }
              else
              {
                if (v682 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v498);
                  if (*((_QWORD *)v2322 + 2))
                  {
LABEL_1377:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                    {
LABEL_2359:
                      JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
                      goto LABEL_2360;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v248, v249, v250, v251, v252, v253, v254);
LABEL_1379:
                    if (JSC::JSArrayBufferView::isDetached(v2151))
                      goto LABEL_1421;
                    v866 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
                    v867 = v2174;
                    if (v2174 >= v866)
                      v867 = v866;
                    if (!v867)
                      goto LABEL_1421;
                    if (v867 == 1)
                    {
                      *(_QWORD *)__src = *(_QWORD *)v2153;
                      goto LABEL_1421;
                    }
                    v851 = 8 * v867;
LABEL_1420:
                    memcpy((void *)__src, v2153, v851);
                    goto LABEL_1421;
                  }
                }
                else
                {
                  v498.i64[0] = v682 - 0x2000000000000;
                }
                v669 = (uint64_t)v2160;
                v672 = v2174;
                v671 = v2253;
                v683 = v2296;
                if (*(double *)v498.i64 < 0.0)
                {
LABEL_1027:
                  v686 = v673;
                  v687 = v673;
                  v674 = v2213;
                  if (v677 <= v673)
                  {
LABEL_1044:
                    v669 = (uint64_t)v2160;
                    v672 = v2174;
                    v675 = (unint64_t)v2187;
                    goto LABEL_1045;
                  }
                  while (2)
                  {
                    if (v678 < v677)
                    {
                      v688 = (_QWORD *)((char *)v671 + 8 * v678);
                      if (v687 >= v683)
                        goto LABEL_1040;
                      v689 = *v688 + 0x2000000000000;
                      v498.i64[0] = *((_QWORD *)v671 + v687);
                      v690 = v498.i64[0] + 0x2000000000000;
                      v691 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v692 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v689, v498.i64[0] + 0x2000000000000);
                        else
                          v692 = 0;
                        *(_BYTE *)(v691 + 93120) = 1;
                        if (*(_DWORD *)(v691 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v691, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                        {
LABEL_2888:
                          v692 = 0;
                          goto LABEL_1035;
                        }
                        if (v692)
                          goto LABEL_1035;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v689, v249, v250, v251, v252, v253, v254);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v690, v695, v696, v697, v698, v699, v700);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        goto LABEL_2888;
                      }
                      v703 = v2329;
                      v704 = v2339;
                      if (v2339)
                        goto LABEL_1053;
                      v1971 = (unsigned int *)(v2329 + 80);
                      v1972 = *(_DWORD *)(v2329 + 80);
                      if ((v1972 & 0x20) == 0)
                      {
                        do
                          v1973 = __ldaxr(v1971);
                        while (__stlxr(v1973 | 0x20, v1971));
                      }
                      JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v701, v702, v250, v251, v252, v253, v254);
                      if (*v1971
                        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v703, (uint64_t)v248, v249, v250, v251, v252, v253, v254))
                      {
                        v1974 = 0;
                        v704 = 0;
                        v2129 = *(_QWORD *)(v703 + 16);
                      }
                      else
                      {
                        v1974 = 1;
                        v704 = v2339;
                      }
                      if ((v1972 & 0x20) == 0)
                      {
                        do
                          v1975 = __ldaxr(v1971);
                        while (__stlxr(v1975 & 0xFFFFFFDF, v1971));
                      }
                      if (v1974)
LABEL_1053:
                        v2129 = vmEntryToJavaScript((uint64_t)v704, (JSC::VM *)v703, (uint64_t)&v2330 + 8, v250, v251, v252, v253, v254);
                      *(_BYTE *)(v703 + 93120) = 1;
                      v692 = v2129;
LABEL_1035:
                      v683 = v2296;
                      v671 = v2253;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1377;
                      v2348 = (JSC::JSObject *)v692;
                      if (v692 < 0xFFFE000000000000)
                      {
                        if ((v692 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v693 = 0;
                          LODWORD(v694) = v692 != 7;
                        }
                        else
                        {
                          if (v692 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v249, v250, v251, v252, v253, v254, v498);
                            v693 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v693 = 0;
                            v498.i64[0] = v692 - 0x2000000000000;
                          }
                          LODWORD(v694) = *(double *)v498.i64 < 0.0;
                        }
                        v671 = v2253;
                        v683 = v2296;
                      }
                      else
                      {
                        v693 = 0;
                        v694 = (v692 >> 31) & 1;
                      }
                      v674 = v2213;
                      if (!v693)
                      {
                        if ((_DWORD)v694)
                        {
LABEL_1040:
                          ++v678;
                          goto LABEL_1043;
                        }
                      }
                      if (v693)
                        goto LABEL_1044;
                    }
                    v688 = (_QWORD *)((char *)v671 + 8 * v687++);
LABEL_1043:
                    *((_QWORD *)v674 + v686++) = *v688;
                    if (v686 >= v677)
                      goto LABEL_1044;
                    continue;
                  }
                }
              }
            }
            else if ((v682 & 0x80000000) != 0)
            {
              goto LABEL_1027;
            }
            v684 = v677 - v673;
            v675 = (unint64_t)v2187;
            if (v677 != v673)
            {
              v674 = v2213;
LABEL_1024:
              v685 = (_QWORD *)((char *)v674 + 8 * v673);
              v248 = (char *)v671 + 8 * v673;
              if (v684 == 1)
                *v685 = *(_QWORD *)v248;
              else
                memcpy(v685, v248, 8 * v684);
              goto LABEL_1045;
            }
            v674 = v2213;
LABEL_1045:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1377;
            v673 += v675;
            if (v673 >= v672)
            {
              v669 = v675;
              v670 = v671;
              v671 = v674;
              if (v675 >= v672)
                goto LABEL_1374;
              goto LABEL_1004;
            }
          }
        }
        v1473 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2269 = (char *)v2153 + 8;
        v2333 = 0;
        while (v1473 < v2174)
        {
          v1474 = v2174;
          v2226 = v1473 + 4;
          if (v2174 >= v1473 + 4)
            v1474 = v1473 + 4;
          v2311 = v1474 - v1473;
          if (v1474 - v1473 < 2)
          {
            v1495 = *((_QWORD *)v2322 + 2);
          }
          else
          {
            v1475 = (char *)v2153 + 8 * v1473;
            v1476 = v2269;
            v1477 = 1;
            while (2)
            {
              v1478 = *(_QWORD *)&v1475[8 * v1477];
              v1479 = v1476;
              v1480 = v1477;
              while (1)
              {
                v1481 = *(v1479 - 1);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                  {
                    break;
                  }
                }
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1478 + 0x2000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1481 + 0x2000000000000, v1482, v1483, v1484, v1485, v1486, v1487);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1491 = JSC::call((uint64_t *)v2150, (uint64_t)v199, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1488, v1489, v1490);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1491;
                if (v1491 < 0xFFFE000000000000)
                {
                  if ((v1491 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1493) = v1491 != 7;
                  }
                  else
                  {
                    if (v1491 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1492);
                    else
                      *(_QWORD *)&v2085 = v1491 - 0x2000000000000;
                    LODWORD(v1493) = v2085 < 0.0;
                  }
                }
                else
                {
                  v1493 = (v1491 >> 31) & 1;
                }
                v1494 = *((_QWORD *)v2322 + 2);
                if (v1494 || !(_DWORD)v1493)
                {
                  if (v1494)
                    goto LABEL_3019;
                  goto LABEL_2319;
                }
                *v1479-- = v1481;
                if (!--v1480)
                  goto LABEL_2319;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3019;
LABEL_2319:
              *(_QWORD *)&v1475[8 * v1480] = v1478;
              ++v1477;
              ++v1476;
              if (v1477 < v2311)
                continue;
              break;
            }
            v1495 = 0;
          }
          v2269 += 32;
          v1473 = v2226;
          if (v1495)
            goto LABEL_3019;
        }
        if (v2174 < 5)
        {
          v2321 = v2153;
LABEL_3016:
          v2000 = v2153;
          if (v2321 != v2153)
            v2000 = v2144;
          v2153 = v2000;
LABEL_3019:
          if (*((_DWORD *)v2347 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
          {
LABEL_3606:
            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
            goto LABEL_2360;
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v241, v242, v243, v244, v245, v246, v247);
          goto LABEL_1379;
        }
        v2279 = 4;
        v1883 = v2144;
        v1884 = v2153;
LABEL_2795:
        v1885 = 0;
        v2321 = v1883;
        v2236 = 2 * v2279;
        while (1)
        {
          if (v2174 >= v1885 + v2279)
            v1886 = v1885 + v2279;
          else
            v1886 = v2174;
          if (v2174 >= v1886 + v2279)
            v1887 = v1886 + v2279;
          else
            v1887 = v2174;
          if (v1886 >= v1887)
          {
LABEL_2827:
            v1924 = v1887 - v1885;
            if (v1887 != v1885)
            {
              v1925 = (_QWORD *)((char *)v2321 + 8 * v1885);
              v241 = (char *)v1884 + 8 * v1885;
              if (v1924 == 1)
                *v1925 = *(_QWORD *)v241;
              else
                memcpy(v1925, v241, 8 * v1924);
            }
LABEL_2831:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_3019;
            goto LABEL_2832;
          }
          v1888 = (double *)((char *)v1884 + 8 * v1886);
          v1890 = *((_QWORD *)v1888 - 1);
          v1889 = *v1888;
          v2350[0] = v2322;
          LOBYTE(v2326) = 0;
          LODWORD(v2327) = 0;
          v1891 = v1889;
          if (*((_DWORD *)v2322 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
            || *((_DWORD *)v2322 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
          {
            goto LABEL_3520;
          }
          JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, *(_QWORD *)&v1891 + 0x2000000000000, v242, v243, v244, v245, v246, v247);
          JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1890 + 0x2000000000000, v1892, v1893, v1894, v1895, v1896, v1897);
          if ((_BYTE)v2326)
            break;
          v2348 = v2328;
          v2349 = v2327;
          v1901 = JSC::call((uint64_t *)v2150, (uint64_t)v199, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1898, v1899, v1900);
          if (*((_DWORD *)v2322 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
          {
            goto LABEL_3520;
          }
          v2348 = (JSC::JSObject *)v1901;
          if (v1901 < 0xFFFE000000000000)
          {
            if ((v1901 & 0xFFFFFFFFFFFFFFFELL) == 6)
            {
              LODWORD(v1903) = v1901 != 7;
            }
            else
            {
              if (v1901 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1902);
              else
                *(_QWORD *)&v2125 = v1901 - 0x2000000000000;
              LODWORD(v1903) = v2125 < 0.0;
            }
          }
          else
          {
            v1903 = (v1901 >> 31) & 1;
          }
LABEL_2809:
          if (*((_QWORD *)v2322 + 2))
            goto LABEL_3019;
          if (!(_DWORD)v1903)
            goto LABEL_2827;
          v1904 = v1885;
          v1905 = v1886;
          v1906 = v1885;
          if (v1887 > v1885)
          {
            while (1)
            {
              if (v1905 >= v1887)
                goto LABEL_2824;
              v1907 = (double *)((char *)v1884 + 8 * v1905);
              if (v1906 < v1886)
              {
                v1908 = *v1907;
                v1909 = *((_QWORD *)v1884 + v1906);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                v1910 = v1908;
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247)
                  || *((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  goto LABEL_3409;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, *(_QWORD *)&v1910 + 0x2000000000000, v242, v243, v244, v245, v246, v247);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1909 + 0x2000000000000, v1911, v1912, v1913, v1914, v1915, v1916);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3409:
                  if (*((_QWORD *)v2322 + 2))
                    goto LABEL_3019;
LABEL_2824:
                  v1907 = (double *)((char *)v1884 + 8 * v1906++);
                  goto LABEL_2825;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1920 = JSC::call((uint64_t *)v2150, (uint64_t)v199, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1917, v1918, v1919);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v241, v242, v243, v244, v245, v246, v247))
                {
                  goto LABEL_3409;
                }
                v2348 = (JSC::JSObject *)v1920;
                if (v1920 < 0xFFFE000000000000)
                {
                  if ((v1920 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1922) = v1920 != 7;
                  }
                  else
                  {
                    if (v1920 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v242, v243, v244, v245, v246, v247, v1921);
                    else
                      *(_QWORD *)&v2115 = v1920 - 0x2000000000000;
                    LODWORD(v1922) = v2115 < 0.0;
                  }
                }
                else
                {
                  v1922 = (v1920 >> 31) & 1;
                }
                v1923 = *((_QWORD *)v2322 + 2);
                if (v1923 || !(_DWORD)v1922)
                {
                  if (v1923)
                    goto LABEL_3019;
                  goto LABEL_2824;
                }
              }
              ++v1905;
LABEL_2825:
              *((double *)v2321 + v1904++) = *v1907;
              if (v1904 >= v1887)
                goto LABEL_2831;
            }
          }
LABEL_2832:
          v1885 += v2236;
          if (v1885 >= v2174)
          {
            v2279 *= 2;
            v1883 = v1884;
            v1884 = v2321;
            if (v2236 >= v2174)
              goto LABEL_3016;
            goto LABEL_2795;
          }
        }
        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3520:
        LODWORD(v1903) = 0;
        goto LABEL_2809;
      case '0':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
              goto LABEL_325;
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v184, v185, v186, v187, v188, v189, v190))
        {
          return 0;
        }
        v191 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::sort((uint64_t)v2151, v184, v185, v186, v187, v188, v189, v190);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2173 = JSC::JSArrayBufferView::length(v2151, v463, v464, v465, v466, v467, v468, v469);
        if (v2173 < 2)
          return v2151;
        __srca = *((_QWORD *)v2151 + 2);
        if (__srca)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __srca = (__srca & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __srca = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2173 & 0x8000000000000000) != 0
          || (WTF::Vector<double,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, 2 * v2173) & 1) == 0)
        {
          goto LABEL_2095;
        }
        v2134 = (JSC::MarkedVectorBase *)((char *)__dst + 8 * v2173);
        v2146 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__srca, 8 * v2173);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v191, 2, v288, v289, v290, v291);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
          {
            goto LABEL_2364;
          }
          v470 = 0;
          v471 = v2173;
          while (v470 < v471)
          {
            v472 = v470 + 4;
            if (v471 >= v470 + 4)
              v473 = v470 + 4;
            else
              v473 = v471;
            v2290 = v473 - v470;
            if (v473 - v470 >= 2)
            {
              v2248 = v470 + 4;
              v474 = (_QWORD *)((char *)v2146 + 8 * v470);
              v475 = 1;
              v476 = v2150;
              while (1)
              {
                v477 = v474[v475];
                v478 = v475;
                while (1)
                {
                  v479 = v478 - 1;
                  v480 = v474[v478 - 1];
                  v481 = JSC::JSBigInt::createFrom(v476, v477, v293, v294, v295, v296, v297, v298);
                  if (*((_QWORD *)v2322 + 2))
                    goto LABEL_1671;
                  v482 = v481;
                  v483 = JSC::JSBigInt::createFrom(v476, v480, v293, v294, v295, v296, v297, v298);
                  if (*((_QWORD *)v2322 + 2))
                    goto LABEL_1671;
                  v485 = v483;
                  v486 = v2329;
                  v2348 = (JSC::JSObject *)v2329;
                  if (v2340 <= 3)
                  {
                    if (v2339)
                      v487 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v482, v483);
                    else
                      v487 = 0;
                    *(_BYTE *)(v486 + 93120) = 1;
                    if (*(_DWORD *)(v486 + 80)
                      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v486, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                    {
                      v487 = 0;
LABEL_671:
                      v476 = v2150;
                      goto LABEL_672;
                    }
                    if (v487)
                      goto LABEL_671;
                  }
                  v2334 = 0;
                  v2335 = 0;
                  *(_QWORD *)&v2332 = 10;
                  JSC::CachedCall::appendArgument((uint64_t *)&v2326, v482, v293, v294, v295, v296, v297, v298);
                  JSC::CachedCall::appendArgument((uint64_t *)&v2326, v485, v1190, v1191, v1192, v1193, v1194, v1195);
                  if (!v2334)
                  {
                    v1198 = v2329;
                    v1199 = v2339;
                    if (v2339)
                      goto LABEL_1871;
                    v2071 = (unsigned int *)(v2329 + 80);
                    v2072 = *(_DWORD *)(v2329 + 80);
                    if ((v2072 & 0x20) == 0)
                    {
                      do
                        v2073 = __ldaxr(v2071);
                      while (__stlxr(v2073 | 0x20, v2071));
                    }
                    JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1196, v1197, v294, v295, v296, v297, v298);
                    if (*v2071
                      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1198, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                    {
                      v2074 = 0;
                      v1199 = 0;
                      v2206 = *(_QWORD *)(v1198 + 16);
                    }
                    else
                    {
                      v2074 = 1;
                      v1199 = v2339;
                    }
                    if ((v2072 & 0x20) == 0)
                    {
                      do
                        v2075 = __ldaxr(v2071);
                      while (__stlxr(v2075 & 0xFFFFFFDF, v2071));
                    }
                    if (v2074)
LABEL_1871:
                      v2206 = vmEntryToJavaScript((uint64_t)v1199, (JSC::VM *)v1198, (uint64_t)&v2330 + 8, v294, v295, v296, v297, v298);
                    *(_BYTE *)(v1198 + 93120) = 1;
                    v487 = v2206;
                    goto LABEL_671;
                  }
                  v476 = v2150;
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                  v487 = 0;
LABEL_672:
                  if (*((_QWORD *)v2322 + 2))
                    goto LABEL_1671;
                  v2348 = (JSC::JSObject *)v487;
                  if (v487 < 0xFFFE000000000000)
                  {
                    if ((v487 & 0xFFFFFFFFFFFFFFFELL) == 6)
                    {
                      v488 = 0;
                      LODWORD(v489) = v487 != 7;
                    }
                    else
                    {
                      if (v487 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      {
                        JSC::JSValue::toNumberSlowCase(&v2348, v2150, v293, v294, v295, v296, v297, v298, v484);
                        v488 = *((_QWORD *)v2322 + 2);
                      }
                      else
                      {
                        v488 = 0;
                        *(_QWORD *)&v1201 = v487 - 0x2000000000000;
                      }
                      LODWORD(v489) = v1201 < 0.0;
                    }
                    v476 = v2150;
                  }
                  else
                  {
                    v488 = 0;
                    v489 = (v487 >> 31) & 1;
                  }
                  if (v488 || !(_DWORD)v489)
                    break;
                  v474[v478--] = v480;
                  if (!v479)
                    goto LABEL_680;
                }
                if (v488)
                  goto LABEL_1671;
LABEL_680:
                v474[v478] = v477;
                if (++v475 >= v2290)
                {
                  v490 = 0;
                  v471 = v2173;
                  v472 = v2248;
                  goto LABEL_683;
                }
              }
            }
            v490 = *((_QWORD *)v2322 + 2);
LABEL_683:
            v470 = v472;
            if (v490)
              goto LABEL_1671;
          }
          if (v471 < 5)
          {
            v2192 = v2146;
LABEL_1668:
            v1041 = v2146;
            if (v2192 != v2146)
              v1041 = v2134;
            v2146 = v1041;
            goto LABEL_1671;
          }
          v2164 = 4;
          v944 = v2134;
          v2219 = v2146;
LABEL_1522:
          v945 = 0;
          v946 = v944;
          v948 = v2164;
          v947 = v2173;
          v949 = 2 * v2164;
          v950 = v2150;
          v951 = v2322;
          v2192 = v944;
          v952 = v2219;
          while (1)
          {
            v953 = v947 >= v945 + v948 ? v945 + v948 : v947;
            v954 = v947 >= v953 + v948 ? v953 + v948 : v947;
            if (v953 < v954)
              break;
LABEL_1542:
            v966 = (_QWORD *)((char *)v946 + 8 * v945);
            v292 = (_QWORD *)((char *)v952 + 8 * v945);
            v967 = v954 - v945;
            if (v954 - v945 == 1)
            {
              *v966 = *v292;
            }
            else if (v967)
            {
              memcpy(v966, v292, 8 * v967);
            }
            v950 = v2150;
LABEL_1546:
            if (*((_QWORD *)v951 + 2))
              goto LABEL_1671;
            v945 += v949;
            if (v945 >= v947)
            {
              v2164 = v949;
              v944 = v952;
              v2219 = v946;
              if (v949 >= v947)
                goto LABEL_1668;
              goto LABEL_1522;
            }
          }
          v2259 = v945;
          v2301 = v953;
          v955 = (uint64_t *)((char *)v952 + 8 * v953);
          v956 = *(v955 - 1);
          v957 = v950;
          v958 = JSC::JSBigInt::createFrom(v950, *v955, v293, v294, v295, v296, v297, v298);
          if (*((_QWORD *)v951 + 2)
            || (v959 = v958,
                v960 = JSC::JSBigInt::createFrom(v957, v956, v293, v294, v295, v296, v297, v298),
                *((_QWORD *)v951 + 2)))
          {
LABEL_1671:
            if (*((_DWORD *)v2347 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
            {
              goto LABEL_2364;
            }
            JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v292, v293, v294, v295, v296, v297, v298);
            goto LABEL_1673;
          }
          v962 = v960;
          v963 = v2329;
          v2348 = (JSC::JSObject *)v2329;
          if (v2340 <= 3)
          {
            if (v2339)
              v964 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v959, v960);
            else
              v964 = 0;
            *(_BYTE *)(v963 + 93120) = 1;
            if (*(_DWORD *)(v963 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v963, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
            {
              v964 = 0;
              goto LABEL_1537;
            }
            if (v964)
            {
LABEL_1537:
              v950 = v2150;
LABEL_1538:
              v965 = v2301;
              if (*((_QWORD *)v951 + 2))
                goto LABEL_1671;
              v2348 = (JSC::JSObject *)v964;
              if (v964 <= 0xFFFDFFFFFFFFFFFFLL)
              {
                if ((v964 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  v950 = v2150;
                  v965 = v2301;
                  v951 = v2322;
                  v948 = v2164;
                  v947 = v2173;
                  v946 = v2192;
                  if (v964 != 7)
                    goto LABEL_1549;
                }
                else
                {
                  if (v964 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                  {
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v293, v294, v295, v296, v297, v298, v961);
                    if (*((_QWORD *)v2322 + 2))
                      goto LABEL_1671;
                  }
                  else
                  {
                    *(_QWORD *)&v1251 = v964 - 0x2000000000000;
                  }
                  v950 = v2150;
                  v965 = v2301;
                  v951 = v2322;
                  v948 = v2164;
                  v947 = v2173;
                  v946 = v2192;
                  if (v1251 < 0.0)
                  {
LABEL_1549:
                    v952 = v2219;
                    v945 = v2259;
                    v968 = v2259;
                    v969 = v965;
                    v970 = v2259;
                    if (v954 <= v2259)
                    {
LABEL_1569:
                      v951 = v2322;
                      v948 = v2164;
                      v947 = v2173;
                      v949 = 2 * v2164;
                      goto LABEL_1546;
                    }
                    while (2)
                    {
                      if (v969 < v954)
                      {
                        v971 = (uint64_t *)((char *)v952 + 8 * v969);
                        if (v970 >= v965)
                          goto LABEL_1565;
                        v972 = *((_QWORD *)v952 + v970);
                        v973 = v950;
                        v974 = JSC::JSBigInt::createFrom(v950, *v971, v293, v294, v295, v296, v297, v298);
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_1671;
                        v975 = v974;
                        v976 = JSC::JSBigInt::createFrom(v973, v972, v293, v294, v295, v296, v297, v298);
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_1671;
                        v978 = v976;
                        v979 = v2329;
                        v2348 = (JSC::JSObject *)v2329;
                        if (v2340 <= 3)
                        {
                          if (v2339)
                            v980 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v975, v976);
                          else
                            v980 = 0;
                          *(_BYTE *)(v979 + 93120) = 1;
                          if (*(_DWORD *)(v979 + 80)
                            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v979, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                          {
                            v980 = 0;
                            goto LABEL_1559;
                          }
                          if (v980)
                            goto LABEL_1559;
                        }
                        v2334 = 0;
                        v2335 = 0;
                        *(_QWORD *)&v2332 = 10;
                        JSC::CachedCall::appendArgument((uint64_t *)&v2326, v975, v293, v294, v295, v296, v297, v298);
                        JSC::CachedCall::appendArgument((uint64_t *)&v2326, v978, v1217, v1218, v1219, v1220, v1221, v1222);
                        if (v2334)
                        {
                          JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                          v950 = v2150;
                          v980 = 0;
                        }
                        else
                        {
                          v1225 = v2329;
                          v1226 = v2339;
                          if (v2339)
                            goto LABEL_1953;
                          v2091 = (unsigned int *)(v2329 + 80);
                          v2092 = *(_DWORD *)(v2329 + 80);
                          if ((v2092 & 0x20) == 0)
                          {
                            do
                              v2093 = __ldaxr(v2091);
                            while (__stlxr(v2093 | 0x20, v2091));
                          }
                          JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1223, v1224, v294, v295, v296, v297, v298);
                          if (*v2091
                            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1225, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                          {
                            v2094 = 0;
                            v1226 = 0;
                            v2127 = *(_QWORD *)(v1225 + 16);
                          }
                          else
                          {
                            v2094 = 1;
                            v1226 = v2339;
                          }
                          if ((v2092 & 0x20) == 0)
                          {
                            do
                              v2095 = __ldaxr(v2091);
                            while (__stlxr(v2095 & 0xFFFFFFDF, v2091));
                          }
                          if (v2094)
LABEL_1953:
                            v2127 = vmEntryToJavaScript((uint64_t)v1226, (JSC::VM *)v1225, (uint64_t)&v2330 + 8, v294, v295, v296, v297, v298);
                          *(_BYTE *)(v1225 + 93120) = 1;
                          v980 = v2127;
LABEL_1559:
                          v950 = v2150;
                        }
                        v965 = v2301;
                        v946 = v2192;
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_1671;
                        v2348 = (JSC::JSObject *)v980;
                        if (v980 < 0xFFFE000000000000)
                        {
                          if ((v980 & 0xFFFFFFFFFFFFFFFELL) == 6)
                          {
                            v981 = 0;
                            LODWORD(v982) = v980 != 7;
                          }
                          else
                          {
                            if (v980 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            {
                              JSC::JSValue::toNumberSlowCase(&v2348, v2150, v293, v294, v295, v296, v297, v298, v977);
                              v981 = *((_QWORD *)v2322 + 2);
                            }
                            else
                            {
                              v981 = 0;
                              *(_QWORD *)&v1248 = v980 - 0x2000000000000;
                            }
                            LODWORD(v982) = v1248 < 0.0;
                          }
                          v950 = v2150;
                          v946 = v2192;
                          v965 = v2301;
                        }
                        else
                        {
                          v981 = 0;
                          v982 = (v980 >> 31) & 1;
                        }
                        v952 = v2219;
                        v945 = v2259;
                        if (!v981)
                        {
                          if ((_DWORD)v982)
                          {
LABEL_1565:
                            ++v969;
                            goto LABEL_1568;
                          }
                        }
                        if (v981)
                          goto LABEL_1569;
                      }
                      v971 = (uint64_t *)((char *)v952 + 8 * v970++);
LABEL_1568:
                      *((_QWORD *)v946 + v968++) = *v971;
                      if (v968 >= v954)
                        goto LABEL_1569;
                      continue;
                    }
                  }
                }
              }
              else if ((v964 & 0x80000000) != 0)
              {
                goto LABEL_1549;
              }
              v952 = v2219;
              v945 = v2259;
              goto LABEL_1542;
            }
          }
          v2334 = 0;
          v2335 = 0;
          *(_QWORD *)&v2332 = 10;
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v959, v293, v294, v295, v296, v297, v298);
          JSC::CachedCall::appendArgument((uint64_t *)&v2326, v962, v1237, v1238, v1239, v1240, v1241, v1242);
          if (v2334)
          {
            JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
            v950 = v2150;
            v964 = 0;
          }
          else
          {
            v1245 = v2329;
            v1246 = v2339;
            if (v2339)
              goto LABEL_1990;
            v2101 = (unsigned int *)(v2329 + 80);
            v2102 = *(_DWORD *)(v2329 + 80);
            if ((v2102 & 0x20) == 0)
            {
              do
                v2103 = __ldaxr(v2101);
              while (__stlxr(v2103 | 0x20, v2101));
            }
            JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1243, v1244, v294, v295, v296, v297, v298);
            if (*v2101
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1245, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
            {
              v2104 = 0;
              v1246 = 0;
              v2126 = *(_QWORD *)(v1245 + 16);
            }
            else
            {
              v2104 = 1;
              v1246 = v2339;
            }
            if ((v2102 & 0x20) == 0)
            {
              do
                v2105 = __ldaxr(v2101);
              while (__stlxr(v2105 & 0xFFFFFFDF, v2101));
            }
            if (v2104)
LABEL_1990:
              v2126 = vmEntryToJavaScript((uint64_t)v1246, (JSC::VM *)v1245, (uint64_t)&v2330 + 8, v294, v295, v296, v297, v298);
            *(_BYTE *)(v1245 + 93120) = 1;
            v964 = v2126;
            v950 = v2150;
          }
          v951 = v2322;
          v948 = v2164;
          v947 = v2173;
          v946 = v2192;
          goto LABEL_1538;
        }
        v1445 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2225 = (uint64_t *)((char *)v2146 + 8);
        while (v1445 < v2173)
        {
          v1446 = v2173;
          v2197 = (JSC::MarkedVectorBase *)(v1445 + 4);
          if (v2173 >= v1445 + 4)
            v1446 = v1445 + 4;
          v2268 = v1446 - v1445;
          if (v1446 - v1445 < 2)
          {
            v1472 = *((_QWORD *)v2322 + 2);
          }
          else
          {
            v2310 = (_QWORD *)((char *)v2146 + 8 * v1445);
            v1447 = v2225;
            v1448 = 1;
            while (2)
            {
              v1449 = v2310[v1448];
              v1450 = v1447;
              v1451 = v1448;
              v1452 = v1447;
              while (1)
              {
                v1454 = *--v1452;
                v1453 = v1454;
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                v1456 = JSC::JSBigInt::createFrom(v2150, v1449, v286, v287, v288, v289, v290, v291);
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1455, v286, v287, v288, v289, v290, v291))
                    break;
                }
                v1458 = JSC::JSBigInt::createFrom(v2150, v1453, v286, v287, v288, v289, v290, v291);
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1457, v286, v287, v288, v289, v290, v291))
                    break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1456, v286, v287, v288, v289, v290, v291);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1458, v1459, v1460, v1461, v1462, v1463, v1464);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1468 = JSC::call((uint64_t *)v2150, (uint64_t)v191, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1465, v1466, v1467);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1468;
                if (v1468 < 0xFFFE000000000000)
                {
                  if ((v1468 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1470) = v1468 != 7;
                  }
                  else
                  {
                    if (v1468 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v286, v287, v288, v289, v290, v291, v1469);
                    else
                      *(_QWORD *)&v2084 = v1468 - 0x2000000000000;
                    LODWORD(v1470) = v2084 < 0.0;
                  }
                }
                else
                {
                  v1470 = (v1468 >> 31) & 1;
                }
                v1471 = *((_QWORD *)v2322 + 2);
                if (v1471 || !(_DWORD)v1470)
                {
                  if (v1471)
                    goto LABEL_3013;
                  goto LABEL_2296;
                }
                *v1450 = v1453;
                v1450 = v1452;
                if (!--v1451)
                  goto LABEL_2296;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3013;
LABEL_2296:
              v2310[v1451] = v1449;
              ++v1448;
              ++v1447;
              if (v1448 < v2268)
                continue;
              break;
            }
            v1472 = 0;
          }
          v2225 += 4;
          v1445 = (unint64_t)v2197;
          if (v1472)
            goto LABEL_3013;
        }
        if (v2173 >= 5)
        {
          v2205 = 4;
          v1835 = v2134;
          v2320 = v2146;
          while (1)
          {
            v1836 = 0;
            v2278 = v1835;
            v2166 = 2 * v2205;
            do
            {
              if (v2173 >= v1836 + v2205)
                v1837 = v1836 + v2205;
              else
                v1837 = v2173;
              if (v2173 >= v1837 + v2205)
                v1838 = v1837 + v2205;
              else
                v1838 = v2173;
              v2235 = v1837;
              if (v1837 >= v1838)
                goto LABEL_2786;
              v1839 = (uint64_t *)((char *)v2320 + 8 * v1837);
              v1841 = *(v1839 - 1);
              v1840 = *v1839;
              v2350[0] = v2322;
              LOBYTE(v2326) = 0;
              LODWORD(v2327) = 0;
              v1843 = JSC::JSBigInt::createFrom(v2150, v1840, v286, v287, v288, v289, v290, v291);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1842, v286, v287, v288, v289, v290, v291))
              {
                goto LABEL_3518;
              }
              v1845 = JSC::JSBigInt::createFrom(v2150, v1841, v286, v287, v288, v289, v290, v291);
              if (*((_DWORD *)v2322 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1844, v286, v287, v288, v289, v290, v291))
                  goto LABEL_3518;
              }
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1843, v286, v287, v288, v289, v290, v291);
              JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1845, v1846, v1847, v1848, v1849, v1850, v1851);
              if ((_BYTE)v2326)
              {
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3518:
                LODWORD(v1857) = 0;
                goto LABEL_2767;
              }
              v2348 = v2328;
              v2349 = v2327;
              v1855 = JSC::call((uint64_t *)v2150, (uint64_t)v191, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1852, v1853, v1854);
              if (*((_DWORD *)v2322 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
              {
                goto LABEL_3518;
              }
              v2348 = (JSC::JSObject *)v1855;
              if (v1855 < 0xFFFE000000000000)
              {
                if ((v1855 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  LODWORD(v1857) = v1855 != 7;
                }
                else
                {
                  if (v1855 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v2348, v2150, v286, v287, v288, v289, v290, v291, v1856);
                  else
                    *(_QWORD *)&v2124 = v1855 - 0x2000000000000;
                  LODWORD(v1857) = v2124 < 0.0;
                }
              }
              else
              {
                v1857 = (v1855 >> 31) & 1;
              }
LABEL_2767:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3013;
              if ((_DWORD)v1857)
              {
                v1858 = v1836;
                v1859 = v2235;
                v1860 = v1836;
                if (v1838 > v1836)
                {
                  while (1)
                  {
                    if (v1859 < v1838)
                    {
                      if (v1860 >= v2235)
                      {
                        v1861 = (uint64_t *)((char *)v2320 + 8 * v1859);
LABEL_2785:
                        ++v1859;
                        goto LABEL_2782;
                      }
                      v1861 = (uint64_t *)((char *)v2320 + 8 * v1859);
                      v1862 = *v1861;
                      v1863 = *((_QWORD *)v2320 + v1860);
                      v2350[0] = v2322;
                      LOBYTE(v2326) = 0;
                      LODWORD(v2327) = 0;
                      v1865 = JSC::JSBigInt::createFrom(v2150, v1862, v286, v287, v288, v289, v290, v291);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1864, v286, v287, v288, v289, v290, v291))
                      {
                        goto LABEL_3406;
                      }
                      v1867 = JSC::JSBigInt::createFrom(v2150, v1863, v286, v287, v288, v289, v290, v291);
                      if (*((_DWORD *)v2322 + 20))
                      {
                        if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1866, v286, v287, v288, v289, v290, v291))
                          goto LABEL_3406;
                      }
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1865, v286, v287, v288, v289, v290, v291);
                      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1867, v1868, v1869, v1870, v1871, v1872, v1873);
                      if ((_BYTE)v2326)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3406:
                        if (*((_QWORD *)v2322 + 2))
                          goto LABEL_3013;
                        goto LABEL_2781;
                      }
                      v2348 = v2328;
                      v2349 = v2327;
                      v1877 = JSC::call((uint64_t *)v2150, (uint64_t)v191, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1874, v1875, v1876);
                      if (*((_DWORD *)v2322 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
                      {
                        goto LABEL_3406;
                      }
                      v2348 = (JSC::JSObject *)v1877;
                      if (v1877 < 0xFFFE000000000000)
                      {
                        if ((v1877 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          LODWORD(v1879) = v1877 != 7;
                        }
                        else
                        {
                          if (v1877 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v286, v287, v288, v289, v290, v291, v1878);
                          else
                            *(_QWORD *)&v2114 = v1877 - 0x2000000000000;
                          LODWORD(v1879) = v2114 < 0.0;
                        }
                      }
                      else
                      {
                        v1879 = (v1877 >> 31) & 1;
                      }
                      v1880 = *((_QWORD *)v2322 + 2);
                      if (!v1880 && (_DWORD)v1879)
                        goto LABEL_2785;
                      if (v1880)
                        goto LABEL_3013;
                    }
LABEL_2781:
                    v1861 = (uint64_t *)((char *)v2320 + 8 * v1860++);
LABEL_2782:
                    *((_QWORD *)v2278 + v1858++) = *v1861;
                    if (v1858 >= v1838)
                      goto LABEL_2789;
                  }
                }
                goto LABEL_2790;
              }
LABEL_2786:
              v1881 = (_QWORD *)((char *)v2278 + 8 * v1836);
              v285 = (_QWORD *)((char *)v2320 + 8 * v1836);
              v1882 = v1838 - v1836;
              if (v1838 - v1836 == 1)
              {
                *v1881 = *v285;
              }
              else if (v1882)
              {
                memcpy(v1881, v285, 8 * v1882);
              }
LABEL_2789:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_3013;
LABEL_2790:
              v1836 += v2166;
            }
            while (v1836 < v2173);
            v2205 *= 2;
            v1835 = v2320;
            v2320 = v2278;
            if (v2166 >= v2173)
              goto LABEL_3010;
          }
        }
        v2278 = v2146;
LABEL_3010:
        v1999 = v2146;
        if (v2278 != v2146)
          v1999 = v2134;
        v2146 = v1999;
LABEL_3013:
        if (*((_DWORD *)v2347 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
        {
          goto LABEL_3608;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v285, v286, v287, v288, v289, v290, v291);
LABEL_1673:
        if (JSC::JSArrayBufferView::isDetached(v2151))
          goto LABEL_1679;
        v1042 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
        v1040 = v2173;
        if (v2173 >= v1042)
          v1040 = v1042;
        if (v1040 == 1)
          goto LABEL_1666;
        if (!v1040)
          goto LABEL_1679;
LABEL_1678:
        memcpy((void *)__srca, v2146, 8 * v1040);
        goto LABEL_1679;
      case '1':
        v2325 = v9;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v2324 = 10;
        }
        else
        {
          v2324 = *((_QWORD *)a2 + 6);
          if (v2324 != 10)
          {
            v225 = this;
            if (!JSC::JSValue::isCallable((JSC::JSValue *)&v2324))
            {
LABEL_325:
              v14 = "TypedArray.prototype.sort requires the comparator argument to be a function or undefined";
              v15 = &v2325;
              this = v225;
              goto LABEL_11;
            }
            v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
            this = v225;
          }
        }
        v2150 = this;
        v2151 = v10;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v9 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v136, v137, v138, v139, v140, v141, v142))
        {
          return 0;
        }
        v143 = (JSC::JSFunction *)v2324;
        v2347 = v9;
        if (v2324 == 10)
        {
          v117 = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::sort((uint64_t)v2151, v136, v137, v138, v139, v140, v141, v142);
          if (!v117)
            return v2151;
          goto LABEL_254;
        }
        JSC::getCallData(v2324, (uint64_t)&v2344);
        v2169 = JSC::JSArrayBufferView::length(v2151, v278, v279, v280, v281, v282, v283, v284);
        if (v2169 < 2)
          return v2151;
        __srca = *((_QWORD *)v2151 + 2);
        if (__srca)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            __srca = (__srca & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          __srca = 0;
        }
        __dst = v2343;
        v2342 = 256;
        if ((v2169 & 0x8000000000000000) != 0
          || (WTF::Vector<unsigned long long,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>((uint64_t)&__dst, 2 * v2169) & 1) == 0)
        {
LABEL_2095:
          JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2347);
LABEL_2365:
          v2151 = 0;
          goto LABEL_1679;
        }
        v2133 = (JSC::MarkedVectorBase *)((char *)__dst + 8 * v2169);
        v2146 = (JSC::MarkedVectorBase *)__dst;
        memcpy(__dst, (const void *)__srca, 8 * v2169);
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2150, v143, 2, v288, v289, v290, v291);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
          {
            goto LABEL_2364;
          }
          v299 = 0;
          v300 = v2169;
          while (v299 < v300)
          {
            v301 = v299 + 4;
            if (v300 >= v299 + 4)
              v302 = v299 + 4;
            else
              v302 = v300;
            v2283 = v302 - v299;
            if (v302 - v299 >= 2)
            {
              v2241 = v299 + 4;
              v303 = (_QWORD *)((char *)v2146 + 8 * v299);
              v304 = 1;
              v305 = v2150;
LABEL_391:
              v306 = (JSC::JSGlobalObject *)v303[v304];
              v307 = v304;
              while (1)
              {
                v308 = v307 - 1;
                v309 = (JSC::JSGlobalObject *)v303[v307 - 1];
                v310 = JSC::JSBigInt::createFrom(v305, v306, v293, v294, v295, v296, v297, v298);
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1659;
                v311 = v310;
                v312 = JSC::JSBigInt::createFrom(v305, v309, v293, v294, v295, v296, v297, v298);
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1659;
                v314 = v312;
                v315 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v316 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v311, v312);
                  else
                    v316 = 0;
                  *(_BYTE *)(v315 + 93120) = 1;
                  if (*(_DWORD *)(v315 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v315, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                  {
                    v316 = 0;
LABEL_399:
                    v305 = v2150;
                    goto LABEL_400;
                  }
                  if (v316)
                    goto LABEL_399;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v311, v293, v294, v295, v296, v297, v298);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v314, v1180, v1181, v1182, v1183, v1184, v1185);
                if (!v2334)
                {
                  v1188 = v2329;
                  v1189 = v2339;
                  if (v2339)
                    goto LABEL_1867;
                  v2066 = (unsigned int *)(v2329 + 80);
                  v2067 = *(_DWORD *)(v2329 + 80);
                  if ((v2067 & 0x20) == 0)
                  {
                    do
                      v2068 = __ldaxr(v2066);
                    while (__stlxr(v2068 | 0x20, v2066));
                  }
                  JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1186, v1187, v294, v295, v296, v297, v298);
                  if (*v2066
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1188, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                  {
                    v2069 = 0;
                    v1189 = 0;
                    v2206 = *(_QWORD *)(v1188 + 16);
                  }
                  else
                  {
                    v2069 = 1;
                    v1189 = v2339;
                  }
                  if ((v2067 & 0x20) == 0)
                  {
                    do
                      v2070 = __ldaxr(v2066);
                    while (__stlxr(v2070 & 0xFFFFFFDF, v2066));
                  }
                  if (v2069)
LABEL_1867:
                    v2206 = vmEntryToJavaScript((uint64_t)v1189, (JSC::VM *)v1188, (uint64_t)&v2330 + 8, v294, v295, v296, v297, v298);
                  *(_BYTE *)(v1188 + 93120) = 1;
                  v316 = v2206;
                  goto LABEL_399;
                }
                v305 = v2150;
                JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                v316 = 0;
LABEL_400:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_1659;
                v2348 = (JSC::JSObject *)v316;
                if (v316 < 0xFFFE000000000000)
                {
                  if ((v316 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v317 = 0;
                    LODWORD(v318) = v316 != 7;
                  }
                  else
                  {
                    if (v316 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v293, v294, v295, v296, v297, v298, v313);
                      v317 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v317 = 0;
                      *(_QWORD *)&v1200 = v316 - 0x2000000000000;
                    }
                    LODWORD(v318) = v1200 < 0.0;
                  }
                  v305 = v2150;
                }
                else
                {
                  v317 = 0;
                  v318 = (v316 >> 31) & 1;
                }
                if (v317 || !(_DWORD)v318)
                {
                  if (v317)
                    goto LABEL_1659;
LABEL_408:
                  v303[v307] = v306;
                  if (++v304 < v2283)
                    goto LABEL_391;
                  v319 = 0;
                  v300 = v2169;
                  v301 = v2241;
                  goto LABEL_411;
                }
                v303[v307--] = v309;
                if (!v308)
                  goto LABEL_408;
              }
            }
            v319 = *((_QWORD *)v2322 + 2);
LABEL_411:
            v299 = v301;
            if (v319)
              goto LABEL_1659;
          }
          if (v300 < 5)
          {
            v2191 = v2146;
LABEL_1656:
            v1038 = v2146;
            if (v2191 != v2146)
              v1038 = v2133;
            v2146 = v1038;
            goto LABEL_1659;
          }
          v2163 = 4;
          v905 = v2133;
          v2258 = v2146;
LABEL_1466:
          v906 = 0;
          v907 = v905;
          v909 = v2163;
          v908 = v2169;
          v910 = 2 * v2163;
          v911 = v2150;
          v912 = v2322;
          v2191 = v905;
          v913 = v2258;
          while (1)
          {
            if (v908 >= v906 + v909)
              v914 = v906 + v909;
            else
              v914 = v908;
            if (v908 >= v914 + v909)
              v915 = v914 + v909;
            else
              v915 = v908;
            if (v914 >= v915)
            {
              v927 = v915 - v906;
              if (v915 == v906)
                goto LABEL_1493;
              v928 = (_QWORD *)((char *)v907 + 8 * v906);
              goto LABEL_1489;
            }
            v2218 = v906;
            v2300 = v914;
            v916 = (JSC::JSGlobalObject **)((char *)v913 + 8 * v914);
            v917 = *(v916 - 1);
            v918 = v911;
            v919 = JSC::JSBigInt::createFrom(v911, *v916, v293, v294, v295, v296, v297, v298);
            if (*((_QWORD *)v912 + 2)
              || (v920 = v919,
                  v921 = JSC::JSBigInt::createFrom(v918, v917, v293, v294, v295, v296, v297, v298),
                  *((_QWORD *)v912 + 2)))
            {
LABEL_1659:
              if (*((_DWORD *)v2347 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
              {
LABEL_2364:
                JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v292, v293, v294, v295, v296, v297, v298);
                goto LABEL_2365;
              }
              JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v292, v293, v294, v295, v296, v297, v298);
LABEL_1661:
              if (!JSC::JSArrayBufferView::isDetached(v2151))
              {
                v1039 = JSC::JSArrayBufferView::length(v2151, (uint64_t)v850, v851, v852, v853, v854, v855, v856);
                v1040 = v2169;
                if (v2169 >= v1039)
                  v1040 = v1039;
                if (v1040)
                {
                  if (v1040 != 1)
                    goto LABEL_1678;
LABEL_1666:
                  *(_QWORD *)__srca = *(_QWORD *)v2146;
                }
              }
LABEL_1679:
              v874 = __dst;
              goto LABEL_1422;
            }
            v923 = v921;
            v924 = v2329;
            v2348 = (JSC::JSObject *)v2329;
            if (v2340 <= 3)
            {
              if (v2339)
                v925 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v920, v921);
              else
                v925 = 0;
              *(_BYTE *)(v924 + 93120) = 1;
              if (*(_DWORD *)(v924 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v924, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
              {
                v925 = 0;
LABEL_1481:
                v911 = v2150;
                goto LABEL_1482;
              }
              if (v925)
                goto LABEL_1481;
            }
            v2334 = 0;
            v2335 = 0;
            *(_QWORD *)&v2332 = 10;
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v920, v293, v294, v295, v296, v297, v298);
            JSC::CachedCall::appendArgument((uint64_t *)&v2326, v923, v1227, v1228, v1229, v1230, v1231, v1232);
            if (v2334)
            {
              JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
              v911 = v2150;
              v925 = 0;
            }
            else
            {
              v1235 = v2329;
              v1236 = v2339;
              if (v2339)
                goto LABEL_1985;
              v2096 = (unsigned int *)(v2329 + 80);
              v2097 = *(_DWORD *)(v2329 + 80);
              if ((v2097 & 0x20) == 0)
              {
                do
                  v2098 = __ldaxr(v2096);
                while (__stlxr(v2098 | 0x20, v2096));
              }
              JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1233, v1234, v294, v295, v296, v297, v298);
              if (*v2096
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1235, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
              {
                v2099 = 0;
                v1236 = 0;
                v2126 = *(_QWORD *)(v1235 + 16);
              }
              else
              {
                v2099 = 1;
                v1236 = v2339;
              }
              if ((v2097 & 0x20) == 0)
              {
                do
                  v2100 = __ldaxr(v2096);
                while (__stlxr(v2100 & 0xFFFFFFDF, v2096));
              }
              if (v2099)
LABEL_1985:
                v2126 = vmEntryToJavaScript((uint64_t)v1236, (JSC::VM *)v1235, (uint64_t)&v2330 + 8, v294, v295, v296, v297, v298);
              *(_BYTE *)(v1235 + 93120) = 1;
              v925 = v2126;
              v911 = v2150;
            }
            v912 = v2322;
            v909 = v2163;
            v908 = v2169;
            v907 = v2191;
LABEL_1482:
            v926 = v2300;
            if (*((_QWORD *)v912 + 2))
              goto LABEL_1659;
            v2348 = (JSC::JSObject *)v925;
            if (v925 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              if ((v925 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                v911 = v2150;
                v926 = v2300;
                v912 = v2322;
                v909 = v2163;
                v908 = v2169;
                v907 = v2191;
                if (v925 != 7)
                  goto LABEL_1496;
              }
              else
              {
                if (v925 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v293, v294, v295, v296, v297, v298, v922);
                  if (*((_QWORD *)v2322 + 2))
                    goto LABEL_1659;
                }
                else
                {
                  *(_QWORD *)&v1250 = v925 - 0x2000000000000;
                }
                v911 = v2150;
                v926 = v2300;
                v912 = v2322;
                v909 = v2163;
                v908 = v2169;
                v907 = v2191;
                if (v1250 < 0.0)
                {
LABEL_1496:
                  v913 = v2258;
                  v929 = v2218;
                  v930 = v926;
                  v931 = v2218;
                  if (v915 <= v2218)
                  {
LABEL_1516:
                    v912 = v2322;
                    v909 = v2163;
                    v908 = v2169;
                    v910 = 2 * v2163;
                    v906 = v2218;
                    goto LABEL_1493;
                  }
                  while (2)
                  {
                    if (v930 < v915)
                    {
                      v932 = (JSC::JSGlobalObject **)((char *)v913 + 8 * v930);
                      if (v931 >= v926)
                        goto LABEL_1512;
                      v933 = (JSC::JSGlobalObject *)*((_QWORD *)v913 + v931);
                      v934 = v911;
                      v935 = JSC::JSBigInt::createFrom(v911, *v932, v293, v294, v295, v296, v297, v298);
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1659;
                      v936 = v935;
                      v937 = JSC::JSBigInt::createFrom(v934, v933, v293, v294, v295, v296, v297, v298);
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1659;
                      v939 = v937;
                      v940 = v2329;
                      v2348 = (JSC::JSObject *)v2329;
                      if (v2340 <= 3)
                      {
                        if (v2339)
                          v941 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v936, v937);
                        else
                          v941 = 0;
                        *(_BYTE *)(v940 + 93120) = 1;
                        if (*(_DWORD *)(v940 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v940, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                        {
                          v941 = 0;
                          goto LABEL_1506;
                        }
                        if (v941)
                          goto LABEL_1506;
                      }
                      v2334 = 0;
                      v2335 = 0;
                      *(_QWORD *)&v2332 = 10;
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v936, v293, v294, v295, v296, v297, v298);
                      JSC::CachedCall::appendArgument((uint64_t *)&v2326, v939, v1207, v1208, v1209, v1210, v1211, v1212);
                      if (v2334)
                      {
                        JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)&v2348);
                        v911 = v2150;
                        v941 = 0;
                      }
                      else
                      {
                        v1215 = v2329;
                        v1216 = v2339;
                        if (v2339)
                          goto LABEL_1949;
                        v2086 = (unsigned int *)(v2329 + 80);
                        v2087 = *(_DWORD *)(v2329 + 80);
                        if ((v2087 & 0x20) == 0)
                        {
                          do
                            v2088 = __ldaxr(v2086);
                          while (__stlxr(v2088 | 0x20, v2086));
                        }
                        JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v1213, v1214, v294, v295, v296, v297, v298);
                        if (*v2086
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v1215, (uint64_t)v292, v293, v294, v295, v296, v297, v298))
                        {
                          v2089 = 0;
                          v1216 = 0;
                          v2127 = *(_QWORD *)(v1215 + 16);
                        }
                        else
                        {
                          v2089 = 1;
                          v1216 = v2339;
                        }
                        if ((v2087 & 0x20) == 0)
                        {
                          do
                            v2090 = __ldaxr(v2086);
                          while (__stlxr(v2090 & 0xFFFFFFDF, v2086));
                        }
                        if (v2089)
LABEL_1949:
                          v2127 = vmEntryToJavaScript((uint64_t)v1216, (JSC::VM *)v1215, (uint64_t)&v2330 + 8, v294, v295, v296, v297, v298);
                        *(_BYTE *)(v1215 + 93120) = 1;
                        v941 = v2127;
LABEL_1506:
                        v911 = v2150;
                      }
                      v926 = v2300;
                      v907 = v2191;
                      if (*((_QWORD *)v2322 + 2))
                        goto LABEL_1659;
                      v2348 = (JSC::JSObject *)v941;
                      if (v941 < 0xFFFE000000000000)
                      {
                        if ((v941 & 0xFFFFFFFFFFFFFFFELL) == 6)
                        {
                          v942 = 0;
                          LODWORD(v943) = v941 != 7;
                        }
                        else
                        {
                          if (v941 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                          {
                            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v293, v294, v295, v296, v297, v298, v938);
                            v942 = *((_QWORD *)v2322 + 2);
                          }
                          else
                          {
                            v942 = 0;
                            *(_QWORD *)&v1247 = v941 - 0x2000000000000;
                          }
                          LODWORD(v943) = v1247 < 0.0;
                        }
                        v911 = v2150;
                        v907 = v2191;
                        v926 = v2300;
                      }
                      else
                      {
                        v942 = 0;
                        v943 = (v941 >> 31) & 1;
                      }
                      v913 = v2258;
                      if (!v942)
                      {
                        if ((_DWORD)v943)
                        {
LABEL_1512:
                          ++v930;
                          goto LABEL_1515;
                        }
                      }
                      if (v942)
                        goto LABEL_1516;
                    }
                    v932 = (JSC::JSGlobalObject **)((char *)v913 + 8 * v931++);
LABEL_1515:
                    *((_QWORD *)v907 + v929++) = *v932;
                    if (v929 >= v915)
                      goto LABEL_1516;
                    continue;
                  }
                }
              }
            }
            else if ((v925 & 0x80000000) != 0)
            {
              goto LABEL_1496;
            }
            v906 = v2218;
            v927 = v915 - v2218;
            if (v915 != v2218)
            {
              v928 = (_QWORD *)((char *)v907 + 8 * v2218);
              v913 = v2258;
LABEL_1489:
              v292 = (_QWORD *)((char *)v913 + 8 * v906);
              if (v927 == 1)
                *v928 = *v292;
              else
                memcpy(v928, v292, 8 * v927);
              v911 = v2150;
              goto LABEL_1493;
            }
            v913 = v2258;
LABEL_1493:
            if (*((_QWORD *)v912 + 2))
              goto LABEL_1659;
            v906 += v910;
            if (v906 >= v908)
            {
              v2163 = v910;
              v905 = v913;
              v2258 = v907;
              if (v910 >= v908)
                goto LABEL_1656;
              goto LABEL_1466;
            }
          }
        }
        v1276 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v2221 = (JSC::JSGlobalObject **)((char *)v2146 + 8);
        while (v1276 < v2169)
        {
          v1277 = v2169;
          v2193 = (JSC::MarkedVectorBase *)(v1276 + 4);
          if (v2169 >= v1276 + 4)
            v1277 = v1276 + 4;
          v2261 = v1277 - v1276;
          if (v1277 - v1276 < 2)
          {
            v1303 = *((_QWORD *)v2322 + 2);
          }
          else
          {
            v2303 = (_QWORD *)((char *)v2146 + 8 * v1276);
            v1278 = v2221;
            v1279 = 1;
            while (2)
            {
              v1280 = (JSC::JSGlobalObject *)v2303[v1279];
              v1281 = v1278;
              v1282 = v1279;
              v1283 = v1278;
              while (1)
              {
                v1285 = *--v1283;
                v1284 = v1285;
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                v1287 = JSC::JSBigInt::createFrom(v2150, v1280, v286, v287, v288, v289, v290, v291);
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1286, v286, v287, v288, v289, v290, v291))
                    break;
                }
                v1289 = JSC::JSBigInt::createFrom(v2150, v1284, v286, v287, v288, v289, v290, v291);
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1288, v286, v287, v288, v289, v290, v291))
                    break;
                }
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1287, v286, v287, v288, v289, v290, v291);
                JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1289, v1290, v1291, v1292, v1293, v1294, v1295);
                if ((_BYTE)v2326)
                {
                  JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
                  break;
                }
                v2348 = v2328;
                v2349 = v2327;
                v1299 = JSC::call((uint64_t *)v2150, (uint64_t)v143, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1296, v1297, v1298);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v1299;
                if (v1299 < 0xFFFE000000000000)
                {
                  if ((v1299 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v1301) = v1299 != 7;
                  }
                  else
                  {
                    if (v1299 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2150, v286, v287, v288, v289, v290, v291, v1300);
                    else
                      *(_QWORD *)&v2077 = v1299 - 0x2000000000000;
                    LODWORD(v1301) = v2077 < 0.0;
                  }
                }
                else
                {
                  v1301 = (v1299 >> 31) & 1;
                }
                v1302 = *((_QWORD *)v2322 + 2);
                if (v1302 || !(_DWORD)v1301)
                {
                  if (v1302)
                    goto LABEL_2971;
                  goto LABEL_2138;
                }
                *v1281 = v1284;
                v1281 = v1283;
                if (!--v1282)
                  goto LABEL_2138;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2971;
LABEL_2138:
              v2303[v1282] = v1280;
              ++v1279;
              ++v1278;
              if (v1279 < v2261)
                continue;
              break;
            }
            v1303 = 0;
          }
          v2221 += 4;
          v1276 = (unint64_t)v2193;
          if (v1303)
            goto LABEL_2971;
        }
        if (v2169 < 5)
        {
          v2271 = v2146;
LABEL_2968:
          v1992 = v2146;
          if (v2271 != v2146)
            v1992 = v2133;
          v2146 = v1992;
LABEL_2971:
          if (*((_DWORD *)v2347 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
          {
LABEL_3608:
            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v285, v286, v287, v288, v289, v290, v291);
            goto LABEL_2365;
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v285, v286, v287, v288, v289, v290, v291);
          goto LABEL_1661;
        }
        v2199 = 4;
        v1553 = v2133;
        v2313 = v2146;
        break;
      default:
        v14 = "Receiver should be a typed array view";
        v15 = &v2323;
        v16 = 38;
        return (JSC::JSArrayBufferView *)JSC::throwTypeError((unint64_t)this, v15, (uint64_t)v14, v16);
    }
LABEL_2450:
    v1554 = 0;
    v2271 = v1553;
    v2165 = 2 * v2199;
    while (1)
    {
      if (v2169 >= v1554 + v2199)
        v1555 = v1554 + v2199;
      else
        v1555 = v2169;
      if (v2169 >= v1555 + v2199)
        v1556 = v1555 + v2199;
      else
        v1556 = v2169;
      v2228 = v1555;
      if (v1555 >= v1556)
      {
LABEL_2483:
        v1599 = v1556 - v1554;
        if (v1556 != v1554)
        {
          v1600 = (_QWORD *)((char *)v2271 + 8 * v1554);
          v285 = (_QWORD *)((char *)v2313 + 8 * v1554);
          if (v1599 == 1)
            *v1600 = *v285;
          else
            memcpy(v1600, v285, 8 * v1599);
        }
LABEL_2487:
        if (*((_QWORD *)v2322 + 2))
          goto LABEL_2971;
        goto LABEL_2488;
      }
      v1557 = (JSC::JSGlobalObject **)((char *)v2313 + 8 * v1555);
      v1559 = *(v1557 - 1);
      v1558 = *v1557;
      v2350[0] = v2322;
      LOBYTE(v2326) = 0;
      LODWORD(v2327) = 0;
      v1561 = JSC::JSBigInt::createFrom(v2150, v1558, v286, v287, v288, v289, v290, v291);
      if (*((_DWORD *)v2322 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1560, v286, v287, v288, v289, v290, v291))
      {
        goto LABEL_3504;
      }
      v1563 = JSC::JSBigInt::createFrom(v2150, v1559, v286, v287, v288, v289, v290, v291);
      if (*((_DWORD *)v2322 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1562, v286, v287, v288, v289, v290, v291))
          goto LABEL_3504;
      }
      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1561, v286, v287, v288, v289, v290, v291);
      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1563, v1564, v1565, v1566, v1567, v1568, v1569);
      if ((_BYTE)v2326)
        break;
      v2348 = v2328;
      v2349 = v2327;
      v1573 = JSC::call((uint64_t *)v2150, (uint64_t)v143, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1570, v1571, v1572);
      if (*((_DWORD *)v2322 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
      {
        goto LABEL_3504;
      }
      v2348 = (JSC::JSObject *)v1573;
      if (v1573 < 0xFFFE000000000000)
      {
        if ((v1573 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          LODWORD(v1575) = v1573 != 7;
        }
        else
        {
          if (v1573 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            JSC::JSValue::toNumberSlowCase(&v2348, v2150, v286, v287, v288, v289, v290, v291, v1574);
          else
            *(_QWORD *)&v2117 = v1573 - 0x2000000000000;
          LODWORD(v1575) = v2117 < 0.0;
        }
      }
      else
      {
        v1575 = (v1573 >> 31) & 1;
      }
LABEL_2464:
      if (*((_QWORD *)v2322 + 2))
        goto LABEL_2971;
      if (!(_DWORD)v1575)
        goto LABEL_2483;
      v1576 = v1554;
      v1577 = v2228;
      v1578 = v1554;
      if (v1556 > v1554)
      {
        while (1)
        {
          if (v1577 < v1556)
          {
            if (v1578 >= v2228)
            {
              v1579 = (JSC::JSGlobalObject **)((char *)v2313 + 8 * v1577);
LABEL_2482:
              ++v1577;
              goto LABEL_2479;
            }
            v1579 = (JSC::JSGlobalObject **)((char *)v2313 + 8 * v1577);
            v1580 = *v1579;
            v1581 = (JSC::JSGlobalObject *)*((_QWORD *)v2313 + v1578);
            v2350[0] = v2322;
            LOBYTE(v2326) = 0;
            LODWORD(v2327) = 0;
            v1583 = JSC::JSBigInt::createFrom(v2150, v1580, v286, v287, v288, v289, v290, v291);
            if (*((_DWORD *)v2322 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1582, v286, v287, v288, v289, v290, v291))
            {
              goto LABEL_3385;
            }
            v1585 = JSC::JSBigInt::createFrom(v2150, v1581, v286, v287, v288, v289, v290, v291);
            if (*((_DWORD *)v2322 + 20))
            {
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, v1584, v286, v287, v288, v289, v290, v291))
                goto LABEL_3385;
            }
            JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1583, v286, v287, v288, v289, v290, v291);
            JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v2326, v1585, v1586, v1587, v1588, v1589, v1590, v1591);
            if ((_BYTE)v2326)
            {
              JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3385:
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_2971;
              goto LABEL_2478;
            }
            v2348 = v2328;
            v2349 = v2327;
            v1595 = JSC::call((uint64_t *)v2150, (uint64_t)v143, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v1592, v1593, v1594);
            if (*((_DWORD *)v2322 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v285, v286, v287, v288, v289, v290, v291))
            {
              goto LABEL_3385;
            }
            v2348 = (JSC::JSObject *)v1595;
            if (v1595 < 0xFFFE000000000000)
            {
              if ((v1595 & 0xFFFFFFFFFFFFFFFELL) == 6)
              {
                LODWORD(v1597) = v1595 != 7;
              }
              else
              {
                if (v1595 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                  JSC::JSValue::toNumberSlowCase(&v2348, v2150, v286, v287, v288, v289, v290, v291, v1596);
                else
                  *(_QWORD *)&v2107 = v1595 - 0x2000000000000;
                LODWORD(v1597) = v2107 < 0.0;
              }
            }
            else
            {
              v1597 = (v1595 >> 31) & 1;
            }
            v1598 = *((_QWORD *)v2322 + 2);
            if (!v1598 && (_DWORD)v1597)
              goto LABEL_2482;
            if (v1598)
              goto LABEL_2971;
          }
LABEL_2478:
          v1579 = (JSC::JSGlobalObject **)((char *)v2313 + 8 * v1578++);
LABEL_2479:
          *((_QWORD *)v2271 + v1576++) = *v1579;
          if (v1576 >= v1556)
            goto LABEL_2487;
        }
      }
LABEL_2488:
      v1554 += v2165;
      if (v1554 >= v2169)
      {
        v2199 *= 2;
        v1553 = v2313;
        v2313 = v2271;
        if (v2165 >= v2169)
          goto LABEL_2968;
        goto LABEL_2450;
      }
    }
    JSC::throwOutOfMemoryError(v2150, (JSC::JSGlobalObject *)v2350);
LABEL_3504:
    LODWORD(v1575) = 0;
    goto LABEL_2464;
  }
  v2325 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 1;
    v12 = 10;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if (v12 == 10)
    {
      v19 = 1;
      goto LABEL_15;
    }
    if ((v12 & 0xFFFE000000000002) != 0 || (v13 = *(unsigned __int8 *)(v12 + 5), v13 < 0x17))
    {
LABEL_10:
      v14 = "TypedArray.prototype.sort requires the comparator argument to be a function or undefined";
      v15 = &v2325;
LABEL_11:
      v16 = 89;
      return (JSC::JSArrayBufferView *)JSC::throwTypeError((unint64_t)this, v15, (uint64_t)v14, v16);
    }
    if ((v13 & 0xFE) != 0x1A)
    {
      if ((*(_BYTE *)(v12 + 6) & 4) != 0)
      {
        v93 = this;
        (*(void (**)(void **__return_ptr, _QWORD))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(&__dst, *((_QWORD *)a2 + 6));
        this = v93;
        if ((_BYTE)__dst)
        {
          v19 = 0;
          v10 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 5);
          goto LABEL_15;
        }
      }
      goto LABEL_10;
    }
    v19 = 0;
  }
LABEL_15:
  v2149 = this;
  v2151 = v10;
  JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v20, v21, v22, v23, v24, v25, v26))
    return 0;
  v2347 = v9;
  if (v19)
  {
    v17 = (uint64_t)v2151;
    v233 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::sort((uint64_t)v2151, v20, v21, v22, v23, v24, v25, v26);
    if (!v233)
      return (JSC::JSArrayBufferView *)v17;
    if (v233 != 2)
    {
      JSC::throwOutOfMemoryError(v2149, (JSC::JSGlobalObject *)&v2347);
      return 0;
    }
    v14 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    v15 = &v2347;
    this = v2149;
    v16 = 72;
    return (JSC::JSArrayBufferView *)JSC::throwTypeError((unint64_t)this, v15, (uint64_t)v14, v16);
  }
  v17 = (uint64_t)v2151;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v2344) = 0;
  }
  else if (*(_BYTE *)(v12 + 5) == 26)
  {
    v27 = *(_QWORD *)(v12 + 24);
    if ((v27 & 1) != 0)
      v27 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v27 + 5) == 8)
    {
      LOBYTE(v2344) = 1;
      v2345 = *(_QWORD *)(v27 + 40);
      LOBYTE(v2346) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                 + 0x4C));
    }
    else
    {
      LOBYTE(v2344) = 2;
      v28 = *(_QWORD *)(v12 + 16);
      v2345 = v27;
      v2346 = v28;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v2344, v12);
    v17 = (uint64_t)v2151;
  }
  if ((*(_BYTE *)(v17 + 40) & 7u) <= 2)
  {
    v29 = *(_QWORD *)(v17 + 24);
    goto LABEL_26;
  }
  LOBYTE(__dst) = 0;
  LOBYTE(v2342) = 0;
  v200 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v17, (uint64_t)&__dst, v21, v22, v23, v24, v25, v26);
  if (!v201)
    return v2151;
  v29 = v200;
  v17 = (uint64_t)v2151;
LABEL_26:
  if (v29 < 2)
    return (JSC::JSArrayBufferView *)v17;
  v30 = *(_QWORD *)(v17 + 16);
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v30 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  __dst = v2343;
  v2342 = 256;
  if ((v29 & 0x8000000000000000) == 0)
  {
    v31 = (JSC::MarkedVectorBase *)v2343;
    if (v29 < 0x81)
      goto LABEL_33;
    if (2 * v29 <= 0x141)
      v94 = 321;
    else
      v94 = 2 * v29;
    if (!(v94 >> 30))
    {
      v95 = v30;
      WTF::tryFastMalloc((WTF *)(4 * v94), &v2326);
      v31 = v2326;
      if (v2326)
      {
        v30 = v95;
        LODWORD(v2342) = v94;
        __dst = v2326;
LABEL_33:
        HIDWORD(v2342) = 2 * v29;
        v2136 = (JSC::MarkedVectorBase *)((char *)v31 + 4 * v29);
        v2145 = (_DWORD *)v30;
        v2154 = v31;
        memcpy(v31, (const void *)v30, 4 * v29);
        v2167 = (JSC::MarkedVectorBase *)v29;
        if (v2344 == 2)
        {
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&v2326, v2149, (JSC::JSFunction *)v12, 2, v35, v36, v37, v38);
          if (*((_DWORD *)v9 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
          {
            goto LABEL_754;
          }
          v47 = 0;
          while (v47 < v29)
          {
            v48 = v47 + 4;
            v2238 = v47 + 4;
            if (v29 < v47 + 4)
              v48 = v29;
            v49 = v48 - v47;
            v50 = *((_QWORD *)v9 + 2);
            v2280 = v49;
            if (v49 >= 2)
            {
              v51 = (char *)v2154 + 4 * v47;
              v52 = 1;
LABEL_41:
              v53 = *(unsigned int *)&v51[4 * v52];
              *(double *)v46.i64 = (double)v53;
              if ((int)v53 >= 0)
                v54 = v53 | 0xFFFE000000000000;
              else
                v54 = COERCE__INT64((double)v53) + 0x2000000000000;
              v55 = v52;
              while (1)
              {
                if (v50)
                  goto LABEL_733;
                v56 = v55 - 1;
                v57 = *(unsigned int *)&v51[4 * v55 - 4];
                if ((v57 & 0x80000000) != 0)
                {
                  *(double *)v46.i64 = (double)v57;
                  v58 = COERCE__INT64((double)v57) + 0x2000000000000;
                }
                else
                {
                  v58 = v57 | 0xFFFE000000000000;
                }
                v59 = v2329;
                v2348 = (JSC::JSObject *)v2329;
                if (v2340 <= 3)
                {
                  if (v2339)
                    v60 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v54, v58);
                  else
                    v60 = 0;
                  *(_BYTE *)(v59 + 93120) = 1;
                  if (*(_DWORD *)(v59 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v59, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
                  {
                    goto LABEL_164;
                  }
                  if (v60)
                    goto LABEL_53;
                }
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                if (v2336 && (v2337 == v2338 || !v2337))
                {
                  *(_QWORD *)v2337 = v54;
                  v2335 = 1;
                }
                else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v2335, v54, v40, v41, v42, v43, v44, v45) == 1)
                {
                  v2334 = 1;
                }
                v106 = v2335;
                if (v2335 == v2336 || v2337 != v2338 && v2337)
                {
                  if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v2335, v58, v40, v41, v42, v43, v44, v45) == 1)
                  {
                    v2334 = 1;
LABEL_199:
                    JSC::throwOutOfMemoryError(v2149, (JSC::JSGlobalObject *)&v2348);
LABEL_164:
                    v60 = 0;
                    goto LABEL_53;
                  }
                }
                else
                {
                  *(_QWORD *)&v2337[8 * v2335] = v58;
                  v2335 = v106 + 1;
                }
                if (v2334)
                  goto LABEL_199;
                v107 = v2329;
                v108 = v2339;
                if (v2339)
                  goto LABEL_160;
                v1095 = (unsigned int *)(v2329 + 80);
                v1096 = *(_DWORD *)(v2329 + 80);
                if ((v1096 & 0x20) == 0)
                {
                  do
                    v1097 = __ldaxr(v1095);
                  while (__stlxr(v1097 | 0x20, v1095));
                }
                JSC::CachedCall::relink((JSC::CachedCall *)&v2326, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
                if (*v1095
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v107, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
                {
                  v1098 = 0;
                  v108 = 0;
                  v2179 = *(JSC::MarkedVectorBase **)(v107 + 16);
                }
                else
                {
                  v1098 = 1;
                  v108 = v2339;
                }
                if ((v1096 & 0x20) == 0)
                {
                  do
                    v1099 = __ldaxr(v1095);
                  while (__stlxr(v1099 & 0xFFFFFFDF, v1095));
                }
                v60 = (unint64_t)v2179;
                if (v1098)
LABEL_160:
                  v60 = vmEntryToJavaScript((uint64_t)v108, (JSC::VM *)v107, (uint64_t)&v2330 + 8, v41, v42, v43, v44, v45);
                *(_BYTE *)(v107 + 93120) = 1;
                v2179 = (JSC::MarkedVectorBase *)v60;
LABEL_53:
                if (*((_QWORD *)v2322 + 2))
                  goto LABEL_733;
                v2348 = (JSC::JSObject *)v60;
                if (v60 < 0xFFFE000000000000)
                {
                  if ((v60 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    v61 = 0;
                    LODWORD(v62) = v60 != 7;
                  }
                  else
                  {
                    if (v60 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase(&v2348, v2149, v40, v41, v42, v43, v44, v45, v46);
                      v61 = *((_QWORD *)v2322 + 2);
                    }
                    else
                    {
                      v61 = 0;
                      v46.i64[0] = v60 - 0x2000000000000;
                    }
                    LODWORD(v62) = *(double *)v46.i64 < 0.0;
                  }
                }
                else
                {
                  v61 = 0;
                  v62 = (v60 >> 31) & 1;
                }
                if (v61 || !(_DWORD)v62)
                {
                  if (v61)
                    goto LABEL_733;
LABEL_61:
                  v50 = 0;
                  v63 = 0;
                  *(_DWORD *)&v51[4 * v55] = v53;
                  if (++v52 < v2280)
                    goto LABEL_41;
                  goto LABEL_62;
                }
                v50 = 0;
                *(_DWORD *)&v51[4 * v55--] = v57;
                if (!v56)
                  goto LABEL_61;
              }
            }
            v63 = *((_QWORD *)v9 + 2);
LABEL_62:
            v47 = v2238;
            v9 = v2322;
            v29 = (unint64_t)v2167;
            if (v63)
              goto LABEL_734;
          }
          v64 = v2154;
          if (v29 < 5)
            goto LABEL_128;
          v65 = 4;
          v66 = v2136;
          v67 = v2154;
          while (1)
          {
            v68 = 0;
            v64 = v66;
            v2180 = 2 * v65;
            v2152 = (JSC::MarkedVectorBase *)v65;
            v2239 = v66;
            do
            {
              if (v29 >= v68 + v65)
                v69 = v68 + v65;
              else
                v69 = v29;
              if (v29 >= v69 + v65)
                v70 = v69 + v65;
              else
                v70 = v29;
              if (v69 >= v70)
                goto LABEL_93;
              v71 = (unsigned int *)((char *)v67 + 4 * v69);
              v72 = *v71;
              if ((int)v72 < 0)
                v73 = COERCE__INT64((double)v72) + 0x2000000000000;
              else
                v73 = v72 | 0xFFFE000000000000;
              if (*((_QWORD *)v9 + 2))
                goto LABEL_734;
              v2281 = v69;
              v2207 = v68;
              v74 = *(v71 - 1);
              *(double *)v46.i64 = (double)v74;
              if ((int)v74 < 0)
                v75 = COERCE__INT64((double)v74) + 0x2000000000000;
              else
                v75 = v74 | 0xFFFE000000000000;
              v76 = v2329;
              v2348 = (JSC::JSObject *)v2329;
              if (v2340 > 3)
              {
LABEL_182:
                v2334 = 0;
                v2335 = 0;
                *(_QWORD *)&v2332 = 10;
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v73, v40, v41, v42, v43, v44, v45);
                JSC::CachedCall::appendArgument((uint64_t *)&v2326, v75, v118, v119, v120, v121, v122, v123);
                if (!v2334)
                {
                  v126 = v2329;
                  v127 = v2339;
                  v68 = v2207;
                  if (v2339)
                    goto LABEL_184;
                  v1202 = (unsigned int *)(v2329 + 80);
                  v1203 = *(_DWORD *)(v2329 + 80);
                  if ((v1203 & 0x20) == 0)
                  {
                    do
                      v1204 = __ldaxr(v1202);
                    while (__stlxr(v1204 | 0x20, v1202));
                  }
                  JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v124, v125, v41, v42, v43, v44, v45);
                  if (*v1202
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v126, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
                  {
                    v1205 = 0;
                    v127 = 0;
                    v2127 = *(_QWORD *)(v126 + 16);
                  }
                  else
                  {
                    v1205 = 1;
                    v127 = v2339;
                  }
                  if ((v1203 & 0x20) == 0)
                  {
                    do
                      v1206 = __ldaxr(v1202);
                    while (__stlxr(v1206 & 0xFFFFFFDF, v1202));
                  }
                  v9 = v2322;
                  v29 = (unint64_t)v2167;
                  v77 = v2127;
                  v68 = v2207;
                  if (v1205)
LABEL_184:
                    v77 = vmEntryToJavaScript((uint64_t)v127, (JSC::VM *)v126, (uint64_t)&v2330 + 8, v41, v42, v43, v44, v45);
                  *(_BYTE *)(v126 + 93120) = 1;
                  v2127 = v77;
                  goto LABEL_89;
                }
                JSC::throwOutOfMemoryError(v2149, (JSC::JSGlobalObject *)&v2348);
LABEL_188:
                v77 = 0;
                goto LABEL_88;
              }
              if (v2339)
                v77 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v73, v75);
              else
                v77 = 0;
              *(_BYTE *)(v76 + 93120) = 1;
              if (*(_DWORD *)(v76 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v76, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
              {
                goto LABEL_188;
              }
              if (!v77)
                goto LABEL_182;
LABEL_88:
              v68 = v2207;
LABEL_89:
              if (*((_QWORD *)v9 + 2))
                goto LABEL_734;
              v2348 = (JSC::JSObject *)v77;
              if (v77 <= 0xFFFDFFFFFFFFFFFFLL)
              {
                if ((v77 & 0xFFFFFFFFFFFFFFFELL) == 6)
                {
                  if (v77 != 7)
                    goto LABEL_99;
                }
                else if (v77 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v2348, v2149, v40, v41, v42, v43, v44, v45, v46);
                  if (*((_QWORD *)v9 + 2))
                  {
LABEL_733:
                    v29 = (unint64_t)v2167;
LABEL_734:
                    if (*((_DWORD *)v2347 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
                    {
LABEL_754:
                      JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v39, v40, v41, v42, v43, v44, v45);
                      goto LABEL_755;
                    }
                    JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v2326, v39, v40, v41, v42, v43, v44, v45);
LABEL_736:
                    v17 = (uint64_t)v2151;
                    if ((*((_BYTE *)v2151 + 40) & 8) == 0
                      || (v518 = *((_QWORD *)v2151 + 2)) != 0
                      && (!qword_1ECF4C038
                       || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
                       || (v518 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
                    {
                      if ((*((_BYTE *)v2151 + 40) & 7u) > 2)
                      {
                        LOBYTE(v2326) = 0;
                        LOBYTE(v2327) = 0;
                        v521 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v2151, (uint64_t)&v2326, v227, v228, v229, v230, v231, v232);
                        v17 = (uint64_t)v2151;
                        if ((_BYTE)v226)
                          v519 = v521;
                        else
                          v519 = 0;
                      }
                      else
                      {
                        v519 = *((_QWORD *)v2151 + 3);
                      }
                      if (v29 < v519)
                        v519 = v29;
                      if (v519 == 1)
                      {
                        *v2145 = *(_DWORD *)v2154;
                      }
                      else
                      {
                        if (v519)
                          memcpy(v2145, v2154, 4 * v519);
                        v17 = (uint64_t)v2151;
                      }
                    }
                    goto LABEL_749;
                  }
                  v9 = v2322;
                  v29 = (unint64_t)v2167;
                  v68 = v2207;
                  if (*(double *)v46.i64 < 0.0)
                  {
LABEL_99:
                    v64 = v2239;
                    v80 = v2281;
                    v81 = v2281;
                    v82 = v68;
                    if (v70 <= v68)
                    {
LABEL_124:
                      v9 = v2322;
                      v29 = (unint64_t)v2167;
                      v65 = (uint64_t)v2152;
                      v68 = v2207;
                      goto LABEL_96;
                    }
                    while (2)
                    {
                      if (v81 < v70)
                      {
                        v83 = (_DWORD *)((char *)v67 + 4 * v81);
                        if (v82 >= v80)
                          goto LABEL_123;
                        v84 = *v83;
                        v85 = *((unsigned int *)v67 + v82);
                        if ((int)v84 < 0)
                          v86 = COERCE__INT64((double)v84) + 0x2000000000000;
                        else
                          v86 = v84 | 0xFFFE000000000000;
                        *(double *)v46.i64 = (double)v85;
                        if ((int)v85 < 0)
                          v87 = COERCE__INT64((double)v85) + 0x2000000000000;
                        else
                          v87 = v85 | 0xFFFE000000000000;
                        v88 = v2329;
                        v2348 = (JSC::JSObject *)v2329;
                        if (v2340 <= 3)
                        {
                          if (v2339)
                            v89 = vmEntryToJavaScriptWith2Arguments(v2339, v2329, *((uint64_t *)&v2330 + 1), v2331, 10, v86, v87);
                          else
                            v89 = 0;
                          *(_BYTE *)(v88 + 93120) = 1;
                          if (*(_DWORD *)(v88 + 80)
                            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v88, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
                          {
LABEL_147:
                            v89 = 0;
LABEL_113:
                            v64 = v2239;
                            v80 = v2281;
LABEL_114:
                            if (*((_QWORD *)v2322 + 2))
                              goto LABEL_733;
                            v2348 = (JSC::JSObject *)v89;
                            if (v89 < 0xFFFE000000000000)
                            {
                              if ((v89 & 0xFFFFFFFFFFFFFFFELL) == 6)
                              {
                                v90 = 0;
                                LODWORD(v91) = v89 != 7;
                              }
                              else
                              {
                                if (v89 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                {
                                  JSC::JSValue::toNumberSlowCase(&v2348, v2149, v40, v41, v42, v43, v44, v45, v46);
                                  v90 = *((_QWORD *)v2322 + 2);
                                }
                                else
                                {
                                  v90 = 0;
                                  v46.i64[0] = v89 - 0x2000000000000;
                                }
                                LODWORD(v91) = *(double *)v46.i64 < 0.0;
                              }
                            }
                            else
                            {
                              v90 = 0;
                              v91 = (v89 >> 31) & 1;
                            }
                            if (v90 || !(_DWORD)v91)
                            {
                              if (v90)
                                goto LABEL_124;
                              break;
                            }
LABEL_123:
                            ++v81;
LABEL_121:
                            *((_DWORD *)v64 + v68++) = *v83;
                            if (v68 >= v70)
                              goto LABEL_124;
                            continue;
                          }
                          if (v89)
                            goto LABEL_113;
                        }
                        v2334 = 0;
                        v2335 = 0;
                        *(_QWORD *)&v2332 = 10;
                        JSC::CachedCall::appendArgument((uint64_t *)&v2326, v86, v40, v41, v42, v43, v44, v45);
                        JSC::CachedCall::appendArgument((uint64_t *)&v2326, v87, v96, v97, v98, v99, v100, v101);
                        if (v2334)
                        {
                          JSC::throwOutOfMemoryError(v2149, (JSC::JSGlobalObject *)&v2348);
                          goto LABEL_147;
                        }
                        v104 = v2329;
                        v105 = v2339;
                        v64 = v2239;
                        v80 = v2281;
                        if (v2339)
                          goto LABEL_143;
                        v1033 = (unsigned int *)(v2329 + 80);
                        v1034 = *(_DWORD *)(v2329 + 80);
                        if ((v1034 & 0x20) == 0)
                        {
                          do
                            v1035 = __ldaxr(v1033);
                          while (__stlxr(v1035 | 0x20, v1033));
                        }
                        JSC::CachedCall::relink((JSC::CachedCall *)&v2326, v102, v103, v41, v42, v43, v44, v45);
                        if (*v1033
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v104, (uint64_t)v39, v40, v41, v42, v43, v44, v45))
                        {
                          v1036 = 0;
                          v105 = 0;
                          v2129 = *(_QWORD *)(v104 + 16);
                        }
                        else
                        {
                          v1036 = 1;
                          v105 = v2339;
                        }
                        if ((v1034 & 0x20) == 0)
                        {
                          do
                            v1037 = __ldaxr(v1033);
                          while (__stlxr(v1037 & 0xFFFFFFDF, v1033));
                        }
                        v64 = v2239;
                        v80 = v2281;
                        if (v1036)
LABEL_143:
                          v2129 = vmEntryToJavaScript((uint64_t)v105, (JSC::VM *)v104, (uint64_t)&v2330 + 8, v41, v42, v43, v44, v45);
                        *(_BYTE *)(v104 + 93120) = 1;
                        v89 = v2129;
                        goto LABEL_114;
                      }
                      break;
                    }
                    v83 = (_DWORD *)((char *)v67 + 4 * v82++);
                    goto LABEL_121;
                  }
                }
                else if (COERCE_DOUBLE(v77 - 0x2000000000000) < 0.0)
                {
                  goto LABEL_99;
                }
              }
              else if ((v77 & 0x80000000) != 0)
              {
                goto LABEL_99;
              }
              v64 = v2239;
LABEL_93:
              v78 = (_DWORD *)((char *)v64 + 4 * v68);
              v39 = (_DWORD *)((char *)v67 + 4 * v68);
              v79 = v70 - v68;
              if (v70 - v68 == 1)
              {
                *v78 = *v39;
              }
              else if (v79)
              {
                memcpy(v78, v39, 4 * v79);
              }
LABEL_96:
              if (*((_QWORD *)v9 + 2))
                goto LABEL_734;
              v68 += v2180;
            }
            while (v68 < v29);
            v65 = v2180;
            v66 = v67;
            v67 = v64;
            if (v2180 >= v29)
            {
LABEL_128:
              v92 = v2154;
              if (v64 != v2154)
                v92 = v2136;
              v2154 = v92;
              goto LABEL_734;
            }
          }
        }
        v202 = 0;
        LOBYTE(v2326) = 0;
        v2327 = 0x800000000;
        v2328 = (JSC::JSObject *)((char *)&v2329 + 8);
        v2329 = 0u;
        v2330 = 0u;
        v2331 = 0u;
        v2332 = 0u;
        v2333 = 0;
        v203 = (_DWORD *)((char *)v2154 + 4);
        while (v202 < v29)
        {
          v204 = v202 + 4;
          if (v29 >= v202 + 4)
            v205 = v202 + 4;
          else
            v205 = v29;
          v2208 = v205 - v202;
          if (v205 - v202 < 2)
          {
            v224 = *((_QWORD *)v9 + 2);
          }
          else
          {
            v2130 = v202 + 4;
            v2132 = v203;
            v206 = (JSC::MarkedVectorBase *)((char *)v2154 + 4 * v202);
            v207 = 1;
            v2181 = v206;
            while (2)
            {
              v208 = *((unsigned int *)v206 + v207);
              v209 = v208 | 0xFFFE000000000000;
              if ((int)v208 < 0)
                v209 = COERCE__INT64((double)v208) + 0x2000000000000;
              v2240 = v209;
              v210 = v203;
              v211 = v207;
              v212 = v203;
              while (1)
              {
                v214 = *--v212;
                v213 = v214;
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if (*((_DWORD *)v2322 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
                    break;
                }
                v215 = (v213 & 0x80000000) != 0
                     ? COERCE__INT64((double)v213) + 0x2000000000000
                     : v213 | 0xFFFE000000000000;
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
                {
                  break;
                }
                v216 = v2327;
                if ((_DWORD)v2327 == HIDWORD(v2327) || v2328 != (JSC::JSObject *)((char *)&v2329 + 8) && v2328)
                {
                  if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v2327, v2240, v33, v34, v35, v36, v37, v38) == 1)LOBYTE(v2326) = 1;
                }
                else
                {
                  *((_QWORD *)v2328 + v2327) = v2240;
                  LODWORD(v2327) = v216 + 1;
                }
                v217 = v2327;
                v218 = v2149;
                if ((_DWORD)v2327 == HIDWORD(v2327) || v2328 != (JSC::JSObject *)((char *)&v2329 + 8) && v2328)
                {
                  v223 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v2327, v215, v33, v34, v35, v36, v37, v38) == 1;
                  v218 = v2149;
                  if (v223)
                  {
                    LOBYTE(v2326) = 1;
LABEL_3320:
                    JSC::throwOutOfMemoryError(v218, (JSC::JSGlobalObject *)v2350);
                    break;
                  }
                }
                else
                {
                  *((_QWORD *)v2328 + v2327) = v215;
                  LODWORD(v2327) = v217 + 1;
                }
                if ((_BYTE)v2326)
                  goto LABEL_3320;
                v2348 = v2328;
                v2349 = v2327;
                v219 = JSC::call((uint64_t *)v218, v12, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v36, v37, v38);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
                {
                  break;
                }
                v2348 = (JSC::JSObject *)v219;
                if (v219 < 0xFFFE000000000000)
                {
                  if ((v219 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v221) = v219 != 7;
                  }
                  else
                  {
                    if (v219 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2149, v33, v34, v35, v36, v37, v38, v220);
                    else
                      *(_QWORD *)&v1043 = v219 - 0x2000000000000;
                    LODWORD(v221) = v1043 < 0.0;
                  }
                }
                else
                {
                  v221 = (v219 >> 31) & 1;
                }
                v222 = *((_QWORD *)v2322 + 2);
                if (v222 || !(_DWORD)v221)
                {
                  if (v222)
                    goto LABEL_1324;
                  goto LABEL_298;
                }
                *v210 = v213;
                v210 = v212;
                if (!--v211)
                  goto LABEL_298;
              }
              if (*((_QWORD *)v2322 + 2))
                goto LABEL_1324;
LABEL_298:
              v206 = v2181;
              *((_DWORD *)v2181 + v211) = v208;
              ++v207;
              ++v203;
              if (v207 < v2208)
                continue;
              break;
            }
            v224 = 0;
            v9 = v2322;
            v29 = (unint64_t)v2167;
            v204 = v2130;
            v203 = v2132;
          }
          v203 += 4;
          v202 = v204;
          if (v224)
            goto LABEL_1324;
        }
        v2135 = v2154;
        if (v29 < 5)
          goto LABEL_1321;
        v2131 = 4;
        v812 = v2136;
        v2190 = v2154;
LABEL_1244:
        v813 = 0;
        v2135 = v812;
        v2128 = 2 * v2131;
        v814 = v2322;
        v815 = v2167;
        v816 = v2190;
        while (1)
        {
          if ((unint64_t)v815 >= v813 + v2131)
            v817 = (JSC::MarkedVectorBase *)(v813 + v2131);
          else
            v817 = v815;
          if (v815 >= (JSC::MarkedVectorBase *)((char *)v817 + v2131))
            v818 = (JSC::MarkedVectorBase *)((char *)v817 + v2131);
          else
            v818 = v815;
          v2257 = v813;
          if (v817 >= v818)
          {
            v846 = (_DWORD *)((char *)v2135 + 4 * v813);
            goto LABEL_1306;
          }
          v819 = (unsigned int *)((char *)v816 + 4 * (_QWORD)v817);
          v821 = *(v819 - 1);
          v820 = *v819;
          v2350[0] = v814;
          LOBYTE(v2326) = 0;
          LODWORD(v2327) = 0;
          v2217 = v817;
          if ((v820 & 0x80000000) != 0)
            v822 = COERCE__INT64((double)v820) + 0x2000000000000;
          else
            v822 = v820 | 0xFFFE000000000000;
          if (*((_DWORD *)v814 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v814, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
          {
            goto LABEL_3655;
          }
          v823 = (v821 & 0x80000000) != 0
               ? COERCE__INT64((double)v821) + 0x2000000000000
               : v821 | 0xFFFE000000000000;
          if (*((_DWORD *)v814 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v814, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
          {
            goto LABEL_3655;
          }
          v824 = v2327;
          if ((_DWORD)v2327 == HIDWORD(v2327) || v2328 != (JSC::JSObject *)((char *)&v2329 + 8) && v2328)
          {
            v223 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v2327, v822, v33, v34, v35, v36, v37, v38) == 1;
            v825 = v2149;
            if (v223)
              LOBYTE(v2326) = 1;
          }
          else
          {
            *((_QWORD *)v2328 + v2327) = v822;
            LODWORD(v2327) = v824 + 1;
            v825 = v2149;
          }
          v826 = v2327;
          if ((_DWORD)v2327 == HIDWORD(v2327) || v2328 != (JSC::JSObject *)((char *)&v2329 + 8) && v2328)
          {
            v223 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v2327, v823, v33, v34, v35, v36, v37, v38) == 1;
            v825 = v2149;
            if (v223)
            {
              LOBYTE(v2326) = 1;
LABEL_3654:
              JSC::throwOutOfMemoryError(v825, (JSC::JSGlobalObject *)v2350);
LABEL_3655:
              LODWORD(v829) = 0;
              goto LABEL_1270;
            }
          }
          else
          {
            *((_QWORD *)v2328 + v2327) = v823;
            LODWORD(v2327) = v826 + 1;
          }
          if ((_BYTE)v2326)
            goto LABEL_3654;
          v2348 = v2328;
          v2349 = v2327;
          v827 = JSC::call((uint64_t *)v825, v12, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v36, v37, v38);
          if (*((_DWORD *)v814 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v814, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
          {
            goto LABEL_3655;
          }
          v2348 = (JSC::JSObject *)v827;
          if (v827 < 0xFFFE000000000000)
          {
            if ((v827 & 0xFFFFFFFFFFFFFFFELL) == 6)
            {
              LODWORD(v829) = v827 != 7;
            }
            else
            {
              if (v827 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                JSC::JSValue::toNumberSlowCase(&v2348, v2149, v33, v34, v35, v36, v37, v38, v828);
              else
                *(_QWORD *)&v1252 = v827 - 0x2000000000000;
              LODWORD(v829) = v1252 < 0.0;
            }
            v814 = v2322;
          }
          else
          {
            v829 = (v827 >> 31) & 1;
          }
LABEL_1270:
          v816 = v2190;
          v830 = (unint64_t)v2217;
          if (*((_QWORD *)v814 + 2))
            goto LABEL_1324;
          v831 = v2135;
          if (!(_DWORD)v829)
          {
            v846 = (_DWORD *)((char *)v2135 + 4 * v813);
LABEL_1306:
            v32 = (_DWORD *)((char *)v816 + 4 * v813);
            v847 = (uint64_t)v818 - v813;
            if ((JSC::MarkedVectorBase *)((char *)v818 - v813) == (JSC::MarkedVectorBase *)1)
            {
              *v846 = *v32;
            }
            else if (v847)
            {
              memcpy(v846, v32, 4 * v847);
            }
LABEL_1309:
            if (*((_QWORD *)v2322 + 2))
              goto LABEL_1324;
            goto LABEL_1310;
          }
          v832 = v813;
          v833 = (unint64_t)v2217;
          if ((unint64_t)v818 > v813)
          {
            while (1)
            {
              if (v833 >= (unint64_t)v818)
                goto LABEL_1297;
              v834 = (_DWORD *)((char *)v816 + 4 * v833);
              if (v813 < v830)
              {
                v835 = *v834;
                v836 = *((unsigned int *)v816 + v813);
                v2350[0] = v2322;
                LOBYTE(v2326) = 0;
                LODWORD(v2327) = 0;
                if ((v835 & 0x80000000) != 0)
                  v837 = COERCE__INT64((double)v835) + 0x2000000000000;
                else
                  v837 = v835 | 0xFFFE000000000000;
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
                {
                  goto LABEL_3642;
                }
                v838 = (v836 & 0x80000000) != 0
                     ? COERCE__INT64((double)v836) + 0x2000000000000
                     : v836 | 0xFFFE000000000000;
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
                {
                  goto LABEL_3642;
                }
                v839 = v2327;
                if ((_DWORD)v2327 == HIDWORD(v2327) || v2328 != (JSC::JSObject *)((char *)&v2329 + 8) && v2328)
                {
                  if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v2327, v837, v33, v34, v35, v36, v37, v38) == 1)LOBYTE(v2326) = 1;
                }
                else
                {
                  *((_QWORD *)v2328 + v2327) = v837;
                  LODWORD(v2327) = v839 + 1;
                }
                v840 = v2327;
                v841 = v2149;
                if ((_DWORD)v2327 == HIDWORD(v2327) || v2328 != (JSC::JSObject *)((char *)&v2329 + 8) && v2328)
                {
                  v223 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v2327, v838, v33, v34, v35, v36, v37, v38) == 1;
                  v841 = v2149;
                  if (v223)
                  {
                    LOBYTE(v2326) = 1;
LABEL_3641:
                    JSC::throwOutOfMemoryError(v841, (JSC::JSGlobalObject *)v2350);
LABEL_3642:
                    v816 = v2190;
                    v830 = (unint64_t)v2217;
                    if (*((_QWORD *)v2322 + 2))
                      goto LABEL_1324;
LABEL_1297:
                    v834 = (_DWORD *)((char *)v816 + 4 * v813++);
                    goto LABEL_1298;
                  }
                }
                else
                {
                  *((_QWORD *)v2328 + v2327) = v838;
                  LODWORD(v2327) = v840 + 1;
                }
                if ((_BYTE)v2326)
                  goto LABEL_3641;
                v2348 = v2328;
                v2349 = v2327;
                v842 = JSC::call((uint64_t *)v841, v12, (unsigned __int8 *)&v2344, 10, (uint64_t)&v2348, v36, v37, v38);
                if (*((_DWORD *)v2322 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v2322, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
                {
                  goto LABEL_3642;
                }
                v2348 = (JSC::JSObject *)v842;
                if (v842 < 0xFFFE000000000000)
                {
                  if ((v842 & 0xFFFFFFFFFFFFFFFELL) == 6)
                  {
                    LODWORD(v844) = v842 != 7;
                  }
                  else
                  {
                    if (v842 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                      JSC::JSValue::toNumberSlowCase(&v2348, v2149, v33, v34, v35, v36, v37, v38, v843);
                    else
                      *(_QWORD *)&v1249 = v842 - 0x2000000000000;
                    LODWORD(v844) = v1249 < 0.0;
                  }
                  v831 = v2135;
                }
                else
                {
                  v844 = (v842 >> 31) & 1;
                }
                v816 = v2190;
                v830 = (unint64_t)v2217;
                v845 = *((_QWORD *)v2322 + 2);
                if (v845 || !(_DWORD)v844)
                {
                  if (v845)
                    goto LABEL_1324;
                  goto LABEL_1297;
                }
              }
              ++v833;
LABEL_1298:
              *((_DWORD *)v831 + v832++) = *v834;
              if (v832 >= (unint64_t)v818)
                goto LABEL_1309;
            }
          }
LABEL_1310:
          v813 = v2257 + v2128;
          v815 = v2167;
          v814 = v2322;
          if (v2257 + v2128 >= (unint64_t)v2167)
          {
            v2131 *= 2;
            v812 = v816;
            v2190 = v2135;
            if (v2128 >= (unint64_t)v2167)
            {
LABEL_1321:
              v848 = v2154;
              if (v2135 != v2154)
                v848 = v2136;
              v2154 = v848;
LABEL_1324:
              v29 = (unint64_t)v2167;
              if (*((_DWORD *)v2347 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v2347, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
              {
                JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v32, v33, v34, v35, v36, v37, v38);
                goto LABEL_755;
              }
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v2327, v32, v33, v34, v35, v36, v37, v38);
              goto LABEL_736;
            }
            goto LABEL_1244;
          }
        }
      }
    }
  }
  JSC::throwOutOfMemoryError(v2149, (JSC::JSGlobalObject *)&v2347);
LABEL_755:
  v17 = 0;
LABEL_749:
  v520 = __dst;
  if (v2343 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v2342) = 0;
    WTF::fastFree((unint64_t)v520, v226, v227, v228, v229, v230, v231, v232);
  }
  return (JSC::JSArrayBufferView *)v17;
}

JSC::VM *JSC::typedArrayProtoViewFuncEntries(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::createTypedArrayIteratorObject(this, *((_QWORD *)a2 + 5), (JSC::JSArrayBufferView *)2, a4, a5, a6, a7, a8);
}

uint64_t JSC::typedArrayViewProtoFuncIncludes(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  const WTF::String *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  JSC::Exception *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x16_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x16_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  unsigned int v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int8x16_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int8x16_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 v163;
  unsigned int v164;
  unsigned __int8 v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int8x16_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  double v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int8x16_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int8x16_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char v220;
  uint64_t v221;
  int v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int8x16_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  double v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int8x16_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  BOOL v263;
  double v264;
  int v265;
  double v266;
  __int16 v267;
  unint64_t v268;
  int16x8_t *v269;
  unint64_t v270;
  unint64_t v271;
  unsigned int v272;
  unsigned int v273;
  double v274;
  unsigned int v275;
  unint64_t v276;
  BOOL v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  double v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  BOOL v289;
  double v290;
  int v291;
  unsigned int v292;
  char v293;
  double v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  float32x4_t *v303;
  unint64_t v304;
  float32x4_t v305;
  uint16x4_t v306;
  float32x4_t v307;
  int8x16_t v308;
  unsigned int v309;
  double v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unsigned int v314;
  double v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  float64x2_t *v325;
  unint64_t v326;
  float64x2_t v327;
  int8x8_t v328;
  float64x2_t v329;
  uint32x2_t v330;
  unsigned __int32 v331;
  unint64_t v332;
  int16x8_t *v333;
  unint64_t v334;
  unint64_t v335;
  int64x2_t v336;
  int8x8_t v337;
  int16x8_t *v338;
  __int8 *v339;
  unint64_t v340;
  unint64_t v341;
  __int8 *v342;
  uint32x2_t v343;
  BOOL v344;
  BOOL v345;
  char v346;
  unsigned int v347;
  char v348;
  unsigned int v349;
  unint64_t v350;
  unint64_t v351;
  unsigned int v352;
  unint64_t v353;
  unint64_t v354;
  int32x4_t v355;
  uint32x4_t v356;
  int16x8_t *v357;
  __int8 *v358;
  unint64_t v359;
  uint64_t v360;
  char *v361;
  unsigned int v362;
  unint64_t v363;
  unint64_t v364;
  unsigned int v365;
  __int8 *v366;
  int16x8_t v367;
  int8x16_t v368;
  int16x8_t *v369;
  __int8 *v370;
  int16x8_t v371;
  int8x16_t v372;
  int16x8_t *v373;
  __int8 *v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  unint64_t v386;
  char v387;
  unint64_t v388;
  char v389;
  unint64_t v390;
  char v391;
  unint64_t v392;
  char v393;
  unint64_t v394;
  char v395;
  unint64_t v396;
  char v397;
  unint64_t v398;
  char v399;
  unint64_t v400;
  char v401;
  unint64_t v402;
  char v403;
  unint64_t v404;
  char v405;
  unint64_t v406;
  char v407;
  uint64_t v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  uint64_t v421;
  JSC::VM *v422;
  WTF::StringImpl *v423;
  char v424;

  v9 = *((_QWORD *)this + 7);
  v422 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v34 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v34 = 0x3B00000002;
    *(_QWORD *)(v34 + 8) = "Receiver should be a typed array view but was not an object";
    *(_DWORD *)(v34 + 16) = 4;
    v423 = (WTF::StringImpl *)v34;
    v36 = JSC::createTypeError((unint64_t)this, &v423, v35);
    v43 = (JSC::Exception *)v36;
    if ((v36 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C)))
    {
      v43 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v36, 0, v37, v38, v39, v40, v41);
    }
    v51 = (uint64_t)JSC::VM::throwException((JSC::VM *)v9, this, v43, v42, v37, v38, v39, v40, v41);
    v52 = v423;
    v423 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
    return v51;
  }
  switch(*(_BYTE *)(v10 + 5))
  {
    case '\'':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v375 = *(_DWORD *)(v9 + 80);
        if ((v375 & 0x27) != 0 && (v375 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v386 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v12, v13, v14, v15, v16, v17);
        if (!v387)
          return 6;
        v19 = v386;
        if (!v386)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v21 = *((_QWORD *)a2 + 7);
          goto LABEL_10;
        }
      }
      v21 = 10;
LABEL_10:
      v28 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v21, v19, 0, v14, v15, v16, v17, v18);
      if (*(_DWORD *)(v9 + 80))
      {
        v409 = *(_DWORD *)(v9 + 80);
        if ((v409 & 0x27) != 0 && (v409 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v22, v23, v24, v25, v26, v27);
      if (!v30)
        goto LABEL_536;
      v31 = *(_QWORD *)(v10 + 16);
      if (v31)
      {
        v32 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v32 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v32 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v32 = 0;
      }
      if (!(v20 >> 49))
        goto LABEL_504;
      if (v20 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v264 = v20 - 0x2000000000000;
        v265 = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)v265 != COERCE_DOUBLE(v20 - 0x2000000000000))
          goto LABEL_504;
        if (v264 >= 0.0)
        {
          v265 = v264;
          if (v264 >= 0x80)
            goto LABEL_504;
        }
        else if (v265 != (char)v265)
        {
          goto LABEL_504;
        }
        v33 = v265;
      }
      else
      {
        if ((_DWORD)v20 != (char)v20)
          goto LABEL_504;
        v33 = v20;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v31
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A87810);
      }
      if (v29 >= v19)
        v359 = v19;
      else
        v359 = v29;
      v277 = v359 > v28;
      v278 = v359 - v28;
      if (!v277)
        return 6;
      v279 = 16;
      if (v278 < 0x10)
        v279 = v278;
      if (v279)
      {
        v360 = v279;
        v281 = (char *)v28;
        do
        {
          if (v281[v32] == v33)
            goto LABEL_477;
          ++v281;
          --v360;
        }
        while (v360);
      }
      goto LABEL_474;
    case '(':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v379 = *(_DWORD *)(v9 + 80);
        if ((v379 & 0x27) != 0 && (v379 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v125, v126, v127, v128, v129, v130);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v394 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v125, v126, v127, v128, v129, v130);
        if (!v395)
          return 6;
        v19 = v394;
        if (!v394)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v132 = *((_QWORD *)a2 + 7);
LABEL_89:
          v139 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v132, v19, 0, v127, v128, v129, v130, v131);
          if (!*(_DWORD *)(v9 + 80))
            goto LABEL_90;
          v413 = *(_DWORD *)(v9 + 80);
          if ((v413 & 0x27) != 0 && (v413 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v133, v134, v135, v136, v137, v138);
          if (!*(_QWORD *)(v9 + 16))
          {
LABEL_90:
            LOBYTE(v423) = 0;
            v424 = 0;
            v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v133, v134, v135, v136, v137, v138);
            if (!v140)
              goto LABEL_536;
            v141 = *(_QWORD *)(v10 + 16);
            if (v141)
            {
              v142 = *(_QWORD *)(v10 + 16);
              if (qword_1ECF4C038)
              {
                if (byte_1ECF4C022 || (v142 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                  v142 = (v141 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              }
            }
            else
            {
              v142 = 0;
            }
            if (!(v20 >> 49))
              goto LABEL_504;
            if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(_QWORD *)&v282 = v20 - 0x2000000000000;
              v143 = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
              if ((double)v143 != COERCE_DOUBLE(v20 - 0x2000000000000))
                goto LABEL_504;
              if (v282 >= 0.0)
                v143 = v282;
              if (v143 >= 0x100)
                goto LABEL_504;
            }
            else
            {
              if (v20 >= 0x100)
                LOBYTE(v143) = 0;
              else
                LOBYTE(v143) = v20;
              if (v20 >= 0x100)
                goto LABEL_504;
            }
            if ((*(_BYTE *)(v10 + 40) & 8) != 0
              && (!v141
               || qword_1ECF4C038
               && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
               && !((v141 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
            {
              __break(0xC471u);
              JUMPOUT(0x198A877F0);
            }
            if (v29 >= v19)
              v283 = v19;
            else
              v283 = v29;
            v277 = v283 > v139;
            v284 = v283 - v139;
            if (v277)
            {
              v285 = 16;
              if (v284 < 0x10)
                v285 = v284;
              if (v285)
              {
                v286 = v285;
                v287 = (char *)v139;
                while (v287[v142] != v143)
                {
                  ++v287;
                  if (!--v286)
                    goto LABEL_270;
                }
              }
              else
              {
LABEL_270:
                if (v284 < 0x11)
                  return 6;
                v288 = (char *)memchr((void *)(v142 + v139 + v285), v143, v284 - v285);
                if (!v288)
                  return 6;
                v287 = &v288[-v142];
              }
              v289 = v287 + 1 == 0;
              goto LABEL_478;
            }
            return 6;
          }
          return 0;
        }
      }
      v132 = 10;
      goto LABEL_89;
    case ')':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v378 = *(_DWORD *)(v9 + 80);
        if ((v378 & 0x27) != 0 && (v378 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v107, v108, v109, v110, v111, v112);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v392 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v107, v108, v109, v110, v111, v112);
        if (!v393)
          return 6;
        v19 = v392;
        if (!v392)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v114 = *((_QWORD *)a2 + 7);
LABEL_71:
          v28 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v114, v19, 0, v109, v110, v111, v112, v113);
          if (!*(_DWORD *)(v9 + 80))
            goto LABEL_72;
          v412 = *(_DWORD *)(v9 + 80);
          if ((v412 & 0x27) != 0 && (v412 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v115, v116, v117, v118, v119, v120);
          if (!*(_QWORD *)(v9 + 16))
          {
LABEL_72:
            LOBYTE(v423) = 0;
            v424 = 0;
            v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v115, v116, v117, v118, v119, v120);
            if (!v121)
              goto LABEL_536;
            v122 = *(_QWORD *)(v10 + 16);
            if (v122)
            {
              v32 = *(_QWORD *)(v10 + 16);
              if (qword_1ECF4C038)
              {
                if (byte_1ECF4C022 || (v32 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                  v32 = (v122 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              }
            }
            else
            {
              v32 = 0;
            }
            if (!(v20 >> 49))
              goto LABEL_504;
            if (v20 < 0xFFFE000000000000)
            {
              v273 = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
              v274 = (double)v273;
              v275 = v273 | 0x100;
              if (v274 != COERCE_DOUBLE(v20 - 0x2000000000000))
                v275 = 0;
              v33 = v275;
              v123 = v275 >> 8;
            }
            else
            {
              v123 = v20 < 0x100;
              v124 = v20 >= 0x100 ? 0 : v20;
              v33 = v124;
            }
            if (!v123)
              goto LABEL_504;
            if ((*(_BYTE *)(v10 + 40) & 8) != 0
              && (!v122
               || qword_1ECF4C038
               && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
               && !((v122 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
            {
              __break(0xC471u);
              JUMPOUT(0x198A87790);
            }
            if (v29 >= v19)
              v276 = v19;
            else
              v276 = v29;
            v277 = v276 > v28;
            v278 = v276 - v28;
            if (v277)
            {
              v279 = 16;
              if (v278 < 0x10)
                v279 = v278;
              if (v279)
              {
                v280 = v279;
                v281 = (char *)v28;
                while (v281[v32] != v33)
                {
                  ++v281;
                  if (!--v280)
                    goto LABEL_474;
                }
              }
              else
              {
LABEL_474:
                if (v278 < 0x11)
                  return 6;
                v361 = (char *)memchr((void *)(v32 + v28 + v279), v33, v278 - v279);
                if (!v361)
                  return 6;
                v281 = &v361[-v32];
              }
LABEL_477:
              v289 = v281 + 1 == 0;
              goto LABEL_478;
            }
            return 6;
          }
          return 0;
        }
      }
      v114 = 10;
      goto LABEL_71;
    case '*':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v380 = *(_DWORD *)(v9 + 80);
        if ((v380 & 0x27) != 0 && (v380 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v144, v145, v146, v147, v148, v149);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v396 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v144, v145, v146, v147, v148, v149);
        if (!v397)
          return 6;
        v19 = v396;
        if (!v396)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v151 = *((_QWORD *)a2 + 7);
          goto LABEL_108;
        }
      }
      v151 = 10;
LABEL_108:
      v158 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v151, v19, 0, v146, v147, v148, v149, v150);
      if (*(_DWORD *)(v9 + 80))
      {
        v414 = *(_DWORD *)(v9 + 80);
        if ((v414 & 0x27) != 0 && (v414 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v152, v153, v154, v155, v156, v157);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v152, v153, v154, v155, v156, v157);
      if (!v160)
        goto LABEL_536;
      v161 = *(_QWORD *)(v10 + 16);
      if (v161)
      {
        v162 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v162 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v162 = (v161 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v162 = 0;
      }
      if (!(v20 >> 49))
        goto LABEL_504;
      if (v20 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v290 = v20 - 0x2000000000000;
        v291 = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)v291 == COERCE_DOUBLE(v20 - 0x2000000000000))
        {
          v346 = v290 >= 0x8000 ? 0 : v290;
          v164 = v290 & 0xFF00;
          v347 = v291 == (__int16)v291 ? (int)COERCE_DOUBLE(v20 - 0x2000000000000) | 0x10000 : 0;
          v348 = v347;
          v349 = HIWORD(v347);
          if (v290 >= 0.0)
          {
            v292 = v290 < 0x8000;
          }
          else
          {
            v164 = (int)COERCE_DOUBLE(v20 - 0x2000000000000) & 0xFF00;
            v292 = v349;
          }
          v293 = v290 < 0.0 ? v348 : v346;
        }
        else
        {
          v164 = 0;
          v292 = 0;
          v293 = 0;
        }
        v166 = v292 << 16;
        v165 = v293 | v164;
      }
      else
      {
        v163 = v20;
        v164 = v20 & 0xFF00;
        if ((__int16)v20 != (_DWORD)v20)
          v163 = 0;
        v165 = v163;
        v166 = ((__int16)v20 == (_DWORD)v20) << 16;
      }
      if (!v166)
        goto LABEL_504;
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v161
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v161 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A877B0);
      }
      if (v29 >= v19)
        v350 = v19;
      else
        v350 = v29;
      if (v158 >= v350)
        return 6;
      v333 = (int16x8_t *)(v162 + 2 * v158);
      v334 = v162 + 2 * v350;
      v351 = v334 - (_QWORD)v333;
      if ((uint64_t)(v334 - (_QWORD)v333) <= -2)
        goto LABEL_661;
      v352 = v164 | v165;
      if (v351 > 0x3E)
      {
        v371 = vdupq_n_s16(v352);
        if ((unint64_t)&v333->u64[1] + 6 >= v334)
        {
          v373 = (int16x8_t *)(v162 + 2 * v158);
LABEL_648:
          if ((unint64_t)v373 >= v334)
            return 6;
          v333 = (int16x8_t *)(v334 - 16);
          v372 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v334 - 16), v371);
          v371.i16[0] = vmaxvq_u16((uint16x8_t)v372);
          if (!v371.i32[0])
            return 6;
        }
        else
        {
          while (1)
          {
            v372 = (int8x16_t)vceqq_s16(*v333, v371);
            LOWORD(v159) = vmaxvq_u16((uint16x8_t)v372);
            if (v159)
              break;
            v373 = v333 + 1;
            v374 = &v333[1].i8[14];
            ++v333;
            if ((unint64_t)v374 >= v334)
              goto LABEL_648;
          }
        }
        v333 = (int16x8_t *)((char *)v333
                           + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v372)));
      }
      else
      {
        v51 = 6;
        while (v333->u16[0] != v352)
        {
          v333 = (int16x8_t *)((char *)v333 + 2);
          v351 -= 2;
          if (!v351)
            return v51;
        }
      }
      v344 = (__int16 *)((char *)&v333->i16[1] - v162) == 0;
      goto LABEL_654;
    case '+':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v376 = *(_DWORD *)(v9 + 80);
        if ((v376 & 0x27) != 0 && (v376 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v61, v62, v63, v64, v65, v66);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v388 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v61, v62, v63, v64, v65, v66);
        if (!v389)
          return 6;
        v19 = v388;
        if (!v388)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v68 = *((_QWORD *)a2 + 7);
          goto LABEL_32;
        }
      }
      v68 = 10;
LABEL_32:
      v75 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v68, v19, 0, v63, v64, v65, v66, v67);
      if (*(_DWORD *)(v9 + 80))
      {
        v410 = *(_DWORD *)(v9 + 80);
        if ((v410 & 0x27) != 0 && (v410 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v69, v70, v71, v72, v73, v74);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v69, v70, v71, v72, v73, v74);
      if (!v77)
      {
LABEL_536:
        v263 = v20 == 10;
LABEL_507:
        if (v263)
          return 7;
        else
          return 6;
      }
      v78 = *(_QWORD *)(v10 + 16);
      if (v78)
      {
        v79 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v79 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v79 = (v78 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v79 = 0;
      }
      v80 = v20 >> 49;
      if (!(v20 >> 49))
      {
        v82 = 0;
        v81 = 0;
        goto LABEL_213;
      }
      if (v20 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v266 = v20 - 0x2000000000000;
        LODWORD(v80) = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)v80 != COERCE_DOUBLE(v20 - 0x2000000000000))
        {
          LODWORD(v80) = 0;
          v267 = 0;
LABEL_211:
          v82 = 0;
LABEL_212:
          v81 = v267 & 0xFF00;
          goto LABEL_213;
        }
        if (v266 >= 0.0)
        {
          v362 = v266;
          if (v266 >= 0x10000)
            LOBYTE(v80) = 0;
          else
            LOBYTE(v80) = v266;
          v267 = v362 & 0xFF00;
          LODWORD(v80) = v80;
          if (HIWORD(v362))
            goto LABEL_211;
        }
        else
        {
          v267 = v80 & 0xFF00;
          v345 = v80 >= 0x10000;
          if (v80 >= 0x10000)
            LOBYTE(v80) = 0;
          LODWORD(v80) = v80;
          if (v345)
            goto LABEL_211;
        }
        v82 = 0x10000;
        goto LABEL_212;
      }
      if (v20 >= 0x10000)
        LOBYTE(v80) = 0;
      else
        LOBYTE(v80) = v20;
      v81 = v20 & 0xFF00;
      LODWORD(v80) = v80;
      v82 = (v20 < 0x10000) << 16;
LABEL_213:
      if ((v82 & 0x10000) == 0)
      {
LABEL_504:
        v263 = v19 > v29 && v20 == 10;
        goto LABEL_507;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v78
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v78 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A8764CLL);
      }
      if (v29 >= v19)
        v268 = v19;
      else
        v268 = v29;
      if (v75 >= v268)
        return 6;
      v269 = (int16x8_t *)(v79 + 2 * v75);
      v270 = v79 + 2 * v268;
      v271 = v270 - (_QWORD)v269;
      if ((uint64_t)(v270 - (_QWORD)v269) <= -2)
        goto LABEL_661;
      v272 = v81 | v80;
      if (v271 > 0x3E)
      {
        v367 = vdupq_n_s16(v272);
        if ((unint64_t)&v269->u64[1] + 6 >= v270)
        {
          v369 = (int16x8_t *)(v79 + 2 * v75);
LABEL_605:
          if ((unint64_t)v369 >= v270)
            return 6;
          v269 = (int16x8_t *)(v270 - 16);
          v368 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v270 - 16), v367);
          v367.i16[0] = vmaxvq_u16((uint16x8_t)v368);
          if (!v367.i32[0])
            return 6;
        }
        else
        {
          while (1)
          {
            v368 = (int8x16_t)vceqq_s16(*v269, v367);
            LOWORD(v76) = vmaxvq_u16((uint16x8_t)v368);
            if (v76)
              break;
            v369 = v269 + 1;
            v370 = &v269[1].i8[14];
            ++v269;
            if ((unint64_t)v370 >= v270)
              goto LABEL_605;
          }
        }
        v269 = (int16x8_t *)((char *)v269
                           + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v368)));
      }
      else
      {
        v51 = 6;
        while (v269->u16[0] != v272)
        {
          v269 = (int16x8_t *)((char *)v269 + 2);
          v271 -= 2;
          if (!v271)
            return v51;
        }
      }
      v263 = (__int16 *)((char *)&v269->i16[1] - v79) == 0;
      v408 = 6;
      if (!v263)
        v408 = 7;
      if (v269 == (int16x8_t *)v270)
        return 6;
      else
        return v408;
    case ',':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v382 = *(_DWORD *)(v9 + 80);
        if ((v382 & 0x27) != 0 && (v382 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v186, v187, v188, v189, v190, v191);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v400 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v186, v187, v188, v189, v190, v191);
        if (!v401)
          return 6;
        v19 = v400;
        if (!v400)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v193 = *((_QWORD *)a2 + 7);
          goto LABEL_140;
        }
      }
      v193 = 10;
LABEL_140:
      v200 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v193, v19, 0, v188, v189, v190, v191, v192);
      if (*(_DWORD *)(v9 + 80))
      {
        v416 = *(_DWORD *)(v9 + 80);
        if ((v416 & 0x27) != 0 && (v416 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v194, v195, v196, v197, v198, v199);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v194, v195, v196, v197, v198, v199);
      if (!v201)
        goto LABEL_536;
      v202 = *(_QWORD *)(v10 + 16);
      if (v202)
      {
        v203 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v203 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v203 = (v202 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v203 = 0;
      }
      if (!(v20 >> 49))
        goto LABEL_504;
      if (v20 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v310 = v20 - 0x2000000000000;
        v311 = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)(int)v311 == COERCE_DOUBLE(v20 - 0x2000000000000))
        {
          v314 = v310 & ~((int)v310 >> 31);
          v313 = (2 * (v310 & 0x80000000)) ^ 0x100000000;
          v312 = (v311 | 0x100000000uLL) >> 8;
          if (v310 < 0.0)
            v313 = 0x100000000;
          else
            LODWORD(v312) = v310 >> 8;
          if (v310 < 0.0)
            LOBYTE(v314) = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
        }
        else
        {
          LODWORD(v312) = 0;
          v313 = 0;
          LOBYTE(v314) = 0;
        }
        if ((v313 & 0x100000000) == 0)
          goto LABEL_504;
        v204 = v313 & 0xFFFFFF00 | ((_DWORD)v312 << 8) | (v314 | v313);
      }
      else
      {
        v204 = v20;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v202
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v202 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
LABEL_661:
        __break(1u);
        goto LABEL_662;
      }
      if (v29 >= v19)
        v353 = v19;
      else
        v353 = v29;
      if (v200 >= v353)
        return 6;
      v333 = (int16x8_t *)(v203 + 4 * v200);
      v334 = v203 + 4 * v353;
      v354 = v334 - (_QWORD)v333;
      if ((uint64_t)(v334 - (_QWORD)v333) <= -4)
        goto LABEL_661;
      if (v354 <= 0x7C)
      {
        v51 = 6;
        while (v333->i32[0] != v204)
        {
          v333 = (int16x8_t *)((char *)v333 + 4);
          v354 -= 4;
          if (!v354)
            return v51;
        }
      }
      else
      {
        v355 = vdupq_n_s32(v204);
        if ((unint64_t)&v333->u64[1] + 4 >= v334)
        {
LABEL_510:
          v357 = v333;
LABEL_511:
          if ((unint64_t)v357 >= v334)
            return 6;
          v333 = (int16x8_t *)(v334 - 16);
          v356 = (uint32x4_t)vceqq_s32(*(int32x4_t *)(v334 - 16), v355);
          if (!vmaxvq_u32(v356))
            return 6;
        }
        else
        {
          while (1)
          {
            v356 = (uint32x4_t)vceqq_s32(*(int32x4_t *)v333, v355);
            if (vmaxvq_u32(v356))
              break;
            v357 = v333 + 1;
            v358 = &v333[1].i8[12];
            ++v333;
            if ((unint64_t)v358 >= v334)
              goto LABEL_511;
          }
        }
LABEL_513:
        v333 = (int16x8_t *)((char *)v333
                           + 4
                           * vminvq_u32((uint32x4_t)vornq_s8((int8x16_t)xmmword_199123270, (int8x16_t)v356)));
      }
LABEL_514:
      v344 = (uint64_t *)((char *)v333->i64 - v203 + 4) == 0;
      goto LABEL_654;
    case '-':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v383 = *(_DWORD *)(v9 + 80);
        if ((v383 & 0x27) != 0 && (v383 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v205, v206, v207, v208, v209, v210);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v402 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v205, v206, v207, v208, v209, v210);
        if (!v403)
          return 6;
        v19 = v402;
        if (!v402)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v212 = *((_QWORD *)a2 + 7);
          goto LABEL_155;
        }
      }
      v212 = 10;
LABEL_155:
      v219 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v212, v19, 0, v207, v208, v209, v210, v211);
      if (*(_DWORD *)(v9 + 80))
      {
        v417 = *(_DWORD *)(v9 + 80);
        if ((v417 & 0x27) != 0 && (v417 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v213, v214, v215, v216, v217, v218);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v213, v214, v215, v216, v217, v218);
      if (!v220)
        goto LABEL_536;
      v221 = *(_QWORD *)(v10 + 16);
      if (v221)
      {
        v203 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v203 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v203 = (v221 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v203 = 0;
      }
      if (!(v20 >> 49))
        goto LABEL_504;
      if (v20 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v315 = v20 - 0x2000000000000;
        LODWORD(v223) = COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)v223 == COERCE_DOUBLE(v20 - 0x2000000000000))
        {
          if (v315 >= 0.0)
          {
            LODWORD(v316) = v223 >> 8;
            v224 = 0x100000000;
          }
          else
          {
            v223 = ((int)v315 & 0xFFFFFF00 | ((int)v315 & ~((int)v315 >> 31)) | ((((unint64_t)((int)v315 & 0x80000000) >> 31) & 1) << 32)) ^ 0x100000000;
            v316 = v223 >> 8;
            v224 = v223 & 0x100000000;
          }
        }
        else
        {
          LODWORD(v316) = 0;
          v224 = 0;
          LOBYTE(v223) = 0;
        }
        v222 = (_DWORD)v316 << 8;
        LOBYTE(v223) = v224 | v223 | v222;
      }
      else
      {
        v222 = v20 & 0xFFFFFF00;
        v223 = (v20 & 0xFFFFFF00 | v20 & ~((int)v20 >> 31) | (((v20 >> 31) & 1) << 32)) ^ 0x100000000;
        v224 = v223 & 0x100000000;
      }
      if ((v224 & 0x100000000) == 0)
        goto LABEL_504;
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v221
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v221 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A877D0);
      }
      if (v29 >= v19)
        v363 = v19;
      else
        v363 = v29;
      if (v219 >= v363)
        return 6;
      v333 = (int16x8_t *)(v203 + 4 * v219);
      v334 = v203 + 4 * v363;
      v364 = v334 - (_QWORD)v333;
      if ((uint64_t)(v334 - (_QWORD)v333) <= -4)
        goto LABEL_661;
      v365 = v222 | v223;
      if (v364 <= 0x7C)
      {
        v51 = 6;
        while (v333->i32[0] != v365)
        {
          v333 = (int16x8_t *)((char *)v333 + 4);
          v364 -= 4;
          if (!v364)
            return v51;
        }
        goto LABEL_514;
      }
      v355 = vdupq_n_s32(v365);
      if ((unint64_t)&v333->u64[1] + 4 >= v334)
        goto LABEL_510;
      while (1)
      {
        v356 = (uint32x4_t)vceqq_s32(*(int32x4_t *)v333, v355);
        if (vmaxvq_u32(v356))
          goto LABEL_513;
        v357 = v333 + 1;
        v366 = &v333[1].i8[12];
        ++v333;
        if ((unint64_t)v366 >= v334)
          goto LABEL_511;
      }
    case '.':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v381 = *(_DWORD *)(v9 + 80);
        if ((v381 & 0x27) != 0 && (v381 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v167, v168, v169, v170, v171, v172);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v398 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v167, v168, v169, v170, v171, v172);
        if (!v399)
          return 6;
        v19 = v398;
        if (!v398)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v174 = *((_QWORD *)a2 + 7);
          goto LABEL_125;
        }
      }
      v174 = 10;
LABEL_125:
      v181 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v174, v19, 0, v169, v170, v171, v172, v173);
      if (*(_DWORD *)(v9 + 80))
      {
        v415 = *(_DWORD *)(v9 + 80);
        if ((v415 & 0x27) != 0 && (v415 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v175, v176, v177, v178, v179, v180);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v175, v176, v177, v178, v179, v180);
      if (!v183)
        goto LABEL_536;
      v184 = *(_QWORD *)(v10 + 16);
      if (v184)
      {
        v185 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v185 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v185 = (v184 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v185 = 0;
      }
      if (!(v20 >> 49))
        goto LABEL_504;
      if (v20 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v294 = v20 - 0x2000000000000;
        v182 = fabs(COERCE_DOUBLE(v20 - 0x2000000000000));
        if (v182 == INFINITY)
        {
          *(float *)&v182 = v294;
        }
        else
        {
          *(float *)&v182 = v294;
          if (*(float *)&v182 != v294 || v294 < -3.40282347e38 || v294 > 3.40282347e38)
            goto LABEL_504;
        }
      }
      else
      {
        *(float *)&v182 = (float)(int)v20;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) == 0
        || v184
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v184 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        if (v29 >= v19)
          v295 = v19;
        else
          v295 = v29;
        v296 = v295 - v181;
        if (v295 <= v181)
          return 6;
        v297 = v185 + 4 * v181;
        v298 = (v297 >> 2) & 3;
        v299 = 32 - v298;
        if (v296 >= 32 - v298)
          v300 = 32 - v298;
        else
          v300 = v296;
        if (v300)
        {
          v301 = 4 * v181;
          v302 = v300;
          while (*(float *)(v185 + v301) != *(float *)&v182)
          {
            v301 += 4;
            if (!--v302)
              goto LABEL_294;
          }
        }
        else
        {
LABEL_294:
          if (v296 <= v299)
            return 6;
          v303 = (float32x4_t *)(v297 + 4 * v300);
          v304 = v296 - v300;
          v305 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v182, 0);
          v306 = (uint16x4_t)vmovn_s32(vceqq_f32(*v303, v305));
          if (!*(_QWORD *)&v306)
          {
            v51 = 6;
            while (v304 >= 5)
            {
              v304 -= 4;
              v307 = v303[1];
              ++v303;
              v306 = (uint16x4_t)vmovn_s32(vceqq_f32(v307, v305));
              if (v306)
                goto LABEL_299;
            }
            return v51;
          }
LABEL_299:
          v308 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v306), 0x1FuLL));
          v309 = vminvq_u32((uint32x4_t)vornq_s8(vandq_s8(v308, (int8x16_t)xmmword_199123270), v308));
          if (v304 <= v309)
            return 6;
          v301 = (uint64_t)v303->i64 + 4 * v309 - v185;
        }
        v289 = v301 == -4;
LABEL_478:
        if (v289)
          return 6;
        else
          return 7;
      }
LABEL_662:
      __break(0xC471u);
      JUMPOUT(0x198A87730);
    case '/':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v384 = *(_DWORD *)(v9 + 80);
        if ((v384 & 0x27) != 0 && (v384 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v225, v226, v227, v228, v229, v230);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v404 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v225, v226, v227, v228, v229, v230);
        if (!v405)
          return 6;
        v19 = v404;
        if (!v404)
          return 6;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v232 = *((_QWORD *)a2 + 7);
LABEL_170:
          v239 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v232, v19, 0, v227, v228, v229, v230, v231);
          if (*(_DWORD *)(v9 + 80))
          {
            v418 = *(_DWORD *)(v9 + 80);
            if ((v418 & 0x27) != 0 && (v418 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v233, v234, v235, v236, v237, v238);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          LOBYTE(v423) = 0;
          v424 = 0;
          v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v233, v234, v235, v236, v237, v238);
          if (!v240)
            goto LABEL_536;
          v241 = *(_QWORD *)(v10 + 16);
          if (v241)
          {
            v242 = *(_QWORD *)(v10 + 16);
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022 || (v242 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                v242 = (v241 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            }
          }
          else
          {
            v242 = 0;
          }
          if (!(v20 >> 49))
            goto LABEL_504;
          if (v20 < 0xFFFE000000000000)
          {
            *(_QWORD *)&v243 = v20 - 0x2000000000000;
            if (fabs(COERCE_DOUBLE(v20 - 0x2000000000000)) != INFINITY
              && (v243 < -1.79769313e308 || v243 > 1.79769313e308))
            {
              goto LABEL_504;
            }
          }
          else
          {
            v243 = (double)(int)v20;
          }
          if ((*(_BYTE *)(v10 + 40) & 8) != 0
            && (!v241
             || qword_1ECF4C038
             && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
             && !((v241 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
          {
            __break(0xC471u);
            JUMPOUT(0x198A876F0);
          }
          if (v29 >= v19)
            v317 = v19;
          else
            v317 = v29;
          v318 = v317 - v239;
          if (v317 > v239)
          {
            v319 = v242 + 8 * v239;
            v320 = (uint64_t)(v319 << 60) >> 63;
            v321 = v320 + 32;
            if (v318 >= v320 + 32)
              v322 = v320 + 32;
            else
              v322 = v318;
            if (v322)
            {
              v323 = 8 * v239;
              v324 = v322;
              while (*(double *)(v242 + v323) != v243)
              {
                v323 += 8;
                if (!--v324)
                  goto LABEL_325;
              }
            }
            else
            {
LABEL_325:
              if (v318 <= v321)
                return 6;
              v325 = (float64x2_t *)(v319 + 8 * v322);
              v326 = v318 - v322;
              v327 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v243, 0);
              v328 = (int8x8_t)vmovn_s64(vceqq_f64(*v325, v327));
              if (!*(_QWORD *)&v328)
              {
                v51 = 6;
                do
                {
                  if (v326 < 3)
                    return v51;
                  v326 -= 2;
                  v329 = v325[1];
                  ++v325;
                  v328 = (int8x8_t)vmovn_s64(vceqq_f64(v329, v327));
                }
                while (!*(_QWORD *)&v328);
              }
              v330 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v328);
              v331 = vpmin_u32(v330, v330).u32[0];
              if (v326 <= v331)
                return 6;
              v323 = (uint64_t)&v325->f64[v331] - v242;
            }
            v289 = v323 == -8;
            goto LABEL_478;
          }
          return 6;
        }
      }
      v232 = 10;
      goto LABEL_170;
    case '0':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v377 = *(_DWORD *)(v9 + 80);
        if ((v377 & 0x27) != 0 && (v377 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v83, v84, v85, v86, v87, v88);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v390 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v83, v84, v85, v86, v87, v88);
        if (!v391)
          return 6;
        v90 = v390;
        if (!v390)
          return 6;
      }
      else
      {
        v90 = *(_QWORD *)(v10 + 24);
        if (!v90)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v91 = 10;
      }
      else
      {
        v91 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v92 = *((_QWORD *)a2 + 7);
          goto LABEL_50;
        }
      }
      v92 = 10;
LABEL_50:
      v99 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v92, v90, 0, v85, v86, v87, v88, v89);
      if (*(_DWORD *)(v9 + 80))
      {
        v411 = *(_DWORD *)(v9 + 80);
        if ((v411 & 0x27) != 0 && (v411 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v93, v94, v95, v96, v97, v98);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v100 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v93, v94, v95, v96, v97, v98);
      if (v101)
      {
        v102 = *(_QWORD *)(v10 + 16);
        if (v102)
        {
          v103 = *(_QWORD *)(v10 + 16);
          if (qword_1ECF4C038)
          {
            if (byte_1ECF4C022 || (v103 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
              v103 = (v102 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          }
        }
        else
        {
          v103 = 0;
        }
        if ((v91 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v91 + 5) != 3)
        {
LABEL_201:
          v263 = v90 > v100 && v91 == 10;
          goto LABEL_507;
        }
        if (*(_DWORD *)(v91 + 8))
        {
          v104 = *(_QWORD *)(v91 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v104 = (v104 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v105 = *(_QWORD *)v104;
          if (*(_BYTE *)(v91 + 16))
            v106 = -(uint64_t)v105;
          else
            v106 = v105;
        }
        else
        {
          v106 = 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 8) != 0
          && (!v102
           || qword_1ECF4C038
           && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
           && !((v102 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
        {
          __break(0xC471u);
          JUMPOUT(0x198A87750);
        }
        if (v100 >= v90)
          v332 = v90;
        else
          v332 = v100;
        if (v99 >= v332)
          return 6;
        v333 = (int16x8_t *)(v103 + 8 * v99);
        v334 = v103 + 8 * v332;
        v335 = v334 - (_QWORD)v333;
        if ((uint64_t)(v334 - (_QWORD)v333) <= -8)
          goto LABEL_661;
        if (v335 <= 0xF8)
        {
          v51 = 6;
          while (v106 != v333->i64[0])
          {
            v333 = (int16x8_t *)((char *)v333 + 8);
            v335 -= 8;
            if (!v335)
              return v51;
          }
        }
        else
        {
          v336 = vdupq_n_s64(v106);
          if ((unint64_t)&v333->u64[1] >= v334)
          {
LABEL_670:
            v338 = v333;
LABEL_368:
            if ((unint64_t)v338 >= v334)
              return 6;
            v333 = (int16x8_t *)(v334 - 16);
            v337 = (int8x8_t)vmovn_s64(vceqq_s64(*(int64x2_t *)(v334 - 16), v336));
            if (!*(_QWORD *)&v337)
              return 6;
          }
          else
          {
            while (1)
            {
              v337 = (int8x8_t)vmovn_s64(vceqq_s64(*(int64x2_t *)v333, v336));
              if (v337)
                break;
              v338 = v333 + 1;
              v339 = &v333[1].i8[8];
              ++v333;
              if ((unint64_t)v339 >= v334)
                goto LABEL_368;
            }
          }
LABEL_370:
          v343 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v337);
          v333 = (int16x8_t *)((char *)v333 + 8 * vpmin_u32(v343, v343).u8[0]);
        }
LABEL_371:
        v344 = (unint64_t *)((char *)&v333->u64[1] - v103) == 0;
LABEL_654:
        v421 = 6;
        if (!v344)
          v421 = 7;
        if (v333 == (int16x8_t *)v334)
          return 6;
        else
          return v421;
      }
LABEL_537:
      v263 = v91 == 10;
      goto LABEL_507;
    case '1':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v385 = *(_DWORD *)(v9 + 80);
        if ((v385 & 0x27) != 0 && (v385 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v244, v245, v246, v247, v248, v249);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v423) = 0;
        v424 = 0;
        v406 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v244, v245, v246, v247, v248, v249);
        if (!v407)
          return 6;
        v90 = v406;
        if (!v406)
          return 6;
      }
      else
      {
        v90 = *(_QWORD *)(v10 + 24);
        if (!v90)
          return 6;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v91 = 10;
      }
      else
      {
        v91 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v251 = *((_QWORD *)a2 + 7);
          goto LABEL_185;
        }
      }
      v251 = 10;
LABEL_185:
      v258 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v251, v90, 0, v246, v247, v248, v249, v250);
      if (*(_DWORD *)(v9 + 80))
      {
        v419 = *(_DWORD *)(v9 + 80);
        if ((v419 & 0x27) != 0 && (v419 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v252, v253, v254, v255, v256, v257);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v423) = 0;
      v424 = 0;
      v100 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v423, v252, v253, v254, v255, v256, v257);
      if (!v259)
        goto LABEL_537;
      v260 = *(_QWORD *)(v10 + 16);
      if (v260)
      {
        v103 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v103 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v103 = (v260 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v103 = 0;
      }
      if ((v91 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v91 + 5) != 3)
        goto LABEL_201;
      if (*(_DWORD *)(v91 + 8))
      {
        v261 = *(_QWORD *)(v91 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v261 = (v261 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v262 = *(_QWORD *)v261;
        if (*(_BYTE *)(v91 + 16))
          v262 = -(uint64_t)v262;
      }
      else
      {
        v262 = 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v260
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v260 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A87770);
      }
      if (v100 >= v90)
        v340 = v90;
      else
        v340 = v100;
      if (v258 >= v340)
        return 6;
      v333 = (int16x8_t *)(v103 + 8 * v258);
      v334 = v103 + 8 * v340;
      v341 = v334 - (_QWORD)v333;
      if ((uint64_t)(v334 - (_QWORD)v333) <= -8)
        goto LABEL_661;
      if (v341 <= 0xF8)
      {
        v51 = 6;
        while (v262 != v333->i64[0])
        {
          v333 = (int16x8_t *)((char *)v333 + 8);
          v341 -= 8;
          if (!v341)
            return v51;
        }
        goto LABEL_371;
      }
      v336 = vdupq_n_s64(v262);
      if ((unint64_t)&v333->u64[1] >= v334)
        goto LABEL_670;
      while (1)
      {
        v337 = (int8x8_t)vmovn_s64(vceqq_s64(*(int64x2_t *)v333, v336));
        if (v337)
          goto LABEL_370;
        v338 = v333 + 1;
        v342 = &v333[1].i8[8];
        ++v333;
        if ((unint64_t)v342 >= v334)
          goto LABEL_368;
      }
    default:
      return JSC::throwTypeError((unint64_t)this, &v422, (uint64_t)"Receiver should be a typed array view", 38);
  }
}

uint64_t JSC::typedArrayViewProtoFuncFill(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  const char *v29;
  JSC::VM **v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  uint64_t v48;
  int v49;
  JSC::JSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int8x16_t v58;
  JSC::JSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  int8x16_t v88;
  JSC::JSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int8x16_t v97;
  JSC::JSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  _WORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int8x16_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int16 v128;
  int8x16_t v129;
  JSC::JSObject *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int8x16_t v138;
  JSC::JSObject *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  uint64_t v150;
  _WORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int8x16_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int8x16_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int8x16_t v177;
  uint64_t v178;
  JSC::JSObject *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int8x16_t v187;
  JSC::JSObject *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  BOOL v199;
  unint64_t v200;
  uint64_t v201;
  size_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int8x16_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int8x16_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int8x16_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int8x16_t v241;
  unint64_t v242;
  JSC::Structure *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int8x16_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  JSC::JSObject *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  int8x16_t v264;
  JSC::JSObject *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  unint64_t v295;
  char v296;
  unint64_t v297;
  char v298;
  unint64_t v299;
  char v300;
  unint64_t v301;
  char v302;
  int v303;
  unint64_t v304;
  char v305;
  int v306;
  unint64_t v307;
  char v308;
  unint64_t v309;
  char v310;
  unint64_t v311;
  char v312;
  unint64_t v313;
  char v314;
  unint64_t v315;
  char v316;
  int v317;
  JSC::JSObject *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  int8x16_t v326;
  JSC::JSObject *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  int v342;
  int v343;
  unint64_t v344;
  char v345;
  int v346;
  JSC::JSObject *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int8x16_t v354;
  JSC::JSObject *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  char v364;
  unint64_t v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  uint64_t v376;
  uint64_t __pattern4;
  uint64_t v378;
  uint64_t v379;
  char v380;

  v8 = this;
  v9 = *((_QWORD *)this + 7);
  v376 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v29 = "Receiver should be a typed array view but was not an object";
    v30 = (JSC::VM **)&v376;
    v31 = 60;
    return JSC::throwTypeError((unint64_t)this, v30, (uint64_t)v29, v31);
  }
  switch(*(_BYTE *)(v10 + 5))
  {
    case '\'':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v284 = *(_DWORD *)(v9 + 80);
        if ((v284 & 0x27) != 0 && (v284 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v295 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v12, v13, v14, v15, v16, v17);
        if (v296)
          v19 = v295;
        else
          v19 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
        v20 = 10;
      else
        v20 = *((_QWORD *)a2 + 6);
      v21 = JSC::toNativeFromValue<JSC::Int8Adaptor>(v8, v20, v12, v13, v14, v15, v16, v17, v18);
      goto LABEL_25;
    case '(':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v285 = *(_DWORD *)(v9 + 80);
        if ((v285 & 0x27) != 0 && (v285 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v33, v34, v35, v36, v37, v38);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v297 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v33, v34, v35, v36, v37, v38);
        if (v298)
          v19 = v297;
        else
          v19 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
        v40 = 10;
      else
        v40 = *((_QWORD *)a2 + 6);
      v21 = JSC::toNativeFromValue<JSC::Uint8Adaptor>(v8, v40, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_25;
    case ')':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v286 = *(_DWORD *)(v9 + 80);
        if ((v286 & 0x27) != 0 && (v286 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v41, v42, v43, v44, v45, v46);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v299 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v41, v42, v43, v44, v45, v46);
        if (v300)
          v19 = v299;
        else
          v19 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
        v48 = 10;
      else
        v48 = *((_QWORD *)a2 + 6);
      v21 = JSC::toNativeFromValue<JSC::Uint8ClampedAdaptor>(v8, (JSC::JSObject *)v48, v41, v42, v43, v44, v45, v46, v47);
LABEL_25:
      v49 = v21;
      if (*(_DWORD *)(v9 + 80))
      {
        v278 = *(_DWORD *)(v9 + 80);
        if ((v278 & 0x27) != 0 && (v278 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v50 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                            ? 10
                            : *((_QWORD *)a2 + 7));
      v57 = JSC::argumentClampedIndexFromStartOrEnd(v8, v50, v19, 0, v24, v25, v26, v27, v28);
      if (*(_DWORD *)(v9 + 80))
      {
        v279 = *(_DWORD *)(v9 + 80);
        if ((v279 & 0x27) != 0 && (v279 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v51, v52, v53, v54, v55, v56);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v59 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                            ? 10
                            : *((_QWORD *)a2 + 8));
      v66 = JSC::argumentClampedIndexFromStartOrEnd(v8, v59, v19, v19, v53, v54, v55, v56, v58);
      if (*(_DWORD *)(v9 + 80))
      {
        v280 = *(_DWORD *)(v9 + 80);
        if ((v280 & 0x27) != 0 && (v280 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v60, v61, v62, v63, v64, v65);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v379) = 0;
      v380 = 0;
      v67 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v60, v61, v62, v63, v64, v65);
      if (!v68)
        goto LABEL_353;
      if (v67 >= v66)
        v69 = v66;
      else
        v69 = v67;
      v70 = v69 - v57;
      if (v69 > v57)
      {
        v71 = *(_QWORD *)(v10 + 16);
        if (v71 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v71 = (v71 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        memset((void *)(v71 + v57), v49, v70);
      }
      return v10;
    case '*':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v287 = *(_DWORD *)(v9 + 80);
        if ((v287 & 0x27) != 0 && (v287 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v72, v73, v74, v75, v76, v77);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v301 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v72, v73, v74, v75, v76, v77);
        v79 = v302 ? v301 : 0;
      }
      else
      {
        v79 = *(_QWORD *)(v10 + 24);
      }
      v80 = *((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6);
      v87 = JSC::toNativeFromValue<JSC::Int16Adaptor>(v8, v80, v72, v73, v74, v75, v76, v77, v78);
      if (*(_DWORD *)(v9 + 80))
      {
        v303 = *(_DWORD *)(v9 + 80);
        if ((v303 & 0x27) != 0 && (v303 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v89 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                            ? 10
                            : *((_QWORD *)a2 + 7));
      v96 = JSC::argumentClampedIndexFromStartOrEnd(v8, v89, v79, 0, v83, v84, v85, v86, v88);
      if (*(_DWORD *)(v9 + 80))
      {
        v368 = *(_DWORD *)(v9 + 80);
        if ((v368 & 0x27) != 0 && (v368 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v90, v91, v92, v93, v94, v95);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v98 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                            ? 10
                            : *((_QWORD *)a2 + 8));
      v105 = JSC::argumentClampedIndexFromStartOrEnd(v8, v98, v79, v79, v92, v93, v94, v95, v97);
      if (*(_DWORD *)(v9 + 80))
      {
        v372 = *(_DWORD *)(v9 + 80);
        if ((v372 & 0x27) != 0 && (v372 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v99, v100, v101, v102, v103, v104);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v379) = 0;
      v380 = 0;
      v106 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v99, v100, v101, v102, v103, v104);
      if (!v107)
        goto LABEL_353;
      if (v106 >= v105)
        v108 = v105;
      else
        v108 = v106;
      if (v96 < v108)
      {
        v109 = *(_QWORD *)(v10 + 16);
        if (v109 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v109 = (v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v110 = (_WORD *)(v109 + 2 * v96);
        v111 = 2 * v108 - 2 * v96;
        if (v111 >= 1)
        {
          v112 = ((unint64_t)v111 >> 1) + 1;
          do
          {
            *v110++ = v87;
            --v112;
          }
          while (v112 > 1);
        }
      }
      return v10;
    case '+':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v288 = *(_DWORD *)(v9 + 80);
        if ((v288 & 0x27) != 0 && (v288 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v113, v114, v115, v116, v117, v118);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v304 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v113, v114, v115, v116, v117, v118);
        v120 = v305 ? v304 : 0;
      }
      else
      {
        v120 = *(_QWORD *)(v10 + 24);
      }
      v121 = *((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6);
      v128 = JSC::toNativeFromValue<JSC::Uint16Adaptor>(v8, v121, v113, v114, v115, v116, v117, v118, v119);
      if (*(_DWORD *)(v9 + 80))
      {
        v306 = *(_DWORD *)(v9 + 80);
        if ((v306 & 0x27) != 0 && (v306 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v122, v123, v124, v125, v126, v127);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v130 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v137 = JSC::argumentClampedIndexFromStartOrEnd(v8, v130, v120, 0, v124, v125, v126, v127, v129);
      if (*(_DWORD *)(v9 + 80))
      {
        v369 = *(_DWORD *)(v9 + 80);
        if ((v369 & 0x27) != 0 && (v369 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v131, v132, v133, v134, v135, v136);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v139 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                             ? 10
                             : *((_QWORD *)a2 + 8));
      v146 = JSC::argumentClampedIndexFromStartOrEnd(v8, v139, v120, v120, v133, v134, v135, v136, v138);
      if (*(_DWORD *)(v9 + 80))
      {
        v373 = *(_DWORD *)(v9 + 80);
        if ((v373 & 0x27) != 0 && (v373 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v140, v141, v142, v143, v144, v145);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v379) = 0;
      v380 = 0;
      v147 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v140, v141, v142, v143, v144, v145);
      if (!v148)
        goto LABEL_353;
      if (v147 >= v146)
        v149 = v146;
      else
        v149 = v147;
      if (v137 < v149)
      {
        v150 = *(_QWORD *)(v10 + 16);
        if (v150 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v150 = (v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v151 = (_WORD *)(v150 + 2 * v137);
        v152 = 2 * v149 - 2 * v137;
        if (v152 >= 1)
        {
          v153 = ((unint64_t)v152 >> 1) + 1;
          do
          {
            *v151++ = v128;
            --v153;
          }
          while (v153 > 1);
        }
      }
      return v10;
    case ',':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v289 = *(_DWORD *)(v9 + 80);
        if ((v289 & 0x27) != 0 && (v289 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v154, v155, v156, v157, v158, v159);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v307 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v154, v155, v156, v157, v158, v159);
        if (v308)
          v161 = v307;
        else
          v161 = 0;
      }
      else
      {
        v161 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
        v162 = 10;
      else
        v162 = *((_QWORD *)a2 + 6);
      v163 = JSC::toNativeFromValue<JSC::Int32Adaptor>(v8, v162, v154, v155, v156, v157, v158, v159, v160);
      goto LABEL_104;
    case '-':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v290 = *(_DWORD *)(v9 + 80);
        if ((v290 & 0x27) != 0 && (v290 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v171, v172, v173, v174, v175, v176);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v309 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v171, v172, v173, v174, v175, v176);
        if (v310)
          v161 = v309;
        else
          v161 = 0;
      }
      else
      {
        v161 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
        v178 = 10;
      else
        v178 = *((_QWORD *)a2 + 6);
      v163 = JSC::toNativeFromValue<JSC::Uint32Adaptor>(v8, (JSC::JSObject *)v178, v171, v172, v173, v174, v175, v176, v177);
LABEL_104:
      LODWORD(__pattern4) = v163;
      if (*(_DWORD *)(v9 + 80))
      {
        v281 = *(_DWORD *)(v9 + 80);
        if ((v281 & 0x27) != 0 && (v281 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v164, v165, v166, v167, v168, v169);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v179 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v186 = JSC::argumentClampedIndexFromStartOrEnd(v8, v179, v161, 0, v166, v167, v168, v169, v170);
      if (*(_DWORD *)(v9 + 80))
      {
        v282 = *(_DWORD *)(v9 + 80);
        if ((v282 & 0x27) != 0 && (v282 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v180, v181, v182, v183, v184, v185);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v188 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                             ? 10
                             : *((_QWORD *)a2 + 8));
      v195 = JSC::argumentClampedIndexFromStartOrEnd(v8, v188, v161, v161, v182, v183, v184, v185, v187);
      if (*(_DWORD *)(v9 + 80))
      {
        v283 = *(_DWORD *)(v9 + 80);
        if ((v283 & 0x27) != 0 && (v283 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v189, v190, v191, v192, v193, v194);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v379) = 0;
      v380 = 0;
      v196 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v189, v190, v191, v192, v193, v194);
      if (!v197)
        goto LABEL_353;
      if (v196 >= v195)
        v198 = v195;
      else
        v198 = v196;
      v199 = v198 > v186;
      v200 = v198 - v186;
      if (!v199)
        return v10;
      v201 = *(_QWORD *)(v10 + 16);
      if (v201 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v201 = (v201 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v202 = 4 * v200;
      v203 = (void *)(v201 + 4 * v186);
      goto LABEL_198;
    case '.':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v291 = *(_DWORD *)(v9 + 80);
        if ((v291 & 0x27) != 0 && (v291 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v204, v205, v206, v207, v208, v209);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v311 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v204, v205, v206, v207, v208, v209);
        if (v312)
          v211 = v311;
        else
          v211 = 0;
      }
      else
      {
        v211 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v379 = 10;
      }
      else
      {
        v212 = *((_QWORD *)a2 + 6);
        v379 = v212;
        if (v212 >= 0xFFFE000000000000)
        {
          *(float *)v210.i32 = (float)(int)v212;
          goto LABEL_180;
        }
        if (v212 >> 49)
        {
          v210.i64[0] = v212 - 0x2000000000000;
          goto LABEL_179;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v379, v8, v204, v205, v206, v207, v208, v209, v210);
LABEL_179:
      *(float *)v210.i32 = *(double *)v210.i64;
LABEL_180:
      LODWORD(__pattern4) = v210.i32[0];
      if (*(_DWORD *)(v9 + 80))
      {
        v366 = *(_DWORD *)(v9 + 80);
        if ((v366 & 0x27) != 0 && (v366 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v204, v205, v206, v207, v208, v209);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v256 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v263 = JSC::argumentClampedIndexFromStartOrEnd(v8, v256, v211, 0, v206, v207, v208, v209, v210);
      if (*(_DWORD *)(v9 + 80))
      {
        v370 = *(_DWORD *)(v9 + 80);
        if ((v370 & 0x27) != 0 && (v370 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v257, v258, v259, v260, v261, v262);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v265 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                             ? 10
                             : *((_QWORD *)a2 + 8));
      v272 = JSC::argumentClampedIndexFromStartOrEnd(v8, v265, v211, v211, v259, v260, v261, v262, v264);
      if (*(_DWORD *)(v9 + 80))
      {
        v374 = *(_DWORD *)(v9 + 80);
        if ((v374 & 0x27) != 0 && (v374 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v266, v267, v268, v269, v270, v271);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v379) = 0;
      v380 = 0;
      v273 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v266, v267, v268, v269, v270, v271);
      if (!v274)
        goto LABEL_353;
      if (v273 >= v272)
        v275 = v272;
      else
        v275 = v273;
      v199 = v275 > v263;
      v276 = v275 - v263;
      if (v199)
      {
        v277 = *(_QWORD *)(v10 + 16);
        if (v277 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v277 = (v277 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v202 = 4 * v276;
        v203 = (void *)(v277 + 4 * v263);
LABEL_198:
        memset_pattern4(v203, &__pattern4, v202);
      }
      return v10;
    case '/':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v292 = *(_DWORD *)(v9 + 80);
        if ((v292 & 0x27) != 0 && (v292 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v213, v214, v215, v216, v217, v218);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v313 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v213, v214, v215, v216, v217, v218);
        if (v314)
          v220 = v313;
        else
          v220 = 0;
      }
      else
      {
        v220 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v379 = 10;
        goto LABEL_134;
      }
      v221 = *((_QWORD *)a2 + 6);
      v379 = v221;
      if (v221 >= 0xFFFE000000000000)
      {
        *(double *)v219.i64 = (double)(int)v221;
      }
      else
      {
        if (!(v221 >> 49))
        {
LABEL_134:
          JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v379, v8, v213, v214, v215, v216, v217, v218, v219);
          goto LABEL_165;
        }
        v219.i64[0] = v221 - 0x2000000000000;
      }
LABEL_165:
      __pattern4 = v219.i64[0];
LABEL_299:
      if (*(_DWORD *)(v9 + 80))
      {
        v341 = *(_DWORD *)(v9 + 80);
        if ((v341 & 0x27) != 0 && (v341 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v213, v214, v215, v216, v217, v218);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v318 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v325 = JSC::argumentClampedIndexFromStartOrEnd(v8, v318, v220, 0, v215, v216, v217, v218, v219);
      if (*(_DWORD *)(v9 + 80))
      {
        v342 = *(_DWORD *)(v9 + 80);
        if ((v342 & 0x27) != 0 && (v342 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v319, v320, v321, v322, v323, v324);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v327 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                             ? 10
                             : *((_QWORD *)a2 + 8));
      v334 = JSC::argumentClampedIndexFromStartOrEnd(v8, v327, v220, v220, v321, v322, v323, v324, v326);
      if (*(_DWORD *)(v9 + 80))
      {
        v343 = *(_DWORD *)(v9 + 80);
        if ((v343 & 0x27) != 0 && (v343 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v328, v329, v330, v331, v332, v333);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v379) = 0;
      v380 = 0;
      v335 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v328, v329, v330, v331, v332, v333);
      if (!v336)
      {
LABEL_353:
        v29 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v30 = (JSC::VM **)&v378;
        this = v8;
        v31 = 72;
        return JSC::throwTypeError((unint64_t)this, v30, (uint64_t)v29, v31);
      }
      if (v335 >= v334)
        v337 = v334;
      else
        v337 = v335;
      v199 = v337 > v325;
      v338 = v337 - v325;
      if (v199)
      {
        v339 = *(_QWORD *)(v10 + 16);
        if (!v339)
          goto LABEL_350;
        v340 = qword_1ECF4C038;
        if (!qword_1ECF4C038)
          goto LABEL_350;
        if (!byte_1ECF4C022)
        {
LABEL_453:
          if (disablePrimitiveGigacageRequested)
            goto LABEL_350;
        }
LABEL_349:
        v339 = (v339 & 0x3FFFFFFFFLL) + v340;
LABEL_350:
        memset_pattern8((void *)(v339 + 8 * v325), &__pattern4, 8 * v338);
      }
      return v10;
    case '0':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v293 = *(_DWORD *)(v9 + 80);
        if ((v293 & 0x27) != 0 && (v293 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v222, v223, v224, v225, v226, v227);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v315 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v222, v223, v224, v225, v226, v227);
        if (v316)
          v220 = v315;
        else
          v220 = 0;
      }
      else
      {
        v220 = *(_QWORD *)(v10 + 24);
      }
      if (*((_DWORD *)a2 + 8) == 1)
        v229 = 10;
      else
        v229 = *((_QWORD *)a2 + 6);
      v379 = v229;
      v230 = *((_QWORD *)v8 + 7);
      JSC::JSValue::toBigInt((JSC::Structure **)&v379, v8, v222, v223, v224, v225, v226, v227, v228);
      v232 = v231;
      if (*(_DWORD *)(v230 + 80))
      {
        v317 = *(_DWORD *)(v230 + 80);
        if ((v317 & 0x27) != 0 && (v317 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, v213, v214, v215, v216, v217, v218);
        if (*(_QWORD *)(v230 + 16))
          goto LABEL_297;
      }
      if (!*(_DWORD *)(v232 + 8))
      {
LABEL_297:
        v234 = 0;
      }
      else
      {
        v233 = *(_QWORD *)(v232 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v233 = (v233 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v234 = *(_QWORD *)v233;
        if (*(_BYTE *)(v232 + 16))
          v234 = -v234;
      }
      __pattern4 = v234;
      goto LABEL_299;
    case '1':
      v378 = v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v294 = *(_DWORD *)(v9 + 80);
        if ((v294 & 0x27) != 0 && (v294 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v235, v236, v237, v238, v239, v240);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v379) = 0;
        v380 = 0;
        v344 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v235, v236, v237, v238, v239, v240);
        v242 = v345 ? v344 : 0;
      }
      else
      {
        v242 = *(_QWORD *)(v10 + 24);
      }
      v243 = (JSC::Structure *)(*((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6));
      v379 = (uint64_t)v243;
      v244 = *((_QWORD *)v8 + 7);
      JSC::JSValue::toBigInt((JSC::Structure **)&v379, v8, v235, v236, v237, v238, v239, v240, v241);
      v253 = v252;
      if (*(_DWORD *)(v244 + 80))
      {
        v346 = *(_DWORD *)(v244 + 80);
        if ((v346 & 0x27) != 0 && (v346 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v244 + 64), 7u, v245, v246, v247, v248, v249, v250);
        if (*(_QWORD *)(v244 + 16))
          goto LABEL_332;
      }
      if (!*(_DWORD *)(v253 + 8))
      {
LABEL_332:
        v255 = 0;
      }
      else
      {
        v254 = *(_QWORD *)(v253 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v254 = (v254 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v255 = *(_QWORD *)v254;
        if (*(_BYTE *)(v253 + 16))
          v255 = -v255;
      }
      __pattern4 = v255;
      if (*(_DWORD *)(v9 + 80))
      {
        v367 = *(_DWORD *)(v9 + 80);
        if ((v367 & 0x27) != 0 && (v367 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v245, v246, v247, v248, v249, v250);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v347 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v325 = JSC::argumentClampedIndexFromStartOrEnd(v8, v347, v242, 0, v247, v248, v249, v250, v251);
      if (*(_DWORD *)(v9 + 80))
      {
        v371 = *(_DWORD *)(v9 + 80);
        if ((v371 & 0x27) != 0 && (v371 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v348, v349, v350, v351, v352, v353);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v355 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL
                             ? 10
                             : *((_QWORD *)a2 + 8));
      v362 = JSC::argumentClampedIndexFromStartOrEnd(v8, v355, v242, v242, v350, v351, v352, v353, v354);
      if (*(_DWORD *)(v9 + 80))
      {
        v375 = *(_DWORD *)(v9 + 80);
        if ((v375 & 0x27) != 0 && (v375 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v356, v357, v358, v359, v360, v361);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v379) = 0;
      v380 = 0;
      v363 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v379, v356, v357, v358, v359, v360, v361);
      if (!v364)
        goto LABEL_353;
      if (v363 >= v362)
        v365 = v362;
      else
        v365 = v363;
      v199 = v365 > v325;
      v338 = v365 - v325;
      if (!v199)
        return v10;
      v339 = *(_QWORD *)(v10 + 16);
      if (!v339)
        goto LABEL_350;
      v340 = qword_1ECF4C038;
      if (!qword_1ECF4C038)
        goto LABEL_350;
      if (byte_1ECF4C022)
        goto LABEL_349;
      goto LABEL_453;
    default:
      v29 = "Receiver should be a typed array view";
      v30 = (JSC::VM **)&v376;
      v31 = 38;
      return JSC::throwTypeError((unint64_t)this, v30, (uint64_t)v29, v31);
  }
}

uint64_t JSC::typedArrayViewProtoFuncIndexOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  unsigned int v105;
  unsigned __int8 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 v129;
  unsigned int v130;
  unsigned __int8 v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int8x16_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int8x16_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  double v172;
  char v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int8x16_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int8x16_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int8x16_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  double v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int8x16_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  double v269;
  __int16 v270;
  unint64_t v271;
  int16x8_t *v272;
  unint64_t v273;
  unint64_t v274;
  unsigned int v275;
  unsigned int v276;
  double v277;
  unsigned int v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  double v284;
  int v285;
  unsigned int v286;
  char v287;
  double v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  float32x4_t *v296;
  unint64_t v297;
  float32x4_t v298;
  float32x4_t i;
  uint16x4_t v300;
  float32x4_t v301;
  double v302;
  int v303;
  double v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  size_t v310;
  double v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unsigned int v315;
  double v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  float64x2_t *v325;
  unint64_t v326;
  float64x2_t v327;
  float64x2_t j;
  int8x8_t v329;
  float64x2_t v330;
  unint64_t v331;
  int64x2_t *v332;
  unint64_t v333;
  unint64_t v334;
  int64x2_t v335;
  int8x8_t v336;
  int64x2_t *v337;
  __int8 *v338;
  unint64_t v339;
  unint64_t v340;
  __int8 *v341;
  uint32x2_t v342;
  int64x2_t *v343;
  uint64_t v344;
  unint64_t v345;
  BOOL v346;
  char v347;
  unsigned int v348;
  char v349;
  unsigned int v350;
  unint64_t v351;
  int16x8_t *v352;
  unint64_t v353;
  unint64_t v354;
  unsigned int v355;
  unint64_t v356;
  int32x4_t *v357;
  unint64_t v358;
  unint64_t v359;
  int32x4_t v360;
  uint32x4_t v361;
  int32x4_t *v362;
  __int8 *v363;
  uint32x2_t v364;
  unsigned __int32 v365;
  uint64_t v366;
  int8x16_t v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  void *v371;
  double v372;
  unsigned int v373;
  unint64_t v374;
  unint64_t v375;
  unsigned int v376;
  __int8 *v377;
  int32x4_t *v378;
  uint64_t v379;
  int16x8_t v380;
  int8x16_t v381;
  int16x8_t *v382;
  __int8 *v383;
  int16x8_t v384;
  int8x16_t v385;
  int16x8_t *v386;
  __int8 *v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  unint64_t v399;
  char v400;
  unint64_t v401;
  char v402;
  unint64_t v403;
  char v404;
  unint64_t v405;
  char v406;
  unint64_t v407;
  char v408;
  unint64_t v409;
  char v410;
  unint64_t v411;
  char v412;
  unint64_t v413;
  char v414;
  unint64_t v415;
  char v416;
  unint64_t v417;
  char v418;
  unint64_t v419;
  char v420;
  int16x8_t *v421;
  uint64_t v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int16x8_t *v434;
  JSC::VM *v435;
  char v436[8];
  char v437;

  v9 = *((_QWORD *)this + 7);
  v435 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v34 = "Receiver should be a typed array view but was not an object";
    v35 = 60;
    return JSC::throwTypeError((unint64_t)this, &v435, (uint64_t)v34, v35);
  }
  switch(*(_BYTE *)(v10 + 5))
  {
    case '\'':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v388 = *(_DWORD *)(v9 + 80);
        if ((v388 & 0x27) != 0 && (v388 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v399 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v12, v13, v14, v15, v16, v17);
        if (!v400)
          return 0xFFFE0000FFFFFFFFLL;
        v19 = v399;
        if (!v399)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v19 = *(_QWORD *)(v10 + 24);
        if (!v19)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v20 = 10;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v21 = *((_QWORD *)a2 + 7);
          goto LABEL_10;
        }
      }
      v21 = 10;
LABEL_10:
      v28 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v21, v19, 0, v14, v15, v16, v17, v18);
      if (*(_DWORD *)(v9 + 80))
      {
        v423 = *(_DWORD *)(v9 + 80);
        if ((v423 & 0x27) != 0 && (v423 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v436[0] = 0;
      v437 = 0;
      v29 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v22, v23, v24, v25, v26, v27);
      if (!v30)
        return 0xFFFE0000FFFFFFFFLL;
      v31 = *(_QWORD *)(v10 + 16);
      if (v31)
      {
        v32 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v32 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v32 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v32 = 0;
      }
      if (!(v20 >> 49))
        return 0xFFFE0000FFFFFFFFLL;
      if (v20 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v302 = v20 - 0x2000000000000;
        v303 = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)v303 != COERCE_DOUBLE(v20 - 0x2000000000000))
          return 0xFFFE0000FFFFFFFFLL;
        if (v302 >= 0.0)
        {
          v303 = v302;
          if (v302 > 0x7F)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else if (v303 != (char)v303)
        {
          return 0xFFFE0000FFFFFFFFLL;
        }
        v33 = v303;
      }
      else
      {
        if ((_DWORD)v20 != (char)v20)
          return 0xFFFE0000FFFFFFFFLL;
        v33 = v20;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v31
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A8AE24);
      }
      v369 = v29 >= v19 ? v19 : v29;
      v280 = v369 - v28;
      if (v369 <= v28)
        return 0xFFFE0000FFFFFFFFLL;
      if (v280 >= 0x10)
        v281 = 16;
      else
        v281 = v369 - v28;
      if (v281)
      {
        v370 = v281;
        v283 = v28;
        do
        {
          if (*(unsigned __int8 *)(v32 + v283) == v33)
            goto LABEL_480;
          ++v283;
          --v370;
        }
        while (v370);
      }
      goto LABEL_476;
    case '(':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v393 = *(_DWORD *)(v9 + 80);
        if ((v393 & 0x27) != 0 && (v393 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v133, v134, v135, v136, v137, v138);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v409 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v133, v134, v135, v136, v137, v138);
        if (!v410)
          return 0xFFFE0000FFFFFFFFLL;
        v140 = v409;
        if (!v409)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v140 = *(_QWORD *)(v10 + 24);
        if (!v140)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v141 = 10;
      }
      else
      {
        v141 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v142 = *((_QWORD *)a2 + 7);
          goto LABEL_102;
        }
      }
      v142 = 10;
LABEL_102:
      v149 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v142, v140, 0, v135, v136, v137, v138, v139);
      if (*(_DWORD *)(v9 + 80))
      {
        v428 = *(_DWORD *)(v9 + 80);
        if ((v428 & 0x27) != 0 && (v428 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v143, v144, v145, v146, v147, v148);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v436[0] = 0;
      v437 = 0;
      v150 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v143, v144, v145, v146, v147, v148);
      if (!v151)
        return 0xFFFE0000FFFFFFFFLL;
      v152 = *(_QWORD *)(v10 + 16);
      if (v152)
      {
        v32 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v32 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v32 = (v152 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v32 = 0;
      }
      if (!(v141 >> 49))
        return 0xFFFE0000FFFFFFFFLL;
      if (v141 <= 0xFFFDFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v304 = v141 - 0x2000000000000;
        v153 = (int)COERCE_DOUBLE(v141 - 0x2000000000000);
        if ((double)v153 != COERCE_DOUBLE(v141 - 0x2000000000000))
          return 0xFFFE0000FFFFFFFFLL;
        if (v304 >= 0.0)
          v153 = v304;
        if (v153 >= 0x100)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        if (v141 >= 0x100)
          LOBYTE(v153) = 0;
        else
          LOBYTE(v153) = v141;
        if (v141 > 0xFF)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v152
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v152 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A8AE04);
      }
      if (v150 >= v140)
        v305 = v140;
      else
        v305 = v150;
      v306 = v305 - v149;
      if (v305 > v149)
      {
        if (v306 >= 0x10)
          v307 = 16;
        else
          v307 = v305 - v149;
        if (v307)
        {
          v308 = v307;
          v283 = v149;
          do
          {
            if (*(unsigned __int8 *)(v32 + v283) == v153)
              goto LABEL_480;
            ++v283;
            --v308;
          }
          while (v308);
        }
        if (v306 >= 0x11)
        {
          v309 = (void *)(v32 + v149 + v307);
          v33 = v153;
          v310 = v306 - v307;
          goto LABEL_478;
        }
      }
      return 0xFFFE0000FFFFFFFFLL;
    case ')':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v391 = *(_DWORD *)(v9 + 80);
        if ((v391 & 0x27) != 0 && (v391 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v86, v87, v88, v89, v90, v91);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v405 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v86, v87, v88, v89, v90, v91);
        if (!v406)
          return 0xFFFE0000FFFFFFFFLL;
        v93 = v405;
        if (!v405)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v93 = *(_QWORD *)(v10 + 24);
        if (!v93)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v94 = 10;
      }
      else
      {
        v94 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v95 = *((_QWORD *)a2 + 7);
          goto LABEL_67;
        }
      }
      v95 = 10;
LABEL_67:
      v28 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v95, v93, 0, v88, v89, v90, v91, v92);
      if (*(_DWORD *)(v9 + 80))
      {
        v426 = *(_DWORD *)(v9 + 80);
        if ((v426 & 0x27) != 0 && (v426 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v96, v97, v98, v99, v100, v101);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v436[0] = 0;
      v437 = 0;
      v102 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v96, v97, v98, v99, v100, v101);
      if (!v103)
        return 0xFFFE0000FFFFFFFFLL;
      v104 = *(_QWORD *)(v10 + 16);
      if (v104)
      {
        v32 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v32 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v32 = (v104 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v32 = 0;
      }
      if (!(v94 >> 49))
        return 0xFFFE0000FFFFFFFFLL;
      if (v94 < 0xFFFE000000000000)
      {
        v276 = (int)COERCE_DOUBLE(v94 - 0x2000000000000);
        v277 = (double)v276;
        v278 = v276 | 0x100;
        if (v277 != COERCE_DOUBLE(v94 - 0x2000000000000))
          v278 = 0;
        v33 = v278;
        v105 = v278 >> 8;
      }
      else
      {
        v105 = v94 < 0x100;
        v106 = v94 >= 0x100 ? 0 : v94;
        v33 = v106;
      }
      if (!v105)
        return 0xFFFE0000FFFFFFFFLL;
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v104
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v104 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A8ADA4);
      }
      v279 = v102 >= v93 ? v93 : v102;
      v280 = v279 - v28;
      if (v279 <= v28)
        return 0xFFFE0000FFFFFFFFLL;
      if (v280 >= 0x10)
        v281 = 16;
      else
        v281 = v279 - v28;
      if (!v281)
        goto LABEL_476;
      v282 = v281;
      v283 = v28;
      while (*(unsigned __int8 *)(v32 + v283) != v33)
      {
        ++v283;
        if (!--v282)
        {
LABEL_476:
          if (v280 < 0x11)
            return 0xFFFE0000FFFFFFFFLL;
          v309 = (void *)(v32 + v28 + v281);
          v310 = v280 - v281;
LABEL_478:
          v371 = memchr(v309, v33, v310);
          if (!v371)
            return 0xFFFE0000FFFFFFFFLL;
          v283 = (unint64_t)v371 - v32;
          break;
        }
      }
LABEL_480:
      if (v283 == -1)
        return 0xFFFE0000FFFFFFFFLL;
      if (HIDWORD(v283))
        goto LABEL_775;
      if ((v283 & 0x80000000) == 0)
        return v283 | 0xFFFE000000000000;
      goto LABEL_483;
    case '*':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v392 = *(_DWORD *)(v9 + 80);
        if ((v392 & 0x27) != 0 && (v392 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v107, v108, v109, v110, v111, v112);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v407 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v107, v108, v109, v110, v111, v112);
        if (!v408)
          return 0xFFFE0000FFFFFFFFLL;
        v114 = v407;
        if (!v407)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v114 = *(_QWORD *)(v10 + 24);
        if (!v114)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v115 = 10;
      }
      else
      {
        v115 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v116 = *((_QWORD *)a2 + 7);
LABEL_85:
          v123 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v116, v114, 0, v109, v110, v111, v112, v113);
          if (!*(_DWORD *)(v9 + 80))
            goto LABEL_86;
          v427 = *(_DWORD *)(v9 + 80);
          if ((v427 & 0x27) != 0 && (v427 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v117, v118, v119, v120, v121, v122);
          if (!*(_QWORD *)(v9 + 16))
          {
LABEL_86:
            v436[0] = 0;
            v437 = 0;
            v124 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v117, v118, v119, v120, v121, v122);
            if (!v126)
              return 0xFFFE0000FFFFFFFFLL;
            v127 = *(_QWORD *)(v10 + 16);
            if (v127)
            {
              v128 = *(_QWORD *)(v10 + 16);
              if (qword_1ECF4C038)
              {
                if (byte_1ECF4C022 || (v128 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                  v128 = (v127 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              }
            }
            else
            {
              v128 = 0;
            }
            if (!(v115 >> 49))
              return 0xFFFE0000FFFFFFFFLL;
            if (v115 < 0xFFFE000000000000)
            {
              *(_QWORD *)&v284 = v115 - 0x2000000000000;
              v285 = (int)COERCE_DOUBLE(v115 - 0x2000000000000);
              if ((double)v285 == COERCE_DOUBLE(v115 - 0x2000000000000))
              {
                v347 = v284 >= 0x8000 ? 0 : v284;
                v130 = v284 & 0xFF00;
                v348 = v285 == (__int16)v285
                     ? (int)COERCE_DOUBLE(v115 - 0x2000000000000) | 0x10000
                     : 0;
                v349 = v348;
                v350 = HIWORD(v348);
                if (v284 >= 0.0)
                {
                  v286 = v284 < 0x8000;
                }
                else
                {
                  v130 = (int)COERCE_DOUBLE(v115 - 0x2000000000000) & 0xFF00;
                  v286 = v350;
                }
                v287 = v284 < 0.0 ? v349 : v347;
              }
              else
              {
                v130 = 0;
                v286 = 0;
                v287 = 0;
              }
              v132 = v286 << 16;
              v131 = v287 | v130;
            }
            else
            {
              v129 = v115;
              v130 = v115 & 0xFF00;
              if ((__int16)v115 != (_DWORD)v115)
                v129 = 0;
              v131 = v129;
              v132 = ((__int16)v115 == (_DWORD)v115) << 16;
            }
            if (!v132)
              return 0xFFFE0000FFFFFFFFLL;
            if ((*(_BYTE *)(v10 + 40) & 8) != 0
              && (!v127
               || qword_1ECF4C038
               && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
               && !((v127 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
            {
              __break(0xC471u);
              JUMPOUT(0x198A8ADC4);
            }
            v351 = v124 >= v114 ? v114 : v124;
            if (v123 >= v351)
              return 0xFFFE0000FFFFFFFFLL;
            v352 = (int16x8_t *)(v128 + 2 * v123);
            v353 = v128 + 2 * v351;
            v354 = v353 - (_QWORD)v352;
            if ((uint64_t)(v353 - (_QWORD)v352) > -2)
            {
              v355 = v130 | v131;
              if (v354 <= 0x3E)
              {
                result = 0xFFFE0000FFFFFFFFLL;
                while (v352->u16[0] != v355)
                {
                  v352 = (int16x8_t *)((char *)v352 + 2);
                  v354 -= 2;
                  if (!v354)
                    return result;
                }
                goto LABEL_654;
              }
              v384 = vdupq_n_s16(v355);
              if ((unint64_t)&v352->u64[1] + 6 < v353)
              {
                while (1)
                {
                  v385 = (int8x16_t)vceqq_s16(*v352, v384);
                  LOWORD(v125) = vmaxvq_u16((uint16x8_t)v385);
                  if (v125)
                    break;
                  v386 = v352 + 1;
                  v387 = &v352[1].i8[14];
                  ++v352;
                  if ((unint64_t)v387 >= v353)
                    goto LABEL_649;
                }
LABEL_653:
                v352 = (int16x8_t *)((char *)v352
                                   + 2
                                   * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v385)));
LABEL_654:
                if (v352 == (int16x8_t *)v353)
                  v434 = 0;
                else
                  v434 = v352;
                result = 0xFFFE0000FFFFFFFFLL;
                if (v352 == (int16x8_t *)v353)
                  return result;
                v422 = (uint64_t)v434->i64 - v128;
LABEL_659:
                if (v422 != -2)
                {
                  v283 = v422 >> 1;
                  if (!((unint64_t)v422 >> 33))
                  {
                    v345 = (unint64_t)v422 >> 1;
                    if ((v345 & 0x80000000) != 0)
                      goto LABEL_662;
                    return v283 | 0xFFFE000000000000;
                  }
                  goto LABEL_775;
                }
                return result;
              }
              v386 = (int16x8_t *)(v128 + 2 * v123);
LABEL_649:
              if ((unint64_t)v386 < v353)
              {
                v352 = (int16x8_t *)(v353 - 16);
                v385 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v353 - 16), v384);
                v384.i16[0] = vmaxvq_u16((uint16x8_t)v385);
                if (v384.i32[0])
                  goto LABEL_653;
              }
              return 0xFFFE0000FFFFFFFFLL;
            }
            goto LABEL_666;
          }
          return 0;
        }
      }
      v116 = 10;
      goto LABEL_85;
    case '+':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v389 = *(_DWORD *)(v9 + 80);
        if ((v389 & 0x27) != 0 && (v389 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v37, v38, v39, v40, v41, v42);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v401 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v37, v38, v39, v40, v41, v42);
        if (!v402)
          return 0xFFFE0000FFFFFFFFLL;
        v44 = v401;
        if (!v401)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v44 = *(_QWORD *)(v10 + 24);
        if (!v44)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v45 = 10;
      }
      else
      {
        v45 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v46 = *((_QWORD *)a2 + 7);
LABEL_28:
          v53 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v46, v44, 0, v39, v40, v41, v42, v43);
          if (*(_DWORD *)(v9 + 80))
          {
            v424 = *(_DWORD *)(v9 + 80);
            if ((v424 & 0x27) != 0 && (v424 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v47, v48, v49, v50, v51, v52);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v436[0] = 0;
          v437 = 0;
          v54 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v47, v48, v49, v50, v51, v52);
          if (!v56)
            return 0xFFFE0000FFFFFFFFLL;
          v57 = *(_QWORD *)(v10 + 16);
          if (v57)
          {
            v58 = *(_QWORD *)(v10 + 16);
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022 || (v58 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                v58 = (v57 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            }
          }
          else
          {
            v58 = 0;
          }
          v59 = v45 >> 49;
          if (!(v45 >> 49))
          {
            v61 = 0;
            v60 = 0;
            goto LABEL_202;
          }
          if (v45 >= 0xFFFE000000000000)
          {
            if (v45 >= 0x10000)
              LOBYTE(v59) = 0;
            else
              LOBYTE(v59) = v45;
            v60 = v45 & 0xFF00;
            LODWORD(v59) = v59;
            v61 = (v45 < 0x10000) << 16;
LABEL_202:
            if ((v61 & 0x10000) == 0)
              return 0xFFFE0000FFFFFFFFLL;
            if ((*(_BYTE *)(v10 + 40) & 8) != 0
              && (!v57
               || qword_1ECF4C038
               && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
               && !((v57 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
            {
              __break(0xC471u);
              JUMPOUT(0x198A8AC3CLL);
            }
            v271 = v54 >= v44 ? v44 : v54;
            if (v53 >= v271)
              return 0xFFFE0000FFFFFFFFLL;
            v272 = (int16x8_t *)(v58 + 2 * v53);
            v273 = v58 + 2 * v271;
            v274 = v273 - (_QWORD)v272;
            if ((uint64_t)(v273 - (_QWORD)v272) > -2)
            {
              v275 = v60 | v59;
              if (v274 > 0x3E)
              {
                v380 = vdupq_n_s16(v275);
                if ((unint64_t)&v272->u64[1] + 6 >= v273)
                {
                  v382 = (int16x8_t *)(v58 + 2 * v53);
LABEL_606:
                  if ((unint64_t)v382 >= v273)
                    return 0xFFFE0000FFFFFFFFLL;
                  v272 = (int16x8_t *)(v273 - 16);
                  v381 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v273 - 16), v380);
                  v380.i16[0] = vmaxvq_u16((uint16x8_t)v381);
                  if (!v380.i32[0])
                    return 0xFFFE0000FFFFFFFFLL;
                }
                else
                {
                  while (1)
                  {
                    v381 = (int8x16_t)vceqq_s16(*v272, v380);
                    LOWORD(v55) = vmaxvq_u16((uint16x8_t)v381);
                    if (v55)
                      break;
                    v382 = v272 + 1;
                    v383 = &v272[1].i8[14];
                    ++v272;
                    if ((unint64_t)v383 >= v273)
                      goto LABEL_606;
                  }
                }
                v272 = (int16x8_t *)((char *)v272
                                   + 2
                                   * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v381)));
              }
              else
              {
                result = 0xFFFE0000FFFFFFFFLL;
                while (v272->u16[0] != v275)
                {
                  v272 = (int16x8_t *)((char *)v272 + 2);
                  v274 -= 2;
                  if (!v274)
                    return result;
                }
              }
              if (v272 == (int16x8_t *)v273)
                v421 = 0;
              else
                v421 = v272;
              result = 0xFFFE0000FFFFFFFFLL;
              if (v272 == (int16x8_t *)v273)
                return result;
              v422 = (uint64_t)v421->i64 - v58;
              goto LABEL_659;
            }
            goto LABEL_666;
          }
          *(_QWORD *)&v269 = v45 - 0x2000000000000;
          LODWORD(v59) = (int)COERCE_DOUBLE(v45 - 0x2000000000000);
          if ((double)v59 != COERCE_DOUBLE(v45 - 0x2000000000000))
          {
            LODWORD(v59) = 0;
            v270 = 0;
LABEL_200:
            v61 = 0;
LABEL_201:
            v60 = v270 & 0xFF00;
            goto LABEL_202;
          }
          if (v269 >= 0.0)
          {
            v373 = v269;
            if (v269 >= 0x10000)
              LOBYTE(v59) = 0;
            else
              LOBYTE(v59) = v269;
            v270 = v373 & 0xFF00;
            LODWORD(v59) = v59;
            if (HIWORD(v373))
              goto LABEL_200;
          }
          else
          {
            v270 = v59 & 0xFF00;
            v346 = v59 >= 0x10000;
            if (v59 >= 0x10000)
              LOBYTE(v59) = 0;
            LODWORD(v59) = v59;
            if (v346)
              goto LABEL_200;
          }
          v61 = 0x10000;
          goto LABEL_201;
        }
      }
      v46 = 10;
      goto LABEL_28;
    case ',':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v395 = *(_DWORD *)(v9 + 80);
        if ((v395 & 0x27) != 0 && (v395 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v177, v178, v179, v180, v181, v182);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v413 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v177, v178, v179, v180, v181, v182);
        if (!v414)
          return 0xFFFE0000FFFFFFFFLL;
        v184 = v413;
        if (!v413)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v184 = *(_QWORD *)(v10 + 24);
        if (!v184)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v185 = 10;
      }
      else
      {
        v185 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v186 = *((_QWORD *)a2 + 7);
          goto LABEL_136;
        }
      }
      v186 = 10;
LABEL_136:
      v193 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v186, v184, 0, v179, v180, v181, v182, v183);
      if (*(_DWORD *)(v9 + 80))
      {
        v430 = *(_DWORD *)(v9 + 80);
        if ((v430 & 0x27) != 0 && (v430 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v187, v188, v189, v190, v191, v192);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v436[0] = 0;
      v437 = 0;
      v194 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v187, v188, v189, v190, v191, v192);
      if (!v195)
        return 0xFFFE0000FFFFFFFFLL;
      v196 = *(_QWORD *)(v10 + 16);
      if (v196)
      {
        v197 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v197 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v197 = (v196 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v197 = 0;
      }
      if (!(v185 >> 49))
        return 0xFFFE0000FFFFFFFFLL;
      if (v185 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v311 = v185 - 0x2000000000000;
        v312 = (int)COERCE_DOUBLE(v185 - 0x2000000000000);
        if ((double)(int)v312 == COERCE_DOUBLE(v185 - 0x2000000000000))
        {
          v315 = v311 & ~((int)v311 >> 31);
          v314 = (2 * (v311 & 0x80000000)) ^ 0x100000000;
          v313 = (v312 | 0x100000000uLL) >> 8;
          if (v311 < 0.0)
            v314 = 0x100000000;
          else
            LODWORD(v313) = v311 >> 8;
          if (v311 < 0.0)
            LOBYTE(v315) = (int)COERCE_DOUBLE(v185 - 0x2000000000000);
        }
        else
        {
          LODWORD(v313) = 0;
          v314 = 0;
          LOBYTE(v315) = 0;
        }
        if ((v314 & 0x100000000) == 0)
          return 0xFFFE0000FFFFFFFFLL;
        v198 = v314 & 0xFFFFFF00 | ((_DWORD)v313 << 8) | (v315 | v314);
      }
      else
      {
        v198 = v185;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v196
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v196 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        goto LABEL_666;
      }
      if (v194 >= v184)
        v356 = v184;
      else
        v356 = v194;
      if (v193 >= v356)
        return 0xFFFE0000FFFFFFFFLL;
      v357 = (int32x4_t *)(v197 + 4 * v193);
      v358 = v197 + 4 * v356;
      v359 = v358 - (_QWORD)v357;
      if ((uint64_t)(v358 - (_QWORD)v357) <= -4)
        goto LABEL_666;
      if (v359 <= 0x7C)
      {
        result = 0xFFFE0000FFFFFFFFLL;
        while (v357->i32[0] != v198)
        {
          v357 = (int32x4_t *)((char *)v357 + 4);
          v359 -= 4;
          if (!v359)
            return result;
        }
      }
      else
      {
        v360 = vdupq_n_s32(v198);
        if ((unint64_t)&v357->u64[1] + 4 >= v358)
        {
LABEL_507:
          v362 = v357;
LABEL_508:
          if ((unint64_t)v362 >= v358)
            return 0xFFFE0000FFFFFFFFLL;
          v357 = (int32x4_t *)(v358 - 16);
          v361 = (uint32x4_t)vceqq_s32(*(int32x4_t *)(v358 - 16), v360);
          if (!vmaxvq_u32(v361))
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          while (1)
          {
            v361 = (uint32x4_t)vceqq_s32(*v357, v360);
            if (vmaxvq_u32(v361))
              break;
            v362 = v357 + 1;
            v363 = &v357[1].i8[12];
            ++v357;
            if ((unint64_t)v363 >= v358)
              goto LABEL_508;
          }
        }
LABEL_510:
        v357 = (int32x4_t *)((char *)v357
                           + 4
                           * vminvq_u32((uint32x4_t)vornq_s8((int8x16_t)xmmword_199123270, (int8x16_t)v361)));
      }
LABEL_511:
      if (v357 == (int32x4_t *)v358)
        v378 = 0;
      else
        v378 = v357;
      result = 0xFFFE0000FFFFFFFFLL;
      if (v357 != (int32x4_t *)v358)
      {
        v379 = (uint64_t)v378->i64 - v197;
        if ((int32x4_t *)((char *)v378 - v197) != (int32x4_t *)-4)
        {
          v283 = v379 >> 2;
          if (!((unint64_t)v379 >> 34))
          {
            v345 = (unint64_t)v379 >> 2;
            if ((v345 & 0x80000000) != 0)
            {
LABEL_662:
              v372 = (double)v345;
              return *(_QWORD *)&v372 + 0x2000000000000;
            }
            return v283 | 0xFFFE000000000000;
          }
LABEL_775:
          v372 = (double)v283;
          return *(_QWORD *)&v372 + 0x2000000000000;
        }
      }
      return result;
    case '-':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v396 = *(_DWORD *)(v9 + 80);
        if ((v396 & 0x27) != 0 && (v396 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v199, v200, v201, v202, v203, v204);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v415 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v199, v200, v201, v202, v203, v204);
        if (!v416)
          return 0xFFFE0000FFFFFFFFLL;
        v206 = v415;
        if (!v415)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v206 = *(_QWORD *)(v10 + 24);
        if (!v206)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v207 = 10;
      }
      else
      {
        v207 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v208 = *((_QWORD *)a2 + 7);
          goto LABEL_151;
        }
      }
      v208 = 10;
LABEL_151:
      v215 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v208, v206, 0, v201, v202, v203, v204, v205);
      if (*(_DWORD *)(v9 + 80))
      {
        v431 = *(_DWORD *)(v9 + 80);
        if ((v431 & 0x27) != 0 && (v431 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v209, v210, v211, v212, v213, v214);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v436[0] = 0;
      v437 = 0;
      v216 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v209, v210, v211, v212, v213, v214);
      if (!v217)
        return 0xFFFE0000FFFFFFFFLL;
      v218 = *(_QWORD *)(v10 + 16);
      if (v218)
      {
        v197 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v197 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v197 = (v218 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v197 = 0;
      }
      if (!(v207 >> 49))
        return 0xFFFE0000FFFFFFFFLL;
      if (v207 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v316 = v207 - 0x2000000000000;
        LODWORD(v222) = COERCE_DOUBLE(v207 - 0x2000000000000);
        if ((double)v222 == COERCE_DOUBLE(v207 - 0x2000000000000))
        {
          if (v316 >= 0.0)
          {
            LODWORD(v317) = v222 >> 8;
            v223 = 0x100000000;
          }
          else
          {
            v222 = ((int)v316 & 0xFFFFFF00 | ((int)v316 & ~((int)v316 >> 31)) | ((((unint64_t)((int)v316 & 0x80000000) >> 31) & 1) << 32)) ^ 0x100000000;
            v317 = v222 >> 8;
            v223 = v222 & 0x100000000;
          }
        }
        else
        {
          LODWORD(v317) = 0;
          v223 = 0;
          LOBYTE(v222) = 0;
        }
        v221 = (_DWORD)v317 << 8;
        LOBYTE(v222) = v223 | v222 | v221;
      }
      else
      {
        v219 = v207 >> 31;
        v220 = v207 & 0xFFFFFF00 | v207 & ~((int)v207 >> 31);
        v221 = v220 & 0xFFFFFF00;
        v222 = (v220 & 0xFFFFFFFEFFFFFFFFLL | ((v219 & 1) << 32)) ^ 0x100000000;
        v223 = v222 & 0x100000000;
      }
      if ((v223 & 0x100000000) == 0)
        return 0xFFFE0000FFFFFFFFLL;
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v218
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v218 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A8ADE4);
      }
      v374 = v216 >= v206 ? v206 : v216;
      if (v215 >= v374)
        return 0xFFFE0000FFFFFFFFLL;
      v357 = (int32x4_t *)(v197 + 4 * v215);
      v358 = v197 + 4 * v374;
      v375 = v358 - (_QWORD)v357;
      if ((uint64_t)(v358 - (_QWORD)v357) <= -4)
        goto LABEL_666;
      v376 = v221 | v222;
      if (v375 <= 0x7C)
      {
        result = 0xFFFE0000FFFFFFFFLL;
        while (v357->i32[0] != v376)
        {
          v357 = (int32x4_t *)((char *)v357 + 4);
          v375 -= 4;
          if (!v375)
            return result;
        }
        goto LABEL_511;
      }
      v360 = vdupq_n_s32(v376);
      if ((unint64_t)&v357->u64[1] + 4 >= v358)
        goto LABEL_507;
      while (1)
      {
        v361 = (uint32x4_t)vceqq_s32(*v357, v360);
        if (vmaxvq_u32(v361))
          goto LABEL_510;
        v362 = v357 + 1;
        v377 = &v357[1].i8[12];
        ++v357;
        if ((unint64_t)v377 >= v358)
          goto LABEL_508;
      }
    case '.':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v394 = *(_DWORD *)(v9 + 80);
        if ((v394 & 0x27) != 0 && (v394 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v154, v155, v156, v157, v158, v159);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v411 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v154, v155, v156, v157, v158, v159);
        if (!v412)
          return 0xFFFE0000FFFFFFFFLL;
        v161 = v411;
        if (!v411)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v161 = *(_QWORD *)(v10 + 24);
        if (!v161)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v162 = 10;
      }
      else
      {
        v162 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v163 = *((_QWORD *)a2 + 7);
LABEL_121:
          v170 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v163, v161, 0, v156, v157, v158, v159, v160);
          if (!*(_DWORD *)(v9 + 80))
            goto LABEL_122;
          v429 = *(_DWORD *)(v9 + 80);
          if ((v429 & 0x27) != 0 && (v429 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v164, v165, v166, v167, v168, v169);
          if (!*(_QWORD *)(v9 + 16))
          {
LABEL_122:
            v436[0] = 0;
            v437 = 0;
            v171 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v164, v165, v166, v167, v168, v169);
            if (!v173)
              return 0xFFFE0000FFFFFFFFLL;
            v174 = v171;
            v175 = *(_QWORD *)(v10 + 16);
            if (v175)
            {
              v176 = *(_QWORD *)(v10 + 16);
              if (qword_1ECF4C038)
              {
                if (byte_1ECF4C022 || (v176 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                  v176 = (v175 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              }
            }
            else
            {
              v176 = 0;
            }
            if (!(v162 >> 49))
              return 0xFFFE0000FFFFFFFFLL;
            if (v162 < 0xFFFE000000000000)
            {
              *(_QWORD *)&v288 = v162 - 0x2000000000000;
              v172 = fabs(COERCE_DOUBLE(v162 - 0x2000000000000));
              if (v172 == INFINITY)
              {
                *(float *)&v172 = v288;
              }
              else
              {
                *(float *)&v172 = v288;
                if (*(float *)&v172 != v288)
                  return 0xFFFE0000FFFFFFFFLL;
                result = 0xFFFE0000FFFFFFFFLL;
                if (v288 < -3.40282347e38 || v288 > 3.40282347e38)
                  return result;
              }
            }
            else
            {
              *(float *)&v172 = (float)(int)v162;
            }
            if ((*(_BYTE *)(v10 + 40) & 8) == 0
              || v175
              && (!qword_1ECF4C038
               || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
               || (v175 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
            {
              if (v174 >= v161)
                v174 = v161;
              v289 = v174 - v170;
              if (v174 > v170)
              {
                v290 = v176 + 4 * v170;
                v291 = (v290 >> 2) & 3;
                v292 = 32 - v291;
                if (v289 >= 32 - v291)
                  v293 = 32 - v291;
                else
                  v293 = v289;
                if (v293)
                {
                  v294 = 4 * v170;
                  v295 = v293;
                  while (*(float *)(v176 + v294) != *(float *)&v172)
                  {
                    v294 += 4;
                    if (!--v295)
                      goto LABEL_258;
                  }
                }
                else
                {
LABEL_258:
                  if (v289 <= v292)
                    return 0xFFFE0000FFFFFFFFLL;
                  v296 = (float32x4_t *)(v290 + 4 * v293);
                  v297 = v289 - v293;
                  v298 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v172, 0);
                  for (i = *v296; ; i = v301)
                  {
                    v300 = (uint16x4_t)vmovn_s32(vceqq_f32(i, v298));
                    if (v300)
                      break;
                    if (v297 < 5)
                      return 0xFFFE0000FFFFFFFFLL;
                    v297 -= 4;
                    v301 = v296[1];
                    ++v296;
                  }
                  v367 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v300), 0x1FuLL));
                  v368 = vminvq_u32((uint32x4_t)vornq_s8(vandq_s8(v367, (int8x16_t)xmmword_199123270), v367));
                  if (v297 <= v368)
                    return 0xFFFE0000FFFFFFFFLL;
                  v294 = (uint64_t)v296->i64 + 4 * v368 - v176;
                }
                if (v294 != -4)
                {
                  v366 = v294 >> 2;
                  if ((unint64_t)v294 >> 34)
                  {
LABEL_780:
                    v372 = (double)(unint64_t)v366;
                  }
                  else
                  {
                    v283 = (unint64_t)v294 >> 2;
                    if ((v283 & 0x80000000) == 0)
                      return v366 | 0xFFFE000000000000;
LABEL_483:
                    v372 = (double)v283;
                  }
                  return *(_QWORD *)&v372 + 0x2000000000000;
                }
              }
              return 0xFFFE0000FFFFFFFFLL;
            }
LABEL_667:
            __break(0xC471u);
            JUMPOUT(0x198A8AD44);
          }
          return 0;
        }
      }
      v163 = 10;
      goto LABEL_121;
    case '/':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v397 = *(_DWORD *)(v9 + 80);
        if ((v397 & 0x27) != 0 && (v397 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v224, v225, v226, v227, v228, v229);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v417 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v224, v225, v226, v227, v228, v229);
        if (!v418)
          return 0xFFFE0000FFFFFFFFLL;
        v231 = v417;
        if (!v417)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v231 = *(_QWORD *)(v10 + 24);
        if (!v231)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v232 = 10;
      }
      else
      {
        v232 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v233 = *((_QWORD *)a2 + 7);
          goto LABEL_166;
        }
      }
      v233 = 10;
LABEL_166:
      v240 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v233, v231, 0, v226, v227, v228, v229, v230);
      if (*(_DWORD *)(v9 + 80))
      {
        v432 = *(_DWORD *)(v9 + 80);
        if ((v432 & 0x27) != 0 && (v432 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v234, v235, v236, v237, v238, v239);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v436[0] = 0;
      v437 = 0;
      v241 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v234, v235, v236, v237, v238, v239);
      if (!v242)
        return 0xFFFE0000FFFFFFFFLL;
      v243 = v241;
      v244 = *(_QWORD *)(v10 + 16);
      if (v244)
      {
        v245 = *(_QWORD *)(v10 + 16);
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022 || (v245 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
            v245 = (v244 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      else
      {
        v245 = 0;
      }
      if (!(v232 >> 49))
        return 0xFFFE0000FFFFFFFFLL;
      if (v232 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v246 = v232 - 0x2000000000000;
        if (fabs(COERCE_DOUBLE(v232 - 0x2000000000000)) != INFINITY)
        {
          result = 0xFFFE0000FFFFFFFFLL;
          if (v246 < -1.79769313e308 || v246 > 1.79769313e308)
            return result;
        }
      }
      else
      {
        v246 = (double)(int)v232;
      }
      if ((*(_BYTE *)(v10 + 40) & 8) != 0
        && (!v244
         || qword_1ECF4C038
         && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
         && !((v244 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
      {
        __break(0xC471u);
        JUMPOUT(0x198A8AD04);
      }
      if (v243 >= v231)
        v243 = v231;
      v318 = v243 - v240;
      if (v243 <= v240)
        return 0xFFFE0000FFFFFFFFLL;
      v319 = v245 + 8 * v240;
      v320 = (uint64_t)(v319 << 60) >> 63;
      v321 = v320 + 32;
      if (v318 >= v320 + 32)
        v322 = v320 + 32;
      else
        v322 = v318;
      if (!v322)
        goto LABEL_311;
      v323 = 8 * v240;
      v324 = v322;
      while (*(double *)(v245 + v323) != v246)
      {
        v323 += 8;
        if (!--v324)
        {
LABEL_311:
          if (v318 <= v321)
            return 0xFFFE0000FFFFFFFFLL;
          v325 = (float64x2_t *)(v319 + 8 * v322);
          v326 = v318 - v322;
          v327 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v246, 0);
          for (j = *v325; ; j = v330)
          {
            v329 = (int8x8_t)vmovn_s64(vceqq_f64(j, v327));
            if (v329)
              break;
            if (v326 < 3)
              return 0xFFFE0000FFFFFFFFLL;
            v326 -= 2;
            v330 = v325[1];
            ++v325;
          }
          v364 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v329);
          v365 = vpmin_u32(v364, v364).u32[0];
          if (v326 <= v365)
            return 0xFFFE0000FFFFFFFFLL;
          v323 = (uint64_t)&v325->f64[v365] - v245;
          break;
        }
      }
      if (v323 == -8)
        return 0xFFFE0000FFFFFFFFLL;
      v366 = v323 >> 3;
      if ((unint64_t)v323 >> 35)
        goto LABEL_780;
      v283 = (unint64_t)v323 >> 3;
      if ((v283 & 0x80000000) == 0)
        return v366 | 0xFFFE000000000000;
      goto LABEL_483;
    case '0':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v390 = *(_DWORD *)(v9 + 80);
        if ((v390 & 0x27) != 0 && (v390 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v62, v63, v64, v65, v66, v67);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v403 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v62, v63, v64, v65, v66, v67);
        if (!v404)
          return 0xFFFE0000FFFFFFFFLL;
        v69 = v403;
        if (!v403)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v69 = *(_QWORD *)(v10 + 24);
        if (!v69)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v70 = 10;
      }
      else
      {
        v70 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v71 = *((_QWORD *)a2 + 7);
LABEL_46:
          v78 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v71, v69, 0, v64, v65, v66, v67, v68);
          if (*(_DWORD *)(v9 + 80))
          {
            v425 = *(_DWORD *)(v9 + 80);
            if ((v425 & 0x27) != 0 && (v425 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v72, v73, v74, v75, v76, v77);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v436[0] = 0;
          v437 = 0;
          v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v72, v73, v74, v75, v76, v77);
          if (!v80)
            return 0xFFFE0000FFFFFFFFLL;
          v81 = *(_QWORD *)(v10 + 16);
          if (v81)
          {
            v82 = *(_QWORD *)(v10 + 16);
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022 || (v82 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                v82 = (v81 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            }
          }
          else
          {
            v82 = 0;
          }
          if ((v70 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v70 + 5) != 3)
            return 0xFFFE0000FFFFFFFFLL;
          if (*(_DWORD *)(v70 + 8))
          {
            v83 = *(_QWORD *)(v70 + 24);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v83 = (v83 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v84 = *(_QWORD *)v83;
            v85 = *(_BYTE *)(v70 + 16) ? -v84 : v84;
          }
          else
          {
            v85 = 0;
          }
          if ((*(_BYTE *)(v10 + 40) & 8) != 0
            && (!v81
             || qword_1ECF4C038
             && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
             && !((v81 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
          {
            __break(0xC471u);
            JUMPOUT(0x198A8AD64);
          }
          v331 = v79 >= v69 ? v69 : v79;
          if (v78 >= v331)
            return 0xFFFE0000FFFFFFFFLL;
          v332 = (int64x2_t *)(v82 + 8 * v78);
          v333 = v82 + 8 * v331;
          v334 = v333 - (_QWORD)v332;
          if ((uint64_t)(v333 - (_QWORD)v332) > -8)
          {
            if (v334 > 0xF8)
            {
              v335 = vdupq_n_s64(v85);
              if ((unint64_t)&v332->u64[1] < v333)
              {
                while (1)
                {
                  v336 = (int8x8_t)vmovn_s64(vceqq_s64(*v332, v335));
                  if (v336)
                    break;
                  v337 = v332 + 1;
                  v338 = &v332[1].i8[8];
                  ++v332;
                  if ((unint64_t)v338 >= v333)
                    goto LABEL_351;
                }
LABEL_353:
                v342 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v336);
                v332 = (int64x2_t *)((char *)v332 + 8 * vpmin_u32(v342, v342).u8[0]);
                goto LABEL_354;
              }
              goto LABEL_675;
            }
            result = 0xFFFE0000FFFFFFFFLL;
            while (v85 != v332->i64[0])
            {
              v332 = (int64x2_t *)((char *)v332 + 8);
              v334 -= 8;
              if (!v334)
                return result;
            }
            goto LABEL_354;
          }
          goto LABEL_666;
        }
      }
      v71 = 10;
      goto LABEL_46;
    case '1':
      JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v398 = *(_DWORD *)(v9 + 80);
        if ((v398 & 0x27) != 0 && (v398 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v247, v248, v249, v250, v251, v252);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        v436[0] = 0;
        v437 = 0;
        v419 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v247, v248, v249, v250, v251, v252);
        if (!v420)
          return 0xFFFE0000FFFFFFFFLL;
        v254 = v419;
        if (!v419)
          return 0xFFFE0000FFFFFFFFLL;
      }
      else
      {
        v254 = *(_QWORD *)(v10 + 24);
        if (!v254)
          return 0xFFFE0000FFFFFFFFLL;
      }
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v255 = 10;
      }
      else
      {
        v255 = *((_QWORD *)a2 + 6);
        if (*((_DWORD *)a2 + 8) != 2)
        {
          v256 = *((_QWORD *)a2 + 7);
LABEL_181:
          v263 = JSC::argumentClampedIndexFromStartOrEnd(this, (JSC::JSObject *)v256, v254, 0, v249, v250, v251, v252, v253);
          if (*(_DWORD *)(v9 + 80))
          {
            v433 = *(_DWORD *)(v9 + 80);
            if ((v433 & 0x27) != 0 && (v433 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v257, v258, v259, v260, v261, v262);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v436[0] = 0;
          v437 = 0;
          v264 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v436, v257, v258, v259, v260, v261, v262);
          if (!v265)
            return 0xFFFE0000FFFFFFFFLL;
          v266 = *(_QWORD *)(v10 + 16);
          if (v266)
          {
            v82 = *(_QWORD *)(v10 + 16);
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022 || (v82 = *(_QWORD *)(v10 + 16), !disablePrimitiveGigacageRequested))
                v82 = (v266 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            }
          }
          else
          {
            v82 = 0;
          }
          if ((v255 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v255 + 5) != 3)
            return 0xFFFE0000FFFFFFFFLL;
          if (*(_DWORD *)(v255 + 8))
          {
            v267 = *(_QWORD *)(v255 + 24);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v267 = (v267 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v268 = *(_QWORD *)v267;
            if (*(_BYTE *)(v255 + 16))
              v268 = -(uint64_t)v268;
          }
          else
          {
            v268 = 0;
          }
          if ((*(_BYTE *)(v10 + 40) & 8) != 0
            && (!v266
             || qword_1ECF4C038
             && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
             && !((v266 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
          {
            __break(0xC471u);
            JUMPOUT(0x198A8AD84);
          }
          v339 = v264 >= v254 ? v254 : v264;
          if (v263 >= v339)
            return 0xFFFE0000FFFFFFFFLL;
          v332 = (int64x2_t *)(v82 + 8 * v263);
          v333 = v82 + 8 * v339;
          v340 = v333 - (_QWORD)v332;
          if ((uint64_t)(v333 - (_QWORD)v332) > -8)
          {
            if (v340 > 0xF8)
            {
              v335 = vdupq_n_s64(v268);
              if ((unint64_t)&v332->u64[1] < v333)
              {
                while (1)
                {
                  v336 = (int8x8_t)vmovn_s64(vceqq_s64(*v332, v335));
                  if (v336)
                    goto LABEL_353;
                  v337 = v332 + 1;
                  v341 = &v332[1].i8[8];
                  ++v332;
                  if ((unint64_t)v341 >= v333)
                    goto LABEL_351;
                }
              }
LABEL_675:
              v337 = v332;
LABEL_351:
              if ((unint64_t)v337 >= v333)
                return 0xFFFE0000FFFFFFFFLL;
              v332 = (int64x2_t *)(v333 - 16);
              v336 = (int8x8_t)vmovn_s64(vceqq_s64(*(int64x2_t *)(v333 - 16), v335));
              if (!*(_QWORD *)&v336)
                return 0xFFFE0000FFFFFFFFLL;
              goto LABEL_353;
            }
            result = 0xFFFE0000FFFFFFFFLL;
            while (v268 != v332->i64[0])
            {
              v332 = (int64x2_t *)((char *)v332 + 8);
              v340 -= 8;
              if (!v340)
                return result;
            }
LABEL_354:
            if (v332 == (int64x2_t *)v333)
              v343 = 0;
            else
              v343 = v332;
            result = 0xFFFE0000FFFFFFFFLL;
            if (v332 != (int64x2_t *)v333)
            {
              v344 = (uint64_t)v343->i64 - v82;
              if ((int64x2_t *)((char *)v343 - v82) != (int64x2_t *)-8)
              {
                v283 = v344 >> 3;
                if (!((unint64_t)v344 >> 35))
                {
                  v345 = (unint64_t)v344 >> 3;
                  if ((v345 & 0x80000000) != 0)
                    goto LABEL_662;
                  return v283 | 0xFFFE000000000000;
                }
                goto LABEL_775;
              }
            }
            return result;
          }
LABEL_666:
          __break(1u);
          goto LABEL_667;
        }
      }
      v256 = 10;
      goto LABEL_181;
    default:
      v34 = "Receiver should be a typed array view";
      v35 = 38;
      return JSC::throwTypeError((unint64_t)this, &v435, (uint64_t)v34, v35);
  }
}

uint64_t JSC::typedArrayViewProtoFuncJoin(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  uint64_t result;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  char v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  char v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  char v176;
  unint64_t v177;
  char v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  char v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  JSC::VM *v218;
  unsigned __int8 *v219;
  uint64_t *v220;
  JSC::JSGlobalObject **v221;
  unint64_t *v222;
  uint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  JSC::JSGlobalObject *v227;

  v8 = *((_QWORD *)this + 7);
  v218 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) <= 0x16u)
  {
    v20 = "Receiver should be a typed array view but was not an object";
    v21 = 60;
    return JSC::throwTypeError((unint64_t)this, &v218, (uint64_t)v20, v21);
  }
  else
  {
    v10 = (unint64_t)a2;
    switch(*(_BYTE *)(v9 + 5))
    {
      case '\'':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (!*(_DWORD *)(v8 + 80))
          goto LABEL_5;
        LODWORD(v64) = *(_DWORD *)(v8 + 80);
        if ((v64 & 0x27) == 0)
          goto LABEL_349;
        goto LABEL_481;
      case '(':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v153 = *(_DWORD *)(v8 + 80);
          if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v22, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v165 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v22, v12, v13, v14, v15, v16);
          if (v166)
            v23 = v165;
          else
            v23 = 0;
        }
        else
        {
          v23 = *(_QWORD *)(v9 + 24);
        }
        v224 = v23;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v54 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v191 = *(_DWORD *)(v226 + 80);
          if ((v191 & 0x27) != 0 && (v191 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v22, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v54 + 16))
            return 0;
        }
        v55 = *(int **)(v10 + 8);
        if ((v55 & 1) == 0)
        {
          if (v55)
          {
LABEL_114:
            v9 = *((_QWORD *)v55 + 1);
            v11 = v55[1] | ((unint64_t)((v55[4] >> 2) & 1) << 32);
            goto LABEL_323;
          }
          goto LABEL_273;
        }
        if ((v55 & 2) == 0)
        {
          v55 = *JSC::JSRopeString::resolveRope(v10, v227, v22, v12, v17, v13, v14, v15, v16);
          if (v55)
            goto LABEL_114;
LABEL_273:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_323;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v107 = *(_QWORD *)(v64 + 8);
        if (v107)
        {
          v9 = *(_QWORD *)(v107 + 8);
          v108 = *(unsigned int *)(v107 + 4) | ((unint64_t)((*(_DWORD *)(v107 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v108 = 0x100000000;
        }
        v109 = *(_QWORD *)(v10 + 24);
        v110 = v109 >> 16;
        if (v108 <= (v109 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v111 = *(_DWORD *)(v10 + 16);
          if (v108 - (v109 >> 16) > v111 || (v111 = v108 - (v109 >> 16), (_DWORD)v110))
          {
            v112 = (v109 >> 16);
            v11 = v111;
            v113 = v108 - (unint64_t)v110;
            if ((v108 & 0x100000000) != 0)
            {
              if (v113 < v111)
                goto LABEL_480;
              v9 += v112;
              v11 = v111 | 0x100000000;
            }
            else
            {
              if (v113 < v111)
                goto LABEL_480;
              v9 += 2 * v112;
            }
          }
          else
          {
            v11 = v108;
          }
        }
LABEL_323:
        v148 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
        v208 = v11;
        v209 = *(_DWORD *)(v226 + 80);
        if ((v209 & 0x27) != 0 && (v209 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v208;
        if (!*(_QWORD *)(v148 + 16))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
        return 0;
      case ')':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v154 = *(_DWORD *)(v8 + 80);
          if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v24, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v167 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v24, v12, v13, v14, v15, v16);
          if (v168)
            v25 = v167;
          else
            v25 = 0;
        }
        else
        {
          v25 = *(_QWORD *)(v9 + 24);
        }
        v224 = v25;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v42 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v185 = *(_DWORD *)(v226 + 80);
          if ((v185 & 0x27) != 0 && (v185 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v24, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v42 + 16))
            return 0;
        }
        v43 = *(int **)(v10 + 8);
        if ((v43 & 1) == 0)
        {
          if (v43)
          {
LABEL_78:
            v9 = *((_QWORD *)v43 + 1);
            v11 = v43[1] | ((unint64_t)((v43[4] >> 2) & 1) << 32);
            goto LABEL_305;
          }
          goto LABEL_261;
        }
        if ((v43 & 2) == 0)
        {
          v43 = *JSC::JSRopeString::resolveRope(v10, v227, v24, v12, v17, v13, v14, v15, v16);
          if (v43)
            goto LABEL_78;
LABEL_261:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_305;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v65 = *(_QWORD *)(v64 + 8);
        if (v65)
        {
          v9 = *(_QWORD *)(v65 + 8);
          v66 = *(unsigned int *)(v65 + 4) | ((unint64_t)((*(_DWORD *)(v65 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v66 = 0x100000000;
        }
        v67 = *(_QWORD *)(v10 + 24);
        v68 = v67 >> 16;
        if (v66 <= (v67 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v69 = *(_DWORD *)(v10 + 16);
          if (v66 - (v67 >> 16) > v69 || (v69 = v66 - (v67 >> 16), (_DWORD)v68))
          {
            v70 = (v67 >> 16);
            v11 = v69;
            v71 = v66 - (unint64_t)v68;
            if ((v66 & 0x100000000) != 0)
            {
              if (v71 < v69)
                goto LABEL_480;
              v9 += v70;
              v11 = v69 | 0x100000000;
            }
            else
            {
              if (v71 < v69)
                goto LABEL_480;
              v9 += 2 * v70;
            }
          }
          else
          {
            v11 = v66;
          }
        }
LABEL_305:
        v142 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
        v196 = v11;
        v197 = *(_DWORD *)(v226 + 80);
        if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v196;
        if (*(_QWORD *)(v142 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
      case '*':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v155 = *(_DWORD *)(v8 + 80);
          if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v26, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v169 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v26, v12, v13, v14, v15, v16);
          if (v170)
            v27 = v169;
          else
            v27 = 0;
        }
        else
        {
          v27 = *(_QWORD *)(v9 + 24);
        }
        v224 = v27;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v44 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v186 = *(_DWORD *)(v226 + 80);
          if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v26, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v44 + 16))
            return 0;
        }
        v45 = *(int **)(v10 + 8);
        if ((v45 & 1) == 0)
        {
          if (v45)
          {
LABEL_84:
            v9 = *((_QWORD *)v45 + 1);
            v11 = v45[1] | ((unint64_t)((v45[4] >> 2) & 1) << 32);
            goto LABEL_308;
          }
          goto LABEL_263;
        }
        if ((v45 & 2) == 0)
        {
          v45 = *JSC::JSRopeString::resolveRope(v10, v227, v26, v12, v17, v13, v14, v15, v16);
          if (v45)
            goto LABEL_84;
LABEL_263:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_308;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v72 = *(_QWORD *)(v64 + 8);
        if (v72)
        {
          v9 = *(_QWORD *)(v72 + 8);
          v73 = *(unsigned int *)(v72 + 4) | ((unint64_t)((*(_DWORD *)(v72 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v73 = 0x100000000;
        }
        v74 = *(_QWORD *)(v10 + 24);
        v75 = v74 >> 16;
        if (v73 <= (v74 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v76 = *(_DWORD *)(v10 + 16);
          if (v73 - (v74 >> 16) > v76 || (v76 = v73 - (v74 >> 16), (_DWORD)v75))
          {
            v77 = (v74 >> 16);
            v11 = v76;
            v78 = v73 - (unint64_t)v75;
            if ((v73 & 0x100000000) != 0)
            {
              if (v78 < v76)
                goto LABEL_480;
              v9 += v77;
              v11 = v76 | 0x100000000;
            }
            else
            {
              if (v78 < v76)
                goto LABEL_480;
              v9 += 2 * v77;
            }
          }
          else
          {
            v11 = v73;
          }
        }
LABEL_308:
        v143 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
        v198 = v11;
        v199 = *(_DWORD *)(v226 + 80);
        if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v198;
        if (*(_QWORD *)(v143 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
      case '+':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v156 = *(_DWORD *)(v8 + 80);
          if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v28, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v171 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v28, v12, v13, v14, v15, v16);
          if (v172)
            v29 = v171;
          else
            v29 = 0;
        }
        else
        {
          v29 = *(_QWORD *)(v9 + 24);
        }
        v224 = v29;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v46 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v187 = *(_DWORD *)(v226 + 80);
          if ((v187 & 0x27) != 0 && (v187 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v28, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v46 + 16))
            return 0;
        }
        v47 = *(int **)(v10 + 8);
        if ((v47 & 1) == 0)
        {
          if (v47)
          {
LABEL_90:
            v9 = *((_QWORD *)v47 + 1);
            v11 = v47[1] | ((unint64_t)((v47[4] >> 2) & 1) << 32);
            goto LABEL_311;
          }
          goto LABEL_265;
        }
        if ((v47 & 2) == 0)
        {
          v47 = *JSC::JSRopeString::resolveRope(v10, v227, v28, v12, v17, v13, v14, v15, v16);
          if (v47)
            goto LABEL_90;
LABEL_265:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_311;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v79 = *(_QWORD *)(v64 + 8);
        if (v79)
        {
          v9 = *(_QWORD *)(v79 + 8);
          v80 = *(unsigned int *)(v79 + 4) | ((unint64_t)((*(_DWORD *)(v79 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v80 = 0x100000000;
        }
        v81 = *(_QWORD *)(v10 + 24);
        v82 = v81 >> 16;
        if (v80 <= (v81 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v83 = *(_DWORD *)(v10 + 16);
          if (v80 - (v81 >> 16) > v83 || (v83 = v80 - (v81 >> 16), (_DWORD)v82))
          {
            v84 = (v81 >> 16);
            v11 = v83;
            v85 = v80 - (unint64_t)v82;
            if ((v80 & 0x100000000) != 0)
            {
              if (v85 < v83)
                goto LABEL_480;
              v9 += v84;
              v11 = v83 | 0x100000000;
            }
            else
            {
              if (v85 < v83)
                goto LABEL_480;
              v9 += 2 * v84;
            }
          }
          else
          {
            v11 = v80;
          }
        }
LABEL_311:
        v144 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
        v200 = v11;
        v201 = *(_DWORD *)(v226 + 80);
        if ((v201 & 0x27) != 0 && (v201 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v200;
        if (*(_QWORD *)(v144 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
      case ',':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v157 = *(_DWORD *)(v8 + 80);
          if ((v157 & 0x27) != 0 && (v157 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v30, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v173 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v30, v12, v13, v14, v15, v16);
          if (v174)
            v31 = v173;
          else
            v31 = 0;
        }
        else
        {
          v31 = *(_QWORD *)(v9 + 24);
        }
        v224 = v31;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v56 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v192 = *(_DWORD *)(v226 + 80);
          if ((v192 & 0x27) != 0 && (v192 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v30, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v56 + 16))
            return 0;
        }
        v57 = *(int **)(v10 + 8);
        if ((v57 & 1) == 0)
        {
          if (v57)
          {
LABEL_120:
            v9 = *((_QWORD *)v57 + 1);
            v11 = v57[1] | ((unint64_t)((v57[4] >> 2) & 1) << 32);
            goto LABEL_326;
          }
          goto LABEL_275;
        }
        if ((v57 & 2) == 0)
        {
          v57 = *JSC::JSRopeString::resolveRope(v10, v227, v30, v12, v17, v13, v14, v15, v16);
          if (v57)
            goto LABEL_120;
LABEL_275:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_326;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v114 = *(_QWORD *)(v64 + 8);
        if (v114)
        {
          v9 = *(_QWORD *)(v114 + 8);
          v115 = *(unsigned int *)(v114 + 4) | ((unint64_t)((*(_DWORD *)(v114 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v115 = 0x100000000;
        }
        v116 = *(_QWORD *)(v10 + 24);
        v117 = v116 >> 16;
        if (v115 <= (v116 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v118 = *(_DWORD *)(v10 + 16);
          if (v115 - (v116 >> 16) > v118 || (v118 = v115 - (v116 >> 16), (_DWORD)v117))
          {
            v119 = (v116 >> 16);
            v11 = v118;
            v120 = v115 - (unint64_t)v117;
            if ((v115 & 0x100000000) != 0)
            {
              if (v120 < v118)
                goto LABEL_480;
              v9 += v119;
              v11 = v118 | 0x100000000;
            }
            else
            {
              if (v120 < v118)
                goto LABEL_480;
              v9 += 2 * v119;
            }
          }
          else
          {
            v11 = v115;
          }
        }
LABEL_326:
        v149 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
        v210 = v11;
        v211 = *(_DWORD *)(v226 + 80);
        if ((v211 & 0x27) != 0 && (v211 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v210;
        if (*(_QWORD *)(v149 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
      case '-':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v158 = *(_DWORD *)(v8 + 80);
          if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v32, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v175 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v32, v12, v13, v14, v15, v16);
          if (v176)
            v33 = v175;
          else
            v33 = 0;
        }
        else
        {
          v33 = *(_QWORD *)(v9 + 24);
        }
        v224 = v33;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v58 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v193 = *(_DWORD *)(v226 + 80);
          if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v32, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v58 + 16))
            return 0;
        }
        v59 = *(int **)(v10 + 8);
        if ((v59 & 1) == 0)
        {
          if (v59)
          {
LABEL_126:
            v9 = *((_QWORD *)v59 + 1);
            v11 = v59[1] | ((unint64_t)((v59[4] >> 2) & 1) << 32);
            goto LABEL_329;
          }
          goto LABEL_277;
        }
        if ((v59 & 2) == 0)
        {
          v59 = *JSC::JSRopeString::resolveRope(v10, v227, v32, v12, v17, v13, v14, v15, v16);
          if (v59)
            goto LABEL_126;
LABEL_277:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_329;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v121 = *(_QWORD *)(v64 + 8);
        if (v121)
        {
          v9 = *(_QWORD *)(v121 + 8);
          v122 = *(unsigned int *)(v121 + 4) | ((unint64_t)((*(_DWORD *)(v121 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v122 = 0x100000000;
        }
        v123 = *(_QWORD *)(v10 + 24);
        v124 = v123 >> 16;
        if (v122 <= (v123 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v125 = *(_DWORD *)(v10 + 16);
          if (v122 - (v123 >> 16) > v125 || (v125 = v122 - (v123 >> 16), (_DWORD)v124))
          {
            v126 = (v123 >> 16);
            v11 = v125;
            v127 = v122 - (unint64_t)v124;
            if ((v122 & 0x100000000) != 0)
            {
              if (v127 < v125)
                goto LABEL_480;
              v9 += v126;
              v11 = v125 | 0x100000000;
            }
            else
            {
              if (v127 < v125)
                goto LABEL_480;
              v9 += 2 * v126;
            }
          }
          else
          {
            v11 = v122;
          }
        }
LABEL_329:
        v150 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
        v212 = v11;
        v213 = *(_DWORD *)(v226 + 80);
        if ((v213 & 0x27) != 0 && (v213 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v212;
        if (*(_QWORD *)(v150 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
      case '.':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v159 = *(_DWORD *)(v8 + 80);
          if ((v159 & 0x27) != 0 && (v159 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v34, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v177 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v34, v12, v13, v14, v15, v16);
          if (v178)
            v35 = v177;
          else
            v35 = 0;
        }
        else
        {
          v35 = *(_QWORD *)(v9 + 24);
        }
        v224 = v35;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v48 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v188 = *(_DWORD *)(v226 + 80);
          if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v34, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v48 + 16))
            return 0;
        }
        v49 = *(int **)(v10 + 8);
        if ((v49 & 1) == 0)
        {
          if (v49)
          {
LABEL_96:
            v9 = *((_QWORD *)v49 + 1);
            v11 = v49[1] | ((unint64_t)((v49[4] >> 2) & 1) << 32);
            goto LABEL_314;
          }
          goto LABEL_267;
        }
        if ((v49 & 2) == 0)
        {
          v49 = *JSC::JSRopeString::resolveRope(v10, v227, v34, v12, v17, v13, v14, v15, v16);
          if (v49)
            goto LABEL_96;
LABEL_267:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_314;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v86 = *(_QWORD *)(v64 + 8);
        if (v86)
        {
          v9 = *(_QWORD *)(v86 + 8);
          v87 = *(unsigned int *)(v86 + 4) | ((unint64_t)((*(_DWORD *)(v86 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v87 = 0x100000000;
        }
        v88 = *(_QWORD *)(v10 + 24);
        v89 = v88 >> 16;
        if (v87 <= (v88 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v90 = *(_DWORD *)(v10 + 16);
          if (v87 - (v88 >> 16) > v90 || (v90 = v87 - (v88 >> 16), (_DWORD)v89))
          {
            v91 = (v88 >> 16);
            v11 = v90;
            v92 = v87 - (unint64_t)v89;
            if ((v87 & 0x100000000) != 0)
            {
              if (v92 < v90)
                goto LABEL_480;
              v9 += v91;
              v11 = v90 | 0x100000000;
            }
            else
            {
              if (v92 < v90)
                goto LABEL_480;
              v9 += 2 * v91;
            }
          }
          else
          {
            v11 = v87;
          }
        }
LABEL_314:
        v145 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
        v202 = v11;
        v203 = *(_DWORD *)(v226 + 80);
        if ((v203 & 0x27) != 0 && (v203 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v202;
        if (*(_QWORD *)(v145 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
      case '/':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v160 = *(_DWORD *)(v8 + 80);
          if ((v160 & 0x27) != 0 && (v160 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v36, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v179 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v36, v12, v13, v14, v15, v16);
          if (v180)
            v37 = v179;
          else
            v37 = 0;
        }
        else
        {
          v37 = *(_QWORD *)(v9 + 24);
        }
        v224 = v37;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v60 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v194 = *(_DWORD *)(v226 + 80);
          if ((v194 & 0x27) != 0 && (v194 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v36, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v60 + 16))
            return 0;
        }
        v61 = *(int **)(v10 + 8);
        if ((v61 & 1) == 0)
        {
          if (v61)
          {
LABEL_132:
            v9 = *((_QWORD *)v61 + 1);
            v11 = v61[1] | ((unint64_t)((v61[4] >> 2) & 1) << 32);
            goto LABEL_332;
          }
          goto LABEL_279;
        }
        if ((v61 & 2) == 0)
        {
          v61 = *JSC::JSRopeString::resolveRope(v10, v227, v36, v12, v17, v13, v14, v15, v16);
          if (v61)
            goto LABEL_132;
LABEL_279:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_332;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v128 = *(_QWORD *)(v64 + 8);
        if (v128)
        {
          v9 = *(_QWORD *)(v128 + 8);
          v129 = *(unsigned int *)(v128 + 4) | ((unint64_t)((*(_DWORD *)(v128 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v129 = 0x100000000;
        }
        v130 = *(_QWORD *)(v10 + 24);
        v131 = v130 >> 16;
        if (v129 <= (v130 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v132 = *(_DWORD *)(v10 + 16);
          if (v129 - (v130 >> 16) > v132 || (v132 = v129 - (v130 >> 16), (_DWORD)v131))
          {
            v133 = (v130 >> 16);
            v11 = v132;
            v134 = v129 - (unint64_t)v131;
            if ((v129 & 0x100000000) != 0)
            {
              if (v134 < v132)
                goto LABEL_480;
              v9 += v133;
              v11 = v132 | 0x100000000;
            }
            else
            {
              if (v134 < v132)
                goto LABEL_480;
              v9 += 2 * v133;
            }
          }
          else
          {
            v11 = v129;
          }
        }
LABEL_332:
        v151 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
        v214 = v11;
        v215 = *(_DWORD *)(v226 + 80);
        if ((v215 & 0x27) != 0 && (v215 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v214;
        if (*(_QWORD *)(v151 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
      case '0':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v161 = *(_DWORD *)(v8 + 80);
          if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v38, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v181 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v38, v12, v13, v14, v15, v16);
          if (v182)
            v39 = v181;
          else
            v39 = 0;
        }
        else
        {
          v39 = *(_QWORD *)(v9 + 24);
        }
        v224 = v39;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v50 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v189 = *(_DWORD *)(v226 + 80);
          if ((v189 & 0x27) != 0 && (v189 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v38, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v50 + 16))
            return 0;
        }
        v51 = *(int **)(v10 + 8);
        if ((v51 & 1) == 0)
        {
          if (v51)
          {
LABEL_102:
            v9 = *((_QWORD *)v51 + 1);
            v11 = v51[1] | ((unint64_t)((v51[4] >> 2) & 1) << 32);
            goto LABEL_317;
          }
          goto LABEL_269;
        }
        if ((v51 & 2) == 0)
        {
          v51 = *JSC::JSRopeString::resolveRope(v10, v227, v38, v12, v17, v13, v14, v15, v16);
          if (v51)
            goto LABEL_102;
LABEL_269:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_317;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v93 = *(_QWORD *)(v64 + 8);
        if (v93)
        {
          v9 = *(_QWORD *)(v93 + 8);
          v94 = *(unsigned int *)(v93 + 4) | ((unint64_t)((*(_DWORD *)(v93 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v94 = 0x100000000;
        }
        v95 = *(_QWORD *)(v10 + 24);
        v96 = v95 >> 16;
        if (v94 <= (v95 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v97 = *(_DWORD *)(v10 + 16);
          if (v94 - (v95 >> 16) > v97 || (v97 = v94 - (v95 >> 16), (_DWORD)v96))
          {
            v98 = (v95 >> 16);
            v11 = v97;
            v99 = v94 - (unint64_t)v96;
            if ((v94 & 0x100000000) != 0)
            {
              if (v99 < v97)
                goto LABEL_480;
              v9 += v98;
              v11 = v97 | 0x100000000;
            }
            else
            {
              if (v99 < v97)
                goto LABEL_480;
              v9 += 2 * v98;
            }
          }
          else
          {
            v11 = v94;
          }
        }
LABEL_317:
        v146 = v226;
        if (!*(_DWORD *)(v226 + 80))
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
        v204 = v11;
        v205 = *(_DWORD *)(v226 + 80);
        if ((v205 & 0x27) != 0 && (v205 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v204;
        if (*(_QWORD *)(v146 + 16))
          return 0;
        else
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
      case '1':
        v226 = v8;
        v227 = this;
        v225 = v9;
        JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v9, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v162 = *(_DWORD *)(v8 + 80);
          if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v40, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v224 = 0;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          LOBYTE(v220) = 0;
          LOBYTE(v221) = 0;
          v183 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v40, v12, v13, v14, v15, v16);
          if (v184)
            v41 = v183;
          else
            v41 = 0;
        }
        else
        {
          v41 = *(_QWORD *)(v9 + 24);
        }
        v224 = v41;
        v220 = &v225;
        v221 = &v227;
        v222 = &v224;
        v223 = &v226;
        if (*(_DWORD *)(v10 + 32) == 1)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        v10 = *(_QWORD *)(v10 + 48);
        v219 = (unsigned __int8 *)v10;
        if (v10 == 10)
          return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
        if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
          v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
        v62 = v226;
        if (*(_DWORD *)(v226 + 80))
        {
          v195 = *(_DWORD *)(v226 + 80);
          if ((v195 & 0x27) != 0 && (v195 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v40, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v62 + 16))
            return 0;
        }
        v63 = *(int **)(v10 + 8);
        if ((v63 & 1) == 0)
        {
          if (v63)
          {
LABEL_138:
            v9 = *((_QWORD *)v63 + 1);
            v11 = v63[1] | ((unint64_t)((v63[4] >> 2) & 1) << 32);
            goto LABEL_335;
          }
          goto LABEL_281;
        }
        if ((v63 & 2) == 0)
        {
          v63 = *JSC::JSRopeString::resolveRope(v10, v227, v40, v12, v17, v13, v14, v15, v16);
          if (v63)
            goto LABEL_138;
LABEL_281:
          v9 = 0;
          v11 = 0x100000000;
          goto LABEL_335;
        }
        v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
        v135 = *(_QWORD *)(v64 + 8);
        if (v135)
        {
          v9 = *(_QWORD *)(v135 + 8);
          v136 = *(unsigned int *)(v135 + 4) | ((unint64_t)((*(_DWORD *)(v135 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v136 = 0x100000000;
        }
        v137 = *(_QWORD *)(v10 + 24);
        v138 = v137 >> 16;
        if (v136 <= (v137 >> 16))
        {
          v11 = 0x100000000;
          v9 = (uint64_t)"";
        }
        else
        {
          v139 = *(_DWORD *)(v10 + 16);
          if (v136 - (v137 >> 16) > v139 || (v139 = v136 - (v137 >> 16), (_DWORD)v138))
          {
            v140 = (v137 >> 16);
            v11 = v139;
            v141 = v136 - (unint64_t)v138;
            if ((v136 & 0x100000000) != 0)
            {
              if (v141 < v139)
              {
                while (1)
                {
LABEL_480:
                  __break(1u);
LABEL_481:
                  if ((v64 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v11, v12, v13, v14, v15, v16);
LABEL_349:
                  if (*(_QWORD *)(v8 + 16))
                    return 0;
LABEL_5:
                  v224 = 0;
                  if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
                  {
                    LOBYTE(v220) = 0;
                    LOBYTE(v221) = 0;
                    v163 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&v220, v11, v12, v13, v14, v15, v16);
                    if (v164)
                      v18 = v163;
                    else
                      v18 = 0;
                  }
                  else
                  {
                    v18 = *(_QWORD *)(v9 + 24);
                  }
                  v224 = v18;
                  v220 = &v225;
                  v221 = &v227;
                  v222 = &v224;
                  v223 = &v226;
                  if (*(_DWORD *)(v10 + 32) == 1)
                    return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
                  v10 = *(_QWORD *)(v10 + 48);
                  v219 = (unsigned __int8 *)v10;
                  if (v10 == 10)
                    return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, (uint64_t)",", 0x100000001, v12, v13, v14, v15, v16);
                  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
                    v10 = (unint64_t)JSC::JSValue::toStringSlowCase(&v219, (uint64_t)v227, (JSC::Structure *)1, v12, v13, v14, v15, v16);
                  v52 = v226;
                  if (*(_DWORD *)(v226 + 80))
                  {
                    v190 = *(_DWORD *)(v226 + 80);
                    if ((v190 & 0x27) != 0 && (v190 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
                    if (*(_QWORD *)(v52 + 16))
                      return 0;
                  }
                  v53 = *(int **)(v10 + 8);
                  if ((v53 & 1) == 0)
                    break;
                  if ((v53 & 2) == 0)
                  {
                    v53 = *JSC::JSRopeString::resolveRope(v10, v227, v11, v12, v17, v13, v14, v15, v16);
                    if (!v53)
                      goto LABEL_271;
                    goto LABEL_108;
                  }
                  v64 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
                  v100 = *(_QWORD *)(v64 + 8);
                  if (v100)
                  {
                    v9 = *(_QWORD *)(v100 + 8);
                    v101 = *(unsigned int *)(v100 + 4) | ((unint64_t)((*(_DWORD *)(v100 + 16) >> 2) & 1) << 32);
                  }
                  else
                  {
                    v9 = 0;
                    v101 = 0x100000000;
                  }
                  v102 = *(_QWORD *)(v10 + 24);
                  v103 = v102 >> 16;
                  if (v101 <= (v102 >> 16))
                  {
                    v11 = 0x100000000;
                    v9 = (uint64_t)"";
                    goto LABEL_320;
                  }
                  v104 = *(_DWORD *)(v10 + 16);
                  if (v101 - (v102 >> 16) <= v104)
                  {
                    v104 = v101 - (v102 >> 16);
                    if (!(_DWORD)v103)
                    {
                      v11 = v101;
                      goto LABEL_320;
                    }
                  }
                  v105 = (v102 >> 16);
                  v11 = v104;
                  v106 = v101 - (unint64_t)v103;
                  if ((v101 & 0x100000000) != 0)
                  {
                    if (v106 >= v104)
                    {
                      v9 += v105;
                      v11 = v104 | 0x100000000;
                      goto LABEL_320;
                    }
                  }
                  else if (v106 >= v104)
                  {
                    v9 += 2 * v105;
                    goto LABEL_320;
                  }
                }
                if (!v53)
                {
LABEL_271:
                  v9 = 0;
                  v11 = 0x100000000;
                  goto LABEL_320;
                }
LABEL_108:
                v9 = *((_QWORD *)v53 + 1);
                v11 = v53[1] | ((unint64_t)((v53[4] >> 2) & 1) << 32);
LABEL_320:
                v147 = v226;
                if (!*(_DWORD *)(v226 + 80))
                  return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
                v206 = v11;
                v207 = *(_DWORD *)(v226 + 80);
                if ((v207 & 0x27) != 0 && (v207 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
                v11 = v206;
                if (*(_QWORD *)(v147 + 16))
                  return 0;
                else
                  return JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(&v220, v9, v11, v12, v13, v14, v15, v16);
              }
              v9 += v140;
              v11 = v139 | 0x100000000;
            }
            else
            {
              if (v141 < v139)
                goto LABEL_480;
              v9 += 2 * v140;
            }
          }
          else
          {
            v11 = v136;
          }
        }
LABEL_335:
        v152 = v226;
        if (!*(_DWORD *)(v226 + 80))
          goto LABEL_336;
        v216 = v11;
        v217 = *(_DWORD *)(v226 + 80);
        if ((v217 & 0x27) != 0 && (v217 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, v11, v12, v13, v14, v15, v16);
        v11 = v216;
        if (*(_QWORD *)(v152 + 16))
          result = 0;
        else
LABEL_336:
          result = JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()((uint64_t)&v220, v9, v11, v12, v13, v14, v15, v16);
        break;
      default:
        v20 = "Receiver should be a typed array view";
        v21 = 38;
        return JSC::throwTypeError((unint64_t)this, &v218, (uint64_t)v20, v21);
    }
  }
  return result;
}

JSC::VM *JSC::typedArrayViewProtoFuncKeys(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::createTypedArrayIteratorObject(this, *((_QWORD *)a2 + 5), 0, a4, a5, a6, a7, a8);
}

uint64_t JSC::typedArrayViewProtoFuncLastIndexOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  JSC::JSObject *v22;
  double v23;
  double v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  JSC::JSObject *v42;
  double v43;
  double v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  JSC::JSObject *v61;
  double v62;
  double v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int8x16_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  JSC::JSObject *v78;
  double v79;
  double v80;
  unint64_t v81;
  char v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x16_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  JSC::JSObject *v95;
  double v96;
  double v97;
  unint64_t v98;
  char v99;
  unsigned __int8 v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  JSC::JSObject *v113;
  double v114;
  double v115;
  unint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int8x16_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  JSC::JSObject *v129;
  double v130;
  double v131;
  unint64_t v132;
  char v133;
  float v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int8x16_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  JSC::JSObject *v145;
  double v146;
  double v147;
  unint64_t v148;
  char v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int8x16_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  JSC::JSObject *v161;
  double v162;
  double v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int8x16_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  JSC::JSObject *v181;
  double v182;
  double v183;
  unint64_t v184;
  char v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int8x16_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  JSC::JSObject *v197;
  double v198;
  double v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  double v204;
  __int16 v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  unsigned int v212;
  double v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  int v220;
  double v221;
  double v222;
  int v223;
  unsigned int v224;
  char v225;
  double v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  float v236;
  double v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unsigned int v241;
  double v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  double v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  BOOL v256;
  unsigned int v257;
  unint64_t v258;
  double v259;
  unint64_t v260;
  double v261;
  unint64_t v262;
  double v263;
  unint64_t v264;
  double v265;
  unint64_t v266;
  double v267;
  unint64_t v268;
  double v269;
  unint64_t v270;
  double v271;
  unint64_t v272;
  double v273;
  unint64_t v274;
  double v275;
  unint64_t v276;
  double v277;
  unint64_t v278;
  double v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  char v321;
  char v322;
  char v323;
  char v324;
  char v325;
  char v326;
  char v327;
  char v328;
  char v329;
  char v330;
  char v331;
  double v332;
  unint64_t v333;
  int v334;
  unint64_t v335;
  int v336;
  unint64_t v337;
  int v338;
  unint64_t v339;
  int v340;
  unint64_t v341;
  int v342;
  unint64_t v343;
  int v344;
  unint64_t v345;
  int v346;
  unint64_t v347;
  int v348;
  unint64_t v349;
  int v350;
  unint64_t v351;
  int v352;
  unint64_t v353;
  int v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  JSC::VM *v366;
  JSC::JSObject *v367;
  char v368;

  v9 = *((_QWORD *)this + 7);
  v366 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v10 + 5) > 0x16u)
  {
    switch(*(_BYTE *)(v10 + 5))
    {
      case '\'':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v310 = *(_DWORD *)(v9 + 80);
          if ((v310 & 0x27) != 0 && (v310 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v19 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v12, v13, v14, v15, v16, v17);
          if (!v321)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v19 = *(_QWORD *)(v10 + 24);
        }
        if (!v19)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v21 = v19 - 1;
          v20 = 10;
        }
        else
        {
          v20 = *((_QWORD *)a2 + 6);
          v21 = v19 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v22 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v22;
            if ((unint64_t)v22 < 0xFFFE000000000000)
            {
              v258 = (unint64_t)v22 - 0x2000000000000;
              if (v258 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v299 = v19;
                JSC::JSValue::toNumberSlowCase(&v367, this, v12, v13, v14, v15, v16, v17, v18);
                v19 = v299;
              }
              else
              {
                v259 = *(double *)&v258;
              }
              v23 = trunc(v259 + 0.0);
            }
            else
            {
              v23 = (double)(int)v22;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v355 = v23;
              v333 = v19;
              v334 = *(_DWORD *)(v9 + 80);
              if ((v334 & 0x27) != 0 && (v334 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
              v19 = v333;
              v23 = v355;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v24 = (double)v19;
            if (v23 < 0.0)
            {
              v23 = v23 + v24;
              if (v23 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v23 < v24)
              v21 = (unint64_t)v23;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v25 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v12, v13, v14, v15, v16, v17);
        if (!v26 || !v25)
          return 0xFFFE0000FFFFFFFFLL;
        v27 = v25 - 1;
        if (v21 < v25 - 1)
          v27 = v21;
        if (!(v20 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v20 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v221 = v20 - 0x2000000000000;
          v28 = (int)COERCE_DOUBLE(v20 - 0x2000000000000);
          if ((double)v28 != COERCE_DOUBLE(v20 - 0x2000000000000))
            return 0xFFFE0000FFFFFFFFLL;
          if (v221 >= 0.0)
          {
            v28 = v221;
            if (v221 > 0x7F)
              return 0xFFFE0000FFFFFFFFLL;
          }
          else if (v28 != (char)v28)
          {
            return 0xFFFE0000FFFFFFFFLL;
          }
          v28 = v28;
        }
        else
        {
          if ((_DWORD)v20 != (char)v20)
            return 0xFFFE0000FFFFFFFFLL;
          v28 = v20;
        }
        v280 = *(_QWORD *)(v10 + 16);
        if (!v280
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v281 = v280 & 0x3FFFFFFFFLL,
              v280 = (v280 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v281 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8EAC8);
        }
        if (*(unsigned __int8 *)(v280 + v27) == v28)
          goto LABEL_457;
        v282 = v280 - 1;
        do
        {
          if (!v27)
            return 0xFFFE0000FFFFFFFFLL;
          v219 = v27 - 1;
          v283 = *(unsigned __int8 *)(v282 + v27--);
        }
        while (v283 != v28);
        goto LABEL_458;
      case '(':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v315 = *(_DWORD *)(v9 + 80);
          if ((v315 & 0x27) != 0 && (v315 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v103, v104, v105, v106, v107, v108);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v110 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v103, v104, v105, v106, v107, v108);
          if (!v326)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v110 = *(_QWORD *)(v10 + 24);
        }
        if (!v110)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v112 = v110 - 1;
          v111 = 10;
        }
        else
        {
          v111 = *((_QWORD *)a2 + 6);
          v112 = v110 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v113 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v113;
            if ((unint64_t)v113 < 0xFFFE000000000000)
            {
              v268 = (unint64_t)v113 - 0x2000000000000;
              if (v268 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v304 = v110;
                JSC::JSValue::toNumberSlowCase(&v367, this, v103, v104, v105, v106, v107, v108, v109);
                v110 = v304;
              }
              else
              {
                v269 = *(double *)&v268;
              }
              v114 = trunc(v269 + 0.0);
            }
            else
            {
              v114 = (double)(int)v113;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v360 = v114;
              v343 = v110;
              v344 = *(_DWORD *)(v9 + 80);
              if ((v344 & 0x27) != 0 && (v344 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v103, v104, v105, v106, v107, v108);
              v110 = v343;
              v114 = v360;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v115 = (double)v110;
            if (v114 < 0.0)
            {
              v114 = v114 + v115;
              if (v114 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v114 < v115)
              v112 = (unint64_t)v114;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v116 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v103, v104, v105, v106, v107, v108);
        if (!v117 || !v116)
          return 0xFFFE0000FFFFFFFFLL;
        v47 = v116 - 1;
        if (v112 < v116 - 1)
          v47 = v112;
        if (!(v111 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v111 <= 0xFFFDFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v226 = v111 - 0x2000000000000;
          v118 = (int)COERCE_DOUBLE(v111 - 0x2000000000000);
          if ((double)v118 != COERCE_DOUBLE(v111 - 0x2000000000000))
            return 0xFFFE0000FFFFFFFFLL;
          if (v226 >= 0.0)
            v118 = v226;
          if (v118 >= 0x100)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          if (v111 >= 0x100)
            LOBYTE(v118) = 0;
          else
            LOBYTE(v118) = v111;
          if (v111 > 0xFF)
            return 0xFFFE0000FFFFFFFFLL;
        }
        v227 = *(_QWORD *)(v10 + 16);
        if (!v227
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v228 = v227 & 0x3FFFFFFFFLL,
              v227 = (v227 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v228 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8EAA8);
        }
        v229 = v118;
        if (*(unsigned __int8 *)(v227 + v47) == v118)
          goto LABEL_474;
        v230 = v227 - 1;
        do
        {
          if (!v47)
            return 0xFFFE0000FFFFFFFFLL;
          v210 = v47 - 1;
          v231 = *(unsigned __int8 *)(v230 + v47--);
        }
        while (v231 != v229);
        goto LABEL_475;
      case ')':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v313 = *(_DWORD *)(v9 + 80);
          if ((v313 & 0x27) != 0 && (v313 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v68, v69, v70, v71, v72, v73);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v75 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v68, v69, v70, v71, v72, v73);
          if (!v324)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v75 = *(_QWORD *)(v10 + 24);
        }
        if (!v75)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v77 = v75 - 1;
          v76 = 10;
        }
        else
        {
          v76 = *((_QWORD *)a2 + 6);
          v77 = v75 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v78 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v78;
            if ((unint64_t)v78 < 0xFFFE000000000000)
            {
              v264 = (unint64_t)v78 - 0x2000000000000;
              if (v264 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v302 = v75;
                JSC::JSValue::toNumberSlowCase(&v367, this, v68, v69, v70, v71, v72, v73, v74);
                v75 = v302;
              }
              else
              {
                v265 = *(double *)&v264;
              }
              v79 = trunc(v265 + 0.0);
            }
            else
            {
              v79 = (double)(int)v78;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v358 = v79;
              v339 = v75;
              v340 = *(_DWORD *)(v9 + 80);
              if ((v340 & 0x27) != 0 && (v340 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v68, v69, v70, v71, v72, v73);
              v75 = v339;
              v79 = v358;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v80 = (double)v75;
            if (v79 < 0.0)
            {
              v79 = v79 + v80;
              if (v79 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v79 < v80)
              v77 = (unint64_t)v79;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v81 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v68, v69, v70, v71, v72, v73);
        if (!v82 || !v81)
          return 0xFFFE0000FFFFFFFFLL;
        v27 = v81 - 1;
        if (v77 < v81 - 1)
          v27 = v77;
        if (!(v76 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v76 < 0xFFFE000000000000)
        {
          v212 = (int)COERCE_DOUBLE(v76 - 0x2000000000000);
          v213 = (double)v212;
          v214 = v212 | 0x100;
          v215 = v213 == COERCE_DOUBLE(v76 - 0x2000000000000) ? v214 : 0;
          v84 = v215;
          v83 = v215 >> 8;
        }
        else
        {
          v83 = v76 < 0x100;
          LOBYTE(v84) = v76 >= 0x100 ? 0 : v76;
          v84 = v84;
        }
        if (!v83)
          return 0xFFFE0000FFFFFFFFLL;
        v216 = *(_QWORD *)(v10 + 16);
        if (!v216
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v217 = v216 & 0x3FFFFFFFFLL,
              v216 = (v216 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v217 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8EA48);
        }
        if (*(unsigned __int8 *)(v216 + v27) == v84)
          goto LABEL_457;
        v218 = v216 - 1;
        do
        {
          if (!v27)
            return 0xFFFE0000FFFFFFFFLL;
          v219 = v27 - 1;
          v220 = *(unsigned __int8 *)(v218 + v27--);
        }
        while (v220 != v84);
        goto LABEL_458;
      case '*':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v314 = *(_DWORD *)(v9 + 80);
          if ((v314 & 0x27) != 0 && (v314 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v85, v86, v87, v88, v89, v90);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v92 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v85, v86, v87, v88, v89, v90);
          if (!v325)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v92 = *(_QWORD *)(v10 + 24);
        }
        if (!v92)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v94 = v92 - 1;
          v93 = 10;
        }
        else
        {
          v93 = *((_QWORD *)a2 + 6);
          v94 = v92 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v95 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v95;
            if ((unint64_t)v95 < 0xFFFE000000000000)
            {
              v266 = (unint64_t)v95 - 0x2000000000000;
              if (v266 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v303 = v92;
                JSC::JSValue::toNumberSlowCase(&v367, this, v85, v86, v87, v88, v89, v90, v91);
                v92 = v303;
              }
              else
              {
                v267 = *(double *)&v266;
              }
              v96 = trunc(v267 + 0.0);
            }
            else
            {
              v96 = (double)(int)v95;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v359 = v96;
              v341 = v92;
              v342 = *(_DWORD *)(v9 + 80);
              if ((v342 & 0x27) != 0 && (v342 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v85, v86, v87, v88, v89, v90);
              v92 = v341;
              v96 = v359;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v97 = (double)v92;
            if (v96 < 0.0)
            {
              v96 = v96 + v97;
              if (v96 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v96 < v97)
              v94 = (unint64_t)v96;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v98 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v85, v86, v87, v88, v89, v90);
        if (!v99 || !v98)
          return 0xFFFE0000FFFFFFFFLL;
        v47 = v98 - 1;
        if (v94 < v98 - 1)
          v47 = v94;
        if (!(v93 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v93 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v222 = v93 - 0x2000000000000;
          v223 = (int)COERCE_DOUBLE(v93 - 0x2000000000000);
          if ((double)v223 == COERCE_DOUBLE(v93 - 0x2000000000000))
          {
            if (v222 >= 0.0)
            {
              v224 = v222 < 0x8000;
              v225 = v222 >= 0x8000 ? 0 : v222;
              v101 = v222 & 0xFF00;
            }
            else
            {
              v101 = (int)COERCE_DOUBLE(v93 - 0x2000000000000) & 0xFF00;
              v257 = (int)COERCE_DOUBLE(v93 - 0x2000000000000) | 0x10000;
              if (v223 != (__int16)v223)
                v257 = 0;
              v225 = v257;
              v224 = HIWORD(v257);
            }
          }
          else
          {
            v101 = 0;
            v224 = 0;
            v225 = 0;
          }
          v102 = v224 << 16;
          v100 = v225 | v101;
        }
        else
        {
          v100 = v93;
          v101 = v93 & 0xFF00;
          if ((__int16)v93 != (_DWORD)v93)
            v100 = 0;
          v102 = ((__int16)v93 == (_DWORD)v93) << 16;
        }
        if (!v102)
          return 0xFFFE0000FFFFFFFFLL;
        v285 = *(_QWORD *)(v10 + 16);
        if (!v285
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v286 = v285 & 0x3FFFFFFFFLL,
              v285 = (v285 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v286 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8EA68);
        }
        v287 = v101 | v100;
        if (*(unsigned __int16 *)(v285 + 2 * v47) == v287)
          goto LABEL_474;
        v288 = v285 - 2;
        do
        {
          if (!v47)
            return 0xFFFE0000FFFFFFFFLL;
          v210 = v47 - 1;
          v289 = *(unsigned __int16 *)(v288 + 2 * v47--);
        }
        while (v289 != v287);
        goto LABEL_475;
      case '+':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v311 = *(_DWORD *)(v9 + 80);
          if ((v311 & 0x27) != 0 && (v311 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v32, v33, v34, v35, v36, v37);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v32, v33, v34, v35, v36, v37);
          if (!v322)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v39 = *(_QWORD *)(v10 + 24);
        }
        if (!v39)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v41 = v39 - 1;
          v40 = 10;
        }
        else
        {
          v40 = *((_QWORD *)a2 + 6);
          v41 = v39 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v42 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v42;
            if ((unint64_t)v42 < 0xFFFE000000000000)
            {
              v260 = (unint64_t)v42 - 0x2000000000000;
              if (v260 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v300 = v39;
                JSC::JSValue::toNumberSlowCase(&v367, this, v32, v33, v34, v35, v36, v37, v38);
                v39 = v300;
              }
              else
              {
                v261 = *(double *)&v260;
              }
              v43 = trunc(v261 + 0.0);
            }
            else
            {
              v43 = (double)(int)v42;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v356 = v43;
              v335 = v39;
              v336 = *(_DWORD *)(v9 + 80);
              if ((v336 & 0x27) != 0 && (v336 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v32, v33, v34, v35, v36, v37);
              v39 = v335;
              v43 = v356;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v44 = (double)v39;
            if (v43 < 0.0)
            {
              v43 = v43 + v44;
              if (v43 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v43 < v44)
              v41 = (unint64_t)v43;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v32, v33, v34, v35, v36, v37);
        if (!v46 || !v45)
          return 0xFFFE0000FFFFFFFFLL;
        v47 = v45 - 1;
        if (v41 < v45 - 1)
          v47 = v41;
        v48 = v40 >> 49;
        if (!(v40 >> 49))
        {
          v50 = 0;
          v49 = 0;
          goto LABEL_257;
        }
        if (v40 >= 0xFFFE000000000000)
        {
          if (v40 >= 0x10000)
            LOBYTE(v48) = 0;
          else
            LOBYTE(v48) = v40;
          v49 = v40 & 0xFF00;
          LODWORD(v48) = v48;
          v50 = (v40 < 0x10000) << 16;
LABEL_257:
          if ((v50 & 0x10000) == 0)
            return 0xFFFE0000FFFFFFFFLL;
          v206 = *(_QWORD *)(v10 + 16);
          if (!v206
            || qword_1ECF4C038
            && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
            && (v207 = v206 & 0x3FFFFFFFFLL,
                v206 = (v206 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
                (*(_BYTE *)(v10 + 40) & 8) != 0)
            && !(v207 + qword_1ECF4C038))
          {
            __break(0xC471u);
            JUMPOUT(0x198A8E988);
          }
          v208 = v49 | v48;
          if (*(unsigned __int16 *)(v206 + 2 * v47) == v208)
          {
LABEL_474:
            v210 = v47;
          }
          else
          {
            v209 = v206 - 2;
            do
            {
              if (!v47)
                return 0xFFFE0000FFFFFFFFLL;
              v210 = v47 - 1;
              v211 = *(unsigned __int16 *)(v209 + 2 * v47--);
            }
            while (v211 != v208);
          }
LABEL_475:
          if (HIDWORD(v210))
          {
            v332 = (double)v210;
          }
          else
          {
            if ((v210 & 0x80000000) == 0)
              return v210 | 0xFFFE000000000000;
            v332 = (double)v210;
          }
          return *(_QWORD *)&v332 + 0x2000000000000;
        }
        *(_QWORD *)&v204 = v40 - 0x2000000000000;
        LODWORD(v48) = (int)COERCE_DOUBLE(v40 - 0x2000000000000);
        if ((double)v48 != COERCE_DOUBLE(v40 - 0x2000000000000))
        {
          LODWORD(v48) = 0;
          v205 = 0;
LABEL_255:
          v50 = 0;
LABEL_256:
          v49 = v205 & 0xFF00;
          goto LABEL_257;
        }
        if (v204 >= 0.0)
        {
          v284 = v204;
          if (v204 >= 0x10000)
            LOBYTE(v48) = 0;
          else
            LOBYTE(v48) = v204;
          v205 = v284 & 0xFF00;
          LODWORD(v48) = v48;
          if (HIWORD(v284))
            goto LABEL_255;
        }
        else
        {
          v205 = v48 & 0xFF00;
          v256 = v48 >= 0x10000;
          if (v48 >= 0x10000)
            LOBYTE(v48) = 0;
          LODWORD(v48) = v48;
          if (v256)
            goto LABEL_255;
        }
        v50 = 0x10000;
        goto LABEL_256;
      case ',':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v317 = *(_DWORD *)(v9 + 80);
          if ((v317 & 0x27) != 0 && (v317 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v135, v136, v137, v138, v139, v140);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v142 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v135, v136, v137, v138, v139, v140);
          if (!v328)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v142 = *(_QWORD *)(v10 + 24);
        }
        if (!v142)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v144 = v142 - 1;
          v143 = 10;
        }
        else
        {
          v143 = *((_QWORD *)a2 + 6);
          v144 = v142 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v145 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v145;
            if ((unint64_t)v145 < 0xFFFE000000000000)
            {
              v272 = (unint64_t)v145 - 0x2000000000000;
              if (v272 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v306 = v142;
                JSC::JSValue::toNumberSlowCase(&v367, this, v135, v136, v137, v138, v139, v140, v141);
                v142 = v306;
              }
              else
              {
                v273 = *(double *)&v272;
              }
              v146 = trunc(v273 + 0.0);
            }
            else
            {
              v146 = (double)(int)v145;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v362 = v146;
              v347 = v142;
              v348 = *(_DWORD *)(v9 + 80);
              if ((v348 & 0x27) != 0 && (v348 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v135, v136, v137, v138, v139, v140);
              v142 = v347;
              v146 = v362;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v147 = (double)v142;
            if (v146 < 0.0)
            {
              v146 = v146 + v147;
              if (v146 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v146 < v147)
              v144 = (unint64_t)v146;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v148 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v135, v136, v137, v138, v139, v140);
        if (!v149 || !v148)
          return 0xFFFE0000FFFFFFFFLL;
        v27 = v148 - 1;
        if (v144 < v148 - 1)
          v27 = v144;
        if (!(v143 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v143 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v237 = v143 - 0x2000000000000;
          v238 = (int)COERCE_DOUBLE(v143 - 0x2000000000000);
          if ((double)(int)v238 == COERCE_DOUBLE(v143 - 0x2000000000000))
          {
            if (v237 >= 0.0)
            {
              v241 = v237 & ~((int)v237 >> 31);
              LODWORD(v239) = v237 >> 8;
              v240 = (2 * (v237 & 0x80000000)) ^ 0x100000000;
            }
            else
            {
              LOBYTE(v241) = (int)COERCE_DOUBLE(v143 - 0x2000000000000);
              v239 = (v238 | 0x100000000uLL) >> 8;
              v240 = 0x100000000;
            }
          }
          else
          {
            LODWORD(v239) = 0;
            v240 = 0;
            LOBYTE(v241) = 0;
          }
          if ((v240 & 0x100000000) == 0)
            return 0xFFFE0000FFFFFFFFLL;
          v150 = v240 & 0xFFFFFF00 | ((_DWORD)v239 << 8) | (v241 | v240);
        }
        else
        {
          v150 = v143;
        }
        v290 = *(_QWORD *)(v10 + 16);
        if (!v290
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v291 = v290 & 0x3FFFFFFFFLL,
              v290 = (v290 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v291 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8E9C8);
        }
        if (*(_DWORD *)(v290 + 4 * v27) == v150)
          goto LABEL_457;
        v292 = v290 - 4;
        do
        {
          if (!v27)
            return 0xFFFE0000FFFFFFFFLL;
          v219 = v27 - 1;
          v293 = *(_DWORD *)(v292 + 4 * v27--);
        }
        while (v293 != v150);
        goto LABEL_458;
      case '-':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v318 = *(_DWORD *)(v9 + 80);
          if ((v318 & 0x27) != 0 && (v318 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v151, v152, v153, v154, v155, v156);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v158 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v151, v152, v153, v154, v155, v156);
          if (!v329)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v158 = *(_QWORD *)(v10 + 24);
        }
        if (!v158)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v160 = v158 - 1;
          v159 = 10;
        }
        else
        {
          v159 = *((_QWORD *)a2 + 6);
          v160 = v158 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v161 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v161;
            if ((unint64_t)v161 < 0xFFFE000000000000)
            {
              v274 = (unint64_t)v161 - 0x2000000000000;
              if (v274 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v307 = v158;
                JSC::JSValue::toNumberSlowCase(&v367, this, v151, v152, v153, v154, v155, v156, v157);
                v158 = v307;
              }
              else
              {
                v275 = *(double *)&v274;
              }
              v162 = trunc(v275 + 0.0);
            }
            else
            {
              v162 = (double)(int)v161;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v363 = v162;
              v349 = v158;
              v350 = *(_DWORD *)(v9 + 80);
              if ((v350 & 0x27) != 0 && (v350 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v151, v152, v153, v154, v155, v156);
              v158 = v349;
              v162 = v363;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v163 = (double)v158;
            if (v162 < 0.0)
            {
              v162 = v162 + v163;
              if (v162 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v162 < v163)
              v160 = (unint64_t)v162;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v164 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v151, v152, v153, v154, v155, v156);
        if (!v165 || !v164)
          return 0xFFFE0000FFFFFFFFLL;
        v47 = v164 - 1;
        if (v160 < v164 - 1)
          v47 = v160;
        if (!(v159 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v159 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v242 = v159 - 0x2000000000000;
          LODWORD(v169) = COERCE_DOUBLE(v159 - 0x2000000000000);
          if ((double)v169 == COERCE_DOUBLE(v159 - 0x2000000000000))
          {
            if (v242 >= 0.0)
            {
              LODWORD(v243) = v169 >> 8;
              v170 = 0x100000000;
            }
            else
            {
              v169 = ((int)v242 & 0xFFFFFF00 | ((int)v242 & ~((int)v242 >> 31)) | ((((unint64_t)((int)v242 & 0x80000000) >> 31) & 1) << 32)) ^ 0x100000000;
              v243 = v169 >> 8;
              v170 = v169 & 0x100000000;
            }
          }
          else
          {
            LODWORD(v243) = 0;
            v170 = 0;
            LOBYTE(v169) = 0;
          }
          v168 = (_DWORD)v243 << 8;
          LOBYTE(v169) = v170 | v169 | v168;
        }
        else
        {
          v166 = v159 >> 31;
          v167 = v159 & 0xFFFFFF00 | v159 & ~((int)v159 >> 31);
          v168 = v167 & 0xFFFFFF00;
          v169 = (v167 & 0xFFFFFFFEFFFFFFFFLL | ((v166 & 1) << 32)) ^ 0x100000000;
          v170 = v169 & 0x100000000;
        }
        if ((v170 & 0x100000000) == 0)
          return 0xFFFE0000FFFFFFFFLL;
        v294 = *(_QWORD *)(v10 + 16);
        if (!v294
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v295 = v294 & 0x3FFFFFFFFLL,
              v294 = (v294 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v295 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8EA88);
        }
        v296 = v168 | v169;
        if (*(_DWORD *)(v294 + 4 * v47) == v296)
          goto LABEL_474;
        v297 = v294 - 4;
        do
        {
          if (!v47)
            return 0xFFFE0000FFFFFFFFLL;
          v210 = v47 - 1;
          v298 = *(_DWORD *)(v297 + 4 * v47--);
        }
        while (v298 != v296);
        goto LABEL_475;
      case '.':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v316 = *(_DWORD *)(v9 + 80);
          if ((v316 & 0x27) != 0 && (v316 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v119, v120, v121, v122, v123, v124);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v126 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v119, v120, v121, v122, v123, v124);
          if (!v327)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v126 = *(_QWORD *)(v10 + 24);
        }
        if (!v126)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v128 = v126 - 1;
          v127 = 10;
        }
        else
        {
          v127 = *((_QWORD *)a2 + 6);
          v128 = v126 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v129 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v129;
            if ((unint64_t)v129 < 0xFFFE000000000000)
            {
              v270 = (unint64_t)v129 - 0x2000000000000;
              if (v270 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v305 = v126;
                JSC::JSValue::toNumberSlowCase(&v367, this, v119, v120, v121, v122, v123, v124, v125);
                v126 = v305;
              }
              else
              {
                v271 = *(double *)&v270;
              }
              v130 = trunc(v271 + 0.0);
            }
            else
            {
              v130 = (double)(int)v129;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v361 = v130;
              v345 = v126;
              v346 = *(_DWORD *)(v9 + 80);
              if ((v346 & 0x27) != 0 && (v346 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v119, v120, v121, v122, v123, v124);
              v126 = v345;
              v130 = v361;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v131 = (double)v126;
            if (v130 < 0.0)
            {
              v130 = v130 + v131;
              if (v130 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v130 < v131)
              v128 = (unint64_t)v130;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v132 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v119, v120, v121, v122, v123, v124);
        if (!v133 || !v132)
          return 0xFFFE0000FFFFFFFFLL;
        v47 = v132 - 1;
        if (v128 < v132 - 1)
          v47 = v128;
        if (!(v127 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v127 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v232 = v127 - 0x2000000000000;
          if (fabs(COERCE_DOUBLE(v127 - 0x2000000000000)) == INFINITY)
          {
            v134 = v232;
          }
          else
          {
            v134 = v232;
            if (v134 != v232)
              return 0xFFFE0000FFFFFFFFLL;
            result = 0xFFFE0000FFFFFFFFLL;
            if (v232 < -3.40282347e38 || v232 > 3.40282347e38)
              return result;
          }
        }
        else
        {
          v134 = (float)(int)v127;
        }
        v233 = *(_QWORD *)(v10 + 16);
        if (!v233
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v234 = v233 & 0x3FFFFFFFFLL,
              v233 = (v233 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v234 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8E9E8);
        }
        if (*(float *)(v233 + 4 * v47) == v134)
          goto LABEL_474;
        v235 = v233 - 4;
        do
        {
          if (!v47)
            return 0xFFFE0000FFFFFFFFLL;
          v210 = v47 - 1;
          v236 = *(float *)(v235 + 4 * v47--);
        }
        while (v236 != v134);
        goto LABEL_475;
      case '/':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v319 = *(_DWORD *)(v9 + 80);
          if ((v319 & 0x27) != 0 && (v319 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v171, v172, v173, v174, v175, v176);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v178 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v171, v172, v173, v174, v175, v176);
          if (!v330)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v178 = *(_QWORD *)(v10 + 24);
        }
        if (!v178)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v180 = v178 - 1;
          v179 = 10;
        }
        else
        {
          v179 = *((_QWORD *)a2 + 6);
          v180 = v178 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v181 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v181;
            if ((unint64_t)v181 < 0xFFFE000000000000)
            {
              v276 = (unint64_t)v181 - 0x2000000000000;
              if (v276 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v308 = v178;
                JSC::JSValue::toNumberSlowCase(&v367, this, v171, v172, v173, v174, v175, v176, v177);
                v178 = v308;
              }
              else
              {
                v277 = *(double *)&v276;
              }
              v182 = trunc(v277 + 0.0);
            }
            else
            {
              v182 = (double)(int)v181;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v364 = v182;
              v351 = v178;
              v352 = *(_DWORD *)(v9 + 80);
              if ((v352 & 0x27) != 0 && (v352 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v171, v172, v173, v174, v175, v176);
              v178 = v351;
              v182 = v364;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v183 = (double)v178;
            if (v182 < 0.0)
            {
              v182 = v182 + v183;
              if (v182 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v182 < v183)
              v180 = (unint64_t)v182;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v184 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v171, v172, v173, v174, v175, v176);
        if (!v185 || !v184)
          return 0xFFFE0000FFFFFFFFLL;
        v47 = v184 - 1;
        if (v180 < v184 - 1)
          v47 = v180;
        if (!(v179 >> 49))
          return 0xFFFE0000FFFFFFFFLL;
        if (v179 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v186 = v179 - 0x2000000000000;
          if (fabs(COERCE_DOUBLE(v179 - 0x2000000000000)) != INFINITY)
          {
            result = 0xFFFE0000FFFFFFFFLL;
            if (v186 < -1.79769313e308 || v186 > 1.79769313e308)
              return result;
          }
        }
        else
        {
          v186 = (double)(int)v179;
        }
        v244 = *(_QWORD *)(v10 + 16);
        if (!v244
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v245 = v244 & 0x3FFFFFFFFLL,
              v244 = (v244 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v245 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8E9A8);
        }
        if (*(double *)(v244 + 8 * v47) == v186)
          goto LABEL_474;
        v246 = v244 - 8;
        do
        {
          if (!v47)
            return 0xFFFE0000FFFFFFFFLL;
          v210 = v47 - 1;
          v247 = *(double *)(v246 + 8 * v47--);
        }
        while (v247 != v186);
        goto LABEL_475;
      case '0':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v312 = *(_DWORD *)(v9 + 80);
          if ((v312 & 0x27) != 0 && (v312 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v51, v52, v53, v54, v55, v56);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v58 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v51, v52, v53, v54, v55, v56);
          if (!v323)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v58 = *(_QWORD *)(v10 + 24);
        }
        if (!v58)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v60 = v58 - 1;
          v59 = 10;
        }
        else
        {
          v59 = *((_QWORD *)a2 + 6);
          v60 = v58 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v61 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v61;
            if ((unint64_t)v61 < 0xFFFE000000000000)
            {
              v262 = (unint64_t)v61 - 0x2000000000000;
              if (v262 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v301 = v58;
                JSC::JSValue::toNumberSlowCase(&v367, this, v51, v52, v53, v54, v55, v56, v57);
                v58 = v301;
              }
              else
              {
                v263 = *(double *)&v262;
              }
              v62 = trunc(v263 + 0.0);
            }
            else
            {
              v62 = (double)(int)v61;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v357 = v62;
              v337 = v58;
              v338 = *(_DWORD *)(v9 + 80);
              if ((v338 & 0x27) != 0 && (v338 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v51, v52, v53, v54, v55, v56);
              v58 = v337;
              v62 = v357;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v63 = (double)v58;
            if (v62 < 0.0)
            {
              v62 = v62 + v63;
              if (v62 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v62 < v63)
              v60 = (unint64_t)v62;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v64 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v51, v52, v53, v54, v55, v56);
        if (!v65 || !v64)
          return 0xFFFE0000FFFFFFFFLL;
        v27 = v64 - 1;
        if (v60 < v64 - 1)
          v27 = v60;
        if ((v59 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v59 + 5) != 3)
          return 0xFFFE0000FFFFFFFFLL;
        if (*(_DWORD *)(v59 + 8))
        {
          v66 = *(_QWORD *)(v59 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v66 = (v66 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v67 = *(_QWORD *)v66;
          if (*(_BYTE *)(v59 + 16))
            v67 = -v67;
        }
        else
        {
          v67 = 0;
        }
        v248 = *(_QWORD *)(v10 + 16);
        if (!v248
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && (v249 = v248 & 0x3FFFFFFFFLL,
              v248 = (v248 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
              (*(_BYTE *)(v10 + 40) & 8) != 0)
          && !(v249 + qword_1ECF4C038))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8EA08);
        }
        if (*(_QWORD *)(v248 + 8 * v27) == v67)
          goto LABEL_457;
        v250 = v248 - 8;
        do
        {
          if (!v27)
            return 0xFFFE0000FFFFFFFFLL;
          v219 = v27 - 1;
          v251 = *(_QWORD *)(v250 + 8 * v27--);
        }
        while (v251 != v67);
        goto LABEL_458;
      case '1':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v320 = *(_DWORD *)(v9 + 80);
          if ((v320 & 0x27) != 0 && (v320 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v187, v188, v189, v190, v191, v192);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v367) = 0;
          v368 = 0;
          v194 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v187, v188, v189, v190, v191, v192);
          if (!v331)
            return 0xFFFE0000FFFFFFFFLL;
        }
        else
        {
          v194 = *(_QWORD *)(v10 + 24);
        }
        if (!v194)
          return 0xFFFE0000FFFFFFFFLL;
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v196 = v194 - 1;
          v195 = 10;
        }
        else
        {
          v195 = *((_QWORD *)a2 + 6);
          v196 = v194 - 1;
          if (*((_DWORD *)a2 + 8) != 2)
          {
            v197 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v367 = v197;
            if ((unint64_t)v197 < 0xFFFE000000000000)
            {
              v278 = (unint64_t)v197 - 0x2000000000000;
              if (v278 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v309 = v194;
                JSC::JSValue::toNumberSlowCase(&v367, this, v187, v188, v189, v190, v191, v192, v193);
                v194 = v309;
              }
              else
              {
                v279 = *(double *)&v278;
              }
              v198 = trunc(v279 + 0.0);
            }
            else
            {
              v198 = (double)(int)v197;
            }
            if (*(_DWORD *)(v9 + 80))
            {
              v365 = v198;
              v353 = v194;
              v354 = *(_DWORD *)(v9 + 80);
              if ((v354 & 0x27) != 0 && (v354 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v187, v188, v189, v190, v191, v192);
              v194 = v353;
              v198 = v365;
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            v199 = (double)v194;
            if (v198 < 0.0)
            {
              v198 = v198 + v199;
              if (v198 < 0.0)
                return 0xFFFE0000FFFFFFFFLL;
            }
            if (v198 < v199)
              v196 = (unint64_t)v198;
          }
        }
        LOBYTE(v367) = 0;
        v368 = 0;
        v200 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v367, v187, v188, v189, v190, v191, v192);
        if (v201 && v200)
        {
          v27 = v200 - 1;
          if (v196 < v200 - 1)
            v27 = v196;
          if ((v195 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v195 + 5) == 3)
          {
            if (*(_DWORD *)(v195 + 8))
            {
              v202 = *(_QWORD *)(v195 + 24);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v202 = (v202 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v203 = *(_QWORD *)v202;
              if (*(_BYTE *)(v195 + 16))
                v203 = -v203;
            }
            else
            {
              v203 = 0;
            }
            v252 = *(_QWORD *)(v10 + 16);
            if (!v252
              || qword_1ECF4C038
              && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
              && (v253 = v252 & 0x3FFFFFFFFLL,
                  v252 = (v252 & 0x3FFFFFFFFLL) + qword_1ECF4C038,
                  (*(_BYTE *)(v10 + 40) & 8) != 0)
              && !(v253 + qword_1ECF4C038))
            {
              __break(0xC471u);
              JUMPOUT(0x198A8EA28);
            }
            if (*(_QWORD *)(v252 + 8 * v27) == v203)
            {
LABEL_457:
              v219 = v27;
LABEL_458:
              if (HIDWORD(v219))
              {
                v332 = (double)v219;
              }
              else
              {
                if ((v219 & 0x80000000) == 0)
                  return v219 | 0xFFFE000000000000;
                v332 = (double)v219;
              }
              return *(_QWORD *)&v332 + 0x2000000000000;
            }
            v254 = v252 - 8;
            while (v27)
            {
              v219 = v27 - 1;
              v255 = *(_QWORD *)(v254 + 8 * v27--);
              if (v255 == v203)
                goto LABEL_458;
            }
          }
        }
        return 0xFFFE0000FFFFFFFFLL;
      default:
        v29 = "Receiver should be a typed array view";
        v30 = 38;
        return JSC::throwTypeError((unint64_t)this, &v366, (uint64_t)v29, v30);
    }
  }
  v29 = "Receiver should be a typed array view but was not an object";
  v30 = 60;
  return JSC::throwTypeError((unint64_t)this, &v366, (uint64_t)v29, v30);
}

JSC::Exception *JSC::typedArrayViewProtoGetterFuncLength(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  JSC::Exception *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  JSC::Heap *v24;
  unint64_t SlowCase;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  char v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t *, uint64_t);
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  JSC::Heap *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  JSC::VM *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;

  v9 = *(JSC::VM **)(this + 56);
  v66 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    v11 = *(unsigned __int8 *)(v10 + 5);
    if (v11 > 0x16)
    {
      if (v11 != 40)
      {
        switch(*(_BYTE *)(v10 + 5))
        {
          case '\'':
          case ')':
          case '*':
          case '.':
          case '0':
          case '1':
            v12 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_24;
          case '+':
          case ',':
          case '-':
          case '/':
            if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
            {
              LOBYTE(v68) = 0;
              LOBYTE(v69) = 0;
              v12 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v68, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (!v57)
                goto LABEL_29;
            }
            else
            {
              v12 = *(_QWORD *)(v10 + 24);
            }
LABEL_24:
            if (HIDWORD(v12))
              goto LABEL_42;
            if ((v12 & 0x80000000) != 0)
              goto LABEL_26;
            return (JSC::Exception *)(v12 | 0xFFFE000000000000);
          default:
            return (JSC::Exception *)JSC::throwTypeError(this, &v66, (uint64_t)"Receiver should be a typed array view", 38);
        }
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v68) = 0;
        LOBYTE(v69) = 0;
        v12 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v68, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!v50)
        {
LABEL_29:
          v12 = 0;
          return (JSC::Exception *)(v12 | 0xFFFE000000000000);
        }
      }
      else
      {
        v12 = *(_QWORD *)(v10 + 24);
      }
      if (HIDWORD(v12))
      {
LABEL_42:
        v49 = (double)v12;
      }
      else
      {
        if ((v12 & 0x80000000) == 0)
          return (JSC::Exception *)(v12 | 0xFFFE000000000000);
LABEL_26:
        v49 = (double)v12;
      }
      return (JSC::Exception *)(*(_QWORD *)&v49 + 0x2000000000000);
    }
  }
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x3B00000002;
  *(_QWORD *)(v15 + 8) = "Receiver should be a typed array view but was not an object";
  *(_DWORD *)(v15 + 16) = 4;
  v67 = (WTF::StringImpl *)v15;
  v22 = *(_QWORD *)(this + 176);
  v23 = *(_QWORD *)(this + 56);
  if ((v22 & 1) != 0)
  {
    v51 = *(_QWORD *)(this + 56);
    v52 = *(uint64_t (**)(uint64_t *, uint64_t))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v53 = (uint64_t *)(this - 16);
    else
      v53 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v68 = *v53;
    v69 = this;
    v70 = (char *)(this + 176);
    v22 = v52(&v68, v23);
    v23 = v51;
  }
  v24 = *(JSC::Heap **)(v23 + 40448);
  if (!v24)
  {
    v64 = v22;
    v55 = v23;
    v56 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v23 + 37552));
    v23 = v55;
    v24 = v56;
    v22 = v64;
  }
  SlowCase = *((_QWORD *)v24 + 3);
  if (SlowCase < *((_QWORD *)v24 + 4))
    goto LABEL_14;
  SlowCase = *((_QWORD *)v24 + 5);
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v24 + 6);
    *((_QWORD *)v24 + 4) = SlowCase + HIDWORD(v54);
    *((_QWORD *)v24 + 5) = SlowCase + (int)v54;
LABEL_14:
    *((_QWORD *)v24 + 3) = SlowCase + 64;
    goto LABEL_15;
  }
  v58 = v23 + 192;
  v63 = v23;
  v65 = v22;
  v59 = (uint64_t)v24;
  JSC::sanitizeStackForVM((JSC *)v23, (JSC::VM *)v23, v16, v17, v18, v19, v20, v21);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v59, v58, 64, 0, 0, v60, v61, v62);
  v23 = v63;
  v22 = v65;
LABEL_15:
  *(_DWORD *)SlowCase = 0;
  v26 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)SlowCase = v22 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  *(_WORD *)(SlowCase + 56) = 0;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_BYTE *)(SlowCase + 58) = 5;
  *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
  JSC::ErrorInstance::finishCreation(SlowCase, v23, &v67, 0, 0, 0, 1, v21, (__n128)0);
  if ((SlowCase & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
  {
    SlowCase = JSC::Exception::create((uint64_t)v9, (JSC::VM *)SlowCase, 0, v27, v28, v29, v30, v31);
  }
  v13 = JSC::VM::throwException(v9, (JSC::JSGlobalObject *)this, (JSC::Exception *)SlowCase, v32, v27, v28, v29, v30, v31);
  v40 = v67;
  v67 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  return v13;
}

uint64_t JSC::typedArrayViewProtoFuncReverse(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  const char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _WORD *v55;
  unint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _WORD *v66;
  unint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _DWORD *v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  char v151;
  unint64_t v152;
  char v153;
  unint64_t v154;
  char v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  char v167;
  JSC::VM *v168;
  _BYTE v169[8];
  char v170;

  v8 = *((_QWORD *)this + 7);
  v168 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) < 0x17u)
  {
    v22 = "Receiver should be a typed array view but was not an object";
    v23 = 60;
    return JSC::throwTypeError((unint64_t)this, &v168, (uint64_t)v22, v23);
  }
  else
  {
    switch(*(_BYTE *)(v9 + 5))
    {
      case '\'':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v135 = *(_DWORD *)(v8 + 80);
          if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v10, v11, v12, v13, v14, v15);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v16 = *(_QWORD *)(v9 + 16);
        if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) <= 2)
        {
          v17 = *(_QWORD *)(v9 + 24);
          if (!v17)
            return v9;
          goto LABEL_11;
        }
        v169[0] = 0;
        v170 = 0;
        v146 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v10, v11, v12, v13, v14, v15);
        if (v147)
          v17 = v146;
        else
          v17 = 0;
        if (v17)
        {
LABEL_11:
          v18 = (_BYTE *)(v16 + v17 - 1);
          if ((unint64_t)v18 > v16)
          {
            v19 = v16 + 1;
            do
            {
              v20 = *(_BYTE *)(v19 - 1);
              *(_BYTE *)(v19 - 1) = *v18;
              *v18-- = v20;
              v21 = v19++ >= (unint64_t)v18;
            }
            while (!v21);
          }
          return v9;
        }
        break;
      case '(':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v136 = *(_DWORD *)(v8 + 80);
          if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v25, v26, v27, v28, v29, v30);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v31 = *(_QWORD *)(v9 + 16);
        if (v31 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v148 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v25, v26, v27, v28, v29, v30);
          if (v149)
            v32 = v148;
          else
            v32 = 0;
          if (!v32)
            return v9;
        }
        else
        {
          v32 = *(_QWORD *)(v9 + 24);
          if (!v32)
            return v9;
        }
        v33 = (_BYTE *)(v31 + v32 - 1);
        if ((unint64_t)v33 > v31)
        {
          v34 = v31 + 1;
          do
          {
            v35 = *(_BYTE *)(v34 - 1);
            *(_BYTE *)(v34 - 1) = *v33;
            *v33-- = v35;
            v21 = v34++ >= (unint64_t)v33;
          }
          while (!v21);
        }
        return v9;
      case ')':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v137 = *(_DWORD *)(v8 + 80);
          if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v36, v37, v38, v39, v40, v41);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v42 = *(_QWORD *)(v9 + 16);
        if (v42 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v42 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v150 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v36, v37, v38, v39, v40, v41);
          if (v151)
            v43 = v150;
          else
            v43 = 0;
          if (!v43)
            return v9;
        }
        else
        {
          v43 = *(_QWORD *)(v9 + 24);
          if (!v43)
            return v9;
        }
        v44 = (_BYTE *)(v42 + v43 - 1);
        if ((unint64_t)v44 > v42)
        {
          v45 = v42 + 1;
          do
          {
            v46 = *(_BYTE *)(v45 - 1);
            *(_BYTE *)(v45 - 1) = *v44;
            *v44-- = v46;
            v21 = v45++ >= (unint64_t)v44;
          }
          while (!v21);
        }
        return v9;
      case '*':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v138 = *(_DWORD *)(v8 + 80);
          if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v47, v48, v49, v50, v51, v52);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v53 = *(_QWORD *)(v9 + 16);
        if (v53 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v152 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v47, v48, v49, v50, v51, v52);
          if (v153)
            v54 = v152;
          else
            v54 = 0;
          if (!v54)
            return v9;
        }
        else
        {
          v54 = *(_QWORD *)(v9 + 24);
          if (!v54)
            return v9;
        }
        v55 = (_WORD *)(v53 + 2 * v54 - 2);
        if ((unint64_t)v55 > v53)
        {
          v56 = v53 + 2;
          do
          {
            v57 = *(_WORD *)(v56 - 2);
            *(_WORD *)(v56 - 2) = *v55;
            *v55-- = v57;
            v21 = v56 >= (unint64_t)v55;
            v56 += 2;
          }
          while (!v21);
        }
        return v9;
      case '+':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v139 = *(_DWORD *)(v8 + 80);
          if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v58, v59, v60, v61, v62, v63);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v64 = *(_QWORD *)(v9 + 16);
        if (v64 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v64 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v154 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v58, v59, v60, v61, v62, v63);
          if (v155)
            v65 = v154;
          else
            v65 = 0;
          if (!v65)
            return v9;
        }
        else
        {
          v65 = *(_QWORD *)(v9 + 24);
          if (!v65)
            return v9;
        }
        v66 = (_WORD *)(v64 + 2 * v65 - 2);
        if ((unint64_t)v66 > v64)
        {
          v67 = v64 + 2;
          do
          {
            v68 = *(_WORD *)(v67 - 2);
            *(_WORD *)(v67 - 2) = *v66;
            *v66-- = v68;
            v21 = v67 >= (unint64_t)v66;
            v67 += 2;
          }
          while (!v21);
        }
        return v9;
      case ',':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v142 = *(_DWORD *)(v8 + 80);
          if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v91, v92, v93, v94, v95, v96);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v97 = *(_QWORD *)(v9 + 16);
        if (v97 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v97 = (v97 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v160 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v91, v92, v93, v94, v95, v96);
          if (v161)
            v98 = v160;
          else
            v98 = 0;
          if (!v98)
            return v9;
        }
        else
        {
          v98 = *(_QWORD *)(v9 + 24);
          if (!v98)
            return v9;
        }
        v99 = (_DWORD *)(v97 + 4 * v98 - 4);
        if ((unint64_t)v99 > v97)
        {
          v100 = v97 + 4;
          do
          {
            v101 = *(_DWORD *)(v100 - 4);
            *(_DWORD *)(v100 - 4) = *v99;
            *v99-- = v101;
            v21 = v100 >= (unint64_t)v99;
            v100 += 4;
          }
          while (!v21);
        }
        return v9;
      case '-':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v143 = *(_DWORD *)(v8 + 80);
          if ((v143 & 0x27) != 0 && (v143 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v102, v103, v104, v105, v106, v107);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v108 = *(_QWORD *)(v9 + 16);
        if (v108 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v108 = (v108 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v162 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v102, v103, v104, v105, v106, v107);
          if (v163)
            v109 = v162;
          else
            v109 = 0;
          if (!v109)
            return v9;
        }
        else
        {
          v109 = *(_QWORD *)(v9 + 24);
          if (!v109)
            return v9;
        }
        v110 = (_DWORD *)(v108 + 4 * v109 - 4);
        if ((unint64_t)v110 > v108)
        {
          v111 = v108 + 4;
          do
          {
            v112 = *(_DWORD *)(v111 - 4);
            *(_DWORD *)(v111 - 4) = *v110;
            *v110-- = v112;
            v21 = v111 >= (unint64_t)v110;
            v111 += 4;
          }
          while (!v21);
        }
        return v9;
      case '.':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v140 = *(_DWORD *)(v8 + 80);
          if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v69, v70, v71, v72, v73, v74);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v75 = *(_QWORD *)(v9 + 16);
        if (v75 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v75 = (v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v156 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v69, v70, v71, v72, v73, v74);
          if (v157)
            v76 = v156;
          else
            v76 = 0;
          if (!v76)
            return v9;
        }
        else
        {
          v76 = *(_QWORD *)(v9 + 24);
          if (!v76)
            return v9;
        }
        v77 = (_DWORD *)(v75 + 4 * v76 - 4);
        if ((unint64_t)v77 > v75)
        {
          v78 = v75 + 4;
          do
          {
            v79 = *(_DWORD *)(v78 - 4);
            *(_DWORD *)(v78 - 4) = *v77;
            *v77-- = v79;
            v21 = v78 >= (unint64_t)v77;
            v78 += 4;
          }
          while (!v21);
        }
        return v9;
      case '/':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v144 = *(_DWORD *)(v8 + 80);
          if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v113, v114, v115, v116, v117, v118);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v119 = *(_QWORD *)(v9 + 16);
        if (v119 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v119 = (v119 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v164 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v113, v114, v115, v116, v117, v118);
          if (v165)
            v120 = v164;
          else
            v120 = 0;
          if (!v120)
            return v9;
        }
        else
        {
          v120 = *(_QWORD *)(v9 + 24);
          if (!v120)
            return v9;
        }
        v121 = (_QWORD *)(v119 + 8 * v120 - 8);
        if ((unint64_t)v121 > v119)
        {
          v122 = v119 + 8;
          do
          {
            v123 = *(_QWORD *)(v122 - 8);
            *(_QWORD *)(v122 - 8) = *v121;
            *v121-- = v123;
            v21 = v122 >= (unint64_t)v121;
            v122 += 8;
          }
          while (!v21);
        }
        return v9;
      case '0':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v141 = *(_DWORD *)(v8 + 80);
          if ((v141 & 0x27) != 0 && (v141 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v80, v81, v82, v83, v84, v85);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v86 = *(_QWORD *)(v9 + 16);
        if (v86 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v86 = (v86 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v158 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v80, v81, v82, v83, v84, v85);
          if (v159)
            v87 = v158;
          else
            v87 = 0;
          if (!v87)
            return v9;
        }
        else
        {
          v87 = *(_QWORD *)(v9 + 24);
          if (!v87)
            return v9;
        }
        v88 = (_QWORD *)(v86 + 8 * v87 - 8);
        if ((unint64_t)v88 > v86)
        {
          v89 = v86 + 8;
          do
          {
            v90 = *(_QWORD *)(v89 - 8);
            *(_QWORD *)(v89 - 8) = *v88;
            *v88-- = v90;
            v21 = v89 >= (unint64_t)v88;
            v89 += 8;
          }
          while (!v21);
        }
        return v9;
      case '1':
        JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v8 + 80))
        {
          v145 = *(_DWORD *)(v8 + 80);
          if ((v145 & 0x27) != 0 && (v145 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v124, v125, v126, v127, v128, v129);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v130 = *(_QWORD *)(v9 + 16);
        if (v130 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v130 = (v130 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
        {
          v169[0] = 0;
          v170 = 0;
          v166 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)v169, v124, v125, v126, v127, v128, v129);
          if (v167)
            v131 = v166;
          else
            v131 = 0;
          if (!v131)
            return v9;
        }
        else
        {
          v131 = *(_QWORD *)(v9 + 24);
          if (!v131)
            return v9;
        }
        v132 = (_QWORD *)(v130 + 8 * v131 - 8);
        if ((unint64_t)v132 > v130)
        {
          v133 = v130 + 8;
          do
          {
            v134 = *(_QWORD *)(v133 - 8);
            *(_QWORD *)(v133 - 8) = *v132;
            *v132-- = v134;
            v21 = v133 >= (unint64_t)v132;
            v133 += 8;
          }
          while (!v21);
        }
        return v9;
      default:
        v22 = "Receiver should be a typed array view";
        v23 = 38;
        return JSC::throwTypeError((unint64_t)this, &v168, (uint64_t)v22, v23);
    }
  }
  return v9;
}

uint64_t JSC::typedArrayViewProtoFuncSet(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v9;
  JSC::VM *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  double v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  const char *v32;
  JSC::VM **v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v86;
  const WTF::String *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char v215;
  JSC::VM *v216;
  WTF::StringImpl *v217;
  char v218;
  JSC::VM *v219;

  v9 = (JSC *)this;
  v10 = this[7];
  v216 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || (v12 = *(unsigned __int8 *)(v11 + 5), v12 <= 0x16))
  {
    v32 = "Receiver should be a typed array view but was not an object";
    v33 = &v216;
    v34 = 60;
    return JSC::throwTypeError((unint64_t)this, v33, (uint64_t)v32, v34);
  }
  if (v12 != 40)
  {
    switch(*(_BYTE *)(v11 + 5))
    {
      case '\'':
        v219 = v10;
        v37 = *((int *)a2 + 8);
        if (v37 == 2)
        {
          v41 = 0;
        }
        else
        {
          if (v37 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v39 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v38, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v39 < 0.0)
            goto LABEL_136;
          if (v39 > 1.84467441e19 || v39 > 9.00719925e15)
            v41 = -1;
          else
            v41 = (unint64_t)v39;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v110, v111, v112, v113, v114, v115, v116))
        {
          return 0;
        }
        v117 = *((_QWORD *)a2 + 6);
        if ((v117 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v117 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v41, *((_QWORD *)a2 + 6), v113, v114, v115, v116);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v118 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v117, (uint64_t)&v217, v111, v112, v113, v114, v115, v116);
          if (!v120)
            break;
          JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromTypedArray(v11, (unint64_t)v9, v41, v117, 0, v118, 1, v119);
        }
        return 10;
      case ')':
        v219 = v10;
        v42 = *((int *)a2 + 8);
        if (v42 == 2)
        {
          v46 = 0;
        }
        else
        {
          if (v42 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v44 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v43, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v44 < 0.0)
            goto LABEL_136;
          if (v44 > 1.84467441e19 || v44 > 9.00719925e15)
            v46 = -1;
          else
            v46 = (unint64_t)v44;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v121, v122, v123, v124, v125, v126, v127))
        {
          return 0;
        }
        v128 = *((_QWORD *)a2 + 6);
        if ((v128 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v128 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v46, *((_QWORD *)a2 + 6), v124, v125, v126, v127);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v129 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v128, (uint64_t)&v217, v122, v123, v124, v125, v126, v127);
          if (!v131)
            break;
          JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromTypedArray(v11, (unint64_t)v9, v46, v128, 0, v129, 1, v130);
        }
        return 10;
      case '*':
        v219 = v10;
        v47 = *((int *)a2 + 8);
        if (v47 == 2)
        {
          v51 = 0;
        }
        else
        {
          if (v47 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v49 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v48, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v49 < 0.0)
            goto LABEL_136;
          if (v49 > 1.84467441e19 || v49 > 9.00719925e15)
            v51 = -1;
          else
            v51 = (unint64_t)v49;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v132, v133, v134, v135, v136, v137, v138))
        {
          return 0;
        }
        v139 = *((_QWORD *)a2 + 6);
        if ((v139 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v139 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v51, *((_QWORD *)a2 + 6), v135, v136, v137, v138);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v140 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v139, (uint64_t)&v217, v133, v134, v135, v136, v137, v138);
          if (!v142)
            break;
          JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromTypedArray(v11, (unint64_t)v9, v51, v139, 0, v140, 1, v141);
        }
        return 10;
      case '+':
        v219 = v10;
        v52 = *((int *)a2 + 8);
        if (v52 == 2)
        {
          v56 = 0;
        }
        else
        {
          if (v52 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v54 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v53, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v54 < 0.0)
            goto LABEL_136;
          if (v54 > 1.84467441e19 || v54 > 9.00719925e15)
            v56 = -1;
          else
            v56 = (unint64_t)v54;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v143, v144, v145, v146, v147, v148, v149))
        {
          return 0;
        }
        v150 = *((_QWORD *)a2 + 6);
        if ((v150 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v150 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v56, *((_QWORD *)a2 + 6), v146, v147, v148, v149);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v151 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v150, (uint64_t)&v217, v144, v145, v146, v147, v148, v149);
          if (!v153)
            break;
          JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromTypedArray(v11, (unint64_t)v9, v56, v150, 0, v151, 1, v152);
        }
        return 10;
      case ',':
        v219 = v10;
        v57 = *((int *)a2 + 8);
        if (v57 == 2)
        {
          v61 = 0;
        }
        else
        {
          if (v57 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v59 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v58, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v59 < 0.0)
            goto LABEL_136;
          if (v59 > 1.84467441e19 || v59 > 9.00719925e15)
            v61 = -1;
          else
            v61 = (unint64_t)v59;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v154, v155, v156, v157, v158, v159, v160))
        {
          return 0;
        }
        v161 = *((_QWORD *)a2 + 6);
        if ((v161 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v161 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v61, *((_QWORD *)a2 + 6), v157, v158, v159, v160);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v162 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v161, (uint64_t)&v217, v155, v156, v157, v158, v159, v160);
          if (!v164)
            break;
          JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromTypedArray(v11, v9, v61, v161, 0, v162, 1, v163);
        }
        return 10;
      case '-':
        v219 = v10;
        v62 = *((int *)a2 + 8);
        if (v62 == 2)
        {
          v66 = 0;
        }
        else
        {
          if (v62 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v64 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v63, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v64 < 0.0)
            goto LABEL_136;
          if (v64 > 1.84467441e19 || v64 > 9.00719925e15)
            v66 = -1;
          else
            v66 = (unint64_t)v64;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v165, v166, v167, v168, v169, v170, v171))
        {
          return 0;
        }
        v172 = *((_QWORD *)a2 + 6);
        if ((v172 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v172 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v66, *((_QWORD *)a2 + 6), v168, v169, v170, v171);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v173 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v172, (uint64_t)&v217, v166, v167, v168, v169, v170, v171);
          if (!v175)
            break;
          JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromTypedArray(v11, (unint64_t)v9, v66, v172, 0, v173, 1, v174);
        }
        return 10;
      case '.':
        v219 = v10;
        v67 = *((int *)a2 + 8);
        if (v67 == 2)
        {
          v71 = 0;
        }
        else
        {
          if (v67 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v69 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v68, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v69 < 0.0)
            goto LABEL_136;
          if (v69 > 1.84467441e19 || v69 > 9.00719925e15)
            v71 = -1;
          else
            v71 = (unint64_t)v69;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v176, v177, v178, v179, v180, v181, v182))
        {
          return 0;
        }
        v183 = *((_QWORD *)a2 + 6);
        if ((v183 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v183 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v71, *((_QWORD *)a2 + 6), v179, v180, v181, v182);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v184 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v183, (uint64_t)&v217, v177, v178, v179, v180, v181, v182);
          if (!v186)
            break;
          JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromTypedArray(v11, v9, v71, v183, 0, v184, 1, v185);
        }
        return 10;
      case '/':
        v219 = v10;
        v72 = *((int *)a2 + 8);
        if (v72 == 2)
        {
          v76 = 0;
        }
        else
        {
          if (v72 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v74 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v73, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v74 < 0.0)
            goto LABEL_136;
          if (v74 > 1.84467441e19 || v74 > 9.00719925e15)
            v76 = -1;
          else
            v76 = (unint64_t)v74;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v187, v188, v189, v190, v191, v192, v193))
        {
          return 0;
        }
        v194 = *((_QWORD *)a2 + 6);
        if ((v194 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v194 + 5) - 39 > 0xA)
        {
          JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v76, *((_QWORD *)a2 + 6), v190, v191, v192, v193);
        }
        else
        {
          LOBYTE(v217) = 0;
          v218 = 0;
          v195 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v194, (uint64_t)&v217, v188, v189, v190, v191, v192, v193);
          if (!v197)
            break;
          JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromTypedArray(v11, (unint64_t)v9, v76, v194, 0, v195, 1, v196);
        }
        return 10;
      case '0':
        v219 = v10;
        v77 = *((int *)a2 + 8);
        if (v77 == 2)
        {
          v81 = 0;
        }
        else
        {
          if (v77 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v79 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v78, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v79 < 0.0)
            goto LABEL_136;
          if (v79 > 1.84467441e19 || v79 > 9.00719925e15)
            v81 = -1;
          else
            v81 = (unint64_t)v79;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v198, v199, v200, v201, v202, v203, v204))
        {
          return 0;
        }
        v205 = *((_QWORD *)a2 + 6);
        if ((v205 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v205 + 5) - 39 > 0xA)
          goto LABEL_204;
        LOBYTE(v217) = 0;
        v218 = 0;
        v206 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v205, (uint64_t)&v217, v199, v200, v201, v202, v203, v204);
        if (!v208)
          break;
        JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromTypedArray(v11, (unint64_t)v9, v81, v205, 0, v206, 1, v207);
        return 10;
      case '1':
        v219 = v10;
        v82 = *((int *)a2 + 8);
        if (v82 == 2)
        {
          v81 = 0;
        }
        else
        {
          if (v82 == 1)
            goto LABEL_135;
          v217 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v84 = JSC::JSValue::toIntegerOrInfinity(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v83, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          if (v84 < 0.0)
            goto LABEL_136;
          if (v84 > 1.84467441e19 || v84 > 9.00719925e15)
            v81 = -1;
          else
            v81 = (unint64_t)v84;
        }
        JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v209, v210, v211, v201, v202, v203, v204))
        {
          return 0;
        }
        v212 = *((_QWORD *)a2 + 6);
        if ((v212 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v212 + 5) - 39 > 0xA)
        {
LABEL_204:
          JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromArrayLike(v11, (uint64_t)v9, (JSC::Structure *)v81, *((_QWORD *)a2 + 6), v201, v202, v203, v204);
          return 10;
        }
        LOBYTE(v217) = 0;
        v218 = 0;
        v213 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v212, (uint64_t)&v217, v210, v211, v201, v202, v203, v204);
        if (v215)
        {
          JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setFromTypedArray(v11, (unint64_t)v9, v81, v212, 0, v213, 1, v214);
          return 10;
        }
        break;
      default:
        v32 = "Receiver should be a typed array view";
        v33 = &v216;
        v34 = 38;
        return JSC::throwTypeError((unint64_t)this, v33, (uint64_t)v32, v34);
    }
LABEL_211:
    v32 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    v33 = &v219;
    this = (JSC::VM **)v9;
    v34 = 72;
    return JSC::throwTypeError((unint64_t)this, v33, (uint64_t)v32, v34);
  }
  v219 = v10;
  v14 = *((int *)a2 + 8);
  if (v14 == 1)
  {
LABEL_135:
    v32 = "Expected at least one argument";
    v33 = &v219;
    v34 = 31;
    return JSC::throwTypeError((unint64_t)this, v33, (uint64_t)v32, v34);
  }
  if (v14 == 2)
  {
    v18 = 0;
LABEL_16:
    JSC::validateTypedArray(v9, (JSC::ArrayBuffer **)v11, a3, a4, a5, a6, a7, a8);
    if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v19, v20, v21, v22, v23, v24, v25))
      return 0;
    v26 = *((_QWORD *)a2 + 6);
    if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) - 39 > 0xA)
    {
      JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromArrayLike((JSC::JSArrayBufferView *)v11, v9, v18, *((_QWORD *)a2 + 6));
      return 10;
    }
    LOBYTE(v217) = 0;
    v218 = 0;
    v27 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v26, (uint64_t)&v217, v20, v21, v22, v23, v24, v25);
    if (v29)
    {
      JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromTypedArray(v11, v9, v18, v26, 0, v27, 1, v28);
      return 10;
    }
    goto LABEL_211;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v217 = v15;
  if ((unint64_t)v15 < 0xFFFE000000000000)
  {
    v35 = (unint64_t)v15 - 0x2000000000000;
    if (v35 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v217, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    else
      v36 = *(double *)&v35;
    v16 = trunc(v36 + 0.0);
  }
  else
  {
    v16 = (double)(int)v15;
  }
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (v16 >= 0.0)
  {
    if (v16 > 1.84467441e19 || v16 > 9.00719925e15)
      v18 = -1;
    else
      v18 = (unint64_t)v16;
    goto LABEL_16;
  }
LABEL_136:
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x1D00000002;
  *(_QWORD *)(v86 + 8) = "Offset should not be negative";
  *(_DWORD *)(v86 + 16) = 4;
  v217 = (WTF::StringImpl *)v86;
  v88 = JSC::createRangeError((unint64_t)v9, &v217, v87);
  v30 = JSC::VM::throwException(v10, v9, v88, v89, v90, v91, v92, v93);
  v101 = v217;
  v217 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  return v30;
}

uint64_t JSC::typedArrayViewProtoFuncSlice(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  JSC::JSObject *v35;
  unint64_t v36;
  JSC::JSArrayBufferView *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  _BOOL4 v57;
  const char *v58;
  JSC::VM **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int8x16_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  JSC::JSObject *v85;
  unint64_t v86;
  JSC::JSArrayBufferView *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int8x16_t v119;
  char v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int8x16_t v129;
  JSC::JSObject *v130;
  unint64_t v131;
  JSC::JSArrayBufferView *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int v151;
  _BOOL4 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int8x16_t v164;
  char v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int8x16_t v174;
  JSC::JSObject *v175;
  unint64_t v176;
  JSC::JSArrayBufferView *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  _BOOL4 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int8x16_t v209;
  char v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int8x16_t v219;
  JSC::JSObject *v220;
  JSC::JSCell *v221;
  JSC::JSArrayBufferView *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int v241;
  _BOOL4 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int8x16_t v254;
  char v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int8x16_t v264;
  JSC::JSObject *v265;
  unint64_t v266;
  JSC::JSArrayBufferView *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  _BOOL4 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int8x16_t v299;
  char v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int8x16_t v309;
  JSC::JSObject *v310;
  unint64_t v311;
  JSC::JSArrayBufferView *v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  _BOOL4 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int8x16_t v338;
  char v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int8x16_t v348;
  JSC::JSObject *v349;
  unint64_t v350;
  JSC::JSArrayBufferView *v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int v370;
  _BOOL4 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int8x16_t v383;
  char v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int8x16_t v393;
  JSC::JSObject *v394;
  unint64_t v395;
  JSC::JSArrayBufferView *v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned int v413;
  uint64_t v414;
  unsigned int v415;
  _BOOL4 v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  char v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int8x16_t v436;
  char v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int8x16_t v446;
  JSC::JSObject *v447;
  unint64_t v448;
  JSC::JSArrayBufferView *v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  uint64_t v467;
  unsigned int v468;
  _BOOL4 v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int8x16_t v481;
  char v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int8x16_t v491;
  JSC::JSObject *v492;
  unint64_t v493;
  JSC::JSArrayBufferView *v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  uint64_t v512;
  unsigned int v513;
  _BOOL4 v514;
  uint64_t v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  char v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  char v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char v531;
  unint64_t v532;
  unint64_t v533;
  char v534;
  unint64_t v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  char v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  char v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  char v555;
  unint64_t v556;
  uint64_t v557;
  unint64_t v558;
  unint64_t Uninitialized;
  unint64_t v560;
  char v561;
  unint64_t v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  char v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unsigned int v572;
  uint64_t v573;
  unsigned int v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v577;
  unint64_t v578;
  char v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  JSC::JSGlobalObject *v594;
  uint64_t v595;
  uint64_t v596;
  JSC::JSGlobalObject *v597;
  uint64_t v598;
  uint64_t v599;
  JSC::JSGlobalObject *v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  unint64_t v633;
  int v634;
  unint64_t v635;
  int v636;
  unint64_t v637;
  int v638;
  int v639;
  unint64_t v640;
  int v641;
  unint64_t v642;
  int v643;
  unint64_t v644;
  int v645;
  unint64_t v646;
  int v647;
  unint64_t v648;
  int v649;
  unint64_t v650;
  int v651;
  unint64_t v652;
  int v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  uint64_t (*v665)(uint64_t *);
  uint64_t *v666;
  int v667;
  uint64_t v668;
  BOOL v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t (*v672)(uint64_t *);
  uint64_t *v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unsigned int v678;
  uint64_t v679;
  unsigned int v680;
  unint64_t v681;
  uint64_t (*v682)(uint64_t *);
  uint64_t *v683;
  int v684;
  uint64_t v685;
  BOOL v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t (*v689)(uint64_t *);
  uint64_t *v690;
  uint64_t *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unsigned int v695;
  uint64_t v696;
  unsigned int v697;
  unint64_t v698;
  uint64_t (*v699)(uint64_t *);
  uint64_t *v700;
  int v701;
  uint64_t v702;
  BOOL v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t (*v706)(uint64_t *);
  uint64_t *v707;
  uint64_t *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unsigned int v712;
  uint64_t v713;
  unsigned int v714;
  unint64_t v715;
  uint64_t (*v716)(uint64_t *);
  uint64_t *v717;
  int v718;
  uint64_t v719;
  BOOL v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unsigned int v724;
  uint64_t v725;
  unsigned int v726;
  uint64_t v727;
  JSC::VM *v728;
  unint64_t v729;
  int v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  const char *v734;
  uint64_t v735;
  uint64_t (*v736)(uint64_t *);
  uint64_t *v737;
  int v738;
  uint64_t v739;
  BOOL v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t (*v743)(uint64_t *);
  uint64_t *v744;
  uint64_t *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unsigned int v749;
  uint64_t v750;
  unsigned int v751;
  unint64_t v752;
  uint64_t (*v753)(uint64_t *);
  uint64_t *v754;
  uint64_t (*v755)(uint64_t *);
  uint64_t *v756;
  int v757;
  uint64_t v758;
  BOOL v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t (*v762)(uint64_t *);
  uint64_t *v763;
  uint64_t *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unsigned int v768;
  uint64_t v769;
  unsigned int v770;
  unint64_t v771;
  int v772;
  uint64_t v773;
  BOOL v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t (*v777)(uint64_t *);
  uint64_t *v778;
  uint64_t *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unsigned int v783;
  uint64_t v784;
  unsigned int v785;
  unint64_t v786;
  uint64_t (*v787)(uint64_t *);
  uint64_t *v788;
  int v789;
  uint64_t v790;
  BOOL v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t (*v794)(uint64_t *);
  uint64_t *v795;
  uint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unsigned int v800;
  uint64_t v801;
  unsigned int v802;
  unint64_t v803;
  uint64_t (*v804)(uint64_t *);
  uint64_t *v805;
  int v806;
  uint64_t v807;
  BOOL v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t (*v811)(uint64_t *);
  uint64_t *v812;
  uint64_t *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unsigned int v817;
  uint64_t v818;
  unsigned int v819;
  unint64_t v820;
  uint64_t (*v821)(uint64_t *);
  uint64_t *v822;
  int v823;
  uint64_t v824;
  BOOL v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t (*v828)(uint64_t *);
  uint64_t *v829;
  uint64_t *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  unsigned int v834;
  uint64_t v835;
  unsigned int v836;
  unint64_t v837;
  uint64_t (*v838)(uint64_t *);
  uint64_t *v839;
  int v840;
  uint64_t v841;
  BOOL v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t (*v845)(uint64_t *);
  uint64_t *v846;
  uint64_t *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unsigned int v851;
  uint64_t v852;
  unsigned int v853;
  unint64_t v854;
  uint64_t (*v855)(uint64_t *);
  uint64_t *v856;
  uint64_t (*v857)(uint64_t *);
  uint64_t *v858;
  uint64_t (*v859)(uint64_t *);
  uint64_t *v860;
  uint64_t (*v861)(uint64_t *);
  uint64_t *v862;
  uint64_t (*v863)(uint64_t *);
  uint64_t *v864;
  uint64_t (*v865)(uint64_t *);
  uint64_t *v866;
  uint64_t (*v867)(uint64_t *);
  uint64_t *v868;
  uint64_t (*v869)(uint64_t *);
  uint64_t *v870;
  uint64_t (*v871)(uint64_t *);
  uint64_t *v872;
  uint64_t (*v873)(uint64_t *);
  uint64_t *v874;
  int v875;
  int v876;
  int v877;
  int v878;
  int v879;
  int v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  JSC::JSCell *v886;
  uint64_t v887;
  unint64_t *v888;
  unint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  const char *v894;
  uint64_t v895;
  JSC::JSCell *v896;
  uint64_t v897;
  unint64_t *v898;
  unint64_t v899;
  int v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  const char *v904;
  uint64_t v905;
  JSC::JSCell *v906;
  uint64_t v907;
  unint64_t *v908;
  unint64_t v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  const char *v914;
  uint64_t v915;
  JSC::JSCell *v916;
  uint64_t v917;
  unint64_t *v918;
  unint64_t v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  const char *v924;
  uint64_t v925;
  JSC::JSCell *v926;
  uint64_t v927;
  unint64_t *v928;
  unint64_t v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  const char *v934;
  uint64_t v935;
  JSC::JSCell *v936;
  uint64_t v937;
  unint64_t *v938;
  unint64_t v939;
  int v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  const char *v944;
  uint64_t v945;
  JSC::JSCell *v946;
  uint64_t v947;
  unint64_t *v948;
  unint64_t v949;
  int v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  const char *v954;
  uint64_t v955;
  JSC::JSCell *v956;
  uint64_t v957;
  unint64_t *v958;
  unint64_t v959;
  int v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  const char *v964;
  uint64_t v965;
  JSC::JSCell *v966;
  uint64_t v967;
  unint64_t *v968;
  unint64_t v969;
  int v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  const char *v974;
  uint64_t v975;
  JSC::JSCell *v976;
  uint64_t v977;
  unint64_t *v978;
  unint64_t v979;
  int v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  const char *v984;
  uint64_t v985;
  void (*v986)(uint64_t *);
  uint64_t *v987;
  void (*v988)(uint64_t *);
  uint64_t *v989;
  void (*v990)(uint64_t *);
  uint64_t *v991;
  void (*v992)(uint64_t *);
  uint64_t *v993;
  void (*v994)(uint64_t *);
  uint64_t *v995;
  void (*v996)(uint64_t *);
  uint64_t *v997;
  void (*v998)(uint64_t *);
  uint64_t *v999;
  void (*v1000)(uint64_t *);
  uint64_t *v1001;
  void (*v1002)(uint64_t *);
  uint64_t *v1003;
  void (*v1004)(uint64_t *);
  uint64_t *v1005;
  void (*v1006)(uint64_t *);
  uint64_t *v1007;
  uint64_t *v1008;
  uint64_t *v1009;
  uint64_t *v1010;
  uint64_t *v1011;
  uint64_t *v1012;
  uint64_t *v1013;
  uint64_t *v1014;
  uint64_t *v1015;
  uint64_t *v1016;
  uint64_t *v1017;
  unint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  unint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  unint64_t v1024;
  unint64_t v1025;
  unint64_t v1026;
  unint64_t v1027;
  unint64_t v1028;
  int v1029;
  int v1030;
  int v1031;
  int v1032;
  int v1033;
  int v1034;
  int v1035;
  int v1036;
  int v1037;
  int v1038;
  int v1039;
  int v1040;
  int v1041;
  int v1042;
  int v1043;
  int v1044;
  int v1045;
  int v1046;
  int v1047;
  int v1048;
  int v1049;
  int v1050;
  int v1051;
  int v1052;
  int v1053;
  int v1054;
  int v1055;
  int v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  int v1061;
  double v1062;
  double v1063;
  double v1064;
  double v1065;
  double v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  double v1071;
  double v1072;
  int v1073;
  int v1074;
  int v1075;
  int v1076;
  int v1077;
  int v1078;
  int v1079;
  int v1080;
  int v1081;
  int v1082;
  int v1083;
  unint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  unint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  unint64_t v1095;
  unint64_t v1096;
  unint64_t v1097;
  unint64_t v1098;
  unint64_t v1099;
  unint64_t v1100;
  unint64_t v1101;
  unint64_t v1102;
  unint64_t v1103;
  unint64_t v1104;
  unint64_t v1105;
  unint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  unint64_t v1109;
  unint64_t v1110;
  unint64_t v1111;
  unint64_t v1112;
  unint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  JSC **v1117;
  uint64_t *v1118;
  unint64_t *v1119;
  unint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  JSC *v1123;
  JSC::VM *v1124;
  int v1125;
  JSC::VM *v1126;
  uint64_t v1127;
  unint64_t v1128;
  unint64_t *v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  uint64_t v1134;
  JSC::VM *v1135;
  uint64_t v1136;
  char v1137;

  v8 = (unint64_t)this;
  v9 = *((_QWORD *)this + 7);
  v1116 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v58 = "Receiver should be a typed array view but was not an object";
    v59 = (JSC::VM **)&v1116;
    v60 = 60;
    return JSC::throwTypeError((unint64_t)this, v59, (uint64_t)v58, v60);
  }
  switch(*(_BYTE *)(v10 + 5))
  {
    case '\'':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v616 = *(_DWORD *)(v9 + 80);
        if ((v616 & 0x27) != 0 && (v616 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v18 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v12, v13, v14, v15, v16, v17);
      if (!v24)
        goto LABEL_588;
      v25 = v18;
      if (*((_DWORD *)a2 + 8) == 1)
        v26 = 10;
      else
        v26 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v26, v18, 0, v19, v20, v21, v22, v23);
      if (*(_DWORD *)(v9 + 80))
      {
        v627 = *(_DWORD *)(v9 + 80);
        if ((v627 & 0x27) != 0 && (v627 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v27, v28, v29, v30, v31, v32);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v35 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                            ? 10
                            : *((_QWORD *)a2 + 7));
      v36 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v35, v25, v25, v29, v30, v31, v32, v34);
      if (*(_DWORD *)(v9 + 80))
      {
        v642 = v36;
        v643 = *(_DWORD *)(v9 + 80);
        if ((v643 & 0x27) != 0 && (v643 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
        v36 = v642;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1105 = v36;
      if (v33 <= v36)
        v43 = v36;
      else
        v43 = v33;
      v44 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v44;
      v45 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v45 != v8)
        goto LABEL_901;
      v46 = (uint64_t *)(v8 + 1664);
      v47 = *(_QWORD *)(v8 + 1664);
      if ((v47 & 1) != 0)
      {
        v753 = *(uint64_t (**)(uint64_t *))(v47 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v754 = (uint64_t *)(v8 - 16);
        else
          v754 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v754;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1664);
        v47 = v753(&v1127);
      }
      v48 = *(_QWORD *)(v8 + 2384);
      if ((v48 & 1) != 0)
        v49 = (v48 >> 1) & 3;
      else
        v49 = *(unsigned __int8 *)(v48 + 4);
      v50 = *(_QWORD *)(v47 + 48);
      if (!v49)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 1);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_444;
      v51 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v51)
        v51 = *(_QWORD *)(v10 + 16);
      v52 = v50 == 2 ? 0 : v50;
      if (v52 == v51
        && ((v53 = *(_QWORD *)(v8 + 2384), (v53 & 1) != 0)
          ? (v54 = (v53 >> 1) & 3)
          : (v54 = *(unsigned __int8 *)(v53 + 4)),
            v54 == 1))
      {
        v55 = *(_QWORD *)(v8 + 2360);
        if ((v55 & 1) != 0)
          v56 = (v55 >> 1) & 3;
        else
          v56 = *(unsigned __int8 *)(v55 + 4);
        v57 = v56 == 1;
      }
      else
      {
LABEL_444:
        v57 = 0;
      }
      if (*(_DWORD *)(v44 + 80))
      {
        v757 = *(_DWORD *)(v44 + 80);
        if ((v757 & 0x27) != 0 && (v757 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
        v758 = *(_QWORD *)(v44 + 16);
        if (v758)
          v759 = 0;
        else
          v759 = v57;
        if (v759)
          goto LABEL_447;
        if (v758)
        {
          v61 = 0;
          goto LABEL_451;
        }
      }
      else if (v57)
      {
LABEL_447:
        v557 = *v46;
        if ((*v46 & 1) != 0)
        {
          v863 = *(uint64_t (**)(uint64_t *))(v557 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v864 = (uint64_t *)(v8 - 16);
          else
            v864 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v864;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1664);
          v557 = v863(&v1127);
        }
        v558 = v43 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create((JSC::JSGlobalObject *)v8, v557, v558, v38, v39, v40, v41, v42);
        else
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v557, v558, v38, v39, v40, v41, v42);
        v61 = Uninitialized;
LABEL_451:
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_452;
        v659 = *(_DWORD *)(v9 + 80);
        if ((v659 & 0x27) != 0 && (v659 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
        if (!*(_QWORD *)(v9 + 16))
        {
LABEL_452:
          if (v33 >= v1105)
            return v61;
          LOBYTE(v1127) = 0;
          LOBYTE(v1128) = 0;
          v560 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v37, v38, v39, v40, v41, v42);
          if (v561)
          {
            if (v43 >= v560)
              v562 = v560;
            else
              v562 = v43;
            v424 = v562 - v33;
            if (v562 > v33)
            {
              switch(*(_BYTE *)(v61 + 5))
              {
                case '\'':
                  goto LABEL_500;
                case '(':
                  goto LABEL_512;
                case ')':
                  goto LABEL_506;
                case '*':
                  goto LABEL_508;
                case '+':
                  goto LABEL_502;
                case ',':
                  goto LABEL_514;
                case '-':
                  goto LABEL_516;
                case '.':
                  goto LABEL_510;
                case '/':
                  goto LABEL_520;
                case '0':
                  goto LABEL_504;
                case '1':
                  goto LABEL_518;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x198A957FCLL);
              }
            }
            return v61;
          }
          goto LABEL_588;
        }
        return 0;
      }
LABEL_901:
      v1099 = v43 - v33;
      v760 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v44 + 41952) + 1080), v38, v39, v40, v41, v42);
      if (*(_DWORD *)(v44 + 80))
      {
        v880 = *(_DWORD *)(v44 + 80);
        if ((v880 & 0x27) != 0 && (v880 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
        if (*(_QWORD *)(v44 + 16))
          goto LABEL_1125;
      }
      if (v760 == 10)
      {
        v761 = *(_QWORD *)(v8 + 1664);
        if ((v761 & 1) != 0)
        {
          v762 = *(uint64_t (**)(uint64_t *))(v761 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v763 = (uint64_t *)(v8 - 16);
          else
            v763 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v763;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1664);
LABEL_1561:
          v761 = v762(&v1127);
          goto LABEL_919;
        }
        goto LABEL_919;
      }
      if ((v760 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v760 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v764 = (uint64_t *)(v8 + 1664);
        v765 = *(_QWORD *)(v8 + 1664);
        if ((v765 & 1) != 0)
        {
          v996 = *(void (**)(uint64_t *))(v765 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v997 = (uint64_t *)(v8 - 16);
          else
            v997 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v997;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1664);
          v996(&v1127);
        }
        v766 = *(_QWORD *)(v8 + 1672);
        if (v45 == v8 && v766 == v760)
        {
          v767 = *(_QWORD *)(v8 + 2384);
          v768 = (v767 & 1) != 0 ? (v767 >> 1) & 3 : *(unsigned __int8 *)(v767 + 4);
          if (v768 == 1)
          {
            v769 = *(_QWORD *)(v8 + 2360);
            v770 = (v769 & 1) != 0 ? (v769 >> 1) & 3 : *(unsigned __int8 *)(v769 + 4);
            if (v770 == 1)
            {
LABEL_918:
              v761 = *v764;
              if ((*v764 & 1) != 0)
              {
                v762 = *(uint64_t (**)(uint64_t *))(v761 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1012 = (uint64_t *)(v8 - 16);
                else
                  v1012 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1012;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1664);
                goto LABEL_1561;
              }
LABEL_919:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v771 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create((JSC::JSGlobalObject *)v8, v761, v1099, v38, v39, v40, v41, v42);
              else
                v771 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v761, v1099, v38, v39, v40, v41, v42);
              v61 = v771;
              goto LABEL_451;
            }
          }
        }
        v927 = JSC::JSObject::get((unsigned int *)v760, v8, *(_QWORD *)(*(_QWORD *)(v44 + 41952) + 2752), v38, v39, v40, v41, v42);
        if (!*(_DWORD *)(v44 + 80))
          goto LABEL_1285;
        v1034 = *(_DWORD *)(v44 + 80);
        if ((v1034 & 0x27) != 0 && (v1034 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
        if (!*(_QWORD *)(v44 + 16))
        {
LABEL_1285:
          if ((v927 & 0xFFFFFFFFFFFFFFF7) == 2 || v927 == v766)
            goto LABEL_918;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v928 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1099))
          {
            v1067 = (double)v1099;
          }
          else
          {
            if ((v1099 & 0x80000000) == 0)
            {
              v929 = v1099 | 0xFFFE000000000000;
              goto LABEL_1289;
            }
            v1067 = (double)v1099;
          }
          v929 = *(_QWORD *)&v1067 + 0x2000000000000;
LABEL_1289:
          *((_QWORD *)&v1130 + 1) = v929;
          v930 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v44 + 80))
          {
            v1045 = *(_DWORD *)(v44 + 80);
            if ((v1045 & 0x27) != 0 && (v1045 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
            if (*(_QWORD *)(v44 + 16))
              goto LABEL_1300;
            v928 = v1129;
            v930 = v1128;
          }
          v1117 = (JSC **)v928;
          LODWORD(v1118) = v930;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v927 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v927 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v927, v926);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v927 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v927);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v927, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v927, v931, v932, v933);
LABEL_1295:
              if (*(_DWORD *)(v44 + 80))
              {
                v1056 = *(_DWORD *)(v44 + 80);
                if ((v1056 & 0x27) != 0 && (v1056 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
                if (*(_QWORD *)(v44 + 16))
                  goto LABEL_1300;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v934 = "species constructor did not return a TypedArray View";
                v935 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v37, v38, v39, v40, v41, v42);
                if (*(_DWORD *)(v44 + 80))
                {
                  v1078 = *(_DWORD *)(v44 + 80);
                  if ((v1078 & 0x27) != 0 && (v1078 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, (uint64_t)v37, v38, v39, v40, v41, v42);
                  if (*(_QWORD *)(v44 + 16))
                    goto LABEL_1300;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1089 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v37, v38, v39, v40, v41, v42);
                  if ((_BYTE)v926)
                    v1023 = v1089;
                  else
                    v1023 = 0;
                }
                else
                {
                  v1023 = *(_QWORD *)(v61 + 24);
                }
                if (v1023 < v1099)
                {
                  v934 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v935 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1620;
                  v934 = "Content types of source and created typed arrays are different";
                  v935 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v934, v935);
LABEL_1300:
              v61 = 0;
LABEL_1620:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v926, (uint64_t)v37, v38, v39, v40, v41, v42);
              goto LABEL_451;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1295;
        }
      }
LABEL_1125:
      v61 = 0;
      goto LABEL_451;
    case '(':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v617 = *(_DWORD *)(v9 + 80);
        if ((v617 & 0x27) != 0 && (v617 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v288, v289, v290, v291, v292, v293);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v294 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v288, v289, v290, v291, v292, v293);
      if (!v300)
        goto LABEL_588;
      v301 = v294;
      if (*((_DWORD *)a2 + 8) == 1)
        v302 = 10;
      else
        v302 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v302, v294, 0, v295, v296, v297, v298, v299);
      if (*(_DWORD *)(v9 + 80))
      {
        v628 = *(_DWORD *)(v9 + 80);
        if ((v628 & 0x27) != 0 && (v628 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v303, v304, v305, v306, v307, v308);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v310 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v311 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v310, v301, v301, v305, v306, v307, v308, v309);
      if (*(_DWORD *)(v9 + 80))
      {
        v644 = v311;
        v645 = *(_DWORD *)(v9 + 80);
        if ((v645 & 0x27) != 0 && (v645 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
        v311 = v644;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1110 = v311;
      if (v33 <= v311)
        v318 = v311;
      else
        v318 = v33;
      v319 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v319;
      v320 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v320 != v8)
        goto LABEL_929;
      v321 = (uint64_t *)(v8 + 1688);
      v322 = *(_QWORD *)(v8 + 1688);
      if ((v322 & 1) != 0)
      {
        v755 = *(uint64_t (**)(uint64_t *))(v322 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v756 = (uint64_t *)(v8 - 16);
        else
          v756 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v756;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1688);
        v322 = v755(&v1127);
      }
      v323 = *(_QWORD *)(v8 + 2400);
      if ((v323 & 1) != 0)
        v324 = (v323 >> 1) & 3;
      else
        v324 = *(unsigned __int8 *)(v323 + 4);
      v325 = *(_QWORD *)(v322 + 48);
      if (!v324)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 2);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_205;
      v569 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v569)
        v569 = *(_QWORD *)(v10 + 16);
      v570 = v325 == 2 ? 0 : v325;
      if (v570 == v569
        && ((v571 = *(_QWORD *)(v8 + 2400), (v571 & 1) != 0)
          ? (v572 = (v571 >> 1) & 3)
          : (v572 = *(unsigned __int8 *)(v571 + 4)),
            v572 == 1))
      {
        v573 = *(_QWORD *)(v8 + 2360);
        if ((v573 & 1) != 0)
          v574 = (v573 >> 1) & 3;
        else
          v574 = *(unsigned __int8 *)(v573 + 4);
        v326 = v574 == 1;
      }
      else
      {
LABEL_205:
        v326 = 0;
      }
      if (*(_DWORD *)(v319 + 80))
      {
        v772 = *(_DWORD *)(v319 + 80);
        if ((v772 & 0x27) != 0 && (v772 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v319 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
        v773 = *(_QWORD *)(v319 + 16);
        if (v773)
          v774 = 0;
        else
          v774 = v326;
        if (v774)
          goto LABEL_488;
        if (v773)
        {
          v61 = 0;
          goto LABEL_492;
        }
      }
      else if (v326)
      {
LABEL_488:
        v575 = *v321;
        if ((*v321 & 1) != 0)
        {
          v865 = *(uint64_t (**)(uint64_t *))(v575 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v866 = (uint64_t *)(v8 - 16);
          else
            v866 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v866;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1688);
          v575 = v865(&v1127);
        }
        v576 = v318 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v577 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create((JSC::JSGlobalObject *)v8, v575, v576, v313, v314, v315, v316, v317);
        else
          v577 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v575, v576, v313, v314, v315, v316, v317);
        v61 = v577;
LABEL_492:
        if (*(_DWORD *)(v9 + 80))
        {
          v660 = *(_DWORD *)(v9 + 80);
          if ((v660 & 0x27) != 0 && (v660 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if (v33 >= v1110)
          return v61;
        LOBYTE(v1127) = 0;
        LOBYTE(v1128) = 0;
        v578 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v312, v313, v314, v315, v316, v317);
        if (v579)
        {
          if (v318 >= v578)
            v580 = v578;
          else
            v580 = v318;
          v424 = v580 - v33;
          if (v580 > v33)
          {
            switch(*(_BYTE *)(v61 + 5))
            {
              case '\'':
                goto LABEL_500;
              case '(':
                goto LABEL_512;
              case ')':
                goto LABEL_506;
              case '*':
                goto LABEL_508;
              case '+':
                goto LABEL_502;
              case ',':
                goto LABEL_514;
              case '-':
                goto LABEL_516;
              case '.':
                goto LABEL_510;
              case '/':
                goto LABEL_520;
              case '0':
                goto LABEL_504;
              case '1':
                goto LABEL_518;
              default:
                __break(0xC471u);
                JUMPOUT(0x198A9583CLL);
            }
          }
          return v61;
        }
LABEL_588:
        v58 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v59 = &v1126;
LABEL_589:
        this = (JSC *)v8;
        goto LABEL_590;
      }
LABEL_929:
      v1100 = v318 - v33;
      v775 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v319 + 41952) + 1080), v313, v314, v315, v316, v317);
      if (*(_DWORD *)(v319 + 80))
      {
        v881 = *(_DWORD *)(v319 + 80);
        if ((v881 & 0x27) != 0 && (v881 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v319 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
        if (*(_QWORD *)(v319 + 16))
          goto LABEL_1127;
      }
      if (v775 == 10)
      {
        v776 = *(_QWORD *)(v8 + 1688);
        if ((v776 & 1) != 0)
        {
          v777 = *(uint64_t (**)(uint64_t *))(v776 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v778 = (uint64_t *)(v8 - 16);
          else
            v778 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v778;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1688);
LABEL_1565:
          v776 = v777(&v1127);
          goto LABEL_947;
        }
        goto LABEL_947;
      }
      if ((v775 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v775 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v779 = (uint64_t *)(v8 + 1688);
        v780 = *(_QWORD *)(v8 + 1688);
        if ((v780 & 1) != 0)
        {
          v998 = *(void (**)(uint64_t *))(v780 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v999 = (uint64_t *)(v8 - 16);
          else
            v999 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v999;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1688);
          v998(&v1127);
        }
        v781 = *(_QWORD *)(v8 + 1696);
        if (v320 == v8 && v781 == v775)
        {
          v782 = *(_QWORD *)(v8 + 2400);
          v783 = (v782 & 1) != 0 ? (v782 >> 1) & 3 : *(unsigned __int8 *)(v782 + 4);
          if (v783 == 1)
          {
            v784 = *(_QWORD *)(v8 + 2360);
            v785 = (v784 & 1) != 0 ? (v784 >> 1) & 3 : *(unsigned __int8 *)(v784 + 4);
            if (v785 == 1)
            {
LABEL_946:
              v776 = *v779;
              if ((*v779 & 1) != 0)
              {
                v777 = *(uint64_t (**)(uint64_t *))(v776 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1013 = (uint64_t *)(v8 - 16);
                else
                  v1013 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1013;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1688);
                goto LABEL_1565;
              }
LABEL_947:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v786 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create((JSC::JSGlobalObject *)v8, v776, v1100, v313, v314, v315, v316, v317);
              else
                v786 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v776, v1100, v313, v314, v315, v316, v317);
              v61 = v786;
              goto LABEL_492;
            }
          }
        }
        v937 = JSC::JSObject::get((unsigned int *)v775, v8, *(_QWORD *)(*(_QWORD *)(v319 + 41952) + 2752), v313, v314, v315, v316, v317);
        if (!*(_DWORD *)(v319 + 80))
          goto LABEL_1303;
        v1035 = *(_DWORD *)(v319 + 80);
        if ((v1035 & 0x27) != 0 && (v1035 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v319 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
        if (!*(_QWORD *)(v319 + 16))
        {
LABEL_1303:
          if ((v937 & 0xFFFFFFFFFFFFFFF7) == 2 || v937 == v781)
            goto LABEL_946;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v938 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1100))
          {
            v1068 = (double)v1100;
          }
          else
          {
            if ((v1100 & 0x80000000) == 0)
            {
              v939 = v1100 | 0xFFFE000000000000;
              goto LABEL_1307;
            }
            v1068 = (double)v1100;
          }
          v939 = *(_QWORD *)&v1068 + 0x2000000000000;
LABEL_1307:
          *((_QWORD *)&v1130 + 1) = v939;
          v940 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v319 + 80))
          {
            v1046 = *(_DWORD *)(v319 + 80);
            if ((v1046 & 0x27) != 0 && (v1046 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v319 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
            if (*(_QWORD *)(v319 + 16))
              goto LABEL_1318;
            v938 = v1129;
            v940 = v1128;
          }
          v1117 = (JSC **)v938;
          LODWORD(v1118) = v940;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v937 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v937 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v937, v936);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v937 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v937);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v937, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v937, v941, v942, v943);
LABEL_1313:
              if (*(_DWORD *)(v319 + 80))
              {
                v1057 = *(_DWORD *)(v319 + 80);
                if ((v1057 & 0x27) != 0 && (v1057 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v319 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
                if (*(_QWORD *)(v319 + 16))
                  goto LABEL_1318;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v944 = "species constructor did not return a TypedArray View";
                v945 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v312, v313, v314, v315, v316, v317);
                if (*(_DWORD *)(v319 + 80))
                {
                  v1079 = *(_DWORD *)(v319 + 80);
                  if ((v1079 & 0x27) != 0 && (v1079 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v319 + 64), 7u, (uint64_t)v312, v313, v314, v315, v316, v317);
                  if (*(_QWORD *)(v319 + 16))
                    goto LABEL_1318;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1090 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v312, v313, v314, v315, v316, v317);
                  if ((_BYTE)v936)
                    v1024 = v1090;
                  else
                    v1024 = 0;
                }
                else
                {
                  v1024 = *(_QWORD *)(v61 + 24);
                }
                if (v1024 < v1100)
                {
                  v944 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v945 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1626;
                  v944 = "Content types of source and created typed arrays are different";
                  v945 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v944, v945);
LABEL_1318:
              v61 = 0;
LABEL_1626:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v936, (uint64_t)v312, v313, v314, v315, v316, v317);
              goto LABEL_492;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1313;
        }
      }
LABEL_1127:
      v61 = 0;
      goto LABEL_492;
    case ')':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v613 = *(_DWORD *)(v9 + 80);
        if ((v613 & 0x27) != 0 && (v613 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v153, v154, v155, v156, v157, v158);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v159 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v153, v154, v155, v156, v157, v158);
      if (!v165)
        goto LABEL_588;
      v166 = v159;
      if (*((_DWORD *)a2 + 8) == 1)
        v167 = 10;
      else
        v167 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v167, v159, 0, v160, v161, v162, v163, v164);
      if (*(_DWORD *)(v9 + 80))
      {
        v624 = *(_DWORD *)(v9 + 80);
        if ((v624 & 0x27) != 0 && (v624 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v168, v169, v170, v171, v172, v173);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v175 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v176 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v175, v166, v166, v170, v171, v172, v173, v174);
      if (*(_DWORD *)(v9 + 80))
      {
        v637 = v176;
        v638 = *(_DWORD *)(v9 + 80);
        if ((v638 & 0x27) != 0 && (v638 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
        v176 = v637;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1108 = v176;
      if (v33 <= v176)
        v183 = v176;
      else
        v183 = v33;
      v184 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v184;
      v185 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v185 != v8)
        goto LABEL_796;
      v186 = (uint64_t *)(v8 + 1712);
      v187 = *(_QWORD *)(v8 + 1712);
      if ((v187 & 1) != 0)
      {
        v699 = *(uint64_t (**)(uint64_t *))(v187 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v700 = (uint64_t *)(v8 - 16);
        else
          v700 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v700;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1712);
        v187 = v699(&v1127);
      }
      v188 = *(_QWORD *)(v8 + 2416);
      if ((v188 & 1) != 0)
        v189 = (v188 >> 1) & 3;
      else
        v189 = *(unsigned __int8 *)(v188 + 4);
      v190 = *(_QWORD *)(v187 + 48);
      if (!v189)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 3);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_371;
      v191 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v191)
        v191 = *(_QWORD *)(v10 + 16);
      v192 = v190 == 2 ? 0 : v190;
      if (v192 == v191
        && ((v193 = *(_QWORD *)(v8 + 2416), (v193 & 1) != 0)
          ? (v194 = (v193 >> 1) & 3)
          : (v194 = *(unsigned __int8 *)(v193 + 4)),
            v194 == 1))
      {
        v195 = *(_QWORD *)(v8 + 2360);
        if ((v195 & 1) != 0)
          v196 = (v195 >> 1) & 3;
        else
          v196 = *(unsigned __int8 *)(v195 + 4);
        v197 = v196 == 1;
      }
      else
      {
LABEL_371:
        v197 = 0;
      }
      if (*(_DWORD *)(v184 + 80))
      {
        v701 = *(_DWORD *)(v184 + 80);
        if ((v701 & 0x27) != 0 && (v701 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v184 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
        v702 = *(_QWORD *)(v184 + 16);
        if (v702)
          v703 = 0;
        else
          v703 = v197;
        if (v703)
          goto LABEL_374;
        if (v702)
        {
          v61 = 0;
          goto LABEL_378;
        }
      }
      else if (v197)
      {
LABEL_374:
        v527 = *v186;
        if ((*v186 & 1) != 0)
        {
          v859 = *(uint64_t (**)(uint64_t *))(v527 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v860 = (uint64_t *)(v8 - 16);
          else
            v860 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v860;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1712);
          v527 = v859(&v1127);
        }
        v528 = v183 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v529 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create((JSC::JSGlobalObject *)v8, v527, v528, v178, v179, v180, v181, v182);
        else
          v529 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v527, v528, v178, v179, v180, v181, v182);
        v61 = v529;
        goto LABEL_378;
      }
LABEL_796:
      v1097 = v183 - v33;
      v704 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v184 + 41952) + 1080), v178, v179, v180, v181, v182);
      if (*(_DWORD *)(v184 + 80))
      {
        v877 = *(_DWORD *)(v184 + 80);
        if ((v877 & 0x27) != 0 && (v877 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v184 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
        if (*(_QWORD *)(v184 + 16))
          goto LABEL_1119;
      }
      if (v704 == 10)
      {
        v705 = *(_QWORD *)(v8 + 1712);
        if ((v705 & 1) != 0)
        {
          v706 = *(uint64_t (**)(uint64_t *))(v705 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v707 = (uint64_t *)(v8 - 16);
          else
            v707 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v707;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1712);
LABEL_1553:
          v705 = v706(&v1127);
          goto LABEL_814;
        }
        goto LABEL_814;
      }
      if ((v704 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v704 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
        goto LABEL_1119;
      }
      v708 = (uint64_t *)(v8 + 1712);
      v709 = *(_QWORD *)(v8 + 1712);
      if ((v709 & 1) != 0)
      {
        v990 = *(void (**)(uint64_t *))(v709 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v991 = (uint64_t *)(v8 - 16);
        else
          v991 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v991;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1712);
        v990(&v1127);
      }
      v710 = *(_QWORD *)(v8 + 1720);
      if (v185 != v8
        || v710 != v704
        || ((v711 = *(_QWORD *)(v8 + 2416), (v711 & 1) != 0)
          ? (v712 = (v711 >> 1) & 3)
          : (v712 = *(unsigned __int8 *)(v711 + 4)),
            v712 != 1
         || ((v713 = *(_QWORD *)(v8 + 2360), (v713 & 1) != 0)
           ? (v714 = (v713 >> 1) & 3)
           : (v714 = *(unsigned __int8 *)(v713 + 4)),
             v714 != 1)))
      {
        v907 = JSC::JSObject::get((unsigned int *)v704, v8, *(_QWORD *)(*(_QWORD *)(v184 + 41952) + 2752), v178, v179, v180, v181, v182);
        if (!*(_DWORD *)(v184 + 80))
          goto LABEL_1249;
        v1032 = *(_DWORD *)(v184 + 80);
        if ((v1032 & 0x27) != 0 && (v1032 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v184 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
        if (!*(_QWORD *)(v184 + 16))
        {
LABEL_1249:
          if ((v907 & 0xFFFFFFFFFFFFFFF7) == 2 || v907 == v710)
            goto LABEL_813;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v908 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1097))
          {
            v1065 = (double)v1097;
          }
          else
          {
            if ((v1097 & 0x80000000) == 0)
            {
              v909 = v1097 | 0xFFFE000000000000;
              goto LABEL_1253;
            }
            v1065 = (double)v1097;
          }
          v909 = *(_QWORD *)&v1065 + 0x2000000000000;
LABEL_1253:
          *((_QWORD *)&v1130 + 1) = v909;
          v910 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v184 + 80))
          {
            v1043 = *(_DWORD *)(v184 + 80);
            if ((v1043 & 0x27) != 0 && (v1043 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v184 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
            if (*(_QWORD *)(v184 + 16))
              goto LABEL_1264;
            v908 = v1129;
            v910 = v1128;
          }
          v1117 = (JSC **)v908;
          LODWORD(v1118) = v910;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v907 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v907 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v907, v906);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v907 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v907);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v907, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v907, v911, v912, v913);
LABEL_1259:
              if (*(_DWORD *)(v184 + 80))
              {
                v1054 = *(_DWORD *)(v184 + 80);
                if ((v1054 & 0x27) != 0 && (v1054 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v184 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
                if (*(_QWORD *)(v184 + 16))
                  goto LABEL_1264;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v914 = "species constructor did not return a TypedArray View";
                v915 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v177, v178, v179, v180, v181, v182);
                if (*(_DWORD *)(v184 + 80))
                {
                  v1076 = *(_DWORD *)(v184 + 80);
                  if ((v1076 & 0x27) != 0 && (v1076 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v184 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
                  if (*(_QWORD *)(v184 + 16))
                    goto LABEL_1264;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1087 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v177, v178, v179, v180, v181, v182);
                  if ((_BYTE)v906)
                    v1021 = v1087;
                  else
                    v1021 = 0;
                }
                else
                {
                  v1021 = *(_QWORD *)(v61 + 24);
                }
                if (v1021 < v1097)
                {
                  v914 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v915 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1608;
                  v914 = "Content types of source and created typed arrays are different";
                  v915 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v914, v915);
LABEL_1264:
              v61 = 0;
LABEL_1608:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v906, (uint64_t)v177, v178, v179, v180, v181, v182);
              goto LABEL_378;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1259;
        }
LABEL_1119:
        v61 = 0;
        goto LABEL_378;
      }
LABEL_813:
      v705 = *v708;
      if ((*v708 & 1) != 0)
      {
        v706 = *(uint64_t (**)(uint64_t *))(v705 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v1010 = (uint64_t *)(v8 - 16);
        else
          v1010 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v1010;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1712);
        goto LABEL_1553;
      }
LABEL_814:
      if ((*(_BYTE *)(v10 + 40) & 6) != 0)
        v715 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create((JSC::JSGlobalObject *)v8, v705, v1097, v178, v179, v180, v181, v182);
      else
        v715 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v705, v1097, v178, v179, v180, v181, v182);
      v61 = v715;
LABEL_378:
      if (*(_DWORD *)(v9 + 80))
      {
        v656 = *(_DWORD *)(v9 + 80);
        if ((v656 & 0x27) != 0 && (v656 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v177, v178, v179, v180, v181, v182);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if (v33 >= v1108)
        return v61;
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v530 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v177, v178, v179, v180, v181, v182);
      if (!v531)
        goto LABEL_588;
      if (v183 >= v530)
        v532 = v530;
      else
        v532 = v183;
      v424 = v532 - v33;
      if (v532 > v33)
      {
        switch(*(_BYTE *)(v61 + 5))
        {
          case '\'':
            goto LABEL_500;
          case '(':
            goto LABEL_512;
          case ')':
            goto LABEL_506;
          case '*':
            goto LABEL_508;
          case '+':
            goto LABEL_502;
          case ',':
            goto LABEL_514;
          case '-':
            goto LABEL_516;
          case '.':
            goto LABEL_510;
          case '/':
            goto LABEL_520;
          case '0':
            goto LABEL_504;
          case '1':
            goto LABEL_518;
          default:
            __break(0xC471u);
            JUMPOUT(0x198A9577CLL);
        }
      }
      return v61;
    case '*':
      v1122 = v9;
      v1123 = this;
      v1121 = v10;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v614 = *(_DWORD *)(v9 + 80);
        if ((v614 & 0x27) != 0 && (v614 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v198, v199, v200, v201, v202, v203);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v204 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v198, v199, v200, v201, v202, v203);
      if (!v210)
      {
        v58 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v59 = (JSC::VM **)&v1122;
        goto LABEL_589;
      }
      v211 = v204;
      if (*((_DWORD *)a2 + 8) == 1)
        v212 = 10;
      else
        v212 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v212, v204, 0, v205, v206, v207, v208, v209);
      if (*(_DWORD *)(v9 + 80))
      {
        v625 = *(_DWORD *)(v9 + 80);
        if ((v625 & 0x27) != 0 && (v625 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v213, v214, v215, v216, v217, v218);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v220 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v228 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v220, v211, v211, v215, v216, v217, v218, v219);
      if (*(_DWORD *)(v9 + 80))
      {
        v639 = *(_DWORD *)(v9 + 80);
        if ((v639 & 0x27) != 0 && (v639 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if (v33 <= v228)
        v229 = v228;
      else
        v229 = v33;
      v1117 = &v1123;
      v1118 = &v1121;
      v1119 = &v1120;
      v1120 = v229 - v33;
      v230 = *(_QWORD *)(v8 + 56);
      v1126 = (JSC::VM *)v230;
      v231 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v231 != v8)
        goto LABEL_826;
      v232 = *(_QWORD *)(v8 + 1736);
      if ((v232 & 1) != 0)
      {
        v716 = *(uint64_t (**)(uint64_t *))(v232 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v717 = (uint64_t *)(v8 - 16);
        else
          v717 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v717;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1736);
        v232 = v716(&v1127);
      }
      v233 = *(_QWORD *)(v8 + 2432);
      if ((v233 & 1) != 0)
        v234 = (v233 >> 1) & 3;
      else
        v234 = *(unsigned __int8 *)(v233 + 4);
      v235 = *(_QWORD *)(v232 + 48);
      if (!v234)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 4);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_386;
      v236 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v236)
        v236 = *(_QWORD *)(v10 + 16);
      v237 = v235 == 2 ? 0 : v235;
      if (v237 == v236
        && ((v238 = *(_QWORD *)(v8 + 2432), (v238 & 1) != 0)
          ? (v239 = (v238 >> 1) & 3)
          : (v239 = *(unsigned __int8 *)(v238 + 4)),
            v239 == 1))
      {
        v240 = *(_QWORD *)(v8 + 2360);
        if ((v240 & 1) != 0)
          v241 = (v240 >> 1) & 3;
        else
          v241 = *(unsigned __int8 *)(v240 + 4);
        v242 = v241 == 1;
      }
      else
      {
LABEL_386:
        v242 = 0;
      }
      if (*(_DWORD *)(v230 + 80))
      {
        v718 = *(_DWORD *)(v230 + 80);
        if ((v718 & 0x27) != 0 && (v718 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
        v719 = *(_QWORD *)(v230 + 16);
        if (v719)
          v720 = 0;
        else
          v720 = v242;
        if (v720)
          goto LABEL_389;
        if (v719)
          goto LABEL_1121;
      }
      else if (v242)
      {
LABEL_389:
        v61 = (uint64_t)JSC::genericTypedArrayViewProtoFuncSlice<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((unint64_t **)&v1117, (uint64_t)v221, (uint64_t)v222, v223, v224, v225, v226, v227);
        goto LABEL_390;
      }
LABEL_826:
      v721 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v230 + 41952) + 1080), v223, v224, v225, v226, v227);
      if (!*(_DWORD *)(v230 + 80))
        goto LABEL_827;
      v878 = *(_DWORD *)(v230 + 80);
      if ((v878 & 0x27) != 0 && (v878 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
      if (!*(_QWORD *)(v230 + 16))
      {
LABEL_827:
        if (v721 == 10)
          goto LABEL_389;
        if ((v721 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v721 + 5) <= 0x16u)
        {
          JSC::throwTypeError(v8, &v1126, (uint64_t)"constructor Property should not be null", 40);
        }
        else
        {
          v722 = *(_QWORD *)(v8 + 1736);
          if ((v722 & 1) != 0)
          {
            v992 = *(void (**)(uint64_t *))(v722 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v993 = (uint64_t *)(v8 - 16);
            else
              v993 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1127 = *v993;
            v1128 = v8;
            v1129 = (unint64_t *)(v8 + 1736);
            v992(&v1127);
          }
          v1115 = *(_QWORD *)(v8 + 1744);
          if (v231 == v8 && v1115 == v721)
          {
            v723 = *(_QWORD *)(v8 + 2432);
            v724 = (v723 & 1) != 0 ? (v723 >> 1) & 3 : *(unsigned __int8 *)(v723 + 4);
            if (v724 == 1)
            {
              v725 = *(_QWORD *)(v8 + 2360);
              v726 = (v725 & 1) != 0 ? (v725 >> 1) & 3 : *(unsigned __int8 *)(v725 + 4);
              if (v726 == 1)
                goto LABEL_389;
            }
          }
          v727 = JSC::JSObject::get((unsigned int *)v721, v8, *(_QWORD *)(*(_QWORD *)(v230 + 41952) + 2752), v223, v224, v225, v226, v227);
          if (!*(_DWORD *)(v230 + 80))
            goto LABEL_841;
          v1029 = *(_DWORD *)(v230 + 80);
          if ((v1029 & 0x27) != 0 && (v1029 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
          if (!*(_QWORD *)(v230 + 16))
          {
LABEL_841:
            if ((v727 & 0xFFFFFFFFFFFFFFF7) == 2 || v727 == v1115)
              goto LABEL_389;
            LOBYTE(v1127) = 0;
            HIDWORD(v1128) = 8;
            v728 = (JSC::VM *)((char *)&v1130 + 8);
            v1129 = (unint64_t *)&v1130 + 1;
            v1130 = 0u;
            v1131 = 0u;
            v1132 = 0u;
            v1133 = 0u;
            v1134 = 0;
            if (HIDWORD(v1120))
            {
              v1062 = (double)v1120;
            }
            else
            {
              if ((v1120 & 0x80000000) == 0)
              {
                v729 = v1120 | 0xFFFE000000000000;
                goto LABEL_845;
              }
              v1062 = (double)v1120;
            }
            v729 = *(_QWORD *)&v1062 + 0x2000000000000;
LABEL_845:
            *((_QWORD *)&v1130 + 1) = v729;
            v730 = 1;
            LODWORD(v1128) = 1;
            if (*(_DWORD *)(v230 + 80))
            {
              v1040 = *(_DWORD *)(v230 + 80);
              if ((v1040 & 0x27) != 0 && (v1040 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
              if (*(_QWORD *)(v230 + 16))
                goto LABEL_856;
              v728 = (JSC::VM *)v1129;
              v730 = v1128;
            }
            v1124 = v728;
            v1125 = v730;
            v1135 = *(JSC::VM **)(v8 + 56);
            if ((v727 & 0xFFFE000000000002) != 0)
            {
              LOBYTE(v1136) = 0;
            }
            else
            {
              if (*(_BYTE *)(v727 + 5) == 26)
                JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v727, v221);
              else
                (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v727 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0x40))(&v1136, v727);
              if ((_BYTE)v1136)
              {
                v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v727, (unsigned __int8 *)&v1136, (uint64_t)&v1124, (WTF *)v727, v731, v732, v733);
LABEL_851:
                if (*(_DWORD *)(v230 + 80))
                {
                  v1051 = *(_DWORD *)(v230 + 80);
                  if ((v1051 & 0x27) != 0 && (v1051 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
                  if (*(_QWORD *)(v230 + 16))
                    goto LABEL_856;
                }
                if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
                {
                  v734 = "species constructor did not return a TypedArray View";
                  v735 = 53;
                }
                else
                {
                  JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v222, v223, v224, v225, v226, v227);
                  if (*(_DWORD *)(v230 + 80))
                  {
                    v1073 = *(_DWORD *)(v230 + 80);
                    if ((v1073 & 0x27) != 0 && (v1073 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
                    if (*(_QWORD *)(v230 + 16))
                      goto LABEL_856;
                  }
                  if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                  {
                    LOBYTE(v1136) = 0;
                    v1137 = 0;
                    v1084 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v222, v223, v224, v225, v226, v227);
                    if ((_BYTE)v221)
                      v1018 = v1084;
                    else
                      v1018 = 0;
                  }
                  else
                  {
                    v1018 = *(_QWORD *)(v61 + 24);
                  }
                  if (v1018 < v229 - v33)
                  {
                    v734 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                    v735 = 74;
                  }
                  else
                  {
                    if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                      goto LABEL_1587;
                    v734 = "Content types of source and created typed arrays are different";
                    v735 = 63;
                  }
                }
                JSC::throwTypeError(v8, &v1126, (uint64_t)v734, v735);
LABEL_856:
                v61 = 0;
LABEL_1587:
                JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v221, (uint64_t)v222, v223, v224, v225, v226, v227);
LABEL_390:
                if (*(_DWORD *)(v9 + 80))
                {
                  v657 = *(_DWORD *)(v9 + 80);
                  if ((v657 & 0x27) != 0 && (v657 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v222, v223, v224, v225, v226, v227);
                  if (*(_QWORD *)(v9 + 16))
                    return 0;
                }
                if (!v1120)
                  return v61;
                LOBYTE(v1127) = 0;
                LOBYTE(v1128) = 0;
                v533 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v1121, (uint64_t)&v1127, (uint64_t)v222, v223, v224, v225, v226, v227);
                if (!v534)
                {
                  this = v1123;
                  v58 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
                  v59 = (JSC::VM **)&v1122;
LABEL_590:
                  v60 = 72;
                  return JSC::throwTypeError((unint64_t)this, v59, (uint64_t)v58, v60);
                }
                if (v229 >= v533)
                  v535 = v533;
                else
                  v535 = v229;
                v424 = v535 - v33;
                if (v535 > v33)
                {
                  v1120 = v535 - v33;
                  switch(*(_BYTE *)(v61 + 5))
                  {
                    case '\'':
                      v536 = (unint64_t)v1123;
                      v537 = v1121;
                      v538 = v61;
                      goto LABEL_501;
                    case '(':
                      v597 = v1123;
                      v598 = v1121;
                      v596 = v61;
                      goto LABEL_513;
                    case ')':
                      v588 = (unint64_t)v1123;
                      v589 = v1121;
                      v587 = v61;
                      goto LABEL_507;
                    case '*':
                      v591 = (unint64_t)v1123;
                      v592 = v1121;
                      v590 = v61;
                      goto LABEL_509;
                    case '+':
                      v582 = (unint64_t)v1123;
                      v583 = v1121;
                      v581 = v61;
                      goto LABEL_503;
                    case ',':
                      v600 = v1123;
                      v601 = v1121;
                      v599 = v61;
                      goto LABEL_515;
                    case '-':
                      v603 = (unint64_t)v1123;
                      v604 = v1121;
                      v602 = v61;
                      goto LABEL_517;
                    case '.':
                      v594 = v1123;
                      v595 = v1121;
                      v593 = v61;
                      goto LABEL_511;
                    case '/':
                      v609 = (unint64_t)v1123;
                      v610 = v1121;
                      v608 = v61;
                      goto LABEL_521;
                    case '0':
                      v585 = (unint64_t)v1123;
                      v586 = v1121;
                      v584 = v61;
                      goto LABEL_505;
                    case '1':
                      v606 = (unint64_t)v1123;
                      v607 = v1121;
                      v605 = v61;
                      goto LABEL_519;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x198A956FCLL);
                  }
                }
                return v61;
              }
            }
            JSC::throwTypeError(v8, &v1135, (uint64_t)"species is not a constructor", 29);
            v61 = 0;
            goto LABEL_851;
          }
        }
      }
LABEL_1121:
      v61 = 0;
      goto LABEL_390;
    case '+':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v611 = *(_DWORD *)(v9 + 80);
        if ((v611 & 0x27) != 0 && (v611 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v63, v64, v65, v66, v67, v68);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v69 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v63, v64, v65, v66, v67, v68);
      if (!v75)
        goto LABEL_588;
      v76 = v69;
      if (*((_DWORD *)a2 + 8) == 1)
        v77 = 10;
      else
        v77 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v77, v69, 0, v70, v71, v72, v73, v74);
      if (*(_DWORD *)(v9 + 80))
      {
        v622 = *(_DWORD *)(v9 + 80);
        if ((v622 & 0x27) != 0 && (v622 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v78, v79, v80, v81, v82, v83);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v85 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                            ? 10
                            : *((_QWORD *)a2 + 7));
      v86 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v85, v76, v76, v80, v81, v82, v83, v84);
      if (*(_DWORD *)(v9 + 80))
      {
        v633 = v86;
        v634 = *(_DWORD *)(v9 + 80);
        if ((v634 & 0x27) != 0 && (v634 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
        v86 = v633;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1106 = v86;
      if (v33 <= v86)
        v93 = v86;
      else
        v93 = v33;
      v94 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v94;
      v95 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v95 != v8)
        goto LABEL_734;
      v96 = (uint64_t *)(v8 + 1760);
      v97 = *(_QWORD *)(v8 + 1760);
      if ((v97 & 1) != 0)
      {
        v665 = *(uint64_t (**)(uint64_t *))(v97 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v666 = (uint64_t *)(v8 - 16);
        else
          v666 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v666;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1760);
        v97 = v665(&v1127);
      }
      v98 = *(_QWORD *)(v8 + 2448);
      if ((v98 & 1) != 0)
        v99 = (v98 >> 1) & 3;
      else
        v99 = *(unsigned __int8 *)(v98 + 4);
      v100 = *(_QWORD *)(v97 + 48);
      if (!v99)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 5);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_341;
      v101 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v101)
        v101 = *(_QWORD *)(v10 + 16);
      v102 = v100 == 2 ? 0 : v100;
      if (v102 == v101
        && ((v103 = *(_QWORD *)(v8 + 2448), (v103 & 1) != 0)
          ? (v104 = (v103 >> 1) & 3)
          : (v104 = *(unsigned __int8 *)(v103 + 4)),
            v104 == 1))
      {
        v105 = *(_QWORD *)(v8 + 2360);
        if ((v105 & 1) != 0)
          v106 = (v105 >> 1) & 3;
        else
          v106 = *(unsigned __int8 *)(v105 + 4);
        v107 = v106 == 1;
      }
      else
      {
LABEL_341:
        v107 = 0;
      }
      if (*(_DWORD *)(v94 + 80))
      {
        v667 = *(_DWORD *)(v94 + 80);
        if ((v667 & 0x27) != 0 && (v667 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
        v668 = *(_QWORD *)(v94 + 16);
        if (v668)
          v669 = 0;
        else
          v669 = v107;
        if (v669)
          goto LABEL_344;
        if (v668)
        {
          v61 = 0;
          goto LABEL_348;
        }
      }
      else if (v107)
      {
LABEL_344:
        v515 = *v96;
        if ((*v96 & 1) != 0)
        {
          v855 = *(uint64_t (**)(uint64_t *))(v515 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v856 = (uint64_t *)(v8 - 16);
          else
            v856 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v856;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1760);
          v515 = v855(&v1127);
        }
        v516 = v93 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v517 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create((JSC::JSGlobalObject *)v8, v515, v516, v88, v89, v90, v91, v92);
        else
          v517 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v515, v516, v88, v89, v90, v91, v92);
        v61 = v517;
        goto LABEL_348;
      }
LABEL_734:
      v1095 = v93 - v33;
      v670 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v94 + 41952) + 1080), v88, v89, v90, v91, v92);
      if (*(_DWORD *)(v94 + 80))
      {
        v875 = *(_DWORD *)(v94 + 80);
        if ((v875 & 0x27) != 0 && (v875 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
        if (*(_QWORD *)(v94 + 16))
          goto LABEL_1115;
      }
      if (v670 == 10)
      {
        v671 = *(_QWORD *)(v8 + 1760);
        if ((v671 & 1) != 0)
        {
          v672 = *(uint64_t (**)(uint64_t *))(v671 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v673 = (uint64_t *)(v8 - 16);
          else
            v673 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v673;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1760);
LABEL_1545:
          v671 = v672(&v1127);
          goto LABEL_752;
        }
        goto LABEL_752;
      }
      if ((v670 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v670 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v674 = (uint64_t *)(v8 + 1760);
        v675 = *(_QWORD *)(v8 + 1760);
        if ((v675 & 1) != 0)
        {
          v986 = *(void (**)(uint64_t *))(v675 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v987 = (uint64_t *)(v8 - 16);
          else
            v987 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v987;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1760);
          v986(&v1127);
        }
        v676 = *(_QWORD *)(v8 + 1768);
        if (v95 == v8 && v676 == v670)
        {
          v677 = *(_QWORD *)(v8 + 2448);
          v678 = (v677 & 1) != 0 ? (v677 >> 1) & 3 : *(unsigned __int8 *)(v677 + 4);
          if (v678 == 1)
          {
            v679 = *(_QWORD *)(v8 + 2360);
            v680 = (v679 & 1) != 0 ? (v679 >> 1) & 3 : *(unsigned __int8 *)(v679 + 4);
            if (v680 == 1)
            {
LABEL_751:
              v671 = *v674;
              if ((*v674 & 1) != 0)
              {
                v672 = *(uint64_t (**)(uint64_t *))(v671 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1008 = (uint64_t *)(v8 - 16);
                else
                  v1008 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1008;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1760);
                goto LABEL_1545;
              }
LABEL_752:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v681 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create((JSC::JSGlobalObject *)v8, v671, v1095, v88, v89, v90, v91, v92);
              else
                v681 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v671, v1095, v88, v89, v90, v91, v92);
              v61 = v681;
LABEL_348:
              if (*(_DWORD *)(v9 + 80))
              {
                v654 = *(_DWORD *)(v9 + 80);
                if ((v654 & 0x27) != 0 && (v654 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if (v33 >= v1106)
                return v61;
              LOBYTE(v1127) = 0;
              LOBYTE(v1128) = 0;
              v518 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v87, v88, v89, v90, v91, v92);
              if (!v519)
                goto LABEL_588;
              if (v93 >= v518)
                v520 = v518;
              else
                v520 = v93;
              v424 = v520 - v33;
              if (v520 > v33)
              {
                switch(*(_BYTE *)(v61 + 5))
                {
                  case '\'':
                    goto LABEL_500;
                  case '(':
                    goto LABEL_512;
                  case ')':
                    goto LABEL_506;
                  case '*':
                    goto LABEL_508;
                  case '+':
                    goto LABEL_502;
                  case ',':
                    goto LABEL_514;
                  case '-':
                    goto LABEL_516;
                  case '.':
                    goto LABEL_510;
                  case '/':
                    goto LABEL_520;
                  case '0':
                    goto LABEL_504;
                  case '1':
                    goto LABEL_518;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A9573CLL);
                }
              }
              return v61;
            }
          }
        }
        v887 = JSC::JSObject::get((unsigned int *)v670, v8, *(_QWORD *)(*(_QWORD *)(v94 + 41952) + 2752), v88, v89, v90, v91, v92);
        if (!*(_DWORD *)(v94 + 80))
          goto LABEL_1215;
        v1030 = *(_DWORD *)(v94 + 80);
        if ((v1030 & 0x27) != 0 && (v1030 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
        if (!*(_QWORD *)(v94 + 16))
        {
LABEL_1215:
          if ((v887 & 0xFFFFFFFFFFFFFFF7) == 2 || v887 == v676)
            goto LABEL_751;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v888 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1095))
          {
            v1063 = (double)v1095;
          }
          else
          {
            if ((v1095 & 0x80000000) == 0)
            {
              v889 = v1095 | 0xFFFE000000000000;
              goto LABEL_1219;
            }
            v1063 = (double)v1095;
          }
          v889 = *(_QWORD *)&v1063 + 0x2000000000000;
LABEL_1219:
          *((_QWORD *)&v1130 + 1) = v889;
          v890 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v94 + 80))
          {
            v1041 = *(_DWORD *)(v94 + 80);
            if ((v1041 & 0x27) != 0 && (v1041 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
            if (*(_QWORD *)(v94 + 16))
              goto LABEL_1230;
            v888 = v1129;
            v890 = v1128;
          }
          v1117 = (JSC **)v888;
          LODWORD(v1118) = v890;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v887 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v887 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v887, v886);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v887 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v887);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v887, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v887, v891, v892, v893);
LABEL_1225:
              if (*(_DWORD *)(v94 + 80))
              {
                v1052 = *(_DWORD *)(v94 + 80);
                if ((v1052 & 0x27) != 0 && (v1052 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
                if (*(_QWORD *)(v94 + 16))
                  goto LABEL_1230;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v894 = "species constructor did not return a TypedArray View";
                v895 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v87, v88, v89, v90, v91, v92);
                if (*(_DWORD *)(v94 + 80))
                {
                  v1074 = *(_DWORD *)(v94 + 80);
                  if ((v1074 & 0x27) != 0 && (v1074 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, (uint64_t)v87, v88, v89, v90, v91, v92);
                  if (*(_QWORD *)(v94 + 16))
                    goto LABEL_1230;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1085 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v87, v88, v89, v90, v91, v92);
                  if ((_BYTE)v886)
                    v1019 = v1085;
                  else
                    v1019 = 0;
                }
                else
                {
                  v1019 = *(_QWORD *)(v61 + 24);
                }
                if (v1019 < v1095)
                {
                  v894 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v895 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1593;
                  v894 = "Content types of source and created typed arrays are different";
                  v895 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v894, v895);
LABEL_1230:
              v61 = 0;
LABEL_1593:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v886, (uint64_t)v87, v88, v89, v90, v91, v92);
              goto LABEL_348;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1225;
        }
      }
LABEL_1115:
      v61 = 0;
      goto LABEL_348;
    case ',':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v618 = *(_DWORD *)(v9 + 80);
        if ((v618 & 0x27) != 0 && (v618 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v327, v328, v329, v330, v331, v332);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v333 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v327, v328, v329, v330, v331, v332);
      if (!v339)
        goto LABEL_588;
      v340 = v333;
      if (*((_DWORD *)a2 + 8) == 1)
        v341 = 10;
      else
        v341 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v341, v333, 0, v334, v335, v336, v337, v338);
      if (*(_DWORD *)(v9 + 80))
      {
        v629 = *(_DWORD *)(v9 + 80);
        if ((v629 & 0x27) != 0 && (v629 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v342, v343, v344, v345, v346, v347);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v349 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v350 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v349, v340, v340, v344, v345, v346, v347, v348);
      if (*(_DWORD *)(v9 + 80))
      {
        v646 = v350;
        v647 = *(_DWORD *)(v9 + 80);
        if ((v647 & 0x27) != 0 && (v647 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
        v350 = v646;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1111 = v350;
      if (v33 <= v350)
        v357 = v350;
      else
        v357 = v33;
      v358 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v358;
      v359 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v359 != v8)
        goto LABEL_960;
      v360 = (uint64_t *)(v8 + 1784);
      v361 = *(_QWORD *)(v8 + 1784);
      if ((v361 & 1) != 0)
      {
        v787 = *(uint64_t (**)(uint64_t *))(v361 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v788 = (uint64_t *)(v8 - 16);
        else
          v788 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v788;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1784);
        v361 = v787(&v1127);
      }
      v362 = *(_QWORD *)(v8 + 2464);
      if ((v362 & 1) != 0)
        v363 = (v362 >> 1) & 3;
      else
        v363 = *(unsigned __int8 *)(v362 + 4);
      v364 = *(_QWORD *)(v361 + 48);
      if (!v363)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 6);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_399;
      v365 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v365)
        v365 = *(_QWORD *)(v10 + 16);
      v366 = v364 == 2 ? 0 : v364;
      if (v366 == v365
        && ((v367 = *(_QWORD *)(v8 + 2464), (v367 & 1) != 0)
          ? (v368 = (v367 >> 1) & 3)
          : (v368 = *(unsigned __int8 *)(v367 + 4)),
            v368 == 1))
      {
        v369 = *(_QWORD *)(v8 + 2360);
        if ((v369 & 1) != 0)
          v370 = (v369 >> 1) & 3;
        else
          v370 = *(unsigned __int8 *)(v369 + 4);
        v371 = v370 == 1;
      }
      else
      {
LABEL_399:
        v371 = 0;
      }
      if (*(_DWORD *)(v358 + 80))
      {
        v789 = *(_DWORD *)(v358 + 80);
        if ((v789 & 0x27) != 0 && (v789 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v358 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
        v790 = *(_QWORD *)(v358 + 16);
        if (v790)
          v791 = 0;
        else
          v791 = v371;
        if (v791)
          goto LABEL_402;
        if (v790)
        {
          v61 = 0;
          goto LABEL_406;
        }
      }
      else if (v371)
      {
LABEL_402:
        v539 = *v360;
        if ((*v360 & 1) != 0)
        {
          v867 = *(uint64_t (**)(uint64_t *))(v539 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v868 = (uint64_t *)(v8 - 16);
          else
            v868 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v868;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1784);
          v539 = v867(&v1127);
        }
        v540 = v357 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v541 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create((JSC::JSGlobalObject *)v8, v539, v540, v352, v353, v354, v355, v356);
        else
          v541 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v539, v540, v352, v353, v354, v355, v356);
        v61 = v541;
        goto LABEL_406;
      }
LABEL_960:
      v1101 = v357 - v33;
      v792 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v358 + 41952) + 1080), v352, v353, v354, v355, v356);
      if (*(_DWORD *)(v358 + 80))
      {
        v882 = *(_DWORD *)(v358 + 80);
        if ((v882 & 0x27) != 0 && (v882 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v358 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
        if (*(_QWORD *)(v358 + 16))
          goto LABEL_1129;
      }
      if (v792 == 10)
      {
        v793 = *(_QWORD *)(v8 + 1784);
        if ((v793 & 1) != 0)
        {
          v794 = *(uint64_t (**)(uint64_t *))(v793 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v795 = (uint64_t *)(v8 - 16);
          else
            v795 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v795;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1784);
LABEL_1569:
          v793 = v794(&v1127);
          goto LABEL_978;
        }
        goto LABEL_978;
      }
      if ((v792 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v792 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v796 = (uint64_t *)(v8 + 1784);
        v797 = *(_QWORD *)(v8 + 1784);
        if ((v797 & 1) != 0)
        {
          v1000 = *(void (**)(uint64_t *))(v797 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v1001 = (uint64_t *)(v8 - 16);
          else
            v1001 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v1001;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1784);
          v1000(&v1127);
        }
        v798 = *(_QWORD *)(v8 + 1792);
        if (v359 == v8 && v798 == v792)
        {
          v799 = *(_QWORD *)(v8 + 2464);
          v800 = (v799 & 1) != 0 ? (v799 >> 1) & 3 : *(unsigned __int8 *)(v799 + 4);
          if (v800 == 1)
          {
            v801 = *(_QWORD *)(v8 + 2360);
            v802 = (v801 & 1) != 0 ? (v801 >> 1) & 3 : *(unsigned __int8 *)(v801 + 4);
            if (v802 == 1)
            {
LABEL_977:
              v793 = *v796;
              if ((*v796 & 1) != 0)
              {
                v794 = *(uint64_t (**)(uint64_t *))(v793 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1014 = (uint64_t *)(v8 - 16);
                else
                  v1014 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1014;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1784);
                goto LABEL_1569;
              }
LABEL_978:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v803 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create((JSC::JSGlobalObject *)v8, v793, v1101, v352, v353, v354, v355, v356);
              else
                v803 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v793, v1101, v352, v353, v354, v355, v356);
              v61 = v803;
LABEL_406:
              if (*(_DWORD *)(v9 + 80))
              {
                v661 = *(_DWORD *)(v9 + 80);
                if ((v661 & 0x27) != 0 && (v661 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if (v33 >= v1111)
                return v61;
              LOBYTE(v1127) = 0;
              LOBYTE(v1128) = 0;
              v542 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v351, v352, v353, v354, v355, v356);
              if (!v543)
                goto LABEL_588;
              if (v357 >= v542)
                v544 = v542;
              else
                v544 = v357;
              v424 = v544 - v33;
              if (v544 > v33)
              {
                switch(*(_BYTE *)(v61 + 5))
                {
                  case '\'':
                    goto LABEL_500;
                  case '(':
                    goto LABEL_512;
                  case ')':
                    goto LABEL_506;
                  case '*':
                    goto LABEL_508;
                  case '+':
                    goto LABEL_502;
                  case ',':
                    goto LABEL_514;
                  case '-':
                    goto LABEL_516;
                  case '.':
                    goto LABEL_510;
                  case '/':
                    goto LABEL_520;
                  case '0':
                    goto LABEL_504;
                  case '1':
                    goto LABEL_518;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A9579CLL);
                }
              }
              return v61;
            }
          }
        }
        v947 = JSC::JSObject::get((unsigned int *)v792, v8, *(_QWORD *)(*(_QWORD *)(v358 + 41952) + 2752), v352, v353, v354, v355, v356);
        if (!*(_DWORD *)(v358 + 80))
          goto LABEL_1321;
        v1036 = *(_DWORD *)(v358 + 80);
        if ((v1036 & 0x27) != 0 && (v1036 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v358 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
        if (!*(_QWORD *)(v358 + 16))
        {
LABEL_1321:
          if ((v947 & 0xFFFFFFFFFFFFFFF7) == 2 || v947 == v798)
            goto LABEL_977;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v948 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1101))
          {
            v1069 = (double)v1101;
          }
          else
          {
            if ((v1101 & 0x80000000) == 0)
            {
              v949 = v1101 | 0xFFFE000000000000;
              goto LABEL_1325;
            }
            v1069 = (double)v1101;
          }
          v949 = *(_QWORD *)&v1069 + 0x2000000000000;
LABEL_1325:
          *((_QWORD *)&v1130 + 1) = v949;
          v950 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v358 + 80))
          {
            v1047 = *(_DWORD *)(v358 + 80);
            if ((v1047 & 0x27) != 0 && (v1047 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v358 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
            if (*(_QWORD *)(v358 + 16))
              goto LABEL_1336;
            v948 = v1129;
            v950 = v1128;
          }
          v1117 = (JSC **)v948;
          LODWORD(v1118) = v950;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v947 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v947 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v947, v946);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v947 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v947);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v947, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v947, v951, v952, v953);
LABEL_1331:
              if (*(_DWORD *)(v358 + 80))
              {
                v1058 = *(_DWORD *)(v358 + 80);
                if ((v1058 & 0x27) != 0 && (v1058 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v358 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
                if (*(_QWORD *)(v358 + 16))
                  goto LABEL_1336;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v954 = "species constructor did not return a TypedArray View";
                v955 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v351, v352, v353, v354, v355, v356);
                if (*(_DWORD *)(v358 + 80))
                {
                  v1080 = *(_DWORD *)(v358 + 80);
                  if ((v1080 & 0x27) != 0 && (v1080 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v358 + 64), 7u, (uint64_t)v351, v352, v353, v354, v355, v356);
                  if (*(_QWORD *)(v358 + 16))
                    goto LABEL_1336;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1091 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v351, v352, v353, v354, v355, v356);
                  if ((_BYTE)v946)
                    v1025 = v1091;
                  else
                    v1025 = 0;
                }
                else
                {
                  v1025 = *(_QWORD *)(v61 + 24);
                }
                if (v1025 < v1101)
                {
                  v954 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v955 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1632;
                  v954 = "Content types of source and created typed arrays are different";
                  v955 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v954, v955);
LABEL_1336:
              v61 = 0;
LABEL_1632:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v946, (uint64_t)v351, v352, v353, v354, v355, v356);
              goto LABEL_406;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1331;
        }
      }
LABEL_1129:
      v61 = 0;
      goto LABEL_406;
    case '-':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v619 = *(_DWORD *)(v9 + 80);
        if ((v619 & 0x27) != 0 && (v619 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v372, v373, v374, v375, v376, v377);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v378 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v372, v373, v374, v375, v376, v377);
      if (!v384)
        goto LABEL_588;
      v385 = v378;
      if (*((_DWORD *)a2 + 8) == 1)
        v386 = 10;
      else
        v386 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v386, v378, 0, v379, v380, v381, v382, v383);
      if (*(_DWORD *)(v9 + 80))
      {
        v630 = *(_DWORD *)(v9 + 80);
        if ((v630 & 0x27) != 0 && (v630 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v387, v388, v389, v390, v391, v392);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v394 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v395 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v394, v385, v385, v389, v390, v391, v392, v393);
      if (*(_DWORD *)(v9 + 80))
      {
        v648 = v395;
        v649 = *(_DWORD *)(v9 + 80);
        if ((v649 & 0x27) != 0 && (v649 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
        v395 = v648;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1112 = v395;
      if (v33 <= v395)
        v402 = v395;
      else
        v402 = v33;
      v403 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v403;
      v404 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v404 != v8)
        goto LABEL_991;
      v405 = (uint64_t *)(v8 + 1808);
      v406 = *(_QWORD *)(v8 + 1808);
      if ((v406 & 1) != 0)
      {
        v804 = *(uint64_t (**)(uint64_t *))(v406 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v805 = (uint64_t *)(v8 - 16);
        else
          v805 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v805;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1808);
        v406 = v804(&v1127);
      }
      v407 = *(_QWORD *)(v8 + 2480);
      if ((v407 & 1) != 0)
        v408 = (v407 >> 1) & 3;
      else
        v408 = *(unsigned __int8 *)(v407 + 4);
      v409 = *(_QWORD *)(v406 + 48);
      if (!v408)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 7);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_587;
      v410 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v410)
        v410 = *(_QWORD *)(v10 + 16);
      v411 = v409 == 2 ? 0 : v409;
      if (v411 == v410
        && ((v412 = *(_QWORD *)(v8 + 2480), (v412 & 1) != 0)
          ? (v413 = (v412 >> 1) & 3)
          : (v413 = *(unsigned __int8 *)(v412 + 4)),
            v413 == 1))
      {
        v414 = *(_QWORD *)(v8 + 2360);
        if ((v414 & 1) != 0)
          v415 = (v414 >> 1) & 3;
        else
          v415 = *(unsigned __int8 *)(v414 + 4);
        v416 = v415 == 1;
      }
      else
      {
LABEL_587:
        v416 = 0;
      }
      if (*(_DWORD *)(v403 + 80))
      {
        v806 = *(_DWORD *)(v403 + 80);
        if ((v806 & 0x27) != 0 && (v806 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v403 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
        v807 = *(_QWORD *)(v403 + 16);
        if (v807)
          v808 = 0;
        else
          v808 = v416;
        if (v808)
          goto LABEL_268;
        if (v807)
        {
          v61 = 0;
          goto LABEL_272;
        }
      }
      else if (v416)
      {
LABEL_268:
        v417 = *v405;
        if ((*v405 & 1) != 0)
        {
          v869 = *(uint64_t (**)(uint64_t *))(v417 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v870 = (uint64_t *)(v8 - 16);
          else
            v870 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v870;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1808);
          v417 = v869(&v1127);
        }
        v418 = v402 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v419 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create((JSC::JSGlobalObject *)v8, v417, v418, v397, v398, v399, v400, v401);
        else
          v419 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v417, v418, v397, v398, v399, v400, v401);
        v61 = v419;
        goto LABEL_272;
      }
LABEL_991:
      v1102 = v402 - v33;
      v809 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v403 + 41952) + 1080), v397, v398, v399, v400, v401);
      if (*(_DWORD *)(v403 + 80))
      {
        v883 = *(_DWORD *)(v403 + 80);
        if ((v883 & 0x27) != 0 && (v883 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v403 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
        if (*(_QWORD *)(v403 + 16))
          goto LABEL_1131;
      }
      if (v809 == 10)
      {
        v810 = *(_QWORD *)(v8 + 1808);
        if ((v810 & 1) != 0)
        {
          v811 = *(uint64_t (**)(uint64_t *))(v810 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v812 = (uint64_t *)(v8 - 16);
          else
            v812 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v812;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1808);
LABEL_1573:
          v810 = v811(&v1127);
          goto LABEL_1009;
        }
        goto LABEL_1009;
      }
      if ((v809 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v809 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v813 = (uint64_t *)(v8 + 1808);
        v814 = *(_QWORD *)(v8 + 1808);
        if ((v814 & 1) != 0)
        {
          v1002 = *(void (**)(uint64_t *))(v814 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v1003 = (uint64_t *)(v8 - 16);
          else
            v1003 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v1003;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1808);
          v1002(&v1127);
        }
        v815 = *(_QWORD *)(v8 + 1816);
        if (v404 == v8 && v815 == v809)
        {
          v816 = *(_QWORD *)(v8 + 2480);
          v817 = (v816 & 1) != 0 ? (v816 >> 1) & 3 : *(unsigned __int8 *)(v816 + 4);
          if (v817 == 1)
          {
            v818 = *(_QWORD *)(v8 + 2360);
            v819 = (v818 & 1) != 0 ? (v818 >> 1) & 3 : *(unsigned __int8 *)(v818 + 4);
            if (v819 == 1)
            {
LABEL_1008:
              v810 = *v813;
              if ((*v813 & 1) != 0)
              {
                v811 = *(uint64_t (**)(uint64_t *))(v810 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1015 = (uint64_t *)(v8 - 16);
                else
                  v1015 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1015;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1808);
                goto LABEL_1573;
              }
LABEL_1009:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v820 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create((JSC::JSGlobalObject *)v8, v810, v1102, v397, v398, v399, v400, v401);
              else
                v820 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v810, v1102, v397, v398, v399, v400, v401);
              v61 = v820;
LABEL_272:
              if (*(_DWORD *)(v9 + 80))
              {
                v662 = *(_DWORD *)(v9 + 80);
                if ((v662 & 0x27) != 0 && (v662 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if (v33 >= v1112)
                return v61;
              LOBYTE(v1127) = 0;
              LOBYTE(v1128) = 0;
              v420 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v396, v397, v398, v399, v400, v401);
              if (!v422)
                goto LABEL_588;
              if (v402 >= v420)
                v423 = v420;
              else
                v423 = v402;
              v424 = v423 - v33;
              if (v423 > v33)
              {
                switch(*(_BYTE *)(v61 + 5))
                {
                  case '\'':
                    goto LABEL_500;
                  case '(':
                    goto LABEL_512;
                  case ')':
                    goto LABEL_506;
                  case '*':
                    goto LABEL_508;
                  case '+':
                    goto LABEL_502;
                  case ',':
                    goto LABEL_514;
                  case '-':
                    goto LABEL_516;
                  case '.':
                    goto LABEL_510;
                  case '/':
                    goto LABEL_520;
                  case '0':
                    goto LABEL_504;
                  case '1':
                    goto LABEL_518;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A9571CLL);
                }
              }
              return v61;
            }
          }
        }
        v957 = JSC::JSObject::get((unsigned int *)v809, v8, *(_QWORD *)(*(_QWORD *)(v403 + 41952) + 2752), v397, v398, v399, v400, v401);
        if (!*(_DWORD *)(v403 + 80))
          goto LABEL_1339;
        v1037 = *(_DWORD *)(v403 + 80);
        if ((v1037 & 0x27) != 0 && (v1037 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v403 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
        if (!*(_QWORD *)(v403 + 16))
        {
LABEL_1339:
          if ((v957 & 0xFFFFFFFFFFFFFFF7) == 2 || v957 == v815)
            goto LABEL_1008;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v958 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1102))
          {
            v1070 = (double)v1102;
          }
          else
          {
            if ((v1102 & 0x80000000) == 0)
            {
              v959 = v1102 | 0xFFFE000000000000;
              goto LABEL_1343;
            }
            v1070 = (double)v1102;
          }
          v959 = *(_QWORD *)&v1070 + 0x2000000000000;
LABEL_1343:
          *((_QWORD *)&v1130 + 1) = v959;
          v960 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v403 + 80))
          {
            v1048 = *(_DWORD *)(v403 + 80);
            if ((v1048 & 0x27) != 0 && (v1048 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v403 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
            if (*(_QWORD *)(v403 + 16))
              goto LABEL_1354;
            v958 = v1129;
            v960 = v1128;
          }
          v1117 = (JSC **)v958;
          LODWORD(v1118) = v960;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v957 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v957 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v957, v956);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v957 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v957);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v957, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v957, v961, v962, v963);
LABEL_1349:
              if (*(_DWORD *)(v403 + 80))
              {
                v1059 = *(_DWORD *)(v403 + 80);
                if ((v1059 & 0x27) != 0 && (v1059 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v403 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
                if (*(_QWORD *)(v403 + 16))
                  goto LABEL_1354;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v964 = "species constructor did not return a TypedArray View";
                v965 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v396, v397, v398, v399, v400, v401);
                if (*(_DWORD *)(v403 + 80))
                {
                  v1081 = *(_DWORD *)(v403 + 80);
                  if ((v1081 & 0x27) != 0 && (v1081 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v403 + 64), 7u, (uint64_t)v396, v397, v398, v399, v400, v401);
                  if (*(_QWORD *)(v403 + 16))
                    goto LABEL_1354;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1092 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v396, v397, v398, v399, v400, v401);
                  if ((_BYTE)v956)
                    v1026 = v1092;
                  else
                    v1026 = 0;
                }
                else
                {
                  v1026 = *(_QWORD *)(v61 + 24);
                }
                if (v1026 < v1102)
                {
                  v964 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v965 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1638;
                  v964 = "Content types of source and created typed arrays are different";
                  v965 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v964, v965);
LABEL_1354:
              v61 = 0;
LABEL_1638:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v956, (uint64_t)v396, v397, v398, v399, v400, v401);
              goto LABEL_272;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1349;
        }
      }
LABEL_1131:
      v61 = 0;
      goto LABEL_272;
    case '.':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v615 = *(_DWORD *)(v9 + 80);
        if ((v615 & 0x27) != 0 && (v615 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v243, v244, v245, v246, v247, v248);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v249 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v243, v244, v245, v246, v247, v248);
      if (!v255)
        goto LABEL_588;
      v256 = v249;
      if (*((_DWORD *)a2 + 8) == 1)
        v257 = 10;
      else
        v257 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v257, v249, 0, v250, v251, v252, v253, v254);
      if (*(_DWORD *)(v9 + 80))
      {
        v626 = *(_DWORD *)(v9 + 80);
        if ((v626 & 0x27) != 0 && (v626 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v258, v259, v260, v261, v262, v263);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v265 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v266 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v265, v256, v256, v260, v261, v262, v263, v264);
      if (*(_DWORD *)(v9 + 80))
      {
        v640 = v266;
        v641 = *(_DWORD *)(v9 + 80);
        if ((v641 & 0x27) != 0 && (v641 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
        v266 = v640;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1109 = v266;
      if (v33 <= v266)
        v273 = v266;
      else
        v273 = v33;
      v274 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v274;
      v275 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v275 != v8)
        goto LABEL_867;
      v276 = (uint64_t *)(v8 + 1832);
      v277 = *(_QWORD *)(v8 + 1832);
      if ((v277 & 1) != 0)
      {
        v736 = *(uint64_t (**)(uint64_t *))(v277 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v737 = (uint64_t *)(v8 - 16);
        else
          v737 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v737;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1832);
        v277 = v736(&v1127);
      }
      v278 = *(_QWORD *)(v8 + 2496);
      if ((v278 & 1) != 0)
        v279 = (v278 >> 1) & 3;
      else
        v279 = *(unsigned __int8 *)(v278 + 4);
      v280 = *(_QWORD *)(v277 + 48);
      if (!v279)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 8);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_459;
      v281 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v281)
        v281 = *(_QWORD *)(v10 + 16);
      v282 = v280 == 2 ? 0 : v280;
      if (v282 == v281
        && ((v283 = *(_QWORD *)(v8 + 2496), (v283 & 1) != 0)
          ? (v284 = (v283 >> 1) & 3)
          : (v284 = *(unsigned __int8 *)(v283 + 4)),
            v284 == 1))
      {
        v285 = *(_QWORD *)(v8 + 2360);
        if ((v285 & 1) != 0)
          v286 = (v285 >> 1) & 3;
        else
          v286 = *(unsigned __int8 *)(v285 + 4);
        v287 = v286 == 1;
      }
      else
      {
LABEL_459:
        v287 = 0;
      }
      if (*(_DWORD *)(v274 + 80))
      {
        v738 = *(_DWORD *)(v274 + 80);
        if ((v738 & 0x27) != 0 && (v738 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v274 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
        v739 = *(_QWORD *)(v274 + 16);
        if (v739)
          v740 = 0;
        else
          v740 = v287;
        if (v740)
          goto LABEL_462;
        if (v739)
        {
          v61 = 0;
          goto LABEL_466;
        }
      }
      else if (v287)
      {
LABEL_462:
        v563 = *v276;
        if ((*v276 & 1) != 0)
        {
          v861 = *(uint64_t (**)(uint64_t *))(v563 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v862 = (uint64_t *)(v8 - 16);
          else
            v862 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v862;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1832);
          v563 = v861(&v1127);
        }
        v564 = v273 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v565 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create((JSC::JSGlobalObject *)v8, v563, v564, v268, v269, v270, v271, v272);
        else
          v565 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v563, v564, v268, v269, v270, v271, v272);
        v61 = v565;
        goto LABEL_466;
      }
LABEL_867:
      v1098 = v273 - v33;
      v741 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v274 + 41952) + 1080), v268, v269, v270, v271, v272);
      if (*(_DWORD *)(v274 + 80))
      {
        v879 = *(_DWORD *)(v274 + 80);
        if ((v879 & 0x27) != 0 && (v879 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v274 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
        if (*(_QWORD *)(v274 + 16))
          goto LABEL_1123;
      }
      if (v741 == 10)
      {
        v742 = *(_QWORD *)(v8 + 1832);
        if ((v742 & 1) != 0)
        {
          v743 = *(uint64_t (**)(uint64_t *))(v742 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v744 = (uint64_t *)(v8 - 16);
          else
            v744 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v744;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1832);
LABEL_1557:
          v742 = v743(&v1127);
          goto LABEL_885;
        }
        goto LABEL_885;
      }
      if ((v741 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v741 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v745 = (uint64_t *)(v8 + 1832);
        v746 = *(_QWORD *)(v8 + 1832);
        if ((v746 & 1) != 0)
        {
          v994 = *(void (**)(uint64_t *))(v746 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v995 = (uint64_t *)(v8 - 16);
          else
            v995 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v995;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1832);
          v994(&v1127);
        }
        v747 = *(_QWORD *)(v8 + 1840);
        if (v275 == v8 && v747 == v741)
        {
          v748 = *(_QWORD *)(v8 + 2496);
          v749 = (v748 & 1) != 0 ? (v748 >> 1) & 3 : *(unsigned __int8 *)(v748 + 4);
          if (v749 == 1)
          {
            v750 = *(_QWORD *)(v8 + 2360);
            v751 = (v750 & 1) != 0 ? (v750 >> 1) & 3 : *(unsigned __int8 *)(v750 + 4);
            if (v751 == 1)
            {
LABEL_884:
              v742 = *v745;
              if ((*v745 & 1) != 0)
              {
                v743 = *(uint64_t (**)(uint64_t *))(v742 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1011 = (uint64_t *)(v8 - 16);
                else
                  v1011 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1011;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1832);
                goto LABEL_1557;
              }
LABEL_885:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v752 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create((JSC::JSGlobalObject *)v8, v742, v1098, v268, v269, v270, v271, v272);
              else
                v752 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v742, v1098, v268, v269, v270, v271, v272);
              v61 = v752;
LABEL_466:
              if (*(_DWORD *)(v9 + 80))
              {
                v658 = *(_DWORD *)(v9 + 80);
                if ((v658 & 0x27) != 0 && (v658 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if (v33 >= v1109)
                return v61;
              LOBYTE(v1127) = 0;
              LOBYTE(v1128) = 0;
              v566 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v267, v268, v269, v270, v271, v272);
              if (!v567)
                goto LABEL_588;
              if (v273 >= v566)
                v568 = v566;
              else
                v568 = v273;
              v424 = v568 - v33;
              if (v568 > v33)
              {
                switch(*(_BYTE *)(v61 + 5))
                {
                  case '\'':
                    goto LABEL_500;
                  case '(':
                    goto LABEL_512;
                  case ')':
                    goto LABEL_506;
                  case '*':
                    goto LABEL_508;
                  case '+':
                    goto LABEL_502;
                  case ',':
                    goto LABEL_514;
                  case '-':
                    goto LABEL_516;
                  case '.':
                    goto LABEL_510;
                  case '/':
                    goto LABEL_520;
                  case '0':
                    goto LABEL_504;
                  case '1':
                    goto LABEL_518;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A9581CLL);
                }
              }
              return v61;
            }
          }
        }
        v917 = JSC::JSObject::get((unsigned int *)v741, v8, *(_QWORD *)(*(_QWORD *)(v274 + 41952) + 2752), v268, v269, v270, v271, v272);
        if (!*(_DWORD *)(v274 + 80))
          goto LABEL_1267;
        v1033 = *(_DWORD *)(v274 + 80);
        if ((v1033 & 0x27) != 0 && (v1033 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v274 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
        if (!*(_QWORD *)(v274 + 16))
        {
LABEL_1267:
          if ((v917 & 0xFFFFFFFFFFFFFFF7) == 2 || v917 == v747)
            goto LABEL_884;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v918 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1098))
          {
            v1066 = (double)v1098;
          }
          else
          {
            if ((v1098 & 0x80000000) == 0)
            {
              v919 = v1098 | 0xFFFE000000000000;
              goto LABEL_1271;
            }
            v1066 = (double)v1098;
          }
          v919 = *(_QWORD *)&v1066 + 0x2000000000000;
LABEL_1271:
          *((_QWORD *)&v1130 + 1) = v919;
          v920 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v274 + 80))
          {
            v1044 = *(_DWORD *)(v274 + 80);
            if ((v1044 & 0x27) != 0 && (v1044 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v274 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
            if (*(_QWORD *)(v274 + 16))
              goto LABEL_1282;
            v918 = v1129;
            v920 = v1128;
          }
          v1117 = (JSC **)v918;
          LODWORD(v1118) = v920;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v917 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v917 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v917, v916);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v917 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v917);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v917, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v917, v921, v922, v923);
LABEL_1277:
              if (*(_DWORD *)(v274 + 80))
              {
                v1055 = *(_DWORD *)(v274 + 80);
                if ((v1055 & 0x27) != 0 && (v1055 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v274 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
                if (*(_QWORD *)(v274 + 16))
                  goto LABEL_1282;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v924 = "species constructor did not return a TypedArray View";
                v925 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v267, v268, v269, v270, v271, v272);
                if (*(_DWORD *)(v274 + 80))
                {
                  v1077 = *(_DWORD *)(v274 + 80);
                  if ((v1077 & 0x27) != 0 && (v1077 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v274 + 64), 7u, (uint64_t)v267, v268, v269, v270, v271, v272);
                  if (*(_QWORD *)(v274 + 16))
                    goto LABEL_1282;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1088 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v267, v268, v269, v270, v271, v272);
                  if ((_BYTE)v916)
                    v1022 = v1088;
                  else
                    v1022 = 0;
                }
                else
                {
                  v1022 = *(_QWORD *)(v61 + 24);
                }
                if (v1022 < v1098)
                {
                  v924 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v925 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1614;
                  v924 = "Content types of source and created typed arrays are different";
                  v925 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v924, v925);
LABEL_1282:
              v61 = 0;
LABEL_1614:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v916, (uint64_t)v267, v268, v269, v270, v271, v272);
              goto LABEL_466;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1277;
        }
      }
LABEL_1123:
      v61 = 0;
      goto LABEL_466;
    case '/':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v621 = *(_DWORD *)(v9 + 80);
        if ((v621 & 0x27) != 0 && (v621 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v470, v471, v472, v473, v474, v475);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v476 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v470, v471, v472, v473, v474, v475);
      if (!v482)
        goto LABEL_588;
      v483 = v476;
      if (*((_DWORD *)a2 + 8) == 1)
        v484 = 10;
      else
        v484 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v484, v476, 0, v477, v478, v479, v480, v481);
      if (*(_DWORD *)(v9 + 80))
      {
        v632 = *(_DWORD *)(v9 + 80);
        if ((v632 & 0x27) != 0 && (v632 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v485, v486, v487, v488, v489, v490);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v492 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v493 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v492, v483, v483, v487, v488, v489, v490, v491);
      if (*(_DWORD *)(v9 + 80))
      {
        v652 = v493;
        v653 = *(_DWORD *)(v9 + 80);
        if ((v653 & 0x27) != 0 && (v653 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
        v493 = v652;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1114 = v493;
      if (v33 <= v493)
        v500 = v493;
      else
        v500 = v33;
      v501 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v501;
      v502 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v502 != v8)
        goto LABEL_1053;
      v503 = (uint64_t *)(v8 + 1856);
      v504 = *(_QWORD *)(v8 + 1856);
      if ((v504 & 1) != 0)
      {
        v838 = *(uint64_t (**)(uint64_t *))(v504 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v839 = (uint64_t *)(v8 - 16);
        else
          v839 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v839;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1856);
        v504 = v838(&v1127);
      }
      v505 = *(_QWORD *)(v8 + 2512);
      if ((v505 & 1) != 0)
        v506 = (v505 >> 1) & 3;
      else
        v506 = *(unsigned __int8 *)(v505 + 4);
      v507 = *(_QWORD *)(v504 + 48);
      if (!v506)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 9);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_429;
      v508 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v508)
        v508 = *(_QWORD *)(v10 + 16);
      v509 = v507 == 2 ? 0 : v507;
      if (v509 == v508
        && ((v510 = *(_QWORD *)(v8 + 2512), (v510 & 1) != 0)
          ? (v511 = (v510 >> 1) & 3)
          : (v511 = *(unsigned __int8 *)(v510 + 4)),
            v511 == 1))
      {
        v512 = *(_QWORD *)(v8 + 2360);
        if ((v512 & 1) != 0)
          v513 = (v512 >> 1) & 3;
        else
          v513 = *(unsigned __int8 *)(v512 + 4);
        v514 = v513 == 1;
      }
      else
      {
LABEL_429:
        v514 = 0;
      }
      if (*(_DWORD *)(v501 + 80))
      {
        v840 = *(_DWORD *)(v501 + 80);
        if ((v840 & 0x27) != 0 && (v840 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v501 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
        v841 = *(_QWORD *)(v501 + 16);
        if (v841)
          v842 = 0;
        else
          v842 = v514;
        if (v842)
          goto LABEL_432;
        if (v841)
        {
          v61 = 0;
          goto LABEL_436;
        }
      }
      else if (v514)
      {
LABEL_432:
        v551 = *v503;
        if ((*v503 & 1) != 0)
        {
          v873 = *(uint64_t (**)(uint64_t *))(v551 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v874 = (uint64_t *)(v8 - 16);
          else
            v874 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v874;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1856);
          v551 = v873(&v1127);
        }
        v552 = v500 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v553 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create((JSC::JSGlobalObject *)v8, v551, v552, v495, v496, v497, v498, v499);
        else
          v553 = (unint64_t)JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v551, v552, v495, v496, v497, v498, v499);
        v61 = v553;
        goto LABEL_436;
      }
LABEL_1053:
      v1104 = v500 - v33;
      v843 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v501 + 41952) + 1080), v495, v496, v497, v498, v499);
      if (*(_DWORD *)(v501 + 80))
      {
        v885 = *(_DWORD *)(v501 + 80);
        if ((v885 & 0x27) != 0 && (v885 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v501 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
        if (*(_QWORD *)(v501 + 16))
          goto LABEL_1135;
      }
      if (v843 == 10)
      {
        v844 = *(_QWORD *)(v8 + 1856);
        if ((v844 & 1) != 0)
        {
          v845 = *(uint64_t (**)(uint64_t *))(v844 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v846 = (uint64_t *)(v8 - 16);
          else
            v846 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v846;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1856);
LABEL_1581:
          v844 = v845(&v1127);
          goto LABEL_1071;
        }
        goto LABEL_1071;
      }
      if ((v843 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v843 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v847 = (uint64_t *)(v8 + 1856);
        v848 = *(_QWORD *)(v8 + 1856);
        if ((v848 & 1) != 0)
        {
          v1006 = *(void (**)(uint64_t *))(v848 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v1007 = (uint64_t *)(v8 - 16);
          else
            v1007 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v1007;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1856);
          v1006(&v1127);
        }
        v849 = *(_QWORD *)(v8 + 1864);
        if (v502 == v8 && v849 == v843)
        {
          v850 = *(_QWORD *)(v8 + 2512);
          v851 = (v850 & 1) != 0 ? (v850 >> 1) & 3 : *(unsigned __int8 *)(v850 + 4);
          if (v851 == 1)
          {
            v852 = *(_QWORD *)(v8 + 2360);
            v853 = (v852 & 1) != 0 ? (v852 >> 1) & 3 : *(unsigned __int8 *)(v852 + 4);
            if (v853 == 1)
            {
LABEL_1070:
              v844 = *v847;
              if ((*v847 & 1) != 0)
              {
                v845 = *(uint64_t (**)(uint64_t *))(v844 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1017 = (uint64_t *)(v8 - 16);
                else
                  v1017 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1017;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1856);
                goto LABEL_1581;
              }
LABEL_1071:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v854 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create((JSC::JSGlobalObject *)v8, v844, v1104, v495, v496, v497, v498, v499);
              else
                v854 = (unint64_t)JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v844, v1104, v495, v496, v497, v498, v499);
              v61 = v854;
LABEL_436:
              if (*(_DWORD *)(v9 + 80))
              {
                v664 = *(_DWORD *)(v9 + 80);
                if ((v664 & 0x27) != 0 && (v664 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if (v33 >= v1114)
                return v61;
              LOBYTE(v1127) = 0;
              LOBYTE(v1128) = 0;
              v554 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v494, v495, v496, v497, v498, v499);
              if (!v555)
                goto LABEL_588;
              if (v500 >= v554)
                v556 = v554;
              else
                v556 = v500;
              v424 = v556 - v33;
              if (v556 > v33)
              {
                switch(*(_BYTE *)(v61 + 5))
                {
                  case '\'':
                    goto LABEL_500;
                  case '(':
                    goto LABEL_512;
                  case ')':
                    goto LABEL_506;
                  case '*':
                    goto LABEL_508;
                  case '+':
                    goto LABEL_502;
                  case ',':
                    goto LABEL_514;
                  case '-':
                    goto LABEL_516;
                  case '.':
                    goto LABEL_510;
                  case '/':
                    goto LABEL_520;
                  case '0':
                    goto LABEL_504;
                  case '1':
                    goto LABEL_518;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A957DCLL);
                }
              }
              return v61;
            }
          }
        }
        v977 = JSC::JSObject::get((unsigned int *)v843, v8, *(_QWORD *)(*(_QWORD *)(v501 + 41952) + 2752), v495, v496, v497, v498, v499);
        if (!*(_DWORD *)(v501 + 80))
          goto LABEL_1373;
        v1039 = *(_DWORD *)(v501 + 80);
        if ((v1039 & 0x27) != 0 && (v1039 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v501 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
        if (!*(_QWORD *)(v501 + 16))
        {
LABEL_1373:
          if ((v977 & 0xFFFFFFFFFFFFFFF7) == 2 || v977 == v849)
            goto LABEL_1070;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v978 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1104))
          {
            v1072 = (double)v1104;
          }
          else
          {
            if ((v1104 & 0x80000000) == 0)
            {
              v979 = v1104 | 0xFFFE000000000000;
              goto LABEL_1377;
            }
            v1072 = (double)v1104;
          }
          v979 = *(_QWORD *)&v1072 + 0x2000000000000;
LABEL_1377:
          *((_QWORD *)&v1130 + 1) = v979;
          v980 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v501 + 80))
          {
            v1050 = *(_DWORD *)(v501 + 80);
            if ((v1050 & 0x27) != 0 && (v1050 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v501 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
            if (*(_QWORD *)(v501 + 16))
              goto LABEL_1388;
            v978 = v1129;
            v980 = v1128;
          }
          v1117 = (JSC **)v978;
          LODWORD(v1118) = v980;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v977 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v977 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v977, v976);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v977 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v977);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v977, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v977, v981, v982, v983);
LABEL_1383:
              if (*(_DWORD *)(v501 + 80))
              {
                v1061 = *(_DWORD *)(v501 + 80);
                if ((v1061 & 0x27) != 0 && (v1061 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v501 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
                if (*(_QWORD *)(v501 + 16))
                  goto LABEL_1388;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v984 = "species constructor did not return a TypedArray View";
                v985 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v494, v495, v496, v497, v498, v499);
                if (*(_DWORD *)(v501 + 80))
                {
                  v1083 = *(_DWORD *)(v501 + 80);
                  if ((v1083 & 0x27) != 0 && (v1083 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v501 + 64), 7u, (uint64_t)v494, v495, v496, v497, v498, v499);
                  if (*(_QWORD *)(v501 + 16))
                    goto LABEL_1388;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1094 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v494, v495, v496, v497, v498, v499);
                  if ((_BYTE)v976)
                    v1028 = v1094;
                  else
                    v1028 = 0;
                }
                else
                {
                  v1028 = *(_QWORD *)(v61 + 24);
                }
                if (v1028 < v1104)
                {
                  v984 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v985 = 74;
                }
                else
                {
                  if (*(unsigned __int8 *)(v61 + 5) - 39 < 9)
                    goto LABEL_1653;
                  v984 = "Content types of source and created typed arrays are different";
                  v985 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v984, v985);
LABEL_1388:
              v61 = 0;
LABEL_1653:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v976, (uint64_t)v494, v495, v496, v497, v498, v499);
              goto LABEL_436;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1383;
        }
      }
LABEL_1135:
      v61 = 0;
      goto LABEL_436;
    case '0':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v612 = *(_DWORD *)(v9 + 80);
        if ((v612 & 0x27) != 0 && (v612 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v108, v109, v110, v111, v112, v113);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v114 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v108, v109, v110, v111, v112, v113);
      if (!v120)
        goto LABEL_588;
      v121 = v114;
      if (*((_DWORD *)a2 + 8) == 1)
        v122 = 10;
      else
        v122 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v122, v114, 0, v115, v116, v117, v118, v119);
      if (*(_DWORD *)(v9 + 80))
      {
        v623 = *(_DWORD *)(v9 + 80);
        if ((v623 & 0x27) != 0 && (v623 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v123, v124, v125, v126, v127, v128);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v130 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v131 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v130, v121, v121, v125, v126, v127, v128, v129);
      if (*(_DWORD *)(v9 + 80))
      {
        v635 = v131;
        v636 = *(_DWORD *)(v9 + 80);
        if ((v636 & 0x27) != 0 && (v636 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
        v131 = v635;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1107 = v131;
      if (v33 <= v131)
        v138 = v131;
      else
        v138 = v33;
      v139 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v139;
      v140 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v140 != v8)
        goto LABEL_765;
      v141 = (uint64_t *)(v8 + 1880);
      v142 = *(_QWORD *)(v8 + 1880);
      if ((v142 & 1) != 0)
      {
        v682 = *(uint64_t (**)(uint64_t *))(v142 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v683 = (uint64_t *)(v8 - 16);
        else
          v683 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v683;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1880);
        v142 = v682(&v1127);
      }
      v143 = *(_QWORD *)(v8 + 2528);
      if ((v143 & 1) != 0)
        v144 = (v143 >> 1) & 3;
      else
        v144 = *(unsigned __int8 *)(v143 + 4);
      v145 = *(_QWORD *)(v142 + 48);
      if (!v144)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 10);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_356;
      v146 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v146)
        v146 = *(_QWORD *)(v10 + 16);
      v147 = v145 == 2 ? 0 : v145;
      if (v147 == v146
        && ((v148 = *(_QWORD *)(v8 + 2528), (v148 & 1) != 0)
          ? (v149 = (v148 >> 1) & 3)
          : (v149 = *(unsigned __int8 *)(v148 + 4)),
            v149 == 1))
      {
        v150 = *(_QWORD *)(v8 + 2360);
        if ((v150 & 1) != 0)
          v151 = (v150 >> 1) & 3;
        else
          v151 = *(unsigned __int8 *)(v150 + 4);
        v152 = v151 == 1;
      }
      else
      {
LABEL_356:
        v152 = 0;
      }
      if (*(_DWORD *)(v139 + 80))
      {
        v684 = *(_DWORD *)(v139 + 80);
        if ((v684 & 0x27) != 0 && (v684 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v139 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
        v685 = *(_QWORD *)(v139 + 16);
        if (v685)
          v686 = 0;
        else
          v686 = v152;
        if (v686)
          goto LABEL_359;
        if (v685)
        {
          v61 = 0;
          goto LABEL_363;
        }
      }
      else if (v152)
      {
LABEL_359:
        v521 = *v141;
        if ((*v141 & 1) != 0)
        {
          v857 = *(uint64_t (**)(uint64_t *))(v521 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v858 = (uint64_t *)(v8 - 16);
          else
            v858 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v858;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1880);
          v521 = v857(&v1127);
        }
        v522 = v138 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v523 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create((JSC::JSGlobalObject *)v8, v521, v522, v133, v134, v135, v136, v137);
        else
          v523 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v521, v522, v133, v134, v135, v136, v137);
        v61 = v523;
        goto LABEL_363;
      }
LABEL_765:
      v1096 = v138 - v33;
      v687 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v139 + 41952) + 1080), v133, v134, v135, v136, v137);
      if (*(_DWORD *)(v139 + 80))
      {
        v876 = *(_DWORD *)(v139 + 80);
        if ((v876 & 0x27) != 0 && (v876 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v139 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
        if (*(_QWORD *)(v139 + 16))
          goto LABEL_1117;
      }
      if (v687 == 10)
      {
        v688 = *(_QWORD *)(v8 + 1880);
        if ((v688 & 1) != 0)
        {
          v689 = *(uint64_t (**)(uint64_t *))(v688 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v690 = (uint64_t *)(v8 - 16);
          else
            v690 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v690;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1880);
LABEL_1549:
          v688 = v689(&v1127);
          goto LABEL_783;
        }
        goto LABEL_783;
      }
      if ((v687 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v687 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v691 = (uint64_t *)(v8 + 1880);
        v692 = *(_QWORD *)(v8 + 1880);
        if ((v692 & 1) != 0)
        {
          v988 = *(void (**)(uint64_t *))(v692 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v989 = (uint64_t *)(v8 - 16);
          else
            v989 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v989;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1880);
          v988(&v1127);
        }
        v693 = *(_QWORD *)(v8 + 1888);
        if (v140 == v8 && v693 == v687)
        {
          v694 = *(_QWORD *)(v8 + 2528);
          v695 = (v694 & 1) != 0 ? (v694 >> 1) & 3 : *(unsigned __int8 *)(v694 + 4);
          if (v695 == 1)
          {
            v696 = *(_QWORD *)(v8 + 2360);
            v697 = (v696 & 1) != 0 ? (v696 >> 1) & 3 : *(unsigned __int8 *)(v696 + 4);
            if (v697 == 1)
            {
LABEL_782:
              v688 = *v691;
              if ((*v691 & 1) != 0)
              {
                v689 = *(uint64_t (**)(uint64_t *))(v688 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1009 = (uint64_t *)(v8 - 16);
                else
                  v1009 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1009;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1880);
                goto LABEL_1549;
              }
LABEL_783:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v698 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create((JSC::JSGlobalObject *)v8, v688, v1096, v133, v134, v135, v136, v137);
              else
                v698 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v688, v1096, v133, v134, v135, v136, v137);
              v61 = v698;
LABEL_363:
              if (*(_DWORD *)(v9 + 80))
              {
                v655 = *(_DWORD *)(v9 + 80);
                if ((v655 & 0x27) != 0 && (v655 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if (v33 >= v1107)
                return v61;
              LOBYTE(v1127) = 0;
              LOBYTE(v1128) = 0;
              v524 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v132, v133, v134, v135, v136, v137);
              if (!v525)
                goto LABEL_588;
              if (v138 >= v524)
                v526 = v524;
              else
                v526 = v138;
              v424 = v526 - v33;
              if (v526 > v33)
              {
                switch(*(_BYTE *)(v61 + 5))
                {
                  case '\'':
                    goto LABEL_500;
                  case '(':
                    goto LABEL_512;
                  case ')':
                    goto LABEL_506;
                  case '*':
                    goto LABEL_508;
                  case '+':
                    goto LABEL_502;
                  case ',':
                    goto LABEL_514;
                  case '-':
                    goto LABEL_516;
                  case '.':
                    goto LABEL_510;
                  case '/':
                    goto LABEL_520;
                  case '0':
                    goto LABEL_504;
                  case '1':
                    goto LABEL_518;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A9575CLL);
                }
              }
              return v61;
            }
          }
        }
        v897 = JSC::JSObject::get((unsigned int *)v687, v8, *(_QWORD *)(*(_QWORD *)(v139 + 41952) + 2752), v133, v134, v135, v136, v137);
        if (!*(_DWORD *)(v139 + 80))
          goto LABEL_1233;
        v1031 = *(_DWORD *)(v139 + 80);
        if ((v1031 & 0x27) != 0 && (v1031 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v139 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
        if (!*(_QWORD *)(v139 + 16))
        {
LABEL_1233:
          if ((v897 & 0xFFFFFFFFFFFFFFF7) == 2 || v897 == v693)
            goto LABEL_782;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v898 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1096))
          {
            v1064 = (double)v1096;
          }
          else
          {
            if ((v1096 & 0x80000000) == 0)
            {
              v899 = v1096 | 0xFFFE000000000000;
              goto LABEL_1237;
            }
            v1064 = (double)v1096;
          }
          v899 = *(_QWORD *)&v1064 + 0x2000000000000;
LABEL_1237:
          *((_QWORD *)&v1130 + 1) = v899;
          v900 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v139 + 80))
          {
            v1042 = *(_DWORD *)(v139 + 80);
            if ((v1042 & 0x27) != 0 && (v1042 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v139 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
            if (*(_QWORD *)(v139 + 16))
              goto LABEL_1601;
            v898 = v1129;
            v900 = v1128;
          }
          v1117 = (JSC **)v898;
          LODWORD(v1118) = v900;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v897 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v897 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v897, v896);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v897 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v897);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v897, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v897, v901, v902, v903);
LABEL_1243:
              if (*(_DWORD *)(v139 + 80))
              {
                v1053 = *(_DWORD *)(v139 + 80);
                if ((v1053 & 0x27) != 0 && (v1053 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v139 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
                if (*(_QWORD *)(v139 + 16))
                  goto LABEL_1601;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v904 = "species constructor did not return a TypedArray View";
                v905 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v132, v133, v134, v135, v136, v137);
                if (*(_DWORD *)(v139 + 80))
                {
                  v1075 = *(_DWORD *)(v139 + 80);
                  if ((v1075 & 0x27) != 0 && (v1075 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v139 + 64), 7u, (uint64_t)v132, v133, v134, v135, v136, v137);
                  if (*(_QWORD *)(v139 + 16))
                    goto LABEL_1601;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1086 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v132, v133, v134, v135, v136, v137);
                  if ((_BYTE)v896)
                    v1020 = v1086;
                  else
                    v1020 = 0;
                }
                else
                {
                  v1020 = *(_QWORD *)(v61 + 24);
                }
                if (v1020 < v1096)
                {
                  v904 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v905 = 74;
                }
                else
                {
                  if ((*(_BYTE *)(v61 + 5) & 0xFE) == 0x30)
                  {
LABEL_1602:
                    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v896, (uint64_t)v132, v133, v134, v135, v136, v137);
                    goto LABEL_363;
                  }
                  v904 = "Content types of source and created typed arrays are different";
                  v905 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v904, v905);
LABEL_1601:
              v61 = 0;
              goto LABEL_1602;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1243;
        }
      }
LABEL_1117:
      v61 = 0;
      goto LABEL_363;
    case '1':
      v1126 = (JSC::VM *)v9;
      JSC::validateTypedArray(this, (JSC::ArrayBuffer **)v10, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v9 + 80))
      {
        v620 = *(_DWORD *)(v9 + 80);
        if ((v620 & 0x27) != 0 && (v620 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v425, v426, v427, v428, v429, v430);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      LOBYTE(v1127) = 0;
      LOBYTE(v1128) = 0;
      v431 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, v425, v426, v427, v428, v429, v430);
      if (!v437)
        goto LABEL_588;
      v438 = v431;
      if (*((_DWORD *)a2 + 8) == 1)
        v439 = 10;
      else
        v439 = *((_QWORD *)a2 + 6);
      v33 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, (JSC::JSObject *)v439, v431, 0, v432, v433, v434, v435, v436);
      if (*(_DWORD *)(v9 + 80))
      {
        v631 = *(_DWORD *)(v9 + 80);
        if ((v631 & 0x27) != 0 && (v631 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v440, v441, v442, v443, v444, v445);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v447 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      v448 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)v8, v447, v438, v438, v442, v443, v444, v445, v446);
      if (*(_DWORD *)(v9 + 80))
      {
        v650 = v448;
        v651 = *(_DWORD *)(v9 + 80);
        if ((v651 & 0x27) != 0 && (v651 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
        v448 = v650;
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v1113 = v448;
      if (v33 <= v448)
        v455 = v448;
      else
        v455 = v33;
      v456 = *(_QWORD *)(v8 + 56);
      v1135 = (JSC::VM *)v456;
      v457 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v457 != v8)
        goto LABEL_1022;
      v458 = (uint64_t *)(v8 + 1904);
      v459 = *(_QWORD *)(v8 + 1904);
      if ((v459 & 1) != 0)
      {
        v821 = *(uint64_t (**)(uint64_t *))(v459 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v822 = (uint64_t *)(v8 - 16);
        else
          v822 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1127 = *v822;
        v1128 = v8;
        v1129 = (unint64_t *)(v8 + 1904);
        v459 = v821(&v1127);
      }
      v460 = *(_QWORD *)(v8 + 2544);
      if ((v460 & 1) != 0)
        v461 = (v460 >> 1) & 3;
      else
        v461 = *(unsigned __int8 *)(v460 + 4);
      v462 = *(_QWORD *)(v459 + 48);
      if (!v461)
        JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)v8, 11);
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
        goto LABEL_414;
      v463 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v463)
        v463 = *(_QWORD *)(v10 + 16);
      v464 = v462 == 2 ? 0 : v462;
      if (v464 == v463
        && ((v465 = *(_QWORD *)(v8 + 2544), (v465 & 1) != 0)
          ? (v466 = (v465 >> 1) & 3)
          : (v466 = *(unsigned __int8 *)(v465 + 4)),
            v466 == 1))
      {
        v467 = *(_QWORD *)(v8 + 2360);
        if ((v467 & 1) != 0)
          v468 = (v467 >> 1) & 3;
        else
          v468 = *(unsigned __int8 *)(v467 + 4);
        v469 = v468 == 1;
      }
      else
      {
LABEL_414:
        v469 = 0;
      }
      if (*(_DWORD *)(v456 + 80))
      {
        v823 = *(_DWORD *)(v456 + 80);
        if ((v823 & 0x27) != 0 && (v823 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v456 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
        v824 = *(_QWORD *)(v456 + 16);
        if (v824)
          v825 = 0;
        else
          v825 = v469;
        if (v825)
          goto LABEL_417;
        if (v824)
        {
          v61 = 0;
          goto LABEL_421;
        }
      }
      else if (v469)
      {
LABEL_417:
        v545 = *v458;
        if ((*v458 & 1) != 0)
        {
          v871 = *(uint64_t (**)(uint64_t *))(v545 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v872 = (uint64_t *)(v8 - 16);
          else
            v872 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v872;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1904);
          v545 = v871(&v1127);
        }
        v546 = v455 - v33;
        if ((*(_BYTE *)(v10 + 40) & 6) != 0)
          v547 = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create((JSC::JSGlobalObject *)v8, v545, v546, v450, v451, v452, v453, v454);
        else
          v547 = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v545, v546, v450, v451, v452, v453, v454);
        v61 = v547;
        goto LABEL_421;
      }
LABEL_1022:
      v1103 = v455 - v33;
      v826 = JSC::JSObject::get((unsigned int *)v10, v8, *(_QWORD *)(*(_QWORD *)(v456 + 41952) + 1080), v450, v451, v452, v453, v454);
      if (*(_DWORD *)(v456 + 80))
      {
        v884 = *(_DWORD *)(v456 + 80);
        if ((v884 & 0x27) != 0 && (v884 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v456 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
        if (*(_QWORD *)(v456 + 16))
          goto LABEL_1133;
      }
      if (v826 == 10)
      {
        v827 = *(_QWORD *)(v8 + 1904);
        if ((v827 & 1) != 0)
        {
          v828 = *(uint64_t (**)(uint64_t *))(v827 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v829 = (uint64_t *)(v8 - 16);
          else
            v829 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v829;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1904);
LABEL_1577:
          v827 = v828(&v1127);
          goto LABEL_1040;
        }
        goto LABEL_1040;
      }
      if ((v826 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v826 + 5) <= 0x16u)
      {
        JSC::throwTypeError(v8, &v1135, (uint64_t)"constructor Property should not be null", 40);
      }
      else
      {
        v830 = (uint64_t *)(v8 + 1904);
        v831 = *(_QWORD *)(v8 + 1904);
        if ((v831 & 1) != 0)
        {
          v1004 = *(void (**)(uint64_t *))(v831 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v1005 = (uint64_t *)(v8 - 16);
          else
            v1005 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1127 = *v1005;
          v1128 = v8;
          v1129 = (unint64_t *)(v8 + 1904);
          v1004(&v1127);
        }
        v832 = *(_QWORD *)(v8 + 1912);
        if (v457 == v8 && v832 == v826)
        {
          v833 = *(_QWORD *)(v8 + 2544);
          v834 = (v833 & 1) != 0 ? (v833 >> 1) & 3 : *(unsigned __int8 *)(v833 + 4);
          if (v834 == 1)
          {
            v835 = *(_QWORD *)(v8 + 2360);
            v836 = (v835 & 1) != 0 ? (v835 >> 1) & 3 : *(unsigned __int8 *)(v835 + 4);
            if (v836 == 1)
            {
LABEL_1039:
              v827 = *v830;
              if ((*v830 & 1) != 0)
              {
                v828 = *(uint64_t (**)(uint64_t *))(v827 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1016 = (uint64_t *)(v8 - 16);
                else
                  v1016 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1127 = *v1016;
                v1128 = v8;
                v1129 = (unint64_t *)(v8 + 1904);
                goto LABEL_1577;
              }
LABEL_1040:
              if ((*(_BYTE *)(v10 + 40) & 6) != 0)
                v837 = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create((JSC::JSGlobalObject *)v8, v827, v1103, v450, v451, v452, v453, v454);
              else
                v837 = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v827, v1103, v450, v451, v452, v453, v454);
              v61 = v837;
LABEL_421:
              if (*(_DWORD *)(v9 + 80))
              {
                v663 = *(_DWORD *)(v9 + 80);
                if ((v663 & 0x27) != 0 && (v663 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if (v33 >= v1113)
                return v61;
              LOBYTE(v1127) = 0;
              LOBYTE(v1128) = 0;
              v548 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1127, (uint64_t)v449, v450, v451, v452, v453, v454);
              if (!v549)
                goto LABEL_588;
              if (v455 >= v548)
                v550 = v548;
              else
                v550 = v455;
              v424 = v550 - v33;
              if (v550 > v33)
              {
                switch(*(_BYTE *)(v61 + 5))
                {
                  case '\'':
LABEL_500:
                    v538 = v61;
                    v536 = v8;
                    v537 = v10;
LABEL_501:
                    JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromTypedArray(v538, v536, 0, v537, v33, v424, 0, v421);
                    break;
                  case '(':
LABEL_512:
                    v596 = v61;
                    v597 = (JSC::JSGlobalObject *)v8;
                    v598 = v10;
LABEL_513:
                    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromTypedArray(v596, v597, 0, v598, v33, v424, 0, v421);
                    break;
                  case ')':
LABEL_506:
                    v587 = v61;
                    v588 = v8;
                    v589 = v10;
LABEL_507:
                    JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromTypedArray(v587, v588, 0, v589, v33, v424, 0, v421);
                    break;
                  case '*':
LABEL_508:
                    v590 = v61;
                    v591 = v8;
                    v592 = v10;
LABEL_509:
                    JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromTypedArray(v590, v591, 0, v592, v33, v424, 0, v421);
                    break;
                  case '+':
LABEL_502:
                    v581 = v61;
                    v582 = v8;
                    v583 = v10;
LABEL_503:
                    JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromTypedArray(v581, v582, 0, v583, v33, v424, 0, v421);
                    break;
                  case ',':
LABEL_514:
                    v599 = v61;
                    v600 = (JSC::JSGlobalObject *)v8;
                    v601 = v10;
LABEL_515:
                    JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromTypedArray(v599, v600, 0, v601, v33, v424, 0, v421);
                    break;
                  case '-':
LABEL_516:
                    v602 = v61;
                    v603 = v8;
                    v604 = v10;
LABEL_517:
                    JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromTypedArray(v602, v603, 0, v604, v33, v424, 0, v421);
                    break;
                  case '.':
LABEL_510:
                    v593 = v61;
                    v594 = (JSC::JSGlobalObject *)v8;
                    v595 = v10;
LABEL_511:
                    JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromTypedArray(v593, v594, 0, v595, v33, v424, 0, v421);
                    break;
                  case '/':
LABEL_520:
                    v608 = v61;
                    v609 = v8;
                    v610 = v10;
LABEL_521:
                    JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromTypedArray(v608, v609, 0, v610, v33, v424, 0, v421);
                    break;
                  case '0':
LABEL_504:
                    v584 = v61;
                    v585 = v8;
                    v586 = v10;
LABEL_505:
                    JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromTypedArray(v584, v585, 0, v586, v33, v424, 0, v421);
                    break;
                  case '1':
LABEL_518:
                    v605 = v61;
                    v606 = v8;
                    v607 = v10;
LABEL_519:
                    JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setFromTypedArray(v605, v606, 0, v607, v33, v424, 0, v421);
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A957BCLL);
                }
              }
              return v61;
            }
          }
        }
        v967 = JSC::JSObject::get((unsigned int *)v826, v8, *(_QWORD *)(*(_QWORD *)(v456 + 41952) + 2752), v450, v451, v452, v453, v454);
        if (!*(_DWORD *)(v456 + 80))
          goto LABEL_1357;
        v1038 = *(_DWORD *)(v456 + 80);
        if ((v1038 & 0x27) != 0 && (v1038 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v456 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
        if (!*(_QWORD *)(v456 + 16))
        {
LABEL_1357:
          if ((v967 & 0xFFFFFFFFFFFFFFF7) == 2 || v967 == v832)
            goto LABEL_1039;
          LOBYTE(v1127) = 0;
          HIDWORD(v1128) = 8;
          v968 = (unint64_t *)&v1130 + 1;
          v1129 = (unint64_t *)&v1130 + 1;
          v1130 = 0u;
          v1131 = 0u;
          v1132 = 0u;
          v1133 = 0u;
          v1134 = 0;
          if (HIDWORD(v1103))
          {
            v1071 = (double)v1103;
          }
          else
          {
            if ((v1103 & 0x80000000) == 0)
            {
              v969 = v1103 | 0xFFFE000000000000;
              goto LABEL_1361;
            }
            v1071 = (double)v1103;
          }
          v969 = *(_QWORD *)&v1071 + 0x2000000000000;
LABEL_1361:
          *((_QWORD *)&v1130 + 1) = v969;
          v970 = 1;
          LODWORD(v1128) = 1;
          if (*(_DWORD *)(v456 + 80))
          {
            v1049 = *(_DWORD *)(v456 + 80);
            if ((v1049 & 0x27) != 0 && (v1049 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v456 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
            if (*(_QWORD *)(v456 + 16))
              goto LABEL_1646;
            v968 = v1129;
            v970 = v1128;
          }
          v1117 = (JSC **)v968;
          LODWORD(v1118) = v970;
          v1124 = *(JSC::VM **)(v8 + 56);
          if ((v967 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v1136) = 0;
          }
          else
          {
            if (*(_BYTE *)(v967 + 5) == 26)
              JSC::JSFunction::getConstructData(&v1136, (uint64_t *)v967, v966);
            else
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v967 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&v1136, v967);
            if ((_BYTE)v1136)
            {
              v61 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v8 + 56) + 90560), (WTF::Thread *)v967, (unsigned __int8 *)&v1136, (uint64_t)&v1117, (WTF *)v967, v971, v972, v973);
LABEL_1367:
              if (*(_DWORD *)(v456 + 80))
              {
                v1060 = *(_DWORD *)(v456 + 80);
                if ((v1060 & 0x27) != 0 && (v1060 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v456 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
                if (*(_QWORD *)(v456 + 16))
                  goto LABEL_1646;
              }
              if ((v61 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v61 + 5) - 50 < 0xFFFFFFF5)
              {
                v974 = "species constructor did not return a TypedArray View";
                v975 = 53;
              }
              else
              {
                JSC::validateTypedArray((JSC *)v8, (JSC::ArrayBuffer **)v61, v449, v450, v451, v452, v453, v454);
                if (*(_DWORD *)(v456 + 80))
                {
                  v1082 = *(_DWORD *)(v456 + 80);
                  if ((v1082 & 0x27) != 0 && (v1082 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v456 + 64), 7u, (uint64_t)v449, v450, v451, v452, v453, v454);
                  if (*(_QWORD *)(v456 + 16))
                    goto LABEL_1646;
                }
                if ((*(_BYTE *)(v61 + 40) & 7u) > 2)
                {
                  LOBYTE(v1136) = 0;
                  v1137 = 0;
                  v1093 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v61, (uint64_t)&v1136, (uint64_t)v449, v450, v451, v452, v453, v454);
                  if ((_BYTE)v966)
                    v1027 = v1093;
                  else
                    v1027 = 0;
                }
                else
                {
                  v1027 = *(_QWORD *)(v61 + 24);
                }
                if (v1027 < v1103)
                {
                  v974 = "TypedArray.prototype.slice constructed typed array of insufficient length";
                  v975 = 74;
                }
                else
                {
                  if ((*(_BYTE *)(v61 + 5) & 0xFE) == 0x30)
                  {
LABEL_1647:
                    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1128, v966, (uint64_t)v449, v450, v451, v452, v453, v454);
                    goto LABEL_421;
                  }
                  v974 = "Content types of source and created typed arrays are different";
                  v975 = 63;
                }
              }
              JSC::throwTypeError(v8, &v1135, (uint64_t)v974, v975);
LABEL_1646:
              v61 = 0;
              goto LABEL_1647;
            }
          }
          JSC::throwTypeError(v8, &v1124, (uint64_t)"species is not a constructor", 29);
          v61 = 0;
          goto LABEL_1367;
        }
      }
LABEL_1133:
      v61 = 0;
      goto LABEL_421;
    default:
      v58 = "Receiver should be a typed array view";
      v59 = (JSC::VM **)&v1116;
      v60 = 38;
      return JSC::throwTypeError((unint64_t)this, v59, (uint64_t)v58, v60);
  }
}

uint64_t JSC::typedArrayViewProtoFuncSubarray(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;
  JSC::JSObject *v15;
  JSC::JSObject *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  JSC::ArrayBuffer *v21;
  uint64_t v22;
  JSC *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::ArrayBuffer *v34;
  BOOL v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  const char *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  JSC::JSObject *v55;
  unint64_t v56;
  JSC::JSObject *v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  JSC::ArrayBuffer *v62;
  JSC *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  unint64_t v76;
  double v77;
  double v78;
  uint64_t (*v79)(JSC::JSObject **);
  JSC::JSObject **v80;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  JSC::VM **v90;
  uint64_t (*v91)(JSC::JSObject **);
  JSC::JSObject **v92;
  uint64_t v93;
  JSC::JSObject *v94;
  unsigned int v95;
  uint64_t v96;
  JSC::JSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int8x16_t v105;
  JSC::JSObject *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int8x16_t v115;
  JSC::JSObject *v116;
  unint64_t v117;
  JSC::JSGlobalObject **v118;
  JSC::ArrayBuffer *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  JSC::ArrayBuffer *v132;
  JSC::JSGlobalObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int8x16_t v141;
  JSC::JSObject *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int8x16_t v151;
  JSC::JSObject *v152;
  unint64_t v153;
  JSC::JSGlobalObject **v154;
  JSC::ArrayBuffer *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int8x16_t v167;
  JSC::JSObject *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int8x16_t v177;
  JSC::JSObject *v178;
  unint64_t v179;
  JSC::JSGlobalObject **v180;
  JSC::ArrayBuffer *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int8x16_t v194;
  JSC::JSObject *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int8x16_t v204;
  JSC::JSObject *v205;
  unint64_t v206;
  JSC::JSGlobalObject **v207;
  JSC::ArrayBuffer *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  int8x16_t v221;
  JSC::JSObject *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  int8x16_t v231;
  JSC::JSObject *v232;
  unint64_t v233;
  JSC::JSGlobalObject **v234;
  JSC::ArrayBuffer *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __n128 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  int8x16_t v248;
  JSC::JSObject *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int8x16_t v258;
  JSC::JSObject *v259;
  unint64_t v260;
  JSC::JSGlobalObject **v261;
  JSC::ArrayBuffer *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __n128 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  int8x16_t v275;
  JSC::JSObject *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int8x16_t v285;
  JSC::JSObject *v286;
  unint64_t v287;
  JSC::JSGlobalObject **v288;
  JSC::ArrayBuffer *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __n128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  int8x16_t v302;
  JSC::JSObject *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  int8x16_t v312;
  JSC::JSObject *v313;
  unint64_t v314;
  JSC::JSGlobalObject **v315;
  JSC::ArrayBuffer *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  __n128 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  int8x16_t v329;
  JSC::JSObject *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  int8x16_t v339;
  JSC::JSObject *v340;
  unint64_t v341;
  JSC::JSGlobalObject **v342;
  JSC::ArrayBuffer *v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  __n128 v348;
  uint64_t v349;
  uint64_t v350;
  JSC::JSObject *v351;
  uint64_t v352;
  uint64_t v353;
  JSC::JSObject *v354;
  unint64_t v355;
  double v356;
  uint64_t (*v357)(JSC::JSObject **);
  JSC::JSObject **v358;
  BOOL v359;
  uint64_t v360;
  __n128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  double v369;
  JSC::VM **v370;
  uint64_t (*v371)(JSC::JSObject **);
  JSC::JSObject **v372;
  uint64_t v373;
  JSC::JSObject *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  JSC::JSArrayBufferView *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  uint64_t v391;
  JSC::JSObject *v392;
  uint64_t v393;
  uint64_t v394;
  JSC::JSObject *v395;
  uint64_t v396;
  uint64_t v397;
  JSC::JSObject *v398;
  uint64_t v399;
  uint64_t v400;
  JSC::JSObject *v401;
  uint64_t v402;
  uint64_t v403;
  JSC::JSObject *v404;
  uint64_t v405;
  uint64_t v406;
  JSC::JSObject *v407;
  uint64_t v408;
  uint64_t v409;
  JSC::JSObject *v410;
  void (*v411)(JSC::JSObject **);
  JSC::JSObject **v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  JSC::JSObject *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  JSC::JSObject *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  JSC::JSObject *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  JSC::JSObject *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  JSC::JSObject *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  JSC::JSObject *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  JSC::JSObject *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  JSC::JSObject *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  JSC::JSObject *v457;
  const char *v458;
  uint64_t v459;
  unint64_t v460;
  JSC::VM *v461;
  unint64_t *v462;
  unint64_t *v463;
  unint64_t *v464;
  JSC::ArrayBuffer **v465;
  unint64_t *v466;
  unint64_t *v467;
  JSC::JSGlobalObject **v468;
  JSC::ArrayBuffer **v469;
  unint64_t *v470;
  unint64_t *v471;
  unint64_t v472;
  JSC::ArrayBuffer *v473;
  _DWORD *v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  JSC::ArrayBuffer *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  int v482;
  JSC::JSObject *v483;
  uint64_t v484;
  JSC::VM **v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  uint64_t v490;
  JSC::VM *v491;

  v10 = *(JSC::VM **)(this + 56);
  v461 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) == 0)
  {
    v12 = *(unsigned __int8 *)(v11 + 5);
    if (v12 > 0x16)
    {
      if (v12 == 40)
      {
        v479 = (uint64_t)v10;
        v480 = this;
        v478 = (JSC::ArrayBuffer *)v11;
        if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
        {
          LOBYTE(v483) = 0;
          LOBYTE(v484) = 0;
          v76 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&v483, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((_BYTE)a2)
            v14 = v76;
          else
            v14 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(v11 + 24);
        }
        if (*((_DWORD *)a2 + 8) == 1)
        {
          v477 = 10;
        }
        else
        {
          v15 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
          v477 = (unint64_t)v15;
          if ((unint64_t)v15 > 0xFFFDFFFFFFFFFFFFLL)
            goto LABEL_8;
          v460 = (unint64_t)v15 - 0x2000000000000;
          if (v460 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            a9.i64[0] = v460;
            goto LABEL_74;
          }
        }
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v477, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_74:
        *(double *)a9.i64 = trunc(*(double *)a9.i64 + 0.0);
        if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v54 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v54)
          && ((_DWORD)v54 || (a9.i64[0] & 0x8000000000000000) == 0))
        {
          v55 = (JSC::JSObject *)(v54 | 0xFFFE000000000000);
        }
        else
        {
          v55 = (JSC::JSObject *)(a9.i64[0] + 0x2000000000000);
        }
        v477 = (unint64_t)v55;
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          return 0;
        }
LABEL_8:
        if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
        {
          v476 = 10;
        }
        else
        {
          v16 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
          v476 = (unint64_t)v16;
          if (v16 != (JSC::JSObject *)10 && (unint64_t)v16 <= 0xFFFDFFFFFFFFFFFFLL)
          {
            *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v476, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
            if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v93 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v93)
              && ((_DWORD)v93 || (a9.i64[0] & 0x8000000000000000) == 0))
            {
              v94 = (JSC::JSObject *)(v93 | 0xFFFE000000000000);
            }
            else
            {
              v94 = (JSC::JSObject *)(a9.i64[0] + 0x2000000000000);
            }
            v476 = (unint64_t)v94;
            if (*((_DWORD *)v10 + 20))
            {
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
                return 0;
            }
          }
        }
        v483 = (JSC::JSObject *)v477;
        if (v477 == 10)
        {
          v18 = 0;
        }
        else if (v477 < 0xFFFE000000000000)
        {
          *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity(&v483, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          v77 = (double)v14;
          if (*(double *)a9.i64 >= 0.0)
          {
            if (*(double *)a9.i64 <= v77)
              v18 = (unint64_t)*(double *)a9.i64;
            else
              v18 = v14;
          }
          else
          {
            *(double *)a9.i64 = *(double *)a9.i64 + v77;
            if (*(double *)a9.i64 <= 0.0)
              *(double *)a9.i64 = 0.0;
            v18 = (unint64_t)*(double *)a9.i64;
          }
        }
        else
        {
          if ((int)v477 >= v14)
            v17 = v14;
          else
            v17 = (int)v477;
          if ((v477 & 0x80000000) != 0)
            v18 = ((int)v477 + v14) & ~((uint64_t)((int)v477 + v14) >> 63);
          else
            v18 = v17;
        }
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          return 0;
        }
        LOBYTE(v474) = 0;
        LOBYTE(v475) = 0;
        v19 = *(unsigned __int8 *)(v11 + 40);
        if ((v19 & 1) != 0)
        {
          if (v476 == 10)
            goto LABEL_30;
          v483 = (JSC::JSObject *)v476;
        }
        else
        {
          v483 = (JSC::JSObject *)v476;
          if (v476 == 10)
          {
LABEL_26:
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              return 0;
            }
            v20 = v14 - v18;
            if (v14 < v18)
              v20 = 0;
            v474 = (_DWORD *)v20;
            LOBYTE(v475) = 1;
            v19 = *(unsigned __int8 *)(v11 + 40);
LABEL_30:
            if (v19 == 88)
            {
LABEL_31:
              v21 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v11 + 8) - 8);
              goto LABEL_32;
            }
            if (v19 == 48 || v19 == 16)
            {
              v21 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            else
            {
              v53 = v19 - 90;
              if (v53 > 0x33)
                goto LABEL_235;
              if (((1 << v53) & 0xF400000000000) == 0)
              {
                if (((1 << v53) & 0xF) == 0)
                  goto LABEL_235;
                goto LABEL_31;
              }
              v21 = *(JSC::ArrayBuffer **)(v11 + 48);
            }
LABEL_32:
            if (v21)
            {
              *(_DWORD *)v21 += 2;
              v472 = *(_QWORD *)(v11 + 32) + v18;
              v473 = v21;
              v468 = (JSC::JSGlobalObject **)&v480;
              v469 = &v473;
              v470 = &v472;
              v471 = (unint64_t *)&v474;
              v462 = (unint64_t *)v10;
              v463 = &v480;
              v464 = (unint64_t *)&v478;
              v465 = &v473;
              v466 = &v472;
              v467 = (unint64_t *)&v474;
              v22 = *(_QWORD *)(this + 56);
              v491 = (JSC::VM *)v22;
              v23 = *(JSC **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
              if (v23 == (JSC *)this)
              {
                v24 = *(_QWORD *)(this + 1688);
                if ((v24 & 1) != 0)
                {
                  v79 = *(uint64_t (**)(JSC::JSObject **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((this & 8) != 0)
                    v80 = (JSC::JSObject **)(this - 16);
                  else
                    v80 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
                  v483 = *v80;
                  v484 = this;
                  v485 = (JSC::VM **)(this + 1688);
                  v24 = v79(&v483);
                }
                v25 = *(_QWORD *)(this + 2400);
                if ((v25 & 1) != 0)
                  v26 = (v25 >> 1) & 3;
                else
                  v26 = *(unsigned __int8 *)(v25 + 4);
                v27 = *(_QWORD *)(v24 + 48);
                if (!v26)
                  JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)this, 2);
                if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
                  goto LABEL_40;
                v45 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                if (!v45)
                  v45 = *(_QWORD *)(v11 + 16);
                v46 = v27 == 2 ? 0 : v27;
                if (v46 == v45
                  && ((v47 = *(_QWORD *)(this + 2400), (v47 & 1) != 0)
                    ? (v48 = (v47 >> 1) & 3)
                    : (v48 = *(unsigned __int8 *)(v47 + 4)),
                      v48 == 1))
                {
                  v49 = *(_QWORD *)(this + 2360);
                  if ((v49 & 1) != 0)
                    v50 = (v49 >> 1) & 3;
                  else
                    v50 = *(unsigned __int8 *)(v49 + 4);
                  v28 = v50 == 1;
                }
                else
                {
LABEL_40:
                  v28 = 0;
                }
                if (*(_DWORD *)(v22 + 80))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (!hasExceptionsAfterHandlingTraps && v28)
                  {
LABEL_43:
                    if (*((_BYTE *)v473 + 64))
                    {
                      v29 = *(_QWORD *)(v480 + 1704);
                      if ((v29 & 1) == 0)
                        goto LABEL_45;
                      v90 = (JSC::VM **)(v480 + 1704);
                    }
                    else
                    {
                      v29 = *(_QWORD *)(v480 + 1688);
                      if ((v29 & 1) == 0)
                      {
LABEL_45:
                        v30 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create((JSC::JSGlobalObject *)v480, v29, (uint64_t)&v473, v472, (unint64_t)v474, v475, (__n128)a9, a7, a8);
LABEL_46:
                        v33 = v30;
LABEL_47:
                        v34 = v473;
                        v473 = 0;
                        if (v34)
                        {
                          v35 = *(_DWORD *)v34 == 2;
                          *(_DWORD *)v34 -= 2;
                          if (v35)
                          {
                            JSC::ArrayBuffer::~ArrayBuffer(v34, v31, v32, a4, a5, a6, a7, a8);
                            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
                          }
                        }
                        return v33;
                      }
                      v90 = (JSC::VM **)(v480 + 1688);
                    }
                    v91 = *(uint64_t (**)(JSC::JSObject **))(v29 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v480 & 8) != 0)
                      v92 = (JSC::JSObject **)(v480 - 16);
                    else
                      v92 = (JSC::JSObject **)(v480 & 0xFFFFFFFFFFFFC000 | 8);
                    v483 = *v92;
                    v484 = v480;
                    v485 = v90;
                    v29 = v91(&v483);
                    goto LABEL_45;
                  }
                  if (hasExceptionsAfterHandlingTraps)
                    goto LABEL_412;
                }
                else if (v28)
                {
                  goto LABEL_43;
                }
              }
              v82 = JSC::JSObject::get((unsigned int *)v11, this, *(_QWORD *)(*(_QWORD *)(v22 + 41952) + 1080), a4, a5, a6, a7, a8);
              if (*(_DWORD *)(v22 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)v31, v32, a4, a5, a6, a7, a8))
              {
                goto LABEL_412;
              }
              if (v82 == 10)
                goto LABEL_180;
              if ((v82 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v82 + 5) > 0x16u)
              {
                v84 = *(_QWORD *)(this + 1688);
                if ((v84 & 1) != 0)
                {
                  v411 = *(void (**)(JSC::JSObject **))(v84 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((this & 8) != 0)
                    v412 = (JSC::JSObject **)(this - 16);
                  else
                    v412 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
                  v483 = *v412;
                  v484 = this;
                  v485 = (JSC::VM **)(this + 1688);
                  v411(&v483);
                }
                v85 = *(_QWORD *)(this + 1696);
                if (v23 == (JSC *)this && v85 == v82)
                {
                  v86 = *(_QWORD *)(this + 2400);
                  v87 = (v86 & 1) != 0 ? (v86 >> 1) & 3 : *(unsigned __int8 *)(v86 + 4);
                  if (v87 == 1)
                  {
                    v88 = *(_QWORD *)(this + 2360);
                    v89 = (v88 & 1) != 0 ? (v88 >> 1) & 3 : *(unsigned __int8 *)(v88 + 4);
                    if (v89 == 1)
                      goto LABEL_180;
                  }
                }
                v368 = JSC::JSObject::get((unsigned int *)v82, this, *(_QWORD *)(*(_QWORD *)(v22 + 41952) + 2752), a4, a5, a6, a7, a8);
                if (!*(_DWORD *)(v22 + 80)
                  || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)v31, v32, a4, a5, a6, a7, a8))
                {
                  if ((v368 & 0xFFFFFFFFFFFFFFF7) != 2 && v368 != v85)
                    goto LABEL_436;
LABEL_180:
                  v30 = JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(&v468, v83, (uint64_t)v31, v32, a4, a5, a6, a7, a8);
                  goto LABEL_46;
                }
LABEL_412:
                v33 = 0;
                goto LABEL_47;
              }
LABEL_411:
              JSC::throwTypeError(this, &v491, (uint64_t)"constructor Property should not be null", 40);
              goto LABEL_412;
            }
LABEL_235:
            v133 = (JSC::JSGlobalObject *)&v479;
LABEL_236:
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)this, v133);
            return 0;
          }
        }
        if (v476 < 0xFFFE000000000000)
        {
          *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity(&v483, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          v78 = (double)v14;
          if (*(double *)a9.i64 >= 0.0)
          {
            if (*(double *)a9.i64 <= v78)
              v14 = (unint64_t)*(double *)a9.i64;
          }
          else
          {
            *(double *)a9.i64 = *(double *)a9.i64 + v78;
            if (*(double *)a9.i64 <= 0.0)
              *(double *)a9.i64 = 0.0;
            v14 = (unint64_t)*(double *)a9.i64;
          }
        }
        else if ((v476 & 0x80000000) != 0)
        {
          v14 = ((int)v476 + v14) & ~((uint64_t)((int)v476 + v14) >> 63);
        }
        else if ((int)v476 < v14)
        {
          v14 = (int)v476;
        }
        goto LABEL_26;
      }
      switch(*(_BYTE *)(v11 + 5))
      {
        case '\'':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v140 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_241;
          }
          *(double *)v141.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v134, v135, v136, v137, v138, v139, v141);
          if ((v141.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v353 = (int)*(double *)v141.i64, *(double *)v141.i64 == (double)(int)v353)
            && ((_DWORD)v353 || (v141.i64[0] & 0x8000000000000000) == 0))
          {
            v354 = (JSC::JSObject *)(v353 | 0xFFFE000000000000);
          }
          else
          {
            v354 = (JSC::JSObject *)(v141.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v354;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v352, v134, v135, v136, v137, v138, v139))
          {
            return 0;
          }
LABEL_241:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v142 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v142;
            if (v142 != (JSC::JSObject *)10 && (unint64_t)v142 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v141.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v134, v135, v136, v137, v138, v139, v141);
              if ((v141.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v421 = (int)*(double *)v141.i64, *(double *)v141.i64 == (double)(int)v421)
                && ((_DWORD)v421 || (v141.i64[0] & 0x8000000000000000) == 0))
              {
                v422 = (JSC::JSObject *)(v421 | 0xFFFE000000000000);
              }
              else
              {
                v422 = (JSC::JSObject *)(v141.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v422;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v418, v419, v420, v136, v137, v138, v139))
                  return 0;
              }
            }
          }
          v150 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v140, 0, v136, v137, v138, v139, v141);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v143, v144, v145, v146, v147, v148, v149))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v152 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v153 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v140, v140, v146, v147, v148, v149, v151);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v152, v144, v145, v146, v147, v148, v149))
            {
              return 0;
            }
            v154 = (JSC::JSGlobalObject **)(v153 - v150);
            if (v153 < v150)
              v154 = 0;
            v468 = v154;
            LOBYTE(v469) = 1;
          }
          v155 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v152, v144, v145, v146, v147, v148, v149);
          if (!v155)
            goto LABEL_539;
          *(_DWORD *)v155 += 2;
          v477 = *(_QWORD *)(v11 + 32) + v150;
          v478 = v155;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = (unint64_t)JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>((uint64_t *)this, v11, (uint64_t)&v462, (uint64_t)&v483, v156, v157, v158, v159);
          goto LABEL_220;
        case ')':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v247 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_297;
          }
          *(double *)v248.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v241, v242, v243, v244, v245, v246, v248);
          if ((v248.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v400 = (int)*(double *)v248.i64, *(double *)v248.i64 == (double)(int)v400)
            && ((_DWORD)v400 || (v248.i64[0] & 0x8000000000000000) == 0))
          {
            v401 = (JSC::JSObject *)(v400 | 0xFFFE000000000000);
          }
          else
          {
            v401 = (JSC::JSObject *)(v248.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v401;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v399, v241, v242, v243, v244, v245, v246))
          {
            return 0;
          }
LABEL_297:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v249 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v249;
            if (v249 != (JSC::JSObject *)10 && (unint64_t)v249 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v248.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v241, v242, v243, v244, v245, v246, v248);
              if ((v248.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v441 = (int)*(double *)v248.i64, *(double *)v248.i64 == (double)(int)v441)
                && ((_DWORD)v441 || (v248.i64[0] & 0x8000000000000000) == 0))
              {
                v442 = (JSC::JSObject *)(v441 | 0xFFFE000000000000);
              }
              else
              {
                v442 = (JSC::JSObject *)(v248.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v442;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v438, v439, v440, v243, v244, v245, v246))
                  return 0;
              }
            }
          }
          v257 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v247, 0, v243, v244, v245, v246, v248);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v250, v251, v252, v253, v254, v255, v256))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v259 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v260 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v247, v247, v253, v254, v255, v256, v258);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v259, v251, v252, v253, v254, v255, v256))
            {
              return 0;
            }
            v261 = (JSC::JSGlobalObject **)(v260 - v257);
            if (v260 < v257)
              v261 = 0;
            v468 = v261;
            LOBYTE(v469) = 1;
          }
          v262 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v259, v251, v252, v253, v254, v255, v256);
          if (!v262)
            goto LABEL_539;
          *(_DWORD *)v262 += 2;
          v477 = *(_QWORD *)(v11 + 32) + v257;
          v478 = v262;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(this, v11, &v462, (uint64_t)&v483, v263, v264, v265, v266, v267);
          goto LABEL_220;
        case '*':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v193 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_269;
          }
          *(double *)v194.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v187, v188, v189, v190, v191, v192, v194);
          if ((v194.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v394 = (int)*(double *)v194.i64, *(double *)v194.i64 == (double)(int)v394)
            && ((_DWORD)v394 || (v194.i64[0] & 0x8000000000000000) == 0))
          {
            v395 = (JSC::JSObject *)(v394 | 0xFFFE000000000000);
          }
          else
          {
            v395 = (JSC::JSObject *)(v194.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v395;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v393, v187, v188, v189, v190, v191, v192))
          {
            return 0;
          }
LABEL_269:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v195 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v195;
            if (v195 != (JSC::JSObject *)10 && (unint64_t)v195 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v194.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v187, v188, v189, v190, v191, v192, v194);
              if ((v194.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v431 = (int)*(double *)v194.i64, *(double *)v194.i64 == (double)(int)v431)
                && ((_DWORD)v431 || (v194.i64[0] & 0x8000000000000000) == 0))
              {
                v432 = (JSC::JSObject *)(v431 | 0xFFFE000000000000);
              }
              else
              {
                v432 = (JSC::JSObject *)(v194.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v432;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v428, v429, v430, v189, v190, v191, v192))
                  return 0;
              }
            }
          }
          v203 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v193, 0, v189, v190, v191, v192, v194);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v196, v197, v198, v199, v200, v201, v202))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v205 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v206 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v193, v193, v199, v200, v201, v202, v204);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v205, v197, v198, v199, v200, v201, v202))
            {
              return 0;
            }
            v207 = (JSC::JSGlobalObject **)(v206 - v203);
            if (v206 < v203)
              v207 = 0;
            v468 = v207;
            LOBYTE(v469) = 1;
          }
          v208 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v205, v197, v198, v199, v200, v201, v202);
          if (!v208)
            goto LABEL_539;
          *(_DWORD *)v208 += 2;
          v477 = *(_QWORD *)(v11 + 32) + 2 * v203;
          v478 = v208;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = (unint64_t)JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(this, v11, (JSC::JSGlobalObject ***)&v462, (uint64_t)&v483, v209, v210, v211, v212, v213);
          goto LABEL_220;
        case '+':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v274 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_311;
          }
          *(double *)v275.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v268, v269, v270, v271, v272, v273, v275);
          if ((v275.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v403 = (int)*(double *)v275.i64, *(double *)v275.i64 == (double)(int)v403)
            && ((_DWORD)v403 || (v275.i64[0] & 0x8000000000000000) == 0))
          {
            v404 = (JSC::JSObject *)(v403 | 0xFFFE000000000000);
          }
          else
          {
            v404 = (JSC::JSObject *)(v275.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v404;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v402, v268, v269, v270, v271, v272, v273))
          {
            return 0;
          }
LABEL_311:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v276 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v276;
            if (v276 != (JSC::JSObject *)10 && (unint64_t)v276 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v275.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v268, v269, v270, v271, v272, v273, v275);
              if ((v275.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v446 = (int)*(double *)v275.i64, *(double *)v275.i64 == (double)(int)v446)
                && ((_DWORD)v446 || (v275.i64[0] & 0x8000000000000000) == 0))
              {
                v447 = (JSC::JSObject *)(v446 | 0xFFFE000000000000);
              }
              else
              {
                v447 = (JSC::JSObject *)(v275.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v447;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v443, v444, v445, v270, v271, v272, v273))
                  return 0;
              }
            }
          }
          v284 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v274, 0, v270, v271, v272, v273, v275);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v277, v278, v279, v280, v281, v282, v283))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v286 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v287 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v274, v274, v280, v281, v282, v283, v285);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v286, v278, v279, v280, v281, v282, v283))
            {
              return 0;
            }
            v288 = (JSC::JSGlobalObject **)(v287 - v284);
            if (v287 < v284)
              v288 = 0;
            v468 = v288;
            LOBYTE(v469) = 1;
          }
          v289 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v286, v278, v279, v280, v281, v282, v283);
          if (!v289)
            goto LABEL_539;
          *(_DWORD *)v289 += 2;
          v477 = *(_QWORD *)(v11 + 32) + 2 * v284;
          v478 = v289;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = (unint64_t)JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(this, v11, (JSC::JSGlobalObject ***)&v462, (uint64_t)&v483, v290, v291, v292, v293, v294);
          goto LABEL_220;
        case ',':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v301 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_325;
          }
          *(double *)v302.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v295, v296, v297, v298, v299, v300, v302);
          if ((v302.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v406 = (int)*(double *)v302.i64, *(double *)v302.i64 == (double)(int)v406)
            && ((_DWORD)v406 || (v302.i64[0] & 0x8000000000000000) == 0))
          {
            v407 = (JSC::JSObject *)(v406 | 0xFFFE000000000000);
          }
          else
          {
            v407 = (JSC::JSObject *)(v302.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v407;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v405, v295, v296, v297, v298, v299, v300))
          {
            return 0;
          }
LABEL_325:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v303 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v303;
            if (v303 != (JSC::JSObject *)10 && (unint64_t)v303 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v302.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v295, v296, v297, v298, v299, v300, v302);
              if ((v302.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v451 = (int)*(double *)v302.i64, *(double *)v302.i64 == (double)(int)v451)
                && ((_DWORD)v451 || (v302.i64[0] & 0x8000000000000000) == 0))
              {
                v452 = (JSC::JSObject *)(v451 | 0xFFFE000000000000);
              }
              else
              {
                v452 = (JSC::JSObject *)(v302.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v452;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v448, v449, v450, v297, v298, v299, v300))
                  return 0;
              }
            }
          }
          v311 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v301, 0, v297, v298, v299, v300, v302);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v304, v305, v306, v307, v308, v309, v310))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v313 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v314 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v301, v301, v307, v308, v309, v310, v312);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v313, v305, v306, v307, v308, v309, v310))
            {
              return 0;
            }
            v315 = (JSC::JSGlobalObject **)(v314 - v311);
            if (v314 < v311)
              v315 = 0;
            v468 = v315;
            LOBYTE(v469) = 1;
          }
          v316 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v313, v305, v306, v307, v308, v309, v310);
          if (!v316)
            goto LABEL_539;
          *(_DWORD *)v316 += 2;
          v477 = *(_QWORD *)(v11 + 32) + 4 * v311;
          v478 = v316;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(this, v11, (JSC::JSGlobalObject ***)&v462, (uint64_t)&v483, v317, v318, v319, v320, v321);
          goto LABEL_220;
        case '-':
          v479 = (uint64_t)v10;
          v480 = this;
          v478 = (JSC::ArrayBuffer *)v11;
          if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
          {
            LOBYTE(v483) = 0;
            LOBYTE(v484) = 0;
            v355 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&v483, (uint64_t)a3, a4, a5, a6, a7, a8);
            if ((_BYTE)a2)
              v56 = v355;
            else
              v56 = 0;
          }
          else
          {
            v56 = *(_QWORD *)(v11 + 24);
          }
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v477 = 10;
          }
          else
          {
            v477 = *((_QWORD *)a2 + 6);
            if (v477 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_91;
          }
          *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v477, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v96 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v96)
            && ((_DWORD)v96 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v97 = (JSC::JSObject *)(v96 | 0xFFFE000000000000);
          }
          else
          {
            v97 = (JSC::JSObject *)(a9.i64[0] + 0x2000000000000);
          }
          v477 = (unint64_t)v97;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
LABEL_91:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v476 = 10;
          }
          else
          {
            v57 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v476 = (unint64_t)v57;
            if (v57 != (JSC::JSObject *)10 && (unint64_t)v57 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v476, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
              if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v373 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v373)
                && ((_DWORD)v373 || (a9.i64[0] & 0x8000000000000000) == 0))
              {
                v374 = (JSC::JSObject *)(v373 | 0xFFFE000000000000);
              }
              else
              {
                v374 = (JSC::JSObject *)(a9.i64[0] + 0x2000000000000);
              }
              v476 = (unint64_t)v374;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
                  return 0;
              }
            }
          }
          v483 = (JSC::JSObject *)v477;
          if (v477 == 10)
          {
            v59 = 0;
          }
          else if (v477 < 0xFFFE000000000000)
          {
            *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity(&v483, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
            v356 = (double)v56;
            if (*(double *)a9.i64 >= 0.0)
            {
              if (*(double *)a9.i64 <= v356)
                v59 = (unint64_t)*(double *)a9.i64;
              else
                v59 = v56;
            }
            else
            {
              *(double *)a9.i64 = *(double *)a9.i64 + v356;
              if (*(double *)a9.i64 <= 0.0)
                *(double *)a9.i64 = 0.0;
              v59 = (unint64_t)*(double *)a9.i64;
            }
          }
          else
          {
            if ((int)v477 >= v56)
              v58 = v56;
            else
              v58 = (int)v477;
            if ((v477 & 0x80000000) != 0)
              v59 = ((int)v477 + v56) & ~((uint64_t)((int)v477 + v56) >> 63);
            else
              v59 = v58;
          }
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          LOBYTE(v474) = 0;
          LOBYTE(v475) = 0;
          v60 = *(unsigned __int8 *)(v11 + 40);
          if ((v60 & 1) != 0)
          {
            if (v476 == 10)
              goto LABEL_113;
            v483 = (JSC::JSObject *)v476;
          }
          else
          {
            v483 = (JSC::JSObject *)v476;
            if (v476 == 10)
              goto LABEL_109;
          }
          if (v476 < 0xFFFE000000000000)
          {
            *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity(&v483, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
            v369 = (double)v56;
            if (*(double *)a9.i64 >= 0.0)
            {
              if (*(double *)a9.i64 <= v369)
                v56 = (unint64_t)*(double *)a9.i64;
            }
            else
            {
              *(double *)a9.i64 = *(double *)a9.i64 + v369;
              if (*(double *)a9.i64 <= 0.0)
                *(double *)a9.i64 = 0.0;
              v56 = (unint64_t)*(double *)a9.i64;
            }
          }
          else if ((v476 & 0x80000000) != 0)
          {
            v56 = ((int)v476 + v56) & ~((uint64_t)((int)v476 + v56) >> 63);
          }
          else if ((int)v476 < v56)
          {
            v56 = (int)v476;
          }
LABEL_109:
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            return 0;
          }
          v61 = v56 - v59;
          if (v56 < v59)
            v61 = 0;
          v474 = (_DWORD *)v61;
          LOBYTE(v475) = 1;
          v60 = *(unsigned __int8 *)(v11 + 40);
LABEL_113:
          if (v60 == 88)
            goto LABEL_114;
          if (v60 == 48 || v60 == 16)
          {
            v62 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v95 = v60 - 90;
            if (v95 > 0x33)
              goto LABEL_235;
            if (((1 << v95) & 0xF400000000000) != 0)
            {
              v62 = *(JSC::ArrayBuffer **)(v11 + 48);
            }
            else
            {
              if (((1 << v95) & 0xF) == 0)
                goto LABEL_235;
LABEL_114:
              v62 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v11 + 8) - 8);
            }
          }
          if (!v62)
            goto LABEL_235;
          *(_DWORD *)v62 += 2;
          v472 = *(_QWORD *)(v11 + 32) + 4 * v59;
          v473 = v62;
          v468 = (JSC::JSGlobalObject **)&v480;
          v469 = &v473;
          v470 = &v472;
          v471 = (unint64_t *)&v474;
          v462 = (unint64_t *)v10;
          v463 = &v480;
          v464 = (unint64_t *)&v478;
          v465 = &v473;
          v466 = &v472;
          v467 = (unint64_t *)&v474;
          v22 = *(_QWORD *)(this + 56);
          v491 = (JSC::VM *)v22;
          v63 = *(JSC **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
          if (v63 != (JSC *)this)
            goto LABEL_394;
          v64 = *(_QWORD *)(this + 1808);
          if ((v64 & 1) != 0)
          {
            v357 = *(uint64_t (**)(JSC::JSObject **))(v64 & 0xFFFFFFFFFFFFFFFCLL);
            if ((this & 8) != 0)
              v358 = (JSC::JSObject **)(this - 16);
            else
              v358 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
            v483 = *v358;
            v484 = this;
            v485 = (JSC::VM **)(this + 1808);
            v64 = v357(&v483);
          }
          v65 = *(_QWORD *)(this + 2480);
          if ((v65 & 1) != 0)
            v66 = (v65 >> 1) & 3;
          else
            v66 = *(unsigned __int8 *)(v65 + 4);
          v67 = *(_QWORD *)(v64 + 48);
          if (!v66)
            JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)this, 7);
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
            goto LABEL_238;
          v68 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
          if (!v68)
            v68 = *(_QWORD *)(v11 + 16);
          v69 = v67 == 2 ? 0 : v67;
          if (v69 == v68
            && ((v70 = *(_QWORD *)(this + 2480), (v70 & 1) != 0)
              ? (v71 = (v70 >> 1) & 3)
              : (v71 = *(unsigned __int8 *)(v70 + 4)),
                v71 == 1))
          {
            v72 = *(_QWORD *)(this + 2360);
            if ((v72 & 1) != 0)
              v73 = (v72 >> 1) & 3;
            else
              v73 = *(unsigned __int8 *)(v72 + 4);
            v74 = v73 == 1;
          }
          else
          {
LABEL_238:
            v74 = 0;
          }
          if (*(_DWORD *)(v22 + 80))
          {
            v359 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (!v359 && v74)
            {
LABEL_137:
              if (*((_BYTE *)v473 + 64))
              {
                v75 = *(_QWORD *)(v480 + 1824);
                if ((v75 & 1) == 0)
                  goto LABEL_139;
                v370 = (JSC::VM **)(v480 + 1824);
              }
              else
              {
                v75 = *(_QWORD *)(v480 + 1808);
                if ((v75 & 1) == 0)
                {
LABEL_139:
                  v30 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create((JSC::JSGlobalObject *)v480, v75, (uint64_t)&v473, v472, (unint64_t)v474, v475, (__n128)a9, a7, a8);
                  goto LABEL_46;
                }
                v370 = (JSC::VM **)(v480 + 1808);
              }
              v371 = *(uint64_t (**)(JSC::JSObject **))(v75 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v480 & 8) != 0)
                v372 = (JSC::JSObject **)(v480 - 16);
              else
                v372 = (JSC::JSObject **)(v480 & 0xFFFFFFFFFFFFC000 | 8);
              v483 = *v372;
              v484 = v480;
              v485 = v370;
              v75 = v371(&v483);
              goto LABEL_139;
            }
            if (v359)
              goto LABEL_412;
          }
          else if (v74)
          {
            goto LABEL_137;
          }
LABEL_394:
          v360 = JSC::JSObject::get((unsigned int *)v11, this, *(_QWORD *)(*(_QWORD *)(v22 + 41952) + 1080), a4, a5, a6, a7, a8);
          if (*(_DWORD *)(v22 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)v31, v32, a4, a5, a6, a7, a8))
          {
            goto LABEL_412;
          }
          if (v360 != 10)
          {
            if ((v360 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v360 + 5) <= 0x16u)
              goto LABEL_411;
            v362 = JSC::JSGlobalObject::typedArrayConstructor(this, 7);
            v363 = v362;
            if (v63 != (JSC *)this
              || v362 != v360
              || ((v364 = *(_QWORD *)(this + 2480), (v364 & 1) != 0)
                ? (v365 = (v364 >> 1) & 3)
                : (v365 = *(unsigned __int8 *)(v364 + 4)),
                  v365 != 1
               || ((v366 = *(_QWORD *)(this + 2360), (v366 & 1) != 0)
                 ? (v367 = (v366 >> 1) & 3)
                 : (v367 = *(unsigned __int8 *)(v366 + 4)),
                   v367 != 1)))
            {
              v368 = JSC::JSObject::get((unsigned int *)v360, this, *(_QWORD *)(*(_QWORD *)(v22 + 41952) + 2752), a4, a5, a6, a7, a8);
              if (*(_DWORD *)(v22 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)v31, v32, a4, a5, a6, a7, a8))
              {
                goto LABEL_412;
              }
              if ((v368 & 0xFFFFFFFFFFFFFFF7) != 2 && v368 != v363)
              {
LABEL_436:
                LOBYTE(v483) = 0;
                v484 = 0x800000000;
                v486 = 0u;
                v487 = 0u;
                v488 = 0u;
                v489 = 0u;
                v485 = (JSC::VM **)&v486 + 1;
                v490 = 0;
                JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}::operator()((uint64_t)&v462, (uint64_t)&v483);
                if (*(_DWORD *)(v22 + 80)
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, v375, v376, v377, v378, v379, v380, v381))
                {
                  goto LABEL_665;
                }
                v481 = (uint64_t)v485;
                v482 = v484;
                v33 = JSC::construct(this, v368, (uint64_t)&v481, (uint64_t)"species is not a constructor", 29);
                if (*(_DWORD *)(v22 + 80))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, v382, (uint64_t)v383, v384, v385, v386, v387, v388))
                  {
                    goto LABEL_665;
                  }
                }
                if ((v33 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v33 + 5) - 50 < 0xFFFFFFF5)
                {
                  v458 = "species constructor did not return a TypedArray View";
                  v459 = 53;
                }
                else
                {
                  JSC::validateTypedArray((JSC *)this, (JSC::ArrayBuffer **)v33, v383, v384, v385, v386, v387, v388);
                  if (*(_DWORD *)(v22 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)v389, (uint64_t)v383, v384, v385, v386, v387, v388))
                  {
                    goto LABEL_665;
                  }
                  if (*(unsigned __int8 *)(v33 + 5) - 39 < 9)
                  {
LABEL_442:
                    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v484, v389, (uint64_t)v383, v384, v385, v386, v387, v388);
                    goto LABEL_47;
                  }
                  v458 = "Content types of source and created typed arrays are different";
                  v459 = 63;
                }
                JSC::throwTypeError(this, &v491, (uint64_t)v458, v459);
LABEL_665:
                v33 = 0;
                goto LABEL_442;
              }
            }
          }
          v30 = JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(&v468, v361, (uint64_t)v31, v32, a4, a5, a6, a7, a8);
          goto LABEL_46;
        case '.':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v104 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_208;
          }
          *(double *)v105.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v98, v99, v100, v101, v102, v103, v105);
          if ((v105.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v350 = (int)*(double *)v105.i64, *(double *)v105.i64 == (double)(int)v350)
            && ((_DWORD)v350 || (v105.i64[0] & 0x8000000000000000) == 0))
          {
            v351 = (JSC::JSObject *)(v350 | 0xFFFE000000000000);
          }
          else
          {
            v351 = (JSC::JSObject *)(v105.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v351;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v349, v98, v99, v100, v101, v102, v103))
          {
            return 0;
          }
LABEL_208:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v106 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v106;
            if (v106 != (JSC::JSObject *)10 && (unint64_t)v106 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v105.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v98, v99, v100, v101, v102, v103, v105);
              if ((v105.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v416 = (int)*(double *)v105.i64, *(double *)v105.i64 == (double)(int)v416)
                && ((_DWORD)v416 || (v105.i64[0] & 0x8000000000000000) == 0))
              {
                v417 = (JSC::JSObject *)(v416 | 0xFFFE000000000000);
              }
              else
              {
                v417 = (JSC::JSObject *)(v105.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v417;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v413, v414, v415, v100, v101, v102, v103))
                  return 0;
              }
            }
          }
          v114 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v104, 0, v100, v101, v102, v103, v105);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v107, v108, v109, v110, v111, v112, v113))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v116 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v117 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v104, v104, v110, v111, v112, v113, v115);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v116, v108, v109, v110, v111, v112, v113))
            {
              return 0;
            }
            v118 = (JSC::JSGlobalObject **)(v117 - v114);
            if (v117 < v114)
              v118 = 0;
            v468 = v118;
            LOBYTE(v469) = 1;
          }
          v119 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v116, v108, v109, v110, v111, v112, v113);
          if (!v119)
            goto LABEL_539;
          *(_DWORD *)v119 += 2;
          v477 = *(_QWORD *)(v11 + 32) + 4 * v114;
          v478 = v119;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = (unint64_t)JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>((uint64_t *)this, v11, (uint64_t)&v462, (uint64_t)&v483, v120, v121, v122, v123);
          goto LABEL_220;
        case '/':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v166 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_255;
          }
          *(double *)v167.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v160, v161, v162, v163, v164, v165, v167);
          if ((v167.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v391 = (int)*(double *)v167.i64, *(double *)v167.i64 == (double)(int)v391)
            && ((_DWORD)v391 || (v167.i64[0] & 0x8000000000000000) == 0))
          {
            v392 = (JSC::JSObject *)(v391 | 0xFFFE000000000000);
          }
          else
          {
            v392 = (JSC::JSObject *)(v167.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v392;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v390, v160, v161, v162, v163, v164, v165))
          {
            return 0;
          }
LABEL_255:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v168 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v168;
            if (v168 != (JSC::JSObject *)10 && (unint64_t)v168 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v167.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v160, v161, v162, v163, v164, v165, v167);
              if ((v167.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v426 = (int)*(double *)v167.i64, *(double *)v167.i64 == (double)(int)v426)
                && ((_DWORD)v426 || (v167.i64[0] & 0x8000000000000000) == 0))
              {
                v427 = (JSC::JSObject *)(v426 | 0xFFFE000000000000);
              }
              else
              {
                v427 = (JSC::JSObject *)(v167.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v427;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v423, v424, v425, v162, v163, v164, v165))
                  return 0;
              }
            }
          }
          v176 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v166, 0, v162, v163, v164, v165, v167);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v169, v170, v171, v172, v173, v174, v175))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v178 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v179 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v166, v166, v172, v173, v174, v175, v177);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v178, v170, v171, v172, v173, v174, v175))
            {
              return 0;
            }
            v180 = (JSC::JSGlobalObject **)(v179 - v176);
            if (v179 < v176)
              v180 = 0;
            v468 = v180;
            LOBYTE(v469) = 1;
          }
          v181 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v178, v170, v171, v172, v173, v174, v175);
          if (!v181)
            goto LABEL_539;
          *(_DWORD *)v181 += 2;
          v477 = *(_QWORD *)(v11 + 32) + 8 * v176;
          v478 = v181;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = (unint64_t)JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(this, v11, (JSC::JSGlobalObject ***)&v462, (uint64_t)&v483, v182, v183, v184, v185, v186);
          goto LABEL_220;
        case '0':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v328 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_339;
          }
          *(double *)v329.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v322, v323, v324, v325, v326, v327, v329);
          if ((v329.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v409 = (int)*(double *)v329.i64, *(double *)v329.i64 == (double)(int)v409)
            && ((_DWORD)v409 || (v329.i64[0] & 0x8000000000000000) == 0))
          {
            v410 = (JSC::JSObject *)(v409 | 0xFFFE000000000000);
          }
          else
          {
            v410 = (JSC::JSObject *)(v329.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v410;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v408, v322, v323, v324, v325, v326, v327))
          {
            return 0;
          }
LABEL_339:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v330 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v330;
            if (v330 != (JSC::JSObject *)10 && (unint64_t)v330 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v329.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v322, v323, v324, v325, v326, v327, v329);
              if ((v329.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v456 = (int)*(double *)v329.i64, *(double *)v329.i64 == (double)(int)v456)
                && ((_DWORD)v456 || (v329.i64[0] & 0x8000000000000000) == 0))
              {
                v457 = (JSC::JSObject *)(v456 | 0xFFFE000000000000);
              }
              else
              {
                v457 = (JSC::JSObject *)(v329.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v457;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v453, v454, v455, v324, v325, v326, v327))
                  return 0;
              }
            }
          }
          v338 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v328, 0, v324, v325, v326, v327, v329);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v331, v332, v333, v334, v335, v336, v337))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v340 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v341 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v328, v328, v334, v335, v336, v337, v339);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v340, v332, v333, v334, v335, v336, v337))
            {
              return 0;
            }
            v342 = (JSC::JSGlobalObject **)(v341 - v338);
            if (v341 < v338)
              v342 = 0;
            v468 = v342;
            LOBYTE(v469) = 1;
          }
          v343 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v340, v332, v333, v334, v335, v336, v337);
          if (!v343)
            goto LABEL_539;
          *(_DWORD *)v343 += 2;
          v477 = *(_QWORD *)(v11 + 32) + 8 * v338;
          v478 = v343;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(this, v11, &v462, (uint64_t)&v483, v344, v345, v346, v347, v348);
          goto LABEL_220;
        case '1':
          v481 = this;
          v474 = v10;
          v491 = (JSC::VM *)v11;
          v220 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 8) == 1)
          {
            v480 = 10;
          }
          else
          {
            v480 = *((_QWORD *)a2 + 6);
            if (v480 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_283;
          }
          *(double *)v221.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v480, (JSC::JSGlobalObject *)this, v214, v215, v216, v217, v218, v219, v221);
          if ((v221.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v397 = (int)*(double *)v221.i64, *(double *)v221.i64 == (double)(int)v397)
            && ((_DWORD)v397 || (v221.i64[0] & 0x8000000000000000) == 0))
          {
            v398 = (JSC::JSObject *)(v397 | 0xFFFE000000000000);
          }
          else
          {
            v398 = (JSC::JSObject *)(v221.i64[0] + 0x2000000000000);
          }
          v480 = (unint64_t)v398;
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v396, v214, v215, v216, v217, v218, v219))
          {
            return 0;
          }
LABEL_283:
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v479 = 10;
          }
          else
          {
            v222 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
            v479 = (uint64_t)v222;
            if (v222 != (JSC::JSObject *)10 && (unint64_t)v222 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              *(double *)v221.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v479, (JSC::JSGlobalObject *)this, v214, v215, v216, v217, v218, v219, v221);
              if ((v221.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v436 = (int)*(double *)v221.i64, *(double *)v221.i64 == (double)(int)v436)
                && ((_DWORD)v436 || (v221.i64[0] & 0x8000000000000000) == 0))
              {
                v437 = (JSC::JSObject *)(v436 | 0xFFFE000000000000);
              }
              else
              {
                v437 = (JSC::JSObject *)(v221.i64[0] + 0x2000000000000);
              }
              v479 = (uint64_t)v437;
              if (*((_DWORD *)v10 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v433, v434, v435, v216, v217, v218, v219))
                  return 0;
              }
            }
          }
          v230 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v480, v220, 0, v216, v217, v218, v219, v221);
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v223, v224, v225, v226, v227, v228, v229))
          {
            return 0;
          }
          LOBYTE(v468) = 0;
          LOBYTE(v469) = 0;
          v232 = (JSC::JSObject *)v479;
          if ((*(_BYTE *)(v11 + 40) & 1) == 0 || v479 != 10)
          {
            v233 = JSC::argumentClampedIndexFromStartOrEnd((JSC::JSGlobalObject *)this, (JSC::JSObject *)v479, v220, v220, v226, v227, v228, v229, v231);
            if (*((_DWORD *)v10 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v232, v224, v225, v226, v227, v228, v229))
            {
              return 0;
            }
            v234 = (JSC::JSGlobalObject **)(v233 - v230);
            if (v233 < v230)
              v234 = 0;
            v468 = v234;
            LOBYTE(v469) = 1;
          }
          v235 = JSC::JSArrayBufferView::possiblySharedBuffer((JSC::JSArrayBufferView *)v11, (uint64_t)v232, v224, v225, v226, v227, v228, v229);
          if (!v235)
          {
LABEL_539:
            v133 = (JSC::JSGlobalObject *)&v474;
            goto LABEL_236;
          }
          *(_DWORD *)v235 += 2;
          v477 = *(_QWORD *)(v11 + 32) + 8 * v230;
          v478 = v235;
          v462 = (unint64_t *)&v481;
          v463 = (unint64_t *)&v478;
          v464 = &v477;
          v465 = (JSC::ArrayBuffer **)&v468;
          v483 = v10;
          v484 = (uint64_t)&v481;
          v485 = &v491;
          *(_QWORD *)&v486 = &v478;
          *((_QWORD *)&v486 + 1) = &v477;
          *(_QWORD *)&v487 = &v468;
          v124 = JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(this, v11, &v462, (uint64_t)&v483, v236, v237, v238, v239, v240);
LABEL_220:
          v33 = v124;
          v132 = v478;
          v478 = 0;
          if (v132)
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v132, v125, v126, v127, v128, v129, v130, v131);
          return v33;
        default:
          v51 = "Receiver should be a typed array view";
          v52 = 38;
          return JSC::throwTypeError(this, &v461, (uint64_t)v51, v52);
      }
    }
  }
  v51 = "Receiver should be a typed array view but was not an object";
  v52 = 60;
  return JSC::throwTypeError(this, &v461, (uint64_t)v51, v52);
}

JSC::JSCell *JSC::typedArrayViewProtoFuncToReversed(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::JSCell *Uninitialized;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  JSC *v71;
  JSC::JSGlobalObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::JSCell *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _DWORD *v134;
  unint64_t v135;
  int v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _BYTE *v205;
  unint64_t v206;
  char v207;
  _BYTE *v208;
  unint64_t v209;
  char v210;
  unint64_t OutOfMemoryError;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  double v217;
  JSC::Exception *v218;
  uint64_t v219;
  unint64_t v220;
  _BYTE *v221;
  unint64_t v222;
  char v223;
  _WORD *v224;
  unint64_t v225;
  __int16 v226;
  _DWORD *v227;
  unint64_t v228;
  int v229;
  _DWORD *v230;
  unint64_t v231;
  int v232;
  _QWORD *v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  _WORD *v239;
  unint64_t v240;
  __int16 v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  unint64_t v253;
  char v254;
  uint64_t (*v255)(uint64_t *);
  uint64_t *v256;
  int v257;
  unint64_t v258;
  char v259;
  uint64_t (*v260)(uint64_t *);
  uint64_t *v261;
  int v262;
  unint64_t v263;
  char v264;
  uint64_t (*v265)(uint64_t *);
  uint64_t *v266;
  int v267;
  unint64_t v268;
  char v269;
  uint64_t (*v270)(uint64_t *);
  uint64_t *v271;
  unint64_t v272;
  char v273;
  uint64_t (*v274)(uint64_t *);
  uint64_t *v275;
  int v276;
  unint64_t v277;
  char v278;
  uint64_t (*v279)(uint64_t *);
  uint64_t *v280;
  int v281;
  unint64_t v282;
  char v283;
  uint64_t (*v284)(uint64_t *);
  uint64_t *v285;
  int v286;
  unint64_t v287;
  char v288;
  uint64_t (*v289)(uint64_t *);
  uint64_t *v290;
  int v291;
  unint64_t v292;
  char v293;
  uint64_t (*v294)(uint64_t *);
  uint64_t *v295;
  int v296;
  unint64_t v297;
  char v298;
  uint64_t (*v299)(uint64_t *);
  uint64_t *v300;
  int v301;
  unint64_t v302;
  char v303;
  uint64_t (*v304)(uint64_t *);
  uint64_t *v305;
  int v306;
  int v307;
  JSC::VM *v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;

  v9 = *(_QWORD *)(this + 56);
  v308 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v28 = "Receiver should be a typed array view but was not an object";
    v29 = 60;
    return (JSC::JSCell *)JSC::throwTypeError(this, &v308, (uint64_t)v28, v29);
  }
  else
  {
    switch(*(_BYTE *)(v10 + 5))
    {
      case '\'':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v242 = *(_DWORD *)(v9 + 80);
          if ((v242 & 0x27) != 0 && (v242 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v11, v12, v13, v14, v15, v16);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v253 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v11, v12, v13, v14, v15, v16);
          if (v254)
            v17 = v253;
          else
            v17 = 0;
        }
        else
        {
          v17 = *(_QWORD *)(v10 + 24);
        }
        v18 = *(_QWORD *)(this + 1664);
        if ((v18 & 1) != 0)
        {
          v255 = *(uint64_t (**)(uint64_t *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v256 = (uint64_t *)(this - 16);
          else
            v256 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v256;
          v310 = this;
          v311 = (char *)(this + 1664);
          v18 = v255(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v18, v17, v12, v13, v14, v15, v16);
        if (*(_DWORD *)(v9 + 80))
        {
          v257 = *(_DWORD *)(v9 + 80);
          if ((v257 & 0x27) != 0 && (v257 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v19, v20, v21, v22, v23, v24);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v26 = *(_QWORD *)(v10 + 16);
        if (v26 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v26 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v27 = *((_QWORD *)Uninitialized + 2);
        if (v27 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v27 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v17)
        {
          if (v17 == 1)
            *(_BYTE *)v27 = *(_BYTE *)v26;
          else
            memcpy((void *)v27, (const void *)v26, v17);
          v221 = (_BYTE *)(v27 + v17 - 1);
          if ((unint64_t)v221 > v27)
          {
            v222 = v27 + 1;
            do
            {
              v223 = *(_BYTE *)(v222 - 1);
              *(_BYTE *)(v222 - 1) = *v221;
              *v221-- = v223;
              v137 = v222++ >= (unint64_t)v221;
            }
            while (!v137);
          }
        }
        return Uninitialized;
      case '(':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v243 = *(_DWORD *)(v9 + 80);
          if ((v243 & 0x27) != 0 && (v243 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v31, v32, v33, v34, v35, v36);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v258 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v31, v32, v33, v34, v35, v36);
          if (v259)
            v37 = v258;
          else
            v37 = 0;
        }
        else
        {
          v37 = *(_QWORD *)(v10 + 24);
        }
        v38 = *(_QWORD *)(this + 1688);
        if ((v38 & 1) != 0)
        {
          v260 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v261 = (uint64_t *)(this - 16);
          else
            v261 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v261;
          v310 = this;
          v311 = (char *)(this + 1688);
          v38 = v260(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v38, v37, v32, v33, v34, v35, v36);
        if (*(_DWORD *)(v9 + 80))
        {
          v262 = *(_DWORD *)(v9 + 80);
          if ((v262 & 0x27) != 0 && (v262 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v39, v40, v41, v42, v43, v44);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v45 = *(_QWORD *)(v10 + 16);
        if (v45 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v46 = *((_QWORD *)Uninitialized + 2);
        if (v46 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v46 = (v46 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v37 == 1)
        {
          *(_BYTE *)v46 = *(_BYTE *)v45;
        }
        else
        {
          if (!v37)
            return Uninitialized;
          memcpy((void *)v46, (const void *)v45, v37);
        }
        v205 = (_BYTE *)(v46 + v37 - 1);
        if ((unint64_t)v205 > v46)
        {
          v206 = v46 + 1;
          do
          {
            v207 = *(_BYTE *)(v206 - 1);
            *(_BYTE *)(v206 - 1) = *v205;
            *v205-- = v207;
            v137 = v206++ >= (unint64_t)v205;
          }
          while (!v137);
        }
        return Uninitialized;
      case ')':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v244 = *(_DWORD *)(v9 + 80);
          if ((v244 & 0x27) != 0 && (v244 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v47, v48, v49, v50, v51, v52);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v263 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v47, v48, v49, v50, v51, v52);
          if (v264)
            v53 = v263;
          else
            v53 = 0;
        }
        else
        {
          v53 = *(_QWORD *)(v10 + 24);
        }
        v54 = *(_QWORD *)(this + 1712);
        if ((v54 & 1) != 0)
        {
          v265 = *(uint64_t (**)(uint64_t *))(v54 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v266 = (uint64_t *)(this - 16);
          else
            v266 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v266;
          v310 = this;
          v311 = (char *)(this + 1712);
          v54 = v265(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)this, v54, v53, v48, v49, v50, v51, v52);
        if (*(_DWORD *)(v9 + 80))
        {
          v267 = *(_DWORD *)(v9 + 80);
          if ((v267 & 0x27) != 0 && (v267 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v55, v56, v57, v58, v59, v60);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v61 = *(_QWORD *)(v10 + 16);
        if (v61 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v61 = (v61 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v62 = *((_QWORD *)Uninitialized + 2);
        if (v62 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v62 = (v62 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v53 == 1)
        {
          *(_BYTE *)v62 = *(_BYTE *)v61;
        }
        else
        {
          if (!v53)
            return Uninitialized;
          memcpy((void *)v62, (const void *)v61, v53);
        }
        v208 = (_BYTE *)(v62 + v53 - 1);
        if ((unint64_t)v208 > v62)
        {
          v209 = v62 + 1;
          do
          {
            v210 = *(_BYTE *)(v209 - 1);
            *(_BYTE *)(v209 - 1) = *v208;
            *v208-- = v210;
            v137 = v209++ >= (unint64_t)v208;
          }
          while (!v137);
        }
        return Uninitialized;
      case '*':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v245 = *(_DWORD *)(v9 + 80);
          if ((v245 & 0x27) != 0 && (v245 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v63, v64, v65, v66, v67, v68);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v268 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v63, v64, v65, v66, v67, v68);
          if (v269)
            v69 = v268;
          else
            v69 = 0;
        }
        else
        {
          v69 = *(_QWORD *)(v10 + 24);
        }
        v70 = *(_QWORD *)(this + 1736);
        if ((v70 & 1) != 0)
        {
          v270 = *(uint64_t (**)(uint64_t *))(v70 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v271 = (uint64_t *)(this - 16);
          else
            v271 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v271;
          v310 = this;
          v311 = (char *)(this + 1736);
          v70 = v270(&v309);
        }
        v71 = *(JSC **)(this + 56);
        JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v309, v71, v70, v69, 2, 1, v67, v68);
        if (v309)
        {
          Uninitialized = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v71, (JSC::VM *)0x30, v73, v74, v75, v76, v77, v78);
          v79 = JSC::JSArrayBufferView::JSArrayBufferView(Uninitialized, (uint64_t)v71, (uint64_t)&v309);
          JSC::JSArrayBufferView::finishCreation((unint64_t)v79, v71);
        }
        else
        {
          OutOfMemoryError = JSC::createOutOfMemoryError(this, v72);
          v218 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v218 = (JSC::Exception *)JSC::Exception::create((uint64_t)v71, (JSC::VM *)OutOfMemoryError, 0, v212, v213, v214, v215, v216);
          }
          JSC::VM::throwException(v71, (JSC::JSGlobalObject *)this, v218, v217, v212, v213, v214, v215, v216);
          Uninitialized = 0;
        }
        if (*(_DWORD *)(v9 + 80))
        {
          v307 = *(_DWORD *)(v9 + 80);
          if ((v307 & 0x27) != 0 && (v307 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v80, v81, v82, v83, v84, v85);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v219 = *(_QWORD *)(v10 + 16);
        if (v219 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v219 = (v219 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v220 = *((_QWORD *)Uninitialized + 2);
        if (v220 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v220 = (v220 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v69)
        {
          if (v69 == 1)
            *(_WORD *)v220 = *(_WORD *)v219;
          else
            memcpy((void *)v220, (const void *)v219, 2 * v69);
          v239 = (_WORD *)(v220 + 2 * v69 - 2);
          if ((unint64_t)v239 > v220)
          {
            v240 = v220 + 2;
            do
            {
              v241 = *(_WORD *)(v240 - 2);
              *(_WORD *)(v240 - 2) = *v239;
              *v239-- = v241;
              v137 = v240 >= (unint64_t)v239;
              v240 += 2;
            }
            while (!v137);
          }
        }
        return Uninitialized;
      case '+':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v246 = *(_DWORD *)(v9 + 80);
          if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v86, v87, v88, v89, v90, v91);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v272 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v86, v87, v88, v89, v90, v91);
          if (v273)
            v92 = v272;
          else
            v92 = 0;
        }
        else
        {
          v92 = *(_QWORD *)(v10 + 24);
        }
        v93 = *(_QWORD *)(this + 1760);
        if ((v93 & 1) != 0)
        {
          v274 = *(uint64_t (**)(uint64_t *))(v93 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v275 = (uint64_t *)(this - 16);
          else
            v275 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v275;
          v310 = this;
          v311 = (char *)(this + 1760);
          v93 = v274(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v93, v92, v87, v88, v89, v90, v91);
        if (*(_DWORD *)(v9 + 80))
        {
          v276 = *(_DWORD *)(v9 + 80);
          if ((v276 & 0x27) != 0 && (v276 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v94, v95, v96, v97, v98, v99);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v100 = *(_QWORD *)(v10 + 16);
        if (v100 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v100 = (v100 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v101 = *((_QWORD *)Uninitialized + 2);
        if (v101 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v101 = (v101 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v92)
        {
          if (v92 == 1)
            *(_WORD *)v101 = *(_WORD *)v100;
          else
            memcpy((void *)v101, (const void *)v100, 2 * v92);
          v224 = (_WORD *)(v101 + 2 * v92 - 2);
          if ((unint64_t)v224 > v101)
          {
            v225 = v101 + 2;
            do
            {
              v226 = *(_WORD *)(v225 - 2);
              *(_WORD *)(v225 - 2) = *v224;
              *v224-- = v226;
              v137 = v225 >= (unint64_t)v224;
              v225 += 2;
            }
            while (!v137);
          }
        }
        return Uninitialized;
      case ',':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v247 = *(_DWORD *)(v9 + 80);
          if ((v247 & 0x27) != 0 && (v247 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v102, v103, v104, v105, v106, v107);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v277 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v102, v103, v104, v105, v106, v107);
          if (v278)
            v108 = v277;
          else
            v108 = 0;
        }
        else
        {
          v108 = *(_QWORD *)(v10 + 24);
        }
        v109 = *(_QWORD *)(this + 1784);
        if ((v109 & 1) != 0)
        {
          v279 = *(uint64_t (**)(uint64_t *))(v109 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v280 = (uint64_t *)(this - 16);
          else
            v280 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v280;
          v310 = this;
          v311 = (char *)(this + 1784);
          v109 = v279(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v109, v108, v103, v104, v105, v106, v107);
        if (*(_DWORD *)(v9 + 80))
        {
          v281 = *(_DWORD *)(v9 + 80);
          if ((v281 & 0x27) != 0 && (v281 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v110, v111, v112, v113, v114, v115);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v116 = *(_QWORD *)(v10 + 16);
        if (v116 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v116 = (v116 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v117 = *((_QWORD *)Uninitialized + 2);
        if (v117 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v117 = (v117 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v108)
        {
          if (v108 == 1)
            *(_DWORD *)v117 = *(_DWORD *)v116;
          else
            memcpy((void *)v117, (const void *)v116, 4 * v108);
          v227 = (_DWORD *)(v117 + 4 * v108 - 4);
          if ((unint64_t)v227 > v117)
          {
            v228 = v117 + 4;
            do
            {
              v229 = *(_DWORD *)(v228 - 4);
              *(_DWORD *)(v228 - 4) = *v227;
              *v227-- = v229;
              v137 = v228 >= (unint64_t)v227;
              v228 += 4;
            }
            while (!v137);
          }
        }
        return Uninitialized;
      case '-':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v248 = *(_DWORD *)(v9 + 80);
          if ((v248 & 0x27) != 0 && (v248 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v118, v119, v120, v121, v122, v123);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v282 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v118, v119, v120, v121, v122, v123);
          if (v283)
            v124 = v282;
          else
            v124 = 0;
        }
        else
        {
          v124 = *(_QWORD *)(v10 + 24);
        }
        v125 = *(_QWORD *)(this + 1808);
        if ((v125 & 1) != 0)
        {
          v284 = *(uint64_t (**)(uint64_t *))(v125 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v285 = (uint64_t *)(this - 16);
          else
            v285 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v285;
          v310 = this;
          v311 = (char *)(this + 1808);
          v125 = v284(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v125, v124, v119, v120, v121, v122, v123);
        if (*(_DWORD *)(v9 + 80))
        {
          v286 = *(_DWORD *)(v9 + 80);
          if ((v286 & 0x27) != 0 && (v286 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v126, v127, v128, v129, v130, v131);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v132 = *(_QWORD *)(v10 + 16);
        if (v132 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v132 = (v132 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v133 = *((_QWORD *)Uninitialized + 2);
        if (v133 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v133 = (v133 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v124 == 1)
        {
          *(_DWORD *)v133 = *(_DWORD *)v132;
        }
        else
        {
          if (!v124)
            return Uninitialized;
          memcpy((void *)v133, (const void *)v132, 4 * v124);
        }
        v134 = (_DWORD *)(v133 + 4 * v124 - 4);
        if ((unint64_t)v134 > v133)
        {
          v135 = v133 + 4;
          do
          {
            v136 = *(_DWORD *)(v135 - 4);
            *(_DWORD *)(v135 - 4) = *v134;
            *v134-- = v136;
            v137 = v135 >= (unint64_t)v134;
            v135 += 4;
          }
          while (!v137);
        }
        return Uninitialized;
      case '.':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v249 = *(_DWORD *)(v9 + 80);
          if ((v249 & 0x27) != 0 && (v249 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v138, v139, v140, v141, v142, v143);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v287 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v138, v139, v140, v141, v142, v143);
          if (v288)
            v144 = v287;
          else
            v144 = 0;
        }
        else
        {
          v144 = *(_QWORD *)(v10 + 24);
        }
        v145 = *(_QWORD *)(this + 1832);
        if ((v145 & 1) != 0)
        {
          v289 = *(uint64_t (**)(uint64_t *))(v145 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v290 = (uint64_t *)(this - 16);
          else
            v290 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v290;
          v310 = this;
          v311 = (char *)(this + 1832);
          v145 = v289(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v145, v144, v139, v140, v141, v142, v143);
        if (*(_DWORD *)(v9 + 80))
        {
          v291 = *(_DWORD *)(v9 + 80);
          if ((v291 & 0x27) != 0 && (v291 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v146, v147, v148, v149, v150, v151);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v152 = *(_QWORD *)(v10 + 16);
        if (v152 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v152 = (v152 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v153 = *((_QWORD *)Uninitialized + 2);
        if (v153 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v153 = (v153 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v144)
        {
          if (v144 == 1)
            *(_DWORD *)v153 = *(_DWORD *)v152;
          else
            memcpy((void *)v153, (const void *)v152, 4 * v144);
          v230 = (_DWORD *)(v153 + 4 * v144 - 4);
          if ((unint64_t)v230 > v153)
          {
            v231 = v153 + 4;
            do
            {
              v232 = *(_DWORD *)(v231 - 4);
              *(_DWORD *)(v231 - 4) = *v230;
              *v230-- = v232;
              v137 = v231 >= (unint64_t)v230;
              v231 += 4;
            }
            while (!v137);
          }
        }
        return Uninitialized;
      case '/':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v250 = *(_DWORD *)(v9 + 80);
          if ((v250 & 0x27) != 0 && (v250 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v154, v155, v156, v157, v158, v159);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v292 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v154, v155, v156, v157, v158, v159);
          if (v293)
            v160 = v292;
          else
            v160 = 0;
        }
        else
        {
          v160 = *(_QWORD *)(v10 + 24);
        }
        v161 = *(_QWORD *)(this + 1856);
        if ((v161 & 1) != 0)
        {
          v294 = *(uint64_t (**)(uint64_t *))(v161 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v295 = (uint64_t *)(this - 16);
          else
            v295 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v295;
          v310 = this;
          v311 = (char *)(this + 1856);
          v161 = v294(&v309);
        }
        Uninitialized = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v161, v160, v155, v156, v157, v158, v159);
        if (*(_DWORD *)(v9 + 80))
        {
          v296 = *(_DWORD *)(v9 + 80);
          if ((v296 & 0x27) != 0 && (v296 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v162, v163, v164, v165, v166, v167);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v168 = *(_QWORD *)(v10 + 16);
        if (v168 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v168 = (v168 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v169 = *((_QWORD *)Uninitialized + 2);
        if (v169 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v169 = (v169 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v160)
        {
          if (v160 == 1)
            *(_QWORD *)v169 = *(_QWORD *)v168;
          else
            memcpy((void *)v169, (const void *)v168, 8 * v160);
          v233 = (_QWORD *)(v169 + 8 * v160 - 8);
          if ((unint64_t)v233 > v169)
          {
            v234 = v169 + 8;
            do
            {
              v235 = *(_QWORD *)(v234 - 8);
              *(_QWORD *)(v234 - 8) = *v233;
              *v233-- = v235;
              v137 = v234 >= (unint64_t)v233;
              v234 += 8;
            }
            while (!v137);
          }
        }
        return Uninitialized;
      case '0':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v251 = *(_DWORD *)(v9 + 80);
          if ((v251 & 0x27) != 0 && (v251 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v170, v171, v172, v173, v174, v175);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v297 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v170, v171, v172, v173, v174, v175);
          if (v298)
            v176 = v297;
          else
            v176 = 0;
        }
        else
        {
          v176 = *(_QWORD *)(v10 + 24);
        }
        v177 = *(_QWORD *)(this + 1880);
        if ((v177 & 1) != 0)
        {
          v299 = *(uint64_t (**)(uint64_t *))(v177 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v300 = (uint64_t *)(this - 16);
          else
            v300 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v300;
          v310 = this;
          v311 = (char *)(this + 1880);
          v177 = v299(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v177, v176, v171, v172, v173, v174, v175);
        if (*(_DWORD *)(v9 + 80))
        {
          v301 = *(_DWORD *)(v9 + 80);
          if ((v301 & 0x27) != 0 && (v301 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v178, v179, v180, v181, v182, v183);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v184 = *(_QWORD *)(v10 + 16);
        if (v184 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v184 = (v184 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v185 = *((_QWORD *)Uninitialized + 2);
        if (v185 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v185 = (v185 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v176 == 1)
        {
          *(_QWORD *)v185 = *(_QWORD *)v184;
        }
        else
        {
          if (!v176)
            return Uninitialized;
          memcpy((void *)v185, (const void *)v184, 8 * v176);
        }
        v186 = (_QWORD *)(v185 + 8 * v176 - 8);
        if ((unint64_t)v186 > v185)
        {
          v187 = v185 + 8;
          do
          {
            v188 = *(_QWORD *)(v187 - 8);
            *(_QWORD *)(v187 - 8) = *v186;
            *v186-- = v188;
            v137 = v187 >= (unint64_t)v186;
            v187 += 8;
          }
          while (!v137);
        }
        break;
      case '1':
        JSC::validateTypedArray((JSC *)this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v9 + 80))
        {
          v252 = *(_DWORD *)(v9 + 80);
          if ((v252 & 0x27) != 0 && (v252 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v189, v190, v191, v192, v193, v194);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
        {
          LOBYTE(v309) = 0;
          LOBYTE(v310) = 0;
          v302 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v309, v189, v190, v191, v192, v193, v194);
          if (v303)
            v195 = v302;
          else
            v195 = 0;
        }
        else
        {
          v195 = *(_QWORD *)(v10 + 24);
        }
        v196 = *(_QWORD *)(this + 1904);
        if ((v196 & 1) != 0)
        {
          v304 = *(uint64_t (**)(uint64_t *))(v196 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v305 = (uint64_t *)(this - 16);
          else
            v305 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v309 = *v305;
          v310 = this;
          v311 = (char *)(this + 1904);
          v196 = v304(&v309);
        }
        Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized((JSC::JSGlobalObject *)this, v196, v195, v190, v191, v192, v193, v194);
        if (*(_DWORD *)(v9 + 80))
        {
          v306 = *(_DWORD *)(v9 + 80);
          if ((v306 & 0x27) != 0 && (v306 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v197, v198, v199, v200, v201, v202);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v203 = *(_QWORD *)(v10 + 16);
        if (v203 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v203 = (v203 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v204 = *((_QWORD *)Uninitialized + 2);
        if (v204 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v204 = (v204 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v195)
        {
          if (v195 == 1)
            *(_QWORD *)v204 = *(_QWORD *)v203;
          else
            memcpy((void *)v204, (const void *)v203, 8 * v195);
          v236 = (_QWORD *)(v204 + 8 * v195 - 8);
          if ((unint64_t)v236 > v204)
          {
            v237 = v204 + 8;
            do
            {
              v238 = *(_QWORD *)(v237 - 8);
              *(_QWORD *)(v237 - 8) = *v236;
              *v236-- = v238;
              v137 = v237 >= (unint64_t)v236;
              v237 += 8;
            }
            while (!v137);
          }
        }
        return Uninitialized;
      default:
        v28 = "Receiver should be a typed array view";
        v29 = 38;
        return (JSC::JSCell *)JSC::throwTypeError(this, &v308, (uint64_t)v28, v29);
    }
  }
  return Uninitialized;
}

#error "198A9A560: too big function (funcsize=0)"

JSC::JSCell *JSC::typedArrayViewProtoFuncWith(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  char v20;
  unint64_t v21;
  JSC::Structure *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  JSC::VM *v34;
  double v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::JSCell *Uninitialized;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  JSC::VM **v60;
  uint64_t v61;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int8x16_t v70;
  char v71;
  unint64_t v72;
  JSC::Structure *v73;
  double v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  double v84;
  JSC::VM *v85;
  double v86;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  int v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int8x16_t v132;
  char v133;
  unint64_t v134;
  JSC::Structure *v135;
  double v136;
  double v137;
  JSC::Structure *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int8x16_t v158;
  char v159;
  unint64_t v160;
  JSC::Structure *v161;
  double v162;
  double v163;
  JSC::JSObject *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  double v172;
  JSC::VM *v173;
  double v174;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __n128 v183;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int8x16_t v204;
  char v205;
  JSC::Structure *v206;
  double v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  double v216;
  JSC::VM *v217;
  double v218;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __n128 v227;
  uint64_t v230;
  JSC *v231;
  JSC::JSGlobalObject *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  JSC::JSCell *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int8x16_t v253;
  char v254;
  unint64_t v255;
  JSC::Structure *v256;
  double v257;
  double v258;
  unint64_t v259;
  float v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int8x16_t v268;
  char v269;
  JSC::Structure *v270;
  double v271;
  double v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  double v280;
  JSC::VM *v281;
  double v282;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __n128 v291;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int8x16_t v309;
  char v310;
  unint64_t v311;
  JSC::Structure *v312;
  double v313;
  double v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  double v323;
  JSC::VM *v324;
  double v325;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  __n128 v334;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int8x16_t v355;
  char v356;
  JSC::Structure *v357;
  double v358;
  double v359;
  JSC::JSObject *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  double v367;
  JSC::VM *v368;
  double v369;
  char v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  __n128 v378;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int8x16_t v396;
  char v397;
  JSC::Structure *v398;
  double v399;
  double v400;
  JSC::Structure *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int8x16_t v420;
  char v421;
  unint64_t v422;
  JSC::Structure *v423;
  double v424;
  double v425;
  unint64_t v426;
  double v427;
  double v428;
  double v429;
  unint64_t OutOfMemoryError;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  double v436;
  JSC::Exception *v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  double v441;
  JSC::VM *v442;
  double v443;
  char v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  __n128 v452;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  double v466;
  JSC::VM *v467;
  double v468;
  char v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  __n128 v477;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  JSC::Heap **v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  double v500;
  JSC::Exception *v501;
  WTF::AtomStringImpl *v502;
  WTF::StringImpl *v503;
  uint64_t v504;
  unint64_t v505;
  JSC::Heap **v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  double v513;
  JSC::Exception *v514;
  WTF::AtomStringImpl *v515;
  WTF::StringImpl *v516;
  uint64_t v517;
  unint64_t v518;
  JSC::Heap **v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  double v526;
  JSC::Exception *v527;
  WTF::AtomStringImpl *v528;
  WTF::StringImpl *v529;
  uint64_t v530;
  unint64_t v531;
  JSC::Heap **v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  double v539;
  JSC::Exception *v540;
  WTF::AtomStringImpl *v541;
  WTF::StringImpl *v542;
  uint64_t v543;
  unint64_t v544;
  JSC::Heap **v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  double v552;
  JSC::Exception *v553;
  WTF::AtomStringImpl *v554;
  WTF::StringImpl *v555;
  uint64_t v556;
  unint64_t v557;
  JSC::Heap **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  double v565;
  JSC::Exception *v566;
  WTF::AtomStringImpl *v567;
  WTF::StringImpl *v568;
  uint64_t v569;
  unint64_t v570;
  JSC::Heap **v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  double v578;
  JSC::Exception *v579;
  WTF::AtomStringImpl *v580;
  WTF::StringImpl *v581;
  uint64_t v582;
  unint64_t v583;
  JSC::Heap **v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  double v591;
  JSC::Exception *v592;
  WTF::AtomStringImpl *v593;
  WTF::StringImpl *v594;
  uint64_t v595;
  unint64_t v596;
  JSC::Heap **v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  double v604;
  JSC::Exception *v605;
  WTF::AtomStringImpl *v606;
  WTF::StringImpl *v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  double v621;
  JSC::VM *v622;
  double v623;
  char v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  __n128 v632;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  JSC::Heap **v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  double v655;
  JSC::Exception *v656;
  WTF::AtomStringImpl *v657;
  WTF::StringImpl *v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  double v668;
  JSC::VM *v669;
  double v670;
  char v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  __n128 v679;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  unint64_t v691;
  JSC::Heap **v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  double v699;
  JSC::Exception *v700;
  WTF::AtomStringImpl *v701;
  WTF::StringImpl *v702;
  int v703;
  int v704;
  int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  int v710;
  int v711;
  int v712;
  int v713;
  int v714;
  int v715;
  uint64_t v716;
  const char *v717;
  uint64_t v718;
  const char *v719;
  uint64_t v720;
  const char *v721;
  uint64_t v722;
  const char *v723;
  uint64_t v724;
  const char *v725;
  uint64_t v726;
  const char *v727;
  uint64_t v728;
  const char *v729;
  uint64_t v730;
  const char *v731;
  uint64_t v732;
  const char *v733;
  uint64_t v734;
  const char *v735;
  uint64_t v736;
  const char *v737;
  uint64_t (*v738)(uint64_t *, __n128);
  JSC::Structure **v739;
  int v740;
  uint64_t (*v741)(uint64_t *, __n128);
  JSC::Structure **v742;
  int v743;
  uint64_t (*v744)(uint64_t *, __n128);
  JSC::Structure **v745;
  int v746;
  uint64_t (*v747)(uint64_t *, __n128);
  JSC::Structure **v748;
  int v749;
  uint64_t (*v750)(uint64_t *, __n128);
  JSC::Structure **v751;
  int v752;
  uint64_t (*v753)(uint64_t *, __n128);
  JSC::Structure **v754;
  int v755;
  uint64_t (*v756)(uint64_t *, __n128);
  JSC::Structure **v757;
  int v758;
  uint64_t (*v759)(uint64_t *, __n128);
  JSC::Structure **v760;
  int v761;
  uint64_t (*v762)(uint64_t *, __n128);
  JSC::Structure **v763;
  int v764;
  uint64_t (*v765)(uint64_t *, __n128);
  JSC::Structure **v766;
  int v767;
  uint64_t (*v768)(uint64_t *, __n128);
  JSC::Structure **v769;
  int v770;
  unint64_t v771;
  char v772;
  unint64_t v773;
  char v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  int v778;
  uint64_t v779;
  uint64_t v780;
  BOOL v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  char v785;
  unint64_t i;
  uint64_t v787;
  char v788;
  _BOOL4 v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  char v793;
  unint64_t v794;
  int v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  BOOL v799;
  int v801;
  __int16 v802;
  uint64_t v803;
  uint64_t v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  BOOL v808;
  uint64_t v810;
  uint64_t v811;
  unint64_t v812;
  char v813;
  unint64_t v814;
  int v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  BOOL v819;
  int v821;
  int v822;
  uint64_t v823;
  uint64_t v824;
  unint64_t v825;
  unint64_t v826;
  uint64_t v827;
  BOOL v828;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  char v833;
  unint64_t v834;
  char v835;
  unint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  uint64_t v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  char v845;
  unint64_t v846;
  char v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  uint64_t v852;
  unint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  char v857;
  unint64_t v858;
  int v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  BOOL v863;
  int v865;
  int v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  unint64_t v870;
  uint64_t v871;
  BOOL v872;
  uint64_t v874;
  uint64_t v875;
  unint64_t v876;
  char v877;
  unint64_t v878;
  int v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  BOOL v883;
  int v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  unint64_t v889;
  unint64_t v890;
  uint64_t v891;
  BOOL v892;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  char v897;
  unint64_t v898;
  int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  BOOL v903;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  unint64_t v909;
  unint64_t v910;
  uint64_t v911;
  BOOL v912;
  uint64_t v914;
  uint64_t v915;
  unint64_t v916;
  char v917;
  unint64_t v918;
  JSC::Heap **v919;
  unint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  double v926;
  JSC::Exception *v927;
  unint64_t v928;
  void *v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  JSC::Heap **v937;
  unint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  double v944;
  JSC::Exception *v945;
  unint64_t v946;
  void *v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  unint64_t v954;
  JSC::Heap **v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  double v962;
  JSC::Exception *v963;
  unint64_t v964;
  void *v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  unint64_t v972;
  JSC::Heap **v973;
  unint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  double v980;
  JSC::Exception *v981;
  unint64_t v982;
  void *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  JSC::Heap **v991;
  unint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  double v998;
  JSC::Exception *v999;
  unint64_t v1000;
  void *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  JSC::Heap **v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  double v1016;
  JSC::Exception *v1017;
  unint64_t v1018;
  void *v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  unint64_t v1026;
  JSC::Heap **v1027;
  unint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  double v1034;
  JSC::Exception *v1035;
  unint64_t v1036;
  void *v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  JSC::Heap **v1045;
  unint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  double v1052;
  JSC::Exception *v1053;
  unint64_t v1054;
  void *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  JSC::Heap **v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  double v1070;
  JSC::Exception *v1071;
  unint64_t v1072;
  void *v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  unint64_t v1080;
  JSC::Heap **v1081;
  unint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  double v1088;
  JSC::Exception *v1089;
  unint64_t v1090;
  void *v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  JSC::Heap **v1099;
  unint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  double v1106;
  JSC::Exception *v1107;
  unint64_t v1108;
  void *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  BOOL v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t (*v1125)(uint64_t *);
  JSC::Structure **v1126;
  uint64_t (*v1127)(uint64_t *);
  JSC::Structure **v1128;
  uint64_t (*v1129)(uint64_t *);
  JSC::Structure **v1130;
  uint64_t (*v1131)(uint64_t *);
  JSC::Structure **v1132;
  uint64_t (*v1133)(uint64_t *);
  JSC::Structure **v1134;
  uint64_t (*v1135)(uint64_t *);
  JSC::Structure **v1136;
  uint64_t (*v1137)(uint64_t *);
  JSC::Structure **v1138;
  uint64_t (*v1139)(uint64_t *);
  JSC::Structure **v1140;
  uint64_t (*v1141)(uint64_t *);
  JSC::Structure **v1142;
  uint64_t (*v1143)(uint64_t *);
  JSC::Structure **v1144;
  uint64_t (*v1145)(uint64_t *);
  JSC::Structure **v1146;
  uint64_t (*v1147)(uint64_t *);
  JSC::Structure **v1148;
  uint64_t (*v1149)(uint64_t *);
  JSC::Structure **v1150;
  uint64_t (*v1151)(uint64_t *);
  JSC::Structure **v1152;
  uint64_t (*v1153)(uint64_t *);
  JSC::Structure **v1154;
  uint64_t (*v1155)(uint64_t *);
  JSC::Structure **v1156;
  uint64_t (*v1157)(uint64_t *);
  JSC::Structure **v1158;
  uint64_t (*v1159)(uint64_t *);
  JSC::Structure **v1160;
  uint64_t (*v1161)(uint64_t *);
  JSC::Structure **v1162;
  uint64_t (*v1163)(uint64_t *);
  JSC::Structure **v1164;
  uint64_t (*v1165)(uint64_t *);
  JSC::Structure **v1166;
  uint64_t (*v1167)(uint64_t *);
  JSC::Structure **v1168;
  unint64_t v1169;
  unint64_t v1170;
  unint64_t v1171;
  unint64_t v1172;
  unint64_t v1173;
  unint64_t v1174;
  unint64_t v1175;
  unint64_t v1176;
  unint64_t v1177;
  unint64_t v1178;
  unint64_t v1179;
  uint64_t v1180;
  char v1181[8];
  char v1182;
  uint64_t v1183;
  uint64_t v1184;
  unint64_t v1185;
  unint64_t v1186;
  WTF::StringImpl *v1187;
  WTF::StringImpl *v1188;
  char v1189;

  v8 = (unint64_t)this;
  v9 = *((_QWORD *)this + 7);
  v1180 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v59 = "Receiver should be a typed array view but was not an object";
    v60 = (JSC::VM **)&v1180;
    v61 = 60;
    return (JSC::JSCell *)JSC::throwTypeError((unint64_t)this, v60, (uint64_t)v59, v61);
  }
  switch(*(_BYTE *)(v10 + 5))
  {
    case '\'':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v12 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v20)
        goto LABEL_525;
      v21 = v12;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v22 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v22;
        if ((unint64_t)v22 >= 0xFFFE000000000000)
        {
          v23 = (double)(int)v22;
          goto LABEL_8;
        }
        v1169 = (unint64_t)v22 - 0x2000000000000;
        if (v1169 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v19.i64[0] = v1169;
LABEL_461:
          v23 = trunc(*(double *)v19.i64 + 0.0);
LABEL_8:
          if (*(_DWORD *)(v9 + 80))
          {
            v613 = *(_DWORD *)(v9 + 80);
            if ((v613 & 0x27) != 0 && (v613 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v24 = v23 >= 0.0 ? -0.0 : (double)v21;
          v25 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
          *(double *)v19.i64 = (double)v21;
          v32 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)v8, v25, v13, v14, v15, v16, v17, v18, v19);
          if (*(_DWORD *)(v9 + 80))
          {
            v663 = *(_DWORD *)(v9 + 80);
            if ((v663 & 0x27) != 0 && (v663 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v26, v27, v28, v29, v30, v31);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v33 = v23 + v24;
          v34 = *(JSC::VM **)(v8 + 56);
          v35 = trunc(v33);
          if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v35 == v33)
          {
            if (v33 != 0.0 || (*(_QWORD *)&v33 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v44.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v26, v27, v28, v29, v30, v31);
              if (v33 < 0.0 || v37 == 0 || v33 >= v44.n128_f64[0])
              {
                v543 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v543 = 0x1500000002;
                *(_QWORD *)(v543 + 8) = "index is out of range";
                *(_DWORD *)(v543 + 16) = 4;
                v1187 = (WTF::StringImpl *)v543;
                v544 = *(_QWORD *)(v8 + 128);
                v545 = *(JSC::Heap ***)(v8 + 56);
                if ((v544 & 1) != 0)
                {
                  v1133 = *(uint64_t (**)(uint64_t *))(v544 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v8 & 8) != 0)
                    v1134 = (JSC::Structure **)(v8 - 16);
                  else
                    v1134 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                  v1184 = (uint64_t)*v1134;
                  v1185 = v8;
                  v1186 = v8 + 128;
                  v544 = v1133(&v1184);
                }
                v546 = JSC::ErrorInstance::create(v545, v544, &v1187, 0, 0, 0, 2, 1);
                v553 = (JSC::Exception *)v546;
                if ((v546 & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v546 & 0xFFFFFFFE) + 0x4C)))
                {
                  v553 = (JSC::Exception *)JSC::Exception::create((uint64_t)v34, (JSC::VM *)v546, 0, v547, v548, v549, v550, v551);
                }
                JSC::VM::throwException(v34, (JSC::JSGlobalObject *)v8, v553, v552, v547, v548, v549, v550, v551);
                v555 = v1187;
                v1187 = 0;
                if (v555)
                  goto LABEL_1180;
              }
              goto LABEL_30;
            }
            v726 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v726 = 0x2100000002;
            v727 = "index should not be negative zero";
          }
          else
          {
            v726 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v726 = 0x1700000002;
            v727 = "index should be integer";
          }
          *(_QWORD *)(v726 + 8) = v727;
          *(_DWORD *)(v726 + 16) = 4;
          v1188 = (WTF::StringImpl *)v726;
          v1008 = *(_QWORD *)(v8 + 128);
          v1009 = *(JSC::Heap ***)(v8 + 56);
          if ((v1008 & 1) != 0)
          {
            v1157 = *(uint64_t (**)(uint64_t *))(v1008 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1158 = (JSC::Structure **)(v8 - 16);
            else
              v1158 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1158;
            v1185 = v8;
            v1186 = v8 + 128;
            v1008 = v1157(&v1184);
          }
          v1010 = JSC::ErrorInstance::create(v1009, v1008, &v1188, 0, 0, 0, 2, 1);
          v1017 = (JSC::Exception *)v1010;
          if ((v1010 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v1010 & 0xFFFFFFFE) + 0x4C)))
          {
            v1017 = (JSC::Exception *)JSC::Exception::create((uint64_t)v34, (JSC::VM *)v1010, 0, v1011, v1012, v1013, v1014, v1015);
          }
          JSC::VM::throwException(v34, (JSC::JSGlobalObject *)v8, v1017, v1016, v1011, v1012, v1013, v1014, v1015);
          v555 = v1188;
          v1188 = 0;
          if (v555)
          {
LABEL_1180:
            if (*(_DWORD *)v555 == 2)
            {
              WTF::StringImpl::~StringImpl(v555, v554, v38, v39, v40, v41, v42, v43);
              WTF::fastFree(v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025);
            }
            else
            {
              *(_DWORD *)v555 -= 2;
            }
          }
LABEL_30:
          if (!*(_DWORD *)(v9 + 80))
            goto LABEL_1523;
          v710 = *(_DWORD *)(v9 + 80);
          if ((v710 & 0x27) != 0 && (v710 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v38, v39, v40, v41, v42, v43);
          if (!*(_QWORD *)(v9 + 16))
          {
LABEL_1523:
            v47 = *(_QWORD *)(v8 + 1664);
            if ((v47 & 1) != 0)
            {
              v753 = *(uint64_t (**)(uint64_t *, __n128))(v47 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v8 & 8) != 0)
                v754 = (JSC::Structure **)(v8 - 16);
              else
                v754 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
              v1184 = (uint64_t)*v754;
              v1185 = v8;
              v1186 = v8 + 1664;
              v47 = v753(&v1184, v44);
            }
            Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v47, v21, v39, v40, v41, v42, v43);
            if (!*(_DWORD *)(v9 + 80))
              goto LABEL_33;
            v755 = *(_DWORD *)(v9 + 80);
            if ((v755 & 0x27) != 0 && (v755 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v48, v49, v50, v51, v52, v53);
            if (!*(_QWORD *)(v9 + 16))
            {
LABEL_33:
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v832 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v48, v49, v50, v51, v52, v53);
                if (v833)
                  v55 = v832;
                else
                  v55 = 0;
              }
              else
              {
                v55 = *(_QWORD *)(v10 + 24);
              }
              v56 = (unint64_t)v33;
              if (v21 == v55)
              {
                v57 = *(_QWORD *)(v10 + 16);
                if (v57 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v57 = (v57 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v58 = *((_QWORD *)Uninitialized + 2);
                if (v58 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v58 = (v58 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (!v21)
                  goto LABEL_387;
                if (v21 != 1)
                  goto LABEL_386;
                goto LABEL_261;
              }
              if (!v21)
                return Uninitialized;
              v834 = 0;
              while (1)
              {
                v835 = v32;
                if (v56 == v834)
                  goto LABEL_966;
                if ((*(_BYTE *)(v10 + 40) & 7u) <= 2)
                  break;
                v838 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                if (*(_BYTE *)(v838 + 64) && (v843 = *(_QWORD *)(v838 + 32)) != 0)
                  v839 = *(_QWORD *)(v843 + 32);
                else
                  v839 = *(_QWORD *)(v838 + 48);
                v841 = *(_QWORD *)(v10 + 24);
                v840 = *(_QWORD *)(v10 + 32);
                if (v841 + v840 <= v839)
                {
                  if ((*(_BYTE *)(v10 + 40) & 1) == 0)
                  {
                    if (v841 > v834)
                    {
LABEL_956:
                      v837 = *(_QWORD *)(v10 + 16);
                      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                        v837 = (v837 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                      v835 = *(_BYTE *)(v837 + v834);
                      goto LABEL_966;
                    }
                    goto LABEL_965;
                  }
                  v836 = v839 - v840;
                  goto LABEL_955;
                }
LABEL_965:
                v835 = 0;
LABEL_966:
                v842 = *((_QWORD *)Uninitialized + 2);
                if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v842 = (v842 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                *(_BYTE *)(v842 + v834++) = v835;
                if (v21 == v834)
                  return Uninitialized;
              }
              v836 = *(_QWORD *)(v10 + 24);
LABEL_955:
              if (v836 > v834)
                goto LABEL_956;
              goto LABEL_965;
            }
          }
          return 0;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v13, v14, v15, v16, v17, v18, v19);
      goto LABEL_461;
    case '(':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v261 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v269)
        goto LABEL_525;
      v21 = v261;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v270 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v270;
        if ((unint64_t)v270 >= 0xFFFE000000000000)
        {
          v271 = (double)(int)v270;
          goto LABEL_224;
        }
        v1175 = (unint64_t)v270 - 0x2000000000000;
        if (v1175 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v268.i64[0] = v1175;
LABEL_464:
          v271 = trunc(*(double *)v268.i64 + 0.0);
LABEL_224:
          if (*(_DWORD *)(v9 + 80))
          {
            v614 = *(_DWORD *)(v9 + 80);
            if ((v614 & 0x27) != 0 && (v614 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v262, v263, v264, v265, v266, v267);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v272 = v271 >= 0.0 ? -0.0 : (double)v21;
          v273 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
          *(double *)v268.i64 = (double)v21;
          v32 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)v8, v273, v262, v263, v264, v265, v266, v267, v268);
          if (*(_DWORD *)(v9 + 80))
          {
            v664 = *(_DWORD *)(v9 + 80);
            if ((v664 & 0x27) != 0 && (v664 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v274, v275, v276, v277, v278, v279);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v280 = v271 + v272;
          v281 = *(JSC::VM **)(v8 + 56);
          v282 = trunc(v280);
          if ((*(_QWORD *)&v280 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v282 == v280)
          {
            if (v280 != 0.0 || (*(_QWORD *)&v280 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v291.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v274, v275, v276, v277, v278, v279);
              if (v280 >= 0.0 && v284 != 0 && v280 < v291.n128_f64[0])
                goto LABEL_246;
              v556 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v556 = 0x1500000002;
              *(_QWORD *)(v556 + 8) = "index is out of range";
              *(_DWORD *)(v556 + 16) = 4;
              v1187 = (WTF::StringImpl *)v556;
              v557 = *(_QWORD *)(v8 + 128);
              v558 = *(JSC::Heap ***)(v8 + 56);
              if ((v557 & 1) != 0)
              {
                v1135 = *(uint64_t (**)(uint64_t *))(v557 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1136 = (JSC::Structure **)(v8 - 16);
                else
                  v1136 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1136;
                v1185 = v8;
                v1186 = v8 + 128;
                v557 = v1135(&v1184);
              }
              v559 = JSC::ErrorInstance::create(v558, v557, &v1187, 0, 0, 0, 2, 1);
              v566 = (JSC::Exception *)v559;
              if ((v559 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v559 & 0xFFFFFFFE) + 0x4C)))
              {
                v566 = (JSC::Exception *)JSC::Exception::create((uint64_t)v281, (JSC::VM *)v559, 0, v560, v561, v562, v563, v564);
              }
              JSC::VM::throwException(v281, (JSC::JSGlobalObject *)v8, v566, v565, v560, v561, v562, v563, v564);
              v568 = v1187;
              v1187 = 0;
              if (!v568)
                goto LABEL_246;
LABEL_1188:
              if (*(_DWORD *)v568 == 2)
              {
                WTF::StringImpl::~StringImpl(v568, v567, v285, v286, v287, v288, v289, v290);
                WTF::fastFree(v1036, v1037, v1038, v1039, v1040, v1041, v1042, v1043);
              }
              else
              {
                *(_DWORD *)v568 -= 2;
              }
LABEL_246:
              if (*(_DWORD *)(v9 + 80))
              {
                v711 = *(_DWORD *)(v9 + 80);
                if ((v711 & 0x27) != 0 && (v711 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v285, v286, v287, v288, v289, v290);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v294 = *(_QWORD *)(v8 + 1688);
              if ((v294 & 1) != 0)
              {
                v756 = *(uint64_t (**)(uint64_t *, __n128))(v294 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v757 = (JSC::Structure **)(v8 - 16);
                else
                  v757 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v757;
                v1185 = v8;
                v1186 = v8 + 1688;
                v294 = v756(&v1184, v291);
              }
              Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v294, v21, v286, v287, v288, v289, v290);
              if (*(_DWORD *)(v9 + 80))
              {
                v758 = *(_DWORD *)(v9 + 80);
                if ((v758 & 0x27) != 0 && (v758 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v295, v296, v297, v298, v299, v300);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v844 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v295, v296, v297, v298, v299, v300);
                if (v845)
                  v301 = v844;
                else
                  v301 = 0;
              }
              else
              {
                v301 = *(_QWORD *)(v10 + 24);
              }
              v56 = (unint64_t)v280;
              if (v21 == v301)
              {
                v57 = *(_QWORD *)(v10 + 16);
                if (v57 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v57 = (v57 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v58 = *((_QWORD *)Uninitialized + 2);
                if (v58 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v58 = (v58 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (v21 != 1)
                {
                  if (v21)
LABEL_386:
                    memcpy((void *)v58, (const void *)v57, v21);
LABEL_387:
                  *(_BYTE *)(v58 + v56) = v32;
                  return Uninitialized;
                }
LABEL_261:
                *(_BYTE *)v58 = *(_BYTE *)v57;
                goto LABEL_387;
              }
              if (!v21)
                return Uninitialized;
              v846 = 0;
              while (1)
              {
                v847 = v32;
                if (v56 == v846)
                  goto LABEL_997;
                if ((*(_BYTE *)(v10 + 40) & 7u) <= 2)
                  break;
                v850 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                if (*(_BYTE *)(v850 + 64) && (v855 = *(_QWORD *)(v850 + 32)) != 0)
                  v851 = *(_QWORD *)(v855 + 32);
                else
                  v851 = *(_QWORD *)(v850 + 48);
                v853 = *(_QWORD *)(v10 + 24);
                v852 = *(_QWORD *)(v10 + 32);
                if (v853 + v852 <= v851)
                {
                  if ((*(_BYTE *)(v10 + 40) & 1) == 0)
                  {
                    if (v853 > v846)
                    {
LABEL_987:
                      v849 = *(_QWORD *)(v10 + 16);
                      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                        v849 = (v849 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                      v847 = *(_BYTE *)(v849 + v846);
                      goto LABEL_997;
                    }
                    goto LABEL_996;
                  }
                  v848 = v851 - v852;
                  goto LABEL_986;
                }
LABEL_996:
                v847 = 0;
LABEL_997:
                v854 = *((_QWORD *)Uninitialized + 2);
                if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v854 = (v854 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                *(_BYTE *)(v854 + v846++) = v847;
                if (v21 == v846)
                  return Uninitialized;
              }
              v848 = *(_QWORD *)(v10 + 24);
LABEL_986:
              if (v848 > v846)
                goto LABEL_987;
              goto LABEL_996;
            }
            v728 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v728 = 0x2100000002;
            v729 = "index should not be negative zero";
          }
          else
          {
            v728 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v728 = 0x1700000002;
            v729 = "index should be integer";
          }
          *(_QWORD *)(v728 + 8) = v729;
          *(_DWORD *)(v728 + 16) = 4;
          v1188 = (WTF::StringImpl *)v728;
          v1026 = *(_QWORD *)(v8 + 128);
          v1027 = *(JSC::Heap ***)(v8 + 56);
          if ((v1026 & 1) != 0)
          {
            v1159 = *(uint64_t (**)(uint64_t *))(v1026 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1160 = (JSC::Structure **)(v8 - 16);
            else
              v1160 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1160;
            v1185 = v8;
            v1186 = v8 + 128;
            v1026 = v1159(&v1184);
          }
          v1028 = JSC::ErrorInstance::create(v1027, v1026, &v1188, 0, 0, 0, 2, 1);
          v1035 = (JSC::Exception *)v1028;
          if ((v1028 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v1028 & 0xFFFFFFFE) + 0x4C)))
          {
            v1035 = (JSC::Exception *)JSC::Exception::create((uint64_t)v281, (JSC::VM *)v1028, 0, v1029, v1030, v1031, v1032, v1033);
          }
          JSC::VM::throwException(v281, (JSC::JSGlobalObject *)v8, v1035, v1034, v1029, v1030, v1031, v1032, v1033);
          v568 = v1188;
          v1188 = 0;
          if (!v568)
            goto LABEL_246;
          goto LABEL_1188;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v262, v263, v264, v265, v266, v267, v268);
      goto LABEL_464;
    case ')':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v151 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v159)
        goto LABEL_525;
      v160 = v151;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
LABEL_451:
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v152, v153, v154, v155, v156, v157, v158);
        goto LABEL_452;
      }
      v161 = (JSC::Structure *)*((_QWORD *)a2 + 6);
      v1184 = (uint64_t)v161;
      if ((unint64_t)v161 >= 0xFFFE000000000000)
      {
        v162 = (double)(int)v161;
        goto LABEL_141;
      }
      v1172 = (unint64_t)v161 - 0x2000000000000;
      if (v1172 > 0xFFFBFFFFFFFFFFFFLL)
        goto LABEL_451;
      v158.i64[0] = v1172;
LABEL_452:
      v162 = trunc(*(double *)v158.i64 + 0.0);
LABEL_141:
      if (*(_DWORD *)(v9 + 80))
      {
        v610 = *(_DWORD *)(v9 + 80);
        if ((v610 & 0x27) != 0 && (v610 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v152, v153, v154, v155, v156, v157);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v163 = v162 >= 0.0 ? -0.0 : (double)v160;
      v164 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                             ? 10
                             : *((_QWORD *)a2 + 7));
      *(double *)v158.i64 = (double)v160;
      v171 = JSC::toNativeFromValue<JSC::Uint8ClampedAdaptor>((JSC::JSGlobalObject *)v8, v164, v152, v153, v154, v155, v156, v157, v158);
      if (*(_DWORD *)(v9 + 80))
      {
        v660 = *(_DWORD *)(v9 + 80);
        if ((v660 & 0x27) != 0 && (v660 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v165, v166, v167, v168, v169, v170);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v172 = v162 + v163;
      v173 = *(JSC::VM **)(v8 + 56);
      v174 = trunc(v172);
      if ((*(_QWORD *)&v172 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v174 != v172)
      {
        v720 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v720 = 0x1700000002;
        v721 = "index should be integer";
        goto LABEL_1152;
      }
      if (v172 == 0.0 && (*(_QWORD *)&v172 & 0x8000000000000000) != 0)
      {
        v720 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v720 = 0x2100000002;
        v721 = "index should not be negative zero";
LABEL_1152:
        *(_QWORD *)(v720 + 8) = v721;
        *(_DWORD *)(v720 + 16) = 4;
        v1188 = (WTF::StringImpl *)v720;
        v954 = *(_QWORD *)(v8 + 128);
        v955 = *(JSC::Heap ***)(v8 + 56);
        if ((v954 & 1) != 0)
        {
          v1151 = *(uint64_t (**)(uint64_t *))(v954 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v1152 = (JSC::Structure **)(v8 - 16);
          else
            v1152 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v1184 = (uint64_t)*v1152;
          v1185 = v8;
          v1186 = v8 + 128;
          v954 = v1151(&v1184);
        }
        v956 = JSC::ErrorInstance::create(v955, v954, &v1188, 0, 0, 0, 2, 1);
        v963 = (JSC::Exception *)v956;
        if ((v956 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v956 & 0xFFFFFFFE) + 0x4C)))
        {
          v963 = (JSC::Exception *)JSC::Exception::create((uint64_t)v173, (JSC::VM *)v956, 0, v957, v958, v959, v960, v961);
        }
        JSC::VM::throwException(v173, (JSC::JSGlobalObject *)v8, v963, v962, v957, v958, v959, v960, v961);
        v516 = v1188;
        v1188 = 0;
        if (!v516)
          goto LABEL_163;
        goto LABEL_1156;
      }
      LOBYTE(v1188) = 0;
      v1189 = 0;
      v183.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v165, v166, v167, v168, v169, v170);
      if (v172 >= 0.0 && v176 != 0 && v172 < v183.n128_f64[0])
        goto LABEL_163;
      v504 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v504 = 0x1500000002;
      *(_QWORD *)(v504 + 8) = "index is out of range";
      *(_DWORD *)(v504 + 16) = 4;
      v1187 = (WTF::StringImpl *)v504;
      v505 = *(_QWORD *)(v8 + 128);
      v506 = *(JSC::Heap ***)(v8 + 56);
      if ((v505 & 1) != 0)
      {
        v1127 = *(uint64_t (**)(uint64_t *))(v505 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v1128 = (JSC::Structure **)(v8 - 16);
        else
          v1128 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1184 = (uint64_t)*v1128;
        v1185 = v8;
        v1186 = v8 + 128;
        v505 = v1127(&v1184);
      }
      v507 = JSC::ErrorInstance::create(v506, v505, &v1187, 0, 0, 0, 2, 1);
      v514 = (JSC::Exception *)v507;
      if ((v507 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v507 & 0xFFFFFFFE) + 0x4C)))
      {
        v514 = (JSC::Exception *)JSC::Exception::create((uint64_t)v173, (JSC::VM *)v507, 0, v508, v509, v510, v511, v512);
      }
      JSC::VM::throwException(v173, (JSC::JSGlobalObject *)v8, v514, v513, v508, v509, v510, v511, v512);
      v516 = v1187;
      v1187 = 0;
      if (!v516)
        goto LABEL_163;
LABEL_1156:
      if (*(_DWORD *)v516 == 2)
      {
        WTF::StringImpl::~StringImpl(v516, v515, v177, v178, v179, v180, v181, v182);
        WTF::fastFree(v964, v965, v966, v967, v968, v969, v970, v971);
      }
      else
      {
        *(_DWORD *)v516 -= 2;
      }
LABEL_163:
      if (*(_DWORD *)(v9 + 80))
      {
        v707 = *(_DWORD *)(v9 + 80);
        if ((v707 & 0x27) != 0 && (v707 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v177, v178, v179, v180, v181, v182);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      v186 = *(_QWORD *)(v8 + 1712);
      if ((v186 & 1) != 0)
      {
        v744 = *(uint64_t (**)(uint64_t *, __n128))(v186 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 8) != 0)
          v745 = (JSC::Structure **)(v8 - 16);
        else
          v745 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
        v1184 = (uint64_t)*v745;
        v1185 = v8;
        v1186 = v8 + 1712;
        v186 = v744(&v1184, v183);
      }
      Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v186, v160, v178, v179, v180, v181, v182);
      if (*(_DWORD *)(v9 + 80))
      {
        v746 = *(_DWORD *)(v9 + 80);
        if ((v746 & 0x27) != 0 && (v746 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v187, v188, v189, v190, v191, v192);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(v1184) = 0;
        LOBYTE(v1185) = 0;
        v784 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v187, v188, v189, v190, v191, v192);
        if (v785)
          v193 = v784;
        else
          v193 = 0;
      }
      else
      {
        v193 = *(_QWORD *)(v10 + 24);
      }
      v194 = (unint64_t)v172;
      if (v160 == v193)
      {
        v195 = *(_QWORD *)(v10 + 16);
        if (v195 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v195 = (v195 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v196 = *((_QWORD *)Uninitialized + 2);
        if (v196 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v196 = (v196 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v160 == 1)
        {
          *(_BYTE *)v196 = *(_BYTE *)v195;
        }
        else if (v160)
        {
          memcpy((void *)v196, (const void *)v195, v160);
        }
        *(_BYTE *)(v196 + v194) = v171;
      }
      else if (v160)
      {
        for (i = 0; i != v160; ++i)
        {
          if (v194 == i)
          {
            v787 = qword_1ECF4C038;
            v788 = v171;
          }
          else
          {
            v789 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v10, i);
            v787 = qword_1ECF4C038;
            if (v789)
            {
              v790 = *(_QWORD *)(v10 + 16);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v790 = (v790 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v788 = *(_BYTE *)(v790 + i);
            }
            else
            {
              v788 = 0;
            }
          }
          v791 = *((_QWORD *)Uninitialized + 2);
          if (v787 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v791 = (v791 & 0x3FFFFFFFFLL) + v787;
          *(_BYTE *)(v791 + i) = v788;
        }
      }
      return Uninitialized;
    case '*':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v197 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v205)
        goto LABEL_525;
      v72 = v197;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v206 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v206;
        if ((unint64_t)v206 >= 0xFFFE000000000000)
        {
          v207 = (double)(int)v206;
          goto LABEL_183;
        }
        v1173 = (unint64_t)v206 - 0x2000000000000;
        if (v1173 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v204.i64[0] = v1173;
LABEL_455:
          v207 = trunc(*(double *)v204.i64 + 0.0);
LABEL_183:
          if (*(_DWORD *)(v9 + 80))
          {
            v611 = *(_DWORD *)(v9 + 80);
            if ((v611 & 0x27) != 0 && (v611 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v198, v199, v200, v201, v202, v203);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v208 = v207 >= 0.0 ? -0.0 : (double)v72;
          v209 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
          *(double *)v204.i64 = (double)v72;
          v83 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)v8, v209, v198, v199, v200, v201, v202, v203, v204);
          if (*(_DWORD *)(v9 + 80))
          {
            v661 = *(_DWORD *)(v9 + 80);
            if ((v661 & 0x27) != 0 && (v661 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v210, v211, v212, v213, v214, v215);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v216 = v207 + v208;
          v217 = *(JSC::VM **)(v8 + 56);
          v218 = trunc(v216);
          if ((*(_QWORD *)&v216 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v218 == v216)
          {
            if (v216 != 0.0 || (*(_QWORD *)&v216 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v227.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v210, v211, v212, v213, v214, v215);
              if (v216 >= 0.0 && v220 != 0 && v216 < v227.n128_f64[0])
                goto LABEL_205;
              v517 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v517 = 0x1500000002;
              *(_QWORD *)(v517 + 8) = "index is out of range";
              *(_DWORD *)(v517 + 16) = 4;
              v1187 = (WTF::StringImpl *)v517;
              v518 = *(_QWORD *)(v8 + 128);
              v519 = *(JSC::Heap ***)(v8 + 56);
              if ((v518 & 1) != 0)
              {
                v1129 = *(uint64_t (**)(uint64_t *))(v518 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1130 = (JSC::Structure **)(v8 - 16);
                else
                  v1130 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1130;
                v1185 = v8;
                v1186 = v8 + 128;
                v518 = v1129(&v1184);
              }
              v520 = JSC::ErrorInstance::create(v519, v518, &v1187, 0, 0, 0, 2, 1);
              v527 = (JSC::Exception *)v520;
              if ((v520 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v520 & 0xFFFFFFFE) + 0x4C)))
              {
                v527 = (JSC::Exception *)JSC::Exception::create((uint64_t)v217, (JSC::VM *)v520, 0, v521, v522, v523, v524, v525);
              }
              JSC::VM::throwException(v217, (JSC::JSGlobalObject *)v8, v527, v526, v521, v522, v523, v524, v525);
              v529 = v1187;
              v1187 = 0;
              if (!v529)
                goto LABEL_205;
LABEL_1164:
              if (*(_DWORD *)v529 == 2)
              {
                WTF::StringImpl::~StringImpl(v529, v528, v221, v222, v223, v224, v225, v226);
                WTF::fastFree(v982, v983, v984, v985, v986, v987, v988, v989);
              }
              else
              {
                *(_DWORD *)v529 -= 2;
              }
LABEL_205:
              if (*(_DWORD *)(v9 + 80))
              {
                v708 = *(_DWORD *)(v9 + 80);
                if ((v708 & 0x27) != 0 && (v708 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v221, v222, v223, v224, v225, v226);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v230 = *(_QWORD *)(v8 + 1736);
              if ((v230 & 1) != 0)
              {
                v747 = *(uint64_t (**)(uint64_t *, __n128))(v230 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v748 = (JSC::Structure **)(v8 - 16);
                else
                  v748 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v748;
                v1185 = v8;
                v1186 = v8 + 1736;
                v230 = v747(&v1184, v227);
              }
              v231 = *(JSC **)(v8 + 56);
              JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v1184, v231, v230, v72, 2, 1, v225, v226);
              if (v1184)
              {
                Uninitialized = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v231, (JSC::VM *)0x30, v233, v234, v235, v236, v237, v238);
                v239 = JSC::JSArrayBufferView::JSArrayBufferView(Uninitialized, (uint64_t)v231, (uint64_t)&v1184);
                JSC::JSArrayBufferView::finishCreation((unint64_t)v239, v231);
              }
              else
              {
                OutOfMemoryError = JSC::createOutOfMemoryError(v8, v232);
                v437 = (JSC::Exception *)OutOfMemoryError;
                if ((OutOfMemoryError & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16
                                                                          * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                          + 0x4C)))
                {
                  v437 = (JSC::Exception *)JSC::Exception::create((uint64_t)v231, (JSC::VM *)OutOfMemoryError, 0, v431, v432, v433, v434, v435);
                }
                JSC::VM::throwException(v231, (JSC::JSGlobalObject *)v8, v437, v436, v431, v432, v433, v434, v435);
                Uninitialized = 0;
              }
              if (*(_DWORD *)(v9 + 80))
              {
                v749 = *(_DWORD *)(v9 + 80);
                if ((v749 & 0x27) != 0 && (v749 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v240, v241, v242, v243, v244, v245);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v792 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v240, v241, v242, v243, v244, v245);
                if (v793)
                  v438 = v792;
                else
                  v438 = 0;
              }
              else
              {
                v438 = *(_QWORD *)(v10 + 24);
              }
              v106 = (unint64_t)v216;
              if (v72 == v438)
                goto LABEL_395;
              if (!v72)
                return Uninitialized;
              v794 = 0;
              v795 = disablePrimitiveGigacageRequested;
              v796 = *((_QWORD *)Uninitialized + 2);
              v797 = qword_1ECF4C038;
              v798 = (v796 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              if (byte_1ECF4C022)
                v799 = 1;
              else
                v799 = disablePrimitiveGigacageRequested == 0;
              v801 = v799 && qword_1ECF4C038 != 0;
              while (1)
              {
                v802 = v83;
                if (v106 != v794)
                {
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    v804 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                    if (*(_BYTE *)(v804 + 64) && (v811 = *(_QWORD *)(v804 + 32)) != 0)
                      v805 = *(_QWORD *)(v811 + 32);
                    else
                      v805 = *(_QWORD *)(v804 + 48);
                    v806 = *(_QWORD *)(v10 + 24);
                    v807 = *(_QWORD *)(v10 + 32);
                    if (v807 + 2 * v806 <= v805)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 1) != 0)
                      {
                        if (v794 < (v805 - v807) >> 1)
                        {
LABEL_883:
                          v803 = *(_QWORD *)(v10 + 16);
                          if (v801)
                            v803 = (v803 & 0x3FFFFFFFFLL) + v797;
                          v802 = *(_WORD *)(v803 + 2 * v794);
                          goto LABEL_894;
                        }
                      }
                      else if (v806 > v794)
                      {
                        goto LABEL_883;
                      }
                    }
                  }
                  else if (*(_QWORD *)(v10 + 24) > v794)
                  {
                    goto LABEL_883;
                  }
                  v802 = 0;
                }
LABEL_894:
                if (v795)
                  v808 = byte_1ECF4C022 == 0;
                else
                  v808 = 0;
                if (v808 || v797 == 0)
                  v810 = v796;
                else
                  v810 = v798;
                *(_WORD *)(v810 + 2 * v794++) = v802;
                if (v72 == v794)
                  return Uninitialized;
              }
            }
            v722 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v722 = 0x2100000002;
            v723 = "index should not be negative zero";
          }
          else
          {
            v722 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v722 = 0x1700000002;
            v723 = "index should be integer";
          }
          *(_QWORD *)(v722 + 8) = v723;
          *(_DWORD *)(v722 + 16) = 4;
          v1188 = (WTF::StringImpl *)v722;
          v972 = *(_QWORD *)(v8 + 128);
          v973 = *(JSC::Heap ***)(v8 + 56);
          if ((v972 & 1) != 0)
          {
            v1153 = *(uint64_t (**)(uint64_t *))(v972 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1154 = (JSC::Structure **)(v8 - 16);
            else
              v1154 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1154;
            v1185 = v8;
            v1186 = v8 + 128;
            v972 = v1153(&v1184);
          }
          v974 = JSC::ErrorInstance::create(v973, v972, &v1188, 0, 0, 0, 2, 1);
          v981 = (JSC::Exception *)v974;
          if ((v974 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v974 & 0xFFFFFFFE) + 0x4C)))
          {
            v981 = (JSC::Exception *)JSC::Exception::create((uint64_t)v217, (JSC::VM *)v974, 0, v975, v976, v977, v978, v979);
          }
          JSC::VM::throwException(v217, (JSC::JSGlobalObject *)v8, v981, v980, v975, v976, v977, v978, v979);
          v529 = v1188;
          v1188 = 0;
          if (!v529)
            goto LABEL_205;
          goto LABEL_1164;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v198, v199, v200, v201, v202, v203, v204);
      goto LABEL_455;
    case '+':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v63 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v71)
        goto LABEL_525;
      v72 = v63;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v73 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v73;
        if ((unint64_t)v73 >= 0xFFFE000000000000)
        {
          v74 = (double)(int)v73;
          goto LABEL_54;
        }
        v1170 = (unint64_t)v73 - 0x2000000000000;
        if (v1170 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v70.i64[0] = v1170;
LABEL_446:
          v74 = trunc(*(double *)v70.i64 + 0.0);
LABEL_54:
          if (*(_DWORD *)(v9 + 80))
          {
            v608 = *(_DWORD *)(v9 + 80);
            if ((v608 & 0x27) != 0 && (v608 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v64, v65, v66, v67, v68, v69);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v75 = v74 >= 0.0 ? -0.0 : (double)v72;
          v76 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
          *(double *)v70.i64 = (double)v72;
          v83 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)v8, v76, v64, v65, v66, v67, v68, v69, v70);
          if (*(_DWORD *)(v9 + 80))
          {
            v619 = *(_DWORD *)(v9 + 80);
            if ((v619 & 0x27) != 0 && (v619 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v77, v78, v79, v80, v81, v82);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v84 = v74 + v75;
          v85 = *(JSC::VM **)(v8 + 56);
          v86 = trunc(v84);
          if ((*(_QWORD *)&v84 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v86 == v84)
          {
            if (v84 != 0.0 || (*(_QWORD *)&v84 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v95.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v77, v78, v79, v80, v81, v82);
              if (v84 >= 0.0 && v88 != 0 && v84 < v95.n128_f64[0])
                goto LABEL_76;
              v491 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v491 = 0x1500000002;
              *(_QWORD *)(v491 + 8) = "index is out of range";
              *(_DWORD *)(v491 + 16) = 4;
              v1187 = (WTF::StringImpl *)v491;
              v492 = *(_QWORD *)(v8 + 128);
              v493 = *(JSC::Heap ***)(v8 + 56);
              if ((v492 & 1) != 0)
              {
                v1125 = *(uint64_t (**)(uint64_t *))(v492 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1126 = (JSC::Structure **)(v8 - 16);
                else
                  v1126 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1126;
                v1185 = v8;
                v1186 = v8 + 128;
                v492 = v1125(&v1184);
              }
              v494 = JSC::ErrorInstance::create(v493, v492, &v1187, 0, 0, 0, 2, 1);
              v501 = (JSC::Exception *)v494;
              if ((v494 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v494 & 0xFFFFFFFE) + 0x4C)))
              {
                v501 = (JSC::Exception *)JSC::Exception::create((uint64_t)v85, (JSC::VM *)v494, 0, v495, v496, v497, v498, v499);
              }
              JSC::VM::throwException(v85, (JSC::JSGlobalObject *)v8, v501, v500, v495, v496, v497, v498, v499);
              v503 = v1187;
              v1187 = 0;
              if (!v503)
                goto LABEL_76;
LABEL_1140:
              if (*(_DWORD *)v503 == 2)
              {
                WTF::StringImpl::~StringImpl(v503, v502, v89, v90, v91, v92, v93, v94);
                WTF::fastFree(v928, v929, v930, v931, v932, v933, v934, v935);
              }
              else
              {
                *(_DWORD *)v503 -= 2;
              }
LABEL_76:
              if (*(_DWORD *)(v9 + 80))
              {
                v705 = *(_DWORD *)(v9 + 80);
                if ((v705 & 0x27) != 0 && (v705 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v89, v90, v91, v92, v93, v94);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v98 = *(_QWORD *)(v8 + 1760);
              if ((v98 & 1) != 0)
              {
                v738 = *(uint64_t (**)(uint64_t *, __n128))(v98 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v739 = (JSC::Structure **)(v8 - 16);
                else
                  v739 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v739;
                v1185 = v8;
                v1186 = v8 + 1760;
                v98 = v738(&v1184, v95);
              }
              Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v98, v72, v90, v91, v92, v93, v94);
              if (*(_DWORD *)(v9 + 80))
              {
                v740 = *(_DWORD *)(v9 + 80);
                if ((v740 & 0x27) != 0 && (v740 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v99, v100, v101, v102, v103, v104);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v771 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v99, v100, v101, v102, v103, v104);
                if (v772)
                  v105 = v771;
                else
                  v105 = 0;
              }
              else
              {
                v105 = *(_QWORD *)(v10 + 24);
              }
              v106 = (unint64_t)v84;
              if (v72 == v105)
              {
LABEL_395:
                v439 = *(_QWORD *)(v10 + 16);
                if (v439 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v439 = (v439 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v440 = *((_QWORD *)Uninitialized + 2);
                if (v440 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v440 = (v440 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (v72)
                {
                  if (v72 == 1)
                    *(_WORD *)v440 = *(_WORD *)v439;
                  else
                    memcpy((void *)v440, (const void *)v439, 2 * v72);
                }
                *(_WORD *)(v440 + 2 * v106) = v83;
                return Uninitialized;
              }
              if (!v72)
                return Uninitialized;
              v107 = 0;
              v108 = disablePrimitiveGigacageRequested;
              v109 = *((_QWORD *)Uninitialized + 2);
              v110 = qword_1ECF4C038;
              v111 = (v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              if (byte_1ECF4C022)
                v112 = 1;
              else
                v112 = disablePrimitiveGigacageRequested == 0;
              v114 = v112 && qword_1ECF4C038 != 0;
              while (1)
              {
                v115 = v83;
                if (v106 != v107)
                {
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    v117 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                    if (*(_BYTE *)(v117 + 64) && (v124 = *(_QWORD *)(v117 + 32)) != 0)
                      v118 = *(_QWORD *)(v124 + 32);
                    else
                      v118 = *(_QWORD *)(v117 + 48);
                    v119 = *(_QWORD *)(v10 + 24);
                    v120 = *(_QWORD *)(v10 + 32);
                    if (v120 + 2 * v119 <= v118)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 1) != 0)
                      {
                        if (v107 < (v118 - v120) >> 1)
                        {
LABEL_95:
                          v116 = *(_QWORD *)(v10 + 16);
                          if (v114)
                            v116 = (v116 & 0x3FFFFFFFFLL) + v110;
                          v115 = *(_WORD *)(v116 + 2 * v107);
                          goto LABEL_106;
                        }
                      }
                      else if (v119 > v107)
                      {
                        goto LABEL_95;
                      }
                    }
                  }
                  else if (*(_QWORD *)(v10 + 24) > v107)
                  {
                    goto LABEL_95;
                  }
                  v115 = 0;
                }
LABEL_106:
                if (v108)
                  v121 = byte_1ECF4C022 == 0;
                else
                  v121 = 0;
                if (v121 || v110 == 0)
                  v123 = v109;
                else
                  v123 = v111;
                *(_WORD *)(v123 + 2 * v107++) = v115;
                if (v72 == v107)
                  return Uninitialized;
              }
            }
            v716 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v716 = 0x2100000002;
            v717 = "index should not be negative zero";
          }
          else
          {
            v716 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v716 = 0x1700000002;
            v717 = "index should be integer";
          }
          *(_QWORD *)(v716 + 8) = v717;
          *(_DWORD *)(v716 + 16) = 4;
          v1188 = (WTF::StringImpl *)v716;
          v918 = *(_QWORD *)(v8 + 128);
          v919 = *(JSC::Heap ***)(v8 + 56);
          if ((v918 & 1) != 0)
          {
            v1147 = *(uint64_t (**)(uint64_t *))(v918 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1148 = (JSC::Structure **)(v8 - 16);
            else
              v1148 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1148;
            v1185 = v8;
            v1186 = v8 + 128;
            v918 = v1147(&v1184);
          }
          v920 = JSC::ErrorInstance::create(v919, v918, &v1188, 0, 0, 0, 2, 1);
          v927 = (JSC::Exception *)v920;
          if ((v920 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v920 & 0xFFFFFFFE) + 0x4C)))
          {
            v927 = (JSC::Exception *)JSC::Exception::create((uint64_t)v85, (JSC::VM *)v920, 0, v921, v922, v923, v924, v925);
          }
          JSC::VM::throwException(v85, (JSC::JSGlobalObject *)v8, v927, v926, v921, v922, v923, v924, v925);
          v503 = v1188;
          v1188 = 0;
          if (!v503)
            goto LABEL_76;
          goto LABEL_1140;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v64, v65, v66, v67, v68, v69, v70);
      goto LABEL_446;
    case ',':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v302 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v310)
        goto LABEL_525;
      v311 = v302;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v312 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v312;
        if ((unint64_t)v312 >= 0xFFFE000000000000)
        {
          v313 = (double)(int)v312;
          goto LABEL_266;
        }
        v1176 = (unint64_t)v312 - 0x2000000000000;
        if (v1176 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v309.i64[0] = v1176;
LABEL_467:
          v313 = trunc(*(double *)v309.i64 + 0.0);
LABEL_266:
          if (*(_DWORD *)(v9 + 80))
          {
            v615 = *(_DWORD *)(v9 + 80);
            if ((v615 & 0x27) != 0 && (v615 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v303, v304, v305, v306, v307, v308);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v314 = v313 >= 0.0 ? -0.0 : (double)v311;
          v315 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
          *(double *)v309.i64 = (double)v311;
          v322 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)v8, v315, v303, v304, v305, v306, v307, v308, v309);
          if (*(_DWORD *)(v9 + 80))
          {
            v665 = *(_DWORD *)(v9 + 80);
            if ((v665 & 0x27) != 0 && (v665 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v316, v317, v318, v319, v320, v321);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v323 = v313 + v314;
          v324 = *(JSC::VM **)(v8 + 56);
          v325 = trunc(v323);
          if ((*(_QWORD *)&v323 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v325 == v323)
          {
            if (v323 != 0.0 || (*(_QWORD *)&v323 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v334.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v316, v317, v318, v319, v320, v321);
              if (v323 >= 0.0 && v327 != 0 && v323 < v334.n128_f64[0])
                goto LABEL_288;
              v569 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v569 = 0x1500000002;
              *(_QWORD *)(v569 + 8) = "index is out of range";
              *(_DWORD *)(v569 + 16) = 4;
              v1187 = (WTF::StringImpl *)v569;
              v570 = *(_QWORD *)(v8 + 128);
              v571 = *(JSC::Heap ***)(v8 + 56);
              if ((v570 & 1) != 0)
              {
                v1137 = *(uint64_t (**)(uint64_t *))(v570 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1138 = (JSC::Structure **)(v8 - 16);
                else
                  v1138 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1138;
                v1185 = v8;
                v1186 = v8 + 128;
                v570 = v1137(&v1184);
              }
              v572 = JSC::ErrorInstance::create(v571, v570, &v1187, 0, 0, 0, 2, 1);
              v579 = (JSC::Exception *)v572;
              if ((v572 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v572 & 0xFFFFFFFE) + 0x4C)))
              {
                v579 = (JSC::Exception *)JSC::Exception::create((uint64_t)v324, (JSC::VM *)v572, 0, v573, v574, v575, v576, v577);
              }
              JSC::VM::throwException(v324, (JSC::JSGlobalObject *)v8, v579, v578, v573, v574, v575, v576, v577);
              v581 = v1187;
              v1187 = 0;
              if (!v581)
                goto LABEL_288;
LABEL_1196:
              if (*(_DWORD *)v581 == 2)
              {
                WTF::StringImpl::~StringImpl(v581, v580, v328, v329, v330, v331, v332, v333);
                WTF::fastFree(v1054, v1055, v1056, v1057, v1058, v1059, v1060, v1061);
              }
              else
              {
                *(_DWORD *)v581 -= 2;
              }
LABEL_288:
              if (*(_DWORD *)(v9 + 80))
              {
                v712 = *(_DWORD *)(v9 + 80);
                if ((v712 & 0x27) != 0 && (v712 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v328, v329, v330, v331, v332, v333);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v337 = *(_QWORD *)(v8 + 1784);
              if ((v337 & 1) != 0)
              {
                v759 = *(uint64_t (**)(uint64_t *, __n128))(v337 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v760 = (JSC::Structure **)(v8 - 16);
                else
                  v760 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v760;
                v1185 = v8;
                v1186 = v8 + 1784;
                v337 = v759(&v1184, v334);
              }
              Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v337, v311, v329, v330, v331, v332, v333);
              if (*(_DWORD *)(v9 + 80))
              {
                v761 = *(_DWORD *)(v9 + 80);
                if ((v761 & 0x27) != 0 && (v761 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v338, v339, v340, v341, v342, v343);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v856 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v338, v339, v340, v341, v342, v343);
                if (v857)
                  v344 = v856;
                else
                  v344 = 0;
              }
              else
              {
                v344 = *(_QWORD *)(v10 + 24);
              }
              v345 = (unint64_t)v323;
              if (v311 == v344)
              {
                v346 = *(_QWORD *)(v10 + 16);
                if (v346 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v346 = (v346 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v347 = *((_QWORD *)Uninitialized + 2);
                if (v347 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v347 = (v347 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (!v311)
                  goto LABEL_348;
                if (v311 == 1)
                  goto LABEL_304;
                goto LABEL_347;
              }
              if (!v311)
                return Uninitialized;
              v858 = 0;
              v859 = disablePrimitiveGigacageRequested;
              v860 = *((_QWORD *)Uninitialized + 2);
              v861 = qword_1ECF4C038;
              v862 = (v860 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              if (byte_1ECF4C022)
                v863 = 1;
              else
                v863 = disablePrimitiveGigacageRequested == 0;
              v865 = v863 && qword_1ECF4C038 != 0;
              while (1)
              {
                v866 = v322;
                if (v345 != v858)
                {
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    v868 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                    if (*(_BYTE *)(v868 + 64) && (v875 = *(_QWORD *)(v868 + 32)) != 0)
                      v869 = *(_QWORD *)(v875 + 32);
                    else
                      v869 = *(_QWORD *)(v868 + 48);
                    v870 = *(_QWORD *)(v10 + 24);
                    v871 = *(_QWORD *)(v10 + 32);
                    if (v871 + 4 * v870 <= v869)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 1) != 0)
                      {
                        if (v858 < (v869 - v871) >> 2)
                        {
LABEL_1025:
                          v867 = *(_QWORD *)(v10 + 16);
                          if (v865)
                            v867 = (v867 & 0x3FFFFFFFFLL) + v861;
                          v866 = *(_DWORD *)(v867 + 4 * v858);
                          goto LABEL_1036;
                        }
                      }
                      else if (v870 > v858)
                      {
                        goto LABEL_1025;
                      }
                    }
                  }
                  else if (*(_QWORD *)(v10 + 24) > v858)
                  {
                    goto LABEL_1025;
                  }
                  v866 = 0;
                }
LABEL_1036:
                if (v859)
                  v872 = byte_1ECF4C022 == 0;
                else
                  v872 = 0;
                if (v872 || v861 == 0)
                  v874 = v860;
                else
                  v874 = v862;
                *(_DWORD *)(v874 + 4 * v858++) = v866;
                if (v311 == v858)
                  return Uninitialized;
              }
            }
            v730 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v730 = 0x2100000002;
            v731 = "index should not be negative zero";
          }
          else
          {
            v730 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v730 = 0x1700000002;
            v731 = "index should be integer";
          }
          *(_QWORD *)(v730 + 8) = v731;
          *(_DWORD *)(v730 + 16) = 4;
          v1188 = (WTF::StringImpl *)v730;
          v1044 = *(_QWORD *)(v8 + 128);
          v1045 = *(JSC::Heap ***)(v8 + 56);
          if ((v1044 & 1) != 0)
          {
            v1161 = *(uint64_t (**)(uint64_t *))(v1044 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1162 = (JSC::Structure **)(v8 - 16);
            else
              v1162 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1162;
            v1185 = v8;
            v1186 = v8 + 128;
            v1044 = v1161(&v1184);
          }
          v1046 = JSC::ErrorInstance::create(v1045, v1044, &v1188, 0, 0, 0, 2, 1);
          v1053 = (JSC::Exception *)v1046;
          if ((v1046 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v1046 & 0xFFFFFFFE) + 0x4C)))
          {
            v1053 = (JSC::Exception *)JSC::Exception::create((uint64_t)v324, (JSC::VM *)v1046, 0, v1047, v1048, v1049, v1050, v1051);
          }
          JSC::VM::throwException(v324, (JSC::JSGlobalObject *)v8, v1053, v1052, v1047, v1048, v1049, v1050, v1051);
          v581 = v1188;
          v1188 = 0;
          if (!v581)
            goto LABEL_288;
          goto LABEL_1196;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v303, v304, v305, v306, v307, v308, v309);
      goto LABEL_467;
    case '-':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v348 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v356)
        goto LABEL_525;
      v311 = v348;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v357 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v357;
        if ((unint64_t)v357 >= 0xFFFE000000000000)
        {
          v358 = (double)(int)v357;
          goto LABEL_309;
        }
        v1177 = (unint64_t)v357 - 0x2000000000000;
        if (v1177 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v355.i64[0] = v1177;
LABEL_470:
          v358 = trunc(*(double *)v355.i64 + 0.0);
LABEL_309:
          if (*(_DWORD *)(v9 + 80))
          {
            v616 = *(_DWORD *)(v9 + 80);
            if ((v616 & 0x27) != 0 && (v616 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v349, v350, v351, v352, v353, v354);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v359 = v358 >= 0.0 ? -0.0 : (double)v311;
          v360 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                                 ? 10
                                 : *((_QWORD *)a2 + 7));
          *(double *)v355.i64 = (double)v311;
          v322 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)v8, v360, v349, v350, v351, v352, v353, v354, v355);
          if (*(_DWORD *)(v9 + 80))
          {
            v666 = *(_DWORD *)(v9 + 80);
            if ((v666 & 0x27) != 0 && (v666 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v361, v362, v363, v364, v365, v366);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v367 = v358 + v359;
          v368 = *(JSC::VM **)(v8 + 56);
          v369 = trunc(v367);
          if ((*(_QWORD *)&v367 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v369 == v367)
          {
            if (v367 != 0.0 || (*(_QWORD *)&v367 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v378.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v361, v362, v363, v364, v365, v366);
              if (v367 >= 0.0 && v371 != 0 && v367 < v378.n128_f64[0])
                goto LABEL_331;
              v582 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v582 = 0x1500000002;
              *(_QWORD *)(v582 + 8) = "index is out of range";
              *(_DWORD *)(v582 + 16) = 4;
              v1187 = (WTF::StringImpl *)v582;
              v583 = *(_QWORD *)(v8 + 128);
              v584 = *(JSC::Heap ***)(v8 + 56);
              if ((v583 & 1) != 0)
              {
                v1139 = *(uint64_t (**)(uint64_t *))(v583 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1140 = (JSC::Structure **)(v8 - 16);
                else
                  v1140 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1140;
                v1185 = v8;
                v1186 = v8 + 128;
                v583 = v1139(&v1184);
              }
              v585 = JSC::ErrorInstance::create(v584, v583, &v1187, 0, 0, 0, 2, 1);
              v592 = (JSC::Exception *)v585;
              if ((v585 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v585 & 0xFFFFFFFE) + 0x4C)))
              {
                v592 = (JSC::Exception *)JSC::Exception::create((uint64_t)v368, (JSC::VM *)v585, 0, v586, v587, v588, v589, v590);
              }
              JSC::VM::throwException(v368, (JSC::JSGlobalObject *)v8, v592, v591, v586, v587, v588, v589, v590);
              v594 = v1187;
              v1187 = 0;
              if (!v594)
                goto LABEL_331;
LABEL_1204:
              if (*(_DWORD *)v594 == 2)
              {
                WTF::StringImpl::~StringImpl(v594, v593, v372, v373, v374, v375, v376, v377);
                WTF::fastFree(v1072, v1073, v1074, v1075, v1076, v1077, v1078, v1079);
              }
              else
              {
                *(_DWORD *)v594 -= 2;
              }
LABEL_331:
              if (*(_DWORD *)(v9 + 80))
              {
                v713 = *(_DWORD *)(v9 + 80);
                if ((v713 & 0x27) != 0 && (v713 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v372, v373, v374, v375, v376, v377);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v381 = *(_QWORD *)(v8 + 1808);
              if ((v381 & 1) != 0)
              {
                v762 = *(uint64_t (**)(uint64_t *, __n128))(v381 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v763 = (JSC::Structure **)(v8 - 16);
                else
                  v763 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v763;
                v1185 = v8;
                v1186 = v8 + 1808;
                v381 = v762(&v1184, v378);
              }
              Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v381, v311, v373, v374, v375, v376, v377);
              if (*(_DWORD *)(v9 + 80))
              {
                v764 = *(_DWORD *)(v9 + 80);
                if ((v764 & 0x27) != 0 && (v764 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v382, v383, v384, v385, v386, v387);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v876 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v382, v383, v384, v385, v386, v387);
                if (v877)
                  v388 = v876;
                else
                  v388 = 0;
              }
              else
              {
                v388 = *(_QWORD *)(v10 + 24);
              }
              v345 = (unint64_t)v367;
              if (v311 == v388)
              {
                v346 = *(_QWORD *)(v10 + 16);
                if (v346 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v346 = (v346 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v347 = *((_QWORD *)Uninitialized + 2);
                if (v347 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v347 = (v347 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (v311 == 1)
                {
LABEL_304:
                  *(_DWORD *)v347 = *(_DWORD *)v346;
LABEL_348:
                  *(_DWORD *)(v347 + 4 * v345) = v322;
                  return Uninitialized;
                }
                if (!v311)
                  goto LABEL_348;
LABEL_347:
                memcpy((void *)v347, (const void *)v346, 4 * v311);
                goto LABEL_348;
              }
              if (!v311)
                return Uninitialized;
              v878 = 0;
              v879 = disablePrimitiveGigacageRequested;
              v880 = *((_QWORD *)Uninitialized + 2);
              v881 = qword_1ECF4C038;
              v882 = (v880 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              if (byte_1ECF4C022)
                v883 = 1;
              else
                v883 = disablePrimitiveGigacageRequested == 0;
              v885 = v883 && qword_1ECF4C038 != 0;
              while (1)
              {
                v886 = v322;
                if (v345 != v878)
                {
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    v888 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                    if (*(_BYTE *)(v888 + 64) && (v895 = *(_QWORD *)(v888 + 32)) != 0)
                      v889 = *(_QWORD *)(v895 + 32);
                    else
                      v889 = *(_QWORD *)(v888 + 48);
                    v890 = *(_QWORD *)(v10 + 24);
                    v891 = *(_QWORD *)(v10 + 32);
                    if (v891 + 4 * v890 <= v889)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 1) != 0)
                      {
                        if (v878 < (v889 - v891) >> 2)
                        {
LABEL_1065:
                          v887 = *(_QWORD *)(v10 + 16);
                          if (v885)
                            v887 = (v887 & 0x3FFFFFFFFLL) + v881;
                          v886 = *(_DWORD *)(v887 + 4 * v878);
                          goto LABEL_1076;
                        }
                      }
                      else if (v890 > v878)
                      {
                        goto LABEL_1065;
                      }
                    }
                  }
                  else if (*(_QWORD *)(v10 + 24) > v878)
                  {
                    goto LABEL_1065;
                  }
                  v886 = 0;
                }
LABEL_1076:
                if (v879)
                  v892 = byte_1ECF4C022 == 0;
                else
                  v892 = 0;
                if (v892 || v881 == 0)
                  v894 = v880;
                else
                  v894 = v882;
                *(_DWORD *)(v894 + 4 * v878++) = v886;
                if (v311 == v878)
                  return Uninitialized;
              }
            }
            v732 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v732 = 0x2100000002;
            v733 = "index should not be negative zero";
          }
          else
          {
            v732 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v732 = 0x1700000002;
            v733 = "index should be integer";
          }
          *(_QWORD *)(v732 + 8) = v733;
          *(_DWORD *)(v732 + 16) = 4;
          v1188 = (WTF::StringImpl *)v732;
          v1062 = *(_QWORD *)(v8 + 128);
          v1063 = *(JSC::Heap ***)(v8 + 56);
          if ((v1062 & 1) != 0)
          {
            v1163 = *(uint64_t (**)(uint64_t *))(v1062 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1164 = (JSC::Structure **)(v8 - 16);
            else
              v1164 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1164;
            v1185 = v8;
            v1186 = v8 + 128;
            v1062 = v1163(&v1184);
          }
          v1064 = JSC::ErrorInstance::create(v1063, v1062, &v1188, 0, 0, 0, 2, 1);
          v1071 = (JSC::Exception *)v1064;
          if ((v1064 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v1064 & 0xFFFFFFFE) + 0x4C)))
          {
            v1071 = (JSC::Exception *)JSC::Exception::create((uint64_t)v368, (JSC::VM *)v1064, 0, v1065, v1066, v1067, v1068, v1069);
          }
          JSC::VM::throwException(v368, (JSC::JSGlobalObject *)v8, v1071, v1070, v1065, v1066, v1067, v1068, v1069);
          v594 = v1188;
          v1188 = 0;
          if (!v594)
            goto LABEL_331;
          goto LABEL_1204;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v349, v350, v351, v352, v353, v354, v355);
      goto LABEL_470;
    case '.':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v246 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v254)
        goto LABEL_525;
      v255 = v246;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v256 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v256;
        if ((unint64_t)v256 >= 0xFFFE000000000000)
        {
          v257 = (double)(int)v256;
          goto LABEL_213;
        }
        v1174 = (unint64_t)v256 - 0x2000000000000;
        if (v1174 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v253.i64[0] = v1174;
LABEL_458:
          v257 = trunc(*(double *)v253.i64 + 0.0);
LABEL_213:
          if (*(_DWORD *)(v9 + 80))
          {
            v612 = *(_DWORD *)(v9 + 80);
            if ((v612 & 0x27) != 0 && (v612 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v247, v248, v249, v250, v251, v252);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          if (v257 >= 0.0)
            v258 = -0.0;
          else
            v258 = (double)v255;
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v1184 = 10;
          }
          else
          {
            v259 = *((_QWORD *)a2 + 7);
            v1184 = v259;
            if (v259 >= 0xFFFE000000000000)
            {
              v260 = (float)(int)v259;
LABEL_484:
              if (*(_DWORD *)(v9 + 80))
              {
                v662 = *(_DWORD *)(v9 + 80);
                if ((v662 & 0x27) != 0 && (v662 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v247, v248, v249, v250, v251, v252);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v466 = v257 + v258;
              v467 = *(JSC::VM **)(v8 + 56);
              v468 = trunc(v466);
              if ((*(_QWORD *)&v466 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v468 == v466)
              {
                if (v466 != 0.0 || (*(_QWORD *)&v466 & 0x8000000000000000) == 0)
                {
                  LOBYTE(v1188) = 0;
                  v1189 = 0;
                  v477.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v247, v248, v249, v250, v251, v252);
                  if (v466 >= 0.0 && v470 != 0 && v466 < v477.n128_f64[0])
                    goto LABEL_500;
                  v530 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v530 = 0x1500000002;
                  *(_QWORD *)(v530 + 8) = "index is out of range";
                  *(_DWORD *)(v530 + 16) = 4;
                  v1187 = (WTF::StringImpl *)v530;
                  v531 = *(_QWORD *)(v8 + 128);
                  v532 = *(JSC::Heap ***)(v8 + 56);
                  if ((v531 & 1) != 0)
                  {
                    v1131 = *(uint64_t (**)(uint64_t *))(v531 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v8 & 8) != 0)
                      v1132 = (JSC::Structure **)(v8 - 16);
                    else
                      v1132 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                    v1184 = (uint64_t)*v1132;
                    v1185 = v8;
                    v1186 = v8 + 128;
                    v531 = v1131(&v1184);
                  }
                  v533 = JSC::ErrorInstance::create(v532, v531, &v1187, 0, 0, 0, 2, 1);
                  v540 = (JSC::Exception *)v533;
                  if ((v533 & 0xFFFE000000000002) != 0
                    || &JSC::Exception::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v533 & 0xFFFFFFFE)
                                                                            + 0x4C)))
                  {
                    v540 = (JSC::Exception *)JSC::Exception::create((uint64_t)v467, (JSC::VM *)v533, 0, v534, v535, v536, v537, v538);
                  }
                  JSC::VM::throwException(v467, (JSC::JSGlobalObject *)v8, v540, v539, v534, v535, v536, v537, v538);
                  v542 = v1187;
                  v1187 = 0;
                  if (!v542)
                    goto LABEL_500;
LABEL_1172:
                  if (*(_DWORD *)v542 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v542, v541, v471, v472, v473, v474, v475, v476);
                    WTF::fastFree(v1000, v1001, v1002, v1003, v1004, v1005, v1006, v1007);
                  }
                  else
                  {
                    *(_DWORD *)v542 -= 2;
                  }
LABEL_500:
                  if (*(_DWORD *)(v9 + 80))
                  {
                    v709 = *(_DWORD *)(v9 + 80);
                    if ((v709 & 0x27) != 0 && (v709 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v471, v472, v473, v474, v475, v476);
                    if (*(_QWORD *)(v9 + 16))
                      return 0;
                  }
                  v480 = *(_QWORD *)(v8 + 1832);
                  if ((v480 & 1) != 0)
                  {
                    v750 = *(uint64_t (**)(uint64_t *, __n128))(v480 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v8 & 8) != 0)
                      v751 = (JSC::Structure **)(v8 - 16);
                    else
                      v751 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                    v1184 = (uint64_t)*v751;
                    v1185 = v8;
                    v1186 = v8 + 1832;
                    v480 = v750(&v1184, v477);
                  }
                  Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v480, v255, v472, v473, v474, v475, v476);
                  if (*(_DWORD *)(v9 + 80))
                  {
                    v752 = *(_DWORD *)(v9 + 80);
                    if ((v752 & 0x27) != 0 && (v752 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v481, v482, v483, v484, v485, v486);
                    if (*(_QWORD *)(v9 + 16))
                      return 0;
                  }
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    LOBYTE(v1184) = 0;
                    LOBYTE(v1185) = 0;
                    v812 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v481, v482, v483, v484, v485, v486);
                    if (v813)
                      v487 = v812;
                    else
                      v487 = 0;
                  }
                  else
                  {
                    v487 = *(_QWORD *)(v10 + 24);
                  }
                  v488 = (unint64_t)v466;
                  if (v255 == v487)
                  {
                    v489 = *(_QWORD *)(v10 + 16);
                    if (v489 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                      v489 = (v489 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                    v490 = *((_QWORD *)Uninitialized + 2);
                    if (v490 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                      v490 = (v490 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                    if (v255)
                    {
                      if (v255 == 1)
                        *(_DWORD *)v490 = *(_DWORD *)v489;
                      else
                        memcpy((void *)v490, (const void *)v489, 4 * v255);
                    }
                    *(float *)(v490 + 4 * v488) = v260;
                    return Uninitialized;
                  }
                  if (!v255)
                    return Uninitialized;
                  v814 = 0;
                  v815 = disablePrimitiveGigacageRequested;
                  v816 = *((_QWORD *)Uninitialized + 2);
                  v817 = qword_1ECF4C038;
                  v818 = (v816 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  if (byte_1ECF4C022)
                    v819 = 1;
                  else
                    v819 = disablePrimitiveGigacageRequested == 0;
                  v821 = v819 && qword_1ECF4C038 != 0;
                  while (1)
                  {
                    v822 = LODWORD(v260);
                    if (v488 != v814)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                      {
                        v824 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                        if (*(_BYTE *)(v824 + 64) && (v831 = *(_QWORD *)(v824 + 32)) != 0)
                          v825 = *(_QWORD *)(v831 + 32);
                        else
                          v825 = *(_QWORD *)(v824 + 48);
                        v826 = *(_QWORD *)(v10 + 24);
                        v827 = *(_QWORD *)(v10 + 32);
                        if (v827 + 4 * v826 <= v825)
                        {
                          if ((*(_BYTE *)(v10 + 40) & 1) != 0)
                          {
                            if (v814 < (v825 - v827) >> 2)
                            {
LABEL_923:
                              v823 = *(_QWORD *)(v10 + 16);
                              if (v821)
                                v823 = (v823 & 0x3FFFFFFFFLL) + v817;
                              v822 = *(_DWORD *)(v823 + 4 * v814);
                              goto LABEL_934;
                            }
                          }
                          else if (v826 > v814)
                          {
                            goto LABEL_923;
                          }
                        }
                      }
                      else if (*(_QWORD *)(v10 + 24) > v814)
                      {
                        goto LABEL_923;
                      }
                      v822 = 2143289344;
                    }
LABEL_934:
                    if (v815)
                      v828 = byte_1ECF4C022 == 0;
                    else
                      v828 = 0;
                    if (v828 || v817 == 0)
                      v830 = v816;
                    else
                      v830 = v818;
                    *(_DWORD *)(v830 + 4 * v814++) = v822;
                    if (v255 == v814)
                      return Uninitialized;
                  }
                }
                v724 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v724 = 0x2100000002;
                v725 = "index should not be negative zero";
              }
              else
              {
                v724 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v724 = 0x1700000002;
                v725 = "index should be integer";
              }
              *(_QWORD *)(v724 + 8) = v725;
              *(_DWORD *)(v724 + 16) = 4;
              v1188 = (WTF::StringImpl *)v724;
              v990 = *(_QWORD *)(v8 + 128);
              v991 = *(JSC::Heap ***)(v8 + 56);
              if ((v990 & 1) != 0)
              {
                v1155 = *(uint64_t (**)(uint64_t *))(v990 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1156 = (JSC::Structure **)(v8 - 16);
                else
                  v1156 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1156;
                v1185 = v8;
                v1186 = v8 + 128;
                v990 = v1155(&v1184);
              }
              v992 = JSC::ErrorInstance::create(v991, v990, &v1188, 0, 0, 0, 2, 1);
              v999 = (JSC::Exception *)v992;
              if ((v992 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v992 & 0xFFFFFFFE) + 0x4C)))
              {
                v999 = (JSC::Exception *)JSC::Exception::create((uint64_t)v467, (JSC::VM *)v992, 0, v993, v994, v995, v996, v997);
              }
              JSC::VM::throwException(v467, (JSC::JSGlobalObject *)v8, v999, v998, v993, v994, v995, v996, v997);
              v542 = v1188;
              v1188 = 0;
              if (!v542)
                goto LABEL_500;
              goto LABEL_1172;
            }
            if (v259 >> 49)
            {
              *(_QWORD *)&v429 = v259 - 0x2000000000000;
LABEL_483:
              v260 = v429;
              goto LABEL_484;
            }
          }
          *(double *)v253.i64 = (double)v255;
          JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v247, v248, v249, v250, v251, v252, v253);
          goto LABEL_483;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v247, v248, v249, v250, v251, v252, v253);
      goto LABEL_458;
    case '/':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v413 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v421)
        goto LABEL_525;
      v422 = v413;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v423 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v423;
        if ((unint64_t)v423 >= 0xFFFE000000000000)
        {
          v424 = (double)(int)v423;
          goto LABEL_371;
        }
        v1179 = (unint64_t)v423 - 0x2000000000000;
        if (v1179 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v420.i64[0] = v1179;
LABEL_476:
          v424 = trunc(*(double *)v420.i64 + 0.0);
LABEL_371:
          if (*(_DWORD *)(v9 + 80))
          {
            v618 = *(_DWORD *)(v9 + 80);
            if ((v618 & 0x27) != 0 && (v618 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v414, v415, v416, v417, v418, v419);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          if (v424 >= 0.0)
            v425 = -0.0;
          else
            v425 = (double)v422;
          if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v1184 = 10;
          }
          else
          {
            v426 = *((_QWORD *)a2 + 7);
            v1184 = v426;
            if (v426 >= 0xFFFE000000000000)
            {
              v428 = (double)(int)v426;
              goto LABEL_409;
            }
            if (v426 >> 49)
            {
              *(_QWORD *)&v428 = v426 - 0x2000000000000;
              goto LABEL_409;
            }
          }
          *(double *)v420.i64 = (double)v422;
          JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v414, v415, v416, v417, v418, v419, v420);
          v428 = v427;
LABEL_409:
          if (*(_DWORD *)(v9 + 80))
          {
            v703 = *(_DWORD *)(v9 + 80);
            if ((v703 & 0x27) != 0 && (v703 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v414, v415, v416, v417, v418, v419);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v441 = v424 + v425;
          v442 = *(JSC::VM **)(v8 + 56);
          v443 = trunc(v441);
          if ((*(_QWORD *)&v441 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v443 == v441)
          {
            if (v441 != 0.0 || (*(_QWORD *)&v441 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v452.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v414, v415, v416, v417, v418, v419);
              if (v441 >= 0.0 && v445 != 0 && v441 < v452.n128_f64[0])
                goto LABEL_425;
              v595 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v595 = 0x1500000002;
              *(_QWORD *)(v595 + 8) = "index is out of range";
              *(_DWORD *)(v595 + 16) = 4;
              v1187 = (WTF::StringImpl *)v595;
              v596 = *(_QWORD *)(v8 + 128);
              v597 = *(JSC::Heap ***)(v8 + 56);
              if ((v596 & 1) != 0)
              {
                v1141 = *(uint64_t (**)(uint64_t *))(v596 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1142 = (JSC::Structure **)(v8 - 16);
                else
                  v1142 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1142;
                v1185 = v8;
                v1186 = v8 + 128;
                v596 = v1141(&v1184);
              }
              v598 = JSC::ErrorInstance::create(v597, v596, &v1187, 0, 0, 0, 2, 1);
              v605 = (JSC::Exception *)v598;
              if ((v598 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v598 & 0xFFFFFFFE) + 0x4C)))
              {
                v605 = (JSC::Exception *)JSC::Exception::create((uint64_t)v442, (JSC::VM *)v598, 0, v599, v600, v601, v602, v603);
              }
              JSC::VM::throwException(v442, (JSC::JSGlobalObject *)v8, v605, v604, v599, v600, v601, v602, v603);
              v607 = v1187;
              v1187 = 0;
              if (!v607)
                goto LABEL_425;
LABEL_1212:
              if (*(_DWORD *)v607 == 2)
              {
                WTF::StringImpl::~StringImpl(v607, v606, v446, v447, v448, v449, v450, v451);
                WTF::fastFree(v1090, v1091, v1092, v1093, v1094, v1095, v1096, v1097);
              }
              else
              {
                *(_DWORD *)v607 -= 2;
              }
LABEL_425:
              if (*(_DWORD *)(v9 + 80))
              {
                v714 = *(_DWORD *)(v9 + 80);
                if ((v714 & 0x27) != 0 && (v714 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v446, v447, v448, v449, v450, v451);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v455 = *(_QWORD *)(v8 + 1856);
              if ((v455 & 1) != 0)
              {
                v768 = *(uint64_t (**)(uint64_t *, __n128))(v455 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v769 = (JSC::Structure **)(v8 - 16);
                else
                  v769 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v769;
                v1185 = v8;
                v1186 = v8 + 1856;
                v455 = v768(&v1184, v452);
              }
              Uninitialized = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v455, v422, v447, v448, v449, v450, v451);
              if (*(_DWORD *)(v9 + 80))
              {
                v770 = *(_DWORD *)(v9 + 80);
                if ((v770 & 0x27) != 0 && (v770 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v456, v457, v458, v459, v460, v461);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v896 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v456, v457, v458, v459, v460, v461);
                if (v897)
                  v462 = v896;
                else
                  v462 = 0;
              }
              else
              {
                v462 = *(_QWORD *)(v10 + 24);
              }
              v463 = (unint64_t)v441;
              if (v422 == v462)
              {
                v464 = *(_QWORD *)(v10 + 16);
                if (v464 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v464 = (v464 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v465 = *((_QWORD *)Uninitialized + 2);
                if (v465 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v465 = (v465 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (v422)
                {
                  if (v422 == 1)
                    *(_QWORD *)v465 = *(_QWORD *)v464;
                  else
                    memcpy((void *)v465, (const void *)v464, 8 * v422);
                }
                *(double *)(v465 + 8 * v463) = v428;
                return Uninitialized;
              }
              if (!v422)
                return Uninitialized;
              v898 = 0;
              v899 = disablePrimitiveGigacageRequested;
              v900 = *((_QWORD *)Uninitialized + 2);
              v901 = qword_1ECF4C038;
              v902 = (v900 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              if (byte_1ECF4C022)
                v903 = 1;
              else
                v903 = disablePrimitiveGigacageRequested == 0;
              v905 = v903 && qword_1ECF4C038 != 0;
              while (1)
              {
                v906 = *(_QWORD *)&v428;
                if (v463 != v898)
                {
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    v908 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8);
                    if (*(_BYTE *)(v908 + 64) && (v915 = *(_QWORD *)(v908 + 32)) != 0)
                      v909 = *(_QWORD *)(v915 + 32);
                    else
                      v909 = *(_QWORD *)(v908 + 48);
                    v910 = *(_QWORD *)(v10 + 24);
                    v911 = *(_QWORD *)(v10 + 32);
                    if (v911 + 8 * v910 <= v909)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 1) != 0)
                      {
                        if (v898 < (v909 - v911) >> 3)
                        {
LABEL_1105:
                          v907 = *(_QWORD *)(v10 + 16);
                          if (v905)
                            v907 = (v907 & 0x3FFFFFFFFLL) + v901;
                          v906 = *(_QWORD *)(v907 + 8 * v898);
                          goto LABEL_1116;
                        }
                      }
                      else if (v910 > v898)
                      {
                        goto LABEL_1105;
                      }
                    }
                  }
                  else if (*(_QWORD *)(v10 + 24) > v898)
                  {
                    goto LABEL_1105;
                  }
                  v906 = 0x7FF8000000000000;
                }
LABEL_1116:
                if (v899)
                  v912 = byte_1ECF4C022 == 0;
                else
                  v912 = 0;
                if (v912 || v901 == 0)
                  v914 = v900;
                else
                  v914 = v902;
                *(_QWORD *)(v914 + 8 * v898++) = v906;
                if (v422 == v898)
                  return Uninitialized;
              }
            }
            v736 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v736 = 0x2100000002;
            v737 = "index should not be negative zero";
          }
          else
          {
            v736 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v736 = 0x1700000002;
            v737 = "index should be integer";
          }
          *(_QWORD *)(v736 + 8) = v737;
          *(_DWORD *)(v736 + 16) = 4;
          v1188 = (WTF::StringImpl *)v736;
          v1080 = *(_QWORD *)(v8 + 128);
          v1081 = *(JSC::Heap ***)(v8 + 56);
          if ((v1080 & 1) != 0)
          {
            v1165 = *(uint64_t (**)(uint64_t *))(v1080 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1166 = (JSC::Structure **)(v8 - 16);
            else
              v1166 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1166;
            v1185 = v8;
            v1186 = v8 + 128;
            v1080 = v1165(&v1184);
          }
          v1082 = JSC::ErrorInstance::create(v1081, v1080, &v1188, 0, 0, 0, 2, 1);
          v1089 = (JSC::Exception *)v1082;
          if ((v1082 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v1082 & 0xFFFFFFFE) + 0x4C)))
          {
            v1089 = (JSC::Exception *)JSC::Exception::create((uint64_t)v442, (JSC::VM *)v1082, 0, v1083, v1084, v1085, v1086, v1087);
          }
          JSC::VM::throwException(v442, (JSC::JSGlobalObject *)v8, v1089, v1088, v1083, v1084, v1085, v1086, v1087);
          v607 = v1188;
          v1188 = 0;
          if (!v607)
            goto LABEL_425;
          goto LABEL_1212;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v414, v415, v416, v417, v418, v419, v420);
      goto LABEL_476;
    case '0':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v125 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v133)
        goto LABEL_525;
      v134 = v125;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v135 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v135;
        if ((unint64_t)v135 >= 0xFFFE000000000000)
        {
          v136 = (double)(int)v135;
          goto LABEL_123;
        }
        v1171 = (unint64_t)v135 - 0x2000000000000;
        if (v1171 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v132.i64[0] = v1171;
LABEL_449:
          v136 = trunc(*(double *)v132.i64 + 0.0);
LABEL_123:
          if (*(_DWORD *)(v9 + 80))
          {
            v609 = *(_DWORD *)(v9 + 80);
            if ((v609 & 0x27) != 0 && (v609 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v126, v127, v128, v129, v130, v131);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v137 = v136 >= 0.0 ? -0.0 : (double)v134;
          v138 = (JSC::Structure *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                                  ? 10
                                  : *((_QWORD *)a2 + 7));
          v1184 = (uint64_t)v138;
          v139 = *(_QWORD *)(v8 + 56);
          *(double *)v132.i64 = (double)v134;
          JSC::JSValue::toBigInt((JSC::Structure **)&v1184, (JSC::JSGlobalObject *)v8, v126, v127, v128, v129, v130, v131, v132);
          v147 = v146;
          if (*(_DWORD *)(v139 + 80))
          {
            v620 = *(_DWORD *)(v139 + 80);
            if ((v620 & 0x27) != 0 && (v620 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v139 + 64), 7u, v140, v141, v142, v143, v144, v145);
            if (*(_QWORD *)(v139 + 16))
              goto LABEL_609;
          }
          if (!*(_DWORD *)(v147 + 8))
          {
LABEL_609:
            v150 = 0;
          }
          else
          {
            v148 = *(_QWORD *)(v147 + 24);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v148 = (v148 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v149 = *(_QWORD *)v148;
            v150 = *(_BYTE *)(v147 + 16) ? -v149 : v149;
          }
          if (*(_DWORD *)(v9 + 80))
          {
            v659 = *(_DWORD *)(v9 + 80);
            if ((v659 & 0x27) != 0 && (v659 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v140, v141, v142, v143, v144, v145);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v621 = v136 + v137;
          v622 = *(JSC::VM **)(v8 + 56);
          v623 = trunc(v621);
          if ((*(_QWORD *)&v621 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v623 == v621)
          {
            if (v621 != 0.0 || (*(_QWORD *)&v621 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v632.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v140, v141, v142, v143, v144, v145);
              if (v621 >= 0.0 && v625 != 0 && v621 < v632.n128_f64[0])
                goto LABEL_626;
              v646 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v646 = 0x1500000002;
              *(_QWORD *)(v646 + 8) = "index is out of range";
              *(_DWORD *)(v646 + 16) = 4;
              v1187 = (WTF::StringImpl *)v646;
              v647 = *(_QWORD *)(v8 + 128);
              v648 = *(JSC::Heap ***)(v8 + 56);
              if ((v647 & 1) != 0)
              {
                v1143 = *(uint64_t (**)(uint64_t *))(v647 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1144 = (JSC::Structure **)(v8 - 16);
                else
                  v1144 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1144;
                v1185 = v8;
                v1186 = v8 + 128;
                v647 = v1143(&v1184);
              }
              v649 = JSC::ErrorInstance::create(v648, v647, &v1187, 0, 0, 0, 2, 1);
              v656 = (JSC::Exception *)v649;
              if ((v649 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v649 & 0xFFFFFFFE) + 0x4C)))
              {
                v656 = (JSC::Exception *)JSC::Exception::create((uint64_t)v622, (JSC::VM *)v649, 0, v650, v651, v652, v653, v654);
              }
              JSC::VM::throwException(v622, (JSC::JSGlobalObject *)v8, v656, v655, v650, v651, v652, v653, v654);
              v658 = v1187;
              v1187 = 0;
              if (!v658)
                goto LABEL_626;
LABEL_1148:
              if (*(_DWORD *)v658 == 2)
              {
                WTF::StringImpl::~StringImpl(v658, v657, v626, v627, v628, v629, v630, v631);
                WTF::fastFree(v946, v947, v948, v949, v950, v951, v952, v953);
              }
              else
              {
                *(_DWORD *)v658 -= 2;
              }
LABEL_626:
              if (*(_DWORD *)(v9 + 80))
              {
                v706 = *(_DWORD *)(v9 + 80);
                if ((v706 & 0x27) != 0 && (v706 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v626, v627, v628, v629, v630, v631);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v635 = *(_QWORD *)(v8 + 1880);
              if ((v635 & 1) != 0)
              {
                v741 = *(uint64_t (**)(uint64_t *, __n128))(v635 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v742 = (JSC::Structure **)(v8 - 16);
                else
                  v742 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v742;
                v1185 = v8;
                v1186 = v8 + 1880;
                v635 = v741(&v1184, v632);
              }
              Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v635, v134, v627, v628, v629, v630, v631);
              if (*(_DWORD *)(v9 + 80))
              {
                v743 = *(_DWORD *)(v9 + 80);
                if ((v743 & 0x27) != 0 && (v743 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v636, v637, v638, v639, v640, v641);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v773 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v636, v637, v638, v639, v640, v641);
                if (v774)
                  v642 = v773;
                else
                  v642 = 0;
              }
              else
              {
                v642 = *(_QWORD *)(v10 + 24);
              }
              v643 = (unint64_t)v621;
              if (v134 == v642)
              {
                v644 = *(_QWORD *)(v10 + 16);
                if (v644 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v644 = (v644 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v645 = *((_QWORD *)Uninitialized + 2);
                if (v645 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v645 = (v645 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (v134 != 1)
                {
                  if (!v134)
                    goto LABEL_709;
                  goto LABEL_708;
                }
                goto LABEL_707;
              }
              if (v134 <= v642)
              {
                if (v134)
                {
                  v775 = 0;
                  v776 = *((_QWORD *)Uninitialized + 2);
                  v777 = qword_1ECF4C038;
                  v778 = disablePrimitiveGigacageRequested;
                  v779 = (v776 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  do
                  {
                    v780 = v150;
                    if (v643 != v775)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 7u) >= 3
                        && (v783 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8), *(_BYTE *)(v783 + 64))
                        && *(_QWORD *)(v783 + 32))
                      {
                        v780 = 0;
                      }
                      else
                      {
                        v780 = 0;
                      }
                    }
                    if (v778)
                      v781 = byte_1ECF4C022 == 0;
                    else
                      v781 = 0;
                    if (v781)
                      v782 = v776;
                    else
                      v782 = v779;
                    if (!v777)
                      v782 = v776;
                    *(_QWORD *)(v782 + 8 * v775++) = v780;
                  }
                  while (v134 != v775);
                }
                return Uninitialized;
              }
LABEL_1133:
              v59 = "Cannot convert undefined to BigInt";
              v60 = (JSC::VM **)&v1183;
              this = (JSC *)v8;
              v61 = 35;
              return (JSC::JSCell *)JSC::throwTypeError((unint64_t)this, v60, (uint64_t)v59, v61);
            }
            v718 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v718 = 0x2100000002;
            v719 = "index should not be negative zero";
          }
          else
          {
            v718 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v718 = 0x1700000002;
            v719 = "index should be integer";
          }
          *(_QWORD *)(v718 + 8) = v719;
          *(_DWORD *)(v718 + 16) = 4;
          v1188 = (WTF::StringImpl *)v718;
          v936 = *(_QWORD *)(v8 + 128);
          v937 = *(JSC::Heap ***)(v8 + 56);
          if ((v936 & 1) != 0)
          {
            v1149 = *(uint64_t (**)(uint64_t *))(v936 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1150 = (JSC::Structure **)(v8 - 16);
            else
              v1150 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1150;
            v1185 = v8;
            v1186 = v8 + 128;
            v936 = v1149(&v1184);
          }
          v938 = JSC::ErrorInstance::create(v937, v936, &v1188, 0, 0, 0, 2, 1);
          v945 = (JSC::Exception *)v938;
          if ((v938 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v938 & 0xFFFFFFFE) + 0x4C)))
          {
            v945 = (JSC::Exception *)JSC::Exception::create((uint64_t)v622, (JSC::VM *)v938, 0, v939, v940, v941, v942, v943);
          }
          JSC::VM::throwException(v622, (JSC::JSGlobalObject *)v8, v945, v944, v939, v940, v941, v942, v943);
          v658 = v1188;
          v1188 = 0;
          if (!v658)
            goto LABEL_626;
          goto LABEL_1148;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v126, v127, v128, v129, v130, v131, v132);
      goto LABEL_449;
    case '1':
      v1183 = v9;
      v1181[0] = 0;
      v1182 = 0;
      v389 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)v1181, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v397)
      {
LABEL_525:
        v59 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v60 = (JSC::VM **)&v1183;
        this = (JSC *)v8;
        v61 = 72;
        return (JSC::JSCell *)JSC::throwTypeError((unint64_t)this, v60, (uint64_t)v59, v61);
      }
      v134 = v389;
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v1184 = 10;
      }
      else
      {
        v398 = (JSC::Structure *)*((_QWORD *)a2 + 6);
        v1184 = (uint64_t)v398;
        if ((unint64_t)v398 >= 0xFFFE000000000000)
        {
          v399 = (double)(int)v398;
          goto LABEL_353;
        }
        v1178 = (unint64_t)v398 - 0x2000000000000;
        if (v1178 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v396.i64[0] = v1178;
LABEL_473:
          v399 = trunc(*(double *)v396.i64 + 0.0);
LABEL_353:
          if (*(_DWORD *)(v9 + 80))
          {
            v617 = *(_DWORD *)(v9 + 80);
            if ((v617 & 0x27) != 0 && (v617 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v390, v391, v392, v393, v394, v395);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v400 = v399 >= 0.0 ? -0.0 : (double)v134;
          v401 = (JSC::Structure *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
                                  ? 10
                                  : *((_QWORD *)a2 + 7));
          v1184 = (uint64_t)v401;
          v402 = *(_QWORD *)(v8 + 56);
          *(double *)v396.i64 = (double)v134;
          JSC::JSValue::toBigInt((JSC::Structure **)&v1184, (JSC::JSGlobalObject *)v8, v390, v391, v392, v393, v394, v395, v396);
          v410 = v409;
          if (*(_DWORD *)(v402 + 80))
          {
            v667 = *(_DWORD *)(v402 + 80);
            if ((v667 & 0x27) != 0 && (v667 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v402 + 64), 7u, v403, v404, v405, v406, v407, v408);
            if (*(_QWORD *)(v402 + 16))
              goto LABEL_674;
          }
          if (!*(_DWORD *)(v410 + 8))
          {
LABEL_674:
            v150 = 0;
          }
          else
          {
            v411 = *(_QWORD *)(v410 + 24);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v411 = (v411 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v412 = *(_QWORD *)v411;
            v150 = *(_BYTE *)(v410 + 16) ? -v412 : v412;
          }
          if (*(_DWORD *)(v9 + 80))
          {
            v704 = *(_DWORD *)(v9 + 80);
            if ((v704 & 0x27) != 0 && (v704 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v403, v404, v405, v406, v407, v408);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v668 = v399 + v400;
          v669 = *(JSC::VM **)(v8 + 56);
          v670 = trunc(v668);
          if ((*(_QWORD *)&v668 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v670 == v668)
          {
            if (v668 != 0.0 || (*(_QWORD *)&v668 & 0x8000000000000000) == 0)
            {
              LOBYTE(v1188) = 0;
              v1189 = 0;
              v679.n128_f64[0] = (double)JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v10, &v1188, v403, v404, v405, v406, v407, v408);
              if (v668 >= 0.0 && v672 != 0 && v668 < v679.n128_f64[0])
                goto LABEL_691;
              v690 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v690 = 0x1500000002;
              *(_QWORD *)(v690 + 8) = "index is out of range";
              *(_DWORD *)(v690 + 16) = 4;
              v1187 = (WTF::StringImpl *)v690;
              v691 = *(_QWORD *)(v8 + 128);
              v692 = *(JSC::Heap ***)(v8 + 56);
              if ((v691 & 1) != 0)
              {
                v1145 = *(uint64_t (**)(uint64_t *))(v691 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v1146 = (JSC::Structure **)(v8 - 16);
                else
                  v1146 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v1146;
                v1185 = v8;
                v1186 = v8 + 128;
                v691 = v1145(&v1184);
              }
              v693 = JSC::ErrorInstance::create(v692, v691, &v1187, 0, 0, 0, 2, 1);
              v700 = (JSC::Exception *)v693;
              if ((v693 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v693 & 0xFFFFFFFE) + 0x4C)))
              {
                v700 = (JSC::Exception *)JSC::Exception::create((uint64_t)v669, (JSC::VM *)v693, 0, v694, v695, v696, v697, v698);
              }
              JSC::VM::throwException(v669, (JSC::JSGlobalObject *)v8, v700, v699, v694, v695, v696, v697, v698);
              v702 = v1187;
              v1187 = 0;
              if (!v702)
                goto LABEL_691;
LABEL_1220:
              if (*(_DWORD *)v702 == 2)
              {
                WTF::StringImpl::~StringImpl(v702, v701, v673, v674, v675, v676, v677, v678);
                WTF::fastFree(v1108, v1109, v1110, v1111, v1112, v1113, v1114, v1115);
              }
              else
              {
                *(_DWORD *)v702 -= 2;
              }
LABEL_691:
              if (*(_DWORD *)(v9 + 80))
              {
                v715 = *(_DWORD *)(v9 + 80);
                if ((v715 & 0x27) != 0 && (v715 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v673, v674, v675, v676, v677, v678);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              v682 = *(_QWORD *)(v8 + 1904);
              if ((v682 & 1) != 0)
              {
                v765 = *(uint64_t (**)(uint64_t *, __n128))(v682 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v8 & 8) != 0)
                  v766 = (JSC::Structure **)(v8 - 16);
                else
                  v766 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
                v1184 = (uint64_t)*v766;
                v1185 = v8;
                v1186 = v8 + 1904;
                v682 = v765(&v1184, v679);
              }
              Uninitialized = (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v8, v682, v134, v674, v675, v676, v677, v678);
              if (*(_DWORD *)(v9 + 80))
              {
                v767 = *(_DWORD *)(v9 + 80);
                if ((v767 & 0x27) != 0 && (v767 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v683, v684, v685, v686, v687, v688);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
              }
              if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
              {
                LOBYTE(v1184) = 0;
                LOBYTE(v1185) = 0;
                v916 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v1184, v683, v684, v685, v686, v687, v688);
                if (v917)
                  v689 = v916;
                else
                  v689 = 0;
              }
              else
              {
                v689 = *(_QWORD *)(v10 + 24);
              }
              v643 = (unint64_t)v668;
              if (v134 == v689)
              {
                v644 = *(_QWORD *)(v10 + 16);
                if (v644 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v644 = (v644 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v645 = *((_QWORD *)Uninitialized + 2);
                if (v645 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v645 = (v645 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (!v134)
                  goto LABEL_709;
                if (v134 != 1)
                {
LABEL_708:
                  memcpy((void *)v645, (const void *)v644, 8 * v134);
                  goto LABEL_709;
                }
LABEL_707:
                *(_QWORD *)v645 = *(_QWORD *)v644;
LABEL_709:
                *(_QWORD *)(v645 + 8 * v643) = v150;
                return Uninitialized;
              }
              if (v134 <= v689)
              {
                if (v134)
                {
                  v1116 = 0;
                  v1117 = *((_QWORD *)Uninitialized + 2);
                  v1118 = qword_1ECF4C038;
                  v1119 = disablePrimitiveGigacageRequested;
                  v1120 = (v1117 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  do
                  {
                    v1121 = v150;
                    if (v643 != v1116)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 7u) >= 3
                        && (v1124 = *(_QWORD *)(*(_QWORD *)(v10 + 8) - 8), *(_BYTE *)(v1124 + 64))
                        && *(_QWORD *)(v1124 + 32))
                      {
                        v1121 = 0;
                      }
                      else
                      {
                        v1121 = 0;
                      }
                    }
                    if (v1119)
                      v1122 = byte_1ECF4C022 == 0;
                    else
                      v1122 = 0;
                    if (v1122)
                      v1123 = v1117;
                    else
                      v1123 = v1120;
                    if (!v1118)
                      v1123 = v1117;
                    *(_QWORD *)(v1123 + 8 * v1116++) = v1121;
                  }
                  while (v134 != v1116);
                }
                return Uninitialized;
              }
              goto LABEL_1133;
            }
            v734 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v734 = 0x2100000002;
            v735 = "index should not be negative zero";
          }
          else
          {
            v734 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v734 = 0x1700000002;
            v735 = "index should be integer";
          }
          *(_QWORD *)(v734 + 8) = v735;
          *(_DWORD *)(v734 + 16) = 4;
          v1188 = (WTF::StringImpl *)v734;
          v1098 = *(_QWORD *)(v8 + 128);
          v1099 = *(JSC::Heap ***)(v8 + 56);
          if ((v1098 & 1) != 0)
          {
            v1167 = *(uint64_t (**)(uint64_t *))(v1098 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v8 & 8) != 0)
              v1168 = (JSC::Structure **)(v8 - 16);
            else
              v1168 = (JSC::Structure **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
            v1184 = (uint64_t)*v1168;
            v1185 = v8;
            v1186 = v8 + 128;
            v1098 = v1167(&v1184);
          }
          v1100 = JSC::ErrorInstance::create(v1099, v1098, &v1188, 0, 0, 0, 2, 1);
          v1107 = (JSC::Exception *)v1100;
          if ((v1100 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v1100 & 0xFFFFFFFE) + 0x4C)))
          {
            v1107 = (JSC::Exception *)JSC::Exception::create((uint64_t)v669, (JSC::VM *)v1100, 0, v1101, v1102, v1103, v1104, v1105);
          }
          JSC::VM::throwException(v669, (JSC::JSGlobalObject *)v8, v1107, v1106, v1101, v1102, v1103, v1104, v1105);
          v702 = v1188;
          v1188 = 0;
          if (!v702)
            goto LABEL_691;
          goto LABEL_1220;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v1184, (JSC::JSGlobalObject *)v8, v390, v391, v392, v393, v394, v395, v396);
      goto LABEL_473;
    default:
      v59 = "Receiver should be a typed array view";
      v60 = (JSC::VM **)&v1180;
      v61 = 38;
      return (JSC::JSCell *)JSC::throwTypeError((unint64_t)this, v60, (uint64_t)v59, v61);
  }
}

uint64_t JSC::typedArrayViewProtoGetterFuncToStringTag(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return 10;
  v4 = *(unsigned __int8 *)(v3 + 5);
  if (v4 < 0x17)
    return 10;
  v5 = *((_QWORD *)this + 7);
  switch(v4)
  {
    case '\'':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0x900000002;
      v13 = "Int8Array";
      break;
    case '(':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xA00000002;
      v13 = "Uint8Array";
      break;
    case ')':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0x1100000002;
      v13 = "Uint8ClampedArray";
      break;
    case '*':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xA00000002;
      v13 = "Int16Array";
      break;
    case '+':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xB00000002;
      v13 = "Uint16Array";
      break;
    case ',':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xA00000002;
      v13 = "Int32Array";
      break;
    case '-':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xB00000002;
      v13 = "Uint32Array";
      break;
    case '.':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xC00000002;
      v13 = "Float32Array";
      break;
    case '/':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xC00000002;
      v13 = "Float64Array";
      break;
    case '0':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xD00000002;
      v13 = "BigInt64Array";
      break;
    case '1':
      v6 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v6 = 0xE00000002;
      v13 = "BigUint64Array";
      break;
    default:
      return 10;
  }
  *(_QWORD *)(v6 + 8) = v13;
  *(_DWORD *)(v6 + 16) = 4;
  v32 = (WTF::StringImpl *)v6;
  v21 = JSC::jsNontrivialString(v5, (JSC::VM *)&v32, v7, v8, v9, v10, v11, v12);
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return v21;
}

JSC::VM *JSC::typedArrayViewProtoFuncValues(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  JSC::VM *v19;
  JSC::VM *v21;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) - 39 >= 0xB)
    return (JSC::VM *)JSC::throwTypeError((unint64_t)this, &v21, (uint64_t)"Receiver should be a typed array view", 38);
  JSC::validateTypedArray(this, *((JSC::ArrayBuffer ***)a2 + 5), a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v11, v12, v13, v14, v15, v16, v17))
    return 0;
  v18 = *((_DWORD *)this + 250);
  if (v18)
    v19 = (JSC::VM *)(16 * (v18 & 0xFFFFFFFE));
  else
    v19 = 0;
  return JSC::JSArrayIterator::create((uint64_t)v9, v19, v10, 0xFFFE000000000001, v14, v15, v16, v17);
}

unint64_t JSC::JSTypedArrayViewPrototype::create(JSC::JSTypedArrayViewPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v10;
  unint64_t v11;
  int v12;
  unint64_t v14;
  char *v15;
  char *v16;
  JSC::VM *v17;
  JSC::JSGlobalObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t SlowCase;

  v10 = this;
  v11 = *((_QWORD *)this + 4863);
  if (v11 >= *((_QWORD *)this + 4864))
  {
    v11 = *((_QWORD *)this + 4865);
    if ((v11 & 1) != 0)
    {
      v15 = (char *)this + 38880;
      v16 = (char *)this + 192;
      v17 = a2;
      v19 = (JSC::JSGlobalObject *)a3;
      JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v15, (uint64_t)v16, 16, 0, 0, v20, v21, v22);
      a3 = (uint64_t)v19;
      v10 = this;
      a2 = v17;
      v11 = SlowCase;
      goto LABEL_3;
    }
    v14 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v11 + HIDWORD(v14);
    *((_QWORD *)this + 4865) = v11 + (int)v14;
  }
  *((_QWORD *)this + 4863) = v11 + 16;
LABEL_3:
  *(_DWORD *)v11 = 0;
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSTypedArrayViewPrototype::finishCreation((JSC::JSTypedArrayViewPrototype *)v11, v10, (uint64_t)a2, a9, (uint64_t)a4, a5, a6, a7, a8);
  return v11;
}

uint64_t JSC::JSTypedArrayViewPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSTypedArrayViewPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(__dst, __s, v41);
  __dst[v41] = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = __dst;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *v48++;
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = __dst;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *v44++;
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!__dst[v42])
  {
LABEL_74:
    JSC::toNativeFromValue<JSC::Int8Adaptor>(a2, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  size_t v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v65[31];

  *(_QWORD *)&v65[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v35 = *v13 - 48, v35 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_47:
      v24 = 0;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      v59 = v14 - 1;
      v60 = v13 + 1;
      while (v59)
      {
        if (v35 > 0x19999999)
          goto LABEL_47;
        v61 = *v60 - 48;
        if (v61 > 9)
          goto LABEL_47;
        v24 = 0;
        v36 = 0;
        v37 = 0;
        v23 = __CFADD__(v61, 10 * v35);
        v35 = v61 + 10 * v35;
        --v59;
        ++v60;
        if (v23)
          goto LABEL_48;
      }
      if (v35 == -1)
        v24 = 0;
      else
        v24 = v35 & 0xFFFFFF00;
      if (v35 == -1)
        v36 = 0;
      else
        v36 = v35;
      if (v35 == -1)
        v37 = 0;
      else
        v37 = 0x100000000;
    }
LABEL_48:
    v18 = v36;
    if ((v37 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
          if (*(_BYTE *)(v31 + 64) && (v62 = *(_QWORD *)(v31 + 32)) != 0)
            v32 = *(_QWORD *)(v62 + 32);
          else
            v32 = *(_QWORD *)(v31 + 48);
          v34 = *(_QWORD *)(a1 + 24);
          v33 = *(_QWORD *)(a1 + 32);
          if (v34 + v33 > v32)
          {
            v29 = 0;
            return v29 ^ 1u;
          }
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v28 = v34 > v26;
LABEL_32:
            v29 = v28;
            return v29 ^ 1u;
          }
          v27 = v32 - v33;
        }
        else
        {
          v27 = *(_QWORD *)(a1 + 24);
        }
        v28 = v27 > v26;
        goto LABEL_32;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v38 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_52;
    if (v38 == 45)
    {
      v38 = *((unsigned __int16 *)v13 + 1);
LABEL_56:
      if ((v38 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_67;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_66;
    }
    if ((v38 - 48) < 0xA || (_DWORD)v14 == 8 && v38 == 73)
      goto LABEL_67;
    goto LABEL_62;
  }
  v38 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_52:
    if ((v38 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v38 == 45)
  {
    v38 = v13[1];
    goto LABEL_56;
  }
  if ((v38 - 48) < 0xA)
    goto LABEL_67;
  if ((_DWORD)v14 != 8)
  {
LABEL_62:
    if ((_DWORD)v14 != 3 || v38 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_67;
  }
LABEL_66:
  if (v38 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_67:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v40 = (v39 >> 52) & 0x7FF;
  if ((_DWORD)v40 != 2047)
  {
    v42 = v39 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v39 & 0x8000000000000000) != 0 && v42)
    {
      __s[0] = 45;
      v43 = &__s[1];
    }
    else
    {
      v43 = __s;
      if (!v42)
      {
        v41 = &__s[1];
        __s[0] = 48;
        goto LABEL_79;
      }
    }
    v44 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v39 & 0x800FFFFFFFFFFFFFLL, v40);
    v41 = WTF::dragonbox::detail::to_shortest(v44, v45, (uint64_t)v43, v46);
    goto LABEL_79;
  }
  if ((v39 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v41 = v65;
  }
  else
  {
    v47 = __s;
    if ((v39 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v47 = &__s[1];
    }
    *(_QWORD *)v47 = 0x7974696E69666E49;
    v41 = v47 + 8;
  }
LABEL_79:
  *v41 = 0;
  v48 = strlen(__s);
  memcpy(__dst, __s, v48);
  __dst[v48] = 0;
  v49 = *(unsigned int *)(a3 + 4);
  v50 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v49)
    {
      v55 = __dst;
      v56 = *(unsigned int *)(a3 + 4);
      do
      {
        v58 = *v55++;
        v57 = v58;
        if (!v58 || *v50 != v57)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v50;
      }
      while (--v56);
    }
  }
  else if ((_DWORD)v49)
  {
    v51 = __dst;
    v52 = *(unsigned int *)(a3 + 4);
    do
    {
      v54 = *v51++;
      v53 = v54;
      if (!v54 || *(unsigned __int16 *)v50 != v53)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v50 += 2;
    }
    while (--v52);
  }
  if (__dst[v49])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v8 + 64) && (v12 = *(_QWORD *)(v8 + 32)) != 0)
    v9 = *(_QWORD *)(v12 + 32);
  else
    v9 = *(_QWORD *)(v8 + 48);
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  if (v11 + v10 <= v9)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v6 = v11 > a3;
LABEL_11:
      v7 = v6;
      return v7 ^ 1u;
    }
    v5 = v9 - v10;
LABEL_10:
    v6 = v5 > a3;
    goto LABEL_11;
  }
  v7 = 0;
  return v7 ^ 1u;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  int v30;
  _WORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  const WTF::StringImpl *v36;
  BOOL v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  double v42;
  const unsigned __int8 *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62[17];

  v62[16] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_13;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v52 = *v13 - 48, v52 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_106:
      v19 = 0;
      v53 = 0;
      v16 = 0;
    }
    else
    {
      v56 = v14 - 1;
      v57 = v13 + 1;
      while (v56)
      {
        if (v52 > 0x19999999)
          goto LABEL_106;
        v58 = *v57 - 48;
        if (v58 > 9)
          goto LABEL_106;
        v19 = 0;
        v53 = 0;
        v16 = 0;
        v41 = __CFADD__(v58, 10 * v52);
        v52 = v58 + 10 * v52;
        --v56;
        ++v57;
        if (v41)
          goto LABEL_107;
      }
      if (v52 == -1)
        v19 = 0;
      else
        v19 = v52 & 0xFFFFFF00;
      if (v52 == -1)
        v53 = 0;
      else
        v53 = v52;
      if (v52 == -1)
        v16 = 0;
      else
        v16 = 0x100000000;
    }
LABEL_107:
    v18 = v53;
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v37 = v14 > 1) : (v37 = 0), v37))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v38 = (unsigned __int16 *)(v13 + 2);
      v39 = v14 - 1;
      while (v39)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v40 = *v38 - 48;
        if (v40 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v41 = __CFADD__(v40, 10 * v15);
        v15 = v40 + 10 * v15;
        ++v38;
        --v39;
        if (v41)
          goto LABEL_7;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_7:
    v19 = v17;
  }
  if ((v16 & 0x100000000) != 0)
    return JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v19, a4);
  if (!(_DWORD)v14)
    goto LABEL_13;
  if ((v12 & 4) == 0)
  {
    v20 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_12;
    if (v20 == 45)
    {
      v20 = *((unsigned __int16 *)v13 + 1);
LABEL_36:
      if ((v20 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_57;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_13;
LABEL_75:
      if (v20 != 73)
        goto LABEL_13;
      goto LABEL_57;
    }
    if ((v20 - 48) >= 0xA && ((_DWORD)v14 != 8 || v20 != 73))
    {
LABEL_79:
      if ((_DWORD)v14 != 3 || v20 != 78)
        goto LABEL_13;
      goto LABEL_57;
    }
    goto LABEL_57;
  }
  v20 = *v13;
  if ((_DWORD)v14 != 1)
  {
    if (v20 == 45)
    {
      v20 = v13[1];
      goto LABEL_36;
    }
    if ((v20 - 48) >= 0xA)
    {
      if ((_DWORD)v14 == 8)
        goto LABEL_75;
      goto LABEL_79;
    }
LABEL_57:
    JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
    WTF::numberToString(v62, v42);
    if (WTF::equal(a3, (unint64_t)v62, v43))
      return 0;
    goto LABEL_13;
  }
LABEL_12:
  if ((v20 - 48) < 0xA)
    return 0;
LABEL_13:
  v21 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4)
    || (v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v23)|| (v62[0] = a3, v24 = JSC::PropertyTable::get(v23, v62), a6 = v24, (_DWORD)v24 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v21, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v30 = *(_DWORD *)(a3 + 16);
    if ((v30 & 0x20) == 0)
    {
      v31 = *(_WORD **)(a3 + 8);
      v32 = *(unsigned int *)(a3 + 4);
      if ((v30 & 4) == 0)
      {
        if ((_DWORD)v32)
        {
          v33 = (unsigned __int16)*v31 - 48;
          if (v33 <= 9 && (*v31 != 48 || v32 <= 1))
          {
            v44 = v31 + 1;
            v45 = v32 - 1;
            while (v45)
            {
              if (v33 > 0x19999999)
                goto LABEL_28;
              v46 = *v44 - 48;
              if (v46 > 9)
                goto LABEL_28;
              v34 = 0;
              LODWORD(v32) = 0;
              v35 = 0;
              v41 = __CFADD__(v46, 10 * v33);
              v33 = v46 + 10 * v33;
              ++v44;
              --v45;
              if (v41)
                goto LABEL_30;
            }
            v34 = 0x100000000;
            if (v33 == -1)
            {
              v34 = 0;
              LODWORD(v32) = 0;
            }
            else
            {
              LODWORD(v32) = v33;
            }
            if (v33 == -1)
              v35 = 0;
            else
              v35 = v33 & 0xFFFFFF00;
            goto LABEL_30;
          }
LABEL_28:
          v34 = 0;
          LODWORD(v32) = 0;
        }
        else
        {
          v34 = 0;
        }
        v35 = 0;
LABEL_30:
        v36 = (const WTF::StringImpl *)(v35 | v32);
        goto LABEL_31;
      }
      if ((_DWORD)v32)
      {
        v54 = *(unsigned __int8 *)v31 - 48;
        if (v54 <= 9 && (v32 < 2 || *(_BYTE *)v31 != 48))
        {
          v59 = v32 - 1;
          v60 = (unsigned __int8 *)v31 + 1;
          while (v59)
          {
            if (v54 > 0x19999999)
              goto LABEL_110;
            v61 = *v60 - 48;
            if (v61 > 9)
              goto LABEL_110;
            LODWORD(v32) = 0;
            v55 = 0;
            v34 = 0;
            v41 = __CFADD__(v61, 10 * v54);
            v54 = v61 + 10 * v54;
            --v59;
            ++v60;
            if (v41)
              goto LABEL_112;
          }
          if (v54 == -1)
            LODWORD(v32) = 0;
          else
            LODWORD(v32) = v54 & 0xFFFFFF00;
          if (v54 == -1)
            v55 = 0;
          else
            v55 = v54;
          if (v54 == -1)
            v34 = 0;
          else
            v34 = 0x100000000;
          goto LABEL_112;
        }
LABEL_110:
        LODWORD(v32) = 0;
      }
      v55 = 0;
      v34 = 0;
LABEL_112:
      v36 = (const WTF::StringImpl *)(v55 | v32);
LABEL_31:
      if ((v34 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v36, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  if ((int)v24 <= 63)
  {
    v25 = a1 + 16;
    v26 = v24 << 32;
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v24 << 32);
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
    goto LABEL_22;
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v21, a4, v27, SHIDWORD(v24), v24);
    return 1;
  }
  if (v28 != 6)
  {
LABEL_22:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_DWORD *)(a4 + 20) = v24;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v47 = *(_DWORD *)(v22 + 16) & 3;
  v49 = *(_QWORD *)(v27 + 8);
  v48 = *(_QWORD *)(v27 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
  {
    v51 = *(_QWORD *)(v27 + 24);
    v50 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v49;
    *(_QWORD *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v47 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v51;
    *(_QWORD *)(a4 + 80) = v50;
  }
  else
  {
    *(_QWORD *)a4 = v49;
    *(_QWORD *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v47 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24);
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v8 + 64) && (v12 = *(_QWORD *)(v8 + 32)) != 0)
    v9 = *(_QWORD *)(v12 + 32);
  else
    v9 = *(_QWORD *)(v8 + 48);
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  if (v11 + v10 > v9)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = v9 - v10;
LABEL_8:
    if (v5 > a3)
      goto LABEL_9;
    return 0;
  }
  if (v11 <= a3)
    return 0;
LABEL_9:
  v6 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v6 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)a4 = *(char *)(v6 + a3) & 0xFFFFFFFFLL | 0xFFFE000000000000;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  size_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  const char **v72;
  uint64_t v73;
  int v74;
  int v75;
  const char **p_dst;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  JSC::VM *v84;
  unsigned int v85;
  const char *__dst;
  uint64_t v87;
  char __s[8];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v84 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v59 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v59 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v59 == 45)
      {
        v59 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v59 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v59 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v61 = (v60 >> 52) & 0x7FF;
        if ((_DWORD)v61 == 2047)
        {
          if ((v60 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v62 = &__s[3];
          }
          else
          {
            v68 = __s;
            if ((v60 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v68 = &__s[1];
            }
            *(_QWORD *)v68 = 0x7974696E69666E49;
            v62 = v68 + 8;
          }
          goto LABEL_104;
        }
        v63 = v60 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v60 & 0x8000000000000000) != 0 && v63)
        {
          __s[0] = 45;
          v64 = &__s[1];
        }
        else
        {
          v64 = __s;
          if (!v63)
          {
            v62 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v65 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v60 & 0x800FFFFFFFFFFFFFLL, v61);
        v62 = WTF::dragonbox::detail::to_shortest(v65, v66, (uint64_t)v64, v67);
LABEL_104:
        *v62 = 0;
        v69 = strlen(__s);
        memcpy(&__dst, __s, v69);
        *((_BYTE *)&__dst + v69) = 0;
        v70 = *(unsigned int *)(a3 + 4);
        v71 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v70)
          {
            p_dst = &__dst;
            v77 = *(unsigned int *)(a3 + 4);
            do
            {
              v79 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v78 = v79;
              if (!v79 || *v71 != v78)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v71;
            }
            while (--v77);
          }
        }
        else if ((_DWORD)v70)
        {
          v72 = &__dst;
          v73 = *(unsigned int *)(a3 + 4);
          do
          {
            v75 = *(unsigned __int8 *)v72;
            v72 = (const char **)((char *)v72 + 1);
            v74 = v75;
            if (!v75 || *(unsigned __int16 *)v71 != v74)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v71 += 2;
          }
          while (--v73);
        }
        if (!*((_BYTE *)&__dst + v70))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v59 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v59 == 45)
      {
        v59 = v15[1];
LABEL_81:
        if ((v59 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v59 - 48) < 0xA || (_DWORD)v16 == 8 && v59 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v59 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v56 = *(unsigned __int8 *)v15 - 48, v56 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v80 = v16 - 1;
    v81 = (unsigned __int8 *)v15 + 1;
    while (v80)
    {
      if (v56 > 0x19999999)
        goto LABEL_72;
      v82 = *v81 - 48;
      if (v82 > 9)
        goto LABEL_72;
      v26 = 0;
      v57 = 0;
      v58 = 0;
      v25 = __CFADD__(v82, 10 * v56);
      v56 = v82 + 10 * v56;
      --v80;
      ++v81;
      if (v25)
        goto LABEL_73;
    }
    if (v56 == -1)
      v26 = 0;
    else
      v26 = v56 & 0xFFFFFF00;
    if (v56 == -1)
      v57 = 0;
    else
      v57 = v56;
    if (v56 == -1)
      v58 = 0;
    else
      v58 = 0x100000000;
  }
LABEL_73:
  v20 = v57;
  if ((v58 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v84, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v32 = *(_QWORD *)(a1 + 24);
    goto LABEL_34;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v36 + 64) && (v83 = *(_QWORD *)(v36 + 32)) != 0)
    v37 = *(_QWORD *)(v83 + 32);
  else
    v37 = *(_QWORD *)(v36 + 48);
  v39 = *(_QWORD *)(a1 + 24);
  v38 = *(_QWORD *)(a1 + 32);
  if (v39 + v38 > v37)
    goto LABEL_60;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v32 = v37 - v38;
LABEL_34:
    if (v32 > v31)
      goto LABEL_35;
LABEL_60:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v87 = 71;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABCE18);
    }
    goto LABEL_62;
  }
  if (v39 <= v31)
    goto LABEL_60;
LABEL_35:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v87 = 66;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABC944);
    }
LABEL_62:
    JSC::throwTypeError((unint64_t)a2, &v84, (WTF::StringImpl **)__s);
    v47 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    return 0;
  }
  v33 = *(_DWORD *)(a4 + 28);
  if ((v33 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v87 = 74;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABC9C0);
    }
    goto LABEL_62;
  }
  if ((v33 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v87 = 72;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABC9F8);
    }
    goto LABEL_62;
  }
  if ((v33 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v87 = 70;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABCA30);
    }
    goto LABEL_62;
  }
  v34 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setIndex(a1, a2, v31, v34, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v32 = a1;
  v17 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v18 = *v17;
    if ((v18 & 0x40) != 0)
      break;
    v19 = __ldaxr(v17);
    if (v19 == v18)
    {
      if (!__stxr(v18 | 0x40, v17))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_8:
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v22 = *(_QWORD *)(a1 + 24);
  WTF::Locker<JSC::JSCellLock,void>::~Locker(&v32, v10, v11, v12, v13, v14, v15, v16);
  if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v22;
      v29 = *(_QWORD *)(a2 + 160);
      v30 = __CFADD__(v29, v22);
      v31 = v29 + v22;
      if (v30)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v31;
    }
  }
  else if (v20 == 16)
  {
    if (v21)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v21, v23, v24, v25, v26, v27, v28);
  }
  else if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198ABD030);
  }
}

void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198ABD248);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198ABD1D8);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getInt8ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedInt8ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int8Adaptor>::s_info;
}

JSC::Exception *JSC::callInt8Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Int8Array", 10);
}

uint64_t JSC::constructInt8Array(JSC::JSObject **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSObject *v52;
  int *v53;
  uint64_t *v54;
  uint64_t v55;
  int v56[2];

  v10 = (JSC *)this;
  v11 = this[7];
  v12 = *((_QWORD *)a2 + 5);
  v55 = v12;
  *(_QWORD *)v56 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      v36 = JSC::JSGlobalObject::typedArrayStructure((unint64_t)this, 1, 0);
    }
    else
    {
      v52 = v11;
      v53 = v56;
      v54 = &v55;
      v36 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v52, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v44 = v36;
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v37, v38, v39, v40, v41, v42, v43))
      return JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create(*(JSC::JSGlobalObject **)v56, v44, 0, v39, v40, v41, v42, v43);
    return 0;
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v52 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v52, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v55 == v17)
      {
        v27 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)1>(*(uint64_t *)v56);
      }
      else
      {
        v52 = v11;
        v53 = v56;
        v54 = &v55;
        v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v52, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v55 == v17)
    {
      v27 = JSC::JSGlobalObject::typedArrayStructure(*(unint64_t *)v56, 1, 0);
    }
    else
    {
      v52 = v11;
      v53 = v56;
      v54 = &v55;
      v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v52, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v27;
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v28, v29, v30, v31, v32, v33, v34))
      return 0;
    if (v14 < 3 || (v52 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v52 == (JSC::JSObject *)10))
    {
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = JSC::JSValue::toTypedArrayIndex(&v52, *(JSC::JSGlobalObject **)v56, (uint64_t)"length", 7, v31, v32, v33, v34, v35);
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v22, v23, v24, v25, v26, v33, v34))
        return 0;
      v20 = 1;
    }
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(*(JSC::VM ***)v56, v18, v15, v16, v19, v20, v33, v34, v35);
  }
  if (v12 == *((_QWORD *)a2 + 3))
  {
    v45 = JSC::JSGlobalObject::typedArrayStructure((unint64_t)this, 1, 0);
  }
  else
  {
    v52 = v11;
    v53 = v56;
    v54 = &v55;
    v45 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v52, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v18 = v45;
  if (!*((_DWORD *)v11 + 20))
  {
    v19 = 0;
    v20 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(*(JSC::VM ***)v56, v18, v15, v16, v19, v20, v33, v34, v35);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, v46, v47, v48, v49, v50, v33, v34);
  v19 = 0;
  v20 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(*(JSC::VM ***)v56, v18, v15, v16, v19, v20, v33, v34, v35);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(__dst, __s, v41);
  __dst[v41] = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = __dst;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *v48++;
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = __dst;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *v44++;
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!__dst[v42])
  {
LABEL_74:
    JSC::toNativeFromValue<JSC::Int16Adaptor>(a2, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 2 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 1;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 2 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 1;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t result;
  unsigned int v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  int v49;
  JSC::VM *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  _WORD *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned int v82;
  const WTF::StringImpl *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v100[31];

  *(_QWORD *)&v100[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_74;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v26 = *v13 - 48, v26 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_29:
      v24 = 0;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v92 = v14 - 1;
      v93 = v13 + 1;
      while (v92)
      {
        if (v26 > 0x19999999)
          goto LABEL_29;
        v94 = *v93 - 48;
        if (v94 > 9)
          goto LABEL_29;
        v24 = 0;
        v27 = 0;
        v28 = 0;
        v23 = __CFADD__(v94, 10 * v26);
        v26 = v94 + 10 * v26;
        --v92;
        ++v93;
        if (v23)
          goto LABEL_30;
      }
      if (v26 == -1)
        v24 = 0;
      else
        v24 = v26 & 0xFFFFFF00;
      if (v26 == -1)
        v27 = 0;
      else
        v27 = v26;
      if (v26 == -1)
        v28 = 0;
      else
        v28 = 0x100000000;
    }
LABEL_30:
    v18 = v27;
    if ((v28 & 0x100000000) != 0)
      return JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v24, a4);
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = (unsigned __int16 *)(v13 + 2);
      v21 = v14 - 1;
      while (v21)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v20 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        ++v20;
        --v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      return JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v24, a4);
  }
  if (!(_DWORD)v14)
    goto LABEL_74;
  if ((v12 & 4) != 0)
  {
    v29 = *v13;
    if ((_DWORD)v14 == 1)
    {
LABEL_34:
      if ((v29 - 48) < 0xA)
        return 0;
      goto LABEL_74;
    }
    if (v29 == 45)
    {
      v29 = v13[1];
      goto LABEL_38;
    }
    if ((v29 - 48) < 0xA)
      goto LABEL_49;
    if ((_DWORD)v14 == 8)
    {
LABEL_48:
      if (v29 != 73)
        goto LABEL_74;
      goto LABEL_49;
    }
  }
  else
  {
    v29 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_34;
    if (v29 == 45)
    {
      v29 = *((unsigned __int16 *)v13 + 1);
LABEL_38:
      if ((v29 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_49;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_74;
      goto LABEL_48;
    }
    if ((v29 - 48) < 0xA || (_DWORD)v14 == 8 && v29 == 73)
      goto LABEL_49;
  }
  if ((_DWORD)v14 != 3 || v29 != 78)
    goto LABEL_74;
LABEL_49:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v31 = (v30 >> 52) & 0x7FF;
  if ((_DWORD)v31 == 2047)
  {
    if ((v30 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v32 = v100;
    }
    else
    {
      v38 = __s;
      if ((v30 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v38 = &__s[1];
      }
      *(_QWORD *)v38 = 0x7974696E69666E49;
      v32 = v38 + 8;
    }
    goto LABEL_61;
  }
  v33 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v30 & 0x8000000000000000) != 0 && v33)
  {
    __s[0] = 45;
    v34 = &__s[1];
  }
  else
  {
    v34 = __s;
    if (!v33)
    {
      v32 = &__s[1];
      __s[0] = 48;
      goto LABEL_61;
    }
  }
  v35 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v30 & 0x800FFFFFFFFFFFFFLL, v31);
  v32 = WTF::dragonbox::detail::to_shortest(v35, v36, (uint64_t)v34, v37);
LABEL_61:
  *v32 = 0;
  v39 = strlen(__s);
  memcpy(__dst, __s, v39);
  __dst[v39] = 0;
  v40 = *(unsigned int *)(a3 + 4);
  v41 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v40)
    {
      v46 = __dst;
      v47 = *(unsigned int *)(a3 + 4);
      do
      {
        v49 = *v46++;
        v48 = v49;
        if (!v49 || *v41 != v48)
          goto LABEL_74;
        ++v41;
      }
      while (--v47);
    }
  }
  else if ((_DWORD)v40)
  {
    v42 = __dst;
    v43 = *(unsigned int *)(a3 + 4);
    do
    {
      v45 = *v42++;
      v44 = v45;
      if (!v45 || *(unsigned __int16 *)v41 != v44)
        goto LABEL_74;
      v41 += 2;
    }
    while (--v43);
  }
  if (!__dst[v40])
    return 0;
LABEL_74:
  v50 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_108;
  v51 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v51 + 0x20)) != 0)
    goto LABEL_108;
  v52 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v52)
  {
    v53 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v53 || *(_BYTE *)(v53 + 5) != 1 && *(_DWORD *)(v53 + 80) < 2u)
      goto LABEL_108;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v52)
      goto LABEL_108;
  }
  if (!*(_DWORD *)(v52 + 24))
    goto LABEL_108;
  v54 = *(_QWORD *)(v52 + 16);
  v55 = v54 & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(unsigned int *)(v52 + 8);
  v57 = *(_DWORD *)(a3 + 16);
  if ((v54 & 1) != 0)
  {
    if ((v57 & 0x20) != 0)
      v57 = *(_DWORD *)(a3 + 32);
    v58 = *(_DWORD *)(v52 + 12);
    v59 = (v57 >> 8) & *(_QWORD *)&v58;
    v60 = *(unsigned __int8 *)(v55 + v59);
    if (*(_BYTE *)(v55 + v59))
    {
      v61 = v55 + v56;
      v62 = 1;
      while (1)
      {
        v63 = *(_QWORD *)(v61 + 8 * (v60 - 1));
        if (a3 == (v63 & 0xFFFFFFFFFFFFLL))
          break;
        v59 = ((_DWORD)v59 + v62) & v58;
        v60 = *(unsigned __int8 *)(v55 + v59);
        ++v62;
        if (!*(_BYTE *)(v55 + v59))
          goto LABEL_108;
      }
      a6 = (v63 >> 16) & 0xFF00000000 | HIBYTE(v63);
      goto LABEL_98;
    }
LABEL_108:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v50, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v74 = *(_DWORD *)(a3 + 16);
    if ((v74 & 0x20) == 0)
    {
      v75 = *(_WORD **)(a3 + 8);
      v76 = *(unsigned int *)(a3 + 4);
      if ((v74 & 4) == 0)
      {
        if ((_DWORD)v76)
        {
          v77 = (unsigned __int16)*v75 - 48;
          if (v77 <= 9 && (*v75 != 48 || v76 <= 1))
          {
            v80 = v75 + 1;
            v81 = v76 - 1;
            while (v81)
            {
              if (v77 > 0x19999999)
                goto LABEL_113;
              v82 = *v80 - 48;
              if (v82 > 9)
                goto LABEL_113;
              v78 = 0;
              LODWORD(v76) = 0;
              v79 = 0;
              v23 = __CFADD__(v82, 10 * v77);
              v77 = v82 + 10 * v77;
              ++v80;
              --v81;
              if (v23)
                goto LABEL_129;
            }
            v78 = 0x100000000;
            if (v77 == -1)
            {
              v78 = 0;
              LODWORD(v76) = 0;
            }
            else
            {
              LODWORD(v76) = v77;
            }
            if (v77 == -1)
              v79 = 0;
            else
              v79 = v77 & 0xFFFFFF00;
LABEL_129:
            v83 = (const WTF::StringImpl *)(v79 | v76);
            if ((v78 & 0x100000000) == 0)
              return 0;
            return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v83, a4, a5, a6, a7, a8);
          }
LABEL_113:
          v78 = 0;
          LODWORD(v76) = 0;
        }
        else
        {
          v78 = 0;
        }
        v79 = 0;
        goto LABEL_129;
      }
      if ((_DWORD)v76)
      {
        v89 = *(unsigned __int8 *)v75 - 48;
        if (v89 <= 9 && (v76 < 2 || *(_BYTE *)v75 != 48))
        {
          v95 = v76 - 1;
          v96 = (unsigned __int8 *)v75 + 1;
          while (v95)
          {
            if (v89 > 0x19999999)
              goto LABEL_150;
            v97 = *v96 - 48;
            if (v97 > 9)
              goto LABEL_150;
            LODWORD(v76) = 0;
            v90 = 0;
            v91 = 0;
            v23 = __CFADD__(v97, 10 * v89);
            v89 = v97 + 10 * v89;
            --v95;
            ++v96;
            if (v23)
              goto LABEL_152;
          }
          if (v89 == -1)
            LODWORD(v76) = 0;
          else
            LODWORD(v76) = v89 & 0xFFFFFF00;
          if (v89 == -1)
            v90 = 0;
          else
            v90 = v89;
          if (v89 == -1)
            v91 = 0;
          else
            v91 = 0x100000000;
LABEL_152:
          v83 = (const WTF::StringImpl *)(v90 | v76);
          if ((v91 & 0x100000000) == 0)
            return 0;
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v83, a4, a5, a6, a7, a8);
        }
LABEL_150:
        LODWORD(v76) = 0;
      }
      v90 = 0;
      v91 = 0;
      goto LABEL_152;
    }
    return 0;
  }
  if ((v57 & 0x20) != 0)
    v57 = *(_DWORD *)(a3 + 32);
  v64 = *(_DWORD *)(v52 + 12);
  v65 = v64 & (v57 >> 8);
  v66 = *(_DWORD *)(v55 + 4 * v65);
  if (!v66)
    goto LABEL_108;
  v67 = v55 + 4 * v56;
  v68 = 1;
  while (1)
  {
    v69 = (v66 - 1);
    if (*(_QWORD *)(v67 + 16 * v69) == a3)
      break;
    v65 = (v65 + v68) & v64;
    v66 = *(_DWORD *)(v55 + 4 * v65);
    ++v68;
    if (!v66)
      goto LABEL_108;
  }
  a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
LABEL_98:
  if ((_DWORD)a6 == -1)
    goto LABEL_108;
  if ((int)a6 <= 63)
  {
    v70 = a1 + 16;
    v71 = a6 << 32;
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 8) - 8;
    v71 = 0x3F00000000 - (a6 << 32);
  }
  v72 = *(_QWORD *)(v70 + (v71 >> 29));
  if ((v72 & 0xFFFE000000000002) != 0)
    goto LABEL_105;
  v73 = *(unsigned __int8 *)(v72 + 5);
  if (v73 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v50, a4, v72, SHIDWORD(a6), a6);
    return 1;
  }
  if (v73 != 6)
  {
LABEL_105:
    *(_QWORD *)a4 = v72;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v84 = *(_DWORD *)(v51 + 16) & 3;
  v86 = *(_QWORD *)(v72 + 8);
  v85 = *(_QWORD *)(v72 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C)))
  {
    v88 = *(_QWORD *)(v72 + 24);
    v87 = *(_QWORD *)(v72 + 32);
    *(_QWORD *)a4 = v86;
    *(_QWORD *)(a4 + 8) = v85;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v84 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v88;
    *(_QWORD *)(a4 + 80) = v87;
  }
  else
  {
    *(_QWORD *)a4 = v86;
    *(_QWORD *)(a4 + 8) = v85;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v84 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > (unint64_t)a3)
      goto LABEL_8;
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 2 * v10 > v8)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (a3 >= (v8 - v9) >> 1)
      return 0;
  }
  else if (v10 <= a3)
  {
    return 0;
  }
LABEL_8:
  v5 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)a4 = *(__int16 *)(v5 + 2 * a3) & 0xFFFFFFFFLL | 0xFFFE000000000000;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABF31CLL);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 2 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 1)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABEE40);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABEEBCLL);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABEEF4);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ABEF2CLL);
    }
    goto LABEL_61;
  }
  v33 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 2 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v31 = a1;
  v17 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v18 = *v17;
    if ((v18 & 0x40) != 0)
      break;
    v19 = __ldaxr(v17);
    if (v19 == v18)
    {
      if (!__stxr(v18 | 0x40, v17))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_8:
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v22 = *(_QWORD *)(a1 + 24);
  WTF::Locker<JSC::JSCellLock,void>::~Locker(&v31, v10, v11, v12, v13, v14, v15, v16);
  if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198ABF544);
  }
  if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += 2 * v22;
      v30 = *(_QWORD *)(a2 + 160);
      if (__CFADD__(v30, 2 * v22))
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v30 + 2 * v22;
    }
  }
  else if (v20 == 16 && v21)
  {
    JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v21, v23, v24, v25, v26, v27, v28);
  }
}

void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198ABF754);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 2 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198ABF6E4);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getInt16ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedInt16ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int16Adaptor>::s_info;
}

JSC::Exception *JSC::callInt16Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Int16Array", 11);
}

uint64_t JSC::constructInt16Array(JSC::JSObject **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSObject *v52;
  int *v53;
  uint64_t *v54;
  uint64_t v55;
  int v56[2];

  v10 = (JSC *)this;
  v11 = this[7];
  v12 = *((_QWORD *)a2 + 5);
  v55 = v12;
  *(_QWORD *)v56 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      v22 = JSC::JSGlobalObject::typedArrayStructure((unint64_t)this, 4, 0);
    }
    else
    {
      v52 = v11;
      v53 = v56;
      v54 = &v55;
      v22 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v52, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v30 = v22;
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v23, v24, v25, v26, v27, v28, v29))
      return JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create(*(JSC::JSGlobalObject **)v56, v30, 0, v25, v26, v27, v28, v29);
    return 0;
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v52 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v52, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v55 == v17)
      {
        v36 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)4>(*(uint64_t *)v56);
      }
      else
      {
        v52 = v11;
        v53 = v56;
        v54 = &v55;
        v36 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v52, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v55 == v17)
    {
      v36 = JSC::JSGlobalObject::typedArrayStructure(*(unint64_t *)v56, 4, 0);
    }
    else
    {
      v52 = v11;
      v53 = v56;
      v54 = &v55;
      v36 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v52, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v36;
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v37, v38, v39, v40, v41, v42, v43))
      return 0;
    if (v14 < 3 || (v52 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v52 == (JSC::JSObject *)10))
    {
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = JSC::JSValue::toTypedArrayIndex(&v52, *(JSC::JSGlobalObject **)v56, (uint64_t)"length", 7, v40, v41, v42, v43, v44);
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v31, v32, v33, v34, v35, v42, v43))
        return 0;
      v20 = 1;
    }
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(*(JSC::VM ***)v56, v18, v15, v16, v19, v20, v42, v43, v44);
  }
  if (v12 == *((_QWORD *)a2 + 3))
  {
    v45 = JSC::JSGlobalObject::typedArrayStructure((unint64_t)this, 4, 0);
  }
  else
  {
    v52 = v11;
    v53 = v56;
    v54 = &v55;
    v45 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v52, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v18 = v45;
  if (!*((_DWORD *)v11 + 20))
  {
    v19 = 0;
    v20 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(*(JSC::VM ***)v56, v18, v15, v16, v19, v20, v42, v43, v44);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, v46, v47, v48, v49, v50, v42, v43);
  v19 = 0;
  v20 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(*(JSC::VM ***)v56, v18, v15, v16, v19, v20, v42, v43, v44);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, (unint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(__dst, __s, v41);
  __dst[v41] = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = __dst;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *v48++;
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = __dst;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *v44++;
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!__dst[v42])
  {
LABEL_74:
    JSC::toNativeFromValue<JSC::Int32Adaptor>(a2, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 4 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 2;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 4 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 2;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  BOOL v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  size_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t result;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  int v71;
  _WORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  const WTF::StringImpl *v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v98[31];

  *(_QWORD *)&v98[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_13;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v86 = *v13 - 48, v86 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_152:
      v19 = 0;
      v87 = 0;
      v16 = 0;
    }
    else
    {
      v90 = v14 - 1;
      v91 = v13 + 1;
      while (v90)
      {
        if (v86 > 0x19999999)
          goto LABEL_152;
        v92 = *v91 - 48;
        if (v92 > 9)
          goto LABEL_152;
        v19 = 0;
        v87 = 0;
        v16 = 0;
        v38 = __CFADD__(v92, 10 * v86);
        v86 = v92 + 10 * v86;
        --v90;
        ++v91;
        if (v38)
          goto LABEL_153;
      }
      if (v86 == -1)
        v19 = 0;
      else
        v19 = v86 & 0xFFFFFF00;
      if (v86 == -1)
        v87 = 0;
      else
        v87 = v86;
      if (v86 == -1)
        v16 = 0;
      else
        v16 = 0x100000000;
    }
LABEL_153:
    v18 = v87;
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v34 = v14 > 1) : (v34 = 0), v34))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v35 = (unsigned __int16 *)(v13 + 2);
      v36 = v14 - 1;
      while (v36)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v37 = *v35 - 48;
        if (v37 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v38 = __CFADD__(v37, 10 * v15);
        v15 = v37 + 10 * v15;
        ++v35;
        --v36;
        if (v38)
          goto LABEL_7;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_7:
    v19 = v17;
  }
  if ((v16 & 0x100000000) != 0)
    return JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v19, a4);
  if (!(_DWORD)v14)
    goto LABEL_13;
  if ((v12 & 4) != 0)
  {
    v20 = *v13;
    if ((_DWORD)v14 == 1)
    {
LABEL_12:
      if ((v20 - 48) < 0xA)
        return 0;
      goto LABEL_13;
    }
    if (v20 == 45)
    {
      v20 = v13[1];
      goto LABEL_27;
    }
    if ((v20 - 48) < 0xA)
      goto LABEL_42;
    if ((_DWORD)v14 == 8)
    {
LABEL_82:
      if (v20 != 73)
        goto LABEL_13;
      goto LABEL_42;
    }
  }
  else
  {
    v20 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_12;
    if (v20 == 45)
    {
      v20 = *((unsigned __int16 *)v13 + 1);
LABEL_27:
      if ((v20 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_42;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_13;
      goto LABEL_82;
    }
    if ((v20 - 48) < 0xA || (_DWORD)v14 == 8 && v20 == 73)
      goto LABEL_42;
  }
  if ((_DWORD)v14 != 3 || v20 != 78)
    goto LABEL_13;
LABEL_42:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v40 = (v39 >> 52) & 0x7FF;
  if ((_DWORD)v40 == 2047)
  {
    if ((v39 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v41 = v98;
    }
    else
    {
      v70 = __s;
      if ((v39 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v70 = &__s[1];
      }
      *(_QWORD *)v70 = 0x7974696E69666E49;
      v41 = v70 + 8;
    }
    goto LABEL_55;
  }
  v42 = v39 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v39 & 0x8000000000000000) != 0 && v42)
  {
    __s[0] = 45;
    v43 = &__s[1];
  }
  else
  {
    v43 = __s;
    if (!v42)
    {
      v41 = &__s[1];
      __s[0] = 48;
      goto LABEL_55;
    }
  }
  v44 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v39 & 0x800FFFFFFFFFFFFFLL, v40);
  v41 = WTF::dragonbox::detail::to_shortest(v44, v45, (uint64_t)v43, v46);
LABEL_55:
  *v41 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          goto LABEL_13;
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        goto LABEL_13;
      v49 += 2;
    }
    while (--v51);
  }
  if (!__dst[v48])
    return 0;
LABEL_13:
  v21 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_105;
  v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    goto LABEL_105;
  v23 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v23)
  {
    v58 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v58 || *(_BYTE *)(v58 + 5) != 1 && *(_DWORD *)(v58 + 80) < 2u)
      goto LABEL_105;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v23)
      goto LABEL_105;
  }
  if (!*(_DWORD *)(v23 + 24))
    goto LABEL_105;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(unsigned int *)(v23 + 8);
  v27 = *(_DWORD *)(a3 + 16);
  if ((v24 & 1) != 0)
  {
    if ((v27 & 0x20) != 0)
      v27 = *(_DWORD *)(a3 + 32);
    v28 = *(_DWORD *)(v23 + 12);
    v29 = (v27 >> 8) & *(_QWORD *)&v28;
    v30 = *(unsigned __int8 *)(v25 + v29);
    if (*(_BYTE *)(v25 + v29))
    {
      v31 = v25 + v26;
      v32 = 1;
      while (1)
      {
        v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
        if (a3 == (v33 & 0xFFFFFFFFFFFFLL))
          break;
        v29 = ((_DWORD)v29 + v32) & v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        ++v32;
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_105;
      }
      a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      goto LABEL_74;
    }
LABEL_105:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v21, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v71 = *(_DWORD *)(a3 + 16);
    if ((v71 & 0x20) == 0)
    {
      v72 = *(_WORD **)(a3 + 8);
      v73 = *(unsigned int *)(a3 + 4);
      if ((v71 & 4) == 0)
      {
        if ((_DWORD)v73)
        {
          v74 = (unsigned __int16)*v72 - 48;
          if (v74 <= 9 && (*v72 != 48 || v73 <= 1))
          {
            v78 = v72 + 1;
            v79 = v73 - 1;
            while (v79)
            {
              if (v74 > 0x19999999)
                goto LABEL_110;
              v80 = *v78 - 48;
              if (v80 > 9)
                goto LABEL_110;
              v75 = 0;
              LODWORD(v73) = 0;
              v76 = 0;
              v38 = __CFADD__(v80, 10 * v74);
              v74 = v80 + 10 * v74;
              ++v78;
              --v79;
              if (v38)
                goto LABEL_112;
            }
            v75 = 0x100000000;
            if (v74 == -1)
            {
              v75 = 0;
              LODWORD(v73) = 0;
            }
            else
            {
              LODWORD(v73) = v74;
            }
            if (v74 == -1)
              v76 = 0;
            else
              v76 = v74 & 0xFFFFFF00;
            goto LABEL_112;
          }
LABEL_110:
          v75 = 0;
          LODWORD(v73) = 0;
        }
        else
        {
          v75 = 0;
        }
        v76 = 0;
LABEL_112:
        v77 = (const WTF::StringImpl *)(v76 | v73);
        goto LABEL_113;
      }
      if ((_DWORD)v73)
      {
        v88 = *(unsigned __int8 *)v72 - 48;
        if (v88 <= 9 && (v73 < 2 || *(_BYTE *)v72 != 48))
        {
          v93 = v73 - 1;
          v94 = (unsigned __int8 *)v72 + 1;
          while (v93)
          {
            if (v88 > 0x19999999)
              goto LABEL_156;
            v95 = *v94 - 48;
            if (v95 > 9)
              goto LABEL_156;
            LODWORD(v73) = 0;
            v89 = 0;
            v75 = 0;
            v38 = __CFADD__(v95, 10 * v88);
            v88 = v95 + 10 * v88;
            --v93;
            ++v94;
            if (v38)
              goto LABEL_158;
          }
          if (v88 == -1)
            LODWORD(v73) = 0;
          else
            LODWORD(v73) = v88 & 0xFFFFFF00;
          if (v88 == -1)
            v89 = 0;
          else
            v89 = v88;
          if (v88 == -1)
            v75 = 0;
          else
            v75 = 0x100000000;
          goto LABEL_158;
        }
LABEL_156:
        LODWORD(v73) = 0;
      }
      v89 = 0;
      v75 = 0;
LABEL_158:
      v77 = (const WTF::StringImpl *)(v89 | v73);
LABEL_113:
      if ((v75 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v77, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  if ((v27 & 0x20) != 0)
    v27 = *(_DWORD *)(a3 + 32);
  v64 = *(_DWORD *)(v23 + 12);
  v65 = v64 & (v27 >> 8);
  v66 = *(_DWORD *)(v25 + 4 * v65);
  if (!v66)
    goto LABEL_105;
  v67 = v25 + 4 * v26;
  v68 = 1;
  while (1)
  {
    v69 = (v66 - 1);
    if (*(_QWORD *)(v67 + 16 * v69) == a3)
      break;
    v65 = (v65 + v68) & v64;
    v66 = *(_DWORD *)(v25 + 4 * v65);
    ++v68;
    if (!v66)
      goto LABEL_105;
  }
  a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
LABEL_74:
  if ((_DWORD)a6 == -1)
    goto LABEL_105;
  if ((int)a6 <= 63)
  {
    v59 = a1 + 16;
    v60 = a6 << 32;
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 8) - 8;
    v60 = 0x3F00000000 - (a6 << 32);
  }
  v61 = *(_QWORD *)(v59 + (v60 >> 29));
  if ((v61 & 0xFFFE000000000002) != 0)
    goto LABEL_80;
  v62 = *(unsigned __int8 *)(v61 + 5);
  if (v62 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v21, a4, v61, SHIDWORD(a6), a6);
    return 1;
  }
  if (v62 != 6)
  {
LABEL_80:
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v81 = *(_DWORD *)(v22 + 16) & 3;
  v83 = *(_QWORD *)(v61 + 8);
  v82 = *(_QWORD *)(v61 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C)))
  {
    v85 = *(_QWORD *)(v61 + 24);
    v84 = *(_QWORD *)(v61 + 32);
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v85;
    *(_QWORD *)(a4 + 80) = v84;
  }
  else
  {
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > (unint64_t)a3)
      goto LABEL_8;
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 4 * v10 > v8)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (a3 >= (v8 - v9) >> 2)
      return 0;
  }
  else if (v10 <= a3)
  {
    return 0;
  }
LABEL_8:
  v5 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)a4 = *(unsigned int *)(v5 + 4 * a3) | 0xFFFE000000000000;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC1828);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 4 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 2)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC134CLL);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC13C8);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC1400);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC1438);
    }
    goto LABEL_61;
  }
  v33 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 4 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v30 = a1;
  v17 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v18 = *v17;
    if ((v18 & 0x40) != 0)
      break;
    v19 = __ldaxr(v17);
    if (v19 == v18)
    {
      if (!__stxr(v18 | 0x40, v17))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_8:
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v22 = *(_QWORD *)(a1 + 24);
  WTF::Locker<JSC::JSCellLock,void>::~Locker(&v30, v10, v11, v12, v13, v14, v15, v16);
  if (v20 == 16)
  {
    if (v21)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v21, v23, v24, v25, v26, v27, v28);
  }
  else if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += 4 * v22;
      v29 = *(_QWORD *)(a2 + 160);
      if (__CFADD__(v29, 4 * v22))
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v29 + 4 * v22;
    }
  }
  else if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC1A40);
  }
}

void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198AC1C60);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 4 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC1BF0);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getInt32ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedInt32ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int32Adaptor>::s_info;
}

JSC::Exception *JSC::callInt32Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Int32Array", 11);
}

uint64_t JSC::constructInt32Array(JSC::JSObject **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(JSC::JSObject **, JSC *, JSC::CallFrame *);
  JSC::JSObject **v44;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v46;
  int v47[2];
  JSC::JSObject *v48;
  JSC::JSGlobalObject *v49;
  uint64_t *v50;

  v10 = (JSC *)this;
  v11 = this[7];
  v12 = *((_QWORD *)a2 + 5);
  v46 = v12;
  *(_QWORD *)v47 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      v28 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)6>((uint64_t)this);
    }
    else
    {
      v48 = v11;
      v49 = (JSC::JSGlobalObject *)v47;
      v50 = &v46;
      v28 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v36 = v28;
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v29, v30, v31, v32, v33, v34, v35))
      return JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create(*(JSC::JSGlobalObject **)v47, v36, 0, v31, v32, v33, v34, v35);
    return 0;
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v48 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v48, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v46 == v17)
      {
        v27 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)6>(*(uint64_t *)v47);
      }
      else
      {
        v48 = v11;
        v49 = (JSC::JSGlobalObject *)v47;
        v50 = &v46;
        v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v48, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v46 == v17)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v47 + 1784);
      if ((v18 & 1) == 0)
      {
LABEL_10:
        if (*((_DWORD *)v11 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          return 0;
        }
        if (v14 < 3 || (v48 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v48 == (JSC::JSObject *)10))
        {
          v19 = 0;
          v20 = 0;
        }
        else
        {
          v19 = JSC::JSValue::toTypedArrayIndex(&v48, *(JSC::JSGlobalObject **)v47, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v22, v23, v24, v25, v26, a7, a8))
            return 0;
          v20 = 1;
        }
        return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
      }
      v43 = *(uint64_t (**)(JSC::JSObject **, JSC *, JSC::CallFrame *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v44 = (JSC::JSObject **)(*(_QWORD *)v47 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v47[0] & 8) != 0)
        v44 = (JSC::JSObject **)(*(_QWORD *)v47 - 16);
      v48 = *v44;
      v49 = *(JSC::JSGlobalObject **)v47;
      v50 = (uint64_t *)(*(_QWORD *)v47 + 1784);
      v27 = v43(&v48, v10, a3);
    }
    else
    {
      v48 = v11;
      v49 = (JSC::JSGlobalObject *)v47;
      v50 = &v46;
      v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v27;
    goto LABEL_10;
  }
  if (v12 == *((_QWORD *)a2 + 3))
  {
    v37 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)6>((uint64_t)this);
  }
  else
  {
    v48 = v11;
    v49 = (JSC::JSGlobalObject *)v47;
    v50 = &v46;
    v37 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v18 = v37;
  if (!*((_DWORD *)v11 + 20))
  {
    v19 = 0;
    v20 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, v38, v39, v40, v41, v42, a7, a8);
  v19 = 0;
  v20 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  BOOL v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  unsigned int v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v56[31];

  *(_QWORD *)&v56[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v49 = *v15 - 48, v49 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_80:
      v21 = 0;
      v50 = 0;
      v18 = 0;
    }
    else
    {
      v51 = v16 - 1;
      v52 = v15 + 1;
      while (v51)
      {
        if (v49 > 0x19999999)
          goto LABEL_80;
        v53 = *v52 - 48;
        if (v53 > 9)
          goto LABEL_80;
        v21 = 0;
        v50 = 0;
        v18 = 0;
        v28 = __CFADD__(v53, 10 * v49);
        v49 = v53 + 10 * v49;
        --v51;
        ++v52;
        if (v28)
          goto LABEL_81;
      }
      if (v49 == -1)
        v21 = 0;
      else
        v21 = v49 & 0xFFFFFF00;
      if (v49 == -1)
        v50 = 0;
      else
        v50 = v49;
      if (v49 == -1)
        v18 = 0;
      else
        v18 = 0x100000000;
    }
LABEL_81:
    v20 = v50;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v24 = v16 > 1) : (v24 = 0), v24))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v25 = v16 - 1;
      v26 = (unsigned __int16 *)(v15 + 2);
      while (v25)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v27 = *v26 - 48;
        if (v27 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v28 = __CFADD__(v27, 10 * v17);
        v17 = v27 + 10 * v17;
        --v25;
        ++v26;
        if (v28)
          goto LABEL_7;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_7:
    v21 = v19;
  }
  if ((v18 & 0x100000000) != 0)
  {
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex((uint64_t)a1, a2, v20 | v21, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    return 1;
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v22 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_12;
    if (v22 == 45)
    {
      v22 = *((unsigned __int16 *)v15 + 1);
      goto LABEL_16;
    }
    if ((v22 - 48) < 0xA || (_DWORD)v16 == 8 && v22 == 73)
      goto LABEL_31;
LABEL_63:
    if ((_DWORD)v16 != 3 || v22 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_31;
  }
  v22 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_12:
    if ((v22 - 48) >= 0xA)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_57;
  }
  if (v22 != 45)
  {
    if ((v22 - 48) < 0xA)
      goto LABEL_31;
    if ((_DWORD)v16 == 8)
      goto LABEL_59;
    goto LABEL_63;
  }
  v22 = v15[1];
LABEL_16:
  if ((v22 - 48) >= 0xA)
  {
    if ((_DWORD)v16 != 9)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_59:
    if (v22 != 73)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_31:
    JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
    v30 = (v29 >> 52) & 0x7FF;
    if ((_DWORD)v30 == 2047)
    {
      if ((v29 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v31 = v56;
      }
      else
      {
        v48 = __s;
        if ((v29 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v48 = &__s[1];
        }
        *(_QWORD *)v48 = 0x7974696E69666E49;
        v31 = v48 + 8;
      }
LABEL_44:
      *v31 = 0;
      v37 = strlen(__s);
      memcpy(__dst, __s, v37);
      __dst[v37] = 0;
      v38 = *(unsigned int *)(a3 + 4);
      v39 = *(unsigned __int8 **)(a3 + 8);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        if ((_DWORD)v38)
        {
          v44 = __dst;
          v45 = *(unsigned int *)(a3 + 4);
          do
          {
            v47 = *v44++;
            v46 = v47;
            if (!v47 || *v39 != v46)
              return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
            ++v39;
          }
          while (--v45);
        }
      }
      else if ((_DWORD)v38)
      {
        v40 = __dst;
        v41 = *(unsigned int *)(a3 + 4);
        do
        {
          v43 = *v40++;
          v42 = v43;
          if (!v43 || *(unsigned __int16 *)v39 != v42)
            return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
          v39 += 2;
        }
        while (--v41);
      }
      if (!__dst[v38])
        goto LABEL_57;
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    }
    v32 = v29 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v29 & 0x8000000000000000) != 0 && v32)
    {
      __s[0] = 45;
      v33 = &__s[1];
    }
    else
    {
      v33 = __s;
      if (!v32)
      {
        v31 = &__s[1];
        __s[0] = 48;
        goto LABEL_44;
      }
    }
    v34 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v29 & 0x800FFFFFFFFFFFFFLL, v30);
    v31 = WTF::dragonbox::detail::to_shortest(v34, v35, (uint64_t)v33, v36);
    goto LABEL_44;
  }
  if ((_DWORD)v16 != 2)
    goto LABEL_31;
LABEL_57:
  JSC::toNativeFromValue<JSC::Uint8Adaptor>(a2, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  size_t v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v65[31];

  *(_QWORD *)&v65[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v35 = *v13 - 48, v35 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_47:
      v24 = 0;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      v59 = v14 - 1;
      v60 = v13 + 1;
      while (v59)
      {
        if (v35 > 0x19999999)
          goto LABEL_47;
        v61 = *v60 - 48;
        if (v61 > 9)
          goto LABEL_47;
        v24 = 0;
        v36 = 0;
        v37 = 0;
        v23 = __CFADD__(v61, 10 * v35);
        v35 = v61 + 10 * v35;
        --v59;
        ++v60;
        if (v23)
          goto LABEL_48;
      }
      if (v35 == -1)
        v24 = 0;
      else
        v24 = v35 & 0xFFFFFF00;
      if (v35 == -1)
        v36 = 0;
      else
        v36 = v35;
      if (v35 == -1)
        v37 = 0;
      else
        v37 = 0x100000000;
    }
LABEL_48:
    v18 = v36;
    if ((v37 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
          if (*(_BYTE *)(v31 + 64) && (v62 = *(_QWORD *)(v31 + 32)) != 0)
            v32 = *(_QWORD *)(v62 + 32);
          else
            v32 = *(_QWORD *)(v31 + 48);
          v34 = *(_QWORD *)(a1 + 24);
          v33 = *(_QWORD *)(a1 + 32);
          if (v34 + v33 > v32)
          {
            v29 = 0;
            return v29 ^ 1u;
          }
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v28 = v34 > v26;
LABEL_32:
            v29 = v28;
            return v29 ^ 1u;
          }
          v27 = v32 - v33;
        }
        else
        {
          v27 = *(_QWORD *)(a1 + 24);
        }
        v28 = v27 > v26;
        goto LABEL_32;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v38 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_52;
    if (v38 == 45)
    {
      v38 = *((unsigned __int16 *)v13 + 1);
LABEL_56:
      if ((v38 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_67;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_66;
    }
    if ((v38 - 48) < 0xA || (_DWORD)v14 == 8 && v38 == 73)
      goto LABEL_67;
    goto LABEL_62;
  }
  v38 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_52:
    if ((v38 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v38 == 45)
  {
    v38 = v13[1];
    goto LABEL_56;
  }
  if ((v38 - 48) < 0xA)
    goto LABEL_67;
  if ((_DWORD)v14 != 8)
  {
LABEL_62:
    if ((_DWORD)v14 != 3 || v38 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_67;
  }
LABEL_66:
  if (v38 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_67:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v40 = (v39 >> 52) & 0x7FF;
  if ((_DWORD)v40 != 2047)
  {
    v42 = v39 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v39 & 0x8000000000000000) != 0 && v42)
    {
      __s[0] = 45;
      v43 = &__s[1];
    }
    else
    {
      v43 = __s;
      if (!v42)
      {
        v41 = &__s[1];
        __s[0] = 48;
        goto LABEL_79;
      }
    }
    v44 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v39 & 0x800FFFFFFFFFFFFFLL, v40);
    v41 = WTF::dragonbox::detail::to_shortest(v44, v45, (uint64_t)v43, v46);
    goto LABEL_79;
  }
  if ((v39 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v41 = v65;
  }
  else
  {
    v47 = __s;
    if ((v39 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v47 = &__s[1];
    }
    *(_QWORD *)v47 = 0x7974696E69666E49;
    v41 = v47 + 8;
  }
LABEL_79:
  *v41 = 0;
  v48 = strlen(__s);
  memcpy(__dst, __s, v48);
  __dst[v48] = 0;
  v49 = *(unsigned int *)(a3 + 4);
  v50 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v49)
    {
      v55 = __dst;
      v56 = *(unsigned int *)(a3 + 4);
      do
      {
        v58 = *v55++;
        v57 = v58;
        if (!v58 || *v50 != v57)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v50;
      }
      while (--v56);
    }
  }
  else if ((_DWORD)v49)
  {
    v51 = __dst;
    v52 = *(unsigned int *)(a3 + 4);
    do
    {
      v54 = *v51++;
      v53 = v54;
      if (!v54 || *(unsigned __int16 *)v50 != v53)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v50 += 2;
    }
    while (--v52);
  }
  if (__dst[v49])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v8 + 64) && (v12 = *(_QWORD *)(v8 + 32)) != 0)
    v9 = *(_QWORD *)(v12 + 32);
  else
    v9 = *(_QWORD *)(v8 + 48);
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  if (v11 + v10 <= v9)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v6 = v11 > a3;
LABEL_11:
      v7 = v6;
      return v7 ^ 1u;
    }
    v5 = v9 - v10;
LABEL_10:
    v6 = v5 > a3;
    goto LABEL_11;
  }
  v7 = 0;
  return v7 ^ 1u;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  size_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int **v53;
  uint64_t v54;
  int v55;
  int v56;
  int **p_dst;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  char *v72;
  int v73;
  _WORD *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned __int16 *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  char v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned __int8 v110;
  uint64_t (*v111)(uint64_t, uint64_t, int *, uint64_t);
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  uint64_t v133;
  unsigned __int8 *v134;
  unsigned int v135;
  uint64_t v136;
  int *v137;
  int v138;
  unint64_t v139;
  unsigned __int8 *v140;
  unint64_t v141;
  unint64_t v142;
  int *v143;
  int v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  _BYTE *v149;
  int *__dst;
  unint64_t v151;
  char __s[8];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = *(_DWORD *)(a3 + 16);
    if ((v12 & 0x20) != 0)
      goto LABEL_14;
    v13 = *(unsigned __int8 **)(a3 + 8);
    v14 = *(unsigned int *)(a3 + 4);
    if ((v12 & 4) != 0)
    {
      if (!(_DWORD)v14 || (v109 = *v13 - 48, v109 > 9) || v14 >= 2 && *v13 == 48)
      {
LABEL_187:
        v17 = 0;
        v110 = 0;
        v16 = 0;
      }
      else
      {
        v130 = v14 - 1;
        v131 = v13 + 1;
        while (v130)
        {
          if (v109 > 0x19999999)
            goto LABEL_187;
          v132 = *v131 - 48;
          if (v132 > 9)
            goto LABEL_187;
          v17 = 0;
          v110 = 0;
          v16 = 0;
          v39 = __CFADD__(v132, 10 * v109);
          v109 = v132 + 10 * v109;
          --v130;
          ++v131;
          if (v39)
            goto LABEL_188;
        }
        if (v109 == -1)
          v17 = 0;
        else
          v17 = v109 & 0xFFFFFF00;
        if (v109 == -1)
          v110 = 0;
        else
          v110 = v109;
        if (v109 == -1)
          v16 = 0;
        else
          v16 = 0x100000000;
      }
LABEL_188:
      v18 = v110;
    }
    else
    {
      if (!(_DWORD)v14
        || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
        || (*(_WORD *)v13 == 48 ? (v35 = v14 > 1) : (v35 = 0), v35))
      {
LABEL_6:
        v16 = 0;
        LOBYTE(v17) = 0;
        v18 = 0;
      }
      else
      {
        v36 = (unsigned __int16 *)(v13 + 2);
        v37 = v14 - 1;
        while (v37)
        {
          if (v15 > 0x19999999)
            goto LABEL_6;
          v38 = *v36 - 48;
          if (v38 > 9)
            goto LABEL_6;
          v16 = 0;
          LOBYTE(v17) = 0;
          v18 = 0;
          v39 = __CFADD__(v38, 10 * v15);
          v15 = v38 + 10 * v15;
          ++v36;
          --v37;
          if (v39)
            goto LABEL_7;
        }
        v18 = v15 & 0xFFFFFF00;
        v16 = 0x100000000;
        if (v15 == -1)
        {
          v16 = 0;
          LOBYTE(v17) = 0;
        }
        else
        {
          LOBYTE(v17) = v15;
        }
        if (v15 == -1)
          v18 = 0;
      }
LABEL_7:
      v17 = v17;
    }
    if ((v16 & 0x100000000) == 0)
    {
      if (!(_DWORD)v14)
        goto LABEL_14;
      if ((v12 & 4) == 0)
      {
        v19 = *(unsigned __int16 *)v13;
        if ((_DWORD)v14 == 1)
        {
          v20 = v19 - 48;
          goto LABEL_13;
        }
        if (v19 == 45)
        {
          v34 = *((unsigned __int16 *)v13 + 1);
          if ((v34 - 48) >= 0xA)
          {
            if ((_DWORD)v14 != 9 || v34 != 73)
              goto LABEL_14;
          }
          else if ((_DWORD)v14 == 2)
          {
            return 0;
          }
          goto LABEL_62;
        }
        if ((v19 - 48) >= 0xA)
        {
          if (((_DWORD)v14 != 8 || v19 != 73) && ((_DWORD)v14 != 3 || v19 != 78))
            goto LABEL_14;
        }
        else if ((_DWORD)v14 == 2 && *(_WORD *)v13 == 45)
        {
          v40 = *((unsigned __int16 *)v13 + 1);
          goto LABEL_45;
        }
LABEL_62:
        v41 = JSC::toDouble<char16_t>((uint64_t)v13, v14);
        goto LABEL_63;
      }
      v149 = *(_BYTE **)(a3 + 8);
      v107 = *v13;
      if ((_DWORD)v14 == 1)
      {
        v20 = v107 - 48;
LABEL_13:
        if (v20 < 0xA)
          return 0;
        goto LABEL_14;
      }
      v108 = *(unsigned int *)(a3 + 4);
      v40 = v149[1];
      if (v107 == 45)
      {
        if ((v40 - 48) >= 0xA)
        {
          if ((_DWORD)v14 != 9 || v40 != 73)
            goto LABEL_14;
          goto LABEL_240;
        }
        if ((_DWORD)v14 == 2)
          return 0;
      }
      else if ((v107 - 48) >= 0xA)
      {
        if ((_DWORD)v14 == 8)
        {
          if (v107 != 73)
            goto LABEL_14;
        }
        else if ((_DWORD)v14 != 3 || v107 != 78)
        {
          goto LABEL_14;
        }
        goto LABEL_240;
      }
      if ((_DWORD)v14 == 2 && *v149 == 45)
      {
LABEL_45:
        if (v40 == 48)
        {
          v41 = -0.0;
          goto LABEL_63;
        }
        if ((v40 - 48) <= 9)
        {
          v41 = (double)(48 - v40);
          goto LABEL_63;
        }
        goto LABEL_259;
      }
LABEL_240:
      v136 = 0;
      v137 = *(int **)(a3 + 8);
      while (1)
      {
        v138 = v149[v136];
        if ((v138 - 9) >= 5 && v138 != 32 && v138 != 160)
          break;
        v137 = (int *)((char *)v137 + 1);
        if (v14 == ++v136)
        {
          v41 = 0.0;
          goto LABEL_63;
        }
      }
      v139 = v14 - v136;
      __dst = v137;
      v151 = v14 - v136;
      if (v14 - v136 >= 3 && v138 == 48)
      {
        v141 = (unint64_t)&v149[v136];
        v147 = v149[v136 + 1] & 0xDF;
        if (v147 == 66)
          goto LABEL_307;
        if (v147 == 88)
        {
          v148 = v149[v136 + 2];
          if ((v148 - 48) < 0xA || (v148 | 0x20u) - 97 <= 5)
          {
            JSC::jsHexIntegerLiteral<unsigned char>((unint64_t *)&__dst);
            goto LABEL_300;
          }
          goto LABEL_311;
        }
        if (v147 != 79 || (v149[v136 + 2] & 0xF8) != 0x30)
        {
LABEL_311:
          JSC::jsStrDecimalLiteral<unsigned char>((unsigned __int8 **)&__dst);
          goto LABEL_300;
        }
        JSC::jsOctalIntegerLiteral<unsigned char>((unint64_t *)&__dst);
LABEL_300:
        v142 = v151;
        goto LABEL_252;
      }
      *(_QWORD *)__s = 0;
      v140 = fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v137, (unsigned __int8 *)v137 + v14 - v136, (unint64_t *)__s, 0x2E00000005);
      v141 = v140 - (unsigned __int8 *)v137;
      if (v140 != (unsigned __int8 *)v137)
      {
        if (v139 >= v141)
        {
          v41 = *(double *)__s;
          v142 = v108 + (char *)v137 - (char *)v140 - v136;
LABEL_251:
          __dst = (int *)&v149[v141 + v136];
          v151 = v142;
LABEL_252:
          if (!v142)
            goto LABEL_63;
          v143 = __dst;
          while (1)
          {
            v144 = *(unsigned __int8 *)v143;
            if ((v144 - 9) >= 5 && v144 != 32 && v144 != 160)
              break;
            v143 = (int *)((char *)v143 + 1);
            if (!--v142)
              goto LABEL_63;
          }
LABEL_259:
          v41 = NAN;
LABEL_63:
          v43 = (*(_QWORD *)&v41 >> 52) & 0x7FFLL;
          if ((_DWORD)v43 == 2047)
          {
            if ((*(_QWORD *)&v41 & 0xFFFFFFFFFFFFFLL) != 0)
            {
              qmemcpy(__s, "NaN", 3);
              v44 = &__s[3];
            }
            else
            {
              v72 = __s;
              if ((*(_QWORD *)&v41 & 0x8000000000000000) != 0)
              {
                __s[0] = 45;
                v72 = &__s[1];
              }
              *(_QWORD *)v72 = 0x7974696E69666E49;
              v44 = v72 + 8;
            }
            goto LABEL_70;
          }
          v45 = *(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFLL;
          if ((*(_QWORD *)&v41 & 0x8000000000000000) != 0 && v45)
          {
            __s[0] = 45;
            v46 = &__s[1];
          }
          else
          {
            v46 = __s;
            if (!v45)
            {
              v44 = &__s[1];
              __s[0] = 48;
              goto LABEL_70;
            }
          }
          v47 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v41 & 0x800FFFFFFFFFFFFFLL, v43);
          v44 = WTF::dragonbox::detail::to_shortest(v47, v48, (uint64_t)v46, v49);
LABEL_70:
          *v44 = 0;
          v50 = strlen(__s);
          memcpy(&__dst, __s, v50);
          *((_BYTE *)&__dst + v50) = 0;
          v51 = *(unsigned int *)(a3 + 4);
          v52 = *(unsigned __int8 **)(a3 + 8);
          if ((*(_BYTE *)(a3 + 16) & 4) != 0)
          {
            if ((_DWORD)v51)
            {
              p_dst = &__dst;
              v58 = *(unsigned int *)(a3 + 4);
              do
              {
                v60 = *(unsigned __int8 *)p_dst;
                p_dst = (int **)((char *)p_dst + 1);
                v59 = v60;
                if (!v60 || *v52 != v59)
                  goto LABEL_14;
                ++v52;
              }
              while (--v58);
            }
          }
          else if ((_DWORD)v51)
          {
            v53 = &__dst;
            v54 = *(unsigned int *)(a3 + 4);
            do
            {
              v56 = *(unsigned __int8 *)v53;
              v53 = (int **)((char *)v53 + 1);
              v55 = v56;
              if (!v56 || *(unsigned __int16 *)v52 != v55)
                goto LABEL_14;
              v52 += 2;
            }
            while (--v54);
          }
          if (!*((_BYTE *)&__dst + v51))
            return 0;
LABEL_14:
          v21 = *(JSC::VM **)(a2 + 56);
          if (!(a3 >> 4))
            goto LABEL_111;
          v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
          if (((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
            goto LABEL_111;
          v23 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
          if (!v23)
          {
            v42 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
            if (!v42 || *(_BYTE *)(v42 + 5) != 1 && *(_DWORD *)(v42 + 80) < 2u)
              goto LABEL_111;
            JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (!v23)
              goto LABEL_111;
          }
          if (!*(_DWORD *)(v23 + 24))
            goto LABEL_111;
          v24 = *(_QWORD *)(v23 + 16);
          v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
          v26 = *(unsigned int *)(v23 + 8);
          v27 = *(_DWORD *)(a3 + 16);
          if ((v24 & 1) != 0)
          {
            if ((v27 & 0x20) != 0)
              v27 = *(_DWORD *)(a3 + 32);
            v28 = *(_DWORD *)(v23 + 12);
            v29 = (v27 >> 8) & *(_QWORD *)&v28;
            v30 = *(unsigned __int8 *)(v25 + v29);
            if (!*(_BYTE *)(v25 + v29))
              goto LABEL_111;
            v31 = v25 + v26;
            v32 = 1;
            while (1)
            {
              v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
              if (a3 == (v33 & 0xFFFFFFFFFFFFLL))
                break;
              v29 = ((_DWORD)v29 + v32) & v28;
              v30 = *(unsigned __int8 *)(v25 + v29);
              ++v32;
              if (!*(_BYTE *)(v25 + v29))
                goto LABEL_111;
            }
            a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
          }
          else
          {
            if ((v27 & 0x20) != 0)
              v27 = *(_DWORD *)(a3 + 32);
            v66 = *(_DWORD *)(v23 + 12);
            v67 = v66 & (v27 >> 8);
            v68 = *(_DWORD *)(v25 + 4 * v67);
            if (!v68)
              goto LABEL_111;
            v69 = v25 + 4 * v26;
            v70 = 1;
            while (1)
            {
              v71 = (v68 - 1);
              if (*(_QWORD *)(v69 + 16 * v71) == a3)
                break;
              v67 = (v67 + v70) & v66;
              v68 = *(_DWORD *)(v25 + 4 * v67);
              ++v70;
              if (!v68)
                goto LABEL_111;
            }
            a6 = *(unsigned int *)(v69 + 16 * v71 + 8) | ((unint64_t)*(unsigned __int8 *)(v69 + 16 * v71 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            if ((int)a6 <= 63)
            {
              v61 = a1 + 16;
              v62 = a6 << 32;
            }
            else
            {
              v61 = *(_QWORD *)(a1 + 8) - 8;
              v62 = 0x3F00000000 - (a6 << 32);
            }
            v63 = *(_QWORD *)(v61 + (v62 >> 29));
            if ((v63 & 0xFFFE000000000002) != 0)
            {
LABEL_91:
              *(_QWORD *)a4 = v63;
              *(_QWORD *)(a4 + 32) = a1;
              *(_DWORD *)(a4 + 16) = HIDWORD(a6);
              *(_DWORD *)(a4 + 20) = a6;
              v65 = 1;
              *(_WORD *)(a4 + 48) = 257;
              return v65;
            }
            v64 = *(unsigned __int8 *)(v63 + 5);
            if (v64 != 5)
            {
              if (v64 == 6)
              {
                v86 = *(_DWORD *)(v22 + 16) & 3;
                v88 = *(_QWORD *)(v63 + 8);
                v87 = *(_QWORD *)(v63 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v63 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v90 = *(_QWORD *)(v63 + 24);
                  v89 = *(_QWORD *)(v63 + 32);
                  *(_QWORD *)a4 = v88;
                  *(_QWORD *)(a4 + 8) = v87;
                  *(_DWORD *)(a4 + 16) = HIDWORD(a6);
                  *(_QWORD *)(a4 + 32) = a1;
                  *(_BYTE *)(a4 + 49) = 3;
                  v65 = 1;
                  if (v86 != 2)
                    *(_BYTE *)(a4 + 48) = 1;
                  *(_BYTE *)(a4 + 51) = 1;
                  *(_QWORD *)(a4 + 72) = v90;
                  *(_QWORD *)(a4 + 80) = v89;
                }
                else
                {
                  *(_QWORD *)a4 = v88;
                  *(_QWORD *)(a4 + 8) = v87;
                  *(_DWORD *)(a4 + 16) = HIDWORD(a6);
                  *(_QWORD *)(a4 + 32) = a1;
                  v65 = 1;
                  *(_BYTE *)(a4 + 49) = 3;
                  if (v86 != 2)
                    *(_BYTE *)(a4 + 48) = 1;
                }
                return v65;
              }
              goto LABEL_91;
            }
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v21, a4, v63, SHIDWORD(a6), a6);
            return 1;
          }
LABEL_111:
          if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v21, a3, a4) & 1) != 0)
          {
            return 1;
          }
          v73 = *(_DWORD *)(a3 + 16);
          if ((v73 & 0x20) != 0)
            return 0;
          v74 = *(_WORD **)(a3 + 8);
          v75 = *(unsigned int *)(a3 + 4);
          if ((v73 & 4) == 0)
          {
            if ((_DWORD)v75)
            {
              v76 = (unsigned __int16)*v74 - 48;
              if (v76 <= 9 && (*v74 != 48 || v75 <= 1))
              {
                v81 = v74 + 1;
                v82 = v75 - 1;
                while (v82)
                {
                  if (v76 > 0x19999999)
                    goto LABEL_116;
                  v83 = *v81 - 48;
                  if (v83 > 9)
                    goto LABEL_116;
                  v77 = 0;
                  LODWORD(v75) = 0;
                  v78 = 0;
                  v39 = __CFADD__(v83, 10 * v76);
                  v76 = v83 + 10 * v76;
                  ++v81;
                  --v82;
                  if (v39)
                    goto LABEL_118;
                }
                v77 = 0x100000000;
                if (v76 == -1)
                {
                  v77 = 0;
                  LODWORD(v75) = 0;
                }
                else
                {
                  LODWORD(v75) = v76;
                }
                if (v76 == -1)
                  v78 = 0;
                else
                  v78 = v76 & 0xFFFFFF00;
                goto LABEL_118;
              }
LABEL_116:
              v77 = 0;
              LODWORD(v75) = 0;
            }
            else
            {
              v77 = 0;
            }
            v78 = 0;
LABEL_118:
            v79 = v78 | v75;
            goto LABEL_119;
          }
          if ((_DWORD)v75)
          {
            v120 = *(unsigned __int8 *)v74 - 48;
            if (v120 <= 9 && (v75 < 2 || *(_BYTE *)v74 != 48))
            {
              v133 = v75 - 1;
              v134 = (unsigned __int8 *)v74 + 1;
              while (v133)
              {
                if (v120 > 0x19999999)
                  goto LABEL_195;
                v135 = *v134 - 48;
                if (v135 > 9)
                  goto LABEL_195;
                LODWORD(v75) = 0;
                v121 = 0;
                v77 = 0;
                v39 = __CFADD__(v135, 10 * v120);
                v120 = v135 + 10 * v120;
                --v133;
                ++v134;
                if (v39)
                  goto LABEL_197;
              }
              if (v120 == -1)
                LODWORD(v75) = 0;
              else
                LODWORD(v75) = v120 & 0xFFFFFF00;
              if (v120 == -1)
                v121 = 0;
              else
                v121 = v120;
              if (v120 == -1)
                v77 = 0;
              else
                v77 = 0x100000000;
              goto LABEL_197;
            }
LABEL_195:
            LODWORD(v75) = 0;
          }
          v121 = 0;
          v77 = 0;
LABEL_197:
          v79 = v121 | v75;
LABEL_119:
          if ((v77 & 0x100000000) != 0)
          {
            if (v79 == -1)
            {
              v111 = *(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x68);
              JSC::Identifier::from(*(uint64_t ***)(a2 + 56), 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &__dst);
              v65 = v111(a1, a2, __dst, a4);
              v119 = (WTF::StringImpl *)__dst;
              __dst = 0;
              if (v119)
              {
                if (*(_DWORD *)v119 == 2)
                {
                  WTF::StringImpl::~StringImpl(v119, v112, v113, v114, v115, v116, v117, v118);
                  WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
                }
                else
                {
                  *(_DWORD *)v119 -= 2;
                }
              }
              return v65;
            }
            v65 = 0;
            switch(*(_BYTE *)(a1 + 4) & 0xF)
            {
              case 0:
              case 1:
              case 3:
                return v65;
              case 4:
              case 5:
              case 8:
              case 9:
                v84 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v84 - 4) > v79)
                {
                  v85 = *(_QWORD *)(v84 + 8 * v79);
                  if (v85)
                    goto LABEL_140;
                }
                return 0;
              case 6:
              case 7:
                v106 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(v106 - 4) <= v79)
                  return 0;
                v85 = *(_QWORD *)(v106 + 8 * v79) + 0x2000000000000;
                goto LABEL_140;
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
                v91 = *(_QWORD **)(a1 + 8);
                if (*((_DWORD *)v91 - 2) <= v79)
                  return 0;
                if (*((_DWORD *)v91 - 1) > v79)
                {
                  v85 = v91[v79 + 2];
                  if (v85)
                  {
LABEL_140:
                    *(_QWORD *)a4 = v85;
                    *(_DWORD *)(a4 + 16) = 0;
                    *(_QWORD *)(a4 + 32) = a1;
                    v65 = 1;
                    *(_BYTE *)(a4 + 49) = 1;
                    return v65;
                  }
                  return 0;
                }
                v92 = *v91;
                if (!v92)
                  return 0;
                v93 = *(_QWORD *)(v92 + 8);
                if (!v93)
                  return 0;
                v94 = v79;
                v95 = *(_DWORD *)(v93 - 8);
                v96 = (~(v94 << 32) + v94) ^ ((unint64_t)(~(v94 << 32) + v94) >> 22);
                v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
                v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
                v99 = v95 & ((v98 >> 31) ^ v98);
                v100 = (uint64_t *)(v93 + 24 * v99);
                v101 = *v100;
                if (*v100 == v94)
                  goto LABEL_159;
                v102 = 1;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198AC3330);
            }
            while (v101 != -1)
            {
              v99 = (v99 + v102) & v95;
              v100 = (uint64_t *)(v93 + 24 * v99);
              v101 = *v100;
              ++v102;
              if (*v100 == v94)
                goto LABEL_159;
            }
            v100 = (uint64_t *)(v93 + 24 * *(unsigned int *)(v93 - 4));
LABEL_159:
            if (v100 == (uint64_t *)(v93 + 24 * *(unsigned int *)(v93 - 4)))
              return 0;
            v103 = v100[1];
            if ((v103 & 0xFFFE000000000002) != 0)
            {
              v104 = 1;
            }
            else if (*(_BYTE *)(v103 + 5) == 5)
            {
              v104 = 2;
            }
            else
            {
              v104 = 1;
            }
            v105 = *((_DWORD *)v100 + 4);
            *(_QWORD *)a4 = v103;
            *(_DWORD *)(a4 + 16) = v105;
            *(_QWORD *)(a4 + 32) = a1;
            *(_BYTE *)(a4 + 49) = v104;
            return 1;
          }
          return 0;
        }
        __break(1u);
LABEL_307:
        if ((*(_BYTE *)(v141 + 2) & 0xFE) == 0x30)
        {
          JSC::jsBinaryIntegerLiteral<unsigned char>((unint64_t *)&__dst);
          goto LABEL_300;
        }
        goto LABEL_311;
      }
      v145 = v149[v136];
      if (v145 == 43)
      {
        v142 = v139 - 9;
        if (v139 - 9 <= 0xFFFFFFFFFFFFFFF7
          && v149[v136 + 1] == 73
          && v149[v136 + 2] == 110
          && v149[v136 + 3] == 102
          && v149[v136 + 4] == 105
          && v149[v136 + 5] == 110
          && v149[v136 + 6] == 105
          && v149[v136 + 7] == 116
          && v149[v136 + 8] == 121)
        {
          v146 = 0x7FF0000000000000;
          goto LABEL_298;
        }
      }
      else
      {
        if (v145 != 45)
        {
          if (v145 == 73)
          {
            v142 = v139 - 8;
            if (v139 >= 8
              && v149[v136 + 1] == 110
              && v149[v136 + 2] == 102
              && v149[v136 + 3] == 105
              && v149[v136 + 4] == 110
              && v149[v136 + 5] == 105
              && v149[v136 + 6] == 116
              && v149[v136 + 7] == 121)
            {
              v41 = INFINITY;
              v141 = 8;
              goto LABEL_251;
            }
          }
          goto LABEL_299;
        }
        v142 = v139 - 9;
        if (v139 - 9 <= 0xFFFFFFFFFFFFFFF7
          && v149[v136 + 1] == 73
          && v149[v136 + 2] == 110
          && v149[v136 + 3] == 102
          && v149[v136 + 4] == 105
          && v149[v136 + 5] == 110
          && v149[v136 + 6] == 105
          && v149[v136 + 7] == 116
          && v149[v136 + 8] == 121)
        {
          v146 = 0xFFF0000000000000;
LABEL_298:
          v41 = *(double *)&v146;
          v141 = 9;
          goto LABEL_251;
        }
      }
LABEL_299:
      v41 = NAN;
      goto LABEL_300;
    }
    return JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v17, a4);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
      return 0;
    return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24);
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v8 + 64) && (v12 = *(_QWORD *)(v8 + 32)) != 0)
    v9 = *(_QWORD *)(v12 + 32);
  else
    v9 = *(_QWORD *)(v8 + 48);
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  if (v11 + v10 > v9)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = v9 - v10;
LABEL_8:
    if (v5 > a3)
      goto LABEL_9;
    return 0;
  }
  if (v11 <= a3)
    return 0;
LABEL_9:
  v6 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v6 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)a4 = *(unsigned __int8 *)(v6 + a3) | 0xFFFE000000000000;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  size_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  const char **v72;
  uint64_t v73;
  int v74;
  int v75;
  const char **p_dst;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  JSC::VM *v84;
  unsigned int v85;
  const char *__dst;
  uint64_t v87;
  char __s[8];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v84 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v59 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v59 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v59 == 45)
      {
        v59 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v59 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v59 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v61 = (v60 >> 52) & 0x7FF;
        if ((_DWORD)v61 == 2047)
        {
          if ((v60 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v62 = &__s[3];
          }
          else
          {
            v68 = __s;
            if ((v60 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v68 = &__s[1];
            }
            *(_QWORD *)v68 = 0x7974696E69666E49;
            v62 = v68 + 8;
          }
          goto LABEL_104;
        }
        v63 = v60 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v60 & 0x8000000000000000) != 0 && v63)
        {
          __s[0] = 45;
          v64 = &__s[1];
        }
        else
        {
          v64 = __s;
          if (!v63)
          {
            v62 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v65 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v60 & 0x800FFFFFFFFFFFFFLL, v61);
        v62 = WTF::dragonbox::detail::to_shortest(v65, v66, (uint64_t)v64, v67);
LABEL_104:
        *v62 = 0;
        v69 = strlen(__s);
        memcpy(&__dst, __s, v69);
        *((_BYTE *)&__dst + v69) = 0;
        v70 = *(unsigned int *)(a3 + 4);
        v71 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v70)
          {
            p_dst = &__dst;
            v77 = *(unsigned int *)(a3 + 4);
            do
            {
              v79 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v78 = v79;
              if (!v79 || *v71 != v78)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v71;
            }
            while (--v77);
          }
        }
        else if ((_DWORD)v70)
        {
          v72 = &__dst;
          v73 = *(unsigned int *)(a3 + 4);
          do
          {
            v75 = *(unsigned __int8 *)v72;
            v72 = (const char **)((char *)v72 + 1);
            v74 = v75;
            if (!v75 || *(unsigned __int16 *)v71 != v74)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v71 += 2;
          }
          while (--v73);
        }
        if (!*((_BYTE *)&__dst + v70))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v59 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v59 == 45)
      {
        v59 = v15[1];
LABEL_81:
        if ((v59 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v59 - 48) < 0xA || (_DWORD)v16 == 8 && v59 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v59 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v56 = *(unsigned __int8 *)v15 - 48, v56 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v80 = v16 - 1;
    v81 = (unsigned __int8 *)v15 + 1;
    while (v80)
    {
      if (v56 > 0x19999999)
        goto LABEL_72;
      v82 = *v81 - 48;
      if (v82 > 9)
        goto LABEL_72;
      v26 = 0;
      v57 = 0;
      v58 = 0;
      v25 = __CFADD__(v82, 10 * v56);
      v56 = v82 + 10 * v56;
      --v80;
      ++v81;
      if (v25)
        goto LABEL_73;
    }
    if (v56 == -1)
      v26 = 0;
    else
      v26 = v56 & 0xFFFFFF00;
    if (v56 == -1)
      v57 = 0;
    else
      v57 = v56;
    if (v56 == -1)
      v58 = 0;
    else
      v58 = 0x100000000;
  }
LABEL_73:
  v20 = v57;
  if ((v58 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v84, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v32 = *(_QWORD *)(a1 + 24);
    goto LABEL_34;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v36 + 64) && (v83 = *(_QWORD *)(v36 + 32)) != 0)
    v37 = *(_QWORD *)(v83 + 32);
  else
    v37 = *(_QWORD *)(v36 + 48);
  v39 = *(_QWORD *)(a1 + 24);
  v38 = *(_QWORD *)(a1 + 32);
  if (v39 + v38 > v37)
    goto LABEL_60;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v32 = v37 - v38;
LABEL_34:
    if (v32 > v31)
      goto LABEL_35;
LABEL_60:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v87 = 71;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC4404);
    }
    goto LABEL_62;
  }
  if (v39 <= v31)
    goto LABEL_60;
LABEL_35:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v87 = 66;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC3F30);
    }
LABEL_62:
    JSC::throwTypeError((unint64_t)a2, &v84, (WTF::StringImpl **)__s);
    v47 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    return 0;
  }
  v33 = *(_DWORD *)(a4 + 28);
  if ((v33 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v87 = 74;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC3FACLL);
    }
    goto LABEL_62;
  }
  if ((v33 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v87 = 72;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC3FE4);
    }
    goto LABEL_62;
  }
  if ((v33 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v87 = 70;
    v85 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v85, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC401CLL);
    }
    goto LABEL_62;
  }
  v34 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex(a1, a2, v31, v34, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    v22 = *v16;
    if ((v22 & 0xC0) != 0x40)
      break;
    v23 = __ldxr(v16);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xBF, v16))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
LABEL_19:
  if (v20 == 16)
  {
    if (v19)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v19, v10, v11, v12, v13, v14, v15);
  }
  else if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v21;
      v24 = *(_QWORD *)(a2 + 160);
      v25 = __CFADD__(v24, v21);
      v26 = v24 + v21;
      if (v25)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v26;
    }
  }
  else if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC46B0);
  }
}

void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198AC487CLL);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC480CLL);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getUint8ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedUint8ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint8Adaptor>::s_info;
}

JSC::Exception *JSC::callUint8Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Uint8Array", 11);
}

uint64_t JSC::constructUint8Array(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t (*v27)(JSC::JSObject **);
  JSC::JSObject **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(JSC::JSObject **);
  JSC::JSObject **v40;
  JSC::JSObject *v41;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v43;
  uint64_t v44;
  JSC::JSObject *v45;
  uint64_t *v46;
  JSC::VM **v47;

  v10 = (JSC *)this;
  v11 = *(JSC::JSObject **)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  v43 = v12;
  v44 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      v30 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)2>(this);
    }
    else
    {
      v45 = v11;
      v46 = &v44;
      v47 = (JSC::VM **)&v43;
      v30 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v45, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v38 = v30;
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v31, v32, v33, v34, v35, v36, v37))
      return 0;
    return JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create((JSC::JSGlobalObject *)v44, v38, 0, v33, v34, v35, v36, v37);
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 < 2)
    {
      v16 = 0;
    }
    else
    {
      v45 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v45, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v43 == v17)
      {
        v29 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)2>(v44);
      }
      else
      {
        v45 = v11;
        v46 = &v44;
        v47 = (JSC::VM **)&v43;
        v29 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v45, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v43 == v17)
    {
      v18 = *(_QWORD *)(v44 + 1688);
      if ((v18 & 1) == 0)
      {
LABEL_10:
        if (*((_DWORD *)v11 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          return 0;
        }
        if (v14 < 3 || (v45 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v45 == (JSC::JSObject *)10))
        {
          v24 = 0;
          v25 = 0;
        }
        else
        {
          v24 = JSC::JSValue::toTypedArrayIndex(&v45, (JSC::JSGlobalObject *)v44, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v19, v20, v21, v22, v23, a7, a8))
            return 0;
          v25 = 1;
        }
        return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>((JSC::VM **)v44, v18, v15, v16, v24, v25, a7, a8, (__n128)a9);
      }
      v27 = *(uint64_t (**)(JSC::JSObject **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v28 = (JSC::JSObject **)(v44 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v44 & 8) != 0)
        v28 = (JSC::JSObject **)(v44 - 16);
      v45 = *v28;
      v46 = (uint64_t *)v44;
      v47 = (JSC::VM **)(v44 + 1688);
      v29 = v27(&v45);
    }
    else
    {
      v45 = v11;
      v46 = &v44;
      v47 = (JSC::VM **)&v43;
      v29 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v45, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v29;
    goto LABEL_10;
  }
  if (v12 != *((_QWORD *)a2 + 3))
  {
    v45 = v11;
    v46 = &v44;
    v47 = (JSC::VM **)&v43;
    v41 = JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v45, this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_44:
    v18 = (uint64_t)v41;
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(this + 1688);
  if ((v18 & 1) != 0)
  {
    v39 = *(uint64_t (**)(JSC::JSObject **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v40 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v40 = (JSC::JSObject **)(this - 16);
    v45 = *v40;
    v46 = (uint64_t *)this;
    v47 = (JSC::VM **)(this + 1688);
    v41 = (JSC::JSObject *)v39(&v45);
    goto LABEL_44;
  }
LABEL_21:
  if (!*((_DWORD *)v11 + 20))
  {
    v24 = 0;
    v25 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>((JSC::VM **)v44, v18, v15, v16, v24, v25, a7, a8, (__n128)a9);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v24 = 0;
  v25 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>((JSC::VM **)v44, v18, v15, v16, v24, v25, a7, a8, (__n128)a9);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex((JSC::JSArrayBufferView *)a1, a2, v20 | v26, a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(__dst, __s, v41);
  __dst[v41] = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = __dst;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *v48++;
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = __dst;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *v44++;
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!__dst[v42])
  {
LABEL_74:
    JSC::toNativeFromValue<JSC::Uint8ClampedAdaptor>(a2, a4, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::putByIndex(JSC::JSArrayBufferView *a1, JSC::JSGlobalObject *a2, unsigned int a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v27;
  unsigned __int8 v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v56[31];

  *(_QWORD *)&v56[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v27 = *v13 - 48, v27 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_34:
      v24 = 0;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v51 = v14 - 1;
      v52 = v13 + 1;
      while (v51)
      {
        if (v27 > 0x19999999)
          goto LABEL_34;
        v53 = *v52 - 48;
        if (v53 > 9)
          goto LABEL_34;
        v24 = 0;
        v28 = 0;
        v29 = 0;
        v23 = __CFADD__(v53, 10 * v27);
        v27 = v53 + 10 * v27;
        --v51;
        ++v52;
        if (v23)
          goto LABEL_35;
      }
      if (v27 == -1)
        v24 = 0;
      else
        v24 = v27 & 0xFFFFFF00;
      if (v27 == -1)
        v28 = 0;
      else
        v28 = v27;
      if (v27 == -1)
        v29 = 0;
      else
        v29 = 0x100000000;
    }
LABEL_35:
    v18 = v28;
    if ((v29 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return !JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, v18 | v24);
      v25 = *(_QWORD *)(a1 + 16);
      if (v25)
      {
        if (!qword_1ECF4C038
          || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
          || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
        {
          return !JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, v18 | v24);
        }
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v30 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_39;
    if (v30 == 45)
    {
      v30 = *((unsigned __int16 *)v13 + 1);
LABEL_43:
      if ((v30 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_54;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_53;
    }
    if ((v30 - 48) < 0xA || (_DWORD)v14 == 8 && v30 == 73)
      goto LABEL_54;
    goto LABEL_49;
  }
  v30 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_39:
    if ((v30 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v30 == 45)
  {
    v30 = v13[1];
    goto LABEL_43;
  }
  if ((v30 - 48) < 0xA)
    goto LABEL_54;
  if ((_DWORD)v14 != 8)
  {
LABEL_49:
    if ((_DWORD)v14 != 3 || v30 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_54;
  }
LABEL_53:
  if (v30 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_54:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v32 = (v31 >> 52) & 0x7FF;
  if ((_DWORD)v32 != 2047)
  {
    v34 = v31 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v31 & 0x8000000000000000) != 0 && v34)
    {
      __s[0] = 45;
      v35 = &__s[1];
    }
    else
    {
      v35 = __s;
      if (!v34)
      {
        v33 = &__s[1];
        __s[0] = 48;
        goto LABEL_66;
      }
    }
    v36 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v31 & 0x800FFFFFFFFFFFFFLL, v32);
    v33 = WTF::dragonbox::detail::to_shortest(v36, v37, (uint64_t)v35, v38);
    goto LABEL_66;
  }
  if ((v31 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v33 = v56;
  }
  else
  {
    v39 = __s;
    if ((v31 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v39 = &__s[1];
    }
    *(_QWORD *)v39 = 0x7974696E69666E49;
    v33 = v39 + 8;
  }
LABEL_66:
  *v33 = 0;
  v40 = strlen(__s);
  memcpy(__dst, __s, v40);
  __dst[v40] = 0;
  v41 = *(unsigned int *)(a3 + 4);
  v42 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v41)
    {
      v47 = __dst;
      v48 = *(unsigned int *)(a3 + 4);
      do
      {
        v50 = *v47++;
        v49 = v50;
        if (!v50 || *v42 != v49)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v42;
      }
      while (--v48);
    }
  }
  else if ((_DWORD)v41)
  {
    v43 = __dst;
    v44 = *(unsigned int *)(a3 + 4);
    do
    {
      v46 = *v43++;
      v45 = v46;
      if (!v46 || *(unsigned __int16 *)v42 != v45)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v42 += 2;
    }
    while (--v44);
  }
  if (__dst[v41])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 40) & 8) == 0)
    return !JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, a3);
  v3 = *(_QWORD *)(a1 + 16);
  return !v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
      || !JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, a3);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t result;
  BOOL v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  double v27;
  const unsigned __int8 *v28;
  JSC::VM *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  _WORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  const WTF::StringImpl *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62[17];

  v62[16] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_33;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v52 = *v13 - 48, v52 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_105:
      v19 = 0;
      v53 = 0;
      v16 = 0;
    }
    else
    {
      v56 = v14 - 1;
      v57 = v13 + 1;
      while (v56)
      {
        if (v52 > 0x19999999)
          goto LABEL_105;
        v58 = *v57 - 48;
        if (v58 > 9)
          goto LABEL_105;
        v19 = 0;
        v53 = 0;
        v16 = 0;
        v26 = __CFADD__(v58, 10 * v52);
        v52 = v58 + 10 * v52;
        --v56;
        ++v57;
        if (v26)
          goto LABEL_106;
      }
      if (v52 == -1)
        v19 = 0;
      else
        v19 = v52 & 0xFFFFFF00;
      if (v52 == -1)
        v53 = 0;
      else
        v53 = v52;
      if (v52 == -1)
        v16 = 0;
      else
        v16 = 0x100000000;
    }
LABEL_106:
    v18 = v53;
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v22 = v14 > 1) : (v22 = 0), v22))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v23 = (unsigned __int16 *)(v13 + 2);
      v24 = v14 - 1;
      while (v24)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v25 = *v23 - 48;
        if (v25 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v26 = __CFADD__(v25, 10 * v15);
        v15 = v25 + 10 * v15;
        ++v23;
        --v24;
        if (v26)
          goto LABEL_7;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_7:
    v19 = v17;
  }
  if ((v16 & 0x100000000) != 0)
    return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v19, a4);
  if (!(_DWORD)v14)
    goto LABEL_33;
  if ((v12 & 4) == 0)
  {
    v20 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_12;
    if (v20 == 45)
    {
      v20 = *((unsigned __int16 *)v13 + 1);
LABEL_17:
      if ((v20 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_32;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_33;
LABEL_60:
      if (v20 != 73)
        goto LABEL_33;
      goto LABEL_32;
    }
    if ((v20 - 48) >= 0xA && ((_DWORD)v14 != 8 || v20 != 73))
    {
LABEL_64:
      if ((_DWORD)v14 != 3 || v20 != 78)
        goto LABEL_33;
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  v20 = *v13;
  if ((_DWORD)v14 != 1)
  {
    if (v20 == 45)
    {
      v20 = v13[1];
      goto LABEL_17;
    }
    if ((v20 - 48) >= 0xA)
    {
      if ((_DWORD)v14 == 8)
        goto LABEL_60;
      goto LABEL_64;
    }
LABEL_32:
    JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
    WTF::numberToString(v62, v27);
    if (WTF::equal(a3, (unint64_t)v62, v28))
      return 0;
    goto LABEL_33;
  }
LABEL_12:
  if ((v20 - 48) < 0xA)
    return 0;
LABEL_33:
  v29 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4)
    || (v30 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v30 + 0x20)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v31)|| (v62[0] = a3, v32 = JSC::PropertyTable::get(v31, v62), a6 = v32, (_DWORD)v32 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v29, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v37 = *(_DWORD *)(a3 + 16);
    if ((v37 & 0x20) != 0)
      return 0;
    v38 = *(_WORD **)(a3 + 8);
    v39 = *(unsigned int *)(a3 + 4);
    if ((v37 & 4) == 0)
    {
      if ((_DWORD)v39)
      {
        v40 = (unsigned __int16)*v38 - 48;
        if (v40 <= 9 && (*v38 != 48 || v39 <= 1))
        {
          v44 = v38 + 1;
          v45 = v39 - 1;
          while (v45)
          {
            if (v40 > 0x19999999)
              goto LABEL_48;
            v46 = *v44 - 48;
            if (v46 > 9)
              goto LABEL_48;
            v41 = 0;
            LODWORD(v39) = 0;
            v42 = 0;
            v26 = __CFADD__(v46, 10 * v40);
            v40 = v46 + 10 * v40;
            ++v44;
            --v45;
            if (v26)
              goto LABEL_50;
          }
          v41 = 0x100000000;
          if (v40 == -1)
          {
            v41 = 0;
            LODWORD(v39) = 0;
          }
          else
          {
            LODWORD(v39) = v40;
          }
          if (v40 == -1)
            v42 = 0;
          else
            v42 = v40 & 0xFFFFFF00;
          goto LABEL_50;
        }
LABEL_48:
        v41 = 0;
        LODWORD(v39) = 0;
      }
      else
      {
        v41 = 0;
      }
      v42 = 0;
LABEL_50:
      v43 = (const WTF::StringImpl *)(v42 | v39);
      goto LABEL_51;
    }
    if ((_DWORD)v39)
    {
      v54 = *(unsigned __int8 *)v38 - 48;
      if (v54 <= 9 && (v39 < 2 || *(_BYTE *)v38 != 48))
      {
        v59 = v39 - 1;
        v60 = (unsigned __int8 *)v38 + 1;
        while (v59)
        {
          if (v54 > 0x19999999)
            goto LABEL_109;
          v61 = *v60 - 48;
          if (v61 > 9)
            goto LABEL_109;
          LODWORD(v39) = 0;
          v55 = 0;
          v41 = 0;
          v26 = __CFADD__(v61, 10 * v54);
          v54 = v61 + 10 * v54;
          --v59;
          ++v60;
          if (v26)
            goto LABEL_111;
        }
        if (v54 == -1)
          LODWORD(v39) = 0;
        else
          LODWORD(v39) = v54 & 0xFFFFFF00;
        if (v54 == -1)
          v55 = 0;
        else
          v55 = v54;
        if (v54 == -1)
          v41 = 0;
        else
          v41 = 0x100000000;
        goto LABEL_111;
      }
LABEL_109:
      LODWORD(v39) = 0;
    }
    v55 = 0;
    v41 = 0;
LABEL_111:
    v43 = (const WTF::StringImpl *)(v55 | v39);
LABEL_51:
    if ((v41 & 0x100000000) != 0)
      return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v43, a4, a5, a6, a7, a8);
    return 0;
  }
  if ((int)v32 <= 63)
  {
    v33 = a1 + 16;
    v34 = v32 << 32;
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 8) - 8;
    v34 = 0x3F00000000 - (v32 << 32);
  }
  v35 = *(_QWORD *)(v33 + (v34 >> 29));
  if ((v35 & 0xFFFE000000000002) != 0)
    goto LABEL_42;
  v36 = *(unsigned __int8 *)(v35 + 5);
  if (v36 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v29, a4, v35, SHIDWORD(v32), v32);
    return 1;
  }
  if (v36 != 6)
  {
LABEL_42:
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v32);
    *(_DWORD *)(a4 + 20) = v32;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v47 = *(_DWORD *)(v30 + 16) & 3;
  v49 = *(_QWORD *)(v35 + 8);
  v48 = *(_QWORD *)(v35 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
  {
    v51 = *(_QWORD *)(v35 + 24);
    v50 = *(_QWORD *)(v35 + 32);
    *(_QWORD *)a4 = v49;
    *(_QWORD *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = HIDWORD(v32);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v47 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v51;
    *(_QWORD *)(a4 + 80) = v50;
  }
  else
  {
    *(_QWORD *)a4 = v49;
    *(_QWORD *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = HIDWORD(v32);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v47 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  v8 = a3;
  result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, a3);
  if (result)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v9 = (v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)a4 = *(unsigned __int8 *)(v9 + v8) | 0xFFFE000000000000;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  JSC::VM *v82;
  unsigned int v83;
  const char *__dst;
  uint64_t v85;
  char __s[8];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v82 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_65:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_68:
        if ((v58 - 48) < 0xA)
          goto LABEL_109;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_72;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_83;
      if ((_DWORD)v16 == 8)
      {
LABEL_82:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_83:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_95;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_95;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_95:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_109;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_68;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_72:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_109:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_111;
            }
            return 0;
          }
          goto LABEL_83;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_82;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_83;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_83;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_63:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_63;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_63;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_64;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_64:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_65;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_111:
        JSC::throwTypeError(v29, &v82, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, v31))
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v85 = 71;
    v83 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v83, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC661CLL);
    }
    goto LABEL_39;
  }
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v85 = 66;
    v83 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v83, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC6190);
    }
LABEL_39:
    JSC::throwTypeError((unint64_t)a2, &v82, (WTF::StringImpl **)__s);
    v44 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
    return 0;
  }
  v45 = *(_DWORD *)(a4 + 28);
  if ((v45 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v85 = 74;
    v83 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v83, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC627CLL);
    }
    goto LABEL_39;
  }
  if ((v45 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v85 = 72;
    v83 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v83, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC62B4);
    }
    goto LABEL_39;
  }
  if ((v45 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v85 = 70;
    v83 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v83, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC62ECLL);
    }
    goto LABEL_39;
  }
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex((JSC::JSArrayBufferView *)a1, a2, v31, *(JSC::JSObject **)a4, v32, v33, v34, v35, v36);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    v22 = *v16;
    if ((v22 & 0xC0) != 0x40)
      break;
    v23 = __ldxr(v16);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xBF, v16))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
LABEL_19:
  if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC6880);
  }
  if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v21;
      v24 = *(_QWORD *)(a2 + 160);
      v25 = __CFADD__(v24, v21);
      v26 = v24 + v21;
      if (v25)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v26;
    }
  }
  else if (v20 == 16)
  {
    if (v19)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v19, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198AC6A94);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC6A24);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getUint8ClampedArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedUint8ClampedArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint8ClampedAdaptor>::s_info;
}

JSC::Exception *JSC::callUint8ClampedArray(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Uint8ClampedArray", 18);
}

uint64_t JSC::constructUint8ClampedArray(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  JSC::JSGlobalObject *m;
  char **v19;
  JSC::JSGlobalObject *v20;
  JSC::JSGlobalObject *i;
  char **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(JSC::JSObject **);
  JSC::JSObject **v26;
  JSC::JSObject *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  JSC::JSObject *v31;
  uint64_t v32;
  JSC::JSGlobalObject *j;
  char **v34;
  uint64_t v35;
  uint64_t (*v36)(JSC::JSObject **);
  JSC::JSObject **v37;
  JSC::JSObject *v38;
  char *v39;
  JSC::JSObject *SubclassStructure;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  JSC::JSObject **v48;
  JSC::JSGlobalObject *k;
  char **v50;
  unint64_t v51;
  unint64_t v52;
  JSC::JSObject *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t (*v58)(JSC::JSObject **);
  JSC::JSObject **v59;
  int v60;
  int v61;
  JSC::JSObject **v62;
  uint64_t (*v63)(JSC::JSObject **);
  JSC::JSObject **v64;
  int v65;
  int v66;
  uint64_t (*v67)(JSC::JSObject **);
  JSC::JSObject **v68;
  uint64_t (*v69)(JSC::JSObject **);
  JSC::JSObject **v70;
  JSC::JSGlobalObject *v71;
  JSC::JSGlobalObject *v72;
  unint64_t v73;
  unint64_t v74;
  JSC::JSObject *v75;
  unint64_t v76;
  char *v77;

  v11 = *(_QWORD *)(this + 56);
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 != 1)
  {
    v15 = *((_QWORD *)a2 + 6);
    if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
    {
      if (v14 < 2)
      {
        v16 = 0;
        goto LABEL_18;
      }
      v75 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v75, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_18;
      v17 = *(_DWORD *)(v11 + 80);
      if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v11 + 16))
      {
LABEL_18:
        v20 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 3);
        if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
        {
          if (v12 != v20)
          {
            v75 = *(JSC::JSObject **)(this + 56);
            for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v71 + 2))
            {
              while (1)
              {
                v22 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
                if (v22 != &JSC::JSBoundFunction::s_info && v22 != &JSC::JSRemoteFunction::s_info)
                  break;
                i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
              }
              if (*((_BYTE *)i + 5) != 61)
              {
                v23 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
                goto LABEL_28;
              }
              v71 = i;
              if (JSC::ProxyObject::isRevoked(i))
                break;
            }
            JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
            v23 = 0;
LABEL_28:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_29;
            v56 = *(_DWORD *)(v11 + 80);
            if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
            {
              v73 = v23;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v23 = v73;
            }
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_29:
              v24 = *(_QWORD *)(v23 + 1728);
              if ((v24 & 1) != 0)
              {
                v25 = *(uint64_t (**)(JSC::JSObject **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
                v26 = (JSC::JSObject **)(v23 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v23 & 8) != 0)
                  v26 = (JSC::JSObject **)(v23 - 16);
                v27 = *v26;
                v28 = (char *)(v23 + 1728);
LABEL_111:
                v75 = v27;
                v76 = v23;
                v77 = v28;
                v24 = v25(&v75);
                goto LABEL_53;
              }
              goto LABEL_53;
            }
            goto LABEL_107;
          }
          v35 = *(_QWORD *)(this + 1728);
          if ((v35 & 1) == 0)
          {
LABEL_55:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_151;
            v54 = *(_DWORD *)(v11 + 80);
            if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_151:
              if (v14 < 3 || (v75 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v75 == (JSC::JSObject *)10))
              {
                v41 = 0;
                v42 = 0;
                return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
              }
              v41 = JSC::JSValue::toTypedArrayIndex(&v75, (JSC::JSGlobalObject *)this, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v11 + 80))
                goto LABEL_60;
              v60 = *(_DWORD *)(v11 + 80);
              if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v43, v44, v45, v46, a7, a8);
              if (!*(_QWORD *)(v11 + 16))
              {
LABEL_60:
                v42 = 1;
                return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
              }
            }
            return 0;
          }
          v36 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
          v37 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v37 = (JSC::JSObject **)(this - 16);
          v38 = *v37;
          v39 = (char *)(this + 1728);
        }
        else
        {
          if (v12 != v20)
          {
            v75 = *(JSC::JSObject **)(this + 56);
            for (j = v12; ; j = (JSC::JSGlobalObject *)*((_QWORD *)v72 + 2))
            {
              while (1)
              {
                v34 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x4C));
                if (v34 != &JSC::JSBoundFunction::s_info && v34 != &JSC::JSRemoteFunction::s_info)
                  break;
                j = (JSC::JSGlobalObject *)*((_QWORD *)j + 4);
              }
              if (*((_BYTE *)j + 5) != 61)
              {
                v23 = *(_QWORD *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x28);
                goto LABEL_51;
              }
              v72 = j;
              if (JSC::ProxyObject::isRevoked(j))
                break;
            }
            JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
            v23 = 0;
LABEL_51:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_52;
            v61 = *(_DWORD *)(v11 + 80);
            if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
            {
              v74 = v23;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v23 = v74;
            }
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_52:
              v24 = *(_QWORD *)(v23 + 1712);
              if ((v24 & 1) != 0)
              {
                v25 = *(uint64_t (**)(JSC::JSObject **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
                v62 = (JSC::JSObject **)(v23 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v23 & 8) != 0)
                  v62 = (JSC::JSObject **)(v23 - 16);
                v27 = *v62;
                v28 = (char *)(v23 + 1712);
                goto LABEL_111;
              }
LABEL_53:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v24, a4, a5, a6, a7, a8);
LABEL_54:
              v35 = (uint64_t)SubclassStructure;
              goto LABEL_55;
            }
LABEL_107:
            v35 = 0;
            goto LABEL_55;
          }
          v35 = *(_QWORD *)(this + 1712);
          if ((v35 & 1) == 0)
            goto LABEL_55;
          v36 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
          v48 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v48 = (JSC::JSObject **)(this - 16);
          v38 = *v48;
          v39 = (char *)(this + 1712);
        }
        v75 = v38;
        v76 = this;
        v77 = v39;
        SubclassStructure = (JSC::JSObject *)v36(&v75);
        goto LABEL_54;
      }
      return 0;
    }
    if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
    {
      v35 = *(_QWORD *)(this + 1712);
      if ((v35 & 1) == 0)
        goto LABEL_88;
      v69 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v70 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v70 = (JSC::JSObject **)(this - 16);
      v75 = *v70;
      v76 = this;
      v77 = (char *)(this + 1712);
      v53 = (JSC::JSObject *)v69(&v75);
    }
    else
    {
      v75 = *(JSC::JSObject **)(this + 56);
      for (k = v12; ; k = (JSC::JSGlobalObject *)*((_QWORD *)k + 2))
      {
        while (1)
        {
          v50 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)k & 0xFFFFFFFE) + 0x4C));
          if (v50 != &JSC::JSBoundFunction::s_info && v50 != &JSC::JSRemoteFunction::s_info)
            break;
          k = (JSC::JSGlobalObject *)*((_QWORD *)k + 4);
        }
        if (*((_BYTE *)k + 5) != 61)
        {
          v51 = *(_QWORD *)(16 * (*(_DWORD *)k & 0xFFFFFFFE) + 0x28);
          goto LABEL_80;
        }
        if (JSC::ProxyObject::isRevoked(k))
          break;
      }
      JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
      v51 = 0;
LABEL_80:
      if (*(_DWORD *)(v11 + 80))
      {
        v66 = *(_DWORD *)(v11 + 80);
        if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
        {
          v35 = 0;
          goto LABEL_88;
        }
      }
      v52 = *(_QWORD *)(v51 + 1712);
      if ((v52 & 1) != 0)
      {
        v67 = *(uint64_t (**)(JSC::JSObject **))(v52 & 0xFFFFFFFFFFFFFFFCLL);
        v68 = (JSC::JSObject **)(v51 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v51 & 8) != 0)
          v68 = (JSC::JSObject **)(v51 - 16);
        v75 = *v68;
        v76 = v51;
        v77 = (char *)(v51 + 1712);
        v52 = v67(&v75);
      }
      v53 = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v52, a4, a5, a6, a7, a8);
    }
    v35 = (uint64_t)v53;
LABEL_88:
    if (!*(_DWORD *)(v11 + 80))
    {
      v41 = 0;
      v42 = 0;
      v16 = 0;
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
    }
    v65 = *(_DWORD *)(v11 + 80);
    if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v41 = 0;
    v42 = 0;
    v16 = 0;
    result = 0;
    if (!*(_QWORD *)(v11 + 16))
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
    return result;
  }
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v32 = *(_QWORD *)(this + 1712);
    if ((v32 & 1) == 0)
      goto LABEL_63;
    v63 = *(uint64_t (**)(JSC::JSObject **))(v32 & 0xFFFFFFFFFFFFFFFCLL);
    v64 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v64 = (JSC::JSObject **)(this - 16);
    v75 = *v64;
    v76 = this;
    v77 = (char *)(this + 1712);
    v31 = (JSC::JSObject *)v63(&v75);
LABEL_37:
    v32 = (uint64_t)v31;
    goto LABEL_63;
  }
  v75 = *(JSC::JSObject **)(this + 56);
  for (m = v12; ; m = (JSC::JSGlobalObject *)*((_QWORD *)m + 2))
  {
    while (1)
    {
      v19 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)m & 0xFFFFFFFE) + 0x4C));
      if (v19 != &JSC::JSBoundFunction::s_info && v19 != &JSC::JSRemoteFunction::s_info)
        break;
      m = (JSC::JSGlobalObject *)*((_QWORD *)m + 4);
    }
    if (*((_BYTE *)m + 5) != 61)
    {
      v29 = *(_QWORD *)(16 * (*(_DWORD *)m & 0xFFFFFFFE) + 0x28);
      goto LABEL_34;
    }
    if (JSC::ProxyObject::isRevoked(m))
      break;
  }
  JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v29 = 0;
LABEL_34:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_35;
  v57 = *(_DWORD *)(v11 + 80);
  if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_35:
    v30 = *(_QWORD *)(v29 + 1712);
    if ((v30 & 1) != 0)
    {
      v58 = *(uint64_t (**)(JSC::JSObject **))(v30 & 0xFFFFFFFFFFFFFFFCLL);
      v59 = (JSC::JSObject **)(v29 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v29 & 8) != 0)
        v59 = (JSC::JSObject **)(v29 - 16);
      v75 = *v59;
      v76 = v29;
      v77 = (char *)(v29 + 1712);
      v30 = v58(&v75);
    }
    v31 = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v30, a4, a5, a6, a7, a8);
    goto LABEL_37;
  }
  v32 = 0;
LABEL_63:
  if (*(_DWORD *)(v11 + 80))
  {
    v55 = *(_DWORD *)(v11 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create((JSC::JSGlobalObject *)this, v32, 0, (uint64_t)a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(__dst, __s, v41);
  __dst[v41] = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = __dst;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *v48++;
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = __dst;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *v44++;
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!__dst[v42])
  {
LABEL_74:
    JSC::toNativeFromValue<JSC::Uint16Adaptor>(a2, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 2 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 1;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 2 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 1;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  BOOL v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  size_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t result;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  int v71;
  _WORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  const WTF::StringImpl *v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v98[31];

  *(_QWORD *)&v98[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_13;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v86 = *v13 - 48, v86 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_152:
      v19 = 0;
      v87 = 0;
      v16 = 0;
    }
    else
    {
      v90 = v14 - 1;
      v91 = v13 + 1;
      while (v90)
      {
        if (v86 > 0x19999999)
          goto LABEL_152;
        v92 = *v91 - 48;
        if (v92 > 9)
          goto LABEL_152;
        v19 = 0;
        v87 = 0;
        v16 = 0;
        v38 = __CFADD__(v92, 10 * v86);
        v86 = v92 + 10 * v86;
        --v90;
        ++v91;
        if (v38)
          goto LABEL_153;
      }
      if (v86 == -1)
        v19 = 0;
      else
        v19 = v86 & 0xFFFFFF00;
      if (v86 == -1)
        v87 = 0;
      else
        v87 = v86;
      if (v86 == -1)
        v16 = 0;
      else
        v16 = 0x100000000;
    }
LABEL_153:
    v18 = v87;
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v34 = v14 > 1) : (v34 = 0), v34))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v35 = (unsigned __int16 *)(v13 + 2);
      v36 = v14 - 1;
      while (v36)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v37 = *v35 - 48;
        if (v37 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v38 = __CFADD__(v37, 10 * v15);
        v15 = v37 + 10 * v15;
        ++v35;
        --v36;
        if (v38)
          goto LABEL_7;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_7:
    v19 = v17;
  }
  if ((v16 & 0x100000000) != 0)
    return JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v19, a4);
  if (!(_DWORD)v14)
    goto LABEL_13;
  if ((v12 & 4) != 0)
  {
    v20 = *v13;
    if ((_DWORD)v14 == 1)
    {
LABEL_12:
      if ((v20 - 48) < 0xA)
        return 0;
      goto LABEL_13;
    }
    if (v20 == 45)
    {
      v20 = v13[1];
      goto LABEL_27;
    }
    if ((v20 - 48) < 0xA)
      goto LABEL_42;
    if ((_DWORD)v14 == 8)
    {
LABEL_82:
      if (v20 != 73)
        goto LABEL_13;
      goto LABEL_42;
    }
  }
  else
  {
    v20 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_12;
    if (v20 == 45)
    {
      v20 = *((unsigned __int16 *)v13 + 1);
LABEL_27:
      if ((v20 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_42;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_13;
      goto LABEL_82;
    }
    if ((v20 - 48) < 0xA || (_DWORD)v14 == 8 && v20 == 73)
      goto LABEL_42;
  }
  if ((_DWORD)v14 != 3 || v20 != 78)
    goto LABEL_13;
LABEL_42:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v40 = (v39 >> 52) & 0x7FF;
  if ((_DWORD)v40 == 2047)
  {
    if ((v39 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v41 = v98;
    }
    else
    {
      v70 = __s;
      if ((v39 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v70 = &__s[1];
      }
      *(_QWORD *)v70 = 0x7974696E69666E49;
      v41 = v70 + 8;
    }
    goto LABEL_55;
  }
  v42 = v39 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v39 & 0x8000000000000000) != 0 && v42)
  {
    __s[0] = 45;
    v43 = &__s[1];
  }
  else
  {
    v43 = __s;
    if (!v42)
    {
      v41 = &__s[1];
      __s[0] = 48;
      goto LABEL_55;
    }
  }
  v44 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v39 & 0x800FFFFFFFFFFFFFLL, v40);
  v41 = WTF::dragonbox::detail::to_shortest(v44, v45, (uint64_t)v43, v46);
LABEL_55:
  *v41 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          goto LABEL_13;
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        goto LABEL_13;
      v49 += 2;
    }
    while (--v51);
  }
  if (!__dst[v48])
    return 0;
LABEL_13:
  v21 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_105;
  v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    goto LABEL_105;
  v23 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v23)
  {
    v58 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v58 || *(_BYTE *)(v58 + 5) != 1 && *(_DWORD *)(v58 + 80) < 2u)
      goto LABEL_105;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v23)
      goto LABEL_105;
  }
  if (!*(_DWORD *)(v23 + 24))
    goto LABEL_105;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(unsigned int *)(v23 + 8);
  v27 = *(_DWORD *)(a3 + 16);
  if ((v24 & 1) != 0)
  {
    if ((v27 & 0x20) != 0)
      v27 = *(_DWORD *)(a3 + 32);
    v28 = *(_DWORD *)(v23 + 12);
    v29 = (v27 >> 8) & *(_QWORD *)&v28;
    v30 = *(unsigned __int8 *)(v25 + v29);
    if (*(_BYTE *)(v25 + v29))
    {
      v31 = v25 + v26;
      v32 = 1;
      while (1)
      {
        v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
        if (a3 == (v33 & 0xFFFFFFFFFFFFLL))
          break;
        v29 = ((_DWORD)v29 + v32) & v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        ++v32;
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_105;
      }
      a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      goto LABEL_74;
    }
LABEL_105:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v21, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v71 = *(_DWORD *)(a3 + 16);
    if ((v71 & 0x20) == 0)
    {
      v72 = *(_WORD **)(a3 + 8);
      v73 = *(unsigned int *)(a3 + 4);
      if ((v71 & 4) == 0)
      {
        if ((_DWORD)v73)
        {
          v74 = (unsigned __int16)*v72 - 48;
          if (v74 <= 9 && (*v72 != 48 || v73 <= 1))
          {
            v78 = v72 + 1;
            v79 = v73 - 1;
            while (v79)
            {
              if (v74 > 0x19999999)
                goto LABEL_110;
              v80 = *v78 - 48;
              if (v80 > 9)
                goto LABEL_110;
              v75 = 0;
              LODWORD(v73) = 0;
              v76 = 0;
              v38 = __CFADD__(v80, 10 * v74);
              v74 = v80 + 10 * v74;
              ++v78;
              --v79;
              if (v38)
                goto LABEL_112;
            }
            v75 = 0x100000000;
            if (v74 == -1)
            {
              v75 = 0;
              LODWORD(v73) = 0;
            }
            else
            {
              LODWORD(v73) = v74;
            }
            if (v74 == -1)
              v76 = 0;
            else
              v76 = v74 & 0xFFFFFF00;
            goto LABEL_112;
          }
LABEL_110:
          v75 = 0;
          LODWORD(v73) = 0;
        }
        else
        {
          v75 = 0;
        }
        v76 = 0;
LABEL_112:
        v77 = (const WTF::StringImpl *)(v76 | v73);
        goto LABEL_113;
      }
      if ((_DWORD)v73)
      {
        v88 = *(unsigned __int8 *)v72 - 48;
        if (v88 <= 9 && (v73 < 2 || *(_BYTE *)v72 != 48))
        {
          v93 = v73 - 1;
          v94 = (unsigned __int8 *)v72 + 1;
          while (v93)
          {
            if (v88 > 0x19999999)
              goto LABEL_156;
            v95 = *v94 - 48;
            if (v95 > 9)
              goto LABEL_156;
            LODWORD(v73) = 0;
            v89 = 0;
            v75 = 0;
            v38 = __CFADD__(v95, 10 * v88);
            v88 = v95 + 10 * v88;
            --v93;
            ++v94;
            if (v38)
              goto LABEL_158;
          }
          if (v88 == -1)
            LODWORD(v73) = 0;
          else
            LODWORD(v73) = v88 & 0xFFFFFF00;
          if (v88 == -1)
            v89 = 0;
          else
            v89 = v88;
          if (v88 == -1)
            v75 = 0;
          else
            v75 = 0x100000000;
          goto LABEL_158;
        }
LABEL_156:
        LODWORD(v73) = 0;
      }
      v89 = 0;
      v75 = 0;
LABEL_158:
      v77 = (const WTF::StringImpl *)(v89 | v73);
LABEL_113:
      if ((v75 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v77, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  if ((v27 & 0x20) != 0)
    v27 = *(_DWORD *)(a3 + 32);
  v64 = *(_DWORD *)(v23 + 12);
  v65 = v64 & (v27 >> 8);
  v66 = *(_DWORD *)(v25 + 4 * v65);
  if (!v66)
    goto LABEL_105;
  v67 = v25 + 4 * v26;
  v68 = 1;
  while (1)
  {
    v69 = (v66 - 1);
    if (*(_QWORD *)(v67 + 16 * v69) == a3)
      break;
    v65 = (v65 + v68) & v64;
    v66 = *(_DWORD *)(v25 + 4 * v65);
    ++v68;
    if (!v66)
      goto LABEL_105;
  }
  a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
LABEL_74:
  if ((_DWORD)a6 == -1)
    goto LABEL_105;
  if ((int)a6 <= 63)
  {
    v59 = a1 + 16;
    v60 = a6 << 32;
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 8) - 8;
    v60 = 0x3F00000000 - (a6 << 32);
  }
  v61 = *(_QWORD *)(v59 + (v60 >> 29));
  if ((v61 & 0xFFFE000000000002) != 0)
    goto LABEL_80;
  v62 = *(unsigned __int8 *)(v61 + 5);
  if (v62 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v21, a4, v61, SHIDWORD(a6), a6);
    return 1;
  }
  if (v62 != 6)
  {
LABEL_80:
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v81 = *(_DWORD *)(v22 + 16) & 3;
  v83 = *(_QWORD *)(v61 + 8);
  v82 = *(_QWORD *)(v61 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C)))
  {
    v85 = *(_QWORD *)(v61 + 24);
    v84 = *(_QWORD *)(v61 + 32);
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v85;
    *(_QWORD *)(a4 + 80) = v84;
  }
  else
  {
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > (unint64_t)a3)
      goto LABEL_8;
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 2 * v10 > v8)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (a3 >= (v8 - v9) >> 1)
      return 0;
  }
  else if (v10 <= a3)
  {
    return 0;
  }
LABEL_8:
  v5 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)a4 = *(unsigned __int16 *)(v5 + 2 * a3) | 0xFFFE000000000000;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC90C8);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 2 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 1)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC8BECLL);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC8C68);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC8CA0);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC8CD8);
    }
    goto LABEL_61;
  }
  v33 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 2 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v30 = a1;
  v17 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v18 = *v17;
    if ((v18 & 0x40) != 0)
      break;
    v19 = __ldaxr(v17);
    if (v19 == v18)
    {
      if (!__stxr(v18 | 0x40, v17))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_8:
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v22 = *(_QWORD *)(a1 + 24);
  WTF::Locker<JSC::JSCellLock,void>::~Locker(&v30, v10, v11, v12, v13, v14, v15, v16);
  if (v20 == 16)
  {
    if (v21)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v21, v23, v24, v25, v26, v27, v28);
  }
  else if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += 2 * v22;
      v29 = *(_QWORD *)(a2 + 160);
      if (__CFADD__(v29, 2 * v22))
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v29 + 2 * v22;
    }
  }
  else if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC9304);
  }
}

void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198AC9500);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 2 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC9490);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getUint16ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedUint16ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint16Adaptor>::s_info;
}

JSC::Exception *JSC::callUint16Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Uint16Array", 12);
}

uint64_t JSC::constructUint16Array(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::JSObject *v42;
  uint64_t (*v43)(JSC::JSObject **);
  JSC::JSObject **v44;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v46;
  int v47[2];
  JSC::JSObject *v48;
  int *v49;
  char *v50;

  v10 = (JSC *)this;
  v11 = *(JSC::JSObject **)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  v46 = v12;
  *(_QWORD *)v47 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      v33 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)5>(this);
    }
    else
    {
      v48 = v11;
      v49 = v47;
      v50 = (char *)&v46;
      v33 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v41 = v33;
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v34, v35, v36, v37, v38, v39, v40))
      return JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create(*(JSC::JSGlobalObject **)v47, v41, 0, v36, v37, v38, v39, v40);
    return 0;
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v48 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v48, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v46 == v17)
      {
        v27 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)5>(*(uint64_t *)v47);
      }
      else
      {
        v48 = v11;
        v49 = v47;
        v50 = (char *)&v46;
        v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v48, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v46 == v17)
    {
      v27 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)5>(*(uint64_t *)v47);
    }
    else
    {
      v48 = v11;
      v49 = v47;
      v50 = (char *)&v46;
      v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v27;
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v28, v29, v30, v31, v32, a7, a8))
      return 0;
    if (v14 < 3 || (v48 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v48 == (JSC::JSObject *)10))
    {
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = JSC::JSValue::toTypedArrayIndex(&v48, *(JSC::JSGlobalObject **)v47, (uint64_t)"length", 7, v31, v32, a7, a8, a9);
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v22, v23, v24, v25, v26, a7, a8))
        return 0;
      v20 = 1;
    }
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  }
  if (v12 == *((_QWORD *)a2 + 3))
  {
    v18 = *(_QWORD *)(this + 1760);
    if ((v18 & 1) == 0)
      goto LABEL_29;
    v43 = *(uint64_t (**)(JSC::JSObject **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v44 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v44 = (JSC::JSObject **)(this - 16);
    v48 = *v44;
    v49 = (int *)this;
    v50 = (char *)(this + 1760);
    v42 = (JSC::JSObject *)v43(&v48);
  }
  else
  {
    v48 = v11;
    v49 = v47;
    v50 = (char *)&v46;
    v42 = JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v18 = (uint64_t)v42;
LABEL_29:
  if (!*((_DWORD *)v11 + 20))
  {
    v19 = 0;
    v20 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = 0;
  v20 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(__dst, __s, v41);
  __dst[v41] = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = __dst;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *v48++;
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = __dst;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *v44++;
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!__dst[v42])
  {
LABEL_74:
    JSC::toNativeFromValue<JSC::Uint32Adaptor>(a2, a4, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 4 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 2;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 4 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 2;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  BOOL v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  size_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t result;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  int v71;
  _WORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  const WTF::StringImpl *v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v98[31];

  *(_QWORD *)&v98[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_13;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v86 = *v13 - 48, v86 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_152:
      v19 = 0;
      v87 = 0;
      v16 = 0;
    }
    else
    {
      v90 = v14 - 1;
      v91 = v13 + 1;
      while (v90)
      {
        if (v86 > 0x19999999)
          goto LABEL_152;
        v92 = *v91 - 48;
        if (v92 > 9)
          goto LABEL_152;
        v19 = 0;
        v87 = 0;
        v16 = 0;
        v38 = __CFADD__(v92, 10 * v86);
        v86 = v92 + 10 * v86;
        --v90;
        ++v91;
        if (v38)
          goto LABEL_153;
      }
      if (v86 == -1)
        v19 = 0;
      else
        v19 = v86 & 0xFFFFFF00;
      if (v86 == -1)
        v87 = 0;
      else
        v87 = v86;
      if (v86 == -1)
        v16 = 0;
      else
        v16 = 0x100000000;
    }
LABEL_153:
    v18 = v87;
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v34 = v14 > 1) : (v34 = 0), v34))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v35 = (unsigned __int16 *)(v13 + 2);
      v36 = v14 - 1;
      while (v36)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v37 = *v35 - 48;
        if (v37 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v38 = __CFADD__(v37, 10 * v15);
        v15 = v37 + 10 * v15;
        ++v35;
        --v36;
        if (v38)
          goto LABEL_7;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_7:
    v19 = v17;
  }
  if ((v16 & 0x100000000) != 0)
    return JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v19, a4);
  if (!(_DWORD)v14)
    goto LABEL_13;
  if ((v12 & 4) != 0)
  {
    v20 = *v13;
    if ((_DWORD)v14 == 1)
    {
LABEL_12:
      if ((v20 - 48) < 0xA)
        return 0;
      goto LABEL_13;
    }
    if (v20 == 45)
    {
      v20 = v13[1];
      goto LABEL_27;
    }
    if ((v20 - 48) < 0xA)
      goto LABEL_42;
    if ((_DWORD)v14 == 8)
    {
LABEL_82:
      if (v20 != 73)
        goto LABEL_13;
      goto LABEL_42;
    }
  }
  else
  {
    v20 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_12;
    if (v20 == 45)
    {
      v20 = *((unsigned __int16 *)v13 + 1);
LABEL_27:
      if ((v20 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_42;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_13;
      goto LABEL_82;
    }
    if ((v20 - 48) < 0xA || (_DWORD)v14 == 8 && v20 == 73)
      goto LABEL_42;
  }
  if ((_DWORD)v14 != 3 || v20 != 78)
    goto LABEL_13;
LABEL_42:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v40 = (v39 >> 52) & 0x7FF;
  if ((_DWORD)v40 == 2047)
  {
    if ((v39 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v41 = v98;
    }
    else
    {
      v70 = __s;
      if ((v39 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v70 = &__s[1];
      }
      *(_QWORD *)v70 = 0x7974696E69666E49;
      v41 = v70 + 8;
    }
    goto LABEL_55;
  }
  v42 = v39 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v39 & 0x8000000000000000) != 0 && v42)
  {
    __s[0] = 45;
    v43 = &__s[1];
  }
  else
  {
    v43 = __s;
    if (!v42)
    {
      v41 = &__s[1];
      __s[0] = 48;
      goto LABEL_55;
    }
  }
  v44 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v39 & 0x800FFFFFFFFFFFFFLL, v40);
  v41 = WTF::dragonbox::detail::to_shortest(v44, v45, (uint64_t)v43, v46);
LABEL_55:
  *v41 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          goto LABEL_13;
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        goto LABEL_13;
      v49 += 2;
    }
    while (--v51);
  }
  if (!__dst[v48])
    return 0;
LABEL_13:
  v21 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_105;
  v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    goto LABEL_105;
  v23 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v23)
  {
    v58 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v58 || *(_BYTE *)(v58 + 5) != 1 && *(_DWORD *)(v58 + 80) < 2u)
      goto LABEL_105;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v23)
      goto LABEL_105;
  }
  if (!*(_DWORD *)(v23 + 24))
    goto LABEL_105;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(unsigned int *)(v23 + 8);
  v27 = *(_DWORD *)(a3 + 16);
  if ((v24 & 1) != 0)
  {
    if ((v27 & 0x20) != 0)
      v27 = *(_DWORD *)(a3 + 32);
    v28 = *(_DWORD *)(v23 + 12);
    v29 = (v27 >> 8) & *(_QWORD *)&v28;
    v30 = *(unsigned __int8 *)(v25 + v29);
    if (*(_BYTE *)(v25 + v29))
    {
      v31 = v25 + v26;
      v32 = 1;
      while (1)
      {
        v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
        if (a3 == (v33 & 0xFFFFFFFFFFFFLL))
          break;
        v29 = ((_DWORD)v29 + v32) & v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        ++v32;
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_105;
      }
      a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      goto LABEL_74;
    }
LABEL_105:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v21, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v71 = *(_DWORD *)(a3 + 16);
    if ((v71 & 0x20) == 0)
    {
      v72 = *(_WORD **)(a3 + 8);
      v73 = *(unsigned int *)(a3 + 4);
      if ((v71 & 4) == 0)
      {
        if ((_DWORD)v73)
        {
          v74 = (unsigned __int16)*v72 - 48;
          if (v74 <= 9 && (*v72 != 48 || v73 <= 1))
          {
            v78 = v72 + 1;
            v79 = v73 - 1;
            while (v79)
            {
              if (v74 > 0x19999999)
                goto LABEL_110;
              v80 = *v78 - 48;
              if (v80 > 9)
                goto LABEL_110;
              v75 = 0;
              LODWORD(v73) = 0;
              v76 = 0;
              v38 = __CFADD__(v80, 10 * v74);
              v74 = v80 + 10 * v74;
              ++v78;
              --v79;
              if (v38)
                goto LABEL_112;
            }
            v75 = 0x100000000;
            if (v74 == -1)
            {
              v75 = 0;
              LODWORD(v73) = 0;
            }
            else
            {
              LODWORD(v73) = v74;
            }
            if (v74 == -1)
              v76 = 0;
            else
              v76 = v74 & 0xFFFFFF00;
            goto LABEL_112;
          }
LABEL_110:
          v75 = 0;
          LODWORD(v73) = 0;
        }
        else
        {
          v75 = 0;
        }
        v76 = 0;
LABEL_112:
        v77 = (const WTF::StringImpl *)(v76 | v73);
        goto LABEL_113;
      }
      if ((_DWORD)v73)
      {
        v88 = *(unsigned __int8 *)v72 - 48;
        if (v88 <= 9 && (v73 < 2 || *(_BYTE *)v72 != 48))
        {
          v93 = v73 - 1;
          v94 = (unsigned __int8 *)v72 + 1;
          while (v93)
          {
            if (v88 > 0x19999999)
              goto LABEL_156;
            v95 = *v94 - 48;
            if (v95 > 9)
              goto LABEL_156;
            LODWORD(v73) = 0;
            v89 = 0;
            v75 = 0;
            v38 = __CFADD__(v95, 10 * v88);
            v88 = v95 + 10 * v88;
            --v93;
            ++v94;
            if (v38)
              goto LABEL_158;
          }
          if (v88 == -1)
            LODWORD(v73) = 0;
          else
            LODWORD(v73) = v88 & 0xFFFFFF00;
          if (v88 == -1)
            v89 = 0;
          else
            v89 = v88;
          if (v88 == -1)
            v75 = 0;
          else
            v75 = 0x100000000;
          goto LABEL_158;
        }
LABEL_156:
        LODWORD(v73) = 0;
      }
      v89 = 0;
      v75 = 0;
LABEL_158:
      v77 = (const WTF::StringImpl *)(v89 | v73);
LABEL_113:
      if ((v75 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v77, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  if ((v27 & 0x20) != 0)
    v27 = *(_DWORD *)(a3 + 32);
  v64 = *(_DWORD *)(v23 + 12);
  v65 = v64 & (v27 >> 8);
  v66 = *(_DWORD *)(v25 + 4 * v65);
  if (!v66)
    goto LABEL_105;
  v67 = v25 + 4 * v26;
  v68 = 1;
  while (1)
  {
    v69 = (v66 - 1);
    if (*(_QWORD *)(v67 + 16 * v69) == a3)
      break;
    v65 = (v65 + v68) & v64;
    v66 = *(_DWORD *)(v25 + 4 * v65);
    ++v68;
    if (!v66)
      goto LABEL_105;
  }
  a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
LABEL_74:
  if ((_DWORD)a6 == -1)
    goto LABEL_105;
  if ((int)a6 <= 63)
  {
    v59 = a1 + 16;
    v60 = a6 << 32;
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 8) - 8;
    v60 = 0x3F00000000 - (a6 << 32);
  }
  v61 = *(_QWORD *)(v59 + (v60 >> 29));
  if ((v61 & 0xFFFE000000000002) != 0)
    goto LABEL_80;
  v62 = *(unsigned __int8 *)(v61 + 5);
  if (v62 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v21, a4, v61, SHIDWORD(a6), a6);
    return 1;
  }
  if (v62 != 6)
  {
LABEL_80:
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v81 = *(_DWORD *)(v22 + 16) & 3;
  v83 = *(_QWORD *)(v61 + 8);
  v82 = *(_QWORD *)(v61 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C)))
  {
    v85 = *(_QWORD *)(v61 + 24);
    v84 = *(_QWORD *)(v61 + 32);
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v85;
    *(_QWORD *)(a4 + 80) = v84;
  }
  else
  {
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 40) & 8) == 0
    || (v6 = *(_QWORD *)(a1 + 16)) != 0
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (*(_BYTE *)(v8 + 64) && (v12 = *(_QWORD *)(v8 + 32)) != 0)
        v9 = *(_QWORD *)(v12 + 32);
      else
        v9 = *(_QWORD *)(v8 + 48);
      v11 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 32);
      if (v10 + 4 * v11 <= v9)
      {
        if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        {
          if (a3 < (v9 - v10) >> 2)
            goto LABEL_8;
        }
        else if (v11 > a3)
        {
          goto LABEL_8;
        }
      }
    }
    else if (*(_QWORD *)(a1 + 24) > (unint64_t)a3)
    {
LABEL_8:
      *(_QWORD *)a4 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::getIndexQuickly(*(_QWORD *)(a1 + 16), a3);
      *(_DWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 1;
      return result;
    }
  }
  return 0;
}

void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  JSC::JSObject *v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACB5E0);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 4 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 2)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACB104);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACB180);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACB1B8);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACB1F0);
    }
    goto LABEL_61;
  }
  v33 = *(JSC::JSObject **)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 4 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = 4 * *(_QWORD *)(a1 + 24);
  while (1)
  {
    v22 = *v16;
    if ((v22 & 0xC0) != 0x40)
      break;
    v23 = __ldxr(v16);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xBF, v16))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
LABEL_19:
  if (v20 == 16)
  {
    if (v19)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v19, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    if ((v20 - 136) <= 5 && v20 != 137)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACB868);
    }
    if (v20 == 48 && *(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v21;
      v24 = *(_QWORD *)(a2 + 160);
      v25 = __CFADD__(v24, v21);
      v26 = v24 + v21;
      if (v25)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v26;
    }
  }
}

void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198ACBA60);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 4 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198ACB9F0);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getUint32ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedUint32ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint32Adaptor>::s_info;
}

JSC::Exception *JSC::callUint32Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Uint32Array", 12);
}

uint64_t JSC::constructUint32Array(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(JSC::JSObject **, JSC *, JSC::CallFrame *);
  JSC::JSObject **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(JSC::JSObject **);
  JSC::JSObject **v40;
  JSC::JSObject *v41;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v43;
  int v44[2];
  JSC::JSObject *v45;
  JSC *v46;
  char *v47;

  v10 = (JSC *)this;
  v11 = *(JSC::JSObject **)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  v43 = v12;
  *(_QWORD *)v44 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      v30 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)7>(this);
    }
    else
    {
      v45 = v11;
      v46 = (JSC *)v44;
      v47 = (char *)&v43;
      v30 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v45, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v38 = v30;
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v31, v32, v33, v34, v35, v36, v37))
      return 0;
    return JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create(*(JSC::JSGlobalObject **)v44, v38, 0, v33, v34, v35, v36, v37);
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v45 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v45, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v43 == v17)
      {
        v27 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)7>(*(uint64_t *)v44);
      }
      else
      {
        v45 = v11;
        v46 = (JSC *)v44;
        v47 = (char *)&v43;
        v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v45, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v43 == v17)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v44 + 1808);
      if ((v18 & 1) == 0)
      {
LABEL_10:
        if (*((_DWORD *)v11 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          return 0;
        }
        if (v14 < 3 || (v45 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v45 == (JSC::JSObject *)10))
        {
          v19 = 0;
          v20 = 0;
        }
        else
        {
          v19 = JSC::JSValue::toTypedArrayIndex(&v45, *(JSC::JSGlobalObject **)v44, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
          if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v22, v23, v24, v25, v26, a7, a8))
            return 0;
          v20 = 1;
        }
        return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(*(unint64_t *)v44, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
      }
      v28 = *(uint64_t (**)(JSC::JSObject **, JSC *, JSC::CallFrame *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v29 = (JSC::JSObject **)(*(_QWORD *)v44 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v44[0] & 8) != 0)
        v29 = (JSC::JSObject **)(*(_QWORD *)v44 - 16);
      v45 = *v29;
      v46 = *(JSC **)v44;
      v47 = (char *)(*(_QWORD *)v44 + 1808);
      v27 = v28(&v45, v10, a3);
    }
    else
    {
      v45 = v11;
      v46 = (JSC *)v44;
      v47 = (char *)&v43;
      v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v45, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v27;
    goto LABEL_10;
  }
  if (v12 != *((_QWORD *)a2 + 3))
  {
    v45 = v11;
    v46 = (JSC *)v44;
    v47 = (char *)&v43;
    v41 = JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v45, this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_44:
    v18 = (uint64_t)v41;
    goto LABEL_27;
  }
  v18 = *(_QWORD *)(this + 1808);
  if ((v18 & 1) != 0)
  {
    v39 = *(uint64_t (**)(JSC::JSObject **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v40 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v40 = (JSC::JSObject **)(this - 16);
    v45 = *v40;
    v46 = (JSC *)this;
    v47 = (char *)(this + 1808);
    v41 = (JSC::JSObject *)v39(&v45);
    goto LABEL_44;
  }
LABEL_27:
  if (!*((_DWORD *)v11 + 20))
  {
    v19 = 0;
    v20 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(*(unint64_t *)v44, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = 0;
  v20 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(*(unint64_t *)v44, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  JSC::JSObject **v44;
  uint64_t v45;
  int v46;
  int v47;
  JSC::JSObject **v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  JSC::JSObject *v55[15];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
        {
LABEL_74:
          v55[0] = (JSC::JSObject *)a4;
          if (!(a4 >> 49))
            JSC::JSValue::toNumberSlowCase(v55, a2, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
          return 1;
        }
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(v55, __s, v41);
  *((_BYTE *)v55 + v41) = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = v55;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *(unsigned __int8 *)v48;
        v48 = (JSC::JSObject **)((char *)v48 + 1);
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = v55;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *(unsigned __int8 *)v44;
      v44 = (JSC::JSObject **)((char *)v44 + 1);
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!*((_BYTE *)v55 + v42))
    goto LABEL_74;
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 4 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 2;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 4 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 2;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  int v30;
  _WORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  const WTF::StringImpl *v36;
  BOOL v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  double v42;
  const unsigned __int8 *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62[17];

  v62[16] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_13;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v52 = *v13 - 48, v52 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_106:
      v19 = 0;
      v53 = 0;
      v16 = 0;
    }
    else
    {
      v56 = v14 - 1;
      v57 = v13 + 1;
      while (v56)
      {
        if (v52 > 0x19999999)
          goto LABEL_106;
        v58 = *v57 - 48;
        if (v58 > 9)
          goto LABEL_106;
        v19 = 0;
        v53 = 0;
        v16 = 0;
        v41 = __CFADD__(v58, 10 * v52);
        v52 = v58 + 10 * v52;
        --v56;
        ++v57;
        if (v41)
          goto LABEL_107;
      }
      if (v52 == -1)
        v19 = 0;
      else
        v19 = v52 & 0xFFFFFF00;
      if (v52 == -1)
        v53 = 0;
      else
        v53 = v52;
      if (v52 == -1)
        v16 = 0;
      else
        v16 = 0x100000000;
    }
LABEL_107:
    v18 = v53;
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v37 = v14 > 1) : (v37 = 0), v37))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v38 = (unsigned __int16 *)(v13 + 2);
      v39 = v14 - 1;
      while (v39)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v40 = *v38 - 48;
        if (v40 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v41 = __CFADD__(v40, 10 * v15);
        v15 = v40 + 10 * v15;
        ++v38;
        --v39;
        if (v41)
          goto LABEL_7;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_7:
    v19 = v17;
  }
  if ((v16 & 0x100000000) != 0)
    return JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v19, a4);
  if (!(_DWORD)v14)
    goto LABEL_13;
  if ((v12 & 4) == 0)
  {
    v20 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_12;
    if (v20 == 45)
    {
      v20 = *((unsigned __int16 *)v13 + 1);
LABEL_36:
      if ((v20 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_51;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_13;
LABEL_75:
      if (v20 != 73)
        goto LABEL_13;
      goto LABEL_51;
    }
    if ((v20 - 48) >= 0xA && ((_DWORD)v14 != 8 || v20 != 73))
    {
LABEL_79:
      if ((_DWORD)v14 != 3 || v20 != 78)
        goto LABEL_13;
      goto LABEL_51;
    }
    goto LABEL_51;
  }
  v20 = *v13;
  if ((_DWORD)v14 != 1)
  {
    if (v20 == 45)
    {
      v20 = v13[1];
      goto LABEL_36;
    }
    if ((v20 - 48) >= 0xA)
    {
      if ((_DWORD)v14 == 8)
        goto LABEL_75;
      goto LABEL_79;
    }
LABEL_51:
    JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
    WTF::numberToString(v62, v42);
    if (WTF::equal(a3, (unint64_t)v62, v43))
      return 0;
    goto LABEL_13;
  }
LABEL_12:
  if ((v20 - 48) < 0xA)
    return 0;
LABEL_13:
  v21 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4)
    || (v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v23)|| (v62[0] = a3, v24 = JSC::PropertyTable::get(v23, v62), a6 = v24, (_DWORD)v24 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v21, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v30 = *(_DWORD *)(a3 + 16);
    if ((v30 & 0x20) == 0)
    {
      v31 = *(_WORD **)(a3 + 8);
      v32 = *(unsigned int *)(a3 + 4);
      if ((v30 & 4) == 0)
      {
        if ((_DWORD)v32)
        {
          v33 = (unsigned __int16)*v31 - 48;
          if (v33 <= 9 && (*v31 != 48 || v32 <= 1))
          {
            v44 = v31 + 1;
            v45 = v32 - 1;
            while (v45)
            {
              if (v33 > 0x19999999)
                goto LABEL_28;
              v46 = *v44 - 48;
              if (v46 > 9)
                goto LABEL_28;
              v34 = 0;
              LODWORD(v32) = 0;
              v35 = 0;
              v41 = __CFADD__(v46, 10 * v33);
              v33 = v46 + 10 * v33;
              ++v44;
              --v45;
              if (v41)
                goto LABEL_30;
            }
            v34 = 0x100000000;
            if (v33 == -1)
            {
              v34 = 0;
              LODWORD(v32) = 0;
            }
            else
            {
              LODWORD(v32) = v33;
            }
            if (v33 == -1)
              v35 = 0;
            else
              v35 = v33 & 0xFFFFFF00;
            goto LABEL_30;
          }
LABEL_28:
          v34 = 0;
          LODWORD(v32) = 0;
        }
        else
        {
          v34 = 0;
        }
        v35 = 0;
LABEL_30:
        v36 = (const WTF::StringImpl *)(v35 | v32);
        goto LABEL_31;
      }
      if ((_DWORD)v32)
      {
        v54 = *(unsigned __int8 *)v31 - 48;
        if (v54 <= 9 && (v32 < 2 || *(_BYTE *)v31 != 48))
        {
          v59 = v32 - 1;
          v60 = (unsigned __int8 *)v31 + 1;
          while (v59)
          {
            if (v54 > 0x19999999)
              goto LABEL_110;
            v61 = *v60 - 48;
            if (v61 > 9)
              goto LABEL_110;
            LODWORD(v32) = 0;
            v55 = 0;
            v34 = 0;
            v41 = __CFADD__(v61, 10 * v54);
            v54 = v61 + 10 * v54;
            --v59;
            ++v60;
            if (v41)
              goto LABEL_112;
          }
          if (v54 == -1)
            LODWORD(v32) = 0;
          else
            LODWORD(v32) = v54 & 0xFFFFFF00;
          if (v54 == -1)
            v55 = 0;
          else
            v55 = v54;
          if (v54 == -1)
            v34 = 0;
          else
            v34 = 0x100000000;
          goto LABEL_112;
        }
LABEL_110:
        LODWORD(v32) = 0;
      }
      v55 = 0;
      v34 = 0;
LABEL_112:
      v36 = (const WTF::StringImpl *)(v55 | v32);
LABEL_31:
      if ((v34 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v36, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  if ((int)v24 <= 63)
  {
    v25 = a1 + 16;
    v26 = v24 << 32;
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v24 << 32);
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
    goto LABEL_22;
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v21, a4, v27, SHIDWORD(v24), v24);
    return 1;
  }
  if (v28 != 6)
  {
LABEL_22:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_DWORD *)(a4 + 20) = v24;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v47 = *(_DWORD *)(v22 + 16) & 3;
  v49 = *(_QWORD *)(v27 + 8);
  v48 = *(_QWORD *)(v27 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
  {
    v51 = *(_QWORD *)(v27 + 24);
    v50 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v49;
    *(_QWORD *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v47 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v51;
    *(_QWORD *)(a4 + 80) = v50;
  }
  else
  {
    *(_QWORD *)a4 = v49;
    *(_QWORD *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v47 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > (unint64_t)a3)
      goto LABEL_8;
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 4 * v10 > v8)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (a3 >= (v8 - v9) >> 2)
      return 0;
  }
  else if (v10 <= a3)
  {
    return 0;
  }
LABEL_8:
  v5 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)a4 = COERCE__INT64(*(float *)(v5 + 4 * a3)) + 0x2000000000000;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACD97CLL);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 4 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 2)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACD4A0);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACD51CLL);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACD554);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACD58CLL);
    }
    goto LABEL_61;
  }
  v33 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 4 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_6;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_6:
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = 4 * *(_QWORD *)(a1 + 24);
  while (1)
  {
    v22 = *v16;
    if ((v22 & 0xC0) != 0x40)
      break;
    v23 = __ldxr(v16);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xBF, v16))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
LABEL_15:
  if (v20 == 16)
  {
    if (v19)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v19, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    if ((v20 - 136) <= 5 && v20 != 137)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACDC04);
    }
    if (v20 == 48 && *(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v21;
      v24 = *(_QWORD *)(a2 + 160);
      v25 = __CFADD__(v24, v21);
      v26 = v24 + v21;
      if (v25)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v26;
    }
  }
}

void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198ACDDFCLL);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 4 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198ACDD8CLL);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getFloat32ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedFloat32ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Float32Adaptor>::s_info;
}

JSC::Exception *JSC::callFloat32Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Float32Array", 13);
}

uint64_t JSC::constructFloat32Array(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSGlobalObject *v17;
  JSC::JSGlobalObject *v18;
  JSC::JSGlobalObject *v19;
  uint64_t SubclassStructure;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char **v25;
  char *v26;
  JSC::JSGlobalObject *v27;
  JSC::InternalFunction *v28;
  uint64_t v29;
  uint64_t (*v30)(JSC::JSObject **);
  JSC::JSObject **v31;
  JSC::JSObject *v32;
  JSC::JSGlobalObject **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t (*v40)(JSC::JSObject **, JSC *, JSC::CallFrame *);
  JSC::JSObject **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  JSC::JSObject **v53;
  uint64_t v54;
  char *v55;
  int v56;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t (*v58)(JSC::JSObject **);
  JSC::JSObject **v59;
  JSC::JSObject *v60;
  JSC::JSGlobalObject *v61;
  unint64_t v62;
  unint64_t v63;
  JSC::JSGlobalObject *v64;
  int v65[2];
  JSC::JSObject *v66;
  JSC *v67;
  JSC::JSGlobalObject **v68;

  v10 = (JSC *)this;
  v11 = *(_QWORD *)(this + 56);
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  v64 = v12;
  *(_QWORD *)v65 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
    {
      v42 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)8>(this);
    }
    else
    {
      v66 = (JSC::JSObject *)v11;
      v67 = (JSC *)v65;
      v68 = &v64;
      v42 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v66, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v50 = v42;
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v43, v44, v45, v46, v47, v48, v49))
    {
      return 0;
    }
    return JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(*(JSC::JSGlobalObject **)v65, v50, 0, v45, v46, v47, v48, v49);
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v66 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v66, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v18 = v64;
    v17 = *(JSC::JSGlobalObject **)v65;
    v19 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v64 != v19)
      {
        v66 = *(JSC::JSObject **)(*(_QWORD *)v65 + 56);
        while (1)
        {
          while (1)
          {
            v25 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C));
            if (v25 != &JSC::JSBoundFunction::s_info && v25 != &JSC::JSRemoteFunction::s_info)
              break;
            v18 = (JSC::JSGlobalObject *)*((_QWORD *)v18 + 4);
          }
          if (*((_BYTE *)v18 + 5) != 61)
          {
            v26 = *(char **)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28);
            goto LABEL_25;
          }
          v63 = (unint64_t)v17;
          if (JSC::ProxyObject::isRevoked(v18))
            break;
          v18 = (JSC::JSGlobalObject *)*((_QWORD *)v18 + 2);
          v17 = (JSC::JSGlobalObject *)v63;
        }
        JSC::throwTypeError(v63, &v66, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
        v26 = 0;
LABEL_25:
        if (*(_DWORD *)(v11 + 80))
        {
          v55 = v26;
          v56 = *(_DWORD *)(v11 + 80);
          if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v26 = v55;
          if (*(_QWORD *)(v11 + 16))
            goto LABEL_56;
        }
        v27 = v64;
        v28 = *(JSC::InternalFunction **)v65;
        v29 = *((_QWORD *)v26 + 231);
        if ((v29 & 1) == 0)
          goto LABEL_39;
        v30 = *(uint64_t (**)(JSC::JSObject **))(v29 & 0xFFFFFFFFFFFFFFFCLL);
        v31 = (JSC::JSObject **)((unint64_t)v26 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v26 & 8) != 0)
          v31 = (JSC::JSObject **)(v26 - 16);
        v32 = *v31;
        v33 = (JSC::JSGlobalObject **)(v26 + 1848);
LABEL_60:
        v66 = v32;
        v67 = (JSC *)v26;
        v68 = v33;
        v61 = v27;
        v54 = v30(&v66);
        v27 = v61;
        v29 = v54;
LABEL_39:
        SubclassStructure = (uint64_t)JSC::InternalFunction::createSubclassStructure(v28, v27, (JSC::JSObject *)v29, a4, a5, a6, a7, a8);
        goto LABEL_10;
      }
      v21 = *(_QWORD *)(*(_QWORD *)v65 + 1848);
      if ((v21 & 1) == 0)
        goto LABEL_11;
      v40 = *(uint64_t (**)(JSC::JSObject **, JSC *, JSC::CallFrame *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
      v41 = (JSC::JSObject **)(*(_QWORD *)v65 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v65[0] & 8) != 0)
        v41 = (JSC::JSObject **)(*(_QWORD *)v65 - 16);
      v66 = *v41;
      v67 = *(JSC **)v65;
      v68 = (JSC::JSGlobalObject **)(*(_QWORD *)v65 + 1848);
      SubclassStructure = v40(&v66, v10, a3);
    }
    else
    {
      if (v64 != v19)
      {
        v66 = *(JSC::JSObject **)(*(_QWORD *)v65 + 56);
        while (1)
        {
          while (1)
          {
            v39 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C));
            if (v39 != &JSC::JSBoundFunction::s_info && v39 != &JSC::JSRemoteFunction::s_info)
              break;
            v18 = (JSC::JSGlobalObject *)*((_QWORD *)v18 + 4);
          }
          if (*((_BYTE *)v18 + 5) != 61)
          {
            v26 = *(char **)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28);
            goto LABEL_37;
          }
          v62 = (unint64_t)v17;
          if (JSC::ProxyObject::isRevoked(v18))
            break;
          v18 = (JSC::JSGlobalObject *)*((_QWORD *)v18 + 2);
          v17 = (JSC::JSGlobalObject *)v62;
        }
        JSC::throwTypeError(v62, &v66, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
        v26 = 0;
LABEL_37:
        if (*(_DWORD *)(v11 + 80))
        {
          v51 = v26;
          v52 = *(_DWORD *)(v11 + 80);
          if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v26 = v51;
          if (*(_QWORD *)(v11 + 16))
          {
LABEL_56:
            v21 = 0;
            goto LABEL_11;
          }
        }
        v27 = v64;
        v28 = *(JSC::InternalFunction **)v65;
        v29 = *((_QWORD *)v26 + 229);
        if ((v29 & 1) == 0)
          goto LABEL_39;
        v30 = *(uint64_t (**)(JSC::JSObject **))(v29 & 0xFFFFFFFFFFFFFFFCLL);
        v53 = (JSC::JSObject **)((unint64_t)v26 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v26 & 8) != 0)
          v53 = (JSC::JSObject **)(v26 - 16);
        v32 = *v53;
        v33 = (JSC::JSGlobalObject **)(v26 + 1832);
        goto LABEL_60;
      }
      SubclassStructure = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)8>(*(uint64_t *)v65);
    }
LABEL_10:
    v21 = SubclassStructure;
LABEL_11:
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return 0;
    }
    if (v14 < 3 || (v66 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v66 == (JSC::JSObject *)10))
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v22 = JSC::JSValue::toTypedArrayIndex(&v66, *(JSC::JSGlobalObject **)v65, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v34, v35, v36, v37, v38, a7, a8))
      {
        return 0;
      }
      v23 = 1;
    }
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(*(JSC::VM ***)v65, v21, v15, v16, v22, v23, a7, a8, (__n128)a9);
  }
  if (v12 != *((JSC::JSGlobalObject **)a2 + 3))
  {
    v66 = (JSC::JSObject *)v11;
    v67 = (JSC *)v65;
    v68 = &v64;
    v60 = JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v66, this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_72:
    v21 = (uint64_t)v60;
    goto LABEL_46;
  }
  v21 = *(_QWORD *)(this + 1832);
  if ((v21 & 1) != 0)
  {
    v58 = *(uint64_t (**)(JSC::JSObject **))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    v59 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v59 = (JSC::JSObject **)(this - 16);
    v66 = *v59;
    v67 = (JSC *)this;
    v68 = (JSC::JSGlobalObject **)(this + 1832);
    v60 = (JSC::JSObject *)v58(&v66);
    goto LABEL_72;
  }
LABEL_46:
  if (!*(_DWORD *)(v11 + 80))
  {
    v22 = 0;
    v23 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(*(JSC::VM ***)v65, v21, v15, v16, v22, v23, a7, a8, (__n128)a9);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v22 = 0;
  v23 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(*(JSC::VM ***)v65, v21, v15, v16, v22, v23, a7, a8, (__n128)a9);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  JSC::JSObject **v44;
  uint64_t v45;
  int v46;
  int v47;
  JSC::JSObject **v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  JSC::JSObject *v55[15];
  char __s[3];
  _BYTE v57[31];

  *(_QWORD *)&v57[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v52 = v16 - 1;
      v53 = v15 + 1;
      while (v52)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v54 = *v53 - 48;
        if (v54 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v54, 10 * v28);
        v28 = v54 + 10 * v28;
        --v52;
        ++v53;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
        {
LABEL_74:
          v55[0] = (JSC::JSObject *)a4;
          if (!(a4 >> 49))
            JSC::JSValue::toNumberSlowCase(v55, a2, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
          return 1;
        }
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v57;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(v55, __s, v41);
  *((_BYTE *)v55 + v41) = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = v55;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *(unsigned __int8 *)v48;
        v48 = (JSC::JSObject **)((char *)v48 + 1);
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = v55;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *(unsigned __int8 *)v44;
      v44 = (JSC::JSObject **)((char *)v44 + 1);
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!*((_BYTE *)v55 + v42))
    goto LABEL_74;
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 8 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 3;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 8 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 3;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  BOOL v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  size_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t result;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  int v71;
  _WORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  const WTF::StringImpl *v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v98[31];

  *(_QWORD *)&v98[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_13;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v86 = *v13 - 48, v86 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_152:
      v19 = 0;
      v87 = 0;
      v16 = 0;
    }
    else
    {
      v90 = v14 - 1;
      v91 = v13 + 1;
      while (v90)
      {
        if (v86 > 0x19999999)
          goto LABEL_152;
        v92 = *v91 - 48;
        if (v92 > 9)
          goto LABEL_152;
        v19 = 0;
        v87 = 0;
        v16 = 0;
        v38 = __CFADD__(v92, 10 * v86);
        v86 = v92 + 10 * v86;
        --v90;
        ++v91;
        if (v38)
          goto LABEL_153;
      }
      if (v86 == -1)
        v19 = 0;
      else
        v19 = v86 & 0xFFFFFF00;
      if (v86 == -1)
        v87 = 0;
      else
        v87 = v86;
      if (v86 == -1)
        v16 = 0;
      else
        v16 = 0x100000000;
    }
LABEL_153:
    v18 = v87;
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v34 = v14 > 1) : (v34 = 0), v34))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v35 = (unsigned __int16 *)(v13 + 2);
      v36 = v14 - 1;
      while (v36)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v37 = *v35 - 48;
        if (v37 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v38 = __CFADD__(v37, 10 * v15);
        v15 = v37 + 10 * v15;
        ++v35;
        --v36;
        if (v38)
          goto LABEL_7;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_7:
    v19 = v17;
  }
  if ((v16 & 0x100000000) != 0)
    return JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::getOwnPropertySlotByIndex(a1, a2, v18 | v19, a4);
  if (!(_DWORD)v14)
    goto LABEL_13;
  if ((v12 & 4) != 0)
  {
    v20 = *v13;
    if ((_DWORD)v14 == 1)
    {
LABEL_12:
      if ((v20 - 48) < 0xA)
        return 0;
      goto LABEL_13;
    }
    if (v20 == 45)
    {
      v20 = v13[1];
      goto LABEL_27;
    }
    if ((v20 - 48) < 0xA)
      goto LABEL_42;
    if ((_DWORD)v14 == 8)
    {
LABEL_82:
      if (v20 != 73)
        goto LABEL_13;
      goto LABEL_42;
    }
  }
  else
  {
    v20 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_12;
    if (v20 == 45)
    {
      v20 = *((unsigned __int16 *)v13 + 1);
LABEL_27:
      if ((v20 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_42;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_13;
      goto LABEL_82;
    }
    if ((v20 - 48) < 0xA || (_DWORD)v14 == 8 && v20 == 73)
      goto LABEL_42;
  }
  if ((_DWORD)v14 != 3 || v20 != 78)
    goto LABEL_13;
LABEL_42:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v40 = (v39 >> 52) & 0x7FF;
  if ((_DWORD)v40 == 2047)
  {
    if ((v39 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v41 = v98;
    }
    else
    {
      v70 = __s;
      if ((v39 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v70 = &__s[1];
      }
      *(_QWORD *)v70 = 0x7974696E69666E49;
      v41 = v70 + 8;
    }
    goto LABEL_55;
  }
  v42 = v39 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v39 & 0x8000000000000000) != 0 && v42)
  {
    __s[0] = 45;
    v43 = &__s[1];
  }
  else
  {
    v43 = __s;
    if (!v42)
    {
      v41 = &__s[1];
      __s[0] = 48;
      goto LABEL_55;
    }
  }
  v44 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v39 & 0x800FFFFFFFFFFFFFLL, v40);
  v41 = WTF::dragonbox::detail::to_shortest(v44, v45, (uint64_t)v43, v46);
LABEL_55:
  *v41 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          goto LABEL_13;
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        goto LABEL_13;
      v49 += 2;
    }
    while (--v51);
  }
  if (!__dst[v48])
    return 0;
LABEL_13:
  v21 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_105;
  v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    goto LABEL_105;
  v23 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v23)
  {
    v58 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v58 || *(_BYTE *)(v58 + 5) != 1 && *(_DWORD *)(v58 + 80) < 2u)
      goto LABEL_105;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v23)
      goto LABEL_105;
  }
  if (!*(_DWORD *)(v23 + 24))
    goto LABEL_105;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(unsigned int *)(v23 + 8);
  v27 = *(_DWORD *)(a3 + 16);
  if ((v24 & 1) != 0)
  {
    if ((v27 & 0x20) != 0)
      v27 = *(_DWORD *)(a3 + 32);
    v28 = *(_DWORD *)(v23 + 12);
    v29 = (v27 >> 8) & *(_QWORD *)&v28;
    v30 = *(unsigned __int8 *)(v25 + v29);
    if (*(_BYTE *)(v25 + v29))
    {
      v31 = v25 + v26;
      v32 = 1;
      while (1)
      {
        v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
        if (a3 == (v33 & 0xFFFFFFFFFFFFLL))
          break;
        v29 = ((_DWORD)v29 + v32) & v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        ++v32;
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_105;
      }
      a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      goto LABEL_74;
    }
LABEL_105:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v21, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v71 = *(_DWORD *)(a3 + 16);
    if ((v71 & 0x20) == 0)
    {
      v72 = *(_WORD **)(a3 + 8);
      v73 = *(unsigned int *)(a3 + 4);
      if ((v71 & 4) == 0)
      {
        if ((_DWORD)v73)
        {
          v74 = (unsigned __int16)*v72 - 48;
          if (v74 <= 9 && (*v72 != 48 || v73 <= 1))
          {
            v78 = v72 + 1;
            v79 = v73 - 1;
            while (v79)
            {
              if (v74 > 0x19999999)
                goto LABEL_110;
              v80 = *v78 - 48;
              if (v80 > 9)
                goto LABEL_110;
              v75 = 0;
              LODWORD(v73) = 0;
              v76 = 0;
              v38 = __CFADD__(v80, 10 * v74);
              v74 = v80 + 10 * v74;
              ++v78;
              --v79;
              if (v38)
                goto LABEL_112;
            }
            v75 = 0x100000000;
            if (v74 == -1)
            {
              v75 = 0;
              LODWORD(v73) = 0;
            }
            else
            {
              LODWORD(v73) = v74;
            }
            if (v74 == -1)
              v76 = 0;
            else
              v76 = v74 & 0xFFFFFF00;
            goto LABEL_112;
          }
LABEL_110:
          v75 = 0;
          LODWORD(v73) = 0;
        }
        else
        {
          v75 = 0;
        }
        v76 = 0;
LABEL_112:
        v77 = (const WTF::StringImpl *)(v76 | v73);
        goto LABEL_113;
      }
      if ((_DWORD)v73)
      {
        v88 = *(unsigned __int8 *)v72 - 48;
        if (v88 <= 9 && (v73 < 2 || *(_BYTE *)v72 != 48))
        {
          v93 = v73 - 1;
          v94 = (unsigned __int8 *)v72 + 1;
          while (v93)
          {
            if (v88 > 0x19999999)
              goto LABEL_156;
            v95 = *v94 - 48;
            if (v95 > 9)
              goto LABEL_156;
            LODWORD(v73) = 0;
            v89 = 0;
            v75 = 0;
            v38 = __CFADD__(v95, 10 * v88);
            v88 = v95 + 10 * v88;
            --v93;
            ++v94;
            if (v38)
              goto LABEL_158;
          }
          if (v88 == -1)
            LODWORD(v73) = 0;
          else
            LODWORD(v73) = v88 & 0xFFFFFF00;
          if (v88 == -1)
            v89 = 0;
          else
            v89 = v88;
          if (v88 == -1)
            v75 = 0;
          else
            v75 = 0x100000000;
          goto LABEL_158;
        }
LABEL_156:
        LODWORD(v73) = 0;
      }
      v89 = 0;
      v75 = 0;
LABEL_158:
      v77 = (const WTF::StringImpl *)(v89 | v73);
LABEL_113:
      if ((v75 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v77, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  if ((v27 & 0x20) != 0)
    v27 = *(_DWORD *)(a3 + 32);
  v64 = *(_DWORD *)(v23 + 12);
  v65 = v64 & (v27 >> 8);
  v66 = *(_DWORD *)(v25 + 4 * v65);
  if (!v66)
    goto LABEL_105;
  v67 = v25 + 4 * v26;
  v68 = 1;
  while (1)
  {
    v69 = (v66 - 1);
    if (*(_QWORD *)(v67 + 16 * v69) == a3)
      break;
    v65 = (v65 + v68) & v64;
    v66 = *(_DWORD *)(v25 + 4 * v65);
    ++v68;
    if (!v66)
      goto LABEL_105;
  }
  a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
LABEL_74:
  if ((_DWORD)a6 == -1)
    goto LABEL_105;
  if ((int)a6 <= 63)
  {
    v59 = a1 + 16;
    v60 = a6 << 32;
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 8) - 8;
    v60 = 0x3F00000000 - (a6 << 32);
  }
  v61 = *(_QWORD *)(v59 + (v60 >> 29));
  if ((v61 & 0xFFFE000000000002) != 0)
    goto LABEL_80;
  v62 = *(unsigned __int8 *)(v61 + 5);
  if (v62 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v21, a4, v61, SHIDWORD(a6), a6);
    return 1;
  }
  if (v62 != 6)
  {
LABEL_80:
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v81 = *(_DWORD *)(v22 + 16) & 3;
  v83 = *(_QWORD *)(v61 + 8);
  v82 = *(_QWORD *)(v61 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C)))
  {
    v85 = *(_QWORD *)(v61 + 24);
    v84 = *(_QWORD *)(v61 + 32);
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v85;
    *(_QWORD *)(a4 + 80) = v84;
  }
  else
  {
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > (unint64_t)a3)
      goto LABEL_8;
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 8 * v10 > v8)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (a3 >= (v8 - v9) >> 3)
      return 0;
  }
  else if (v10 <= a3)
  {
    return 0;
  }
LABEL_8:
  v5 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)a4 = *(_QWORD *)(v5 + 8 * a3) + 0x2000000000000;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD0140);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 8 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 3)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACFC64);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACFCE0);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACFD18);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198ACFD50);
    }
    goto LABEL_61;
  }
  v33 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 8 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = 8 * *(_QWORD *)(a1 + 24);
  while (1)
  {
    v22 = *v16;
    if ((v22 & 0xC0) != 0x40)
      break;
    v23 = __ldxr(v16);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xBF, v16))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
LABEL_19:
  if (v20 == 16)
  {
    if (v19)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v19, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    if ((v20 - 136) <= 5 && v20 != 137)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD03C8);
    }
    if (v20 == 48 && *(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v21;
      v24 = *(_QWORD *)(a2 + 160);
      v25 = __CFADD__(v24, v21);
      v26 = v24 + v21;
      if (v25)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v26;
    }
  }
}

void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198AD05C0);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 8 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AD0550);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getFloat64ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedFloat64ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Float64Adaptor>::s_info;
}

JSC::Exception *JSC::callFloat64Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Float64Array", 13);
}

uint64_t JSC::constructFloat64Array(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::JSObject *v42;
  uint64_t (*v43)(JSC::JSObject **);
  JSC::JSObject **v44;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v46;
  int v47[2];
  JSC::JSObject *v48;
  int *v49;
  char *v50;

  v10 = (JSC *)this;
  v11 = *(JSC::JSObject **)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  v46 = v12;
  *(_QWORD *)v47 = this;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      v33 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)9>(this);
    }
    else
    {
      v48 = v11;
      v49 = v47;
      v50 = (char *)&v46;
      v33 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v41 = v33;
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v34, v35, v36, v37, v38, v39, v40))
      return JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create(*(JSC::JSGlobalObject **)v47, v41, 0, v36, v37, v38, v39, v40);
    return 0;
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v48 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v48, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v46 == v17)
      {
        v27 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)9>(*(uint64_t *)v47);
      }
      else
      {
        v48 = v11;
        v49 = v47;
        v50 = (char *)&v46;
        v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v48, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v46 == v17)
    {
      v27 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)9>(*(uint64_t *)v47);
    }
    else
    {
      v48 = v11;
      v49 = v47;
      v50 = (char *)&v46;
      v27 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v27;
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v28, v29, v30, v31, v32, a7, a8))
      return 0;
    if (v14 < 3 || (v48 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v48 == (JSC::JSObject *)10))
    {
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = JSC::JSValue::toTypedArrayIndex(&v48, *(JSC::JSGlobalObject **)v47, (uint64_t)"length", 7, v31, v32, a7, a8, a9);
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v22, v23, v24, v25, v26, a7, a8))
        return 0;
      v20 = 1;
    }
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  }
  if (v12 == *((_QWORD *)a2 + 3))
  {
    v18 = *(_QWORD *)(this + 1856);
    if ((v18 & 1) == 0)
      goto LABEL_29;
    v43 = *(uint64_t (**)(JSC::JSObject **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v44 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v44 = (JSC::JSObject **)(this - 16);
    v48 = *v44;
    v49 = (int *)this;
    v50 = (char *)(this + 1856);
    v42 = (JSC::JSObject *)v43(&v48);
  }
  else
  {
    v48 = v11;
    v49 = v47;
    v50 = (char *)&v46;
    v42 = JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v48, this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v18 = (uint64_t)v42;
LABEL_29:
  if (!*((_DWORD *)v11 + 20))
  {
    v19 = 0;
    v20 = 0;
    v16 = 0;
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = 0;
  v20 = 0;
  v16 = 0;
  result = 0;
  if (!hasExceptionsAfterHandlingTraps)
    return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(*(JSC::VM ***)v47, v18, v15, v16, v19, v20, a7, a8, (__n128)a9);
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  JSC::Structure **v44;
  uint64_t v45;
  int v46;
  int v47;
  JSC::Structure **v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  JSC::Structure *v63[15];
  char __s[3];
  _BYTE v65[31];

  *(_QWORD *)&v65[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v60 = v16 - 1;
      v61 = v15 + 1;
      while (v60)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v62 = *v61 - 48;
        if (v62 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v62, 10 * v28);
        v28 = v62 + 10 * v28;
        --v60;
        ++v61;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v65;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(v63, __s, v41);
  *((_BYTE *)v63 + v41) = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = v63;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *(unsigned __int8 *)v48;
        v48 = (JSC::Structure **)((char *)v48 + 1);
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = v63;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *(unsigned __int8 *)v44;
      v44 = (JSC::Structure **)((char *)v44 + 1);
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!*((_BYTE *)v63 + v42))
  {
LABEL_74:
    v63[0] = a4;
    v52 = *((_QWORD *)a2 + 7);
    JSC::JSValue::toBigInt(v63, a2, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    if (*(_DWORD *)(v52 + 80))
    {
      v59 = *(_DWORD *)(v52 + 80);
      if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v52 + 64), 7u, v53, v54, v55, v56, v57, v58);
    }
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 8 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 3;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 8 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 3;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t result;
  unsigned int v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  int v49;
  JSC::VM *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  _WORD *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned int v82;
  const WTF::StringImpl *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v100[31];

  *(_QWORD *)&v100[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, a2[7], 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_74;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v26 = *v13 - 48, v26 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_29:
      v24 = 0;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v92 = v14 - 1;
      v93 = v13 + 1;
      while (v92)
      {
        if (v26 > 0x19999999)
          goto LABEL_29;
        v94 = *v93 - 48;
        if (v94 > 9)
          goto LABEL_29;
        v24 = 0;
        v27 = 0;
        v28 = 0;
        v23 = __CFADD__(v94, 10 * v26);
        v26 = v94 + 10 * v26;
        --v92;
        ++v93;
        if (v23)
          goto LABEL_30;
      }
      if (v26 == -1)
        v24 = 0;
      else
        v24 = v26 & 0xFFFFFF00;
      if (v26 == -1)
        v27 = 0;
      else
        v27 = v26;
      if (v26 == -1)
        v28 = 0;
      else
        v28 = 0x100000000;
    }
LABEL_30:
    v18 = v27;
    if ((v28 & 0x100000000) != 0)
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::getOwnPropertySlotByIndex(a1, (JSC::JSBigInt *)a2, v18 | v24, a4, a5, a6, a7, a8);
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = (unsigned __int16 *)(v13 + 2);
      v21 = v14 - 1;
      while (v21)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v20 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        ++v20;
        --v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::getOwnPropertySlotByIndex(a1, (JSC::JSBigInt *)a2, v18 | v24, a4, a5, a6, a7, a8);
  }
  if (!(_DWORD)v14)
    goto LABEL_74;
  if ((v12 & 4) != 0)
  {
    v29 = *v13;
    if ((_DWORD)v14 == 1)
    {
LABEL_34:
      if ((v29 - 48) < 0xA)
        return 0;
      goto LABEL_74;
    }
    if (v29 == 45)
    {
      v29 = v13[1];
      goto LABEL_38;
    }
    if ((v29 - 48) < 0xA)
      goto LABEL_49;
    if ((_DWORD)v14 == 8)
    {
LABEL_48:
      if (v29 != 73)
        goto LABEL_74;
      goto LABEL_49;
    }
  }
  else
  {
    v29 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_34;
    if (v29 == 45)
    {
      v29 = *((unsigned __int16 *)v13 + 1);
LABEL_38:
      if ((v29 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_49;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_74;
      goto LABEL_48;
    }
    if ((v29 - 48) < 0xA || (_DWORD)v14 == 8 && v29 == 73)
      goto LABEL_49;
  }
  if ((_DWORD)v14 != 3 || v29 != 78)
    goto LABEL_74;
LABEL_49:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v31 = (v30 >> 52) & 0x7FF;
  if ((_DWORD)v31 == 2047)
  {
    if ((v30 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v32 = v100;
    }
    else
    {
      v38 = __s;
      if ((v30 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v38 = &__s[1];
      }
      *(_QWORD *)v38 = 0x7974696E69666E49;
      v32 = v38 + 8;
    }
    goto LABEL_61;
  }
  v33 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v30 & 0x8000000000000000) != 0 && v33)
  {
    __s[0] = 45;
    v34 = &__s[1];
  }
  else
  {
    v34 = __s;
    if (!v33)
    {
      v32 = &__s[1];
      __s[0] = 48;
      goto LABEL_61;
    }
  }
  v35 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v30 & 0x800FFFFFFFFFFFFFLL, v31);
  v32 = WTF::dragonbox::detail::to_shortest(v35, v36, (uint64_t)v34, v37);
LABEL_61:
  *v32 = 0;
  v39 = strlen(__s);
  memcpy(__dst, __s, v39);
  __dst[v39] = 0;
  v40 = *(unsigned int *)(a3 + 4);
  v41 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v40)
    {
      v46 = __dst;
      v47 = *(unsigned int *)(a3 + 4);
      do
      {
        v49 = *v46++;
        v48 = v49;
        if (!v49 || *v41 != v48)
          goto LABEL_74;
        ++v41;
      }
      while (--v47);
    }
  }
  else if ((_DWORD)v40)
  {
    v42 = __dst;
    v43 = *(unsigned int *)(a3 + 4);
    do
    {
      v45 = *v42++;
      v44 = v45;
      if (!v45 || *(unsigned __int16 *)v41 != v44)
        goto LABEL_74;
      v41 += 2;
    }
    while (--v43);
  }
  if (!__dst[v40])
    return 0;
LABEL_74:
  v50 = a2[7];
  if (!(a3 >> 4))
    goto LABEL_108;
  v51 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v51 + 0x20)) != 0)
    goto LABEL_108;
  v52 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v52)
  {
    v53 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v53 || *(_BYTE *)(v53 + 5) != 1 && *(_DWORD *)(v53 + 80) < 2u)
      goto LABEL_108;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7], 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v52)
      goto LABEL_108;
  }
  if (!*(_DWORD *)(v52 + 24))
    goto LABEL_108;
  v54 = *(_QWORD *)(v52 + 16);
  v55 = v54 & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(unsigned int *)(v52 + 8);
  v57 = *(_DWORD *)(a3 + 16);
  if ((v54 & 1) != 0)
  {
    if ((v57 & 0x20) != 0)
      v57 = *(_DWORD *)(a3 + 32);
    v58 = *(_DWORD *)(v52 + 12);
    v59 = (v57 >> 8) & *(_QWORD *)&v58;
    v60 = *(unsigned __int8 *)(v55 + v59);
    if (*(_BYTE *)(v55 + v59))
    {
      v61 = v55 + v56;
      v62 = 1;
      while (1)
      {
        v63 = *(_QWORD *)(v61 + 8 * (v60 - 1));
        if (a3 == (v63 & 0xFFFFFFFFFFFFLL))
          break;
        v59 = ((_DWORD)v59 + v62) & v58;
        v60 = *(unsigned __int8 *)(v55 + v59);
        ++v62;
        if (!*(_BYTE *)(v55 + v59))
          goto LABEL_108;
      }
      a6 = (v63 >> 16) & 0xFF00000000 | HIBYTE(v63);
      goto LABEL_98;
    }
LABEL_108:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v50, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v74 = *(_DWORD *)(a3 + 16);
    if ((v74 & 0x20) == 0)
    {
      v75 = *(_WORD **)(a3 + 8);
      v76 = *(unsigned int *)(a3 + 4);
      if ((v74 & 4) == 0)
      {
        if ((_DWORD)v76)
        {
          v77 = (unsigned __int16)*v75 - 48;
          if (v77 <= 9 && (*v75 != 48 || v76 <= 1))
          {
            v80 = v75 + 1;
            v81 = v76 - 1;
            while (v81)
            {
              if (v77 > 0x19999999)
                goto LABEL_113;
              v82 = *v80 - 48;
              if (v82 > 9)
                goto LABEL_113;
              v78 = 0;
              LODWORD(v76) = 0;
              v79 = 0;
              v23 = __CFADD__(v82, 10 * v77);
              v77 = v82 + 10 * v77;
              ++v80;
              --v81;
              if (v23)
                goto LABEL_129;
            }
            v78 = 0x100000000;
            if (v77 == -1)
            {
              v78 = 0;
              LODWORD(v76) = 0;
            }
            else
            {
              LODWORD(v76) = v77;
            }
            if (v77 == -1)
              v79 = 0;
            else
              v79 = v77 & 0xFFFFFF00;
LABEL_129:
            v83 = (const WTF::StringImpl *)(v79 | v76);
            if ((v78 & 0x100000000) == 0)
              return 0;
            return JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, v83, a4, a5, a6, a7, a8);
          }
LABEL_113:
          v78 = 0;
          LODWORD(v76) = 0;
        }
        else
        {
          v78 = 0;
        }
        v79 = 0;
        goto LABEL_129;
      }
      if ((_DWORD)v76)
      {
        v89 = *(unsigned __int8 *)v75 - 48;
        if (v89 <= 9 && (v76 < 2 || *(_BYTE *)v75 != 48))
        {
          v95 = v76 - 1;
          v96 = (unsigned __int8 *)v75 + 1;
          while (v95)
          {
            if (v89 > 0x19999999)
              goto LABEL_150;
            v97 = *v96 - 48;
            if (v97 > 9)
              goto LABEL_150;
            LODWORD(v76) = 0;
            v90 = 0;
            v91 = 0;
            v23 = __CFADD__(v97, 10 * v89);
            v89 = v97 + 10 * v89;
            --v95;
            ++v96;
            if (v23)
              goto LABEL_152;
          }
          if (v89 == -1)
            LODWORD(v76) = 0;
          else
            LODWORD(v76) = v89 & 0xFFFFFF00;
          if (v89 == -1)
            v90 = 0;
          else
            v90 = v89;
          if (v89 == -1)
            v91 = 0;
          else
            v91 = 0x100000000;
LABEL_152:
          v83 = (const WTF::StringImpl *)(v90 | v76);
          if ((v91 & 0x100000000) == 0)
            return 0;
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, v83, a4, a5, a6, a7, a8);
        }
LABEL_150:
        LODWORD(v76) = 0;
      }
      v90 = 0;
      v91 = 0;
      goto LABEL_152;
    }
    return 0;
  }
  if ((v57 & 0x20) != 0)
    v57 = *(_DWORD *)(a3 + 32);
  v64 = *(_DWORD *)(v52 + 12);
  v65 = v64 & (v57 >> 8);
  v66 = *(_DWORD *)(v55 + 4 * v65);
  if (!v66)
    goto LABEL_108;
  v67 = v55 + 4 * v56;
  v68 = 1;
  while (1)
  {
    v69 = (v66 - 1);
    if (*(_QWORD *)(v67 + 16 * v69) == a3)
      break;
    v65 = (v65 + v68) & v64;
    v66 = *(_DWORD *)(v55 + 4 * v65);
    ++v68;
    if (!v66)
      goto LABEL_108;
  }
  a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
LABEL_98:
  if ((_DWORD)a6 == -1)
    goto LABEL_108;
  if ((int)a6 <= 63)
  {
    v70 = a1 + 16;
    v71 = a6 << 32;
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 8) - 8;
    v71 = 0x3F00000000 - (a6 << 32);
  }
  v72 = *(_QWORD *)(v70 + (v71 >> 29));
  if ((v72 & 0xFFFE000000000002) != 0)
    goto LABEL_105;
  v73 = *(unsigned __int8 *)(v72 + 5);
  if (v73 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v50, a4, v72, SHIDWORD(a6), a6);
    return 1;
  }
  if (v73 != 6)
  {
LABEL_105:
    *(_QWORD *)a4 = v72;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v84 = *(_DWORD *)(v51 + 16) & 3;
  v86 = *(_QWORD *)(v72 + 8);
  v85 = *(_QWORD *)(v72 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C)))
  {
    v88 = *(_QWORD *)(v72 + 24);
    v87 = *(_QWORD *)(v72 + 32);
    *(_QWORD *)a4 = v86;
    *(_QWORD *)(a4 + 8) = v85;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v84 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v88;
    *(_QWORD *)(a4 + 80) = v87;
  }
  else
  {
    *(_QWORD *)a4 = v86;
    *(_QWORD *)(a4 + 8) = v85;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v84 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, JSC::JSBigInt *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v10 = *((_QWORD *)this + 7);
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v21 + 64) && (v26 = *(_QWORD *)(v21 + 32)) != 0)
      v22 = *(_QWORD *)(v26 + 32);
    else
      v22 = *(_QWORD *)(v21 + 48);
    v24 = *(_QWORD *)(a1 + 24);
    v23 = *(_QWORD *)(a1 + 32);
    if (v23 + 8 * v24 > v22)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (a3 >= (v22 - v23) >> 3)
        return 0;
    }
    else if (v24 <= a3)
    {
      return 0;
    }
  }
  else if (*(_QWORD *)(a1 + 24) <= (unint64_t)a3)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v13 = JSC::JSBigInt::createFrom(this, *(_QWORD *)(v12 + 8 * a3), a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_12;
  v25 = *(_DWORD *)(v10 + 80);
  if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
  {
    v27 = v13;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    v13 = v27;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_12:
    *(_QWORD *)a4 = v13;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return result;
  }
  return 0;
}

void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  JSC::Structure *v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD275CLL);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 8 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 3)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD2280);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD22FCLL);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD2334);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD236CLL);
    }
    goto LABEL_61;
  }
  v33 = *(JSC::Structure **)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 8 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = 8 * *(_QWORD *)(a1 + 24);
  while (1)
  {
    v22 = *v16;
    if ((v22 & 0xC0) != 0x40)
      break;
    v23 = __ldxr(v16);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xBF, v16))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
LABEL_19:
  if (v20 == 16)
  {
    if (v19)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v19, v10, v11, v12, v13, v14, v15);
  }
  else if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v21;
      v24 = *(_QWORD *)(a2 + 160);
      v25 = __CFADD__(v24, v21);
      v26 = v24 + v21;
      if (v25)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v26;
    }
  }
  else if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AD29B0);
  }
}

void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198AD2BD8);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 8 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AD2B68);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getBigInt64ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedBigInt64ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::BigInt64Adaptor>::s_info;
}

JSC::Exception *JSC::callBigInt64Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"BigInt64Array", 14);
}

uint64_t JSC::constructBigInt64Array(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  JSC::JSGlobalObject *m;
  char **v19;
  JSC::JSGlobalObject *v20;
  JSC::JSGlobalObject *i;
  char **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(JSC::JSObject **);
  JSC::JSObject **v26;
  JSC::JSObject *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  JSC::JSObject *v31;
  uint64_t v32;
  JSC::JSGlobalObject *j;
  char **v34;
  uint64_t v35;
  uint64_t (*v36)(JSC::JSObject **);
  JSC::JSObject **v37;
  JSC::JSObject *v38;
  char *v39;
  JSC::JSObject *SubclassStructure;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  JSC::JSObject **v48;
  JSC::JSGlobalObject *k;
  char **v50;
  unint64_t v51;
  unint64_t v52;
  JSC::JSObject *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t (*v58)(JSC::JSObject **);
  JSC::JSObject **v59;
  int v60;
  int v61;
  JSC::JSObject **v62;
  uint64_t (*v63)(JSC::JSObject **);
  JSC::JSObject **v64;
  int v65;
  int v66;
  uint64_t (*v67)(JSC::JSObject **);
  JSC::JSObject **v68;
  uint64_t (*v69)(JSC::JSObject **);
  JSC::JSObject **v70;
  JSC::JSGlobalObject *v71;
  JSC::JSGlobalObject *v72;
  unint64_t v73;
  unint64_t v74;
  JSC::JSObject *v75;
  unint64_t v76;
  char *v77;

  v11 = *(_QWORD *)(this + 56);
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 != 1)
  {
    v15 = *((_QWORD *)a2 + 6);
    if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
    {
      if (v14 < 2)
      {
        v16 = 0;
        goto LABEL_18;
      }
      v75 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v75, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_18;
      v17 = *(_DWORD *)(v11 + 80);
      if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v11 + 16))
      {
LABEL_18:
        v20 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 3);
        if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
        {
          if (v12 != v20)
          {
            v75 = *(JSC::JSObject **)(this + 56);
            for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v71 + 2))
            {
              while (1)
              {
                v22 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
                if (v22 != &JSC::JSBoundFunction::s_info && v22 != &JSC::JSRemoteFunction::s_info)
                  break;
                i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
              }
              if (*((_BYTE *)i + 5) != 61)
              {
                v23 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
                goto LABEL_28;
              }
              v71 = i;
              if (JSC::ProxyObject::isRevoked(i))
                break;
            }
            JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
            v23 = 0;
LABEL_28:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_29;
            v56 = *(_DWORD *)(v11 + 80);
            if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
            {
              v73 = v23;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v23 = v73;
            }
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_29:
              v24 = *(_QWORD *)(v23 + 1896);
              if ((v24 & 1) != 0)
              {
                v25 = *(uint64_t (**)(JSC::JSObject **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
                v26 = (JSC::JSObject **)(v23 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v23 & 8) != 0)
                  v26 = (JSC::JSObject **)(v23 - 16);
                v27 = *v26;
                v28 = (char *)(v23 + 1896);
LABEL_111:
                v75 = v27;
                v76 = v23;
                v77 = v28;
                v24 = v25(&v75);
                goto LABEL_53;
              }
              goto LABEL_53;
            }
            goto LABEL_107;
          }
          v35 = *(_QWORD *)(this + 1896);
          if ((v35 & 1) == 0)
          {
LABEL_55:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_151;
            v54 = *(_DWORD *)(v11 + 80);
            if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_151:
              if (v14 < 3 || (v75 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v75 == (JSC::JSObject *)10))
              {
                v41 = 0;
                v42 = 0;
                return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
              }
              v41 = JSC::JSValue::toTypedArrayIndex(&v75, (JSC::JSGlobalObject *)this, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v11 + 80))
                goto LABEL_60;
              v60 = *(_DWORD *)(v11 + 80);
              if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v43, v44, v45, v46, a7, a8);
              if (!*(_QWORD *)(v11 + 16))
              {
LABEL_60:
                v42 = 1;
                return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
              }
            }
            return 0;
          }
          v36 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
          v37 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v37 = (JSC::JSObject **)(this - 16);
          v38 = *v37;
          v39 = (char *)(this + 1896);
        }
        else
        {
          if (v12 != v20)
          {
            v75 = *(JSC::JSObject **)(this + 56);
            for (j = v12; ; j = (JSC::JSGlobalObject *)*((_QWORD *)v72 + 2))
            {
              while (1)
              {
                v34 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x4C));
                if (v34 != &JSC::JSBoundFunction::s_info && v34 != &JSC::JSRemoteFunction::s_info)
                  break;
                j = (JSC::JSGlobalObject *)*((_QWORD *)j + 4);
              }
              if (*((_BYTE *)j + 5) != 61)
              {
                v23 = *(_QWORD *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x28);
                goto LABEL_51;
              }
              v72 = j;
              if (JSC::ProxyObject::isRevoked(j))
                break;
            }
            JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
            v23 = 0;
LABEL_51:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_52;
            v61 = *(_DWORD *)(v11 + 80);
            if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
            {
              v74 = v23;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v23 = v74;
            }
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_52:
              v24 = *(_QWORD *)(v23 + 1880);
              if ((v24 & 1) != 0)
              {
                v25 = *(uint64_t (**)(JSC::JSObject **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
                v62 = (JSC::JSObject **)(v23 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v23 & 8) != 0)
                  v62 = (JSC::JSObject **)(v23 - 16);
                v27 = *v62;
                v28 = (char *)(v23 + 1880);
                goto LABEL_111;
              }
LABEL_53:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v24, a4, a5, a6, a7, a8);
LABEL_54:
              v35 = (uint64_t)SubclassStructure;
              goto LABEL_55;
            }
LABEL_107:
            v35 = 0;
            goto LABEL_55;
          }
          v35 = *(_QWORD *)(this + 1880);
          if ((v35 & 1) == 0)
            goto LABEL_55;
          v36 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
          v48 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v48 = (JSC::JSObject **)(this - 16);
          v38 = *v48;
          v39 = (char *)(this + 1880);
        }
        v75 = v38;
        v76 = this;
        v77 = v39;
        SubclassStructure = (JSC::JSObject *)v36(&v75);
        goto LABEL_54;
      }
      return 0;
    }
    if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
    {
      v35 = *(_QWORD *)(this + 1880);
      if ((v35 & 1) == 0)
        goto LABEL_88;
      v69 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v70 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v70 = (JSC::JSObject **)(this - 16);
      v75 = *v70;
      v76 = this;
      v77 = (char *)(this + 1880);
      v53 = (JSC::JSObject *)v69(&v75);
    }
    else
    {
      v75 = *(JSC::JSObject **)(this + 56);
      for (k = v12; ; k = (JSC::JSGlobalObject *)*((_QWORD *)k + 2))
      {
        while (1)
        {
          v50 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)k & 0xFFFFFFFE) + 0x4C));
          if (v50 != &JSC::JSBoundFunction::s_info && v50 != &JSC::JSRemoteFunction::s_info)
            break;
          k = (JSC::JSGlobalObject *)*((_QWORD *)k + 4);
        }
        if (*((_BYTE *)k + 5) != 61)
        {
          v51 = *(_QWORD *)(16 * (*(_DWORD *)k & 0xFFFFFFFE) + 0x28);
          goto LABEL_80;
        }
        if (JSC::ProxyObject::isRevoked(k))
          break;
      }
      JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
      v51 = 0;
LABEL_80:
      if (*(_DWORD *)(v11 + 80))
      {
        v66 = *(_DWORD *)(v11 + 80);
        if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
        {
          v35 = 0;
          goto LABEL_88;
        }
      }
      v52 = *(_QWORD *)(v51 + 1880);
      if ((v52 & 1) != 0)
      {
        v67 = *(uint64_t (**)(JSC::JSObject **))(v52 & 0xFFFFFFFFFFFFFFFCLL);
        v68 = (JSC::JSObject **)(v51 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v51 & 8) != 0)
          v68 = (JSC::JSObject **)(v51 - 16);
        v75 = *v68;
        v76 = v51;
        v77 = (char *)(v51 + 1880);
        v52 = v67(&v75);
      }
      v53 = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v52, a4, a5, a6, a7, a8);
    }
    v35 = (uint64_t)v53;
LABEL_88:
    if (!*(_DWORD *)(v11 + 80))
    {
      v41 = 0;
      v42 = 0;
      v16 = 0;
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
    }
    v65 = *(_DWORD *)(v11 + 80);
    if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v41 = 0;
    v42 = 0;
    v16 = 0;
    result = 0;
    if (!*(_QWORD *)(v11 + 16))
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
    return result;
  }
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v32 = *(_QWORD *)(this + 1880);
    if ((v32 & 1) == 0)
      goto LABEL_63;
    v63 = *(uint64_t (**)(JSC::JSObject **))(v32 & 0xFFFFFFFFFFFFFFFCLL);
    v64 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v64 = (JSC::JSObject **)(this - 16);
    v75 = *v64;
    v76 = this;
    v77 = (char *)(this + 1880);
    v31 = (JSC::JSObject *)v63(&v75);
LABEL_37:
    v32 = (uint64_t)v31;
    goto LABEL_63;
  }
  v75 = *(JSC::JSObject **)(this + 56);
  for (m = v12; ; m = (JSC::JSGlobalObject *)*((_QWORD *)m + 2))
  {
    while (1)
    {
      v19 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)m & 0xFFFFFFFE) + 0x4C));
      if (v19 != &JSC::JSBoundFunction::s_info && v19 != &JSC::JSRemoteFunction::s_info)
        break;
      m = (JSC::JSGlobalObject *)*((_QWORD *)m + 4);
    }
    if (*((_BYTE *)m + 5) != 61)
    {
      v29 = *(_QWORD *)(16 * (*(_DWORD *)m & 0xFFFFFFFE) + 0x28);
      goto LABEL_34;
    }
    if (JSC::ProxyObject::isRevoked(m))
      break;
  }
  JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v29 = 0;
LABEL_34:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_35;
  v57 = *(_DWORD *)(v11 + 80);
  if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_35:
    v30 = *(_QWORD *)(v29 + 1880);
    if ((v30 & 1) != 0)
    {
      v58 = *(uint64_t (**)(JSC::JSObject **))(v30 & 0xFFFFFFFFFFFFFFFCLL);
      v59 = (JSC::JSObject **)(v29 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v29 & 8) != 0)
        v59 = (JSC::JSObject **)(v29 - 16);
      v75 = *v59;
      v76 = v29;
      v77 = (char *)(v29 + 1880);
      v30 = v58(&v75);
    }
    v31 = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v30, a4, a5, a6, a7, a8);
    goto LABEL_37;
  }
  v32 = 0;
LABEL_63:
  if (*(_DWORD *)(v11 + 80))
  {
    v55 = *(_DWORD *)(v11 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create((JSC::JSGlobalObject *)this, v32, 0, (uint64_t)a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  JSC::Structure **v44;
  uint64_t v45;
  int v46;
  int v47;
  JSC::Structure **v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  JSC::Structure *v63[15];
  char __s[3];
  _BYTE v65[31];

  *(_QWORD *)&v65[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int8 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if (!(_DWORD)v16 || (v28 = *v15 - 48, v28 > 9) || v16 >= 2 && *v15 == 48)
    {
LABEL_28:
      v26 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v60 = v16 - 1;
      v61 = v15 + 1;
      while (v60)
      {
        if (v28 > 0x19999999)
          goto LABEL_28;
        v62 = *v61 - 48;
        if (v62 > 9)
          goto LABEL_28;
        v26 = 0;
        v29 = 0;
        v30 = 0;
        v25 = __CFADD__(v62, 10 * v28);
        v28 = v62 + 10 * v28;
        --v60;
        ++v61;
        if (v25)
          goto LABEL_29;
      }
      if (v28 == -1)
        v26 = 0;
      else
        v26 = v28 & 0xFFFFFF00;
      if (v28 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v28 == -1)
        v30 = 0;
      else
        v30 = 0x100000000;
    }
LABEL_29:
    v20 = v29;
    if ((v30 & 0x100000000) != 0)
      goto LABEL_24;
  }
  else
  {
    if (!(_DWORD)v16
      || (v17 = *(unsigned __int16 *)v15 - 48, v17 > 9)
      || (*(_WORD *)v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v16 - 1;
      v23 = (unsigned __int16 *)(v15 + 2);
      while (v22)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        --v22;
        ++v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
    {
LABEL_24:
      JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex((uint64_t)a1, a2, v20 | v26, a4, a5, a6, a7, a8, (int8x16_t)a9);
      return 1;
    }
  }
  if (!(_DWORD)v16)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((v14 & 4) == 0)
  {
    v31 = *(unsigned __int16 *)v15;
    if ((_DWORD)v16 == 1)
      goto LABEL_33;
    if (v31 == 45)
    {
      v31 = *((unsigned __int16 *)v15 + 1);
LABEL_37:
      if ((v31 - 48) < 0xA)
      {
        if ((_DWORD)v16 == 2)
          goto LABEL_74;
        goto LABEL_48;
      }
      if ((_DWORD)v16 != 9)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_47;
    }
    if ((v31 - 48) < 0xA || (_DWORD)v16 == 8 && v31 == 73)
      goto LABEL_48;
    goto LABEL_43;
  }
  v31 = *v15;
  if ((_DWORD)v16 == 1)
  {
LABEL_33:
    if ((v31 - 48) < 0xA)
      goto LABEL_74;
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (v31 == 45)
  {
    v31 = v15[1];
    goto LABEL_37;
  }
  if ((v31 - 48) < 0xA)
    goto LABEL_48;
  if ((_DWORD)v16 != 8)
  {
LABEL_43:
    if ((_DWORD)v16 != 3 || v31 != 78)
      return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_48;
  }
LABEL_47:
  if (v31 != 73)
    return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_48:
  JSC::jsToNumber(v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
  v33 = (v32 >> 52) & 0x7FF;
  if ((_DWORD)v33 == 2047)
  {
    if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v34 = v65;
    }
    else
    {
      v40 = __s;
      if ((v32 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v40 = &__s[1];
      }
      *(_QWORD *)v40 = 0x7974696E69666E49;
      v34 = v40 + 8;
    }
    goto LABEL_60;
  }
  v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v32 & 0x8000000000000000) != 0 && v35)
  {
    __s[0] = 45;
    v36 = &__s[1];
  }
  else
  {
    v36 = __s;
    if (!v35)
    {
      v34 = &__s[1];
      __s[0] = 48;
      goto LABEL_60;
    }
  }
  v37 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v32 & 0x800FFFFFFFFFFFFFLL, v33);
  v34 = WTF::dragonbox::detail::to_shortest(v37, v38, (uint64_t)v36, v39);
LABEL_60:
  *v34 = 0;
  v41 = strlen(__s);
  memcpy(v63, __s, v41);
  *((_BYTE *)v63 + v41) = 0;
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v42)
    {
      v48 = v63;
      v49 = *(unsigned int *)(a3 + 4);
      do
      {
        v51 = *(unsigned __int8 *)v48;
        v48 = (JSC::Structure **)((char *)v48 + 1);
        v50 = v51;
        if (!v51 || *v43 != v50)
          return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
        ++v43;
      }
      while (--v49);
    }
  }
  else if ((_DWORD)v42)
  {
    v44 = v63;
    v45 = *(unsigned int *)(a3 + 4);
    do
    {
      v47 = *(unsigned __int8 *)v44;
      v44 = (JSC::Structure **)((char *)v44 + 1);
      v46 = v47;
      if (!v47 || *(unsigned __int16 *)v43 != v46)
        return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
      v43 += 2;
    }
    while (--v45);
  }
  if (!*((_BYTE *)v63 + v42))
  {
LABEL_74:
    v63[0] = a4;
    v52 = *((_QWORD *)a2 + 7);
    JSC::JSValue::toBigInt(v63, a2, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    if (*(_DWORD *)(v52 + 80))
    {
      v59 = *(_DWORD *)(v52 + 80);
      if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v52 + 64), 7u, v53, v54, v55, v56, v57, v58);
    }
    return 1;
  }
  return JSC::JSObject::put(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v64[31];

  *(_QWORD *)&v64[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v34 = *v13 - 48, v34 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_46:
      v24 = 0;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v58 = v14 - 1;
      v59 = v13 + 1;
      while (v58)
      {
        if (v34 > 0x19999999)
          goto LABEL_46;
        v60 = *v59 - 48;
        if (v60 > 9)
          goto LABEL_46;
        v24 = 0;
        v35 = 0;
        v36 = 0;
        v23 = __CFADD__(v60, 10 * v34);
        v34 = v60 + 10 * v34;
        --v58;
        ++v59;
        if (v23)
          goto LABEL_47;
      }
      if (v34 == -1)
        v24 = 0;
      else
        v24 = v34 & 0xFFFFFF00;
      if (v34 == -1)
        v35 = 0;
      else
        v35 = v34;
      if (v34 == -1)
        v36 = 0;
      else
        v36 = 0x100000000;
    }
LABEL_47:
    v18 = v35;
    if ((v36 & 0x100000000) != 0)
    {
LABEL_24:
      if ((*(_BYTE *)(a1 + 40) & 8) == 0
        || (v25 = *(_QWORD *)(a1 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v26 = v18 | v24;
        if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
        {
          v27 = *(_QWORD *)(a1 + 24) > v26;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v61 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v61 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v32 + 8 * v33 <= v31)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) == 0)
          {
            v27 = v33 > v26;
LABEL_31:
            v28 = v27;
            return !v28;
          }
          v28 = v26 < (v31 - v32) >> 3;
        }
        else
        {
          v28 = 0;
        }
        return !v28;
      }
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = v14 - 1;
      v21 = (unsigned __int16 *)(v13 + 2);
      while (v20)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        --v20;
        ++v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      goto LABEL_24;
  }
  if (!(_DWORD)v14)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) == 0)
  {
    v37 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_51;
    if (v37 == 45)
    {
      v37 = *((unsigned __int16 *)v13 + 1);
LABEL_55:
      if ((v37 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 1;
        goto LABEL_66;
      }
      if ((_DWORD)v14 != 9)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if ((v37 - 48) < 0xA || (_DWORD)v14 == 8 && v37 == 73)
      goto LABEL_66;
    goto LABEL_61;
  }
  v37 = *v13;
  if ((_DWORD)v14 == 1)
  {
LABEL_51:
    if ((v37 - 48) < 0xA)
      return 1;
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v37 == 45)
  {
    v37 = v13[1];
    goto LABEL_55;
  }
  if ((v37 - 48) < 0xA)
    goto LABEL_66;
  if ((_DWORD)v14 != 8)
  {
LABEL_61:
    if ((_DWORD)v14 != 3 || v37 != 78)
      return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
LABEL_65:
  if (v37 != 73)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_66:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v39 = (v38 >> 52) & 0x7FF;
  if ((_DWORD)v39 != 2047)
  {
    v41 = v38 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v38 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v40 = &__s[1];
        __s[0] = 48;
        goto LABEL_78;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v38 & 0x800FFFFFFFFFFFFFLL, v39);
    v40 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_78;
  }
  if ((v38 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v40 = v64;
  }
  else
  {
    v46 = __s;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v46 = &__s[1];
    }
    *(_QWORD *)v46 = 0x7974696E69666E49;
    v40 = v46 + 8;
  }
LABEL_78:
  *v40 = 0;
  v47 = strlen(__s);
  memcpy(__dst, __s, v47);
  __dst[v47] = 0;
  v48 = *(unsigned int *)(a3 + 4);
  v49 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      v54 = __dst;
      v55 = *(unsigned int *)(a3 + 4);
      do
      {
        v57 = *v54++;
        v56 = v57;
        if (!v57 || *v49 != v56)
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        ++v49;
      }
      while (--v55);
    }
  }
  else if ((_DWORD)v48)
  {
    v50 = __dst;
    v51 = *(unsigned int *)(a3 + 4);
    do
    {
      v53 = *v50++;
      v52 = v53;
      if (!v53 || *(unsigned __int16 *)v49 != v52)
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      v49 += 2;
    }
    while (--v51);
  }
  if (__dst[v48])
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::deletePropertyByIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v5 = *(_QWORD *)(a1 + 24) > (unint64_t)a3;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v7 + 64) && (v11 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v11 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 + 8 * v10 <= v8)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      v5 = v10 > a3;
LABEL_10:
      v6 = v5;
      return !v6;
    }
    v6 = a3 < (v8 - v9) >> 3;
  }
  else
  {
    v6 = 0;
  }
  return !v6;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t result;
  unsigned int v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  int v49;
  JSC::VM *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  _WORD *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned int v82;
  const WTF::StringImpl *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  _BYTE __dst[124];
  char __s[3];
  _BYTE v100[31];

  *(_QWORD *)&v100[23] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, a2[7], 0, a4);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_74;
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14 || (v26 = *v13 - 48, v26 > 9) || v14 >= 2 && *v13 == 48)
    {
LABEL_29:
      v24 = 0;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v92 = v14 - 1;
      v93 = v13 + 1;
      while (v92)
      {
        if (v26 > 0x19999999)
          goto LABEL_29;
        v94 = *v93 - 48;
        if (v94 > 9)
          goto LABEL_29;
        v24 = 0;
        v27 = 0;
        v28 = 0;
        v23 = __CFADD__(v94, 10 * v26);
        v26 = v94 + 10 * v26;
        --v92;
        ++v93;
        if (v23)
          goto LABEL_30;
      }
      if (v26 == -1)
        v24 = 0;
      else
        v24 = v26 & 0xFFFFFF00;
      if (v26 == -1)
        v27 = 0;
      else
        v27 = v26;
      if (v26 == -1)
        v28 = 0;
      else
        v28 = 0x100000000;
    }
LABEL_30:
    v18 = v27;
    if ((v28 & 0x100000000) != 0)
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::getOwnPropertySlotByIndex(a1, (JSC::JSBigInt *)a2, v18 | v24, a4, a5, a6, a7, a8);
  }
  else
  {
    if (!(_DWORD)v14
      || (v15 = *(unsigned __int16 *)v13 - 48, v15 > 9)
      || (*(_WORD *)v13 == 48 ? (v19 = v14 > 1) : (v19 = 0), v19))
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v20 = (unsigned __int16 *)(v13 + 2);
      v21 = v14 - 1;
      while (v21)
      {
        if (v15 > 0x19999999)
          goto LABEL_6;
        v22 = *v20 - 48;
        if (v22 > 9)
          goto LABEL_6;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v23 = __CFADD__(v22, 10 * v15);
        v15 = v22 + 10 * v15;
        ++v20;
        --v21;
        if (v23)
          goto LABEL_23;
      }
      v18 = v15 & 0xFFFFFF00;
      v16 = 0x100000000;
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (v15 == -1)
        v18 = 0;
    }
LABEL_23:
    v24 = v17;
    if ((v16 & 0x100000000) != 0)
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::getOwnPropertySlotByIndex(a1, (JSC::JSBigInt *)a2, v18 | v24, a4, a5, a6, a7, a8);
  }
  if (!(_DWORD)v14)
    goto LABEL_74;
  if ((v12 & 4) != 0)
  {
    v29 = *v13;
    if ((_DWORD)v14 == 1)
    {
LABEL_34:
      if ((v29 - 48) < 0xA)
        return 0;
      goto LABEL_74;
    }
    if (v29 == 45)
    {
      v29 = v13[1];
      goto LABEL_38;
    }
    if ((v29 - 48) < 0xA)
      goto LABEL_49;
    if ((_DWORD)v14 == 8)
    {
LABEL_48:
      if (v29 != 73)
        goto LABEL_74;
      goto LABEL_49;
    }
  }
  else
  {
    v29 = *(unsigned __int16 *)v13;
    if ((_DWORD)v14 == 1)
      goto LABEL_34;
    if (v29 == 45)
    {
      v29 = *((unsigned __int16 *)v13 + 1);
LABEL_38:
      if ((v29 - 48) < 0xA)
      {
        if ((_DWORD)v14 == 2)
          return 0;
        goto LABEL_49;
      }
      if ((_DWORD)v14 != 9)
        goto LABEL_74;
      goto LABEL_48;
    }
    if ((v29 - 48) < 0xA || (_DWORD)v14 == 8 && v29 == 73)
      goto LABEL_49;
  }
  if ((_DWORD)v14 != 3 || v29 != 78)
    goto LABEL_74;
LABEL_49:
  JSC::jsToNumber(v13, v14 | ((unint64_t)((v12 >> 2) & 1) << 32));
  v31 = (v30 >> 52) & 0x7FF;
  if ((_DWORD)v31 == 2047)
  {
    if ((v30 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v32 = v100;
    }
    else
    {
      v38 = __s;
      if ((v30 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v38 = &__s[1];
      }
      *(_QWORD *)v38 = 0x7974696E69666E49;
      v32 = v38 + 8;
    }
    goto LABEL_61;
  }
  v33 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v30 & 0x8000000000000000) != 0 && v33)
  {
    __s[0] = 45;
    v34 = &__s[1];
  }
  else
  {
    v34 = __s;
    if (!v33)
    {
      v32 = &__s[1];
      __s[0] = 48;
      goto LABEL_61;
    }
  }
  v35 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v30 & 0x800FFFFFFFFFFFFFLL, v31);
  v32 = WTF::dragonbox::detail::to_shortest(v35, v36, (uint64_t)v34, v37);
LABEL_61:
  *v32 = 0;
  v39 = strlen(__s);
  memcpy(__dst, __s, v39);
  __dst[v39] = 0;
  v40 = *(unsigned int *)(a3 + 4);
  v41 = *(unsigned __int8 **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v40)
    {
      v46 = __dst;
      v47 = *(unsigned int *)(a3 + 4);
      do
      {
        v49 = *v46++;
        v48 = v49;
        if (!v49 || *v41 != v48)
          goto LABEL_74;
        ++v41;
      }
      while (--v47);
    }
  }
  else if ((_DWORD)v40)
  {
    v42 = __dst;
    v43 = *(unsigned int *)(a3 + 4);
    do
    {
      v45 = *v42++;
      v44 = v45;
      if (!v45 || *(unsigned __int16 *)v41 != v44)
        goto LABEL_74;
      v41 += 2;
    }
    while (--v43);
  }
  if (!__dst[v40])
    return 0;
LABEL_74:
  v50 = a2[7];
  if (!(a3 >> 4))
    goto LABEL_108;
  v51 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v51 + 0x20)) != 0)
    goto LABEL_108;
  v52 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v52)
  {
    v53 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v53 || *(_BYTE *)(v53 + 5) != 1 && *(_DWORD *)(v53 + 80) < 2u)
      goto LABEL_108;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7], 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v52)
      goto LABEL_108;
  }
  if (!*(_DWORD *)(v52 + 24))
    goto LABEL_108;
  v54 = *(_QWORD *)(v52 + 16);
  v55 = v54 & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(unsigned int *)(v52 + 8);
  v57 = *(_DWORD *)(a3 + 16);
  if ((v54 & 1) != 0)
  {
    if ((v57 & 0x20) != 0)
      v57 = *(_DWORD *)(a3 + 32);
    v58 = *(_DWORD *)(v52 + 12);
    v59 = (v57 >> 8) & *(_QWORD *)&v58;
    v60 = *(unsigned __int8 *)(v55 + v59);
    if (*(_BYTE *)(v55 + v59))
    {
      v61 = v55 + v56;
      v62 = 1;
      while (1)
      {
        v63 = *(_QWORD *)(v61 + 8 * (v60 - 1));
        if (a3 == (v63 & 0xFFFFFFFFFFFFLL))
          break;
        v59 = ((_DWORD)v59 + v62) & v58;
        v60 = *(unsigned __int8 *)(v55 + v59);
        ++v62;
        if (!*(_BYTE *)(v55 + v59))
          goto LABEL_108;
      }
      a6 = (v63 >> 16) & 0xFF00000000 | HIBYTE(v63);
      goto LABEL_98;
    }
LABEL_108:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v50, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v74 = *(_DWORD *)(a3 + 16);
    if ((v74 & 0x20) == 0)
    {
      v75 = *(_WORD **)(a3 + 8);
      v76 = *(unsigned int *)(a3 + 4);
      if ((v74 & 4) == 0)
      {
        if ((_DWORD)v76)
        {
          v77 = (unsigned __int16)*v75 - 48;
          if (v77 <= 9 && (*v75 != 48 || v76 <= 1))
          {
            v80 = v75 + 1;
            v81 = v76 - 1;
            while (v81)
            {
              if (v77 > 0x19999999)
                goto LABEL_113;
              v82 = *v80 - 48;
              if (v82 > 9)
                goto LABEL_113;
              v78 = 0;
              LODWORD(v76) = 0;
              v79 = 0;
              v23 = __CFADD__(v82, 10 * v77);
              v77 = v82 + 10 * v77;
              ++v80;
              --v81;
              if (v23)
                goto LABEL_129;
            }
            v78 = 0x100000000;
            if (v77 == -1)
            {
              v78 = 0;
              LODWORD(v76) = 0;
            }
            else
            {
              LODWORD(v76) = v77;
            }
            if (v77 == -1)
              v79 = 0;
            else
              v79 = v77 & 0xFFFFFF00;
LABEL_129:
            v83 = (const WTF::StringImpl *)(v79 | v76);
            if ((v78 & 0x100000000) == 0)
              return 0;
            return JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, v83, a4, a5, a6, a7, a8);
          }
LABEL_113:
          v78 = 0;
          LODWORD(v76) = 0;
        }
        else
        {
          v78 = 0;
        }
        v79 = 0;
        goto LABEL_129;
      }
      if ((_DWORD)v76)
      {
        v89 = *(unsigned __int8 *)v75 - 48;
        if (v89 <= 9 && (v76 < 2 || *(_BYTE *)v75 != 48))
        {
          v95 = v76 - 1;
          v96 = (unsigned __int8 *)v75 + 1;
          while (v95)
          {
            if (v89 > 0x19999999)
              goto LABEL_150;
            v97 = *v96 - 48;
            if (v97 > 9)
              goto LABEL_150;
            LODWORD(v76) = 0;
            v90 = 0;
            v91 = 0;
            v23 = __CFADD__(v97, 10 * v89);
            v89 = v97 + 10 * v89;
            --v95;
            ++v96;
            if (v23)
              goto LABEL_152;
          }
          if (v89 == -1)
            LODWORD(v76) = 0;
          else
            LODWORD(v76) = v89 & 0xFFFFFF00;
          if (v89 == -1)
            v90 = 0;
          else
            v90 = v89;
          if (v89 == -1)
            v91 = 0;
          else
            v91 = 0x100000000;
LABEL_152:
          v83 = (const WTF::StringImpl *)(v90 | v76);
          if ((v91 & 0x100000000) == 0)
            return 0;
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, v83, a4, a5, a6, a7, a8);
        }
LABEL_150:
        LODWORD(v76) = 0;
      }
      v90 = 0;
      v91 = 0;
      goto LABEL_152;
    }
    return 0;
  }
  if ((v57 & 0x20) != 0)
    v57 = *(_DWORD *)(a3 + 32);
  v64 = *(_DWORD *)(v52 + 12);
  v65 = v64 & (v57 >> 8);
  v66 = *(_DWORD *)(v55 + 4 * v65);
  if (!v66)
    goto LABEL_108;
  v67 = v55 + 4 * v56;
  v68 = 1;
  while (1)
  {
    v69 = (v66 - 1);
    if (*(_QWORD *)(v67 + 16 * v69) == a3)
      break;
    v65 = (v65 + v68) & v64;
    v66 = *(_DWORD *)(v55 + 4 * v65);
    ++v68;
    if (!v66)
      goto LABEL_108;
  }
  a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
LABEL_98:
  if ((_DWORD)a6 == -1)
    goto LABEL_108;
  if ((int)a6 <= 63)
  {
    v70 = a1 + 16;
    v71 = a6 << 32;
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 8) - 8;
    v71 = 0x3F00000000 - (a6 << 32);
  }
  v72 = *(_QWORD *)(v70 + (v71 >> 29));
  if ((v72 & 0xFFFE000000000002) != 0)
    goto LABEL_105;
  v73 = *(unsigned __int8 *)(v72 + 5);
  if (v73 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v50, a4, v72, SHIDWORD(a6), a6);
    return 1;
  }
  if (v73 != 6)
  {
LABEL_105:
    *(_QWORD *)a4 = v72;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v84 = *(_DWORD *)(v51 + 16) & 3;
  v86 = *(_QWORD *)(v72 + 8);
  v85 = *(_QWORD *)(v72 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C)))
  {
    v88 = *(_QWORD *)(v72 + 24);
    v87 = *(_QWORD *)(v72 + 32);
    *(_QWORD *)a4 = v86;
    *(_QWORD *)(a4 + 8) = v85;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v84 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v88;
    *(_QWORD *)(a4 + 80) = v87;
  }
  else
  {
    *(_QWORD *)a4 = v86;
    *(_QWORD *)(a4 + 8) = v85;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v84 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::getOwnPropertySlotByIndex(uint64_t a1, JSC::JSBigInt *this, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v10 = *((_QWORD *)this + 7);
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v23 + 64) && (v30 = *(_QWORD *)(v23 + 32)) != 0)
      v24 = *(_QWORD *)(v30 + 32);
    else
      v24 = *(_QWORD *)(v23 + 48);
    v26 = *(_QWORD *)(a1 + 24);
    v25 = *(_QWORD *)(a1 + 32);
    if (v25 + 8 * v26 > v24)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (a3 >= (v24 - v25) >> 3)
        return 0;
    }
    else if (v26 <= a3)
    {
      return 0;
    }
  }
  else if (*(_QWORD *)(a1 + 24) <= (unint64_t)a3)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v13 = *(_QWORD *)(v12 + 8 * a3);
  if (v13)
  {
    v14 = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)1, a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_13;
    v28 = *(_DWORD *)(v10 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    {
      v31 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v15, v16, v17, v18, v19, v20);
      v14 = v31;
    }
    if (*(_QWORD *)(v10 + 16))
    {
      v14 = 0;
    }
    else
    {
LABEL_13:
      v21 = *(_QWORD *)(v14 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v21 = v13;
      *(_BYTE *)(v14 + 16) = 0;
    }
  }
  else
  {
    v14 = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, a4, a5, a6, a7, a8);
  }
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_19;
  v27 = *(_DWORD *)(v10 + 80);
  if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
  {
    v29 = v14;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v15, v16, v17, v18, v19, v20);
    v14 = v29;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_19:
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return result;
  }
  return 0;
}

void JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::getOwnPropertyNames(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;

  v73 = a4;
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v10 = (uint64_t **)*((_QWORD *)a2 + 7);
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      LOBYTE(v76) = 0;
      v77 = 0;
      v72 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v76, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v11 = v72;
        if (v72)
        {
LABEL_4:
          v12 = 0;
          v13 = (uint64_t *)(a3 + 8);
          while (1)
          {
            if (HIDWORD(v12))
              JSC::Identifier::from(v10, a2, (double)v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v75);
            else
              JSC::Identifier::from(v10, v12, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v75);
            v14 = v75;
            v79 = v75;
            v15 = *((_DWORD *)v75 + 4);
            if ((v15 & 0x20) != 0)
            {
              if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
                goto LABEL_57;
            }
            else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            {
              goto LABEL_57;
            }
            v16 = *(_QWORD *)a3;
            v17 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v17 <= 0x13)
            {
              if ((_DWORD)v17)
              {
                v38 = *(WTF::StringImpl ***)(v16 + 8);
                while (*v38 != v75)
                {
                  ++v38;
                  if (!--v17)
                    goto LABEL_46;
                }
                goto LABEL_57;
              }
LABEL_46:
              if ((v15 & 0x20) != 0)
              {
                v39 = *(_DWORD *)v14 + 2;
              }
              else
              {
                if ((v15 & 0x10) != 0)
                {
                  *(_DWORD *)v14 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v76);
                  v14 = v76;
                }
                v39 = *(_DWORD *)v14;
                *(_DWORD *)v14 += 2;
                if (!v39)
                {
                  WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_52:
                  v40 = (uint64_t *)(v16 + 8);
                  v76 = v14;
                  v41 = *(unsigned int *)(v16 + 20);
                  if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
                  {
                    v69 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v76);
                    v41 = *(unsigned int *)(v16 + 20);
                    v70 = *(_QWORD *)(v16 + 8);
                    v71 = *v69;
                    *v69 = 0;
                    *(_QWORD *)(v70 + 8 * v41) = v71;
                  }
                  else
                  {
                    v42 = *v40;
                    v76 = 0;
                    *(_QWORD *)(v42 + 8 * v41) = v14;
                  }
                  *(_DWORD *)(v16 + 20) = v41 + 1;
                  v43 = v76;
                  v76 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                    }
                    else
                    {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v14 = v39;
              goto LABEL_52;
            }
            if (!*v13 || !*(_DWORD *)(*v13 - 12))
              break;
LABEL_12:
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v79, a4, a5, a6, a7, a8, (uint64_t)&v76);
            if (v78)
            {
              v14 = v79;
              v16 = *(_QWORD *)a3;
              v15 = *((_DWORD *)v79 + 4);
              goto LABEL_46;
            }
LABEL_57:
            v44 = v75;
            v75 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (++v12 == v11)
              goto LABEL_74;
          }
          v18 = *(uint64_t **)(v16 + 8);
          v19 = &v18[v17];
          while (1)
          {
            v20 = *v18;
            v21 = *v13;
            if (*v13
              || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v13) != 0))
            {
              v22 = *(_DWORD *)(v21 - 8);
            }
            else
            {
              v22 = 0;
            }
            v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = (_QWORD *)(v21 + 8 * v26);
            v28 = *v27;
            if (*v27)
            {
              v29 = 0;
              v30 = 1;
              while (v28 != v20)
              {
                if (v28 == -1)
                  v29 = v27;
                v26 = (v26 + v30) & v22;
                v27 = (_QWORD *)(v21 + 8 * v26);
                v28 = *v27;
                ++v30;
                if (!*v27)
                {
                  if (v29)
                  {
                    *v29 = 0;
                    --*(_DWORD *)(*v13 - 16);
                    v27 = v29;
                  }
                  goto LABEL_25;
                }
              }
              goto LABEL_33;
            }
LABEL_25:
            *v27 = v20;
            v31 = *v13;
            v32 = *v13 ? *(_DWORD *)(v31 - 12) + 1 : 1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v13;
            v34 = *v13 ? *(_DWORD *)(v33 - 12) : 0;
            v35 = (*(_DWORD *)(v33 - 16) + v34);
            v36 = *(unsigned int *)(v33 - 4);
            if (v36 > 0x400)
              break;
            if (3 * v36 <= 4 * v35)
            {
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_37:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, (uint64_t)v27, a4, a5, a6, a7, a8);
                goto LABEL_33;
              }
LABEL_41:
              v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
              goto LABEL_37;
            }
LABEL_33:
            if (++v18 == v19)
              goto LABEL_12;
          }
          if (v36 > 2 * v35)
            goto LABEL_33;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
        goto LABEL_4;
    }
  }
LABEL_74:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, a3, (const JSC::PropertyTable *)v73);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  JSC::Structure *v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  const char **v71;
  uint64_t v72;
  int v73;
  int v74;
  const char **p_dst;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  JSC::VM *v83;
  unsigned int v84;
  const char *__dst;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v83 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (!a3)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(unsigned __int16 **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) == 0)
  {
    if (!(_DWORD)v16 || (v17 = *v15 - 48, v17 > 9) || (*v15 == 48 ? (v21 = v16 > 1) : (v21 = 0), v21))
    {
LABEL_6:
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v15 + 1;
      v23 = v16 - 1;
      while (v23)
      {
        if (v17 > 0x19999999)
          goto LABEL_6;
        v24 = *v22 - 48;
        if (v24 > 9)
          goto LABEL_6;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v25 = __CFADD__(v24, 10 * v17);
        v17 = v24 + 10 * v17;
        ++v22;
        --v23;
        if (v25)
          goto LABEL_23;
      }
      v20 = v17 & 0xFFFFFF00;
      v18 = 0x100000000;
      if (v17 == -1)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (v17 == -1)
        v20 = 0;
    }
LABEL_23:
    v26 = v19;
    if ((v18 & 0x100000000) != 0)
      goto LABEL_24;
LABEL_74:
    if (!(_DWORD)v16)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    if ((v14 & 4) != 0)
    {
      v58 = *(unsigned __int8 *)v15;
      if ((_DWORD)v16 == 1)
      {
LABEL_77:
        if ((v58 - 48) < 0xA)
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      if (v58 == 45)
      {
        v58 = *((unsigned __int8 *)v15 + 1);
        goto LABEL_81;
      }
      if ((v58 - 48) < 0xA)
        goto LABEL_92;
      if ((_DWORD)v16 == 8)
      {
LABEL_91:
        if (v58 != 73)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_92:
        JSC::jsToNumber((unsigned __int8 *)v15, v16 | ((unint64_t)((v14 >> 2) & 1) << 32));
        v60 = (v59 >> 52) & 0x7FF;
        if ((_DWORD)v60 == 2047)
        {
          if ((v59 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v61 = &__s[3];
          }
          else
          {
            v67 = __s;
            if ((v59 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v67 = &__s[1];
            }
            *(_QWORD *)v67 = 0x7974696E69666E49;
            v61 = v67 + 8;
          }
          goto LABEL_104;
        }
        v62 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v59 & 0x8000000000000000) != 0 && v62)
        {
          __s[0] = 45;
          v63 = &__s[1];
        }
        else
        {
          v63 = __s;
          if (!v62)
          {
            v61 = &__s[1];
            __s[0] = 48;
            goto LABEL_104;
          }
        }
        v64 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v59 & 0x800FFFFFFFFFFFFFLL, v60);
        v61 = WTF::dragonbox::detail::to_shortest(v64, v65, (uint64_t)v63, v66);
LABEL_104:
        *v61 = 0;
        v68 = strlen(__s);
        memcpy(&__dst, __s, v68);
        *((_BYTE *)&__dst + v68) = 0;
        v69 = *(unsigned int *)(a3 + 4);
        v70 = *(unsigned __int8 **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
        {
          if ((_DWORD)v69)
          {
            p_dst = &__dst;
            v76 = *(unsigned int *)(a3 + 4);
            do
            {
              v78 = *(unsigned __int8 *)p_dst;
              p_dst = (const char **)((char *)p_dst + 1);
              v77 = v78;
              if (!v78 || *v70 != v77)
                return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
              ++v70;
            }
            while (--v76);
          }
        }
        else if ((_DWORD)v69)
        {
          v71 = &__dst;
          v72 = *(unsigned int *)(a3 + 4);
          do
          {
            v74 = *(unsigned __int8 *)v71;
            v71 = (const char **)((char *)v71 + 1);
            v73 = v74;
            if (!v74 || *(unsigned __int16 *)v70 != v73)
              return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
            v70 += 2;
          }
          while (--v72);
        }
        if (!*((_BYTE *)&__dst + v69))
          goto LABEL_118;
        return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
    else
    {
      v58 = *v15;
      if ((_DWORD)v16 == 1)
        goto LABEL_77;
      if (v58 == 45)
      {
        v58 = v15[1];
LABEL_81:
        if ((v58 - 48) < 0xA)
        {
          if ((_DWORD)v16 == 2)
          {
LABEL_118:
            if ((_DWORD)a5)
            {
              v28 = "Attempting to store canonical numeric string property on a typed array";
              v29 = (unint64_t)a2;
              v30 = 71;
              goto LABEL_120;
            }
            return 0;
          }
          goto LABEL_92;
        }
        if ((_DWORD)v16 != 9)
          return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_91;
      }
      if ((v58 - 48) < 0xA || (_DWORD)v16 == 8 && v58 == 73)
        goto LABEL_92;
    }
    if ((_DWORD)v16 != 3 || v58 != 78)
      return JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_92;
  }
  if (!(_DWORD)v16 || (v55 = *(unsigned __int8 *)v15 - 48, v55 > 9) || v16 >= 2 && *(_BYTE *)v15 == 48)
  {
LABEL_72:
    v26 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v79 = v16 - 1;
    v80 = (unsigned __int8 *)v15 + 1;
    while (v79)
    {
      if (v55 > 0x19999999)
        goto LABEL_72;
      v81 = *v80 - 48;
      if (v81 > 9)
        goto LABEL_72;
      v26 = 0;
      v56 = 0;
      v57 = 0;
      v25 = __CFADD__(v81, 10 * v55);
      v55 = v81 + 10 * v55;
      --v79;
      ++v80;
      if (v25)
        goto LABEL_73;
    }
    if (v55 == -1)
      v26 = 0;
    else
      v26 = v55 & 0xFFFFFF00;
    if (v55 == -1)
      v56 = 0;
    else
      v56 = v55;
    if (v55 == -1)
      v57 = 0;
    else
      v57 = 0x100000000;
  }
LABEL_73:
  v20 = v56;
  if ((v57 & 0x100000000) == 0)
    goto LABEL_74;
LABEL_24:
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((_DWORD)a5)
      {
        v28 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v29 = (unint64_t)a2;
        v30 = 72;
LABEL_120:
        JSC::throwTypeError(v29, &v83, (uint64_t)v28, v30);
        return 0;
      }
      return 0;
    }
  }
  v31 = v20 | v26;
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    if (*(_QWORD *)(a1 + 24) > v31)
      goto LABEL_34;
LABEL_59:
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store out-of-bounds property on a typed array at index: ";
    v86 = 71;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD5358);
    }
    goto LABEL_61;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v35 + 64) && (v82 = *(_QWORD *)(v35 + 32)) != 0)
    v36 = *(_QWORD *)(v82 + 32);
  else
    v36 = *(_QWORD *)(v35 + 48);
  v38 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 + 8 * v38 > v36)
    goto LABEL_59;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (v31 >= (v36 - v37) >> 3)
      goto LABEL_59;
  }
  else if (v38 <= v31)
  {
    goto LABEL_59;
  }
LABEL_34:
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store accessor property on a typed array at index: ";
    v86 = 66;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD4E7CLL);
    }
LABEL_61:
    JSC::throwTypeError((unint64_t)a2, &v83, (WTF::StringImpl **)__s);
    v46 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 0;
  }
  v32 = *(_DWORD *)(a4 + 28);
  if ((v32 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-configurable property on a typed array at index: ";
    v86 = 74;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD4EF8);
    }
    goto LABEL_61;
  }
  if ((v32 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-enumerable property on a typed array at index: ";
    v86 = 72;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD4F30);
    }
    goto LABEL_61;
  }
  if ((v32 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    __dst = "Attempting to store non-writable property on a typed array at index: ";
    v86 = 70;
    v84 = v31;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&__dst, &v84, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x198AD4F68);
    }
    goto LABEL_61;
  }
  v33 = *(JSC::Structure **)a4;
  if (*(_QWORD *)a4)
    JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, a2, v31, v33, a5, a6, a7, a8, (int8x16_t)a9);
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::estimatedSize(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 16)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (!v2
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_8;
    }
  }
  else if (v1 != 48)
  {
LABEL_8:
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
      if (v4 == 65534)
        goto LABEL_14;
      if (v4 == 0xFFFF)
        v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
      v5 = __OFSUB__(v4, 63);
      LODWORD(v3) = v4 - 63;
      if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_14:
        LODWORD(v3) = 0;
      v3 = v3;
    }
    if ((a1 & 8) != 0)
      v6 = *(_QWORD *)(a1 - 88);
    else
      v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
    return v6 + v3;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v9 == 65534)
      goto LABEL_27;
    if (v9 == 0xFFFF)
      v9 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v9, 63);
    LODWORD(v8) = v9 - 63;
    if (((int)v8 < 0) ^ v5 | ((_DWORD)v8 == 0))
LABEL_27:
      LODWORD(v8) = 0;
    v8 = v8;
  }
  if ((a1 & 8) != 0)
    v10 = *(_QWORD *)(a1 - 88);
  else
    v10 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v10 + v8 + 8 * *(_QWORD *)(a1 + 24);
}

void JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::visitChildren(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  JSC::JSArrayBufferView::visitChildren((JSC::JSArrayBufferView *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40);
  v21 = 8 * *(_QWORD *)(a1 + 24);
  while (1)
  {
    v22 = *v16;
    if ((v22 & 0xC0) != 0x40)
      break;
    v23 = __ldxr(v16);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xBF, v16))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
LABEL_19:
  if (v20 == 16)
  {
    if (v19)
      JSC::SlotVisitor::markAuxiliary((JSC::SlotVisitor *)a2, v19, v10, v11, v12, v13, v14, v15);
  }
  else if (v20 == 48)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(a2 + 144) += v21;
      v24 = *(_QWORD *)(a2 + 160);
      v25 = __CFADD__(v24, v21);
      v26 = v24 + v21;
      if (v25)
        *(_BYTE *)(a2 + 152) = 1;
      else
        *(_QWORD *)(a2 + 160) = v26;
    }
  }
  else if ((v20 - 136) <= 5 && v20 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AD55ACLL);
  }
}

void JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198AD57D4);
  }
  *((_QWORD *)a2 + 11) = v20;
  JSC::JSArrayBufferView::visitChildren(this, a2, a3);
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v15 = *((_QWORD *)this + 2);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v16 = *((unsigned __int8 *)this + 40);
  v17 = 8 * *((_QWORD *)this + 3);
  while (1)
  {
    v18 = *v12;
    if ((v18 & 0xC0) != 0x40)
      break;
    v19 = __ldxr(v12);
    if (v19 == v18)
    {
      if (!__stxr(v18 & 0xBF, v12))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v6, v7, v8, v9, v10, v11);
LABEL_21:
  if (v16 == 16)
  {
    if (v15)
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v15);
  }
  else if (v16 == 48)
  {
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  }
  else if ((v16 - 136) <= 5 && v16 != 137)
  {
    __break(0xC471u);
    JUMPOUT(0x198AD5764);
  }
  *(_QWORD *)(v20[0] + 88) = v21;
}

char **JSC::getBigUint64ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::s_info;
}

char **JSC::getResizableOrGrowableSharedBigUint64ArrayClassInfo(JSC *this)
{
  return &JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::BigUint64Adaptor>::s_info;
}

JSC::Exception *JSC::callBigUint64Array(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"BigUint64Array", 15);
}

uint64_t JSC::constructBigUint64Array(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  JSC::JSGlobalObject *m;
  char **v19;
  JSC::JSGlobalObject *v20;
  JSC::JSGlobalObject *i;
  char **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(JSC::JSObject **);
  JSC::JSObject **v26;
  JSC::JSObject *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  JSC::JSObject *v31;
  uint64_t v32;
  JSC::JSGlobalObject *j;
  char **v34;
  uint64_t v35;
  uint64_t (*v36)(JSC::JSObject **);
  JSC::JSObject **v37;
  JSC::JSObject *v38;
  char *v39;
  JSC::JSObject *SubclassStructure;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  JSC::JSObject **v48;
  JSC::JSGlobalObject *k;
  char **v50;
  unint64_t v51;
  unint64_t v52;
  JSC::JSObject *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t (*v58)(JSC::JSObject **);
  JSC::JSObject **v59;
  int v60;
  int v61;
  JSC::JSObject **v62;
  uint64_t (*v63)(JSC::JSObject **);
  JSC::JSObject **v64;
  int v65;
  int v66;
  uint64_t (*v67)(JSC::JSObject **);
  JSC::JSObject **v68;
  uint64_t (*v69)(JSC::JSObject **);
  JSC::JSObject **v70;
  JSC::JSGlobalObject *v71;
  JSC::JSGlobalObject *v72;
  unint64_t v73;
  unint64_t v74;
  JSC::JSObject *v75;
  unint64_t v76;
  char *v77;

  v11 = *(_QWORD *)(this + 56);
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 != 1)
  {
    v15 = *((_QWORD *)a2 + 6);
    if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
    {
      if (v14 < 2)
      {
        v16 = 0;
        goto LABEL_18;
      }
      v75 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v75, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_18;
      v17 = *(_DWORD *)(v11 + 80);
      if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v11 + 16))
      {
LABEL_18:
        v20 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 3);
        if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
        {
          if (v12 != v20)
          {
            v75 = *(JSC::JSObject **)(this + 56);
            for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v71 + 2))
            {
              while (1)
              {
                v22 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
                if (v22 != &JSC::JSBoundFunction::s_info && v22 != &JSC::JSRemoteFunction::s_info)
                  break;
                i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
              }
              if (*((_BYTE *)i + 5) != 61)
              {
                v23 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
                goto LABEL_28;
              }
              v71 = i;
              if (JSC::ProxyObject::isRevoked(i))
                break;
            }
            JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
            v23 = 0;
LABEL_28:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_29;
            v56 = *(_DWORD *)(v11 + 80);
            if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
            {
              v73 = v23;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v23 = v73;
            }
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_29:
              v24 = *(_QWORD *)(v23 + 1920);
              if ((v24 & 1) != 0)
              {
                v25 = *(uint64_t (**)(JSC::JSObject **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
                v26 = (JSC::JSObject **)(v23 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v23 & 8) != 0)
                  v26 = (JSC::JSObject **)(v23 - 16);
                v27 = *v26;
                v28 = (char *)(v23 + 1920);
LABEL_111:
                v75 = v27;
                v76 = v23;
                v77 = v28;
                v24 = v25(&v75);
                goto LABEL_53;
              }
              goto LABEL_53;
            }
            goto LABEL_107;
          }
          v35 = *(_QWORD *)(this + 1920);
          if ((v35 & 1) == 0)
          {
LABEL_55:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_151;
            v54 = *(_DWORD *)(v11 + 80);
            if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_151:
              if (v14 < 3 || (v75 = (JSC::JSObject *)*((_QWORD *)a2 + 8), v75 == (JSC::JSObject *)10))
              {
                v41 = 0;
                v42 = 0;
                return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
              }
              v41 = JSC::JSValue::toTypedArrayIndex(&v75, (JSC::JSGlobalObject *)this, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v11 + 80))
                goto LABEL_60;
              v60 = *(_DWORD *)(v11 + 80);
              if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v43, v44, v45, v46, a7, a8);
              if (!*(_QWORD *)(v11 + 16))
              {
LABEL_60:
                v42 = 1;
                return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
              }
            }
            return 0;
          }
          v36 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
          v37 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v37 = (JSC::JSObject **)(this - 16);
          v38 = *v37;
          v39 = (char *)(this + 1920);
        }
        else
        {
          if (v12 != v20)
          {
            v75 = *(JSC::JSObject **)(this + 56);
            for (j = v12; ; j = (JSC::JSGlobalObject *)*((_QWORD *)v72 + 2))
            {
              while (1)
              {
                v34 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x4C));
                if (v34 != &JSC::JSBoundFunction::s_info && v34 != &JSC::JSRemoteFunction::s_info)
                  break;
                j = (JSC::JSGlobalObject *)*((_QWORD *)j + 4);
              }
              if (*((_BYTE *)j + 5) != 61)
              {
                v23 = *(_QWORD *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x28);
                goto LABEL_51;
              }
              v72 = j;
              if (JSC::ProxyObject::isRevoked(j))
                break;
            }
            JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
            v23 = 0;
LABEL_51:
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_52;
            v61 = *(_DWORD *)(v11 + 80);
            if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
            {
              v74 = v23;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v23 = v74;
            }
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_52:
              v24 = *(_QWORD *)(v23 + 1904);
              if ((v24 & 1) != 0)
              {
                v25 = *(uint64_t (**)(JSC::JSObject **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
                v62 = (JSC::JSObject **)(v23 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v23 & 8) != 0)
                  v62 = (JSC::JSObject **)(v23 - 16);
                v27 = *v62;
                v28 = (char *)(v23 + 1904);
                goto LABEL_111;
              }
LABEL_53:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v24, a4, a5, a6, a7, a8);
LABEL_54:
              v35 = (uint64_t)SubclassStructure;
              goto LABEL_55;
            }
LABEL_107:
            v35 = 0;
            goto LABEL_55;
          }
          v35 = *(_QWORD *)(this + 1904);
          if ((v35 & 1) == 0)
            goto LABEL_55;
          v36 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
          v48 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v48 = (JSC::JSObject **)(this - 16);
          v38 = *v48;
          v39 = (char *)(this + 1904);
        }
        v75 = v38;
        v76 = this;
        v77 = v39;
        SubclassStructure = (JSC::JSObject *)v36(&v75);
        goto LABEL_54;
      }
      return 0;
    }
    if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
    {
      v35 = *(_QWORD *)(this + 1904);
      if ((v35 & 1) == 0)
        goto LABEL_88;
      v69 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v70 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v70 = (JSC::JSObject **)(this - 16);
      v75 = *v70;
      v76 = this;
      v77 = (char *)(this + 1904);
      v53 = (JSC::JSObject *)v69(&v75);
    }
    else
    {
      v75 = *(JSC::JSObject **)(this + 56);
      for (k = v12; ; k = (JSC::JSGlobalObject *)*((_QWORD *)k + 2))
      {
        while (1)
        {
          v50 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)k & 0xFFFFFFFE) + 0x4C));
          if (v50 != &JSC::JSBoundFunction::s_info && v50 != &JSC::JSRemoteFunction::s_info)
            break;
          k = (JSC::JSGlobalObject *)*((_QWORD *)k + 4);
        }
        if (*((_BYTE *)k + 5) != 61)
        {
          v51 = *(_QWORD *)(16 * (*(_DWORD *)k & 0xFFFFFFFE) + 0x28);
          goto LABEL_80;
        }
        if (JSC::ProxyObject::isRevoked(k))
          break;
      }
      JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
      v51 = 0;
LABEL_80:
      if (*(_DWORD *)(v11 + 80))
      {
        v66 = *(_DWORD *)(v11 + 80);
        if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
        {
          v35 = 0;
          goto LABEL_88;
        }
      }
      v52 = *(_QWORD *)(v51 + 1904);
      if ((v52 & 1) != 0)
      {
        v67 = *(uint64_t (**)(JSC::JSObject **))(v52 & 0xFFFFFFFFFFFFFFFCLL);
        v68 = (JSC::JSObject **)(v51 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v51 & 8) != 0)
          v68 = (JSC::JSObject **)(v51 - 16);
        v75 = *v68;
        v76 = v51;
        v77 = (char *)(v51 + 1904);
        v52 = v67(&v75);
      }
      v53 = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v52, a4, a5, a6, a7, a8);
    }
    v35 = (uint64_t)v53;
LABEL_88:
    if (!*(_DWORD *)(v11 + 80))
    {
      v41 = 0;
      v42 = 0;
      v16 = 0;
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
    }
    v65 = *(_DWORD *)(v11 + 80);
    if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v41 = 0;
    v42 = 0;
    v16 = 0;
    result = 0;
    if (!*(_QWORD *)(v11 + 16))
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(this, v35, v15, v16, v41, v42, a7, a8, (__n128)a9);
    return result;
  }
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v32 = *(_QWORD *)(this + 1904);
    if ((v32 & 1) == 0)
      goto LABEL_63;
    v63 = *(uint64_t (**)(JSC::JSObject **))(v32 & 0xFFFFFFFFFFFFFFFCLL);
    v64 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v64 = (JSC::JSObject **)(this - 16);
    v75 = *v64;
    v76 = this;
    v77 = (char *)(this + 1904);
    v31 = (JSC::JSObject *)v63(&v75);
LABEL_37:
    v32 = (uint64_t)v31;
    goto LABEL_63;
  }
  v75 = *(JSC::JSObject **)(this + 56);
  for (m = v12; ; m = (JSC::JSGlobalObject *)*((_QWORD *)m + 2))
  {
    while (1)
    {
      v19 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)m & 0xFFFFFFFE) + 0x4C));
      if (v19 != &JSC::JSBoundFunction::s_info && v19 != &JSC::JSRemoteFunction::s_info)
        break;
      m = (JSC::JSGlobalObject *)*((_QWORD *)m + 4);
    }
    if (*((_BYTE *)m + 5) != 61)
    {
      v29 = *(_QWORD *)(16 * (*(_DWORD *)m & 0xFFFFFFFE) + 0x28);
      goto LABEL_34;
    }
    if (JSC::ProxyObject::isRevoked(m))
      break;
  }
  JSC::throwTypeError(this, &v75, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v29 = 0;
LABEL_34:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_35;
  v57 = *(_DWORD *)(v11 + 80);
  if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_35:
    v30 = *(_QWORD *)(v29 + 1904);
    if ((v30 & 1) != 0)
    {
      v58 = *(uint64_t (**)(JSC::JSObject **))(v30 & 0xFFFFFFFFFFFFFFFCLL);
      v59 = (JSC::JSObject **)(v29 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v29 & 8) != 0)
        v59 = (JSC::JSObject **)(v29 - 16);
      v75 = *v59;
      v76 = v29;
      v77 = (char *)(v29 + 1904);
      v30 = v58(&v75);
    }
    v31 = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v30, a4, a5, a6, a7, a8);
    goto LABEL_37;
  }
  v32 = 0;
LABEL_63:
  if (*(_DWORD *)(v11 + 80))
  {
    v55 = *(_DWORD *)(v11 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create((JSC::JSGlobalObject *)this, v32, 0, (uint64_t)a4, a5, a6, a7, a8);
}

JSC::Exception *JSC::callDataView(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"DataView", 9);
}

uint64_t JSC::constructDataView(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::JSGlobalObject *v21;
  WTF::StringImpl *v22;
  JSC::ArrayBuffer *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(WTF::StringImpl **, JSC *, JSC::CallFrame *);
  WTF::StringImpl **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  JSC::JSGlobalObject *v78;
  uint64_t v79;
  const WTF::String *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const WTF::String *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  JSC::VM *v114;
  uint64_t v115;
  JSC::VM *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t *v119;
  char *v120;
  WTF::StringImpl *v121;
  JSC::ArrayBuffer *v122;

  v10 = (JSC *)this;
  v11 = this[7];
  v116 = v11;
  v117 = (uint64_t)this;
  v12 = *((_QWORD *)a2 + 5);
  v115 = v12;
  v13 = *((int *)a2 + 8);
  v14 = v13 - 1;
  if (v13 == 1)
  {
    if (v12 == *((_QWORD *)a2 + 3))
    {
      JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)12>((uint64_t)this);
    }
    else
    {
      v118 = v11;
      v119 = &v117;
      v120 = (char *)&v115;
      JSC::constructGenericTypedArrayViewImpl<JSC::JSDataView>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((JSC::JSObject *)&v118, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v53, v54, v55, v56, v57, v58, v59))
      return JSC::throwTypeError(v117, &v116, (uint64_t)"DataView constructor requires at least one argument.", 53);
    return 0;
  }
  v15 = *((_QWORD *)a2 + 6);
  v16 = v15 & 0xFFFE000000000002;
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 38)
  {
    if (v14 >= 2)
    {
      v118 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
      v16 = JSC::JSValue::toTypedArrayIndex(&v118, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a5, a6, a7, a8, a9);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v60, v61, v62, v63, v64, v65, v66))
      {
        return 0;
      }
      v67 = *(_QWORD *)(v15 + 16);
      if (v67)
        *(_DWORD *)v67 += 2;
      if (*(_BYTE *)(v67 + 64) && (v113 = *(_QWORD *)(v67 + 32)) != 0)
        v68 = *(_QWORD *)(v113 + 32);
      else
        v68 = *(_QWORD *)(v67 + 48);
      if (v16 > v68)
      {
        v78 = (JSC::JSGlobalObject *)v117;
        v79 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v79 = 0x3000000002;
        *(_QWORD *)(v79 + 8) = "byteOffset exceeds source ArrayBuffer byteLength";
        *(_DWORD *)(v79 + 16) = 4;
        v118 = (WTF::StringImpl *)v79;
        v81 = JSC::createRangeError((unint64_t)v78, &v118, v80);
        JSC::VM::throwException(v11, v78, v81, v82, v83, v84, v85, v86);
        v87 = v118;
        v118 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
          {
            WTF::StringImpl::~StringImpl(v87, v60, v61, v62, v63, v64, v65, v66);
            WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          }
          else
          {
            *(_DWORD *)v87 -= 2;
          }
        }
        if (*((_DWORD *)v11 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v60, v61, v62, v63, v64, v65, v66))
        {
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((JSC::ArrayBuffer *)v67, v60, v61, v62, v63, v64, v65, v66);
          return 0;
        }
      }
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((JSC::ArrayBuffer *)v67, v60, v61, v62, v63, v64, v65, v66);
      v12 = v115;
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (*(_BYTE *)(*(_QWORD *)(v15 + 16) + 64))
    {
      if (v12 == v17)
      {
        v69 = JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)12>(v117);
      }
      else
      {
        v118 = v11;
        v119 = &v117;
        v120 = (char *)&v115;
        v69 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSDataView>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()((uint64_t *)&v118, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    else if (v12 == v17)
    {
      v18 = *(_QWORD *)(v117 + 1928);
      if ((v18 & 1) == 0)
        goto LABEL_10;
      v51 = *(uint64_t (**)(WTF::StringImpl **, JSC *, JSC::CallFrame *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v52 = (WTF::StringImpl **)(v117 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v117 & 8) != 0)
        v52 = (WTF::StringImpl **)(v117 - 16);
      v118 = *v52;
      v119 = (uint64_t *)v117;
      v120 = (char *)(v117 + 1928);
      v69 = v51(&v118, v10, a3);
    }
    else
    {
      v118 = v11;
      v119 = &v117;
      v120 = (char *)&v115;
      v69 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSDataView>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#3}::operator()((uint64_t *)&v118, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = v69;
LABEL_10:
    if (*((_DWORD *)v11 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return 0;
    }
    if (v14 >= 3)
    {
      v118 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
      if (v118 == (WTF::StringImpl *)10)
      {
        v70 = 0;
        v20 = 0;
      }
      else
      {
        v70 = JSC::JSValue::toTypedArrayIndex(&v118, (JSC::JSGlobalObject *)v117, (uint64_t)"byteLength", 11, a5, a6, a7, a8, a9);
        if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v71, v72, v73, v74, v75, a7, a8))
          return 0;
        v20 = 1;
      }
      v19 = v70;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v21 = (JSC::JSGlobalObject *)v117;
    v22 = *(WTF::StringImpl **)(v117 + 56);
    v118 = v22;
    goto LABEL_14;
  }
  if (v12 == *((_QWORD *)a2 + 3))
  {
    v45 = JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)12>((uint64_t)this);
  }
  else
  {
    v118 = v11;
    v119 = &v117;
    v120 = (char *)&v115;
    v45 = (uint64_t)JSC::constructGenericTypedArrayViewImpl<JSC::JSDataView>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#3}::operator()((uint64_t *)&v118, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v18 = v45;
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v46, v47, v48, v49, v50, a7, a8))
    return 0;
  v21 = (JSC::JSGlobalObject *)v117;
  v22 = *(WTF::StringImpl **)(v117 + 56);
  v118 = v22;
  if (v16)
    goto LABEL_33;
  v20 = 0;
  v19 = 0;
LABEL_14:
  if (*(_BYTE *)(v15 + 5) != 38)
  {
LABEL_33:
    JSC::throwTypeError((unint64_t)v21, &v118, (uint64_t)"Expected ArrayBuffer for the first argument.", 45);
    return 0;
  }
  v23 = *(JSC::ArrayBuffer **)(v15 + 16);
  if (v23)
    *(_DWORD *)v23 += 2;
  v122 = v23;
  v24 = *((_QWORD *)v23 + 2);
  if (v24
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    if (v20)
    {
LABEL_24:
      v25 = v19 & 0xFFFFFFFFFFFFFF00;
      v26 = 1;
      goto LABEL_25;
    }
    if (!*((_BYTE *)v23 + 64))
    {
      v19 = *((_QWORD *)v23 + 6) - v16;
      goto LABEL_24;
    }
    v114 = v22;
    v76 = *((_QWORD *)v23 + 4);
    if (v76)
      v77 = *(_QWORD *)(v76 + 32);
    else
      v77 = *((_QWORD *)v23 + 6);
    if (v77 >= v16)
    {
      v26 = 0;
      LOBYTE(v19) = 0;
      v25 = 0;
LABEL_25:
      v34 = JSC::JSDataView::create(v21, v18, (uint64_t)&v122, v16, v25 | v19, v26, a7, a8);
      v23 = v122;
      v122 = 0;
      if (!v23)
        return v34;
      goto LABEL_26;
    }
    v96 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v96 = 0x3000000002;
    *(_QWORD *)(v96 + 8) = "byteOffset exceeds source ArrayBuffer byteLength";
    *(_DWORD *)(v96 + 16) = 4;
    v121 = (WTF::StringImpl *)v96;
    v98 = JSC::createRangeError((unint64_t)v21, &v121, v97);
    JSC::VM::throwException(v114, v21, v98, v99, v100, v101, v102, v103);
    v104 = v121;
    v121 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
      {
        WTF::StringImpl::~StringImpl(v104, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
      }
      else
      {
        *(_DWORD *)v104 -= 2;
      }
    }
  }
  else
  {
    JSC::throwTypeError((unint64_t)v21, &v118, (uint64_t)"Buffer is already detached", 27);
  }
  v34 = 0;
  v122 = 0;
LABEL_26:
  v35 = *(_DWORD *)v23 == 2;
  *(_DWORD *)v23 -= 2;
  if (v35)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v23, v27, v28, v29, v30, v31, v32, v33);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  return v34;
}

void JSC::JSWeakObjectRef::visitChildren(JSC::JSWeakObjectRef *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(*((_QWORD *)a2 + 10) + 93240) == *((_QWORD *)this + 2))
  {
    v16 = *((_QWORD *)this + 3);
    if (v16)
    {
      if ((v16 & 8) != 0)
      {
        if ((*(_BYTE *)(v16 - 79) & 1) == 0)
          goto LABEL_9;
      }
      else
      {
        v17 = v16 & 0xFFFFFFFFFFFFC000;
        v18 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        {
          v19 = v16;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
          v16 = v19;
        }
        if (((*(_QWORD *)(v17 + 8 * ((v16 >> 10) & 0xF) + 40) >> (v16 >> 4)) & 1) == 0)
          goto LABEL_9;
      }
      if (*((_QWORD *)a2 + 21))
LABEL_9:
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
    }
  }
}

void JSC::JSWeakObjectRef::visitChildren(JSC::JSWeakObjectRef *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v6;
    JSC::JSObject::visitChildren(this, a2, a3);
    if (*(_QWORD *)(*((_QWORD *)a2 + 10) + 93240) == *((_QWORD *)this + 2))
      (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

unint64_t JSC::JSWeakObjectRef::finishCreation(unint64_t this, JSC::VM *a2, JSC::JSCell *a3)
{
  JSC::VM *v3;

  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 11679);
  *(_QWORD *)(this + 24) = a3;
  if (this && a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    v3 = a2;
    this = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, this);
    a2 = v3;
  }
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  return this;
}

uint64_t JSC::JSWeakObjectRef::finalizeUnconditionally(uint64_t result, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    if ((v2 & 8) != 0)
    {
      if ((*(_BYTE *)(v2 - 79) & 1) != 0)
        return result;
    }
    else if (*(_DWORD *)(v2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
           && ((*(_QWORD *)((v2 & 0xFFFFFFFFFFFFC000) + 8 * ((v2 >> 10) & 0xF) + 0x28) >> (v2 >> 4)) & 1) != 0)
    {
      return result;
    }
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

void JSC::JSWithScope::visitChildren(JSC::JSWithScope *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 3);
  if (!v18)
    return;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) == 0)
      goto LABEL_17;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_17:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
}

uint64_t JSC::JSWithScope::visitChildren(JSC::JSWithScope *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    JSC::JSObject::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v10[0] + 88) = v11;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::JSWithScope::create(JSC::JSWithScope *this, unint64_t a2, JSC::JSGlobalObject *a3, JSC::JSScope *a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::Heap *v12;
  unint64_t result;
  int v14;
  uint64_t (*v15)(_QWORD *);
  _QWORD *v16;
  unint64_t v17;
  _QWORD v18[3];

  v11 = *(_QWORD *)(a2 + 768);
  if ((v11 & 1) != 0)
  {
    v15 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v16 = (_QWORD *)(a2 - 16);
    v18[0] = *v16;
    v18[1] = a2;
    v18[2] = a2 + 768;
    v11 = v15(v18);
  }
  v12 = (JSC::Heap *)*((_QWORD *)this + 5119);
  if (!v12)
    v12 = JSC::GCClient::Heap::withScopeSpaceSlow((JSC::Heap **)this + 4694);
  result = *((_QWORD *)v12 + 3);
  if (result < *((_QWORD *)v12 + 4))
    goto LABEL_5;
  result = *((_QWORD *)v12 + 5);
  if ((result & 1) == 0)
  {
    v17 = *(_QWORD *)(result + 8) ^ *((_QWORD *)v12 + 6);
    *((_QWORD *)v12 + 4) = result + HIDWORD(v17);
    *((_QWORD *)v12 + 5) = result + (int)v17;
LABEL_5:
    *((_QWORD *)v12 + 3) = result + 32;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v12, (char *)this + 192, 32, 0, 0);
LABEL_6:
  *(_DWORD *)result = 0;
  v14 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)result = v11 >> 4;
  *(_DWORD *)(result + 4) = v14;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSWithScope::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;

  v10 = 56;
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)&JSC::JSWithScope::s_info, 0, 0, a9, a4);
}

void JSC::JSWrapperObject::visitChildren(JSC::JSWrapperObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v9[0] = a2;
    v9[1] = this;
    v11 = 0;
    v10 = v6;
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v9[0] + 88) = v10;
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::byteLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
    return *(_QWORD *)(a1 + 24);
  v15[0] = 0;
  v15[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v15, a3, a4, a5, a6, a7, a8);
  v9 = 0;
  if (v12 && v11)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v14) = 0;
      else
        v14 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return v11 << v14;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v13) = 0;
      else
        v13 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return *(_QWORD *)(a1 + 24) << v13;
    }
  }
  return v9;
}

unint64_t JSC::integerIndexedObjectByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;

  v9 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = 0;
  if (v11 && v9)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v14) = 0;
      else
        v14 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return v9 << v14;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v12) = 0;
      else
        v12 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return *(_QWORD *)(a1 + 24) << v12;
    }
  }
  return v10;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::byteLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
    return 4 * *(_QWORD *)(a1 + 24);
  v15[0] = 0;
  v15[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v15, a3, a4, a5, a6, a7, a8);
  v9 = 0;
  if (v12 && v11)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v14) = 0;
      else
        v14 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return v11 << v14;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v13) = 0;
      else
        v13 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return *(_QWORD *)(a1 + 24) << v13;
    }
  }
  return v9;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::byteLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
    return 8 * *(_QWORD *)(a1 + 24);
  v15[0] = 0;
  v15[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v15, a3, a4, a5, a6, a7, a8);
  v9 = 0;
  if (v12 && v11)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v14) = 0;
      else
        v14 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return v11 << v14;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v13) = 0;
      else
        v13 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return *(_QWORD *)(a1 + 24) << v13;
    }
  }
  return v9;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::byteLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE v9[16];

  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
    return *(_QWORD *)(a1 + 24);
  v9[0] = 0;
  v9[8] = 0;
  return JSC::integerIndexedObjectByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v9, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::byteLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
    return 2 * *(_QWORD *)(a1 + 24);
  v15[0] = 0;
  v15[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v15, a3, a4, a5, a6, a7, a8);
  v9 = 0;
  if (v12 && v11)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v14) = 0;
      else
        v14 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return v11 << v14;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
        LOBYTE(v13) = 0;
      else
        v13 = qword_199158A40[(char)(*(_BYTE *)(a1 + 5) - 42)];
      return *(_QWORD *)(a1 + 24) << v13;
    }
  }
  return v9;
}

unint64_t JSC::argumentClampedIndexFromStartOrEnd(JSC::JSGlobalObject *a1, JSC::JSObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v11;
  double v12;
  double v13;
  JSC::JSObject *v14;

  v14 = a2;
  if (a2 == (JSC::JSObject *)10)
    return a4;
  if ((unint64_t)a2 < 0xFFFE000000000000)
  {
    v11 = JSC::JSValue::toIntegerOrInfinity(&v14, a1, a3, a4, a5, a6, a7, a8, a9);
    v12 = (double)a3;
    if (v11 >= 0.0)
    {
      if (v11 <= v12)
        return (unint64_t)v11;
      else
        return a3;
    }
    else
    {
      v13 = v11 + v12;
      if (v13 <= 0.0)
        return (unint64_t)0.0;
      return (unint64_t)v13;
    }
  }
  if ((a2 & 0x80000000) != 0)
    return ((int)a2 + a3) & ~((uint64_t)((int)a2 + a3) >> 63);
  if ((int)a2 >= a3)
    return a3;
  return (int)a2;
}

BOOL JSC::JSValue::isCallable(JSC::JSValue *this)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD v4[3];

  v1 = *(_QWORD *)this;
  if ((v1 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned __int8 *)(v1 + 5);
  if (v2 < 0x17)
    return 0;
  if ((v2 & 0xFE) == 0x1A)
    return 1;
  if ((*(_BYTE *)(v1 + 6) & 4) == 0)
    return 0;
  (*(void (**)(_QWORD *__return_ptr))(16 * *(unsigned int *)(16 * (*(_DWORD *)v1 & 0xFFFFFFFE) + 0x4C)
                                               + 0x38))(v4);
  return LOBYTE(v4[0]) != 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  size_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  void *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[16];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198AD74B4);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_56;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_42;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_42;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v45)
    {
      v24 = v45 + ((unint64_t)v45 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v45);
      if (v26 < 0x11)
      {
        __dst = v46;
        LODWORD(v45) = 16;
        v29 = v46;
      }
      else
      {
        if (HIDWORD(v26) || (WTF::tryFastMalloc((WTF *)v26, &v47), (v29 = v47) == 0))
        {
          v22 = 1;
          goto LABEL_56;
        }
        LODWORD(v45) = v26;
        __dst = v47;
      }
      memcpy(v29, v27, v28);
      if (v46 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    HIDWORD(v45) = v18;
    if (v18 == 1)
    {
      *(_BYTE *)__dst = *(_BYTE *)v19;
    }
    else if (v18)
    {
      memcpy(__dst, (const void *)v19, v18);
    }
  }
LABEL_42:
  std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_56;
  if (((1 << v37) & 0x3D) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v37) & 0x3D000000000000) == 0)
      goto LABEL_56;
    v38 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (v39)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_BYTE *)v19 = *(_BYTE *)__dst;
      goto LABEL_56;
    }
    if (v18)
      memcpy((void *)v19, __dst, v18);
  }
  v22 = 0;
LABEL_56:
  v40 = __dst;
  if (v46 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t WTF::Vector<unsigned char,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>(uint64_t a1, WTF *a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (int)a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= (unint64_t)a2)
  {
LABEL_18:
    *(_DWORD *)(a1 + 12) = v2;
    return 1;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= (unint64_t)a2)
    v7 = (unint64_t)a2;
  else
    v7 = v6;
  v8 = *(const void **)a1;
  v9 = *(unsigned int *)(a1 + 12);
  if (v7 < 0x101)
  {
    result = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 256;
    goto LABEL_13;
  }
  if (HIDWORD(v7))
    return 0;
  WTF::tryFastMalloc((WTF *)v7, &v18);
  result = v18;
  if (v18)
  {
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = result;
LABEL_13:
    memcpy((void *)result, v8, v9);
    if ((const void *)(a1 + 16) != v8 && v8)
    {
      if (*(const void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  void *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[64];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198AD78B8);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_53;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_39;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v45)
    {
      v24 = v45 + ((unint64_t)v45 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v45);
      if (v26 < 0x11)
      {
        __dst = v46;
        LODWORD(v45) = 16;
        v29 = v46;
      }
      else
      {
        if (v26 >> 30 || (WTF::tryFastMalloc((WTF *)(4 * v26), &v47), (v29 = v47) == 0))
        {
          v22 = 1;
          goto LABEL_53;
        }
        LODWORD(v45) = v26;
        __dst = v47;
      }
      memcpy(v29, v27, 4 * v28);
      if (v46 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    HIDWORD(v45) = v18;
    if (v18)
    {
      if (v18 == 1)
        *(_DWORD *)__dst = *(_DWORD *)v19;
      else
        memcpy(__dst, (const void *)v19, 4 * v18);
    }
  }
LABEL_39:
  std::__sort<std::__less<int,int> &,int *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_53;
  if (((1 << v37) & 0x3D) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v37) & 0x3D000000000000) == 0)
      goto LABEL_53;
    v38 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (v39 && v18)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_DWORD *)v19 = *(_DWORD *)__dst;
      goto LABEL_53;
    }
    memcpy((void *)v19, __dst, 4 * v18);
  }
  v22 = 0;
LABEL_53:
  v40 = __dst;
  if (v46 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t WTF::Vector<int,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
  {
LABEL_18:
    *(_DWORD *)(a1 + 12) = v2;
    return 1;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = *(const void **)a1;
  v9 = *(unsigned int *)(a1 + 12);
  if (v7 < 0x101)
  {
    result = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 256;
    goto LABEL_13;
  }
  if (v7 >> 30)
    return 0;
  WTF::tryFastMalloc((WTF *)(4 * v7), &v18);
  result = v18;
  if (v18)
  {
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = result;
LABEL_13:
    memcpy((void *)result, v8, 4 * v9);
    if ((const void *)(a1 + 16) != v8 && v8)
    {
      if (*(const void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  void *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[64];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198AD7CCCLL);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_54;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_41;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v45)
    {
      v24 = v45 + ((unint64_t)v45 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v45);
      if (v26 < 0x11)
      {
        __dst = v46;
        LODWORD(v45) = 16;
        v29 = v46;
      }
      else
      {
        if (v26 >> 30 || (WTF::tryFastMalloc((WTF *)(4 * v26), &v47), (v29 = v47) == 0))
        {
          v22 = 1;
          goto LABEL_54;
        }
        LODWORD(v45) = v26;
        __dst = v47;
      }
      memcpy(v29, v27, 4 * v28);
      if (v46 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    HIDWORD(v45) = v18;
    if (v18 == 1)
    {
      *(_DWORD *)__dst = *(_DWORD *)v19;
    }
    else if (v18)
    {
      memcpy(__dst, (const void *)v19, 4 * v18);
    }
  }
LABEL_41:
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_54;
  if (((1 << v37) & 0x3D) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v37) & 0x3D000000000000) == 0)
      goto LABEL_54;
    v38 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (!v39)
    goto LABEL_53;
  v11 = __dst;
  if (v18 != 1)
  {
    if (v18)
      memcpy((void *)v19, __dst, 4 * v18);
LABEL_53:
    v22 = 0;
    goto LABEL_54;
  }
  v22 = 0;
  *(_DWORD *)v19 = *(_DWORD *)__dst;
LABEL_54:
  v40 = __dst;
  if (v46 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t (*v43)();
  void *v44;
  _BYTE v47[16];
  void *__dst;
  uint64_t v49;
  _BYTE v50[128];
  _BYTE *v51;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198AD8028);
    }
  }
  __dst = v50;
  v49 = 16;
  v47[0] = 0;
  v47[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_64;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_32;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_32;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v49)
    {
      v24 = v49 + ((unint64_t)v49 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v49);
      if (v26 < 0x11)
      {
        __dst = v50;
        LODWORD(v49) = 16;
        v29 = v50;
      }
      else
      {
        if (v26 >> 29 || (WTF::tryFastMalloc((WTF *)(8 * v26), &v51), (v29 = v51) == 0))
        {
          v22 = 1;
          goto LABEL_64;
        }
        LODWORD(v49) = v26;
        __dst = v51;
      }
      memcpy(v29, v27, 8 * v28);
      if (v50 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree((unint64_t)v27, v33, v34, v35, v36, v37, v38, v39);
      }
    }
    HIDWORD(v49) = v18;
    v31 = (uint64_t *)__dst;
    if (v18)
    {
      if (v18 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)v19;
      }
      else
      {
        memcpy(__dst, (const void *)v19, 8 * v18);
        v31 = (uint64_t *)__dst;
      }
      v30 = &v31[v18];
      goto LABEL_47;
    }
    v30 = (uint64_t *)__dst;
    v32 = 0;
    goto LABEL_50;
  }
LABEL_32:
  v30 = (uint64_t *)(v19 + 8 * v10);
  if (v10)
  {
    v31 = (uint64_t *)v19;
LABEL_47:
    v40 = v31;
    do
    {
      *v40 = *v40;
      ++v40;
    }
    while (v40 != v30);
    v32 = 126 - 2 * __clz(v18);
    goto LABEL_50;
  }
  v32 = 0;
  v31 = (uint64_t *)v19;
LABEL_50:
  std::__introsort<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *,false>((uint64_t)v31, v30, v32, 1);
  v22 = 0;
  v41 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v41 > 0x35)
    goto LABEL_64;
  if (((1 << v41) & 0x3D) != 0)
  {
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v41) & 0x3D000000000000) == 0)
      goto LABEL_64;
    v42 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v42 + 32))
    v43 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v43 = 0;
  if (v43 && v18)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_QWORD *)v19 = *(_QWORD *)__dst;
      goto LABEL_64;
    }
    memcpy((void *)v19, __dst, 8 * v18);
  }
  v22 = 0;
LABEL_64:
  v44 = __dst;
  if (v50 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v49) = 0;
    WTF::fastFree((unint64_t)v44, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  _BOOL4 v62;
  _BOOL4 v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  _BOOL4 v78;
  _BOOL4 v79;
  _BOOL4 v80;
  uint64_t v81;
  BOOL v82;
  BOOL v83;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  BOOL v90;
  BOOL v91;
  uint64_t v92;
  _BOOL4 v93;
  _BOOL4 v94;
  uint64_t *v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  uint64_t *v103;
  uint64_t v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _BOOL4 v113;
  _BOOL4 v114;
  uint64_t v115;
  BOOL v116;
  BOOL v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL4 v121;
  BOOL v122;
  uint64_t v123;
  _BOOL4 v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  _BOOL4 v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL4 v133;
  uint64_t v134;
  _BOOL4 v135;
  BOOL v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  uint64_t *v146;
  int64_t v147;
  int64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL4 v153;
  uint64_t *v154;
  uint64_t v155;
  BOOL v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL4 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  _BOOL4 v176;
  uint64_t *v177;
  BOOL v178;
  uint64_t v179;
  _BOOL4 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BOOL4 v184;
  uint64_t v185;
  uint64_t *v186;
  BOOL v187;
  uint64_t v188;
  _BOOL4 v189;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v119 = *(a2 - 1);
        v120 = *v8;
        v121 = v119 < *v8;
        if ((*v8 & v119) < 0 != __OFSUB__(v119, *v8))
          v121 = v119 > *v8;
        if (v121)
        {
          *v8 = v119;
          *(a2 - 1) = v120;
        }
        return result;
      case 3:
        v66 = *v8;
        v70 = v8[1];
        if (((*v8 & v70 & 0x8000000000000000) != 0) != __OFSUB__(v70, *v8))
          v122 = (uint64_t)v70 > *v8;
        else
          v122 = (uint64_t)v70 < *v8;
        v123 = *(a2 - 1);
        v124 = v123 < (uint64_t)v70;
        if (((v123 & v70 & 0x8000000000000000) != 0) != __OFSUB__(v123, v70))
          v124 = v123 > (uint64_t)v70;
        if (v122)
        {
          if (!v124)
            goto LABEL_303;
          *v8 = v123;
          goto LABEL_307;
        }
        if (v124)
        {
          v8[1] = v123;
          *(a2 - 1) = v70;
          v131 = v8[1];
          goto LABEL_285;
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v125 = v8 + 1;
        v126 = v8 + 2;
        v127 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(v7, v7 + 1, v7 + 2, v7 + 3);
        v128 = *(a2 - 1);
        v129 = v7[3];
        v130 = v128 < v129;
        if ((v129 & v128) < 0 != __OFSUB__(v128, v129))
          v130 = v128 > v129;
        if (v130)
        {
          *v127 = v128;
          *(a2 - 1) = v129;
          v131 = *v127;
          v132 = *v126;
          v133 = *v127 < *v126;
          if ((*v126 & *v127) < 0 != __OFSUB__(*v127, *v126))
            v133 = *v127 > *v126;
          if (v133)
          {
            *v126 = v131;
            *v127 = v132;
            v134 = *v125;
            v135 = v131 < *v125;
            if ((*v125 & v131) < 0 != __OFSUB__(v131, *v125))
              v135 = v131 > *v125;
            if (v135)
            {
              v7[1] = v131;
              v7[2] = v134;
LABEL_285:
              v179 = *v7;
              v180 = v131 < *v7;
              if ((*v7 & v131) < 0 != __OFSUB__(v131, *v7))
                v180 = v131 > *v7;
              if (v180)
              {
                *v7 = v131;
                v7[1] = v179;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v66 = (uint64_t)(v8 + 1);
          v137 = v8 == a2 || v66 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (!v137)
            {
              v138 = 8;
              v139 = v8;
              do
              {
                v140 = *v139;
                v139 = (uint64_t *)v66;
                v141 = *(_QWORD *)v66;
                v142 = v141 < v140;
                if ((v140 & v141) < 0 != __OFSUB__(v141, v140))
                  v142 = v141 > v140;
                if (v142)
                {
                  v143 = v138;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v143) = v140;
                    v144 = v143 - 8;
                    if (v143 == 8)
                      break;
                    v140 = *(uint64_t *)((char *)v8 + v143 - 16);
                    v145 = v141 > v140;
                    if ((v140 & v141) < 0 == __OFSUB__(v141, v140))
                      v145 = v141 < v140;
                    v143 -= 8;
                    if (!v145)
                    {
                      v146 = (uint64_t *)((char *)v8 + v144);
                      goto LABEL_229;
                    }
                  }
                  v146 = v8;
LABEL_229:
                  *v146 = v141;
                }
                v66 = (uint64_t)(v139 + 1);
                v138 += 8;
              }
              while (v139 + 1 != a2);
            }
          }
          else if (!v137)
          {
            v70 = 0;
            v181 = 1;
            while (1)
            {
              v182 = v8[v70];
              v70 = v181;
              v183 = *(_QWORD *)v66;
              v184 = *(_QWORD *)v66 < v182;
              if ((v182 & *(_QWORD *)v66) < 0 != __OFSUB__(*(_QWORD *)v66, v182))
                v184 = *(_QWORD *)v66 > v182;
              if (v184)
                break;
LABEL_300:
              v181 = v70 + 1;
              v66 += 8;
              if ((uint64_t *)v66 == a2)
                return result;
            }
            v185 = 0;
            while (1)
            {
              v186 = (uint64_t *)(v66 + 8 * v185);
              *v186 = v182;
              if (!(v70 + v185))
                break;
              v182 = *(v186 - 2);
              v187 = v183 < v182;
              if ((v182 & v183) < 0 != __OFSUB__(v183, v182))
                v187 = v183 > v182;
              --v185;
              if (!v187)
              {
                *(_QWORD *)(v66 + 8 * v185) = v183;
                goto LABEL_300;
              }
            }
LABEL_302:
            __break(1u);
LABEL_303:
            *v7 = v70;
            v7[1] = v66;
            v188 = *(a2 - 1);
            v189 = v188 < v66;
            if ((v188 & v66) < 0 != __OFSUB__(v188, v66))
              v189 = v188 > v66;
            if (v189)
            {
              v7[1] = v188;
LABEL_307:
              *(a2 - 1) = v66;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v147 = (unint64_t)(v10 - 2) >> 1;
            v148 = v147;
            do
            {
              if (v147 >= v148)
              {
                v149 = (2 * v148) | 1;
                v150 = &v8[v149];
                v151 = *v150;
                if (2 * v148 + 2 < v10)
                {
                  v152 = v150[1];
                  v153 = v151 < v152;
                  if ((v152 & v151) < 0 != __OFSUB__(v151, v152))
                    v153 = v151 > v152;
                  if (v153)
                  {
                    v151 = v150[1];
                    ++v150;
                    v149 = 2 * v148 + 2;
                  }
                }
                v154 = &v8[v148];
                v155 = *v154;
                v156 = v151 < *v154;
                result = v151 > *v154;
                if ((*v154 & v151) < 0 != __OFSUB__(v151, *v154))
                  v156 = v151 > *v154;
                if (!v156)
                {
                  do
                  {
                    v157 = v150;
                    *v154 = v151;
                    if (v147 < v149)
                      break;
                    v158 = (2 * v149) | 1;
                    v150 = &v8[v158];
                    v149 = 2 * v149 + 2;
                    v151 = *v150;
                    if (v149 >= v10)
                    {
                      v149 = v158;
                    }
                    else
                    {
                      v159 = v150[1];
                      v160 = v151 < v159;
                      if ((v159 & v151) < 0 != __OFSUB__(v151, v159))
                        v160 = v151 > v159;
                      if (v160)
                      {
                        v151 = v150[1];
                        ++v150;
                      }
                      else
                      {
                        v149 = v158;
                      }
                    }
                    result = (v151 & v155) < 0 != __OFSUB__(v151, v155) ? v151 > v155 : v151 < v155;
                    v154 = v157;
                  }
                  while ((_DWORD)result != 1);
                  *v157 = v155;
                }
              }
              v73 = v148-- <= 0;
            }
            while (!v73);
            v161 = (unint64_t)v9 >> 3;
            do
            {
              v162 = 0;
              v163 = *v8;
              v164 = v8;
              do
              {
                v165 = &v164[v162];
                v168 = v165[1];
                v166 = v165 + 1;
                v167 = v168;
                v169 = (2 * v162) | 1;
                v162 = 2 * v162 + 2;
                if (v162 >= v161)
                {
                  v162 = v169;
                }
                else
                {
                  v170 = v166[1];
                  if ((v170 & v167) < 0 != __OFSUB__(v167, v170))
                    result = v167 > v170;
                  else
                    result = v167 < v170;
                  if ((_DWORD)result)
                  {
                    v167 = v166[1];
                    ++v166;
                  }
                  else
                  {
                    v162 = v169;
                  }
                }
                *v164 = v167;
                v164 = v166;
              }
              while (v162 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
              if (v166 == --a2)
              {
                *v166 = v163;
              }
              else
              {
                *v166 = *a2;
                *a2 = v163;
                v171 = (char *)v166 - (char *)v8 + 8;
                if (v171 >= 9)
                {
                  v172 = (((unint64_t)v171 >> 3) - 2) >> 1;
                  v173 = &v8[v172];
                  v174 = *v173;
                  v175 = *v166;
                  v176 = *v173 < *v166;
                  if ((*v166 & *v173) < 0 != __OFSUB__(*v173, *v166))
                    v176 = *v173 > *v166;
                  if (v176)
                  {
                    do
                    {
                      v177 = v173;
                      *v166 = v174;
                      if (!v172)
                        break;
                      v172 = (v172 - 1) >> 1;
                      v173 = &v8[v172];
                      v174 = *v173;
                      v178 = *v173 > v175;
                      if ((*v173 & v175) < 0 == __OFSUB__(*v173, v175))
                        v178 = *v173 < v175;
                      v166 = v177;
                    }
                    while (v178);
                    *v177 = v175;
                  }
                }
              }
              v73 = v161-- <= 2;
            }
            while (!v73);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 >= 0x401)
        {
          v14 = *v12;
          v15 = *v8;
          v16 = *v12 > *v8;
          if ((*v8 & *v12) < 0 == __OFSUB__(*v12, *v8))
            v16 = *v12 < *v8;
          v17 = v13 < v14;
          if ((v14 & v13) < 0 != __OFSUB__(v13, v14))
            v17 = v13 > v14;
          if (v16)
          {
            if (v17)
            {
              *v8 = v13;
              goto LABEL_35;
            }
            *v8 = v14;
            *v12 = v15;
            v26 = *(a2 - 1);
            v27 = v26 < v15;
            if ((v26 & v15) < 0 != __OFSUB__(v26, v15))
              v27 = v26 > v15;
            if (v27)
            {
              *v12 = v26;
LABEL_35:
              *(a2 - 1) = v15;
            }
          }
          else if (v17)
          {
            *v12 = v13;
            *(a2 - 1) = v14;
            v22 = *v8;
            v23 = *v12 < *v8;
            if ((*v8 & *v12) < 0 != __OFSUB__(*v12, *v8))
              v23 = *v12 > *v8;
            if (v23)
            {
              *v8 = *v12;
              *v12 = v22;
            }
          }
          v28 = &v8[v11];
          v31 = *(v28 - 1);
          v29 = v28 - 1;
          v30 = v31;
          v32 = v8[1];
          v33 = v31 < v32;
          v34 = v31 > v32;
          if ((v32 & v31) < 0 != __OFSUB__(v31, v32))
            v35 = v34;
          else
            v35 = v33;
          v36 = *(a2 - 2);
          v37 = v36 < v30;
          if ((v36 & v30) < 0 != __OFSUB__(v36, v30))
            v37 = v36 > v30;
          if (v35)
          {
            if (v37)
            {
              v8[1] = v36;
              goto LABEL_58;
            }
            v8[1] = v30;
            *v29 = v32;
            v42 = *(a2 - 2);
            v43 = v42 < v32;
            if ((v42 & v32) < 0 != __OFSUB__(v42, v32))
              v43 = v42 > v32;
            if (v43)
            {
              *v29 = v42;
LABEL_58:
              *(a2 - 2) = v32;
            }
          }
          else if (v37)
          {
            *v29 = v36;
            *(a2 - 2) = v30;
            v38 = v8[1];
            v39 = *v29 < v38;
            if ((v38 & *v29) < 0 != __OFSUB__(*v29, v38))
              v39 = *v29 > v38;
            if (v39)
            {
              v8[1] = *v29;
              *v29 = v38;
            }
          }
          v44 = &v8[v11];
          v47 = v44[1];
          v45 = v44 + 1;
          v46 = v47;
          v48 = v8[2];
          v49 = v47 < v48;
          v50 = v47 > v48;
          if ((v48 & v47) < 0 != __OFSUB__(v47, v48))
            v51 = v50;
          else
            v51 = v49;
          v52 = *(a2 - 3);
          v53 = v52 < v46;
          if ((v52 & v46) < 0 != __OFSUB__(v52, v46))
            v53 = v52 > v46;
          if (v51)
          {
            if (v53)
            {
              v8[2] = v52;
              goto LABEL_76;
            }
            v8[2] = v46;
            *v45 = v48;
            v56 = *(a2 - 3);
            v57 = v56 < v48;
            if ((v56 & v48) < 0 != __OFSUB__(v56, v48))
              v57 = v56 > v48;
            if (v57)
            {
              *v45 = v56;
LABEL_76:
              *(a2 - 3) = v48;
            }
          }
          else if (v53)
          {
            *v45 = v52;
            *(a2 - 3) = v46;
            v54 = v8[2];
            v55 = *v45 < v54;
            if ((v54 & *v45) < 0 != __OFSUB__(*v45, v54))
              v55 = *v45 > v54;
            if (v55)
            {
              v8[2] = *v45;
              *v45 = v54;
            }
          }
          v58 = *v12;
          v59 = *v29;
          if ((*v29 & *v12) < 0 != __OFSUB__(*v12, *v29))
            v60 = *v12 > *v29;
          else
            v60 = *v12 < *v29;
          v61 = *v45;
          v62 = *v45 < v58;
          if ((*v45 & v58) < 0 != __OFSUB__(*v45, v58))
            v62 = *v45 > v58;
          if (v60)
          {
            if (!v62)
            {
              *v29 = v58;
              *v12 = v59;
              v63 = (v61 & v59) < 0 != __OFSUB__(v61, v59) ? v61 > v59 : v61 < v59;
              v29 = v12;
              v58 = v61;
              if (!v63)
              {
                v58 = v59;
LABEL_95:
                v65 = *v8;
                *v8 = v58;
                *v12 = v65;
                goto LABEL_96;
              }
            }
          }
          else
          {
            if (!v62)
              goto LABEL_95;
            *v12 = v61;
            *v45 = v58;
            if ((v61 & v59) < 0 != __OFSUB__(v61, v59))
              v64 = v61 > v59;
            else
              v64 = v61 < v59;
            v45 = v12;
            v58 = v59;
            if (!v64)
            {
              v58 = v61;
              goto LABEL_95;
            }
          }
          *v29 = v61;
          *v45 = v59;
          goto LABEL_95;
        }
        v18 = *v8;
        v19 = *v12;
        v20 = *v8 > *v12;
        if ((*v12 & *v8) < 0 == __OFSUB__(*v8, *v12))
          v20 = *v8 < *v12;
        v21 = v13 < v18;
        if ((v18 & v13) < 0 != __OFSUB__(v13, v18))
          v21 = v13 > v18;
        if (v20)
        {
          if (v21)
          {
            *v12 = v13;
LABEL_53:
            *(a2 - 1) = v19;
            goto LABEL_96;
          }
          *v12 = v18;
          *v8 = v19;
          v40 = *(a2 - 1);
          v41 = v40 < v19;
          if ((v40 & v19) < 0 != __OFSUB__(v40, v19))
            v41 = v40 > v19;
          if (v41)
          {
            *v8 = v40;
            goto LABEL_53;
          }
        }
        else if (v21)
        {
          *v8 = v13;
          *(a2 - 1) = v18;
          v24 = *v12;
          v25 = *v8 < *v12;
          if ((*v12 & *v8) < 0 != __OFSUB__(*v8, *v12))
            v25 = *v8 > *v12;
          if (v25)
          {
            *v12 = *v8;
            *v8 = v24;
          }
        }
LABEL_96:
        --a3;
        v66 = *v8;
        if ((a4 & 1) == 0)
        {
          v67 = *(v8 - 1);
          if (!((v66 & v67) < 0 != __OFSUB__(v67, v66) ? v67 > v66 : v67 < v66))
          {
            v97 = *(a2 - 1);
            if ((v97 & v66) < 0 != __OFSUB__(v66, v97))
              v98 = v66 > v97;
            else
              v98 = v66 < v97;
            if (v98)
            {
              v70 = (unint64_t)(v8 + 1);
              do
              {
                if ((uint64_t *)v70 == a2)
                  goto LABEL_302;
                v99 = *(_QWORD *)v70;
                v70 += 8;
                v100 = v66 < v99;
                v101 = v66 > v99;
                if ((v99 & v66) < 0 != __OFSUB__(v66, v99))
                  v102 = v101;
                else
                  v102 = v100;
              }
              while (!v102);
              v8 = (uint64_t *)(v70 - 8);
            }
            else
            {
              v103 = v8 + 1;
              do
              {
                v8 = v103;
                if (v103 >= a2)
                  break;
                ++v103;
              }
              while (!((*v8 & v66) < 0 != __OFSUB__(v66, *v8) ? v66 > *v8 : v66 < *v8));
            }
            v70 = (unint64_t)a2;
            if (v8 < a2)
            {
              v70 = (unint64_t)a2;
              while ((uint64_t *)v70 != v7)
              {
                v105 = *(_QWORD *)(v70 - 8);
                v70 -= 8;
                v106 = v66 < v105;
                v107 = v66 > v105;
                if ((v105 & v66) < 0 != __OFSUB__(v66, v105))
                  v108 = v107;
                else
                  v108 = v106;
                if (!v108)
                  goto LABEL_168;
              }
              goto LABEL_302;
            }
LABEL_168:
            if ((unint64_t)v8 < v70)
            {
              v109 = *v8;
              v110 = *(_QWORD *)v70;
              do
              {
                *v8 = v110;
                v111 = v8 + 1;
                *(_QWORD *)v70 = v109;
                do
                {
                  if (v111 == a2)
                    goto LABEL_302;
                  v112 = *v111++;
                  v109 = v112;
                  v113 = v66 < v112;
                  v114 = v66 > v112;
                  if ((v112 & v66) < 0 != __OFSUB__(v66, v112))
                    v113 = v114;
                }
                while (!v113);
                v8 = v111 - 1;
                do
                {
                  if ((uint64_t *)v70 == v7)
                    goto LABEL_302;
                  v115 = *(_QWORD *)(v70 - 8);
                  v70 -= 8;
                  v110 = v115;
                  v116 = v66 < v115;
                  v117 = v66 > v115;
                  if ((v115 & v66) < 0 != __OFSUB__(v66, v115))
                    v116 = v117;
                }
                while (v116);
              }
              while ((unint64_t)v8 < v70);
            }
            v118 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v118;
            a4 = 0;
            *v118 = v66;
            continue;
          }
        }
        v69 = 0;
        do
        {
          v70 = (unint64_t)&v8[v69 + 1];
          if ((uint64_t *)v70 == a2)
            goto LABEL_302;
          v71 = *(_QWORD *)v70;
          v72 = __OFSUB__(*(_QWORD *)v70, v66);
          v73 = *(_QWORD *)v70 <= v66;
          v74 = *(_QWORD *)v70 < v66;
          v75 = !v73;
          if ((v71 & v66) < 0 != v72)
            v74 = v75;
          ++v69;
        }
        while (v74);
        v70 = (unint64_t)&v8[v69];
        v76 = a2;
        if (v69 != 1)
        {
          while (v76 != v8)
          {
            v77 = *--v76;
            v78 = v77 < v66;
            v79 = v77 > v66;
            if ((v77 & v66) < 0 != __OFSUB__(v77, v66))
              v80 = v79;
            else
              v80 = v78;
            if (v80)
              goto LABEL_122;
          }
          goto LABEL_302;
        }
        v76 = a2;
        do
        {
          if (v70 >= (unint64_t)v76)
            break;
          v81 = *--v76;
          v82 = v81 < v66;
          v83 = v81 > v66;
        }
        while (!((v81 & v66) < 0 != __OFSUB__(v81, v66) ? v83 : v82));
LABEL_122:
        if (v70 >= (unint64_t)v76)
        {
          v95 = (uint64_t *)(v70 - 8);
        }
        else
        {
          v85 = *v76;
          v86 = (uint64_t *)v70;
          v87 = v76;
          do
          {
            *v86 = v85;
            *v87 = v71;
            v88 = v86 + 1;
            do
            {
              if (v88 == a2)
                goto LABEL_302;
              v89 = *v88++;
              v71 = v89;
              v90 = v89 < v66;
              v91 = v89 > v66;
              if ((v89 & v66) < 0 != __OFSUB__(v89, v66))
                v90 = v91;
            }
            while (v90);
            v86 = v88 - 1;
            do
            {
              if (v87 == v8)
                goto LABEL_302;
              v92 = *--v87;
              v85 = v92;
              v93 = v92 < v66;
              v94 = v92 > v66;
              if ((v92 & v66) < 0 != __OFSUB__(v92, v66))
                v93 = v94;
            }
            while (!v93);
          }
          while (v86 < v87);
          v95 = v88 - 2;
        }
        if (v95 != v8)
          *v8 = *v95;
        *v95 = v66;
        if (v70 < (unint64_t)v76)
        {
LABEL_142:
          result = std::__introsort<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *,false>(v7, v95, a3, a4 & 1);
          a4 = 0;
          v8 = v95 + 1;
          continue;
        }
        v96 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(v8, v95);
        v8 = v95 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(v95 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v96)
            continue;
          goto LABEL_142;
        }
        a2 = v95;
        if (!v96)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL4 v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  BOOL v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  _BOOL4 v51;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = v6 < *a1;
      if ((*a1 & v6) < 0 != __OFSUB__(v6, *a1))
        v8 = v6 > *a1;
      if (v8)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = *a1;
      v10 = a1[1];
      if ((*a1 & v10) < 0 != __OFSUB__(v10, *a1))
        v11 = v10 > *a1;
      else
        v11 = v10 < *a1;
      v12 = *(a2 - 1);
      v13 = v12 < v10;
      if ((v12 & v10) < 0 != __OFSUB__(v12, v10))
        v13 = v12 > v10;
      if (v11)
      {
        if (v13)
        {
          *a1 = v12;
LABEL_68:
          *(a2 - 1) = v9;
          return result;
        }
        *a1 = v10;
        a1[1] = v9;
        v50 = *(a2 - 1);
        v51 = v50 < v9;
        if ((v50 & v9) < 0 != __OFSUB__(v50, v9))
          v51 = v50 > v9;
        if (v51)
        {
          a1[1] = v50;
          goto LABEL_68;
        }
      }
      else if (v13)
      {
        a1[1] = v12;
        *(a2 - 1) = v10;
        v37 = *a1;
        v36 = a1[1];
        v38 = v36 < *a1;
        if ((*a1 & v36) < 0 != __OFSUB__(v36, *a1))
          v38 = v36 > *a1;
        if (v38)
        {
          *a1 = v36;
          a1[1] = v37;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v23 = a1 + 1;
      v24 = a1 + 2;
      v25 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v26 = *(a2 - 1);
      v27 = a1[3];
      v28 = v26 < v27;
      if ((v27 & v26) < 0 != __OFSUB__(v26, v27))
        v28 = v26 > v27;
      if (v28)
      {
        *v25 = v26;
        *(a2 - 1) = v27;
        v29 = *v25;
        v30 = *v24;
        v31 = *v25 < *v24;
        if ((uint64_t)(*v24 & *v25) < 0 != __OFSUB__(*v25, *v24))
          v31 = *v25 > *v24;
        if (v31)
        {
          *v24 = v29;
          *v25 = v30;
          v32 = *v23;
          v33 = v29 < *v23;
          if ((*v23 & v29) < 0 != __OFSUB__(v29, *v23))
            v33 = v29 > *v23;
          if (v33)
          {
            a1[1] = v29;
            a1[2] = v32;
            v34 = *a1;
            v35 = v29 < *a1;
            if ((*a1 & v29) < 0 != __OFSUB__(v29, *a1))
              v35 = v29 > *a1;
            if (v35)
            {
              *a1 = v29;
              a1[1] = v34;
            }
          }
        }
      }
      return 1;
    default:
      v15 = a1 + 2;
      v14 = a1[2];
      v16 = a1[1];
      v17 = *a1;
      v18 = v16 < *a1;
      if ((*a1 & v16) < 0 != __OFSUB__(v16, *a1))
        v18 = v16 > *a1;
      v19 = v14 > v16;
      if ((v14 & v16) < 0 == __OFSUB__(v14, v16))
        v19 = v14 < v16;
      if (v18)
      {
        v20 = a1;
        v21 = a1 + 2;
        if (!v19)
        {
          *a1 = v16;
          a1[1] = v17;
          v22 = v14 < v17;
          if ((v14 & v17) < 0 != __OFSUB__(v14, v17))
            v22 = v14 > v17;
          v20 = a1 + 1;
          v21 = a1 + 2;
          if (!v22)
            goto LABEL_48;
        }
LABEL_47:
        *v20 = v14;
        *v21 = v17;
        goto LABEL_48;
      }
      if (v19)
      {
        a1[1] = v14;
        *v15 = v16;
        v39 = v14 < v17;
        if ((v14 & v17) < 0 != __OFSUB__(v14, v17))
          v39 = v14 > v17;
        v20 = a1;
        v21 = a1 + 1;
        if (v39)
          goto LABEL_47;
      }
LABEL_48:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v15;
        v45 = *v40 < v44;
        if ((v44 & *v40) < 0 != __OFSUB__(*v40, v44))
          v45 = *v40 > v44;
        if (v45)
        {
          v46 = i;
          while (1)
          {
            *(_QWORD *)((char *)a1 + v46) = v44;
            v47 = v46 - 8;
            if (v46 == 8)
              break;
            v44 = *(_QWORD *)((char *)a1 + v46 - 16);
            v48 = v43 > v44;
            if ((v44 & v43) < 0 == __OFSUB__(v43, v44))
              v48 = v43 < v44;
            v46 -= 8;
            if (!v48)
            {
              v49 = (_QWORD *)((char *)a1 + v47);
              goto LABEL_60;
            }
          }
          v49 = a1;
LABEL_60:
          *v49 = v43;
          if (++v41 == 8)
            break;
        }
        v15 = v40++;
        if (v40 == a2)
          return 1;
      }
      return v40 + 1 == a2;
  }
}

_QWORD *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sortFloat<long long>(double *,double *)::{lambda(long long,long long)#1} &,long long *>(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;

  v4 = *a2;
  v5 = *result;
  if ((uint64_t)(*result & *a2) < 0 != __OFSUB__(*a2, *result))
    v6 = *a2 > *result;
  else
    v6 = *a2 < *result;
  v7 = *a3;
  v8 = *a3 < v4;
  if ((*a3 & v4) < 0 != __OFSUB__(*a3, v4))
    v8 = *a3 > v4;
  if (v6)
  {
    if (v8)
    {
      *result = v7;
LABEL_18:
      *a3 = v5;
      v4 = v5;
      goto LABEL_20;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    v11 = *a3 < v5;
    if ((*a3 & v5) < 0 != __OFSUB__(*a3, v5))
      v11 = *a3 > v5;
    if (v11)
    {
      *a2 = v4;
      goto LABEL_18;
    }
  }
  else if (v8)
  {
    *a2 = v7;
    *a3 = v4;
    v9 = *result;
    v10 = *a2 < *result;
    if ((uint64_t)(*result & *a2) < 0 != __OFSUB__(*a2, *result))
      v10 = *a2 > *result;
    if (v10)
    {
      *result = *a2;
      *a2 = v9;
      v4 = *a3;
    }
  }
  else
  {
    v4 = *a3;
  }
LABEL_20:
  v12 = *a4 < v4;
  if ((*a4 & v4) < 0 != __OFSUB__(*a4, v4))
    v12 = *a4 > v4;
  if (v12)
  {
    *a3 = *a4;
    *a4 = v4;
    v13 = *a2;
    v14 = *a3 < *a2;
    if ((uint64_t)(*a2 & *a3) < 0 != __OFSUB__(*a3, *a2))
      v14 = *a3 > *a2;
    if (v14)
    {
      *a2 = *a3;
      *a3 = v13;
      v15 = *result;
      v16 = *a2 < *result;
      if ((uint64_t)(*result & *a2) < 0 != __OFSUB__(*a2, *result))
        v16 = *a2 > *result;
      if (v16)
      {
        *result = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<double,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
  {
LABEL_18:
    *(_DWORD *)(a1 + 12) = v2;
    return 1;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = *(const void **)a1;
  v9 = *(unsigned int *)(a1 + 12);
  if (v7 < 0x101)
  {
    result = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 256;
    goto LABEL_13;
  }
  if (v7 >> 29)
    return 0;
  WTF::tryFastMalloc((WTF *)(8 * v7), &v18);
  result = v18;
  if (v18)
  {
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = result;
LABEL_13:
    memcpy((void *)result, v8, 8 * v9);
    if ((const void *)(a1 + 16) != v8 && v8)
    {
      if (*(const void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t (*v43)();
  void *v44;
  _BYTE v47[16];
  void *__dst;
  uint64_t v49;
  _BYTE v50[64];
  _BYTE *v51;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198AD9538);
    }
  }
  __dst = v50;
  v49 = 16;
  v47[0] = 0;
  v47[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_64;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_32;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_32;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v49)
    {
      v24 = v49 + ((unint64_t)v49 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v49);
      if (v26 < 0x11)
      {
        __dst = v50;
        LODWORD(v49) = 16;
        v29 = v50;
      }
      else
      {
        if (v26 >> 30 || (WTF::tryFastMalloc((WTF *)(4 * v26), &v51), (v29 = v51) == 0))
        {
          v22 = 1;
          goto LABEL_64;
        }
        LODWORD(v49) = v26;
        __dst = v51;
      }
      memcpy(v29, v27, 4 * v28);
      if (v50 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree((unint64_t)v27, v33, v34, v35, v36, v37, v38, v39);
      }
    }
    HIDWORD(v49) = v18;
    v31 = (int *)__dst;
    if (v18)
    {
      if (v18 == 1)
      {
        *(_DWORD *)__dst = *(_DWORD *)v19;
      }
      else
      {
        memcpy(__dst, (const void *)v19, 4 * v18);
        v31 = (int *)__dst;
      }
      v30 = &v31[v18];
      goto LABEL_47;
    }
    v30 = (int *)__dst;
    v32 = 0;
    goto LABEL_50;
  }
LABEL_32:
  v30 = (int *)(v19 + 4 * v10);
  if (v10)
  {
    v31 = (int *)v19;
LABEL_47:
    v40 = v31;
    do
    {
      *v40 = *v40;
      ++v40;
    }
    while (v40 != v30);
    v32 = 126 - 2 * __clz(v18);
    goto LABEL_50;
  }
  v32 = 0;
  v31 = (int *)v19;
LABEL_50:
  std::__introsort<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *,false>((unint64_t)v31, v30, v32, 1);
  v22 = 0;
  v41 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v41 > 0x35)
    goto LABEL_64;
  if (((1 << v41) & 0x3D) != 0)
  {
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v41) & 0x3D000000000000) == 0)
      goto LABEL_64;
    v42 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v42 + 32))
    v43 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v43 = 0;
  if (v43 && v18)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_DWORD *)v19 = *(_DWORD *)__dst;
      goto LABEL_64;
    }
    memcpy((void *)v19, __dst, 4 * v18);
  }
  v22 = 0;
LABEL_64:
  v44 = __dst;
  if (v50 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v49) = 0;
    WTF::fastFree((unint64_t)v44, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *,false>(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  _BOOL4 v17;
  int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  _BOOL4 v27;
  int v28;
  _BOOL4 v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  int v38;
  _BOOL4 v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  _BOOL4 v44;
  int v45;
  _BOOL4 v46;
  int *v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  int v55;
  _BOOL4 v56;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  _BOOL4 v61;
  int v62;
  int v63;
  BOOL v64;
  int v65;
  _BOOL4 v66;
  _BOOL4 v67;
  BOOL v68;
  int v69;
  int *v70;
  int v71;
  uint64_t v73;
  unint64_t v74;
  int v75;
  BOOL v76;
  int *v77;
  int v78;
  _BOOL4 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  int v82;
  BOOL v83;
  BOOL v84;
  int v86;
  int *v87;
  int *v88;
  int *v89;
  int v90;
  BOOL v91;
  BOOL v92;
  int v93;
  _BOOL4 v94;
  _BOOL4 v95;
  int *v96;
  BOOL v97;
  int v98;
  BOOL v99;
  int v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  int *v104;
  int v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  int v110;
  int v111;
  int *v112;
  int v113;
  _BOOL4 v114;
  _BOOL4 v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int *v119;
  int v120;
  int v121;
  _BOOL4 v122;
  BOOL v123;
  int v124;
  _BOOL4 v125;
  int *v126;
  int *v127;
  int v128;
  int v129;
  _BOOL4 v130;
  int v131;
  int v132;
  _BOOL4 v133;
  int v134;
  _BOOL4 v135;
  BOOL v137;
  uint64_t v138;
  int *v139;
  int v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  int *v146;
  int64_t v147;
  int64_t v148;
  uint64_t v149;
  int *v150;
  int v151;
  int v152;
  _BOOL4 v153;
  int *v154;
  int v155;
  BOOL v156;
  int *v157;
  uint64_t v158;
  int v159;
  _BOOL4 v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int *v165;
  int *v166;
  int *v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  int *v174;
  int v175;
  int v176;
  _BOOL4 v177;
  int *v178;
  BOOL v179;
  int v180;
  _BOOL4 v181;
  uint64_t v182;
  int v183;
  int v184;
  _BOOL4 v185;
  uint64_t v186;
  int *v187;
  BOOL v188;
  int v189;
  _BOOL4 v190;

  v7 = (int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v120 = *(a2 - 1);
        v121 = *v8;
        v122 = v120 < *v8;
        if ((v121 & v120) < 0 != __OFSUB__(v120, v121))
          v122 = v120 > *v8;
        if (v122)
        {
          *v8 = v120;
          *(a2 - 1) = v121;
        }
        return result;
      case 3:
        LODWORD(v70) = *v8;
        LODWORD(v74) = v8[1];
        if (((v70 & v74 & 0x80000000) != 0) != __OFSUB__((_DWORD)v74, (_DWORD)v70))
          v123 = (int)v74 > *v8;
        else
          v123 = (int)v74 < *v8;
        v124 = *(a2 - 1);
        v125 = v124 < (int)v74;
        if (((v124 & v74 & 0x80000000) != 0) != __OFSUB__(v124, (_DWORD)v74))
          v125 = v124 > (int)v74;
        if (v123)
        {
          if (!v125)
            goto LABEL_300;
          *v8 = v124;
          goto LABEL_304;
        }
        if (v125)
        {
          v8[1] = v124;
          *(a2 - 1) = v74;
          v131 = v8[1];
          goto LABEL_282;
        }
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v126 = v8 + 2;
        v127 = v8 + 3;
        result = (unint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(v7, v7 + 1, v7 + 2, v7 + 3);
        v128 = *(a2 - 1);
        v129 = v7[3];
        v130 = v128 < v129;
        if ((v129 & v128) < 0 != __OFSUB__(v128, v129))
          v130 = v128 > v129;
        if (v130)
        {
          *v127 = v128;
          *(a2 - 1) = v129;
          v131 = *v127;
          v132 = *v126;
          v133 = *v127 < *v126;
          if ((v132 & v131) < 0 != __OFSUB__(v131, v132))
            v133 = *v127 > *v126;
          if (v133)
          {
            *v126 = v131;
            *v127 = v132;
            v134 = v7[1];
            v135 = v131 < v134;
            if ((v134 & v131) < 0 != __OFSUB__(v131, v134))
              v135 = v131 > v134;
            if (v135)
            {
              v7[1] = v131;
              v7[2] = v134;
LABEL_282:
              v180 = *v7;
              v181 = v131 < *v7;
              if ((v180 & v131) < 0 != __OFSUB__(v131, v180))
                v181 = v131 > *v7;
              if (v181)
              {
                *v7 = v131;
                v7[1] = v180;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 95)
        {
          v70 = v8 + 1;
          v137 = v8 == a2 || v70 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v137)
            {
              v138 = 4;
              v139 = v8;
              do
              {
                v140 = *v139;
                v139 = v70;
                v141 = *v70;
                v142 = v141 < v140;
                if ((v140 & v141) < 0 != __OFSUB__(v141, v140))
                  v142 = v141 > v140;
                if (v142)
                {
                  v143 = v138;
                  while (1)
                  {
                    *(int *)((char *)v8 + v143) = v140;
                    v144 = v143 - 4;
                    if (v143 == 4)
                      break;
                    v140 = *(int *)((char *)v8 + v143 - 8);
                    v145 = v141 > v140;
                    if ((v140 & v141) < 0 == __OFSUB__(v141, v140))
                      v145 = v141 < v140;
                    v143 -= 4;
                    if (!v145)
                    {
                      v146 = (int *)((char *)v8 + v144);
                      goto LABEL_226;
                    }
                  }
                  v146 = v8;
LABEL_226:
                  *v146 = v141;
                }
                v70 = v139 + 1;
                v138 += 4;
              }
              while (v139 + 1 != a2);
            }
          }
          else if (!v137)
          {
            v74 = 0;
            v182 = 1;
            while (1)
            {
              v183 = v8[v74];
              v74 = v182;
              v184 = *v70;
              v185 = *v70 < v183;
              if ((v183 & v184) < 0 != __OFSUB__(v184, v183))
                v185 = *v70 > v183;
              if (v185)
                break;
LABEL_297:
              v182 = v74 + 1;
              if (++v70 == a2)
                return result;
            }
            v186 = 0;
            while (1)
            {
              v187 = &v70[v186];
              *v187 = v183;
              if (!(v74 + v186))
                break;
              v183 = *(v187 - 2);
              v188 = v184 < v183;
              if ((v183 & v184) < 0 != __OFSUB__(v184, v183))
                v188 = v184 > v183;
              --v186;
              if (!v188)
              {
                v70[v186] = v184;
                goto LABEL_297;
              }
            }
LABEL_299:
            __break(1u);
LABEL_300:
            *v7 = v74;
            v7[1] = (int)v70;
            v189 = *(a2 - 1);
            v190 = v189 < (int)v70;
            if (((v189 & v70 & 0x80000000) != 0) != __OFSUB__(v189, (_DWORD)v70))
              v190 = v189 > (int)v70;
            if (v190)
            {
              v7[1] = v189;
LABEL_304:
              *(a2 - 1) = (int)v70;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v147 = (unint64_t)(v10 - 2) >> 1;
            v148 = v147;
            do
            {
              if (v147 >= v148)
              {
                v149 = (2 * v148) | 1;
                v150 = &v8[v149];
                v151 = *v150;
                if (2 * v148 + 2 < v10)
                {
                  v152 = v150[1];
                  v153 = v151 < v152;
                  if ((v152 & v151) < 0 != __OFSUB__(v151, v152))
                    v153 = v151 > v152;
                  if (v153)
                  {
                    v151 = v150[1];
                    ++v150;
                    v149 = 2 * v148 + 2;
                  }
                }
                v154 = &v8[v148];
                v155 = *v154;
                v156 = v151 < *v154;
                result = v151 > *v154;
                if ((v155 & v151) < 0 != __OFSUB__(v151, v155))
                  v156 = v151 > *v154;
                if (!v156)
                {
                  do
                  {
                    v157 = v150;
                    *v154 = v151;
                    if (v147 < v149)
                      break;
                    v158 = (2 * v149) | 1;
                    v150 = &v8[v158];
                    v149 = 2 * v149 + 2;
                    v151 = *v150;
                    if (v149 >= v10)
                    {
                      v149 = v158;
                    }
                    else
                    {
                      v159 = v150[1];
                      v160 = v151 < v159;
                      if ((v159 & v151) < 0 != __OFSUB__(v151, v159))
                        v160 = v151 > v159;
                      if (v160)
                      {
                        v151 = v150[1];
                        ++v150;
                      }
                      else
                      {
                        v149 = v158;
                      }
                    }
                    result = (v151 & v155) < 0 != __OFSUB__(v151, v155) ? v151 > v155 : v151 < v155;
                    v154 = v157;
                  }
                  while ((_DWORD)result != 1);
                  *v157 = v155;
                }
              }
              v161 = v148-- <= 0;
            }
            while (!v161);
            v162 = (unint64_t)v9 >> 2;
            do
            {
              v163 = 0;
              v164 = *v8;
              v165 = v8;
              do
              {
                v166 = &v165[v163];
                v169 = v166[1];
                v167 = v166 + 1;
                v168 = v169;
                v170 = (2 * v163) | 1;
                v163 = 2 * v163 + 2;
                if (v163 >= v162)
                {
                  v163 = v170;
                }
                else
                {
                  v171 = v167[1];
                  if ((v171 & v168) < 0 != __OFSUB__(v168, v171))
                    result = v168 > v171;
                  else
                    result = v168 < v171;
                  if ((_DWORD)result)
                  {
                    v168 = v167[1];
                    ++v167;
                  }
                  else
                  {
                    v163 = v170;
                  }
                }
                *v165 = v168;
                v165 = v167;
              }
              while (v163 <= (uint64_t)((unint64_t)(v162 - 2) >> 1));
              if (v167 == --a2)
              {
                *v167 = v164;
              }
              else
              {
                *v167 = *a2;
                *a2 = v164;
                v172 = (char *)v167 - (char *)v8 + 4;
                if (v172 >= 5)
                {
                  v173 = (((unint64_t)v172 >> 2) - 2) >> 1;
                  v174 = &v8[v173];
                  v175 = *v174;
                  v176 = *v167;
                  v177 = *v174 < *v167;
                  if ((v176 & v175) < 0 != __OFSUB__(v175, v176))
                    v177 = *v174 > *v167;
                  if (v177)
                  {
                    do
                    {
                      v178 = v174;
                      *v167 = v175;
                      if (!v173)
                        break;
                      v173 = (v173 - 1) >> 1;
                      v174 = &v8[v173];
                      v175 = *v174;
                      v179 = *v174 > v176;
                      if ((v175 & v176) < 0 == __OFSUB__(v175, v176))
                        v179 = *v174 < v176;
                      v167 = v178;
                    }
                    while (v179);
                    *v178 = v176;
                  }
                }
              }
              v161 = v162-- <= 2;
            }
            while (!v161);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 >= 0x201)
        {
          v14 = *v12;
          v15 = *v8;
          v16 = *v12 > *v8;
          if ((v15 & v14) < 0 == __OFSUB__(v14, v15))
            v16 = *v12 < *v8;
          v17 = v13 < v14;
          if ((v14 & v13) < 0 != __OFSUB__(v13, v14))
            v17 = v13 > v14;
          if (v16)
          {
            if (v17)
            {
              *v8 = v13;
              goto LABEL_35;
            }
            *v8 = v14;
            *v12 = v15;
            v28 = *(a2 - 1);
            v29 = v28 < v15;
            if ((v28 & v15) < 0 != __OFSUB__(v28, v15))
              v29 = v28 > v15;
            if (v29)
            {
              *v12 = v28;
LABEL_35:
              *(a2 - 1) = v15;
            }
          }
          else if (v17)
          {
            *v12 = v13;
            *(a2 - 1) = v14;
            v22 = *v12;
            v23 = *v8;
            v24 = *v12 < *v8;
            if ((v23 & v22) < 0 != __OFSUB__(v22, v23))
              v24 = *v12 > *v8;
            if (v24)
            {
              *v8 = v22;
              *v12 = v23;
            }
          }
          v30 = &v8[v11];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v8[1];
          v35 = v33 < v34;
          v36 = v33 > v34;
          if ((v34 & v33) < 0 != __OFSUB__(v33, v34))
            v37 = v36;
          else
            v37 = v35;
          v38 = *(a2 - 2);
          v39 = v38 < v32;
          if ((v38 & v32) < 0 != __OFSUB__(v38, v32))
            v39 = v38 > v32;
          if (v37)
          {
            if (v39)
            {
              v8[1] = v38;
              goto LABEL_58;
            }
            v8[1] = v32;
            *v31 = v34;
            v45 = *(a2 - 2);
            v46 = v45 < v34;
            if ((v45 & v34) < 0 != __OFSUB__(v45, v34))
              v46 = v45 > v34;
            if (v46)
            {
              *v31 = v45;
LABEL_58:
              *(a2 - 2) = v34;
            }
          }
          else if (v39)
          {
            *v31 = v38;
            *(a2 - 2) = v32;
            v40 = *v31;
            v41 = v8[1];
            v42 = *v31 < v41;
            if ((v41 & v40) < 0 != __OFSUB__(v40, v41))
              v42 = *v31 > v41;
            if (v42)
            {
              v8[1] = v40;
              *v31 = v41;
            }
          }
          v47 = &v8[v11];
          v50 = v47[1];
          v48 = v47 + 1;
          v49 = v50;
          v51 = v8[2];
          v52 = v50 < v51;
          v53 = v50 > v51;
          if ((v51 & v50) < 0 != __OFSUB__(v50, v51))
            v54 = v53;
          else
            v54 = v52;
          v55 = *(a2 - 3);
          v56 = v55 < v49;
          if ((v55 & v49) < 0 != __OFSUB__(v55, v49))
            v56 = v55 > v49;
          if (v54)
          {
            if (v56)
            {
              v8[2] = v55;
              goto LABEL_76;
            }
            v8[2] = v49;
            *v48 = v51;
            v60 = *(a2 - 3);
            v61 = v60 < v51;
            if ((v60 & v51) < 0 != __OFSUB__(v60, v51))
              v61 = v60 > v51;
            if (v61)
            {
              *v48 = v60;
LABEL_76:
              *(a2 - 3) = v51;
            }
          }
          else if (v56)
          {
            *v48 = v55;
            *(a2 - 3) = v49;
            v57 = *v48;
            v58 = v8[2];
            v59 = *v48 < v58;
            if ((v58 & v57) < 0 != __OFSUB__(v57, v58))
              v59 = *v48 > v58;
            if (v59)
            {
              v8[2] = v57;
              *v48 = v58;
            }
          }
          v62 = *v12;
          v63 = *v31;
          if ((v63 & v62) < 0 != __OFSUB__(v62, v63))
            v64 = *v12 > *v31;
          else
            v64 = *v12 < *v31;
          v65 = *v48;
          v66 = *v48 < v62;
          if ((v65 & v62) < 0 != __OFSUB__(v65, v62))
            v66 = v65 > v62;
          if (v64)
          {
            if (!v66)
            {
              *v31 = v62;
              *v12 = v63;
              v67 = (v65 & v63) < 0 != __OFSUB__(v65, v63) ? v65 > v63 : v65 < v63;
              v31 = v12;
              v62 = v65;
              if (!v67)
              {
                v62 = v63;
LABEL_95:
                v69 = *v8;
                *v8 = v62;
                *v12 = v69;
                goto LABEL_96;
              }
            }
          }
          else
          {
            if (!v66)
              goto LABEL_95;
            *v12 = v65;
            *v48 = v62;
            if ((v65 & v63) < 0 != __OFSUB__(v65, v63))
              v68 = v65 > v63;
            else
              v68 = v65 < v63;
            v48 = v12;
            v62 = v63;
            if (!v68)
            {
              v62 = v65;
              goto LABEL_95;
            }
          }
          *v31 = v65;
          *v48 = v63;
          goto LABEL_95;
        }
        v18 = *v8;
        v19 = *v12;
        v20 = *v8 > *v12;
        if ((v19 & v18) < 0 == __OFSUB__(v18, v19))
          v20 = *v8 < *v12;
        v21 = v13 < v18;
        if ((v18 & v13) < 0 != __OFSUB__(v13, v18))
          v21 = v13 > v18;
        if (v20)
        {
          if (v21)
          {
            *v12 = v13;
LABEL_53:
            *(a2 - 1) = v19;
            goto LABEL_96;
          }
          *v12 = v18;
          *v8 = v19;
          v43 = *(a2 - 1);
          v44 = v43 < v19;
          if ((v43 & v19) < 0 != __OFSUB__(v43, v19))
            v44 = v43 > v19;
          if (v44)
          {
            *v8 = v43;
            goto LABEL_53;
          }
        }
        else if (v21)
        {
          *v8 = v13;
          *(a2 - 1) = v18;
          v25 = *v8;
          v26 = *v12;
          v27 = *v8 < *v12;
          if ((v26 & v25) < 0 != __OFSUB__(v25, v26))
            v27 = *v8 > *v12;
          if (v27)
          {
            *v12 = v25;
            *v8 = v26;
          }
        }
LABEL_96:
        --a3;
        LODWORD(v70) = *v8;
        if ((a4 & 1) == 0)
        {
          v71 = *(v8 - 1);
          if (!(((v70 & v71 & 0x80000000) != 0) != __OFSUB__(v71, (_DWORD)v70)
               ? v71 > (int)v70
               : v71 < (int)v70))
          {
            v98 = *(a2 - 1);
            if (((v98 & v70 & 0x80000000) != 0) != __OFSUB__((_DWORD)v70, v98))
              v99 = (int)v70 > v98;
            else
              v99 = (int)v70 < v98;
            if (v99)
            {
              v74 = (unint64_t)(v8 + 1);
              do
              {
                if ((int *)v74 == a2)
                  goto LABEL_299;
                v100 = *(_DWORD *)v74;
                v74 += 4;
                v101 = (int)v70 < v100;
                v102 = (int)v70 > v100;
                if (((v100 & v70 & 0x80000000) != 0) != __OFSUB__((_DWORD)v70, v100))
                  v103 = v102;
                else
                  v103 = v101;
              }
              while (!v103);
              v8 = (int *)(v74 - 4);
            }
            else
            {
              v104 = v8 + 1;
              do
              {
                v8 = v104;
                if (v104 >= a2)
                  break;
                ++v104;
              }
              while (!(((*v8 & v70 & 0x80000000) != 0) != __OFSUB__((_DWORD)v70, *v8)
                      ? (int)v70 > *v8
                      : (int)v70 < *v8));
            }
            v74 = (unint64_t)a2;
            if (v8 < a2)
            {
              v74 = (unint64_t)a2;
              while ((int *)v74 != v7)
              {
                v106 = *(_DWORD *)(v74 - 4);
                v74 -= 4;
                v107 = (int)v70 < v106;
                v108 = (int)v70 > v106;
                if (((v106 & v70 & 0x80000000) != 0) != __OFSUB__((_DWORD)v70, v106))
                  v109 = v108;
                else
                  v109 = v107;
                if (!v109)
                  goto LABEL_165;
              }
              goto LABEL_299;
            }
LABEL_165:
            if ((unint64_t)v8 < v74)
            {
              v110 = *v8;
              v111 = *(_DWORD *)v74;
              do
              {
                *v8 = v111;
                v112 = v8 + 1;
                *(_DWORD *)v74 = v110;
                do
                {
                  if (v112 == a2)
                    goto LABEL_299;
                  v113 = *v112++;
                  v110 = v113;
                  v114 = (int)v70 < v113;
                  v115 = (int)v70 > v113;
                  if (((v113 & v70 & 0x80000000) != 0) != __OFSUB__((_DWORD)v70, v113))
                    v114 = v115;
                }
                while (!v114);
                v8 = v112 - 1;
                do
                {
                  if ((int *)v74 == v7)
                    goto LABEL_299;
                  v116 = *(_DWORD *)(v74 - 4);
                  v74 -= 4;
                  v111 = v116;
                  v117 = (int)v70 < v116;
                  v118 = (int)v70 > v116;
                  if (((v116 & v70 & 0x80000000) != 0) != __OFSUB__((_DWORD)v70, v116))
                    v117 = v118;
                }
                while (v117);
              }
              while ((unint64_t)v8 < v74);
            }
            v119 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v119;
            a4 = 0;
            *v119 = (int)v70;
            continue;
          }
        }
        v73 = 0;
        do
        {
          v74 = (unint64_t)&v8[v73 + 1];
          if ((int *)v74 == a2)
            goto LABEL_299;
          v75 = *(_DWORD *)v74;
          v76 = *(_DWORD *)v74 < (int)v70;
          if (((v75 & v70 & 0x80000000) != 0) != __OFSUB__(v75, (_DWORD)v70))
            v76 = v75 > (int)v70;
          ++v73;
        }
        while (v76);
        v74 = (unint64_t)&v8[v73];
        v77 = a2;
        if (v73 != 1)
        {
          while (v77 != v8)
          {
            v78 = *--v77;
            v79 = v78 < (int)v70;
            v80 = v78 > (int)v70;
            if (((v78 & v70 & 0x80000000) != 0) != __OFSUB__(v78, (_DWORD)v70))
              v81 = v80;
            else
              v81 = v79;
            if (v81)
              goto LABEL_119;
          }
          goto LABEL_299;
        }
        v77 = a2;
        do
        {
          if (v74 >= (unint64_t)v77)
            break;
          v82 = *--v77;
          v83 = v82 < (int)v70;
          v84 = v82 > (int)v70;
        }
        while (!(((v82 & v70 & 0x80000000) != 0) != __OFSUB__(v82, (_DWORD)v70) ? v84 : v83));
LABEL_119:
        if (v74 >= (unint64_t)v77)
        {
          v96 = (int *)(v74 - 4);
        }
        else
        {
          v86 = *v77;
          v87 = (int *)v74;
          v88 = v77;
          do
          {
            *v87 = v86;
            *v88 = v75;
            v89 = v87 + 1;
            do
            {
              if (v89 == a2)
                goto LABEL_299;
              v90 = *v89++;
              v75 = v90;
              v91 = v90 < (int)v70;
              v92 = v90 > (int)v70;
              if (((v90 & v70 & 0x80000000) != 0) != __OFSUB__(v90, (_DWORD)v70))
                v91 = v92;
            }
            while (v91);
            v87 = v89 - 1;
            do
            {
              if (v88 == v8)
                goto LABEL_299;
              v93 = *--v88;
              v86 = v93;
              v94 = v93 < (int)v70;
              v95 = v93 > (int)v70;
              if (((v93 & v70 & 0x80000000) != 0) != __OFSUB__(v93, (_DWORD)v70))
                v94 = v95;
            }
            while (!v94);
          }
          while (v87 < v88);
          v96 = v89 - 2;
        }
        if (v96 != v8)
          *v8 = *v96;
        *v96 = (int)v70;
        if (v74 < (unint64_t)v77)
        {
LABEL_139:
          result = std::__introsort<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *,false>(v7, v96, a3, a4 & 1);
          a4 = 0;
          v8 = v96 + 1;
          continue;
        }
        v97 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(v8, v96);
        v8 = v96 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(v96 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v97)
            continue;
          goto LABEL_139;
        }
        a2 = v96;
        if (!v97)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  _BOOL4 v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  BOOL v18;
  _BOOL4 v19;
  int *v20;
  int *v21;
  _BOOL4 v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  _BOOL4 v27;
  int v28;
  int v29;
  _BOOL4 v30;
  int v31;
  _BOOL4 v32;
  int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  _BOOL4 v37;
  BOOL v38;
  int *v39;
  int v40;
  uint64_t i;
  int v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int *v48;
  int v49;
  _BOOL4 v50;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = v6 < *a1;
      if ((v7 & v6) < 0 != __OFSUB__(v6, v7))
        v8 = v6 > *a1;
      if (v8)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = *a1;
      v10 = a1[1];
      if ((v9 & v10) < 0 != __OFSUB__(v10, v9))
        v11 = v10 > *a1;
      else
        v11 = v10 < *a1;
      v12 = *(a2 - 1);
      v13 = v12 < v10;
      if ((v12 & v10) < 0 != __OFSUB__(v12, v10))
        v13 = v12 > v10;
      if (v11)
      {
        if (v13)
        {
          *a1 = v12;
LABEL_68:
          *(a2 - 1) = v9;
          return result;
        }
        *a1 = v10;
        a1[1] = v9;
        v49 = *(a2 - 1);
        v50 = v49 < v9;
        if ((v49 & v9) < 0 != __OFSUB__(v49, v9))
          v50 = v49 > v9;
        if (v50)
        {
          a1[1] = v49;
          goto LABEL_68;
        }
      }
      else if (v13)
      {
        a1[1] = v12;
        *(a2 - 1) = v10;
        v36 = *a1;
        v35 = a1[1];
        v37 = v35 < *a1;
        if ((v36 & v35) < 0 != __OFSUB__(v35, v36))
          v37 = v35 > *a1;
        if (v37)
        {
          *a1 = v35;
          a1[1] = v36;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v23 = a1 + 2;
      v24 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v25 = *(a2 - 1);
      v26 = a1[3];
      v27 = v25 < v26;
      if ((v26 & v25) < 0 != __OFSUB__(v25, v26))
        v27 = v25 > v26;
      if (v27)
      {
        *v24 = v25;
        *(a2 - 1) = v26;
        v28 = *v24;
        v29 = *v23;
        v30 = *v24 < *v23;
        if ((v29 & v28) < 0 != __OFSUB__(v28, v29))
          v30 = *v24 > *v23;
        if (v30)
        {
          *v23 = v28;
          *v24 = v29;
          v31 = a1[1];
          v32 = v28 < v31;
          if ((v31 & v28) < 0 != __OFSUB__(v28, v31))
            v32 = v28 > v31;
          if (v32)
          {
            a1[1] = v28;
            a1[2] = v31;
            v33 = *a1;
            v34 = v28 < *a1;
            if ((v33 & v28) < 0 != __OFSUB__(v28, v33))
              v34 = v28 > *a1;
            if (v34)
            {
              *a1 = v28;
              a1[1] = v33;
            }
          }
        }
      }
      return 1;
    default:
      v15 = a1 + 2;
      v14 = a1[2];
      v16 = a1[1];
      v17 = *a1;
      v18 = v16 < *a1;
      if ((v17 & v16) < 0 != __OFSUB__(v16, v17))
        v18 = v16 > *a1;
      v19 = v14 > v16;
      if ((v14 & v16) < 0 == __OFSUB__(v14, v16))
        v19 = v14 < v16;
      if (v18)
      {
        v20 = a1;
        v21 = a1 + 2;
        if (!v19)
        {
          *a1 = v16;
          a1[1] = v17;
          v22 = v14 < v17;
          if ((v14 & v17) < 0 != __OFSUB__(v14, v17))
            v22 = v14 > v17;
          v20 = a1 + 1;
          v21 = a1 + 2;
          if (!v22)
            goto LABEL_48;
        }
LABEL_47:
        *v20 = v14;
        *v21 = v17;
        goto LABEL_48;
      }
      if (v19)
      {
        a1[1] = v14;
        *v15 = v16;
        v38 = v14 < v17;
        if ((v14 & v17) < 0 != __OFSUB__(v14, v17))
          v38 = v14 > v17;
        v20 = a1;
        v21 = a1 + 1;
        if (v38)
          goto LABEL_47;
      }
LABEL_48:
      v39 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v40 = 0;
      for (i = 12; ; i += 4)
      {
        v42 = *v39;
        v43 = *v15;
        v44 = *v39 < v43;
        if ((v43 & v42) < 0 != __OFSUB__(v42, v43))
          v44 = *v39 > v43;
        if (v44)
        {
          v45 = i;
          while (1)
          {
            *(int *)((char *)a1 + v45) = v43;
            v46 = v45 - 4;
            if (v45 == 4)
              break;
            v43 = *(int *)((char *)a1 + v45 - 8);
            v47 = v42 > v43;
            if ((v43 & v42) < 0 == __OFSUB__(v42, v43))
              v47 = v42 < v43;
            v45 -= 4;
            if (!v47)
            {
              v48 = (int *)((char *)a1 + v46);
              goto LABEL_60;
            }
          }
          v48 = a1;
LABEL_60:
          *v48 = v42;
          if (++v40 == 8)
            break;
        }
        v15 = v39++;
        if (v39 == a2)
          return 1;
      }
      return v39 + 1 == a2;
  }
}

int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sortFloat<int>(float *,float *)::{lambda(int,int)#1} &,int *>(int *result, int *a2, int *a3, int *a4)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  _BOOL4 v20;

  v4 = *a2;
  v5 = *result;
  if ((v5 & v4) < 0 != __OFSUB__(v4, v5))
    v6 = *a2 > *result;
  else
    v6 = *a2 < *result;
  v7 = *a3;
  v8 = *a3 < v4;
  if ((v7 & v4) < 0 != __OFSUB__(v7, v4))
    v8 = *a3 > v4;
  if (v6)
  {
    if (v8)
    {
      *result = v7;
LABEL_18:
      *a3 = v5;
      v4 = v5;
      goto LABEL_20;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    v12 = *a3 < v5;
    if ((v4 & v5) < 0 != __OFSUB__(v4, v5))
      v12 = *a3 > v5;
    if (v12)
    {
      *a2 = v4;
      goto LABEL_18;
    }
  }
  else if (v8)
  {
    *a2 = v7;
    *a3 = v4;
    v9 = *a2;
    v10 = *result;
    v11 = *a2 < *result;
    if ((v10 & v9) < 0 != __OFSUB__(v9, v10))
      v11 = *a2 > *result;
    if (v11)
    {
      *result = v9;
      *a2 = v10;
      v4 = *a3;
    }
  }
  else
  {
    v4 = *a3;
  }
LABEL_20:
  v13 = *a4;
  v14 = *a4 < v4;
  if ((v13 & v4) < 0 != __OFSUB__(v13, v4))
    v14 = *a4 > v4;
  if (v14)
  {
    *a3 = v13;
    *a4 = v4;
    v15 = *a3;
    v16 = *a2;
    v17 = *a3 < *a2;
    if ((v16 & v15) < 0 != __OFSUB__(v15, v16))
      v17 = *a3 > *a2;
    if (v17)
    {
      *a2 = v15;
      *a3 = v16;
      v18 = *a2;
      v19 = *result;
      v20 = *a2 < *result;
      if ((v19 & v18) < 0 != __OFSUB__(v18, v19))
        v20 = *a2 > *result;
      if (v20)
      {
        *result = v18;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  size_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  void *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[16];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADA910);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_56;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_42;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_42;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v45)
    {
      v24 = v45 + ((unint64_t)v45 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v45);
      if (v26 < 0x11)
      {
        __dst = v46;
        LODWORD(v45) = 16;
        v29 = v46;
      }
      else
      {
        if (HIDWORD(v26) || (WTF::tryFastMalloc((WTF *)v26, &v47), (v29 = v47) == 0))
        {
          v22 = 1;
          goto LABEL_56;
        }
        LODWORD(v45) = v26;
        __dst = v47;
      }
      memcpy(v29, v27, v28);
      if (v46 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    HIDWORD(v45) = v18;
    if (v18)
    {
      if (v18 == 1)
        *(_BYTE *)__dst = *(_BYTE *)v19;
      else
        memcpy(__dst, (const void *)v19, v18);
    }
  }
LABEL_42:
  std::__sort<std::__less<signed char,signed char> &,signed char *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_56;
  if (((1 << v37) & 0x3D) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v37) & 0x3D000000000000) == 0)
      goto LABEL_56;
    v38 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (v39 && v18)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_BYTE *)v19 = *(_BYTE *)__dst;
      goto LABEL_56;
    }
    memcpy((void *)v19, __dst, v18);
  }
  v22 = 0;
LABEL_56:
  v40 = __dst;
  if (v46 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  size_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  void *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[16];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADAC30);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_56;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_42;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_42;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v45)
    {
      v24 = v45 + ((unint64_t)v45 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v45);
      if (v26 < 0x11)
      {
        __dst = v46;
        LODWORD(v45) = 16;
        v29 = v46;
      }
      else
      {
        if (HIDWORD(v26) || (WTF::tryFastMalloc((WTF *)v26, &v47), (v29 = v47) == 0))
        {
          v22 = 1;
          goto LABEL_56;
        }
        LODWORD(v45) = v26;
        __dst = v47;
      }
      memcpy(v29, v27, v28);
      if (v46 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    HIDWORD(v45) = v18;
    if (v18 == 1)
    {
      *(_BYTE *)__dst = *(_BYTE *)v19;
    }
    else if (v18)
    {
      memcpy(__dst, (const void *)v19, v18);
    }
  }
LABEL_42:
  std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_56;
  if (((1 << v37) & 0x3D) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v37) & 0x3D000000000000) == 0)
      goto LABEL_56;
    v38 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (v39)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_BYTE *)v19 = *(_BYTE *)__dst;
      goto LABEL_56;
    }
    if (v18)
      memcpy((void *)v19, __dst, v18);
  }
  v22 = 0;
LABEL_56:
  v40 = __dst;
  if (v46 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  void *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[32];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADAF40);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_56;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_42;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_42;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v45)
    {
      v24 = v45 + ((unint64_t)v45 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v45);
      if (v26 < 0x11)
      {
        __dst = v46;
        LODWORD(v45) = 16;
        v29 = v46;
      }
      else
      {
        if (v26 >> 31 || (WTF::tryFastMalloc((WTF *)(2 * v26), &v47), (v29 = v47) == 0))
        {
          v22 = 1;
          goto LABEL_56;
        }
        LODWORD(v45) = v26;
        __dst = v47;
      }
      memcpy(v29, v27, 2 * v28);
      if (v46 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    HIDWORD(v45) = v18;
    if (v18)
    {
      if (v18 == 1)
        *(_WORD *)__dst = *(_WORD *)v19;
      else
        memcpy(__dst, (const void *)v19, 2 * v18);
    }
  }
LABEL_42:
  std::__sort<std::__less<short,short> &,short *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_56;
  if (((1 << v37) & 0x3D) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v37) & 0x3D000000000000) == 0)
      goto LABEL_56;
    v38 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (v39 && v18)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_WORD *)v19 = *(_WORD *)__dst;
      goto LABEL_56;
    }
    memcpy((void *)v19, __dst, 2 * v18);
  }
  v22 = 0;
LABEL_56:
  v40 = __dst;
  if (v46 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t WTF::Vector<short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
  {
LABEL_18:
    *(_DWORD *)(a1 + 12) = v2;
    return 1;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = *(const void **)a1;
  v9 = *(unsigned int *)(a1 + 12);
  if (v7 < 0x101)
  {
    result = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 256;
    goto LABEL_13;
  }
  if (v7 >> 31)
    return 0;
  WTF::tryFastMalloc((WTF *)(2 * v7), &v18);
  result = v18;
  if (v18)
  {
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = result;
LABEL_13:
    memcpy((void *)result, v8, 2 * v9);
    if ((const void *)(a1 + 16) != v8 && v8)
    {
      if (*(const void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  void *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[32];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADB348);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!(_BYTE)v11)
  {
    v22 = 2;
    goto LABEL_56;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 > 0x35)
    goto LABEL_42;
  if (((1 << v20) & 0x3D) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v20) & 0x3D000000000000) == 0)
      goto LABEL_42;
    v21 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v21 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23)
  {
    if (v10 > v45)
    {
      v24 = v45 + ((unint64_t)v45 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10)
        v26 = v10;
      else
        v26 = v25;
      v27 = __dst;
      v28 = HIDWORD(v45);
      if (v26 < 0x11)
      {
        __dst = v46;
        LODWORD(v45) = 16;
        v29 = v46;
      }
      else
      {
        if (v26 >> 31 || (WTF::tryFastMalloc((WTF *)(2 * v26), &v47), (v29 = v47) == 0))
        {
          v22 = 1;
          goto LABEL_56;
        }
        LODWORD(v45) = v26;
        __dst = v47;
      }
      memcpy(v29, v27, 2 * v28);
      if (v46 != v27 && v27)
      {
        if (__dst == v27)
        {
          __dst = 0;
          LODWORD(v45) = 0;
        }
        WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    HIDWORD(v45) = v18;
    if (v18)
    {
      if (v18 == 1)
        *(_WORD *)__dst = *(_WORD *)v19;
      else
        memcpy(__dst, (const void *)v19, 2 * v18);
    }
  }
LABEL_42:
  std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_56;
  if (((1 << v37) & 0x3D) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  }
  else
  {
    if (((1 << v37) & 0x3D000000000000) == 0)
      goto LABEL_56;
    v38 = *(_QWORD *)(a1 + 48);
  }
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (v39 && v18)
  {
    v11 = __dst;
    if (v18 == 1)
    {
      v22 = 0;
      *(_WORD *)v19 = *(_WORD *)__dst;
      goto LABEL_56;
    }
    memcpy((void *)v19, __dst, 2 * v18);
  }
  v22 = 0;
LABEL_56:
  v40 = __dst;
  if (v46 != __dst && __dst != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v11, v12, v13, v14, v15, v16, v17);
  }
  return v22;
}

uint64_t WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
  {
LABEL_18:
    *(_DWORD *)(a1 + 12) = v2;
    return 1;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = *(const void **)a1;
  v9 = *(unsigned int *)(a1 + 12);
  if (v7 < 0x101)
  {
    result = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 256;
    goto LABEL_13;
  }
  if (v7 >> 31)
    return 0;
  WTF::tryFastMalloc((WTF *)(2 * v7), &v18);
  result = v18;
  if (v18)
  {
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = result;
LABEL_13:
    memcpy((void *)result, v8, 2 * v9);
    if ((const void *)(a1 + 16) != v8 && v8)
    {
      if (*(const void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  _BYTE *v40;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[128];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADB730);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!v17)
  {
    v22 = 2;
    goto LABEL_50;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 <= 0x35)
  {
    if (((1 << v20) & 0x3D) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    }
    else
    {
      if (((1 << v20) & 0x3D000000000000) == 0)
        goto LABEL_37;
      v21 = *(_QWORD *)(a1 + 48);
    }
    if (*(_QWORD *)(v21 + 32))
      v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v23 = 0;
    if (v23)
    {
      if (v10 > v45)
      {
        v24 = v45 + ((unint64_t)v45 >> 2);
        if (v24 >= 0x10)
          v25 = v24 + 1;
        else
          v25 = 16;
        if (v25 <= v10)
          v26 = v10;
        else
          v26 = v25;
        v27 = __dst;
        v28 = HIDWORD(v45);
        if (v26 < 0x11)
        {
          __dst = v46;
          LODWORD(v45) = 16;
          v29 = v46;
        }
        else
        {
          if (v26 >> 29 || (WTF::tryFastMalloc((WTF *)(8 * v26), &v47), (v29 = v47) == 0))
          {
            v22 = 1;
            goto LABEL_50;
          }
          LODWORD(v45) = v26;
          __dst = v47;
        }
        memcpy(v29, v27, 8 * v28);
        if (v46 != v27 && v27)
        {
          if (__dst == v27)
          {
            __dst = 0;
            LODWORD(v45) = 0;
          }
          WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      HIDWORD(v45) = v18;
      if (v18 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)v19;
      }
      else if (v18)
      {
        memcpy(__dst, (const void *)v19, 8 * v18);
      }
    }
  }
LABEL_37:
  std::__sort<std::__less<long long,long long> &,long long *>();
  v22 = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 > 0x35)
    goto LABEL_50;
  if (((1 << v37) & 0x3D) == 0)
  {
    if (((1 << v37) & 0x3D000000000000) != 0)
    {
      v38 = *(_QWORD *)(a1 + 48);
      goto LABEL_42;
    }
LABEL_50:
    v40 = __dst;
    goto LABEL_51;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
LABEL_42:
  if (*(_QWORD *)(v38 + 32))
    v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v39 = 0;
  if (!v39)
    goto LABEL_49;
  v40 = __dst;
  if (v18 == 1)
  {
    v22 = 0;
    *(_QWORD *)v19 = *(_QWORD *)__dst;
  }
  else
  {
    if (v18)
    {
      memcpy((void *)v19, __dst, 8 * v18);
LABEL_49:
      v22 = 0;
      goto LABEL_50;
    }
    v22 = 0;
  }
LABEL_51:
  if (v46 != v40 && v40 != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v40, v40, v11, v12, v13, v14, v15, v16);
  }
  return v22;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::sort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)();
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (*v39)();
  _BYTE *v40;
  uint64_t v42;
  _BYTE v43[16];
  void *__dst;
  uint64_t v45;
  _BYTE v46[128];
  _BYTE *v47;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADBA68);
    }
  }
  __dst = v46;
  v45 = 16;
  v43[0] = 0;
  v43[8] = 0;
  v10 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  if (!v17)
  {
    result = 2;
    goto LABEL_53;
  }
  v18 = v10;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v20 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v20 <= 0x35)
  {
    if (((1 << v20) & 0x3D) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    }
    else
    {
      if (((1 << v20) & 0x3D000000000000) == 0)
        goto LABEL_38;
      v21 = *(_QWORD *)(a1 + 48);
    }
    if (*(_QWORD *)(v21 + 32))
      v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v23 = 0;
    if (v23)
    {
      if (v10 > v45)
      {
        v24 = v45 + ((unint64_t)v45 >> 2);
        if (v24 >= 0x10)
          v25 = v24 + 1;
        else
          v25 = 16;
        if (v25 <= v10)
          v26 = v10;
        else
          v26 = v25;
        v27 = __dst;
        v28 = HIDWORD(v45);
        if (v26 <= 0x10)
        {
          __dst = v46;
          LODWORD(v45) = 16;
          v29 = v46;
        }
        else
        {
          if (v26 >> 29 || (WTF::tryFastMalloc((WTF *)(8 * v26), &v47), (v29 = v47) == 0))
          {
            result = 1;
            goto LABEL_53;
          }
          LODWORD(v45) = v26;
          __dst = v47;
        }
        memcpy(v29, v27, 8 * v28);
        if (v46 != v27 && v27)
        {
          if (__dst == v27)
          {
            __dst = 0;
            LODWORD(v45) = 0;
          }
          WTF::fastFree((unint64_t)v27, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      HIDWORD(v45) = v18;
      if (v18)
      {
        if (v18 == 1)
          *(_QWORD *)__dst = *(_QWORD *)v19;
        else
          memcpy(__dst, (const void *)v19, 8 * v18);
      }
    }
  }
LABEL_38:
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  result = 0;
  v37 = *(unsigned __int8 *)(a1 + 40) - 88;
  if (v37 <= 0x35)
  {
    if (((1 << v37) & 0x3D) != 0)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    }
    else
    {
      if (((1 << v37) & 0x3D000000000000) == 0)
        goto LABEL_53;
      v38 = *(_QWORD *)(a1 + 48);
    }
    if (*(_QWORD *)(v38 + 32))
      v39 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v39 = 0;
    if (v39)
    {
      v40 = __dst;
      if (!v18)
      {
        result = 0;
        goto LABEL_54;
      }
      if (v18 == 1)
      {
        result = 0;
        *(_QWORD *)v19 = *(_QWORD *)__dst;
        goto LABEL_54;
      }
      memcpy((void *)v19, __dst, 8 * v18);
    }
    result = 0;
  }
LABEL_53:
  v40 = __dst;
LABEL_54:
  if (v46 != v40 && v40 != 0)
  {
    __dst = 0;
    LODWORD(v45) = 0;
    v42 = result;
    WTF::fastFree((unint64_t)v40, v40, v11, v12, v13, v14, v15, v16);
    return v42;
  }
  return result;
}

uint64_t WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v6;

  if (a2 >> 29)
    return 0;
  v2 = a2;
  WTF::tryFastMalloc((WTF *)(8 * a2), &v6);
  v4 = v6;
  if (!v6)
    return 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)a1 = v4;
  return 1;
}

uint64_t WTF::Vector<unsigned long long,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 < a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (a2 <= 0x100)
    {
      v10 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 256;
    }
    else
    {
      result = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *(void **)a1;
    }
    memcpy(v10, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  *(_DWORD *)(a1 + 12) = v2;
  return 1;
}

JSC::VM *JSC::createTypedArrayIteratorObject(JSC *this, uint64_t a2, JSC::JSArrayBufferView *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  JSC::VM *v20;
  JSC::VM *v22;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v9;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) - 39 >= 0xB)
    return (JSC::VM *)JSC::throwTypeError((unint64_t)this, &v22, (uint64_t)"Receiver should be a typed array view", 38);
  v11 = a3;
  JSC::validateTypedArray(this, (JSC::ArrayBuffer **)a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v12, v13, v14, v15, v16, v17, v18))
    return 0;
  v19 = *((_DWORD *)this + 250);
  if (v19)
    v20 = (JSC::VM *)(16 * (v19 & 0xFFFFFFFE));
  else
    v20 = 0;
  return JSC::JSArrayIterator::create((uint64_t)v9, v20, a2, v11 | 0xFFFE000000000000, v15, v16, v17, v18);
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  BOOL v38;
  int v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  char *v43;
  __int16 *v44;
  __int16 *v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  int *v61;
  _BYTE *v62;
  char *v63;
  int *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  char *v76;
  __int16 *v77;
  __int16 *v78;
  char v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  BOOL v104;
  uint64_t v107;
  size_t v108;
  int *v109;
  uint64_t v110;
  unint64_t i;
  char *v112;
  __int16 *v113;
  __int16 *v114;
  char v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  size_t v141;
  int *v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  int *v153;
  _BYTE *v154;
  int v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const void *v164;
  size_t v165;
  _BYTE *v166;
  int *v167;
  _BYTE *v168;
  const void *v169;
  size_t v170;
  size_t __n;
  WTF *v172;
  uint64_t v173;
  uint64_t v174;
  WTF *v175;
  uint64_t v176;
  _BYTE v177[512];
  char v178;
  int v179;
  char v180;
  int v181;
  char v182;
  char v183;
  unint64_t v184;
  _BYTE v185[16];
  int *v186;
  __int128 v187;
  __int16 v188;
  uint64_t v189;

  v10 = (unint64_t)a1;
  v189 = *MEMORY[0x1E0C80C00];
  v185[0] = 0;
  v185[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(**a1, (uint64_t)v185, a3, a4, a5, a6, a7, a8);
  if (v17)
  {
    v18 = v11;
    v173 = a2;
    v174 = a3;
    v19 = (unint64_t)&v173;
    v20 = (WTF *)v177;
    v175 = (WTF *)v177;
    v176 = 16;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v182 = 0;
    v183 = BYTE4(a3);
    v184 = 0;
    JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v173, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
    v29 = **(_QWORD **)(v10 + 24);
    if (*(_DWORD *)(v29 + 80))
    {
      v139 = *(_DWORD *)(v29 + 80);
      if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v29 + 64), 7u, v23, v24, v25, v26, v27, v28);
      if (*(_QWORD *)(v29 + 16))
      {
LABEL_133:
        v10 = 0;
        goto LABEL_78;
      }
    }
    v30 = **(_QWORD **)(v10 + 16);
    if (v18 >= v30)
      v31 = **(_QWORD **)(v10 + 16);
    else
      v31 = v18;
    if (v31)
    {
      v32 = 0;
      v22 = 10;
      while (1)
      {
        v33 = *(_QWORD *)(**(_QWORD **)v10 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v34 = *(unsigned __int8 *)(v33 + v32);
        v35 = *(_QWORD *)(**(_QWORD **)(v10 + 8) + 56);
        v36 = (WTF::StringImpl **)(v35 + 16 * v34 + 44272);
        if (!*v36)
        {
          v172 = v20;
          v59 = 0;
          do
          {
            v20 = (WTF *)((v34 % 0xA) | 0x30);
            *((_BYTE *)&v187 + v59-- + 4) = (v34 % 0xA) | 0x30;
            v60 = v34 > 9;
            LODWORD(v34) = v34 / 0xA;
          }
          while (v60);
          if (v59 + 14 >= 15)
          {
            __break(1u);
LABEL_144:
            WTF::StringImpl::~StringImpl(v21, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
            WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
            goto LABEL_78;
          }
          if (v59)
          {
            __n = -v59;
            if ((unint64_t)-v59 >> 31)
              goto LABEL_197;
            v61 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v59));
            v62 = v61 + 5;
            *v61 = 2;
            v61[1] = -(int)v59;
            *((_QWORD *)v61 + 1) = v61 + 5;
            v61[4] = 4;
            if (v59 == -1)
            {
              *v62 = (_BYTE)v20;
            }
            else
            {
              v63 = (char *)&v187 + v59 + 5;
              v64 = v61;
              memcpy(v62, v63, __n);
              v61 = v64;
            }
            v22 = 10;
          }
          else
          {
            v61 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          v65 = *v36;
          *v36 = (WTF::StringImpl *)v61;
          v20 = v172;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
            {
              WTF::StringImpl::~StringImpl(v65, (WTF::AtomStringImpl *)0xA, v23, v24, v25, v26, v27, v28);
              WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
              v22 = 10;
            }
            else
            {
              *(_DWORD *)v65 -= 2;
            }
          }
        }
        if (v181 == -1)
          v180 = 1;
        ++v181;
        v37 = *v36;
        if (*v36)
          LODWORD(v37) = *((_DWORD *)v37 + 1);
        v38 = __CFADD__(v179, (_DWORD)v37);
        v39 = v179 + (_DWORD)v37;
        if (v38)
          v178 = 1;
        else
          v179 = v39;
        v40 = v19 & 0xFFFFFF0000000000;
        v41 = *v36;
        if (*v36)
        {
          v42 = *((_QWORD *)v41 + 1);
          v19 = *((unsigned int *)v41 + 1) | ((unint64_t)((*((_DWORD *)v41 + 4) >> 2) & 1) << 32) | v40;
          *(_DWORD *)v41 += 2;
        }
        else
        {
          v42 = 0;
          v19 = v40 | 0x100000000;
        }
        v186 = (int *)v41;
        *(_QWORD *)&v187 = v42;
        *((_QWORD *)&v187 + 1) = v19;
        v188 = 0;
        if (HIDWORD(v176) == (_DWORD)v176)
        {
          v56 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v175, (WTF::AtomStringImpl *)(HIDWORD(v176) + 1), (unint64_t)&v186, v24, v25, v26, v27, v28);
          if (!v56)
          {
            v46 = 1;
            v22 = 10;
            goto LABEL_23;
          }
          v57 = (char *)v175 + 32 * HIDWORD(v176);
          v58 = *(_QWORD *)v56;
          *(_QWORD *)v56 = 0;
          *(_QWORD *)v57 = v58;
          *(_OWORD *)(v57 + 8) = *(_OWORD *)(v56 + 8);
          v44 = (__int16 *)(v57 + 24);
          v45 = (__int16 *)(v56 + 24);
          v22 = 10;
        }
        else
        {
          v43 = (char *)v175 + 32 * HIDWORD(v176);
          v186 = 0;
          *(_QWORD *)v43 = v41;
          *(_OWORD *)(v43 + 8) = v187;
          v44 = (__int16 *)(v43 + 24);
          v45 = &v188;
        }
        v46 = 0;
        *v44 = *v45;
        ++HIDWORD(v176);
LABEL_23:
        v182 |= v46;
        v21 = (WTF::StringImpl *)v186;
        v186 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::~StringImpl(v21, (WTF::AtomStringImpl *)0xA, v23, v24, v25, v26, v27, v28);
            WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
            v22 = 10;
          }
          else
          {
            *(_DWORD *)v21 -= 2;
          }
        }
        v184 = 0;
        if (*(_DWORD *)(v35 + 80))
        {
          v74 = *(_DWORD *)(v35 + 80);
          if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, v23, v24, v25, v26, v27, v28);
            v22 = 10;
          }
        }
        v47 = **(_QWORD **)(v10 + 24);
        if (*(_DWORD *)(v47 + 80))
        {
          v75 = *(_DWORD *)(v47 + 80);
          if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v47 + 64), 7u, v23, v24, v25, v26, v27, v28);
            v22 = 10;
          }
          if (*(_QWORD *)(v47 + 16))
            goto LABEL_133;
        }
        if (++v32 == v31)
        {
          v30 = **(_QWORD **)(v10 + 16);
          break;
        }
      }
    }
    if (v31 < v30)
    {
      do
      {
        if (v181 == -1)
          v180 = 1;
        ++v181;
        v186 = 0;
        *(_QWORD *)&v187 = 0;
        *((_QWORD *)&v187 + 1) = 0x100000000;
        v188 = 0;
        if (HIDWORD(v176) == (_DWORD)v176)
        {
          v89 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v175, (WTF::AtomStringImpl *)(HIDWORD(v176) + 1), (unint64_t)&v186, v24, v25, v26, v27, v28);
          if (!v89)
          {
            v79 = 1;
            goto LABEL_66;
          }
          v90 = (char *)v175 + 32 * HIDWORD(v176);
          v91 = *(_QWORD *)v89;
          *(_QWORD *)v89 = 0;
          *(_QWORD *)v90 = v91;
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v89 + 8);
          v77 = (__int16 *)(v90 + 24);
          v78 = (__int16 *)(v89 + 24);
        }
        else
        {
          v76 = (char *)v175 + 32 * HIDWORD(v176);
          *(_QWORD *)v76 = 0;
          *(_OWORD *)(v76 + 8) = v187;
          v77 = (__int16 *)(v76 + 24);
          v78 = &v188;
        }
        v79 = 0;
        *v77 = *v78;
        ++HIDWORD(v176);
LABEL_66:
        v182 |= v79;
        v80 = (WTF::StringImpl *)v186;
        v186 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
          {
            WTF::StringImpl::~StringImpl(v80, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
            WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
          }
          else
          {
            *(_DWORD *)v80 -= 2;
          }
        }
        v184 = 0;
        ++v31;
      }
      while (v31 < **(_QWORD **)(v10 + 16));
    }
    if (v180)
    {
      __break(0xC471u);
      JUMPOUT(0x198ADC81CLL);
    }
    v22 = **(_QWORD **)(v10 + 8);
    if (v181 != 1)
    {
      v10 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v173, (int8x16_t *)v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_78;
    }
    v10 = v184;
    if (v184)
      goto LABEL_78;
    if (!HIDWORD(v176))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADC8D0);
    }
    v107 = *(_QWORD *)(v22 + 56);
    v108 = *((unsigned int *)v175 + 4);
    v109 = *(int **)v175;
    if (*(_QWORD *)v175)
    {
      if ((_DWORD)v108 == v109[1])
      {
        *v109 += 2;
LABEL_98:
        v186 = v109;
        goto LABEL_99;
      }
    }
    else if (!(_DWORD)v108)
    {
      goto LABEL_98;
    }
    v152 = (_BYTE *)*((_QWORD *)v175 + 1);
    if (*((_BYTE *)v175 + 20))
    {
      if (v152)
      {
        if ((_DWORD)v108)
        {
          if ((v108 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198ADC8E0);
          }
          v153 = (int *)WTF::fastCompactMalloc((WTF *)(v108 + 20));
          v154 = v153 + 5;
          *v153 = 2;
          v153[1] = v108;
          *((_QWORD *)v153 + 1) = v153 + 5;
          v153[4] = 4;
          if ((_DWORD)v108 == 1)
          {
            *v154 = *v152;
LABEL_168:
            v186 = v153;
LABEL_99:
            v10 = JSC::jsString(v107, (JSC::VM *)&v186, v23, v24, v25, v26, v27, v28);
            v21 = (WTF::StringImpl *)v186;
            v186 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                goto LABEL_144;
              *(_DWORD *)v21 -= 2;
            }
LABEL_78:
            if (HIDWORD(v176))
            {
              v92 = v175;
              v93 = 32 * HIDWORD(v176);
              do
              {
                v94 = *(WTF::StringImpl **)v92;
                *(_QWORD *)v92 = 0;
                if (v94)
                {
                  if (*(_DWORD *)v94 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v94, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
                    WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
                  }
                  else
                  {
                    *(_DWORD *)v94 -= 2;
                  }
                }
                v92 = (WTF *)((char *)v92 + 32);
                v93 -= 32;
              }
              while (v93);
            }
            v103 = v175;
            v104 = v20 == v175;
            goto LABEL_87;
          }
          v164 = v152;
          v165 = v108;
          goto LABEL_167;
        }
        goto LABEL_163;
      }
    }
    else if (v152)
    {
      if ((_DWORD)v108)
      {
        if (v108 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198ADC8E8);
        }
        v153 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v108 + 20));
        v154 = v153 + 5;
        *v153 = 2;
        v153[1] = v108;
        *((_QWORD *)v153 + 1) = v153 + 5;
        v153[4] = 0;
        if ((_DWORD)v108 == 1)
        {
          *(_WORD *)v154 = *(_WORD *)v152;
          goto LABEL_168;
        }
        v164 = v152;
        v165 = 2 * v108;
LABEL_167:
        memcpy(v154, v164, v165);
        goto LABEL_168;
      }
LABEL_163:
      v153 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_168;
    }
    v153 = 0;
    goto LABEL_168;
  }
  v173 = a2;
  v174 = a3;
  v175 = (WTF *)v177;
  v176 = 16;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v183 = BYTE4(a3);
  v184 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v173, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
  v110 = **(_QWORD **)(v10 + 24);
  if (*(_DWORD *)(v110 + 80))
  {
    v155 = *(_DWORD *)(v110 + 80);
    if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v110 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v110 + 16))
    {
      v10 = 0;
      goto LABEL_122;
    }
  }
  if (**(_QWORD **)(v10 + 16))
  {
    for (i = 0; i < **(_QWORD **)(v10 + 16); ++i)
    {
      if (v181 == -1)
        v180 = 1;
      ++v181;
      v186 = 0;
      *(_QWORD *)&v187 = 0;
      *((_QWORD *)&v187 + 1) = 0x100000000;
      v188 = 0;
      if (HIDWORD(v176) == (_DWORD)v176)
      {
        v125 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v175, (WTF::AtomStringImpl *)(HIDWORD(v176) + 1), (unint64_t)&v186, v24, v25, v26, v27, v28);
        if (!v125)
        {
          v115 = 1;
          goto LABEL_110;
        }
        v126 = (char *)v175 + 32 * HIDWORD(v176);
        v127 = *(_QWORD *)v125;
        *(_QWORD *)v125 = 0;
        *(_QWORD *)v126 = v127;
        *(_OWORD *)(v126 + 8) = *(_OWORD *)(v125 + 8);
        v113 = (__int16 *)(v126 + 24);
        v114 = (__int16 *)(v125 + 24);
      }
      else
      {
        v112 = (char *)v175 + 32 * HIDWORD(v176);
        *(_QWORD *)v112 = 0;
        *(_OWORD *)(v112 + 8) = v187;
        v113 = (__int16 *)(v112 + 24);
        v114 = &v188;
      }
      v115 = 0;
      *v113 = *v114;
      ++HIDWORD(v176);
LABEL_110:
      v182 |= v115;
      v116 = (WTF::StringImpl *)v186;
      v186 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
        {
          WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
        }
        else
        {
          *(_DWORD *)v116 -= 2;
        }
      }
      v184 = 0;
    }
  }
  if (v180)
  {
    __break(0xC471u);
    JUMPOUT(0x198ADC8C8);
  }
  v22 = **(_QWORD **)(v10 + 8);
  if (v181 == 1)
  {
    v10 = v184;
    if (v184)
      goto LABEL_122;
    if (!HIDWORD(v176))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADC8D8);
    }
    v140 = *(_QWORD *)(v22 + 56);
    v141 = *((unsigned int *)v175 + 4);
    v142 = *(int **)v175;
    if (*(_QWORD *)v175)
    {
      if ((_DWORD)v141 == v142[1])
      {
        *v142 += 2;
LABEL_139:
        v186 = v142;
        goto LABEL_140;
      }
    }
    else if (!(_DWORD)v141)
    {
      goto LABEL_139;
    }
    v166 = (_BYTE *)*((_QWORD *)v175 + 1);
    if (*((_BYTE *)v175 + 20))
    {
      if (v166)
      {
        if ((_DWORD)v141)
        {
          if ((v141 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198ADC8F0);
          }
          v167 = (int *)WTF::fastCompactMalloc((WTF *)(v141 + 20));
          v168 = v167 + 5;
          *v167 = 2;
          v167[1] = v141;
          *((_QWORD *)v167 + 1) = v167 + 5;
          v167[4] = 4;
          if ((_DWORD)v141 == 1)
          {
            *v168 = *v166;
LABEL_190:
            v186 = v167;
LABEL_140:
            v10 = JSC::jsString(v140, (JSC::VM *)&v186, v23, v24, v25, v26, v27, v28);
            v143 = (WTF::StringImpl *)v186;
            v186 = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 2)
              {
                WTF::StringImpl::~StringImpl(v143, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
                WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
              }
              else
              {
                *(_DWORD *)v143 -= 2;
              }
            }
            goto LABEL_122;
          }
          v169 = v166;
          v170 = v141;
          goto LABEL_189;
        }
        goto LABEL_186;
      }
    }
    else if (v166)
    {
      if ((_DWORD)v141)
      {
        if (v141 > 0x7FFFFFEF)
        {
LABEL_197:
          __break(0xC471u);
          JUMPOUT(0x198ADC814);
        }
        v167 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v141 + 20));
        v168 = v167 + 5;
        *v167 = 2;
        v167[1] = v141;
        *((_QWORD *)v167 + 1) = v167 + 5;
        v167[4] = 0;
        if ((_DWORD)v141 == 1)
        {
          *(_WORD *)v168 = *(_WORD *)v166;
          goto LABEL_190;
        }
        v169 = v166;
        v170 = 2 * v141;
LABEL_189:
        memcpy(v168, v169, v170);
        goto LABEL_190;
      }
LABEL_186:
      v167 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_190;
    }
    v167 = 0;
    goto LABEL_190;
  }
  v10 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v173, (int8x16_t *)v22, v23, v24, v25, v26, v27, v28);
LABEL_122:
  if (HIDWORD(v176))
  {
    v128 = v175;
    v129 = 32 * HIDWORD(v176);
    do
    {
      v130 = *(WTF::StringImpl **)v128;
      *(_QWORD *)v128 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
        {
          WTF::StringImpl::~StringImpl(v130, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v130 -= 2;
        }
      }
      v128 = (WTF *)((char *)v128 + 32);
      v129 -= 32;
    }
    while (v129);
  }
  v103 = v175;
  v104 = v177 == (_BYTE *)v175;
LABEL_87:
  if (!v104 && v103 != 0)
  {
    v175 = 0;
    LODWORD(v176) = 0;
    WTF::fastFree((unint64_t)v103, (void *)v22, v23, v24, v25, v26, v27, v28);
  }
  return v10;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  size_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  BOOL v37;
  WTF *v38;
  int *v39;
  _BYTE *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  __int16 *v57;
  __int16 *v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  char *v106;
  __int16 *v107;
  __int16 *v108;
  char v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  BOOL v134;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t i;
  char *v140;
  __int16 *v141;
  __int16 *v142;
  char v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  size_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  int *v182;
  _BYTE *v183;
  int v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  size_t v194;
  _BYTE *v195;
  int *v196;
  _BYTE *v197;
  const void *v198;
  size_t v199;
  size_t __n;
  uint64_t v201;
  uint64_t v202;
  WTF *v203;
  uint64_t v204;
  _BYTE v205[512];
  char v206;
  int v207;
  char v208;
  int v209;
  char v210;
  char v211;
  unint64_t v212;
  _BYTE v213[16];
  WTF::StringImpl *v214;
  __int128 v215;
  __int16 v216;
  uint64_t v217;

  v10 = (uint64_t)a1;
  v217 = *MEMORY[0x1E0C80C00];
  v213[0] = 0;
  v213[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(**a1, (uint64_t)v213, a3, a4, a5, a6, a7, a8);
  if (v17)
  {
    v18 = v11;
    v201 = a2;
    v202 = a3;
    v19 = (WTF *)v205;
    v203 = (WTF *)v205;
    v204 = 16;
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = BYTE4(a3);
    v212 = 0;
    JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
    v27 = **(_QWORD **)(v10 + 24);
    if (*(_DWORD *)(v27 + 80))
    {
      v167 = *(_DWORD *)(v27 + 80);
      if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v21, v22, v23, v24, v25, v26);
      if (*(_QWORD *)(v27 + 16))
      {
        v168 = 0;
        goto LABEL_92;
      }
    }
    v28 = **(_QWORD **)(v10 + 16);
    if (v18 >= v28)
      v29 = **(WTF ***)(v10 + 16);
    else
      v29 = (WTF *)v18;
    if (v29)
    {
      v19 = 0;
      v20 = 10;
      v21 = 24;
      while (1)
      {
        v30 = *(_QWORD *)(**(_QWORD **)v10 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v30 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v31 = *(unsigned int *)(v30 + 4 * (_QWORD)v19);
        v32 = *(_QWORD *)(**(_QWORD **)(v10 + 8) + 56);
        if (v31 > 0xFF)
        {
          v43 = v32 + 48368;
          v44 = 9 * ((v31 + ~((_DWORD)v31 << 15)) ^ ((v31 + ~((_DWORD)v31 << 15)) >> 10));
          v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
          v46 = (v45 ^ BYTE2(v45));
          v47 = (_DWORD *)(v32 + 48368 + 24 * (v45 ^ BYTE2(v45)));
          if (*v47 != (_DWORD)v31
            || (v48 = v43 + 24 * v46, v49 = *(_QWORD *)(v48 + 8), v33 = (WTF::StringImpl **)(v48 + 8), !v49))
          {
            *v47 = v31;
            WTF::String::number(v31, (uint64_t *)&v214);
            v21 = 24;
            v74 = v43 + 24 * v46;
            v75 = (uint64_t)v214;
            v214 = 0;
            v77 = *(WTF::StringImpl **)(v74 + 8);
            v33 = (WTF::StringImpl **)(v74 + 8);
            v76 = v77;
            *v33 = (WTF::StringImpl *)v75;
            if (v77)
            {
              if (*(_DWORD *)v76 == 2)
              {
                WTF::StringImpl::~StringImpl(v76, v73, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                v21 = 24;
              }
              else
              {
                *(_DWORD *)v76 -= 2;
              }
            }
            v78 = v214;
            v214 = 0;
            v20 = 10;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
              {
                WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v78 -= 2;
              }
            }
            *(_QWORD *)(v43 + 24 * v46 + 16) = 0;
          }
        }
        else
        {
          v33 = (WTF::StringImpl **)(v32 + 16 * v31 + 44272);
          if (!*v33)
          {
            v34 = 0;
            do
            {
              v35 = (v31 % 0xA) | 0x30;
              v36 = (WTF::StringImpl *)((char *)&v214 + v34);
              *((_BYTE *)&v215 + v34-- + 4) = (v31 % 0xA) | 0x30;
              v37 = v31 > 9;
              LODWORD(v31) = v31 / 0xA;
            }
            while (v37);
            v38 = (WTF *)(v34 + 14);
            if ((uint64_t)(v34 + 14) >= 15)
            {
              __break(1u);
              goto LABEL_159;
            }
            if (v34)
            {
              __n = -(uint64_t)v34;
              if ((unint64_t)-(uint64_t)v34 >> 31)
                goto LABEL_211;
              v39 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v34));
              v40 = v39 + 5;
              *v39 = 2;
              v39[1] = -(int)v34;
              *((_QWORD *)v39 + 1) = v39 + 5;
              v39[4] = 4;
              if (v34 == -1)
              {
                *v40 = v35;
              }
              else
              {
                v41 = (char *)&v215 + v34 + 5;
                v42 = v39;
                memcpy(v40, v41, __n);
                v39 = v42;
              }
              v20 = 10;
              v21 = 24;
            }
            else
            {
              v39 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            v79 = *v33;
            *v33 = (WTF::StringImpl *)v39;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
              {
                WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v79 -= 2;
              }
            }
          }
        }
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v50 = (uint64_t)*v33;
        if (*v33)
          v51 = *(_DWORD *)(v50 + 4);
        else
          v51 = 0;
        v52 = __CFADD__(v207, v51);
        v53 = v207 + v51;
        if (v52)
          v206 = 1;
        else
          v207 = v53;
        v54 = v18 & 0xFFFFFF0000000000;
        if (v50)
        {
          v55 = *(_QWORD *)(v50 + 8);
          v18 = *(unsigned int *)(v50 + 4) | ((unint64_t)((*(_DWORD *)(v50 + 16) >> 2) & 1) << 32) | v54;
          *(_DWORD *)v50 += 2;
        }
        else
        {
          v55 = 0;
          v18 = v54 | 0x100000000;
        }
        v214 = (WTF::StringImpl *)v50;
        *(_QWORD *)&v215 = v55;
        *((_QWORD *)&v215 + 1) = v18;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v70 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v70)
          {
            v59 = 1;
            v20 = 10;
            v21 = 24;
            goto LABEL_33;
          }
          v71 = (char *)v203 + 32 * HIDWORD(v204);
          v72 = *(_QWORD *)v70;
          *(_QWORD *)v70 = 0;
          *(_QWORD *)v71 = v72;
          *(_OWORD *)(v71 + 8) = *(_OWORD *)(v70 + 8);
          v57 = (__int16 *)(v71 + 24);
          v58 = (__int16 *)(v70 + 24);
          v20 = 10;
          v21 = 24;
        }
        else
        {
          v56 = (char *)v203 + 32 * HIDWORD(v204);
          v214 = 0;
          *(_QWORD *)v56 = v50;
          *(_OWORD *)(v56 + 8) = v215;
          v57 = (__int16 *)(v56 + 24);
          v58 = &v216;
        }
        v59 = 0;
        *v57 = *v58;
        ++HIDWORD(v204);
LABEL_33:
        v210 |= v59;
        v60 = v214;
        v214 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
            v21 = 24;
            v20 = 10;
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        v212 = 0;
        if (*(_DWORD *)(v32 + 80))
        {
          v104 = *(_DWORD *)(v32 + 80);
          if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
        }
        v61 = **(_QWORD **)(v10 + 24);
        if (*(_DWORD *)(v61 + 80))
        {
          v105 = *(_DWORD *)(v61 + 80);
          if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
          if (*(_QWORD *)(v61 + 16))
          {
            v168 = 0;
            v19 = (WTF *)v205;
            goto LABEL_92;
          }
        }
        v19 = (WTF *)((char *)v19 + 1);
        if (v19 == v29)
        {
          v28 = **(_QWORD **)(v10 + 16);
          v19 = (WTF *)v205;
          break;
        }
      }
    }
    if ((unint64_t)v29 < v28)
    {
      do
      {
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v214 = 0;
        *(_QWORD *)&v215 = 0;
        *((_QWORD *)&v215 + 1) = 0x100000000;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v119 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v119)
          {
            v109 = 1;
            goto LABEL_80;
          }
          v120 = (char *)v203 + 32 * HIDWORD(v204);
          v121 = *(_QWORD *)v119;
          *(_QWORD *)v119 = 0;
          *(_QWORD *)v120 = v121;
          *(_OWORD *)(v120 + 8) = *(_OWORD *)(v119 + 8);
          v107 = (__int16 *)(v120 + 24);
          v108 = (__int16 *)(v119 + 24);
        }
        else
        {
          v106 = (char *)v203 + 32 * HIDWORD(v204);
          *(_QWORD *)v106 = 0;
          *(_OWORD *)(v106 + 8) = v215;
          v107 = (__int16 *)(v106 + 24);
          v108 = &v216;
        }
        v109 = 0;
        *v107 = *v108;
        ++HIDWORD(v204);
LABEL_80:
        v210 |= v109;
        v110 = v214;
        v214 = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
          {
            WTF::StringImpl::~StringImpl(v110, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
          }
          else
          {
            *(_DWORD *)v110 -= 2;
          }
        }
        v212 = 0;
        v29 = (WTF *)((char *)v29 + 1);
      }
      while ((unint64_t)v29 < **(_QWORD **)(v10 + 16));
    }
    if (v208)
    {
      __break(0xC471u);
      JUMPOUT(0x198ADD588);
    }
    v20 = **(_QWORD **)(v10 + 8);
    if (v209 != 1)
    {
      v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_92:
      if (HIDWORD(v204))
      {
        v122 = v203;
        v123 = 32 * HIDWORD(v204);
        do
        {
          v124 = *(WTF::StringImpl **)v122;
          *(_QWORD *)v122 = 0;
          if (v124)
          {
            if (*(_DWORD *)v124 == 2)
            {
              WTF::StringImpl::~StringImpl(v124, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v124 -= 2;
            }
          }
          v122 = (WTF *)((char *)v122 + 32);
          v123 -= 32;
        }
        while (v123);
      }
      v133 = v203;
      v134 = v19 == v203;
      goto LABEL_101;
    }
    v168 = v212;
    if (v212)
      goto LABEL_92;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADD63CLL);
    }
    v10 = *(_QWORD *)(v20 + 56);
    v38 = v203;
    v34 = *((unsigned int *)v203 + 4);
    v36 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v34 == *((_DWORD *)v36 + 1))
      {
        *(_DWORD *)v36 += 2;
LABEL_112:
        v214 = v36;
        goto LABEL_113;
      }
    }
    else
    {
LABEL_159:
      if (!(_DWORD)v34)
        goto LABEL_112;
    }
    v181 = (_BYTE *)*((_QWORD *)v38 + 1);
    if (*((_BYTE *)v38 + 20))
    {
      if (v181)
      {
        if ((_DWORD)v34)
        {
          if ((v34 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198ADD64CLL);
          }
          v182 = (int *)WTF::fastCompactMalloc((WTF *)(v34 + 20));
          v183 = v182 + 5;
          *v182 = 2;
          v182[1] = v34;
          *((_QWORD *)v182 + 1) = v182 + 5;
          v182[4] = 4;
          if ((_DWORD)v34 == 1)
          {
            *v183 = *v181;
LABEL_182:
            v214 = (WTF::StringImpl *)v182;
LABEL_113:
            v168 = JSC::jsString(v10, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v137 = v214;
            v214 = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 2)
              {
                WTF::StringImpl::~StringImpl(v137, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
              }
              else
              {
                *(_DWORD *)v137 -= 2;
              }
            }
            goto LABEL_92;
          }
          v193 = v181;
          v194 = v34;
          goto LABEL_181;
        }
        goto LABEL_177;
      }
    }
    else if (v181)
    {
      if ((_DWORD)v34)
      {
        if (v34 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198ADD654);
        }
        v182 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v34 + 20));
        v183 = v182 + 5;
        *v182 = 2;
        v182[1] = v34;
        *((_QWORD *)v182 + 1) = v182 + 5;
        v182[4] = 0;
        if ((_DWORD)v34 == 1)
        {
          *(_WORD *)v183 = *(_WORD *)v181;
          goto LABEL_182;
        }
        v193 = v181;
        v194 = 2 * v34;
LABEL_181:
        memcpy(v183, v193, v194);
        goto LABEL_182;
      }
LABEL_177:
      v182 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_182;
    }
    v182 = 0;
    goto LABEL_182;
  }
  v201 = a2;
  v202 = a3;
  v203 = (WTF *)v205;
  v204 = 16;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = BYTE4(a3);
  v212 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
  v138 = **(_QWORD **)(v10 + 24);
  if (*(_DWORD *)(v138 + 80))
  {
    v184 = *(_DWORD *)(v138 + 80);
    if ((v184 & 0x27) != 0 && (v184 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v138 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v138 + 16))
    {
      v168 = 0;
      goto LABEL_136;
    }
  }
  if (**(_QWORD **)(v10 + 16))
  {
    for (i = 0; i < **(_QWORD **)(v10 + 16); ++i)
    {
      if (v209 == -1)
        v208 = 1;
      ++v209;
      v214 = 0;
      *(_QWORD *)&v215 = 0;
      *((_QWORD *)&v215 + 1) = 0x100000000;
      v216 = 0;
      if (HIDWORD(v204) == (_DWORD)v204)
      {
        v153 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
        if (!v153)
        {
          v143 = 1;
          goto LABEL_124;
        }
        v154 = (char *)v203 + 32 * HIDWORD(v204);
        v155 = *(_QWORD *)v153;
        *(_QWORD *)v153 = 0;
        *(_QWORD *)v154 = v155;
        *(_OWORD *)(v154 + 8) = *(_OWORD *)(v153 + 8);
        v141 = (__int16 *)(v154 + 24);
        v142 = (__int16 *)(v153 + 24);
      }
      else
      {
        v140 = (char *)v203 + 32 * HIDWORD(v204);
        *(_QWORD *)v140 = 0;
        *(_OWORD *)(v140 + 8) = v215;
        v141 = (__int16 *)(v140 + 24);
        v142 = &v216;
      }
      v143 = 0;
      *v141 = *v142;
      ++HIDWORD(v204);
LABEL_124:
      v210 |= v143;
      v144 = v214;
      v214 = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
        {
          WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        }
        else
        {
          *(_DWORD *)v144 -= 2;
        }
      }
      v212 = 0;
    }
  }
  if (v208)
  {
    __break(0xC471u);
    JUMPOUT(0x198ADD634);
  }
  v20 = **(_QWORD **)(v10 + 8);
  if (v209 == 1)
  {
    v168 = v212;
    if (v212)
      goto LABEL_136;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADD644);
    }
    v169 = *(_QWORD *)(v20 + 56);
    v170 = *((unsigned int *)v203 + 4);
    v171 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v170 == *((_DWORD *)v171 + 1))
      {
        *(_DWORD *)v171 += 2;
LABEL_153:
        v214 = v171;
        goto LABEL_154;
      }
    }
    else if (!(_DWORD)v170)
    {
      goto LABEL_153;
    }
    v195 = (_BYTE *)*((_QWORD *)v203 + 1);
    if (*((_BYTE *)v203 + 20))
    {
      if (v195)
      {
        if ((_DWORD)v170)
        {
          if ((v170 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198ADD65CLL);
          }
          v196 = (int *)WTF::fastCompactMalloc((WTF *)(v170 + 20));
          v197 = v196 + 5;
          *v196 = 2;
          v196[1] = v170;
          *((_QWORD *)v196 + 1) = v196 + 5;
          v196[4] = 4;
          if ((_DWORD)v170 == 1)
          {
            *v197 = *v195;
LABEL_204:
            v214 = (WTF::StringImpl *)v196;
LABEL_154:
            v168 = JSC::jsString(v169, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v172 = v214;
            v214 = 0;
            if (v172)
            {
              if (*(_DWORD *)v172 == 2)
              {
                WTF::StringImpl::~StringImpl(v172, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
              }
              else
              {
                *(_DWORD *)v172 -= 2;
              }
            }
            goto LABEL_136;
          }
          v198 = v195;
          v199 = v170;
          goto LABEL_203;
        }
        goto LABEL_200;
      }
    }
    else if (v195)
    {
      if ((_DWORD)v170)
      {
        if (v170 > 0x7FFFFFEF)
        {
LABEL_211:
          __break(0xC471u);
          JUMPOUT(0x198ADD580);
        }
        v196 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v170 + 20));
        v197 = v196 + 5;
        *v196 = 2;
        v196[1] = v170;
        *((_QWORD *)v196 + 1) = v196 + 5;
        v196[4] = 0;
        if ((_DWORD)v170 == 1)
        {
          *(_WORD *)v197 = *(_WORD *)v195;
          goto LABEL_204;
        }
        v198 = v195;
        v199 = 2 * v170;
LABEL_203:
        memcpy(v197, v198, v199);
        goto LABEL_204;
      }
LABEL_200:
      v196 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_204;
    }
    v196 = 0;
    goto LABEL_204;
  }
  v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_136:
  if (HIDWORD(v204))
  {
    v156 = v203;
    v157 = 32 * HIDWORD(v204);
    do
    {
      v158 = *(WTF::StringImpl **)v156;
      *(_QWORD *)v156 = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
        {
          WTF::StringImpl::~StringImpl(v158, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
        }
        else
        {
          *(_DWORD *)v158 -= 2;
        }
      }
      v156 = (WTF *)((char *)v156 + 32);
      v157 -= 32;
    }
    while (v157);
  }
  v133 = v203;
  v134 = v205 == (_BYTE *)v203;
LABEL_101:
  if (!v134 && v133 != 0)
  {
    v203 = 0;
    LODWORD(v204) = 0;
    WTF::fastFree((unint64_t)v133, (void *)v20, v21, v22, v23, v24, v25, v26);
  }
  return v168;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  BOOL v49;
  char *v50;
  __int16 *v51;
  __int16 *v52;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int *v69;
  BOOL v71;
  char *v72;
  __int16 *v73;
  __int16 *v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int **v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  int *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  BOOL v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  int v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  __int16 *v140;
  __int16 *v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  int v173;
  char v174;
  int v175;
  int v176;
  int v177;
  int **v178;
  uint64_t (*v179)(WTF::StringImpl **);
  int v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  double v208;
  char *v209;
  __int16 *v210;
  __int16 *v211;
  char v212;
  WTF::StringImpl *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::AtomStringImpl *v222;
  unint64_t v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  int **v227;
  uint64_t v228;
  unsigned int v229;
  int *v230;
  _BYTE *v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  int v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unsigned int v248;
  double *v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl **v252;
  WTF::StringImpl *v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  _DWORD *v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  unint64_t v269;
  uint64_t v270;
  char *v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  WTF::StringImpl *v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  __int16 *v312;
  __int16 *v313;
  char v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char *v319;
  uint64_t v320;
  WTF *v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  WTF *v327;
  BOOL v328;
  uint64_t v331;
  size_t v332;
  int *v333;
  WTF::StringImpl *v334;
  JSC::ArrayBuffer *v335;
  int v336;
  unint64_t v337;
  unint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _BYTE *v359;
  int *v360;
  _BYTE *v361;
  uint64_t v362;
  unint64_t i;
  char *v364;
  __int16 *v365;
  __int16 *v366;
  char v367;
  WTF::StringImpl *v368;
  unint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char *v378;
  uint64_t v379;
  WTF *v380;
  uint64_t v381;
  WTF::StringImpl *v382;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  size_t v392;
  int *v393;
  WTF::StringImpl *v394;
  int v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  const void *v404;
  size_t v405;
  _BYTE *v406;
  int *v407;
  _BYTE *v408;
  uint64_t v409;
  const void *v410;
  size_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t StatusReg;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  WTF *v427;
  uint64_t v428;
  _BYTE v429[512];
  char v430;
  int v431;
  char v432;
  int v433;
  char v434;
  char v435;
  unint64_t v436;
  unint64_t v437;
  char v438;
  WTF::StringImpl *v439;
  int8x16_t v440;
  __int16 v441;
  uint64_t v442;

  v442 = *MEMORY[0x1E0C80C00];
  LOBYTE(v437) = 0;
  v438 = 0;
  v11 = **(_QWORD **)a1;
  if ((JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, &v437, a3, a4, a5, a6, a7, a8) & 1) != 0)goto LABEL_498;
  v19 = *(unsigned __int8 *)(v11 + 40);
  if ((v19 & 1) == 0)
  {
    v20 = *(_QWORD *)(v11 + 24);
    goto LABEL_4;
  }
  if (v19 == 88)
  {
LABEL_456:
    v335 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v11 + 8) - 8);
    goto LABEL_470;
  }
  if (v19 == 48 || v19 == 16)
  {
    v335 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v11, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    v347 = v19 - 90;
    if (v347 > 0x33)
    {
LABEL_498:
      v425 = a2;
      v426 = a3;
      v427 = (WTF *)v429;
      v428 = 16;
      v430 = 0;
      v431 = 0;
      v432 = 0;
      v433 = 0;
      v434 = 0;
      v435 = BYTE4(a3);
      v436 = 0;
      JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v425, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
      v362 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v362 + 80))
      {
        v395 = *(_DWORD *)(v362 + 80);
        if ((v395 & 0x27) != 0 && (v395 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v362 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v362 + 16))
        {
          v337 = 0;
          goto LABEL_518;
        }
      }
      if (**(_QWORD **)(a1 + 16))
      {
        for (i = 0; i < **(_QWORD **)(a1 + 16); ++i)
        {
          if (v433 == -1)
            v432 = 1;
          ++v433;
          v439 = 0;
          v440.i64[0] = 0;
          v440.i64[1] = 0x100000000;
          v441 = 0;
          if (HIDWORD(v428) == (_DWORD)v428)
          {
            v377 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v427, (WTF::AtomStringImpl *)(HIDWORD(v428) + 1), (unint64_t)&v439, v23, v24, v25, v26, v27);
            if (!v377)
            {
              v367 = 1;
              goto LABEL_506;
            }
            v378 = (char *)v427 + 32 * HIDWORD(v428);
            v379 = *(_QWORD *)v377;
            *(_QWORD *)v377 = 0;
            *(_QWORD *)v378 = v379;
            *(_OWORD *)(v378 + 8) = *(_OWORD *)(v377 + 8);
            v365 = (__int16 *)(v378 + 24);
            v366 = (__int16 *)(v377 + 24);
          }
          else
          {
            v364 = (char *)v427 + 32 * HIDWORD(v428);
            *(_QWORD *)v364 = 0;
            *(int8x16_t *)(v364 + 8) = v440;
            v365 = (__int16 *)(v364 + 24);
            v366 = &v441;
          }
          v367 = 0;
          *v365 = *v366;
          ++HIDWORD(v428);
LABEL_506:
          v434 |= v367;
          v368 = v439;
          v439 = 0;
          if (v368)
          {
            if (*(_DWORD *)v368 == 2)
            {
              WTF::StringImpl::~StringImpl(v368, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v369, v370, v371, v372, v373, v374, v375, v376);
            }
            else
            {
              *(_DWORD *)v368 -= 2;
            }
          }
          v436 = 0;
        }
      }
      if (v432)
      {
        __break(0xC471u);
        JUMPOUT(0x198ADF714);
      }
      v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
      if (v433 != 1)
      {
        v337 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v425, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_518:
        if (HIDWORD(v428))
        {
          v380 = v427;
          v381 = 32 * HIDWORD(v428);
          do
          {
            v382 = *(WTF::StringImpl **)v380;
            *(_QWORD *)v380 = 0;
            if (v382)
            {
              if (*(_DWORD *)v382 == 2)
              {
                WTF::StringImpl::~StringImpl(v382, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v383, v384, v385, v386, v387, v388, v389, v390);
              }
              else
              {
                *(_DWORD *)v382 -= 2;
              }
            }
            v380 = (WTF *)((char *)v380 + 32);
            v381 -= 32;
          }
          while (v381);
        }
        v327 = v427;
        v328 = v429 == (_BYTE *)v427;
        goto LABEL_440;
      }
      v337 = v436;
      if (v436)
        goto LABEL_518;
      if (!HIDWORD(v428))
      {
        __break(0xC471u);
        JUMPOUT(0x198ADF724);
      }
      v391 = *((_QWORD *)v21 + 7);
      v392 = *((unsigned int *)v427 + 4);
      v393 = *(int **)v427;
      if (*(_QWORD *)v427)
      {
        if ((_DWORD)v392 == v393[1])
        {
          *v393 += 2;
LABEL_532:
          v439 = (WTF::StringImpl *)v393;
          goto LABEL_533;
        }
      }
      else if (!(_DWORD)v392)
      {
        goto LABEL_532;
      }
      v406 = (_BYTE *)*((_QWORD *)v427 + 1);
      if (*((_BYTE *)v427 + 20))
      {
        if (v406)
        {
          if ((_DWORD)v392)
          {
            if ((v392 & 0x80000000) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198ADF73CLL);
            }
            v407 = (int *)WTF::fastCompactMalloc((WTF *)(v392 + 20));
            v408 = v407 + 5;
            *v407 = 2;
            v407[1] = v392;
            *((_QWORD *)v407 + 1) = v407 + 5;
            v407[4] = 4;
            if ((_DWORD)v392 == 1)
            {
              *v408 = *v406;
LABEL_571:
              v439 = (WTF::StringImpl *)v407;
LABEL_533:
              v337 = JSC::jsString(v391, (JSC::VM *)&v439, (uint64_t)v22, v23, v24, v25, v26, v27);
              v394 = v439;
              v439 = 0;
              if (v394)
              {
                if (*(_DWORD *)v394 == 2)
                {
                  WTF::StringImpl::~StringImpl(v394, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v396, v397, v398, v399, v400, v401, v402, v403);
                }
                else
                {
                  *(_DWORD *)v394 -= 2;
                }
              }
              goto LABEL_518;
            }
            v410 = v406;
            v411 = v392;
            goto LABEL_570;
          }
          goto LABEL_567;
        }
      }
      else if (v406)
      {
        if ((_DWORD)v392)
        {
          if (v392 > 0x7FFFFFEF)
          {
            __break(0xC471u);
LABEL_579:
            __break(1u);
LABEL_580:
            JUMPOUT(0x198ADF634);
          }
          v407 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v392 + 20));
          v408 = v407 + 5;
          *v407 = 2;
          v407[1] = v392;
          *((_QWORD *)v407 + 1) = v407 + 5;
          v407[4] = 0;
          if ((_DWORD)v392 == 1)
          {
            *(_WORD *)v408 = *(_WORD *)v406;
            goto LABEL_571;
          }
          v410 = v406;
          v411 = 2 * v392;
LABEL_570:
          memcpy(v408, v410, v411);
          goto LABEL_571;
        }
LABEL_567:
        v407 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_571;
      }
      v407 = 0;
      goto LABEL_571;
    }
    if (((1 << v347) & 0xF400000000000) == 0)
    {
      if (((1 << v347) & 0xF) == 0)
        goto LABEL_498;
      goto LABEL_456;
    }
    v335 = *(JSC::ArrayBuffer **)(v11 + 48);
  }
LABEL_470:
  if (!v335)
    goto LABEL_498;
  *(_DWORD *)v335 += 2;
  if (v438)
  {
    v348 = v437;
  }
  else
  {
    if (*((_BYTE *)v335 + 64) && (v409 = *((_QWORD *)v335 + 4)) != 0)
      v348 = atomic_load((unint64_t *)(v409 + 32));
    else
      v348 = *((_QWORD *)v335 + 6);
    v437 = v348;
    v438 = 1;
  }
  v349 = v348 - *(_QWORD *)(v11 + 32);
  if ((*(_BYTE *)(v11 + 5) - 42) > 7u)
    LOBYTE(v350) = 0;
  else
    v350 = qword_199158A40[(char)(*(_BYTE *)(v11 + 5) - 42)];
  v20 = v349 >> v350;
  v39 = *(_DWORD *)v335 == 2;
  *(_DWORD *)v335 -= 2;
  if (v39)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v335, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
  }
LABEL_4:
  v425 = a2;
  v426 = a3;
  v427 = (WTF *)v429;
  v428 = 16;
  v430 = 0;
  v431 = 0;
  v432 = 0;
  v433 = 0;
  v434 = 0;
  v435 = BYTE4(a3);
  v436 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v425, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
  v29 = **(_QWORD **)(a1 + 24);
  if (*(_DWORD *)(v29 + 80))
  {
    v336 = *(_DWORD *)(v29 + 80);
    if ((v336 & 0x27) != 0 && (v336 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v29 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v29 + 16))
    {
      v337 = 0;
      goto LABEL_420;
    }
  }
  v30 = **(_QWORD **)(a1 + 16);
  if (v20 >= v30)
    v31 = **(_QWORD **)(a1 + 16);
  else
    v31 = v20;
  if (v31)
  {
    v32 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v33 = *(_QWORD *)(**(_QWORD **)a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v34 = *(unsigned int *)(v33 + 4 * v32);
      if ((v34 & 0x80000000) != 0)
      {
        *(double *)v28.i64 = (double)v34;
        v35 = COERCE__INT64((double)v34) + 0x2000000000000;
      }
      else
      {
        v35 = v34 | 0xFFFE000000000000;
      }
      v36 = **(_QWORD **)(a1 + 8);
      v37 = *(_QWORD *)(v36 + 56);
      if ((v35 & 0xFFFE000000000002) == 0)
      {
        v38 = *(unsigned __int8 *)(v35 + 5);
        if (v35)
          v39 = v38 == 2;
        else
          v39 = 0;
        v40 = v39;
        if (!v39)
          goto LABEL_51;
        v41 = *(_QWORD *)(v35 + 8);
        if ((v41 & 1) == 0)
        {
          if (v41)
          {
            v42 = *(unsigned int *)(v41 + 16);
            v43 = *(const char **)(v41 + 8);
            v41 = *(unsigned int *)(v41 + 4);
            v44 = (v42 >> 2) & 1;
          }
          else
          {
            v43 = 0;
            v44 = 1;
          }
          v45 = v423 & 0xFFFFFF0000000000 | v41 | (v44 << 32);
          v423 = v45;
          v46 = v35;
          goto LABEL_28;
        }
        if ((v41 & 2) == 0)
        {
          v119 = (unint64_t)*JSC::JSRopeString::resolveRope(v35, **(JSC::JSGlobalObject ***)(a1 + 8), (uint64_t)v22, v23, v28, v24, v25, v26, v27);
          if (v119)
          {
            v120 = *(unsigned int *)(v119 + 16);
            v43 = *(const char **)(v119 + 8);
            v119 = *(unsigned int *)(v119 + 4);
            v121 = (v120 >> 2) & 1;
          }
          else
          {
            v43 = 0;
            v121 = 1;
          }
          v45 = v417 & 0xFFFFFF0000000000 | v119 | (v121 << 32);
          v46 = v35;
          v417 = v45;
          goto LABEL_28;
        }
        v46 = *(_QWORD *)(v35 + 20) & 0xFFFFFFFFFLL;
        v87 = v421 & 0xFFFFFF0000000000;
        v88 = *(_QWORD *)(v46 + 8);
        if (v88)
        {
          v89 = *(unsigned int *)(v88 + 4);
          v90 = ((unint64_t)*(unsigned int *)(v88 + 16) >> 2) & 1;
          v421 = v87 | (v90 << 32) | v89;
          v91 = *(_QWORD *)(v35 + 24);
          v92 = v91 >> 16;
          if (v89 > (v91 >> 16))
          {
            v43 = *(const char **)(v88 + 8);
            v93 = *(_DWORD *)(v35 + 16);
            if ((int)v89 - (int)v92 > v93 || (v93 = v89 - v92, (_DWORD)v92))
            {
              v94 = (v91 >> 16);
              v45 = v93;
              v95 = v89 - v92;
              if ((_DWORD)v90)
              {
                if (v95 < v93)
                  goto LABEL_579;
                v43 += v94;
                v45 = v93 | 0x100000000;
              }
              else
              {
                if (v95 < v93)
                  goto LABEL_579;
                v43 += 2 * v94;
              }
            }
            else
            {
              v45 = v421;
            }
LABEL_28:
            if (*(_DWORD *)(v37 + 80))
            {
              v180 = *(_DWORD *)(v37 + 80);
              if ((v180 & 0x27) != 0 && (v180 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
              if (*(_QWORD *)(v37 + 16))
              {
                LOBYTE(v38) = 0;
                goto LABEL_51;
              }
            }
            v47 = *(WTF::StringImpl **)(v46 + 8);
            if ((v47 & 1) != 0)
            {
              v47 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v46, 0, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
              if (v47)
LABEL_31:
                *(_DWORD *)v47 += 2;
            }
            else if (v47)
            {
              goto LABEL_31;
            }
            if (v433 == -1)
              v432 = 1;
            ++v433;
            if (v436 == v35)
            {
              if (!HIDWORD(v428))
              {
                __break(0xC471u);
                JUMPOUT(0x198ADF64CLL);
              }
              v115 = (char *)v427 + 32 * HIDWORD(v428) - 32;
              v116 = *((unsigned __int16 *)v115 + 12);
              if (v116 != 0xFFFF)
              {
                *((_WORD *)v115 + 12) = v116 + 1;
                v117 = *((_DWORD *)v115 + 4);
                v110 = __CFADD__(v431, v117);
                v118 = v431 + v117;
                if (v110)
                {
                  v430 = 1;
                  if (v47)
                    goto LABEL_145;
                }
                else
                {
                  v431 = v118;
                  if (v47)
                  {
LABEL_145:
                    if (*(_DWORD *)v47 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v47, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    }
                    else
                    {
                      *(_DWORD *)v47 -= 2;
                    }
                  }
                }
LABEL_50:
                LOBYTE(v38) = 1;
LABEL_51:
                v55 = v40 & v38;
                goto LABEL_52;
              }
            }
            if (__CFADD__(v431, (_DWORD)v45))
              v430 = 1;
            else
              v431 += v45;
            v49 = (v45 & 0xFF00000000) != 0 && v435 != 0;
            v435 = v49;
            v439 = v47;
            v440.i64[0] = (uint64_t)v43;
            v440.i64[1] = v45;
            v441 = 0;
            if (HIDWORD(v428) != (_DWORD)v428)
            {
              v50 = (char *)v427 + 32 * HIDWORD(v428);
              v439 = 0;
              *(_QWORD *)v50 = v47;
              v51 = &v441;
              v28 = v440;
              *(int8x16_t *)(v50 + 8) = v440;
              v52 = (__int16 *)(v50 + 24);
              goto LABEL_45;
            }
            v144 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v427, (WTF::AtomStringImpl *)(HIDWORD(v428) + 1), (unint64_t)&v439, v23, v24, v25, v26, v27);
            if (v144)
            {
              v145 = (char *)v427 + 32 * HIDWORD(v428);
              v146 = *(_QWORD *)v144;
              *(_QWORD *)v144 = 0;
              *(_QWORD *)v145 = v146;
              v28 = *(int8x16_t *)(v144 + 8);
              *(int8x16_t *)(v145 + 8) = v28;
              v52 = (__int16 *)(v145 + 24);
              v51 = (__int16 *)(v144 + 24);
LABEL_45:
              v53 = 0;
              *v52 = *v51;
              ++HIDWORD(v428);
            }
            else
            {
              v53 = 1;
            }
            v434 |= v53;
            v54 = (unint64_t)v439;
            v439 = 0;
            if (!v54)
            {
LABEL_49:
              v436 = v35;
              goto LABEL_50;
            }
            if (*(_DWORD *)v54 != 2)
            {
              *(_DWORD *)v54 -= 2;
              goto LABEL_49;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v54, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
            v105 = *(_QWORD *)(StatusReg + 752);
            if (!v105)
            {
              pas_try_deallocate_slow_no_cache(v54, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_49;
            }
            if (!(v54 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v54 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v54)) & 1) != 0)
            {
LABEL_130:
              v106 = *(unsigned int *)(v105 + 8000);
              if (v106 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v105, v54, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v105 + 8 * v106) = v54 | 0x5000000000000;
                *(_DWORD *)(v105 + 8000) = v106 + 1;
              }
              goto LABEL_49;
            }
            if (v54 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v54 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v54 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v54) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_130;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v105, v54, 1, v23, v24, v25, v26, v27);
            goto LABEL_49;
          }
        }
        else
        {
          v421 = v87 | 0x100000000;
        }
        v45 = 0x100000000;
        v43 = "";
        goto LABEL_28;
      }
      if (v35 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v208 = v35 - 0x2000000000000;
        if (v35 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((*(_QWORD *)&v208 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v226 = (int)v208, (double)(int)v226 == v208)
            && ((*(_QWORD *)&v208 & 0x8000000000000000) == 0 || (_DWORD)v226))
          {
            if (v226 > 0xFF)
            {
              v260 = v37 + 48368;
              v261 = 9 * ((~((_DWORD)v226 << 15) + v226) ^ ((~((_DWORD)v226 << 15) + v226) >> 10));
              v262 = (v261 ^ (v261 >> 6)) + ~((v261 ^ (v261 >> 6)) << 11);
              v263 = (v262 ^ BYTE2(v262));
              v264 = (_DWORD *)(v37 + 48368 + 24 * (v262 ^ BYTE2(v262)));
              if (*v264 != (_DWORD)v226
                || (v265 = v260 + 24 * v263, v266 = *(_QWORD *)(v265 + 8), v227 = (int **)(v265 + 8), !v266))
              {
                *v264 = v226;
                WTF::String::number(v226, (uint64_t *)&v439);
                v280 = v260 + 24 * v263;
                v281 = (int *)v439;
                v439 = 0;
                v283 = *(WTF::StringImpl **)(v280 + 8);
                v227 = (int **)(v280 + 8);
                v282 = v283;
                *v227 = v281;
                if (v283)
                {
                  if (*(_DWORD *)v282 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v282, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
                  }
                  else
                  {
                    *(_DWORD *)v282 -= 2;
                  }
                }
                v293 = v439;
                v439 = 0;
                if (v293)
                {
                  if (*(_DWORD *)v293 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v293, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v302, v303, v304, v305, v306, v307, v308, v309);
                  }
                  else
                  {
                    *(_DWORD *)v293 -= 2;
                  }
                }
                *(_QWORD *)(v260 + 24 * v263 + 16) = 0;
              }
            }
            else
            {
              v227 = (int **)(v37 + 16 * v226 + 44272);
              if (!*v227)
              {
                v228 = 0;
                do
                {
                  v229 = (v226 % 0xA) | 0x30;
                  v440.i8[v228-- + 4] = (v226 % 0xA) | 0x30;
                  v102 = v226 > 9;
                  LODWORD(v226) = v226 / 0xA;
                }
                while (v102);
                if (v228 + 14 >= 15)
                  goto LABEL_579;
                if (v228)
                {
                  if ((unint64_t)-v228 >> 31)
                  {
                    __break(0xC471u);
                    goto LABEL_580;
                  }
                  v230 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v228));
                  v231 = v230 + 5;
                  *v230 = 2;
                  v230[1] = -(int)v228;
                  *((_QWORD *)v230 + 1) = v230 + 5;
                  v230[4] = 4;
                  if (v228 == -1)
                    *v231 = v229;
                  else
                    memcpy(v231, &v440.u8[v228 + 5], -v228);
                }
                else
                {
                  v230 = &WTF::StringImpl::s_emptyAtomString;
                  WTF::StringImpl::s_emptyAtomString += 2;
                }
                v284 = (WTF::StringImpl *)*v227;
                *v227 = v230;
                if (v284)
                {
                  if (*(_DWORD *)v284 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v284, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
                  }
                  else
                  {
                    *(_DWORD *)v284 -= 2;
                  }
                }
              }
            }
            if (v433 == -1)
              v432 = 1;
            ++v433;
            v233 = (WTF::StringImpl *)*v227;
            if (*v227)
              v267 = *((_DWORD *)v233 + 1);
            else
              v267 = 0;
            v110 = __CFADD__(v431, v267);
            v268 = v431 + v267;
            if (v110)
              v430 = 1;
            else
              v431 = v268;
            v269 = v412 & 0xFFFFFF0000000000;
            if (v233)
            {
              v270 = *((_QWORD *)v233 + 1);
              v412 = *((unsigned int *)v233 + 1) | ((unint64_t)((*((_DWORD *)v233 + 4) >> 2) & 1) << 32) | v269;
              *(_DWORD *)v233 += 2;
            }
            else
            {
              v270 = 0;
              v412 = v269 | 0x100000000;
            }
            v439 = v233;
            v440.i64[0] = v270;
            v238 = v412;
          }
          else
          {
            v244 = v37 + 54512;
            v245 = (*(_QWORD *)&v208 + ~(v35 << 32)) ^ ((*(_QWORD *)&v208 + ~(v35 << 32)) >> 22);
            v246 = 9 * ((v245 + ~(v245 << 13)) ^ ((v245 + ~(v245 << 13)) >> 8));
            v247 = (v246 ^ (v246 >> 15)) + ~((v246 ^ (v246 >> 15)) << 27);
            v248 = ((v247 >> 31) ^ v247);
            v249 = (double *)(v37 + 54512 + 24 * ((v247 >> 31) ^ v247));
            if (*v249 != v208
              || (v254 = v244 + 24 * v248, v255 = *(_QWORD *)(v254 + 8), v252 = (WTF::StringImpl **)(v254 + 8), !v255))
            {
              *v249 = v208;
              WTF::String::number(COERCE_DOUBLE(v35 - 0x2000000000000), (int **)&v439);
              v250 = v244 + 24 * v248;
              v253 = *(WTF::StringImpl **)(v250 + 8);
              v252 = (WTF::StringImpl **)(v250 + 8);
              v251 = v253;
              *v252 = v439;
              if (v253)
              {
                if (*(_DWORD *)v251 == 2)
                {
                  WTF::StringImpl::~StringImpl(v251, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
                }
                else
                {
                  *(_DWORD *)v251 -= 2;
                }
              }
              *(_QWORD *)(v244 + 24 * v248 + 16) = 0;
            }
            if (v433 == -1)
              v432 = 1;
            ++v433;
            v233 = *v252;
            if (*v252)
              v256 = *((_DWORD *)v233 + 1);
            else
              v256 = 0;
            v110 = __CFADD__(v431, v256);
            v257 = v431 + v256;
            if (v110)
              v430 = 1;
            else
              v431 = v257;
            v258 = v413 & 0xFFFFFF0000000000;
            if (v233)
            {
              v259 = *((_QWORD *)v233 + 1);
              v413 = *((unsigned int *)v233 + 1) | ((unint64_t)((*((_DWORD *)v233 + 4) >> 2) & 1) << 32) | v258;
              *(_DWORD *)v233 += 2;
            }
            else
            {
              v259 = 0;
              v413 = v258 | 0x100000000;
            }
            v439 = v233;
            v440.i64[0] = v259;
            v238 = v413;
          }
        }
        else if (v35 == 7)
        {
          if (v433 == -1)
            v432 = 1;
          v232 = *(_QWORD *)(v37 + 41952);
          ++v433;
          v233 = *(WTF::StringImpl **)(v232 + 432);
          if (v233)
            v234 = *((_DWORD *)v233 + 1);
          else
            v234 = 0;
          v110 = __CFADD__(v431, v234);
          v235 = v431 + v234;
          if (v110)
            v430 = 1;
          else
            v431 = v235;
          v236 = v414 & 0xFFFFFF0000000000;
          if (v233)
          {
            v237 = *((_QWORD *)v233 + 1);
            v414 = *((unsigned int *)v233 + 1) | ((unint64_t)((*((_DWORD *)v233 + 4) >> 2) & 1) << 32) | v236;
            *(_DWORD *)v233 += 2;
          }
          else
          {
            v237 = 0;
            v414 = v236 | 0x100000000;
          }
          v439 = v233;
          v440.i64[0] = v237;
          v238 = v414;
        }
        else
        {
          if (v35 != 6)
          {
            if (v433 == -1)
              v432 = 1;
            ++v433;
            v439 = 0;
            v440.i64[0] = 0;
            v416 = v416 & 0xFFFFFF0000000000 | 0x100000000;
            v440.i64[1] = v416;
            v441 = 0;
            if (HIDWORD(v428) != (_DWORD)v428)
            {
              v209 = (char *)v427 + 32 * HIDWORD(v428);
              *(_QWORD *)v209 = 0;
              v210 = &v441;
              v28 = v440;
              *(int8x16_t *)(v209 + 8) = v440;
              v211 = (__int16 *)(v209 + 24);
              goto LABEL_285;
            }
            v222 = (WTF::AtomStringImpl *)(HIDWORD(v428) + 1);
LABEL_297:
            v223 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v427, v222, (unint64_t)&v439, v23, v24, v25, v26, v27);
            if (v223)
            {
              v224 = (char *)v427 + 32 * HIDWORD(v428);
              v225 = *(_QWORD *)v223;
              *(_QWORD *)v223 = 0;
              *(_QWORD *)v224 = v225;
              v28 = *(int8x16_t *)(v223 + 8);
              *(int8x16_t *)(v224 + 8) = v28;
              v211 = (__int16 *)(v224 + 24);
              v210 = (__int16 *)(v223 + 24);
              goto LABEL_285;
            }
            v212 = 1;
LABEL_286:
            v434 |= v212;
            v213 = v439;
            v439 = 0;
            if (v213)
            {
              if (*(_DWORD *)v213 == 2)
              {
                WTF::StringImpl::~StringImpl(v213, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
              }
              else
              {
                *(_DWORD *)v213 -= 2;
              }
            }
            goto LABEL_170;
          }
          if (v433 == -1)
            v432 = 1;
          v239 = *(_QWORD *)(v37 + 41952);
          ++v433;
          v233 = *(WTF::StringImpl **)(v239 + 248);
          if (v233)
            v240 = *((_DWORD *)v233 + 1);
          else
            v240 = 0;
          v110 = __CFADD__(v431, v240);
          v241 = v431 + v240;
          if (v110)
            v430 = 1;
          else
            v431 = v241;
          v242 = v415 & 0xFFFFFF0000000000;
          if (v233)
          {
            v243 = *((_QWORD *)v233 + 1);
            v415 = *((unsigned int *)v233 + 1) | ((unint64_t)((*((_DWORD *)v233 + 4) >> 2) & 1) << 32) | v242;
            *(_DWORD *)v233 += 2;
          }
          else
          {
            v243 = 0;
            v415 = v242 | 0x100000000;
          }
          v439 = v233;
          v440.i64[0] = v243;
          v238 = v415;
        }
        v440.i64[1] = v238;
        v441 = 0;
        if (HIDWORD(v428) == (_DWORD)v428)
        {
          v222 = (WTF::AtomStringImpl *)(HIDWORD(v428) + 1);
          goto LABEL_297;
        }
        v271 = (char *)v427 + 32 * HIDWORD(v428);
        v439 = 0;
        *(_QWORD *)v271 = v233;
        v210 = &v441;
        v28 = v440;
        *(int8x16_t *)(v271 + 8) = v440;
        v211 = (__int16 *)(v271 + 24);
LABEL_285:
        v212 = 0;
        *v211 = *v210;
        ++HIDWORD(v428);
        goto LABEL_286;
      }
      if (v35 > 0xFF)
      {
        v125 = v37 + 48368;
        v126 = 9 * ((~((_DWORD)v35 << 15) + v35) ^ ((~((_DWORD)v35 << 15) + v35) >> 10));
        v127 = (v126 ^ (v126 >> 6)) + ~((v126 ^ (v126 >> 6)) << 11);
        v128 = (v127 ^ BYTE2(v127));
        v129 = (_DWORD *)(v37 + 48368 + 24 * (v127 ^ BYTE2(v127)));
        if (*v129 != (_DWORD)v35
          || (v130 = v125 + 24 * v128, v131 = *(_QWORD *)(v130 + 8), v98 = (int **)(v130 + 8), !v131))
        {
          *v129 = v35;
          WTF::String::number(v35, (uint64_t *)&v439);
          v168 = v125 + 24 * v128;
          v169 = (int *)v439;
          v439 = 0;
          v171 = *(WTF::StringImpl **)(v168 + 8);
          v98 = (int **)(v168 + 8);
          v170 = v171;
          *v98 = v169;
          if (v171)
          {
            if (*(_DWORD *)v170 == 2)
            {
              WTF::StringImpl::~StringImpl(v170, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
            }
            else
            {
              *(_DWORD *)v170 -= 2;
            }
          }
          v172 = v439;
          v439 = 0;
          if (v172)
          {
            if (*(_DWORD *)v172 == 2)
            {
              WTF::StringImpl::~StringImpl(v172, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
            }
            else
            {
              *(_DWORD *)v172 -= 2;
            }
          }
          *(_QWORD *)(v125 + 24 * v128 + 16) = 0;
        }
      }
      else
      {
        v98 = (int **)(v37 + 16 * v35 + 44272);
        if (!*v98)
        {
          v99 = 0;
          v100 = v35;
          do
          {
            v101 = (v100 % 0xA) | 0x30;
            v440.i8[v99-- + 4] = (v100 % 0xA) | 0x30;
            v102 = v100 > 9;
            v100 /= 0xAu;
          }
          while (v102);
          if (v99 + 14 >= 15)
            goto LABEL_579;
          if (v99)
          {
            if ((unint64_t)-v99 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198ADF63CLL);
            }
            v103 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v99));
            v104 = v103 + 5;
            *v103 = 2;
            v103[1] = -(int)v99;
            *((_QWORD *)v103 + 1) = v103 + 5;
            v103[4] = 4;
            if (v99 == -1)
              *v104 = v101;
            else
              memcpy(v104, &v440.u8[v99 + 5], -v99);
          }
          else
          {
            v103 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          v181 = (WTF::StringImpl *)*v98;
          *v98 = v103;
          if (v181)
          {
            if (*(_DWORD *)v181 == 2)
            {
              WTF::StringImpl::~StringImpl(v181, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
            }
            else
            {
              *(_DWORD *)v181 -= 2;
            }
          }
        }
      }
      if (v433 == -1)
        v432 = 1;
      ++v433;
      v132 = (WTF::StringImpl *)*v98;
      v133 = *v98 ? *((_DWORD *)v132 + 1) : 0;
      v110 = __CFADD__(v431, v133);
      v134 = v431 + v133;
      if (v110)
        v430 = 1;
      else
        v431 = v134;
      v135 = v419 & 0xFFFFFF0000000000;
      if (v132)
      {
        v136 = *((_QWORD *)v132 + 1);
        v137 = *((unsigned int *)v132 + 1) | ((unint64_t)((*((_DWORD *)v132 + 4) >> 2) & 1) << 32) | v135;
        *(_DWORD *)v132 += 2;
        v138 = v137;
      }
      else
      {
        v136 = 0;
        v138 = v135 | 0x100000000;
      }
      v439 = v132;
      v440.i64[0] = v136;
      v419 = v138;
      v440.i64[1] = v138;
      v441 = 0;
      if (HIDWORD(v428) != (_DWORD)v428)
        break;
      v165 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v427, (WTF::AtomStringImpl *)(HIDWORD(v428) + 1), (unint64_t)&v439, v23, v24, v25, v26, v27);
      if (v165)
      {
        v166 = (char *)v427 + 32 * HIDWORD(v428);
        v167 = *(_QWORD *)v165;
        *(_QWORD *)v165 = 0;
        *(_QWORD *)v166 = v167;
        v28 = *(int8x16_t *)(v165 + 8);
        *(int8x16_t *)(v166 + 8) = v28;
        v141 = (__int16 *)(v166 + 24);
        v140 = (__int16 *)(v165 + 24);
        goto LABEL_166;
      }
      v142 = 1;
LABEL_167:
      v434 |= v142;
      v143 = (unint64_t)v439;
      v439 = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v143, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v147 = *(_QWORD *)(StatusReg + 752);
          if (v147)
          {
            if (!(v143 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v143 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v143)) & 1) != 0)
            {
LABEL_178:
              v148 = *(unsigned int *)(v147 + 8000);
              if (v148 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v147, v143, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v147 + 8 * v148) = v143 | 0x5000000000000;
                *(_DWORD *)(v147 + 8000) = v148 + 1;
              }
              goto LABEL_170;
            }
            if (v143 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v143 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v143 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v143) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_178;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v147, v143, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v143, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v143 -= 2;
        }
      }
LABEL_170:
      v436 = 0;
      v55 = 1;
LABEL_52:
      if (*(_DWORD *)(v37 + 80))
      {
        v173 = *(_DWORD *)(v37 + 80);
        if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v37 + 16))
          v174 = 1;
        else
          v174 = v55;
        if ((v174 & 1) != 0)
          goto LABEL_93;
      }
      else if ((v55 & 1) != 0)
      {
        goto LABEL_93;
      }
      v56 = *(_QWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x40);
      if (v56)
      {
        if (*(_BYTE *)(v56 + 5) != 1)
        {
          v57 = *(_QWORD *)(v56 + 64);
          if (v57)
          {
            if ((*(_QWORD *)(v57 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v58 = *(_QWORD *)(v57 + 40);
              if (v58 == 1)
                v59 = 0;
              else
                v59 = v58;
              v60 = *(_QWORD *)(v36 + 512);
              if ((v60 & 1) != 0)
              {
                if ((v36 & 8) != 0)
                  v178 = (int **)(v36 - 16);
                else
                  v178 = (int **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
                v179 = *(uint64_t (**)(WTF::StringImpl **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
                v439 = (WTF::StringImpl *)*v178;
                v440.i64[0] = v36;
                v440.i64[1] = v36 + 512;
                v60 = v179(&v439);
              }
              if (v59 == v60)
              {
                v206 = *(_QWORD *)(v56 + 64);
                if (v206)
                {
                  v207 = *(_QWORD *)(v206 + 16);
                  if (v207 >= 2)
                  {
                    v35 = v207;
                    goto LABEL_66;
                  }
                }
              }
            }
          }
        }
      }
      v61 = *(unsigned __int8 *)(v35 + 5);
      if (v61 < 0x17)
      {
        if (v61 == 2)
          goto LABEL_66;
        v62 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v35, (JSC::JSGlobalObject *)v36, (uint64_t)v22, v23, v24, v25, v26, v27);
      }
      else
      {
        v62 = JSC::JSObject::toString((JSC::JSObject *)v35, (JSC::JSGlobalObject *)v36, v22, v23, v24, v25, v26, v27);
      }
      v35 = v62;
LABEL_66:
      if (*(_DWORD *)(v37 + 80))
      {
        v176 = *(_DWORD *)(v37 + 80);
        if ((v176 & 0x27) != 0 && (v176 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v37 + 16))
          goto LABEL_93;
      }
      v63 = *(_QWORD *)(v35 + 8);
      if ((v63 & 1) == 0)
      {
        if (v63)
        {
          v64 = *(unsigned int *)(v63 + 16);
          v65 = *(const char **)(v63 + 8);
          v63 = *(unsigned int *)(v63 + 4);
          v66 = (v64 >> 2) & 1;
        }
        else
        {
          v65 = 0;
          v66 = 1;
        }
        v67 = v424 & 0xFFFFFF0000000000 | v63 | (v66 << 32);
        v424 = v67;
        v68 = v35;
        goto LABEL_71;
      }
      if ((v63 & 2) == 0)
      {
        v112 = (unint64_t)*JSC::JSRopeString::resolveRope(v35, (JSC::JSGlobalObject *)v36, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
        if (v112)
        {
          v113 = *(unsigned int *)(v112 + 16);
          v65 = *(const char **)(v112 + 8);
          v112 = *(unsigned int *)(v112 + 4);
          v114 = (v113 >> 2) & 1;
        }
        else
        {
          v65 = 0;
          v114 = 1;
        }
        v67 = v418 & 0xFFFFFF0000000000 | v112 | (v114 << 32);
        v68 = v35;
        v418 = v67;
        goto LABEL_71;
      }
      v68 = *(_QWORD *)(v35 + 20) & 0xFFFFFFFFFLL;
      v78 = v422 & 0xFFFFFF0000000000;
      v79 = *(_QWORD *)(v68 + 8);
      if (!v79)
      {
        v422 = v78 | 0x100000000;
LABEL_190:
        v67 = 0x100000000;
        v65 = "";
        goto LABEL_71;
      }
      v80 = *(unsigned int *)(v79 + 4);
      v81 = ((unint64_t)*(unsigned int *)(v79 + 16) >> 2) & 1;
      v422 = v78 | (v81 << 32) | v80;
      v82 = *(_QWORD *)(v35 + 24);
      v83 = v82 >> 16;
      if (v80 <= (v82 >> 16))
        goto LABEL_190;
      v65 = *(const char **)(v79 + 8);
      v84 = *(_DWORD *)(v35 + 16);
      if ((int)v80 - (int)v83 > v84 || (v84 = v80 - v83, (_DWORD)v83))
      {
        v85 = (v82 >> 16);
        v67 = v84;
        v86 = v80 - v83;
        if ((_DWORD)v81)
        {
          if (v86 < v84)
            goto LABEL_579;
          v65 += v85;
          v67 = v84 | 0x100000000;
        }
        else
        {
          if (v86 < v84)
            goto LABEL_579;
          v65 += 2 * v85;
        }
      }
      else
      {
        v67 = v422;
      }
LABEL_71:
      if (*(_DWORD *)(v37 + 80))
      {
        v177 = *(_DWORD *)(v37 + 80);
        if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v37 + 16))
          goto LABEL_93;
      }
      v69 = *(int **)(v68 + 8);
      if ((v69 & 1) == 0)
      {
        if (!v69)
          goto LABEL_75;
LABEL_74:
        *v69 += 2;
        goto LABEL_75;
      }
      v69 = *JSC::JSRopeString::resolveRope(v68, 0, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
      if (v69)
        goto LABEL_74;
LABEL_75:
      if (v433 == -1)
        v432 = 1;
      ++v433;
      if (v436 != v35)
        goto LABEL_78;
      if (!HIDWORD(v428))
      {
        __break(0xC471u);
        JUMPOUT(0x198ADF644);
      }
      v107 = (char *)v427 + 32 * HIDWORD(v428) - 32;
      v108 = *((unsigned __int16 *)v107 + 12);
      if (v108 == 0xFFFF)
      {
LABEL_78:
        if (__CFADD__(v431, (_DWORD)v67))
          v430 = 1;
        else
          v431 += v67;
        v71 = (v67 & 0xFF00000000) != 0 && v435 != 0;
        v435 = v71;
        v439 = (WTF::StringImpl *)v69;
        v440.i64[0] = (uint64_t)v65;
        v440.i64[1] = v67;
        v441 = 0;
        if (HIDWORD(v428) != (_DWORD)v428)
        {
          v72 = (char *)v427 + 32 * HIDWORD(v428);
          v439 = 0;
          *(_QWORD *)v72 = v69;
          v73 = &v441;
          v28 = v440;
          *(int8x16_t *)(v72 + 8) = v440;
          v74 = (__int16 *)(v72 + 24);
          goto LABEL_88;
        }
        v122 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v427, (WTF::AtomStringImpl *)(HIDWORD(v428) + 1), (unint64_t)&v439, v23, v24, v25, v26, v27);
        if (v122)
        {
          v123 = (char *)v427 + 32 * HIDWORD(v428);
          v124 = *(_QWORD *)v122;
          *(_QWORD *)v122 = 0;
          *(_QWORD *)v123 = v124;
          v28 = *(int8x16_t *)(v122 + 8);
          *(int8x16_t *)(v123 + 8) = v28;
          v74 = (__int16 *)(v123 + 24);
          v73 = (__int16 *)(v122 + 24);
LABEL_88:
          v75 = 0;
          *v74 = *v73;
          ++HIDWORD(v428);
        }
        else
        {
          v75 = 1;
        }
        v434 |= v75;
        v76 = (unint64_t)v439;
        v439 = 0;
        if (!v76)
        {
LABEL_92:
          v436 = v35;
          goto LABEL_93;
        }
        if (*(_DWORD *)v76 != 2)
        {
          *(_DWORD *)v76 -= 2;
          goto LABEL_92;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v76, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
        v96 = *(_QWORD *)(StatusReg + 752);
        if (!v96)
        {
          pas_try_deallocate_slow_no_cache(v76, (uint64_t)&bmalloc_heap_config, 1);
          goto LABEL_92;
        }
        if (!(v76 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v76 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v76)) & 1) != 0)
        {
LABEL_115:
          v97 = *(unsigned int *)(v96 + 8000);
          if (v97 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v96, v76, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
          }
          else
          {
            *(_QWORD *)(v96 + 8 * v97) = v76 | 0x5000000000000;
            *(_DWORD *)(v96 + 8000) = v97 + 1;
          }
          goto LABEL_92;
        }
        if (v76 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v76 >> 24)
        {
          v23 = 0;
        }
        else
        {
          v23 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v76 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v76) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v23 == 1)
            goto LABEL_115;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v96, v76, 1, v23, v24, v25, v26, v27);
        goto LABEL_92;
      }
      *((_WORD *)v107 + 12) = v108 + 1;
      v109 = *((_DWORD *)v107 + 4);
      v110 = __CFADD__(v431, v109);
      v111 = v431 + v109;
      if (v110)
      {
        v430 = 1;
        if (!v69)
          goto LABEL_93;
      }
      else
      {
        v431 = v111;
        if (!v69)
          goto LABEL_93;
      }
      if (*v69 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v69, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
      }
      else
      {
        *v69 -= 2;
      }
LABEL_93:
      v77 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v77 + 80))
      {
        v175 = *(_DWORD *)(v77 + 80);
        if ((v175 & 0x27) != 0 && (v175 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v77 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v77 + 16))
        {
          v337 = 0;
          goto LABEL_420;
        }
      }
      if (++v32 == v31)
      {
        v30 = **(_QWORD **)(a1 + 16);
        goto LABEL_390;
      }
    }
    v139 = (char *)v427 + 32 * HIDWORD(v428);
    v439 = 0;
    *(_QWORD *)v139 = v132;
    v140 = &v441;
    v28 = v440;
    *(int8x16_t *)(v139 + 8) = v440;
    v141 = (__int16 *)(v139 + 24);
LABEL_166:
    v142 = 0;
    *v141 = *v140;
    ++HIDWORD(v428);
    goto LABEL_167;
  }
LABEL_390:
  if (v31 < v30)
  {
    v310 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v433 == -1)
        v432 = 1;
      ++v433;
      v439 = 0;
      v440.i64[0] = 0;
      v440.i64[1] = 0x100000000;
      v441 = 0;
      if (HIDWORD(v428) != (_DWORD)v428)
        break;
      v318 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v427, (WTF::AtomStringImpl *)(HIDWORD(v428) + 1), (unint64_t)&v439, v23, v24, v25, v26, v27);
      if (v318)
      {
        v319 = (char *)v427 + 32 * HIDWORD(v428);
        v320 = *(_QWORD *)v318;
        *(_QWORD *)v318 = 0;
        *(_QWORD *)v319 = v320;
        *(_OWORD *)(v319 + 8) = *(_OWORD *)(v318 + 8);
        v312 = (__int16 *)(v319 + 24);
        v313 = (__int16 *)(v318 + 24);
        goto LABEL_396;
      }
      v314 = 1;
LABEL_397:
      v434 |= v314;
      v315 = (unint64_t)v439;
      v439 = 0;
      if (v315)
      {
        if (*(_DWORD *)v315 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v315, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v316 = *(_QWORD *)(v310 + 752);
          if (v316)
          {
            if (!(v315 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v315 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v315)) & 1) != 0)
            {
LABEL_405:
              v317 = *(unsigned int *)(v316 + 8000);
              if (v317 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v316, v315, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v316 + 8 * v317) = v315 | 0x5000000000000;
                *(_DWORD *)(v316 + 8000) = v317 + 1;
              }
              goto LABEL_400;
            }
            if (v315 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v315 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v315 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v315) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_405;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v316, v315, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v315, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v315 -= 2;
        }
      }
LABEL_400:
      v436 = 0;
      if (++v31 >= **(_QWORD **)(a1 + 16))
        goto LABEL_417;
    }
    v311 = (char *)v427 + 32 * HIDWORD(v428);
    *(_QWORD *)v311 = 0;
    *(int8x16_t *)(v311 + 8) = v440;
    v312 = (__int16 *)(v311 + 24);
    v313 = &v441;
LABEL_396:
    v314 = 0;
    *v312 = *v313;
    ++HIDWORD(v428);
    goto LABEL_397;
  }
LABEL_417:
  if (v432)
  {
    __break(0xC471u);
    JUMPOUT(0x198ADF654);
  }
  v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
  if (v433 == 1)
  {
    v337 = v436;
    if (v436)
      goto LABEL_420;
    if (!HIDWORD(v428))
    {
      __break(0xC471u);
      JUMPOUT(0x198ADF71CLL);
    }
    v331 = *((_QWORD *)v21 + 7);
    v332 = *((unsigned int *)v427 + 4);
    v333 = *(int **)v427;
    if (*(_QWORD *)v427)
    {
      if ((_DWORD)v332 == v333[1])
      {
        *v333 += 2;
LABEL_451:
        v439 = (WTF::StringImpl *)v333;
        goto LABEL_452;
      }
    }
    else if (!(_DWORD)v332)
    {
      goto LABEL_451;
    }
    v359 = (_BYTE *)*((_QWORD *)v427 + 1);
    if (*((_BYTE *)v427 + 20))
    {
      if (v359)
      {
        if ((_DWORD)v332)
        {
          if ((v332 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198ADF72CLL);
          }
          v360 = (int *)WTF::fastCompactMalloc((WTF *)(v332 + 20));
          v361 = v360 + 5;
          *v360 = 2;
          v360[1] = v332;
          *((_QWORD *)v360 + 1) = v360 + 5;
          v360[4] = 4;
          if ((_DWORD)v332 == 1)
          {
            *v361 = *v359;
LABEL_544:
            v439 = (WTF::StringImpl *)v360;
LABEL_452:
            v337 = JSC::jsString(v331, (JSC::VM *)&v439, (uint64_t)v22, v23, v24, v25, v26, v27);
            v334 = v439;
            v439 = 0;
            if (v334)
            {
              if (*(_DWORD *)v334 == 2)
              {
                WTF::StringImpl::~StringImpl(v334, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v339, v340, v341, v342, v343, v344, v345, v346);
              }
              else
              {
                *(_DWORD *)v334 -= 2;
              }
            }
            goto LABEL_420;
          }
          v404 = v359;
          v405 = v332;
          goto LABEL_543;
        }
        goto LABEL_539;
      }
    }
    else if (v359)
    {
      if ((_DWORD)v332)
      {
        if (v332 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198ADF734);
        }
        v360 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v332 + 20));
        v361 = v360 + 5;
        *v360 = 2;
        v360[1] = v332;
        *((_QWORD *)v360 + 1) = v360 + 5;
        v360[4] = 0;
        if ((_DWORD)v332 == 1)
        {
          *(_WORD *)v361 = *(_WORD *)v359;
          goto LABEL_544;
        }
        v404 = v359;
        v405 = 2 * v332;
LABEL_543:
        memcpy(v361, v404, v405);
        goto LABEL_544;
      }
LABEL_539:
      v360 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_544;
    }
    v360 = 0;
    goto LABEL_544;
  }
  v337 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v425, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_420:
  if (HIDWORD(v428))
  {
    v321 = v427;
    v322 = 32 * HIDWORD(v428);
    v323 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v324 = *(_QWORD *)v321;
      *(_QWORD *)v321 = 0;
      if (v324)
      {
        if (*(_DWORD *)v324 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v324, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v325 = *(_QWORD *)(v323 + 752);
          if (v325)
          {
            if (!(v324 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v324 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v324)) & 1) != 0)
            {
LABEL_430:
              v326 = *(unsigned int *)(v325 + 8000);
              if (v326 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v325, v324, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v325 + 8 * v326) = v324 | 0x5000000000000;
                *(_DWORD *)(v325 + 8000) = v326 + 1;
              }
              goto LABEL_425;
            }
            if (v324 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v324 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v324 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v324) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_430;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v325, v324, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v324, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v324 -= 2;
        }
      }
LABEL_425:
      v321 = (WTF *)((char *)v321 + 32);
      v322 -= 32;
    }
    while (v322);
  }
  v327 = v427;
  v328 = v429 == (_BYTE *)v427;
LABEL_440:
  if (!v328 && v327 != 0)
  {
    v427 = 0;
    LODWORD(v428) = 0;
    WTF::fastFree((unint64_t)v327, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  }
  return v337;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::getIndexQuickly(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    a1 = (a1 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v2 = *(unsigned int *)(a1 + 4 * a2);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unsigned int v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  BOOL v50;
  char *v51;
  __int16 *v52;
  __int16 *v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int *v70;
  BOOL v72;
  char *v73;
  __int16 *v74;
  __int16 *v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int **v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  int *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  BOOL v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int32 v126;
  int v127;
  unsigned int v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  int v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  __int16 *v140;
  __int16 *v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  int v173;
  char v174;
  int v175;
  int v176;
  int v177;
  uint64_t (*v178)(WTF::StringImpl **);
  int **v179;
  int v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  __int16 *v209;
  __int16 *v210;
  char v211;
  WTF::StringImpl *v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::AtomStringImpl *v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  unsigned int v225;
  int **v226;
  uint64_t v227;
  unsigned int v228;
  int *v229;
  _BYTE *v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  int v233;
  int v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int v247;
  double *v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  WTF::StringImpl **v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  unsigned int *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  unint64_t v268;
  uint64_t v269;
  char *v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  WTF::StringImpl *v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char *v310;
  __int16 *v311;
  __int16 *v312;
  char v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  uint64_t v319;
  WTF *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  WTF *v326;
  BOOL v327;
  uint64_t v330;
  size_t v331;
  int *v332;
  WTF::StringImpl *v333;
  JSC::ArrayBuffer *v334;
  int v335;
  unint64_t v336;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _BYTE *v358;
  int *v359;
  _BYTE *v360;
  uint64_t v361;
  unint64_t i;
  char *v363;
  __int16 *v364;
  __int16 *v365;
  char v366;
  WTF::StringImpl *v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  char *v377;
  uint64_t v378;
  WTF *v379;
  uint64_t v380;
  WTF::StringImpl *v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  size_t v391;
  int *v392;
  WTF::StringImpl *v393;
  int v394;
  unint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  const void *v403;
  size_t v404;
  _BYTE *v405;
  int *v406;
  _BYTE *v407;
  uint64_t v408;
  const void *v409;
  size_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t StatusReg;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  WTF *v426;
  uint64_t v427;
  _BYTE v428[512];
  char v429;
  int v430;
  char v431;
  int v432;
  char v433;
  char v434;
  unint64_t v435;
  unint64_t v436;
  char v437;
  WTF::StringImpl *v438;
  int8x16_t v439;
  __int16 v440;
  uint64_t v441;

  v441 = *MEMORY[0x1E0C80C00];
  LOBYTE(v436) = 0;
  v437 = 0;
  v11 = **(_QWORD **)a1;
  if ((JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, &v436, a3, a4, a5, a6, a7, a8) & 1) != 0)goto LABEL_494;
  v19 = *(unsigned __int8 *)(v11 + 40);
  if ((v19 & 1) == 0)
  {
    v20 = *(_QWORD *)(v11 + 24);
    goto LABEL_4;
  }
  if (v19 == 88)
  {
LABEL_452:
    v334 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v11 + 8) - 8);
    goto LABEL_466;
  }
  if (v19 == 48 || v19 == 16)
  {
    v334 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v11, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    v346 = v19 - 90;
    if (v346 > 0x33)
    {
LABEL_494:
      v424 = a2;
      v425 = a3;
      v426 = (WTF *)v428;
      v427 = 16;
      v429 = 0;
      v430 = 0;
      v431 = 0;
      v432 = 0;
      v433 = 0;
      v434 = BYTE4(a3);
      v435 = 0;
      JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v424, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
      v361 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v361 + 80))
      {
        v394 = *(_DWORD *)(v361 + 80);
        if ((v394 & 0x27) != 0 && (v394 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v361 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v361 + 16))
        {
          v336 = 0;
          goto LABEL_514;
        }
      }
      if (**(_QWORD **)(a1 + 16))
      {
        for (i = 0; i < **(_QWORD **)(a1 + 16); ++i)
        {
          if (v432 == -1)
            v431 = 1;
          ++v432;
          v438 = 0;
          v439.i64[0] = 0;
          v439.i64[1] = 0x100000000;
          v440 = 0;
          if (HIDWORD(v427) == (_DWORD)v427)
          {
            v376 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
            if (!v376)
            {
              v366 = 1;
              goto LABEL_502;
            }
            v377 = (char *)v426 + 32 * HIDWORD(v427);
            v378 = *(_QWORD *)v376;
            *(_QWORD *)v376 = 0;
            *(_QWORD *)v377 = v378;
            *(_OWORD *)(v377 + 8) = *(_OWORD *)(v376 + 8);
            v364 = (__int16 *)(v377 + 24);
            v365 = (__int16 *)(v376 + 24);
          }
          else
          {
            v363 = (char *)v426 + 32 * HIDWORD(v427);
            *(_QWORD *)v363 = 0;
            *(int8x16_t *)(v363 + 8) = v439;
            v364 = (__int16 *)(v363 + 24);
            v365 = &v440;
          }
          v366 = 0;
          *v364 = *v365;
          ++HIDWORD(v427);
LABEL_502:
          v433 |= v366;
          v367 = v438;
          v438 = 0;
          if (v367)
          {
            if (*(_DWORD *)v367 == 2)
            {
              WTF::StringImpl::~StringImpl(v367, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
            }
            else
            {
              *(_DWORD *)v367 -= 2;
            }
          }
          v435 = 0;
        }
      }
      if (v431)
      {
        __break(0xC471u);
        JUMPOUT(0x198AE185CLL);
      }
      v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
      if (v432 != 1)
      {
        v336 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v424, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_514:
        if (HIDWORD(v427))
        {
          v379 = v426;
          v380 = 32 * HIDWORD(v427);
          do
          {
            v381 = *(WTF::StringImpl **)v379;
            *(_QWORD *)v379 = 0;
            if (v381)
            {
              if (*(_DWORD *)v381 == 2)
              {
                WTF::StringImpl::~StringImpl(v381, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
              }
              else
              {
                *(_DWORD *)v381 -= 2;
              }
            }
            v379 = (WTF *)((char *)v379 + 32);
            v380 -= 32;
          }
          while (v380);
        }
        v326 = v426;
        v327 = v428 == (_BYTE *)v426;
        goto LABEL_436;
      }
      v336 = v435;
      if (v435)
        goto LABEL_514;
      if (!HIDWORD(v427))
      {
        __break(0xC471u);
        JUMPOUT(0x198AE186CLL);
      }
      v390 = *((_QWORD *)v21 + 7);
      v391 = *((unsigned int *)v426 + 4);
      v392 = *(int **)v426;
      if (*(_QWORD *)v426)
      {
        if ((_DWORD)v391 == v392[1])
        {
          *v392 += 2;
LABEL_528:
          v438 = (WTF::StringImpl *)v392;
          goto LABEL_529;
        }
      }
      else if (!(_DWORD)v391)
      {
        goto LABEL_528;
      }
      v405 = (_BYTE *)*((_QWORD *)v426 + 1);
      if (*((_BYTE *)v426 + 20))
      {
        if (v405)
        {
          if ((_DWORD)v391)
          {
            if ((v391 & 0x80000000) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198AE1884);
            }
            v406 = (int *)WTF::fastCompactMalloc((WTF *)(v391 + 20));
            v407 = v406 + 5;
            *v406 = 2;
            v406[1] = v391;
            *((_QWORD *)v406 + 1) = v406 + 5;
            v406[4] = 4;
            if ((_DWORD)v391 == 1)
            {
              *v407 = *v405;
LABEL_567:
              v438 = (WTF::StringImpl *)v406;
LABEL_529:
              v336 = JSC::jsString(v390, (JSC::VM *)&v438, (uint64_t)v22, v23, v24, v25, v26, v27);
              v393 = v438;
              v438 = 0;
              if (v393)
              {
                if (*(_DWORD *)v393 == 2)
                {
                  WTF::StringImpl::~StringImpl(v393, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v395, v396, v397, v398, v399, v400, v401, v402);
                }
                else
                {
                  *(_DWORD *)v393 -= 2;
                }
              }
              goto LABEL_514;
            }
            v409 = v405;
            v410 = v391;
            goto LABEL_566;
          }
          goto LABEL_563;
        }
      }
      else if (v405)
      {
        if ((_DWORD)v391)
        {
          if (v391 > 0x7FFFFFEF)
          {
            __break(0xC471u);
LABEL_575:
            __break(1u);
LABEL_576:
            JUMPOUT(0x198AE177CLL);
          }
          v406 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v391 + 20));
          v407 = v406 + 5;
          *v406 = 2;
          v406[1] = v391;
          *((_QWORD *)v406 + 1) = v406 + 5;
          v406[4] = 0;
          if ((_DWORD)v391 == 1)
          {
            *(_WORD *)v407 = *(_WORD *)v405;
            goto LABEL_567;
          }
          v409 = v405;
          v410 = 2 * v391;
LABEL_566:
          memcpy(v407, v409, v410);
          goto LABEL_567;
        }
LABEL_563:
        v406 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_567;
      }
      v406 = 0;
      goto LABEL_567;
    }
    if (((1 << v346) & 0xF400000000000) == 0)
    {
      if (((1 << v346) & 0xF) == 0)
        goto LABEL_494;
      goto LABEL_452;
    }
    v334 = *(JSC::ArrayBuffer **)(v11 + 48);
  }
LABEL_466:
  if (!v334)
    goto LABEL_494;
  *(_DWORD *)v334 += 2;
  if (v437)
  {
    v347 = v436;
  }
  else
  {
    if (*((_BYTE *)v334 + 64) && (v408 = *((_QWORD *)v334 + 4)) != 0)
      v347 = atomic_load((unint64_t *)(v408 + 32));
    else
      v347 = *((_QWORD *)v334 + 6);
    v436 = v347;
    v437 = 1;
  }
  v348 = v347 - *(_QWORD *)(v11 + 32);
  if ((*(_BYTE *)(v11 + 5) - 42) > 7u)
    LOBYTE(v349) = 0;
  else
    v349 = qword_199158A40[(char)(*(_BYTE *)(v11 + 5) - 42)];
  v20 = v348 >> v349;
  v40 = *(_DWORD *)v334 == 2;
  *(_DWORD *)v334 -= 2;
  if (v40)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v334, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
  }
LABEL_4:
  v424 = a2;
  v425 = a3;
  v426 = (WTF *)v428;
  v427 = 16;
  v429 = 0;
  v430 = 0;
  v431 = 0;
  v432 = 0;
  v433 = 0;
  v434 = BYTE4(a3);
  v435 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v424, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
  v29 = **(_QWORD **)(a1 + 24);
  if (*(_DWORD *)(v29 + 80))
  {
    v335 = *(_DWORD *)(v29 + 80);
    if ((v335 & 0x27) != 0 && (v335 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v29 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v29 + 16))
    {
      v336 = 0;
      goto LABEL_416;
    }
  }
  v30 = **(_QWORD **)(a1 + 16);
  if (v20 >= v30)
    v31 = **(_QWORD **)(a1 + 16);
  else
    v31 = v20;
  if (v31)
  {
    v32 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v33 = *(_QWORD *)(**(_QWORD **)a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v34 = *(double *)(v33 + 8 * v32);
      *(double *)v28.i64 = v34;
      v35 = LODWORD(v34);
      v36 = *(_QWORD *)&v34 + 0x2000000000000;
      v37 = **(_QWORD **)(a1 + 8);
      v38 = *(_QWORD *)(v37 + 56);
      if (((*(_QWORD *)&v34 + 0x2000000000000) & 0xFFFE000000000002) == 0)
      {
        v39 = *(unsigned __int8 *)(*(_QWORD *)&v34 + 0x2000000000005);
        v40 = v34 != NAN && v39 == 2;
        v41 = v40;
        if (!v40)
          goto LABEL_49;
        v42 = *(_QWORD *)(*(_QWORD *)&v34 + 0x2000000000008);
        if ((v42 & 1) == 0)
        {
          if (v42)
          {
            v43 = *(unsigned int *)(v42 + 16);
            v44 = *(const char **)(v42 + 8);
            v42 = *(unsigned int *)(v42 + 4);
            v45 = (v43 >> 2) & 1;
          }
          else
          {
            v44 = 0;
            v45 = 1;
          }
          v46 = v422 & 0xFFFFFF0000000000 | v42 | (v45 << 32);
          v422 = v46;
          v47 = *(_QWORD *)&v34 + 0x2000000000000;
          goto LABEL_26;
        }
        if ((v42 & 2) == 0)
        {
          v119 = (unint64_t)*JSC::JSRopeString::resolveRope(*(_QWORD *)&v34 + 0x2000000000000, **(JSC::JSGlobalObject ***)(a1 + 8), (uint64_t)v22, v23, v28, v24, v25, v26, v27);
          if (v119)
          {
            v120 = *(unsigned int *)(v119 + 16);
            v44 = *(const char **)(v119 + 8);
            v119 = *(unsigned int *)(v119 + 4);
            v121 = (v120 >> 2) & 1;
          }
          else
          {
            v44 = 0;
            v121 = 1;
          }
          v46 = v416 & 0xFFFFFF0000000000 | v119 | (v121 << 32);
          v47 = v36;
          v416 = v46;
          goto LABEL_26;
        }
        v47 = *(_QWORD *)(*(_QWORD *)&v34 + 0x2000000000014) & 0xFFFFFFFFFLL;
        v88 = v420 & 0xFFFFFF0000000000;
        v89 = *(_QWORD *)(v47 + 8);
        if (v89)
        {
          v90 = *(unsigned int *)(v89 + 4);
          v91 = ((unint64_t)*(unsigned int *)(v89 + 16) >> 2) & 1;
          v420 = v88 | (v91 << 32) | v90;
          v92 = *(_QWORD *)(*(_QWORD *)&v34 + 0x2000000000018);
          v93 = v92 >> 16;
          if (v90 > (v92 >> 16))
          {
            v44 = *(const char **)(v89 + 8);
            v94 = *(_DWORD *)(*(_QWORD *)&v34 + 0x2000000000010);
            if ((int)v90 - (int)v93 > v94 || (v94 = v90 - v93, (_DWORD)v93))
            {
              v95 = (v92 >> 16);
              v46 = v94;
              v96 = v90 - v93;
              if ((_DWORD)v91)
              {
                if (v96 < v94)
                  goto LABEL_575;
                v44 += v95;
                v46 = v94 | 0x100000000;
              }
              else
              {
                if (v96 < v94)
                  goto LABEL_575;
                v44 += 2 * v95;
              }
            }
            else
            {
              v46 = v420;
            }
LABEL_26:
            if (*(_DWORD *)(v38 + 80))
            {
              v180 = *(_DWORD *)(v38 + 80);
              if ((v180 & 0x27) != 0 && (v180 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
              if (*(_QWORD *)(v38 + 16))
              {
                LOBYTE(v39) = 0;
                goto LABEL_49;
              }
            }
            v48 = *(WTF::StringImpl **)(v47 + 8);
            if ((v48 & 1) != 0)
            {
              v48 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v47, 0, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
              if (v48)
LABEL_29:
                *(_DWORD *)v48 += 2;
            }
            else if (v48)
            {
              goto LABEL_29;
            }
            if (v432 == -1)
              v431 = 1;
            ++v432;
            if (v435 == v36)
            {
              if (!HIDWORD(v427))
              {
                __break(0xC471u);
                JUMPOUT(0x198AE1794);
              }
              v115 = (char *)v426 + 32 * HIDWORD(v427) - 32;
              v116 = *((unsigned __int16 *)v115 + 12);
              if (v116 != 0xFFFF)
              {
                *((_WORD *)v115 + 12) = v116 + 1;
                v117 = *((_DWORD *)v115 + 4);
                v110 = __CFADD__(v430, v117);
                v118 = v430 + v117;
                if (v110)
                {
                  v429 = 1;
                  if (v48)
                    goto LABEL_143;
                }
                else
                {
                  v430 = v118;
                  if (v48)
                  {
LABEL_143:
                    if (*(_DWORD *)v48 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v48, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    }
                    else
                    {
                      *(_DWORD *)v48 -= 2;
                    }
                  }
                }
LABEL_48:
                LOBYTE(v39) = 1;
LABEL_49:
                v56 = v41 & v39;
                goto LABEL_50;
              }
            }
            if (__CFADD__(v430, (_DWORD)v46))
              v429 = 1;
            else
              v430 += v46;
            v50 = (v46 & 0xFF00000000) != 0 && v434 != 0;
            v434 = v50;
            v438 = v48;
            v439.i64[0] = (uint64_t)v44;
            v439.i64[1] = v46;
            v440 = 0;
            if (HIDWORD(v427) != (_DWORD)v427)
            {
              v51 = (char *)v426 + 32 * HIDWORD(v427);
              v438 = 0;
              *(_QWORD *)v51 = v48;
              v52 = &v440;
              v28 = v439;
              *(int8x16_t *)(v51 + 8) = v439;
              v53 = (__int16 *)(v51 + 24);
              goto LABEL_43;
            }
            v144 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
            if (v144)
            {
              v145 = (char *)v426 + 32 * HIDWORD(v427);
              v146 = *(_QWORD *)v144;
              *(_QWORD *)v144 = 0;
              *(_QWORD *)v145 = v146;
              v28 = *(int8x16_t *)(v144 + 8);
              *(int8x16_t *)(v145 + 8) = v28;
              v53 = (__int16 *)(v145 + 24);
              v52 = (__int16 *)(v144 + 24);
LABEL_43:
              v54 = 0;
              *v53 = *v52;
              ++HIDWORD(v427);
            }
            else
            {
              v54 = 1;
            }
            v433 |= v54;
            v55 = (unint64_t)v438;
            v438 = 0;
            if (!v55)
            {
LABEL_47:
              v435 = v36;
              goto LABEL_48;
            }
            if (*(_DWORD *)v55 != 2)
            {
              *(_DWORD *)v55 -= 2;
              goto LABEL_47;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v55, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
            v105 = *(_QWORD *)(StatusReg + 752);
            if (!v105)
            {
              pas_try_deallocate_slow_no_cache(v55, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_47;
            }
            if (!(v55 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v55 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v55)) & 1) != 0)
            {
LABEL_128:
              v106 = *(unsigned int *)(v105 + 8000);
              if (v106 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v105, v55, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v105 + 8 * v106) = v55 | 0x5000000000000;
                *(_DWORD *)(v105 + 8000) = v106 + 1;
              }
              goto LABEL_47;
            }
            if (v55 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v55 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v55 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v55) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_128;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v105, v55, 1, v23, v24, v25, v26, v27);
            goto LABEL_47;
          }
        }
        else
        {
          v420 = v88 | 0x100000000;
        }
        v46 = 0x100000000;
        v44 = "";
        goto LABEL_26;
      }
      if (v36 < 0xFFFE000000000000)
      {
        if (*(_QWORD *)&v34 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (fabs(v34) == INFINITY
            || (v225 = (int)v34, v34 != (double)(int)v34)
            || !v225 && (*(_QWORD *)&v34 & 0x8000000000000000) != 0)
          {
            v243 = v38 + 54512;
            v244 = (~(*(_QWORD *)&v34 << 32) + *(_QWORD *)&v34) ^ ((~(*(_QWORD *)&v34 << 32) + *(_QWORD *)&v34) >> 22);
            v245 = 9 * ((v244 + ~(v244 << 13)) ^ ((unint64_t)(v244 + ~(v244 << 13)) >> 8));
            v246 = (v245 ^ (v245 >> 15)) + ~((v245 ^ (v245 >> 15)) << 27);
            v247 = ((v246 >> 31) ^ v246);
            v248 = (double *)(v38 + 54512 + 24 * ((v246 >> 31) ^ v246));
            if (*v248 != v34
              || (v253 = v243 + 24 * v247, v254 = *(_QWORD *)(v253 + 8), v251 = (WTF::StringImpl **)(v253 + 8), !v254))
            {
              *v248 = v34;
              WTF::String::number(v34, (int **)&v438);
              v249 = v243 + 24 * v247;
              v252 = *(WTF::StringImpl **)(v249 + 8);
              v251 = (WTF::StringImpl **)(v249 + 8);
              v250 = v252;
              *v251 = v438;
              if (v252)
              {
                if (*(_DWORD *)v250 == 2)
                {
                  WTF::StringImpl::~StringImpl(v250, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
                }
                else
                {
                  *(_DWORD *)v250 -= 2;
                }
              }
              *(_QWORD *)(v243 + 24 * v247 + 16) = 0;
            }
            if (v432 == -1)
              v431 = 1;
            ++v432;
            v232 = *v251;
            if (*v251)
              v255 = *((_DWORD *)v232 + 1);
            else
              v255 = 0;
            v110 = __CFADD__(v430, v255);
            v256 = v430 + v255;
            if (v110)
              v429 = 1;
            else
              v430 = v256;
            v257 = v412 & 0xFFFFFF0000000000;
            if (v232)
            {
              v258 = *((_QWORD *)v232 + 1);
              v412 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v257;
              *(_DWORD *)v232 += 2;
            }
            else
            {
              v258 = 0;
              v412 = v257 | 0x100000000;
            }
            v438 = v232;
            v439.i64[0] = v258;
            v237 = v412;
          }
          else
          {
            if (v225 > 0xFF)
            {
              v259 = v38 + 48368;
              v260 = 9 * ((~(v225 << 15) + v225) ^ ((~(v225 << 15) + v225) >> 10));
              v261 = (v260 ^ (v260 >> 6)) + ~((v260 ^ (v260 >> 6)) << 11);
              v262 = (v261 ^ BYTE2(v261));
              v263 = (unsigned int *)(v38 + 48368 + 24 * (v261 ^ BYTE2(v261)));
              if (*v263 != v225
                || (v264 = v259 + 24 * v262, v265 = *(_QWORD *)(v264 + 8), v226 = (int **)(v264 + 8), !v265))
              {
                *v263 = v225;
                WTF::String::number((int)v34, (uint64_t *)&v438);
                v279 = v259 + 24 * v262;
                v280 = (int *)v438;
                v438 = 0;
                v282 = *(WTF::StringImpl **)(v279 + 8);
                v226 = (int **)(v279 + 8);
                v281 = v282;
                *v226 = v280;
                if (v282)
                {
                  if (*(_DWORD *)v281 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v281, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
                  }
                  else
                  {
                    *(_DWORD *)v281 -= 2;
                  }
                }
                v292 = v438;
                v438 = 0;
                if (v292)
                {
                  if (*(_DWORD *)v292 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v292, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v301, v302, v303, v304, v305, v306, v307, v308);
                  }
                  else
                  {
                    *(_DWORD *)v292 -= 2;
                  }
                }
                *(_QWORD *)(v259 + 24 * v262 + 16) = 0;
              }
            }
            else
            {
              v226 = (int **)(v38 + 16 * v225 + 44272);
              if (!*v226)
              {
                v227 = 0;
                do
                {
                  v228 = (v225 % 0xA) | 0x30;
                  v439.i8[v227-- + 4] = (v225 % 0xA) | 0x30;
                  v102 = v225 > 9;
                  v225 /= 0xAu;
                }
                while (v102);
                if (v227 + 14 >= 15)
                  goto LABEL_575;
                if (v227)
                {
                  if ((unint64_t)-v227 >> 31)
                  {
                    __break(0xC471u);
                    goto LABEL_576;
                  }
                  v229 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v227));
                  v230 = v229 + 5;
                  *v229 = 2;
                  v229[1] = -(int)v227;
                  *((_QWORD *)v229 + 1) = v229 + 5;
                  v229[4] = 4;
                  if (v227 == -1)
                    *v230 = v228;
                  else
                    memcpy(v230, &v439.u8[v227 + 5], -v227);
                }
                else
                {
                  v229 = &WTF::StringImpl::s_emptyAtomString;
                  WTF::StringImpl::s_emptyAtomString += 2;
                }
                v283 = (WTF::StringImpl *)*v226;
                *v226 = v229;
                if (v283)
                {
                  if (*(_DWORD *)v283 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v283, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v293, v294, v295, v296, v297, v298, v299, v300);
                  }
                  else
                  {
                    *(_DWORD *)v283 -= 2;
                  }
                }
              }
            }
            if (v432 == -1)
              v431 = 1;
            ++v432;
            v232 = (WTF::StringImpl *)*v226;
            if (*v226)
              v266 = *((_DWORD *)v232 + 1);
            else
              v266 = 0;
            v110 = __CFADD__(v430, v266);
            v267 = v430 + v266;
            if (v110)
              v429 = 1;
            else
              v430 = v267;
            v268 = v411 & 0xFFFFFF0000000000;
            if (v232)
            {
              v269 = *((_QWORD *)v232 + 1);
              v411 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v268;
              *(_DWORD *)v232 += 2;
            }
            else
            {
              v269 = 0;
              v411 = v268 | 0x100000000;
            }
            v438 = v232;
            v439.i64[0] = v269;
            v237 = v411;
          }
        }
        else if (v34 == NAN)
        {
          if (v432 == -1)
            v431 = 1;
          v231 = *(_QWORD *)(v38 + 41952);
          ++v432;
          v232 = *(WTF::StringImpl **)(v231 + 432);
          if (v232)
            v233 = *((_DWORD *)v232 + 1);
          else
            v233 = 0;
          v110 = __CFADD__(v430, v233);
          v234 = v430 + v233;
          if (v110)
            v429 = 1;
          else
            v430 = v234;
          v235 = v413 & 0xFFFFFF0000000000;
          if (v232)
          {
            v236 = *((_QWORD *)v232 + 1);
            v413 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v235;
            *(_DWORD *)v232 += 2;
          }
          else
          {
            v236 = 0;
            v413 = v235 | 0x100000000;
          }
          v438 = v232;
          v439.i64[0] = v236;
          v237 = v413;
        }
        else
        {
          if (v34 != NAN)
          {
            if (v432 == -1)
              v431 = 1;
            ++v432;
            v438 = 0;
            v439.i64[0] = 0;
            v415 = v415 & 0xFFFFFF0000000000 | 0x100000000;
            v439.i64[1] = v415;
            v440 = 0;
            if (HIDWORD(v427) != (_DWORD)v427)
            {
              v208 = (char *)v426 + 32 * HIDWORD(v427);
              *(_QWORD *)v208 = 0;
              v209 = &v440;
              v28 = v439;
              *(int8x16_t *)(v208 + 8) = v439;
              v210 = (__int16 *)(v208 + 24);
              goto LABEL_281;
            }
            v221 = (WTF::AtomStringImpl *)(HIDWORD(v427) + 1);
LABEL_293:
            v222 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, v221, (unint64_t)&v438, v23, v24, v25, v26, v27);
            if (v222)
            {
              v223 = (char *)v426 + 32 * HIDWORD(v427);
              v224 = *(_QWORD *)v222;
              *(_QWORD *)v222 = 0;
              *(_QWORD *)v223 = v224;
              v28 = *(int8x16_t *)(v222 + 8);
              *(int8x16_t *)(v223 + 8) = v28;
              v210 = (__int16 *)(v223 + 24);
              v209 = (__int16 *)(v222 + 24);
              goto LABEL_281;
            }
            v211 = 1;
LABEL_282:
            v433 |= v211;
            v212 = v438;
            v438 = 0;
            if (v212)
            {
              if (*(_DWORD *)v212 == 2)
              {
                WTF::StringImpl::~StringImpl(v212, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
              }
              else
              {
                *(_DWORD *)v212 -= 2;
              }
            }
            goto LABEL_168;
          }
          if (v432 == -1)
            v431 = 1;
          v238 = *(_QWORD *)(v38 + 41952);
          ++v432;
          v232 = *(WTF::StringImpl **)(v238 + 248);
          if (v232)
            v239 = *((_DWORD *)v232 + 1);
          else
            v239 = 0;
          v110 = __CFADD__(v430, v239);
          v240 = v430 + v239;
          if (v110)
            v429 = 1;
          else
            v430 = v240;
          v241 = v414 & 0xFFFFFF0000000000;
          if (v232)
          {
            v242 = *((_QWORD *)v232 + 1);
            v414 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v241;
            *(_DWORD *)v232 += 2;
          }
          else
          {
            v242 = 0;
            v414 = v241 | 0x100000000;
          }
          v438 = v232;
          v439.i64[0] = v242;
          v237 = v414;
        }
        v439.i64[1] = v237;
        v440 = 0;
        if (HIDWORD(v427) == (_DWORD)v427)
        {
          v221 = (WTF::AtomStringImpl *)(HIDWORD(v427) + 1);
          goto LABEL_293;
        }
        v270 = (char *)v426 + 32 * HIDWORD(v427);
        v438 = 0;
        *(_QWORD *)v270 = v232;
        v209 = &v440;
        v28 = v439;
        *(int8x16_t *)(v270 + 8) = v439;
        v210 = (__int16 *)(v270 + 24);
LABEL_281:
        v211 = 0;
        *v210 = *v209;
        ++HIDWORD(v427);
        goto LABEL_282;
      }
      if (v28.i32[0] > 0xFFu)
      {
        v125 = v38 + 48368;
        v126 = 9 * ((~(v28.i32[0] << 15) + v28.i32[0]) ^ ((~(v28.i32[0] << 15) + v28.i32[0]) >> 10));
        v127 = (v126 ^ (v126 >> 6)) + ~((v126 ^ (v126 >> 6)) << 11);
        v128 = (v127 ^ BYTE2(v127));
        v129 = (_DWORD *)(v38 + 48368 + 24 * (v127 ^ BYTE2(v127)));
        if (*v129 != v28.i32[0]
          || (v130 = v125 + 24 * v128, v131 = *(_QWORD *)(v130 + 8), v99 = (int **)(v130 + 8), !v131))
        {
          *v129 = v28.i32[0];
          WTF::String::number(*(unint64_t *)&v34, (uint64_t *)&v438);
          v168 = v125 + 24 * v128;
          v169 = (int *)v438;
          v438 = 0;
          v171 = *(WTF::StringImpl **)(v168 + 8);
          v99 = (int **)(v168 + 8);
          v170 = v171;
          *v99 = v169;
          if (v171)
          {
            if (*(_DWORD *)v170 == 2)
            {
              WTF::StringImpl::~StringImpl(v170, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
            }
            else
            {
              *(_DWORD *)v170 -= 2;
            }
          }
          v172 = v438;
          v438 = 0;
          if (v172)
          {
            if (*(_DWORD *)v172 == 2)
            {
              WTF::StringImpl::~StringImpl(v172, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
            }
            else
            {
              *(_DWORD *)v172 -= 2;
            }
          }
          *(_QWORD *)(v125 + 24 * v128 + 16) = 0;
        }
      }
      else
      {
        v99 = (int **)(v38 + 16 * v28.u32[0] + 44272);
        if (!*v99)
        {
          v100 = 0;
          do
          {
            v101 = (v35 % 0xA) | 0x30;
            v439.i8[v100-- + 4] = (v35 % 0xA) | 0x30;
            v102 = v35 > 9;
            v35 /= 0xAu;
          }
          while (v102);
          if (v100 + 14 >= 15)
            goto LABEL_575;
          if (v100)
          {
            if ((unint64_t)-v100 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198AE1784);
            }
            v103 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v100));
            v104 = v103 + 5;
            *v103 = 2;
            v103[1] = -(int)v100;
            *((_QWORD *)v103 + 1) = v103 + 5;
            v103[4] = 4;
            if (v100 == -1)
              *v104 = v101;
            else
              memcpy(v104, &v439.u8[v100 + 5], -v100);
          }
          else
          {
            v103 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          v181 = (WTF::StringImpl *)*v99;
          *v99 = v103;
          if (v181)
          {
            if (*(_DWORD *)v181 == 2)
            {
              WTF::StringImpl::~StringImpl(v181, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
            }
            else
            {
              *(_DWORD *)v181 -= 2;
            }
          }
        }
      }
      if (v432 == -1)
        v431 = 1;
      ++v432;
      v132 = (WTF::StringImpl *)*v99;
      v133 = *v99 ? *((_DWORD *)v132 + 1) : 0;
      v110 = __CFADD__(v430, v133);
      v134 = v430 + v133;
      if (v110)
        v429 = 1;
      else
        v430 = v134;
      v135 = v418 & 0xFFFFFF0000000000;
      if (v132)
      {
        v136 = *((_QWORD *)v132 + 1);
        v137 = *((unsigned int *)v132 + 1) | ((unint64_t)((*((_DWORD *)v132 + 4) >> 2) & 1) << 32) | v135;
        *(_DWORD *)v132 += 2;
        v138 = v137;
      }
      else
      {
        v136 = 0;
        v138 = v135 | 0x100000000;
      }
      v438 = v132;
      v439.i64[0] = v136;
      v418 = v138;
      v439.i64[1] = v138;
      v440 = 0;
      if (HIDWORD(v427) != (_DWORD)v427)
        break;
      v165 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
      if (v165)
      {
        v166 = (char *)v426 + 32 * HIDWORD(v427);
        v167 = *(_QWORD *)v165;
        *(_QWORD *)v165 = 0;
        *(_QWORD *)v166 = v167;
        v28 = *(int8x16_t *)(v165 + 8);
        *(int8x16_t *)(v166 + 8) = v28;
        v141 = (__int16 *)(v166 + 24);
        v140 = (__int16 *)(v165 + 24);
        goto LABEL_164;
      }
      v142 = 1;
LABEL_165:
      v433 |= v142;
      v143 = (unint64_t)v438;
      v438 = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v143, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v147 = *(_QWORD *)(StatusReg + 752);
          if (v147)
          {
            if (!(v143 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v143 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v143)) & 1) != 0)
            {
LABEL_176:
              v148 = *(unsigned int *)(v147 + 8000);
              if (v148 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v147, v143, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v147 + 8 * v148) = v143 | 0x5000000000000;
                *(_DWORD *)(v147 + 8000) = v148 + 1;
              }
              goto LABEL_168;
            }
            if (v143 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v143 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v143 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v143) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_176;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v147, v143, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v143, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v143 -= 2;
        }
      }
LABEL_168:
      v435 = 0;
      v56 = 1;
LABEL_50:
      if (*(_DWORD *)(v38 + 80))
      {
        v173 = *(_DWORD *)(v38 + 80);
        if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v38 + 16))
          v174 = 1;
        else
          v174 = v56;
        if ((v174 & 1) != 0)
          goto LABEL_91;
      }
      else if ((v56 & 1) != 0)
      {
        goto LABEL_91;
      }
      v57 = *(_QWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x40);
      if (v57)
      {
        if (*(_BYTE *)(v57 + 5) != 1)
        {
          v58 = *(_QWORD *)(v57 + 64);
          if (v58)
          {
            if ((*(_QWORD *)(v58 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v59 = *(_QWORD *)(v58 + 40);
              if (v59 == 1)
                v60 = 0;
              else
                v60 = v59;
              v61 = *(_QWORD *)(v37 + 512);
              if ((v61 & 1) != 0)
              {
                v178 = *(uint64_t (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
                v179 = (int **)(v37 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v37 & 8) != 0)
                  v179 = (int **)(v37 - 16);
                v438 = (WTF::StringImpl *)*v179;
                v439.i64[0] = v37;
                v439.i64[1] = v37 + 512;
                v61 = v178(&v438);
              }
              if (v60 == v61)
              {
                v206 = *(_QWORD *)(v57 + 64);
                if (v206)
                {
                  v207 = *(_QWORD *)(v206 + 16);
                  if (v207 >= 2)
                  {
                    v36 = v207;
                    goto LABEL_64;
                  }
                }
              }
            }
          }
        }
      }
      v62 = *(unsigned __int8 *)(v36 + 5);
      if (v62 < 0x17)
      {
        if (v62 == 2)
          goto LABEL_64;
        v63 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v36, (JSC::JSGlobalObject *)v37, (uint64_t)v22, v23, v24, v25, v26, v27);
      }
      else
      {
        v63 = JSC::JSObject::toString((JSC::JSObject *)v36, (JSC::JSGlobalObject *)v37, v22, v23, v24, v25, v26, v27);
      }
      v36 = v63;
LABEL_64:
      if (*(_DWORD *)(v38 + 80))
      {
        v176 = *(_DWORD *)(v38 + 80);
        if ((v176 & 0x27) != 0 && (v176 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v38 + 16))
          goto LABEL_91;
      }
      v64 = *(_QWORD *)(v36 + 8);
      if ((v64 & 1) == 0)
      {
        if (v64)
        {
          v65 = *(unsigned int *)(v64 + 16);
          v66 = *(const char **)(v64 + 8);
          v64 = *(unsigned int *)(v64 + 4);
          v67 = (v65 >> 2) & 1;
        }
        else
        {
          v66 = 0;
          v67 = 1;
        }
        v68 = v423 & 0xFFFFFF0000000000 | v64 | (v67 << 32);
        v423 = v68;
        v69 = v36;
        goto LABEL_69;
      }
      if ((v64 & 2) == 0)
      {
        v112 = (unint64_t)*JSC::JSRopeString::resolveRope(v36, (JSC::JSGlobalObject *)v37, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
        if (v112)
        {
          v113 = *(unsigned int *)(v112 + 16);
          v66 = *(const char **)(v112 + 8);
          v112 = *(unsigned int *)(v112 + 4);
          v114 = (v113 >> 2) & 1;
        }
        else
        {
          v66 = 0;
          v114 = 1;
        }
        v68 = v417 & 0xFFFFFF0000000000 | v112 | (v114 << 32);
        v69 = v36;
        v417 = v68;
        goto LABEL_69;
      }
      v69 = *(_QWORD *)(v36 + 20) & 0xFFFFFFFFFLL;
      v79 = v421 & 0xFFFFFF0000000000;
      v80 = *(_QWORD *)(v69 + 8);
      if (!v80)
      {
        v421 = v79 | 0x100000000;
LABEL_188:
        v68 = 0x100000000;
        v66 = "";
        goto LABEL_69;
      }
      v81 = *(unsigned int *)(v80 + 4);
      v82 = ((unint64_t)*(unsigned int *)(v80 + 16) >> 2) & 1;
      v421 = v79 | (v82 << 32) | v81;
      v83 = *(_QWORD *)(v36 + 24);
      v84 = v83 >> 16;
      if (v81 <= (v83 >> 16))
        goto LABEL_188;
      v66 = *(const char **)(v80 + 8);
      v85 = *(_DWORD *)(v36 + 16);
      if ((int)v81 - (int)v84 > v85 || (v85 = v81 - v84, (_DWORD)v84))
      {
        v86 = (v83 >> 16);
        v68 = v85;
        v87 = v81 - v84;
        if ((_DWORD)v82)
        {
          if (v87 < v85)
            goto LABEL_575;
          v66 += v86;
          v68 = v85 | 0x100000000;
        }
        else
        {
          if (v87 < v85)
            goto LABEL_575;
          v66 += 2 * v86;
        }
      }
      else
      {
        v68 = v421;
      }
LABEL_69:
      if (*(_DWORD *)(v38 + 80))
      {
        v177 = *(_DWORD *)(v38 + 80);
        if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v38 + 16))
          goto LABEL_91;
      }
      v70 = *(int **)(v69 + 8);
      if ((v70 & 1) == 0)
      {
        if (!v70)
          goto LABEL_73;
LABEL_72:
        *v70 += 2;
        goto LABEL_73;
      }
      v70 = *JSC::JSRopeString::resolveRope(v69, 0, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
      if (v70)
        goto LABEL_72;
LABEL_73:
      if (v432 == -1)
        v431 = 1;
      ++v432;
      if (v435 != v36)
        goto LABEL_76;
      if (!HIDWORD(v427))
      {
        __break(0xC471u);
        JUMPOUT(0x198AE178CLL);
      }
      v107 = (char *)v426 + 32 * HIDWORD(v427) - 32;
      v108 = *((unsigned __int16 *)v107 + 12);
      if (v108 == 0xFFFF)
      {
LABEL_76:
        if (__CFADD__(v430, (_DWORD)v68))
          v429 = 1;
        else
          v430 += v68;
        v72 = (v68 & 0xFF00000000) != 0 && v434 != 0;
        v434 = v72;
        v438 = (WTF::StringImpl *)v70;
        v439.i64[0] = (uint64_t)v66;
        v439.i64[1] = v68;
        v440 = 0;
        if (HIDWORD(v427) != (_DWORD)v427)
        {
          v73 = (char *)v426 + 32 * HIDWORD(v427);
          v438 = 0;
          *(_QWORD *)v73 = v70;
          v74 = &v440;
          v28.i64[1] = v439.i64[1];
          *(int8x16_t *)(v73 + 8) = v439;
          v75 = (__int16 *)(v73 + 24);
          goto LABEL_86;
        }
        v122 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
        if (v122)
        {
          v123 = (char *)v426 + 32 * HIDWORD(v427);
          v124 = *(_QWORD *)v122;
          *(_QWORD *)v122 = 0;
          *(_QWORD *)v123 = v124;
          v28 = *(int8x16_t *)(v122 + 8);
          *(int8x16_t *)(v123 + 8) = v28;
          v75 = (__int16 *)(v123 + 24);
          v74 = (__int16 *)(v122 + 24);
LABEL_86:
          v76 = 0;
          *v75 = *v74;
          ++HIDWORD(v427);
        }
        else
        {
          v76 = 1;
        }
        v433 |= v76;
        v77 = (unint64_t)v438;
        v438 = 0;
        if (!v77)
        {
LABEL_90:
          v435 = v36;
          goto LABEL_91;
        }
        if (*(_DWORD *)v77 != 2)
        {
          *(_DWORD *)v77 -= 2;
          goto LABEL_90;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v77, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
        v97 = *(_QWORD *)(StatusReg + 752);
        if (!v97)
        {
          pas_try_deallocate_slow_no_cache(v77, (uint64_t)&bmalloc_heap_config, 1);
          goto LABEL_90;
        }
        if (!(v77 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v77 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v77)) & 1) != 0)
        {
LABEL_113:
          v98 = *(unsigned int *)(v97 + 8000);
          if (v98 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v97, v77, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
          }
          else
          {
            *(_QWORD *)(v97 + 8 * v98) = v77 | 0x5000000000000;
            *(_DWORD *)(v97 + 8000) = v98 + 1;
          }
          goto LABEL_90;
        }
        if (v77 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v77 >> 24)
        {
          v23 = 0;
        }
        else
        {
          v23 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v77 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v77) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v23 == 1)
            goto LABEL_113;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v97, v77, 1, v23, v24, v25, v26, v27);
        goto LABEL_90;
      }
      *((_WORD *)v107 + 12) = v108 + 1;
      v109 = *((_DWORD *)v107 + 4);
      v110 = __CFADD__(v430, v109);
      v111 = v430 + v109;
      if (v110)
      {
        v429 = 1;
        if (!v70)
          goto LABEL_91;
      }
      else
      {
        v430 = v111;
        if (!v70)
          goto LABEL_91;
      }
      if (*v70 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v70, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
      }
      else
      {
        *v70 -= 2;
      }
LABEL_91:
      v78 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v78 + 80))
      {
        v175 = *(_DWORD *)(v78 + 80);
        if ((v175 & 0x27) != 0 && (v175 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v78 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v78 + 16))
        {
          v336 = 0;
          goto LABEL_416;
        }
      }
      if (++v32 == v31)
      {
        v30 = **(_QWORD **)(a1 + 16);
        goto LABEL_386;
      }
    }
    v139 = (char *)v426 + 32 * HIDWORD(v427);
    v438 = 0;
    *(_QWORD *)v139 = v132;
    v140 = &v440;
    v28 = v439;
    *(int8x16_t *)(v139 + 8) = v439;
    v141 = (__int16 *)(v139 + 24);
LABEL_164:
    v142 = 0;
    *v141 = *v140;
    ++HIDWORD(v427);
    goto LABEL_165;
  }
LABEL_386:
  if (v31 < v30)
  {
    v309 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v432 == -1)
        v431 = 1;
      ++v432;
      v438 = 0;
      v439.i64[0] = 0;
      v439.i64[1] = 0x100000000;
      v440 = 0;
      if (HIDWORD(v427) != (_DWORD)v427)
        break;
      v317 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
      if (v317)
      {
        v318 = (char *)v426 + 32 * HIDWORD(v427);
        v319 = *(_QWORD *)v317;
        *(_QWORD *)v317 = 0;
        *(_QWORD *)v318 = v319;
        *(_OWORD *)(v318 + 8) = *(_OWORD *)(v317 + 8);
        v311 = (__int16 *)(v318 + 24);
        v312 = (__int16 *)(v317 + 24);
        goto LABEL_392;
      }
      v313 = 1;
LABEL_393:
      v433 |= v313;
      v314 = (unint64_t)v438;
      v438 = 0;
      if (v314)
      {
        if (*(_DWORD *)v314 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v314, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v315 = *(_QWORD *)(v309 + 752);
          if (v315)
          {
            if (!(v314 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v314 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v314)) & 1) != 0)
            {
LABEL_401:
              v316 = *(unsigned int *)(v315 + 8000);
              if (v316 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v315, v314, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v315 + 8 * v316) = v314 | 0x5000000000000;
                *(_DWORD *)(v315 + 8000) = v316 + 1;
              }
              goto LABEL_396;
            }
            if (v314 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v314 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v314 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v314) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_401;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v315, v314, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v314, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v314 -= 2;
        }
      }
LABEL_396:
      v435 = 0;
      if (++v31 >= **(_QWORD **)(a1 + 16))
        goto LABEL_413;
    }
    v310 = (char *)v426 + 32 * HIDWORD(v427);
    *(_QWORD *)v310 = 0;
    *(int8x16_t *)(v310 + 8) = v439;
    v311 = (__int16 *)(v310 + 24);
    v312 = &v440;
LABEL_392:
    v313 = 0;
    *v311 = *v312;
    ++HIDWORD(v427);
    goto LABEL_393;
  }
LABEL_413:
  if (v431)
  {
    __break(0xC471u);
    JUMPOUT(0x198AE179CLL);
  }
  v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
  if (v432 == 1)
  {
    v336 = v435;
    if (v435)
      goto LABEL_416;
    if (!HIDWORD(v427))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE1864);
    }
    v330 = *((_QWORD *)v21 + 7);
    v331 = *((unsigned int *)v426 + 4);
    v332 = *(int **)v426;
    if (*(_QWORD *)v426)
    {
      if ((_DWORD)v331 == v332[1])
      {
        *v332 += 2;
LABEL_447:
        v438 = (WTF::StringImpl *)v332;
        goto LABEL_448;
      }
    }
    else if (!(_DWORD)v331)
    {
      goto LABEL_447;
    }
    v358 = (_BYTE *)*((_QWORD *)v426 + 1);
    if (*((_BYTE *)v426 + 20))
    {
      if (v358)
      {
        if ((_DWORD)v331)
        {
          if ((v331 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE1874);
          }
          v359 = (int *)WTF::fastCompactMalloc((WTF *)(v331 + 20));
          v360 = v359 + 5;
          *v359 = 2;
          v359[1] = v331;
          *((_QWORD *)v359 + 1) = v359 + 5;
          v359[4] = 4;
          if ((_DWORD)v331 == 1)
          {
            *v360 = *v358;
LABEL_540:
            v438 = (WTF::StringImpl *)v359;
LABEL_448:
            v336 = JSC::jsString(v330, (JSC::VM *)&v438, (uint64_t)v22, v23, v24, v25, v26, v27);
            v333 = v438;
            v438 = 0;
            if (v333)
            {
              if (*(_DWORD *)v333 == 2)
              {
                WTF::StringImpl::~StringImpl(v333, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v338, v339, v340, v341, v342, v343, v344, v345);
              }
              else
              {
                *(_DWORD *)v333 -= 2;
              }
            }
            goto LABEL_416;
          }
          v403 = v358;
          v404 = v331;
          goto LABEL_539;
        }
        goto LABEL_535;
      }
    }
    else if (v358)
    {
      if ((_DWORD)v331)
      {
        if (v331 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198AE187CLL);
        }
        v359 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v331 + 20));
        v360 = v359 + 5;
        *v359 = 2;
        v359[1] = v331;
        *((_QWORD *)v359 + 1) = v359 + 5;
        v359[4] = 0;
        if ((_DWORD)v331 == 1)
        {
          *(_WORD *)v360 = *(_WORD *)v358;
          goto LABEL_540;
        }
        v403 = v358;
        v404 = 2 * v331;
LABEL_539:
        memcpy(v360, v403, v404);
        goto LABEL_540;
      }
LABEL_535:
      v359 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_540;
    }
    v359 = 0;
    goto LABEL_540;
  }
  v336 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v424, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_416:
  if (HIDWORD(v427))
  {
    v320 = v426;
    v321 = 32 * HIDWORD(v427);
    v322 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v323 = *(_QWORD *)v320;
      *(_QWORD *)v320 = 0;
      if (v323)
      {
        if (*(_DWORD *)v323 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v323, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v324 = *(_QWORD *)(v322 + 752);
          if (v324)
          {
            if (!(v323 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v323 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v323)) & 1) != 0)
            {
LABEL_426:
              v325 = *(unsigned int *)(v324 + 8000);
              if (v325 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v324, v323, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v324 + 8 * v325) = v323 | 0x5000000000000;
                *(_DWORD *)(v324 + 8000) = v325 + 1;
              }
              goto LABEL_421;
            }
            if (v323 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v323 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v323 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v323) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_426;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v324, v323, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v323, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v323 -= 2;
        }
      }
LABEL_421:
      v320 = (WTF *)((char *)v320 + 32);
      v321 -= 32;
    }
    while (v321);
  }
  v326 = v426;
  v327 = v428 == (_BYTE *)v426;
LABEL_436:
  if (!v327 && v326 != 0)
  {
    v426 = 0;
    LODWORD(v427) = 0;
    WTF::fastFree((unint64_t)v326, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  }
  return v336;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  BOOL v48;
  char *v49;
  __int16 *v50;
  __int16 *v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int *v68;
  BOOL v70;
  char *v71;
  __int16 *v72;
  __int16 *v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int **v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  BOOL v101;
  int *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int v107;
  int v108;
  BOOL v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  int v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  __int16 *v139;
  __int16 *v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  int v172;
  char v173;
  int v174;
  int v175;
  int v176;
  uint64_t (*v177)(WTF::StringImpl **);
  int **v178;
  int v179;
  WTF::StringImpl *v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  double v207;
  char *v208;
  __int16 *v209;
  __int16 *v210;
  char v211;
  WTF::StringImpl *v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::AtomStringImpl *v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  unint64_t v225;
  int **v226;
  uint64_t v227;
  unsigned int v228;
  int *v229;
  _BYTE *v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  int v233;
  int v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int v247;
  double *v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  WTF::StringImpl **v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  _DWORD *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  unint64_t v268;
  uint64_t v269;
  char *v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  WTF::StringImpl *v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char *v310;
  __int16 *v311;
  __int16 *v312;
  char v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  uint64_t v319;
  WTF *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  WTF *v326;
  BOOL v327;
  uint64_t v330;
  size_t v331;
  int *v332;
  WTF::StringImpl *v333;
  JSC::ArrayBuffer *v334;
  int v335;
  unint64_t v336;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _BYTE *v358;
  int *v359;
  _BYTE *v360;
  uint64_t v361;
  unint64_t i;
  char *v363;
  __int16 *v364;
  __int16 *v365;
  char v366;
  WTF::StringImpl *v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  char *v377;
  uint64_t v378;
  WTF *v379;
  uint64_t v380;
  WTF::StringImpl *v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  size_t v391;
  int *v392;
  WTF::StringImpl *v393;
  int v394;
  unint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  const void *v403;
  size_t v404;
  _BYTE *v405;
  int *v406;
  _BYTE *v407;
  uint64_t v408;
  const void *v409;
  size_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t StatusReg;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  WTF *v426;
  uint64_t v427;
  _BYTE v428[512];
  char v429;
  int v430;
  char v431;
  int v432;
  char v433;
  char v434;
  unint64_t v435;
  unint64_t v436;
  char v437;
  WTF::StringImpl *v438;
  int8x16_t v439;
  __int16 v440;
  uint64_t v441;

  v441 = *MEMORY[0x1E0C80C00];
  LOBYTE(v436) = 0;
  v437 = 0;
  v11 = **(_QWORD **)a1;
  if ((JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, &v436, a3, a4, a5, a6, a7, a8) & 1) != 0)goto LABEL_494;
  v19 = *(unsigned __int8 *)(v11 + 40);
  if ((v19 & 1) == 0)
  {
    v20 = *(_QWORD *)(v11 + 24);
    goto LABEL_4;
  }
  if (v19 == 88)
  {
LABEL_452:
    v334 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v11 + 8) - 8);
    goto LABEL_466;
  }
  if (v19 == 48 || v19 == 16)
  {
    v334 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v11, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    v346 = v19 - 90;
    if (v346 > 0x33)
    {
LABEL_494:
      v424 = a2;
      v425 = a3;
      v426 = (WTF *)v428;
      v427 = 16;
      v429 = 0;
      v430 = 0;
      v431 = 0;
      v432 = 0;
      v433 = 0;
      v434 = BYTE4(a3);
      v435 = 0;
      JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v424, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
      v361 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v361 + 80))
      {
        v394 = *(_DWORD *)(v361 + 80);
        if ((v394 & 0x27) != 0 && (v394 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v361 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v361 + 16))
        {
          v336 = 0;
          goto LABEL_514;
        }
      }
      if (**(_QWORD **)(a1 + 16))
      {
        for (i = 0; i < **(_QWORD **)(a1 + 16); ++i)
        {
          if (v432 == -1)
            v431 = 1;
          ++v432;
          v438 = 0;
          v439.i64[0] = 0;
          v439.i64[1] = 0x100000000;
          v440 = 0;
          if (HIDWORD(v427) == (_DWORD)v427)
          {
            v376 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
            if (!v376)
            {
              v366 = 1;
              goto LABEL_502;
            }
            v377 = (char *)v426 + 32 * HIDWORD(v427);
            v378 = *(_QWORD *)v376;
            *(_QWORD *)v376 = 0;
            *(_QWORD *)v377 = v378;
            *(_OWORD *)(v377 + 8) = *(_OWORD *)(v376 + 8);
            v364 = (__int16 *)(v377 + 24);
            v365 = (__int16 *)(v376 + 24);
          }
          else
          {
            v363 = (char *)v426 + 32 * HIDWORD(v427);
            *(_QWORD *)v363 = 0;
            *(int8x16_t *)(v363 + 8) = v439;
            v364 = (__int16 *)(v363 + 24);
            v365 = &v440;
          }
          v366 = 0;
          *v364 = *v365;
          ++HIDWORD(v427);
LABEL_502:
          v433 |= v366;
          v367 = v438;
          v438 = 0;
          if (v367)
          {
            if (*(_DWORD *)v367 == 2)
            {
              WTF::StringImpl::~StringImpl(v367, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
            }
            else
            {
              *(_DWORD *)v367 -= 2;
            }
          }
          v435 = 0;
        }
      }
      if (v431)
      {
        __break(0xC471u);
        JUMPOUT(0x198AE393CLL);
      }
      v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
      if (v432 != 1)
      {
        v336 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v424, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_514:
        if (HIDWORD(v427))
        {
          v379 = v426;
          v380 = 32 * HIDWORD(v427);
          do
          {
            v381 = *(WTF::StringImpl **)v379;
            *(_QWORD *)v379 = 0;
            if (v381)
            {
              if (*(_DWORD *)v381 == 2)
              {
                WTF::StringImpl::~StringImpl(v381, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
              }
              else
              {
                *(_DWORD *)v381 -= 2;
              }
            }
            v379 = (WTF *)((char *)v379 + 32);
            v380 -= 32;
          }
          while (v380);
        }
        v326 = v426;
        v327 = v428 == (_BYTE *)v426;
        goto LABEL_436;
      }
      v336 = v435;
      if (v435)
        goto LABEL_514;
      if (!HIDWORD(v427))
      {
        __break(0xC471u);
        JUMPOUT(0x198AE394CLL);
      }
      v390 = *((_QWORD *)v21 + 7);
      v391 = *((unsigned int *)v426 + 4);
      v392 = *(int **)v426;
      if (*(_QWORD *)v426)
      {
        if ((_DWORD)v391 == v392[1])
        {
          *v392 += 2;
LABEL_528:
          v438 = (WTF::StringImpl *)v392;
          goto LABEL_529;
        }
      }
      else if (!(_DWORD)v391)
      {
        goto LABEL_528;
      }
      v405 = (_BYTE *)*((_QWORD *)v426 + 1);
      if (*((_BYTE *)v426 + 20))
      {
        if (v405)
        {
          if ((_DWORD)v391)
          {
            if ((v391 & 0x80000000) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198AE3964);
            }
            v406 = (int *)WTF::fastCompactMalloc((WTF *)(v391 + 20));
            v407 = v406 + 5;
            *v406 = 2;
            v406[1] = v391;
            *((_QWORD *)v406 + 1) = v406 + 5;
            v406[4] = 4;
            if ((_DWORD)v391 == 1)
            {
              *v407 = *v405;
LABEL_567:
              v438 = (WTF::StringImpl *)v406;
LABEL_529:
              v336 = JSC::jsString(v390, (JSC::VM *)&v438, (uint64_t)v22, v23, v24, v25, v26, v27);
              v393 = v438;
              v438 = 0;
              if (v393)
              {
                if (*(_DWORD *)v393 == 2)
                {
                  WTF::StringImpl::~StringImpl(v393, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v395, v396, v397, v398, v399, v400, v401, v402);
                }
                else
                {
                  *(_DWORD *)v393 -= 2;
                }
              }
              goto LABEL_514;
            }
            v409 = v405;
            v410 = v391;
            goto LABEL_566;
          }
          goto LABEL_563;
        }
      }
      else if (v405)
      {
        if ((_DWORD)v391)
        {
          if (v391 > 0x7FFFFFEF)
          {
            __break(0xC471u);
LABEL_575:
            __break(1u);
LABEL_576:
            JUMPOUT(0x198AE385CLL);
          }
          v406 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v391 + 20));
          v407 = v406 + 5;
          *v406 = 2;
          v406[1] = v391;
          *((_QWORD *)v406 + 1) = v406 + 5;
          v406[4] = 0;
          if ((_DWORD)v391 == 1)
          {
            *(_WORD *)v407 = *(_WORD *)v405;
            goto LABEL_567;
          }
          v409 = v405;
          v410 = 2 * v391;
LABEL_566:
          memcpy(v407, v409, v410);
          goto LABEL_567;
        }
LABEL_563:
        v406 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_567;
      }
      v406 = 0;
      goto LABEL_567;
    }
    if (((1 << v346) & 0xF400000000000) == 0)
    {
      if (((1 << v346) & 0xF) == 0)
        goto LABEL_494;
      goto LABEL_452;
    }
    v334 = *(JSC::ArrayBuffer **)(v11 + 48);
  }
LABEL_466:
  if (!v334)
    goto LABEL_494;
  *(_DWORD *)v334 += 2;
  if (v437)
  {
    v347 = v436;
  }
  else
  {
    if (*((_BYTE *)v334 + 64) && (v408 = *((_QWORD *)v334 + 4)) != 0)
      v347 = atomic_load((unint64_t *)(v408 + 32));
    else
      v347 = *((_QWORD *)v334 + 6);
    v436 = v347;
    v437 = 1;
  }
  v348 = v347 - *(_QWORD *)(v11 + 32);
  if ((*(_BYTE *)(v11 + 5) - 42) > 7u)
    LOBYTE(v349) = 0;
  else
    v349 = qword_199158A40[(char)(*(_BYTE *)(v11 + 5) - 42)];
  v20 = v348 >> v349;
  v38 = *(_DWORD *)v334 == 2;
  *(_DWORD *)v334 -= 2;
  if (v38)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v334, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
  }
LABEL_4:
  v424 = a2;
  v425 = a3;
  v426 = (WTF *)v428;
  v427 = 16;
  v429 = 0;
  v430 = 0;
  v431 = 0;
  v432 = 0;
  v433 = 0;
  v434 = BYTE4(a3);
  v435 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v424, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
  v29 = **(_QWORD **)(a1 + 24);
  if (*(_DWORD *)(v29 + 80))
  {
    v335 = *(_DWORD *)(v29 + 80);
    if ((v335 & 0x27) != 0 && (v335 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v29 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v29 + 16))
    {
      v336 = 0;
      goto LABEL_416;
    }
  }
  v30 = **(_QWORD **)(a1 + 16);
  if (v20 >= v30)
    v31 = **(_QWORD **)(a1 + 16);
  else
    v31 = v20;
  if (v31)
  {
    v32 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v33 = *(_QWORD *)(**(_QWORD **)a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v28.i32[0] = *(_DWORD *)(v33 + 4 * v32);
      v34 = COERCE__INT64(*(float *)v28.i32) + 0x2000000000000;
      v35 = **(_QWORD **)(a1 + 8);
      v36 = *(_QWORD *)(v35 + 56);
      if ((v34 & 0xFFFE000000000002) == 0)
      {
        v37 = *(unsigned __int8 *)(COERCE__INT64(*(float *)v28.i32) + 0x2000000000005);
        v38 = COERCE__INT64(*(float *)v28.i32) != 0xFFFE000000000000 && v37 == 2;
        v39 = v38;
        if (!v38)
          goto LABEL_49;
        v40 = *(_QWORD *)(COERCE__INT64(*(float *)v28.i32) + 0x2000000000008);
        if ((v40 & 1) == 0)
        {
          if (v40)
          {
            v41 = *(unsigned int *)(v40 + 16);
            v42 = *(const char **)(v40 + 8);
            v40 = *(unsigned int *)(v40 + 4);
            v43 = (v41 >> 2) & 1;
          }
          else
          {
            v42 = 0;
            v43 = 1;
          }
          v44 = v422 & 0xFFFFFF0000000000 | v40 | (v43 << 32);
          v422 = v44;
          v45 = COERCE__INT64(*(float *)v28.i32) + 0x2000000000000;
          goto LABEL_26;
        }
        if ((v40 & 2) == 0)
        {
          v118 = (unint64_t)*JSC::JSRopeString::resolveRope(v34, **(JSC::JSGlobalObject ***)(a1 + 8), (uint64_t)v22, v23, v28, v24, v25, v26, v27);
          if (v118)
          {
            v119 = *(unsigned int *)(v118 + 16);
            v42 = *(const char **)(v118 + 8);
            v118 = *(unsigned int *)(v118 + 4);
            v120 = (v119 >> 2) & 1;
          }
          else
          {
            v42 = 0;
            v120 = 1;
          }
          v44 = v416 & 0xFFFFFF0000000000 | v118 | (v120 << 32);
          v45 = v34;
          v416 = v44;
          goto LABEL_26;
        }
        v45 = *(_QWORD *)(COERCE__INT64(*(float *)v28.i32) + 0x2000000000014) & 0xFFFFFFFFFLL;
        v86 = v420 & 0xFFFFFF0000000000;
        v87 = *(_QWORD *)(v45 + 8);
        if (v87)
        {
          v88 = *(unsigned int *)(v87 + 4);
          v89 = ((unint64_t)*(unsigned int *)(v87 + 16) >> 2) & 1;
          v420 = v86 | (v89 << 32) | v88;
          v90 = *(_QWORD *)(COERCE__INT64(*(float *)v28.i32) + 0x2000000000018);
          v91 = v90 >> 16;
          if (v88 > (v90 >> 16))
          {
            v42 = *(const char **)(v87 + 8);
            v92 = *(_DWORD *)(COERCE__INT64(*(float *)v28.i32) + 0x2000000000010);
            if ((int)v88 - (int)v91 > v92 || (v92 = v88 - v91, (_DWORD)v91))
            {
              v93 = (v90 >> 16);
              v44 = v92;
              v94 = v88 - v91;
              if ((_DWORD)v89)
              {
                if (v94 < v92)
                  goto LABEL_575;
                v42 += v93;
                v44 = v92 | 0x100000000;
              }
              else
              {
                if (v94 < v92)
                  goto LABEL_575;
                v42 += 2 * v93;
              }
            }
            else
            {
              v44 = v420;
            }
LABEL_26:
            if (*(_DWORD *)(v36 + 80))
            {
              v179 = *(_DWORD *)(v36 + 80);
              if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
              if (*(_QWORD *)(v36 + 16))
              {
                LOBYTE(v37) = 0;
                goto LABEL_49;
              }
            }
            v46 = *(WTF::StringImpl **)(v45 + 8);
            if ((v46 & 1) != 0)
            {
              v46 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v45, 0, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
              if (v46)
LABEL_29:
                *(_DWORD *)v46 += 2;
            }
            else if (v46)
            {
              goto LABEL_29;
            }
            if (v432 == -1)
              v431 = 1;
            ++v432;
            if (v435 == v34)
            {
              if (!HIDWORD(v427))
              {
                __break(0xC471u);
                JUMPOUT(0x198AE3874);
              }
              v114 = (char *)v426 + 32 * HIDWORD(v427) - 32;
              v115 = *((unsigned __int16 *)v114 + 12);
              if (v115 != 0xFFFF)
              {
                *((_WORD *)v114 + 12) = v115 + 1;
                v116 = *((_DWORD *)v114 + 4);
                v109 = __CFADD__(v430, v116);
                v117 = v430 + v116;
                if (v109)
                {
                  v429 = 1;
                  if (v46)
                    goto LABEL_143;
                }
                else
                {
                  v430 = v117;
                  if (v46)
                  {
LABEL_143:
                    if (*(_DWORD *)v46 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v46, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
                    }
                    else
                    {
                      *(_DWORD *)v46 -= 2;
                    }
                  }
                }
LABEL_48:
                LOBYTE(v37) = 1;
LABEL_49:
                v54 = v39 & v37;
                goto LABEL_50;
              }
            }
            if (__CFADD__(v430, (_DWORD)v44))
              v429 = 1;
            else
              v430 += v44;
            v48 = (v44 & 0xFF00000000) != 0 && v434 != 0;
            v434 = v48;
            v438 = v46;
            v439.i64[0] = (uint64_t)v42;
            v439.i64[1] = v44;
            v440 = 0;
            if (HIDWORD(v427) != (_DWORD)v427)
            {
              v49 = (char *)v426 + 32 * HIDWORD(v427);
              v438 = 0;
              *(_QWORD *)v49 = v46;
              v50 = &v440;
              v28 = v439;
              *(int8x16_t *)(v49 + 8) = v439;
              v51 = (__int16 *)(v49 + 24);
              goto LABEL_43;
            }
            v143 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
            if (v143)
            {
              v144 = (char *)v426 + 32 * HIDWORD(v427);
              v145 = *(_QWORD *)v143;
              *(_QWORD *)v143 = 0;
              *(_QWORD *)v144 = v145;
              v28 = *(int8x16_t *)(v143 + 8);
              *(int8x16_t *)(v144 + 8) = v28;
              v51 = (__int16 *)(v144 + 24);
              v50 = (__int16 *)(v143 + 24);
LABEL_43:
              v52 = 0;
              *v51 = *v50;
              ++HIDWORD(v427);
            }
            else
            {
              v52 = 1;
            }
            v433 |= v52;
            v53 = (unint64_t)v438;
            v438 = 0;
            if (!v53)
            {
LABEL_47:
              v435 = v34;
              goto LABEL_48;
            }
            if (*(_DWORD *)v53 != 2)
            {
              *(_DWORD *)v53 -= 2;
              goto LABEL_47;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v53, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
            v104 = *(_QWORD *)(StatusReg + 752);
            if (!v104)
            {
              pas_try_deallocate_slow_no_cache(v53, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_47;
            }
            if (!(v53 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v53 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v53)) & 1) != 0)
            {
LABEL_128:
              v105 = *(unsigned int *)(v104 + 8000);
              if (v105 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v104, v53, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v104 + 8 * v105) = v53 | 0x5000000000000;
                *(_DWORD *)(v104 + 8000) = v105 + 1;
              }
              goto LABEL_47;
            }
            if (v53 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v53 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v53 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v53) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_128;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v104, v53, 1, v23, v24, v25, v26, v27);
            goto LABEL_47;
          }
        }
        else
        {
          v420 = v86 | 0x100000000;
        }
        v44 = 0x100000000;
        v42 = "";
        goto LABEL_26;
      }
      if (v34 < 0xFFFE000000000000)
      {
        v207 = *(float *)v28.i32;
        if (COERCE_UNSIGNED_INT64(*(float *)v28.i32) <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (COERCE_UNSIGNED_INT64(fabs(*(float *)v28.i32)) <= 0x7FEFFFFFFFFFFFFFLL
            && (v225 = (int)v207, (double)(int)v225 == v207)
            && ((*(_QWORD *)&v207 & 0x8000000000000000) == 0 || (_DWORD)v225))
          {
            if (v225 > 0xFF)
            {
              v259 = v36 + 48368;
              v260 = 9 * ((~((_DWORD)v225 << 15) + v225) ^ ((~((_DWORD)v225 << 15) + v225) >> 10));
              v261 = (v260 ^ (v260 >> 6)) + ~((v260 ^ (v260 >> 6)) << 11);
              v262 = (v261 ^ BYTE2(v261));
              v263 = (_DWORD *)(v36 + 48368 + 24 * (v261 ^ BYTE2(v261)));
              if (*v263 != (_DWORD)v225
                || (v264 = v259 + 24 * v262, v265 = *(_QWORD *)(v264 + 8), v226 = (int **)(v264 + 8), !v265))
              {
                *v263 = v225;
                WTF::String::number(v225, (uint64_t *)&v438);
                v279 = v259 + 24 * v262;
                v280 = (int *)v438;
                v438 = 0;
                v282 = *(WTF::StringImpl **)(v279 + 8);
                v226 = (int **)(v279 + 8);
                v281 = v282;
                *v226 = v280;
                if (v282)
                {
                  if (*(_DWORD *)v281 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v281, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
                  }
                  else
                  {
                    *(_DWORD *)v281 -= 2;
                  }
                }
                v292 = v438;
                v438 = 0;
                if (v292)
                {
                  if (*(_DWORD *)v292 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v292, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v301, v302, v303, v304, v305, v306, v307, v308);
                  }
                  else
                  {
                    *(_DWORD *)v292 -= 2;
                  }
                }
                *(_QWORD *)(v259 + 24 * v262 + 16) = 0;
              }
            }
            else
            {
              v226 = (int **)(v36 + 16 * v225 + 44272);
              if (!*v226)
              {
                v227 = 0;
                do
                {
                  v228 = (v225 % 0xA) | 0x30;
                  v439.i8[v227-- + 4] = (v225 % 0xA) | 0x30;
                  v101 = v225 > 9;
                  LODWORD(v225) = v225 / 0xA;
                }
                while (v101);
                if (v227 + 14 >= 15)
                  goto LABEL_575;
                if (v227)
                {
                  if ((unint64_t)-v227 >> 31)
                  {
                    __break(0xC471u);
                    goto LABEL_576;
                  }
                  v229 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v227));
                  v230 = v229 + 5;
                  *v229 = 2;
                  v229[1] = -(int)v227;
                  *((_QWORD *)v229 + 1) = v229 + 5;
                  v229[4] = 4;
                  if (v227 == -1)
                    *v230 = v228;
                  else
                    memcpy(v230, &v439.u8[v227 + 5], -v227);
                }
                else
                {
                  v229 = &WTF::StringImpl::s_emptyAtomString;
                  WTF::StringImpl::s_emptyAtomString += 2;
                }
                v283 = (WTF::StringImpl *)*v226;
                *v226 = v229;
                if (v283)
                {
                  if (*(_DWORD *)v283 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v283, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v293, v294, v295, v296, v297, v298, v299, v300);
                  }
                  else
                  {
                    *(_DWORD *)v283 -= 2;
                  }
                }
              }
            }
            if (v432 == -1)
              v431 = 1;
            ++v432;
            v232 = (WTF::StringImpl *)*v226;
            if (*v226)
              v266 = *((_DWORD *)v232 + 1);
            else
              v266 = 0;
            v109 = __CFADD__(v430, v266);
            v267 = v430 + v266;
            if (v109)
              v429 = 1;
            else
              v430 = v267;
            v268 = v411 & 0xFFFFFF0000000000;
            if (v232)
            {
              v269 = *((_QWORD *)v232 + 1);
              v411 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v268;
              *(_DWORD *)v232 += 2;
            }
            else
            {
              v269 = 0;
              v411 = v268 | 0x100000000;
            }
            v438 = v232;
            v439.i64[0] = v269;
            v237 = v411;
          }
          else
          {
            v243 = v36 + 54512;
            v244 = (*(_QWORD *)&v207 + ~(v34 << 32)) ^ ((*(_QWORD *)&v207 + ~(v34 << 32)) >> 22);
            v245 = 9 * ((v244 + ~(v244 << 13)) ^ ((v244 + ~(v244 << 13)) >> 8));
            v246 = (v245 ^ (v245 >> 15)) + ~((v245 ^ (v245 >> 15)) << 27);
            v247 = ((v246 >> 31) ^ v246);
            v248 = (double *)(v36 + 54512 + 24 * ((v246 >> 31) ^ v246));
            if (*v248 != v207
              || (v253 = v243 + 24 * v247, v254 = *(_QWORD *)(v253 + 8), v251 = (WTF::StringImpl **)(v253 + 8), !v254))
            {
              *v248 = v207;
              WTF::String::number(*(float *)v28.i32, (int **)&v438);
              v249 = v243 + 24 * v247;
              v252 = *(WTF::StringImpl **)(v249 + 8);
              v251 = (WTF::StringImpl **)(v249 + 8);
              v250 = v252;
              *v251 = v438;
              if (v252)
              {
                if (*(_DWORD *)v250 == 2)
                {
                  WTF::StringImpl::~StringImpl(v250, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
                }
                else
                {
                  *(_DWORD *)v250 -= 2;
                }
              }
              *(_QWORD *)(v243 + 24 * v247 + 16) = 0;
            }
            if (v432 == -1)
              v431 = 1;
            ++v432;
            v232 = *v251;
            if (*v251)
              v255 = *((_DWORD *)v232 + 1);
            else
              v255 = 0;
            v109 = __CFADD__(v430, v255);
            v256 = v430 + v255;
            if (v109)
              v429 = 1;
            else
              v430 = v256;
            v257 = v412 & 0xFFFFFF0000000000;
            if (v232)
            {
              v258 = *((_QWORD *)v232 + 1);
              v412 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v257;
              *(_DWORD *)v232 += 2;
            }
            else
            {
              v258 = 0;
              v412 = v257 | 0x100000000;
            }
            v438 = v232;
            v439.i64[0] = v258;
            v237 = v412;
          }
        }
        else if (COERCE__INT64(*(float *)v28.i32) == 0xFFFE000000000007)
        {
          if (v432 == -1)
            v431 = 1;
          v231 = *(_QWORD *)(v36 + 41952);
          ++v432;
          v232 = *(WTF::StringImpl **)(v231 + 432);
          if (v232)
            v233 = *((_DWORD *)v232 + 1);
          else
            v233 = 0;
          v109 = __CFADD__(v430, v233);
          v234 = v430 + v233;
          if (v109)
            v429 = 1;
          else
            v430 = v234;
          v235 = v413 & 0xFFFFFF0000000000;
          if (v232)
          {
            v236 = *((_QWORD *)v232 + 1);
            v413 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v235;
            *(_DWORD *)v232 += 2;
          }
          else
          {
            v236 = 0;
            v413 = v235 | 0x100000000;
          }
          v438 = v232;
          v439.i64[0] = v236;
          v237 = v413;
        }
        else
        {
          if (COERCE__INT64(*(float *)v28.i32) != 0xFFFE000000000006)
          {
            if (v432 == -1)
              v431 = 1;
            ++v432;
            v438 = 0;
            v439.i64[0] = 0;
            v415 = v415 & 0xFFFFFF0000000000 | 0x100000000;
            v439.i64[1] = v415;
            v440 = 0;
            if (HIDWORD(v427) != (_DWORD)v427)
            {
              v208 = (char *)v426 + 32 * HIDWORD(v427);
              *(_QWORD *)v208 = 0;
              v209 = &v440;
              v28 = v439;
              *(int8x16_t *)(v208 + 8) = v439;
              v210 = (__int16 *)(v208 + 24);
              goto LABEL_281;
            }
            v221 = (WTF::AtomStringImpl *)(HIDWORD(v427) + 1);
LABEL_293:
            v222 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, v221, (unint64_t)&v438, v23, v24, v25, v26, v27);
            if (v222)
            {
              v223 = (char *)v426 + 32 * HIDWORD(v427);
              v224 = *(_QWORD *)v222;
              *(_QWORD *)v222 = 0;
              *(_QWORD *)v223 = v224;
              v28 = *(int8x16_t *)(v222 + 8);
              *(int8x16_t *)(v223 + 8) = v28;
              v210 = (__int16 *)(v223 + 24);
              v209 = (__int16 *)(v222 + 24);
              goto LABEL_281;
            }
            v211 = 1;
LABEL_282:
            v433 |= v211;
            v212 = v438;
            v438 = 0;
            if (v212)
            {
              if (*(_DWORD *)v212 == 2)
              {
                WTF::StringImpl::~StringImpl(v212, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
              }
              else
              {
                *(_DWORD *)v212 -= 2;
              }
            }
            goto LABEL_168;
          }
          if (v432 == -1)
            v431 = 1;
          v238 = *(_QWORD *)(v36 + 41952);
          ++v432;
          v232 = *(WTF::StringImpl **)(v238 + 248);
          if (v232)
            v239 = *((_DWORD *)v232 + 1);
          else
            v239 = 0;
          v109 = __CFADD__(v430, v239);
          v240 = v430 + v239;
          if (v109)
            v429 = 1;
          else
            v430 = v240;
          v241 = v414 & 0xFFFFFF0000000000;
          if (v232)
          {
            v242 = *((_QWORD *)v232 + 1);
            v414 = *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32) | v241;
            *(_DWORD *)v232 += 2;
          }
          else
          {
            v242 = 0;
            v414 = v241 | 0x100000000;
          }
          v438 = v232;
          v439.i64[0] = v242;
          v237 = v414;
        }
        v439.i64[1] = v237;
        v440 = 0;
        if (HIDWORD(v427) == (_DWORD)v427)
        {
          v221 = (WTF::AtomStringImpl *)(HIDWORD(v427) + 1);
          goto LABEL_293;
        }
        v270 = (char *)v426 + 32 * HIDWORD(v427);
        v438 = 0;
        *(_QWORD *)v270 = v232;
        v209 = &v440;
        v28 = v439;
        *(int8x16_t *)(v270 + 8) = v439;
        v210 = (__int16 *)(v270 + 24);
LABEL_281:
        v211 = 0;
        *v210 = *v209;
        ++HIDWORD(v427);
        goto LABEL_282;
      }
      if (COERCE_UNSIGNED_INT64(*(float *)v28.i32) > 0xFF)
      {
        v124 = v36 + 48368;
        v125 = 9
             * ((~(COERCE_UNSIGNED_INT64(*(float *)v28.i32) << 15)
               + COERCE_UNSIGNED_INT64(*(float *)v28.i32)) ^ ((~(COERCE_UNSIGNED_INT64(*(float *)v28.i32) << 15)
                                                             + COERCE_UNSIGNED_INT64(*(float *)v28.i32)) >> 10));
        v126 = (v125 ^ (v125 >> 6)) + ~((v125 ^ (v125 >> 6)) << 11);
        v127 = (v126 ^ BYTE2(v126));
        v128 = (_DWORD *)(v36 + 48368 + 24 * (v126 ^ BYTE2(v126)));
        if (*v128 != COERCE_UNSIGNED_INT64(*(float *)v28.i32)
          || (v129 = v124 + 24 * v127, v130 = *(_QWORD *)(v129 + 8), v97 = (int **)(v129 + 8), !v130))
        {
          *v128 = COERCE_UNSIGNED_INT64(*(float *)v28.i32);
          WTF::String::number(v34, (uint64_t *)&v438);
          v167 = v124 + 24 * v127;
          v168 = (int *)v438;
          v438 = 0;
          v170 = *(WTF::StringImpl **)(v167 + 8);
          v97 = (int **)(v167 + 8);
          v169 = v170;
          *v97 = v168;
          if (v170)
          {
            if (*(_DWORD *)v169 == 2)
            {
              WTF::StringImpl::~StringImpl(v169, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
            }
            else
            {
              *(_DWORD *)v169 -= 2;
            }
          }
          v171 = v438;
          v438 = 0;
          if (v171)
          {
            if (*(_DWORD *)v171 == 2)
            {
              WTF::StringImpl::~StringImpl(v171, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
            }
            else
            {
              *(_DWORD *)v171 -= 2;
            }
          }
          *(_QWORD *)(v124 + 24 * v127 + 16) = 0;
        }
      }
      else
      {
        v97 = (int **)(v36 + 16 * COERCE_UNSIGNED_INT64(*(float *)v28.i32) + 44272);
        if (!*v97)
        {
          v98 = 0;
          v99 = COERCE_UNSIGNED_INT64(*(float *)v28.i32);
          do
          {
            v100 = (v99 % 0xA) | 0x30;
            v439.i8[v98-- + 4] = (v99 % 0xA) | 0x30;
            v101 = v99 > 9;
            v99 /= 0xAu;
          }
          while (v101);
          if (v98 + 14 >= 15)
            goto LABEL_575;
          if (v98)
          {
            if ((unint64_t)-v98 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198AE3864);
            }
            v102 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v98));
            v103 = v102 + 5;
            *v102 = 2;
            v102[1] = -(int)v98;
            *((_QWORD *)v102 + 1) = v102 + 5;
            v102[4] = 4;
            if (v98 == -1)
              *v103 = v100;
            else
              memcpy(v103, &v439.u8[v98 + 5], -v98);
          }
          else
          {
            v102 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          v180 = (WTF::StringImpl *)*v97;
          *v97 = v102;
          if (v180)
          {
            if (*(_DWORD *)v180 == 2)
            {
              WTF::StringImpl::~StringImpl(v180, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
            }
            else
            {
              *(_DWORD *)v180 -= 2;
            }
          }
        }
      }
      if (v432 == -1)
        v431 = 1;
      ++v432;
      v131 = (WTF::StringImpl *)*v97;
      v132 = *v97 ? *((_DWORD *)v131 + 1) : 0;
      v109 = __CFADD__(v430, v132);
      v133 = v430 + v132;
      if (v109)
        v429 = 1;
      else
        v430 = v133;
      v134 = v418 & 0xFFFFFF0000000000;
      if (v131)
      {
        v135 = *((_QWORD *)v131 + 1);
        v136 = *((unsigned int *)v131 + 1) | ((unint64_t)((*((_DWORD *)v131 + 4) >> 2) & 1) << 32) | v134;
        *(_DWORD *)v131 += 2;
        v137 = v136;
      }
      else
      {
        v135 = 0;
        v137 = v134 | 0x100000000;
      }
      v438 = v131;
      v439.i64[0] = v135;
      v418 = v137;
      v439.i64[1] = v137;
      v440 = 0;
      if (HIDWORD(v427) != (_DWORD)v427)
        break;
      v164 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
      if (v164)
      {
        v165 = (char *)v426 + 32 * HIDWORD(v427);
        v166 = *(_QWORD *)v164;
        *(_QWORD *)v164 = 0;
        *(_QWORD *)v165 = v166;
        v28 = *(int8x16_t *)(v164 + 8);
        *(int8x16_t *)(v165 + 8) = v28;
        v140 = (__int16 *)(v165 + 24);
        v139 = (__int16 *)(v164 + 24);
        goto LABEL_164;
      }
      v141 = 1;
LABEL_165:
      v433 |= v141;
      v142 = (unint64_t)v438;
      v438 = 0;
      if (v142)
      {
        if (*(_DWORD *)v142 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v142, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v146 = *(_QWORD *)(StatusReg + 752);
          if (v146)
          {
            if (!(v142 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v142 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v142)) & 1) != 0)
            {
LABEL_176:
              v147 = *(unsigned int *)(v146 + 8000);
              if (v147 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v146, v142, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v146 + 8 * v147) = v142 | 0x5000000000000;
                *(_DWORD *)(v146 + 8000) = v147 + 1;
              }
              goto LABEL_168;
            }
            if (v142 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v142 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v142 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v142) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_176;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v146, v142, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v142, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v142 -= 2;
        }
      }
LABEL_168:
      v435 = 0;
      v54 = 1;
LABEL_50:
      if (*(_DWORD *)(v36 + 80))
      {
        v172 = *(_DWORD *)(v36 + 80);
        if ((v172 & 0x27) != 0 && (v172 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v36 + 16))
          v173 = 1;
        else
          v173 = v54;
        if ((v173 & 1) != 0)
          goto LABEL_91;
      }
      else if ((v54 & 1) != 0)
      {
        goto LABEL_91;
      }
      v55 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x40);
      if (v55)
      {
        if (*(_BYTE *)(v55 + 5) != 1)
        {
          v56 = *(_QWORD *)(v55 + 64);
          if (v56)
          {
            if ((*(_QWORD *)(v56 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v57 = *(_QWORD *)(v56 + 40);
              if (v57 == 1)
                v58 = 0;
              else
                v58 = v57;
              v59 = *(_QWORD *)(v35 + 512);
              if ((v59 & 1) != 0)
              {
                v177 = *(uint64_t (**)(WTF::StringImpl **))(v59 & 0xFFFFFFFFFFFFFFFCLL);
                v178 = (int **)(v35 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v35 & 8) != 0)
                  v178 = (int **)(v35 - 16);
                v438 = (WTF::StringImpl *)*v178;
                v439.i64[0] = v35;
                v439.i64[1] = v35 + 512;
                v59 = v177(&v438);
              }
              if (v58 == v59)
              {
                v205 = *(_QWORD *)(v55 + 64);
                if (v205)
                {
                  v206 = *(_QWORD *)(v205 + 16);
                  if (v206 >= 2)
                  {
                    v34 = v206;
                    goto LABEL_64;
                  }
                }
              }
            }
          }
        }
      }
      v60 = *(unsigned __int8 *)(v34 + 5);
      if (v60 < 0x17)
      {
        if (v60 == 2)
          goto LABEL_64;
        v61 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v34, (JSC::JSGlobalObject *)v35, (uint64_t)v22, v23, v24, v25, v26, v27);
      }
      else
      {
        v61 = JSC::JSObject::toString((JSC::JSObject *)v34, (JSC::JSGlobalObject *)v35, v22, v23, v24, v25, v26, v27);
      }
      v34 = v61;
LABEL_64:
      if (*(_DWORD *)(v36 + 80))
      {
        v175 = *(_DWORD *)(v36 + 80);
        if ((v175 & 0x27) != 0 && (v175 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v36 + 16))
          goto LABEL_91;
      }
      v62 = *(_QWORD *)(v34 + 8);
      if ((v62 & 1) == 0)
      {
        if (v62)
        {
          v63 = *(unsigned int *)(v62 + 16);
          v64 = *(const char **)(v62 + 8);
          v62 = *(unsigned int *)(v62 + 4);
          v65 = (v63 >> 2) & 1;
        }
        else
        {
          v64 = 0;
          v65 = 1;
        }
        v66 = v423 & 0xFFFFFF0000000000 | v62 | (v65 << 32);
        v423 = v66;
        v67 = v34;
        goto LABEL_69;
      }
      if ((v62 & 2) == 0)
      {
        v111 = (unint64_t)*JSC::JSRopeString::resolveRope(v34, (JSC::JSGlobalObject *)v35, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
        if (v111)
        {
          v112 = *(unsigned int *)(v111 + 16);
          v64 = *(const char **)(v111 + 8);
          v111 = *(unsigned int *)(v111 + 4);
          v113 = (v112 >> 2) & 1;
        }
        else
        {
          v64 = 0;
          v113 = 1;
        }
        v66 = v417 & 0xFFFFFF0000000000 | v111 | (v113 << 32);
        v67 = v34;
        v417 = v66;
        goto LABEL_69;
      }
      v67 = *(_QWORD *)(v34 + 20) & 0xFFFFFFFFFLL;
      v77 = v421 & 0xFFFFFF0000000000;
      v78 = *(_QWORD *)(v67 + 8);
      if (!v78)
      {
        v421 = v77 | 0x100000000;
LABEL_188:
        v66 = 0x100000000;
        v64 = "";
        goto LABEL_69;
      }
      v79 = *(unsigned int *)(v78 + 4);
      v80 = ((unint64_t)*(unsigned int *)(v78 + 16) >> 2) & 1;
      v421 = v77 | (v80 << 32) | v79;
      v81 = *(_QWORD *)(v34 + 24);
      v82 = v81 >> 16;
      if (v79 <= (v81 >> 16))
        goto LABEL_188;
      v64 = *(const char **)(v78 + 8);
      v83 = *(_DWORD *)(v34 + 16);
      if ((int)v79 - (int)v82 > v83 || (v83 = v79 - v82, (_DWORD)v82))
      {
        v84 = (v81 >> 16);
        v66 = v83;
        v85 = v79 - v82;
        if ((_DWORD)v80)
        {
          if (v85 < v83)
            goto LABEL_575;
          v64 += v84;
          v66 = v83 | 0x100000000;
        }
        else
        {
          if (v85 < v83)
            goto LABEL_575;
          v64 += 2 * v84;
        }
      }
      else
      {
        v66 = v421;
      }
LABEL_69:
      if (*(_DWORD *)(v36 + 80))
      {
        v176 = *(_DWORD *)(v36 + 80);
        if ((v176 & 0x27) != 0 && (v176 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v36 + 16))
          goto LABEL_91;
      }
      v68 = *(int **)(v67 + 8);
      if ((v68 & 1) == 0)
      {
        if (!v68)
          goto LABEL_73;
LABEL_72:
        *v68 += 2;
        goto LABEL_73;
      }
      v68 = *JSC::JSRopeString::resolveRope(v67, 0, (uint64_t)v22, v23, v28, v24, v25, v26, v27);
      if (v68)
        goto LABEL_72;
LABEL_73:
      if (v432 == -1)
        v431 = 1;
      ++v432;
      if (v435 != v34)
        goto LABEL_76;
      if (!HIDWORD(v427))
      {
        __break(0xC471u);
        JUMPOUT(0x198AE386CLL);
      }
      v106 = (char *)v426 + 32 * HIDWORD(v427) - 32;
      v107 = *((unsigned __int16 *)v106 + 12);
      if (v107 == 0xFFFF)
      {
LABEL_76:
        if (__CFADD__(v430, (_DWORD)v66))
          v429 = 1;
        else
          v430 += v66;
        v70 = (v66 & 0xFF00000000) != 0 && v434 != 0;
        v434 = v70;
        v438 = (WTF::StringImpl *)v68;
        v439.i64[0] = (uint64_t)v64;
        v439.i64[1] = v66;
        v440 = 0;
        if (HIDWORD(v427) != (_DWORD)v427)
        {
          v71 = (char *)v426 + 32 * HIDWORD(v427);
          v438 = 0;
          *(_QWORD *)v71 = v68;
          v72 = &v440;
          v28 = v439;
          *(int8x16_t *)(v71 + 8) = v439;
          v73 = (__int16 *)(v71 + 24);
          goto LABEL_86;
        }
        v121 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
        if (v121)
        {
          v122 = (char *)v426 + 32 * HIDWORD(v427);
          v123 = *(_QWORD *)v121;
          *(_QWORD *)v121 = 0;
          *(_QWORD *)v122 = v123;
          v28 = *(int8x16_t *)(v121 + 8);
          *(int8x16_t *)(v122 + 8) = v28;
          v73 = (__int16 *)(v122 + 24);
          v72 = (__int16 *)(v121 + 24);
LABEL_86:
          v74 = 0;
          *v73 = *v72;
          ++HIDWORD(v427);
        }
        else
        {
          v74 = 1;
        }
        v433 |= v74;
        v75 = (unint64_t)v438;
        v438 = 0;
        if (!v75)
        {
LABEL_90:
          v435 = v34;
          goto LABEL_91;
        }
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
          goto LABEL_90;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v75, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
        v95 = *(_QWORD *)(StatusReg + 752);
        if (!v95)
        {
          pas_try_deallocate_slow_no_cache(v75, (uint64_t)&bmalloc_heap_config, 1);
          goto LABEL_90;
        }
        if (!(v75 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v75 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v75)) & 1) != 0)
        {
LABEL_113:
          v96 = *(unsigned int *)(v95 + 8000);
          if (v96 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v95, v75, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
          }
          else
          {
            *(_QWORD *)(v95 + 8 * v96) = v75 | 0x5000000000000;
            *(_DWORD *)(v95 + 8000) = v96 + 1;
          }
          goto LABEL_90;
        }
        if (v75 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v75 >> 24)
        {
          v23 = 0;
        }
        else
        {
          v23 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v75 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v75) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v23 == 1)
            goto LABEL_113;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v95, v75, 1, v23, v24, v25, v26, v27);
        goto LABEL_90;
      }
      *((_WORD *)v106 + 12) = v107 + 1;
      v108 = *((_DWORD *)v106 + 4);
      v109 = __CFADD__(v430, v108);
      v110 = v430 + v108;
      if (v109)
      {
        v429 = 1;
        if (!v68)
          goto LABEL_91;
      }
      else
      {
        v430 = v110;
        if (!v68)
          goto LABEL_91;
      }
      if (*v68 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v68, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
      }
      else
      {
        *v68 -= 2;
      }
LABEL_91:
      v76 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v76 + 80))
      {
        v174 = *(_DWORD *)(v76 + 80);
        if ((v174 & 0x27) != 0 && (v174 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v76 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v76 + 16))
        {
          v336 = 0;
          goto LABEL_416;
        }
      }
      if (++v32 == v31)
      {
        v30 = **(_QWORD **)(a1 + 16);
        goto LABEL_386;
      }
    }
    v138 = (char *)v426 + 32 * HIDWORD(v427);
    v438 = 0;
    *(_QWORD *)v138 = v131;
    v139 = &v440;
    v28 = v439;
    *(int8x16_t *)(v138 + 8) = v439;
    v140 = (__int16 *)(v138 + 24);
LABEL_164:
    v141 = 0;
    *v140 = *v139;
    ++HIDWORD(v427);
    goto LABEL_165;
  }
LABEL_386:
  if (v31 < v30)
  {
    v309 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v432 == -1)
        v431 = 1;
      ++v432;
      v438 = 0;
      v439.i64[0] = 0;
      v439.i64[1] = 0x100000000;
      v440 = 0;
      if (HIDWORD(v427) != (_DWORD)v427)
        break;
      v317 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v426, (WTF::AtomStringImpl *)(HIDWORD(v427) + 1), (unint64_t)&v438, v23, v24, v25, v26, v27);
      if (v317)
      {
        v318 = (char *)v426 + 32 * HIDWORD(v427);
        v319 = *(_QWORD *)v317;
        *(_QWORD *)v317 = 0;
        *(_QWORD *)v318 = v319;
        *(_OWORD *)(v318 + 8) = *(_OWORD *)(v317 + 8);
        v311 = (__int16 *)(v318 + 24);
        v312 = (__int16 *)(v317 + 24);
        goto LABEL_392;
      }
      v313 = 1;
LABEL_393:
      v433 |= v313;
      v314 = (unint64_t)v438;
      v438 = 0;
      if (v314)
      {
        if (*(_DWORD *)v314 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v314, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v315 = *(_QWORD *)(v309 + 752);
          if (v315)
          {
            if (!(v314 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v314 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v314)) & 1) != 0)
            {
LABEL_401:
              v316 = *(unsigned int *)(v315 + 8000);
              if (v316 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v315, v314, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v315 + 8 * v316) = v314 | 0x5000000000000;
                *(_DWORD *)(v315 + 8000) = v316 + 1;
              }
              goto LABEL_396;
            }
            if (v314 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v314 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v314 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v314) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_401;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v315, v314, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v314, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v314 -= 2;
        }
      }
LABEL_396:
      v435 = 0;
      if (++v31 >= **(_QWORD **)(a1 + 16))
        goto LABEL_413;
    }
    v310 = (char *)v426 + 32 * HIDWORD(v427);
    *(_QWORD *)v310 = 0;
    *(int8x16_t *)(v310 + 8) = v439;
    v311 = (__int16 *)(v310 + 24);
    v312 = &v440;
LABEL_392:
    v313 = 0;
    *v311 = *v312;
    ++HIDWORD(v427);
    goto LABEL_393;
  }
LABEL_413:
  if (v431)
  {
    __break(0xC471u);
    JUMPOUT(0x198AE387CLL);
  }
  v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
  if (v432 == 1)
  {
    v336 = v435;
    if (v435)
      goto LABEL_416;
    if (!HIDWORD(v427))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE3944);
    }
    v330 = *((_QWORD *)v21 + 7);
    v331 = *((unsigned int *)v426 + 4);
    v332 = *(int **)v426;
    if (*(_QWORD *)v426)
    {
      if ((_DWORD)v331 == v332[1])
      {
        *v332 += 2;
LABEL_447:
        v438 = (WTF::StringImpl *)v332;
        goto LABEL_448;
      }
    }
    else if (!(_DWORD)v331)
    {
      goto LABEL_447;
    }
    v358 = (_BYTE *)*((_QWORD *)v426 + 1);
    if (*((_BYTE *)v426 + 20))
    {
      if (v358)
      {
        if ((_DWORD)v331)
        {
          if ((v331 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE3954);
          }
          v359 = (int *)WTF::fastCompactMalloc((WTF *)(v331 + 20));
          v360 = v359 + 5;
          *v359 = 2;
          v359[1] = v331;
          *((_QWORD *)v359 + 1) = v359 + 5;
          v359[4] = 4;
          if ((_DWORD)v331 == 1)
          {
            *v360 = *v358;
LABEL_540:
            v438 = (WTF::StringImpl *)v359;
LABEL_448:
            v336 = JSC::jsString(v330, (JSC::VM *)&v438, (uint64_t)v22, v23, v24, v25, v26, v27);
            v333 = v438;
            v438 = 0;
            if (v333)
            {
              if (*(_DWORD *)v333 == 2)
              {
                WTF::StringImpl::~StringImpl(v333, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v338, v339, v340, v341, v342, v343, v344, v345);
              }
              else
              {
                *(_DWORD *)v333 -= 2;
              }
            }
            goto LABEL_416;
          }
          v403 = v358;
          v404 = v331;
          goto LABEL_539;
        }
        goto LABEL_535;
      }
    }
    else if (v358)
    {
      if ((_DWORD)v331)
      {
        if (v331 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198AE395CLL);
        }
        v359 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v331 + 20));
        v360 = v359 + 5;
        *v359 = 2;
        v359[1] = v331;
        *((_QWORD *)v359 + 1) = v359 + 5;
        v359[4] = 0;
        if ((_DWORD)v331 == 1)
        {
          *(_WORD *)v360 = *(_WORD *)v358;
          goto LABEL_540;
        }
        v403 = v358;
        v404 = 2 * v331;
LABEL_539:
        memcpy(v360, v403, v404);
        goto LABEL_540;
      }
LABEL_535:
      v359 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_540;
    }
    v359 = 0;
    goto LABEL_540;
  }
  v336 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v424, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_416:
  if (HIDWORD(v427))
  {
    v320 = v426;
    v321 = 32 * HIDWORD(v427);
    v322 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v323 = *(_QWORD *)v320;
      *(_QWORD *)v320 = 0;
      if (v323)
      {
        if (*(_DWORD *)v323 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v323, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v324 = *(_QWORD *)(v322 + 752);
          if (v324)
          {
            if (!(v323 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v323 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v323)) & 1) != 0)
            {
LABEL_426:
              v325 = *(unsigned int *)(v324 + 8000);
              if (v325 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v324, v323, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v324 + 8 * v325) = v323 | 0x5000000000000;
                *(_DWORD *)(v324 + 8000) = v325 + 1;
              }
              goto LABEL_421;
            }
            if (v323 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v323 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v323 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v323) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_426;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v324, v323, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v323, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v323 -= 2;
        }
      }
LABEL_421:
      v320 = (WTF *)((char *)v320 + 32);
      v321 -= 32;
    }
    while (v321);
  }
  v326 = v426;
  v327 = v428 == (_BYTE *)v426;
LABEL_436:
  if (!v327 && v326 != 0)
  {
    v426 = 0;
    LODWORD(v427) = 0;
    WTF::fastFree((unint64_t)v326, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  }
  return v336;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  size_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  BOOL v37;
  WTF *v38;
  int *v39;
  _BYTE *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  __int16 *v57;
  __int16 *v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  char *v106;
  __int16 *v107;
  __int16 *v108;
  char v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  BOOL v134;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t i;
  char *v140;
  __int16 *v141;
  __int16 *v142;
  char v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  size_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  int *v182;
  _BYTE *v183;
  int v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  size_t v194;
  _BYTE *v195;
  int *v196;
  _BYTE *v197;
  const void *v198;
  size_t v199;
  size_t __n;
  uint64_t v201;
  uint64_t v202;
  WTF *v203;
  uint64_t v204;
  _BYTE v205[512];
  char v206;
  int v207;
  char v208;
  int v209;
  char v210;
  char v211;
  unint64_t v212;
  _BYTE v213[16];
  WTF::StringImpl *v214;
  __int128 v215;
  __int16 v216;
  uint64_t v217;

  v10 = (uint64_t)a1;
  v217 = *MEMORY[0x1E0C80C00];
  v213[0] = 0;
  v213[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(**a1, (uint64_t)v213, a3, a4, a5, a6, a7, a8);
  if (v17)
  {
    v18 = v11;
    v201 = a2;
    v202 = a3;
    v19 = (WTF *)v205;
    v203 = (WTF *)v205;
    v204 = 16;
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = BYTE4(a3);
    v212 = 0;
    JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
    v27 = **(_QWORD **)(v10 + 24);
    if (*(_DWORD *)(v27 + 80))
    {
      v167 = *(_DWORD *)(v27 + 80);
      if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v21, v22, v23, v24, v25, v26);
      if (*(_QWORD *)(v27 + 16))
      {
        v168 = 0;
        goto LABEL_92;
      }
    }
    v28 = **(_QWORD **)(v10 + 16);
    if (v18 >= v28)
      v29 = **(WTF ***)(v10 + 16);
    else
      v29 = (WTF *)v18;
    if (v29)
    {
      v19 = 0;
      v20 = 10;
      v21 = 24;
      while (1)
      {
        v30 = *(_QWORD *)(**(_QWORD **)v10 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v30 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v31 = *((char *)v19 + v30);
        v32 = *(_QWORD *)(**(_QWORD **)(v10 + 8) + 56);
        if ((v31 & 0x80000000) != 0)
        {
          v43 = v32 + 48368;
          v44 = 9 * ((~((_DWORD)v31 << 15) + v31) ^ ((~((_DWORD)v31 << 15) + v31) >> 10));
          v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
          v46 = (v45 ^ BYTE2(v45));
          v47 = (_DWORD *)(v32 + 48368 + 24 * (v45 ^ BYTE2(v45)));
          if (*v47 != (_DWORD)v31
            || (v48 = v43 + 24 * v46, v49 = *(_QWORD *)(v48 + 8), v33 = (WTF::StringImpl **)(v48 + 8), !v49))
          {
            *v47 = v31;
            WTF::String::number(v31, (uint64_t *)&v214);
            v21 = 24;
            v74 = v43 + 24 * v46;
            v75 = (uint64_t)v214;
            v214 = 0;
            v77 = *(WTF::StringImpl **)(v74 + 8);
            v33 = (WTF::StringImpl **)(v74 + 8);
            v76 = v77;
            *v33 = (WTF::StringImpl *)v75;
            if (v77)
            {
              if (*(_DWORD *)v76 == 2)
              {
                WTF::StringImpl::~StringImpl(v76, v73, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                v21 = 24;
              }
              else
              {
                *(_DWORD *)v76 -= 2;
              }
            }
            v78 = v214;
            v214 = 0;
            v20 = 10;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
              {
                WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v78 -= 2;
              }
            }
            *(_QWORD *)(v43 + 24 * v46 + 16) = 0;
          }
        }
        else
        {
          v33 = (WTF::StringImpl **)(v32 + 16 * v31 + 44272);
          if (!*v33)
          {
            v34 = 0;
            do
            {
              v35 = (v31 % 0xA) | 0x30;
              v36 = (WTF::StringImpl *)((char *)&v214 + v34);
              *((_BYTE *)&v215 + v34-- + 4) = (v31 % 0xA) | 0x30;
              v37 = v31 > 9;
              LODWORD(v31) = v31 / 0xA;
            }
            while (v37);
            v38 = (WTF *)(v34 + 14);
            if ((uint64_t)(v34 + 14) >= 15)
            {
              __break(1u);
              goto LABEL_159;
            }
            if (v34)
            {
              __n = -(uint64_t)v34;
              if ((unint64_t)-(uint64_t)v34 >> 31)
                goto LABEL_211;
              v39 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v34));
              v40 = v39 + 5;
              *v39 = 2;
              v39[1] = -(int)v34;
              *((_QWORD *)v39 + 1) = v39 + 5;
              v39[4] = 4;
              if (v34 == -1)
              {
                *v40 = v35;
              }
              else
              {
                v41 = (char *)&v215 + v34 + 5;
                v42 = v39;
                memcpy(v40, v41, __n);
                v39 = v42;
              }
              v20 = 10;
              v21 = 24;
            }
            else
            {
              v39 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            v79 = *v33;
            *v33 = (WTF::StringImpl *)v39;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
              {
                WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v79 -= 2;
              }
            }
          }
        }
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v50 = (uint64_t)*v33;
        if (*v33)
          v51 = *(_DWORD *)(v50 + 4);
        else
          v51 = 0;
        v52 = __CFADD__(v207, v51);
        v53 = v207 + v51;
        if (v52)
          v206 = 1;
        else
          v207 = v53;
        v54 = v18 & 0xFFFFFF0000000000;
        if (v50)
        {
          v55 = *(_QWORD *)(v50 + 8);
          v18 = *(unsigned int *)(v50 + 4) | ((unint64_t)((*(_DWORD *)(v50 + 16) >> 2) & 1) << 32) | v54;
          *(_DWORD *)v50 += 2;
        }
        else
        {
          v55 = 0;
          v18 = v54 | 0x100000000;
        }
        v214 = (WTF::StringImpl *)v50;
        *(_QWORD *)&v215 = v55;
        *((_QWORD *)&v215 + 1) = v18;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v70 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v70)
          {
            v59 = 1;
            v20 = 10;
            v21 = 24;
            goto LABEL_33;
          }
          v71 = (char *)v203 + 32 * HIDWORD(v204);
          v72 = *(_QWORD *)v70;
          *(_QWORD *)v70 = 0;
          *(_QWORD *)v71 = v72;
          *(_OWORD *)(v71 + 8) = *(_OWORD *)(v70 + 8);
          v57 = (__int16 *)(v71 + 24);
          v58 = (__int16 *)(v70 + 24);
          v20 = 10;
          v21 = 24;
        }
        else
        {
          v56 = (char *)v203 + 32 * HIDWORD(v204);
          v214 = 0;
          *(_QWORD *)v56 = v50;
          *(_OWORD *)(v56 + 8) = v215;
          v57 = (__int16 *)(v56 + 24);
          v58 = &v216;
        }
        v59 = 0;
        *v57 = *v58;
        ++HIDWORD(v204);
LABEL_33:
        v210 |= v59;
        v60 = v214;
        v214 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
            v21 = 24;
            v20 = 10;
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        v212 = 0;
        if (*(_DWORD *)(v32 + 80))
        {
          v104 = *(_DWORD *)(v32 + 80);
          if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
        }
        v61 = **(_QWORD **)(v10 + 24);
        if (*(_DWORD *)(v61 + 80))
        {
          v105 = *(_DWORD *)(v61 + 80);
          if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
          if (*(_QWORD *)(v61 + 16))
          {
            v168 = 0;
            v19 = (WTF *)v205;
            goto LABEL_92;
          }
        }
        v19 = (WTF *)((char *)v19 + 1);
        if (v19 == v29)
        {
          v28 = **(_QWORD **)(v10 + 16);
          v19 = (WTF *)v205;
          break;
        }
      }
    }
    if ((unint64_t)v29 < v28)
    {
      do
      {
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v214 = 0;
        *(_QWORD *)&v215 = 0;
        *((_QWORD *)&v215 + 1) = 0x100000000;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v119 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v119)
          {
            v109 = 1;
            goto LABEL_80;
          }
          v120 = (char *)v203 + 32 * HIDWORD(v204);
          v121 = *(_QWORD *)v119;
          *(_QWORD *)v119 = 0;
          *(_QWORD *)v120 = v121;
          *(_OWORD *)(v120 + 8) = *(_OWORD *)(v119 + 8);
          v107 = (__int16 *)(v120 + 24);
          v108 = (__int16 *)(v119 + 24);
        }
        else
        {
          v106 = (char *)v203 + 32 * HIDWORD(v204);
          *(_QWORD *)v106 = 0;
          *(_OWORD *)(v106 + 8) = v215;
          v107 = (__int16 *)(v106 + 24);
          v108 = &v216;
        }
        v109 = 0;
        *v107 = *v108;
        ++HIDWORD(v204);
LABEL_80:
        v210 |= v109;
        v110 = v214;
        v214 = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
          {
            WTF::StringImpl::~StringImpl(v110, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
          }
          else
          {
            *(_DWORD *)v110 -= 2;
          }
        }
        v212 = 0;
        v29 = (WTF *)((char *)v29 + 1);
      }
      while ((unint64_t)v29 < **(_QWORD **)(v10 + 16));
    }
    if (v208)
    {
      __break(0xC471u);
      JUMPOUT(0x198AE45F8);
    }
    v20 = **(_QWORD **)(v10 + 8);
    if (v209 != 1)
    {
      v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_92:
      if (HIDWORD(v204))
      {
        v122 = v203;
        v123 = 32 * HIDWORD(v204);
        do
        {
          v124 = *(WTF::StringImpl **)v122;
          *(_QWORD *)v122 = 0;
          if (v124)
          {
            if (*(_DWORD *)v124 == 2)
            {
              WTF::StringImpl::~StringImpl(v124, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v124 -= 2;
            }
          }
          v122 = (WTF *)((char *)v122 + 32);
          v123 -= 32;
        }
        while (v123);
      }
      v133 = v203;
      v134 = v19 == v203;
      goto LABEL_101;
    }
    v168 = v212;
    if (v212)
      goto LABEL_92;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE46ACLL);
    }
    v10 = *(_QWORD *)(v20 + 56);
    v38 = v203;
    v34 = *((unsigned int *)v203 + 4);
    v36 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v34 == *((_DWORD *)v36 + 1))
      {
        *(_DWORD *)v36 += 2;
LABEL_112:
        v214 = v36;
        goto LABEL_113;
      }
    }
    else
    {
LABEL_159:
      if (!(_DWORD)v34)
        goto LABEL_112;
    }
    v181 = (_BYTE *)*((_QWORD *)v38 + 1);
    if (*((_BYTE *)v38 + 20))
    {
      if (v181)
      {
        if ((_DWORD)v34)
        {
          if ((v34 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE46BCLL);
          }
          v182 = (int *)WTF::fastCompactMalloc((WTF *)(v34 + 20));
          v183 = v182 + 5;
          *v182 = 2;
          v182[1] = v34;
          *((_QWORD *)v182 + 1) = v182 + 5;
          v182[4] = 4;
          if ((_DWORD)v34 == 1)
          {
            *v183 = *v181;
LABEL_182:
            v214 = (WTF::StringImpl *)v182;
LABEL_113:
            v168 = JSC::jsString(v10, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v137 = v214;
            v214 = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 2)
              {
                WTF::StringImpl::~StringImpl(v137, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
              }
              else
              {
                *(_DWORD *)v137 -= 2;
              }
            }
            goto LABEL_92;
          }
          v193 = v181;
          v194 = v34;
          goto LABEL_181;
        }
        goto LABEL_177;
      }
    }
    else if (v181)
    {
      if ((_DWORD)v34)
      {
        if (v34 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198AE46C4);
        }
        v182 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v34 + 20));
        v183 = v182 + 5;
        *v182 = 2;
        v182[1] = v34;
        *((_QWORD *)v182 + 1) = v182 + 5;
        v182[4] = 0;
        if ((_DWORD)v34 == 1)
        {
          *(_WORD *)v183 = *(_WORD *)v181;
          goto LABEL_182;
        }
        v193 = v181;
        v194 = 2 * v34;
LABEL_181:
        memcpy(v183, v193, v194);
        goto LABEL_182;
      }
LABEL_177:
      v182 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_182;
    }
    v182 = 0;
    goto LABEL_182;
  }
  v201 = a2;
  v202 = a3;
  v203 = (WTF *)v205;
  v204 = 16;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = BYTE4(a3);
  v212 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
  v138 = **(_QWORD **)(v10 + 24);
  if (*(_DWORD *)(v138 + 80))
  {
    v184 = *(_DWORD *)(v138 + 80);
    if ((v184 & 0x27) != 0 && (v184 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v138 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v138 + 16))
    {
      v168 = 0;
      goto LABEL_136;
    }
  }
  if (**(_QWORD **)(v10 + 16))
  {
    for (i = 0; i < **(_QWORD **)(v10 + 16); ++i)
    {
      if (v209 == -1)
        v208 = 1;
      ++v209;
      v214 = 0;
      *(_QWORD *)&v215 = 0;
      *((_QWORD *)&v215 + 1) = 0x100000000;
      v216 = 0;
      if (HIDWORD(v204) == (_DWORD)v204)
      {
        v153 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
        if (!v153)
        {
          v143 = 1;
          goto LABEL_124;
        }
        v154 = (char *)v203 + 32 * HIDWORD(v204);
        v155 = *(_QWORD *)v153;
        *(_QWORD *)v153 = 0;
        *(_QWORD *)v154 = v155;
        *(_OWORD *)(v154 + 8) = *(_OWORD *)(v153 + 8);
        v141 = (__int16 *)(v154 + 24);
        v142 = (__int16 *)(v153 + 24);
      }
      else
      {
        v140 = (char *)v203 + 32 * HIDWORD(v204);
        *(_QWORD *)v140 = 0;
        *(_OWORD *)(v140 + 8) = v215;
        v141 = (__int16 *)(v140 + 24);
        v142 = &v216;
      }
      v143 = 0;
      *v141 = *v142;
      ++HIDWORD(v204);
LABEL_124:
      v210 |= v143;
      v144 = v214;
      v214 = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
        {
          WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        }
        else
        {
          *(_DWORD *)v144 -= 2;
        }
      }
      v212 = 0;
    }
  }
  if (v208)
  {
    __break(0xC471u);
    JUMPOUT(0x198AE46A4);
  }
  v20 = **(_QWORD **)(v10 + 8);
  if (v209 == 1)
  {
    v168 = v212;
    if (v212)
      goto LABEL_136;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE46B4);
    }
    v169 = *(_QWORD *)(v20 + 56);
    v170 = *((unsigned int *)v203 + 4);
    v171 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v170 == *((_DWORD *)v171 + 1))
      {
        *(_DWORD *)v171 += 2;
LABEL_153:
        v214 = v171;
        goto LABEL_154;
      }
    }
    else if (!(_DWORD)v170)
    {
      goto LABEL_153;
    }
    v195 = (_BYTE *)*((_QWORD *)v203 + 1);
    if (*((_BYTE *)v203 + 20))
    {
      if (v195)
      {
        if ((_DWORD)v170)
        {
          if ((v170 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE46CCLL);
          }
          v196 = (int *)WTF::fastCompactMalloc((WTF *)(v170 + 20));
          v197 = v196 + 5;
          *v196 = 2;
          v196[1] = v170;
          *((_QWORD *)v196 + 1) = v196 + 5;
          v196[4] = 4;
          if ((_DWORD)v170 == 1)
          {
            *v197 = *v195;
LABEL_204:
            v214 = (WTF::StringImpl *)v196;
LABEL_154:
            v168 = JSC::jsString(v169, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v172 = v214;
            v214 = 0;
            if (v172)
            {
              if (*(_DWORD *)v172 == 2)
              {
                WTF::StringImpl::~StringImpl(v172, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
              }
              else
              {
                *(_DWORD *)v172 -= 2;
              }
            }
            goto LABEL_136;
          }
          v198 = v195;
          v199 = v170;
          goto LABEL_203;
        }
        goto LABEL_200;
      }
    }
    else if (v195)
    {
      if ((_DWORD)v170)
      {
        if (v170 > 0x7FFFFFEF)
        {
LABEL_211:
          __break(0xC471u);
          JUMPOUT(0x198AE45F0);
        }
        v196 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v170 + 20));
        v197 = v196 + 5;
        *v196 = 2;
        v196[1] = v170;
        *((_QWORD *)v196 + 1) = v196 + 5;
        v196[4] = 0;
        if ((_DWORD)v170 == 1)
        {
          *(_WORD *)v197 = *(_WORD *)v195;
          goto LABEL_204;
        }
        v198 = v195;
        v199 = 2 * v170;
LABEL_203:
        memcpy(v197, v198, v199);
        goto LABEL_204;
      }
LABEL_200:
      v196 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_204;
    }
    v196 = 0;
    goto LABEL_204;
  }
  v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_136:
  if (HIDWORD(v204))
  {
    v156 = v203;
    v157 = 32 * HIDWORD(v204);
    do
    {
      v158 = *(WTF::StringImpl **)v156;
      *(_QWORD *)v156 = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
        {
          WTF::StringImpl::~StringImpl(v158, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
        }
        else
        {
          *(_DWORD *)v158 -= 2;
        }
      }
      v156 = (WTF *)((char *)v156 + 32);
      v157 -= 32;
    }
    while (v157);
  }
  v133 = v203;
  v134 = v205 == (_BYTE *)v203;
LABEL_101:
  if (!v134 && v133 != 0)
  {
    v203 = 0;
    LODWORD(v204) = 0;
    WTF::fastFree((unint64_t)v133, (void *)v20, v21, v22, v23, v24, v25, v26);
  }
  return v168;
}

